uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsAudioDecoderSupport>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t (***WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioDecoder>(uint64_t (**a1)(), uint64_t (***a2)()))()
{
  uint64_t v4;
  uint64_t (*v5)();
  int v7;
  uint64_t (*v8)();
  int v10;
  uint64_t (**v11)();
  uint64_t (***result)();
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t (***v17)();

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = a1[3];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  *(_QWORD *)(v4 + 8) = a1;
  v8 = a1[3];
  a1[2] = (uint64_t (*)())((char *)a1[2] + 1);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_14:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = *a2;
  *a2 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E336CEC8;
  result[1] = a1;
  result[2] = (uint64_t (**)())v4;
  result[3] = v11;
  v17 = result;
  v13 = a1[1];
  if (!v13)
  {
    v17 = 0;
    v16 = &off_1E336CEC8;
    return (uint64_t (***)())v16[1]();
  }
  v14 = *((_QWORD *)v13 + 1);
  if (!v14)
  {
    v17 = 0;
    goto LABEL_24;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v15, 9, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_24:
    v16 = *result;
    return (uint64_t (***)())v16[1]();
  }
  return result;
}

uint64_t WebCore::WebCodecsAudioDecoder::stop(WebCore::WebCodecsAudioDecoder *this)
{
  uint64_t result;

  *((_DWORD *)this + 14) = 2;
  result = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::WebCodecsAudioDecoder::virtualHasPendingActivity(WebCore::WebCodecsAudioDecoder *this)
{
  if (*((_DWORD *)this + 14) != 1)
    return 0;
  if (*((_QWORD *)this + 8) || *((_QWORD *)this + 9))
    return 1;
  return *((_BYTE *)this + 193) != 0;
}

_QWORD *WebCore::WebCodecsAudioEncoder::create@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v6 = bmalloc::api::isoAllocate();
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v6 + 24) = v7;
  if (!*(_BYTE *)(a1 + 274))
  {
    v8 = a1 - 192;
    v9 = *(_QWORD *)(a1 + 512);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    a1 = v8 + 192;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v6 = &off_1E33A0540;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195582BB8);
  }
  v14 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v14, (uint64_t)&v13);
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E336C8E0;
  *(_QWORD *)(v6 + 32) = &unk_1E336C958;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v6 + 80) = v11;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_BYTE *)(v6 + 224) = 0;
  *(_BYTE *)(v6 + 232) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 137) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_BYTE *)(v6 + 192) = 0;
  *(_DWORD *)(v6 + 240) = 1;
  *(_BYTE *)(v6 + 248) = 0;
  *(_BYTE *)(v6 + 296) = 0;
  *(_WORD *)(v6 + 304) = 0;
  *(_BYTE *)(v6 + 312) = 0;
  *(_BYTE *)(v6 + 328) = 0;
  *(_QWORD *)(v6 + 336) = 0;
  *(_BYTE *)(v6 + 344) = 0;
  *(_BYTE *)(v6 + 352) = 0;
  *(_BYTE *)(v6 + 360) = 0;
  *(_BYTE *)(v6 + 368) = 0;
  *(_BYTE *)(v6 + 376) = 0;
  *(_BYTE *)(v6 + 384) = 0;
  *(_BYTE *)(v6 + 392) = 0;
  *(_BYTE *)(v6 + 408) = 0;
  *(_WORD *)(v6 + 416) = 0;
  *a3 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6);
}

void WebCore::WebCodecsAudioEncoder::~WebCodecsAudioEncoder(WebCore::WebCodecsAudioEncoder *this, void *a2)
{
  WebCore::EventTarget *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD **v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  void *v31;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;

  *(_QWORD *)this = &off_1E336C8E0;
  *((_QWORD *)this + 4) = &unk_1E336C958;
  v3 = (WebCore::WebCodecsAudioEncoder *)((char *)this + 32);
  if (*((_BYTE *)this + 408))
  {
    v4 = (WTF *)*((_QWORD *)this + 49);
    if (v4)
    {
      *((_QWORD *)this + 49) = 0;
      *((_DWORD *)this + 100) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 20);
  v8 = *((_QWORD *)this + 21);
  v9 = (WTF *)*((_QWORD *)this + 22);
  if (v7 <= v8)
  {
    if (v7 == v8)
      goto LABEL_29;
    v16 = (uint64_t *)((char *)v9 + 8 * v7);
    v17 = 8 * v8 - 8 * v7;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  else
  {
    if (v8)
    {
      v10 = 8 * v8;
      do
      {
        v11 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
      v9 = (WTF *)*((_QWORD *)this + 22);
      v7 = *((_QWORD *)this + 20);
    }
    v12 = *((unsigned int *)this + 46);
    if (v7 != v12)
    {
      v13 = (uint64_t *)((char *)v9 + 8 * v7);
      v14 = 8 * v12 - 8 * v7;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  v9 = (WTF *)*((_QWORD *)this + 22);
LABEL_29:
  if (v9)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v9, a2);
  }
  v19 = *((_QWORD *)this + 14);
  v20 = *((_QWORD *)this + 15);
  v21 = (WTF *)*((_QWORD *)this + 16);
  if (v19 <= v20)
  {
    if (v19 == v20)
      goto LABEL_50;
    v24 = (_DWORD **)((char *)v21 + 8 * v19);
    v25 = 8 * v20 - 8 * v19;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        if (v26[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
        else
          --v26[4];
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  else
  {
    if (v20)
    {
      v22 = 8 * v20;
      do
      {
        v23 = *(_DWORD **)v21;
        *(_QWORD *)v21 = 0;
        if (v23)
        {
          if (v23[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
          else
            --v23[4];
        }
        v21 = (WTF *)((char *)v21 + 8);
        v22 -= 8;
      }
      while (v22);
      v21 = (WTF *)*((_QWORD *)this + 16);
      v19 = *((_QWORD *)this + 14);
    }
    v27 = *((unsigned int *)this + 34);
    if (v19 != v27)
    {
      v32 = (_DWORD **)((char *)v21 + 8 * v19);
      v33 = 8 * v27 - 8 * v19;
      do
      {
        v34 = *v32;
        *v32 = 0;
        if (v34)
        {
          if (v34[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
          else
            --v34[4];
        }
        ++v32;
        v33 -= 8;
      }
      while (v33);
    }
  }
  v21 = (WTF *)*((_QWORD *)this + 16);
LABEL_50:
  if (v21)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v21, a2);
  }
  v28 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v29)
  {
    if (v29[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
    else
      --v29[4];
  }
  v30 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v30)
  {
    if (v30[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
    else
      --v30[4];
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v31);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsAudioEncoder::~WebCodecsAudioEncoder(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::WebCodecsAudioEncoder::~WebCodecsAudioEncoder(WebCore::WebCodecsAudioEncoder *this, void *a2)
{
  WebCore::WebCodecsAudioEncoder::~WebCodecsAudioEncoder((WebCore::WebCodecsAudioEncoder *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsAudioEncoder::~WebCodecsAudioEncoder((WebCore::WebCodecsAudioEncoder *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::WebCodecsAudioEncoder::configure@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const WTF::StringView *v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char isSupportedEncoderCodec;
  _DWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t result;
  char v34;
  uint64_t v35;
  _BYTE v36[47];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((WebCore::isValidEncoderConfig(a2) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = 33;
LABEL_21:
    *(_BYTE *)a3 = v34;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if (*(_DWORD *)(a1 + 56) == 2 || (v7 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v7 + 8))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = 8;
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 152) = 1;
  if (*(_QWORD *)(a1 + 96))
  {
    v8 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v8 += 2;
    v9 = *(_OWORD *)(a2 + 72);
    v10 = *(_OWORD *)(a2 + 104);
    v42 = *(_OWORD *)(a2 + 88);
    v43[0] = v10;
    *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a2 + 113);
    v11 = *(_OWORD *)(a2 + 24);
    v37 = *(_OWORD *)(a2 + 8);
    v38 = v11;
    v12 = *(_OWORD *)(a2 + 56);
    v39 = *(_OWORD *)(a2 + 40);
    v40 = v12;
    v41 = v9;
    v13 = WTF::fastMalloc((WTF *)0x98);
    *(_QWORD *)v13 = &off_1E336CF28;
    *(_QWORD *)(v13 + 8) = a1;
    *(_QWORD *)(v13 + 16) = v8;
    v14 = v37;
    *(_OWORD *)(v13 + 88) = v41;
    *(_OWORD *)(v13 + 104) = v42;
    *(_OWORD *)(v13 + 120) = v43[0];
    *(_OWORD *)(v13 + 129) = *(_OWORD *)((char *)v43 + 9);
    *(_OWORD *)(v13 + 24) = v14;
    *(_OWORD *)(v13 + 40) = v38;
    *(_OWORD *)(v13 + 56) = v39;
    *(_OWORD *)(v13 + 72) = v40;
    *(_QWORD *)v36 = v13;
    WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, v36);
    if (*(_QWORD *)v36)
      (*(void (**)(_QWORD))(**(_QWORD **)v36 + 8))(*(_QWORD *)v36);
  }
  *(_QWORD *)&v37 = 0;
  v15 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v16 = *((unsigned __int8 *)v15 + 16);
    v17 = *((_QWORD *)v15 + 1);
    LODWORD(v15) = v15[1];
    *(_QWORD *)&v37 = v17;
    v18 = (v16 >> 2) & 1;
  }
  else
  {
    LOBYTE(v18) = 1;
  }
  DWORD2(v37) = (_DWORD)v15;
  BYTE12(v37) = v18;
  isSupportedEncoderCodec = WebCore::isSupportedEncoderCodec((const char **)&v37, v6);
  v20 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v21 = *(_OWORD *)(a2 + 72);
  v22 = *(_OWORD *)(a2 + 104);
  v42 = *(_OWORD *)(a2 + 88);
  v43[0] = v22;
  *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)(a2 + 113);
  v23 = *(_OWORD *)(a2 + 24);
  v37 = *(_OWORD *)(a2 + 8);
  v38 = v23;
  v24 = *(_OWORD *)(a2 + 56);
  v39 = *(_OWORD *)(a2 + 40);
  v40 = v24;
  v41 = v21;
  v25 = *(_QWORD *)(a1 + 8);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
      v25 = v26 - 96;
    else
      v25 = 0;
  }
  v27 = *(_OWORD *)(v25 + 240);
  *(_OWORD *)&v36[15] = *(_OWORD *)(v25 + 224);
  *(_OWORD *)&v36[31] = v27;
  v28 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v28 = &off_1E336CF78;
  *(_QWORD *)(v28 + 16) = a1;
  *(_QWORD *)(v28 + 24) = v20;
  *(_OWORD *)(v28 + 96) = v41;
  v29 = v43[0];
  *(_OWORD *)(v28 + 112) = v42;
  *(_OWORD *)(v28 + 128) = v29;
  *(_OWORD *)(v28 + 137) = *(_OWORD *)((char *)v43 + 9);
  v30 = v38;
  *(_OWORD *)(v28 + 32) = v37;
  *(_OWORD *)(v28 + 48) = v30;
  v31 = v40;
  *(_OWORD *)(v28 + 64) = v39;
  *(_OWORD *)(v28 + 80) = v31;
  v32 = *(_OWORD *)&v36[16];
  *(_OWORD *)(v28 + 161) = *(_OWORD *)v36;
  *(_BYTE *)(v28 + 160) = isSupportedEncoderCodec;
  *(_QWORD *)(v28 + 192) = *(_QWORD *)&v36[31];
  *(_OWORD *)(v28 + 177) = v32;
  v35 = v28;
  WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v35);
  result = v35;
  if (v35)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WebCore::isValidEncoderConfig(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  int v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  void *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  BOOL v34;
  BOOL v35;
  float v36;
  BOOL v39;
  float v40;
  BOOL v41;
  float v42;
  float v45;
  float v46;
  BOOL v47;
  BOOL v48;
  float v49;
  BOOL v52;
  float v53;
  float v56;
  float v57;
  BOOL v58;
  float v63;
  float v64;
  BOOL v65;
  float v70;
  BOOL v71;
  float v72;
  BOOL v73;
  float v74;
  float v75;
  BOOL v76;
  BOOL v77;
  float v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;

  v1 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    return 0;
  v2 = result;
  v6 = *(unsigned int *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned int *)(v1 + 4);
  v5 = (v6 >> 2) & 1;
  LODWORD(v6) = v4;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v4)
    {
      v7 = 0;
      while (1)
      {
        v8 = *(unsigned __int8 *)(v3 + v7);
        v35 = v8 > 0x20;
        v9 = (1 << v8) & 0x100003600;
        if (v35 || v9 == 0)
          break;
        if (v4 == ++v7)
          return 0;
      }
      if ((_DWORD)v4 != 1)
      {
        v11 = (v4 - 1);
        while (v11 < v4)
        {
          v12 = *(unsigned __int8 *)(v3 + v11);
          v35 = v12 > 0x20;
          v13 = (1 << v12) & 0x100003600;
          if (!v35 && v13 != 0)
          {
            if ((_DWORD)--v11)
              continue;
          }
          if (!(_DWORD)v7 && (_DWORD)v11 == (_DWORD)v4 - 1)
            goto LABEL_41;
          goto LABEL_21;
        }
        goto LABEL_233;
      }
      if ((_DWORD)v7)
      {
        LODWORD(v11) = 0;
LABEL_21:
        v6 = (v11 - v7 + 1);
        if (v4 - v7 < v6)
          goto LABEL_233;
      }
    }
  }
  else if ((_DWORD)v4)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(unsigned __int16 *)(v3 + 2 * v15);
      v35 = v16 > 0x20;
      v17 = (1 << v16) & 0x100003600;
      if (v35 || v17 == 0)
        break;
      if (v4 == ++v15)
        return 0;
    }
    if ((_DWORD)v4 != 1)
    {
      v19 = (v4 - 1);
      while (v19 < v4)
      {
        v20 = *(unsigned __int16 *)(v3 + 2 * v19);
        v35 = v20 > 0x20;
        v21 = (1 << v20) & 0x100003600;
        if (!v35 && v21 != 0)
        {
          if ((_DWORD)--v19)
            continue;
        }
        if ((_DWORD)v15 || (_DWORD)v19 != (_DWORD)v4 - 1)
          goto LABEL_232;
        goto LABEL_41;
      }
      goto LABEL_233;
    }
    if ((_DWORD)v15)
    {
      LODWORD(v19) = 0;
LABEL_232:
      v6 = (v19 - v15 + 1);
      if (v4 - v15 < v6)
      {
LABEL_233:
        __break(1u);
        return result;
      }
    }
  }
LABEL_41:
  if (!(_DWORD)v6)
    return 0;
  if (!*(_BYTE *)(result + 96))
    goto LABEL_67;
  v23 = *(_QWORD *)(result + 64);
  v24 = *(unsigned __int8 *)(result + 72);
  v25 = *(_QWORD *)(result + 80);
  v26 = (double)*(unint64_t *)(result + 56) / 1000.0;
  v27 = WTF::fastMalloc((WTF *)0x1C);
  *(_OWORD *)v27 = xmmword_1968DF1F0;
  *(_QWORD *)(v27 + 16) = 0x4270000042200000;
  *(_DWORD *)(v27 + 24) = 1123024896;
  v29 = v26;
  v30 = fabsf(v29);
  v31 = v30 * 1.1755e-38;
  if (v30 >= 1.0)
  {
    if (v29 == 2.5)
      goto LABEL_61;
    v40 = vabds_f32(2.5, v29);
    if (v40 < 2.9387e-38 || (float)(v40 / 2.5) <= 0.00000011921)
    {
      v41 = v31 <= v40 || v30 <= 1.0;
      v42 = v40 / v30;
      if (!v41 || v42 <= 0.00000011921 || v29 == 5.0)
        goto LABEL_61;
    }
    else if (v29 == 5.0)
    {
      goto LABEL_61;
    }
    v45 = vabds_f32(5.0, v29);
    if (v45 < 5.8775e-38 || (float)(v45 / 5.0) <= 0.00000011921)
    {
      v52 = v31 <= v45 || v30 <= 1.0;
      v53 = v45 / v30;
      if (!v52 || v53 <= 0.00000011921 || v29 == 10.0)
        goto LABEL_61;
    }
    else if (v29 == 10.0)
    {
      goto LABEL_61;
    }
    v56 = vabds_f32(10.0, v29);
    if (v56 < 1.1755e-37 || (float)(v56 / 10.0) <= 0.00000011921)
    {
      if (v31 > v56 && v30 > 1.0)
        goto LABEL_61;
      if ((float)(v56 / v30) <= 0.00000011921 || v29 == 20.0)
        goto LABEL_61;
    }
    else if (v29 == 20.0)
    {
      goto LABEL_61;
    }
    v63 = vabds_f32(20.0, v29);
    if (v63 < 2.351e-37 || (float)(v63 / 20.0) <= 0.00000011921)
    {
      if (v31 > v63 && v30 > 1.0)
        goto LABEL_61;
      if ((float)(v63 / v30) <= 0.00000011921 || v29 == 40.0)
        goto LABEL_61;
    }
    else if (v29 == 40.0)
    {
      goto LABEL_61;
    }
    v70 = vabds_f32(40.0, v29);
    if (v70 >= 4.702e-37 && (float)(v70 / 40.0) > 0.00000011921
      || (v31 > v70 ? (v71 = v30 <= 1.0) : (v71 = 1), v71 && (float)(v70 / v30) > 0.00000011921))
    {
      if (v29 != 60.0)
      {
        if ((v72 = vabds_f32(60.0, v29), v72 >= 7.053e-37) && (float)(v72 / 60.0) > 0.00000011921
          || (v31 > v72 ? (v73 = v30 <= 1.0) : (v73 = 1), v73 && (float)(v72 / v30) > 0.00000011921))
        {
          if (v29 != 120.0)
          {
            v74 = vabds_f32(120.0, v29);
            if (v74 >= 1.4106e-36 && (float)(v74 / 120.0) > 0.00000011921)
            {
LABEL_225:
              WTF::fastFree((WTF *)v27, v28);
              return 0;
            }
            goto LABEL_219;
          }
        }
      }
    }
  }
  else
  {
    if (v29 == 2.5)
      goto LABEL_61;
    v32 = v30 * 3.4028e38;
    v33 = vabds_f32(2.5, v29);
    v34 = v33 >= 2.9387e-38;
    if ((float)(v33 / 2.5) <= 0.00000011921)
      v34 = 0;
    if (v32 < v33 || v34)
    {
      if (v29 == 5.0)
        goto LABEL_61;
    }
    else
    {
      v35 = v31 <= v33 || v30 <= 1.0;
      v36 = v33 / v30;
      if (!v35 || v36 <= 0.00000011921 || v29 == 5.0)
        goto LABEL_61;
    }
    v46 = vabds_f32(5.0, v29);
    v47 = v46 >= 5.8775e-38;
    if ((float)(v46 / 5.0) <= 0.00000011921)
      v47 = 0;
    if (v32 < v46 || v47)
    {
      if (v29 == 10.0)
        goto LABEL_61;
    }
    else
    {
      v48 = v31 <= v46 || v30 <= 1.0;
      v49 = v46 / v30;
      if (!v48 || v49 <= 0.00000011921 || v29 == 10.0)
        goto LABEL_61;
    }
    v57 = vabds_f32(10.0, v29);
    v58 = v57 >= 1.1755e-37;
    if ((float)(v57 / 10.0) <= 0.00000011921)
      v58 = 0;
    if (v32 < v57 || v58)
    {
      if (v29 == 20.0)
        goto LABEL_61;
    }
    else
    {
      if (v31 > v57 && v30 > 1.0)
        goto LABEL_61;
      if ((float)(v57 / v30) <= 0.00000011921 || v29 == 20.0)
        goto LABEL_61;
    }
    v64 = vabds_f32(20.0, v29);
    v65 = v64 >= 2.351e-37;
    if ((float)(v64 / 20.0) <= 0.00000011921)
      v65 = 0;
    if (v32 < v64 || v65)
    {
      if (v29 == 40.0)
        goto LABEL_61;
    }
    else
    {
      if (v31 > v64 && v30 > 1.0)
        goto LABEL_61;
      if ((float)(v64 / v30) <= 0.00000011921 || v29 == 40.0)
        goto LABEL_61;
    }
    v75 = vabds_f32(40.0, v29);
    v76 = v75 >= 4.702e-37;
    if ((float)(v75 / 40.0) <= 0.00000011921)
      v76 = 0;
    if (v32 < v75 || v76 || (v31 > v75 ? (v77 = v30 <= 1.0) : (v77 = 1), v77 && (float)(v75 / v30) > 0.00000011921))
    {
      if (v29 != 60.0)
      {
        v78 = vabds_f32(60.0, v29);
        v79 = v78 >= 7.053e-37;
        if ((float)(v78 / 60.0) <= 0.00000011921)
          v79 = 0;
        if (v32 < v78 || v79 || (v31 > v78 ? (v80 = v30 <= 1.0) : (v80 = 1), v80 && (float)(v78 / v30) > 0.00000011921))
        {
          if (v29 != 120.0)
          {
            v74 = vabds_f32(120.0, v29);
            v81 = v74 >= 1.4106e-36;
            if ((float)(v74 / 120.0) <= 0.00000011921)
              v81 = 0;
            if (v32 < v74 || v81)
              goto LABEL_225;
LABEL_219:
            v82 = v31 <= v74 || v30 <= 1.0;
            if (v82 && (float)(v74 / v30) > 0.00000011921)
              goto LABEL_225;
          }
        }
      }
    }
  }
LABEL_61:
  WTF::fastFree((WTF *)v27, v28);
  result = 0;
  v39 = v23 < 0xB || v24 == 0;
  if (v39 && v25 <= 0x64)
  {
LABEL_67:
    if (!*(_BYTE *)(v2 + 128))
      return 1;
    result = 0;
    if ((unint64_t)(*(_QWORD *)(v2 + 112) - 16) >> 4 <= 0xFFE && *(_QWORD *)(v2 + 120) <= 8uLL)
      return 1;
  }
  return result;
}

uint64_t WebCore::WebCodecsAudioEncoder::scriptExecutionContext(WebCore::WebCodecsAudioEncoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::isSupportedEncoderCodec(const char **this, const WTF::StringView *a2)
{
  const char *v2;
  const char *v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  char v8;
  char v10;
  BOOL v12;
  _BOOL4 v13;
  BOOL v15;
  char v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;

  v2 = *this;
  v3 = this[1];
  v4 = (_DWORD)v3 != 9;
  if (*this != "mp4a.40.2" && (_DWORD)v3 == 9)
  {
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_DWORD *)(v2 + 1) == 778122352 && *(_DWORD *)(v2 + 5) == 841887796)
        return 1;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF200);
      v17.i16[0] = vminvq_u16(v17);
      v5 = v17.i8[0];
      if (v17.i32[0])
        return 1;
      goto LABEL_8;
    }
    v5 = 0;
LABEL_8:
    v6 = 1;
    goto LABEL_20;
  }
  if (v2 == "mp4a.40.2" && (_DWORD)v3 == 9)
    return 1;
  v5 = (_DWORD)v3 == 10;
  v6 = (_DWORD)v3 != 10;
  if (v2 == "mp4a.40.02" || (_DWORD)v3 != 10)
  {
    if (v2 == "mp4a.40.02" && (_DWORD)v3 == 10)
      return 1;
  }
  else
  {
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x302E30342E613470 && *(_QWORD *)(v2 + 2) == 0x32302E30342E6134)
        return 1;
      goto LABEL_19;
    }
    if (*(_WORD *)v2 != 109)
    {
LABEL_19:
      v6 = 0;
      goto LABEL_20;
    }
    v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF210);
    v19.i16[0] = vminvq_u16(v19);
    v6 = v19.i8[0];
    if (v19.i32[0])
    {
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF220);
      v20.i16[0] = vminvq_u16(v20);
      v6 = v20.i8[0];
      if (v20.i32[0])
        return 1;
    }
  }
LABEL_20:
  if (v2 == "mp4a.40.5")
    v4 = 1;
  if (v4)
  {
    if (v2 == "mp4a.40.5" && (_DWORD)v3 == 9)
      return 1;
  }
  else if (((unint64_t)v3 & 0xFF00000000) != 0)
  {
    if (*v2 == 109 && *(_DWORD *)(v2 + 1) == 778122352 && *(_DWORD *)(v2 + 5) == 892219444)
      return 1;
  }
  else if (*(_WORD *)v2 == 109)
  {
    v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF230);
    v18.i16[0] = vminvq_u16(v18);
    if (v18.i32[0])
      return 1;
  }
  v8 = v2 == "mp4a.40.05" || v6;
  if ((v8 & 1) != 0)
  {
    if (v2 == "mp4a.40.05" && v5)
      return 1;
  }
  else
  {
    if (!(_DWORD)v3)
      return 1;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x302E30342E613470 && *(_QWORD *)(v2 + 2) == 0x35302E30342E6134)
        return 1;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF210);
      v21.i16[0] = vminvq_u16(v21);
      if (v21.i32[0])
      {
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF240);
        v22.i16[0] = vminvq_u16(v22);
        if (v22.i32[0])
          return 1;
      }
    }
  }
  v10 = v2 == "mp4a.40.29" || v6;
  if ((v10 & 1) != 0)
  {
    if (v2 == "mp4a.40.29" && v5)
      return 1;
  }
  else
  {
    if (!(_DWORD)v3)
      return 1;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x322E30342E613470 && *(_QWORD *)(v2 + 2) == 0x39322E30342E6134)
        return 1;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF200);
      v23.i16[0] = vminvq_u16(v23);
      if (v23.i32[0])
      {
        v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF250);
        v24.i16[0] = vminvq_u16(v24);
        if (v24.i32[0])
          return 1;
      }
    }
  }
  if (v2 == "mp4a.40.42")
    v6 = 1;
  if (v6)
  {
    if (v2 != "mp4a.40.42")
      v5 = 0;
    if (v5)
      return 1;
  }
  else
  {
    if (!(_DWORD)v3)
      return 1;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_QWORD *)(v2 + 1) == 0x342E30342E613470 && *(_QWORD *)(v2 + 2) == 0x32342E30342E6134)
        return 1;
    }
    else if (*(_WORD *)v2 == 109)
    {
      v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1968DF260);
      v25.i16[0] = vminvq_u16(v25);
      if (v25.i32[0])
      {
        v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 4), (int16x8_t)xmmword_1968DF270);
        v26.i16[0] = vminvq_u16(v26);
        if (v26.i32[0])
          return 1;
      }
    }
  }
  if (v2 != "mp3" && (_DWORD)v3 == 3)
  {
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 109 && *(_WORD *)(v2 + 1) == 13168)
        return 1;
    }
    else if (*(_WORD *)v2 == 109 && *(_DWORD *)(v2 + 2) == 3342448)
    {
      return 1;
    }
    v12 = 0;
    v13 = v2 == "vorbis";
    goto LABEL_76;
  }
  if (v2 == "mp3" && (_DWORD)v3 == 3)
    return 1;
  v15 = (_DWORD)v3 != 4;
  if (v2 == "opus" || (_DWORD)v3 != 4)
  {
    if (v2 == "opus" && (_DWORD)v3 == 4)
      return 1;
  }
  else
  {
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 111 && *(_WORD *)(v2 + 1) == 30064 && *((_WORD *)v2 + 1) == 29557)
        return 1;
      goto LABEL_87;
    }
    if (*(_WORD *)v2 != 111)
    {
LABEL_87:
      v15 = 0;
      goto LABEL_88;
    }
    v15 = 0;
    if (*(_DWORD *)(v2 + 2) == 7667824 && *((_DWORD *)v2 + 1) == 7536757)
      return 1;
  }
LABEL_88:
  if (v2 == "alaw" || v15)
  {
    if (v2 == "alaw" && (_DWORD)v3 == 4)
      return 1;
  }
  else
  {
    if (!(_DWORD)v3)
      return 1;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 97 && *(_WORD *)(v2 + 1) == 24940 && *((_WORD *)v2 + 1) == 30561)
        return 1;
    }
    else if (*(_WORD *)v2 == 97 && *(_DWORD *)(v2 + 2) == 6357100 && *((_DWORD *)v2 + 1) == 7798881)
    {
      return 1;
    }
  }
  v16 = v2 == "ulaw" || v15;
  if ((v16 & 1) != 0)
  {
    if (v2 == "ulaw" && (_DWORD)v3 == 4)
      return 1;
  }
  else
  {
    if (!(_DWORD)v3)
      return 1;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 117 && *(_WORD *)(v2 + 1) == 24940 && *((_WORD *)v2 + 1) == 30561)
        return 1;
    }
    else if (*(_WORD *)v2 == 117 && *(_DWORD *)(v2 + 2) == 6357100 && *((_DWORD *)v2 + 1) == 7798881)
    {
      return 1;
    }
  }
  if (v2 == "flac")
    v15 = 1;
  if (v15)
  {
    if (v2 == "flac" && (_DWORD)v3 == 4)
      return 1;
  }
  else
  {
    if (!(_DWORD)v3)
      return 1;
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 == 102 && *(_WORD *)(v2 + 1) == 24940 && *((_WORD *)v2 + 1) == 25441)
        return 1;
    }
    else if (*(_WORD *)v2 == 102 && *(_DWORD *)(v2 + 2) == 6357100 && *((_DWORD *)v2 + 1) == 6488161)
    {
      return 1;
    }
  }
  v12 = (_DWORD)v3 == 6;
  v13 = v2 == "vorbis";
  if (v2 != "vorbis" && (_DWORD)v3 == 6)
  {
    if (((unint64_t)v3 & 0xFF00000000) != 0)
    {
      if (*v2 != 118 || *(_DWORD *)(v2 + 1) != 1768059503 || *(_DWORD *)(v2 + 2) != 1936286322)
        return WTF::StringView::startsWith();
    }
    else if (*(_WORD *)v2 != 118
           || *(_QWORD *)(v2 + 2) != 0x6900620072006FLL
           || *(_QWORD *)(v2 + 4) != 0x73006900620072)
    {
      return WTF::StringView::startsWith();
    }
    return 1;
  }
LABEL_76:
  if (!v13 || !v12)
    return WTF::StringView::startsWith();
  return 1;
}

uint64_t (**WebCore::WebCodecsAudioEncoder::encode@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>))()
{
  unsigned int *v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t (**result)();
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t (**v33)();

  v4 = *(unsigned int **)(*a2 + 24);
  if (!v4)
  {
    result = (uint64_t (**)())WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v7 = v4 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    if (*(_BYTE *)(a1 + 368)
      && (v9 = *(_QWORD *)(a1 + 360), v9 != (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 32))(v4)))
    {
      v18 = *a2;
      v19 = *(unsigned int **)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      if (v19)
      {
        v20 = v19 + 2;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v19 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      *(_BYTE *)(v18 + 32) = 1;
      v23 = WTF::fastMalloc((WTF *)0x10);
      v24 = off_1E336D0B8;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 352)
        || (v10 = *(_QWORD *)(a1 + 344), v10 == (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4)))
      {
        ++*(_QWORD *)(a1 + 64);
        v11 = *(_QWORD *)(*a2 + 24);
        if (v11)
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
          v13 = *(_QWORD *)(*a2 + 24);
          if (v13)
          {
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
            v16 = v15;
LABEL_33:
            v32 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v32 = &off_1E336D108;
            *(_QWORD *)(v32 + 8) = a1;
            *(_QWORD *)(v32 + 16) = v4;
            *(_QWORD *)(v32 + 24) = v12;
            *(_QWORD *)(v32 + 32) = v14;
            *(_BYTE *)(v32 + 40) = v16;
            v33 = (uint64_t (**)())v32;
            WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v33);
            result = v33;
            if (v33)
              result = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*v33 + 1))(v33);
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            return result;
          }
        }
        else
        {
          v12 = 0;
        }
        v14 = 0;
        v16 = 0;
        goto LABEL_33;
      }
      v25 = *a2;
      v26 = *(unsigned int **)(v25 + 24);
      *(_QWORD *)(v25 + 24) = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      *(_BYTE *)(v25 + 32) = 1;
      v23 = WTF::fastMalloc((WTF *)0x10);
      v24 = off_1E336D0E0;
    }
    *(_QWORD *)v23 = v24;
    *(_QWORD *)(v23 + 8) = a1;
    v33 = (uint64_t (**)())v23;
    WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>((uint64_t (**)())a1, &v33);
    result = v33;
    if (v33)
      result = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*v33 + 1))(v33);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    result = (uint64_t (**)())WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
  }
  do
  {
    v30 = __ldaxr(v7);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v7));
  if (!v31)
  {
    atomic_store(1u, v4 + 2);
    return (uint64_t (**)())(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t (***WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>(uint64_t (**a1)(), uint64_t (***a2)()))()
{
  uint64_t v4;
  uint64_t (*v5)();
  int v7;
  uint64_t (*v8)();
  int v10;
  uint64_t (**v11)();
  uint64_t (***result)();
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t (***v17)();

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = a1[3];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  *(_QWORD *)(v4 + 8) = a1;
  v8 = a1[3];
  a1[2] = (uint64_t (*)())((char *)a1[2] + 1);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_14:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = *a2;
  *a2 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E336D090;
  result[1] = a1;
  result[2] = (uint64_t (**)())v4;
  result[3] = v11;
  v17 = result;
  v13 = a1[1];
  if (!v13)
  {
    v17 = 0;
    v16 = &off_1E336D090;
    return (uint64_t (***)())v16[1]();
  }
  v14 = *((_QWORD *)v13 + 1);
  if (!v14)
  {
    v17 = 0;
    goto LABEL_24;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v15, 9, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_24:
    v16 = *result;
    return (uint64_t (***)())v16[1]();
  }
  return result;
}

uint64_t WebCore::WebCodecsAudioEncoder::flush(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  objc_class *v12;

  if (*(_DWORD *)(a1 + 56) == 1)
  {
    WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 112, a2);
    *(_BYTE *)(a1 + 417) = 1;
    v3 = *(_QWORD *)(a1 + 144);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v4 = off_1E336D158;
    v4[1] = a1;
    v4[2] = v3;
    v10 = v4;
    WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v10);
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  else
  {
    v6 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = 0;
    LOBYTE(v10) = 8;
    if (v9)
      *(_DWORD *)v9 += 2;
    v11 = v9;
    WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)&v10, 0, &v12);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = (uint64_t)v9;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebCodecsAudioEncoder::resetEncoder@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t (**v26)();
  WTF::StringImpl *v27;
  objc_class *v28;

  if (*(_DWORD *)(a1 + 56) == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 56) = 0;
  result = *(WTF::StringImpl **)(a1 + 96);
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 32))(result);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(WTF **)(a1 + 176);
  if (v7 > v8)
  {
    if (v8)
    {
      v10 = 8 * v8;
      do
      {
        result = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
      v9 = *(WTF **)(a1 + 176);
      v7 = *(_QWORD *)(a1 + 160);
    }
    v11 = *(unsigned int *)(a1 + 184);
    if (v7 != v11)
    {
      v12 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
      v13 = 8 * v11 - 8 * v7;
      do
      {
        result = *v12;
        *v12 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
LABEL_23:
    v9 = *(WTF **)(a1 + 176);
    goto LABEL_24;
  }
  if (v7 != v8)
  {
    v14 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
    v15 = 8 * v8 - 8 * v7;
    do
    {
      result = *v14;
      *v14 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      ++v14;
      v15 -= 8;
    }
    while (v15);
    goto LABEL_23;
  }
LABEL_24:
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    result = (WTF::StringImpl *)WTF::fastFree(v9, a2);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 64) = 0;
    if (!*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 104) = 1;
      v16 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = off_1E336D270;
      *(_QWORD *)(v16 + 8) = a1;
      v26 = (uint64_t (**)())v16;
      WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>((uint64_t (**)())a1, &v26);
      result = (WTF::StringImpl *)v26;
      if (v26)
        result = (WTF::StringImpl *)(*((uint64_t (**)(uint64_t (**)()))*v26 + 1))(v26);
    }
  }
  ++*(_QWORD *)(a1 + 144);
  while (1)
  {
    v17 = *(_QWORD *)(a1 + 112);
    if (v17 == *(_QWORD *)(a1 + 120))
      break;
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_DWORD **)(v18 + 8 * v17);
    *(_QWORD *)(v18 + 8 * v17) = 0;
    v20 = *(_QWORD *)(a1 + 128);
    v21 = *(_DWORD **)(v20 + 8 * v17);
    *(_QWORD *)(v20 + 8 * v17) = 0;
    if (v21)
    {
      if (v21[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
        v17 = *(_QWORD *)(a1 + 112);
      }
      else
      {
        --v21[4];
      }
    }
    if (v17 == *(unsigned int *)(a1 + 136) - 1)
      v22 = 0;
    else
      v22 = v17 + 1;
    *(_QWORD *)(a1 + 112) = v22;
    v23 = *(_BYTE *)a2;
    v24 = (WTF::StringImpl *)a2[1];
    if (v24)
      *(_DWORD *)v24 += 4;
    v27 = v24;
    v28 = 0;
    LOBYTE(v26) = v23;
    WebCore::DeferredPromise::reject((uint64_t)v19, (unsigned __int8 *)&v26, 0, &v28);
    result = v27;
    v27 = 0;
    if (!result)
      goto LABEL_43;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_43:
      if (v24)
        goto LABEL_44;
      goto LABEL_46;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    if (v24)
    {
LABEL_44:
      if (*(_DWORD *)v24 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
LABEL_46:
    if (v19)
    {
      if (v19[4] == 1)
        result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[4];
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *WebCore::WebCodecsAudioEncoder::closeEncoder@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  result = WebCore::WebCodecsAudioEncoder::resetEncoder(a1, a2, (uint64_t)v10);
  if (v12)
  {
    *(_BYTE *)a3 = v10[0];
    *(_QWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 56) = 2;
    result = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (*a2 != 16)
    {
      v8 = *(_QWORD *)(a1 + 88);
      WebCore::DOMException::create(a2, (uint64_t *)&v9);
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v8 + 40))(v8, v9);
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v12)
    {
      result = v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebCodecsAudioEncoder::isConfigSupported(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const WTF::StringView *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;
  objc_class *v37;
  int v38;
  char v39;
  WTF::StringImpl *v40[2];
  __int128 v41;
  _BYTE v42[129];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((WebCore::isValidEncoderConfig(a2) & 1) != 0)
  {
    v40[0] = 0;
    v7 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
    {
      v8 = *((unsigned __int8 *)v7 + 16);
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 1);
      LODWORD(v7) = *((_DWORD *)v7 + 1);
      v40[0] = v9;
      v10 = (v8 >> 2) & 1;
    }
    else
    {
      LOBYTE(v10) = 1;
    }
    LODWORD(v40[1]) = (_DWORD)v7;
    BYTE4(v40[1]) = v10;
    if ((WebCore::isSupportedEncoderCodec((const char **)v40, v6) & 1) != 0)
    {
      v11 = *a3;
      WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::add((uint64_t *)(a1 + 264), a3, (uint64_t)v40);
      v12 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)v40 = *(_OWORD *)(a1 + 224);
      v41 = v12;
      WTF::String::isolatedCopy();
      *(_OWORD *)&v42[8] = *(_OWORD *)(a2 + 8);
      *(_QWORD *)&v42[24] = *(_QWORD *)(a2 + 24);
      v42[32] = *(_BYTE *)(a2 + 32);
      *(_DWORD *)&v42[40] = *(_DWORD *)(a2 + 40);
      v13 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v42[48] = *(_OWORD *)(a2 + 48);
      v14 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)&v42[64] = v13;
      *(_OWORD *)&v42[80] = v14;
      v42[96] = *(_BYTE *)(a2 + 96);
      *(_WORD *)&v42[104] = *(_WORD *)(a2 + 104);
      v15 = *(_OWORD *)(a2 + 112);
      v42[128] = *(_BYTE *)(a2 + 128);
      *(_OWORD *)&v42[112] = v15;
      v43 = v11;
      v16 = WTF::fastMalloc((WTF *)0xC0);
      *(_QWORD *)v16 = &off_1E336D1A8;
      v17 = v41;
      *(_OWORD *)(v16 + 16) = *(_OWORD *)v40;
      *(_OWORD *)(v16 + 32) = v17;
      v18 = *(_QWORD *)v42;
      *(_QWORD *)v42 = 0;
      *(_QWORD *)(v16 + 48) = v18;
      v19 = *(_OWORD *)&v42[56];
      v20 = *(_OWORD *)&v42[40];
      *(_OWORD *)(v16 + 72) = *(_OWORD *)&v42[24];
      v21 = *(_OWORD *)&v42[113];
      v22 = *(_OWORD *)&v42[104];
      *(_OWORD *)(v16 + 136) = *(_OWORD *)&v42[88];
      *(_OWORD *)(v16 + 120) = *(_OWORD *)&v42[72];
      *(_OWORD *)(v16 + 56) = *(_OWORD *)&v42[8];
      *(_OWORD *)(v16 + 88) = v20;
      *(_OWORD *)(v16 + 152) = v22;
      *(_OWORD *)(v16 + 161) = v21;
      *(_OWORD *)(v16 + 104) = v19;
      *(_QWORD *)(v16 + 184) = v43;
      v23 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v23 = off_1E336D1F8;
      v24 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v24 = off_1E336D220;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = off_1E336D248;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v38 = 1;
      (*(void (**)(uint64_t, objc_class **))(*(_QWORD *)v16 + 16))(v16, &v37);
      if (v38 != -1)
        ((void (*)(char *, objc_class **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioEncoderEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v38])(&v39, &v37);
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      result = *(WTF::StringImpl **)v42;
      *(_QWORD *)v42 = 0;
      if (!result)
        return result;
    }
    else
    {
      v30 = *a3;
      LOWORD(v40[0]) = 256;
      v31 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      v40[1] = v31;
      v32 = *(_OWORD *)(a2 + 72);
      v33 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)&v42[64] = *(_OWORD *)(a2 + 88);
      *(_OWORD *)&v42[80] = v33;
      *(_OWORD *)&v42[89] = *(_OWORD *)(a2 + 113);
      v34 = *(_OWORD *)(a2 + 24);
      v41 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)v42 = v34;
      v35 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 40);
      *(_OWORD *)&v42[32] = v35;
      *(_OWORD *)&v42[48] = v32;
      v42[112] = 1;
      result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsAudioEncoderSupport>>(v30, (uint64_t)v40);
      if (!v42[112])
        return result;
      result = v40[1];
      v40[1] = 0;
      if (!result)
        return result;
    }
LABEL_18:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    *(_DWORD *)result -= 2;
    return result;
  }
  v28 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = 0;
  LOBYTE(v40[0]) = 33;
  if (v36)
    *(_DWORD *)v36 += 2;
  v40[1] = v36;
  WebCore::DeferredPromise::reject(v28, (unsigned __int8 *)v40, 0, &v37);
  v29 = v40[1];
  v40[1] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v26);
    else
      *(_DWORD *)v29 -= 2;
  }
  result = v36;
  if (v36)
    goto LABEL_18;
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsAudioEncoderSupport>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

BOOL WebCore::WebCodecsAudioEncoder::virtualHasPendingActivity(WebCore::WebCodecsAudioEncoder *this)
{
  if (*((_DWORD *)this + 14) != 1)
    return 0;
  if (*((_QWORD *)this + 8) || *((_QWORD *)this + 9))
    return 1;
  return *((_BYTE *)this + 417) != 0;
}

_QWORD *WebCore::WebCodecsVideoDecoder::create@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v6 = bmalloc::api::isoAllocate();
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v6 + 24) = v7;
  if (!*(_BYTE *)(a1 + 274))
  {
    v8 = a1 - 192;
    v9 = *(_QWORD *)(a1 + 512);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    a1 = v8 + 192;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v6 = &off_1E33A0540;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195585174);
  }
  v14 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v14, (uint64_t)&v13);
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E336C9D0;
  *(_QWORD *)(v6 + 32) = &unk_1E336CA48;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v6 + 80) = v11;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_BYTE *)(v6 + 104) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 137) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_WORD *)(v6 + 192) = 0;
  *a3 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6);
}

void WebCore::WebCodecsVideoDecoder::~WebCodecsVideoDecoder(WebCore::WebCodecsVideoDecoder *this, void *a2)
{
  WebCore::EventTarget *v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD **v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  void *v28;
  _DWORD **v29;
  uint64_t v30;
  _DWORD *v31;

  *(_QWORD *)this = &off_1E336C9D0;
  *((_QWORD *)this + 4) = &unk_1E336CA48;
  v3 = (WebCore::WebCodecsVideoDecoder *)((char *)this + 32);
  v4 = *((_QWORD *)this + 20);
  v5 = *((_QWORD *)this + 21);
  v6 = (WTF *)*((_QWORD *)this + 22);
  if (v4 <= v5)
  {
    if (v4 == v5)
      goto LABEL_20;
    v13 = (uint64_t *)((char *)v6 + 8 * v4);
    v14 = 8 * v5 - 8 * v4;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  else
  {
    if (v5)
    {
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v6 = (WTF *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
      v6 = (WTF *)*((_QWORD *)this + 22);
      v4 = *((_QWORD *)this + 20);
    }
    v9 = *((unsigned int *)this + 46);
    if (v4 != v9)
    {
      v10 = (uint64_t *)((char *)v6 + 8 * v4);
      v11 = 8 * v9 - 8 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 22);
LABEL_20:
  if (v6)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v6, a2);
  }
  v16 = *((_QWORD *)this + 14);
  v17 = *((_QWORD *)this + 15);
  v18 = (WTF *)*((_QWORD *)this + 16);
  if (v16 <= v17)
  {
    if (v16 == v17)
      goto LABEL_41;
    v21 = (_DWORD **)((char *)v18 + 8 * v16);
    v22 = 8 * v17 - 8 * v16;
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        if (v23[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
        else
          --v23[4];
      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  else
  {
    if (v17)
    {
      v19 = 8 * v17;
      do
      {
        v20 = *(_DWORD **)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
        {
          if (v20[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
          else
            --v20[4];
        }
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
      v18 = (WTF *)*((_QWORD *)this + 16);
      v16 = *((_QWORD *)this + 14);
    }
    v24 = *((unsigned int *)this + 34);
    if (v16 != v24)
    {
      v29 = (_DWORD **)((char *)v18 + 8 * v16);
      v30 = 8 * v24 - 8 * v16;
      do
      {
        v31 = *v29;
        *v29 = 0;
        if (v31)
        {
          if (v31[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
          else
            --v31[4];
        }
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
  }
  v18 = (WTF *)*((_QWORD *)this + 16);
LABEL_41:
  if (v18)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v18, a2);
  }
  v25 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v26)
  {
    if (v26[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
    else
      --v26[4];
  }
  v27 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v27)
  {
    if (v27[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
    else
      --v27[4];
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v28);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsVideoDecoder::~WebCodecsVideoDecoder(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::WebCodecsVideoDecoder::~WebCodecsVideoDecoder(WebCore::WebCodecsVideoDecoder *this, void *a2)
{
  WebCore::WebCodecsVideoDecoder::~WebCodecsVideoDecoder((WebCore::WebCodecsVideoDecoder *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsVideoDecoder::~WebCodecsVideoDecoder((WebCore::WebCodecsVideoDecoder *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::WebCodecsVideoDecoder::configure@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  const WTF::String *v9;
  const WebCore::Settings::Values *v10;
  char isSupportedDecoderCodec;
  WTF::StringImpl *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  char v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl *v34[2];
  char v35[8];
  int v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if ((WebCore::isValidDecoderConfig((uint64_t *)a3) & 1) == 0)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = 33;
LABEL_29:
    *(_BYTE *)a4 = v31;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (*(_DWORD *)(a1 + 56) == 2 || (v8 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v8 + 8))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = 8;
    goto LABEL_29;
  }
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 152) = 1;
  v9 = (const WTF::String *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
  isSupportedDecoderCodec = WebCore::isSupportedDecoderCodec((WebCore *)a3, v9, v10);
  v12 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v34[0] = (WTF::StringImpl *)a1;
  v34[1] = v12;
  v35[0] = 0;
  v37 = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    v36 = -1;
    v13 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t))off_1E336CBF0[v13])(&v32, v35, a3 + 8);
      v36 = v13;
    }
    v37 = 1;
  }
  v14 = *(_OWORD *)(a3 + 80);
  v40 = *(_OWORD *)(a3 + 64);
  v41 = v14;
  v42 = *(_OWORD *)(a3 + 96);
  v15 = *(_OWORD *)(a3 + 48);
  v38 = *(_OWORD *)(a3 + 32);
  v43 = *(_WORD *)(a3 + 112);
  v39 = v15;
  LOBYTE(v44) = isSupportedDecoderCodec;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
      v16 = v17 - 96;
    else
      v16 = 0;
  }
  v18 = *(_OWORD *)(v16 + 240);
  v45 = *(_OWORD *)(v16 + 224);
  v46 = v18;
  v19 = WTF::fastMalloc((WTF *)0xC0);
  v20 = v19;
  *(_QWORD *)v19 = &off_1E336D2A8;
  v21 = *(_OWORD *)v34;
  v34[1] = 0;
  *(_OWORD *)(v19 + 16) = v21;
  *(_BYTE *)(v19 + 32) = 0;
  *(_BYTE *)(v19 + 48) = 0;
  if (v37)
  {
    *(_DWORD *)(v19 + 40) = -1;
    v22 = v36;
    if (v36 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, char *))off_1E336CBF0[v36])(&v32, v19 + 32, v35);
      *(_DWORD *)(v20 + 40) = v22;
    }
    *(_BYTE *)(v20 + 48) = 1;
  }
  v23 = v43;
  v25 = v41;
  v24 = v42;
  *(_OWORD *)(v20 + 88) = v40;
  *(_OWORD *)(v20 + 104) = v25;
  *(_OWORD *)(v20 + 120) = v24;
  *(_WORD *)(v20 + 136) = v23;
  v26 = v39;
  *(_OWORD *)(v20 + 56) = v38;
  *(_OWORD *)(v20 + 72) = v26;
  v27 = v46;
  v28 = v45;
  *(_OWORD *)(v20 + 144) = v44;
  *(_OWORD *)(v20 + 160) = v28;
  *(_QWORD *)(v20 + 176) = v27;
  v32 = v20;
  WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v32);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (v37)
  {
    if (v36 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v36])(&v33, v35);
    v36 = -1;
  }
  result = v34[1];
  v34[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *WebCore::isValidDecoderConfig(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v23;

  v1 = *result;
  if (!*result)
    return 0;
  v5 = *(unsigned int *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 4);
  v4 = (v5 >> 2) & 1;
  LODWORD(v5) = v3;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v3)
    {
      v6 = 0;
      while (1)
      {
        v7 = *(unsigned __int8 *)(v2 + v6);
        v8 = v7 > 0x20;
        v9 = (1 << v7) & 0x100003600;
        if (v8 || v9 == 0)
          break;
        if (v3 == ++v6)
          return 0;
      }
      if ((_DWORD)v3 != 1)
      {
        v11 = (v3 - 1);
        while (v11 < v3)
        {
          v12 = *(unsigned __int8 *)(v2 + v11);
          v8 = v12 > 0x20;
          v13 = (1 << v12) & 0x100003600;
          if (!v8 && v13 != 0)
          {
            if ((_DWORD)--v11)
              continue;
          }
          if (!(_DWORD)v6 && (_DWORD)v11 == (_DWORD)v3 - 1)
            goto LABEL_41;
          goto LABEL_21;
        }
        goto LABEL_62;
      }
      if ((_DWORD)v6)
      {
        LODWORD(v11) = 0;
LABEL_21:
        v5 = (v11 - v6 + 1);
        if (v3 - v6 < v5)
          goto LABEL_62;
      }
    }
  }
  else if ((_DWORD)v3)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(unsigned __int16 *)(v2 + 2 * v15);
      v8 = v16 > 0x20;
      v17 = (1 << v16) & 0x100003600;
      if (v8 || v17 == 0)
        break;
      if (v3 == ++v15)
        return 0;
    }
    if ((_DWORD)v3 != 1)
    {
      v19 = (v3 - 1);
      while (v19 < v3)
      {
        v20 = *(unsigned __int16 *)(v2 + 2 * v19);
        v8 = v20 > 0x20;
        v21 = (1 << v20) & 0x100003600;
        if (!v8 && v21 != 0)
        {
          if ((_DWORD)--v19)
            continue;
        }
        if ((_DWORD)v15 || (_DWORD)v19 != (_DWORD)v3 - 1)
          goto LABEL_61;
        goto LABEL_41;
      }
      goto LABEL_62;
    }
    if ((_DWORD)v15)
    {
      LODWORD(v19) = 0;
LABEL_61:
      v5 = (v19 - v15 + 1);
      if (v3 - v15 < v5)
      {
LABEL_62:
        __break(1u);
        return result;
      }
    }
  }
LABEL_41:
  if (!(_DWORD)v5
    || (*((_BYTE *)result + 40) != 0) != (*((_BYTE *)result + 56) != 0)
    || *((_BYTE *)result + 40) && !result[4]
    || *((_BYTE *)result + 56) && !result[6]
    || (*((_BYTE *)result + 72) != 0) != (*((_BYTE *)result + 88) != 0)
    || *((_BYTE *)result + 72) && !result[8])
  {
    return 0;
  }
  if (*((_BYTE *)result + 88))
    v23 = result[10] == 0;
  else
    v23 = 0;
  return (uint64_t *)!v23;
}

uint64_t WebCore::WebCodecsVideoDecoder::scriptExecutionContext(WebCore::WebCodecsVideoDecoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

unint64_t WebCore::isSupportedDecoderCodec(WebCore *this, const WTF::String *a2, const WebCore::Settings::Values *a3)
{
  unint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    if ((WTF::StringImpl::startsWith() & 1) != 0)
      return 1;
    result = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return result;
    if ((WTF::StringImpl::startsWith() & 1) != 0)
      return 1;
    result = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return result;
    if ((WTF::StringImpl::startsWith() & 1) != 0)
      return 1;
    result = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return result;
    if (WTF::StringImpl::startsWith() && (*((_DWORD *)a2 + 122) & 0x400000) != 0)
      return 1;
    result = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return result;
    if (WTF::StringImpl::startsWith() && (*((_DWORD *)a2 + 122) & 0x200) != 0)
      return 1;
    result = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return result;
    if (WTF::StringImpl::startsWith() && (*((_DWORD *)a2 + 122) & 0x200) != 0)
    {
      return 1;
    }
    else
    {
      result = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        result = WTF::StringImpl::startsWith();
        if ((_DWORD)result)
          return ((unint64_t)*((unsigned int *)a2 + 122) >> 7) & 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::WebCodecsVideoDecoder::decode@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*(_DWORD *)(a1 + 56) != 1)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = 8;
    goto LABEL_6;
  }
  v5 = *a2;
  if (*(_BYTE *)(a1 + 152))
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 8))
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = 26;
LABEL_6:
      *(_BYTE *)a3 = v7;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    *(_BYTE *)(a1 + 152) = 0;
  }
  ++*(_QWORD *)(a1 + 64);
  *a2 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E336D3C0;
  v8[1] = a1;
  v8[2] = v5;
  v9 = v8;
  WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v9);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WebCore::WebCodecsVideoDecoder::flush@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _DWORD *v10;

  if (*(_DWORD *)(a1 + 56) == 1)
  {
    *(_BYTE *)(a1 + 152) = 1;
    v5 = *a2;
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(*a2 + 16) + 1;
    v10 = (_DWORD *)v5;
    WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 112, (uint64_t *)&v10);
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (v6[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      else
        --v6[4];
    }
    *(_BYTE *)(a1 + 193) = 1;
    v7 = *(_QWORD *)(a1 + 144);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = off_1E336D410;
    v8[1] = a1;
    v8[2] = v7;
    v10 = v8;
    WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v10);
    result = (uint64_t)v10;
    if (v10)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::WebCodecsVideoDecoder::resetDecoder@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t (**v26)();
  WTF::StringImpl *v27;
  objc_class *v28;

  if (*(_DWORD *)(a1 + 56) == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 56) = 0;
  result = *(WTF::StringImpl **)(a1 + 96);
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 32))(result);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(WTF **)(a1 + 176);
  if (v7 > v8)
  {
    if (v8)
    {
      v10 = 8 * v8;
      do
      {
        result = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
      v9 = *(WTF **)(a1 + 176);
      v7 = *(_QWORD *)(a1 + 160);
    }
    v11 = *(unsigned int *)(a1 + 184);
    if (v7 != v11)
    {
      v12 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
      v13 = 8 * v11 - 8 * v7;
      do
      {
        result = *v12;
        *v12 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
LABEL_23:
    v9 = *(WTF **)(a1 + 176);
    goto LABEL_24;
  }
  if (v7 != v8)
  {
    v14 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
    v15 = 8 * v8 - 8 * v7;
    do
    {
      result = *v14;
      *v14 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      ++v14;
      v15 -= 8;
    }
    while (v15);
    goto LABEL_23;
  }
LABEL_24:
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    result = (WTF::StringImpl *)WTF::fastFree(v9, a2);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 64) = 0;
    if (!*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 104) = 1;
      v16 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = off_1E336D528;
      *(_QWORD *)(v16 + 8) = a1;
      v26 = (uint64_t (**)())v16;
      WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoDecoder>((uint64_t (**)())a1, &v26);
      result = (WTF::StringImpl *)v26;
      if (v26)
        result = (WTF::StringImpl *)(*((uint64_t (**)(uint64_t (**)()))*v26 + 1))(v26);
    }
  }
  ++*(_QWORD *)(a1 + 144);
  while (1)
  {
    v17 = *(_QWORD *)(a1 + 112);
    if (v17 == *(_QWORD *)(a1 + 120))
      break;
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_DWORD **)(v18 + 8 * v17);
    *(_QWORD *)(v18 + 8 * v17) = 0;
    v20 = *(_QWORD *)(a1 + 128);
    v21 = *(_DWORD **)(v20 + 8 * v17);
    *(_QWORD *)(v20 + 8 * v17) = 0;
    if (v21)
    {
      if (v21[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
        v17 = *(_QWORD *)(a1 + 112);
      }
      else
      {
        --v21[4];
      }
    }
    if (v17 == *(unsigned int *)(a1 + 136) - 1)
      v22 = 0;
    else
      v22 = v17 + 1;
    *(_QWORD *)(a1 + 112) = v22;
    v23 = *(_BYTE *)a2;
    v24 = (WTF::StringImpl *)a2[1];
    if (v24)
      *(_DWORD *)v24 += 4;
    v27 = v24;
    v28 = 0;
    LOBYTE(v26) = v23;
    WebCore::DeferredPromise::reject((uint64_t)v19, (unsigned __int8 *)&v26, 0, &v28);
    result = v27;
    v27 = 0;
    if (!result)
      goto LABEL_43;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_43:
      if (v24)
        goto LABEL_44;
      goto LABEL_46;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    if (v24)
    {
LABEL_44:
      if (*(_DWORD *)v24 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
LABEL_46:
    if (v19)
    {
      if (v19[4] == 1)
        result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[4];
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *WebCore::WebCodecsVideoDecoder::closeDecoder@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  result = WebCore::WebCodecsVideoDecoder::resetDecoder(a1, a2, (uint64_t)v10);
  if (v12)
  {
    *(_BYTE *)a3 = v10[0];
    *(_QWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 56) = 2;
    result = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (*a2 != 16)
    {
      v8 = *(_QWORD *)(a1 + 88);
      WebCore::DOMException::create(a2, (uint64_t *)&v9);
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v8 + 40))(v8, v9);
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v12)
    {
      result = v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebCore::WebCodecsVideoDecoder::isConfigSupported(uint64_t a1, WebCore *a2, uint64_t *a3)
{
  const WTF::String *v6;
  const WebCore::Settings::Values *v7;
  char isSupportedDecoderCodec;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  unint64_t v14;
  objc_class *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  WTF *v25;
  objc_class *v26;
  objc_class *v27;
  uint64_t v28;
  objc_class *i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  WTF::StringImpl *v43;
  int v44;
  __int16 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[4];
  _BOOL4 v62;
  uint64_t v63;
  objc_class *v64[4];
  _BOOL4 v65;
  uint64_t v66;
  char v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  WTF::StringImpl *v71;
  __int128 v72;
  _BYTE v73[72];
  __int128 v74;
  __int16 v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if ((WebCore::isValidDecoderConfig((uint64_t *)a2) & 1) != 0)
  {
    v6 = (const WTF::String *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    isSupportedDecoderCodec = WebCore::isSupportedDecoderCodec(a2, v6, v7);
    v9 = *a3;
    if ((isSupportedDecoderCodec & 1) != 0)
    {
      WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::add((uint64_t *)(a1 + 264), a3, (uint64_t)&v69);
      v57 = v9;
      if (*((_BYTE *)a2 + 24))
      {
        v10 = *((unsigned int *)a2 + 4);
        if ((_DWORD)v10 == -1)
          goto LABEL_79;
        *(_QWORD *)&v69 = v64;
        v11 = ((uint64_t (*)(__int128 *, char *))off_1E336CC20[v10])(&v69, (char *)a2 + 8);
        if (!*((_BYTE *)a2 + 24))
          goto LABEL_78;
        v12 = *((unsigned int *)a2 + 4);
        if ((_DWORD)v12 == -1)
        {
LABEL_79:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_80;
        }
        v13 = (objc_class *)v11;
        *(_QWORD *)&v69 = v64;
        v14 = ((uint64_t (*)(__int128 *, char *))off_1E336CC30[v12])(&v69, (char *)a2 + 8);
        if (v14)
          v15 = v13;
        else
          v15 = 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v25 = 0;
      v64[0] = v15;
      v64[1] = (objc_class *)v14;
      v26 = (objc_class *)*((_QWORD *)a2 + 4);
      if (!*((_BYTE *)a2 + 40))
        v26 = 0;
      v27 = (objc_class *)*((_QWORD *)a2 + 6);
      if (!*((_BYTE *)a2 + 56))
        v27 = 0;
      v64[2] = v26;
      v64[3] = v27;
      v65 = *((_DWORD *)a2 + 27) == 2;
      v66 = 1;
      if (v14)
      {
        if (HIDWORD(v14))
        {
LABEL_80:
          __break(0xC471u);
          return;
        }
        v28 = WTF::fastMalloc((WTF *)v14);
        v25 = (WTF *)v28;
        for (i = 0; i != (objc_class *)v14; i = (objc_class *)((char *)i + 1))
          *((_BYTE *)i + v28) = *((_BYTE *)i + (_QWORD)v15);
      }
      if (!*((_BYTE *)a2 + 24))
      {
        v34 = 0;
        v35 = 0;
        goto LABEL_46;
      }
      v30 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v30 != -1)
      {
        *(_QWORD *)&v69 = v61;
        v31 = ((uint64_t (*)(__int128 *, char *))off_1E336CC20[v30])(&v69, (char *)a2 + 8);
        if (*((_BYTE *)a2 + 24))
        {
          v32 = *((unsigned int *)a2 + 4);
          if ((_DWORD)v32 != -1)
          {
            v33 = v31;
            *(_QWORD *)&v69 = v61;
            v34 = ((uint64_t (*)(__int128 *, char *))off_1E336CC30[v32])(&v69, (char *)a2 + 8);
            if (v34)
              v35 = v33;
            else
              v35 = 0;
LABEL_46:
            v61[0] = v35;
            v61[1] = v34;
            if (*((_BYTE *)a2 + 40))
              v36 = *((_QWORD *)a2 + 4);
            else
              v36 = 0;
            v37 = *((_QWORD *)a2 + 6);
            if (!*((_BYTE *)a2 + 56))
              v37 = 0;
            v61[2] = v36;
            v61[3] = v37;
            v62 = *((_DWORD *)a2 + 27) == 2;
            v63 = 1;
            v38 = *(_OWORD *)(a1 + 240);
            v69 = *(_OWORD *)(a1 + 224);
            v70 = v38;
            WTF::String::isolatedCopy();
            LOBYTE(v72) = 0;
            v73[0] = 0;
            *(_QWORD *)&v73[8] = *((_QWORD *)a2 + 4);
            v73[16] = *((_BYTE *)a2 + 40);
            *(_QWORD *)&v73[24] = *((_QWORD *)a2 + 6);
            v73[32] = *((_BYTE *)a2 + 56);
            *(_QWORD *)&v73[40] = *((_QWORD *)a2 + 8);
            v73[48] = *((_BYTE *)a2 + 72);
            v73[64] = *((_BYTE *)a2 + 88);
            *(_QWORD *)&v73[56] = *((_QWORD *)a2 + 10);
            v39 = *((_QWORD *)a2 + 12);
            BYTE8(v74) = *((_BYTE *)a2 + 104);
            *(_QWORD *)&v74 = v39;
            HIDWORD(v74) = *((_DWORD *)a2 + 27);
            v75 = *((_WORD *)a2 + 56);
            v76 = v25;
            LODWORD(v77) = v14;
            HIDWORD(v77) = v14;
            v78 = v57;
            v40 = WTF::fastMalloc((WTF *)0xC0);
            v41 = v40;
            *(_QWORD *)v40 = &off_1E336D460;
            v42 = v70;
            *(_OWORD *)(v40 + 16) = v69;
            *(_OWORD *)(v40 + 32) = v42;
            v43 = v71;
            v71 = 0;
            *(_QWORD *)(v40 + 48) = v43;
            *(_BYTE *)(v40 + 56) = 0;
            *(_BYTE *)(v40 + 72) = 0;
            if (v73[0])
            {
              *(_DWORD *)(v40 + 64) = -1;
              v44 = DWORD2(v72);
              if (DWORD2(v72) != -1)
              {
                ((void (*)(uint64_t *, uint64_t, __int128 *))off_1E336CBF0[DWORD2(v72)])(&v60, v40 + 56, &v72);
                *(_DWORD *)(v41 + 64) = v44;
              }
              *(_BYTE *)(v41 + 72) = 1;
            }
            v45 = v75;
            v47 = *(_OWORD *)&v73[56];
            v46 = v74;
            *(_OWORD *)(v41 + 112) = *(_OWORD *)&v73[40];
            *(_OWORD *)(v41 + 128) = v47;
            *(_OWORD *)(v41 + 144) = v46;
            *(_WORD *)(v41 + 160) = v45;
            v48 = *(_OWORD *)&v73[24];
            *(_OWORD *)(v41 + 80) = *(_OWORD *)&v73[8];
            *(_OWORD *)(v41 + 96) = v48;
            *(_QWORD *)(v41 + 168) = v76;
            *(_QWORD *)&v48 = v77;
            v76 = 0;
            v77 = 0;
            *(_QWORD *)(v41 + 176) = v48;
            *(_QWORD *)(v41 + 184) = v78;
            v60 = v41;
            v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v49 = off_1E336D4B0;
            v59 = v49;
            v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v50 = off_1E336D4D8;
            v58 = v50;
            if (WebCore::VideoDecoder::s_customCreator)
              WebCore::VideoDecoder::s_customCreator(a2, v61, &v60, &v59, &v58);
            else
              WebCore::VideoDecoder::createLocalDecoder(a2, (uint64_t)v61, &v60, (uint64_t *)&v59, (uint64_t *)&v58);
            v52 = (uint64_t)v58;
            v58 = 0;
            if (v52)
              (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
            v53 = (uint64_t)v59;
            v59 = 0;
            if (v53)
              (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
            v54 = v60;
            v60 = 0;
            if (v54)
              (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
            v55 = v76;
            if (v76)
            {
              v76 = 0;
              LODWORD(v77) = 0;
              WTF::fastFree(v55, v51);
            }
            if (v73[0])
            {
              if (DWORD2(v72) != -1)
                ((void (*)(_QWORD **, __int128 *))off_1E336CBE0[DWORD2(v72)])(&v59, &v72);
              DWORD2(v72) = -1;
            }
            v56 = v71;
            v71 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v51);
              else
                *(_DWORD *)v56 -= 2;
            }
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v63 + 4));
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v66 + 4));
            return;
          }
          goto LABEL_79;
        }
LABEL_78:
        __break(1u);
      }
      goto LABEL_79;
    }
    LOWORD(v69) = 256;
    v21 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)&v69 + 1) = v21;
    LOBYTE(v70) = 0;
    LOBYTE(v71) = 0;
    if (*((_BYTE *)a2 + 24))
    {
      DWORD2(v70) = -1;
      v22 = *((unsigned int *)a2 + 4);
      if ((_DWORD)v22 != -1)
      {
        ((void (*)(objc_class **, __int128 *, char *))off_1E336CBF0[v22])(v64, &v70, (char *)a2 + 8);
        DWORD2(v70) = v22;
      }
      LOBYTE(v71) = 1;
    }
    v23 = *((_OWORD *)a2 + 5);
    *(_OWORD *)&v73[16] = *((_OWORD *)a2 + 4);
    *(_OWORD *)&v73[32] = v23;
    *(_OWORD *)&v73[48] = *((_OWORD *)a2 + 6);
    *(_WORD *)&v73[64] = *((_WORD *)a2 + 56);
    v24 = *((_OWORD *)a2 + 3);
    v72 = *((_OWORD *)a2 + 2);
    *(_OWORD *)v73 = v24;
    LOBYTE(v74) = 1;
    WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsVideoDecoderSupport>>(v9, (uint64_t)&v69);
    if ((_BYTE)v74)
    {
      if ((_BYTE)v71)
      {
        if (DWORD2(v70) != -1)
          ((void (*)(objc_class **, __int128 *))off_1E336CBE0[DWORD2(v70)])(v64, &v70);
        DWORD2(v70) = -1;
      }
      v20 = (WTF::StringImpl *)*((_QWORD *)&v69 + 1);
      *((_QWORD *)&v69 + 1) = 0;
      if (v20)
      {
LABEL_27:
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
  }
  else
  {
    v16 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v67 = 33;
    v64[0] = 0;
    LOBYTE(v69) = 33;
    v17 = v68;
    if (v68)
      *(_DWORD *)v68 += 2;
    *((_QWORD *)&v69 + 1) = v17;
    WebCore::DeferredPromise::reject(v16, (unsigned __int8 *)&v69, 0, v64);
    v19 = (WTF::StringImpl *)*((_QWORD *)&v69 + 1);
    *((_QWORD *)&v69 + 1) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v68;
    v68 = 0;
    if (v20)
      goto LABEL_27;
  }
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsVideoDecoderSupport>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t (***WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoDecoder>(uint64_t (**a1)(), uint64_t (***a2)()))()
{
  uint64_t v4;
  uint64_t (*v5)();
  int v7;
  uint64_t (*v8)();
  int v10;
  uint64_t (**v11)();
  uint64_t (***result)();
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t (***v17)();

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = a1[3];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  *(_QWORD *)(v4 + 8) = a1;
  v8 = a1[3];
  a1[2] = (uint64_t (*)())((char *)a1[2] + 1);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_14:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = *a2;
  *a2 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E336D500;
  result[1] = a1;
  result[2] = (uint64_t (**)())v4;
  result[3] = v11;
  v17 = result;
  v13 = a1[1];
  if (!v13)
  {
    v17 = 0;
    v16 = &off_1E336D500;
    return (uint64_t (***)())v16[1]();
  }
  v14 = *((_QWORD *)v13 + 1);
  if (!v14)
  {
    v17 = 0;
    goto LABEL_24;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v15, 9, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_24:
    v16 = *result;
    return (uint64_t (***)())v16[1]();
  }
  return result;
}

uint64_t WebCore::WebCodecsVideoDecoder::stop(WebCore::WebCodecsVideoDecoder *this)
{
  uint64_t result;

  *((_DWORD *)this + 14) = 2;
  result = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::WebCodecsVideoDecoder::virtualHasPendingActivity(WebCore::WebCodecsVideoDecoder *this)
{
  if (*((_DWORD *)this + 14) != 1)
    return 0;
  if (*((_QWORD *)this + 8) || *((_QWORD *)this + 9))
    return 1;
  return *((_BYTE *)this + 193) != 0;
}

_QWORD *WebCore::WebCodecsVideoEncoder::create@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v6 = bmalloc::api::isoAllocate();
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v7 = 0;
  *(_OWORD *)(v7 + 8) = xmmword_19689B170;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v6 + 24) = v7;
  if (!*(_BYTE *)(a1 + 274))
  {
    v8 = a1 - 192;
    v9 = *(_QWORD *)(a1 + 512);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    a1 = v8 + 192;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v6 = &off_1E33A0540;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195586C6CLL);
  }
  v14 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v14, (uint64_t)&v13);
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E336CAC0;
  *(_QWORD *)(v6 + 32) = &unk_1E336CB38;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v6 + 80) = v11;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_BYTE *)(v6 + 224) = 0;
  *(_BYTE *)(v6 + 232) = 0;
  *(_BYTE *)(v6 + 240) = 0;
  *(_BYTE *)(v6 + 248) = 0;
  *(_BYTE *)(v6 + 256) = 0;
  *(_BYTE *)(v6 + 264) = 0;
  *(_BYTE *)(v6 + 272) = 0;
  *(_BYTE *)(v6 + 280) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 137) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_BYTE *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 288) = 0x100000000;
  *(_QWORD *)(v6 + 296) = 0;
  *(_QWORD *)(v6 + 304) = 1;
  *(_BYTE *)(v6 + 312) = 0;
  *(_BYTE *)(v6 + 316) = 0;
  *(_QWORD *)(v6 + 320) = 0;
  *(_BYTE *)(v6 + 328) = 0;
  *(_BYTE *)(v6 + 336) = 0;
  *(_BYTE *)(v6 + 344) = 0;
  *(_BYTE *)(v6 + 352) = 0;
  *(_BYTE *)(v6 + 360) = 0;
  *(_BYTE *)(v6 + 368) = 0;
  *(_BYTE *)(v6 + 376) = 0;
  *(_BYTE *)(v6 + 384) = 0;
  *(_BYTE *)(v6 + 392) = 0;
  *(_BYTE *)(v6 + 408) = 0;
  *(_BYTE *)(v6 + 416) = 0;
  *(_BYTE *)(v6 + 424) = 0;
  *(_WORD *)(v6 + 432) = 0;
  *a3 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6);
}

void WebCore::WebCodecsVideoEncoder::~WebCodecsVideoEncoder(WebCore::WebCodecsVideoEncoder *this, void *a2)
{
  WebCore::EventTarget *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  void *v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;

  *(_QWORD *)this = &off_1E336CAC0;
  *((_QWORD *)this + 4) = &unk_1E336CB38;
  v3 = (WebCore::WebCodecsVideoEncoder *)((char *)this + 32);
  if (*((_BYTE *)this + 408))
  {
    v4 = (WTF *)*((_QWORD *)this + 49);
    if (v4)
    {
      *((_QWORD *)this + 49) = 0;
      *((_DWORD *)this + 100) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 20);
  v9 = *((_QWORD *)this + 21);
  v10 = (WTF *)*((_QWORD *)this + 22);
  if (v8 <= v9)
  {
    if (v8 == v9)
      goto LABEL_32;
    v17 = (uint64_t *)((char *)v10 + 8 * v8);
    v18 = 8 * v9 - 8 * v8;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  else
  {
    if (v9)
    {
      v11 = 8 * v9;
      do
      {
        v12 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v10 = (WTF *)((char *)v10 + 8);
        v11 -= 8;
      }
      while (v11);
      v10 = (WTF *)*((_QWORD *)this + 22);
      v8 = *((_QWORD *)this + 20);
    }
    v13 = *((unsigned int *)this + 46);
    if (v8 != v13)
    {
      v14 = (uint64_t *)((char *)v10 + 8 * v8);
      v15 = 8 * v13 - 8 * v8;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  v10 = (WTF *)*((_QWORD *)this + 22);
LABEL_32:
  if (v10)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v10, a2);
  }
  v20 = *((_QWORD *)this + 14);
  v21 = *((_QWORD *)this + 15);
  v22 = (WTF *)*((_QWORD *)this + 16);
  if (v20 <= v21)
  {
    if (v20 == v21)
      goto LABEL_53;
    v25 = (_DWORD **)((char *)v22 + 8 * v20);
    v26 = 8 * v21 - 8 * v20;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
      {
        if (v27[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
        else
          --v27[4];
      }
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  else
  {
    if (v21)
    {
      v23 = 8 * v21;
      do
      {
        v24 = *(_DWORD **)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (v24[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
          else
            --v24[4];
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
      v22 = (WTF *)*((_QWORD *)this + 16);
      v20 = *((_QWORD *)this + 14);
    }
    v28 = *((unsigned int *)this + 34);
    if (v20 != v28)
    {
      v33 = (_DWORD **)((char *)v22 + 8 * v20);
      v34 = 8 * v28 - 8 * v20;
      do
      {
        v35 = *v33;
        *v33 = 0;
        if (v35)
        {
          if (v35[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
          else
            --v35[4];
        }
        ++v33;
        v34 -= 8;
      }
      while (v34);
    }
  }
  v22 = (WTF *)*((_QWORD *)this + 16);
LABEL_53:
  if (v22)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v22, a2);
  }
  v29 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v30)
  {
    if (v30[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
    else
      --v30[4];
  }
  v31 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v31)
  {
    if (v31[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
    else
      --v31[4];
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v32);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsVideoEncoder::~WebCodecsVideoEncoder(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::WebCodecsVideoEncoder::~WebCodecsVideoEncoder(WebCore::WebCodecsVideoEncoder *this, void *a2)
{
  WebCore::WebCodecsVideoEncoder::~WebCodecsVideoEncoder((WebCore::WebCodecsVideoEncoder *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebCodecsVideoEncoder::~WebCodecsVideoEncoder((WebCore::WebCodecsVideoEncoder *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::WebCodecsVideoEncoder::configure@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::String *v18;
  const WebCore::Settings::Values *v19;
  char isSupportedDecoderCodec;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t result;
  char v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[47];
  _QWORD v44[4];

  v44[3] = *MEMORY[0x1E0C80C00];
  if ((WebCore::isValidEncoderConfig((uint64_t *)a3) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v35 = 33;
LABEL_21:
    *(_BYTE *)a4 = v35;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (*(_DWORD *)(a1 + 56) == 2 || (v8 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v8 + 8))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v35 = 8;
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 152) = 1;
  if (*(_QWORD *)(a1 + 96))
  {
    v9 = *(_DWORD **)a3;
    if (*(_QWORD *)a3)
      *v9 += 2;
    v10 = *(_OWORD *)(a3 + 56);
    v39 = *(_OWORD *)(a3 + 40);
    v40 = v10;
    v41 = *(_OWORD *)(a3 + 72);
    v11 = *(_DWORD **)(a3 + 96);
    v42 = *(_QWORD *)(a3 + 88);
    v12 = *(_OWORD *)(a3 + 24);
    v37 = *(_OWORD *)(a3 + 8);
    v38 = v12;
    if (v11)
      *v11 += 2;
    *(_QWORD *)v43 = *(_QWORD *)(a3 + 104);
    *(_QWORD *)&v43[5] = *(_QWORD *)(a3 + 109);
    v13 = WTF::fastMalloc((WTF *)0x88);
    v14 = v40;
    *(_OWORD *)(v13 + 56) = v39;
    *(_OWORD *)(v13 + 72) = v14;
    *(_OWORD *)(v13 + 88) = v41;
    v15 = v38;
    *(_OWORD *)(v13 + 24) = v37;
    *(_QWORD *)v13 = &off_1E336D588;
    *(_QWORD *)(v13 + 8) = a1;
    *(_QWORD *)(v13 + 16) = v9;
    v16 = v42;
    *(_OWORD *)(v13 + 40) = v15;
    *(_QWORD *)(v13 + 104) = v16;
    *(_QWORD *)(v13 + 112) = v11;
    v17 = *(_QWORD *)v43;
    *(_QWORD *)(v13 + 125) = *(_QWORD *)&v43[5];
    *(_QWORD *)(v13 + 120) = v17;
    v44[0] = v13;
    WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, v44);
    if (v44[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v44[0] + 8))(v44[0]);
  }
  v18 = (const WTF::String *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
  isSupportedDecoderCodec = WebCore::isSupportedDecoderCodec((WebCore *)a3, v18, v19);
  v21 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v22 = *(_OWORD *)(a3 + 56);
  v39 = *(_OWORD *)(a3 + 40);
  v40 = v22;
  v41 = *(_OWORD *)(a3 + 72);
  v23 = *(_QWORD *)(a3 + 96);
  v42 = *(_QWORD *)(a3 + 88);
  v24 = *(_OWORD *)(a3 + 24);
  v37 = *(_OWORD *)(a3 + 8);
  v38 = v24;
  *(_QWORD *)(a3 + 96) = 0;
  v25 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)((char *)v44 + 5) = *(_QWORD *)(a3 + 109);
  v44[0] = v25;
  v26 = *(_QWORD *)(a1 + 8);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 8);
    if (v27)
      v26 = v27 - 96;
    else
      v26 = 0;
  }
  v28 = *(_OWORD *)(v26 + 240);
  *(_OWORD *)&v43[15] = *(_OWORD *)(v26 + 224);
  *(_OWORD *)&v43[31] = v28;
  v29 = WTF::fastMalloc((WTF *)0xC0);
  v30 = v40;
  *(_OWORD *)(v29 + 64) = v39;
  *(_OWORD *)(v29 + 80) = v30;
  *(_OWORD *)(v29 + 96) = v41;
  v31 = v38;
  *(_OWORD *)(v29 + 32) = v37;
  *(_OWORD *)(v29 + 48) = v31;
  v32 = *(_OWORD *)&v43[16];
  *(_OWORD *)(v29 + 145) = *(_OWORD *)v43;
  *(_QWORD *)v29 = &off_1E336D5D8;
  *(_QWORD *)(v29 + 16) = a1;
  *(_QWORD *)(v29 + 24) = v21;
  *(_QWORD *)(v29 + 112) = v42;
  *(_QWORD *)(v29 + 120) = v23;
  v33 = v44[0];
  *(_QWORD *)(v29 + 133) = *(_QWORD *)((char *)v44 + 5);
  *(_QWORD *)(v29 + 128) = v33;
  *(_BYTE *)(v29 + 144) = isSupportedDecoderCodec;
  *(_QWORD *)(v29 + 176) = *(_QWORD *)&v43[31];
  *(_OWORD *)(v29 + 161) = v32;
  v36 = v29;
  WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v36);
  result = v36;
  if (v36)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *WebCore::isValidEncoderConfig(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = *result;
  if (!*result)
    return 0;
  v5 = *(unsigned int *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 4);
  v4 = (v5 >> 2) & 1;
  LODWORD(v5) = v3;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v3)
    {
      v6 = 0;
      while (1)
      {
        v7 = *(unsigned __int8 *)(v2 + v6);
        v8 = v7 > 0x20;
        v9 = (1 << v7) & 0x100003600;
        if (v8 || v9 == 0)
          break;
        if (v3 == ++v6)
          return 0;
      }
      if ((_DWORD)v3 != 1)
      {
        v11 = (v3 - 1);
        while (v11 < v3)
        {
          v12 = *(unsigned __int8 *)(v2 + v11);
          v8 = v12 > 0x20;
          v13 = (1 << v12) & 0x100003600;
          if (!v8 && v13 != 0)
          {
            if ((_DWORD)--v11)
              continue;
          }
          if (!(_DWORD)v6 && (_DWORD)v11 == (_DWORD)v3 - 1)
            goto LABEL_41;
          goto LABEL_21;
        }
        goto LABEL_56;
      }
      if ((_DWORD)v6)
      {
        LODWORD(v11) = 0;
LABEL_21:
        v5 = (v11 - v6 + 1);
        if (v3 - v6 < v5)
          goto LABEL_56;
      }
    }
  }
  else if ((_DWORD)v3)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(unsigned __int16 *)(v2 + 2 * v15);
      v8 = v16 > 0x20;
      v17 = (1 << v16) & 0x100003600;
      if (v8 || v17 == 0)
        break;
      if (v3 == ++v15)
        return 0;
    }
    if ((_DWORD)v3 != 1)
    {
      v19 = (v3 - 1);
      while (v19 < v3)
      {
        v20 = *(unsigned __int16 *)(v2 + 2 * v19);
        v8 = v20 > 0x20;
        v21 = (1 << v20) & 0x100003600;
        if (!v8 && v21 != 0)
        {
          if ((_DWORD)--v19)
            continue;
        }
        if ((_DWORD)v15 || (_DWORD)v19 != (_DWORD)v3 - 1)
          goto LABEL_55;
        goto LABEL_41;
      }
      goto LABEL_56;
    }
    if ((_DWORD)v15)
    {
      LODWORD(v19) = 0;
LABEL_55:
      v5 = (v19 - v15 + 1);
      if (v3 - v15 < v5)
      {
LABEL_56:
        __break(1u);
        return result;
      }
    }
  }
LABEL_41:
  if (!(_DWORD)v5)
    return 0;
  v23 = result[1];
  if (!v23)
    return 0;
  v24 = result[2];
  if (!v24)
    return 0;
  if (*((_BYTE *)result + 32))
    v23 = result[3];
  if (!v23)
    return 0;
  if (*((_BYTE *)result + 48))
    v24 = result[5];
  return (uint64_t *)(v24 != 0);
}

uint64_t WebCore::WebCodecsVideoEncoder::scriptExecutionContext(WebCore::WebCodecsVideoEncoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::WebCodecsVideoEncoder::encode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int *v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v5 = *(unsigned int **)(*(_QWORD *)a2 + 24);
  if (v5)
  {
    v7 = v5 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (*(_DWORD *)(a1 + 56) == 1)
    {
      ++*(_QWORD *)(a1 + 64);
      v10 = *(_QWORD *)(*(_QWORD *)a2 + 112);
      v9 = *(_QWORD *)(*(_QWORD *)a2 + 120);
      v11 = *(_QWORD *)(*(_QWORD *)a2 + 104);
      v12 = *a3;
      v13 = WTF::fastMalloc((WTF *)0x38);
      *(_QWORD *)v13 = &off_1E336D718;
      *(_QWORD *)(v13 + 8) = a1;
      *(_QWORD *)(v13 + 16) = v5;
      *(_QWORD *)(v13 + 24) = v9;
      *(_QWORD *)(v13 + 32) = v11;
      *(_QWORD *)(v13 + 40) = v10;
      *(_BYTE *)(v13 + 48) = v12;
      v17 = v13;
      WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v17);
      result = v17;
      if (v17)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a4 = 8;
      *((_BYTE *)a4 + 16) = 1;
      do
      {
        v15 = __ldaxr(v7);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v7));
      if (!v16)
      {
        atomic_store(1u, v5 + 2);
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 33;
    *((_BYTE *)a4 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::WebCodecsVideoEncoder::flush(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  objc_class *v14;

  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v3 = *a2;
    *(_DWORD *)(v3 + 16) = *(_DWORD *)(*a2 + 16) + 1;
    v12 = (_DWORD *)v3;
    WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(a1 + 112, (uint64_t *)&v12);
    v4 = v12;
    v12 = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
    *(_BYTE *)(a1 + 433) = 1;
    v5 = *(_QWORD *)(a1 + 144);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E336D768;
    v6[1] = a1;
    v6[2] = v5;
    v12 = v6;
    WebCore::WebCodecsAudioDecoder::queueControlMessageAndProcess(a1, &v12);
    result = (uint64_t)v12;
    if (v12)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    v8 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = 0;
    LOBYTE(v12) = 8;
    if (v11)
      *(_DWORD *)v11 += 2;
    v13 = v11;
    WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v12, 0, &v14);
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = (uint64_t)v11;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        return WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebCodecsVideoEncoder::resetEncoder@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t (**v26)();
  WTF::StringImpl *v27;
  objc_class *v28;

  if (*(_DWORD *)(a1 + 56) == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 56) = 0;
  result = *(WTF::StringImpl **)(a1 + 96);
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 40))(result);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(WTF **)(a1 + 176);
  if (v7 > v8)
  {
    if (v8)
    {
      v10 = 8 * v8;
      do
      {
        result = *(WTF::StringImpl **)v9;
        *(_QWORD *)v9 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        v9 = (WTF *)((char *)v9 + 8);
        v10 -= 8;
      }
      while (v10);
      v9 = *(WTF **)(a1 + 176);
      v7 = *(_QWORD *)(a1 + 160);
    }
    v11 = *(unsigned int *)(a1 + 184);
    if (v7 != v11)
    {
      v12 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
      v13 = 8 * v11 - 8 * v7;
      do
      {
        result = *v12;
        *v12 = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
LABEL_23:
    v9 = *(WTF **)(a1 + 176);
    goto LABEL_24;
  }
  if (v7 != v8)
  {
    v14 = (WTF::StringImpl **)((char *)v9 + 8 * v7);
    v15 = 8 * v8 - 8 * v7;
    do
    {
      result = *v14;
      *v14 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      ++v14;
      v15 -= 8;
    }
    while (v15);
    goto LABEL_23;
  }
LABEL_24:
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
  {
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    result = (WTF::StringImpl *)WTF::fastFree(v9, a2);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 64) = 0;
    if (!*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 104) = 1;
      v16 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = off_1E336D8A8;
      *(_QWORD *)(v16 + 8) = a1;
      v26 = (uint64_t (**)())v16;
      WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoEncoder>((uint64_t (**)())a1, &v26);
      result = (WTF::StringImpl *)v26;
      if (v26)
        result = (WTF::StringImpl *)(*((uint64_t (**)(uint64_t (**)()))*v26 + 1))(v26);
    }
  }
  ++*(_QWORD *)(a1 + 144);
  while (1)
  {
    v17 = *(_QWORD *)(a1 + 112);
    if (v17 == *(_QWORD *)(a1 + 120))
      break;
    v18 = *(_QWORD *)(a1 + 128);
    v19 = *(_DWORD **)(v18 + 8 * v17);
    *(_QWORD *)(v18 + 8 * v17) = 0;
    v20 = *(_QWORD *)(a1 + 128);
    v21 = *(_DWORD **)(v20 + 8 * v17);
    *(_QWORD *)(v20 + 8 * v17) = 0;
    if (v21)
    {
      if (v21[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
        v17 = *(_QWORD *)(a1 + 112);
      }
      else
      {
        --v21[4];
      }
    }
    if (v17 == *(unsigned int *)(a1 + 136) - 1)
      v22 = 0;
    else
      v22 = v17 + 1;
    *(_QWORD *)(a1 + 112) = v22;
    v23 = *(_BYTE *)a2;
    v24 = (WTF::StringImpl *)a2[1];
    if (v24)
      *(_DWORD *)v24 += 4;
    v27 = v24;
    v28 = 0;
    LOBYTE(v26) = v23;
    WebCore::DeferredPromise::reject((uint64_t)v19, (unsigned __int8 *)&v26, 0, &v28);
    result = v27;
    v27 = 0;
    if (!result)
      goto LABEL_43;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_43:
      if (v24)
        goto LABEL_44;
      goto LABEL_46;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    if (v24)
    {
LABEL_44:
      if (*(_DWORD *)v24 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
LABEL_46:
    if (v19)
    {
      if (v19[4] == 1)
        result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[4];
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *WebCore::WebCodecsVideoEncoder::closeEncoder@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  result = WebCore::WebCodecsVideoEncoder::resetEncoder(a1, a2, (uint64_t)v10);
  if (v12)
  {
    *(_BYTE *)a3 = v10[0];
    *(_QWORD *)(a3 + 8) = v11;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 56) = 2;
    result = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (*a2 != 16)
    {
      v8 = *(_QWORD *)(a1 + 88);
      WebCore::DOMException::create(a2, (uint64_t *)&v9);
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v8 + 40))(v8, v9);
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v12)
    {
      result = v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebCodecsVideoEncoder::isConfigSupported(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const WTF::String *v6;
  const WebCore::Settings::Values *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _OWORD v51[3];
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54[2];
  __int128 v55;
  _BYTE v56[72];
  _BYTE v57[24];
  WTF::StringImpl *v58;
  _BYTE v59[13];
  uint64_t v60;
  _OWORD v61[3];
  unsigned int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if ((WebCore::isValidEncoderConfig((uint64_t *)a2) & 1) != 0)
  {
    v6 = (const WTF::String *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    if ((WebCore::isSupportedDecoderCodec((WebCore *)a2, v6, v7) & 1) != 0)
    {
      WebCore::createVideoEncoderConfig((uint64_t)v61, a2);
      v8 = v62;
      v9 = *a3;
      if (v62)
      {
        LOWORD(v54[0]) = 256;
        v10 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = 0;
        v54[1] = v10;
        v11 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)&v56[16] = *(_OWORD *)(a2 + 40);
        *(_OWORD *)&v56[32] = v11;
        *(_OWORD *)&v56[48] = *(_OWORD *)(a2 + 72);
        v12 = *(_OWORD *)(a2 + 24);
        v55 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)v56 = v12;
        v13 = *(_QWORD *)(a2 + 88);
        v14 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)&v56[64] = v13;
        *(_QWORD *)v57 = v14;
        *(_QWORD *)&v57[13] = *(_QWORD *)(a2 + 109);
        *(_QWORD *)&v57[8] = *(_QWORD *)(a2 + 104);
        LOBYTE(v58) = 1;
        result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsVideoEncoderSupport>>(v9, (uint64_t)v54);
        if ((_BYTE)v58)
        {
          v17 = *(WTF::StringImpl **)v57;
          *(_QWORD *)v57 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v16);
            else
              *(_DWORD *)v17 -= 2;
          }
          result = v54[1];
          v54[1] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
            else
              *(_DWORD *)result -= 2;
          }
        }
        if ((_DWORD)v8 == -1)
          return result;
      }
      else
      {
        WTF::HashTable<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>::add((uint64_t *)(a1 + 264), a3, (uint64_t)v54);
        v51[0] = v61[0];
        v51[1] = v61[1];
        v51[2] = v61[2];
        v29 = *(_OWORD *)(a1 + 240);
        *(_OWORD *)v54 = *(_OWORD *)(a1 + 224);
        v55 = v29;
        WTF::String::isolatedCopy();
        *(_OWORD *)&v56[8] = *(_OWORD *)(a2 + 8);
        *(_QWORD *)&v56[24] = *(_QWORD *)(a2 + 24);
        v56[32] = *(_BYTE *)(a2 + 32);
        *(_QWORD *)&v56[40] = *(_QWORD *)(a2 + 40);
        v56[48] = *(_BYTE *)(a2 + 48);
        *(_QWORD *)&v56[56] = *(_QWORD *)(a2 + 56);
        v56[64] = *(_BYTE *)(a2 + 64);
        v57[8] = *(_BYTE *)(a2 + 80);
        *(_QWORD *)v57 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)&v57[16] = *(_QWORD *)(a2 + 88);
        WTF::String::isolatedCopy();
        *(_QWORD *)v59 = *(_QWORD *)(a2 + 104);
        *(_DWORD *)&v59[8] = *(_DWORD *)(a2 + 112);
        v59[12] = *(_BYTE *)(a2 + 116);
        v60 = v9;
        v30 = WTF::fastMalloc((WTF *)0xB0);
        *(_QWORD *)v30 = &off_1E336D7B8;
        v31 = v55;
        *(_OWORD *)(v30 + 16) = *(_OWORD *)v54;
        *(_OWORD *)(v30 + 32) = v31;
        *(_QWORD *)(v30 + 48) = *(_QWORD *)v56;
        v32 = *(_OWORD *)&v56[24];
        *(_OWORD *)(v30 + 56) = *(_OWORD *)&v56[8];
        v33 = *(_QWORD *)&v57[16];
        v34 = *(_OWORD *)&v56[56];
        v35 = *(_OWORD *)v57;
        *(_OWORD *)(v30 + 88) = *(_OWORD *)&v56[40];
        *(_OWORD *)(v30 + 120) = v35;
        *(_OWORD *)(v30 + 104) = v34;
        *(_QWORD *)(v30 + 136) = v33;
        *(_OWORD *)(v30 + 72) = v32;
        v36 = *(_QWORD *)v59;
        *(_QWORD *)(v30 + 144) = v58;
        *(_QWORD *)v56 = 0;
        v58 = 0;
        *(_QWORD *)(v30 + 157) = *(_QWORD *)&v59[5];
        *(_QWORD *)(v30 + 152) = v36;
        *(_QWORD *)(v30 + 168) = v60;
        v50 = v30;
        v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v37 = off_1E336D808;
        v49 = v37;
        v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v38 = off_1E336D830;
        v48 = v38;
        v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v39 = off_1E336D858;
        v47 = v39;
        if (WebCore::VideoEncoder::s_customCreator)
          WebCore::VideoEncoder::s_customCreator(a2, v51, &v50, &v49, &v48, &v47);
        else
          WebCore::VideoEncoder::createLocalEncoder((_QWORD *)a2, (uint64_t)v51, &v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47);
        v41 = (uint64_t)v47;
        v47 = 0;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        v42 = (uint64_t)v48;
        v48 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        v43 = (uint64_t)v49;
        v49 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        v44 = v50;
        v50 = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        v45 = v58;
        v58 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v40);
          else
            *(_DWORD *)v45 -= 2;
        }
        v46 = *(WTF::StringImpl **)v56;
        *(_QWORD *)v56 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v40);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _OWORD *))off_1E336CC40[v8])(v54, v61);
    }
    v22 = *a3;
    LOWORD(v54[0]) = 256;
    v23 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v54[1] = v23;
    v24 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)&v56[16] = *(_OWORD *)(a2 + 40);
    *(_OWORD *)&v56[32] = v24;
    *(_OWORD *)&v56[48] = *(_OWORD *)(a2 + 72);
    v25 = *(_OWORD *)(a2 + 24);
    v55 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)v56 = v25;
    v26 = *(_QWORD *)(a2 + 88);
    v27 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)&v56[64] = v26;
    *(_QWORD *)v57 = v27;
    *(_QWORD *)&v57[13] = *(_QWORD *)(a2 + 109);
    *(_QWORD *)&v57[8] = *(_QWORD *)(a2 + 104);
    LOBYTE(v58) = 1;
    result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsVideoEncoderSupport>>(v22, (uint64_t)v54);
    if ((_BYTE)v58)
    {
      v28 = *(WTF::StringImpl **)v57;
      *(_QWORD *)v57 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v20);
        else
          *(_DWORD *)v28 -= 2;
      }
      result = v54[1];
      v54[1] = 0;
      if (result)
      {
LABEL_25:
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v18 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v52 = 33;
    *(_QWORD *)&v61[0] = 0;
    LOBYTE(v54[0]) = 33;
    v19 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    v54[1] = v19;
    WebCore::DeferredPromise::reject(v18, (unsigned __int8 *)v54, 0, (objc_class **)v61);
    v21 = v54[1];
    v54[1] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    result = v53;
    v53 = 0;
    if (result)
      goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsVideoEncoderSupport>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::createVideoEncoderConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  if (!*(_DWORD *)(a2 + 92))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = v15;
    v8 = 6;
LABEL_27:
    *(_BYTE *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    v9 = 1;
    goto LABEL_28;
  }
  v4 = *(_QWORD *)(a2 + 96);
  if (!v4)
    goto LABEL_9;
  if ((MEMORY[0x19AEA53F4](v4, "L1T3", 4) & 1) == 0)
  {
    if ((MEMORY[0x19AEA53F4](*(_QWORD *)(a2 + 96), "L1T2", 4) & 1) != 0)
    {
      v5 = 1;
      goto LABEL_10;
    }
    if ((MEMORY[0x19AEA53F4](*(_QWORD *)(a2 + 96), "L1T1", 4) & 1) == 0)
    {
LABEL_26:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v15;
      v8 = 33;
      goto LABEL_27;
    }
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v5 = 2;
LABEL_10:
  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    result = WTF::StringImpl::startsWith();
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 8) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
        goto LABEL_26;
    }
  }
  v9 = 0;
  v10 = *(_DWORD *)(a2 + 108);
  if (*(_BYTE *)(a2 + 116))
    v11 = *(_DWORD *)(a2 + 112) == 0;
  else
    v11 = 0;
  v12 = v11;
  if (*(_BYTE *)(a2 + 64))
    v13 = *(_QWORD *)(a2 + 56);
  else
    v13 = 0;
  v14 = *(double *)(a2 + 72);
  if (!*(_BYTE *)(a2 + 80))
    v14 = 0.0;
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v10 == 1;
  *(_BYTE *)(a1 + 41) = v5;
LABEL_28:
  *(_DWORD *)(a1 + 48) = v9;
  return result;
}

uint64_t (***WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoEncoder>(uint64_t (**a1)(), uint64_t (***a2)()))()
{
  uint64_t v4;
  uint64_t (*v5)();
  int v7;
  uint64_t (*v8)();
  int v10;
  uint64_t (**v11)();
  uint64_t (***result)();
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t (***v17)();

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = a1[3];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  *(_QWORD *)(v4 + 8) = a1;
  v8 = a1[3];
  a1[2] = (uint64_t (*)())((char *)a1[2] + 1);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_14:
  ++*((_QWORD *)v8 + 1);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = *a2;
  *a2 = 0;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E336D880;
  result[1] = a1;
  result[2] = (uint64_t (**)())v4;
  result[3] = v11;
  v17 = result;
  v13 = a1[1];
  if (!v13)
  {
    v17 = 0;
    v16 = &off_1E336D880;
    return (uint64_t (***)())v16[1]();
  }
  v14 = *((_QWORD *)v13 + 1);
  if (!v14)
  {
    v17 = 0;
    goto LABEL_24;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v15, 9, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_24:
    v16 = *result;
    return (uint64_t (***)())v16[1]();
  }
  return result;
}

BOOL WebCore::WebCodecsVideoEncoder::virtualHasPendingActivity(WebCore::WebCodecsVideoEncoder *this)
{
  if (*((_DWORD *)this + 14) != 1)
    return 0;
  if (*((_QWORD *)this + 8) || *((_QWORD *)this + 9))
    return 1;
  return *((_BYTE *)this + 433) != 0;
}

uint64_t WebCore::WebCodecsAudioDecoder::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsAudioDecoder::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsAudioDecoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsAudioDecoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsAudioDecoder::eventTargetInterface(WebCore::WebCodecsAudioDecoder *this)
{
  return 35;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioDecoder::eventTargetInterface(WebCore::WebCodecsAudioDecoder *this)
{
  return 35;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioDecoder::scriptExecutionContext(WebCore::WebCodecsAudioDecoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioDecoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioDecoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsAudioEncoder::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsAudioEncoder::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsAudioEncoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsAudioEncoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsAudioEncoder::eventTargetInterface(WebCore::WebCodecsAudioEncoder *this)
{
  return 36;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioEncoder::eventTargetInterface(WebCore::WebCodecsAudioEncoder *this)
{
  return 36;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioEncoder::scriptExecutionContext(WebCore::WebCodecsAudioEncoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioEncoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsAudioEncoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsVideoDecoder::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsVideoDecoder::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsVideoDecoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsVideoDecoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsVideoDecoder::eventTargetInterface(WebCore::WebCodecsVideoDecoder *this)
{
  return 37;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoDecoder::eventTargetInterface(WebCore::WebCodecsVideoDecoder *this)
{
  return 37;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoDecoder::scriptExecutionContext(WebCore::WebCodecsVideoDecoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoDecoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoDecoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsVideoEncoder::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsVideoEncoder::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsVideoEncoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebCodecsVideoEncoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::WebCodecsVideoEncoder::eventTargetInterface(WebCore::WebCodecsVideoEncoder *this)
{
  return 38;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoEncoder::eventTargetInterface(WebCore::WebCodecsVideoEncoder *this)
{
  return 38;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoEncoder::scriptExecutionContext(WebCore::WebCodecsVideoEncoder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoEncoder::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebCodecsVideoEncoder::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t JSC::ArrayBufferView::data(JSC::ArrayBufferView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v3 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
    return *((_QWORD *)this + 3);
  if (!((v2 & 0x3FFFFFFFFLL) + v3))
    return 0;
  result = *((_QWORD *)this + 3);
  if (result && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    return (result & 0x3FFFFFFFFLL) + v3;
  return result;
}

JSC::ArrayBufferView *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createAudioDecoderConfig(WebCore::WebCodecsAudioDecoderConfig const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, JSC::ArrayBufferView **a2)
{
  JSC::ArrayBufferView *result;

  result = *a2;
  if (*a2)
    return (JSC::ArrayBufferView *)JSC::ArrayBufferView::data(result);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createAudioDecoderConfig(WebCore::WebCodecsAudioDecoderConfig const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)a2)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (result)
  {
    v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v3)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        return (result & 0x3FFFFFFFFLL) + v3;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createAudioDecoderConfig(WebCore::WebCodecsAudioDecoderConfig const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    return 0;
  v6 = *(_BYTE *)(v2 + 6);
  if ((v6 & 3) == 0)
    return *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v3 + 64) && (v15 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v8 = atomic_load((unint64_t *)(v15 + 32));
    v6 = *(_BYTE *)(v2 + 6);
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 48);
  }
  v9 = *(_QWORD *)(v2 + 8);
  if ((v6 & 4) == 0)
  {
    v10 = *(_QWORD *)(v2 + 16);
    v11 = v10 + v9 <= v8 && v8 >= v9;
    if (v11)
      return 0;
    else
      return v10;
  }
  v11 = v8 >= v9;
  v12 = v8 - v9;
  if (v11)
    return 0;
  v13 = *(_BYTE *)(v2 + 4) - 4;
  if (v13 > 7u)
    LOBYTE(v14) = 0;
  else
    v14 = qword_1968DF2C8[(char)v13];
  return (-1 << v14) & v12;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createAudioDecoderConfig(WebCore::WebCodecsAudioDecoderConfig const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  if (!*a2)
    return 0;
  if (*(_BYTE *)(v2 + 64))
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
      return *(_QWORD *)(v4 + 32);
  }
  return *(_QWORD *)(v2 + 48);
}

JSC::ArrayBufferView *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createVideoDecoderConfig(WebCore::WebCodecsVideoDecoderConfig const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, JSC::ArrayBufferView **a2)
{
  JSC::ArrayBufferView *result;

  result = *a2;
  if (*a2)
    return (JSC::ArrayBufferView *)JSC::ArrayBufferView::data(result);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createVideoDecoderConfig(WebCore::WebCodecsVideoDecoderConfig const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)a2)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (result)
  {
    v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v3)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        return (result & 0x3FFFFFFFFLL) + v3;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createVideoDecoderConfig(WebCore::WebCodecsVideoDecoderConfig const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    return 0;
  v6 = *(_BYTE *)(v2 + 6);
  if ((v6 & 3) == 0)
    return *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v3 + 64) && (v15 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v8 = atomic_load((unint64_t *)(v15 + 32));
    v6 = *(_BYTE *)(v2 + 6);
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 48);
  }
  v9 = *(_QWORD *)(v2 + 8);
  if ((v6 & 4) == 0)
  {
    v10 = *(_QWORD *)(v2 + 16);
    v11 = v10 + v9 <= v8 && v8 >= v9;
    if (v11)
      return 0;
    else
      return v10;
  }
  v11 = v8 >= v9;
  v12 = v8 - v9;
  if (v11)
    return 0;
  v13 = *(_BYTE *)(v2 + 4) - 4;
  if (v13 > 7u)
    LOBYTE(v14) = 0;
  else
    v14 = qword_1968DF2C8[(char)v13];
  return (-1 << v14) & v12;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::createVideoDecoderConfig(WebCore::WebCodecsVideoDecoderConfig const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>,WTF<WTF::RefPtr::ArrayBuffer,JSC::ArrayBufferView<WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>,std::__variant_detail::_Trait::RawPtrTraits<JSC><WTF::RefPtr<JSC::ArrayBufferView,std::__variant_detail::_Trait::RawPtrTraits<JSC>,std::__variant_detail::_Trait::DefaultRefDerefTraits<JSC>>>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  if (!*a2)
    return 0;
  if (*(_BYTE *)(v2 + 64))
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
      return *(_QWORD *)(v4 + 32);
  }
  return *(_QWORD *)(v2 + 48);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12VideoEncoder6ConfigENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioData::~WebCodecsAudioData()::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 248))(a2, 1, 1, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)a1 = &off_1E336CC98;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E336CBE0[v3])(&v6, a1 + 32);
    *(_DWORD *)(a1 + 40) = -1;
  }
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)this = &off_1E336CC98;
  if (*((_BYTE *)this + 48))
  {
    v3 = *((unsigned int *)this + 10);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v3])(&v6, (char *)this + 32);
    *((_DWORD *)this + 10) = -1;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 192) = 1;
  v16 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)&v17 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
    i = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v3);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (!*(_QWORD *)(v3 + 24))
    goto LABEL_27;
  ++*(_QWORD *)(v3 + 16);
  for (i = v3; ; i = 0)
  {
    v6 = __ldxr((unsigned __int8 *)v3);
    if (v6 != 1)
    {
      __clrex();
LABEL_12:
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      goto LABEL_13;
    }
    if (__stlxr(0, (unsigned __int8 *)v3))
      goto LABEL_12;
LABEL_13:
    v3 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v3 = &off_1E336CCC0;
    *(_OWORD *)(v3 + 16) = v16;
    *(_OWORD *)(v3 + 32) = v17;
    *(_QWORD *)(v3 + 48) = i;
    *(_QWORD *)(v3 + 56) = v2;
    if (!*(_BYTE *)(a1 + 72))
    {
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E336CD10;
      v11[1] = v2;
      *(_QWORD *)&v16 = v11;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 16))(v3, &v16);
      v12 = v16;
      *(_QWORD *)&v16 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    if (!*(_BYTE *)(a1 + 48))
      goto LABEL_19;
    v7 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v7 == -1)
      goto LABEL_28;
    *(_QWORD *)&v16 = &v15;
    ((void (*)(__int128 *, uint64_t))off_1E336CC00[v7])(&v16, a1 + 32);
    if (*(_BYTE *)(a1 + 48))
      break;
    __break(1u);
LABEL_27:
    ;
  }
  v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8 != -1)
  {
    *(_QWORD *)&v16 = &v15;
    ((void (*)(__int128 *, uint64_t))off_1E336CC10[v8])(&v16, a1 + 32);
LABEL_19:
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E336CD38;
    v9[1] = v2;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &unk_1E336CD60;
    v10[1] = v2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    DWORD2(v16) = 1;
    (*(void (**)(_QWORD *, __int128 *))(*v9 + 16))(v9, &v16);
    if (DWORD2(v16) != -1)
      ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioDecoderEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[DWORD2(v16)])(&v15, &v16);
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
LABEL_28:
  v14 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0::operator()(void)::{lambda(WTF::Function<void ()(void)> &&)#1},void,WTF::Function<void ()(void)>>::~CallableWrapper(v14);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0::operator()(void)::{lambda(WTF::Function<void ()(void)> &&)#1},void,WTF::Function<void ()(void)>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E336CCC0;
  v3 = a1[6];
  a1[6] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0::operator()(void)::{lambda(WTF::Function<void ()(void)> &&)#1},void,WTF::Function<void ()(void)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E336CCC0;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0::operator()(void)::{lambda(WTF::Function<void ()(void)> &&)#1},void,WTF::Function<void ()(void)>>::call(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  _QWORD *v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a1 + 32);
  v19[0] = *(_OWORD *)(a1 + 16);
  v19[1] = v4;
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *a2;
  *a2 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E336CCE8;
  v11[1] = v7;
  v11[2] = v9;
  v11[3] = v10;
  v17 = v11;
  v18 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v19);
  if (v13)
  {
    v14 = v13[4];
    if (v14)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 336))(v14, &v17);
  }
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsAudioDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioDecoderConfigEEN3__0clEvENKUlONS_8FunctionIFvvEEEE_clESC_EUlRT_E_vJS5_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E336CCE8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsAudioDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioDecoderConfigEEN3__0clEvENKUlONS_8FunctionIFvvEEEE_clESC_EUlRT_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E336CCE8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsAudioDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioDecoderConfigEEN3__0clEvENKUlONS_8FunctionIFvvEEEE_clESC_EUlRT_E_vJS5_EE4callES5_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(result + 8);
  if (!v1)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v3)
    return result;
LABEL_15:
  result = (uint64_t)WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioDecoder>((uint64_t (**)())v3, (uint64_t (***)())(v2 + 24));
  v7 = *(_QWORD *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_19;
  }
  result = MEMORY[0x19AEA534C](v7);
LABEL_19:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_26;
  if (v10)
    return result;
LABEL_27:
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  if (!v12)
    return WTF::fastFree((WTF *)v7, v6);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  unsigned __int8 v4[8];
  WTF::StringImpl *v5;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 6;
  WebCore::WebCodecsAudioDecoder::closeDecoder(v1, v4, (uint64_t)v6);
  if (v8 && v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&)::$_0::operator()(void)::{lambda(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioDecoder>,WTF::String> &&)#1},void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioDecoder>,WTF::String>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x19558A59CLL);
    }
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v14[0] = 6;
    v15 = v4;
    WebCore::WebCodecsAudioDecoder::closeDecoder(v2, v14, (uint64_t)v16);
    if (v18 && v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v5);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    result = *(WTF::StringImpl **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = v7;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    *(_BYTE *)(v2 + 192) = 0;
    do
    {
      v8 = *(_QWORD *)(v2 + 160);
      if (v8 == *(_QWORD *)(v2 + 168))
        break;
      v9 = *(_QWORD *)(v2 + 176);
      v10 = *(_QWORD *)(v9 + 8 * v8);
      *(_QWORD *)(v9 + 8 * v8) = 0;
      v11 = *(_QWORD *)(v2 + 176);
      v12 = *(_QWORD *)(v11 + 8 * v8);
      *(_QWORD *)(v11 + 8 * v8) = 0;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v8 = *(_QWORD *)(v2 + 160);
      }
      v13 = v8 == *(unsigned int *)(v2 + 184) - 1 ? 0 : v8 + 1;
      *(_QWORD *)(v2 + 160) = v13;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    while (!*(_BYTE *)(v2 + 192));
  }
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioDecoderConfigEEN3__0clEvEUlOT_E_vJONSt12experimental15fundamentals_v38expectedINS2_12AudioDecoder11DecodedDataENS_6StringEEEEE4callESJ_(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;
  _BYTE v14[8];
  WTF::StringImpl *v15;
  char v16;

  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 56) == 1)
  {
    v3 = *(_DWORD *)(a2 + 8);
    if (v3)
    {
      if (v3 == 1)
      {
        v4 = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = 0;
        v12[0] = 22;
        v13 = v4;
        WebCore::WebCodecsAudioDecoder::closeDecoder(v2, v12, (uint64_t)v14);
        if (v16 && v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v5);
          else
            *(_DWORD *)v15 -= 2;
        }
        result = v13;
        v13 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        v11 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedAudioChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunk>> &&)::$_0,void>::~CallableWrapper(v11);
      }
    }
    else
    {
      v6 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      v7 = *(_QWORD *)(v2 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
          v9 = (WebCore::ScriptExecutionContext *)(v8 - 96);
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      v10 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v10 + 16) = 1;
      *(_QWORD *)v10 = &off_1E33A18C0;
      *(_QWORD *)(v10 + 8) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v10, v9);
      *(_QWORD *)v10 = &off_1E336C7C8;
      *(_QWORD *)(v10 + 24) = v6;
      *(_BYTE *)(v10 + 32) = 0;
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v10);
      if (*(_DWORD *)(v10 + 16) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      else
        --*(_DWORD *)(v10 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedAudioChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunk>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  *a1 = &off_1E336CD88;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)v5));
        if (!v7)
        {
          v9 = v3;
          v10 = (WTF *)v5;
          atomic_store(1u, (unsigned int *)v5);
          v8 = *(WTF **)(v5 + 40);
          if (v8)
          {
            *(_QWORD *)(v5 + 40) = 0;
            *(_DWORD *)(v5 + 48) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v10, a2);
          v3 = v9;
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedAudioChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunk>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E336CD88;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)v5));
        if (!v7)
        {
          v9 = v3;
          v10 = (WTF *)v5;
          atomic_store(1u, (unsigned int *)v5);
          v8 = *(WTF **)(v5 + 40);
          if (v8)
          {
            *(_QWORD *)(v5 + 40) = 0;
            *(_DWORD *)(v5 + 48) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v10, a2);
          v3 = v9;
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedAudioChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunk>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t (**v10[2])();
  char v11;
  uint64_t v12;
  __int128 v13;

  v2 = *(_QWORD *)(a1 + 8);
  *(int64x2_t *)(v2 + 64) = vaddq_s64(*(int64x2_t *)(v2 + 64), (int64x2_t)xmmword_1968DF1E0);
  if (!*(_BYTE *)(v2 + 104))
  {
    *(_BYTE *)(v2 + 104) = 1;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E336CEF0;
    *(_QWORD *)(v3 + 8) = v2;
    v10[0] = (uint64_t (**)())v3;
    WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioDecoder>((uint64_t (**)())v2, v10);
    if (v10[0])
      (*((void (**)(uint64_t (**)()))*v10[0] + 1))(v10[0]);
  }
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v6 = (uint64_t (**)())*(unsigned int *)(v5 + 52);
  v10[0] = *(uint64_t (***)())(v5 + 40);
  v10[1] = v6;
  v11 = *(_BYTE *)(v5 + 8) ^ 1;
  v12 = *(_QWORD *)(v5 + 16);
  v13 = *(_OWORD *)(v5 + 24);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E336CDB0;
  v7[1] = v2;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t (***)(), _QWORD **))(*(_QWORD *)v4 + 16))(v4, v10, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedAudioChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunk>> &&)::$_0::operator()(void)::{lambda(WTF::String &&)#1},void,WTF::String>::call(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int8 v5[8];
  WTF::StringImpl *v6;
  _BYTE v7[8];
  WTF::StringImpl *v8;
  char v9;

  result = *(WTF::StringImpl **)(a1 + 8);
  --*((_QWORD *)result + 9);
  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v5[0] = 22;
    v6 = v3;
    WebCore::WebCodecsAudioDecoder::closeDecoder((uint64_t)result, v5, (uint64_t)v7);
    if (v9 && v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v1 + 96);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E336CE00;
  v4[1] = v1;
  v4[2] = v2;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 24))(v3, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE v10[8];

  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v1 + 144) == *(_QWORD *)(result + 16))
  {
    v2 = *(_QWORD *)(v1 + 112);
    if (v2 == *(_QWORD *)(v1 + 120))
    {
      __break(0xC471u);
      JUMPOUT(0x19558ABD8);
    }
    v3 = *(_QWORD *)(v1 + 128);
    v4 = *(_QWORD *)(v3 + 8 * v2);
    *(_QWORD *)(v3 + 8 * v2) = 0;
    v5 = *(_QWORD *)(v1 + 128);
    result = *(_QWORD *)(v5 + 8 * v2);
    *(_QWORD *)(v5 + 8 * v2) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        v2 = *(_QWORD *)(v1 + 112);
      }
      else
      {
        --*(_DWORD *)(result + 16);
      }
    }
    if (v2 == *(unsigned int *)(v1 + 136) - 1)
      v6 = 0;
    else
      v6 = v2 + 1;
    *(_QWORD *)(v1 + 112) = v6;
    v7 = *(_QWORD *)(v4 + 24);
    if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
    {
      v8 = *(_QWORD *)(v4 + 32);
      if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)v8;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v4, v9, 0, (objc_class *)0xA);
      result = MEMORY[0x19AEA32A0](v10);
    }
    if (*(_DWORD *)(v4 + 16) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      --*(_DWORD *)(v4 + 16);
    *(_BYTE *)(v1 + 193) = *(_QWORD *)(v1 + 112) != *(_QWORD *)(v1 + 120);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioDecoder>,WTF::String> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)a1 = &off_1E336CE28;
  v3 = *(WTF **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E336CBE0[v4])(&v7, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
  }
  v5 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioDecoder>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)this = &off_1E336CE28;
  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*((_BYTE *)this + 72))
  {
    v4 = *((unsigned int *)this + 16);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v4])(&v7, (char *)this + 56);
    *((_DWORD *)this + 16) = -1;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioDecoder>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  BOOL v19;
  WTF::StringImpl *v20;
  char v21[8];
  int v22;
  char v23;
  __int128 v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a1 + 32);
  v31[0] = *(_OWORD *)(a1 + 16);
  v31[1] = v4;
  v19 = v3 == 0;
  WTF::String::isolatedCopy();
  v21[0] = 0;
  v23 = 0;
  v24 = *(_OWORD *)(a1 + 80);
  v25 = *(WTF **)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v26 = v5;
  v27 = *(_QWORD *)(a1 + 112);
  v6 = WTF::fastMalloc((WTF *)0x58);
  v7 = v6;
  *(_QWORD *)v6 = &off_1E336CE50;
  *(_BYTE *)(v6 + 8) = v19;
  *(_QWORD *)(v6 + 16) = v20;
  *(_BYTE *)(v6 + 24) = 0;
  v8 = v6 + 24;
  *(_BYTE *)(v6 + 40) = 0;
  if (v23)
  {
    *(_DWORD *)(v6 + 32) = -1;
    v9 = v22;
    if (v22 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, char *))off_1E336CBF0[v22])(&v28, v8, v21);
      *(_DWORD *)(v7 + 32) = v9;
    }
    *(_BYTE *)(v7 + 40) = 1;
  }
  *(_OWORD *)(v7 + 48) = v24;
  *(_QWORD *)(v7 + 64) = v25;
  v10 = v26;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)(v7 + 72) = v10;
  *(_QWORD *)(v7 + 80) = v27;
  v28 = v7;
  v29 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock, v8);
LABEL_9:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v31);
  if (v12)
  {
    v14 = v12[4];
    if (v14)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 336))(v14, &v28);
  }
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v16 = v28;
  v28 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v25;
  if (v25)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    WTF::fastFree(v17, v13);
  }
  if (v23)
  {
    if (v22 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v22])(&v30, v21);
    v22 = -1;
  }
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioDecoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioDecoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12AudioDecoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)a1 = &off_1E336CE50;
  v3 = *(WTF **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E336CBE0[v4])(&v7, a1 + 24);
    *(_DWORD *)(a1 + 32) = -1;
  }
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioDecoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioDecoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12AudioDecoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)this = &off_1E336CE50;
  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v4])(&v7, (char *)this + 24);
    *((_DWORD *)this + 8) = -1;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioDecoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioDecoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12AudioDecoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EE4callES5_(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _BYTE v19[8];
  int v20;
  char v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;

  result = WTF::HashSet<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)(a2 + 264), *(_QWORD *)(a1 + 80), &v25);
  v4 = (uint64_t)v25;
  if (v25)
  {
    if (*(_DWORD *)(a1 + 76))
    {
      JSC::ArrayBuffer::create();
      v5 = v24;
      v24 = 0;
      v17 = v5;
      if (*(_BYTE *)(a1 + 40))
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(a1 + 24, (uint64_t *)(a1 + 24), &v17);
        v6 = v17;
        v17 = 0;
        if (v6)
        {
          v7 = *(_DWORD *)v6 == 2;
          *(_DWORD *)v6 -= 2;
          if (v7)
          {
            v8 = (_QWORD *)v6;
            v9 = *(_QWORD *)(v6 + 80);
            if (v9)
            {
              *(_QWORD *)(v9 + 8) = 3;
              v8[10] = 0;
            }
            if ((v8[9] & 1) == 0)
              JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v8 + 9));
            JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v8 + 2));
            v11 = (WTF *)v8[1];
            if ((v11 & 1) == 0 && v11)
            {
              v12 = *(WTF **)v11;
              if (*(_QWORD *)v11)
              {
                *(_QWORD *)v11 = 0;
                *((_DWORD *)v11 + 2) = 0;
                WTF::fastFree(v12, v10);
              }
              WTF::fastFree(v11, v10);
            }
            WTF::fastFree((WTF *)v8, v10);
          }
        }
      }
      else
      {
        *(_QWORD *)(a1 + 24) = v5;
        *(_DWORD *)(a1 + 32) = 1;
        *(_BYTE *)(a1 + 40) = 1;
        v17 = 0;
      }
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v24);
      v4 = (uint64_t)v25;
    }
    LOBYTE(v17) = *(_BYTE *)(a1 + 8);
    BYTE1(v17) = 1;
    v13 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v18 = v13;
    v19[0] = 0;
    v21 = 0;
    if (*(_BYTE *)(a1 + 40))
    {
      v20 = -1;
      v14 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v14 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E336CBF0[v14])(&v24, v19, a1 + 24);
        v20 = v14;
      }
      v21 = 1;
    }
    v22 = *(_OWORD *)(a1 + 48);
    v23 = 1;
    WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsAudioDecoderSupport>>(v4, (uint64_t)&v17);
    if (v23)
    {
      if (v21)
      {
        if (v20 != -1)
          ((void (*)(uint64_t *, _BYTE *))off_1E336CBE0[v20])(&v24, v19);
        v20 = -1;
      }
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
      else
        --*((_DWORD *)result + 4);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioDecoder>(WebCore::WebCodecsAudioDecoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *a1 = &off_1E336CEC8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return a1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return a1;
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioDecoder>(WebCore::WebCodecsAudioDecoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *(_QWORD *)this = &off_1E336CEC8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return WTF::fastFree(this, a2);
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return WTF::fastFree(this, a2);
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioDecoder>(WebCore::WebCodecsAudioDecoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

WTF *WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  v4 = *(_QWORD *)(v3 + 24);
  --*(_QWORD *)(v3 + 16);
  LODWORD(v3) = __ldaxr((unsigned __int8 *)v4);
  if ((_DWORD)v3)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_7:
  v5 = *(_QWORD *)(v4 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v4 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_14:
  if (!v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if (!v8)
      WTF::fastFree((WTF *)v4, a2);
  }
  return (WTF *)WTF::fastFree(v2, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioDecoder::scheduleDequeueEvent(void)::$_0,void>::call(WebCore *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  uint64_t result;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 592) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 592);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 32) + 48))(v1 + 32, v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 16);
  *(_BYTE *)(v1 + 104) = 0;
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    v7 = (_QWORD *)result;
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 <= v9)
    {
      if (*(_QWORD *)v3 != v9)
      {
        v19 = (uint64_t *)(result + 8 * v8);
        v20 = (uint64_t *)((char *)v4 + 8 * v8);
        v21 = 8 * v9 - 8 * v8;
        do
        {
          v22 = *v20;
          *v20 = 0;
          *v19 = v22;
          result = *v20;
          *v20 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v19;
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
    }
    else
    {
      if (v9)
      {
        v11 = 8 * v9;
        v12 = (uint64_t *)v4;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *v7 = v13;
          result = *v12;
          *v12 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v7;
          ++v12;
          v11 -= 8;
        }
        while (v11);
        v5 = *(_DWORD *)(v3 + 24);
        v8 = *(_QWORD *)v3;
        v7 = *(_QWORD **)(v3 + 16);
      }
      v10 = v8 - v1 + v5;
      if (v8 != v1)
      {
        v14 = v5;
        v15 = (uint64_t *)((char *)v4 + 8 * v8);
        v16 = &v7[v14];
        v17 = 8 * v8 - 8 * v1;
        do
        {
          v18 = *v15;
          *v15 = 0;
          *(_QWORD *)((char *)v16 + v17) = v18;
          result = *v15;
          *v15 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v15;
          v17 += 8;
        }
        while (v17);
      }
      *(_QWORD *)v3 = v10;
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336CF28;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336CF28;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v2 + 192) = 1;
  v3 = *(_QWORD *)(v2 + 96);
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *(_OWORD *)(a1 + 104);
  v23 = *(_OWORD *)(a1 + 88);
  v24 = v9;
  v25[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)(a1 + 129);
  v10 = *(_OWORD *)(a1 + 40);
  v19 = *(_OWORD *)(a1 + 24);
  v20 = v10;
  v11 = *(_OWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 56);
  v22 = v11;
  v12 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)v12 = &off_1E336CF50;
  *(_QWORD *)(v12 + 8) = v6;
  *(_QWORD *)(v12 + 16) = v2;
  *(_QWORD *)(v12 + 24) = v8;
  v13 = v22;
  *(_OWORD *)(v12 + 64) = v21;
  *(_OWORD *)(v12 + 80) = v13;
  v14 = v20;
  *(_OWORD *)(v12 + 32) = v19;
  *(_OWORD *)(v12 + 48) = v14;
  *(_OWORD *)(v12 + 137) = *(_OWORD *)((char *)v25 + 9);
  v15 = v25[0];
  v16 = v23;
  *(_OWORD *)(v12 + 112) = v24;
  *(_OWORD *)(v12 + 128) = v15;
  *(_OWORD *)(v12 + 96) = v16;
  v18 = v12;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, &v18);
  result = v18;
  v18 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E336CF50;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_9:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_16;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_16:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E336CF50;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_9:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_16;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_16:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(result + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
    return result;
LABEL_15:
  if (*(_DWORD *)(v3 + 56) != 2)
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 8))
      {
        *(_BYTE *)(v3 + 192) = 0;
        do
        {
          v7 = *(_QWORD *)(v3 + 160);
          if (v7 == *(_QWORD *)(v3 + 168))
            break;
          v8 = *(_QWORD *)(v3 + 176);
          v9 = *(_QWORD *)(v8 + 8 * v7);
          *(_QWORD *)(v8 + 8 * v7) = 0;
          v10 = *(_QWORD *)(v3 + 176);
          v11 = *(_QWORD *)(v10 + 8 * v7);
          *(_QWORD *)(v10 + 8 * v7) = 0;
          if (v11)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            v7 = *(_QWORD *)(v3 + 160);
          }
          v12 = v7 == *(unsigned int *)(v3 + 184) - 1 ? 0 : v7 + 1;
          *(_QWORD *)(v3 + 160) = v12;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
        while (!*(_BYTE *)(v3 + 192));
      }
    }
  }
  v13 = *(_QWORD *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_30;
  }
  result = MEMORY[0x19AEA534C](v13);
LABEL_30:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v20 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v20 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_37:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return result;
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_37;
  if (v16)
    return result;
LABEL_38:
  if (v17)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  if (!v18)
    return WTF::fastFree((WTF *)v13, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336CF78;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336CF78;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  __int128 v9;
  _DWORD *v10;
  __int128 *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 192) = 1;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 16);
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_13:
  v26 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)&v27 = *(_QWORD *)(a1 + 192);
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v8 = &off_1E336CFA0;
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v2;
  v9 = v27;
  *(_OWORD *)(v8 + 32) = v26;
  *(_OWORD *)(v8 + 48) = v9;
  if (*(_BYTE *)(a1 + 160))
  {
    v10 = *(_DWORD **)(a1 + 24);
    if (v10)
      *v10 += 2;
    v11 = (__int128 *)(a1 + 32);
    v12 = *(WTF::StringImpl **)(v2 + 200);
    *(_QWORD *)(v2 + 200) = v10;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *v11;
    v14 = v11[1];
    v15 = v11[3];
    *(_OWORD *)(v2 + 240) = v11[2];
    *(_OWORD *)(v2 + 256) = v15;
    *(_OWORD *)(v2 + 208) = v13;
    *(_OWORD *)(v2 + 224) = v14;
    v16 = v11[4];
    v17 = v11[5];
    v18 = v11[6];
    *(_OWORD *)(v2 + 313) = *(__int128 *)((char *)v11 + 105);
    *(_OWORD *)(v2 + 288) = v17;
    *(_OWORD *)(v2 + 304) = v18;
    *(_OWORD *)(v2 + 272) = v16;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E336D018;
    v19[1] = v2;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = &unk_1E336D040;
    v20[1] = v2;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E336D068;
    v21[1] = v2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    DWORD2(v26) = 1;
    (*(void (**)(_QWORD *, __int128 *))(*v19 + 16))(v19, &v26);
    if (DWORD2(v26) != -1)
      ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12AudioEncoderEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[DWORD2(v26)])(&v25, &v26);
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  else
  {
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E336CFF0;
    v22[1] = v2;
    *(_QWORD *)&v26 = v22;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(v8, &v26);
    v23 = v26;
    *(_QWORD *)&v26 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E336CFA0;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E336CFA0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvEUlOT_E_vJONS_8FunctionIFvvEEEEE4callESF_(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  _QWORD *v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a1 + 48);
  v19[0] = *(_OWORD *)(a1 + 32);
  v19[1] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *a2;
  *a2 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E336CFC8;
  v11[1] = v7;
  v11[2] = v9;
  v11[3] = v10;
  v17 = v11;
  v18 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v19);
  if (v13)
  {
    v14 = v13[4];
    if (v14)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 336))(v14, &v17);
  }
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E336CFC8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E336CFC8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EE4callES5_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(result + 8);
  if (!v1)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v3)
    return result;
LABEL_15:
  result = (uint64_t)WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>((uint64_t (**)())v3, (uint64_t (***)())(v2 + 24));
  v7 = *(_QWORD *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_19;
  }
  result = MEMORY[0x19AEA534C](v7);
LABEL_19:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_26;
  if (v10)
    return result;
LABEL_27:
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  if (!v12)
    return WTF::fastFree((WTF *)v7, v6);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  unsigned __int8 v4[8];
  WTF::StringImpl *v5;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 6;
  WebCore::WebCodecsAudioEncoder::closeEncoder(v1, v4, (uint64_t)v6);
  if (v8 && v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvEUlOT_E0_vJONSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12AudioEncoderEEENS_6StringEEEEE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x19558CB10);
    }
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v14[0] = 6;
    v15 = v4;
    WebCore::WebCodecsAudioEncoder::closeEncoder(v2, v14, (uint64_t)v16);
    if (v18 && v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v5);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    result = *(WTF::StringImpl **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = v7;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    *(_BYTE *)(v2 + 192) = 0;
    *(_BYTE *)(v2 + 416) = 1;
    do
    {
      v8 = *(_QWORD *)(v2 + 160);
      if (v8 == *(_QWORD *)(v2 + 168))
        break;
      v9 = *(_QWORD *)(v2 + 176);
      v10 = *(_QWORD *)(v9 + 8 * v8);
      *(_QWORD *)(v9 + 8 * v8) = 0;
      v11 = *(_QWORD *)(v2 + 176);
      v12 = *(_QWORD *)(v11 + 8 * v8);
      *(_QWORD *)(v11 + 8 * v8) = 0;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v8 = *(_QWORD *)(v2 + 160);
      }
      v13 = v8 == *(unsigned int *)(v2 + 184) - 1 ? 0 : v8 + 1;
      *(_QWORD *)(v2 + 160) = v13;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    while (!*(_BYTE *)(v2 + 192));
  }
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvEUlOT_E1_vJONS2_31AudioEncoderActiveConfigurationEEE4callESD_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *result;
  __int128 v6;
  __int128 v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl **)(v3 + 336);
  *(_QWORD *)(v3 + 336) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *(_OWORD *)(a2 + 1);
  v7 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v3 + 369) = *(_OWORD *)((char *)a2 + 33);
  *(_OWORD *)(v3 + 360) = v7;
  *(_OWORD *)(v3 + 344) = v6;
  v8 = (WTF::StringImpl **)(v3 + 392);
  if (*(unsigned __int8 *)(v3 + 408) == *((unsigned __int8 *)a2 + 72))
  {
    if (*(_BYTE *)(v3 + 408))
    {
      result = *v8;
      if (*v8)
      {
        *(_QWORD *)(v3 + 392) = 0;
        *(_DWORD *)(v3 + 400) = 0;
        result = (WTF::StringImpl *)WTF::fastFree(result, a2);
      }
      v9 = a2[7];
      a2[7] = 0;
      *(_QWORD *)(v3 + 392) = v9;
      LODWORD(v9) = *((_DWORD *)a2 + 16);
      *((_DWORD *)a2 + 16) = 0;
      *(_DWORD *)(v3 + 400) = v9;
      LODWORD(v9) = *((_DWORD *)a2 + 17);
      *((_DWORD *)a2 + 17) = 0;
      *(_DWORD *)(v3 + 404) = v9;
    }
  }
  else if (*(_BYTE *)(v3 + 408))
  {
    result = *v8;
    if (*v8)
    {
      *(_QWORD *)(v3 + 392) = 0;
      *(_DWORD *)(v3 + 400) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(result, a2);
    }
    *(_BYTE *)(v3 + 408) = 0;
  }
  else
  {
    *v8 = 0;
    *(_QWORD *)(v3 + 400) = 0;
    v10 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(v3 + 392) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = 0;
    *(_DWORD *)(v3 + 400) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    *(_DWORD *)(v3 + 404) = v10;
    *(_BYTE *)(v3 + 408) = 1;
  }
  *(_BYTE *)(v3 + 416) = 1;
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEEN3__1clEvEUlOT_E2_vJONS2_12AudioEncoder12EncodedFrameEEE4callESE_(WTF::StringImpl *result, _DWORD *a2)
{
  uint64_t v2;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  JSC::ArrayBuffer *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  NSObject *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  uint8_t buf[16];

  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 56) != 1)
    return result;
  v4 = &v32;
  JSC::ArrayBuffer::create();
  v5 = v32;
  v32 = 0;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v32);
  LOBYTE(v32) = *((_BYTE *)a2 + 16) ^ 1;
  v6 = *((_QWORD *)a2 + 4);
  v33 = *((_QWORD *)a2 + 3);
  v34 = v6;
  LOBYTE(v35) = *((_BYTE *)a2 + 40);
  v40 = 1;
  v39 = 0;
  v36 = v5;
  LODWORD(v37) = 1;
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = 1;
  if ((_DWORD)v37 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_53;
  }
  a2 = v7;
  v4 = &v36;
  v8 = (char)v32;
  v9 = v33;
  v10 = v34;
  v11 = v35;
  *(_QWORD *)buf = &v41;
  v12 = ((uint64_t (*)(uint8_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_3[v37])(buf, &v36);
  v14 = v13;
  if (v13)
  {
    v15 = (unint64_t)v13 >> 32;
    if (!((unint64_t)v13 >> 32))
    {
      v16 = v12;
      v17 = WTF::fastMalloc(v13);
      v18 = v17;
      v19 = 0;
      do
      {
        *((_BYTE *)v19 + v17) = *((_BYTE *)v19 + v16);
        v19 = (WTF *)((char *)v19 + 1);
      }
      while (v14 != v19);
      goto LABEL_9;
    }
LABEL_53:
    __break(0xC471u);
    goto LABEL_54;
  }
  v18 = 0;
LABEL_9:
  v20 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v20 = 1;
  *(_BYTE *)(v20 + 8) = v8;
  *(_QWORD *)(v20 + 16) = v9;
  *(_QWORD *)(v20 + 24) = v10;
  *(_BYTE *)(v20 + 32) = v11;
  *(_QWORD *)(v20 + 40) = v18;
  *(_DWORD *)(v20 + 48) = (_DWORD)v14;
  *(_DWORD *)(v20 + 52) = (_DWORD)v14;
  *((_QWORD *)a2 + 1) = v20;
  if ((_DWORD)v37 != -1)
    ((void (*)(uint8_t *, WTF::StringImpl **))off_1E336CBE0[v37])(buf, &v36);
  LODWORD(v37) = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)buf);
  v4 = *(WTF::StringImpl ***)(v2 + 80);
  LOBYTE(v32) = 0;
  v38 = 0;
  if (*(_BYTE *)(v2 + 416))
  {
    *(_BYTE *)(v2 + 416) = 0;
    v21 = *(WTF::StringImpl **)(v2 + 208);
    v22 = *(_QWORD *)(v2 + 216);
    v23 = *(WTF::StringImpl **)(v2 + 336);
    if (v23 && *((_DWORD *)v23 + 1))
    {
      *(_QWORD *)(v2 + 336) = 0;
    }
    else
    {
      v23 = *(WTF::StringImpl **)(v2 + 200);
      if (v23)
        *(_DWORD *)v23 += 2;
    }
    if (*(_BYTE *)(v2 + 352))
      v21 = *(WTF::StringImpl **)(v2 + 344);
    if (*(_BYTE *)(v2 + 368))
      v22 = *(_QWORD *)(v2 + 360);
    v32 = v23;
    LOBYTE(v33) = 0;
    LOBYTE(v35) = 0;
    v36 = v21;
    v37 = v22;
    v38 = 1;
    if (*(_BYTE *)(v2 + 408))
    {
      v24 = (JSC::ArrayBuffer *)*(unsigned int *)(v2 + 404);
      if ((_DWORD)v24)
      {
        JSC::ArrayBuffer::tryCreateUninitialized(v24);
        v25 = v39;
        if (v39)
        {
          v30 = qword_1ECE7C4A0;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR)
            || (*(_WORD *)buf = 0,
                _os_log_error_impl(&dword_1940B8000, v30, OS_LOG_TYPE_ERROR, "Cannot create array buffer for WebCodecs encoder description", buf, 2u), (v25 = v39) != 0))
          {
            v12 = *(_QWORD *)(v25 + 16);
            if (v12)
            {
              v15 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v15)
              {
                if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
                  goto LABEL_55;
LABEL_44:
                v12 = (v12 & 0x3FFFFFFFFLL) + v15;
              }
            }
            while (1)
            {
              v15 = *(unsigned __int8 *)(v2 + 408);
              if (*(_BYTE *)(v2 + 408))
                break;
LABEL_54:
              __break(1u);
LABEL_55:
              if (!*MEMORY[0x1E0CC10F0])
                goto LABEL_44;
            }
            memcpy((void *)v12, *(const void **)(v2 + 392), *(unsigned int *)(v2 + 404));
            v33 = v39;
            LODWORD(v34) = 1;
            LOBYTE(v35) = 1;
          }
        }
      }
    }
  }
  result = (WTF::StringImpl *)(*((uint64_t (**)(WTF::StringImpl **, _DWORD *, WTF::StringImpl **))*v4 + 5))(v4, a2, &v32);
  if (v38)
  {
    if ((_BYTE)v35)
    {
      if ((_DWORD)v34 != -1)
        ((void (*)(uint64_t *, uint64_t *))off_1E336CBE0[v34])(&v39, &v33);
      LODWORD(v34) = -1;
    }
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*a2 == 1)
  {
    v27 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v31 = *(WTF **)(v27 + 40);
        if (v31)
        {
          *(_QWORD *)(v27 + 40) = 0;
          *(_DWORD *)(v27 + 48) = 0;
          WTF::fastFree(v31, v26);
        }
        WTF::fastFree((WTF *)v27, v26);
      }
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)a2, v26);
  }
  else
  {
    --*a2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>(WebCore::WebCodecsAudioEncoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *a1 = &off_1E336D090;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return a1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return a1;
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>(WebCore::WebCodecsAudioEncoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *(_QWORD *)this = &off_1E336D090;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return WTF::fastFree(this, a2);
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return WTF::fastFree(this, a2);
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>(WebCore::WebCodecsAudioEncoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::encode(WTF::Ref<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  unsigned __int8 v5[8];
  WTF::StringImpl *v6;
  _DWORD *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 22;
  WebCore::DOMException::create(v5, (uint64_t *)&v7);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v1 + 40))(v1, v7);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::encode(WTF::Ref<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _DWORD *v3;
  WTF::StringImpl *result;
  unsigned __int8 v5[8];
  WTF::StringImpl *v6;
  _DWORD *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5[0] = 22;
  WebCore::DOMException::create(v5, (uint64_t *)&v7);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v1 + 40))(v1, v7);
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::encode(WTF::Ref<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E336D108;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::encode(WTF::Ref<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E336D108;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::encode(WTF::Ref<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>> &&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v2 = *(_QWORD *)(a1 + 8);
  *(int64x2_t *)(v2 + 64) = vaddq_s64(*(int64x2_t *)(v2 + 64), (int64x2_t)xmmword_1968DF1E0);
  if (!*(_BYTE *)(v2 + 104))
  {
    *(_BYTE *)(v2 + 104) = 1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E336D270;
    v3[1] = v2;
    *(_QWORD *)&v17 = v3;
    WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsAudioEncoder>((uint64_t (**)())v2, (uint64_t (***)())&v17);
    if ((_QWORD)v17)
      (*(void (**)(_QWORD))(*(_QWORD *)v17 + 8))(v17);
  }
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v17 = v5;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(v2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_16;
  }
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_9:
  if (*(_QWORD *)(v6 + 24))
  {
    ++*(_QWORD *)(v6 + 16);
    v8 = v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_16:
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E336D130;
  v10[1] = v2;
  v10[2] = v8;
  v10[3] = v2;
  v16 = v10;
  (*(void (**)(uint64_t, __int128 *, _QWORD **))(*(_QWORD *)v4 + 16))(v4, &v17, &v16);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  result = (unsigned int *)v17;
  *(_QWORD *)&v17 = 0;
  if (result)
  {
    v13 = result + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder6encodeEONS_3RefINS2_18WebCodecsAudioDataENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__2clEvEUlOT_E_vJONS_6StringEEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E336D130;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder6encodeEONS_3RefINS2_18WebCodecsAudioDataENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__2clEvEUlOT_E_vJONS_6StringEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E336D130;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder6encodeEONS_3RefINS2_18WebCodecsAudioDataENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__2clEvEUlOT_E_vJONS_6StringEEE4callESH_(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  unsigned __int8 v23[8];
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return result;
LABEL_15:
  --*(_QWORD *)(v4 + 72);
  v8 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_34;
  v9 = *(_QWORD *)(v4 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *((_DWORD *)v8 + 1);
      *(_DWORD *)v8 += 2;
      if (v11 < 0 || (result = (v11 + 28), __OFADD__(v11, 28)))
      {
        v25 = 0;
      }
      else
      {
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (*((_DWORD *)v8 + 4) >> 2) & 1, (int8x16_t *)"AudioEncoder encode failed: ", 0x1Cu, (uint64_t)v8, &v25);
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)(v10 - 96) + 248))(v10 - 96, 1, 2, &v25, 0);
          v13 = v25;
          v25 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v12);
          else
            *(_DWORD *)v8 -= 2;
          v8 = *(WTF::StringImpl **)a2;
          goto LABEL_27;
        }
      }
      __break(0xC471u);
      return result;
    }
  }
LABEL_27:
  *(_QWORD *)a2 = 0;
  v23[0] = 22;
  v24 = v8;
  WebCore::WebCodecsAudioEncoder::closeEncoder(v4, v23, (uint64_t)&v25);
  if (v27)
  {
    v14 = v26;
    v26 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  result = (uint64_t)v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_34:
  v15 = *(_QWORD *)(v5 + 24);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_38;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_38:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_45:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      return result;
    goto LABEL_46;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_45;
  if (v18)
    return result;
LABEL_46:
  if (v19)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  if (!v20)
    return WTF::fastFree((WTF *)v15, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 96);
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v9 = &off_1E336D180;
  v9[1] = v2;
  v9[2] = v6;
  v9[3] = v2;
  v9[4] = v8;
  v11 = v9;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 24))(v3, &v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E336D180;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E336D180;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(_QWORD *result, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  _BYTE v24[8];

  v2 = result[2];
  if (!v2)
    return result;
  v3 = result;
  v4 = result[1];
  v5 = result[3];
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return result;
LABEL_15:
  if (v3[4] == *(_QWORD *)(v4 + 144))
  {
    v8 = *(_QWORD *)(v4 + 112);
    if (v8 == *(_QWORD *)(v4 + 120))
    {
      __break(0xC471u);
      JUMPOUT(0x19558DF94);
    }
    v9 = *(_QWORD *)(v4 + 128);
    v10 = *(_QWORD *)(v9 + 8 * v8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    v11 = *(_QWORD *)(v4 + 128);
    result = *(_QWORD **)(v11 + 8 * v8);
    *(_QWORD *)(v11 + 8 * v8) = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
        v8 = *(_QWORD *)(v4 + 112);
      }
      else
      {
        --*((_DWORD *)result + 4);
      }
    }
    if (v8 == *(unsigned int *)(v4 + 136) - 1)
      v12 = 0;
    else
      v12 = v8 + 1;
    *(_QWORD *)(v4 + 112) = v12;
    v13 = *(_QWORD *)(v10 + 24);
    if (v13 && *(_QWORD *)v13 && (*(_BYTE *)(v13 + 8) & 3) == 0)
    {
      v14 = *(_QWORD *)(v10 + 32);
      if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
        v15 = 0;
      else
        v15 = *(uint64_t **)v14;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v10, v15, 0, (objc_class *)0xA);
      result = (_QWORD *)MEMORY[0x19AEA32A0](v24);
    }
    if (*(_DWORD *)(v10 + 16) == 1)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      --*(_DWORD *)(v10 + 16);
    *(_BYTE *)(v4 + 417) = *(_QWORD *)(v4 + 112) != *(_QWORD *)(v4 + 120);
  }
  v16 = *(_QWORD *)(v5 + 24);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_37;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v16);
LABEL_37:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v23 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v23 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 != 1)
  {
    __clrex();
LABEL_44:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (v19)
      return result;
    goto LABEL_45;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
    goto LABEL_44;
  if (v19)
    return result;
LABEL_45:
  if (v20)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  if (!v21)
    return (_QWORD *)WTF::fastFree((WTF *)v16, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioEncoder>,WTF::String> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336D1A8;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioEncoder>,WTF::String> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336D1A8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::AudioEncoder>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[64];
  _BYTE v17[25];
  uint64_t v18;
  uint64_t v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a1 + 32);
  v21[0] = *(_OWORD *)(a1 + 16);
  v21[1] = v4;
  v12 = v3 == 0;
  WTF::String::isolatedCopy();
  v14 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v16[8] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 112);
  *(_QWORD *)&v15 = *(_QWORD *)(a1 + 72);
  BYTE8(v15) = *(_BYTE *)(a1 + 80);
  *(_DWORD *)v16 = *(_DWORD *)(a1 + 88);
  *(_OWORD *)&v16[40] = *(_OWORD *)(a1 + 128);
  v16[56] = *(_BYTE *)(a1 + 144);
  *(_WORD *)v17 = *(_WORD *)(a1 + 152);
  v17[24] = *(_BYTE *)(a1 + 176);
  *(_OWORD *)&v17[8] = *(_OWORD *)(a1 + 160);
  v18 = *(_QWORD *)(a1 + 184);
  v5 = WTF::fastMalloc((WTF *)0xA0);
  *(_QWORD *)v5 = &off_1E336D1D0;
  *(_BYTE *)(v5 + 8) = v12;
  *(_QWORD *)(v5 + 16) = v13;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v16;
  *(_OWORD *)(v5 + 72) = *(_OWORD *)&v16[16];
  *(_OWORD *)(v5 + 40) = v15;
  *(_OWORD *)(v5 + 24) = v14;
  *(_OWORD *)(v5 + 120) = *(_OWORD *)v17;
  *(_OWORD *)(v5 + 129) = *(_OWORD *)&v17[9];
  *(_OWORD *)(v5 + 104) = *(_OWORD *)&v16[48];
  *(_OWORD *)(v5 + 88) = *(_OWORD *)&v16[32];
  *(_QWORD *)(v5 + 152) = v18;
  v19 = v5;
  v20 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v21);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 336))(v8, &v19);
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v10 = v19;
  v19 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return 0;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12AudioEncoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336D1D0;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12AudioEncoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336D1D0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_DWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsAudioEncoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsAudioEncoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12AudioEncoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EE4callES5_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  WTF::StringImpl *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  char v19;
  _DWORD *v20;

  WTF::HashSet<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)(a2 + 264), *(_QWORD *)(a1 + 152), &v20);
  result = v20;
  if (v20)
  {
    v10[0] = *(_BYTE *)(a1 + 8);
    v10[1] = 1;
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 104);
    v16 = *(_OWORD *)(a1 + 88);
    v17 = v5;
    v18[0] = *(_OWORD *)(a1 + 120);
    *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)(a1 + 129);
    v6 = *(_OWORD *)(a1 + 40);
    v12 = *(_OWORD *)(a1 + 24);
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 72);
    v14 = *(_OWORD *)(a1 + 56);
    v15 = v7;
    v19 = 1;
    WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsAudioEncoderSupport>>((uint64_t)result, (uint64_t)v10);
    if (v19)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      if (result[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[4];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsAudioEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsAudioEncoder::scheduleDequeueEvent(void)::$_0,void>::call(WebCore *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  uint64_t result;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 592) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 592);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 32) + 48))(v1 + 32, v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 16);
  *(_BYTE *)(v1 + 104) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)a1 = &off_1E336D2A8;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E336CBE0[v3])(&v6, a1 + 32);
    *(_DWORD *)(a1 + 40) = -1;
  }
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  *(_QWORD *)this = &off_1E336D2A8;
  if (*((_BYTE *)this + 48))
  {
    v3 = *((unsigned int *)this + 10);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v3])(&v6, (char *)this + 32);
    *((_DWORD *)this + 10) = -1;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _BOOL4 v30;
  _DWORD v31[7];

  *(_QWORD *)&v31[5] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 192) = 1;
  v28 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)&v29 = *(_QWORD *)(a1 + 176);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
    i = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v3);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (!*(_QWORD *)(v3 + 24))
    goto LABEL_42;
  ++*(_QWORD *)(v3 + 16);
  for (i = v3; ; i = 0)
  {
    v6 = __ldxr((unsigned __int8 *)v3);
    if (v6 != 1)
    {
      __clrex();
LABEL_12:
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      goto LABEL_13;
    }
    if (__stlxr(0, (unsigned __int8 *)v3))
      goto LABEL_12;
LABEL_13:
    v7 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v7 = &off_1E336D2D0;
    *(_OWORD *)(v7 + 16) = v28;
    *(_OWORD *)(v7 + 32) = v29;
    *(_QWORD *)(v7 + 48) = i;
    *(_QWORD *)(v7 + 56) = v2;
    v27 = v7;
    if (!*(_BYTE *)(a1 + 144))
    {
      v14 = v7;
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E336D348;
      v15[1] = v2;
      *(_QWORD *)&v28 = v15;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v28);
      v16 = v28;
      *(_QWORD *)&v28 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v27 = 0;
      goto LABEL_38;
    }
    if (!*(_BYTE *)(a1 + 48))
    {
      v12 = 0;
      v13 = 0;
LABEL_25:
      v17 = (_QWORD *)(a1 + 24);
      *(_QWORD *)&v28 = v13;
      *((_QWORD *)&v28 + 1) = v12;
      if (*(_BYTE *)(a1 + 64))
        v18 = *(_QWORD *)(a1 + 56);
      else
        v18 = 0;
      v19 = *(_QWORD *)(a1 + 72);
      if (!*(_BYTE *)(a1 + 80))
        v19 = 0;
      *(_QWORD *)&v29 = v18;
      *((_QWORD *)&v29 + 1) = v19;
      v30 = *(_DWORD *)(a1 + 132) == 2;
      *(_QWORD *)v31 = 1;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E336D370;
      v20[1] = v2;
      v26 = v20;
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = &unk_1E336D398;
      v21[1] = v2;
      v25 = v21;
      if (WebCore::VideoDecoder::s_customCreator)
        WebCore::VideoDecoder::s_customCreator(v17, &v28, &v26, &v25, &v27);
      else
        WebCore::VideoDecoder::createLocalDecoder(v17, (uint64_t)&v28, (uint64_t *)&v26, (uint64_t *)&v25, &v27);
      v22 = (uint64_t)v25;
      v25 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v23 = (uint64_t)v26;
      v26 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v31[1]);
      v14 = v27;
      v27 = 0;
      if (!v14)
        return;
LABEL_38:
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      return;
    }
    v8 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v8 == -1)
      goto LABEL_43;
    v3 = a1 + 32;
    *(_QWORD *)&v28 = &v26;
    v9 = ((uint64_t (*)(__int128 *, uint64_t))off_1E336CC20[v8])(&v28, a1 + 32);
    if (*(_BYTE *)(a1 + 48))
      break;
    __break(1u);
LABEL_42:
    ;
  }
  v10 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v10 != -1)
  {
    v11 = v9;
    *(_QWORD *)&v28 = &v26;
    v12 = ((uint64_t (*)(__int128 *, uint64_t))off_1E336CC30[v10])(&v28, a1 + 32);
    if (v12)
      v13 = v11;
    else
      v13 = 0;
    goto LABEL_25;
  }
LABEL_43:
  v24 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED1Ev(v24);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E336D2D0;
  v3 = a1[6];
  a1[6] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E336D2D0;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvEUlOT_E_vJONS_8FunctionIFvvEEEEE4callESF_(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  _QWORD *v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a1 + 32);
  v19[0] = *(_OWORD *)(a1 + 16);
  v19[1] = v4;
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *a2;
  *a2 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E336D2F8;
  v11[1] = v7;
  v11[2] = v9;
  v11[3] = v10;
  v17 = v11;
  v18 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v19);
  if (v13)
  {
    v14 = v13[4];
    if (v14)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 336))(v14, &v17);
  }
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E336D2F8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E336D2F8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t (**_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EE4callES5_(uint64_t (**result)()))()
{
  uint64_t (*v1)();
  uint64_t (**v2)();
  uint64_t (*v3)();
  int v5;
  uint64_t (*v6)();
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t (**v17)();

  v1 = result[1];
  if (!v1)
    return result;
  v2 = result;
  v3 = result[2];
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (uint64_t (**)())MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*((_QWORD *)v1 + 3))
    ++*((_QWORD *)v1 + 1);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (uint64_t (**)())WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v3)
    return result;
LABEL_15:
  v6 = v2[3];
  v2[3] = 0;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = &off_1E336D320;
  *(_QWORD *)(v7 + 8) = v6;
  v17 = (uint64_t (**)())v7;
  WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoDecoder>((uint64_t (**)())v3, &v17);
  result = v17;
  if (v17)
    result = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*v17 + 1))(v17);
  v9 = *((_QWORD *)v3 + 3);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_21;
  }
  result = (uint64_t (**)())MEMORY[0x19AEA534C](v9);
LABEL_21:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_28:
    result = (uint64_t (**)())WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return result;
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_28;
  if (v12)
    return result;
LABEL_29:
  if (v13)
    result = (uint64_t (**)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  if (!v14)
    return (uint64_t (**)())WTF::fastFree((WTF *)v9, v8);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_ENUlRS9_E_clIS4_EESG_SH_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336D320;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_ENUlRS9_E_clIS4_EESG_SH_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336D320;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_ENUlRS9_E_clIS4_EESG_SH_EUlvE_vJEE4callEv(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  unsigned __int8 v4[8];
  WTF::StringImpl *v5;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 6;
  WebCore::WebCodecsVideoDecoder::closeDecoder(v1, v4, (uint64_t)v6);
  if (v8 && v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvEUlOT_E0_vJONSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoDecoderEEENS_6StringEEEEE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x19558F2C8);
    }
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v14[0] = 6;
    v15 = v4;
    WebCore::WebCodecsVideoDecoder::closeDecoder(v2, v14, (uint64_t)v16);
    if (v18 && v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v5);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    result = *(WTF::StringImpl **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = v7;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    *(_BYTE *)(v2 + 192) = 0;
    do
    {
      v8 = *(_QWORD *)(v2 + 160);
      if (v8 == *(_QWORD *)(v2 + 168))
        break;
      v9 = *(_QWORD *)(v2 + 176);
      v10 = *(_QWORD *)(v9 + 8 * v8);
      *(_QWORD *)(v9 + 8 * v8) = 0;
      v11 = *(_QWORD *)(v2 + 176);
      v12 = *(_QWORD *)(v11 + 8 * v8);
      *(_QWORD *)(v11 + 8 * v8) = 0;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v8 = *(_QWORD *)(v2 + 160);
      }
      v13 = v8 == *(unsigned int *)(v2 + 184) - 1 ? 0 : v8 + 1;
      *(_QWORD *)(v2 + 160) = v13;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    while (!*(_BYTE *)(v2 + 192));
  }
  return result;
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEEN3__0clEvEUlOT_E1_vJONSt12experimental15fundamentals_v38expectedINS2_12VideoDecoder12DecodedFrameENS_6StringEEEEE4callESJ_(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  void *v11;
  _DWORD *v12;
  WTF *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  __int128 v22;
  char v23;
  WTF *v24;
  int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  unsigned int *v35;
  __int128 v36;
  char v37;

  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 56) == 1)
  {
    v3 = *(_DWORD *)(a2 + 32);
    if (v3)
    {
      if (v3 == 1)
      {
        v4 = *(_QWORD *)a2;
        *(_QWORD *)a2 = 0;
        LOBYTE(v35) = 22;
        *(_QWORD *)&v36 = v4;
        WebCore::WebCodecsVideoDecoder::closeDecoder(v2, (unsigned __int8 *)&v35, (uint64_t)&v19);
        if ((_BYTE)v21 && v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v5);
          else
            *(_DWORD *)v20 -= 2;
        }
        result = (unsigned int *)v36;
        *(_QWORD *)&v36 = 0;
        if (result)
        {
          if (*result == 2)
            return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
          else
            *result -= 2;
        }
      }
      else
      {
        v17 = std::__throw_bad_variant_access[abi:sn180100]();
        return (unsigned int *)WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedVideoChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunk>> &&)::$_0,void>::~CallableWrapper(v17);
      }
    }
    else
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v35 = (unsigned int *)v6;
      v36 = *(_OWORD *)(a2 + 8);
      v37 = *(_BYTE *)(a2 + 24);
      v19 = 0;
      LOBYTE(v24) = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v20 = (WTF::StringImpl *)(*(float (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      v21 = (unint64_t)v7;
      v22 = v36;
      v23 = v37;
      v8 = *(_QWORD *)(v6 + 36);
      v34 = 1;
      v33 = v8;
      v9 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
      if (v9)
        v10 = (WebCore::ScriptExecutionContext *)(v9 - 96);
      else
        v10 = 0;
      WebCore::WebCodecsVideoFrame::create(v10, (uint64_t *)&v35, (uint64_t)&v19, (uint64_t *)&v18);
      (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(v2 + 80) + 40))(*(_QWORD *)(v2 + 80), v18);
      v12 = v18;
      v18 = 0;
      if (v12)
      {
        if (v12[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
        else
          --v12[4];
      }
      if (v26)
      {
        v13 = v24;
        if (v24)
        {
          v24 = 0;
          v25 = 0;
          WTF::fastFree(v13, v11);
        }
      }
      result = v35;
      v35 = 0;
      if (result)
      {
        v14 = result + 2;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, result + 2);
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedVideoChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunk>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  *a1 = &off_1E336D3C0;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)v5));
        if (!v7)
        {
          v9 = v3;
          v10 = (WTF *)v5;
          atomic_store(1u, (unsigned int *)v5);
          v8 = *(WTF **)(v5 + 40);
          if (v8)
          {
            *(_QWORD *)(v5 + 40) = 0;
            *(_DWORD *)(v5 + 48) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v10, a2);
          v3 = v9;
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedVideoChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunk>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  *(_QWORD *)this = &off_1E336D3C0;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)v5));
        if (!v7)
        {
          v9 = v3;
          v10 = (WTF *)v5;
          atomic_store(1u, (unsigned int *)v5);
          v8 = *(WTF **)(v5 + 40);
          if (v8)
          {
            *(_QWORD *)(v5 + 40) = 0;
            *(_DWORD *)(v5 + 48) = 0;
            WTF::fastFree(v8, a2);
          }
          WTF::fastFree(v10, a2);
          v3 = v9;
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::decode(WTF::Ref<WebCore::WebCodecsEncodedVideoChunk,WTF::RawPtrTraits<WebCore::WebCodecsEncodedVideoChunk>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedVideoChunk>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t (**v10[2])();
  char v11;
  uint64_t v12;
  __int128 v13;

  v2 = *(_QWORD *)(a1 + 8);
  *(int64x2_t *)(v2 + 64) = vaddq_s64(*(int64x2_t *)(v2 + 64), (int64x2_t)xmmword_1968DF1E0);
  if (!*(_BYTE *)(v2 + 104))
  {
    *(_BYTE *)(v2 + 104) = 1;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E336D528;
    *(_QWORD *)(v3 + 8) = v2;
    v10[0] = (uint64_t (**)())v3;
    WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoDecoder>((uint64_t (**)())v2, v10);
    if (v10[0])
      (*((void (**)(uint64_t (**)()))*v10[0] + 1))(v10[0]);
  }
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v6 = (uint64_t (**)())*(unsigned int *)(v5 + 52);
  v10[0] = *(uint64_t (***)())(v5 + 40);
  v10[1] = v6;
  v11 = *(_BYTE *)(v5 + 8) ^ 1;
  v12 = *(_QWORD *)(v5 + 16);
  v13 = *(_OWORD *)(v5 + 24);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E336D3E8;
  v7[1] = v2;
  v9 = v7;
  (*(void (**)(uint64_t, uint64_t (***)(), _QWORD **))(*(_QWORD *)v4 + 16))(v4, v10, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder6decodeEONS_3RefINS2_26WebCodecsEncodedVideoChunkENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEvEUlOT_E_vJONS_6StringEEE4callESH_(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int8 v5[8];
  WTF::StringImpl *v6;
  _BYTE v7[8];
  WTF::StringImpl *v8;
  char v9;

  result = *(WTF::StringImpl **)(a1 + 8);
  --*((_QWORD *)result + 9);
  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v5[0] = 22;
    v6 = v3;
    WebCore::WebCodecsVideoDecoder::closeDecoder((uint64_t)result, v5, (uint64_t)v7);
    if (v9 && v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v1 + 96);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E336D438;
  v4[1] = v1;
  v4[2] = v2;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 24))(v3, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE v10[8];

  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v1 + 144) == *(_QWORD *)(result + 16))
  {
    v2 = *(_QWORD *)(v1 + 112);
    if (v2 == *(_QWORD *)(v1 + 120))
    {
      __break(0xC471u);
      JUMPOUT(0x19558F9A4);
    }
    v3 = *(_QWORD *)(v1 + 128);
    v4 = *(_QWORD *)(v3 + 8 * v2);
    *(_QWORD *)(v3 + 8 * v2) = 0;
    v5 = *(_QWORD *)(v1 + 128);
    result = *(_QWORD *)(v5 + 8 * v2);
    *(_QWORD *)(v5 + 8 * v2) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        v2 = *(_QWORD *)(v1 + 112);
      }
      else
      {
        --*(_DWORD *)(result + 16);
      }
    }
    if (v2 == *(unsigned int *)(v1 + 136) - 1)
      v6 = 0;
    else
      v6 = v2 + 1;
    *(_QWORD *)(v1 + 112) = v6;
    v7 = *(_QWORD *)(v4 + 24);
    if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
    {
      v8 = *(_QWORD *)(v4 + 32);
      if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)v8;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v4, v9, 0, (objc_class *)0xA);
      result = MEMORY[0x19AEA32A0](v10);
    }
    if (*(_DWORD *)(v4 + 16) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      --*(_DWORD *)(v4 + 16);
    *(_BYTE *)(v1 + 193) = *(_QWORD *)(v1 + 112) != *(_QWORD *)(v1 + 120);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)a1 = &off_1E336D460;
  v3 = *(WTF **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E336CBE0[v4])(&v7, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
  }
  v5 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)this = &off_1E336D460;
  v3 = (WTF *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*((_BYTE *)this + 72))
  {
    v4 = *((unsigned int *)this + 16);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v4])(&v7, (char *)this + 56);
    *((_DWORD *)this + 16) = -1;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  BOOL v23;
  WTF::StringImpl *v24;
  char v25[8];
  int v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a1 + 32);
  v40[0] = *(_OWORD *)(a1 + 16);
  v40[1] = v4;
  v23 = v3 == 0;
  WTF::String::isolatedCopy();
  v25[0] = 0;
  v27 = 0;
  *(_QWORD *)&v28 = *(_QWORD *)(a1 + 80);
  BYTE8(v28) = *(_BYTE *)(a1 + 88);
  *(_QWORD *)&v29 = *(_QWORD *)(a1 + 96);
  BYTE8(v29) = *(_BYTE *)(a1 + 104);
  *(_QWORD *)&v30 = *(_QWORD *)(a1 + 112);
  BYTE8(v30) = *(_BYTE *)(a1 + 120);
  BYTE8(v31) = *(_BYTE *)(a1 + 136);
  *(_QWORD *)&v31 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 144);
  BYTE8(v32) = *(_BYTE *)(a1 + 152);
  *(_QWORD *)&v32 = v5;
  HIDWORD(v32) = *(_DWORD *)(a1 + 156);
  v33 = *(_WORD *)(a1 + 160);
  v34 = *(WTF **)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v35 = v6;
  v36 = *(_QWORD *)(a1 + 184);
  v7 = WTF::fastMalloc((WTF *)0xA0);
  v8 = v7;
  *(_QWORD *)v7 = &off_1E336D488;
  *(_BYTE *)(v7 + 8) = v23;
  *(_QWORD *)(v7 + 16) = v24;
  *(_BYTE *)(v7 + 24) = 0;
  v9 = v7 + 24;
  *(_BYTE *)(v7 + 40) = 0;
  if (v27)
  {
    *(_DWORD *)(v7 + 32) = -1;
    v10 = v26;
    if (v26 != -1)
    {
      ((void (*)(uint64_t *, uint64_t, char *))off_1E336CBF0[v26])(&v37, v9, v25);
      *(_DWORD *)(v8 + 32) = v10;
    }
    *(_BYTE *)(v8 + 40) = 1;
  }
  v11 = v30;
  v12 = v31;
  v13 = v32;
  *(_WORD *)(v8 + 128) = v33;
  v14 = v29;
  *(_OWORD *)(v8 + 48) = v28;
  *(_OWORD *)(v8 + 64) = v14;
  *(_OWORD *)(v8 + 96) = v12;
  *(_OWORD *)(v8 + 112) = v13;
  *(_OWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 136) = v34;
  *(_QWORD *)&v11 = v35;
  v34 = 0;
  v35 = 0;
  *(_QWORD *)(v8 + 144) = v11;
  *(_QWORD *)(v8 + 152) = v36;
  v37 = v8;
  v38 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock, v9);
LABEL_9:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v16 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v40);
  if (v16)
  {
    v18 = v16[4];
    if (v18)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 336))(v18, &v37);
  }
  v19 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v20 = v37;
  v37 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v34;
  if (v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    WTF::fastFree(v21, v17);
  }
  if (v27)
  {
    if (v26 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v26])(&v39, v25);
    v26 = -1;
  }
  return 0;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoDecoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)a1 = &off_1E336D488;
  v3 = *(WTF **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E336CBE0[v4])(&v7, a1 + 24);
    *(_DWORD *)(a1 + 32) = -1;
  }
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoDecoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  *(_QWORD *)this = &off_1E336D488;
  v3 = (WTF *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E336CBE0[v4])(&v7, (char *)this + 24);
    *((_DWORD *)this + 8) = -1;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoDecoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoDecoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoDecoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EE4callES5_(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  _BYTE v20[8];
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;

  result = WTF::HashSet<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)(a2 + 264), *(_QWORD *)(a1 + 152), &v31);
  v4 = (uint64_t)v31;
  if (v31)
  {
    if (*(_DWORD *)(a1 + 148))
    {
      JSC::ArrayBuffer::create();
      v5 = v30;
      v30 = 0;
      v18 = (_QWORD *)v5;
      if (*(_BYTE *)(a1 + 40))
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(a1 + 24, (uint64_t *)(a1 + 24), (uint64_t *)&v18);
        v6 = v18;
        v18 = 0;
        if (v6)
        {
          v7 = *(_DWORD *)v6 == 2;
          *(_DWORD *)v6 -= 2;
          if (v7)
          {
            v8 = v6[10];
            if (v8)
            {
              *(_QWORD *)(v8 + 8) = 3;
              v6[10] = 0;
            }
            if ((v6[9] & 1) == 0)
              JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v6 + 9));
            JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v6 + 2));
            v10 = (WTF *)v6[1];
            if ((v10 & 1) == 0 && v10)
            {
              v11 = *(WTF **)v10;
              if (*(_QWORD *)v10)
              {
                *(_QWORD *)v10 = 0;
                *((_DWORD *)v10 + 2) = 0;
                WTF::fastFree(v11, v9);
              }
              WTF::fastFree(v10, v9);
            }
            WTF::fastFree((WTF *)v6, v9);
          }
        }
      }
      else
      {
        *(_QWORD *)(a1 + 24) = v5;
        *(_DWORD *)(a1 + 32) = 1;
        *(_BYTE *)(a1 + 40) = 1;
        v18 = 0;
      }
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v30);
      v4 = (uint64_t)v31;
    }
    LOBYTE(v18) = *(_BYTE *)(a1 + 8);
    BYTE1(v18) = 1;
    v12 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v19 = v12;
    v20[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a1 + 40))
    {
      v21 = -1;
      v13 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E336CBF0[v13])(&v30, v20, a1 + 24);
        v21 = v13;
      }
      v22 = 1;
    }
    v14 = *(_OWORD *)(a1 + 96);
    v25 = *(_OWORD *)(a1 + 80);
    v26 = v14;
    v27 = *(_OWORD *)(a1 + 112);
    v28 = *(_WORD *)(a1 + 128);
    v15 = *(_OWORD *)(a1 + 64);
    v23 = *(_OWORD *)(a1 + 48);
    v24 = v15;
    v29 = 1;
    WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsVideoDecoderSupport>>(v4, (uint64_t)&v18);
    if (v29)
    {
      if (v22)
      {
        if (v21 != -1)
          ((void (*)(uint64_t *, _BYTE *))off_1E336CBE0[v21])(&v30, v20);
        v21 = -1;
      }
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
      else
        --*((_DWORD *)result + 4);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoDecoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoDecoder>(WebCore::WebCodecsVideoDecoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *a1 = &off_1E336D500;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return a1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return a1;
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoDecoder>(WebCore::WebCodecsVideoDecoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *(_QWORD *)this = &off_1E336D500;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return WTF::fastFree(this, a2);
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return WTF::fastFree(this, a2);
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoDecoder>(WebCore::WebCodecsVideoDecoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoDecoder::scheduleDequeueEvent(void)::$_0,void>::call(WebCore *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  uint64_t result;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 592) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 592);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 32) + 48))(v1 + 32, v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 16);
  *(_BYTE *)(v1 + 104) = 0;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::updateRates(WebCore::WebCodecsVideoEncoderConfig const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E336D560;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::updateRates(WebCore::WebCodecsVideoEncoderConfig const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E336D560;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::updateRates(WebCore::WebCodecsVideoEncoderConfig const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *(_QWORD *)(result + 8);
      if (*(_DWORD *)(v2 + 56) != 2)
      {
        v3 = *(_QWORD *)(v2 + 8);
        if (v3)
        {
          if (*(_QWORD *)(v3 + 8))
          {
            v4 = *(_QWORD *)(result + 24);
            if (v4)
            {
              *(_QWORD *)(v2 + 256) = v4;
              *(_BYTE *)(v2 + 264) = 1;
            }
            v5 = *(double *)(result + 32);
            if (v5 != 0.0)
            {
              *(double *)(v2 + 272) = v5;
              *(_BYTE *)(v2 + 280) = 1;
            }
            *(_BYTE *)(v2 + 192) = 0;
            do
            {
              v6 = *(_QWORD *)(v2 + 160);
              if (v6 == *(_QWORD *)(v2 + 168))
                break;
              v7 = *(_QWORD *)(v2 + 176);
              v8 = *(_QWORD *)(v7 + 8 * v6);
              *(_QWORD *)(v7 + 8 * v6) = 0;
              v9 = *(_QWORD *)(v2 + 176);
              v10 = *(_QWORD *)(v9 + 8 * v6);
              *(_QWORD *)(v9 + 8 * v6) = 0;
              if (v10)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
                v6 = *(_QWORD *)(v2 + 160);
              }
              v11 = v6 == *(unsigned int *)(v2 + 184) - 1 ? 0 : v6 + 1;
              *(_QWORD *)(v2 + 160) = v11;
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
            }
            while (!*(_BYTE *)(v2 + 192));
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E336D588;
  v3 = (WTF::StringImpl *)a1[14];
  a1[14] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E336D588;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[13];
  uint64_t v40;

  v4 = *(_QWORD *)(a1 + 8);
  if (!WebCore::isSameConfigurationExceptBitrateAndFramerate(v4 + 200, a1 + 16, a3))
    goto LABEL_13;
  if (*(_BYTE *)(a1 + 80))
    v5 = *(_QWORD *)(a1 + 72);
  else
    v5 = 0;
  if (*(_BYTE *)(a1 + 96))
    v6 = *(double *)(a1 + 88);
  else
    v6 = 0.0;
  *(_BYTE *)(v4 + 192) = 1;
  v7 = *(_QWORD *)(v4 + 96);
  v8 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(v4);
  v9 = v8;
  if (v8)
  {
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 + 1, v8));
  }
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v11 = &off_1E336D560;
  *(_QWORD *)(v11 + 8) = v4;
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = v5;
  *(double *)(v11 + 32) = v6;
  v31[0] = v11;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, double))(*(_QWORD *)v7 + 24))(v7, v5, v31, v6);
  result = (uint64_t *)v31[0];
  v31[0] = 0;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  if ((v12 & 1) == 0)
  {
LABEL_13:
    *(_BYTE *)(v4 + 192) = 1;
    v14 = *(_QWORD *)(v4 + 96);
    v15 = *(_QWORD *)(v4 + 24);
    if (!v15)
    {
      v17 = 0;
      goto LABEL_25;
    }
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
LABEL_18:
      if (*(_QWORD *)(v15 + 24))
      {
        ++*(_QWORD *)(v15 + 16);
        v17 = v15;
      }
      else
      {
        v17 = 0;
      }
      v18 = __ldxr((unsigned __int8 *)v15);
      if (v18 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
          goto LABEL_25;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_25:
      v19 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      v34 = *(_OWORD *)(a1 + 56);
      v35 = *(_OWORD *)(a1 + 72);
      v36 = *(_OWORD *)(a1 + 88);
      v32 = *(_OWORD *)(a1 + 24);
      v33 = *(_OWORD *)(a1 + 40);
      *(_QWORD *)&v39[5] = *(_QWORD *)(a1 + 125);
      v20 = *(_QWORD *)(a1 + 104);
      v21 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;
      v22 = *(_QWORD *)(a1 + 120);
      v37 = v20;
      *(_QWORD *)v39 = v22;
      v23 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v23 = off_1E336D5B0;
      *(_QWORD *)(v23 + 8) = v17;
      v31[0] = 0;
      v31[1] = 0;
      *(_QWORD *)(v23 + 16) = v4;
      *(_QWORD *)(v23 + 24) = v19;
      v24 = v33;
      *(_OWORD *)(v23 + 32) = v32;
      *(_OWORD *)(v23 + 48) = v24;
      v25 = v35;
      v26 = v36;
      v27 = v34;
      *(_QWORD *)(v23 + 112) = v37;
      *(_QWORD *)(v23 + 120) = v21;
      *(_OWORD *)(v23 + 80) = v25;
      *(_OWORD *)(v23 + 96) = v26;
      *(_OWORD *)(v23 + 64) = v27;
      v31[2] = 0;
      v38 = 0;
      v28 = *(_QWORD *)v39;
      *(_QWORD *)(v23 + 133) = *(_QWORD *)&v39[5];
      *(_QWORD *)(v23 + 128) = v28;
      v40 = v23;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 32))(v14, &v40);
      v30 = v40;
      v40 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      return WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1}::~(v31, v29);
    }
    MEMORY[0x19AEA534C](v15);
    goto LABEL_18;
  }
  return result;
}

uint64_t WebCore::isSameConfigurationExceptBitrateAndFramerate(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if (!(_DWORD)result)
    return result;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8) || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 32) != 0) != (*(_BYTE *)(a2 + 32) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a2 + 48))
  {
    if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 48) != 0) != (*(_BYTE *)(a2 + 48) != 0))
    return 0;
LABEL_14:
  if (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88) || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
    return 0;
  result = WTF::equal(*(WTF **)(a1 + 96), *(const WTF::StringImpl **)(a2 + 96), v6);
  if (!(_DWORD)result)
    return result;
  if (*(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104) || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
    return 0;
  result = (*(_BYTE *)(a1 + 116) != 0) == (*(_BYTE *)(a2 + 116) != 0);
  if (*(_BYTE *)(a1 + 116))
  {
    if (*(_BYTE *)(a2 + 116))
      return *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112);
  }
  return result;
}

uint64_t *WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1}::~(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;

  v3 = (WTF::StringImpl *)a1[14];
  a1[14] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *a1;
  *a1 = 0;
  if (!v5)
    return a1;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_12:
  v7 = *(_QWORD *)(v5 + 16) - 1;
  *(_QWORD *)(v5 + 16) = v7;
  if (v7)
  {
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    return a1;
  }
  v8 = *(_QWORD *)(v5 + 8);
  v9 = __ldxr((unsigned __int8 *)v5);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (!v8)
        goto LABEL_19;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
LABEL_19:
    WTF::fastFree((WTF *)v5, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E336D5B0;
  WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1}::~(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E336D5B0;
  WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1}::~(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(result + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
    return result;
LABEL_15:
  if (*(_DWORD *)(v3 + 56) != 2)
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 8))
      {
        *(_BYTE *)(v3 + 192) = 0;
        do
        {
          v7 = *(_QWORD *)(v3 + 160);
          if (v7 == *(_QWORD *)(v3 + 168))
            break;
          v8 = *(_QWORD *)(v3 + 176);
          v9 = *(_QWORD *)(v8 + 8 * v7);
          *(_QWORD *)(v8 + 8 * v7) = 0;
          v10 = *(_QWORD *)(v3 + 176);
          v11 = *(_QWORD *)(v10 + 8 * v7);
          *(_QWORD *)(v10 + 8 * v7) = 0;
          if (v11)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            v7 = *(_QWORD *)(v3 + 160);
          }
          v12 = v7 == *(unsigned int *)(v3 + 184) - 1 ? 0 : v7 + 1;
          *(_QWORD *)(v3 + 160) = v12;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        }
        while (!*(_BYTE *)(v3 + 192));
      }
    }
  }
  v13 = *(_QWORD *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_30;
  }
  result = MEMORY[0x19AEA534C](v13);
LABEL_30:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v20 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v20 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_37:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return result;
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_37;
  if (v16)
    return result;
LABEL_38:
  if (v17)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  if (!v18)
    return WTF::fastFree((WTF *)v13, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E336D5D8;
  v3 = (WTF::StringImpl *)a1[15];
  a1[15] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E336D5D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  _DWORD **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _OWORD v48[3];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 144)
    && WebCore::isSameConfigurationExceptBitrateAndFramerate(v4 + 200, a1 + 24, a3))
  {
    if (*(_BYTE *)(a1 + 88))
      v5 = *(_QWORD *)(a1 + 80);
    else
      v5 = 0;
    if (*(_BYTE *)(a1 + 104))
      v6 = *(double *)(a1 + 96);
    else
      v6 = 0.0;
    *(_BYTE *)(v4 + 192) = 1;
    v7 = *(_QWORD *)(v4 + 96);
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(v4);
    v9 = v8;
    if (v8)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
    }
    v11 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v11 = &off_1E336D560;
    *(_QWORD *)(v11 + 8) = v4;
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v5;
    *(double *)(v11 + 32) = v6;
    *(_QWORD *)&v50 = v11;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, double))(*(_QWORD *)v7 + 24))(v7, v5, &v50, v6);
    result = v50;
    *(_QWORD *)&v50 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if ((v12 & 1) != 0)
      return result;
  }
  *(_BYTE *)(v4 + 192) = 1;
  v14 = *(_QWORD *)(v4 + 24);
  if (!v14)
  {
    v16 = 0;
    goto LABEL_26;
  }
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
LABEL_18:
    MEMORY[0x19AEA534C](v14);
    goto LABEL_19;
  }
  if (__stxr(1u, (unsigned __int8 *)v14))
    goto LABEL_18;
LABEL_19:
  if (*(_QWORD *)(v14 + 24))
  {
    ++*(_QWORD *)(v14 + 16);
    v16 = v14;
  }
  else
  {
    v16 = 0;
  }
  v17 = __ldxr((unsigned __int8 *)v14);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_26:
  v50 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)&v51 = *(_QWORD *)(a1 + 176);
  v18 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v18 = &off_1E336D600;
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v4;
  v19 = v51;
  *(_OWORD *)(v18 + 32) = v50;
  *(_OWORD *)(v18 + 48) = v19;
  v49 = v18;
  if (!*(_BYTE *)(a1 + 144))
  {
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = off_1E336D650;
    v27[1] = v4;
    *(_QWORD *)&v50 = v27;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 16))(v18, &v50);
    v28 = v50;
    *(_QWORD *)&v50 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v49 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v20 = (_DWORD **)(a1 + 24);
  WebCore::createVideoEncoderConfig((uint64_t)&v50, a1 + 24);
  v22 = v53;
  if (v53)
  {
    if (v53 != 1)
    {
      v44 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED1Ev(v44);
    }
    v23 = (WTF::StringImpl *)*((_QWORD *)&v50 + 1);
    *((_QWORD *)&v50 + 1) = 0;
    if (v23)
      *(_DWORD *)v23 += 2;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v24 = &off_1E336D678;
    v24[1] = v4;
    v24[2] = v23;
    *(_QWORD *)&v48[0] = v24;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v18 + 16))(v18, v48);
    v26 = *(_QWORD *)&v48[0];
    *(_QWORD *)&v48[0] = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v25);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  else
  {
    v29 = *v20;
    if (*v20)
      *v29 += 2;
    v30 = *(WTF::StringImpl **)(v4 + 200);
    *(_QWORD *)(v4 + 200) = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v21);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v4 + 224) = v31;
    v32 = *(_OWORD *)(a1 + 64);
    v33 = *(_OWORD *)(a1 + 80);
    v34 = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(v4 + 288) = *(_QWORD *)(a1 + 112);
    *(_OWORD *)(v4 + 256) = v33;
    *(_OWORD *)(v4 + 272) = v34;
    *(_OWORD *)(v4 + 240) = v32;
    v35 = *(_DWORD **)(a1 + 120);
    if (v35)
      *v35 += 2;
    v36 = *(WTF::StringImpl **)(v4 + 296);
    *(_QWORD *)(v4 + 296) = v35;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v21);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(v4 + 309) = *(_QWORD *)(a1 + 133);
    *(_QWORD *)(v4 + 304) = v37;
    v48[0] = v50;
    v48[1] = v51;
    v48[2] = v52;
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v38 = off_1E336D6A0;
    v38[1] = v4;
    v47 = v38;
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v39 = &unk_1E336D6C8;
    v39[1] = v4;
    v46 = v39;
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v40 = off_1E336D6F0;
    v40[1] = v4;
    v45 = v40;
    if (WebCore::VideoEncoder::s_customCreator)
      WebCore::VideoEncoder::s_customCreator(a1 + 24, v48, &v47, &v46, &v45, &v49);
    else
      WebCore::VideoEncoder::createLocalEncoder((_QWORD *)(a1 + 24), (uint64_t)v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, &v49);
    v41 = (uint64_t)v45;
    v45 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = (uint64_t)v46;
    v46 = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = (uint64_t)v47;
    v47 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  result = ((uint64_t (*)(_OWORD *, __int128 *))off_1E336CC40[v22])(v48, &v50);
  v18 = v49;
  v49 = 0;
  if (v18)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E336D600;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvEUlOT_E_vJONS_8FunctionIFvvEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E336D600;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvEUlOT_E_vJONS_8FunctionIFvvEEEEE4callESF_(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  _QWORD *v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a1 + 48);
  v19[0] = *(_OWORD *)(a1 + 32);
  v19[1] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *a2;
  *a2 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E336D628;
  v11[1] = v7;
  v11[2] = v9;
  v11[3] = v10;
  v17 = v11;
  v18 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v19);
  if (v13)
  {
    v14 = v13[4];
    if (v14)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 336))(v14, &v17);
  }
  v15 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E336D628;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E336D628;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvENKUlOT_E_clINS_8FunctionIFvvEEEEEDaSA_EUlRS9_E_vJS5_EE4callES5_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(result + 8);
  if (!v1)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v3)
    return result;
LABEL_15:
  result = (uint64_t)WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoEncoder>((uint64_t (**)())v3, (uint64_t (***)())(v2 + 24));
  v7 = *(_QWORD *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_19;
  }
  result = MEMORY[0x19AEA534C](v7);
LABEL_19:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_26:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_26;
  if (v10)
    return result;
LABEL_27:
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  if (!v12)
    return WTF::fastFree((WTF *)v7, v6);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  unsigned __int8 v4[8];
  WTF::StringImpl *v5;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 6;
  WebCore::WebCodecsVideoEncoder::closeEncoder(v1, v4, (uint64_t)v6);
  if (v8 && v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336D678;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336D678;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  unsigned __int8 v5[8];
  WTF::StringImpl *v6;
  _BYTE v7[8];
  WTF::StringImpl *v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v5[0] = 6;
  v6 = v1;
  WebCore::WebCodecsVideoEncoder::closeEncoder(v2, v5, (uint64_t)v7);
  if (v9 && v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvEUlOT_E0_vJONSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoEncoderEEENS_6StringEEEEE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  WTF::StringImpl *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x195591E5CLL);
    }
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v14[0] = 6;
    v15 = v4;
    WebCore::WebCodecsVideoEncoder::closeEncoder(v2, v14, (uint64_t)v16);
    if (v18 && v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v5);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    result = *(WTF::StringImpl **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = v7;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    *(_BYTE *)(v2 + 432) = 1;
    *(_BYTE *)(v2 + 192) = 0;
    do
    {
      v8 = *(_QWORD *)(v2 + 160);
      if (v8 == *(_QWORD *)(v2 + 168))
        break;
      v9 = *(_QWORD *)(v2 + 176);
      v10 = *(_QWORD *)(v9 + 8 * v8);
      *(_QWORD *)(v9 + 8 * v8) = 0;
      v11 = *(_QWORD *)(v2 + 176);
      v12 = *(_QWORD *)(v11 + 8 * v8);
      *(_QWORD *)(v11 + 8 * v8) = 0;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v8 = *(_QWORD *)(v2 + 160);
      }
      v13 = v8 == *(unsigned int *)(v2 + 184) - 1 ? 0 : v8 + 1;
      *(_QWORD *)(v2 + 160) = v13;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    while (!*(_BYTE *)(v2 + 192));
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::configure(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&)::$_1::operator()(void)::{lambda(WebCore::VideoEncoderActiveConfiguration &&)#1},void,WebCore::VideoEncoderActiveConfiguration>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl **)(v3 + 320);
  *(_QWORD *)(v3 + 320) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *(_OWORD *)(a2 + 1);
  v7 = *(_OWORD *)(a2 + 3);
  v8 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v3 + 369) = *(_OWORD *)((char *)a2 + 49);
  *(_OWORD *)(v3 + 360) = v8;
  *(_OWORD *)(v3 + 344) = v7;
  *(_OWORD *)(v3 + 328) = v6;
  v9 = (WTF::StringImpl **)(v3 + 392);
  if (*(unsigned __int8 *)(v3 + 408) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(_BYTE *)(v3 + 408))
    {
      result = *v9;
      if (*v9)
      {
        *(_QWORD *)(v3 + 392) = 0;
        *(_DWORD *)(v3 + 400) = 0;
        result = (WTF::StringImpl *)WTF::fastFree(result, a2);
      }
      v10 = a2[9];
      a2[9] = 0;
      *(_QWORD *)(v3 + 392) = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 20);
      *((_DWORD *)a2 + 20) = 0;
      *(_DWORD *)(v3 + 400) = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 21);
      *((_DWORD *)a2 + 21) = 0;
      *(_DWORD *)(v3 + 404) = v10;
    }
  }
  else if (*(_BYTE *)(v3 + 408))
  {
    result = *v9;
    if (*v9)
    {
      *(_QWORD *)(v3 + 392) = 0;
      *(_DWORD *)(v3 + 400) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(result, a2);
    }
    *(_BYTE *)(v3 + 408) = 0;
  }
  else
  {
    *v9 = 0;
    *(_QWORD *)(v3 + 400) = 0;
    v11 = a2[9];
    a2[9] = 0;
    *(_QWORD *)(v3 + 392) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = 0;
    *(_DWORD *)(v3 + 400) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = 0;
    *(_DWORD *)(v3 + 404) = v11;
    *(_BYTE *)(v3 + 408) = 1;
  }
  v12 = a2[12];
  *(_BYTE *)(v3 + 424) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(v3 + 416) = v12;
  *(_BYTE *)(v3 + 432) = 1;
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder9configureERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEEN3__1clEvEUlOT_E1_vJONS2_12VideoEncoder12EncodedFrameEEE4callESE_(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::ArrayBuffer *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  NSObject *v35;
  WTF *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int16 v50;
  char v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint8_t buf[24];
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 56) != 1)
    return result;
  JSC::ArrayBuffer::create();
  v4 = v38;
  v38 = 0;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v38);
  LOBYTE(v38) = *(_BYTE *)(a2 + 16) ^ 1;
  v5 = *(_QWORD *)(a2 + 32);
  v39 = *(_QWORD *)(a2 + 24);
  v40 = v5;
  LOBYTE(v41) = *(_BYTE *)(a2 + 40);
  v6 = 1;
  DWORD2(v56) = 1;
  *(_QWORD *)&v56 = 0;
  v42 = v4;
  v43 = 1;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  if (v43 == -1)
  {
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_59;
  }
  v8 = v7;
  v4 = (WTF::StringImpl *)&v42;
  v9 = (char)v38;
  v11 = v39;
  v10 = v40;
  v12 = v41;
  *(_QWORD *)buf = &v54;
  v13 = ((uint64_t (*)(uint8_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_3[v43])(buf, &v42);
  v6 = v14;
  v37 = v8;
  if (v14)
  {
    v15 = HIDWORD(v14);
    if (!HIDWORD(v14))
    {
      v16 = v13;
      v17 = WTF::fastMalloc((WTF *)v14);
      v18 = v17;
      v19 = 0;
      do
      {
        *(_BYTE *)(v17 + v19) = *(_BYTE *)(v16 + v19);
        ++v19;
      }
      while (v6 != v19);
      goto LABEL_9;
    }
LABEL_59:
    __break(0xC471u);
    goto LABEL_60;
  }
  v18 = 0;
LABEL_9:
  v20 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v20 = 1;
  *(_BYTE *)(v20 + 8) = v9;
  *(_QWORD *)(v20 + 16) = v11;
  *(_QWORD *)(v20 + 24) = v10;
  *(_BYTE *)(v20 + 32) = v12;
  *(_QWORD *)(v20 + 40) = v18;
  *(_DWORD *)(v20 + 48) = v6;
  *(_DWORD *)(v20 + 52) = v6;
  v21 = v37;
  *((_QWORD *)v37 + 1) = v20;
  if (v43 != -1)
    ((void (*)(uint8_t *, WTF::StringImpl **))off_1E336CBE0[v43])(buf, &v42);
  v43 = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)buf);
  v4 = *(WTF::StringImpl **)(v2 + 80);
  v6 = *(_QWORD *)(a2 + 48);
  LOBYTE(v38) = 0;
  v51 = 0;
  LOBYTE(v52) = 0;
  v53 = 0;
  if (*(_BYTE *)(v2 + 432))
  {
    *(_BYTE *)(v2 + 432) = 0;
    v22 = *(WTF::StringImpl **)(v2 + 320);
    if (v22 && *((_DWORD *)v22 + 1))
    {
      *(_QWORD *)(v2 + 320) = 0;
    }
    else
    {
      v22 = *(WTF::StringImpl **)(v2 + 200);
      if (v22)
        *(_DWORD *)v22 += 2;
    }
    v23 = 328;
    if (!*(_BYTE *)(v2 + 336))
      v23 = 208;
    v24 = *(WTF::StringImpl **)(v2 + v23);
    v25 = 344;
    if (!*(_BYTE *)(v2 + 352))
      v25 = 216;
    v26 = *(_QWORD *)(v2 + v25);
    v27 = v2 + 360;
    if (!*(_BYTE *)(v2 + 368))
      v27 = v2 + 224;
    *(_QWORD *)((char *)&v56 + 7) = *(_QWORD *)v27;
    HIBYTE(v56) = *(_BYTE *)(v27 + 8);
    v28 = v2 + 376;
    if (!*(_BYTE *)(v2 + 384))
      v28 = v2 + 240;
    *(_QWORD *)&buf[7] = *(_QWORD *)v28;
    buf[15] = *(_BYTE *)(v28 + 8);
    *(_QWORD *)((char *)&v54 + 7) = *(_QWORD *)(v2 + 416);
    HIBYTE(v54) = *(_BYTE *)(v2 + 424);
    v38 = v22;
    LOBYTE(v39) = 0;
    LOBYTE(v41) = 0;
    v42 = v24;
    LOBYTE(v43) = 1;
    v44 = v26;
    v45 = 1;
    v46 = v56;
    v47 = *(_OWORD *)buf;
    v48 = v54;
    v49 = 0;
    v50 = 0;
    v51 = 1;
    if (*(_BYTE *)(v2 + 408))
    {
      v29 = (JSC::ArrayBuffer *)*(unsigned int *)(v2 + 404);
      if ((_DWORD)v29)
      {
        JSC::ArrayBuffer::tryCreateUninitialized(v29);
        v30 = v56;
        if ((_QWORD)v56)
        {
          v35 = qword_1ECE7C4A0;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR)
            || (*(_WORD *)buf = 0,
                _os_log_error_impl(&dword_1940B8000, v35, OS_LOG_TYPE_ERROR, "Cannot create array buffer for WebCodecs encoder description", buf, 2u), (v30 = v56) != 0))
          {
            v13 = *(_QWORD *)(v30 + 16);
            if (v13)
            {
              v15 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v15)
              {
                if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
                  goto LABEL_61;
LABEL_50:
                v13 = (v13 & 0x3FFFFFFFFLL) + v15;
              }
            }
            while (1)
            {
              v15 = *(unsigned __int8 *)(v2 + 408);
              if (*(_BYTE *)(v2 + 408))
                break;
LABEL_60:
              __break(1u);
LABEL_61:
              if (!*MEMORY[0x1E0CC10F0])
                goto LABEL_50;
            }
            memcpy((void *)v13, *(const void **)(v2 + 392), *(unsigned int *)(v2 + 404));
            v39 = v56;
            LODWORD(v40) = 1;
            LOBYTE(v41) = 1;
            v21 = v37;
          }
        }
      }
    }
  }
  if ((v6 & 0xFF00000000) != 0)
  {
    v53 = 1;
    v52 = v6 | 0x100000000;
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF *, WTF::StringImpl **))(*(_QWORD *)v4 + 40))(v4, v21, &v38);
  if (v51)
  {
    if ((_BYTE)v41)
    {
      if ((_DWORD)v40 != -1)
        ((void (*)(__int128 *, uint64_t *))off_1E336CBE0[v40])(&v56, &v39);
      LODWORD(v40) = -1;
    }
    result = v38;
    v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*(_DWORD *)v21 == 1)
  {
    v32 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr((unsigned int *)v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unsigned int *)v32));
      if (!v34)
      {
        atomic_store(1u, (unsigned int *)v32);
        v36 = *(WTF **)(v32 + 40);
        if (v36)
        {
          *(_QWORD *)(v32 + 40) = 0;
          *(_DWORD *)(v32 + 48) = 0;
          WTF::fastFree(v36, v31);
        }
        WTF::fastFree((WTF *)v32, v31);
        v21 = v37;
      }
    }
    return (WTF::StringImpl *)WTF::fastFree(v21, v31);
  }
  else
  {
    --*(_DWORD *)v21;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::encode(WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>> &&,WebCore::WebCodecsVideoEncoderEncodeOptions &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E336D718;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::encode(WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>> &&,WebCore::WebCodecsVideoEncoderEncodeOptions &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E336D718;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::encode(WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>> &&,WebCore::WebCodecsVideoEncoderEncodeOptions &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  v2 = *(_QWORD *)(a1 + 8);
  *(int64x2_t *)(v2 + 64) = vaddq_s64(*(int64x2_t *)(v2 + 64), (int64x2_t)xmmword_1968DF1E0);
  if (!*(_BYTE *)(v2 + 104))
  {
    *(_BYTE *)(v2 + 104) = 1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E336D8A8;
    v3[1] = v2;
    *(_QWORD *)&v18 = v3;
    WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoEncoder>((uint64_t (**)())v2, (uint64_t (***)())&v18);
    if ((_QWORD)v18)
      (*(void (**)(_QWORD))(*(_QWORD *)v18 + 8))(v18);
  }
  v4 = *(_QWORD *)(v2 + 96);
  v5 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v18 = v5;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = *(_QWORD *)(v2 + 24);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_16;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_9:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_16:
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E336D740;
  v11[1] = v9;
  v11[2] = v2;
  v17 = v11;
  (*(void (**)(uint64_t, __int128 *, BOOL, _QWORD **))(*(_QWORD *)v4 + 16))(v4, &v18, v6 != 0, &v17);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  result = (unsigned int *)v18;
  *(_QWORD *)&v18 = 0;
  if (result)
  {
    v14 = result + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::encode(WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>> &&,WebCore::WebCodecsVideoEncoderEncodeOptions &&)::$_0::operator()(void)::{lambda(WTF::String &&)#1},void,$_0>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E336D740;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::encode(WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>> &&,WebCore::WebCodecsVideoEncoderEncodeOptions &&)::$_0::operator()(void)::{lambda(WTF::String &&)#1},void,$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336D740;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::encode(WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>> &&,WebCore::WebCodecsVideoEncoderEncodeOptions &&)::$_0::operator()(void)::{lambda(WTF::String &&)#1},void,$_0>::call(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  unsigned __int8 v24[8];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return result;
  v4 = *(_QWORD **)(result + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return result;
LABEL_15:
  --v4[9];
  v7 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_39;
  v8 = v4[1];
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(unsigned __int8 *)(v9 + 178);
      if (*(_BYTE *)(v9 + 178))
      {
        if (v10 == 1 || v10 == 2)
          ++*(_DWORD *)(v9 + 216);
      }
      else
      {
        *(_DWORD *)(v9 - 264) += 2;
      }
      v11 = *((_DWORD *)v7 + 1);
      *(_DWORD *)v7 += 2;
      if (v11 < 0 || (result = (v11 + 28), __OFADD__(v11, 28)))
      {
        v26 = 0;
      }
      else
      {
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (*((_DWORD *)v7 + 4) >> 2) & 1, (int8x16_t *)"VideoEncoder encode failed: ", 0x1Cu, (uint64_t)v7, &v26);
        if (v26)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)(v9 - 96) + 248))(v9 - 96, 1, 2, &v26, 0);
          v13 = v26;
          v26 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v12);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v12);
          else
            *(_DWORD *)v7 -= 2;
          v14 = *(unsigned __int8 *)(v9 + 178);
          if (*(_BYTE *)(v9 + 178))
          {
            if (v14 == 1)
            {
              if (*(_DWORD *)(v9 + 216) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 40))(v9 - 96);
              else
                --*(_DWORD *)(v9 + 216);
            }
            else if (v14 == 2)
            {
              WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v9 + 216));
            }
          }
          else if (*(_DWORD *)(v9 - 264) == 2)
          {
            if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 288), v12);
          }
          else
          {
            *(_DWORD *)(v9 - 264) -= 2;
          }
          v7 = *(WTF::StringImpl **)a2;
          goto LABEL_32;
        }
      }
      __break(0xC471u);
      return result;
    }
  }
LABEL_32:
  *(_QWORD *)a2 = 0;
  v24[0] = 22;
  v25 = v7;
  WebCore::WebCodecsVideoEncoder::closeEncoder((uint64_t)v4, v24, (uint64_t)&v26);
  if (v28)
  {
    v15 = v27;
    v27 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  result = (uint64_t)v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_39:
  v16 = v4[3];
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_43;
  }
  result = MEMORY[0x19AEA534C](v16);
LABEL_43:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v23 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v23 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 != 1)
  {
    __clrex();
LABEL_50:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (v19)
      return result;
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
    goto LABEL_50;
  if (v19)
    return result;
LABEL_51:
  if (v20)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  if (!v21)
    return WTF::fastFree((WTF *)v16, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 96);
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E336D790;
  v9[1] = v6;
  v9[2] = v2;
  v9[3] = v8;
  v11 = v9;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E336D790;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336D790;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::flush(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(_QWORD *result, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  _BYTE v23[8];

  v2 = result[1];
  if (!v2)
    return result;
  v3 = result;
  v4 = result[2];
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return result;
LABEL_15:
  if (v3[3] == *(_QWORD *)(v4 + 144))
  {
    v7 = *(_QWORD *)(v4 + 112);
    if (v7 == *(_QWORD *)(v4 + 120))
    {
      __break(0xC471u);
      JUMPOUT(0x1955930FCLL);
    }
    v8 = *(_QWORD *)(v4 + 128);
    v9 = *(_QWORD *)(v8 + 8 * v7);
    *(_QWORD *)(v8 + 8 * v7) = 0;
    v10 = *(_QWORD *)(v4 + 128);
    result = *(_QWORD **)(v10 + 8 * v7);
    *(_QWORD *)(v10 + 8 * v7) = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
        v7 = *(_QWORD *)(v4 + 112);
      }
      else
      {
        --*((_DWORD *)result + 4);
      }
    }
    if (v7 == *(unsigned int *)(v4 + 136) - 1)
      v11 = 0;
    else
      v11 = v7 + 1;
    *(_QWORD *)(v4 + 112) = v11;
    v12 = *(_QWORD *)(v9 + 24);
    if (v12 && *(_QWORD *)v12 && (*(_BYTE *)(v12 + 8) & 3) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32);
      if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
        v14 = 0;
      else
        v14 = *(uint64_t **)v13;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v9, v14, 0, (objc_class *)0xA);
      result = (_QWORD *)MEMORY[0x19AEA32A0](v23);
    }
    if (*(_DWORD *)(v9 + 16) == 1)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      --*(_DWORD *)(v9 + 16);
    *(_BYTE *)(v4 + 433) = *(_QWORD *)(v4 + 112) != *(_QWORD *)(v4 + 120);
  }
  v15 = *(_QWORD *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_37;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v15);
LABEL_37:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_44:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      return result;
    goto LABEL_45;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_44;
  if (v18)
    return result;
LABEL_45:
  if (v19)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  if (!v20)
    return (_QWORD *)WTF::fastFree((WTF *)v15, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E336D7B8;
  v3 = (WTF::StringImpl *)a1[18];
  a1[18] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E336D7B8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a1 + 32);
  v25[0] = *(_OWORD *)(a1 + 16);
  v25[1] = v4;
  v12 = v3 == 0;
  WTF::String::isolatedCopy();
  v14 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)&v15 = *(_QWORD *)(a1 + 72);
  BYTE8(v15) = *(_BYTE *)(a1 + 80);
  *(_QWORD *)&v16 = *(_QWORD *)(a1 + 88);
  BYTE8(v16) = *(_BYTE *)(a1 + 96);
  *(_QWORD *)&v17 = *(_QWORD *)(a1 + 104);
  BYTE8(v17) = *(_BYTE *)(a1 + 112);
  BYTE8(v18) = *(_BYTE *)(a1 + 128);
  *(_QWORD *)&v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  WTF::String::isolatedCopy();
  *(_QWORD *)&v21 = *(_QWORD *)(a1 + 152);
  DWORD2(v21) = *(_DWORD *)(a1 + 160);
  BYTE12(v21) = *(_BYTE *)(a1 + 164);
  v22 = *(_QWORD *)(a1 + 168);
  v5 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v5 = &off_1E336D7E0;
  *(_BYTE *)(v5 + 8) = v12;
  *(_QWORD *)(v5 + 16) = v13;
  *(_OWORD *)(v5 + 40) = v15;
  *(_OWORD *)(v5 + 24) = v14;
  *(_QWORD *)(v5 + 104) = v19;
  *(_OWORD *)(v5 + 56) = v16;
  *(_OWORD *)(v5 + 72) = v17;
  *(_OWORD *)(v5 + 88) = v18;
  *(_QWORD *)(v5 + 112) = v20;
  *(_QWORD *)(v5 + 125) = *(_QWORD *)((char *)&v21 + 5);
  *(_QWORD *)(v5 + 120) = v21;
  *(_QWORD *)(v5 + 136) = v22;
  v23 = v5;
  v24 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v25);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 336))(v8, &v23);
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v10 = v23;
  v23 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return 0;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoEncoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E336D7E0;
  v3 = (WTF::StringImpl *)a1[14];
  a1[14] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoEncoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E336D7E0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_DWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore21WebCodecsVideoEncoder17isConfigSupportedERNS2_22ScriptExecutionContextEONS2_27WebCodecsVideoEncoderConfigEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEN3__0clINSt12experimental15fundamentals_v38expectedINS_9UniqueRefINS2_12VideoEncoderEEENS_6StringEEEEEDaOT_EUlRSR_E_vJS5_EE4callES5_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  WTF::StringImpl *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _BYTE v12[8];
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _QWORD v21[2];
  char v22;
  _DWORD *v23;

  WTF::HashSet<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::HashTableTraits>::take<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>((uint64_t *)(a2 + 264), *(_QWORD *)(a1 + 136), &v23);
  result = v23;
  if (v23)
  {
    v12[0] = *(_BYTE *)(a1 + 8);
    v12[1] = 1;
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 72);
    v16 = *(_OWORD *)(a1 + 56);
    v17 = v5;
    v18 = *(_OWORD *)(a1 + 88);
    v6 = *(_OWORD *)(a1 + 40);
    v14 = *(_OWORD *)(a1 + 24);
    v15 = v6;
    v7 = *(_QWORD *)(a1 + 104);
    v8 = *(WTF::StringImpl **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    v19 = v7;
    v20 = v8;
    v21[0] = *(_QWORD *)(a1 + 120);
    *(_QWORD *)((char *)v21 + 5) = *(_QWORD *)(a1 + 125);
    v22 = 1;
    WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::WebCodecsVideoEncoderSupport>>((uint64_t)result, (uint64_t)v12);
    if (v22)
    {
      v10 = v20;
      v20 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (result[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[4];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::isConfigSupported(WebCore::ScriptExecutionContext &,WebCore::WebCodecsVideoEncoderConfig &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_3,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoEncoder>(WebCore::WebCodecsVideoEncoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *a1 = &off_1E336D880;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return a1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return a1;
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoEncoder>(WebCore::WebCodecsVideoEncoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *(_QWORD *)this = &off_1E336D880;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::WebCodecsAudioDecoder>>::deref(v4, a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return WTF::fastFree(this, a2);
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return WTF::fastFree(this, a2);
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebCodecsVideoEncoder>(WebCore::WebCodecsVideoEncoder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoEncoder::scheduleDequeueEvent(void)::$_0,void>::call(WebCore *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  uint64_t result;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 592) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 592);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 32) + 48))(v1 + 32, v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 16);
  *(_BYTE *)(v1 + 104) = 0;
  return result;
}

void WebCore::WebCodecsVideoFrame::~WebCodecsVideoFrame(WebCore::WebCodecsVideoFrame *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  bmalloc::api *v10;
  bmalloc::api *v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  char v18;

  *(_QWORD *)this = &off_1E336D8D0;
  if (!*((_BYTE *)this + 152))
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = v4 - 96;
        v6 = *(unsigned __int8 *)(v4 + 178);
        if (*(_BYTE *)(v4 + 178))
        {
          if (v6 == 1 || v6 == 2)
            ++*(_DWORD *)(v4 + 216);
        }
        else
        {
          *(_DWORD *)(v4 - 264) += 2;
        }
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v7 = off_1E336DB80;
        v17 = v7;
        v18 = 0;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 336))(v4 - 96, &v17);
        v8 = v17;
        v17 = 0;
        if (v8)
          (*(void (**)(_QWORD *))(*v8 + 8))(v8);
        v9 = *(unsigned __int8 *)(v4 + 178);
        if (*(_BYTE *)(v4 + 178))
        {
          if (v9 == 1)
          {
            if (*(_DWORD *)(v4 + 216) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v4 - 96);
            else
              --*(_DWORD *)(v4 + 216);
          }
          else if (v9 == 2)
          {
            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
          }
        }
        else if (*(_DWORD *)(v4 - 264) == 2)
        {
          if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), a2);
        }
        else
        {
          *(_DWORD *)(v4 - 264) -= 2;
        }
      }
    }
  }
  v10 = (bmalloc::api *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
    {
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)(*(_QWORD *)v10 + 8) = 3;
        *(_QWORD *)v10 = 0;
      }
      bmalloc::api::isoDeallocate(v10, a2);
    }
    else
    {
      --*((_DWORD *)v10 + 2);
    }
  }
  v11 = (bmalloc::api *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 2) == 1)
    {
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)(*(_QWORD *)v11 + 8) = 3;
        *(_QWORD *)v11 = 0;
      }
      bmalloc::api::isoDeallocate(v11, a2);
    }
    else
    {
      --*((_DWORD *)v11 + 2);
    }
  }
  v12 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, a2);
    else
      --*(_DWORD *)v12;
  }
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::WebCodecsVideoFrame::~WebCodecsVideoFrame(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebCore::WebCodecsVideoFrame::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v13[0] = a1;
  v13[1] = a1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  v14 = v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL19checkImageUsabilityERNS8_22ScriptExecutionContextERKNS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISD_EENS6_21DefaultRefDerefTraitsISD_EEEENSC_INS8_15SVGImageElementENSE_ISJ_EENSG_ISJ_EEEENSC_INS8_17HTMLCanvasElementENSE_ISN_EENSG_ISN_EEEENSC_INS8_11ImageBitmapENSE_ISR_EENSG_ISR_EEEENSC_INS8_18CSSStyleImageValueENSE_ISV_EENSG_ISV_EEEENSC_INS8_15OffscreenCanvasENSE_ISZ_EENSG_ISZ_EEEENSC_INS8_16HTMLVideoElementENSE_IS13_EENSG_IS13_EEEEEEEE3__0JZNS8_L19checkImageUsabilityESA_S19_E3__1ZNS8_L19checkImageUsabilityESA_S19_E3__2ZNS8_L19checkImageUsabilityESA_S19_E3__3ZNS8_L19checkImageUsabilityESA_S19_E3__4ZNS8_L19checkImageUsabilityESA_S19_E3__5ZNS8_L19checkImageUsabilityESA_S19_E3__6EEEEEJRKNS0_6__implIJSI_SM_SQ_SU_SY_S12_S16_EEEEEEDcOT_DpOT0____fmatrix[v5])(&v15, &v14);
  if ((_BYTE)v17)
  {
    v10 = v16;
    *(_BYTE *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v10;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v15 = a3;
  v16 = a1;
  v17 = a3;
  v18 = a1;
  v19 = a3;
  v20 = a1;
  v21 = a1;
  v22 = a3;
  v23 = a3;
  v24 = a1;
  v25 = a3;
  v26 = a1;
  v27 = a3;
  v28 = a1;
  v11 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v11 == -1)
  {
LABEL_7:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)WebCore::WebCodecsVideoFrame::create(v12);
  }
  else
  {
    v13[0] = &v15;
    return (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19WebCodecsVideoFrame6createERNS8_22ScriptExecutionContextEONS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEENSD_INS8_15SVGImageElementENSF_ISK_EENSH_ISK_EEEENSD_INS8_17HTMLCanvasElementENSF_ISO_EENSH_ISO_EEEENSD_INS8_11ImageBitmapENSF_ISS_EENSH_ISS_EEEENSD_INS8_18CSSStyleImageValueENSF_ISW_EENSH_ISW_EEEENSD_INS8_15OffscreenCanvasENSF_IS10_EENSH_IS10_EEEENSD_INS8_16HTMLVideoElementENSF_IS14_EENSH_IS14_EEEEEEEONS9_4InitEE3__0JZNS9_6createESB_S19_S1B_E3__1ZNS9_6createESB_S19_S1B_E3__2ZNS9_6createESB_S19_S1B_E3__3ZNS9_6createESB_S19_S1B_E3__4ZNS9_6createESB_S19_S1B_E3__5ZNS9_6createESB_S19_S1B_E3__6EEEEEJRNS0_6__implIJSJ_SN_SR_SV_SZ_S13_S17_EEEEEEDcOT_DpOT0____fmatrix[v11])(v13, a2);
  }
}

void WebCore::WebCodecsVideoFrame::create(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void (**v19)(WebCore::ImageBufferAllocator *__hidden);
  CFTypeRef v20;
  uint64_t v21;
  void (**v22)(WebCore::ImageBufferAllocator *__hidden);
  void (**v23)(WebCore::ImageBufferAllocator *__hidden);
  _QWORD v24[2];
  __int16 v25;
  CFTypeRef cf;
  void (**v27)(WebCore::ImageBufferAllocator *__hidden);

  v25 = 513;
  v10 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v10 != -1)
  {
    v24[0] = &v23;
    v27 = (void (**)(WebCore::ImageBufferAllocator *__hidden))v24;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v24[0] = 0;
  v24[1] = a4;
  v23 = off_1E340D360;
  (*(void (**)(void (***__return_ptr)(WebCore::ImageBufferAllocator *__hidden), uint64_t, __int16 *, _QWORD *, void (***)(WebCore::ImageBufferAllocator *__hidden)))(*(_QWORD *)a3 + 88))(&v27, a3, &v25, v24, &v23);
  if (!v27)
    goto LABEL_20;
  v22 = v27;
  v27 = 0;
  v21 = 0x101010001020100;
  WebCore::VideoFrame::createFromPixelBuffer((uint64_t *)&v22, (__CVBuffer ***)&v21, (uint64_t *)&v23);
  if (v22)
  {
    if (*((_DWORD *)v22 + 2) == 1)
      (*((void (**)(void))*v22 + 1))();
    else
      --*((_DWORD *)v22 + 2);
  }
  if (v23)
  {
    v22 = v23;
    v23 = 0;
    WebCore::WebCodecsVideoFrame::initializeFrameFromOtherFrame(a1, a2, &v22, a5, 1);
    v11 = (unsigned int *)v22;
    v22 = 0;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
      v15 = (unsigned int *)v23;
      v23 = 0;
      if (v15)
      {
        v16 = v15 + 2;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v15 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
      }
    }
  }
  else
  {
LABEL_20:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a1 = 8;
    *(_DWORD *)(a1 + 16) = 1;
  }
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
      (*((void (**)(_DWORD *))*v19 + 1))(v19);
    else
      --*((_DWORD *)v19 + 2);
  }
  v20 = cf;
  cf = 0;
  if (v20)
    CFRelease(v20);
}

uint64_t WebCore::WebCodecsVideoFrame::initializeFrameFromOtherFrame(uint64_t a1, WebCore::ScriptExecutionContext *a2, _QWORD *a3, uint64_t a4, int a5)
{
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  double v28;
  int32x2_t v29;
  int64x2_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  double v50;
  unsigned int *v51;
  __int128 v52;

  v10 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v12 = v11;
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v14 = *(_DWORD *)(a4 + 32);
  v15 = 4;
  if (v13 <= 875704421)
  {
    if (v13 == 32)
    {
      v17 = v14 == 1;
      v18 = 5;
LABEL_12:
      if (v17)
        v15 = v18 + 1;
      else
        v15 = v18;
      goto LABEL_15;
    }
    if (v13 == 641234480)
      goto LABEL_15;
LABEL_10:
    v15 = 0;
    goto LABEL_15;
  }
  if (v13 != 875704422 && v13 != 875704438)
  {
    if (v13 == 1111970369)
    {
      v17 = v14 == 1;
      v18 = 7;
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_15:
  v19 = (unint64_t)v10;
  v20 = (unint64_t)v12;
  if ((WebCore::validateVideoFrameInit(a4, (unint64_t)v10, (unint64_t)v12, v15) & 1) != 0)
  {
    v21 = WTF::fastMalloc((WTF *)0xA0);
    *(_DWORD *)(v21 + 16) = 1;
    *(_QWORD *)v21 = &off_1E33A18C0;
    *(_QWORD *)(v21 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v21, a2);
    *(_QWORD *)v21 = &off_1E336D8D0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_BYTE *)(v21 + 32) = 0;
    *(_BYTE *)(v21 + 36) = 0;
    *(_OWORD *)(v21 + 40) = 0u;
    *(_OWORD *)(v21 + 56) = 0u;
    *(_OWORD *)(v21 + 72) = 0u;
    *(_OWORD *)(v21 + 88) = 0u;
    *(_QWORD *)(v21 + 104) = 0;
    *(_BYTE *)(v21 + 112) = 1;
    *(_OWORD *)(v21 + 120) = 0u;
    *(_OWORD *)(v21 + 136) = 0u;
    *(_BYTE *)(v21 + 152) = 0;
    v22 = *a3;
    *a3 = 0;
    v23 = *(unsigned int **)(v21 + 24);
    *(_QWORD *)(v21 + 24) = v22;
    if (v23)
    {
      v24 = v23 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v23 + 2);
        v23 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
      }
    }
    *(_DWORD *)(v21 + 32) = v15;
    *(_BYTE *)(v21 + 36) = 1;
    *(_QWORD *)(v21 + 40) = v19;
    *(_QWORD *)(v21 + 48) = v20;
    v28 = *(double *)(a4 + 56);
    v27 = *(double *)(a4 + 64);
    if (!*(_BYTE *)(a4 + 72))
    {
      v27 = (double)v20;
      v28 = (double)v19;
    }
    v29 = vdup_n_s32(*(_BYTE *)(a4 + 72) == 0);
    v30.i64[0] = v29.u32[0];
    v30.i64[1] = v29.u32[1];
    *(int8x16_t *)(v21 + 88) = vandq_s8((int8x16_t)vcvtq_u64_f64(*(float64x2_t *)(a4 + 40)), (int8x16_t)vcgezq_s64(vshlq_n_s64(v30, 0x3FuLL)));
    *(_QWORD *)(v21 + 72) = (unint64_t)v28;
    *(_QWORD *)(v21 + 80) = (unint64_t)v27;
    if (*(_BYTE *)(a4 + 88) && *(_BYTE *)(a4 + 104))
    {
      v31 = *(_QWORD *)(a4 + 80);
      v32 = *(_QWORD *)(a4 + 96);
    }
    else
    {
      v31 = (unint64_t)((double)v19 / (double)v19 * v28);
      v32 = (unint64_t)((double)v20 / (double)v20 * v27);
    }
    *(_QWORD *)(v21 + 56) = v31;
    *(_QWORD *)(v21 + 64) = v32;
    v35 = *(_QWORD *)a4;
    *(_BYTE *)(v21 + 112) = *(_BYTE *)(a4 + 8);
    *(_QWORD *)(v21 + 104) = v35;
    v36 = *(unsigned int **)(v21 + 24);
    if (*(_BYTE *)(a4 + 24))
    {
      *(_QWORD *)&v52 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v23, (double)*(uint64_t *)(a4 + 16) / 1000.0 / 1000.0);
      *((_QWORD *)&v52 + 1) = v37;
      if (WTF::MediaTime::compare((WTF::MediaTime *)(v36 + 4), (const WTF::MediaTime *)&v52))
      {
        if (a5)
        {
          (*(void (**)(unsigned int **__return_ptr, unsigned int *))(*(_QWORD *)v36 + 72))(&v51, v36);
          v36 = v51;
        }
        else
        {
          v40 = v36 + 2;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
        }
        *((_QWORD *)v36 + 2) = v52;
        *(_QWORD *)((char *)v36 + 21) = *(_QWORD *)((char *)&v52 + 5);
      }
      else
      {
        v38 = v36 + 2;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
      }
      v51 = 0;
      v42 = *(unsigned int **)(v21 + 24);
      *(_QWORD *)(v21 + 24) = v36;
      if (v42)
      {
        v43 = v42 + 2;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v42 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
        }
        v46 = v51;
        v51 = 0;
        if (v46)
        {
          v47 = v46 + 2;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v46 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
          }
        }
      }
      v36 = *(unsigned int **)(v21 + 24);
    }
    v52 = *((_OWORD *)v36 + 1);
    result = WTF::MediaTime::toDouble((WTF::MediaTime *)&v52);
    v34 = 0;
    *(_QWORD *)(v21 + 120) = (uint64_t)(v50 * 1000.0 * 1000.0);
    *(_QWORD *)a1 = v21;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a1 = 33;
    v34 = 1;
  }
  *(_DWORD *)(a1 + 16) = v34;
  return result;
}

uint64_t WebCore::WebCodecsVideoFrame::initializeFrameFromOtherFrame@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  float64x2_t v27;
  uint64x2_t v28;
  int32x2_t v29;
  int64x2_t v30;
  int8x16_t v31;
  float64x2_t v32;
  uint64x2_t v33;
  uint64_t result;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  double v52;
  unsigned int *v53;
  __int128 v54;

  v10 = *a2;
  v11 = *(_QWORD *)(*a2 + 40);
  v12 = *(_QWORD *)(v10 + 48);
  if (*(_BYTE *)(v10 + 36))
    v13 = *(_DWORD *)(v10 + 32);
  else
    v13 = 0;
  if (v13 == 1)
    v14 = 0;
  else
    v14 = v13;
  if (v13 == 5)
    v15 = 6;
  else
    v15 = v14;
  if (v13 == 7)
    v16 = 8;
  else
    v16 = v15;
  if (*(_DWORD *)(a3 + 32) == 1)
    v17 = v16;
  else
    v17 = v13;
  if ((WebCore::validateVideoFrameInit(a3, v11, v12, v17) & 1) != 0)
  {
    v18 = WTF::fastMalloc((WTF *)0xA0);
    *(_DWORD *)(v18 + 16) = 1;
    *(_QWORD *)v18 = &off_1E33A18C0;
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v18, a1);
    *(_QWORD *)v18 = &off_1E336D8D0;
    *(_QWORD *)(v18 + 24) = 0;
    *(_BYTE *)(v18 + 32) = 0;
    *(_BYTE *)(v18 + 36) = 0;
    *(_QWORD *)(v18 + 104) = 0;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_BYTE *)(v18 + 112) = 1;
    *(_OWORD *)(v18 + 120) = 0u;
    *(_OWORD *)(v18 + 136) = 0u;
    *(_BYTE *)(v18 + 152) = 0;
    v20 = *(_QWORD *)(*a2 + 24);
    if (v20)
    {
      v21 = (unsigned int *)(v20 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v19 = *(unsigned int **)(v18 + 24);
      *(_QWORD *)(v18 + 24) = v20;
      if (v19)
      {
        v23 = v19 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v19 + 2);
          v19 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        }
      }
    }
    v26 = *a2;
    if (*(_BYTE *)(*a2 + 36))
    {
      *(_DWORD *)(v18 + 32) = v17;
      *(_BYTE *)(v18 + 36) = 1;
      v26 = *a2;
    }
    *(_OWORD *)(v18 + 40) = *(_OWORD *)(v26 + 40);
    v27 = vcvtq_f64_u64(*(uint64x2_t *)(v26 + 72));
    v28 = *(uint64x2_t *)(v26 + 56);
    v29 = vdup_n_s32(*(_BYTE *)(a3 + 72) == 0);
    v30.i64[0] = v29.u32[0];
    v30.i64[1] = v29.u32[1];
    v31 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v30, 0x3FuLL));
    v32 = (float64x2_t)vbslq_s8(v31, (int8x16_t)v27, *(int8x16_t *)(a3 + 56));
    *(uint64x2_t *)(v18 + 88) = vcvtq_u64_f64((float64x2_t)vbslq_s8(v31, (int8x16_t)vcvtq_f64_u64(*(uint64x2_t *)(v26 + 88)), *(int8x16_t *)(a3 + 40)));
    *(uint64x2_t *)(v18 + 72) = vcvtq_u64_f64(v32);
    if (*(_BYTE *)(a3 + 88) && *(_BYTE *)(a3 + 104))
    {
      v33 = *(uint64x2_t *)(a3 + 80);
      v33.i64[1] = *(_QWORD *)(a3 + 96);
    }
    else
    {
      v33 = vcvtq_u64_f64(vmulq_f64(vdivq_f64(vcvtq_f64_u64(v28), v27), v32));
    }
    *(uint64x2_t *)(v18 + 56) = v33;
    if (*(_BYTE *)(a3 + 8))
      v36 = a3;
    else
      v36 = *a2 + 104;
    v37 = *(_QWORD *)v36;
    *(_BYTE *)(v18 + 112) = *(_BYTE *)(v36 + 8);
    *(_QWORD *)(v18 + 104) = v37;
    v38 = *(unsigned int **)(v18 + 24);
    if (*(_BYTE *)(a3 + 24))
    {
      *(_QWORD *)&v54 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v19, (double)*(uint64_t *)(a3 + 16) / 1000.0 / 1000.0);
      *((_QWORD *)&v54 + 1) = v39;
      if (WTF::MediaTime::compare((WTF::MediaTime *)(v38 + 4), (const WTF::MediaTime *)&v54))
      {
        if (a4)
        {
          (*(void (**)(unsigned int **__return_ptr, unsigned int *))(*(_QWORD *)v38 + 72))(&v53, v38);
          v38 = v53;
        }
        else
        {
          v42 = v38 + 2;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
        *((_QWORD *)v38 + 2) = v54;
        *(_QWORD *)((char *)v38 + 21) = *(_QWORD *)((char *)&v54 + 5);
      }
      else
      {
        v40 = v38 + 2;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 + 1, v40));
      }
      v53 = 0;
      v44 = *(unsigned int **)(v18 + 24);
      *(_QWORD *)(v18 + 24) = v38;
      if (v44)
      {
        v45 = v44 + 2;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v44 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
        }
        v48 = v53;
        v53 = 0;
        if (v48)
        {
          v49 = v48 + 2;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            atomic_store(1u, v48 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
          }
        }
      }
      v38 = *(unsigned int **)(v18 + 24);
    }
    v54 = *((_OWORD *)v38 + 1);
    result = WTF::MediaTime::toDouble((WTF::MediaTime *)&v54);
    v35 = 0;
    *(_QWORD *)(v18 + 120) = (uint64_t)(v52 * 1000.0 * 1000.0);
    *(_QWORD *)a5 = v18;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    v35 = 1;
  }
  *(_DWORD *)(a5 + 16) = v35;
  return result;
}

unsigned int *WebCore::WebCodecsVideoFrame::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  unint64_t v7;
  double v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  double v17;
  double v18;
  BOOL v19;
  BOOL v20;
  double v21;
  double v22;
  unsigned int *result;
  double *v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  WTF *v30;
  WTF *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint64_t v63;
  uint64_t v64;
  __CVBuffer **v65;
  uint64_t v66;
  char *v67;
  __CVBuffer **v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unsigned int *v79;
  __CVBuffer *v80;
  unint64_t v81;
  WTF *v82;
  uint64_t v83;
  int v84;
  char v85[8];
  uint64_t v86;
  double v87;
  double v88;
  int v89;
  double v90[4];
  uint64_t v91[5];

  v91[4] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 8);
  if (!v5 || (v7 = *(_QWORD *)(a3 + 16)) == 0)
  {
LABEL_26:
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 33;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_BYTE *)(a3 + 104))
  {
    v10 = *(double *)(a3 + 72);
    if (v10 < 0.0)
      goto LABEL_26;
    v11 = *(double *)(a3 + 80);
    if (v11 < 0.0)
      goto LABEL_26;
    v12 = *(double *)(a3 + 88);
    if (v12 < 0.0)
      goto LABEL_26;
    v13 = *(double *)(a3 + 96);
    v14 = v13 >= 0.0 && (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    v15 = v14 && (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    v16 = v15 && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    v17 = v11 + v13;
    v18 = (double)v7;
    v19 = v16 && (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    v20 = v19 && v17 <= v18;
    v21 = v10 + v12;
    v22 = (double)v5;
    if (!v20 || v21 > v22)
      goto LABEL_26;
  }
  else
  {
    v22 = (double)v5;
    v18 = (double)v7;
  }
  v90[0] = 0.0;
  v90[1] = 0.0;
  v90[2] = v22;
  v90[3] = v18;
  v25 = (double *)(a3 + 72);
  WebCore::parseVisibleRect((uint64_t)v85, (uint64_t)v90, a3 + 72, v5, v7, *(_DWORD *)a3);
  if (v89)
  {
    if (v89 == 1)
    {
      v26 = v86;
      v86 = 0;
      *(_BYTE *)a4 = v85[0];
      *(_QWORD *)(a4 + 8) = v26;
      v27 = 1;
      *(_DWORD *)(a4 + 16) = 1;
      return (unsigned int *)((uint64_t (*)(unint64_t *, char *))off_1E336DAB0[v27])(&v81, v85);
    }
    goto LABEL_122;
  }
  v28 = v87;
  v29 = v88;
  result = (unsigned int *)WebCore::computeLayoutAndAllocationSize((uint64_t)&v81, v90, a3 + 48, *(_DWORD *)a3);
  if (v84)
  {
    if (v84 == 1)
    {
      v30 = v82;
      v82 = 0;
      *(_BYTE *)a4 = v81;
      *(_QWORD *)(a4 + 8) = v30;
      *(_DWORD *)(a4 + 16) = 1;
      goto LABEL_115;
    }
LABEL_122:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_123;
  }
  v32 = v81;
  v31 = v82;
  v33 = HIDWORD(v83);
  v82 = 0;
  v83 = 0;
  v34 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v34 == -1)
    goto LABEL_122;
  v91[0] = (uint64_t)&v80;
  if (((uint64_t (*)(uint64_t *, uint64_t))off_1E336DA80[v34])(v91, a2) < v32)
  {
    v37 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v37 == -1)
      goto LABEL_122;
    v91[0] = (uint64_t)&v80;
    result = (unsigned int *)((uint64_t (*)(uint64_t *, uint64_t))off_1E336DA80[v37])(v91, a2);
    v39 = (unint64_t)result;
    v40 = 0;
    v41 = (unint64_t)result;
    do
    {
      ++v40;
      v14 = v41 > 9;
      v41 /= 0xAuLL;
    }
    while (v14);
    v42 = 0;
    v43 = v32;
    do
    {
      ++v42;
      v14 = v43 > 9;
      v43 /= 0xAuLL;
    }
    while (v14);
    if ((v42 & 0x80000000) == 0)
    {
      v44 = __OFADD__(v42, 3);
      v45 = v42 + 3;
      v46 = v44;
      if ((v40 & 0x80000000) == 0 && !v46)
      {
        v44 = __OFADD__(v40, v45);
        v47 = v40 + v45;
        if (!v44)
        {
          v48 = (v47 + 18);
          if (!__OFADD__(v47, 18))
          {
            if (v47 == -18)
            {
              v49 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
LABEL_63:
              *(_BYTE *)a4 = 33;
              *(_QWORD *)(a4 + 8) = v49;
              goto LABEL_112;
            }
            if ((v48 & 0x80000000) == 0)
            {
              result = (unsigned int *)WTF::tryFastCompactMalloc((WTF *)(v48 + 20));
              v49 = v91[0];
              if (v91[0])
              {
                v50 = 0;
                *(_DWORD *)v91[0] = 2;
                *(_DWORD *)(v49 + 4) = v48;
                *(_QWORD *)(v49 + 8) = v49 + 20;
                *(_DWORD *)(v49 + 16) = 4;
                *(_WORD *)(v49 + 36) = 8300;
                *(_OWORD *)(v49 + 20) = *(_OWORD *)"Data is too small ";
                v51 = v39;
                do
                {
                  *((_BYTE *)&v91[3] + v50--) = (v51 % 0xA) | 0x30;
                  v14 = v51 > 9;
                  v51 /= 0xAuLL;
                }
                while (v14);
                if (v50 + 26 <= 25)
                  result = (unsigned int *)memcpy((void *)(v49 + 38), (char *)&v91[3] + v50 + 1, -v50);
                v52 = 0;
                do
                {
                  ++v52;
                  v14 = v39 > 9;
                  v39 /= 0xAuLL;
                }
                while (v14);
                v53 = 0;
                v54 = v49 + 38 + v52;
                *(_BYTE *)(v54 + 2) = 32;
                *(_WORD *)v54 = 12064;
                do
                {
                  *((_BYTE *)&v91[3] + v53--) = (v32 % 0xA) | 0x30;
                  v14 = v32 > 9;
                  v32 /= 0xAuLL;
                }
                while (v14);
                if (v53 + 26 <= 25)
                  result = (unsigned int *)memcpy((void *)(v54 + 3), (char *)&v91[3] + v53 + 1, -v53);
                goto LABEL_63;
              }
            }
          }
        }
      }
    }
LABEL_123:
    __break(0xC471u);
    JUMPOUT(0x195594F94);
  }
  v55 = *(_DWORD *)a3;
  if (*(_BYTE *)(a3 + 152))
  {
    v56 = (int8x16_t)vdupq_lane_s64(*(_QWORD *)(a3 + 144), 0);
    v57 = vandq_s8(v56, (int8x16_t)xmmword_1968DF310);
    v58 = vandq_s8(v56, (int8x16_t)xmmword_1968DF320);
    v59 = vandq_s8(v56, (int8x16_t)xmmword_1968DF330);
    v60 = vandq_s8(v56, (int8x16_t)xmmword_1968DF340);
  }
  else
  {
    v35.i32[0] = 4;
    v36.i32[0] = v55 - 5;
    v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(v35, v36), 0);
    v57 = vbslq_s8(v61, (int8x16_t)xmmword_1968DF360, (int8x16_t)xmmword_1968DF350);
    v58 = vbslq_s8(v61, (int8x16_t)xmmword_1968DF380, (int8x16_t)xmmword_1968DF370);
    v59 = vbslq_s8(v61, (int8x16_t)xmmword_1968DF3A0, (int8x16_t)xmmword_1968DF390);
    v60 = (int8x16_t)xmmword_1968DF3B0;
  }
  v62 = vorrq_s8(vorrq_s8(v60, v58), vorrq_s8(v59, v57));
  v80 = (__CVBuffer *)vorr_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
  switch(v55)
  {
    case 0u:
      if ((*(_BYTE *)(a3 + 8) & 1) != 0
        || (*(_BYTE *)(a3 + 16) & 1) != 0
        || *(_BYTE *)(a3 + 104) && ((unint64_t)*v25 & 1) != 0)
      {
        goto LABEL_101;
      }
      v74 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v74 == -1)
        goto LABEL_122;
      v91[0] = (uint64_t)&v79;
      ((void (*)(uint64_t *, uint64_t))off_1E336DA90[v74])(v91, a2);
      if (v33 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FC4);
      }
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FCCLL);
      }
      if (v33 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FECLL);
      }
      WebCore::VideoFrame::createI420((unint64_t)v29, (uint64_t)v31, (uint64_t)v31 + 48, (uint64_t)v31 + 96, (uint64_t *)&v80, v91);
      goto LABEL_74;
    case 1u:
      if ((*(_BYTE *)(a3 + 8) & 1) != 0
        || (*(_BYTE *)(a3 + 16) & 1) != 0
        || *(_BYTE *)(a3 + 104) && ((unint64_t)*v25 & 1) != 0)
      {
LABEL_101:
        result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v75 = v91[0];
        *(_BYTE *)a4 = 33;
        *(_QWORD *)(a4 + 8) = v75;
        break;
      }
      v73 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v73 == -1)
        goto LABEL_122;
      v91[0] = (uint64_t)&v79;
      ((void (*)(uint64_t *, uint64_t))off_1E336DA90[v73])(v91, a2);
      if (v33 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FACLL);
      }
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FB4);
      }
      if (v33 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FE4);
      }
      if (v33 == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FBCLL);
      }
      WebCore::VideoFrame::createI420A((unint64_t)v29, (uint64_t)v31, (uint64_t)v31 + 48, (uint64_t)v31 + 96, (uint64_t)v31 + 144, v91, (uint64_t *)&v80);
LABEL_74:
      if (v91[0])
      {
        v79 = (unsigned int *)v91[0];
        WebCore::WebCodecsVideoFrame::create(a1, (uint64_t *)&v79, a3, v91);
        *(_QWORD *)a4 = v91[0];
        *(_DWORD *)(a4 + 16) = 0;
        v91[0] = 0;
        result = v79;
        v79 = 0;
        if (result)
        {
          v69 = result + 2;
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            atomic_store(1u, result + 2);
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          }
        }
        goto LABEL_113;
      }
LABEL_110:
      result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v72 = 33;
LABEL_111:
      *(_BYTE *)a4 = v72;
      break;
    case 4u:
      if ((*(_BYTE *)(a3 + 8) & 1) != 0
        || (*(_BYTE *)(a3 + 16) & 1) != 0
        || *(_BYTE *)(a3 + 104) && ((unint64_t)*v25 & 1) != 0)
      {
        goto LABEL_110;
      }
      v76 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v76 == -1)
        goto LABEL_122;
      v91[0] = (uint64_t)&v79;
      v77 = (char *)((uint64_t (*)(uint64_t *, uint64_t))off_1E336DA90[v76])(v91, a2);
      if (v33 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FD4);
      }
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FDCLL);
      }
      WebCore::VideoFrame::createNV12((__CFAllocator *)v28, v77, v78, (unint64_t)v29, (uint64_t)v31, (uint64_t)v31 + 48, &v80, v91);
      goto LABEL_74;
    case 5u:
    case 6u:
      v63 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v63 == -1)
        goto LABEL_122;
      v91[0] = (uint64_t)&v79;
      v64 = ((uint64_t (*)(uint64_t *, uint64_t))off_1E336DA90[v63])(v91, a2);
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195594F9CLL);
      }
      WebCore::VideoFrame::createRGBA((__CFAllocator *)v28, v64, (unint64_t)v29, (uint64_t)v31, (uint64_t *)&v80, v65, v91);
      goto LABEL_74;
    case 7u:
    case 8u:
      v66 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v66 == -1)
        goto LABEL_122;
      v91[0] = (uint64_t)&v79;
      v67 = (char *)((uint64_t (*)(uint64_t *, uint64_t))off_1E336DA90[v66])(v91, a2);
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x195594FA4);
      }
      WebCore::VideoFrame::createBGRA((__CFAllocator *)v28, v67, (unint64_t)v29, (uint64_t)v31, (uint64_t *)&v80, v68, v91);
      goto LABEL_74;
    default:
      result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v72 = 6;
      goto LABEL_111;
  }
LABEL_112:
  *(_DWORD *)(a4 + 16) = 1;
LABEL_113:
  if (v31)
    result = (unsigned int *)WTF::fastFree(v31, v38);
LABEL_115:
  if (v84 != -1)
    result = (unsigned int *)((uint64_t (*)(uint64_t *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore19CombinedPlaneLayoutENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v84])(v91, &v81);
  v27 = v89;
  if (v89 != -1)
    return (unsigned int *)((uint64_t (*)(unint64_t *, char *))off_1E336DAB0[v27])(&v81, v85);
  return result;
}

uint64_t WebCore::parseVisibleRect(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  __int128 v12;

  v6 = result;
  v7 = *(double *)a2;
  v8 = *(double *)(a2 + 8);
  v12 = *(_OWORD *)(a2 + 16);
  if (*(_BYTE *)(a3 + 32))
  {
    v9 = *(double *)(a3 + 16);
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_12;
    v10 = *(double *)(a3 + 24);
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_12;
    v7 = *(double *)a3;
    if ((*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_12;
    v8 = *(double *)(a3 + 8);
    if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
      || v9 <= 0.0
      || v10 <= 0.0
      || v7 < 0.0
      || v8 < 0.0
      || v9 + v7 > (double)a4
      || v10 + v8 > (double)a5)
    {
      goto LABEL_12;
    }
    v12 = *(_OWORD *)(a3 + 16);
  }
  if (a6 <= 8 && (((1 << a6) & 0x1E8) != 0 || (v7 & 1) == 0 && (v8 & 1) == 0))
  {
    v11 = 0;
    *(double *)result = v7;
    *(double *)(result + 8) = v8;
    *(_OWORD *)(result + 16) = v12;
    goto LABEL_17;
  }
LABEL_12:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)v6 = 33;
  v11 = 1;
LABEL_17:
  *(_DWORD *)(v6 + 32) = v11;
  return result;
}

WTF *WebCore::computeLayoutAndAllocationSize(uint64_t a1, double *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  BOOL v9;
  WTF *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  WTF *v35;
  char *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  int v43;
  WTF *result;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;

  if (a4 > 8)
    v8 = 1;
  else
    v8 = qword_1968DF3E0[a4];
  if (*(_BYTE *)(a3 + 16))
    v9 = v8 == *(unsigned int *)(a3 + 12);
  else
    v9 = 1;
  if (!v9)
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a1 = 33;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  v10 = (WTF *)WTF::fastMalloc((WTF *)(48 * v8));
  v52 = (48 * v8) / 0x30u;
  v51 = v10;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v50 = v8;
  v49 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
  v15 = a4 - 2;
  while (1)
  {
    if (a4 - 5 >= 4)
    {
      if (a4 == 4)
      {
        if (v12)
          v16 = 2;
        else
          v16 = 1;
        goto LABEL_20;
      }
      v16 = 1;
    }
    else
    {
      v16 = 4;
    }
    if (v15 >= 2)
    {
      if (a4 == 1)
      {
        v18 = v12 - 1;
        if (v12 - 1 >= 2)
          v17 = 1;
        else
          v17 = 2;
LABEL_33:
        if (v18 >= 2)
          v19 = 1;
        else
          v19 = 2;
        goto LABEL_38;
      }
      if (a4)
      {
        v17 = 1;
        goto LABEL_23;
      }
    }
LABEL_20:
    v17 = v12 ? 2 : 1;
LABEL_23:
    if (v15 >= 3 && a4)
    {
      if (a4 != 1)
      {
        v19 = 1;
        goto LABEL_38;
      }
      v18 = v12 - 1;
      goto LABEL_33;
    }
    v19 = v12 ? 2 : 1;
LABEL_38:
    v20 = (double)(unint64_t)v19;
    v21 = (unint64_t)(a2[1] / (double)(unint64_t)v19);
    v22 = a2[2];
    v23 = (double)v16;
    v24 = (unint64_t)(a2[3] / v20);
    v25 = (unint64_t)(*a2 * v23 / (double)(unint64_t)v17);
    v46 = 0uLL;
    *(_QWORD *)&v47 = v21;
    *((_QWORD *)&v47 + 1) = v24;
    v26 = (unint64_t)(v22 * v23 / (double)(unint64_t)v17);
    *(_QWORD *)&v48 = v25;
    *((_QWORD *)&v48 + 1) = v26;
    if (!v26)
      break;
    if (!*(_BYTE *)(a3 + 16))
    {
      v27 = v13;
      goto LABEL_44;
    }
    if (v12 >= *(unsigned int *)(a3 + 12))
      goto LABEL_78;
    if (*(_QWORD *)(*(_QWORD *)a3 + 16 * v12 + 8) < v26)
      break;
    v27 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v12);
    v26 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v12 + 8);
LABEL_44:
    *(_QWORD *)&v46 = v27;
    *((_QWORD *)&v46 + 1) = v26;
    v45 = 0;
    if (!is_mul_ok(v26, v24))
      break;
    v28 = v26 * v24;
    if (HIDWORD(v28))
      break;
    v29 = __CFADD__(v28, v27);
    v30 = v28 + v27;
    if (v29)
      break;
    v45 = v30;
    if (HIDWORD(v30))
      break;
    v31 = HIDWORD(v50);
    if (HIDWORD(v50) == (_DWORD)v50)
    {
      v32 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, HIDWORD(v50) + 1, (unint64_t)&v45);
      v31 = HIDWORD(v50);
      *((_QWORD *)v49 + HIDWORD(v50)) = *v32;
    }
    else
    {
      *((_QWORD *)v49 + HIDWORD(v50)) = v30;
    }
    v33 = (v31 + 1);
    HIDWORD(v50) = v33;
    if (v13 <= v45)
      v13 = v45;
    if (v12)
    {
      v34 = 0;
      v35 = v10;
      while (v11 != v34)
      {
        if (v45 > *(_QWORD *)v35)
        {
          if (v34 >= v33)
          {
            __break(0xC471u);
            JUMPOUT(0x195595588);
          }
          if (*((_QWORD *)v49 + v34) > (unint64_t)v46)
            goto LABEL_65;
        }
        ++v34;
        v35 = (WTF *)((char *)v35 + 48);
        if (v12 == v34)
          goto LABEL_60;
      }
LABEL_78:
      __break(0xC471u);
      JUMPOUT(0x195595580);
    }
LABEL_60:
    if (v11 == (_DWORD)v52)
    {
      v36 = WTF::Vector<WebCore::GPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, v11 + 1, (unint64_t)&v46);
      v11 = HIDWORD(v52);
      v10 = v51;
      v37 = (_OWORD *)((char *)v51 + 48 * HIDWORD(v52));
      v39 = *((_OWORD *)v36 + 1);
      v38 = *((_OWORD *)v36 + 2);
      *v37 = *(_OWORD *)v36;
      v37[1] = v39;
      v37[2] = v38;
    }
    else
    {
      v40 = (_OWORD *)((char *)v10 + 48 * v11);
      v41 = v46;
      v42 = v48;
      v40[1] = v47;
      v40[2] = v42;
      *v40 = v41;
    }
    HIDWORD(v52) = ++v11;
    if (++v12 == v8)
    {
      v43 = v52;
      v51 = 0;
      v52 = 0;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 16) = v43;
      *(_DWORD *)(a1 + 20) = v11;
      *(_DWORD *)(a1 + 24) = 0;
      v10 = 0;
      goto LABEL_66;
    }
  }
LABEL_65:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a1 = 33;
  *(_DWORD *)(a1 + 24) = 1;
LABEL_66:
  result = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    result = (WTF *)WTF::fastFree(result, v14);
    if (v10)
    {
LABEL_68:
      v51 = 0;
      LODWORD(v52) = 0;
      return (WTF *)WTF::fastFree(v10, v14);
    }
  }
  else if (v10)
  {
    goto LABEL_68;
  }
  return result;
}

unsigned int *WebCore::WebCodecsVideoFrame::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::MediaTime *v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *result;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;

  v8 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)(v8 + 16) = 1;
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, a1);
  *(_QWORD *)v8 = &off_1E336D8D0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 36) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 112) = 1;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_BYTE *)(v8 + 152) = 0;
  *a4 = v8;
  v9 = *a2;
  *a2 = 0;
  v10 = *(unsigned int **)(v8 + 24);
  *(_QWORD *)(v8 + 24) = v9;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  v14 = *a4;
  *(_DWORD *)(v14 + 32) = *(_DWORD *)a3;
  *(_BYTE *)(v14 + 36) = 1;
  *(_QWORD *)(v14 + 40) = (unint64_t)(*(float (**)(_QWORD))(**(_QWORD **)(v14 + 24) + 16))(*(_QWORD *)(v14 + 24));
  v15 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 24) + 16))(*(_QWORD *)(v14 + 24));
  v17 = (unint64_t)v16;
  *(_QWORD *)(v14 + 48) = (unint64_t)v16;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 96) = 0;
  if (*(_BYTE *)(a3 + 104))
  {
    v18 = (unint64_t)*(double *)(a3 + 88);
    v17 = (unint64_t)*(double *)(a3 + 96);
  }
  else
  {
    v18 = *(_QWORD *)(v14 + 40);
  }
  *(_QWORD *)(v14 + 72) = v18;
  *(_QWORD *)(v14 + 80) = v17;
  if (*(_BYTE *)(a3 + 120))
    v18 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(v14 + 56) = v18;
  if (*(_BYTE *)(a3 + 136))
    v17 = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(v14 + 64) = v17;
  v19 = *(_QWORD *)(a3 + 32);
  *(_BYTE *)(v14 + 112) = *(_BYTE *)(a3 + 40);
  *(_QWORD *)(v14 + 104) = v19;
  v20 = *(_QWORD *)(v14 + 24);
  *(_QWORD *)&v29 = WTF::MediaTime::createWithDouble(v15, (double)*(uint64_t *)(a3 + 24) / 1000.0 / 1000.0);
  *((_QWORD *)&v29 + 1) = v21;
  v22 = WTF::MediaTime::compare((WTF::MediaTime *)(v20 + 16), (const WTF::MediaTime *)&v29);
  v23 = (unsigned int *)(v20 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  if (v22)
  {
    *(_QWORD *)(v20 + 16) = v29;
    *(_QWORD *)(v20 + 21) = *(_QWORD *)((char *)&v29 + 5);
  }
  result = *(unsigned int **)(v14 + 24);
  *(_QWORD *)(v14 + 24) = v20;
  if (result)
  {
    v26 = result + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *(_QWORD *)(*a4 + 120) = *(_QWORD *)(a3 + 24);
  return result;
}

uint64_t WebCore::validateVideoFrameInit(uint64_t result, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  double v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  double v16;
  BOOL v19;

  if (*(_BYTE *)(result + 72))
  {
    if (a4 > 8
      || ((1 << a4) & 0x1E8) == 0
      && ((*(double *)(result + 40) & 1) != 0 || (*(double *)(result + 48) & 1) != 0))
    {
      return 0;
    }
    v4 = *(_QWORD *)(result + 40);
    v5 = (v4 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    v6 = ((v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v4 >= 0)
    {
      v6 = 0;
      v5 = 0;
    }
    v7 = (v4 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v5;
    if ((v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
      v7 = 1;
    if (((v7 | v6) & 1) != 0)
      return 0;
    v8 = *(_QWORD *)(result + 48);
    v9 = (v8 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    v10 = ((v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v8 >= 0)
    {
      v10 = 0;
      v9 = 0;
    }
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
      v9 = 1;
    if ((v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
      v9 = 1;
    if (v9 || v10)
      return 0;
    v11 = *(double *)(result + 56);
    v12 = (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    v13 = v11 < 0.0 && ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v11 >= 0.0)
      v12 = 0;
    v14 = (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v12;
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000)
      v14 = 1;
    if (((v14 | v13) & 1) != 0)
      return 0;
    v15 = 0;
    v16 = *(double *)(result + 64);
    v19 = *(uint64_t *)&v16 > -1 && ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
       || (unint64_t)(*(_QWORD *)&v16 - 1) < 0xFFFFFFFFFFFFFLL
       || (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (!v19 || v11 == 0.0 || v16 == 0.0)
      return v15;
    if (*(double *)(result + 48) + v16 > (double)a3 || *(double *)(result + 40) + v11 > (double)a2)
      return 0;
  }
  v15 = 0;
  if (!a2 || !a3)
    return v15;
  if ((*(_BYTE *)(result + 88) != 0) != (*(_BYTE *)(result + 104) != 0))
    return 0;
  if (!*(_BYTE *)(result + 88))
    return 1;
  if (!*(_QWORD *)(result + 80))
    return 0;
  if (*(_BYTE *)(result + 104))
  {
    v15 = *(_QWORD *)(result + 96);
    if (!v15)
      return v15;
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::WebCodecsVideoFrame::initializeFrameWithResourceAndSize(uint64_t a1, WebCore::ScriptExecutionContext *a2, WebCore::VideoFrame **a3, uint64_t a4)
{
  unsigned int *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v15;
  int v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  double v22;
  double v23;
  int32x2_t v24;
  int64x2_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  __CVBuffer *v37;
  double v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  __CVBuffer *v42;
  __int128 v43;

  WebCore::VideoFrame::fromNativeImage(*a3, &v42);
  v8 = (unsigned int *)v42;
  if (!v42)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a1 = 33;
    *(_DWORD *)(a1 + 16) = 1;
    return result;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a3 + 6) + 24))(*((_QWORD *)*a3 + 6));
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a3 + 6) + 24))(*((_QWORD *)*a3 + 6));
  v11 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
  v12 = *(_DWORD *)(a4 + 32);
  v13 = 4;
  if (v11 <= 875704421)
  {
    if (v11 == 32)
    {
      v15 = v12 == 1;
      v16 = 5;
LABEL_14:
      if (v15)
        v13 = v16 + 1;
      else
        v13 = v16;
      goto LABEL_17;
    }
    if (v11 == 641234480)
      goto LABEL_17;
LABEL_12:
    v13 = 0;
    goto LABEL_17;
  }
  if (v11 != 875704422 && v11 != 875704438)
  {
    if (v11 == 1111970369)
    {
      v15 = v12 == 1;
      v16 = 7;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
LABEL_17:
  v18 = v9;
  v19 = v10 >> 32;
  if ((WebCore::validateVideoFrameInit(a4, v9, v19, v13) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a1 = 33;
    *(_DWORD *)(a1 + 16) = 1;
    v42 = 0;
LABEL_38:
    v39 = v8 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v8 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
    return result;
  }
  v20 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)(v20 + 16) = 1;
  *(_QWORD *)v20 = &off_1E33A18C0;
  *(_QWORD *)(v20 + 8) = 0;
  v21 = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v20, a2);
  *(_QWORD *)v20 = &off_1E336D8D0;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_QWORD *)(v20 + 104) = 0;
  *(_BYTE *)(v20 + 112) = 1;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_BYTE *)(v20 + 152) = 0;
  v42 = 0;
  *(_QWORD *)(v20 + 24) = v8;
  *(_DWORD *)(v20 + 32) = v13;
  *(_BYTE *)(v20 + 36) = 1;
  *(_QWORD *)(v20 + 40) = v18;
  *(_QWORD *)(v20 + 48) = v19;
  v23 = *(double *)(a4 + 56);
  v22 = *(double *)(a4 + 64);
  if (!*(_BYTE *)(a4 + 72))
  {
    v22 = (double)v19;
    v23 = (double)v18;
  }
  v24 = vdup_n_s32(*(_BYTE *)(a4 + 72) == 0);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  *(int8x16_t *)(v20 + 88) = vandq_s8((int8x16_t)vcvtq_u64_f64(*(float64x2_t *)(a4 + 40)), (int8x16_t)vcgezq_s64(vshlq_n_s64(v25, 0x3FuLL)));
  *(_QWORD *)(v20 + 72) = (unint64_t)v23;
  *(_QWORD *)(v20 + 80) = (unint64_t)v22;
  if (*(_BYTE *)(a4 + 88) && *(_BYTE *)(a4 + 104))
  {
    v26 = *(_QWORD *)(a4 + 80);
    v27 = *(_QWORD *)(a4 + 96);
  }
  else
  {
    v26 = (unint64_t)((double)v18 / (double)v18 * v23);
    v27 = (unint64_t)((double)v19 / (double)v19 * v22);
  }
  *(_QWORD *)(v20 + 56) = v26;
  *(_QWORD *)(v20 + 64) = v27;
  v28 = *(_QWORD *)a4;
  *(_BYTE *)(v20 + 112) = *(_BYTE *)(a4 + 8);
  *(_QWORD *)(v20 + 104) = v28;
  if (*(_BYTE *)(a4 + 24))
  {
    *(_QWORD *)&v43 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v21, (double)*(uint64_t *)(a4 + 16) / 1000.0 / 1000.0);
    *((_QWORD *)&v43 + 1) = v29;
    v30 = WTF::MediaTime::compare((WTF::MediaTime *)(v8 + 4), (const WTF::MediaTime *)&v43);
    v31 = v8 + 2;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    if (v30)
    {
      *((_QWORD *)v8 + 2) = v43;
      *(_QWORD *)((char *)v8 + 21) = *(_QWORD *)((char *)&v43 + 5);
    }
    v33 = *(unsigned int **)(v20 + 24);
    *(_QWORD *)(v20 + 24) = v8;
    if (v33)
    {
      v34 = v33 + 2;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v33 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
      }
    }
    v8 = *(unsigned int **)(v20 + 24);
    v37 = v42;
  }
  else
  {
    v37 = 0;
  }
  v43 = *((_OWORD *)v8 + 1);
  result = WTF::MediaTime::toDouble((WTF::MediaTime *)&v43);
  *(_QWORD *)(v20 + 120) = (uint64_t)(v38 * 1000.0 * 1000.0);
  *(_QWORD *)a1 = v20;
  *(_DWORD *)(a1 + 16) = 0;
  v42 = 0;
  v8 = (unsigned int *)v37;
  if (v37)
    goto LABEL_38;
  return result;
}

uint64_t WebCore::WebCodecsVideoFrame::allocationSize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;

  if (*(_BYTE *)(a1 + 152))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 8;
LABEL_3:
    *(_BYTE *)a3 = v5;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  if (!*(_BYTE *)(a1 + 36))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 6;
    goto LABEL_3;
  }
  WebCore::parseVideoFrameCopyToOptions(a1, a2, (uint64_t)&v11);
  v6 = v13;
  if (v13)
  {
    if (v13 != 1)
    {
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::parseVideoFrameCopyToOptions(v8, v9, v10);
    }
    v7 = v12;
    v12 = 0;
    *(_BYTE *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v7;
  }
  else
  {
    *(_QWORD *)a3 = v11;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore19CombinedPlaneLayoutENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v6])(&v14, &v11);
}

uint64_t WebCore::parseVideoFrameCopyToOptions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  bmalloc::api *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  _OWORD v20[2];
  double v21;
  uint64_t v22;
  int v23;

  if (!*(_BYTE *)(a2 + 32))
  {
LABEL_5:
    if (!*(_QWORD *)(a1 + 144))
    {
      v18 = vcvtq_f64_u64(*(uint64x2_t *)(a1 + 72));
      v19 = vcvtq_f64_u64(*(uint64x2_t *)(a1 + 88));
      v8 = bmalloc::api::isoAllocate();
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 1;
      *(float64x2_t *)(v8 + 16) = v19;
      *(float64x2_t *)(v8 + 32) = v18;
      v9 = *(bmalloc::api **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v8;
      if (v9)
      {
        if (*((_DWORD *)v9 + 2) == 1)
        {
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)(*(_QWORD *)v9 + 8) = 3;
            *(_QWORD *)v9 = 0;
          }
          bmalloc::api::isoDeallocate(v9, v7);
        }
        else
        {
          --*((_DWORD *)v9 + 2);
        }
      }
    }
    v10 = *(_QWORD *)(a1 + 144);
    v11 = *(_OWORD *)(v10 + 32);
    v20[0] = *(_OWORD *)(v10 + 16);
    v20[1] = v11;
    v12 = *(_QWORD *)(a1 + 32);
    if ((v12 & 0xFF00000000) == 0)
      goto LABEL_21;
    WebCore::parseVisibleRect((uint64_t)&v21, (uint64_t)v20, a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v12);
    if (v23)
    {
      if (v23 != 1)
      {
LABEL_22:
        v17 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::WebCodecsVideoFrame::copyTo(v17);
      }
      v13 = v22;
      v22 = 0;
      *(_BYTE *)a3 = LOBYTE(v21);
      *(_QWORD *)(a3 + 8) = v13;
      v14 = 1;
      *(_DWORD *)(a3 + 24) = 1;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 32);
      if ((v15 & 0xFF00000000) == 0)
        goto LABEL_21;
      result = (uint64_t)WebCore::computeLayoutAndAllocationSize(a3, &v21, a2 + 40, v15);
      v14 = v23;
      if (v23 == -1)
        return result;
    }
    return ((uint64_t (*)(_OWORD *, double *))off_1E336DAB0[v14])(v20, &v21);
  }
  v6 = *(_QWORD *)(a1 + 32);
  if ((v6 & 0xFF00000000) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  switch((int)v6)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      if (((*(double *)(a2 + 16) | *(double *)(a2 + 24)) & 1) == 0)
        goto LABEL_5;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      goto LABEL_5;
    default:
      break;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 33;
  *(_DWORD *)(a3 + 24) = 1;
  return result;
}

WTF::StringImpl *WebCore::WebCodecsVideoFrame::copyTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WebCore::WebCodecsVideoFrame *v37;
  WebCore::ScriptExecutionContext *v38;
  objc_class *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  objc_class *v51;

  if (*(_BYTE *)(a1 + 152))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = *a4;
    v6 = 8;
LABEL_3:
    LOBYTE(v42) = v6;
    v39 = 0;
    LOBYTE(v45) = v6;
    v7 = v43;
    if (v43)
      *(_DWORD *)v43 += 2;
    v46 = v7;
    WebCore::DeferredPromise::reject(v5, (unsigned __int8 *)&v45, 0, &v39);
    v9 = v46;
    v46 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = v43;
    v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (!*(_BYTE *)(a1 + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = *a4;
    v6 = 6;
    goto LABEL_3;
  }
  WebCore::parseVideoFrameCopyToOptions(a1, a3, (uint64_t)&v45);
  if (!v48)
  {
    v17 = v45;
    v16 = v46;
    v42 = v45;
    v43 = v46;
    v18 = v47;
    v46 = 0;
    v47 = 0;
    v44 = v18;
    v19 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v19 == -1)
      goto LABEL_63;
    v39 = (objc_class *)&v49;
    if (((uint64_t (*)(objc_class **, uint64_t))off_1E336DA80[v19])(&v39, a2) >= v17)
    {
      v24 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v24 == -1)
        goto LABEL_63;
      v39 = (objc_class *)&v49;
      v25 = ((uint64_t (*)(objc_class **, uint64_t))off_1E336DAC0[v24])(&v39, a2);
      if (!*(_BYTE *)(a1 + 36))
      {
        __break(1u);
        goto LABEL_63;
      }
      v27 = v25;
      v28 = v26;
      v29 = *(_QWORD *)(a1 + 24);
      v30 = *(_DWORD *)(a1 + 32);
      LOBYTE(v39) = 0;
      LODWORD(v40) = -1;
      v31 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v31 != -1)
      {
        ((void (*)(uint64_t *, objc_class **, uint64_t))off_1E336DAE0[v31])(&v49, &v39, a2);
        LODWORD(v40) = v31;
      }
      v32 = *a4;
      *a4 = 0;
      v41 = (WTF::StringImpl *)v32;
      v33 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v33 = &off_1E336DBE0;
      *(_BYTE *)(v33 + 8) = 0;
      *(_DWORD *)(v33 + 16) = -1;
      v34 = (int)v40;
      if ((_DWORD)v40 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, objc_class **))off_1E336DAE0[v40])(&v49, v33 + 8, &v39);
        *(_DWORD *)(v33 + 16) = v34;
      }
      v35 = v41;
      v41 = 0;
      *(_QWORD *)(v33 + 24) = v35;
      v49 = v33;
      WebCore::VideoFrame::copyTo(v29, v27, v28, v30, (unsigned int *)&v43, &v49);
      v36 = v49;
      v49 = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      result = v41;
      v41 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 4);
      }
      if ((_DWORD)v40 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(objc_class **, objc_class **))off_1E336DAD0[v40])(&v51, &v39);
      v16 = v43;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v20 = *a4;
      LOBYTE(v49) = 33;
      v51 = 0;
      LOBYTE(v39) = 33;
      v21 = v50;
      if (v50)
        *(_DWORD *)v50 += 2;
      v40 = v21;
      WebCore::DeferredPromise::reject(v20, (unsigned __int8 *)&v39, 0, &v51);
      v23 = v40;
      v40 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      result = v50;
      v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
          if (!v16)
            goto LABEL_51;
        }
        else
        {
          *(_DWORD *)result -= 2;
          if (!v16)
            goto LABEL_51;
        }
LABEL_50:
        v43 = 0;
        LODWORD(v44) = 0;
        result = (WTF::StringImpl *)WTF::fastFree(v16, v22);
        goto LABEL_51;
      }
    }
    if (!v16)
      goto LABEL_51;
    goto LABEL_50;
  }
  if (v48 != 1)
  {
LABEL_63:
    v37 = (WebCore::WebCodecsVideoFrame *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::WebCodecsVideoFrame::clone(v37, v38);
  }
  v13 = v46;
  v46 = 0;
  v14 = *a4;
  v39 = 0;
  LOBYTE(v42) = v45;
  if (v13)
    *(_DWORD *)v13 += 2;
  v43 = v13;
  WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v42, 0, &v39);
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      if (!v13)
        goto LABEL_51;
      goto LABEL_21;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v13)
    goto LABEL_51;
LABEL_21:
  if (*(_DWORD *)v13 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v15);
  else
    *(_DWORD *)v13 -= 2;
LABEL_51:
  if (v48 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unint64_t *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore19CombinedPlaneLayoutENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v48])(&v42, &v45);
  return result;
}

uint64_t WebCore::WebCodecsVideoFrame::clone@<X0>(WebCore::WebCodecsVideoFrame *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  WTF **v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t *v20;
  bmalloc::api *v21;
  bmalloc::api *v22;
  bmalloc::api **v23;
  bmalloc::api *v24;
  bmalloc::api *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (*((_BYTE *)this + 152))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    v5 = 1;
    goto LABEL_40;
  }
  v8 = WTF::fastMalloc((WTF *)0xA0);
  v9 = v8;
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v31 = *((_OWORD *)this + 4);
  v32 = *((_OWORD *)this + 5);
  v33 = *((_OWORD *)this + 6);
  v34 = *((_OWORD *)this + 7);
  v29 = *((_OWORD *)this + 2);
  v30 = *((_OWORD *)this + 3);
  *(_DWORD *)(v8 + 16) = 1;
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, a2);
  *(_QWORD *)v9 = &off_1E336D8D0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_OWORD *)(v9 + 64) = v31;
  *(_OWORD *)(v9 + 80) = v32;
  *(_OWORD *)(v9 + 96) = v33;
  *(_OWORD *)(v9 + 112) = v34;
  *(_OWORD *)(v9 + 32) = v29;
  *(_OWORD *)(v9 + 48) = v30;
  *(_QWORD *)(v9 + 128) = 0;
  v14 = (WTF **)(v9 + 128);
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 144) = 0;
  *(_BYTE *)(v9 + 152) = 0;
  v15 = *((_QWORD *)this + 16);
  if (v15)
    goto LABEL_13;
  v16 = *((_QWORD *)this + 3);
  v15 = WTF::fastMalloc((WTF *)0xC);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 4) = v16 ? *(_QWORD *)(v16 + 36) : 0;
  v17 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v15;
  if (!v17)
    goto LABEL_13;
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
LABEL_13:
    ++*(_DWORD *)v15;
    goto LABEL_14;
  }
  WTF::fastFree(v17, v13);
  v15 = *((_QWORD *)this + 16);
  if (v15)
    goto LABEL_13;
LABEL_14:
  v18 = *v14;
  *v14 = (WTF *)v15;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, v13);
    else
      --*(_DWORD *)v18;
  }
  if (*((_BYTE *)this + 152))
  {
    v19 = 0;
    v20 = (uint64_t *)(v9 + 136);
    goto LABEL_25;
  }
  v19 = *((_QWORD *)this + 17);
  if (v19)
    goto LABEL_23;
  v27 = vcvtq_f64_u64(*(uint64x2_t *)((char *)this + 40));
  v19 = bmalloc::api::isoAllocate();
  *(_QWORD *)v19 = 0;
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(float64x2_t *)(v19 + 32) = v27;
  v21 = (bmalloc::api *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v19;
  if (!v21)
    goto LABEL_23;
  if (*((_DWORD *)v21 + 2) != 1)
  {
    --*((_DWORD *)v21 + 2);
LABEL_23:
    v20 = (uint64_t *)(v9 + 136);
LABEL_24:
    ++*(_DWORD *)(v19 + 8);
    goto LABEL_25;
  }
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(*(_QWORD *)v21 + 8) = 3;
    *(_QWORD *)v21 = 0;
  }
  bmalloc::api::isoDeallocate(v21, v13);
  v19 = *((_QWORD *)this + 17);
  v20 = (uint64_t *)(v9 + 136);
  if (v19)
    goto LABEL_24;
LABEL_25:
  v22 = (bmalloc::api *)*v20;
  *v20 = v19;
  if (v22)
  {
    if (*((_DWORD *)v22 + 2) == 1)
    {
      if (*(_QWORD *)v22)
      {
        *(_QWORD *)(*(_QWORD *)v22 + 8) = 3;
        *(_QWORD *)v22 = 0;
      }
      bmalloc::api::isoDeallocate(v22, v13);
    }
    else
    {
      --*((_DWORD *)v22 + 2);
    }
  }
  if (!*((_BYTE *)this + 152))
  {
    result = *((_QWORD *)this + 18);
    if (!result)
    {
      v26 = vcvtq_f64_u64(*(uint64x2_t *)((char *)this + 72));
      v28 = vcvtq_f64_u64(*(uint64x2_t *)((char *)this + 88));
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      *(float64x2_t *)(result + 16) = v28;
      *(float64x2_t *)(result + 32) = v26;
      v24 = (bmalloc::api *)*((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = result;
      if (v24)
      {
        if (*((_DWORD *)v24 + 2) == 1)
        {
          if (*(_QWORD *)v24)
          {
            *(_QWORD *)(*(_QWORD *)v24 + 8) = 3;
            *(_QWORD *)v24 = 0;
          }
          bmalloc::api::isoDeallocate(v24, v13);
          result = *((_QWORD *)this + 18);
          v23 = (bmalloc::api **)(v9 + 144);
          if (!result)
            goto LABEL_36;
          goto LABEL_35;
        }
        --*((_DWORD *)v24 + 2);
      }
    }
    v23 = (bmalloc::api **)(v9 + 144);
LABEL_35:
    ++*(_DWORD *)(result + 8);
    goto LABEL_36;
  }
  result = 0;
  v23 = (bmalloc::api **)(v9 + 144);
LABEL_36:
  v25 = *v23;
  *v23 = (bmalloc::api *)result;
  if (v25)
  {
    if (*((_DWORD *)v25 + 2) == 1)
    {
      if (*(_QWORD *)v25)
      {
        *(_QWORD *)(*(_QWORD *)v25 + 8) = 3;
        *(_QWORD *)v25 = 0;
      }
      result = bmalloc::api::isoDeallocate(v25, v13);
    }
    else
    {
      --*((_DWORD *)v25 + 2);
    }
  }
  v5 = 0;
  *(_BYTE *)(v9 + 152) = *((_BYTE *)this + 152);
  *(_QWORD *)a3 = v9;
LABEL_40:
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

bmalloc::api *WebCore::WebCodecsVideoFrame::close(WebCore::WebCodecsVideoFrame *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  bmalloc::api *result;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  *((_BYTE *)this + 152) = 1;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 36) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v7 = (bmalloc::api *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
    {
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
        *(_QWORD *)v7 = 0;
      }
      bmalloc::api::isoDeallocate(v7, a2);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
  result = (bmalloc::api *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      if (*(_QWORD *)result)
      {
        *(_QWORD *)(*(_QWORD *)result + 8) = 3;
        *(_QWORD *)result = 0;
      }
      return (bmalloc::api *)bmalloc::api::isoDeallocate(result, a2);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::ChangeVersionWrapper::performPreflight(WebCore::ChangeVersionWrapper *this, WebCore::SQLTransaction *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  sqlite3 *v7;
  unsigned int v8;
  sqlite3 *v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v3 = *((_QWORD *)a2 + 3);
  v30 = 0;
  if ((WebCore::Database::getVersionFromDatabase((WebCore::Database *)v3, &v30, 1) & 1) == 0)
  {
    v7 = *(sqlite3 **)(v3 + 104);
    if (v7)
    {
      v8 = sqlite3_errcode(v7);
      v9 = *(sqlite3 **)(v3 + 104);
      if (v9)
      {
        v10 = sqlite3_errmsg(v9);
        goto LABEL_17;
      }
    }
    else
    {
      v8 = *(_DWORD *)(v3 + 148);
    }
    v16 = *(_QWORD *)(v3 + 152);
    if (v16)
      v10 = (const char *)(v16 + 16);
    else
      v10 = "database is not open";
LABEL_17:
    WebCore::SQLError::create(0, (uint64_t)"unable to read the current version", 35, v8, v10, &v29);
    v17 = v29;
    v29 = 0;
    v18 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v17;
    if (v18)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v18));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)v18);
        v26 = *(WTF::StringImpl **)(v18 + 8);
        *(_QWORD *)(v18 + 8) = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v5);
          else
            *(_DWORD *)v26 -= 2;
        }
        WTF::fastFree((WTF *)v18, v5);
      }
      v21 = v29;
      v29 = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr((unsigned int *)v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)v21));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)v21);
          v27 = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v5);
            else
              *(_DWORD *)v27 -= 2;
          }
          WTF::fastFree(v21, v5);
        }
      }
    }
    goto LABEL_23;
  }
  if ((WTF::equal(v30, *((const WTF::StringImpl **)this + 2), v4) & 1) != 0)
  {
    v6 = 1;
    goto LABEL_24;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = 0x200000001;
  WTF::String::isolatedCopy();
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v28 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v5);
        else
          *(_DWORD *)v28 -= 2;
      }
      WTF::fastFree((WTF *)v12, v5);
    }
  }
  v15 = v29;
  v29 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v5);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_23:
  v6 = 0;
LABEL_24:
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v5);
    else
      *(_DWORD *)v24 -= 2;
  }
  return v6;
}

uint64_t WebCore::Database::getVersionFromDatabase(WebCore::Database *this, WTF::StringImpl **a2, int a3)
{
  unint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char *v11;
  WTF *v12;
  char *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  WebCore::SQLiteDatabaseTracker *v20;
  int v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WebCore::SQLiteDatabaseTracker *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[2];
  sqlite3_stmt *v33;
  sqlite3_stmt *pStmt;
  int v35;

  v6 = atomic_load(&qword_1ECE82118);
  if (v6 != -1)
  {
    v33 = (sqlite3_stmt *)v31;
    v32[0] = &v33;
    std::__call_once(&qword_1ECE82118, v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::fullyQualifiedInfoTableName(void)::$_0 &&>>);
  }
  if (qword_1ECE82110)
    WebCore::fullyQualifiedInfoTableName(void)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
  v28 = (WTF::StringImpl *)qword_1ECE82110;
  v33 = (sqlite3_stmt *)"SELECT value FROM ";
  pStmt = (sqlite3_stmt *)19;
  v32[0] = " WHERE key = '";
  v32[1] = 15;
  v31[0] = "WebKitDatabaseVersionKey";
  v31[1] = 25;
  v30[0] = "';";
  v30[1] = 3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v33, (uint64_t *)&v28, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, &v29);
  v9 = v29;
  if (!v29)
    goto LABEL_52;
  v10 = v28;
  v28 = 0;
  if (!v10)
    goto LABEL_9;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_9:
    v11 = (char *)this + 160;
    *(_BYTE *)(*((_QWORD *)this + 20) + 8) &= ~1u;
    v12 = (WebCore::Database *)((char *)this + 96);
LABEL_10:
    v13 = (char *)*((_QWORD *)v9 + 1);
    v14 = *((unsigned int *)v9 + 1) | ((unint64_t)((*((_DWORD *)v9 + 4) >> 2) & 1) << 32);
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v10, v8);
  v9 = v29;
  v11 = (char *)this + 160;
  *(_BYTE *)(*((_QWORD *)this + 20) + 8) &= ~1u;
  v12 = (WebCore::Database *)((char *)this + 96);
  if (v9)
    goto LABEL_10;
  v13 = 0;
  v14 = 0x100000000;
LABEL_11:
  WebCore::SQLiteDatabase::prepareStatementSlow(v12, v13, v14, (uint64_t)&v33);
  v16 = v35;
  if (!v35)
  {
    v18 = (unsigned __int8 *)v33 + 32;
    if (__ldaxr((unsigned __int8 *)v33 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
LABEL_17:
      if (*((_BYTE *)v33 + 20) || (v20 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v20))
      {
        v21 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v20);
        v27 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v21 = (int)v27;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v27);
      }
      v22 = __ldxr(v18);
      if (v22 == 1)
      {
        if (!__stlxr(0, v18))
          goto LABEL_25;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_25:
      if (v21 == 101)
      {
        v24 = *a2;
        *a2 = 0;
        if (v24)
          goto LABEL_33;
        goto LABEL_35;
      }
      if (v21 != 100)
      {
        v17 = 0;
        goto LABEL_37;
      }
      if (!v35)
      {
        WebCore::SQLiteStatement::columnText(&v33, 0, v32);
        v23 = (WTF::StringImpl *)v32[0];
        v32[0] = 0;
        v24 = *a2;
        *a2 = v23;
        if (v24)
        {
          v25 = *(_DWORD *)v24 - 2;
          if (*(_DWORD *)v24 != 2)
          {
LABEL_34:
            *(_DWORD *)v24 = v25;
            goto LABEL_35;
          }
          WTF::StringImpl::destroy(v24, v15);
          v24 = (WTF::StringImpl *)v32[0];
          v32[0] = 0;
          if (!v24)
            goto LABEL_35;
LABEL_33:
          v25 = *(_DWORD *)v24 - 2;
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::destroy(v24, v15);
            goto LABEL_35;
          }
          goto LABEL_34;
        }
LABEL_35:
        v17 = 1;
LABEL_37:
        v16 = v35;
        goto LABEL_38;
      }
      result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_52:
      __break(0xC471u);
      return result;
    }
    MEMORY[0x19AEA534C](v18);
    goto LABEL_17;
  }
  v17 = 0;
LABEL_38:
  if (v16 != -1)
    ((void (*)(_QWORD *, sqlite3_stmt **))off_1E336DB00[v16])(v32, &v33);
  if ((v17 & a3) == 1)
    WebCore::Database::setCachedVersion(this, (const WTF::String *)a2);
  *(_BYTE *)(*(_QWORD *)v11 + 8) |= 1u;
  v26 = v29;
  v29 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v15);
    else
      *(_DWORD *)v26 -= 2;
  }
  return v17;
}

WTF::StringImpl *WebCore::SQLError::create@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, const char *a5@<X4>, _QWORD *a6@<X8>)
{
  size_t v12;
  WTF::StringImpl *result;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  unsigned int v19;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];

  if (a5)
    v12 = strlen(a5);
  else
    v12 = 0;
  v22[0] = a2;
  v22[1] = a3;
  v21[0] = " (";
  v21[1] = 3;
  v20[0] = a5;
  v20[1] = v12;
  v19 = a4;
  v18 = 32;
  v17 = 41;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>((uint64_t)v22, (uint64_t)v21, &v19, &v18, (uint64_t)v20, &v17, &v16);
  if (v16)
  {
    v14 = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = 1;
    v14[1] = a1;
    WTF::String::isolatedCopy();
    *a6 = v14;
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ChangeVersionWrapper::performPostflight(WebCore::ChangeVersionWrapper *this, WebCore::SQLTransaction *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  sqlite3 *v9;
  unsigned int v10;
  sqlite3 *v11;
  const char *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v3 = *((_QWORD *)a2 + 3);
  v4 = WebCore::Database::setVersionInDatabase((WebCore::Database *)v3, (WebCore::ChangeVersionWrapper *)((char *)this + 24), 1u);
  if ((v4 & 1) == 0)
  {
    v9 = *(sqlite3 **)(v3 + 104);
    if (v9)
    {
      v10 = sqlite3_errcode(v9);
      v11 = *(sqlite3 **)(v3 + 104);
      if (v11)
      {
        v12 = sqlite3_errmsg(v11);
        goto LABEL_12;
      }
    }
    else
    {
      v10 = *(_DWORD *)(v3 + 148);
    }
    v13 = *(_QWORD *)(v3 + 152);
    if (v13)
      v12 = (const char *)(v13 + 16);
    else
      v12 = "database is not open";
LABEL_12:
    WebCore::SQLError::create(0, (uint64_t)"unable to set new version in database", 38, v10, v12, &v26);
    v15 = v26;
    v26 = 0;
    v16 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v15;
    if (v16)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v16);
        v24 = *(WTF::StringImpl **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v14);
          else
            *(_DWORD *)v24 -= 2;
        }
        WTF::fastFree((WTF *)v16, v14);
      }
      v19 = v26;
      v26 = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr((unsigned int *)v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)v19));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)v19);
          v25 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v14);
            else
              *(_DWORD *)v25 -= 2;
          }
          WTF::fastFree(v19, v14);
        }
      }
    }
    return v4;
  }
  WTF::String::isolatedCopy();
  v6 = v26;
  v26 = 0;
  v7 = *(WTF::StringImpl **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v6;
  if (v7)
  {
    v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      v7 = v26;
      v26 = 0;
      if (!v7)
        return v4;
      v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v23);
        return v4;
      }
    }
    *(_DWORD *)v7 = v8;
  }
  return v4;
}

uint64_t WebCore::Database::setVersionInDatabase(WebCore::Database *this, const WTF::String *a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char *v11;
  WTF *v12;
  char *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  _BOOL8 v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  WebCore::SQLiteDatabaseTracker *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  WebCore::SQLiteDatabaseTracker *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[2];
  const char *v33;
  sqlite3_stmt *pStmt;
  int v35;

  v6 = atomic_load(&qword_1ECE82118);
  if (v6 != -1)
  {
    v33 = (const char *)v31;
    v32[0] = &v33;
    std::__call_once(&qword_1ECE82118, v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::fullyQualifiedInfoTableName(void)::$_0 &&>>);
  }
  if (qword_1ECE82110)
    WebCore::fullyQualifiedInfoTableName(void)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
  v28 = (WTF::StringImpl *)qword_1ECE82110;
  v33 = "INSERT INTO ";
  pStmt = (sqlite3_stmt *)13;
  v32[0] = " (key, value) VALUES ('";
  v32[1] = 24;
  v31[0] = "WebKitDatabaseVersionKey";
  v31[1] = 25;
  v30[0] = "', ?);";
  v30[1] = 7;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)&v33, (uint64_t *)&v28, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, &v29);
  v9 = v29;
  if (!v29)
    goto LABEL_43;
  v10 = v28;
  v28 = 0;
  if (!v10)
    goto LABEL_9;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_9:
    v11 = (char *)this + 160;
    *(_BYTE *)(*((_QWORD *)this + 20) + 8) &= ~1u;
    v12 = (WebCore::Database *)((char *)this + 96);
LABEL_10:
    v13 = (char *)*((_QWORD *)v9 + 1);
    v14 = *((unsigned int *)v9 + 1) | ((unint64_t)((*((_DWORD *)v9 + 4) >> 2) & 1) << 32);
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v10, v8);
  v9 = v29;
  v11 = (char *)this + 160;
  *(_BYTE *)(*((_QWORD *)this + 20) + 8) &= ~1u;
  v12 = (WebCore::Database *)((char *)this + 96);
  if (v9)
    goto LABEL_10;
  v13 = 0;
  v14 = 0x100000000;
LABEL_11:
  WebCore::SQLiteDatabase::prepareStatementSlow(v12, v13, v14, (uint64_t)&v33);
  v16 = v35;
  if (!v35)
  {
    v18 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v19 = *(char **)(v18 + 8);
      v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v19 = 0;
      v20 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v33, 1, v19, v20);
    if (!v35)
    {
      v21 = (unsigned __int8 *)(v33 + 32);
      if (__ldaxr((unsigned __int8 *)v33 + 32))
      {
        __clrex();
      }
      else if (!__stxr(1u, v21))
      {
LABEL_20:
        if (v33[20] || (v23 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v23))
        {
          v24 = sqlite3_step(pStmt);
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v23);
          v27 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
          v24 = (int)v27;
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v27);
        }
        v25 = __ldxr(v21);
        if (v25 == 1)
        {
          if (!__stlxr(0, v21))
            goto LABEL_28;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_28:
        v17 = v24 == 101;
        v16 = v35;
        goto LABEL_29;
      }
      MEMORY[0x19AEA534C](v21);
      goto LABEL_20;
    }
    result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_43:
    __break(0xC471u);
    return result;
  }
  v17 = 0;
LABEL_29:
  if (v16 != -1)
    ((void (*)(_QWORD *, const char **))off_1E336DB00[v16])(v32, &v33);
  if (v17 & a3)
    WebCore::Database::setCachedVersion(this, a2);
  *(_BYTE *)(*(_QWORD *)v11 + 8) |= 1u;
  v26 = v29;
  v29 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v15);
    else
      *(_DWORD *)v26 -= 2;
  }
  return v17;
}

WTF::StringImpl *WebCore::ChangeVersionWrapper::handleCommitFailedAfterPostflight(WebCore::ChangeVersionWrapper *this, WebCore::Database **a2)
{
  return WebCore::Database::setCachedVersion(a2[3], (WebCore::ChangeVersionWrapper *)((char *)this + 16));
}

WTF::StringImpl *WebCore::Database::setCachedVersion(WebCore::Database *this, const WTF::String *a2)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  int v7;
  _BYTE v8[24];
  WTF::StringImpl *v9;
  int v10;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_149))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_149))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_149);
LABEL_5:
  v10 = *((_DWORD *)this + 22);
  if ((byte_1ECE820FB & 1) == 0)
  {
    qword_1ECE82108 = 0;
    byte_1ECE820FB = 1;
  }
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    WTF::String::isolatedCopy();
  else
    v9 = 0;
  WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int const&,WTF::String>((uint64_t)v8, (WTF::StringImpl *)&v10, (uint64_t *)&v9);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  v7 = __ldxr((unsigned __int8 *)&_MergedGlobals_149);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_149))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_149);
}

unsigned __int8 *WebCore::DatabaseManager::fullPathForDatabase@<X0>(unsigned __int8 *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  const WebCore::SecurityOriginData *v23;
  unsigned __int8 *v24;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;

  v8 = this;
  v10 = this + 9;
  if (__ldaxr(this + 9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 9);
LABEL_5:
  v12 = (uint64_t *)*((_QWORD *)v8 + 2);
  if (v12)
  {
    v13 = *((unsigned int *)v12 - 1);
    v14 = &v12[v13];
    if (*((_DWORD *)v12 - 3))
    {
      v15 = v12;
      if ((_DWORD)v13)
      {
        v16 = 8 * v13;
        v15 = v12;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          ++v15;
          v16 -= 8;
          if (!v16)
          {
            v15 = v14;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v15 = &v12[v13];
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = &v12[v13];
  if (v12)
  {
LABEL_12:
    v17 = &v12[*((unsigned int *)v12 - 1)];
    goto LABEL_17;
  }
  v17 = 0;
LABEL_17:
  if (v17 == v15)
  {
LABEL_26:
    v20 = 1;
  }
  else
  {
    while (1)
    {
      v18 = *v15;
      this = (unsigned __int8 *)WTF::equal(*(WTF **)(*v15 + 16), *a3, (const WTF::StringImpl *)a3);
      if ((_DWORD)this)
      {
        this = (unsigned __int8 *)WebCore::SecurityOrigin::equal(*(const WTF::StringImpl ***)(v18 + 8), a2);
        if ((_DWORD)this)
          break;
      }
      v19 = v15 + 1;
      v15 = v14;
      if (v19 != v14)
      {
        v15 = v19;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          if (++v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
      if (v15 == v17)
        goto LABEL_26;
    }
    v20 = 0;
    *a5 = 0;
  }
  v21 = __ldxr(v10);
  if (v21 == 1)
  {
    if (!__stlxr(0, v10))
    {
      if (!v20)
        return this;
      goto LABEL_34;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (!v20)
    return this;
LABEL_34:
  v22 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v22 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_BYTE *)(v22 + 16) = 0;
    *(_DWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 32) = 0;
    *(_DWORD *)(v22 + 40) = -1;
    *(_WORD *)(v22 + 44) = 0;
    *(_BYTE *)(v22 + 46) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    *(_BYTE *)(v22 + 56) = 0;
    *(_QWORD *)(v22 + 64) = 0;
    *(_BYTE *)(v22 + 72) = 0;
    *(_DWORD *)(v22 + 76) = 1;
    *(_QWORD *)(v22 + 80) = 0;
    *(_QWORD *)(v22 + 88) = 0;
    WTF::String::isolatedCopy();
    *(_OWORD *)(v22 + 120) = 0u;
    *(_OWORD *)(v22 + 104) = 0u;
    WebCore::staticTracker = v22;
  }
  v23 = (const WebCore::SecurityOriginData *)(a2 + 1);
  v24 = (unsigned __int8 *)(v22 + 16);
  if (__ldaxr((unsigned __int8 *)(v22 + 16)))
  {
    __clrex();
LABEL_39:
    MEMORY[0x19AEA534C](v22 + 16);
    goto LABEL_40;
  }
  if (__stxr(1u, v24))
    goto LABEL_39;
LABEL_40:
  WebCore::DatabaseTracker::fullPathForDatabaseNoLock((WebCore::DatabaseTracker *)v22, v23, (const WTF::String *)a3, a4, &v28);
  WTF::String::isolatedCopy();
  this = (unsigned __int8 *)v28;
  v28 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v26);
    else
      *(_DWORD *)this -= 2;
  }
  v27 = __ldxr(v24);
  if (v27 == 1)
  {
    if (!__stlxr(0, v24))
      return this;
  }
  else
  {
    __clrex();
  }
  return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v22 + 16));
}

void WebCore::Database::~Database(WebCore::Database *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  WTF *v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int **v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  void *v46;
  _QWORD *v47;

  if ((WTF::isMainThread(this) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    v4 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E336DC08;
    v5[1] = v3;
    v5[2] = v4;
    v47 = v5;
    WTF::callOnMainThread();
    if (v47)
      (*(void (**)(_QWORD *))(*v47 + 8))(v47);
  }
  v6 = *((_QWORD *)this + 21);
  v7 = *((_QWORD *)this + 22);
  v8 = (WTF *)*((_QWORD *)this + 23);
  v9 = (unsigned int **)((char *)v8 + 8 * v7);
  if (v6 <= v7)
  {
    if (v6 == v7)
      goto LABEL_24;
    v14 = (unsigned int **)((char *)v8 + 8 * v6);
    do
    {
      v15 = *v14;
      *v14 = 0;
      if (v15)
      {
        v16 = v15 + 4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v15 + 4);
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      ++v14;
    }
    while (v14 != v9);
  }
  else
  {
    if (v7)
    {
      do
      {
        v10 = *(unsigned int **)v8;
        *(_QWORD *)v8 = 0;
        if (v10)
        {
          v11 = v10 + 4;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v10 + 4);
            (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
          }
        }
        v8 = (WTF *)((char *)v8 + 8);
      }
      while (v8 != (WTF *)v9);
      v8 = (WTF *)*((_QWORD *)this + 23);
      v6 = *((_QWORD *)this + 21);
    }
    v19 = *((unsigned int *)this + 48);
    if (v6 != v19)
    {
      v37 = (unsigned int **)((char *)v8 + 8 * v19);
      v38 = (unsigned int **)((char *)v8 + 8 * v6);
      do
      {
        v39 = *v38;
        *v38 = 0;
        if (v39)
        {
          v40 = v39 + 4;
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, v39 + 4);
            (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
          }
        }
        ++v38;
      }
      while (v38 != v37);
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 23);
LABEL_24:
  if (v8)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v8, v2);
  }
  v20 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v20)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v20, (WTF::StringImpl *)v2);
  WebCore::SQLiteDatabase::close((WebCore::Database *)((char *)this + 96));
  v22 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, v21);
    else
      --*(_DWORD *)v22;
  }
  v23 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::Thread::~Thread((WTF::Thread *)v23);
      WTF::fastFree(v43, v44);
    }
  }
  v26 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v26)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v26, (WTF::StringImpl *)v21);
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v31)
  {
    v32 = v31 + 6;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v31 + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v31);
      WTF::fastFree(v45, v46);
    }
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 3, (WTF::StringImpl *)v21);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 2, v35);
  v36 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v36)
  {
    if (*(_DWORD *)(v36 + 24) == 2)
    {
      if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v36);
    }
    else
    {
      *(_DWORD *)(v36 + 24) -= 2;
    }
  }
}

_QWORD *WebCore::Database::close(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  _QWORD *v7;
  int v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  int v13;

  v1 = this;
  v2 = *(_QWORD *)(this[4] + 32);
  v10 = 0;
  v11 = 0;
  v3 = (unsigned __int8 *)(v2 + 24);
  if (__ldaxr((unsigned __int8 *)(v2 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C](v2 + 24);
LABEL_5:
  v5 = *(unsigned __int8 *)(v2 + 64);
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v5)
        return this;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
  if (v5)
    return this;
LABEL_11:
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v7[1] = v1;
  v7[2] = &v10;
  *v7 = off_1E336D9E0;
  v12 = (uint64_t)v7;
  WebCore::DatabaseThread::scheduleImmediateTask(v2, &v12);
  this = (_QWORD *)v12;
  v12 = 0;
  if (this)
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  if (__ldaxr((unsigned __int8 *)&v10 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v10 + 1))
  {
    goto LABEL_17;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C]((char *)&v10 + 1);
LABEL_17:
  while (!(_BYTE)v10)
  {
    v12 = 0x7FF0000000000000;
    v13 = 0;
    this = (_QWORD *)WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v11, (unsigned __int8 *)&v10 + 1, (WTF::TimeWithDynamicClockType *)&v12);
  }
  v9 = __ldxr((unsigned __int8 *)&v10 + 1);
  if (v9 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v10 + 1));
  }
  if (__stlxr(0, (unsigned __int8 *)&v10 + 1))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v10 + 1));
  return this;
}

unsigned __int8 *WebCore::Database::performClose(WebCore::Database *this, WTF::StringImpl *a2)
{
  unsigned __int8 *v3;
  uint64_t i;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  unsigned __int8 *result;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  void *v28;

  v3 = (unsigned __int8 *)this + 200;
  if (__ldaxr((unsigned __int8 *)this + 200))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 200);
LABEL_5:
  for (i = *((_QWORD *)this + 21); i != *((_QWORD *)this + 22); i = *((_QWORD *)this + 21))
  {
    v7 = *((_QWORD *)this + 23);
    v8 = *(unsigned int **)(v7 + 8 * i);
    *(_QWORD *)(v7 + 8 * i) = 0;
    v9 = *((_QWORD *)this + 23);
    v10 = *(unsigned int **)(v9 + 8 * i);
    *(_QWORD *)(v9 + 8 * i) = 0;
    if (v10)
    {
      v11 = v10 + 4;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v10 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    v14 = *((_QWORD *)this + 21);
    if (v14 == *((unsigned int *)this + 48) - 1)
      v15 = 0;
    else
      v15 = v14 + 1;
    *((_QWORD *)this + 21) = v15;
    WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)(v8 + 52), a2);
    if (v8)
    {
      v16 = v8 + 4;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v8 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  *(_WORD *)((char *)this + 201) = 0;
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_26:
  WebCore::Database::closeDatabase((int *)this);
  do
    v19 = __ldaxr((unsigned int *)this);
  while (__stlxr(v19 + 1, (unsigned int *)this));
  v20 = *(_QWORD *)(*((_QWORD *)this + 4) + 32);
  v21 = (unsigned __int8 *)(v20 + 72);
  if (__ldaxr((unsigned __int8 *)(v20 + 72)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_32;
  }
  MEMORY[0x19AEA534C](v20 + 72);
LABEL_32:
  WTF::HashSet<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>((uint64_t *)(v20 + 80), (uint64_t)this);
  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
      goto LABEL_37;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v20 + 72));
LABEL_37:
  result = WebCore::DatabaseThread::unscheduleDatabaseTasks((unsigned __int8 *)v20, this);
  do
  {
    v25 = __ldaxr((unsigned int *)this);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)this));
  if (!v26)
  {
    atomic_store(1u, (unsigned int *)this);
    WebCore::Database::~Database(this);
    return (unsigned __int8 *)WTF::fastFree(v27, v28);
  }
  return result;
}

int *WebCore::Database::closeDatabase(int *this)
{
  int *v1;
  uint64_t v2;
  void *v3;
  int *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v44;

  if (*((_BYTE *)this + 92))
  {
    v1 = this;
    WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(this + 24));
    *((_BYTE *)v1 + 92) = 0;
    v2 = WebCore::staticTracker;
    if (!WebCore::staticTracker)
    {
      v2 = WTF::fastMalloc((WTF *)0x88);
      *(_BYTE *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_BYTE *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 32) = 0;
      *(_DWORD *)(v2 + 40) = -1;
      *(_WORD *)(v2 + 44) = 0;
      *(_BYTE *)(v2 + 46) = 0;
      *(_QWORD *)(v2 + 48) = 0;
      *(_BYTE *)(v2 + 56) = 0;
      *(_QWORD *)(v2 + 64) = 0;
      *(_BYTE *)(v2 + 72) = 0;
      *(_DWORD *)(v2 + 76) = 1;
      *(_QWORD *)(v2 + 80) = 0;
      *(_QWORD *)(v2 + 88) = 0;
      WTF::String::isolatedCopy();
      *(_OWORD *)(v2 + 120) = 0u;
      *(_OWORD *)(v2 + 104) = 0u;
      WebCore::staticTracker = v2;
    }
    this = (int *)WebCore::DatabaseTracker::removeOpenDatabase(v2, (WebCore::Database *)v1);
    if (__ldaxr((unsigned __int8 *)&_MergedGlobals_149))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_149))
    {
      goto LABEL_8;
    }
    this = (int *)MEMORY[0x19AEA534C](&_MergedGlobals_149);
LABEL_8:
    if ((byte_1ECE820FA & 1) != 0)
    {
      v5 = v1 + 22;
      if (qword_1ECE82100)
      {
        v6 = *(_DWORD *)(qword_1ECE82100 - 8);
        v7 = *v5;
        v8 = 9 * ((v7 + ~(v7 << 15)) ^ ((v7 + ~(v7 << 15)) >> 10));
        v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
        v10 = (v9 ^ HIWORD(v9)) & v6;
        v11 = *(_DWORD *)(qword_1ECE82100 + 16 * v10);
        if (v11 == *v5)
        {
LABEL_14:
          v13 = qword_1ECE82100 + 16 * v10;
        }
        else
        {
          v12 = 1;
          while (v11)
          {
            v10 = ((_DWORD)v10 + v12) & v6;
            v11 = *(_DWORD *)(qword_1ECE82100 + 16 * v10);
            ++v12;
            if (v11 == v7)
              goto LABEL_14;
          }
          v13 = qword_1ECE82100 + 16 * *(unsigned int *)(qword_1ECE82100 - 4);
        }
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      v13 = 0;
      qword_1ECE82100 = 0;
      byte_1ECE820FA = 1;
      v5 = v1 + 22;
    }
    v15 = (uint64_t *)(v13 + 8);
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v16 = *(_DWORD *)(v14 - 8);
      v17 = ((unint64_t)v1 + ~((_QWORD)v1 << 32)) ^ (((unint64_t)v1 + ~((_QWORD)v1 << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = *(int **)(v14 + 8 * v20);
      if (v21 != v1)
      {
        v22 = 1;
        while (v21)
        {
          v20 = ((_DWORD)v20 + v22) & v16;
          v21 = *(int **)(v14 + 8 * v20);
          ++v22;
          if (v21 == v1)
            goto LABEL_24;
        }
        v20 = *(unsigned int *)(v14 - 4);
      }
LABEL_24:
      if (v20 == *(_DWORD *)(v14 - 4))
        goto LABEL_88;
      *(_QWORD *)(v14 + 8 * v20) = -1;
      ++*(_DWORD *)(*v15 - 16);
      v23 = *v15;
      v24 = *v15 ? *(_DWORD *)(v23 - 12) - 1 : -1;
      *(_DWORD *)(v23 - 12) = v24;
      v14 = *v15;
      if (*v15)
      {
        v25 = *(_DWORD *)(v14 - 4);
        v26 = 6 * *(_DWORD *)(v14 - 12) < v25 && v25 >= 9;
        if (!v26
          || (this = (int *)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash((uint64_t *)(v13 + 8), v25 >> 1, 0), (v14 = *v15) != 0))
        {
LABEL_88:
          if (*(_DWORD *)(v14 - 12))
          {
LABEL_79:
            v44 = __ldxr((unsigned __int8 *)&_MergedGlobals_149);
            if (v44 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_149))
                return this;
            }
            else
            {
              __clrex();
            }
            return (int *)WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_149);
          }
        }
      }
    }
    if ((byte_1ECE820FA & 1) != 0)
    {
      if (qword_1ECE82100)
      {
        v27 = qword_1ECE82100 + 16 * *(unsigned int *)(qword_1ECE82100 - 4);
        if (v27 == v13)
          goto LABEL_57;
        goto LABEL_44;
      }
    }
    else
    {
      qword_1ECE82100 = 0;
      byte_1ECE820FA = 1;
    }
    if (!v13)
      goto LABEL_57;
    v27 = 0;
LABEL_44:
    if (v27 != v13)
    {
      *(_DWORD *)v13 = -1;
      if (v14)
        this = (int *)WTF::fastFree((WTF *)(v14 - 16), v3);
      v28 = qword_1ECE82100;
      ++*(_DWORD *)(qword_1ECE82100 - 16);
      if (v28)
        v29 = *(_DWORD *)(v28 - 12) - 1;
      else
        v29 = -1;
      *(_DWORD *)(v28 - 12) = v29;
      if (qword_1ECE82100)
      {
        v30 = *(_DWORD *)(qword_1ECE82100 - 4);
        if (6 * *(_DWORD *)(qword_1ECE82100 - 12) < v30 && v30 >= 9)
          this = (int *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v30 >> 1, 0);
      }
    }
LABEL_57:
    if ((byte_1ECE820FB & 1) != 0)
    {
      if (qword_1ECE82108)
      {
        v32 = *v5;
        v33 = *(_DWORD *)(qword_1ECE82108 - 8);
        v34 = 9 * ((v32 + ~(v32 << 15)) ^ ((v32 + ~(v32 << 15)) >> 10));
        v35 = (v34 ^ (v34 >> 6)) + ~((v34 ^ (v34 >> 6)) << 11);
        v36 = v33 & (v35 ^ HIWORD(v35));
        v37 = *(_DWORD *)(qword_1ECE82108 + 16 * v36);
        if (v37 != *v5)
        {
          v38 = 1;
          while (v37)
          {
            v36 = ((_DWORD)v36 + v38) & v33;
            v37 = *(_DWORD *)(qword_1ECE82108 + 16 * v36);
            ++v38;
            if (v37 == v32)
              goto LABEL_65;
          }
          v36 = *(unsigned int *)(qword_1ECE82108 - 4);
        }
LABEL_65:
        if (v36 != *(_DWORD *)(qword_1ECE82108 - 4))
        {
          v39 = qword_1ECE82108 + 16 * v36;
          *(_DWORD *)v39 = -1;
          this = *(int **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (this)
          {
            if (*this == 2)
              this = (int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v3);
            else
              *this -= 2;
          }
          v40 = qword_1ECE82108;
          ++*(_DWORD *)(qword_1ECE82108 - 16);
          if (v40)
            v41 = *(_DWORD *)(v40 - 12) - 1;
          else
            v41 = -1;
          *(_DWORD *)(v40 - 12) = v41;
          if (qword_1ECE82108)
          {
            v42 = *(_DWORD *)(qword_1ECE82108 - 4);
            if (6 * *(_DWORD *)(qword_1ECE82108 - 12) < v42 && v42 >= 9)
              this = (int *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v42 >> 1, 0);
          }
        }
      }
    }
    else
    {
      qword_1ECE82108 = 0;
      byte_1ECE820FB = 1;
    }
    goto LABEL_79;
  }
  return this;
}

uint64_t WebCore::Database::getCachedVersion(WebCore::Database *this)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t result;
  int v13;
  WTF::StringImpl *v14;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_149))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_149))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_149);
LABEL_5:
  if ((byte_1ECE820FB & 1) != 0)
  {
    v3 = (WTF::StringImpl *)qword_1ECE82108;
    if (qword_1ECE82108)
    {
      v4 = *(_DWORD *)(qword_1ECE82108 - 8);
      v5 = *((_DWORD *)this + 22);
      v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
      v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
      v8 = (v7 ^ HIWORD(v7)) & v4;
      v9 = *(_DWORD *)(qword_1ECE82108 + 16 * v8);
      if (v9 == v5)
      {
LABEL_11:
        v3 = *(WTF::StringImpl **)(qword_1ECE82108 + 16 * v8 + 8);
        if (v3)
          *(_DWORD *)v3 += 2;
      }
      else
      {
        v10 = 1;
        while (v9)
        {
          v8 = ((_DWORD)v8 + v10) & v4;
          v9 = *(_DWORD *)(qword_1ECE82108 + 16 * v8);
          ++v10;
          if (v9 == v5)
            goto LABEL_11;
        }
        v3 = 0;
      }
    }
  }
  else
  {
    v3 = 0;
    qword_1ECE82108 = 0;
    byte_1ECE820FB = 1;
  }
  v14 = v3;
  WTF::String::isolatedCopy();
  result = (uint64_t)v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      result = WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v13 = __ldxr((unsigned __int8 *)&_MergedGlobals_149);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_149))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_149);
}

uint64_t WebCore::Database::scheduleTransaction(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  _QWORD v21[3];

  v1 = this;
  if (!*(_BYTE *)(this + 202) || (v2 = *(_QWORD *)(this + 168), v2 == *(_QWORD *)(this + 176)))
  {
    *(_BYTE *)(this + 201) = 0;
    return this;
  }
  *(_BYTE *)(this + 201) = 1;
  v3 = *(_QWORD *)(this + 184);
  v4 = *(_QWORD *)(v3 + 8 * v2);
  *(_QWORD *)(v3 + 8 * v2) = 0;
  v5 = *(_QWORD *)(this + 184);
  v6 = *(unsigned int **)(v5 + 8 * v2);
  *(_QWORD *)(v5 + 8 * v2) = 0;
  if (v6)
  {
    v7 = v6 + 4;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = *(_QWORD *)(v1 + 168);
  if (v10 == *(unsigned int *)(v1 + 192) - 1)
    v11 = 0;
  else
    v11 = v10 + 1;
  *(_QWORD *)(v1 + 168) = v11;
  v12 = WTF::fastMalloc((WTF *)0x28);
  v13 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)v12 = off_1E336DA08;
  *(_QWORD *)(v12 + 8) = v13;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = v4;
  *(_BYTE *)(v12 + 32) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 32);
  v15 = (unsigned __int8 *)(v14 + 24);
  v18 = v12;
  LODWORD(v13) = __ldaxr((unsigned __int8 *)(v14 + 24));
  if ((_DWORD)v13)
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v14 + 24);
LABEL_16:
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(v14 + 32, &v18);
  v16 = atomic_load((unsigned __int8 *)(v14 + 25));
  if ((v16 & 1) != 0)
  {
    v20 = 0;
    v19[0] = v14 + 25;
    v19[1] = &v20;
    v21[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v21[1] = v21;
    v21[2] = v19;
    WTF::ParkingLot::unparkOneImpl();
  }
  v17 = __ldxr(v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)(v14 + 24));
  this = v18;
  v18 = 0;
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t WebCore::Database::scheduleTransactionStep(WebCore::Database *this, WebCore::SQLTransaction *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  _QWORD v15[3];

  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 32);
  v4 = WTF::fastMalloc((WTF *)0x28);
  v5 = (unsigned int *)((char *)a2 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *((_QWORD *)a2 + 3);
  *(_QWORD *)v4 = off_1E336DA08;
  *(_QWORD *)(v4 + 8) = v7;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 32) = 0;
  v8 = (unsigned __int8 *)(v3 + 24);
  v12 = v4;
  LODWORD(v7) = __ldaxr((unsigned __int8 *)(v3 + 24));
  if ((_DWORD)v7)
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3 + 24);
LABEL_7:
  WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>(v3 + 32, &v12);
  v9 = atomic_load((unsigned __int8 *)(v3 + 25));
  if ((v9 & 1) != 0)
  {
    v14 = 0;
    v13[0] = v3 + 25;
    v13[1] = &v14;
    v15[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v15[1] = v15;
    v15[2] = v13;
    WTF::ParkingLot::unparkOneImpl();
  }
  v10 = __ldxr(v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v8))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::Database::runTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char a6)
{
  unsigned __int8 *v12;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  WebCore::Database *v27;
  WebCore::Database *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  WTF *v49;
  void *v50;
  unsigned int *v51;
  WebCore::Database *v52;

  v12 = (unsigned __int8 *)(a1 + 200);
  if (__ldaxr((unsigned __int8 *)(a1 + 200)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 200);
LABEL_5:
  if (*(_BYTE *)(a1 + 202))
  {
    do
      v14 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v14 + 1, (unsigned int *)a1));
    v52 = (WebCore::Database *)a1;
    v15 = *a3;
    if (*a3)
    {
      v16 = (unsigned int *)(v15 + 16);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    v51 = (unsigned int *)v15;
    v18 = WTF::fastMalloc((WTF *)0xE8);
    v19.n128_f64[0] = WebCore::SQLTransaction::SQLTransaction(v18, (uint64_t *)&v52, a2, a4, (uint64_t *)&v51, a5, a6);
    v20 = *(_QWORD *)(a1 + 168);
    v21 = *(_QWORD *)(a1 + 176);
    if (v20)
    {
      if (v21 + 1 != v20)
        goto LABEL_32;
      LODWORD(v22) = *(_DWORD *)(a1 + 192);
    }
    else
    {
      v22 = *(unsigned int *)(a1 + 192);
      if (v21)
      {
        if (v21 != v22 - 1)
          goto LABEL_32;
      }
      else if ((_DWORD)v22)
      {
        goto LABEL_32;
      }
    }
    v29 = v22;
    v30 = ((unint64_t)v22 >> 2) + v22;
    if (v30 <= 0xF)
      v30 = 15;
    if (v30 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return;
    }
    v31 = *(char **)(a1 + 184);
    v32 = v30 + 1;
    v33 = (char *)WTF::fastMalloc((WTF *)(8 * (v30 + 1)));
    *(_DWORD *)(a1 + 192) = v32;
    *(_QWORD *)(a1 + 184) = v33;
    v35 = *(_QWORD *)(a1 + 168);
    v34 = *(_QWORD *)(a1 + 176);
    if (v35 > v34)
    {
      memcpy(v33, v31, 8 * v34);
      v36 = *(_QWORD *)(a1 + 168);
      v37 = v36 - v29 + *(unsigned int *)(a1 + 192);
      memcpy((void *)(*(_QWORD *)(a1 + 184) + 8 * v37), &v31[8 * v36], 8 * v29 - 8 * v36);
      *(_QWORD *)(a1 + 168) = v37;
      if (!v31)
        goto LABEL_32;
LABEL_29:
      if (*(char **)(a1 + 184) == v31)
      {
        *(_QWORD *)(a1 + 184) = 0;
        *(_DWORD *)(a1 + 192) = 0;
      }
      WTF::fastFree((WTF *)v31, v38);
      goto LABEL_32;
    }
    memcpy(&v33[8 * v35], &v31[8 * v35], 8 * v34 - 8 * v35);
    if (v31)
      goto LABEL_29;
LABEL_32:
    v39 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v39) = v18;
    if (v39 == *(unsigned int *)(a1 + 192) - 1)
      v40 = 0;
    else
      v40 = v39 + 1;
    *(_QWORD *)(a1 + 176) = v40;
    v41 = v51;
    v51 = 0;
    if (v41)
    {
      v42 = v41 + 4;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, v41 + 4);
        (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v41 + 16))(v41, v19);
      }
    }
    v45 = (unsigned int *)v52;
    v52 = 0;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WebCore::Database::~Database((WebCore::Database *)v45);
        WTF::fastFree(v49, v50);
      }
    }
    if (!*(_BYTE *)(a1 + 201))
      WebCore::Database::scheduleTransaction(a1);
    goto LABEL_46;
  }
  if (*a3)
  {
    v23 = WebCore::Document::eventLoop(*(WebCore::Document **)(a1 + 8), (WTF::StringImpl *)a2);
    v24 = *a3;
    v25 = (unsigned int *)(v24 + 16);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
    v27 = (WebCore::Database *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v27 = &off_1E336DC30;
    *((_QWORD *)v27 + 1) = v24;
    v52 = v27;
    WebCore::EventLoopTaskGroup::queueTask(v23, 11, (uint64_t *)&v52);
    v28 = v52;
    v52 = 0;
    if (v28)
      (*(void (**)(WebCore::Database *))(*(_QWORD *)v28 + 8))(v28);
  }
LABEL_46:
  v48 = __ldxr(v12);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, v12))
LABEL_50:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
}

unsigned int *WebCore::Database::transaction(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint8_t buf[8];

  v8 = qword_1ECE7CA90;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1940B8000, v8, OS_LOG_TYPE_FAULT, "Database::transaction: Web SQL is deprecated.", buf, 2u);
  }
  v9 = *a2;
  *a2 = 0;
  v18 = 0;
  *(_QWORD *)buf = v9;
  WebCore::Database::runTransaction(a1, (uint64_t *)buf, a3, a4, (uint64_t *)&v18, 0);
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  result = *(unsigned int **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    v15 = result + 4;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *WebCore::Database::readTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint8_t buf[8];

  v8 = qword_1ECE7CA90;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1940B8000, v8, OS_LOG_TYPE_FAULT, "Database::readTransaction: Web SQL is deprecated.", buf, 2u);
  }
  v9 = *a2;
  *a2 = 0;
  v18 = 0;
  *(_QWORD *)buf = v9;
  WebCore::Database::runTransaction(a1, (uint64_t *)buf, a3, a4, (uint64_t *)&v18, 1);
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  result = *(unsigned int **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    v15 = result + 4;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, result + 4);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WebCore::Database::incrementalVacuumIfNeeded(sqlite3 **this)
{
  sqlite3_int64 v2;
  uint64_t v3;
  unsigned int v4;
  sqlite3 *v5;
  size_t v6;
  const char *v7;
  sqlite3 *v8;
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  char v13;
  unsigned int v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)this);
  v2 = WebCore::SQLiteDatabase::freeSpaceSize((WebCore::SQLiteDatabase *)(this + 12));
  v3 = WebCore::SQLiteDatabase::totalSize((WebCore::SQLiteDatabase *)(this + 12));
  if (v3 > 10 * v2)
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
  v3 = WebCore::SQLiteDatabase::runIncrementalVacuumCommand((WebCore::SQLiteDatabase *)(this + 12));
  if (!(_DWORD)v3)
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
  v4 = v3;
  v5 = this[13];
  if (!v5)
  {
    v8 = this[19];
    if (v8)
      v7 = (char *)v8 + 16;
    else
      v7 = "database is not open";
    goto LABEL_9;
  }
  v6 = (size_t)sqlite3_errmsg(v5);
  v7 = (const char *)v6;
  if (v6)
LABEL_9:
    v6 = strlen(v7);
  v17[0] = "error vacuuming database";
  v17[1] = 25;
  v16[0] = " (";
  v16[1] = 3;
  v15[0] = v7;
  v15[1] = v6;
  v14 = v4;
  v13 = 32;
  v12 = 41;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>((uint64_t)v17, (uint64_t)v16, &v14, &v13, (uint64_t)v15, &v12, &v11);
  if (v11)
  {
    WebCore::Document::addConsoleMessage(this[1], 4, 2, &v11, 0);
    v3 = (uint64_t)v11;
    v11 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        v3 = WTF::StringImpl::destroy((WTF::StringImpl *)v3, v10);
      else
        *(_DWORD *)v3 -= 2;
    }
    return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v3);
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::Database::tableNames@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  int v8;
  _QWORD *v9;
  int v11;
  __int16 v12;
  char v13;
  uint64_t v14;
  int v15;

  v2 = this;
  *a2 = 0;
  a2[1] = 0;
  v12 = 0;
  v13 = 0;
  v4 = *(_QWORD *)(this[4] + 32);
  v5 = (unsigned __int8 *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)(v4 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C](v4 + 24);
LABEL_5:
  v7 = *(unsigned __int8 *)(v4 + 64);
  v8 = __ldxr(v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (v7)
        return this;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 24));
  if (v7)
    return this;
LABEL_11:
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E336DA30;
  v9[1] = v2;
  v9[2] = &v12;
  v9[3] = a2;
  v14 = (uint64_t)v9;
  WebCore::DatabaseThread::scheduleImmediateTask(v4, &v14);
  this = (_QWORD *)v14;
  v14 = 0;
  if (this)
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  if (__ldaxr((unsigned __int8 *)&v12 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v12 + 1))
  {
    goto LABEL_17;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C]((char *)&v12 + 1);
LABEL_17:
  while (!(_BYTE)v12)
  {
    v14 = 0x7FF0000000000000;
    v15 = 0;
    this = (_QWORD *)WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v13, (unsigned __int8 *)&v12 + 1, (WTF::TimeWithDynamicClockType *)&v14);
  }
  v11 = __ldxr((unsigned __int8 *)&v12 + 1);
  if (v11 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v12 + 1));
  }
  if (__stlxr(0, (unsigned __int8 *)&v12 + 1))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v12 + 1));
  return this;
}

uint64_t WebCore::Database::didCommitWriteTransaction(WebCore::Database *this)
{
  WebCore::Database *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  _BYTE v10[24];
  int v11;
  uint64_t v12;

  v1 = this;
  v12 = *MEMORY[0x1E0C80C00];
  v2 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v2 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = -1;
    *(_WORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 46) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_BYTE *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 76) = 1;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    this = (WebCore::Database *)WTF::String::isolatedCopy();
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    WebCore::staticTracker = v2;
  }
  if (WTF::isMainThread(this))
  {
    v3 = *((_QWORD *)v1 + 2);
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 4) + 32) + 8);
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5)
      v5 = WTF::Thread::initializeCurrentTLS(0);
    if (v4 != v5)
    {
      result = 777;
      __break(0xC471u);
      return result;
    }
    v3 = *((_QWORD *)v1 + 3);
  }
  v10[0] = 0;
  v11 = -1;
  v6 = *(unsigned int *)(v3 + 32);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v6])(&v9, v10, v3 + 8);
    v11 = v6;
  }
  WTF::String::isolatedCopy();
  WebCore::DatabaseTracker::scheduleNotifyDatabaseChanged((WebCore::DatabaseTracker *)v2, (const WebCore::SecurityOriginData *)v10, (const WTF::String *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  if (v11 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v11])(&v9, v10);
  return result;
}

BOOL WebCore::Database::didExceedQuota(WebCore::Database *this)
{
  WebCore::Database *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  WTF *v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  int v32;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41[3];
  int v42;
  uint64_t v43;

  v1 = this;
  v43 = *MEMORY[0x1E0C80C00];
  v2 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v2 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = -1;
    *(_WORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 46) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_BYTE *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 76) = 1;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    this = (WebCore::Database *)WTF::String::isolatedCopy();
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    WebCore::staticTracker = v2;
  }
  if (WTF::isMainThread(this))
  {
    v3 = *((_QWORD *)v1 + 2);
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 4) + 32) + 8);
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5)
      v5 = WTF::Thread::initializeCurrentTLS(0);
    if (v4 != v5)
    {
      __break(0xC471u);
      goto LABEL_83;
    }
    v3 = *((_QWORD *)v1 + 3);
  }
  LOBYTE(v41[0]) = 0;
  v42 = -1;
  v6 = *(unsigned int *)(v3 + 32);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v6])(&v40, v41, v3 + 8);
    v42 = v6;
  }
  v7 = (unsigned __int8 *)(v2 + 16);
  if (__ldaxr((unsigned __int8 *)(v2 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v2 + 16);
LABEL_15:
  v9 = (WTF *)WebCore::DatabaseTracker::quotaNoLock((WebCore::DatabaseTracker *)v2, (const WebCore::SecurityOriginData *)v41);
  v10 = v9;
  v11 = __ldxr(v7);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v7))
LABEL_19:
    v9 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 16));
  if (v42 != -1)
    v9 = (WTF *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v42])(&v40, v41);
  if (*((_QWORD *)v1 + 9) <= (unint64_t)v10)
  {
    *((_QWORD *)v1 + 9) = (char *)v10 + 5242880;
    v12 = WebCore::staticTracker;
    if (!WebCore::staticTracker)
    {
      v12 = WTF::fastMalloc((WTF *)0x88);
      *(_BYTE *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_DWORD *)(v12 + 40) = -1;
      *(_WORD *)(v12 + 44) = 0;
      *(_BYTE *)(v12 + 46) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_BYTE *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 64) = 0;
      *(_BYTE *)(v12 + 72) = 0;
      *(_DWORD *)(v12 + 76) = 1;
      *(_QWORD *)(v12 + 80) = 0;
      *(_QWORD *)(v12 + 88) = 0;
      v9 = (WTF *)WTF::String::isolatedCopy();
      *(_OWORD *)(v12 + 120) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      WebCore::staticTracker = v12;
    }
    if (WTF::isMainThread(v9))
    {
      v13 = *((_QWORD *)v1 + 2);
LABEL_31:
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      v16 = *(unsigned int *)(v13 + 32);
      if ((_DWORD)v16 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v16])(&v40, v41, v13 + 8);
        v42 = v16;
      }
      WebCore::DatabaseTracker::setDatabaseDetails((WebCore::DatabaseTracker *)v12, (const WebCore::SecurityOriginData *)v41, (WebCore::Database *)((char *)v1 + 48), (WebCore::Database *)((char *)v1 + 64), *((_QWORD *)v1 + 9));
      if (v42 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v42])(&v40, v41);
      goto LABEL_35;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 4) + 32) + 8);
    v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v15)
      v15 = WTF::Thread::initializeCurrentTLS(0);
    if (v14 == v15)
    {
      v13 = *((_QWORD *)v1 + 3);
      goto LABEL_31;
    }
    __break(0xC471u);
LABEL_83:
    JUMPOUT(0x195599658);
  }
LABEL_35:
  v17 = *((_QWORD *)v1 + 4);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v19 = *((_QWORD *)v1 + 9);
  v20 = v41[0];
  if (v41[0])
    *(_DWORD *)v41[0] += 2;
  v34 = v20;
  v21 = v40;
  if (!v40)
  {
    v35 = 0;
    v36 = v19;
    v37 = xmmword_1968DF3C0;
    v38 = 0x7FF8000000000000;
    goto LABEL_40;
  }
  v22 = *(_DWORD *)v40;
  *(_DWORD *)v40 += 2;
  v35 = v21;
  v36 = v19;
  v37 = xmmword_1968DF3C0;
  v38 = 0x7FF8000000000000;
  v40 = 0;
  if (v22)
  {
    *(_DWORD *)v21 = v22;
LABEL_40:
    v23 = v20;
    goto LABEL_41;
  }
  WTF::StringImpl::destroy(v21, v18);
  v23 = v41[0];
LABEL_41:
  v41[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v18);
    else
      *(_DWORD *)v23 -= 2;
  }
  WebCore::DatabaseContext::databaseExceededQuota(*(unsigned int **)(v17 + 8), (WTF::StringImpl *)&v39, &v34);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v24);
      if (!v20)
        goto LABEL_50;
      goto LABEL_48;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (!v20)
    goto LABEL_50;
LABEL_48:
  if (*(_DWORD *)v20 == 2)
    WTF::StringImpl::destroy(v20, v24);
  else
    *(_DWORD *)v20 -= 2;
LABEL_50:
  v25 = v39;
  v39 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      v25 = (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (WTF::isMainThread(v25))
  {
    v26 = *((_QWORD *)v1 + 2);
  }
  else
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 4) + 32) + 8);
    v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v28)
      v28 = WTF::Thread::initializeCurrentTLS(0);
    if (v27 != v28)
    {
      __break(0xC471u);
      JUMPOUT(0x195599678);
    }
    v26 = *((_QWORD *)v1 + 3);
  }
  LOBYTE(v41[0]) = 0;
  v42 = -1;
  v29 = *(unsigned int *)(v26 + 32);
  if ((_DWORD)v29 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v29])(&v40, v41, v26 + 8);
    v42 = v29;
  }
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_65;
  }
  MEMORY[0x19AEA534C](v2 + 16);
LABEL_65:
  v31 = WebCore::DatabaseTracker::quotaNoLock((WebCore::DatabaseTracker *)v2, (const WebCore::SecurityOriginData *)v41);
  v32 = __ldxr(v7);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_69;
  }
  if (__stlxr(0, v7))
LABEL_69:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v42 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v42])(&v40, v41);
  return v31 > (unint64_t)v10;
}

unsigned int *WebCore::DatabaseContext::databaseExceededQuota(unsigned int *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (result && (v3 = *((_QWORD *)result + 1)) != 0)
  {
    v4 = v3 - 96;
    v5 = *(unsigned __int8 *)(v3 + 178);
    if (*(_BYTE *)(v3 + 178))
    {
      if (v5 == 1 || v5 == 2)
      {
        v6 = 0;
        ++*(_DWORD *)(v3 + 216);
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v6 = 0;
      *(_DWORD *)(v3 - 264) += 2;
    }
  }
  else
  {
    v4 = 0;
    v6 = 1;
  }
  if (!*(_BYTE *)(v4 + 274))
  {
    *(_DWORD *)(v4 - 168) += 2;
    v7 = *(_QWORD *)(v4 + 336);
    if (v7)
    {
      a2 = *(WTF::StringImpl **)(v7 + 8);
      if (a2)
      {
        v8 = *((_QWORD *)a2 + 3);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            ++*(_DWORD *)v9;
            v10 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16);
            v11 = *a3;
            if (*a3)
              *(_DWORD *)v11 += 2;
            v16 = v11;
            v12 = a3[1];
            if (v12)
              *(_DWORD *)v12 += 2;
            v17 = v12;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 584))(v10);
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
            result = (unsigned int *)v16;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                result = (unsigned int *)WTF::StringImpl::destroy(v16, a2);
              else
                *(_DWORD *)v16 -= 2;
            }
            if (*(_DWORD *)v9 == 1)
            {
              WebCore::Page::~Page(v9);
              result = (unsigned int *)WTF::fastFree(v14, v15);
            }
            else
            {
              --*(_DWORD *)v9;
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  if ((v6 & 1) == 0)
  {
    v13 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v13 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v13 == 2)
      {
        return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DatabaseAuthorizer::addAllowedFunctions(WebCore::DatabaseAuthorizer *this)
{
  uint64_t *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *result;
  _QWORD v92[3];
  WTF::StringImpl *v93;

  v1 = (uint64_t *)((char *)this + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v3 = v93;
  v93 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v5 = v93;
  v93 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v7 = v93;
  v93 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v9 = v93;
  v93 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v11 = v93;
  v93 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v13 = v93;
  v93 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v15 = v93;
  v93 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v17 = v93;
  v93 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v19 = v93;
  v93 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v21 = v93;
  v93 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v23 = v93;
  v93 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v25 = v93;
  v93 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v27 = v93;
  v93 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v29 = v93;
  v93 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v31 = v93;
  v93 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v33 = v93;
  v93 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v35 = v93;
  v93 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v37 = v93;
  v93 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v39 = v93;
  v93 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v41 = v93;
  v93 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v43 = v93;
  v93 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v45 = v93;
  v93 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v44);
    else
      *(_DWORD *)v45 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v47 = v93;
  v93 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v46);
    else
      *(_DWORD *)v47 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v49 = v93;
  v93 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v48);
    else
      *(_DWORD *)v49 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v51 = v93;
  v93 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v50);
    else
      *(_DWORD *)v51 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v53 = v93;
  v93 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v55 = v93;
  v93 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v54);
    else
      *(_DWORD *)v55 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v57 = v93;
  v93 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v59 = v93;
  v93 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v58);
    else
      *(_DWORD *)v59 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v61 = v93;
  v93 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v60);
    else
      *(_DWORD *)v61 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v63 = v93;
  v93 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v62);
    else
      *(_DWORD *)v63 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v65 = v93;
  v93 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v64);
    else
      *(_DWORD *)v65 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v67 = v93;
  v93 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v66);
    else
      *(_DWORD *)v67 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v69 = v93;
  v93 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v68);
    else
      *(_DWORD *)v69 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v71 = v93;
  v93 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v70);
    else
      *(_DWORD *)v71 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v73 = v93;
  v93 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v72);
    else
      *(_DWORD *)v73 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v75 = v93;
  v93 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v74);
    else
      *(_DWORD *)v75 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = (WTF::StringImpl *)v92[0];
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v77 = v93;
  v93 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v76);
    else
      *(_DWORD *)v77 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v79 = v93;
  v93 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v78);
    else
      *(_DWORD *)v79 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v81 = v93;
  v93 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v80);
    else
      *(_DWORD *)v81 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v83 = v93;
  v93 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v82);
    else
      *(_DWORD *)v83 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v85 = v93;
  v93 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v84);
    else
      *(_DWORD *)v85 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v87 = v93;
  v93 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v86);
    else
      *(_DWORD *)v87 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  v89 = v93;
  v93 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, v88);
    else
      *(_DWORD *)v89 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v93, v1, (uint64_t)v92);
  result = v93;
  v93 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v90);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::DatabaseContext::~DatabaseContext(WebCore::DatabaseContext *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;

  v3 = *((_QWORD *)this + 4);
  if (!v3 || *((_BYTE *)this + 41))
    goto LABEL_15;
  *(_QWORD *)(v3 + 96) = 0;
  v4 = (unsigned __int8 *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)(v3 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3 + 24);
LABEL_7:
  *(_BYTE *)(v3 + 64) = 1;
  v6 = (unsigned __int8 *)(v3 + 25);
  v7 = atomic_load((unsigned __int8 *)(v3 + 25));
  if ((v7 & 1) != 0)
  {
    atomic_store(0, v6);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v6, a2);
  }
  v8 = __ldxr(v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
LABEL_14:
  *((_BYTE *)this + 41) = 1;
LABEL_15:
  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v9)
    v10 = v9 - 96;
  else
    v10 = 0;
  v11 = *(unsigned int **)(v10 + 168);
  if (v11)
  {
    *(_QWORD *)(v10 + 168) = 0;
    v12 = v11 + 6;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v11);
      WTF::fastFree(v20, v21);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WebCore::DatabaseThread::~DatabaseThread((WebCore::DatabaseThread *)v15, a2);
      WTF::fastFree(v18, v19);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::DatabaseContext::~DatabaseContext(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebCore::DatabaseContext::contextDestroyed(WebCore::DatabaseContext *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 4);
  if (v6 && !*((_BYTE *)this + 41))
  {
    *(_QWORD *)(v6 + 96) = 0;
    v7 = (unsigned __int8 *)(v6 + 24);
    if (__ldaxr((unsigned __int8 *)(v6 + 24)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v6 + 24);
LABEL_11:
    *(_BYTE *)(v6 + 64) = 1;
    v9 = (unsigned __int8 *)(v6 + 25);
    v10 = atomic_load((unsigned __int8 *)(v6 + 25));
    if ((v10 & 1) != 0)
    {
      atomic_store(0, v9);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v9, a2);
    }
    v11 = __ldxr(v7);
    if (v11 == 1)
    {
      if (!__stlxr(0, v7))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 24));
LABEL_18:
    *((_BYTE *)this + 41) = 1;
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v12)
    v13 = v12 - 96;
  else
    v13 = 0;
  result = *(unsigned int **)(v13 + 168);
  if (result)
  {
    *(_QWORD *)(v13 + 168) = 0;
    v15 = result + 6;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, result + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)result, a2);
      return (unsigned int *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

unsigned int *WebCore::DatabaseContext::stop(WebCore::DatabaseContext *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;

  v3 = *((_QWORD *)this + 4);
  if (!v3 || *((_BYTE *)this + 41))
    goto LABEL_15;
  *(_QWORD *)(v3 + 96) = 0;
  v4 = (unsigned __int8 *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)(v3 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3 + 24);
LABEL_7:
  *(_BYTE *)(v3 + 64) = 1;
  v6 = (unsigned __int8 *)(v3 + 25);
  v7 = atomic_load((unsigned __int8 *)(v3 + 25));
  if ((v7 & 1) != 0)
  {
    atomic_store(0, v6);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v6, a2);
  }
  v8 = __ldxr(v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
LABEL_14:
  *((_BYTE *)this + 41) = 1;
LABEL_15:
  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v9)
    v10 = v9 - 96;
  else
    v10 = 0;
  result = *(unsigned int **)(v10 + 168);
  if (result)
  {
    *(_QWORD *)(v10 + 168) = 0;
    v12 = result + 6;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, result + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)result, a2);
      return (unsigned int *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

uint64_t WebCore::DatabaseContext::stopDatabases(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v17;
  void *v18;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3 || *(_BYTE *)(a1 + 41))
  {
    v4 = 0;
    goto LABEL_16;
  }
  *(_QWORD *)(v3 + 96) = a2;
  v5 = (unsigned __int8 *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)(v3 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v3 + 24);
LABEL_8:
  *(_BYTE *)(v3 + 64) = 1;
  v7 = (unsigned __int8 *)(v3 + 25);
  v8 = atomic_load((unsigned __int8 *)(v3 + 25));
  if ((v8 & 1) != 0)
  {
    atomic_store(0, v7);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v7, a2);
  }
  v9 = __ldxr(v5);
  if (v9 == 1)
  {
    if (!__stlxr(0, v5))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
LABEL_15:
  v4 = 1;
  *(_BYTE *)(a1 + 41) = 1;
LABEL_16:
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v10)
    v11 = v10 - 96;
  else
    v11 = 0;
  v12 = *(unsigned int **)(v11 + 168);
  if (v12)
  {
    *(_QWORD *)(v11 + 168) = 0;
    v13 = v12 + 6;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v12, a2);
      WTF::fastFree(v17, v18);
    }
  }
  return v4;
}

uint64_t WebCore::DatabaseContext::allowDatabaseAccess(WebCore::DatabaseContext *this, WTF::StringImpl *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::ASCIICaseInsensitiveHash *v16;
  uint64_t *v17;
  int v18;
  char v20;
  char *v21;

  v3 = *((_QWORD *)this + 1);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = v4 - 96;
    v6 = *(unsigned __int8 *)(v4 + 178);
    if (*(_BYTE *)(v4 + 178))
    {
      if (v6 == 1 || v6 == 2)
      {
        v7 = 0;
        ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
      v7 = 0;
      *(_DWORD *)(v4 - 264) += 2;
    }
  }
  else
  {
    v5 = 0;
    v7 = 1;
  }
  v8 = *(unsigned __int8 *)(v5 + 274);
  if (*(_BYTE *)(v5 + 274))
    goto LABEL_23;
  *(_DWORD *)(v5 - 168) += 2;
  v9 = *(_QWORD *)(v5 + 336);
  if (!v9)
    goto LABEL_20;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_20;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    goto LABEL_20;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    goto LABEL_20;
  v13 = *(_QWORD *)(v12 + 1008);
  if ((v13 & 0x8000000000000000) == 0 || v13 == -1)
    goto LABEL_12;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v5, a2);
  v15 = *(unsigned int *)(v14 + 32);
  if ((_DWORD)v15 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v21 = &v20;
    v16 = (WTF::ASCIICaseInsensitiveHash *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v21, v14 + 8);
    if (!*(_QWORD *)v16)
    {
LABEL_20:
      v2 = 0;
      goto LABEL_21;
    }
    v17 = &qword_1EE2F8000;
    {
      if (!WebCore::schemesAllowingDatabaseAccessInPrivateBrowsing(void)::schemesAllowingDatabaseAccessInPrivateBrowsing
        || !WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::schemesAllowingDatabaseAccessInPrivateBrowsing(void)::schemesAllowingDatabaseAccessInPrivateBrowsing, v16))
      {
        goto LABEL_20;
      }
LABEL_12:
      v2 = 1;
      goto LABEL_21;
    }
  }
  v2 = 0;
  WebCore::schemesAllowingDatabaseAccessInPrivateBrowsing(void)::schemesAllowingDatabaseAccessInPrivateBrowsing = 0;
  *((_BYTE *)v17 + 1240) = 1;
LABEL_21:
  if (*(_DWORD *)(v5 - 168) == 2)
  {
    if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
  }
  else
  {
    *(_DWORD *)(v5 - 168) -= 2;
  }
LABEL_23:
  if ((v7 & 1) == 0)
  {
    v18 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v18 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v18 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  return (v8 != 0) | v2 & 1u;
}

double WebCore::DatabaseManager::initialize(WebCore::DatabaseManager *this, const WTF::String *a2)
{
  double result;
  uint64_t v3;

  WebCore::DatabaseManager::platformInitialize(this, a2);
  if (!WebCore::staticTracker)
  {
    v3 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
    *(_DWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 40) = -1;
    *(_WORD *)(v3 + 44) = 0;
    *(_BYTE *)(v3 + 46) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_BYTE *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 76) = 1;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    WTF::String::isolatedCopy();
    result = 0.0;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    WebCore::staticTracker = v3;
  }
  return result;
}

_QWORD *WebCore::DatabaseManager::setClient(_QWORD *result, uint64_t a2)
{
  uint64_t v3;

  *result = a2;
  v3 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v3 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
    *(_DWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 40) = -1;
    *(_WORD *)(v3 + 44) = 0;
    *(_BYTE *)(v3 + 46) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_BYTE *)(v3 + 72) = 0;
    *(_DWORD *)(v3 + 76) = 1;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    result = (_QWORD *)WTF::String::isolatedCopy();
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    WebCore::staticTracker = v3;
  }
  *(_QWORD *)(v3 + 104) = a2;
  return result;
}

uint64_t WebCore::DatabaseManager::tryToOpenDatabaseBackend(uint64_t result, _QWORD *a2, WTF::StringImpl **a3, int a4, const WTF::String *a5, unsigned int a6, char a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  const WebCore::SecurityOrigin *v38;
  const WebCore::SecurityOrigin *v39;
  WebCore::SecurityOrigin *v40;
  WTF::StringImpl *v41;
  const WebCore::SecurityOrigin *v42;
  const WebCore::SecurityOrigin *v43;
  WebCore::SecurityOrigin *v44;
  unsigned int *v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  const WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  WTF *v54;
  WTF::StringImpl *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  WebCore::SecurityOriginData *v63;
  _QWORD *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  char v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  WTF::StringImpl *v75;
  const WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  WTF *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  unsigned int v98;
  int *v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  char v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF *v130;
  uint64_t v131;
  _DWORD *v132;
  int v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  WTF **v139;
  WTF::StringImpl *v140;
  int v141;
  unsigned int v142;
  int v143;
  WTF *v144;
  uint64_t v145;
  int v146;
  int v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  WTF::StringImpl *v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  unsigned int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned __int8 *v181;
  int v183;
  int v184;
  unsigned int *v185;
  uint64_t v186;
  int v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  WTF *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WebCore::SecurityContext *v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  WTF *v202;
  void *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF *v206;
  uint64_t v207;
  WTF *v208;
  void *v209;
  WTF *v210;
  void *v211;
  WTF *v212;
  void *v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  uint64_t v216;
  sqlite3_int64 v218;
  uint64_t v220;
  WTF::StringImpl *v221;
  WebCore::Database *v223;
  WTF *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  char v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  char v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  char v239;
  int v240;
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  v8 = a2[66];
  if (!v8
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || (v10 = *(_QWORD *)(v9 + 24)) == 0
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || (v15 = *(_QWORD *)(v11 + 1008), v15 < 0) && v15 != -1)
  {
    *(_BYTE *)result = 14;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 1;
    return result;
  }
  v220 = result;
  v16 = a2[45];
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 24);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x30);
    v20 = v19;
    *(_DWORD *)(v19 + 24) = 1;
    v21 = (unsigned int *)(v19 + 24);
    v22 = a2[88];
    v23 = a2;
    if (v22)
    {
      v24 = *(_QWORD **)(v22 + 8);
      if (v24)
        v23 = v24;
      else
        v23 = a2;
    }
    *(_QWORD *)v19 = &off_1E33A18C0;
    *(_QWORD *)(v19 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v19, (WebCore::ScriptExecutionContext *)(v23 + 24));
    *(_QWORD *)v20 = &off_1E33A0540;
    *(_QWORD *)(v20 + 16) = 0;
    if (*((_BYTE *)v23 + 470))
    {
      __break(0xC471u);
      goto LABEL_326;
    }
    v232 = v20;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add(v23 + 40, &v232, (uint64_t)&v237);
    *(_QWORD *)v20 = &off_1E336D938;
    *(_QWORD *)(v20 + 32) = 0;
    *(_WORD *)(v20 + 40) = 0;
    v16 = v20;
    do
      v26 = __ldaxr(v21);
    while (__stlxr(v26 + 1, v21));
    v27 = (unsigned int *)a2[45];
    a2[45] = v20;
    if (v27)
    {
      v28 = v27 + 6;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v27 + 6);
        WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v27, v25);
        WTF::fastFree(v208, v209);
      }
    }
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v20);
  }
  LOBYTE(v232) = 0;
  v234 = 0;
  if (a8 == 1)
  {
    v32 = WebCore::staticTracker;
    if (!WebCore::staticTracker)
    {
      v32 = WTF::fastMalloc((WTF *)0x88);
      *(_BYTE *)v32 = 0;
      *(_QWORD *)(v32 + 8) = 0;
      *(_BYTE *)(v32 + 16) = 0;
      *(_DWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0;
      *(_DWORD *)(v32 + 40) = -1;
      *(_WORD *)(v32 + 44) = 0;
      *(_BYTE *)(v32 + 46) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_BYTE *)(v32 + 56) = 0;
      *(_QWORD *)(v32 + 64) = 0;
      *(_BYTE *)(v32 + 72) = 0;
      *(_DWORD *)(v32 + 76) = 1;
      *(_QWORD *)(v32 + 80) = 0;
      *(_QWORD *)(v32 + 88) = 0;
      WTF::String::isolatedCopy();
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      WebCore::staticTracker = v32;
    }
    WebCore::DatabaseTracker::retryCanEstablishDatabase((WebCore::DatabaseTracker *)v32, (WebCore::DatabaseContext *)v16, a3, a6, (uint64_t)&v229);
  }
  else
  {
    if (a8)
      goto LABEL_43;
    v31 = WebCore::staticTracker;
    if (!WebCore::staticTracker)
    {
      v31 = WTF::fastMalloc((WTF *)0x88);
      *(_BYTE *)v31 = 0;
      *(_QWORD *)(v31 + 8) = 0;
      *(_BYTE *)(v31 + 16) = 0;
      *(_DWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0;
      *(_DWORD *)(v31 + 40) = -1;
      *(_WORD *)(v31 + 44) = 0;
      *(_BYTE *)(v31 + 46) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_BYTE *)(v31 + 56) = 0;
      *(_QWORD *)(v31 + 64) = 0;
      *(_BYTE *)(v31 + 72) = 0;
      *(_DWORD *)(v31 + 76) = 1;
      *(_QWORD *)(v31 + 80) = 0;
      *(_QWORD *)(v31 + 88) = 0;
      WTF::String::isolatedCopy();
      *(_OWORD *)(v31 + 120) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      WebCore::staticTracker = v31;
    }
    WebCore::DatabaseTracker::canEstablishDatabase((WebCore::DatabaseTracker *)v31, (WebCore::DatabaseContext *)v16, a3, a6, &v229);
  }
  LOBYTE(v237) = 0;
  v239 = 0;
  if (v231)
  {
    LOBYTE(v237) = (_BYTE)v229;
    v33 = v230;
    v230 = 0;
    v238 = (uint64_t)v33;
    v239 = 1;
  }
  result = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v237, (uint64_t)&v232);
  if (v239)
  {
    result = v238;
    v238 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v231)
  {
    result = (uint64_t)v230;
    v230 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v234)
  {
LABEL_43:
    v223 = (WebCore::Database *)WTF::fastMalloc((WTF *)0xD0);
    *(_DWORD *)v223 = 1;
    v37 = *(_QWORD *)(v16 + 8);
    if (v37)
    {
      v37 = *(_QWORD *)(v37 + 8);
      if (v37)
      {
        if (*(_BYTE *)(v37 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19559C288);
        }
        v37 -= 288;
      }
    }
    v218 = a6;
    *(_DWORD *)(v37 + 24) += 2;
    *((_QWORD *)v223 + 1) = v37;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v37 + 192), v36);
    v39 = v38;
    v40 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
    *((_QWORD *)v223 + 2) = WebCore::SecurityOrigin::SecurityOrigin(v40, v39);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)v223 + 1) + 192), v41);
    v43 = v42;
    v44 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
    *((_QWORD *)v223 + 3) = WebCore::SecurityOrigin::SecurityOrigin(v44, v43);
    v45 = (unsigned int *)(v16 + 24);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
    *((_QWORD *)v223 + 4) = v16;
    *((_WORD *)v223 + 20) = 0;
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    WTF::String::isolatedCopy();
    *((_QWORD *)v223 + 9) = v218;
    {
      WebCore::DatabaseManager::singleton(void)::instance = 0;
      *(_QWORD *)&byte_1ECE88AF0 = 1;
      qword_1ECE88AF8 = 0;
    }
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)v223 + 1) + 192), v47);
    WebCore::DatabaseManager::fullPathForDatabase((unsigned __int8 *)&WebCore::DatabaseManager::singleton(void)::instance, v48, (const WTF::StringImpl **)v223 + 6, 1, (_QWORD *)v223 + 10);
    *((_WORD *)v223 + 46) = 0;
    *((_DWORD *)v223 + 24) = 0;
    *((_QWORD *)v223 + 13) = 0;
    *((_DWORD *)v223 + 28) = -1;
    *((_WORD *)v223 + 58) = 0;
    *((_BYTE *)v223 + 118) = 0;
    *((_QWORD *)v223 + 15) = 0;
    *((_BYTE *)v223 + 128) = 0;
    *((_QWORD *)v223 + 17) = 0;
    *((_BYTE *)v223 + 144) = 0;
    *((_DWORD *)v223 + 37) = 1;
    *((_QWORD *)v223 + 19) = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v49 = v237;
    v50 = WTF::fastMalloc((WTF *)0x20);
    v51 = v50;
    *(_DWORD *)v50 = 1;
    v52 = *(_BYTE *)(v50 + 8);
    *(_BYTE *)(v50 + 8) = v52 & 0xFE;
    if (v49)
    {
      *(_DWORD *)v49 += 2;
      v53 = *(_BYTE *)(v50 + 8);
      *(_QWORD *)(v50 + 16) = v49;
      *(_QWORD *)(v50 + 24) = 0;
      *(_BYTE *)(v50 + 8) = v53 & 0xF9;
      *(_DWORD *)(v50 + 4) = 0;
      v54 = WebCore::DatabaseAuthorizer::addAllowedFunctions((WebCore::DatabaseAuthorizer *)v50);
      *((_QWORD *)v223 + 20) = v51;
      if (*(_DWORD *)v49 == 2)
        v54 = (WTF *)WTF::StringImpl::destroy(v49, v55);
      else
        *(_DWORD *)v49 -= 2;
    }
    else
    {
      *(_QWORD *)(v50 + 16) = 0;
      *(_QWORD *)(v50 + 24) = 0;
      *(_BYTE *)(v50 + 8) = v52 & 0xF8;
      *(_DWORD *)(v50 + 4) = 0;
      v54 = WebCore::DatabaseAuthorizer::addAllowedFunctions((WebCore::DatabaseAuthorizer *)v50);
      *((_QWORD *)v223 + 20) = v51;
    }
    *((_WORD *)v223 + 100) = 0;
    *(_OWORD *)((char *)v223 + 184) = 0u;
    *(_OWORD *)((char *)v223 + 168) = 0u;
    *((_BYTE *)v223 + 202) = 1;
    if (__ldaxr((unsigned __int8 *)&_MergedGlobals_149))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_149))
    {
      goto LABEL_58;
    }
    v54 = (WTF *)MEMORY[0x19AEA534C](&_MergedGlobals_149);
LABEL_58:
    if (WTF::isMainThread(v54))
    {
      v57 = *((_QWORD *)v223 + 2);
    }
    else
    {
      v58 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v223 + 4) + 32) + 8);
      v59 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v59)
        v59 = WTF::Thread::initializeCurrentTLS(0);
      if (v58 != v59)
        goto LABEL_323;
      v57 = *((_QWORD *)v223 + 3);
    }
    LOBYTE(v237) = 0;
    v240 = -1;
    v60 = *(unsigned int *)(v57 + 32);
    if ((_DWORD)v60 != -1)
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v60])(&v229, &v237, v57 + 8);
      v240 = v60;
    }
    WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)&v237, &v235);
    v61 = *(unsigned int *)(v235 + 32);
    v216 = v235;
    if ((_DWORD)v61 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v62 = (uint64_t *)a3;
      goto LABEL_70;
    }
    v62 = (uint64_t *)a3;
    if ((_DWORD)v61 != -1)
    {
      v63 = (WebCore::SecurityOriginData *)(v235 + 8);
      v229 = (WTF::StringImpl *)&v236;
      v64 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v61])(&v229, v235 + 8);
      if (MEMORY[0x19AEA53F4](*v64, "file", 4) && *(_BYTE *)(v216 + 59))
        WTF::String::String(&v236, (uint64_t)"null", 5);
      else
        WebCore::SecurityOriginData::toString(v63, &v236);
LABEL_70:
      if ((byte_1ECE820F9 & 1) == 0)
      {
        *(_QWORD *)&dword_1ECE82128 = 0;
        qword_1ECE82120 = 0;
        *(_QWORD *)&dword_1ECE82130 = 0;
        byte_1ECE820F9 = 1;
      }
      v65 = v236;
      if (v236)
        *(_DWORD *)v236 += 2;
      v66 = *v62;
      if (v66)
        *(_DWORD *)v66 += 2;
      if (v65)
        v67 = *((_DWORD *)v65 + 1);
      else
        v67 = 0;
      v221 = v65;
      if (v66)
      {
        v68 = *(_DWORD *)(v66 + 4);
        if (v68 < 0)
          goto LABEL_324;
      }
      else
      {
        v68 = 0;
      }
      v69 = __OFADD__(v68, 1);
      v70 = v68 + 1;
      v71 = v69;
      if ((v67 & 0x80000000) == 0 && (v71 & 1) == 0)
      {
        v72 = (v67 + v70);
        if (!__OFADD__(v67, v70))
        {
          if (v221)
          {
            v73 = *((_DWORD *)v221 + 4);
            v74 = (v73 >> 2) & 1;
            if (v66 && (v73 & 4) != 0)
              goto LABEL_89;
          }
          else
          {
            if (v66)
            {
LABEL_89:
              v74 = (*(unsigned __int8 *)(v66 + 16) >> 2) & 1;
              goto LABEL_90;
            }
            v74 = 1;
          }
LABEL_90:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v72, v74, (uint64_t)v221, 47, v66, &v229);
          v77 = v229;
          if (v229)
          {
            v78 = dword_1ECE82128;
            v79 = &qword_1ECE82000;
            v214 = (WTF::StringImpl *)v66;
            v215 = v16;
            if (10 * (unint64_t)dword_1ECE8212C < 9
                                                                      * (unint64_t)dword_1ECE82128
              && (dword_1ECE82128 > (2 * dword_1ECE8212C) || !byte_1ECE82134))
            {
              goto LABEL_134;
            }
            if (dword_1ECE82128)
              v80 = 2 * dword_1ECE82128;
            else
              v80 = 8;
            v81 = (WTF *)qword_1ECE82120;
            qword_1ECE82120 = WTF::fastZeroedMalloc((WTF *)(16 * v80));
            dword_1ECE82128 = v80;
            v82 = (~(qword_1ECE82120 << 32) + qword_1ECE82120) ^ ((unint64_t)(~(qword_1ECE82120 << 32)
                                                                                   + qword_1ECE82120) >> 22);
            v83 = 9 * ((v82 + ~(v82 << 13)) ^ ((v82 + ~(v82 << 13)) >> 8));
            v84 = (v83 ^ (v83 >> 15)) + ~((v83 ^ (v83 >> 15)) << 27);
            dword_1ECE82130 = (v84 >> 31) ^ v84;
            byte_1ECE82134 = 0;
            if ((_DWORD)v78)
            {
              v85 = 0;
              v86 = &qword_1ECE82000;
              v224 = v81;
              v225 = v78;
              do
              {
                v87 = (WTF::StringImpl **)((char *)v81 + 16 * v85);
                v88 = *v87;
                if (*v87)
                {
                  v89 = dword_1ECE82128;
                  v90 = dword_1ECE82130;
                  v91 = *((_DWORD *)v88 + 4);
                  v227 = dword_1ECE82128;
                  v226 = v85;
                  if (v91 < 0x100)
                  {
                    v92 = WTF::StringImpl::hashSlowCase(v88);
                    v89 = v227;
                    v86 = &qword_1ECE82000;
                  }
                  else
                  {
                    v92 = v91 >> 8;
                  }
                  v93 = v89 - 1;
                  v94 = (v92 ^ v90) & (v89 - 1);
                  v95 = v86[36];
                  v96 = (WTF::StringImpl **)(v95 + 16 * v94);
                  v97 = *v96;
                  if (*v96)
                  {
                    v98 = 0;
                    v99 = (int *)((char *)v81 + 16 * v85 + 8);
                    do
                    {
                      v100 = *((_DWORD *)v97 + 4);
                      if (v100 < 0x100)
                      {
                        v101 = WTF::StringImpl::hashSlowCase(v97);
                        v89 = v227;
                        v86 = &qword_1ECE82000;
                      }
                      else
                      {
                        v101 = v100 >> 8;
                      }
                      v102 = (v94 + v89 - ((v101 ^ v90) & v93)) & v93;
                      if (v98 > v102)
                      {
                        v103 = *v87;
                        *v87 = 0;
                        v104 = *v99;
                        v105 = *v96;
                        *v96 = 0;
                        v106 = *v87;
                        *v87 = v105;
                        if (v106)
                        {
                          if (*(_DWORD *)v106 == 2)
                          {
                            WTF::StringImpl::destroy(v106, v75);
                            v89 = v227;
                            v86 = &qword_1ECE82000;
                          }
                          else
                          {
                            *(_DWORD *)v106 -= 2;
                          }
                        }
                        v107 = v95 + 16 * v94;
                        v109 = *(_DWORD *)(v107 + 8);
                        v108 = (_DWORD *)(v107 + 8);
                        *v99 = v109;
                        v110 = *v96;
                        *v96 = v103;
                        if (v110)
                        {
                          if (*(_DWORD *)v110 == 2)
                          {
                            WTF::StringImpl::destroy(v110, v75);
                            v89 = v227;
                            v86 = &qword_1ECE82000;
                          }
                          else
                          {
                            *(_DWORD *)v110 -= 2;
                          }
                        }
                        *v108 = v104;
                        v98 = v102;
                      }
                      v94 = ((_DWORD)v94 + 1) & v93;
                      ++v98;
                      v95 = v86[36];
                      v96 = (WTF::StringImpl **)(v95 + 16 * v94);
                      v97 = *v96;
                    }
                    while (*v96);
                  }
                  v111 = *v87;
                  *v87 = 0;
                  v112 = *v96;
                  *v96 = v111;
                  v81 = v224;
                  v78 = v225;
                  v85 = v226;
                  if (v112)
                  {
                    if (*(_DWORD *)v112 == 2)
                    {
                      WTF::StringImpl::destroy(v112, v75);
                      v86 = &qword_1ECE82000;
                    }
                    else
                    {
                      *(_DWORD *)v112 -= 2;
                    }
                  }
                  *(_DWORD *)(v95 + 16 * v94 + 8) = *((_DWORD *)v224 + 4 * v226 + 2);
                  v113 = *v87;
                  *v87 = 0;
                  if (v113)
                  {
                    if (*(_DWORD *)v113 == 2)
                    {
                      WTF::StringImpl::destroy(v113, v75);
                      v86 = &qword_1ECE82000;
                    }
                    else
                    {
                      *(_DWORD *)v113 -= 2;
                    }
                  }
                }
                else
                {
                  *v87 = 0;
                }
                ++v85;
              }
              while (v85 != v78);
            }
            else
            {
              v79 = &qword_1ECE82000;
              if (!v81)
              {
                LODWORD(v78) = 8;
                goto LABEL_133;
              }
            }
            WTF::fastFree(v81, v75);
            v79 = &qword_1ECE82000;
            LODWORD(v78) = dword_1ECE82128;
LABEL_133:
            v77 = v229;
LABEL_134:
            v114 = v78 - 1;
            v115 = dword_1ECE82130;
            v116 = *((_DWORD *)v77 + 4);
            if (v116 < 0x100)
            {
              v118 = WTF::StringImpl::hashSlowCase(v77);
              v79 = &qword_1ECE82000;
              v117 = v118;
            }
            else
            {
              v117 = v116 >> 8;
            }
            v119 = (v117 ^ v115) & v114;
            v120 = v79[36];
            v121 = v120 + 16 * v119;
            v122 = *(WTF **)v121;
            if (*(_QWORD *)v121)
            {
              v123 = 0;
              while (1)
              {
                v124 = *((_DWORD *)v122 + 4);
                if (v124 < 0x100)
                {
                  v125 = WTF::StringImpl::hashSlowCase(v122);
                  v79 = &qword_1ECE82000;
                }
                else
                {
                  v125 = v124 >> 8;
                }
                v126 = (v119 + v78 - ((v125 ^ v115) & v114)) & v114;
                if (v123 > v126)
                  break;
                if (v125 == v117)
                {
                  v127 = WTF::equal(*(WTF **)v121, v229, v76);
                  v79 = &qword_1ECE82000;
                  if ((v127 & 1) != 0)
                    goto LABEL_170;
                }
                v120 = v79[36];
                v119 = ((_DWORD)v119 + 1) & v114;
                ++v123;
                v121 = v120 + 16 * v119;
                v122 = *(WTF **)v121;
                if (!*(_QWORD *)v121)
                {
                  if (v123 >= 0x80)
                    byte_1ECE82134 = 1;
                  goto LABEL_148;
                }
              }
              if (v123 >= 0x80)
                byte_1ECE82134 = 1;
              v130 = *(WTF **)v121;
              v131 = v120 + 16 * v119;
              v133 = *(_DWORD *)(v131 + 8);
              v132 = (_DWORD *)(v131 + 8);
              v228 = v133;
              *(_QWORD *)v121 = 0;
              *(_QWORD *)(v121 + 8) = 0;
              v134 = v229;
              v229 = 0;
              v135 = *(WTF::StringImpl **)v121;
              *(_QWORD *)v121 = v134;
              if (v135)
              {
                if (*(_DWORD *)v135 == 2)
                {
                  WTF::StringImpl::destroy(v135, v75);
                  v79 = &qword_1ECE82000;
                }
                else
                {
                  *(_DWORD *)v135 -= 2;
                }
              }
              v136 = v78;
              *v132 = ++dword_1ECE820FC;
              v137 = ((_DWORD)v119 + 1) & v114;
              v138 = qword_1ECE82120;
              v139 = (WTF **)(qword_1ECE82120 + 16 * v137);
              v140 = *v139;
              if (*v139)
              {
                v141 = v228;
                do
                {
                  v142 = *((_DWORD *)v140 + 4);
                  if (v142 < 0x100)
                  {
                    v143 = WTF::StringImpl::hashSlowCase(v140);
                    v79 = &qword_1ECE82000;
                  }
                  else
                  {
                    v143 = v142 >> 8;
                  }
                  if (++v126 > (((_DWORD)v137 + v136 - ((v143 ^ v115) & v114)) & v114))
                  {
                    v144 = *v139;
                    v145 = v138 + 16 * v137;
                    v146 = *(_DWORD *)(v145 + 8);
                    *v139 = v130;
                    *(_DWORD *)(v145 + 8) = v141;
                    v141 = v146;
                    v130 = v144;
                    v126 = (v137 + v136 - ((v143 ^ v115) & v114)) & v114;
                  }
                  v137 = ((_DWORD)v137 + 1) & v114;
                  v138 = v79[36];
                  v139 = (WTF **)(v138 + 16 * v137);
                  v140 = *v139;
                }
                while (*v139);
              }
              else
              {
                v141 = v228;
              }
              *v139 = v130;
              *(_DWORD *)(v138 + 16 * v137 + 8) = v141;
            }
            else
            {
LABEL_148:
              v128 = v229;
              v229 = 0;
              v129 = *(WTF::StringImpl **)v121;
              *(_QWORD *)v121 = v128;
              if (v129)
              {
                if (*(_DWORD *)v129 == 2)
                  WTF::StringImpl::destroy(v129, v75);
                else
                  *(_DWORD *)v129 -= 2;
              }
              *(_DWORD *)(v120 + 16 * v119 + 8) = ++dword_1ECE820FC;
            }
            ++dword_1ECE8212C;
LABEL_170:
            v147 = *(_DWORD *)(v121 + 8);
            v148 = v229;
            v229 = 0;
            v16 = v215;
            if (v148)
            {
              if (*(_DWORD *)v148 == 2)
                WTF::StringImpl::destroy(v148, v75);
              else
                *(_DWORD *)v148 -= 2;
            }
            v149 = v221;
            if (v214)
            {
              if (*(_DWORD *)v214 == 2)
              {
                WTF::StringImpl::destroy(v214, v75);
                v149 = v221;
                if (!v221)
                  goto LABEL_179;
                goto LABEL_177;
              }
              *(_DWORD *)v214 -= 2;
            }
            if (!v221)
              goto LABEL_179;
LABEL_177:
            if (*(_DWORD *)v149 == 2)
              WTF::StringImpl::destroy(v149, v75);
            else
              *(_DWORD *)v149 -= 2;
LABEL_179:
            *((_DWORD *)v223 + 22) = v147;
            v150 = v236;
            v236 = 0;
            if (v150)
            {
              if (*(_DWORD *)v150 == 2)
                WTF::StringImpl::destroy(v150, v75);
              else
                *(_DWORD *)v150 -= 2;
            }
            v235 = 0;
            if (v216)
            {
              do
              {
                v151 = __ldaxr((unsigned int *)v216);
                v152 = v151 - 1;
              }
              while (__stlxr(v152, (unsigned int *)v216));
              if (!v152)
              {
                atomic_store(1u, (unsigned int *)v216);
                v204 = *(WTF::StringImpl **)(v216 + 48);
                *(_QWORD *)(v216 + 48) = 0;
                if (v204)
                {
                  if (*(_DWORD *)v204 == 2)
                    WTF::StringImpl::destroy(v204, v75);
                  else
                    *(_DWORD *)v204 -= 2;
                }
                v205 = *(WTF::StringImpl **)(v216 + 40);
                *(_QWORD *)(v216 + 40) = 0;
                if (v205)
                {
                  if (*(_DWORD *)v205 == 2)
                    WTF::StringImpl::destroy(v205, v75);
                  else
                    *(_DWORD *)v205 -= 2;
                }
                v206 = (WTF *)v216;
                v207 = *(unsigned int *)(v216 + 32);
                if ((_DWORD)v207 != -1)
                {
                  ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v207])(&v229, v216 + 8);
                  v206 = (WTF *)v216;
                }
                *((_DWORD *)v206 + 8) = -1;
                WTF::fastFree(v206, v75);
              }
            }
            if (v240 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v240])(&v229, &v237);
            if ((byte_1ECE820FA & 1) != 0)
            {
              v153 = qword_1ECE82100;
              if (qword_1ECE82100)
                goto LABEL_190;
            }
            else
            {
              qword_1ECE82100 = 0;
              byte_1ECE820FA = 1;
            }
            WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(8u, 0);
            v153 = qword_1ECE82100;
            if (!qword_1ECE82100)
            {
              v154 = 0;
LABEL_191:
              v155 = *((_DWORD *)v223 + 22);
              v156 = 9 * ((v155 + ~(v155 << 15)) ^ ((v155 + ~(v155 << 15)) >> 10));
              v157 = (((v156 ^ (v156 >> 6)) + ~((v156 ^ (v156 >> 6)) << 11)) ^ (((v156 ^ (v156 >> 6))
                                                                               + ~((v156 ^ (v156 >> 6)) << 11)) >> 16)) & v154;
              v158 = v153 + 16 * v157;
              v159 = *(_DWORD *)v158;
              if (*(_DWORD *)v158)
              {
                v75 = 0;
                v160 = 1;
                do
                {
                  if (v159 == v155)
                  {
                    v163 = v223;
                    goto LABEL_217;
                  }
                  if (v159 == -1)
                    v75 = (WTF::StringImpl *)v158;
                  v157 = (v157 + v160) & v154;
                  v158 = v153 + 16 * v157;
                  v159 = *(_DWORD *)v158;
                  ++v160;
                }
                while (*(_DWORD *)v158);
                if (!v75)
                  goto LABEL_199;
                *(_DWORD *)v75 = 0;
                *((_QWORD *)v75 + 1) = 0;
                --*(_DWORD *)(qword_1ECE82100 - 16);
                *(_DWORD *)v75 = *((_DWORD *)v223 + 22);
              }
              else
              {
LABEL_199:
                v161 = *(_QWORD *)(v158 + 8);
                *(_DWORD *)v158 = v155;
                *(_QWORD *)(v158 + 8) = 0;
                if (v161)
                  WTF::fastFree((WTF *)(v161 - 16), v75);
                v75 = (WTF::StringImpl *)v158;
              }
              if (qword_1ECE82100)
                v162 = *(_DWORD *)(qword_1ECE82100 - 12) + 1;
              else
                v162 = 1;
              *(_DWORD *)(qword_1ECE82100 - 12) = v162;
              if (qword_1ECE82100)
                v164 = *(_DWORD *)(qword_1ECE82100 - 12);
              else
                v164 = 0;
              v163 = v223;
              v165 = (*(_DWORD *)(qword_1ECE82100 - 16) + v164);
              v166 = *(unsigned int *)(qword_1ECE82100 - 4);
              if (v166 > 0x400)
              {
                if (v166 > 2 * v165)
                  goto LABEL_211;
              }
              else
              {
                if (3 * v166 > 4 * v165)
                {
LABEL_211:
                  v158 = (uint64_t)v75;
                  goto LABEL_217;
                }
                if (!(_DWORD)v166)
                {
                  v167 = 8;
                  goto LABEL_216;
                }
              }
              v167 = (_DWORD)v166 << (6 * *(_DWORD *)(qword_1ECE82100 - 12) >= (2 * v166));
LABEL_216:
              v158 = WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v167, (int *)v75);
LABEL_217:
              v229 = v163;
              result = (uint64_t)WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(v158 + 8), (uint64_t *)&v229, (uint64_t)&v237);
              v168 = __ldxr((unsigned __int8 *)&_MergedGlobals_149);
              if (v168 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_149))
                {
LABEL_222:
                  v169 = *((_QWORD *)v163 + 4);
                  v170 = *(_QWORD *)(v169 + 32);
                  if (!v170)
                  {
                    if (*(_BYTE *)(v169 + 40))
                    {
                      v170 = 0;
                    }
                    else
                    {
                      v171 = WTF::fastMalloc((WTF *)0x68);
                      *(_DWORD *)v171 = 1;
                      *(_BYTE *)(v171 + 4) = 0;
                      *(_OWORD *)(v171 + 32) = 0u;
                      *(_OWORD *)(v171 + 48) = 0u;
                      *(_BYTE *)(v171 + 64) = 0;
                      *(_BYTE *)(v171 + 72) = 0;
                      *(_QWORD *)(v171 + 80) = 0;
                      *(_QWORD *)(v171 + 8) = 0;
                      *(_QWORD *)(v171 + 16) = 0;
                      *(_WORD *)(v171 + 24) = 0;
                      v172 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v172 = 0;
                      *(_BYTE *)(v172 + 8) = 0;
                      *(_QWORD *)(v171 + 88) = v172;
                      *(_QWORD *)(v171 + 96) = 0;
                      do
                        v174 = __ldaxr((unsigned int *)v171);
                      while (__stlxr(v174 + 1, (unsigned int *)v171));
                      v175 = *(unsigned int **)(v171 + 16);
                      *(_QWORD *)(v171 + 16) = v171;
                      if (v175)
                      {
                        do
                        {
                          v176 = __ldaxr(v175);
                          v177 = v176 - 1;
                        }
                        while (__stlxr(v177, v175));
                        if (!v177)
                        {
                          atomic_store(1u, v175);
                          WebCore::DatabaseThread::~DatabaseThread((WebCore::DatabaseThread *)v175, v173);
                          WTF::fastFree(v210, v211);
                        }
                      }
                      v178 = *(unsigned int **)(v169 + 32);
                      *(_QWORD *)(v169 + 32) = v171;
                      if (v178)
                      {
                        do
                        {
                          v179 = __ldaxr(v178);
                          v180 = v179 - 1;
                        }
                        while (__stlxr(v180, v178));
                        if (!v180)
                        {
                          atomic_store(1u, v178);
                          WebCore::DatabaseThread::~DatabaseThread((WebCore::DatabaseThread *)v178, v173);
                          WTF::fastFree(v212, v213);
                        }
                      }
                      result = WebCore::DatabaseThread::start(*(_QWORD *)(v169 + 32));
                      v170 = *(_QWORD *)(*((_QWORD *)v223 + 4) + 32);
                    }
                  }
                  LOWORD(v236) = 0;
                  BYTE2(v236) = 0;
                  v181 = (unsigned __int8 *)(v170 + 24);
                  if (__ldaxr((unsigned __int8 *)(v170 + 24)))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, v181))
                  {
                    goto LABEL_240;
                  }
                  result = MEMORY[0x19AEA534C](v170 + 24);
LABEL_240:
                  v183 = *(unsigned __int8 *)(v170 + 64);
                  v184 = __ldxr(v181);
                  if (v184 == 1)
                  {
                    if (!__stlxr(0, v181))
                    {
                      if (v183)
                      {
LABEL_243:
                        LOBYTE(v237) = 8;
                        v238 = 0;
                        v239 = 1;
                        v185 = (unsigned int *)v223;
                        goto LABEL_259;
                      }
LABEL_246:
                      LOBYTE(v237) = 0;
                      v239 = 0;
                      v186 = WTF::fastMalloc((WTF *)0x28);
                      *(_QWORD *)(v186 + 16) = &v236;
                      *(_QWORD *)v186 = off_1E336D9B8;
                      *(_QWORD *)(v186 + 8) = v223;
                      *(_BYTE *)(v186 + 24) = a7;
                      *(_QWORD *)(v186 + 32) = &v237;
                      v229 = (WTF::StringImpl *)v186;
                      WebCore::DatabaseThread::scheduleImmediateTask(v170, (uint64_t *)&v229);
                      result = (uint64_t)v229;
                      v229 = 0;
                      if (result)
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                      if (__ldaxr((unsigned __int8 *)&v236 + 1))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, (unsigned __int8 *)&v236 + 1))
                      {
                        goto LABEL_252;
                      }
                      result = MEMORY[0x19AEA534C]((char *)&v236 + 1);
LABEL_252:
                      while (!(_BYTE)v236)
                      {
                        v229 = (WTF::StringImpl *)0x7FF0000000000000;
                        LODWORD(v230) = 0;
                        result = WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v236 + 2, (unsigned __int8 *)&v236 + 1, (WTF::TimeWithDynamicClockType *)&v229);
                      }
                      v188 = __ldxr((unsigned __int8 *)&v236 + 1);
                      if (v188 == 1)
                      {
                        v185 = (unsigned int *)v223;
                        if (!__stlxr(0, (unsigned __int8 *)&v236 + 1))
                        {
LABEL_259:
                          if (v239)
                          {
                            v189 = v238;
                            *(_BYTE *)v220 = (_BYTE)v237;
                            *(_QWORD *)(v220 + 8) = v189;
                            *(_DWORD *)(v220 + 16) = 1;
                            do
                            {
                              v190 = __ldaxr(v185);
                              v191 = v190 - 1;
                            }
                            while (__stlxr(v191, v185));
                            if (!v191)
                            {
                              atomic_store(1u, v185);
                              WebCore::Database::~Database((WebCore::Database *)v185);
                              result = WTF::fastFree(v192, v193);
                            }
                          }
                          else
                          {
                            v194 = WebCore::staticTracker;
                            if (!WebCore::staticTracker)
                            {
                              v194 = WTF::fastMalloc((WTF *)0x88);
                              *(_BYTE *)v194 = 0;
                              *(_QWORD *)(v194 + 8) = 0;
                              *(_BYTE *)(v194 + 16) = 0;
                              *(_DWORD *)(v194 + 24) = 0;
                              *(_QWORD *)(v194 + 32) = 0;
                              *(_DWORD *)(v194 + 40) = -1;
                              *(_WORD *)(v194 + 44) = 0;
                              *(_BYTE *)(v194 + 46) = 0;
                              *(_QWORD *)(v194 + 48) = 0;
                              *(_BYTE *)(v194 + 56) = 0;
                              *(_QWORD *)(v194 + 64) = 0;
                              *(_BYTE *)(v194 + 72) = 0;
                              *(_DWORD *)(v194 + 76) = 1;
                              *(_QWORD *)(v194 + 80) = 0;
                              *(_QWORD *)(v194 + 88) = 0;
                              WTF::String::isolatedCopy();
                              *(_OWORD *)(v194 + 120) = 0u;
                              *(_OWORD *)(v194 + 104) = 0u;
                              WebCore::staticTracker = v194;
                            }
                            v195 = *(_QWORD *)(v215 + 8);
                            if (v195)
                            {
                              v196 = *(_QWORD *)(v195 + 8);
                              if (v196)
                                v197 = (WebCore::SecurityContext *)(v196 - 96);
                              else
                                v197 = 0;
                            }
                            else
                            {
                              v197 = 0;
                            }
                            WebCore::SecurityContext::securityOrigin(v197, v34);
                            result = (uint64_t)WebCore::DatabaseTracker::setDatabaseDetails((WebCore::DatabaseTracker *)v194, (const WebCore::SecurityOriginData *)(v198 + 8), (const WTF::String *)a3, a5, v218);
                            *(_QWORD *)v220 = v223;
                            *(_DWORD *)(v220 + 16) = 0;
                            if (v239)
                            {
                              result = v238;
                              v238 = 0;
                              if (result)
                              {
                                if (*(_DWORD *)result == 2)
                                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
                                else
                                  *(_DWORD *)result -= 2;
                              }
                            }
                          }
                          goto LABEL_274;
                        }
                      }
                      else
                      {
                        __clrex();
                        v185 = (unsigned int *)v223;
                      }
                      result = WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v236 + 1));
                      goto LABEL_259;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  result = WTF::Lock::unlockSlow((WTF::Lock *)(v170 + 24));
                  if (v183)
                    goto LABEL_243;
                  goto LABEL_246;
                }
              }
              else
              {
                __clrex();
              }
              result = WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_149);
              goto LABEL_222;
            }
LABEL_190:
            v154 = *(_DWORD *)(v153 - 8);
            goto LABEL_191;
          }
          goto LABEL_325;
        }
      }
LABEL_324:
      v229 = 0;
LABEL_325:
      __break(0xC471u);
LABEL_326:
      JUMPOUT(0x19559C250);
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_323:
    __break(0xC471u);
    JUMPOUT(0x19559C36CLL);
  }
  v35 = v233;
  v233 = 0;
  *(_BYTE *)v220 = v232;
  *(_QWORD *)(v220 + 8) = v35;
  *(_DWORD *)(v220 + 16) = 1;
LABEL_274:
  if (v234)
  {
    result = (uint64_t)v233;
    v233 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v34);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v199 = (unsigned int *)(v16 + 24);
  do
  {
    v200 = __ldaxr(v199);
    v201 = v200 - 1;
  }
  while (__stlxr(v201, v199));
  if (!v201)
  {
    atomic_store(1u, (unsigned int *)(v16 + 24));
    WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v16, v34);
    return WTF::fastFree(v202, v203);
  }
  return result;
}

WebCore::InspectorDatabaseAgent *WebCore::DatabaseManager::openDatabase@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, WTF::StringImpl **a3@<X2>, int a4@<W3>, const WTF::String *a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v8;
  uint64_t v16;
  WebCore::InspectorDatabaseAgent *result;
  WTF::StringImpl *v18;
  int v19;
  const WebCore::SecurityOrigin *v20;
  const WebCore::SecurityOrigin *v21;
  WebCore::SecurityOrigin *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t **v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  WebCore::Database **v94;
  WebCore::Database **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  WTF::StringImpl *v100;
  WebCore::Database *v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  void *v138;
  WTF *v139;
  void *v140;
  WTF *v141;
  void *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  WTF *v146;
  void *v147;
  WebCore::DatabaseManager *v148;
  WebCore::Document *v149;
  unsigned int v150;
  _QWORD *v151;
  WebCore::Database *v152;
  WTF::StringImpl *v153;
  unsigned int v154;
  WTF::StringImpl *v155[2];
  unsigned int v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  __int128 v159;
  __int128 v160;
  unsigned __int8 *v161;
  WTF *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  _BYTE v165[32];
  _QWORD v166[2];
  int v167;
  _BYTE v168[9];

  v8 = a7;
  v16 = *a7;
  result = (WebCore::InspectorDatabaseAgent *)WebCore::DatabaseManager::tryToOpenDatabaseBackend((uint64_t)&v152, a2, a3, a4, a5, a6, *a7 == 0, 0);
  if (!v154)
    goto LABEL_153;
  if (v154 != 1)
    goto LABEL_220;
  v19 = v152;
  if (v152 != 18)
    goto LABEL_149;
  v151 = v8;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 24), v18);
  v21 = v20;
  v161 = (unsigned __int8 *)a1;
  v22 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
  v162 = WebCore::SecurityOrigin::SecurityOrigin(v22, v21);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v24 = (WTF::StringImpl *)v166[0];
  if (v166[0])
    *(_DWORD *)v166[0] += 2;
  v163 = v24;
  v25 = v155[0];
  if (v155[0])
  {
    *(_DWORD *)v155[0] += 2;
    v164 = v25;
    *(_QWORD *)v165 = a6;
    *(_OWORD *)&v165[8] = xmmword_1968DF3C0;
    *(_QWORD *)&v165[24] = 0x7FF8000000000000;
    v155[0] = 0;
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, v23);
      v24 = (WTF::StringImpl *)v166[0];
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  else
  {
    v164 = 0;
    *(_QWORD *)v165 = a6;
    *(_OWORD *)&v165[8] = xmmword_1968DF3C0;
    *(_QWORD *)&v165[24] = 0x7FF8000000000000;
  }
  v166[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v26 = (uint64_t)v161;
  v27 = v161 + 9;
  if (__ldaxr(v161 + 9))
  {
    __clrex();
LABEL_15:
    MEMORY[0x19AEA534C](v27);
    goto LABEL_16;
  }
  if (__stxr(1u, v27))
    goto LABEL_15;
LABEL_16:
  v31 = *(_QWORD *)(v26 + 16);
  v30 = (uint64_t *)(v26 + 16);
  v29 = v31;
  if (v31
    || (WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v30, 8u), (v29 = *v30) != 0))
  {
    v32 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = ((unint64_t)&v161 + ~((_QWORD)&v161 << 32)) ^ (((unint64_t)&v161 + ~((_QWORD)&v161 << 32)) >> 22);
  v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
  v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
  v150 = (v35 >> 31) ^ v35;
  v36 = v32 & v150;
  v37 = (uint64_t **)(v29 + 8 * (v32 & v150));
  v38 = *v37;
  if (!*v37)
  {
LABEL_27:
    *v37 = (uint64_t *)&v161;
    v41 = *v30;
    if (*v30)
      v42 = *(_DWORD *)(v41 - 12) + 1;
    else
      v42 = 1;
    *(_DWORD *)(v41 - 12) = v42;
    v43 = *v30;
    if (*v30)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    v45 = (*(_DWORD *)(v43 - 16) + v44);
    v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 > 2 * v45)
        goto LABEL_40;
    }
    else
    {
      if (3 * v46 > 4 * v45)
        goto LABEL_40;
      if (!(_DWORD)v46)
      {
        v47 = 8;
        goto LABEL_39;
      }
    }
    v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
LABEL_39:
    WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v30, v47);
    goto LABEL_40;
  }
  v39 = 0;
  v40 = 1;
  while (v38 != (uint64_t *)&v161)
  {
    if (v38 == (uint64_t *)-1)
      v39 = v37;
    v36 = (v36 + v40) & v32;
    v37 = (uint64_t **)(v29 + 8 * v36);
    v38 = *v37;
    ++v40;
    if (!*v37)
    {
      if (v39)
      {
        *v39 = 0;
        --*(_DWORD *)(*v30 - 16);
        v37 = v39;
      }
      goto LABEL_27;
    }
  }
LABEL_40:
  v48 = __ldxr(v27);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, v27))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
  v49 = a2[45];
  if (v49)
  {
    v50 = (unsigned int *)(v49 + 24);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x30);
    v49 = v52;
    *(_DWORD *)(v52 + 24) = 1;
    v53 = (unsigned int *)(v52 + 24);
    v54 = a2[88];
    v55 = a2;
    if (v54)
    {
      v56 = *(_QWORD **)(v54 + 8);
      if (v56)
        v55 = v56;
      else
        v55 = a2;
    }
    *(_QWORD *)v52 = &off_1E33A18C0;
    *(_QWORD *)(v52 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v52, (WebCore::ScriptExecutionContext *)(v55 + 24));
    *(_QWORD *)v49 = &off_1E33A0540;
    *(_QWORD *)(v49 + 16) = 0;
    if (*((_BYTE *)v55 + 470))
    {
      __break(0xC471u);
      JUMPOUT(0x19559CFD0);
    }
    v155[0] = (WTF::StringImpl *)v49;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add(v55 + 40, (uint64_t *)v155, (uint64_t)v166);
    *(_QWORD *)v49 = &off_1E336D938;
    *(_QWORD *)(v49 + 32) = 0;
    *(_WORD *)(v49 + 40) = 0;
    do
      v58 = __ldaxr(v53);
    while (__stlxr(v58 + 1, v53));
    v59 = (unsigned int *)a2[45];
    a2[45] = v49;
    if (v59)
    {
      v60 = v59 + 6;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v59 + 6);
        WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v59, v57);
        WTF::fastFree(v146, v147);
      }
    }
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v49);
  }
  v63 = v163;
  if (v163)
    *(_DWORD *)v163 += 2;
  v157 = v63;
  v64 = v164;
  if (v164)
    *(_DWORD *)v164 += 2;
  v158 = v64;
  v159 = *(_OWORD *)v165;
  v160 = *(_OWORD *)&v165[16];
  WebCore::DatabaseContext::databaseExceededQuota(*(unsigned int **)(v49 + 8), (WTF::StringImpl *)a3, &v157);
  v158 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v65);
    else
      *(_DWORD *)v64 -= 2;
  }
  v66 = (int *)&v154;
  v157 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v65);
    else
      *(_DWORD *)v63 -= 2;
  }
  v67 = (unsigned int *)(v49 + 24);
  do
  {
    v68 = __ldaxr(v67);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, v67));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)(v49 + 24));
    WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v49, v65);
    WTF::fastFree(v141, v142);
  }
  v70 = (uint64_t)v161;
  v71 = v161 + 9;
  if (__ldaxr(v161 + 9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v71))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEA534C](v71);
LABEL_80:
  v75 = *(_QWORD *)(v70 + 16);
  v74 = (uint64_t *)(v70 + 16);
  v73 = v75;
  if (v75)
  {
    v76 = *(_DWORD *)(v73 - 8);
    v77 = v76 & v150;
    v78 = *(uint64_t **)(v73 + 8 * v77);
    if (v78 != (uint64_t *)&v161)
    {
      v79 = 1;
      while (v78)
      {
        v77 = ((_DWORD)v77 + v79) & v76;
        v78 = *(uint64_t **)(v73 + 8 * v77);
        ++v79;
        if (v78 == (uint64_t *)&v161)
          goto LABEL_87;
      }
      v77 = *(unsigned int *)(v73 - 4);
    }
LABEL_87:
    if (v77 != *(_DWORD *)(v73 - 4))
    {
      *(_QWORD *)(v73 + 8 * v77) = -1;
      ++*(_DWORD *)(*v74 - 16);
      v80 = *v74;
      v81 = *v74 ? *(_DWORD *)(v80 - 12) - 1 : -1;
      *(_DWORD *)(v80 - 12) = v81;
      v82 = *v74;
      if (*v74)
      {
        v83 = 6 * *(_DWORD *)(v82 - 12);
        v84 = *(_DWORD *)(v82 - 4);
        if (v83 < v84 && v84 >= 9)
          WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v74, v84 >> 1);
      }
    }
  }
  v86 = __ldxr(v71);
  if (v86 != 1)
  {
    __clrex();
    goto LABEL_102;
  }
  if (__stlxr(0, v71))
LABEL_102:
    WTF::Lock::unlockSlow((WTF::Lock *)v71);
  v87 = v164;
  v164 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v65);
    else
      *(_DWORD *)v87 -= 2;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v65);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = v162;
  v162 = 0;
  if (v89)
  {
    do
    {
      v90 = __ldaxr((unsigned int *)v89);
      v91 = v90 - 1;
    }
    while (__stlxr(v91, (unsigned int *)v89));
    if (!v91)
    {
      atomic_store(1u, (unsigned int *)v89);
      v143 = (WTF::StringImpl *)*((_QWORD *)v89 + 6);
      *((_QWORD *)v89 + 6) = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
          WTF::StringImpl::destroy(v143, v65);
        else
          *(_DWORD *)v143 -= 2;
      }
      v144 = (WTF::StringImpl *)*((_QWORD *)v89 + 5);
      *((_QWORD *)v89 + 5) = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
          WTF::StringImpl::destroy(v144, v65);
        else
          *(_DWORD *)v144 -= 2;
      }
      v145 = *((unsigned int *)v89 + 8);
      if ((_DWORD)v145 != -1)
        ((void (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v145])(v166, (char *)v89 + 8);
      *((_DWORD *)v89 + 8) = -1;
      WTF::fastFree(v89, v65);
    }
  }
  result = (WebCore::InspectorDatabaseAgent *)WebCore::DatabaseManager::tryToOpenDatabaseBackend((uint64_t)v155, a2, a3, a4, a5, a6, v16 == 0, 1);
  LOBYTE(v166[0]) = 0;
  v167 = -1;
  v92 = v156;
  if (v156 == -1)
  {
    v93 = v154;
    if (v154 == -1)
      goto LABEL_142;
    LOWORD(v161) = 0;
    goto LABEL_120;
  }
  result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(unsigned __int8 **, _QWORD *, WTF::StringImpl **))off_1E336DB40[v156])(&v161, v166, v155);
  v167 = v92;
  v93 = v154;
  if (v154 == -1 || v154 != (_DWORD)v92)
  {
    LOWORD(v161) = 0;
    if (!*((_BYTE *)&v161 + v92))
    {
      v95 = &v152;
      v94 = (WebCore::Database **)v166;
LABEL_130:
      LOBYTE(v161) = 0;
      LODWORD(v163) = -1;
      if (v93 != -1)
      {
        result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(_BYTE *, unsigned __int8 **, WebCore::Database **))off_1E336DB40[v93])(v168, &v161, v95);
        LODWORD(v163) = v93;
        v96 = *v66;
        if ((_DWORD)v96 != -1)
          result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(_BYTE *, WebCore::Database **))off_1E336DB30[v96])(v168, v95);
      }
      goto LABEL_136;
    }
    LOWORD(v161) = 0;
    if (v154 == -1)
    {
      LOBYTE(v161) = 0;
      LODWORD(v163) = -1;
      v94 = (WebCore::Database **)v166;
      v95 = &v152;
LABEL_136:
      *v66 = -1;
      v97 = *((unsigned int *)v94 + 4);
      if ((_DWORD)v97 != -1)
      {
        result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(_BYTE *, WebCore::Database **, WebCore::Database **))off_1E336DB60[v97])(v168, v95, v94);
        *v66 = v97;
        v98 = *((unsigned int *)v94 + 4);
        if ((_DWORD)v98 != -1)
          result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(_BYTE *, WebCore::Database **))off_1E336DB30[v98])(v168, v94);
      }
      *((_DWORD *)v94 + 4) = -1;
      v99 = (int)v163;
      if ((_DWORD)v163 != -1)
      {
        result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(_BYTE *, WebCore::Database **, unsigned __int8 **))off_1E336DB60[v163])(v168, v94, &v161);
        *((_DWORD *)v94 + 4) = v99;
        if ((_DWORD)v163 != -1)
          result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(_BYTE *, unsigned __int8 **))off_1E336DB30[v163])(v168, &v161);
      }
      goto LABEL_142;
    }
LABEL_120:
    if (*((_BYTE *)&v161 + v93))
      v94 = (WebCore::Database **)v166;
    else
      v94 = &v152;
    if (*((_BYTE *)&v161 + v93))
      v95 = &v152;
    else
      v95 = (WebCore::Database **)v166;
    if (!*((_BYTE *)&v161 + v93))
      v66 = &v167;
    v93 = *((_DWORD *)v95 + 4);
    goto LABEL_130;
  }
  result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(unsigned __int8 **, _QWORD *, WebCore::Database **))off_1E336DB50[v92])(&v161, v166, &v152);
LABEL_142:
  if (v167 != -1)
    result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(unsigned __int8 **, _QWORD *))off_1E336DB30[v167])(&v161, v166);
  v8 = v151;
  if (v156 != -1)
    result = (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(unsigned __int8 **, WTF::StringImpl **))off_1E336DB30[v156])(&v161, v155);
  if (!v154)
    goto LABEL_153;
  if (v154 != 1)
    goto LABEL_220;
  v19 = v152;
LABEL_149:
  if (v19 == 8)
  {
    result = (WebCore::InspectorDatabaseAgent *)WebCore::Document::addConsoleMessage(a2, 4, 2, &v153, 0);
    if (v154)
    {
      if (v154 == 1)
        goto LABEL_152;
LABEL_220:
      v148 = (WebCore::DatabaseManager *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WebCore::InspectorDatabaseAgent *)WebCore::DatabaseManager::hasOpenDatabases(v148, v149);
    }
LABEL_153:
    v101 = v152;
    v152 = 0;
    v102 = a2[45];
    if (v102)
    {
      v103 = (unsigned int *)(v102 + 24);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 + 1, v103));
    }
    else
    {
      v105 = WTF::fastMalloc((WTF *)0x30);
      v102 = v105;
      *(_DWORD *)(v105 + 24) = 1;
      v106 = (unsigned int *)(v105 + 24);
      v107 = a2[88];
      v108 = a2;
      if (v107)
      {
        v109 = *(_QWORD **)(v107 + 8);
        if (v109)
          v108 = v109;
        else
          v108 = a2;
      }
      *(_QWORD *)v105 = &off_1E33A18C0;
      *(_QWORD *)(v105 + 8) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v105, (WebCore::ScriptExecutionContext *)(v108 + 24));
      *(_QWORD *)v102 = &off_1E33A0540;
      *(_QWORD *)(v102 + 16) = 0;
      if (*((_BYTE *)v108 + 470))
      {
        __break(0xC471u);
        JUMPOUT(0x19559CEE8);
      }
      v157 = (WTF::StringImpl *)v102;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add(v108 + 40, (uint64_t *)&v157, (uint64_t)&v161);
      *(_QWORD *)v102 = &off_1E336D938;
      *(_QWORD *)(v102 + 32) = 0;
      *(_WORD *)(v102 + 40) = 0;
      do
        v111 = __ldaxr(v106);
      while (__stlxr(v111 + 1, v106));
      v112 = (unsigned int *)a2[45];
      a2[45] = v102;
      if (v112)
      {
        v113 = v112 + 6;
        do
        {
          v114 = __ldaxr(v113);
          v115 = v114 - 1;
        }
        while (__stlxr(v115, v113));
        if (!v115)
        {
          atomic_store(1u, v112 + 6);
          WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v112, v110);
          WTF::fastFree(v139, v140);
        }
      }
      result = (WebCore::InspectorDatabaseAgent *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v102);
    }
    *(_BYTE *)(v102 + 40) = 1;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v127 = *((_QWORD *)v101 + 1);
      v128 = *(_QWORD *)(v127 + 528);
      if (v128)
      {
        v129 = *(_QWORD *)(v128 + 8);
        if (v129)
        {
          v130 = *(_QWORD *)(v129 + 24);
          if (v130)
          {
            v131 = *(_QWORD *)(v130 + 8);
            if (v131)
              goto LABEL_204;
          }
        }
      }
      v132 = *(_QWORD *)(v127 + 2632);
      if (v132)
      {
        v133 = *(_QWORD *)(v132 + 8);
        if (v133)
        {
          v134 = *(_QWORD *)(v133 + 528);
          if (v134)
          {
            v135 = *(_QWORD *)(v134 + 8);
            if (v135)
            {
              v136 = *(_QWORD *)(v135 + 24);
              if (v136)
              {
                v131 = *(_QWORD *)(v136 + 8);
                if (v131)
                {
LABEL_204:
                  result = *(WebCore::InspectorDatabaseAgent **)(*(_QWORD *)(*(_QWORD *)(v131 + 80) + 8) + 120);
                  if (result)
                    result = (WebCore::InspectorDatabaseAgent *)WebCore::InspectorDatabaseAgent::didOpenDatabase(result, v101);
                }
              }
            }
          }
        }
      }
    }
    if (*((_BYTE *)v101 + 93))
      v117 = *v8 == 0;
    else
      v117 = 1;
    if (!v117)
    {
      *((_BYTE *)v101 + 41) = 1;
      v118 = WebCore::Document::eventLoop(*((WebCore::Document **)v101 + 1), v18);
      v119 = *v8;
      if (*v8)
      {
        v120 = (unsigned int *)(v119 + 16);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 + 1, v120));
      }
      do
        v122 = __ldaxr((unsigned int *)v101);
      while (__stlxr(v122 + 1, (unsigned int *)v101));
      v123 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v123 = &off_1E336DCA8;
      *((_QWORD *)v123 + 1) = v119;
      *((_QWORD *)v123 + 2) = v101;
      v161 = v123;
      WebCore::EventLoopTaskGroup::queueTask(v118, 11, (uint64_t *)&v161);
      result = (WebCore::InspectorDatabaseAgent *)v161;
      v161 = 0;
      if (result)
        result = (WebCore::InspectorDatabaseAgent *)(*(uint64_t (**)(WebCore::InspectorDatabaseAgent *))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)a8 = v101;
    *(_DWORD *)(a8 + 16) = 0;
    v124 = (unsigned int *)(v102 + 24);
    do
    {
      v125 = __ldaxr(v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v124));
    if (!v126)
    {
      atomic_store(1u, (unsigned int *)(v102 + 24));
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v102, v18);
      result = (WebCore::InspectorDatabaseAgent *)WTF::fastFree(v137, v138);
    }
    goto LABEL_185;
  }
LABEL_152:
  v100 = v153;
  v153 = 0;
  *(_BYTE *)a8 = (_BYTE)v152;
  *(_QWORD *)(a8 + 8) = v100;
  *(_DWORD *)(a8 + 16) = 1;
LABEL_185:
  if (v154 != -1)
    return (WebCore::InspectorDatabaseAgent *)((uint64_t (*)(unsigned __int8 **, WebCore::Database **))off_1E336DB30[v154])(&v161, &v152);
  return result;
}

BOOL WebCore::DatabaseManager::hasOpenDatabases(WebCore::DatabaseManager *this, WebCore::Document *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 45);
  return v2 && *(_BYTE *)(v2 + 40) != 0;
}

WTF::StringImpl *WebCore::DatabaseManager::detailsForNameAndOrigin@<X0>(WTF::StringImpl *this@<X0>, const WTF::StringImpl **a2@<X1>, WebCore::SecurityOrigin *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v6;
  unsigned __int8 *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;

  v6 = this;
  v8 = (unsigned __int8 *)this + 9;
  if (__ldaxr((unsigned __int8 *)this + 9))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  this = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)this + 9);
LABEL_5:
  v10 = (uint64_t *)*((_QWORD *)v6 + 2);
  if (v10)
  {
    v11 = *((unsigned int *)v10 - 1);
    v12 = &v10[v11];
    if (*((_DWORD *)v10 - 3))
    {
      v13 = v10;
      if ((_DWORD)v11)
      {
        v14 = 8 * v11;
        v13 = v10;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          ++v13;
          v14 -= 8;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v13 = &v10[v11];
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = &v10[v11];
  if (v10)
  {
LABEL_12:
    v15 = &v10[*((unsigned int *)v10 - 1)];
    goto LABEL_17;
  }
  v15 = 0;
LABEL_17:
  if (v15 == v13)
  {
LABEL_26:
    v18 = 1;
  }
  else
  {
    while (1)
    {
      v16 = *v13;
      this = (WTF::StringImpl *)WTF::equal(*(WTF **)(*v13 + 16), *a2, a3);
      if ((_DWORD)this)
      {
        this = (WTF::StringImpl *)WebCore::SecurityOrigin::equal(*(const WTF::StringImpl ***)(v16 + 8), (const WTF::StringImpl **)a3);
        if ((_DWORD)this)
          break;
      }
      v17 = v13 + 1;
      v13 = v12;
      if (v17 != v12)
      {
        v13 = v17;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          if (++v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
      if (v13 == v15)
        goto LABEL_26;
    }
    v19 = *(_DWORD **)(v16 + 16);
    if (v19)
      *v19 += 2;
    *(_QWORD *)a4 = v19;
    v20 = *(_DWORD **)(v16 + 24);
    if (v20)
      *v20 += 2;
    v18 = 0;
    *(_QWORD *)(a4 + 8) = v20;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v16 + 32);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v16 + 48);
    *(_QWORD *)(a4 + 40) = *(_QWORD *)(v16 + 56);
  }
  v21 = __ldxr(v8);
  if (v21 != 1)
  {
    __clrex();
LABEL_39:
    this = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (!v18)
      return this;
    goto LABEL_35;
  }
  if (__stlxr(0, v8))
    goto LABEL_39;
  if (!v18)
    return this;
LABEL_35:
  v22 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v22 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_BYTE *)(v22 + 16) = 0;
    *(_DWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 32) = 0;
    *(_DWORD *)(v22 + 40) = -1;
    *(_WORD *)(v22 + 44) = 0;
    *(_BYTE *)(v22 + 46) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    *(_BYTE *)(v22 + 56) = 0;
    *(_QWORD *)(v22 + 64) = 0;
    *(_BYTE *)(v22 + 72) = 0;
    *(_DWORD *)(v22 + 76) = 1;
    *(_QWORD *)(v22 + 80) = 0;
    *(_QWORD *)(v22 + 88) = 0;
    WTF::String::isolatedCopy();
    *(_OWORD *)(v22 + 120) = 0u;
    *(_OWORD *)(v22 + 104) = 0u;
    WebCore::staticTracker = v22;
  }
  return WebCore::DatabaseTracker::detailsForNameAndOrigin((WebCore::DatabaseTracker *)v22, (const WTF::String *)a2, (WebCore::SecurityOrigin *)((char *)a3 + 8), a4);
}

WTF::StringImpl *WebCore::DatabaseOpenTask::doPerformTask(WebCore::DatabaseOpenTask *this)
{
  WebCore::DatabaseOpenTask *v1;
  uint64_t v2;
  int v3;
  int v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  sqlite3 *v9;
  sqlite3 *v11;
  int v12;
  sqlite3 *v13;
  size_t v14;
  const char *v15;
  int *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  sqlite3 *v39;
  int v40;
  sqlite3 *v41;
  size_t v42;
  const char *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  unsigned int *v46;
  unsigned __int8 *v47;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  char v53;
  int v54;
  sqlite3 *v55;
  int v56;
  sqlite3 *v57;
  size_t v58;
  const char *v59;
  unsigned int v60;
  uint64_t v61;
  sqlite3 *v62;
  int (__cdecl *v63)(void *, int, const char *, const char *, const char *, const char *);
  unsigned int *v64;
  int v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int v73;
  WTF::StringImpl *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  sqlite3 *v84;
  int v85;
  sqlite3 *v86;
  size_t v87;
  const char *v88;
  uint64_t v89;
  WebCore::SQLiteDatabaseTracker *v90;
  int v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WTF::StringImpl *result;
  WTF::StringImpl *v98;
  sqlite3 *v99;
  int v100;
  sqlite3 *v101;
  size_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  void *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  __int16 v110;
  WTF::StringImpl *v111;
  char v112;
  char v113;
  int v114;
  const char *v115;
  size_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  char v121;

  v1 = this;
  v2 = *((_QWORD *)this + 1);
  v3 = *((unsigned __int8 *)this + 24);
  if (__ldaxr(WebCore::openDatabaseLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::openDatabaseLock))
  {
    goto LABEL_5;
  }
  this = (WebCore::DatabaseOpenTask *)MEMORY[0x19AEA534C](WebCore::openDatabaseLock);
LABEL_5:
  v5 = __ldxr(WebCore::openDatabaseLock);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, WebCore::openDatabaseLock))
LABEL_9:
    this = (WebCore::DatabaseOpenTask *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::openDatabaseLock);
  WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
  v6 = (unsigned int *)(v2 + 96);
  if ((WebCore::SQLiteDatabase::open(v2 + 96, (WTF::FileSystemImpl *)(v2 + 80), 2u, 0) & 1) != 0)
  {
    WebCore::SQLiteDatabase::turnOnIncrementalAutoVacuum((WebCore::SQLiteDatabase *)(v2 + 96));
    v9 = *(sqlite3 **)(v2 + 104);
    if (v9)
      sqlite3_busy_timeout(v9, 30000);
    v111 = 0;
    if (__ldaxr((unsigned __int8 *)&_MergedGlobals_149))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_149))
    {
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](&_MergedGlobals_149);
LABEL_21:
    if ((byte_1ECE820FB & 1) == 0)
    {
      qword_1ECE82108 = 0;
      byte_1ECE820FB = 1;
      v16 = (int *)(v2 + 88);
      goto LABEL_30;
    }
    v16 = (int *)(v2 + 88);
    if (!qword_1ECE82108)
      goto LABEL_30;
    v17 = *(_DWORD *)(qword_1ECE82108 - 8);
    v18 = *v16;
    v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
    v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
    v21 = (v20 ^ HIWORD(v20)) & v17;
    v22 = *(_DWORD *)(qword_1ECE82108 + 16 * v21);
    if (v22 != *v16)
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(_DWORD *)(qword_1ECE82108 + 16 * v21);
        ++v23;
        if (v22 == v18)
          goto LABEL_29;
      }
      v21 = *(unsigned int *)(qword_1ECE82108 - 4);
    }
LABEL_29:
    if (v21 == *(_DWORD *)(qword_1ECE82108 - 4))
    {
LABEL_30:
      v109 = (WTF::StringImpl *)(v2 + 96);
      do
        v24 = __ldaxr(v6);
      while (__stlxr(v24 + 1, v6));
      v110 = 0;
      WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v109);
      if ((_BYTE)v110)
      {
        WebCore::SQLiteDatabase::tableSQL(v2 + 96, "__WebKitDatabaseInfoTable__", 0x10000001BLL, &v119);
        v26 = v119;
        if (!v119)
        {
LABEL_34:
          *(_BYTE *)(v2 + 93) = 1;
          v119 = (WTF::StringImpl *)"CREATE TABLE ";
          LODWORD(v120) = 13;
          v117 = (WTF::StringImpl *)"__WebKitDatabaseInfoTable__";
          LODWORD(v118) = 27;
          v115 = " (key TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT REPLACE,value TEXT NOT NULL ON CONFLICT FAIL);";
          LODWORD(v116) = 102;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v119, (uint64_t)&v117, (uint64_t)&v115, &v108);
          if (!v108)
          {
            __break(0xC471u);
            JUMPOUT(0x19559E010);
          }
          v28 = WebCore::SQLiteDatabase::executeCommandSlow((WTF *)(v2 + 96), *((char **)v108 + 1), *((unsigned int *)v108 + 1) | ((unint64_t)((*((_DWORD *)v108 + 4) >> 2) & 1) << 32));
          v29 = v108;
          v108 = 0;
          if (!v29)
          {
LABEL_38:
            if ((v28 & 1) != 0)
              goto LABEL_39;
LABEL_162:
            v84 = *(sqlite3 **)(v2 + 104);
            if (v84)
            {
              v85 = sqlite3_errcode(v84);
              v86 = *(sqlite3 **)(v2 + 104);
              if (v86)
              {
                v87 = (size_t)sqlite3_errmsg(v86);
                v88 = (const char *)v87;
                if (!v87)
                {
LABEL_173:
                  v119 = (WTF::StringImpl *)"unable to open database, failed to create 'info' table";
                  v120 = (WTF::StringImpl *)55;
                  v117 = (WTF::StringImpl *)" (";
                  v118 = (WTF::StringImpl *)3;
                  v115 = v88;
                  v116 = v87;
                  v114 = v85;
                  v113 = 32;
                  v112 = 41;
                  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>((uint64_t)&v119, (uint64_t)&v117, (unsigned int *)&v114, &v113, (uint64_t)&v115, &v112, &v108);
                  if (!v108)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19559E018);
                  }
                  goto LABEL_174;
                }
LABEL_172:
                v87 = strlen(v88);
                goto LABEL_173;
              }
            }
            else
            {
              v85 = *(_DWORD *)(v2 + 148);
            }
            v89 = *(_QWORD *)(v2 + 152);
            if (v89)
              v88 = (const char *)(v89 + 16);
            else
              v88 = "database is not open";
            goto LABEL_172;
          }
          if (*(_DWORD *)v29 != 2)
          {
            *(_DWORD *)v29 -= 2;
            goto LABEL_38;
          }
          WTF::StringImpl::destroy(v29, v27);
          if ((v28 & 1) == 0)
            goto LABEL_162;
LABEL_39:
          if (v111 && *((_DWORD *)v111 + 1) || !v3 && *(_BYTE *)(v2 + 93))
          {
LABEL_49:
            LODWORD(v115) = *v16;
            if ((byte_1ECE820FB & 1) == 0)
            {
              qword_1ECE82108 = 0;
              byte_1ECE820FB = 1;
            }
            if (v111 && *((_DWORD *)v111 + 1))
              WTF::String::isolatedCopy();
            else
              v117 = 0;
            WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int const&,WTF::String>((uint64_t)&v119, (WTF::StringImpl *)&v115, (uint64_t *)&v117);
            v35 = v117;
            v117 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v34);
              else
                *(_DWORD *)v35 -= 2;
            }
            WebCore::SQLiteTransaction::commit((uint64_t)&v109);
            WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v109);
            goto LABEL_66;
          }
          v30 = (WTF::StringImpl **)(v2 + 56);
          if ((WebCore::Database::setVersionInDatabase((WebCore::Database *)v2, (const WTF::String *)(v2 + 56), 0) & 1) != 0)
          {
            v32 = *v30;
            if (*v30)
              *(_DWORD *)v32 += 2;
            v33 = v111;
            v111 = v32;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v31);
              else
                *(_DWORD *)v33 -= 2;
            }
            goto LABEL_49;
          }
          v99 = *(sqlite3 **)(v2 + 104);
          if (v99)
          {
            v100 = sqlite3_errcode(v99);
            v101 = *(sqlite3 **)(v2 + 104);
            if (v101)
            {
              v102 = (size_t)sqlite3_errmsg(v101);
              v103 = (const char *)v102;
              if (!v102)
              {
LABEL_229:
                v119 = (WTF::StringImpl *)"unable to open database, failed to write current version";
                v120 = (WTF::StringImpl *)57;
                v117 = (WTF::StringImpl *)" (";
                v118 = (WTF::StringImpl *)3;
                v115 = v103;
                v116 = v102;
                v114 = v100;
                v113 = 32;
                v112 = 41;
                WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>((uint64_t)&v119, (uint64_t)&v117, (unsigned int *)&v114, &v113, (uint64_t)&v115, &v112, &v108);
                if (!v108)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19559DFA8);
                }
LABEL_174:
                if ((_BYTE)v110)
                {
                  v90 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::executeCommand((uint64_t)v109, "ROLLBACK", 9);
                  LOBYTE(v110) = 0;
                  *((_BYTE *)v109 + 20) = 0;
                  WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v90);
                }
                goto LABEL_176;
              }
LABEL_228:
              v102 = strlen(v103);
              goto LABEL_229;
            }
          }
          else
          {
            v100 = *(_DWORD *)(v2 + 148);
          }
          v105 = *(_QWORD *)(v2 + 152);
          if (v105)
            v103 = (const char *)(v105 + 16);
          else
            v103 = "database is not open";
          goto LABEL_228;
        }
        v54 = *((_DWORD *)v119 + 1);
        v119 = 0;
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::destroy(v26, v25);
          if (!v54)
            goto LABEL_34;
        }
        else
        {
          *(_DWORD *)v26 -= 2;
          if (!v54)
            goto LABEL_34;
        }
        if ((WebCore::Database::getVersionFromDatabase((WebCore::Database *)v2, &v111, 0) & 1) != 0)
          goto LABEL_39;
        v55 = *(sqlite3 **)(v2 + 104);
        if (v55)
        {
          v56 = sqlite3_errcode(v55);
          v57 = *(sqlite3 **)(v2 + 104);
          if (v57)
          {
            v58 = (size_t)sqlite3_errmsg(v57);
            v59 = (const char *)v58;
            if (!v58)
            {
LABEL_222:
              v119 = (WTF::StringImpl *)"unable to open database, failed to read current version";
              v120 = (WTF::StringImpl *)56;
              v117 = (WTF::StringImpl *)" (";
              v118 = (WTF::StringImpl *)3;
              v115 = v59;
              v116 = v58;
              v114 = v56;
              v113 = 32;
              v112 = 41;
              WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>((uint64_t)&v119, (uint64_t)&v117, (unsigned int *)&v114, &v113, (uint64_t)&v115, &v112, &v108);
              if (!v108)
              {
                __break(0xC471u);
                JUMPOUT(0x19559DF1CLL);
              }
              goto LABEL_174;
            }
LABEL_221:
            v58 = strlen(v59);
            goto LABEL_222;
          }
        }
        else
        {
          v56 = *(_DWORD *)(v2 + 148);
        }
        v104 = *(_QWORD *)(v2 + 152);
        if (v104)
          v59 = (const char *)(v104 + 16);
        else
          v59 = "database is not open";
        goto LABEL_221;
      }
      v39 = *(sqlite3 **)(v2 + 104);
      if (v39)
      {
        v40 = sqlite3_errcode(v39);
        v41 = *(sqlite3 **)(v2 + 104);
        if (v41)
        {
          v42 = (size_t)sqlite3_errmsg(v41);
          v43 = (const char *)v42;
          if (!v42)
          {
LABEL_159:
            v119 = (WTF::StringImpl *)"unable to open database, failed to start transaction";
            v120 = (WTF::StringImpl *)53;
            v117 = (WTF::StringImpl *)" (";
            v118 = (WTF::StringImpl *)3;
            v115 = v43;
            v116 = v42;
            v114 = v40;
            v113 = 32;
            v112 = 41;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>((uint64_t)&v119, (uint64_t)&v117, (unsigned int *)&v114, &v113, (uint64_t)&v115, &v112, &v108);
            if (!v108)
              goto LABEL_237;
LABEL_176:
            WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(v2 + 96));
            v51 = v108;
            WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v109);
            v91 = __ldxr((unsigned __int8 *)&_MergedGlobals_149);
            if (v91 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_149))
                goto LABEL_181;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_149);
LABEL_181:
            v52 = 1;
            v53 = 8;
LABEL_182:
            v50 = v111;
            v111 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                v50 = (WTF::StringImpl *)WTF::StringImpl::destroy(v50, v74);
              else
                *(_DWORD *)v50 -= 2;
            }
            goto LABEL_185;
          }
LABEL_158:
          v42 = strlen(v43);
          goto LABEL_159;
        }
      }
      else
      {
        v40 = *(_DWORD *)(v2 + 148);
      }
      v83 = *(_QWORD *)(v2 + 152);
      if (v83)
        v43 = (const char *)(v83 + 16);
      else
        v43 = "database is not open";
      goto LABEL_158;
    }
    if (*(_QWORD *)(qword_1ECE82108 + 16 * v21 + 8))
    {
      WTF::String::isolatedCopy();
      v36 = v119;
      if (!v119)
      {
LABEL_60:
        v37 = v111;
        v111 = v36;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::destroy(v37, v7);
            v36 = v119;
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
        v119 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v7);
          else
            *(_DWORD *)v36 -= 2;
        }
LABEL_66:
        v38 = __ldxr((unsigned __int8 *)&_MergedGlobals_149);
        if (v38 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_149))
          {
LABEL_75:
            v44 = v111;
            if (!v111)
            {
              v44 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *(_DWORD *)v44 += 2;
              v111 = v44;
            }
            if (!v3 && *(_BYTE *)(v2 + 93)
              || (v45 = *(WTF **)(v2 + 56)) == 0
              || !*((_DWORD *)v45 + 1)
              || (WTF::equal(v45, v44, v8) & 1) != 0)
            {
              if (!*(_QWORD *)(v2 + 104))
                goto LABEL_117;
              v46 = *(unsigned int **)(v2 + 160);
              v47 = (unsigned __int8 *)(v2 + 118);
              if (__ldaxr((unsigned __int8 *)(v2 + 118)))
              {
                __clrex();
              }
              else if (!__stxr(1u, v47))
              {
                goto LABEL_107;
              }
              MEMORY[0x19AEA534C](v2 + 118);
              do
LABEL_107:
                v60 = __ldaxr(v46);
              while (__stlxr(v60 + 1, v46));
              v61 = *(_QWORD *)(v2 + 120);
              *(_QWORD *)(v2 + 120) = v46;
              if (v61)
              {
                WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v61, v44);
                v46 = *(unsigned int **)(v2 + 120);
                v62 = *(sqlite3 **)(v2 + 104);
                if (!v46)
                {
                  v63 = 0;
                  v64 = 0;
LABEL_112:
                  sqlite3_set_authorizer(v62, v63, v64);
                  v65 = __ldxr(v47);
                  if (v65 == 1)
                  {
                    if (!__stlxr(0, v47))
                    {
LABEL_117:
                      v66 = WebCore::staticTracker;
                      if (!WebCore::staticTracker)
                      {
                        v66 = WTF::fastMalloc((WTF *)0x88);
                        *(_BYTE *)v66 = 0;
                        *(_QWORD *)(v66 + 8) = 0;
                        *(_BYTE *)(v66 + 16) = 0;
                        *(_DWORD *)(v66 + 24) = 0;
                        *(_QWORD *)(v66 + 32) = 0;
                        *(_DWORD *)(v66 + 40) = -1;
                        *(_WORD *)(v66 + 44) = 0;
                        *(_BYTE *)(v66 + 46) = 0;
                        *(_QWORD *)(v66 + 48) = 0;
                        *(_BYTE *)(v66 + 56) = 0;
                        *(_QWORD *)(v66 + 64) = 0;
                        *(_BYTE *)(v66 + 72) = 0;
                        *(_DWORD *)(v66 + 76) = 1;
                        *(_QWORD *)(v66 + 80) = 0;
                        *(_QWORD *)(v66 + 88) = 0;
                        WTF::String::isolatedCopy();
                        *(_OWORD *)(v66 + 120) = 0u;
                        *(_OWORD *)(v66 + 104) = 0u;
                        WebCore::staticTracker = v66;
                      }
                      WebCore::DatabaseTracker::addOpenDatabase((WebCore::DatabaseTracker *)v66, (WebCore::Database *)v2);
                      *(_BYTE *)(v2 + 92) = 1;
                      if (!v3 && *(_BYTE *)(v2 + 93))
                      {
                        v68 = (_DWORD *)*MEMORY[0x1E0CBF738];
                        if (*MEMORY[0x1E0CBF738])
                          *v68 += 2;
                        v69 = *(WTF::StringImpl **)(v2 + 56);
                        *(_QWORD *)(v2 + 56) = v68;
                        if (v69)
                        {
                          if (*(_DWORD *)v69 == 2)
                            WTF::StringImpl::destroy(v69, v67);
                          else
                            *(_DWORD *)v69 -= 2;
                        }
                      }
                      v70 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 32);
                      v71 = (unsigned __int8 *)(v70 + 72);
                      if (__ldaxr((unsigned __int8 *)(v70 + 72)))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, v71))
                      {
                        goto LABEL_130;
                      }
                      MEMORY[0x19AEA534C](v70 + 72);
                      do
LABEL_130:
                        v73 = __ldaxr((unsigned int *)v2);
                      while (__stlxr(v73 + 1, (unsigned int *)v2));
                      v117 = (WTF::StringImpl *)v2;
                      WTF::HashTable<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>>::add((uint64_t *)(v70 + 80), &v117, (uint64_t)&v119);
                      v75 = (unsigned int *)v117;
                      v117 = 0;
                      if (v75)
                      {
                        do
                        {
                          v76 = __ldaxr(v75);
                          v77 = v76 - 1;
                        }
                        while (__stlxr(v77, v75));
                        if (!v77)
                        {
                          atomic_store(1u, v75);
                          WebCore::Database::~Database((WebCore::Database *)v75);
                          WTF::fastFree(v106, v107);
                        }
                      }
                      v78 = __ldxr(v71);
                      if (v78 == 1)
                      {
                        if (!__stlxr(0, v71))
                          goto LABEL_140;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)(v70 + 72));
LABEL_140:
                      v53 = 0;
                      v51 = 0;
                      v52 = 0;
                      goto LABEL_182;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 118));
                  goto LABEL_117;
                }
              }
              else
              {
                v62 = *(sqlite3 **)(v2 + 104);
              }
              v63 = (int (__cdecl *)(void *, int, const char *, const char *, const char *, const char *))WebCore::SQLiteDatabase::authorizerFunction;
              v64 = v46;
              goto LABEL_112;
            }
            WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)(v2 + 96));
            v79 = *(WTF::StringImpl **)(v2 + 56);
            if (v79)
              *(_DWORD *)v79 += 2;
            v109 = v79;
            v80 = v111;
            if (v111)
              *(_DWORD *)v111 += 2;
            v108 = v80;
            v119 = (WTF::StringImpl *)"unable to open database, version mismatch, '";
            v120 = (WTF::StringImpl *)45;
            v117 = (WTF::StringImpl *)"' does not match the currentVersion of '";
            v118 = (WTF::StringImpl *)41;
            LOBYTE(v114) = 39;
            WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>((uint64_t)&v119, (uint64_t *)&v109, (uint64_t)&v117, (uint64_t *)&v108, (char *)&v114, &v115);
            v51 = (WTF::StringImpl *)v115;
            if (v115)
            {
              v115 = 0;
              v81 = v108;
              v108 = 0;
              if (v81)
              {
                if (*(_DWORD *)v81 == 2)
                  WTF::StringImpl::destroy(v81, v74);
                else
                  *(_DWORD *)v81 -= 2;
              }
              v82 = v109;
              v109 = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v74);
                else
                  *(_DWORD *)v82 -= 2;
              }
              goto LABEL_181;
            }
LABEL_237:
            __break(0xC471u);
            JUMPOUT(0x19559DB64);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_149);
        goto LABEL_75;
      }
    }
    else
    {
      v36 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v36 += 2;
      v119 = v36;
      if (!v36)
        goto LABEL_60;
    }
    *(_DWORD *)v36 += 2;
    goto LABEL_60;
  }
  v11 = *(sqlite3 **)(v2 + 104);
  if (v11)
  {
    v12 = sqlite3_errcode(v11);
    v13 = *(sqlite3 **)(v2 + 104);
    if (v13)
    {
      v14 = (size_t)sqlite3_errmsg(v13);
      v15 = (const char *)v14;
      if (!v14)
        goto LABEL_92;
      goto LABEL_91;
    }
  }
  else
  {
    v12 = *(_DWORD *)(v2 + 148);
  }
  v49 = *(_QWORD *)(v2 + 152);
  if (v49)
    v15 = (const char *)(v49 + 16);
  else
    v15 = "database is not open";
LABEL_91:
  v14 = strlen(v15);
LABEL_92:
  v119 = (WTF::StringImpl *)"unable to open database";
  v120 = (WTF::StringImpl *)24;
  v117 = (WTF::StringImpl *)" (";
  v118 = (WTF::StringImpl *)3;
  v115 = v15;
  v116 = v14;
  LODWORD(v111) = v12;
  LOBYTE(v108) = 32;
  LOBYTE(v114) = 41;
  v50 = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>((uint64_t)&v119, (uint64_t)&v117, (unsigned int *)&v111, (char *)&v108, (uint64_t)&v115, (char *)&v114, &v109);
  v51 = v109;
  if (!v109)
  {
    __break(0xC471u);
    JUMPOUT(0x19559E008);
  }
  v109 = 0;
  v52 = 1;
  v53 = 8;
LABEL_185:
  WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v50);
  v92 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v92 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v92 = 0;
    *(_QWORD *)(v92 + 8) = 0;
    *(_BYTE *)(v92 + 16) = 0;
    *(_DWORD *)(v92 + 24) = 0;
    *(_QWORD *)(v92 + 32) = 0;
    *(_DWORD *)(v92 + 40) = -1;
    *(_WORD *)(v92 + 44) = 0;
    *(_BYTE *)(v92 + 46) = 0;
    *(_QWORD *)(v92 + 48) = 0;
    *(_BYTE *)(v92 + 56) = 0;
    *(_QWORD *)(v92 + 64) = 0;
    *(_BYTE *)(v92 + 72) = 0;
    *(_DWORD *)(v92 + 76) = 1;
    *(_QWORD *)(v92 + 80) = 0;
    *(_QWORD *)(v92 + 88) = 0;
    WTF::String::isolatedCopy();
    *(_OWORD *)(v92 + 120) = 0u;
    *(_OWORD *)(v92 + 104) = 0u;
    WebCore::staticTracker = v92;
  }
  WebCore::DatabaseTracker::doneCreatingDatabase((WebCore::DatabaseTracker *)v92, (WebCore::Database *)v2);
  if (v52)
  {
    LOBYTE(v117) = v53;
    v118 = v51;
    WTF::String::isolatedCopy();
    LOBYTE(v119) = v53;
    v94 = v120;
    v120 = 0;
    v95 = v118;
    v118 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v93);
      else
        *(_DWORD *)v95 -= 2;
    }
    v51 = 0;
    v96 = *((_QWORD *)v1 + 4);
    LOBYTE(v119) = v53;
    v120 = v94;
    v121 = 1;
  }
  else
  {
    v96 = *((_QWORD *)v1 + 4);
    LOBYTE(v119) = 0;
    v121 = 0;
  }
  result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v119, v96);
  if (v121)
  {
    result = v120;
    v120 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v98);
        if (!v52)
          return result;
        goto LABEL_198;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v52)
    return result;
LABEL_198:
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v51, v98);
    else
      *(_DWORD *)v51 -= 2;
  }
  return result;
}

unsigned __int8 *WebCore::DatabaseCloseTask::doPerformTask(WebCore::Database **this, WTF::StringImpl *a2)
{
  return WebCore::Database::performClose(this[1], a2);
}

void WebCore::DatabaseTransactionTask::~DatabaseTransactionTask(WebCore::DatabaseTransactionTask *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (!*((_BYTE *)this + 32))
    WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)(*((_QWORD *)this + 3) + 208), a2);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  *(_QWORD *)this = off_1E336D990;
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (!*((_BYTE *)this + 32))
    WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)(*((_QWORD *)this + 3) + 208), a2);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  *(_QWORD *)this = off_1E336D990;
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::DatabaseTransactionTask::doPerformTask(WebCore::DatabaseTransactionTask *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *result;
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 3);
  v3 = v2 + 208;
  result = WebCore::SQLTransactionBackend::computeNextStateAndCleanupIfNeeded((unsigned int *)(v2 + 208));
  if (*(int *)(v2 + 216) >= 2)
  {
    v5 = (uint64_t (*)(_QWORD *))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v2 + 208);
    v7 = (_QWORD *)(v3 + (v6 >> 1));
    if ((v6 & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
    result = (unsigned int *)v5(v7);
    *(_DWORD *)(v2 + 216) = 1;
  }
  *((_BYTE *)this + 32) = 1;
  return result;
}

void WebCore::DatabaseTableNamesTask::doPerformTask(WebCore::DatabaseTableNamesTask *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *v4;
  unsigned __int8 *v5;
  WebCore::SQLiteDatabaseTracker *v7;
  int v8;
  __int128 v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD **v13;
  WTF *v14;
  _DWORD *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::SQLiteDatabaseTracker *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::ChangeVersionWrapper *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  uint64_t v34;
  sqlite3_stmt *v35;
  sqlite3_stmt *pStmt;
  int v37;

  v2 = *((_QWORD *)this + 1);
  *(_BYTE *)(*(_QWORD *)(v2 + 160) + 8) &= ~1u;
  WebCore::SQLiteDatabase::prepareStatement(v2 + 96, "SELECT name FROM sqlite_master WHERE type='table';",
    51,
    (uint64_t)&v35);
  if (v37)
  {
    v4 = 0;
    *(_BYTE *)(*(_QWORD *)(v2 + 160) + 8) |= 1u;
    goto LABEL_38;
  }
  v33 = 0;
  v34 = 0;
  while (1)
  {
    v5 = (unsigned __int8 *)v35 + 32;
    if (__ldaxr((unsigned __int8 *)v35 + 32))
    {
      __clrex();
LABEL_7:
      MEMORY[0x19AEA534C](v5);
      goto LABEL_8;
    }
    if (__stxr(1u, v5))
      goto LABEL_7;
LABEL_8:
    if (*((_BYTE *)v35 + 20) || (v7 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v7))
    {
      v8 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v7);
      v19 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v8 = (int)v19;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v19);
    }
    v10 = __ldxr(v5);
    if (v10 != 1)
    {
      __clrex();
LABEL_15:
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_16;
    }
    if (__stlxr(0, v5))
      goto LABEL_15;
LABEL_16:
    if (v8 != 100)
      break;
    if (!v37)
    {
      WebCore::SQLiteStatement::columnText(&v35, 0, &v32);
      if ((MEMORY[0x19AEA53F4](v32, "__WebKitDatabaseInfoTable__", 27) & 1) == 0)
      {
        v12 = HIDWORD(v34);
        if (HIDWORD(v34) == (_DWORD)v34)
        {
          v13 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)&v32);
          v12 = HIDWORD(v34);
          v14 = v33;
          v15 = *v13;
          if (*v13)
            *v15 += 2;
          *((_QWORD *)v14 + v12) = v15;
        }
        else
        {
          v17 = v32;
          v16 = v33;
          if (v32)
            *(_DWORD *)v32 += 2;
          *((_QWORD *)v16 + v12) = v17;
        }
        HIDWORD(v34) = v12 + 1;
      }
      v18 = v32;
      v32 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v11);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!v37)
        continue;
    }
    v28 = (WebCore::ChangeVersionWrapper *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ChangeVersionWrapper::~ChangeVersionWrapper(v28);
    return;
  }
  *(_BYTE *)(*(_QWORD *)(v2 + 160) + 8) |= 1u;
  if (v8 == 101)
  {
    v4 = v33;
    *(_QWORD *)&v9 = v34;
    goto LABEL_39;
  }
  v4 = v33;
  if (!HIDWORD(v34))
  {
    if (!v33)
      goto LABEL_38;
    goto LABEL_60;
  }
  v26 = 8 * HIDWORD(v34);
  do
  {
    v27 = *(WTF::StringImpl **)v4;
    *(_QWORD *)v4 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v3);
      else
        *(_DWORD *)v27 -= 2;
    }
    v4 = (WTF *)((char *)v4 + 8);
    v26 -= 8;
  }
  while (v26);
  v4 = v33;
  if (v33)
  {
LABEL_60:
    v33 = 0;
    LODWORD(v34) = 0;
    WTF::fastFree(v4, v3);
    v4 = 0;
  }
LABEL_38:
  v9 = 0uLL;
LABEL_39:
  if (v37 != -1)
  {
    v29 = v9;
    ((void (*)(WTF **, sqlite3_stmt **))off_1E336DB00[v37])(&v33, &v35);
    v9 = v29;
  }
  v20 = *((_QWORD *)this + 3);
  v21 = *(unsigned int *)(v20 + 12);
  if ((_DWORD)v21)
  {
    v23 = *(WTF::StringImpl ***)v20;
    v24 = 8 * v21;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          v30 = v9;
          WTF::StringImpl::destroy(v25, v3);
          v9 = v30;
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v22 = *(WTF **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)v20 = 0;
    *(_DWORD *)(v20 + 8) = 0;
    v31 = v9;
    WTF::fastFree(v22, v3);
    *(_QWORD *)&v9 = v31;
  }
  *(_QWORD *)v20 = v4;
  *(_QWORD *)(v20 + 8) = v9;
}

void WebCore::ChangeVersionWrapper::~ChangeVersionWrapper(WebCore::ChangeVersionWrapper *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E336D8F8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v9 = v3;
          WTF::StringImpl::destroy(v8, a2);
          v3 = v9;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E336D8F8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v9 = v3;
          WTF::StringImpl::destroy(v8, a2);
          v3 = v9;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ChangeVersionWrapper::sqlError(WebCore::ChangeVersionWrapper *this)
{
  return *((_QWORD *)this + 4);
}

void WebCore::DatabaseOpenTask::~DatabaseOpenTask(WebCore::DatabaseOpenTask *this)
{
  *(_QWORD *)this = off_1E336D990;
}

void WebCore::DatabaseOpenTask::~DatabaseOpenTask(WTF *this, void *a2)
{
  *(_QWORD *)this = off_1E336D990;
  WTF::fastFree(this, a2);
}

void WebCore::DatabaseCloseTask::~DatabaseCloseTask(WebCore::DatabaseCloseTask *this)
{
  *(_QWORD *)this = off_1E336D990;
}

void WebCore::DatabaseCloseTask::~DatabaseCloseTask(WTF *this, void *a2)
{
  *(_QWORD *)this = off_1E336D990;
  WTF::fastFree(this, a2);
}

void WebCore::DatabaseTableNamesTask::~DatabaseTableNamesTask(WebCore::DatabaseTableNamesTask *this)
{
  *(_QWORD *)this = off_1E336D990;
}

void WebCore::DatabaseTableNamesTask::~DatabaseTableNamesTask(WTF *this, void *a2)
{
  *(_QWORD *)this = off_1E336D990;
  WTF::fastFree(this, a2);
}

uint64_t WebCore::DatabaseContext::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebCore::DatabaseContext::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  v2 = this + 6;
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    atomic_store(1u, this + 6);
    WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)this, a2);
    return (unsigned int *)WTF::fastFree(v5, v6);
  }
  return this;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_0,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_1,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_2,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_3,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_4,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_5,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&>@<X0>(WebCore::SecurityContext ***a1@<X0>, WTF::StringImpl *a2@<X1>, char *a3@<X8>)
{
  WebCore::HTMLImageElement *v5;
  const WebCore::SecurityOrigin *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t result;
  float v11;
  char v12;
  char v13;
  char v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19[2];

  v5 = *(WebCore::HTMLImageElement **)a2;
  WebCore::SecurityContext::securityOrigin(**a1, a2);
  if (!WebCore::HTMLImageElement::originClean(v5, v6))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = 14;
LABEL_17:
    *a3 = v14;
    a3[16] = 1;
    return result;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 176) + 24);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
LABEL_16:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = 8;
    goto LABEL_17;
  }
  if ((*(_WORD *)(v8 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v8 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v19);
    v16 = (unsigned int *)v19[0];
    if (v19[0])
    {
      v9 = (WTF *)*((_QWORD *)v19[0] + 1);
      v19[0] = 0;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v15);
      }
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = *(WTF **)(v8 + 688);
    if (v9)
      goto LABEL_6;
    {
      v9 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v19);
      v9 = v19[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v19[0];
    }
  }
  if (!v9)
    goto LABEL_16;
LABEL_6:
  ++*((_DWORD *)v9 + 2);
  if ((*(float (**)(WTF *, _QWORD))(*(_QWORD *)v9 + 168))(v9, 0) == 0.0
    || (result = (*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)v9 + 168))(v9, 0), v11 == 0.0))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 1;
    v12 = 8;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  *a3 = v12;
  a3[16] = v13;
  if (*((_DWORD *)v9 + 2) == 1)
    return (*(uint64_t (**)(WTF *))(*(_QWORD *)v9 + 8))(v9);
  --*((_DWORD *)v9 + 2);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_0,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_1,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_2,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_3,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_4,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_5,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&>@<X0>(WebCore::SVGImageElement **a1@<X1>, char *a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  float v9;
  char v10;
  char v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16[2];

  if (WebCore::SVGImageElement::renderingTaintsOrigin(*a1, a1))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 14;
LABEL_17:
    *a2 = v5;
    a2[16] = 1;
    return result;
  }
  v6 = *((_QWORD *)*a1 + 37);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
LABEL_16:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 8;
    goto LABEL_17;
  }
  if ((*(_WORD *)(v7 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v7 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v16);
    v13 = (unsigned int *)v16[0];
    if (v16[0])
    {
      v8 = (WTF *)*((_QWORD *)v16[0] + 1);
      v16[0] = 0;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = *(WTF **)(v7 + 688);
    if (v8)
      goto LABEL_7;
    {
      v8 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v16);
      v8 = v16[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v16[0];
    }
  }
  if (!v8)
    goto LABEL_16;
LABEL_7:
  ++*((_DWORD *)v8 + 2);
  if ((*(float (**)(WTF *, _QWORD))(*(_QWORD *)v8 + 168))(v8, 0) == 0.0
    || (result = (*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)v8 + 168))(v8, 0), v9 == 0.0))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = 1;
    v10 = 8;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  *a2 = v10;
  a2[16] = v11;
  if (*((_DWORD *)v8 + 2) == 1)
    return (*(uint64_t (**)(WTF *))(*(_QWORD *)v8 + 8))(v8);
  --*((_DWORD *)v8 + 2);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_0,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_1,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_2,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_3,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_4,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_5,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&>@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  BOOL v3;
  uint64_t result;
  char v5;
  char v6;

  if (!*(_BYTE *)(*(_QWORD *)a1 + 184))
  {
    v5 = 14;
    goto LABEL_9;
  }
  if (HIDWORD(*(_QWORD *)(*(_QWORD *)a1 + 120)))
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 120) == 0;
  else
    v3 = 1;
  if (v3)
  {
    v5 = 8;
LABEL_9:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = 1;
    goto LABEL_10;
  }
  v5 = 0;
  v6 = 0;
LABEL_10:
  *a2 = v5;
  a2[16] = v6;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_0,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_1,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_2,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_3,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_4,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_5,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&>@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  char v3;
  uint64_t result;
  char v5;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 32) & 1) != 0)
    {
      v3 = 0;
      v5 = 0;
      goto LABEL_7;
    }
    v3 = 14;
  }
  else
  {
    v3 = 8;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = 1;
LABEL_7:
  *a2 = v3;
  a2[16] = v5;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_0,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_1,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_2,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_3,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_4,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_5,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&>@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = 14;
  a1[16] = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_0,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_1,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_2,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_3,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_4,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_5,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&>@<X0>(uint64_t *a1@<X1>, char *a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;

  v3 = *a1;
  if (!*(_BYTE *)(*a1 + 104))
  {
    v4 = 14;
LABEL_7:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 1;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(v3 + 40) || !*(_DWORD *)(v3 + 44))
  {
    v4 = 8;
    goto LABEL_7;
  }
  v4 = 0;
  v5 = 0;
LABEL_8:
  *a2 = v4;
  a2[16] = v5;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_0,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_1,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_2,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_3,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_4,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_5,WebCore::checkImageUsability(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> const&>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, char *a3@<X8>)
{
  unsigned int *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  WebCore::ThreadableBlobRegistry *v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;

  WebCore::SecurityContext::securityOrigin(*(WebCore::SecurityContext **)(*(_QWORD *)a1 + 8), a2);
  v7 = (uint64_t)v5;
  if (v5)
  {
    do
      v8 = __ldaxr(v5);
    while (__stlxr(v8 + 1, v5));
  }
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 1136);
  if (!v10)
    goto LABEL_11;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 72) + 808))(*(_QWORD *)(v10 + 72)) & 1) != 0)
    goto LABEL_11;
  v11 = *(_QWORD *)(v9 + 1136);
  if (!v11)
    goto LABEL_11;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 72) + 816))(*(_QWORD *)(v11 + 72), v7);
  if (v12 < 0x100u)
  {
    v13 = (WebCore::ThreadableBlobRegistry *)(v11 + 104);
    if ((WTF::URL::protocolIs() & 1) != 0)
      goto LABEL_11;
    {
      WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
    }
    if (WebCore::SecurityOrigin::canRequest(v7, v13, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance))goto LABEL_11;
LABEL_20:
    v14 = 14;
    goto LABEL_13;
  }
  if ((_BYTE)v12)
    goto LABEL_20;
LABEL_11:
  if (*(int *)(*(_QWORD *)a2 + 904) > 1)
  {
    v14 = 0;
    v15 = 0;
    goto LABEL_15;
  }
  v14 = 8;
LABEL_13:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = 1;
LABEL_15:
  *a3 = v14;
  a3[16] = v15;
  do
  {
    v16 = __ldaxr((unsigned int *)v7);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v7));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v7);
    v18 = *(WTF::StringImpl **)(v7 + 48);
    *(_QWORD *)(v7 + 48) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v6);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(WTF::StringImpl **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v6);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(unsigned int *)(v7 + 32);
    if ((_DWORD)v20 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v20])(&v21, v7 + 8);
    *(_DWORD *)(v7 + 32) = -1;
    WTF::fastFree((WTF *)v7, v6);
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19CombinedPlaneLayoutENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *result;

  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19CombinedPlaneLayoutENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DOMRectInitENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,int,char,std::span<char const,18446744073709551615ul>,char>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, _QWORD *a7@<X8>)
{
  _OWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  BOOL v23;

  v9 = *(_OWORD **)result;
  v10 = *(_QWORD *)(result + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19559F060);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(a2 + 8);
  if (v12 && (--v12, v12 >> 31) || (v13 = *(_QWORD *)(a5 + 8), v13 >> 31))
  {
    __break(0xC471u);
    JUMPOUT(0x19559F000);
  }
  v14 = *a3;
  if ((*a3 & 0x80000000) != 0)
  {
    v22 = -v14;
    v15 = 1;
    do
    {
      ++v15;
      v23 = v22 >= 0xA;
      v22 /= 0xAu;
    }
    while (v23);
  }
  else
  {
    v15 = 0;
    v16 = v14;
    do
    {
      ++v15;
      v17 = v16 > 9;
      v16 /= 0xAu;
    }
    while (v17);
  }
  if (!__OFADD__((_DWORD)v13, 1))
  {
    v18 = v13 + 2;
    if (!__OFADD__(v13 + 1, 1) && (v15 & 0x80000000) == 0)
    {
      v19 = __OFADD__(v15, v18);
      v20 = v15 + v18;
      if (!v19)
      {
        v19 = __OFADD__((_DWORD)v12, v20);
        v21 = v12 + v20;
        if (!v19)
        {
          result = v11 + v21;
          if (!__OFADD__(v11, v21))
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<char,void>>(result, 1, v9, v11, *(int8x16_t **)a2, v12, v14, *a4, a7, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8), HIDWORD(*(_QWORD *)(a5 + 8)), *a6);
        }
      }
    }
  }
  *a7 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, char a8@<W7>, _QWORD *a9@<X8>, int8x16_t *a10, unsigned int a11, int a12, char a13)
{
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  _BYTE *v27;
  size_t v28;
  unsigned int v29;
  char *v30;
  _BYTE *v31;
  char *v33;
  char *v34;
  int8x16_t *v35;
  int v36;
  char *v37;
  __int128 v38;
  int8x16_t v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  _QWORD v53[3];
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  v18 = result;
  v19 = a9;
  v53[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v20 = v53[0];
        if (!v53[0])
        {
LABEL_24:
          v19 = a9;
          goto LABEL_39;
        }
        v21 = (_BYTE *)(v53[0] + 20);
        *(_DWORD *)v53[0] = 2;
        *(_DWORD *)(v20 + 4) = v18;
        *(_QWORD *)(v20 + 8) = v20 + 20;
        *(_DWORD *)(v20 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v21 = *(_BYTE *)a3;
          else
            result = (uint64_t)memcpy((void *)(v20 + 20), a3, a4);
        }
        v22 = &v21[a4];
        if (a6)
        {
          if (a6 == 1)
            *v22 = a5->i8[0];
          else
            result = (uint64_t)memcpy(v22, a5, a6);
        }
        v23 = &v22[a6];
        v24 = 0;
        if ((a7 & 0x80000000) != 0)
        {
          v46 = -a7;
          do
          {
            *((_BYTE *)&v53[1] + v24-- + 4) = (v46 % 0xA) | 0x30;
            v26 = v46 > 9;
            v46 /= 0xAu;
          }
          while (v26);
          v47 = v24 + 12;
          v27 = (char *)&v53[1] + v24 + 4;
          *v27 = 45;
          if (v24 + 14 <= 14)
          {
            if (v47 <= 12)
              v47 = 12;
            v28 = v47 - v24 - 11;
            goto LABEL_16;
          }
        }
        else
        {
          v25 = a7;
          do
          {
            *((_BYTE *)&v53[1] + v24-- + 4) = (v25 % 0xA) | 0x30;
            v26 = v25 > 9;
            v25 /= 0xAu;
          }
          while (v26);
          if (v24 + 14 <= 13)
          {
            v27 = (char *)&v53[1] + v24 + 5;
            v28 = -v24;
LABEL_16:
            result = (uint64_t)memcpy(v23, v27, v28);
          }
        }
        if ((a7 & 0x80000000) != 0)
        {
          v48 = -a7;
          v29 = 1;
          do
          {
            ++v29;
            v49 = v48 >= 0xA;
            v48 /= 0xAu;
          }
          while (v49);
        }
        else
        {
          v29 = 0;
          do
          {
            ++v29;
            v26 = a7 > 9;
            a7 /= 0xAu;
          }
          while (v26);
        }
        v30 = &v23[v29];
        *v30 = a8;
        v31 = v30 + 1;
        if (a11)
        {
          if (a11 == 1)
            *v31 = a10->i8[0];
          else
            result = (uint64_t)memcpy(v31, a10, a11);
        }
        v31[a11] = a13;
        goto LABEL_24;
      }
LABEL_41:
      v20 = 0;
      goto LABEL_39;
    }
LABEL_40:
    v20 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_39;
  }
  if (!(_DWORD)result)
    goto LABEL_40;
  if (result > 0x7FFFFFEF)
    goto LABEL_41;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v20 = v53[0];
  if (v53[0])
  {
    v33 = (char *)(v53[0] + 20);
    *(_DWORD *)v53[0] = 2;
    *(_DWORD *)(v20 + 4) = v18;
    *(_QWORD *)(v20 + 8) = v20 + 20;
    *(_DWORD *)(v20 + 16) = 0;
    v34 = (char *)(v20 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v37 = &v33[2 * (a4 & 0xFFFFFFC0)];
      v38 = 0uLL;
      v35 = a5;
      v36 = a11;
      do
      {
        v54.val[0] = (int8x16_t)*a3;
        v39 = *((int8x16_t *)a3 + 1);
        v55.val[0] = (int8x16_t)a3[2];
        v40 = a3[3];
        a3 += 4;
        v41 = v40;
        v55.val[1] = 0uLL;
        v56.val[0] = v39;
        v54.val[1] = 0uLL;
        v42 = v33;
        vst2q_s8(v42, v54);
        v42 += 32;
        v56.val[1] = 0uLL;
        vst2q_s8(v42, v56);
        v43 = v33 + 64;
        vst2q_s8(v43, v55);
        v44 = v33 + 96;
        vst2q_s8(v44, *(int8x16x2_t *)(&v38 - 1));
        v33 += 128;
      }
      while (v33 != v37);
      v33 = v37;
    }
    else
    {
      v35 = a5;
      v36 = a11;
    }
    while (v33 != v34)
    {
      v45 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v33 = v45;
      v33 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<char,void>>(v34, v35, a6, a7, a8, a10, v36, a13);
  }
LABEL_39:
  *v19 = v20;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, unsigned int a4, char a5, int8x16_t *a6, int a7, char a8)
{
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  char *v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  unsigned int v39;
  _BYTE v40[13];
  uint64_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &result[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v42.val[0] = *a2;
      v11 = a2[1];
      v44.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v44.val[1] = 0uLL;
      v46.val[0] = v11;
      v42.val[1] = 0uLL;
      v14 = result;
      vst2q_s8(v14, v42);
      v14 += 32;
      v46.val[1] = 0uLL;
      vst2q_s8(v14, v46);
      v15 = result + 64;
      vst2q_s8(v15, v44);
      v16 = result + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      result += 128;
    }
    while (result != v9);
    result = v9;
  }
  while (result != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v17;
    result += 2;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v23 = -a4;
    v24 = 12;
    do
    {
      v40[v24--] = (v23 % 0xA) | 0x30;
      v20 = v23 > 9;
      v23 /= 0xAu;
    }
    while (v20);
    v40[v24] = 45;
    if (v24 + 2 <= 14)
    {
      v25 = v8;
      do
      {
        *(_WORD *)v25 = v40[v24];
        v25 += 2;
        v20 = v24++ < 12;
      }
      while (v20);
    }
  }
  else
  {
    v18 = 0;
    v19 = a4;
    do
    {
      v40[v18-- + 12] = (v19 % 0xA) | 0x30;
      v20 = v19 > 9;
      v19 /= 0xAu;
    }
    while (v20);
    if (v18 + 14 <= 13)
    {
      v21 = v8;
      do
      {
        *(_WORD *)v21 = *((unsigned __int8 *)&v41 + v18);
        v21 += 2;
        v22 = __CFADD__(v18++, 1);
      }
      while (!v22);
    }
  }
  if ((a4 & 0x80000000) != 0)
  {
    v39 = -a4;
    v26 = 1;
    do
    {
      ++v26;
      v22 = v39 >= 0xA;
      v39 /= 0xAu;
    }
    while (v22);
  }
  else
  {
    v26 = 0;
    do
    {
      ++v26;
      v20 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v20);
  }
  v27 = &v8[2 * v26];
  *(_WORD *)v27 = a5;
  v28 = v27 + 2;
  v29 = &v28[2 * a7];
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v30 = &v28[2 * (a7 & 0xFFFFFFC0)];
    v31 = 0uLL;
    do
    {
      v43.val[0] = *a6;
      v32 = a6[1];
      v45.val[0] = a6[2];
      v33 = a6[3];
      a6 += 4;
      v34 = v33;
      v45.val[1] = 0uLL;
      v47.val[0] = v32;
      v43.val[1] = 0uLL;
      v35 = v28;
      vst2q_s8(v35, v43);
      v35 += 32;
      v47.val[1] = 0uLL;
      vst2q_s8(v35, v47);
      v36 = v28 + 64;
      vst2q_s8(v36, v45);
      v37 = v28 + 96;
      vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
      v28 += 128;
    }
    while (v28 != v30);
    v28 = v30;
  }
  while (v28 != v29)
  {
    v38 = a6->u8[0];
    a6 = (int8x16_t *)((char *)a6 + 1);
    *(_WORD *)v28 = v38;
    v28 += 2;
  }
  *(_WORD *)v29 = a8;
  return result;
}

WTF::StringImpl *WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<int const&,WTF::String>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;

  v6 = qword_1ECE82108;
  if (qword_1ECE82108
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(8u, 0), (v6 = qword_1ECE82108) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *(_DWORD *)a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (WTF::StringImpl *)(v6 + 16 * v12);
  v14 = *(_DWORD *)v13;
  if (!*(_DWORD *)v13)
  {
LABEL_12:
    *(_DWORD *)v13 = v9;
    v17 = *a3;
    *a3 = 0;
    result = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    if (qword_1ECE82108)
      v19 = *(_DWORD *)(qword_1ECE82108 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(qword_1ECE82108 - 12) = v19;
    v21 = qword_1ECE82108;
    if (qword_1ECE82108)
      v22 = *(_DWORD *)(qword_1ECE82108 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(qword_1ECE82108 - 16) + v22);
    v24 = *(unsigned int *)(qword_1ECE82108 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
        goto LABEL_26;
    }
    else if (3 * v24 <= 4 * v23)
    {
      if (!(_DWORD)v24)
      {
        v25 = 8;
LABEL_33:
        result = (WTF::StringImpl *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(v25, (int *)v13);
        v13 = result;
        v21 = qword_1ECE82108;
        if (qword_1ECE82108)
          v24 = *(unsigned int *)(qword_1ECE82108 - 4);
        else
          v24 = 0;
        goto LABEL_37;
      }
LABEL_26:
      v25 = (_DWORD)v24 << (6 * *(_DWORD *)(qword_1ECE82108 - 12) >= (2 * v24));
      goto LABEL_33;
    }
LABEL_37:
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v21 + 16 * v24;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v9)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (WTF::StringImpl *)(v6 + 16 * v12);
    v14 = *(_DWORD *)v13;
    ++v16;
    if (!*(_DWORD *)v13)
    {
      if (v15)
      {
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        --*(_DWORD *)(v6 - 16);
        v9 = *(_DWORD *)a2;
        v13 = v15;
      }
      goto LABEL_12;
    }
  }
  if ((v7 & 1) != 0)
    v20 = 0;
  else
    v20 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v6 + 16 * v20;
  *(_BYTE *)(a1 + 16) = 0;
  v26 = *a3;
  *a3 = 0;
  result = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v26;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::String>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(unsigned int a1, int *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t result;

  v4 = qword_1ECE82108;
  if (qword_1ECE82108)
  {
    v5 = *(_DWORD *)(qword_1ECE82108 - 4);
    v6 = *(_DWORD *)(qword_1ECE82108 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE82108 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE82108 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (int *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          if (qword_1ECE82108)
            v15 = *(_DWORD *)(qword_1ECE82108 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
          v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
          do
          {
            v19 = v18 & v15;
            v18 = ++v16 + v19;
          }
          while (*(_DWORD *)(qword_1ECE82108 + 16 * v19));
          v20 = qword_1ECE82108 + 16 * v19;
          v21 = *(WTF::StringImpl **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
          *(_DWORD *)v20 = *v11;
          v22 = v4 + 16 * v9;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v23;
          v24 = *(WTF::StringImpl **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v8);
            else
              *(_DWORD *)v24 -= 2;
          }
          if (v11 == a2)
            v10 = v20;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v8);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::fullyQualifiedInfoTableName(void)::$_0 &&>>()
{
  WebCore::fullyQualifiedInfoTableName(void)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
  qword_1ECE82110 = (uint64_t)&WebCore::fullyQualifiedInfoTableName(void)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::impl;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      WebCore::Database::~Database((WebCore::Database *)result);
      return (unsigned int *)WTF::fastFree(v5, v6);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF3RefIN7WebCore8DatabaseENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS9_9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEESS_EEEDcSJ_DpT0_(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = *a2;
  *a2 = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WebCore::Database::~Database((WebCore::Database *)v6);
      WTF::fastFree(v12, v13);
    }
  }
  result = *a3;
  *a3 = v4;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      WebCore::Database::~Database((WebCore::Database *)result);
      return (unsigned int *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF3RefIN7WebCore8DatabaseENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS9_9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SG_EEESS_EEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSG_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSG_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore8DatabaseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSG_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSG_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoFrame::~WebCodecsVideoFrame()::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 248))(a2, 1, 1, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &&,WebCore::WebCodecsVideoFrame::Init &&)::$_0,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_1,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_2,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_3,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_4,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_5,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::VideoFrame *v32;
  WTF *v33[2];

  v4 = *a1;
  if (!*(_BYTE *)(*(_QWORD *)*a1 + 24))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 176) + 24);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if ((*(_WORD *)(v5 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v5 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v33);
    v28 = (unsigned int *)v33[0];
    if (v33[0])
    {
      v29 = (WTF *)*((_QWORD *)v33[0] + 1);
      v33[0] = 0;
      do
      {
        v30 = __ldaxr(v28);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v28));
      if (!v31)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v27);
      }
    }
    else
    {
      v29 = 0;
    }
    v6 = v29;
  }
  else
  {
    v6 = *(WTF **)(v5 + 688);
    if (!v6)
    {
      {
        v6 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v33);
        v6 = v33[0];
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v33[0];
      }
    }
  }
  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v6 + 304))(v33);
  v7 = v33[0];
  if (!v33[0])
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_25;
  }
  v32 = v33[0];
  v33[0] = 0;
  result = WebCore::WebCodecsVideoFrame::initializeFrameWithResourceAndSize(a3, *(WebCore::ScriptExecutionContext **)(v4 + 8), &v32, *(_QWORD *)v4);
  v32 = 0;
  v10 = *((_QWORD *)v7 + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_13;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_13:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v26 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v26 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_20:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      goto LABEL_25;
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_20;
  if (v13)
    goto LABEL_25;
LABEL_21:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    result = WTF::fastFree((WTF *)v10, v9);
LABEL_25:
  v17 = v33[0];
  v33[0] = 0;
  if (!v17)
    return result;
  v18 = *((_QWORD *)v17 + 1);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_30;
  }
  result = MEMORY[0x19AEA534C](v18);
LABEL_30:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v25 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v25 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
LABEL_37:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21)
      return result;
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
    goto LABEL_37;
  if (v21)
    return result;
LABEL_38:
  if (v22)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (!v23)
    return WTF::fastFree((WTF *)v18, v9);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &&,WebCore::WebCodecsVideoFrame::Init &&)::$_0,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_1,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_2,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_3,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_4,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_5,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int *v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  WebCore::VideoFrame *v32;
  WTF *v33[2];

  v4 = *a1;
  if (!*(_BYTE *)(*(_QWORD *)(*a1 + 16) + 24))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 296);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if ((*(_WORD *)(v5 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v5 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v33);
    v28 = (unsigned int *)v33[0];
    if (v33[0])
    {
      v29 = (WTF *)*((_QWORD *)v33[0] + 1);
      v33[0] = 0;
      do
      {
        v30 = __ldaxr(v28);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v28));
      if (!v31)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v27);
      }
    }
    else
    {
      v29 = 0;
    }
    v6 = v29;
  }
  else
  {
    v6 = *(WTF **)(v5 + 688);
    if (!v6)
    {
      {
        v6 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v33);
        v6 = v33[0];
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v33[0];
      }
    }
  }
  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v6 + 304))(v33);
  v7 = v33[0];
  if (!v33[0])
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_25;
  }
  v32 = v33[0];
  v33[0] = 0;
  result = WebCore::WebCodecsVideoFrame::initializeFrameWithResourceAndSize(a3, *(WebCore::ScriptExecutionContext **)(v4 + 24), &v32, *(_QWORD *)(v4 + 16));
  v32 = 0;
  v10 = *((_QWORD *)v7 + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_13;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_13:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v26 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v26 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_20:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      goto LABEL_25;
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_20;
  if (v13)
    goto LABEL_25;
LABEL_21:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    result = WTF::fastFree((WTF *)v10, v9);
LABEL_25:
  v17 = v33[0];
  v33[0] = 0;
  if (!v17)
    return result;
  v18 = *((_QWORD *)v17 + 1);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_30;
  }
  result = MEMORY[0x19AEA534C](v18);
LABEL_30:
  v20 = *(_QWORD *)(v18 + 8);
  v21 = v20 - 1;
  *(_QWORD *)(v18 + 8) = v20 - 1;
  if (v20 == 1)
  {
    v25 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v23 = v25 != 0;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = __ldxr((unsigned __int8 *)v18);
  if (v24 != 1)
  {
    __clrex();
LABEL_37:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21)
      return result;
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
    goto LABEL_37;
  if (v21)
    return result;
LABEL_38:
  if (v22)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (!v23)
    return WTF::fastFree((WTF *)v18, v9);
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &&,WebCore::WebCodecsVideoFrame::Init &&)::$_0,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_1,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_2,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_3,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_4,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_5,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &>@<X0>(uint64_t *a1@<X0>, WebCore::HTMLCanvasElement **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WebCore::HTMLCanvasElement *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *result;
  char v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;

  v4 = *a1;
  if (!*(_BYTE *)(*(_QWORD *)(*a1 + 64) + 24))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = 33;
    goto LABEL_12;
  }
  v5 = *a2;
  if (!*((_DWORD *)*a2 + 30) || !*((_DWORD *)v5 + 31))
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = 8;
LABEL_12:
    *(_BYTE *)a3 = v11;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  WebCore::HTMLCanvasElement::toVideoFrame(v5, (uint64_t *)&v16);
  if (v16)
  {
    v15 = (uint64_t)v16;
    v16 = 0;
    WebCore::WebCodecsVideoFrame::initializeFrameFromOtherFrame(a3, *(WebCore::ScriptExecutionContext **)(v4 + 72), &v15, *(_QWORD *)(v4 + 64), 1);
    v6 = (unsigned int *)v15;
    v15 = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    v12 = result + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &&,WebCore::WebCodecsVideoFrame::Init &&)::$_0,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_1,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_2,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_3,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_4,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_5,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  float v7;
  BOOL v8;
  BOOL v9;
  float v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  char v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;

  v4 = *a1;
  if (!*(_BYTE *)(*(_QWORD *)(*a1 + 96) + 24))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = 33;
    goto LABEL_21;
  }
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (!v6
    || ((v7 = *(float *)(v6 + 16), v7 < 2147500000.0) ? (v8 = v7 <= -2147500000.0) : (v8 = 1),
        !v8 ? (v9 = (int)v7 == 0) : (v9 = 0),
        v9
     || ((v10 = *(float *)(v6 + 20), v10 < 2147500000.0) ? (v11 = v10 <= -2147500000.0) : (v11 = 1),
         !v11 ? (v12 = (int)v10 == 0) : (v12 = 0),
         v12)))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = 8;
LABEL_21:
    *(_BYTE *)a3 = v15;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  v13 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_25:
  ++*(_QWORD *)(v13 + 8);
  v16 = __ldxr((unsigned __int8 *)v13);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v17)
  {
    v18 = *(float *)(v17 + 16);
    v19 = *(float *)(v17 + 20);
    if (v18 > -2147500000.0)
      LODWORD(v17) = (int)v18;
    else
      LODWORD(v17) = 0x80000000;
    if (v18 >= 2147500000.0)
      LODWORD(v17) = 0x7FFFFFFF;
    v20 = 0x7FFFFFFF00000000;
    v21 = 0x8000000000000000;
    if (v19 > -2147500000.0)
      v21 = (unint64_t)(int)v19 << 32;
    if (v19 < 2147500000.0)
      v20 = v21;
  }
  else
  {
    v20 = 0;
  }
  WebCore::WebCodecsVideoFrame::create(a3, *(WebCore::ScriptExecutionContext **)(v4 + 104), v6, v20 | v17, *(_QWORD *)(v4 + 96));
  v23 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
    goto LABEL_46;
  }
  MEMORY[0x19AEA534C](v23);
LABEL_46:
  v25 = *(_QWORD *)(v23 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v23 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v30 = *(_QWORD *)(v23 + 16);
    v27 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v23 + 24) = 0;
    v28 = v30 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v23);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_52;
  }
  if (__stlxr(0, (unsigned __int8 *)v23))
LABEL_52:
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
  if (!v26)
  {
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (!v28)
      WTF::fastFree((WTF *)v23, v22);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &&,WebCore::WebCodecsVideoFrame::Init &&)::$_0,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_1,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_2,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_3,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_4,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_5,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  WTF *v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::VideoFrame *v33;
  WTF *v34[2];

  v4 = *a1;
  if (!*(_BYTE *)(*(_QWORD *)(*a1 + 32) + 24))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  if (*(_BYTE *)(v5 + 64))
  {
    v6 = *(_QWORD *)(v5 + 56);
    if (v6)
      v6 = *(_QWORD *)(v6 + 8);
  }
  else
  {
    v6 = 0;
  }
  if ((*(_WORD *)(v6 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v6 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v34);
    v29 = (unsigned int *)v34[0];
    if (v34[0])
    {
      v30 = (WTF *)*((_QWORD *)v34[0] + 1);
      v34[0] = 0;
      do
      {
        v31 = __ldaxr(v29);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v29));
      if (!v32)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v28);
      }
    }
    else
    {
      v30 = 0;
    }
    v7 = v30;
  }
  else
  {
    v7 = *(WTF **)(v6 + 688);
    if (!v7)
    {
      {
        v7 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v34);
        v7 = v34[0];
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v34[0];
      }
    }
  }
  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v7 + 304))(v34);
  v8 = v34[0];
  if (!v34[0])
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_26;
  }
  v33 = v34[0];
  v34[0] = 0;
  result = WebCore::WebCodecsVideoFrame::initializeFrameWithResourceAndSize(a3, *(WebCore::ScriptExecutionContext **)(v4 + 40), &v33, *(_QWORD *)(v4 + 32));
  v33 = 0;
  v11 = *((_QWORD *)v8 + 1);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_14;
  }
  result = MEMORY[0x19AEA534C](v11);
LABEL_14:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v27 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v27 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 != 1)
  {
    __clrex();
LABEL_21:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      goto LABEL_26;
    goto LABEL_22;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
    goto LABEL_21;
  if (v14)
    goto LABEL_26;
LABEL_22:
  if (v15)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    result = WTF::fastFree((WTF *)v11, v10);
LABEL_26:
  v18 = v34[0];
  v34[0] = 0;
  if (!v18)
    return result;
  v19 = *((_QWORD *)v18 + 1);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_31;
  }
  result = MEMORY[0x19AEA534C](v19);
LABEL_31:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v26 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v26 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 != 1)
  {
    __clrex();
LABEL_38:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22)
      return result;
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v19))
    goto LABEL_38;
  if (v22)
    return result;
LABEL_39:
  if (v23)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (!v24)
    return WTF::fastFree((WTF *)v19, v10);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &&,WebCore::WebCodecsVideoFrame::Init &&)::$_0,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_1,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_2,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_3,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_4,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_5,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a1;
  if (!*(_BYTE *)(*(_QWORD *)(*a1 + 80) + 24))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 33;
    goto LABEL_8;
  }
  v6 = *a2;
  if (!*(_DWORD *)(*a2 + 40) || !*(_DWORD *)(v6 + 44))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
LABEL_8:
    *(_BYTE *)a3 = v9;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  v7 = 1;
  WebCore::CanvasBase::makeRenderingResultsAvailable(v6 + 32, 1, &v18);
  if (v18)
  {
    WebCore::WebCodecsVideoFrame::create(a3, *(WebCore::ScriptExecutionContext **)(v4 + 88), v18, *(_QWORD *)(*a2 + 40), *(_QWORD *)(v4 + 80));
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
  }
  v10 = v18;
  v18 = 0;
  if (!v10)
    return;
  v11 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_16:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v17 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v7 = v17 != 0;
  }
  else
  {
    v15 = 0;
  }
  v16 = __ldxr((unsigned __int8 *)v11);
  if (v16 != 1)
  {
    __clrex();
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
    goto LABEL_23;
  if (v14)
    return;
LABEL_24:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v7)
    WTF::fastFree((WTF *)v11, v8);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &&,WebCore::WebCodecsVideoFrame::Init &&)::$_0,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_1,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_2,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_3,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_4,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_5,WebCore::WebCodecsVideoFrame::create(WebCore::ScriptExecutionContext &,std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &,WebCore::WebCodecsVideoFrame::Init)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 1136);
  if (!v4)
  {
    v15 = 0;
    goto LABEL_9;
  }
  v5 = *a1;
  (*(void (**)(unsigned int **__return_ptr))(**(_QWORD **)(v4 + 72) + 664))(&v15);
  if (!v15)
  {
LABEL_9:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_10;
  }
  v14 = v15;
  v15 = 0;
  WebCore::WebCodecsVideoFrame::initializeFrameFromOtherFrame(a3, *(WebCore::ScriptExecutionContext **)(v5 + 48), &v14, *(_QWORD *)(v5 + 56), 0);
  v6 = v14;
  v14 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
LABEL_10:
  result = v15;
  v15 = 0;
  if (result)
  {
    v11 = result + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoFrame::copyTo(WebCore::BufferSource &&,WebCore::WebCodecsVideoFrame::CopyToOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::PlaneLayout>>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDLSequence,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_1E336DBE0;
  v2 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E336DAD0[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoFrame::copyTo(WebCore::BufferSource &&,WebCore::WebCodecsVideoFrame::CopyToOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::PlaneLayout>>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDLSequence,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)this = &off_1E336DBE0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E336DAD0[v4])(&v6, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebCodecsVideoFrame::copyTo(WebCore::BufferSource &&,WebCore::WebCodecsVideoFrame::CopyToOptions &&,WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::PlaneLayout>>> &&)::$_0,void,std::optional<WTF::Vector<WebCore::IDLSequence,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>::call(WTF::StringImpl *result, _BYTE *a2)
{
  WTF::StringImpl *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  uint64_t v12;
  WTF *v13;
  objc_class *v14;
  int v15;
  BOOL v16;
  JSValue v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSC::VM *v23;
  objc_class *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v32;
  int v33;
  _BYTE v34[8];
  void *v35;
  WTF::StringImpl *v36;
  unsigned __int8 v37[8];
  WTF::StringImpl *v38;
  WTF *v39;
  _OWORD v40[4];
  uint64_t v41;
  objc_class *v42;

  v2 = result;
  if (a2[16])
  {
    v3 = *(WTF **)a2;
    v4 = *((unsigned int *)a2 + 3);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v5 = *((_QWORD *)result + 3);
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6 || !*(_QWORD *)v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
      goto LABEL_42;
    v7 = *(_QWORD *)(v5 + 32);
    if (!v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
      v8 = 0;
    else
      v8 = *(uint64_t **)v7;
    v9 = v8[7];
    MEMORY[0x19AEA3294](v34, v9);
    v10 = **(_QWORD **)(v5 + 32);
    v11 = (objc_class *)v8[7];
    v42 = v11;
    v37[0] = 0;
    v38 = (WTF::StringImpl *)0x800000000;
    v39 = (WTF *)((char *)v40 + 8);
    memset(v40, 0, sizeof(v40));
    v41 = 0;
    if (v4 >= 9)
    {
      v37[0] = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v38) == 1;
    }
    else if (!(_DWORD)v4)
    {
LABEL_34:
      v35 = v39;
      LODWORD(v36) = (_DWORD)v38;
      v23 = *(JSC::VM **)(v10 + 56);
      if (!*((_DWORD *)v23 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) == 0)
      {
        v24 = (objc_class *)JSC::constructArray();
        goto LABEL_36;
      }
LABEL_54:
      v24 = 0;
LABEL_36:
      v25 = *(uint64_t **)&v40[0];
      if (*(_QWORD *)&v40[0])
      {
        v35 = &v38;
        v28 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v40[0], (uint64_t *)&v35);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v25, v28);
      }
      if (v39 != (WTF *)((char *)v40 + 8) && v39)
        WTF::fastFree(v39, v18);
      v26 = *(_QWORD *)(v9 + 16);
      if (!v26)
      {
        WebCore::DeferredPromise::callFunction(v5, v8, 0, v24);
        v26 = *(_QWORD *)(v9 + 16);
        if (!v26)
          goto LABEL_41;
      }
      v27 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v8);
      if (!(*(unsigned int (**)(_QWORD *))(*v27 + 64))(v27))
      {
LABEL_51:
        WebCore::reportException((JSC::JSGlobalObject *)v8, v26, 0, 0, 0);
LABEL_41:
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v34);
LABEL_42:
        if (v3)
          return (WTF::StringImpl *)WTF::fastFree(v3, a2);
        return result;
      }
      v29 = v27[43];
      if (*(_QWORD *)(v9 + 24) == v26)
      {
LABEL_68:
        *(_BYTE *)(*(_QWORD *)(v29 + 8) + 93442) = 1;
        *(_BYTE *)(v5 + 44) = 1;
        goto LABEL_51;
      }
      if (!v29)
        goto LABEL_51;
      v30 = (unsigned __int8 *)(v29 + 40);
      if (__ldaxr((unsigned __int8 *)(v29 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v30))
      {
        goto LABEL_62;
      }
      MEMORY[0x19AEA534C](v29 + 40);
LABEL_62:
      v32 = *(unsigned __int8 *)(v29 + 41);
      v33 = __ldxr(v30);
      if (v33 == 1)
      {
        if (!__stlxr(0, v30))
        {
LABEL_67:
          if (!v32)
            goto LABEL_51;
          goto LABEL_68;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v29 + 40));
      goto LABEL_67;
    }
    v12 = 16 * v4;
    v13 = v3;
    while (1)
    {
      v14 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v8, v10, v13);
      if (*((_DWORD *)v11 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
          goto LABEL_54;
      }
      v15 = (int)v38;
      if ((_DWORD)v38 != HIDWORD(v38) && (v39 != (WTF *)((char *)v40 + 8) ? (v16 = v39 == 0) : (v16 = 1), v16))
      {
        *((_QWORD *)v39 + v38) = v14;
        LODWORD(v38) = v15 + 1;
      }
      else
      {
        v17.super.isa = v14;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v38, v17) == 1)
          v37[0] = 1;
      }
      v13 = (WTF *)((char *)v13 + 16);
      v12 -= 16;
      if (!v12)
      {
        if (!v37[0])
          goto LABEL_34;
        JSC::throwOutOfMemoryError();
        goto LABEL_54;
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = *((_QWORD *)v2 + 3);
  LOBYTE(v35) = 33;
  v42 = 0;
  v37[0] = 33;
  v20 = v36;
  if (v36)
    *(_DWORD *)v36 += 2;
  v38 = v20;
  WebCore::DeferredPromise::reject(v19, v37, 0, &v42);
  v22 = v38;
  v38 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(uint64_t result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  do
  {
    v2 = __ldaxr((unsigned int *)result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)result));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)result);
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v13 = result;
      v11 = *(_QWORD *)(result + 24);
      v6 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v6)
      {
        v7 = *(WTF::StringImpl ***)(result + 24);
        do
        {
          v8 = *v7;
          if (*v7 != (WTF::StringImpl *)-1)
          {
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
              {
                v9 = v7;
                v10 = v6;
                WTF::StringImpl::destroy(v8, a2);
                v7 = v9;
                v6 = v10;
              }
              else
              {
                *(_DWORD *)v8 -= 2;
              }
            }
          }
          ++v7;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v11 - 16), a2);
      result = v13;
    }
    v5 = *(WTF::StringImpl **)(result + 16);
    *(_QWORD *)(result + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
      {
        v12 = result;
        WTF::StringImpl::destroy(v5, a2);
        result = v12;
      }
      else
      {
        *(_DWORD *)v5 -= 2;
      }
    }
    return WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(unsigned int a1, int *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v4 = qword_1ECE82100;
  if (qword_1ECE82100)
  {
    v5 = *(_DWORD *)(qword_1ECE82100 - 4);
    v6 = *(_DWORD *)(qword_1ECE82100 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  if (a1)
  {
    v9 = a1;
    v10 = v7 + 6;
    do
    {
      *((_DWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  qword_1ECE82100 = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(qword_1ECE82100 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (int *)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          if (qword_1ECE82100)
            v16 = *(_DWORD *)(qword_1ECE82100 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
          v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
          do
          {
            v20 = v19 & v16;
            v19 = ++v17 + v20;
          }
          while (*(_DWORD *)(qword_1ECE82100 + 16 * v20));
          v21 = qword_1ECE82100 + 16 * v20;
          v23 = (_QWORD *)(v21 + 8);
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
          {
            WTF::fastFree((WTF *)(v22 - 16), v8);
            v14 = *v13;
          }
          *(_DWORD *)v21 = v14;
          v24 = v4 + 16 * v11;
          *v23 = 0;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *v23 = v25;
          v26 = *(_QWORD *)(v24 + 8);
          if (v26)
            WTF::fastFree((WTF *)(v26 - 16), v8);
          if (v13 == a2)
            v12 = v21;
        }
        else
        {
          v15 = *(_QWORD *)(v4 + 16 * v11 + 8);
          if (v15)
            WTF::fastFree((WTF *)(v15 - 16), v8);
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Database::~Database()::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v9;
  void *v10;

  *a1 = &off_1E336DC08;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v3, a2);
      WTF::fastFree(v9, v10);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Database::~Database()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E336DC08;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 6;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v3, a2);
      WTF::fastFree(v9, v10);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _OWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t *v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  _BOOL4 v25;

  v9 = *(_OWORD **)result;
  v10 = *(_QWORD *)(result + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
      goto LABEL_28;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a2;
  v13 = *(int8x16_t **)a3;
  v14 = *(_QWORD *)(a3 + 8);
  if (v14)
  {
    v15 = v14 - 1;
    if ((unint64_t)(v14 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1955A15C0);
    }
  }
  else
  {
    v15 = 0;
  }
  v17 = *(int8x16_t **)a4;
  v16 = *(_QWORD *)(a4 + 8);
  if (v16)
  {
    if ((unint64_t)--v16 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1955A15ECLL);
    }
  }
  v19 = *(int8x16_t **)a5;
  v18 = *(_QWORD *)(a5 + 8);
  if (v18)
  {
    if ((unint64_t)--v18 >> 31)
    {
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x1955A1594);
    }
  }
  if (v12)
    v20 = *(_DWORD *)(v12 + 4);
  else
    v20 = 0;
  v21 = v16 + v18;
  if (__OFADD__((_DWORD)v16, (_DWORD)v18)
    || (v22 = __OFADD__(v15, v21), v23 = v15 + v21, v22)
    || v20 < 0
    || (v22 = __OFADD__(v20, v23), v24 = v20 + v23, v22)
    || (result = v11 + v24, __OFADD__(v11, v24)))
  {
    *a6 = 0;
  }
  else
  {
    v25 = !v12 || (*(_BYTE *)(v12 + 16) & 4) != 0;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v25, v9, v11, v12, v13, v15, a6, v17, v16, v19, v18);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>, int8x16_t *a9, unsigned int a10, int8x16_t *a11, unsigned int a12)
{
  int v16;
  _QWORD *i;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int8x16_t v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  unsigned __int128 *v37;
  unsigned __int128 *v38;
  unsigned __int128 *v39;
  unsigned __int128 v40;
  char v41;
  uint64_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  v16 = result;
  i = a8;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = v44;
        if (!v44)
          goto LABEL_33;
        v19 = (_BYTE *)(v44 + 20);
        *(_DWORD *)v44 = 2;
        *(_DWORD *)(v44 + 4) = v16;
        *(_QWORD *)(v44 + 8) = v44 + 20;
        *(_DWORD *)(v44 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v19 = *(_BYTE *)a3;
          else
            result = (uint64_t)memcpy((void *)(v44 + 20), a3, a4);
        }
        v20 = &v19[a4];
        if (a5)
        {
          v21 = *(_BYTE **)(a5 + 8);
          v22 = *(unsigned int *)(a5 + 4);
          if ((*(_BYTE *)(a5 + 16) & 4) != 0)
          {
            i = a8;
            if ((_DWORD)v22)
            {
              if ((_DWORD)v22 == 1)
                *v20 = *v21;
              else
                result = (uint64_t)memcpy(v20, v21, v22);
            }
          }
          else
          {
            v37 = (unsigned __int128 *)&v20[v22];
            if (v22 < 0x10)
            {
              v38 = (unsigned __int128 *)&v19[a4];
            }
            else
            {
              v38 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
              v39 = (unsigned __int128 *)&v19[a4];
              do
              {
                v40 = (unsigned __int128)vld2q_s8(v21);
                v21 += 32;
                *v39++ = v40;
              }
              while (v39 != v38);
            }
            for (i = a8; v38 != v37; v38 = (unsigned __int128 *)((char *)v38 + 1))
            {
              v41 = *v21;
              v21 += 2;
              *(_BYTE *)v38 = v41;
            }
          }
          v23 = *(unsigned int *)(a5 + 4);
        }
        else
        {
          v23 = 0;
          i = a8;
        }
        v24 = &v20[v23];
        if (a7)
        {
          if (a7 == 1)
            *v24 = a6->i8[0];
          else
            result = (uint64_t)memcpy(&v20[v23], a6, a7);
        }
        v25 = &v24[a7];
        if (a10)
        {
          if (a10 == 1)
          {
            *v25 = a9->i8[0];
            if (!a12)
              goto LABEL_33;
LABEL_21:
            result = (uint64_t)&v25[a10];
            if (a12 == 1)
              *(_BYTE *)result = a11->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a11, a12);
            goto LABEL_33;
          }
          result = (uint64_t)memcpy(v25, a9, a10);
        }
        if (!a12)
          goto LABEL_33;
        goto LABEL_21;
      }
LABEL_42:
      v18 = 0;
      goto LABEL_33;
    }
LABEL_41:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_33;
  }
  if (!(_DWORD)result)
    goto LABEL_41;
  if (result > 0x7FFFFFEF)
    goto LABEL_42;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = v44;
  if (v44)
  {
    v26 = (char *)(v44 + 20);
    *(_DWORD *)v44 = 2;
    *(_DWORD *)(v44 + 4) = v16;
    *(_QWORD *)(v44 + 8) = v44 + 20;
    *(_DWORD *)(v44 + 16) = 0;
    v27 = (char *)(v44 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v28 = &v26[2 * (a4 & 0xFFFFFFC0)];
      v29 = 0uLL;
      do
      {
        v45.val[0] = (int8x16_t)*a3;
        v30 = *((int8x16_t *)a3 + 1);
        v46.val[0] = (int8x16_t)a3[2];
        v31 = a3[3];
        a3 += 4;
        v32 = v31;
        v46.val[1] = 0uLL;
        v47.val[0] = v30;
        v45.val[1] = 0uLL;
        v33 = v26;
        vst2q_s8(v33, v45);
        v33 += 32;
        v47.val[1] = 0uLL;
        vst2q_s8(v33, v47);
        v34 = v26 + 64;
        vst2q_s8(v34, v46);
        v35 = v26 + 96;
        vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
        v26 += 128;
      }
      while (v26 != v28);
      v26 = v28;
    }
    while (v26 != v27)
    {
      v36 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v26 = v36;
      v26 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v27, a5, a6, a7, a9, a10, a11, a12);
  }
LABEL_33:
  *i = v18;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_WORD *__dst, uint64_t a2, int8x16_t *a3, int a4, int8x16_t *a5, int a6, int8x16_t *a7, int a8)
{
  _WORD *v14;
  int8x16_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  char *v41;
  char *v42;
  __int128 v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  char *v51;
  char *v52;
  __int128 v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;

  v14 = __dst;
  if (a2)
  {
    v16 = *(int8x16_t **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v18 = (char *)&__dst[v17];
      if (v17 >= 0x40)
      {
        v19 = (char *)&__dst[v17 & 0xFFFFFFC0];
        v21 = 0uLL;
        v22 = (char *)__dst;
        do
        {
          v61.val[0] = *v16;
          v23 = v16[1];
          v65.val[0] = v16[2];
          v24 = v16[3];
          v16 += 4;
          v25 = v24;
          v65.val[1] = 0uLL;
          v69.val[0] = v23;
          v61.val[1] = 0uLL;
          v26 = v22;
          vst2q_s8(v26, v61);
          v26 += 32;
          v69.val[1] = 0uLL;
          vst2q_s8(v26, v69);
          v27 = v22 + 64;
          vst2q_s8(v27, v65);
          v28 = v22 + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
          v22 += 128;
        }
        while (v22 != v19);
      }
      else
      {
        v19 = (char *)__dst;
      }
      while (v19 != v18)
      {
        v29 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)v19 = v29;
        v19 += 2;
      }
    }
    else if ((_DWORD)v17 == 1)
    {
      *__dst = v16->i16[0];
    }
    else if ((_DWORD)v17)
    {
      __dst = memcpy(__dst, v16, 2 * v17);
    }
    v20 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v20 = 0;
  }
  v30 = (char *)&v14[v20];
  v31 = &v30[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v32 = &v30[2 * (a4 & 0xFFFFFFC0)];
    v33 = 0uLL;
    do
    {
      v62.val[0] = *a3;
      v34 = a3[1];
      v66.val[0] = a3[2];
      v35 = a3[3];
      a3 += 4;
      v36 = v35;
      v66.val[1] = 0uLL;
      v70.val[0] = v34;
      v62.val[1] = 0uLL;
      v37 = v30;
      vst2q_s8(v37, v62);
      v37 += 32;
      v70.val[1] = 0uLL;
      vst2q_s8(v37, v70);
      v38 = v30 + 64;
      vst2q_s8(v38, v66);
      v39 = v30 + 96;
      vst2q_s8(v39, *(int8x16x2_t *)(&v33 - 1));
      v30 += 128;
    }
    while (v30 != v32);
    v30 = v32;
  }
  while (v30 != v31)
  {
    v40 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v30 = v40;
    v30 += 2;
  }
  v41 = &v31[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v42 = &v31[2 * (a6 & 0xFFFFFFC0)];
    v43 = 0uLL;
    do
    {
      v63.val[0] = *a5;
      v44 = a5[1];
      v67.val[0] = a5[2];
      v45 = a5[3];
      a5 += 4;
      v46 = v45;
      v67.val[1] = 0uLL;
      v71.val[0] = v44;
      v63.val[1] = 0uLL;
      v47 = v31;
      vst2q_s8(v47, v63);
      v47 += 32;
      v71.val[1] = 0uLL;
      vst2q_s8(v47, v71);
      v48 = v31 + 64;
      vst2q_s8(v48, v67);
      v49 = v31 + 96;
      vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
      v31 += 128;
    }
    while (v31 != v42);
    v31 = v42;
  }
  while (v31 != v41)
  {
    v50 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v31 = v50;
    v31 += 2;
  }
  v51 = &v41[2 * a8];
  if ((a8 & 0xFFFFFFC0) != 0)
  {
    v52 = &v41[2 * (a8 & 0xFFFFFFC0)];
    v53 = 0uLL;
    do
    {
      v64.val[0] = *a7;
      v54 = a7[1];
      v68.val[0] = a7[2];
      v55 = a7[3];
      a7 += 4;
      v56 = v55;
      v68.val[1] = 0uLL;
      v72.val[0] = v54;
      v64.val[1] = 0uLL;
      v57 = v41;
      vst2q_s8(v57, v64);
      v57 += 32;
      v72.val[1] = 0uLL;
      vst2q_s8(v57, v72);
      v58 = v41 + 64;
      vst2q_s8(v58, v68);
      v59 = v41 + 96;
      vst2q_s8(v59, *(int8x16x2_t *)(&v53 - 1));
      v41 += 128;
    }
    while (v41 != v52);
    v41 = v52;
  }
  while (v41 != v51)
  {
    v60 = a7->u8[0];
    a7 = (int8x16_t *)((char *)a7 + 1);
    *(_WORD *)v41 = v60;
    v41 += 2;
  }
  return __dst;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Database::runTransaction(WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&,WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &&,WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>> &&,WTF::RefPtr<WebCore::SQLTransactionWrapper,WTF::RawPtrTraits<WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>>>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>>>> &&,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E336DC30;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Database::runTransaction(WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&,WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &&,WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>> &&,WTF::RefPtr<WebCore::SQLTransactionWrapper,WTF::RawPtrTraits<WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>>>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>>>> &&,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336DC30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Database::runTransaction(WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&,WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &&,WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>> &&,WTF::RefPtr<WebCore::SQLTransactionWrapper,WTF::RawPtrTraits<WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>>>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>,WTF::DefaultRefDerefTraits<WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>> &&>> &>>>> &&,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = 1;
  WTF::String::isolatedCopy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 40))(v1, v2);
  do
  {
    v4 = __ldaxr((unsigned int *)v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v2));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v2);
    v7 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    WTF::fastFree((WTF *)v2, v3);
  }
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Database::scheduleTransactionCallback(WebCore::SQLTransaction *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;

  *a1 = &off_1E336DC58;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WebCore::Database::~Database((WebCore::Database *)v6);
      WTF::fastFree(v10, v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Database::scheduleTransactionCallback(WebCore::SQLTransaction *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  void *v12;

  *(_QWORD *)this = &off_1E336DC58;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WebCore::Database::~Database((WebCore::Database *)v7);
      WTF::fastFree(v11, v12);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Database::scheduleTransactionCallback(WebCore::SQLTransaction *)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v3 = WebCore::Document::eventLoop(*(WebCore::Document **)(*(_QWORD *)(a1 + 8) + 8), a2);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E336DC80;
  v5[1] = v4;
  v7 = v5;
  WebCore::EventLoopTaskGroup::queueTask(v3, 11, (uint64_t *)&v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::Database::scheduleTransactionCallback(WebCore::SQLTransaction *)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E336DC80;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Database::scheduleTransactionCallback(WebCore::SQLTransaction *)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336DC80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::Database::scheduleTransactionCallback(WebCore::SQLTransaction *)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  result = WebCore::SQLTransaction::checkAndHandleClosedDatabase((unsigned __int8 *)v2, a2);
  v4 = *(_QWORD *)(v2 + 112);
  v5 = *(_QWORD *)(v2 + 120);
  if (v5 & 1 | v4)
  {
    v6 = (_QWORD *)(v2 + (v5 >> 1));
    if ((v5 & 1) != 0)
      v4 = *(_QWORD *)(*v6 + v4);
    return (unsigned __int8 *)((uint64_t (*)(_QWORD *))v4)(v6);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash *this)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = WTF::ASCIICaseInsensitiveHash::hash(this, this);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = *(_QWORD *)(v2 + 8 * v7);
      if (!v8)
        break;
      if (v8 != -1)
      {
        v9 = *(_QWORD *)this;
        v10 = *(unsigned int *)(v8 + 4);
        if ((_DWORD)v10 == *(_DWORD *)(*(_QWORD *)this + 4))
        {
          v12 = *(_DWORD *)(v9 + 16);
          v13 = *(_QWORD *)(v8 + 8);
          v14 = *(_QWORD *)(v9 + 8);
          if ((*(_BYTE *)(v8 + 16) & 4) != 0)
          {
            if ((v12 & 4) != 0)
            {
              if (WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(v13, v10, v14, v10, v10))
                return v2 + 8 * v7;
            }
            else if (WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(v13, v10, v14, v10, v10))
            {
              return v2 + 8 * v7;
            }
          }
          else if ((v12 & 4) != 0)
          {
            if (WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(v13, v10, v14, v10, v10))
              return v2 + 8 * v7;
          }
          else if (WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(v13, v10, v14, v10, v10))
          {
            return v2 + 8 * v7;
          }
        }
      }
      ++i;
    }
  }
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DatabaseManager::openDatabase(WebCore::Document &,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int,WTF::RefPtr<WebCore::DatabaseCallback,WTF::RawPtrTraits<WebCore::DatabaseCallback>,WTF::DefaultRefDerefTraits<WebCore::DatabaseCallback>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;
  void *v11;

  *a1 = &off_1E336DCA8;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WebCore::Database::~Database((WebCore::Database *)v2);
      WTF::fastFree(v10, v11);
    }
  }
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = v5 + 4;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DatabaseManager::openDatabase(WebCore::Document &,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int,WTF::RefPtr<WebCore::DatabaseCallback,WTF::RawPtrTraits<WebCore::DatabaseCallback>,WTF::DefaultRefDerefTraits<WebCore::DatabaseCallback>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  void *v12;

  *(_QWORD *)this = &off_1E336DCA8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::Database::~Database((WebCore::Database *)v3);
      WTF::fastFree(v11, v12);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    v7 = v6 + 4;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DatabaseManager::openDatabase(WebCore::Document &,WTF::String const&,WTF::String const&,WTF::String const&,unsigned int,WTF::RefPtr<WebCore::DatabaseCallback,WTF::RawPtrTraits<WebCore::DatabaseCallback>,WTF::DefaultRefDerefTraits<WebCore::DatabaseCallback>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 41) = 0;
  return result;
}

void WebCore::DatabaseThread::~DatabaseThread(WebCore::DatabaseThread *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::SQLTransactionCoordinator::CoordinationInfo *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;

  v3 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = (WebCore::SQLTransactionCoordinator::CoordinationInfo *)(v4 + 8);
        do
        {
          if (*((_QWORD *)v6 - 1) != -1)
          {
            WebCore::SQLTransactionCoordinator::CoordinationInfo::~CoordinationInfo(v6, a2);
            v7 = (WTF::StringImpl *)*((_QWORD *)v6 - 1);
            *((_QWORD *)v6 - 1) = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v7 -= 2;
            }
          }
          v6 = (WebCore::SQLTransactionCoordinator::CoordinationInfo *)((char *)v6 + 56);
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    WTF::fastFree(v3, a2);
  }
  v8 = *((_QWORD *)this + 10);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = *(unsigned int **)(v8 + 8 * i);
        if (v11 != (unsigned int *)-1)
        {
          *(_QWORD *)(v8 + 8 * i) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              WebCore::Database::~Database((WebCore::Database *)v11);
              WTF::fastFree(v14, v15);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v16 = *((_QWORD *)this + 4);
  v17 = *((_QWORD *)this + 5);
  v18 = (WTF *)*((_QWORD *)this + 6);
  if (v16 <= v17)
  {
    if (v16 == v17)
      goto LABEL_43;
    v25 = (uint64_t *)((char *)v18 + 8 * v16);
    v26 = 8 * v17 - 8 * v16;
    do
    {
      v27 = *v25;
      *v25 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      ++v25;
      v26 -= 8;
    }
    while (v26);
  }
  else
  {
    if (v17)
    {
      v19 = 8 * v17;
      do
      {
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        v18 = (WTF *)((char *)v18 + 8);
        v19 -= 8;
      }
      while (v19);
      v18 = (WTF *)*((_QWORD *)this + 6);
      v16 = *((_QWORD *)this + 4);
    }
    v21 = *((unsigned int *)this + 14);
    if (v16 != v21)
    {
      v22 = (uint64_t *)((char *)v18 + 8 * v16);
      v23 = 8 * v21 - 8 * v16;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
  }
  v18 = (WTF *)*((_QWORD *)this + 6);
LABEL_43:
  if (v18)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v18, a2);
  }
  v28 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WebCore::DatabaseThread::~DatabaseThread((WebCore::DatabaseThread *)v28);
      WTF::fastFree(v34, v35);
    }
  }
  v31 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::Thread::~Thread((WTF::Thread *)v31);
      WTF::fastFree(v36, v37);
    }
  }
}

uint64_t WebCore::DatabaseThread::start(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF::Thread *v12;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 4);
  if (__ldaxr((unsigned __int8 *)(this + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this + 4);
LABEL_5:
  if (!*(_QWORD *)(v1 + 8))
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E336DE70;
    v4[1] = v1;
    v11 = (uint64_t)v4;
    WTF::Thread::create();
    v5 = *(unsigned int **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = v12;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::Thread::~Thread((WTF::Thread *)v5);
        WTF::fastFree(v9, v10);
      }
    }
    this = v11;
    if (v11)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

uint64_t WTF::HashSet<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v21;
  void *v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 8 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 8 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = *(unsigned int **)(v2 + 8 * v8);
  *(_QWORD *)(v2 + 8 * v8) = -1;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WebCore::Database::~Database((WebCore::Database *)v12);
      WTF::fastFree(v21, v22);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>>::rehash(a1, v19 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::DatabaseThread::scheduleImmediateTask(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v22[2];
  char v23;
  _QWORD v24[3];

  v2 = result;
  v3 = (unsigned __int8 *)(result + 24);
  v4 = *a2;
  *a2 = 0;
  if (__ldaxr((unsigned __int8 *)(result + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 24);
LABEL_5:
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 40);
  if (v6)
  {
    if (v7 + 1 != v6)
      goto LABEL_22;
    LODWORD(v8) = *(_DWORD *)(v2 + 56);
  }
  else
  {
    v8 = *(unsigned int *)(v2 + 56);
    if (v7)
    {
      if (v7 != v8 - 1)
        goto LABEL_22;
    }
    else if ((_DWORD)v8)
    {
      goto LABEL_22;
    }
  }
  v9 = v8;
  v10 = ((unint64_t)v8 >> 2) + v8;
  if (v10 <= 0xF)
    v10 = 15;
  if (v10 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v11 = *(char **)(v2 + 48);
  v12 = v10 + 1;
  v13 = (char *)WTF::fastMalloc((WTF *)(8 * (v10 + 1)));
  *(_DWORD *)(v2 + 56) = v12;
  *(_QWORD *)(v2 + 48) = v13;
  v15 = *(_QWORD *)(v2 + 32);
  v14 = *(_QWORD *)(v2 + 40);
  if (v15 <= v14)
  {
    memcpy(&v13[8 * v15], &v11[8 * v15], 8 * v14 - 8 * v15);
    if (!v11)
      goto LABEL_22;
  }
  else
  {
    memcpy(v13, v11, 8 * v14);
    v16 = *(_QWORD *)(v2 + 32);
    v17 = v16 - v9 + *(unsigned int *)(v2 + 56);
    memcpy((void *)(*(_QWORD *)(v2 + 48) + 8 * v17), &v11[8 * v16], 8 * v9 - 8 * v16);
    *(_QWORD *)(v2 + 32) = v17;
    if (!v11)
      goto LABEL_22;
  }
  if (*(char **)(v2 + 48) == v11)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
  }
  WTF::fastFree((WTF *)v11, v18);
LABEL_22:
  v19 = *(_QWORD *)(v2 + 32);
  if (!v19)
    v19 = *(unsigned int *)(v2 + 56);
  v20 = v19 - 1;
  *(_QWORD *)(v2 + 32) = v20;
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v20) = v4;
  result = v2 + 25;
  LOBYTE(v20) = atomic_load((unsigned __int8 *)(v2 + 25));
  if ((v20 & 1) != 0)
  {
    v23 = 0;
    v22[0] = v2 + 25;
    v22[1] = &v23;
    v24[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v24[1] = v24;
    v24[2] = v22;
    result = WTF::ParkingLot::unparkOneImpl();
  }
  v21 = __ldxr(v3);
  if (v21 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

unsigned __int8 *WebCore::DatabaseThread::unscheduleDatabaseTasks(unsigned __int8 *this, WebCore::Database *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;

  v3 = this;
  v4 = this + 24;
  if (__ldaxr(this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 24);
  while (1)
  {
LABEL_5:
    v7 = *((_QWORD *)v3 + 4);
    v6 = *((_QWORD *)v3 + 5);
    if (v7 != v6)
    {
      while (*(WebCore::Database **)(*(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v7) + 8) != a2)
      {
        v12 = *((unsigned int *)v3 + 14);
        v7 += v12 + 1;
        do
          v7 -= v12;
        while (v7 >= v12);
        if (v6 == v7)
          goto LABEL_17;
      }
    }
    if (v7 == v6)
      break;
    v8 = *((_QWORD *)v3 + 6);
    v9 = (uint64_t *)(v8 + 8 * v7);
    v10 = *v9;
    *v9 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)v3 + 4);
    if (v11 <= v7)
    {
      this = (unsigned __int8 *)memmove((void *)(v8 + 8 * v11 + 8), (const void *)(v8 + 8 * v11), 8 * v7 - 8 * v11);
      *((_QWORD *)v3 + 4) = (*((_QWORD *)v3 + 4) + 1) % (unint64_t)*((unsigned int *)v3 + 14);
    }
    else
    {
      this = (unsigned __int8 *)memmove((void *)(v8 + 8 * v7), (const void *)(v8 + 8 * v7 + 8), 8 * *((_QWORD *)v3 + 5) - (8 * v7 + 8));
      *((_QWORD *)v3 + 5) = (*((_QWORD *)v3 + 5) + (unint64_t)*((unsigned int *)v3 + 14) - 1)
                          % *((unsigned int *)v3 + 14);
    }
  }
LABEL_17:
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

BOOL WebCore::DatabaseTracker::isInitialized(WebCore::DatabaseTracker *this)
{
  return WebCore::staticTracker != 0;
}

uint64_t WebCore::DatabaseTracker::singleton(WebCore::DatabaseTracker *this)
{
  uint64_t v1;

  v1 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v1 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) = 0;
    *(_DWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_DWORD *)(v1 + 40) = -1;
    *(_WORD *)(v1 + 44) = 0;
    *(_BYTE *)(v1 + 46) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    *(_BYTE *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = 0;
    *(_BYTE *)(v1 + 72) = 0;
    *(_DWORD *)(v1 + 76) = 1;
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 88) = 0;
    WTF::String::isolatedCopy();
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    WebCore::staticTracker = v1;
  }
  return v1;
}

uint64_t WebCore::DatabaseTracker::usage(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::String *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;

  WebCore::DatabaseTracker::originPath((WebCore::DatabaseTracker *)&v18, this, a2);
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v18, v2);
  v4 = v15;
  if (!v17)
  {
    v5 = 0;
    goto LABEL_21;
  }
  v5 = 0;
  v6 = 8 * v17;
  do
  {
    if (*(_QWORD *)v4 && WTF::StringImpl::endsWith())
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      v8 = WebCore::SQLiteFileSystem::databaseFileSize((WebCore::SQLiteFileSystem *)&v14, v7);
      v9 = v14;
      v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v3);
        else
          *(_DWORD *)v9 -= 2;
      }
      v5 += v8;
    }
    v4 = (WTF *)((char *)v4 + 8);
    v6 -= 8;
  }
  while (v6);
  v4 = v15;
  if (!v17)
  {
LABEL_21:
    if (!v4)
      goto LABEL_22;
    goto LABEL_28;
  }
  v10 = 8 * v17;
  do
  {
    v11 = *(WTF::StringImpl **)v4;
    *(_QWORD *)v4 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v3);
      else
        *(_DWORD *)v11 -= 2;
    }
    v4 = (WTF *)((char *)v4 + 8);
    v10 -= 8;
  }
  while (v10);
  v4 = v15;
  if (v15)
  {
LABEL_28:
    v15 = 0;
    v16 = 0;
    WTF::fastFree(v4, v3);
  }
LABEL_22:
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v3);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v5;
}

sqlite3_int64 WebCore::DatabaseTracker::quotaNoLock(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2)
{
  int v4;
  sqlite3_int64 v5;
  char *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 *v10;
  WebCore::SQLiteDatabaseTracker *v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  WebCore::SQLiteDatabaseTracker *v17;
  int v18;
  int v19;
  WebCore::SQLiteDatabaseTracker *v21;
  WebCore::SQLiteDatabaseTracker *v22;
  WebCore::DatabaseTracker *v23;
  WebCore::DatabaseContext *v24;
  const WTF::String *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  sqlite3_stmt *pStmt;
  int v30;

  WebCore::DatabaseTracker::openTrackerDatabase(this, 0);
  if (!*((_QWORD *)this + 4))
    return 0;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "SELECT quota FROM Origins where origin=?;",
    42,
    (uint64_t)&v28);
  v4 = v30;
  if (v30)
  {
    v5 = 0;
    goto LABEL_45;
  }
  WebCore::SecurityOriginData::databaseIdentifier(a2, &v27);
  if (v27)
  {
    v6 = (char *)*((_QWORD *)v27 + 1);
    v7 = *((unsigned int *)v27 + 1) | ((unint64_t)((*((_DWORD *)v27 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v28, 1, v6, v7);
  v9 = v27;
  v27 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (v30)
    goto LABEL_50;
  v10 = (unsigned __int8 *)(v28 + 32);
  if (__ldaxr((unsigned __int8 *)(v28 + 32)))
  {
    __clrex();
LABEL_14:
    MEMORY[0x19AEA534C](v10);
    goto LABEL_15;
  }
  if (__stxr(1u, v10))
    goto LABEL_14;
LABEL_15:
  if (*(_BYTE *)(v28 + 20) || (v12 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v12))
  {
    v13 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v12);
    v21 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v13 = (int)v21;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v21);
  }
  v14 = __ldxr(v10);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v10))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (v13 != 100)
    goto LABEL_43;
  if (!v30)
  {
    if (sqlite3_stmt_busy(pStmt))
    {
LABEL_41:
      if (sqlite3_data_count(pStmt) >= 1)
      {
        v5 = sqlite3_column_int64(pStmt, 0);
LABEL_44:
        v4 = v30;
LABEL_45:
        if (v4 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336DDD8[v4])(&v27, &v28);
        return v5;
      }
LABEL_43:
      v5 = 0;
      goto LABEL_44;
    }
    v15 = (unsigned __int8 *)(v28 + 32);
    if (__ldaxr((unsigned __int8 *)(v28 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
LABEL_32:
      if (*(_BYTE *)(v28 + 20) || (v17 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v17))
      {
        v18 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v17);
        v22 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v18 = (int)v22;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v22);
      }
      v19 = __ldxr(v15);
      if (v19 == 1)
      {
        if (!__stlxr(0, v15))
        {
LABEL_40:
          if (v18 != 100)
            goto LABEL_43;
          goto LABEL_41;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v15);
    goto LABEL_32;
  }
LABEL_50:
  v23 = (WebCore::DatabaseTracker *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::DatabaseTracker::canEstablishDatabase(v23, v24, v25, v26);
}

void WebCore::DatabaseTracker::canEstablishDatabase(WebCore::DatabaseTracker *this@<X0>, WebCore::DatabaseContext *a2@<X1>, WTF::StringImpl **a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  WebCore::SecurityContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v42;
  BOOL v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  _BOOL4 v56;
  char *v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  char *v62;
  unint64_t v63;
  unsigned __int8 *v64;
  WebCore::SQLiteDatabaseTracker *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  WebCore::SQLiteDatabaseTracker *v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v89;
  BOOL v90;
  unsigned int v91;
  unsigned __int8 *v94;
  unsigned int v96;
  unsigned __int16 v97;
  char v98;
  unsigned int *v99;
  _BYTE v100[24];
  int v101;
  WTF::StringImpl *v102[3];
  unsigned int v103;
  WTF::StringImpl **v104;
  sqlite3_stmt *pStmt;
  int v106;
  unsigned int v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  v9 = *((_QWORD *)a2 + 1);
  v94 = v7;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = (WebCore::SecurityContext *)(v10 - 96);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  WebCore::SecurityContext::securityOrigin(v11, a2);
  v100[0] = 0;
  v101 = -1;
  v13 = *(unsigned int *)(v12 + 32);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(WTF::StringImpl ***, _BYTE *, uint64_t))off_1E336DDC8[v13])(&v104, v100, v12 + 8);
    v101 = v13;
  }
  v14 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 15, (uint64_t)v100);
  v16 = *((_QWORD *)this + 15);
  if (v16)
    v16 += 56 * *(unsigned int *)(v16 - 4);
  if (v16 != v14
    && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v14 + 32), a3, v15) & 1) != 0)
  {
LABEL_15:
    v17 = 14;
    v18 = a5;
    v19 = v94;
LABEL_125:
    *(_BYTE *)v18 = v17;
    v18[1] = 0;
    *((_BYTE *)v18 + 16) = 1;
    goto LABEL_127;
  }
  v20 = *((_QWORD *)this + 16);
  if (v20)
  {
    v82 = *(_DWORD *)(v20 - 8);
    v83 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)v100) & v82;
    v84 = v20 + 32 * v83;
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v84) & 1) == 0)
    {
      v85 = 1;
      while (1)
      {
        v86 = *(unsigned int *)(v84 + 24);
        if ((_DWORD)v86 == -1)
          break;
        v104 = v102;
        if ((((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v86])(&v104, v84) & 1) == 0)
        {
          if ((_BYTE *)v84 == v100)
            goto LABEL_15;
          v87 = *(unsigned int *)(v84 + 24);
          v89 = v101 == (_DWORD)v87 && v101 != -1;
          if ((_DWORD)v87 == -1 || !v89)
          {
            if ((_DWORD)v87 == -1)
              v90 = v101 == -1;
            else
              v90 = v89;
            if (v90)
              goto LABEL_15;
          }
          else
          {
            v104 = v102;
            if ((((uint64_t (*)(WTF::StringImpl ***, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v87])(&v104, v84, v100) & 1) != 0)goto LABEL_15;
          }
        }
        v83 = ((_DWORD)v83 + v85) & v82;
        v84 = v20 + 32 * v83;
        ++v85;
        if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v84) & 1) != 0)
          goto LABEL_17;
      }
LABEL_181:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
  }
LABEL_17:
  v21 = (uint64_t *)((char *)this + 112);
  v22 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 14, (uint64_t)v100);
  v23 = v22;
  v24 = *((_QWORD *)this + 14);
  if (v24)
    v24 += 40 * *(unsigned int *)(v24 - 4);
  if (v24 == v22)
  {
    if (v101 == -1)
      goto LABEL_181;
    v102[0] = (WTF::StringImpl *)&v99;
    ((void (*)(WTF::StringImpl ***__return_ptr, WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v101])(&v104, v102, v100);
    LOBYTE(v102[0]) = 0;
    v103 = -1;
    v25 = v107;
    if (v107 != -1)
    {
      ((void (*)(unsigned int **, WTF::StringImpl **, WTF::StringImpl ***))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v107])(&v99, v102, &v104);
      v103 = v25;
      if (v107 != -1)
        ((void (*)(unsigned int **, WTF::StringImpl ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v107])(&v99, &v104);
    }
    v26 = *v21;
    if (*v21
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)this + 14, 8u, 0), (v26 = *v21) != 0))
    {
      v27 = *(_DWORD *)(v26 - 8);
    }
    else
    {
      v27 = 0;
    }
    v97 = 0;
    v98 = 0;
    v99 = &v96;
    v28 = v103 == -1 ? -1 : v103;
    v29 = (v28 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v28 - 1640531527) << 16) ^ ((unsigned __int16)v28
                                                                                               - 1640531527);
    v30 = (v28 >> 37) & 0x7FFF800 ^ ((v29 + WORD2(v28) + (v29 >> 11)) << 16) ^ (v29 + WORD2(v28) + (v29 >> 11));
    v96 = v30 + (v30 >> 11);
    if (v103 == -1)
      goto LABEL_181;
    v104 = (WTF::StringImpl **)&v99;
    ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))off_1E336DE88[v103])(&v104, v102);
    v31 = v96;
    if (v98)
    {
      v91 = (v96 + v97) ^ ((v96 + v97) << 11);
      v31 = v91 + (v91 >> 17);
    }
    v32 = (v31 ^ (8 * v31)) + ((v31 ^ (8 * v31)) >> 5);
    v33 = (v32 ^ (4 * v32)) + ((v32 ^ (4 * v32)) >> 15);
    v34 = v33 ^ (v33 << 10);
    if (!v34)
      v34 = 0x800000;
    v35 = v34 & v27;
    v23 = v26 + 40 * (v34 & v27);
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23) & 1) == 0)
    {
      v37 = 0;
      v38 = 1;
      do
      {
        v39 = *(unsigned int *)(v23 + 24);
        if ((_DWORD)v39 == -1)
          goto LABEL_181;
        v104 = (WTF::StringImpl **)&v99;
        if ((((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v39])(&v104, v23) & 1) != 0)
        {
          v37 = v23;
        }
        else
        {
          if ((WTF::StringImpl **)v23 == v102)
          {
            v23 = (uint64_t)v102;
            goto LABEL_77;
          }
          v40 = *(unsigned int *)(v23 + 24);
          v42 = v103 == (_DWORD)v40 && v103 != -1;
          if ((_DWORD)v40 == -1 || !v42)
          {
            if ((_DWORD)v40 == -1)
              v43 = v103 == -1;
            else
              v43 = v42;
            if (v43)
              goto LABEL_77;
          }
          else
          {
            v104 = (WTF::StringImpl **)&v99;
            if ((((uint64_t (*)(WTF::StringImpl ***, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v40])(&v104, v23, v102) & 1) != 0)goto LABEL_77;
          }
        }
        v35 = (v35 + v38) & v27;
        v23 = v26 + 40 * v35;
        ++v38;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v23));
      v21 = (uint64_t *)((char *)this + 112);
      if (v37)
      {
        *(_QWORD *)(v37 + 32) = 0;
        *(_OWORD *)v37 = 0u;
        *(_OWORD *)(v37 + 16) = 0u;
        --*(_DWORD *)(*((_QWORD *)this + 14) - 16);
        v23 = v37;
      }
    }
    v44 = *(unsigned int *)(v23 + 24);
    if ((_DWORD)v44 == -1)
    {
      if (v103 == -1)
        goto LABEL_63;
    }
    else if (v103 == -1)
    {
      ((void (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v44])(&v104, v23);
      *(_DWORD *)(v23 + 24) = -1;
      goto LABEL_63;
    }
    v104 = (WTF::StringImpl **)v23;
    ((void (*)(WTF::StringImpl ***, uint64_t, WTF::StringImpl **))off_1E336DEA8[v103])(&v104, v23, v102);
LABEL_63:
    v45 = *(WTF::StringImpl ***)(v23 + 32);
    *(_QWORD *)(v23 + 32) = 0;
    if (v45)
    {
      v79 = *((unsigned int *)v45 - 1);
      if ((_DWORD)v79)
      {
        v80 = v45;
        do
        {
          v81 = *v80;
          if (*v80 != (WTF::StringImpl *)-1)
          {
            *v80 = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2)
                WTF::StringImpl::destroy(v81, v36);
              else
                *(_DWORD *)v81 -= 2;
            }
          }
          v80 += 2;
          --v79;
        }
        while (v79);
      }
      WTF::fastFree((WTF *)(v45 - 2), v36);
    }
    v46 = *v21;
    if (*v21)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v48 = *v21;
    if (*v21)
      v49 = *(_DWORD *)(v48 - 12);
    else
      v49 = 0;
    v50 = (*(_DWORD *)(v48 - 16) + v49);
    v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50)
        goto LABEL_77;
    }
    else
    {
      if (3 * v51 > 4 * v50)
      {
LABEL_77:
        if (v103 != -1)
          ((void (*)(WTF::StringImpl ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v103])(&v104, v102);
        v21 = (uint64_t *)((char *)this + 112);
        goto LABEL_80;
      }
      if (!(_DWORD)v51)
      {
        v52 = 8;
        goto LABEL_76;
      }
    }
    v52 = (_DWORD)v51 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v51));
LABEL_76:
    v23 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v21, v52, v23);
    goto LABEL_77;
  }
LABEL_80:
  WTF::String::isolatedCopy();
  LODWORD(v99) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v23 + 32), v102, (const WTF::StringImpl *)&v99, (uint64_t)&v104);
  ++*((_DWORD *)v104 + 2);
  v54 = v102[0];
  v102[0] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
  WebCore::DatabaseTracker::openTrackerDatabase(this, 0);
  if (!*((_QWORD *)this + 4))
    goto LABEL_111;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "SELECT guid FROM Databases WHERE origin=? AND name=?;",
    54,
    (uint64_t)&v104);
  v55 = v106;
  if (v106)
  {
    v56 = 0;
    goto LABEL_108;
  }
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)v100, v102);
  if (v102[0])
  {
    v57 = (char *)*((_QWORD *)v102[0] + 1);
    v58 = *((unsigned int *)v102[0] + 1) | ((unint64_t)((*((_DWORD *)v102[0] + 4) >> 2) & 1) << 32);
  }
  else
  {
    v57 = 0;
    v58 = 0x100000000;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v104, 1, v57, v58);
  v60 = v102[0];
  v102[0] = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v59);
    else
      *(_DWORD *)v60 -= 2;
  }
  if (v106)
    goto LABEL_181;
  v61 = *a3;
  if (*a3)
  {
    v62 = (char *)*((_QWORD *)v61 + 1);
    v63 = *((unsigned int *)v61 + 1) | ((unint64_t)((*((_DWORD *)v61 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v62 = 0;
    v63 = 0x100000000;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v104, 2, v62, v63);
  if (v106)
    goto LABEL_181;
  v64 = (unsigned __int8 *)(v104 + 4);
  if (__ldaxr((unsigned __int8 *)v104 + 32))
  {
    __clrex();
LABEL_98:
    MEMORY[0x19AEA534C](v64);
    goto LABEL_99;
  }
  if (__stxr(1u, v64))
    goto LABEL_98;
LABEL_99:
  if (*((_BYTE *)v104 + 20) || (v66 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v66))
  {
    v67 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v66);
    v78 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v67 = (int)v78;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v78);
  }
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_107;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_107:
  v56 = v67 == 100;
  v55 = v106;
LABEL_108:
  if (v55 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl ***))off_1E336DDD8[v55])(v102, &v104);
  if (v56)
    goto LABEL_126;
LABEL_111:
  v69 = WebCore::DatabaseTracker::usage(this, (const WebCore::SecurityOriginData *)v100);
  v70 = a4;
  if (a4 <= 1)
    v70 = 1;
  if (__CFADD__(v69, v70))
  {
    v71 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(v21, (uint64_t)v100);
    v73 = v71;
    v74 = *v21;
    if (*v21)
      v74 += 40 * *(unsigned int *)(v74 - 4);
    v19 = v94;
    if (v74 == v71)
      goto LABEL_121;
    v75 = (_QWORD *)(v71 + 32);
    if (!WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(v71 + 32), a3, v72)|| *v75 && *(_DWORD *)(*v75 - 12))
    {
      goto LABEL_121;
    }
    if (*v21)
    {
      v77 = *v21 + 40 * *(unsigned int *)(*v21 - 4);
      if (v77 == v73)
        goto LABEL_121;
    }
    else
    {
      if (!v73)
      {
LABEL_121:
        v17 = 14;
LABEL_124:
        v18 = a5;
        goto LABEL_125;
      }
      v77 = 0;
    }
    if (v77 != v73)
      WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::remove((uint64_t)v21, v73);
    goto LABEL_121;
  }
  if (v69 + v70 > (unint64_t)WebCore::DatabaseTracker::quotaNoLock(this, (const WebCore::SecurityOriginData *)v100))
  {
    v17 = 18;
    v19 = v94;
    goto LABEL_124;
  }
LABEL_126:
  v19 = v94;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
LABEL_127:
  if (v101 != -1)
    ((void (*)(WTF::StringImpl ***, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v101])(&v104, v100);
  v76 = __ldxr(v19);
  if (v76 != 1)
  {
    __clrex();
    goto LABEL_133;
  }
  if (__stlxr(0, v19))
LABEL_133:
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
}

unint64_t WebCore::DatabaseTracker::retryCanEstablishDatabase@<X0>(WebCore::DatabaseTracker *this@<X0>, WebCore::DatabaseContext *a2@<X1>, WTF::StringImpl **a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  WebCore::SecurityContext *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t result;
  _QWORD *v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  char v29;
  _BYTE v30[24];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v10 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  v12 = *((_QWORD *)a2 + 1);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = (WebCore::SecurityContext *)(v13 - 96);
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  WebCore::SecurityContext::securityOrigin(v14, a2);
  v30[0] = 0;
  v31 = -1;
  v16 = *(unsigned int *)(v15 + 32);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E336DDC8[v16])(&v29, v30, v15 + 8);
    v31 = v16;
  }
  v17 = WebCore::DatabaseTracker::usage(this, (const WebCore::SecurityOriginData *)v30);
  if (a4 <= 1)
    v18 = 1;
  else
    v18 = a4;
  v19 = v17 + v18;
  if (__CFADD__(v17, v18))
  {
    v20 = 14;
    goto LABEL_19;
  }
  result = WebCore::DatabaseTracker::quotaNoLock(this, (const WebCore::SecurityOriginData *)v30);
  if (v19 > result)
  {
    v20 = 18;
LABEL_19:
    v22 = (_QWORD *)((char *)this + 112);
    result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 14, (uint64_t)v30);
    v24 = result;
    v25 = *((_QWORD *)this + 14);
    if (v25)
      v25 += 40 * *(unsigned int *)(v25 - 4);
    if (v25 == result)
      goto LABEL_25;
    v26 = (_QWORD *)(result + 32);
    result = WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(result + 32), a3, v23);
    if (!(_DWORD)result || *v26 && *(_DWORD *)(*v26 - 12))
      goto LABEL_25;
    if (*v22)
    {
      v28 = *v22 + 40 * *(unsigned int *)(*v22 - 4);
      if (v28 == v24)
        goto LABEL_25;
    }
    else
    {
      if (!v24)
      {
LABEL_25:
        *(_BYTE *)a5 = v20;
        *(_QWORD *)(a5 + 8) = 0;
        *(_BYTE *)(a5 + 16) = 1;
        goto LABEL_27;
      }
      v28 = 0;
    }
    if (v28 != v24)
      result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::remove((uint64_t)v22, v24);
    goto LABEL_25;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
LABEL_27:
  if (v31 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v31])(&v29, v30);
  v27 = __ldxr(v10);
  if (v27 == 1)
  {
    if (!__stlxr(0, v10))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v10);
}

uint64_t WebCore::DatabaseTracker::maximumSize(WebCore::DatabaseTracker *this, WebCore::Database *a2)
{
  WebCore::DatabaseTracker *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t result;
  WTF::StringImpl *v19;
  _BYTE v20[24];
  int v21;
  uint64_t v22;

  v3 = this;
  v22 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (WebCore::DatabaseTracker *)MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  if (WTF::isMainThread(this))
  {
    v6 = *((_QWORD *)a2 + 2);
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + 8);
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8)
      v8 = WTF::Thread::initializeCurrentTLS(0);
    if (v7 != v8)
    {
      result = 777;
      __break(0xC471u);
      return result;
    }
    v6 = *((_QWORD *)a2 + 3);
  }
  v20[0] = 0;
  v21 = -1;
  v9 = *(unsigned int *)(v6 + 32);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v9])(&v19, v20, v6 + 8);
    v21 = v9;
  }
  v10 = WebCore::DatabaseTracker::quotaNoLock(v3, (const WebCore::SecurityOriginData *)v20);
  v11 = WebCore::DatabaseTracker::usage(v3, (const WebCore::SecurityOriginData *)v20);
  WTF::String::isolatedCopy();
  v14 = WebCore::SQLiteFileSystem::databaseFileSize((WebCore::SQLiteFileSystem *)&v19, v12);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v21 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v21])(&v19, v20);
  v16 = __ldxr(v4);
  if (v16 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_23:
  if (v14 + v10 - v11 <= v10 && v10 >= v11)
    return v14 + v10 - v11;
  else
    return v14;
}

unsigned int *WebCore::DatabaseTracker::closeAllDatabases(uint64_t a1, int a2)
{
  unsigned int *result;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  _QWORD *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  sqlite3 *v15;
  int v16;
  _QWORD *v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  unsigned int v24;

  result = (unsigned int *)WebCore::DatabaseTracker::openDatabases(a1, (uint64_t)&v23);
  v5 = v23;
  v6 = v24;
  if (!v24)
    goto LABEL_26;
  if (!a2)
  {
    v10 = 8 * v24;
    v11 = v23;
    while (1)
    {
      v12 = *(_QWORD *)v11;
      v13 = (unsigned __int8 *)(*(_QWORD *)v11 + 144);
      if (__ldaxr(v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
        goto LABEL_11;
      }
      MEMORY[0x19AEA534C](v13);
LABEL_11:
      v15 = *(sqlite3 **)(v12 + 104);
      if (v15)
        sqlite3_interrupt(v15);
      v16 = __ldxr(v13);
      if (v16 == 1)
      {
        if (!__stlxr(0, v13))
          goto LABEL_18;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_18:
      v17 = *(_QWORD **)v11;
      v11 = (WTF *)((char *)v11 + 8);
      WebCore::Database::close(v17);
      v10 -= 8;
      if (!v10)
        goto LABEL_19;
    }
  }
  v7 = 8 * v24;
  v8 = v23;
  do
  {
    v9 = *(_QWORD **)v8;
    v8 = (WTF *)((char *)v8 + 8);
    WebCore::Database::close(v9);
    v7 -= 8;
  }
  while (v7);
LABEL_19:
  v18 = (WTF *)((char *)v5 + 8 * v6);
  do
  {
    result = *(unsigned int **)v5;
    *(_QWORD *)v5 = 0;
    if (result)
    {
      do
      {
        v19 = __ldaxr(result);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, result));
      if (!v20)
      {
        atomic_store(1u, result);
        WebCore::Database::~Database((WebCore::Database *)result);
        result = (unsigned int *)WTF::fastFree(v21, v22);
      }
    }
    v5 = (WTF *)((char *)v5 + 8);
  }
  while (v5 != v18);
  v5 = v23;
LABEL_26:
  if (v5)
    return (unsigned int *)WTF::fastFree(v5, v4);
  return result;
}

uint64_t WebCore::DatabaseTracker::openDatabases@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int **v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unsigned int **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;

  v2 = this;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this);
LABEL_5:
  v40 = (unsigned __int8 *)v2;
  v5 = *(unsigned int ***)(v2 + 8);
  if (!v5)
    goto LABEL_88;
  v6 = *v5;
  if (!*v5)
  {
    v11 = 0;
    LODWORD(v7) = 0;
    goto LABEL_19;
  }
  v7 = *(v6 - 1);
  v8 = &v6[10 * v7];
  if (!*(v6 - 3))
  {
    v11 = &v6[10 * v7];
LABEL_19:
    v8 = &v6[10 * v7];
    if (v6)
      goto LABEL_20;
    goto LABEL_22;
  }
  if ((_DWORD)v7)
  {
    v9 = 40 * v7;
    while (1)
    {
      this = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v6);
      if ((this & 1) == 0)
      {
        v10 = v6[6];
        if ((_DWORD)v10 == -1)
          goto LABEL_93;
        v47 = &v46;
        this = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v47, v6);
        if (!(_DWORD)this)
          break;
      }
      v6 += 10;
      v9 -= 40;
      if (!v9)
      {
        v6 = v8;
        break;
      }
    }
    v11 = v6;
    v6 = *v5;
    if (!*v5)
      goto LABEL_22;
LABEL_20:
    v12 = &v6[10 * *(v6 - 1)];
    goto LABEL_23;
  }
  v11 = *v5;
  if (v6)
    goto LABEL_20;
LABEL_22:
  v12 = 0;
LABEL_23:
  if (v12 == v11)
  {
LABEL_88:
    this = (uint64_t)v40;
    v39 = __ldxr(v40);
    if (v39 == 1)
    {
      if (!__stlxr(0, v40))
        return this;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v40);
  }
  v41 = v12;
  v42 = v8;
  while (1)
  {
    v13 = **((_QWORD **)v11 + 4);
    v43 = v11;
    if (!v13)
    {
      v16 = 0;
      v14 = 0;
LABEL_34:
      v15 = v13 + 16 * v14;
      goto LABEL_35;
    }
    v14 = *(unsigned int *)(v13 - 4);
    v15 = v13 + 16 * v14;
    if (!*(_DWORD *)(v13 - 12))
    {
      v16 = v13 + 16 * v14;
      goto LABEL_34;
    }
    v16 = **((_QWORD **)v11 + 4);
    if ((_DWORD)v14)
    {
      v17 = 16 * v14;
      v16 = **((_QWORD **)v11 + 4);
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 16;
        v17 -= 16;
        if (!v17)
        {
          v16 = v15;
          break;
        }
      }
    }
LABEL_35:
    if (v13)
      v13 += 16 * *(unsigned int *)(v13 - 4);
    if (v13 != v16)
    {
      v44 = v13;
      v45 = v15;
      do
      {
        v18 = **(_QWORD **)(v16 + 8);
        if (v18)
        {
          v19 = *(unsigned int *)(v18 - 4);
          v20 = (unsigned int **)(v18 + 8 * v19);
          if (*(_DWORD *)(v18 - 12))
          {
            v21 = **(unsigned int ****)(v16 + 8);
            if ((_DWORD)v19)
            {
              v22 = 8 * v19;
              v21 = **(unsigned int ****)(v16 + 8);
              while ((unint64_t)*v21 + 1 <= 1)
              {
                ++v21;
                v22 -= 8;
                if (!v22)
                {
                  v21 = v20;
                  goto LABEL_46;
                }
              }
            }
            goto LABEL_46;
          }
          v21 = (unsigned int **)(v18 + 8 * v19);
        }
        else
        {
          v21 = 0;
          v19 = 0;
        }
        v20 = (unsigned int **)(v18 + 8 * v19);
        if (!v18)
        {
          v23 = 0;
          goto LABEL_51;
        }
LABEL_46:
        v23 = (unsigned int **)(v18 + 8 * *(unsigned int *)(v18 - 4));
LABEL_51:
        if (v23 != v21)
        {
          v24 = *(_DWORD *)(a2 + 12);
          do
          {
            v25 = *v21;
            v26 = v24;
            if (v24 == *(_DWORD *)(a2 + 8))
            {
              v27 = v24 + 1;
              v28 = v26 + (v26 >> 2);
              if (v28 >= 0x10)
                v29 = v28 + 1;
              else
                v29 = 16;
              if (v29 <= v27)
                v30 = v26 + 1;
              else
                v30 = v29;
              if (v30 >> 29)
                goto LABEL_94;
              v31 = *(void **)a2;
              v32 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
              *(_DWORD *)(a2 + 8) = v30;
              *(_QWORD *)a2 = v32;
              this = (uint64_t)memcpy(v32, v31, 8 * v26);
              if (v31)
              {
                if (v32 == v31)
                {
                  v32 = 0;
                  *(_QWORD *)a2 = 0;
                  *(_DWORD *)(a2 + 8) = 0;
                }
                this = WTF::fastFree((WTF *)v31, v33);
              }
            }
            else
            {
              v32 = *(void **)a2;
            }
            do
              v34 = __ldaxr(v25);
            while (__stlxr(v34 + 1, v25));
            *((_QWORD *)v32 + v26) = v25;
            v24 = *(_DWORD *)(a2 + 12) + 1;
            *(_DWORD *)(a2 + 12) = v24;
            v35 = v21 + 1;
            v21 = v20;
            if (v35 != v20)
            {
              v21 = v35;
              while ((unint64_t)*v21 + 1 <= 1)
              {
                if (++v21 == v20)
                {
                  v21 = v20;
                  break;
                }
              }
            }
          }
          while (v21 != v23);
        }
        v36 = v16 + 16;
        v16 = v45;
        if (v36 != v45)
        {
          v16 = v36;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 16;
            if (v16 == v45)
            {
              v16 = v45;
              break;
            }
          }
        }
      }
      while (v16 != v44);
    }
    v11 = v42;
    if (v43 + 10 != v42)
      break;
LABEL_87:
    if (v11 == v41)
      goto LABEL_88;
  }
  v11 = v43 + 10;
  while (1)
  {
    v37 = v11[6];
    if ((_DWORD)v37 == -1)
      break;
    v47 = &v46;
    this = ((uint64_t (*)(char **, unsigned int *))off_1E336DE98[v37])(&v47, v11);
    if ((this & 1) == 0)
    {
      v38 = v11[6];
      if ((_DWORD)v38 == -1)
        break;
      v47 = &v46;
      this = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v38])(&v47, v11);
      if (!(_DWORD)this)
        goto LABEL_87;
    }
    v11 += 10;
    if (v11 == v42)
    {
      v11 = v42;
      goto LABEL_87;
    }
  }
LABEL_93:
  this = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_94:
  __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::DatabaseTracker::originPath(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, WebCore::SecurityOriginData *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTF::String::isolatedCopy();
  WebCore::SecurityOriginData::databaseIdentifier(a3, &v7);
  WTF::FileSystemImpl::pathByAppendingComponent();
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DatabaseTracker::fullPathForDatabaseNoLock@<X0>(WebCore::DatabaseTracker *this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, const WTF::String *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  WTF::StringImpl *v10;
  int v11;
  int v12;
  unsigned int v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  WebCore::SQLiteDatabaseTracker *v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t result;
  uint64_t v27;
  sqlite3_stmt *v28;
  sqlite3_stmt *v29;
  sqlite3_stmt *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  char *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unsigned __int8 *v41;
  WebCore::SQLiteDatabaseTracker *v43;
  int v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WebCore::SQLiteDatabaseTracker *v48;
  WebCore::SQLiteDatabaseTracker *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52[2];
  char **v53;
  char *v54;
  sqlite3_stmt *v55;
  sqlite3_stmt *pStmt;
  int v57;

  WebCore::SecurityOriginData::databaseIdentifier(a2, &v51);
  WebCore::DatabaseTracker::originPath((WebCore::DatabaseTracker *)&v50, this, a2);
  if ((!a4
     || v50
     && *((_DWORD *)v50 + 1)
     && (WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v50, v10) & 1) != 0)
    && *((_QWORD *)this + 4))
  {
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "SELECT path FROM Databases WHERE origin=? AND name=?;",
      54,
      (uint64_t)&v55);
    v11 = v57;
    if (v57)
    {
      *a5 = 0;
      v12 = 1;
LABEL_38:
      if (v11 != -1)
        ((void (*)(WTF::StringImpl **, sqlite3_stmt **))off_1E336DDD8[v11])(v52, &v55);
      if (v12)
        goto LABEL_80;
      WTF::UUID::UUID((WTF::UUID *)v52);
      result = _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_();
      if ((result & 0x80000000) != 0
        || (v27 = (result + 3), __OFADD__((_DWORD)result, 3))
        || (v29 = v52[0], v28 = v52[1], result = WTF::tryFastCompactMalloc((WTF *)(v27 + 20)), (v30 = v55) == 0))
      {
LABEL_99:
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)v55 = 2;
      *((_DWORD *)v30 + 1) = v27;
      *((_QWORD *)v30 + 1) = (char *)v30 + 20;
      *((_DWORD *)v30 + 4) = 4;
      v55 = v29;
      pStmt = v28;
      v53 = &v54;
      v54 = (char *)v30 + 20;
      _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)&v55, &v53);
      v31 = (uint64_t)v30
          + _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_()
          + 20;
      *(_BYTE *)(v31 + 2) = 98;
      *(_WORD *)v31 = 25646;
      WebCore::DatabaseTracker::openTrackerDatabase(this, 1);
      if (!*((_QWORD *)this + 4))
        goto LABEL_77;
      WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "INSERT INTO Databases (origin, name, path) VALUES (?, ?, ?);",
        61,
        (uint64_t)&v55);
      v32 = v57;
      if (v57)
      {
        v33 = 0;
        goto LABEL_73;
      }
      WebCore::SecurityOriginData::databaseIdentifier(a2, v52);
      if (v52[0])
      {
        v34 = (char *)*((_QWORD *)v52[0] + 1);
        v35 = *((unsigned int *)v52[0] + 1) | ((unint64_t)((*((_DWORD *)v52[0] + 4) >> 2) & 1) << 32);
      }
      else
      {
        v34 = 0;
        v35 = 0x100000000;
      }
      WebCore::SQLiteStatement::bindText((uint64_t)&v55, 1, v34, v35);
      v37 = v52[0];
      v52[0] = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v36);
        else
          *(_DWORD *)v37 -= 2;
      }
      if (!v57)
      {
        v38 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v39 = *(char **)(v38 + 8);
          v40 = *(unsigned int *)(v38 + 4) | ((unint64_t)((*(_DWORD *)(v38 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v39 = 0;
          v40 = 0x100000000;
        }
        WebCore::SQLiteStatement::bindText((uint64_t)&v55, 2, v39, v40);
        if (!v57)
        {
          WebCore::SQLiteStatement::bindText((uint64_t)&v55, 3, *((char **)v30 + 1), *((unsigned int *)v30 + 1) | ((unint64_t)((*((_DWORD *)v30 + 4) >> 2) & 1) << 32));
          if (!v57)
          {
            v41 = (unsigned __int8 *)v55 + 32;
            if (__ldaxr((unsigned __int8 *)v55 + 32))
            {
              __clrex();
            }
            else if (!__stxr(1u, v41))
            {
LABEL_61:
              if (*((_BYTE *)v55 + 20)
                || (v43 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v43))
              {
                v44 = sqlite3_step(pStmt);
              }
              else
              {
                WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v43);
                v49 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
                v44 = (int)v49;
                WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v49);
              }
              v45 = __ldxr(v41);
              if (v45 == 1)
              {
                if (!__stlxr(0, v41))
                {
LABEL_69:
                  v33 = v44 == 101;
                  if (v44 == 101)
                  {
                    v46 = *((_QWORD *)this + 13);
                    if (v46)
                      (*(void (**)(uint64_t, const WebCore::SecurityOriginData *))(*(_QWORD *)v46 + 16))(v46, a2);
                  }
                  v32 = v57;
LABEL_73:
                  if (v32 != -1)
                    ((void (*)(WTF::StringImpl **, sqlite3_stmt **))off_1E336DDD8[v32])(v52, &v55);
                  if (v33)
                  {
                    WTF::FileSystemImpl::pathByAppendingComponent();
                    goto LABEL_78;
                  }
LABEL_77:
                  *a5 = 0;
LABEL_78:
                  if (*(_DWORD *)v30 == 2)
                    WTF::StringImpl::destroy(v30, v10);
                  else
                    *(_DWORD *)v30 -= 2;
                  goto LABEL_80;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v41);
              goto LABEL_69;
            }
            MEMORY[0x19AEA534C](v41);
            goto LABEL_61;
          }
        }
      }
LABEL_98:
      result = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_99;
    }
    v13 = v51;
    if (v51)
    {
      v14 = (char *)*((_QWORD *)v51 + 1);
      v13 = *((_DWORD *)v51 + 1);
      v15 = ((unint64_t)*((unsigned int *)v51 + 4) >> 2) & 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v55, 1, v14, v13 | (v15 << 32));
    if (v57)
      goto LABEL_98;
    v16 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v17 = *(unsigned int *)(v16 + 16);
      v18 = *(char **)(v16 + 8);
      LODWORD(v16) = *(_DWORD *)(v16 + 4);
      v19 = (v17 >> 2) & 1;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v55, 2, v18, v16 | (unint64_t)(v19 << 32));
    if (v57)
      goto LABEL_98;
    v20 = (unsigned __int8 *)v55 + 32;
    if (__ldaxr((unsigned __int8 *)v55 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v20))
    {
LABEL_19:
      if (*((_BYTE *)v55 + 20) || (v22 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v22))
      {
        v23 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v22);
        v48 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v23 = (int)v48;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v48);
      }
      v24 = __ldxr(v20);
      if (v24 == 1)
      {
        if (!__stlxr(0, v20))
        {
LABEL_27:
          if (v23 == 100)
          {
            if (v57)
              goto LABEL_98;
            WebCore::SQLiteStatement::columnText(&v55, 0, v52);
            WTF::FileSystemImpl::pathByAppendingComponent();
            v25 = v52[0];
            v52[0] = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v10);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            if ((a4 & 1) != 0 && v23 == 101)
            {
              v12 = 0;
LABEL_37:
              v11 = v57;
              goto LABEL_38;
            }
            *a5 = 0;
          }
          v12 = 1;
          goto LABEL_37;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v20);
      goto LABEL_27;
    }
    MEMORY[0x19AEA534C](v20);
    goto LABEL_19;
  }
  *a5 = 0;
LABEL_80:
  v47 = v50;
  v50 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v10);
    else
      *(_DWORD *)v47 -= 2;
  }
  result = (uint64_t)v51;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DatabaseTracker::fullPathForDatabase(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, const WTF::String *a3, int a4)
{
  unsigned __int8 *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  int v12;
  WTF::StringImpl *v13;

  v8 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  WebCore::DatabaseTracker::fullPathForDatabaseNoLock(this, a2, a3, a4, &v13);
  WTF::String::isolatedCopy();
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  v12 = __ldxr(v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, v8))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
}

void WebCore::DatabaseTracker::databaseNamesNoLock(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, WebCore::SecurityOriginData *a3)
{
  int v6;
  char *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int8 *v11;
  WebCore::SQLiteDatabaseTracker *v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::SQLiteDatabaseTracker *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::DatabaseTracker *v28;
  const WebCore::SecurityOriginData *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  sqlite3_stmt *v33;
  sqlite3_stmt *pStmt;
  int v35;

  WebCore::DatabaseTracker::openTrackerDatabase(a2, 0);
  if (!*((_QWORD *)a2 + 4))
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)a2 + 24, "SELECT name FROM Databases where origin=?;",
    43,
    (uint64_t)&v33);
  v6 = v35;
  if (v35)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    goto LABEL_40;
  }
  WebCore::SecurityOriginData::databaseIdentifier(a3, &v31);
  if (v31)
  {
    v7 = (char *)*((_QWORD *)v31 + 1);
    v8 = *((unsigned int *)v31 + 1) | ((unint64_t)((*((_DWORD *)v31 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v33, 1, v7, v8);
  v10 = v31;
  v31 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v31 = 0;
  v32 = 0;
  if (v35)
  {
LABEL_54:
    v28 = (WebCore::DatabaseTracker *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::DatabaseTracker::databaseNames(v28, v29);
    return;
  }
  while (1)
  {
    v11 = (unsigned __int8 *)v33 + 32;
    if (__ldaxr((unsigned __int8 *)v33 + 32))
    {
      __clrex();
LABEL_14:
      MEMORY[0x19AEA534C](v11);
      goto LABEL_15;
    }
    if (__stxr(1u, v11))
      goto LABEL_14;
LABEL_15:
    if (*((_BYTE *)v33 + 20) || (v13 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v13))
    {
      v14 = sqlite3_step(pStmt);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v13);
      v20 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
      v14 = (int)v20;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v20);
    }
    v15 = __ldxr(v11);
    if (v15 != 1)
    {
      __clrex();
LABEL_22:
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      goto LABEL_23;
    }
    if (__stlxr(0, v11))
      goto LABEL_22;
LABEL_23:
    if (v14 != 100)
      break;
    if (!v35)
    {
      WebCore::SQLiteStatement::columnText(&v33, 0, &v30);
      LODWORD(v17) = HIDWORD(v32);
      if (HIDWORD(v32) == (_DWORD)v32)
      {
        v21 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v31, HIDWORD(v32) + 1, (unint64_t)&v30);
        v17 = HIDWORD(v32);
        v22 = v31;
        v23 = *v21;
        *v21 = 0;
        *((_QWORD *)v22 + v17) = v23;
      }
      else
      {
        v18 = v30;
        v30 = 0;
        *((_QWORD *)v31 + HIDWORD(v32)) = v18;
      }
      HIDWORD(v32) = v17 + 1;
      v19 = v30;
      v30 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v16);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (!v35)
        continue;
    }
    goto LABEL_54;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v31, (WTF::StringImpl *)HIDWORD(v32));
  if (v14 == 101)
  {
    *(_QWORD *)this = v31;
    *((_QWORD *)this + 1) = v32;
    goto LABEL_39;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v25 = v31;
  if (HIDWORD(v32))
  {
    v26 = 8 * HIDWORD(v32);
    do
    {
      v27 = *(WTF::StringImpl **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v24);
        else
          *(_DWORD *)v27 -= 2;
      }
      v25 = (WTF::StringImpl *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
    v25 = v31;
    if (v31)
      goto LABEL_53;
  }
  else
  {
    if (!v31)
      goto LABEL_39;
LABEL_53:
    v31 = 0;
    LODWORD(v32) = 0;
    WTF::fastFree(v25, v24);
  }
LABEL_39:
  v6 = v35;
LABEL_40:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, sqlite3_stmt **))off_1E336DDD8[v6])(&v31, &v33);
}

void WebCore::DatabaseTracker::databaseNames(WebCore::DatabaseTracker *this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  WTF::StringImpl **v8;
  int v9;
  int v10;
  unint64_t v11;
  WTF::StringImpl **i;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;

  v6 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  WebCore::DatabaseTracker::databaseNamesNoLock((WebCore::DatabaseTracker *)&v18, this, a2);
  v8 = v18;
  v9 = v20;
  if (v20)
  {
    v11 = (unint64_t)&v18[v20];
    for (i = v18; (unint64_t)i < v11; ++i)
    {
      WTF::String::isolatedCopy();
      v14 = v21;
      v21 = 0;
      v15 = *i;
      *i = v14;
      if (v15)
      {
        v16 = *(_DWORD *)v15 - 2;
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::destroy(v15, v13);
          v15 = v21;
          v21 = 0;
          if (!v15)
            continue;
          v16 = *(_DWORD *)v15 - 2;
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::destroy(v15, v17);
            continue;
          }
        }
        *(_DWORD *)v15 = v16;
      }
    }
  }
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 12) = v9;
  v10 = __ldxr(v6);
  if (v10 == 1)
  {
    if (!__stlxr(0, v6))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

WTF::StringImpl *WebCore::DatabaseTracker::detailsForNameAndOrigin@<X0>(WebCore::DatabaseTracker *this@<X0>, const WTF::String *a2@<X1>, const WebCore::SecurityOriginData *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v8;
  WTF::StringImpl *v10;
  unsigned int v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  WTF::StringImpl *v20;
  sqlite3_int64 v21;
  int v22;
  WebCore::SQLiteDatabaseTracker *v23;
  int v24;
  int v25;
  int v26;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *result;
  uint64_t v33;
  const WTF::String *v34;
  uint64_t v35;
  const WTF::String *v36;
  char v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  WebCore::SQLiteDatabaseTracker *v44;
  WebCore::SQLiteDatabaseTracker *v45;
  int v46;
  int v47;
  WebCore::SQLiteDatabaseTracker *v48;
  WebCore::DatabaseTracker *v49;
  const WebCore::SecurityOriginData *v50;
  const WTF::String *v51;
  const WTF::String *v52;
  sqlite3_int64 v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  sqlite3_stmt *pStmt;
  int v57;
  WTF::StringImpl *v58;

  WebCore::SecurityOriginData::databaseIdentifier(a3, &v58);
  v8 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  WebCore::DatabaseTracker::openTrackerDatabase(this, 0);
  if (!*((_QWORD *)this + 4))
  {
    v20 = 0;
    v21 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(int64x2_t *)(a4 + 32) = vdupq_n_s64(0x7FF8000000000000uLL);
    v22 = 1;
    goto LABEL_30;
  }
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "SELECT displayName, estimatedSize FROM Databases WHERE origin=? AND name=?", 75, (uint64_t)&v55);
  if (v57)
    goto LABEL_27;
  v11 = v58;
  if (v58)
  {
    v12 = (char *)*((_QWORD *)v58 + 1);
    v11 = *((_DWORD *)v58 + 1);
    v13 = ((unint64_t)*((unsigned int *)v58 + 4) >> 2) & 1;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v55, 1, v12, v11 | (v13 << 32));
  if (v57)
    goto LABEL_103;
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v15 = *(unsigned int *)(v14 + 16);
    v16 = *(char **)(v14 + 8);
    LODWORD(v14) = *(_DWORD *)(v14 + 4);
    v17 = (v15 >> 2) & 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v55, 2, v16, v14 | (unint64_t)(v17 << 32));
  if (v57)
    goto LABEL_103;
  v18 = (unsigned __int8 *)v55 + 32;
  if (__ldaxr((unsigned __int8 *)v55 + 32))
  {
    __clrex();
LABEL_17:
    MEMORY[0x19AEA534C](v18);
    goto LABEL_18;
  }
  if (__stxr(1u, v18))
    goto LABEL_17;
LABEL_18:
  if (*((_BYTE *)v55 + 20) || (v23 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v23))
  {
    v24 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v23);
    v44 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v24 = (int)v44;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v44);
  }
  v25 = __ldxr(v18);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v18))
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (v24 != 100)
  {
LABEL_27:
    v20 = 0;
    v21 = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(int64x2_t *)(a4 + 32) = vdupq_n_s64(0x7FF8000000000000uLL);
    v22 = 1;
    goto LABEL_28;
  }
  if (v57 || (WebCore::SQLiteStatement::columnText(&v55, 0, &v54), v57))
  {
LABEL_103:
    v49 = (WebCore::DatabaseTracker *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DatabaseTracker::setDatabaseDetails(v49, v50, v51, v52, v53);
  }
  v20 = v54;
  if (!sqlite3_stmt_busy(pStmt))
  {
    v42 = (unsigned __int8 *)v55 + 32;
    if (__ldaxr((unsigned __int8 *)v55 + 32))
    {
      __clrex();
    }
    else if (!__stxr(1u, v42))
    {
LABEL_90:
      if (*((_BYTE *)v55 + 20) || (v45 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v45))
      {
        v46 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v45);
        v48 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v46 = (int)v48;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v48);
      }
      v47 = __ldxr(v42);
      if (v47 == 1)
      {
        if (!__stlxr(0, v42))
        {
LABEL_98:
          if (v46 != 100)
            goto LABEL_101;
          goto LABEL_99;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v42);
      goto LABEL_98;
    }
    MEMORY[0x19AEA534C](v42);
    goto LABEL_90;
  }
LABEL_99:
  if (sqlite3_data_count(pStmt) >= 2)
  {
    v21 = sqlite3_column_int64(pStmt, 1);
    v22 = 0;
    goto LABEL_28;
  }
LABEL_101:
  v22 = 0;
  v21 = 0;
LABEL_28:
  if (v57 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E336DDD8[v57])(&v54, &v55);
LABEL_30:
  v26 = __ldxr(v8);
  if (v26 == 1)
  {
    if (!__stlxr(0, v8))
    {
      if (v22)
        goto LABEL_57;
      goto LABEL_36;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::DatabaseTracker *)((char *)this + 16));
  if (v22)
    goto LABEL_57;
LABEL_36:
  if (__ldaxr(v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_40;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_40:
  WebCore::DatabaseTracker::fullPathForDatabaseNoLock(this, a3, a2, 0, &v55);
  WTF::String::isolatedCopy();
  v28 = v55;
  v55 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v10);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = __ldxr(v8);
  if (v29 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_48;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::DatabaseTracker *)((char *)this + 16));
LABEL_48:
  v30 = v54;
  if (v54 && *((_DWORD *)v54 + 1))
  {
    v33 = WebCore::SQLiteFileSystem::databaseFileSize((WebCore::SQLiteFileSystem *)&v54, v10);
    v35 = WTF::FileSystemImpl::fileCreationTime((WTF::FileSystemImpl *)&v54, v34);
    v37 = (char)v36;
    v38 = WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v54, v36);
    v39 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v39 += 2;
    *(_QWORD *)a4 = v39;
    if (v20)
      *(_DWORD *)v20 += 2;
    *(_QWORD *)(a4 + 8) = v20;
    *(_QWORD *)(a4 + 16) = v21;
    v40 = 0x7FF8000000000000;
    if (v37)
      v41 = v35;
    else
      v41 = 0x7FF8000000000000;
    *(_QWORD *)(a4 + 24) = v33;
    *(_QWORD *)(a4 + 32) = v41;
    if ((_BYTE)v10)
      v40 = v38;
    *(_QWORD *)(a4 + 40) = v40;
    v30 = v54;
  }
  else
  {
    v31 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v31 += 2;
    *(_QWORD *)a4 = v31;
    if (v20)
      *(_DWORD *)v20 += 2;
    *(_QWORD *)(a4 + 8) = v20;
    *(_QWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 24) = xmmword_1968DF3C0;
    *(_QWORD *)(a4 + 40) = 0x7FF8000000000000;
  }
  v54 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v10);
      if (!v20)
        goto LABEL_60;
      goto LABEL_58;
    }
    *(_DWORD *)v30 -= 2;
  }
LABEL_57:
  if (!v20)
    goto LABEL_60;
LABEL_58:
  if (*(_DWORD *)v20 == 2)
    WTF::StringImpl::destroy(v20, v10);
  else
    *(_DWORD *)v20 -= 2;
LABEL_60:
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DatabaseTracker::setDatabaseDetails(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, const WTF::String *a3, const WTF::String *a4, sqlite3_int64 a5)
{
  unsigned __int8 *v10;
  WTF::StringImpl *v12;
  int v13;
  sqlite3_int64 v14;
  int v15;
  unsigned int v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  WebCore::SQLiteDatabaseTracker *v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  WebCore::SQLiteDatabaseTracker *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  WebCore::SQLiteDatabaseTracker *v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *result;
  WebCore::SQLiteDatabaseTracker *v45;
  WebCore::SQLiteDatabaseTracker *v46;
  WebCore::SQLiteDatabaseTracker *v47;
  WebCore::DatabaseTracker *v48;
  WebCore::Database *v49;
  uint64_t v50;
  sqlite3_stmt *pStmt;
  int v52;
  WTF::StringImpl *v53;
  char v54;

  WebCore::SecurityOriginData::databaseIdentifier(a2, &v53);
  v10 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  WebCore::DatabaseTracker::openTrackerDatabase(this, 1);
  if (!*((_QWORD *)this + 4))
    goto LABEL_75;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "SELECT guid FROM Databases WHERE origin=? AND name=?", 53, (uint64_t)&v50);
  v13 = v52;
  if (v52)
  {
    v14 = 0;
    v15 = 1;
    goto LABEL_48;
  }
  v16 = v53;
  if (v53)
  {
    v17 = (char *)*((_QWORD *)v53 + 1);
    v16 = *((_DWORD *)v53 + 1);
    v18 = ((unint64_t)*((unsigned int *)v53 + 4) >> 2) & 1;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v50, 1, v17, v16 | (v18 << 32));
  if (v52)
    goto LABEL_89;
  v19 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v20 = *(unsigned int *)(v19 + 16);
    v21 = *(char **)(v19 + 8);
    LODWORD(v19) = *(_DWORD *)(v19 + 4);
    v22 = (v20 >> 2) & 1;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v50, 2, v21, v19 | (unint64_t)(v22 << 32));
  if (v52)
    goto LABEL_89;
  v23 = (unsigned __int8 *)(v50 + 32);
  if (__ldaxr((unsigned __int8 *)(v50 + 32)))
  {
    __clrex();
LABEL_17:
    MEMORY[0x19AEA534C](v23);
    goto LABEL_18;
  }
  if (__stxr(1u, v23))
    goto LABEL_17;
LABEL_18:
  if (*(_BYTE *)(v50 + 20) || (v25 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v25))
  {
    v26 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v25);
    v45 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v26 = (int)v45;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v45);
  }
  v27 = __ldxr(v23);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v23))
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
  if (v26 != 100)
    goto LABEL_46;
  if (v52)
    goto LABEL_89;
  if (sqlite3_stmt_busy(pStmt))
  {
LABEL_44:
    if (sqlite3_data_count(pStmt) >= 1)
    {
      v14 = sqlite3_column_int64(pStmt, 0);
      v15 = 0;
      if (v14)
        goto LABEL_47;
    }
    goto LABEL_46;
  }
  v28 = (unsigned __int8 *)(v50 + 32);
  if (__ldaxr((unsigned __int8 *)(v50 + 32)))
  {
    __clrex();
LABEL_34:
    MEMORY[0x19AEA534C](v28);
    goto LABEL_35;
  }
  if (__stxr(1u, v28))
    goto LABEL_34;
LABEL_35:
  if (*(_BYTE *)(v50 + 20) || (v30 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v30))
  {
    v31 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v30);
    v47 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v31 = (int)v47;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v47);
  }
  v32 = __ldxr(v28);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v28))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
  if (v31 == 100)
    goto LABEL_44;
LABEL_46:
  v14 = 0;
  v15 = 1;
LABEL_47:
  v13 = v52;
LABEL_48:
  if (v13 != -1)
    ((void (*)(char *, uint64_t *))off_1E336DDD8[v13])(&v54, &v50);
  if (!v15)
  {
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "UPDATE Databases SET displayName=?, estimatedSize=? WHERE guid=?", 65, (uint64_t)&v50);
    v33 = v52;
    if (v52)
    {
LABEL_73:
      if (v33 != -1)
        ((void (*)(char *, uint64_t *))off_1E336DDD8[v33])(&v54, &v50);
      goto LABEL_75;
    }
    v34 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      v35 = *(char **)(v34 + 8);
      v36 = *(unsigned int *)(v34 + 4) | ((unint64_t)((*(_DWORD *)(v34 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v35 = 0;
      v36 = 0x100000000;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)&v50, 1, v35, v36);
    if (!v52)
    {
      sqlite3_bind_int64(pStmt, 2, a5);
      if (!v52)
      {
        sqlite3_bind_int64(pStmt, 3, v14);
        if (!v52)
        {
          v37 = (unsigned __int8 *)(v50 + 32);
          if (__ldaxr((unsigned __int8 *)(v50 + 32)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v37))
          {
LABEL_61:
            if (*(_BYTE *)(v50 + 20)
              || (v39 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v39))
            {
              v40 = sqlite3_step(pStmt);
            }
            else
            {
              WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v39);
              v46 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
              v40 = (int)v46;
              WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v46);
            }
            v41 = __ldxr(v37);
            if (v41 == 1)
            {
              if (!__stlxr(0, v37))
              {
LABEL_69:
                if (v40 == 101)
                {
                  v42 = *((_QWORD *)this + 13);
                  if (v42)
                    (*(void (**)(uint64_t, const WebCore::SecurityOriginData *, const WTF::String *))(*(_QWORD *)v42 + 24))(v42, a2, a3);
                }
                v33 = v52;
                goto LABEL_73;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v37);
            goto LABEL_69;
          }
          MEMORY[0x19AEA534C](v37);
          goto LABEL_61;
        }
      }
    }
LABEL_89:
    v48 = (WebCore::DatabaseTracker *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::DatabaseTracker::doneCreatingDatabase(v48, v49);
  }
LABEL_75:
  v43 = __ldxr(v10);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_79;
  }
  if (__stlxr(0, v10))
LABEL_79:
    WTF::Lock::unlockSlow((WebCore::DatabaseTracker *)((char *)this + 16));
  result = v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DatabaseTracker::doneCreatingDatabase(WebCore::DatabaseTracker *this, WebCore::Database *a2)
{
  WebCore::DatabaseTracker *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _BYTE v21[24];
  int v22;
  uint64_t v23;

  v3 = this;
  v23 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (WebCore::DatabaseTracker *)MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  if (WTF::isMainThread(this))
  {
    v6 = *((_QWORD *)a2 + 2);
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + 8);
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8)
      v8 = WTF::Thread::initializeCurrentTLS(0);
    if (v7 != v8)
    {
      result = 777;
      __break(0xC471u);
      return result;
    }
    v6 = *((_QWORD *)a2 + 3);
  }
  v21[0] = 0;
  v22 = -1;
  v9 = *(unsigned int *)(v6 + 32);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v9])(&v20, v21, v6 + 8);
    v22 = v9;
  }
  WTF::String::isolatedCopy();
  v10 = (_QWORD *)((char *)v3 + 112);
  v11 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)v3 + 14, (uint64_t)v21);
  v14 = v11;
  v15 = *((_QWORD *)v3 + 14);
  if (v15)
    v15 += 40 * *(unsigned int *)(v15 - 4);
  if (v15 != v11)
  {
    v16 = (_QWORD *)(v11 + 32);
    if (WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(v11 + 32), &v20, v13))
    {
      if (!*v16 || !*(_DWORD *)(*v16 - 12))
      {
        if (*v10)
        {
          v19 = *v10 + 40 * *(unsigned int *)(*v10 - 4);
          if (v19 == v14)
            goto LABEL_19;
        }
        else
        {
          if (!v14)
            goto LABEL_19;
          v19 = 0;
        }
        if (v19 != v14)
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::remove((uint64_t)v10, v14);
      }
    }
  }
LABEL_19:
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (v22 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v22])(&v20, v21);
  v18 = __ldxr(v4);
  if (v18 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

uint64_t WebCore::DatabaseTracker::addOpenDatabase(WebCore::DatabaseTracker *this, WebCore::Database *a2)
{
  WebCore::DatabaseTracker *v3;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v46;
  BOOL v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  const WTF::StringImpl *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int i;
  uint64_t v64;
  WTF *v65;
  uint64_t *v66;
  WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  WTF::StringImpl **v73;
  int v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  WTF *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t result;
  int v90;
  unsigned int v91;
  WebCore::Database *v92;
  uint64_t *v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned __int16 v96;
  char v97;
  WebCore::Database *v98;
  WTF::StringImpl *v99[3];
  unsigned int v100;
  _BYTE v101[24];
  int v102;
  WTF::StringImpl *v103[3];
  unsigned int v104;
  uint64_t v105;

  v3 = this;
  v105 = *MEMORY[0x1E0C80C00];
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_4:
    this = (WebCore::DatabaseTracker *)MEMORY[0x19AEA534C](this);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_4;
LABEL_5:
  if (!*((_QWORD *)v3 + 1))
  {
    this = (WebCore::DatabaseTracker *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)this = 0;
    v6 = (WTF *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = this;
    if (v6)
    {
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
      {
        v8 = *(unsigned int *)(v7 - 4);
        if ((_DWORD)v8)
        {
          v9 = *(_QWORD *)v6;
          while (1)
          {
            v10 = *(unsigned int *)(v9 + 24);
            if ((_DWORD)v10 == -1)
              break;
            v103[0] = (WTF::StringImpl *)v101;
            if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v10])(v103, v9) & 1) == 0)
            {
              v11 = *(unsigned int *)(v9 + 24);
              if ((_DWORD)v11 != -1)
                ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v11])(v103, v9);
              *(_DWORD *)(v9 + 24) = -1;
            }
            v9 += 40;
            if (!--v8)
              goto LABEL_16;
          }
LABEL_169:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
LABEL_16:
        WTF::fastFree((WTF *)(v7 - 16), v5);
      }
      this = (WebCore::DatabaseTracker *)WTF::fastFree(v6, v5);
    }
  }
  v92 = a2;
  if (WTF::isMainThread(this))
  {
    v12 = *((_QWORD *)a2 + 2);
  }
  else
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + 8);
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v14)
      v14 = WTF::Thread::initializeCurrentTLS(0);
    if (v13 != v14)
    {
      result = 777;
      __break(0xC471u);
      return result;
    }
    v12 = *((_QWORD *)a2 + 3);
  }
  v101[0] = 0;
  v102 = -1;
  v15 = *(unsigned int *)(v12 + 32);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v15])(v103, v101, v12 + 8);
    v102 = v15;
  }
  v94 = (unsigned __int8 *)v3;
  v16 = **((_QWORD **)v3 + 1);
  if (!v16
    || (v17 = *(_DWORD *)(v16 - 8),
        v18 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)v101) & v17,
        v19 = (unsigned int *)(v16 + 40 * v18),
        (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19) & 1) != 0))
  {
LABEL_47:
    v26 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v26 = 0;
    if (v102 == -1)
      goto LABEL_169;
    v27 = v26;
    v28 = (uint64_t *)*((_QWORD *)v3 + 1);
    v99[0] = (WTF::StringImpl *)&v98;
    ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyEOSJ_EUlOT_E_EEJNS0_6__implIJSB_SI_EEEEEEDcSN_DpOT0____fmatrix[v102])(v103, v99, v101);
    LOBYTE(v99[0]) = 0;
    v100 = -1;
    v29 = v104;
    if (v104 != -1)
    {
      ((void (*)(WebCore::Database **, WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v104])(&v98, v99, v103);
      v100 = v29;
      if (v104 != -1)
        ((void (*)(WebCore::Database **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v104])(&v98, v103);
    }
    v30 = *v28;
    if (*v28
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v28, 8u, 0), (v30 = *v28) != 0))
    {
      v31 = *(_DWORD *)(v30 - 8);
    }
    else
    {
      v31 = 0;
    }
    v96 = 0;
    v97 = 0;
    v98 = (WebCore::Database *)&v95;
    v32 = v100 == -1 ? -1 : v100;
    v33 = (v32 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v32 - 1640531527) << 16) ^ ((unsigned __int16)v32
                                                                                               - 1640531527);
    v34 = (v32 >> 37) & 0x7FFF800 ^ ((v33 + WORD2(v32) + (v33 >> 11)) << 16) ^ (v33 + WORD2(v32) + (v33 >> 11));
    v95 = v34 + (v34 >> 11);
    if (v100 == -1)
      goto LABEL_169;
    v93 = v27;
    v103[0] = (WTF::StringImpl *)&v98;
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E336DE88[v100])(v103, v99);
    v35 = v95;
    if (v97)
    {
      v91 = (v95 + v96) ^ ((v95 + v96) << 11);
      v35 = v91 + (v91 >> 17);
    }
    v36 = (v35 ^ (8 * v35)) + ((v35 ^ (8 * v35)) >> 5);
    v37 = (v36 ^ (4 * v36)) + ((v36 ^ (4 * v36)) >> 15);
    v38 = v37 ^ (v37 << 10);
    if (!v38)
      v38 = 0x800000;
    v39 = v38 & v31;
    v40 = v30 + 40 * (v38 & v31);
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v40) & 1) == 0)
    {
      v41 = 0;
      v42 = 1;
      do
      {
        v43 = *(unsigned int *)(v40 + 24);
        if ((_DWORD)v43 == -1)
          goto LABEL_169;
        v103[0] = (WTF::StringImpl *)&v98;
        if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v43])(v103, v40) & 1) != 0)
        {
          v41 = v40;
        }
        else
        {
          if ((WTF::StringImpl **)v40 == v99)
            goto LABEL_103;
          v44 = *(unsigned int *)(v40 + 24);
          v46 = v100 == (_DWORD)v44 && v100 != -1;
          if ((_DWORD)v44 == -1 || !v46)
          {
            if ((_DWORD)v44 == -1)
              v47 = v100 == -1;
            else
              v47 = v46;
            if (v47)
              goto LABEL_103;
          }
          else
          {
            v103[0] = (WTF::StringImpl *)&v98;
            if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v44])(v103, v40, v99) & 1) != 0)goto LABEL_103;
          }
        }
        v39 = (v39 + v42) & v31;
        v40 = v30 + 40 * v39;
        ++v42;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v40));
      if (v41)
      {
        *(_QWORD *)(v41 + 32) = 0;
        *(_OWORD *)v41 = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        --*(_DWORD *)(*v28 - 16);
        v40 = v41;
      }
    }
    v48 = *(unsigned int *)(v40 + 24);
    if ((_DWORD)v48 == -1)
    {
      v49 = v93;
      if (v100 == -1)
        goto LABEL_90;
    }
    else
    {
      v49 = v93;
      if (v100 == -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v48])(v103, v40);
        *(_DWORD *)(v40 + 24) = -1;
        goto LABEL_90;
      }
    }
    v103[0] = (WTF::StringImpl *)v40;
    ((void (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))off_1E336DEA8[v100])(v103, v40, v99);
LABEL_90:
    *(_QWORD *)(v40 + 32) = v49;
    v50 = *v28;
    if (*v28)
      v51 = *(_DWORD *)(v50 - 12) + 1;
    else
      v51 = 1;
    *(_DWORD *)(v50 - 12) = v51;
    v52 = *v28;
    if (*v28)
      v53 = *(_DWORD *)(v52 - 12);
    else
      v53 = 0;
    v54 = (*(_DWORD *)(v52 - 16) + v53);
    v55 = *(unsigned int *)(v52 - 4);
    if (v55 > 0x400)
    {
      if (v55 > 2 * v54)
        goto LABEL_103;
    }
    else
    {
      if (3 * v55 > 4 * v54)
      {
LABEL_103:
        if (v100 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v100])(v103, v99);
        v57 = v93;
        goto LABEL_106;
      }
      if (!(_DWORD)v55)
      {
        v56 = 8;
        goto LABEL_102;
      }
    }
    v56 = (_DWORD)v55 << (6 * *(_DWORD *)(v52 - 12) >= (2 * v55));
LABEL_102:
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v28, v56, v40);
    goto LABEL_103;
  }
  v20 = 1;
  while (1)
  {
    v21 = v19[6];
    if ((_DWORD)v21 == -1)
      goto LABEL_169;
    v103[0] = (WTF::StringImpl *)v99;
    if ((((uint64_t (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v21])(v103, v19) & 1) == 0)
    {
      if (v19 == (unsigned int *)v101)
        break;
      v22 = v19[6];
      v24 = v102 == (_DWORD)v22 && v102 != -1;
      if ((_DWORD)v22 != -1 && v24)
      {
        v103[0] = (WTF::StringImpl *)v99;
        if ((((uint64_t (*)(WTF::StringImpl **, unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v22])(v103, v19, v101) & 1) != 0)break;
        goto LABEL_46;
      }
      if ((_DWORD)v22 == -1 ? v102 == -1 : v24)
        break;
    }
LABEL_46:
    v18 = ((_DWORD)v18 + v20) & v17;
    v19 = (unsigned int *)(v16 + 40 * v18);
    ++v20;
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19) & 1) != 0)
      goto LABEL_47;
  }
  v57 = *(uint64_t **)(v16 + 40 * v18 + 32);
  if (!v57)
    goto LABEL_47;
LABEL_106:
  WTF::String::isolatedCopy();
  v59 = *v57;
  if (*v57)
  {
    v60 = *(_DWORD *)(v59 - 8);
    v61 = *((_DWORD *)v99[0] + 4);
    if (v61 < 0x100)
      v62 = WTF::StringImpl::hashSlowCase(v99[0]);
    else
      v62 = v61 >> 8;
    for (i = 0; ; v62 = i + v64)
    {
      v64 = v62 & v60;
      v65 = *(WTF **)(v59 + 16 * v64);
      if (v65 != (WTF *)-1)
      {
        if (!v65)
          goto LABEL_116;
        if ((WTF::equal(v65, v99[0], v58) & 1) != 0)
          break;
      }
      ++i;
    }
    v66 = *(uint64_t **)(v59 + 16 * v64 + 8);
    if (v66)
      goto LABEL_154;
  }
LABEL_116:
  v66 = (uint64_t *)WTF::fastMalloc((WTF *)8);
  *v66 = 0;
  WTF::String::isolatedCopy();
  v69 = *v57;
  if (*v57
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v57, 8u), (v69 = *v57) != 0))
  {
    v70 = *(_DWORD *)(v69 - 8);
  }
  else
  {
    v70 = 0;
  }
  v71 = *((_DWORD *)v103[0] + 4);
  if (v71 < 0x100)
    v72 = WTF::StringImpl::hashSlowCase(v103[0]);
  else
    v72 = v71 >> 8;
  v73 = 0;
  v74 = 1;
  while (2)
  {
    v75 = v72 & v70;
    v76 = (WTF::StringImpl **)(v69 + 16 * v75);
    v77 = *v76;
    if (*v76 == (WTF::StringImpl *)-1)
    {
      v73 = (WTF::StringImpl **)(v69 + 16 * v75);
LABEL_128:
      v72 = v74 + v75;
      ++v74;
      continue;
    }
    break;
  }
  if (v77)
  {
    if (WTF::equal(v77, v103[0], v68))
    {
      *(_QWORD *)(v69 + 16 * v75 + 8) = v66;
      goto LABEL_151;
    }
    goto LABEL_128;
  }
  if (v73)
  {
    *v73 = 0;
    v73[1] = 0;
    --*(_DWORD *)(*v57 - 16);
    v76 = v73;
  }
  v78 = v103[0];
  v103[0] = 0;
  v79 = *v76;
  *v76 = v78;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v67);
    else
      *(_DWORD *)v79 -= 2;
  }
  v76[1] = (WTF::StringImpl *)v66;
  v80 = *v57;
  if (*v57)
    v81 = *(_DWORD *)(v80 - 12) + 1;
  else
    v81 = 1;
  *(_DWORD *)(v80 - 12) = v81;
  v82 = *v57;
  if (*v57)
    v83 = *(_DWORD *)(v82 - 12);
  else
    v83 = 0;
  v84 = (*(_DWORD *)(v82 - 16) + v83);
  v85 = *(unsigned int *)(v82 - 4);
  if (v85 > 0x400)
  {
    if (v85 <= 2 * v84)
    {
LABEL_143:
      v86 = (_DWORD)v85 << (6 * *(_DWORD *)(v82 - 12) >= (2 * v85));
      goto LABEL_150;
    }
  }
  else if (3 * v85 <= 4 * v84)
  {
    if ((_DWORD)v85)
      goto LABEL_143;
    v86 = 8;
LABEL_150:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v57, v86);
  }
LABEL_151:
  v87 = v103[0];
  v103[0] = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v67);
    else
      *(_DWORD *)v87 -= 2;
  }
LABEL_154:
  v98 = v92;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(v66, (uint64_t *)&v98, (uint64_t)v103);
  result = (uint64_t)v99[0];
  v99[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v88);
    else
      *(_DWORD *)result -= 2;
  }
  if (v102 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v102])(v103, v101);
  v90 = __ldxr(v94);
  if (v90 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v94);
  }
  if (__stlxr(0, v94))
    return WTF::Lock::unlockSlow((WTF::Lock *)v94);
  return result;
}

uint64_t WebCore::DatabaseTracker::removeOpenDatabase(uint64_t this, WebCore::Database *a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  BOOL v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int i;
  uint64_t v27;
  WTF *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  WebCore::Database *v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int j;
  uint64_t v47;
  WTF *v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v59;
  uint64_t *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  WebCore::SecurityOriginData *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v74;
  BOOL v75;
  WebCore::SecurityOriginData *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  int v88;
  WebCore::Database *v89;
  WTF::StringImpl *v90;
  char v91;
  WTF::StringImpl **v92;
  _BYTE v93[24];
  int v94;
  uint64_t v95;

  v3 = this;
  v95 = *MEMORY[0x1E0C80C00];
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](this);
LABEL_5:
  v5 = *(uint64_t **)(v3 + 8);
  if (!v5)
    goto LABEL_165;
  this = WTF::isMainThread((WTF *)this);
  if ((_DWORD)this)
  {
    v6 = *((_QWORD *)a2 + 2);
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + 8);
    this = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!this)
      this = WTF::Thread::initializeCurrentTLS(0);
    if (v7 != this)
    {
      __break(0xC471u);
      goto LABEL_178;
    }
    v6 = *((_QWORD *)a2 + 3);
  }
  v93[0] = 0;
  v94 = -1;
  v8 = *(unsigned int *)(v6 + 32);
  if ((_DWORD)v8 != -1)
  {
    this = ((uint64_t (*)(WTF::StringImpl ***, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v8])(&v92, v93, v6 + 8);
    v94 = v8;
  }
  v9 = *v5;
  if (!*v5
    || (v10 = *(_DWORD *)(v9 - 8),
        v11 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)v93) & v10,
        v12 = (unsigned int *)(v9 + 40 * v11),
        this = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v12),
        (this & 1) != 0))
  {
    v13 = 0;
    goto LABEL_39;
  }
  v89 = a2;
  v14 = 1;
  while (1)
  {
    v15 = v12[6];
    if ((_DWORD)v15 == -1)
LABEL_175:
      std::__throw_bad_variant_access[abi:sn180100]();
    v92 = &v90;
    this = ((uint64_t (*)(WTF::StringImpl ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v92, v12);
    if ((this & 1) != 0)
      goto LABEL_35;
    if (v12 == (unsigned int *)v93)
      goto LABEL_37;
    v16 = v12[6];
    v17 = v94 != (_DWORD)v16 || v94 == -1;
    v18 = !v17;
    if ((_DWORD)v16 == -1 || !v18)
      break;
    v92 = &v90;
    this = ((uint64_t (*)(WTF::StringImpl ***, unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v16])(&v92, v12, v93);
    if ((this & 1) != 0)
      goto LABEL_37;
LABEL_35:
    v11 = ((_DWORD)v11 + v14) & v10;
    v12 = (unsigned int *)(v9 + 40 * v11);
    this = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v12);
    ++v14;
    if ((this & 1) != 0)
    {
      v13 = 0;
      goto LABEL_38;
    }
  }
  if ((_DWORD)v16 == -1)
    v19 = v94 == -1;
  else
    v19 = v18;
  if (!v19)
    goto LABEL_35;
LABEL_37:
  v13 = *(uint64_t **)(v9 + 40 * v11 + 32);
LABEL_38:
  a2 = v89;
LABEL_39:
  if (v94 != -1)
    this = ((uint64_t (*)(WTF::StringImpl ***, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v94])(&v92, v93);
  if (!v13)
    goto LABEL_165;
  WTF::String::isolatedCopy();
  v22 = *v13;
  if (!*v13)
    goto LABEL_162;
  v23 = *(_DWORD *)(v22 - 8);
  v24 = *((_DWORD *)v90 + 4);
  if (v24 < 0x100)
    v25 = WTF::StringImpl::hashSlowCase(v90);
  else
    v25 = v24 >> 8;
  for (i = 0; ; v25 = i + v27)
  {
    v27 = v25 & v23;
    v28 = *(WTF **)(v22 + 16 * v27);
    if (v28 != (WTF *)-1)
    {
      if (!v28)
        goto LABEL_162;
      if ((WTF::equal(v28, v90, v21) & 1) != 0)
        break;
    }
    ++i;
  }
  v29 = *(uint64_t **)(v22 + 16 * v27 + 8);
  if (!v29)
    goto LABEL_162;
  v30 = *v29;
  if (*v29)
  {
    v31 = *(_DWORD *)(v30 - 8);
    v32 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    v36 = *(WebCore::Database **)(v30 + 8 * v35);
    if (v36 != a2)
    {
      v37 = 1;
      while (v36)
      {
        v35 = ((_DWORD)v35 + v37) & v31;
        v36 = *(WebCore::Database **)(v30 + 8 * v35);
        ++v37;
        if (v36 == a2)
          goto LABEL_59;
      }
      v35 = *(unsigned int *)(v30 - 4);
    }
LABEL_59:
    if (v35 == *(_DWORD *)(v30 - 4))
      goto LABEL_181;
    *(_QWORD *)(v30 + 8 * v35) = -1;
    ++*(_DWORD *)(*v29 - 16);
    v38 = *v29;
    v39 = *v29 ? *(_DWORD *)(v38 - 12) - 1 : -1;
    *(_DWORD *)(v38 - 12) = v39;
    v30 = *v29;
    if (*v29)
    {
      v40 = *(_DWORD *)(v30 - 4);
      v41 = 6 * *(_DWORD *)(v30 - 12) < v40 && v40 >= 9;
      if (!v41
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v29, v40 >> 1, 0), (v30 = *v29) != 0))
      {
LABEL_181:
        if (*(_DWORD *)(v30 - 12))
          goto LABEL_162;
      }
    }
  }
  v42 = *v13;
  if (*v13)
  {
    v43 = *(_DWORD *)(v42 - 8);
    v44 = *((_DWORD *)v90 + 4);
    if (v44 < 0x100)
      v45 = WTF::StringImpl::hashSlowCase(v90);
    else
      v45 = v44 >> 8;
    for (j = 0; ; v45 = j + v47)
    {
      v47 = v45 & v43;
      v48 = *(WTF **)(v42 + 16 * v47);
      if (v48 != (WTF *)-1)
      {
        if (!v48)
        {
          v49 = (WTF::StringImpl **)*v13;
          if (!*v13)
            goto LABEL_99;
          v50 = *((unsigned int *)v49 - 1);
          v51 = &v49[2 * v50];
          goto LABEL_84;
        }
        if ((WTF::equal(v48, v90, v21) & 1) != 0)
          break;
      }
      ++j;
    }
    v51 = (WTF::StringImpl **)(v42 + 16 * v47);
    v49 = (WTF::StringImpl **)*v13;
    if (!*v13)
      goto LABEL_85;
    v50 = *((unsigned int *)v49 - 1);
LABEL_84:
    v49 += 2 * v50;
    if (v49 == v51)
      goto LABEL_99;
LABEL_85:
    if (v49 != v51)
    {
      v52 = *v51;
      *v51 = (WTF::StringImpl *)-1;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v20);
        else
          *(_DWORD *)v52 -= 2;
      }
      ++*(_DWORD *)(*v13 - 16);
      v53 = *v13;
      if (*v13)
        v54 = *(_DWORD *)(v53 - 12) - 1;
      else
        v54 = -1;
      *(_DWORD *)(v53 - 12) = v54;
      v55 = *v13;
      if (*v13)
      {
        v56 = 6 * *(_DWORD *)(v55 - 12);
        v57 = *(_DWORD *)(v55 - 4);
        if (v56 < v57 && v57 >= 9)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v13, v57 >> 1);
      }
    }
  }
LABEL_99:
  if (*v29)
    WTF::fastFree((WTF *)(*v29 - 16), v20);
  v59 = (WTF *)WTF::fastFree((WTF *)v29, v20);
  if (*v13 && *(_DWORD *)(*v13 - 12))
    goto LABEL_162;
  v60 = *(uint64_t **)(v3 + 8);
  if (WTF::isMainThread(v59))
  {
    v62 = *((_QWORD *)a2 + 2);
    goto LABEL_109;
  }
  v63 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 32) + 8);
  v64 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v64)
    v64 = WTF::Thread::initializeCurrentTLS(0);
  if (v63 != v64)
  {
    __break(0xC471u);
LABEL_178:
    JUMPOUT(0x1955A6AF0);
  }
  v62 = *((_QWORD *)a2 + 3);
LABEL_109:
  v93[0] = 0;
  v94 = -1;
  v65 = *(unsigned int *)(v62 + 32);
  if ((_DWORD)v65 != -1)
  {
    ((void (*)(WTF::StringImpl ***, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v65])(&v92, v93, v62 + 8);
    v94 = v65;
  }
  v66 = *v60;
  if (!*v60)
    goto LABEL_148;
  v67 = *(_DWORD *)(v66 - 8);
  v68 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)v93) & v67;
  v69 = (WebCore::SecurityOriginData *)(v66 + 40 * v68);
  if ((WebCore::SecurityOriginData::isNull(v69) & 1) != 0)
  {
LABEL_132:
    v76 = (WebCore::SecurityOriginData *)*v60;
    if (!*v60)
      goto LABEL_148;
    v69 = (WebCore::SecurityOriginData *)((char *)v76 + 40 * *((unsigned int *)v76 - 1));
    goto LABEL_134;
  }
  v70 = 1;
  while (2)
  {
    v71 = *((unsigned int *)v69 + 6);
    if ((_DWORD)v71 == -1)
      goto LABEL_175;
    v92 = (WTF::StringImpl **)&v91;
    if ((((uint64_t (*)(WTF::StringImpl ***, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v71])(&v92, v69) & 1) != 0)
    {
LABEL_131:
      v68 = (v68 + v70) & v67;
      v69 = (WebCore::SecurityOriginData *)(v66 + 40 * v68);
      ++v70;
      if (WebCore::SecurityOriginData::isNull(v69))
        goto LABEL_132;
      continue;
    }
    break;
  }
  if (v69 != (WebCore::SecurityOriginData *)v93)
  {
    v72 = *((unsigned int *)v69 + 6);
    v74 = v94 == (_DWORD)v72 && v94 != -1;
    if ((_DWORD)v72 == -1 || !v74)
    {
      if ((_DWORD)v72 == -1)
        v75 = v94 == -1;
      else
        v75 = v74;
      if (v75)
        goto LABEL_173;
    }
    else
    {
      v92 = (WTF::StringImpl **)&v91;
      if ((((uint64_t (*)(WTF::StringImpl ***, WebCore::SecurityOriginData *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v72])(&v92, v69, v93) & 1) != 0)goto LABEL_173;
    }
    goto LABEL_131;
  }
  v69 = (WebCore::SecurityOriginData *)v93;
LABEL_173:
  v76 = (WebCore::SecurityOriginData *)*v60;
  if (!*v60)
  {
LABEL_135:
    if (v76 != v69)
    {
      v77 = *((unsigned int *)v69 + 6);
      if ((_DWORD)v77 != -1)
        ((void (*)(WTF::StringImpl ***, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v77])(&v92, v69);
      *(_QWORD *)v69 = -1;
      *((_QWORD *)v69 + 1) = 0;
      *((_DWORD *)v69 + 4) = 0;
      *((_DWORD *)v69 + 6) = 0;
      ++*(_DWORD *)(*v60 - 16);
      v78 = *v60;
      if (*v60)
        v79 = *(_DWORD *)(v78 - 12) - 1;
      else
        v79 = -1;
      *(_DWORD *)(v78 - 12) = v79;
      v80 = *v60;
      if (*v60)
      {
        v81 = 6 * *(_DWORD *)(v80 - 12);
        v82 = *(_DWORD *)(v80 - 4);
        if (v81 < v82 && v82 >= 9)
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v60, v82 >> 1, 0);
      }
    }
    goto LABEL_148;
  }
LABEL_134:
  v76 = (WebCore::SecurityOriginData *)((char *)v76 + 40 * *((unsigned int *)v76 - 1));
  if (v76 != v69)
    goto LABEL_135;
LABEL_148:
  if (v94 != -1)
    ((void (*)(WTF::StringImpl ***, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v94])(&v92, v93);
  v84 = *v13;
  if (*v13)
  {
    v85 = *(unsigned int *)(v84 - 4);
    if ((_DWORD)v85)
    {
      v86 = (WTF::StringImpl **)*v13;
      do
      {
        v87 = *v86;
        if (*v86 != (WTF::StringImpl *)-1)
        {
          *v86 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
              WTF::StringImpl::destroy(v87, v61);
            else
              *(_DWORD *)v87 -= 2;
          }
        }
        v86 += 2;
        --v85;
      }
      while (v85);
    }
    WTF::fastFree((WTF *)(v84 - 16), v61);
  }
  WTF::fastFree((WTF *)v13, v61);
LABEL_162:
  this = (uint64_t)v90;
  v90 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_165:
  v88 = __ldxr((unsigned __int8 *)v3);
  if (v88 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return this;
}

sqlite3_int64 WebCore::DatabaseTracker::quota(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2)
{
  unsigned __int8 *v4;
  sqlite3_int64 v6;
  int v7;

  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  v6 = WebCore::DatabaseTracker::quotaNoLock(this, a2);
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v6;
}

uint64_t WebCore::DatabaseTracker::setQuota(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, sqlite3_int64 a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  int v9;
  BOOL v10;
  char *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 *v15;
  WebCore::SQLiteDatabaseTracker *v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned __int8 *v25;
  int v27;
  _BOOL4 v28;
  char *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned __int8 *v33;
  WebCore::SQLiteDatabaseTracker *v35;
  int v36;
  int v37;
  WebCore::SQLiteDatabaseTracker *v38;
  int v39;
  int v40;
  WebCore::SQLiteDatabaseTracker *v41;
  WebCore::SQLiteDatabaseTracker *v42;
  WebCore::SQLiteDatabaseTracker *v43;
  uint64_t v44;
  WebCore::SecurityOriginData *v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  sqlite3_stmt *pStmt;
  int v50;

  v6 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  result = WebCore::DatabaseTracker::quotaNoLock(this, a2);
  if (result == a3)
    goto LABEL_84;
  result = (uint64_t)WebCore::DatabaseTracker::openTrackerDatabase(this, 1);
  if (!*((_QWORD *)this + 4))
    goto LABEL_84;
  WebCore::DatabaseTracker::openTrackerDatabase(this, 0);
  if (!*((_QWORD *)this + 4))
    goto LABEL_42;
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "SELECT origin FROM Origins where origin=?;",
    43,
    (uint64_t)&v48);
  v9 = v50;
  if (v50)
  {
    v10 = 0;
    goto LABEL_29;
  }
  WebCore::SecurityOriginData::databaseIdentifier(a2, &v47);
  if (v47)
  {
    v11 = (char *)*((_QWORD *)v47 + 1);
    v12 = *((unsigned int *)v47 + 1) | ((unint64_t)((*((_DWORD *)v47 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v48, 1, v11, v12);
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v50)
    goto LABEL_99;
  v15 = (unsigned __int8 *)(v48 + 32);
  if (__ldaxr((unsigned __int8 *)(v48 + 32)))
  {
    __clrex();
LABEL_19:
    MEMORY[0x19AEA534C](v15);
    goto LABEL_20;
  }
  if (__stxr(1u, v15))
    goto LABEL_19;
LABEL_20:
  if (*(_BYTE *)(v48 + 20) || (v17 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v17))
  {
    v18 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v17);
    v42 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v18 = (int)v42;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v42);
  }
  v19 = __ldxr(v15);
  if (v19 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_28;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_28:
  v10 = v18 == 100;
  v9 = v50;
LABEL_29:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336DDD8[v9])(&v47, &v48);
  if (v10)
  {
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "UPDATE Origins SET quota=? WHERE origin=?", 42, (uint64_t)&v48);
    v20 = v50;
    if (v50)
      goto LABEL_80;
    sqlite3_bind_int64(pStmt, 1, a3);
    if (!v50)
    {
      WebCore::SecurityOriginData::databaseIdentifier(a2, &v47);
      if (v47)
      {
        v21 = (char *)*((_QWORD *)v47 + 1);
        v22 = *((unsigned int *)v47 + 1) | ((unint64_t)((*((_DWORD *)v47 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v21 = 0;
        v22 = 0x100000000;
      }
      WebCore::SQLiteStatement::bindText((uint64_t)&v48, 2, v21, v22);
      v24 = v47;
      v47 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
      if (!v50)
      {
        v25 = (unsigned __int8 *)(v48 + 32);
        if (__ldaxr((unsigned __int8 *)(v48 + 32)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v25))
        {
LABEL_71:
          if (*(_BYTE *)(v48 + 20)
            || (v38 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v38))
          {
            sqlite3_step(pStmt);
          }
          else
          {
            WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v38);
            v43 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
            WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v43);
          }
          v39 = __ldxr(v25);
          if (v39 == 1)
          {
            if (!__stlxr(0, v25))
              goto LABEL_79;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_79:
          v20 = v50;
LABEL_80:
          if (v20 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336DDD8[v20])(&v47, &v48);
          result = *((_QWORD *)this + 13);
          if (result)
          {
LABEL_83:
            result = (*(uint64_t (**)(uint64_t, const WebCore::SecurityOriginData *))(*(_QWORD *)result + 16))(result, a2);
            goto LABEL_84;
          }
          goto LABEL_84;
        }
        MEMORY[0x19AEA534C](v25);
        goto LABEL_71;
      }
    }
LABEL_99:
    v44 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DatabaseTracker::deleteOrigin(v44, v45, v46);
  }
LABEL_42:
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "INSERT INTO Origins VALUES (?, ?)", 34, (uint64_t)&v48);
  v27 = v50;
  if (v50)
  {
    v28 = 0;
    goto LABEL_64;
  }
  WebCore::SecurityOriginData::databaseIdentifier(a2, &v47);
  if (v47)
  {
    v29 = (char *)*((_QWORD *)v47 + 1);
    v30 = *((unsigned int *)v47 + 1) | ((unint64_t)((*((_DWORD *)v47 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v29 = 0;
    v30 = 0x100000000;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v48, 1, v29, v30);
  v32 = v47;
  v47 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (v50)
    goto LABEL_99;
  sqlite3_bind_int64(pStmt, 2, a3);
  if (v50)
    goto LABEL_99;
  v33 = (unsigned __int8 *)(v48 + 32);
  if (__ldaxr((unsigned __int8 *)(v48 + 32)))
  {
    __clrex();
LABEL_54:
    MEMORY[0x19AEA534C](v33);
    goto LABEL_55;
  }
  if (__stxr(1u, v33))
    goto LABEL_54;
LABEL_55:
  if (*(_BYTE *)(v48 + 20) || (v35 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v35))
  {
    v36 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v35);
    v41 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v36 = (int)v41;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v41);
  }
  v37 = __ldxr(v33);
  if (v37 == 1)
  {
    if (!__stlxr(0, v33))
      goto LABEL_63;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_63:
  v28 = v36 == 101;
  v27 = v50;
LABEL_64:
  if (v27 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336DDD8[v27])(&v47, &v48);
  result = *((_QWORD *)this + 13);
  if (result)
  {
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
      result = *((_QWORD *)this + 13);
    }
    goto LABEL_83;
  }
LABEL_84:
  v40 = __ldxr(v6);
  if (v40 == 1)
  {
    if (!__stlxr(0, v6))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

BOOL WebCore::DatabaseTracker::deleteOrigin(uint64_t a1, WebCore::SecurityOriginData *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v8;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  const WebCore::SecurityOriginData *v28;
  char v29;
  uint64_t v30;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  NSObject *v41;
  NSObject *v42;
  const WTF::String *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  char v46;
  uint64_t v47;
  const WTF::String *v48;
  WTF::StringImpl *v49;
  _BOOL8 v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v55;
  const WTF::StringImpl *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int i;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  WTF::StringImpl *v75;
  const WTF::String *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _BOOL4 v87;
  BOOL v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  unsigned int v97;
  int v98;
  _BOOL4 v99;
  unsigned int v100;
  char *v101;
  unint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WebCore::SQLiteDatabaseTracker *v106;
  int v107;
  int v108;
  unsigned int v109;
  char *v110;
  unint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  unsigned __int8 *v114;
  WebCore::SQLiteDatabaseTracker *v116;
  int v117;
  int v118;
  int v119;
  const WTF::String *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  unsigned __int8 *v124;
  WebCore::SQLiteDatabaseTracker *v126;
  int v127;
  int v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  uint64_t v136;
  WTF::StringImpl **v137;
  WTF::StringImpl *v138;
  WebCore::SQLiteDatabaseTracker *v139;
  WebCore::SQLiteDatabaseTracker *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _BOOL4 v150;
  BOOL v151;
  char v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::String *v155;
  uint64_t *v156;
  uint64_t v157;
  WebCore::DatabaseTracker *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  __int16 v161;
  WTF::StringImpl *v162;
  sqlite3_stmt *v163;
  int v164;
  int v165;
  uint8_t buf[8];
  sqlite3_stmt *pStmt;
  int v168;
  int v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 16);
LABEL_5:
  WebCore::DatabaseTracker::openTrackerDatabase((WTF::StringImpl *)a1, 0);
  if (!*(_QWORD *)(a1 + 32))
  {
    LODWORD(v26) = 0;
    v25 = 0;
    goto LABEL_64;
  }
  v154 = a3;
  WebCore::DatabaseTracker::databaseNamesNoLock((WebCore::DatabaseTracker *)buf, (const WebCore::SecurityOriginData *)a1, a2);
  v157 = HIDWORD(pStmt);
  v158 = (WebCore::DatabaseTracker *)a1;
  v11 = *(_QWORD *)(a1 + 128);
  v155 = *(WTF::String **)buf;
  v156 = (uint64_t *)(a1 + 128);
  if (v11)
  {
    v144 = *(_DWORD *)(v11 - 8);
    v3 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)a2) & v144;
    v4 = v11 + 32 * v3;
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v4) & 1) == 0)
    {
      v145 = 1;
      do
      {
        v146 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v146 == -1)
          goto LABEL_331;
        *(_QWORD *)buf = &v162;
        if ((((uint64_t (*)(uint8_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v146])(buf, v4) & 1) == 0)
        {
          if ((WebCore::SecurityOriginData *)v4 == a2)
            goto LABEL_326;
          v147 = *(unsigned int *)(v4 + 24);
          v148 = *((_DWORD *)a2 + 6);
          v150 = v148 == (_DWORD)v147 && v148 != -1;
          if ((_DWORD)v147 == -1 || !v150)
          {
            v151 = v148 == -1;
            if ((_DWORD)v147 == -1)
              v152 = v151;
            else
              v152 = v150;
            if ((v152 & 1) != 0)
            {
LABEL_326:
              v25 = v155;
              LODWORD(v26) = v157;
LABEL_64:
              v40 = __ldxr(v8);
              if (v40 == 1)
              {
                if (!__stlxr(0, v8))
                  goto LABEL_84;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_84:
              v50 = 0;
              goto LABEL_236;
            }
          }
          else
          {
            *(_QWORD *)buf = &v162;
            if ((((uint64_t (*)(uint8_t *, uint64_t, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v147])(buf, v4, a2) & 1) != 0)goto LABEL_326;
          }
        }
        v3 = ((_DWORD)v3 + v145) & v144;
        v4 = v11 + 32 * v3;
        ++v145;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v4));
    }
  }
  v12 = *(_QWORD *)(a1 + 112);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)a2) & v13;
    v4 = v12 + 40 * v14;
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v4) & 1) == 0)
    {
      v15 = 1;
      v3 = (uint64_t)&v162;
      do
      {
        v16 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v16 == -1)
          goto LABEL_331;
        *(_QWORD *)buf = &v162;
        if ((((uint64_t (*)(uint8_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v16])(buf, v4) & 1) == 0)
        {
          if ((WebCore::SecurityOriginData *)v4 == a2)
            goto LABEL_326;
          v17 = *(unsigned int *)(v4 + 24);
          v18 = *((_DWORD *)a2 + 6);
          v20 = v18 == (_DWORD)v17 && v18 != -1;
          if ((_DWORD)v17 == -1 || !v20)
          {
            v21 = v18 == -1;
            if ((_DWORD)v17 == -1)
              v22 = v21;
            else
              v22 = v20;
            if ((v22 & 1) != 0)
              goto LABEL_326;
          }
          else
          {
            *(_QWORD *)buf = &v162;
            if ((((uint64_t (*)(uint8_t *, uint64_t, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v17])(buf, v4, a2) & 1) != 0)goto LABEL_326;
          }
        }
        v14 = (v14 + v15) & v13;
        v4 = v12 + 40 * v14;
        ++v15;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v4));
    }
  }
  v23 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v23 == -1)
    goto LABEL_331;
  v162 = (WTF::StringImpl *)&v160;
  ((void (*)(uint8_t *__return_ptr, WTF::StringImpl **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v23])(buf, &v162, a2);
  LOBYTE(v162) = 0;
  v165 = -1;
  v24 = v169;
  if (v169 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v169])(&v160, &v162, buf);
    v165 = v24;
    if (v169 != -1)
      ((void (*)(WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v169])(&v160, buf);
  }
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(v156, (uint64_t)&v162, (uint64_t)buf);
  v25 = v155;
  v26 = v157;
  if (v165 != -1)
    ((void (*)(uint8_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v165])(buf, &v162);
  v27 = __ldxr(v8);
  v28 = v158;
  if (v27 != 1)
  {
    __clrex();
LABEL_71:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if ((_DWORD)v157)
      goto LABEL_37;
    goto LABEL_72;
  }
  if (__stlxr(0, v8))
    goto LABEL_71;
  if ((_DWORD)v157)
  {
LABEL_37:
    v29 = 0;
    v30 = 8 * v157;
    v4 = (uint64_t)v155;
    while (1)
    {
      if (__ldaxr(v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, v8))
      {
        goto LABEL_42;
      }
      MEMORY[0x19AEA534C](v8);
LABEL_42:
      WebCore::DatabaseTracker::fullPathForDatabaseNoLock(v158, a2, (const WTF::String *)v4, 0, buf);
      WTF::String::isolatedCopy();
      v33 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = __ldxr(v8);
      if (v34 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_50;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_50:
      if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v162, v32))
      {
        v37 = WebCore::DatabaseTracker::deleteDatabaseFile(v158, a2, (WTF::String *)v4, v154);
        v38 = v162;
        v162 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v36);
          else
            *(_DWORD *)v38 -= 2;
        }
        v29 |= v37 ^ 1;
      }
      else
      {
        v39 = v162;
        v162 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v35);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      v4 += 8;
      v30 -= 8;
      if (!v30)
      {
        v26 = v157;
        if ((v29 & 1) != 0)
        {
LABEL_68:
          v41 = qword_1ECE7BFF0;
          if (os_log_type_enabled((os_log_t)qword_1ECE7BFF0, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1940B8000, v41, OS_LOG_TYPE_ERROR, "Failed to delete database for origin", buf, 2u);
          }
          goto LABEL_84;
        }
        goto LABEL_99;
      }
    }
  }
LABEL_72:
  v42 = qword_1ECE7BFF0;
  if (os_log_type_enabled((os_log_t)qword_1ECE7BFF0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1940B8000, v42, OS_LOG_TYPE_ERROR, "Unable to retrieve list of database names for origin", buf, 2u);
  }
  WebCore::DatabaseTracker::originPath((WebCore::DatabaseTracker *)&v162, v158, a2);
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v162, v43);
  v45 = *(WTF **)buf;
  if (HIDWORD(pStmt))
  {
    v46 = 0;
    v47 = 8 * HIDWORD(pStmt);
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      v4 = WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v160, v48);
      v49 = v160;
      v160 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v44);
        else
          *(_DWORD *)v49 -= 2;
      }
      v46 |= v4 ^ 1;
      v45 = (WTF *)((char *)v45 + 8);
      v47 -= 8;
    }
    while (v47);
    v45 = *(WTF **)buf;
    if (HIDWORD(pStmt))
    {
      v51 = 8 * HIDWORD(pStmt);
      do
      {
        v52 = *(WTF::StringImpl **)v45;
        *(_QWORD *)v45 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v44);
          else
            *(_DWORD *)v52 -= 2;
        }
        v45 = (WTF *)((char *)v45 + 8);
        v51 -= 8;
      }
      while (v51);
      v45 = *(WTF **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_95;
      goto LABEL_297;
    }
  }
  else
  {
    v46 = 0;
  }
  if (v45)
  {
LABEL_297:
    *(_QWORD *)buf = 0;
    LODWORD(pStmt) = 0;
    WTF::fastFree(v45, v44);
  }
LABEL_95:
  v53 = v162;
  v162 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::destroy(v53, v44);
      if ((v46 & 1) != 0)
        goto LABEL_68;
      goto LABEL_99;
    }
    *(_DWORD *)v53 -= 2;
  }
  if ((v46 & 1) != 0)
    goto LABEL_68;
LABEL_99:
  if (__ldaxr(v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_103;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_103:
  WebCore::SecurityOriginData::databaseIdentifier(a2, buf);
  v3 = (uint64_t)v158 + 88;
  v57 = *((_QWORD *)v158 + 11);
  if (!v57)
    goto LABEL_134;
  v58 = *(_DWORD *)(v57 - 8);
  v59 = *(_DWORD *)(*(_QWORD *)buf + 16);
  if (v59 < 0x100)
    v60 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)buf);
  else
    v60 = v59 >> 8;
  for (i = 0; ; v60 = i + v4)
  {
    v4 = v60 & v58;
    v62 = *(WTF **)(v57 + 16 * v4);
    if (v62 != (WTF *)-1)
    {
      if (!v62)
      {
        v63 = *(_QWORD *)v3;
        v25 = v155;
        v28 = v158;
        if (!*(_QWORD *)v3)
          goto LABEL_134;
        v64 = *(unsigned int *)(v63 - 4);
        v65 = v63 + 16 * v64;
        goto LABEL_116;
      }
      if ((WTF::equal(v62, *(const WTF::StringImpl **)buf, v56) & 1) != 0)
        break;
    }
    ++i;
  }
  v65 = v57 + 16 * v4;
  v63 = *(_QWORD *)v3;
  v25 = v155;
  v28 = v158;
  if (!*(_QWORD *)v3)
    goto LABEL_117;
  v64 = *(unsigned int *)(v63 - 4);
LABEL_116:
  v63 += 16 * v64;
  if (v63 == v65)
    goto LABEL_134;
LABEL_117:
  if (v63 == v65)
    goto LABEL_134;
  v66 = *(WTF::StringImpl **)v65;
  *(_QWORD *)v65 = -1;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v55);
    else
      *(_DWORD *)v66 -= 2;
  }
  v4 = *(_QWORD *)(v65 + 8);
  *(_QWORD *)(v65 + 8) = 0;
  if (v4)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)v4);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)v4));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)v4);
      v153 = *(WTF::StringImpl **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v153)
      {
        if (*(_DWORD *)v153 == 2)
          goto LABEL_332;
        *(_DWORD *)v153 -= 2;
      }
      goto LABEL_330;
    }
  }
  while (1)
  {
    ++*(_DWORD *)(*(_QWORD *)v3 - 16);
    v69 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
      v70 = *(_DWORD *)(v69 - 12) - 1;
    else
      v70 = -1;
    *(_DWORD *)(v69 - 12) = v70;
    v71 = *(_QWORD *)v3;
    if (*(_QWORD *)v3)
    {
      v72 = 6 * *(_DWORD *)(v71 - 12);
      v73 = *(_DWORD *)(v71 - 4);
      if (v72 < v73 && v73 >= 9)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v3, v73 >> 1, 0);
    }
LABEL_134:
    v75 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v55);
      else
        *(_DWORD *)v75 -= 2;
    }
    WebCore::DatabaseTracker::originPath((WebCore::DatabaseTracker *)&v162, v28, a2);
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)buf, v76);
    v78 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v77);
      else
        *(_DWORD *)v78 -= 2;
    }
    v79 = v162;
    v162 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, v77);
      else
        *(_DWORD *)v79 -= 2;
    }
    v80 = *v156;
    if (*v156)
    {
      v4 = *(unsigned int *)(v80 - 8);
      v81 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)a2) & v4;
      v3 = v80 + 32 * v81;
      if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v3) & 1) == 0)
      {
        v82 = 1;
        do
        {
          v83 = *(unsigned int *)(v3 + 24);
          if ((_DWORD)v83 == -1)
            goto LABEL_331;
          *(_QWORD *)buf = &v162;
          if ((((uint64_t (*)(uint8_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v83])(buf, v3) & 1) == 0)
          {
            if ((WebCore::SecurityOriginData *)v3 == a2)
            {
              v3 = (uint64_t)a2;
LABEL_282:
              v25 = v155;
              v90 = *v156;
              v26 = v157;
              if (*v156)
              {
                v91 = *(unsigned int *)(v90 - 4);
                v28 = v158;
                goto LABEL_166;
              }
              v28 = v158;
              goto LABEL_167;
            }
            v84 = *(unsigned int *)(v3 + 24);
            v85 = *((_DWORD *)a2 + 6);
            v87 = v85 == (_DWORD)v84 && v85 != -1;
            if ((_DWORD)v84 == -1 || !v87)
            {
              v88 = v85 == -1;
              if ((_DWORD)v84 == -1)
                v89 = v88;
              else
                v89 = v87;
              if ((v89 & 1) != 0)
                goto LABEL_282;
            }
            else
            {
              *(_QWORD *)buf = &v162;
              if ((((uint64_t (*)(uint8_t *, uint64_t, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v84])(buf, v3, a2) & 1) != 0)goto LABEL_282;
            }
          }
          v81 = ((_DWORD)v81 + v82) & v4;
          v3 = v80 + 32 * v81;
          ++v82;
        }
        while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v3));
      }
      v25 = v155;
      v90 = *v156;
      v26 = v157;
      v28 = v158;
      if (*v156)
      {
        v91 = *(unsigned int *)(v90 - 4);
        v3 = v90 + 32 * v91;
LABEL_166:
        v90 += 32 * v91;
        if (v90 != v3)
        {
LABEL_167:
          if (v90 != v3)
          {
            v92 = *(unsigned int *)(v3 + 24);
            if ((_DWORD)v92 != -1)
              ((void (*)(uint8_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v92])(buf, v3);
            *(_QWORD *)v3 = -1;
            *(_QWORD *)(v3 + 8) = 0;
            *(_DWORD *)(v3 + 16) = 0;
            *(_DWORD *)(v3 + 24) = 0;
            ++*(_DWORD *)(*v156 - 16);
            v93 = *v156;
            if (*v156)
              v94 = *(_DWORD *)(v93 - 12) - 1;
            else
              v94 = -1;
            *(_DWORD *)(v93 - 12) = v94;
            v95 = *v156;
            if (*v156)
            {
              v141 = 6 * *(_DWORD *)(v95 - 12);
              v142 = *(_DWORD *)(v95 - 4);
              if (v141 < v142 && v142 >= 9)
                WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v156, v142 >> 1, 0);
            }
          }
        }
      }
    }
    v96 = (const WebCore::SecurityOriginData *)((char *)v28 + 24);
    v160 = v96;
    do
      v97 = __ldaxr((unsigned int *)v96);
    while (__stlxr(v97 + 1, (unsigned int *)v96));
    v161 = 0;
    WebCore::SQLiteTransaction::begin((WebCore::SQLiteTransaction *)&v160);
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)v96, "DELETE FROM Databases WHERE origin=?", 37, (uint64_t)buf);
    v98 = v168;
    if (v168)
    {
      v99 = 1;
      goto LABEL_228;
    }
    WebCore::SecurityOriginData::databaseIdentifier(a2, &v162);
    v100 = v162;
    if (v162)
    {
      v101 = (char *)*((_QWORD *)v162 + 1);
      v100 = *((_DWORD *)v162 + 1);
      v102 = ((unint64_t)*((unsigned int *)v162 + 4) >> 2) & 1;
    }
    else
    {
      v101 = 0;
      v102 = 1;
    }
    WebCore::SQLiteStatement::bindText((uint64_t)buf, 1, v101, v100 | (v102 << 32));
    v104 = v162;
    v162 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, v103);
      else
        *(_DWORD *)v104 -= 2;
    }
    if (!v168)
      break;
LABEL_331:
    v153 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_332:
    WTF::StringImpl::destroy(v153, v55);
LABEL_330:
    WTF::fastFree((WTF *)v4, v55);
    v25 = v155;
    v26 = v157;
    v28 = v158;
  }
  v3 = *(_QWORD *)buf + 32;
  if (__ldaxr((unsigned __int8 *)(*(_QWORD *)buf + 32)))
  {
    __clrex();
LABEL_186:
    MEMORY[0x19AEA534C](v3);
    goto LABEL_187;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_186;
LABEL_187:
  if (*(_BYTE *)(*(_QWORD *)buf + 20)
    || (v106 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v106))
  {
    v4 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v106);
    v4 = sqlite3_step(pStmt);
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v4);
  }
  v107 = __ldxr((unsigned __int8 *)v3);
  if (v107 != 1)
  {
    __clrex();
    goto LABEL_194;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_194:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if ((_DWORD)v4 != 101)
  {
    v99 = 1;
    goto LABEL_227;
  }
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)v96, "DELETE FROM Origins WHERE origin=?", 35, (uint64_t)&v162);
  v108 = v164;
  if (v164)
  {
    v99 = 1;
    goto LABEL_225;
  }
  WebCore::SecurityOriginData::databaseIdentifier(a2, &v159);
  v109 = v159;
  if (v159)
  {
    v110 = (char *)*((_QWORD *)v159 + 1);
    v109 = *((_DWORD *)v159 + 1);
    v111 = ((unint64_t)*((unsigned int *)v159 + 4) >> 2) & 1;
  }
  else
  {
    v110 = 0;
    v111 = 1;
  }
  WebCore::SQLiteStatement::bindText((uint64_t)&v162, 1, v110, v109 | (v111 << 32));
  v113 = v159;
  v159 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v112);
    else
      *(_DWORD *)v113 -= 2;
  }
  if (v164)
    goto LABEL_331;
  v114 = (unsigned __int8 *)v162 + 32;
  if (__ldaxr((unsigned __int8 *)v162 + 32))
  {
    __clrex();
    goto LABEL_215;
  }
  if (__stxr(1u, v114))
LABEL_215:
    MEMORY[0x19AEA534C](v114);
  if (*((_BYTE *)v162 + 20) || (v116 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v163), (_DWORD)v116))
  {
    v117 = sqlite3_step(v163);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v116);
    v140 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v163);
    v117 = (int)v140;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v140);
  }
  v118 = __ldxr(v114);
  if (v118 == 1)
  {
    if (!__stlxr(0, v114))
      goto LABEL_224;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v114);
LABEL_224:
  v99 = v117 != 101;
  v108 = v164;
LABEL_225:
  if (v108 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E336DDD8[v108])(&v159, &v162);
LABEL_227:
  v98 = v168;
LABEL_228:
  if (v98 != -1)
    ((void (*)(WTF::StringImpl **, uint8_t *))off_1E336DDD8[v98])(&v162, buf);
  v50 = !v99;
  if (!v99)
  {
    WebCore::SQLiteTransaction::commit((uint64_t)&v160);
    WebCore::DatabaseTracker::originPath((WebCore::DatabaseTracker *)buf, v158, a2);
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)buf, v121);
    v123 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v122);
      else
        *(_DWORD *)v123 -= 2;
    }
    WebCore::DatabaseTracker::openTrackerDatabase(v158, 0);
    if (!*((_QWORD *)v158 + 4))
      goto LABEL_264;
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)v96, "SELECT origin FROM Origins", 27, (uint64_t)buf);
    if (v168 != -1)
    {
      if (!v168)
      {
        v124 = (unsigned __int8 *)(*(_QWORD *)buf + 32);
        if (__ldaxr((unsigned __int8 *)(*(_QWORD *)buf + 32)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v124))
        {
LABEL_251:
          if (*(_BYTE *)(*(_QWORD *)buf + 20)
            || (v126 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v126))
          {
            v127 = sqlite3_step(pStmt);
          }
          else
          {
            WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v126);
            v139 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
            v127 = (int)v139;
            WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v139);
          }
          v128 = __ldxr(v124);
          if (v128 == 1)
          {
            if (!__stlxr(0, v124))
            {
LABEL_259:
              if (v168 != -1)
                ((void (*)(WTF::StringImpl **, uint8_t *))off_1E336DDD8[v168])(&v162, buf);
              if (v127 == 100)
                goto LABEL_271;
              goto LABEL_262;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v124);
          goto LABEL_259;
        }
        MEMORY[0x19AEA534C](v124);
        goto LABEL_251;
      }
      ((void (*)(WTF::StringImpl **, uint8_t *))off_1E336DDD8[v168])(&v162, buf);
    }
LABEL_262:
    if (*((_QWORD *)v158 + 4))
      WebCore::SQLiteDatabase::close(v96);
LABEL_264:
    WTF::String::isolatedCopy();
    WTF::FileSystemImpl::pathByAppendingComponent();
    v130 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v130)
    {
      if (*(_DWORD *)v130 == 2)
        WTF::StringImpl::destroy(v130, v129);
      else
        *(_DWORD *)v130 -= 2;
    }
    WebCore::SQLiteFileSystem::deleteDatabaseFile(&v162, v129);
    v132 = v162;
    v162 = 0;
    if (v132)
    {
      if (*(_DWORD *)v132 == 2)
        WTF::StringImpl::destroy(v132, v131);
      else
        *(_DWORD *)v132 -= 2;
    }
    WTF::FileSystemImpl::deleteEmptyDirectory((WebCore::DatabaseTracker *)((char *)v158 + 96), v131);
LABEL_271:
    v133 = *((_QWORD *)v158 + 13);
    if (v133)
    {
      (*(void (**)(uint64_t, WebCore::SecurityOriginData *))(*(_QWORD *)v133 + 16))(v133, a2);
      (*(void (**)(_QWORD))(**((_QWORD **)v158 + 13) + 48))(*((_QWORD *)v158 + 13));
      if ((_DWORD)v26)
      {
        v134 = 8 * v26;
        v135 = v25;
        do
        {
          (*(void (**)(_QWORD, WebCore::SecurityOriginData *, WTF *))(**((_QWORD **)v158 + 13) + 24))(*((_QWORD *)v158 + 13), a2, v135);
          v135 = (WTF *)((char *)v135 + 8);
          v134 -= 8;
        }
        while (v134);
      }
    }
  }
  WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)&v160);
  v119 = __ldxr(v8);
  if (v119 != 1)
  {
    __clrex();
    goto LABEL_235;
  }
  if (__stlxr(0, v8))
LABEL_235:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_236:
  if ((_DWORD)v26)
  {
    v136 = 8 * v26;
    v137 = (WTF::StringImpl **)v25;
    do
    {
      v138 = *v137;
      *v137 = 0;
      if (v138)
      {
        if (*(_DWORD *)v138 == 2)
          WTF::StringImpl::destroy(v138, v10);
        else
          *(_DWORD *)v138 -= 2;
      }
      ++v137;
      v136 -= 8;
    }
    while (v136);
  }
  if (v25)
    WTF::fastFree(v25, v10);
  return v50;
}

void WebCore::DatabaseTracker::deleteDatabasesModifiedSince(uint64_t a1, double a2)
{
  const WTF::String *v4;
  WTF *v5;
  WTF *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  double v16;
  uint64_t v17;
  WTF *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  _DWORD **v21;
  WTF *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  unsigned int v42;
  WTF *v43;
  unsigned int v44;
  WTF::StringImpl *v45;

  WebCore::DatabaseTracker::origins((WebCore::DatabaseTracker *)a1, (uint64_t)&v43);
  v5 = v43;
  if (!v44)
    goto LABEL_70;
  v6 = (WTF *)((char *)v43 + 32 * v44);
  v7 = (unsigned __int8 *)(a1 + 16);
  do
  {
    WebCore::DatabaseTracker::databaseNames((WebCore::DatabaseTracker *)a1, v5, (uint64_t)&v41);
    v39 = 0;
    v40 = 0;
    v8 = v42;
    if (v42)
    {
      if (v42 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (WTF *)(8 * v42);
      v10 = (WTF *)WTF::fastMalloc(v9);
      LODWORD(v40) = v8;
      v39 = v10;
      v11 = v41;
      while (1)
      {
        if (__ldaxr(v7))
        {
          __clrex();
        }
        else if (!__stxr(1u, v7))
        {
          goto LABEL_10;
        }
        MEMORY[0x19AEA534C](a1 + 16);
LABEL_10:
        WebCore::DatabaseTracker::fullPathForDatabaseNoLock((WebCore::DatabaseTracker *)a1, v5, v11, 0, &v45);
        WTF::String::isolatedCopy();
        v14 = v45;
        v45 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = __ldxr(v7);
        if (v15 != 1)
        {
          __clrex();
LABEL_17:
          WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
          goto LABEL_18;
        }
        if (__stlxr(0, v7))
          goto LABEL_17;
LABEL_18:
        if (!WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v38, v13)
          || (v16 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)&v38, v4)), (_BYTE)v4)
          && a2 <= v16)
        {
          v17 = HIDWORD(v40);
          if (HIDWORD(v40) == (_DWORD)v40)
          {
            v21 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)v11);
            v17 = HIDWORD(v40);
            v22 = v39;
            v23 = *v21;
            if (*v21)
              *v23 += 2;
            *((_QWORD *)v22 + v17) = v23;
          }
          else
          {
            v18 = v39;
            v19 = *(_DWORD **)v11;
            if (*(_QWORD *)v11)
              *v19 += 2;
            *((_QWORD *)v18 + v17) = v19;
          }
          HIDWORD(v40) = v17 + 1;
        }
        v20 = v38;
        v38 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v4);
          else
            *(_DWORD *)v20 -= 2;
        }
        v11 = (WTF *)((char *)v11 + 8);
        v9 = (WTF *)((char *)v9 - 8);
        if (!v9)
        {
          v24 = v42;
          v25 = v42;
          if (v42 == HIDWORD(v40))
            goto LABEL_37;
          if (HIDWORD(v40))
          {
            v26 = (WTF::StringImpl **)v39;
            v27 = 8 * HIDWORD(v40);
            do
            {
              WebCore::DatabaseTracker::deleteDatabase((WebCore::DatabaseTracker *)a1, v5, v26++);
              v27 -= 8;
            }
            while (v27);
          }
          goto LABEL_41;
        }
      }
    }
    v24 = 0;
    v25 = 0;
LABEL_37:
    WebCore::DatabaseTracker::deleteOrigin(a1, v5, 1);
LABEL_41:
    v28 = v39;
    if (!HIDWORD(v40))
    {
      if (!v39)
        goto LABEL_43;
LABEL_63:
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree(v28, v4);
      goto LABEL_43;
    }
    v30 = 8 * HIDWORD(v40);
    do
    {
      v31 = *(WTF::StringImpl **)v28;
      *(_QWORD *)v28 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v4);
        else
          *(_DWORD *)v31 -= 2;
      }
      v28 = (WTF *)((char *)v28 + 8);
      v30 -= 8;
    }
    while (v30);
    v28 = v39;
    if (v39)
      goto LABEL_63;
LABEL_43:
    v29 = v41;
    if (v25)
    {
      v32 = 8 * v24;
      v33 = v41;
      do
      {
        v34 = *(WTF::StringImpl **)v33;
        *(_QWORD *)v33 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v4);
          else
            *(_DWORD *)v34 -= 2;
        }
        v33 = (WTF *)((char *)v33 + 8);
        v32 -= 8;
      }
      while (v32);
    }
    if (v29)
      WTF::fastFree(v29, v4);
    v5 = (WTF *)((char *)v5 + 32);
  }
  while (v5 != v6);
  v5 = v43;
  if (v44)
  {
    v35 = 0;
    v36 = 32 * v44;
    do
    {
      v37 = *(unsigned int *)((char *)v5 + v35 + 24);
      if ((_DWORD)v37 != -1)
        ((void (*)(WTF **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v37])(&v41, (char *)v5 + v35);
      *(_DWORD *)((char *)v5 + v35 + 24) = -1;
      v35 += 32;
    }
    while (v36 != v35);
  }
LABEL_70:
  if (v5)
    WTF::fastFree(v5, v4);
}

BOOL WebCore::DatabaseTracker::deleteOrigin(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2)
{
  return WebCore::DatabaseTracker::deleteOrigin((uint64_t)this, a2, 1);
}

uint64_t WebCore::DatabaseTracker::deleteDatabase(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, WTF::StringImpl **a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t *v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v38;
  BOOL v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  const WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v66;
  char *v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  char *v73;
  unint64_t v74;
  unsigned __int8 *v75;
  WebCore::SQLiteDatabaseTracker *v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  WebCore::SQLiteDatabaseTracker *v84;
  unsigned int v85;
  const WebCore::SecurityOriginData *v86;
  const WTF::String *v87;
  unsigned int v88;
  unsigned __int16 v89;
  char v90;
  unsigned int *v91;
  WTF::StringImpl *v92[3];
  unsigned int v93;
  WTF::StringImpl *v94;
  sqlite3_stmt *pStmt;
  int v96;
  unsigned int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]((char *)this + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  WebCore::DatabaseTracker::openTrackerDatabase(this, 0);
  if (!*((_QWORD *)this + 4))
    goto LABEL_15;
  v8 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 14, (uint64_t)a2);
  v10 = *((_QWORD *)this + 14);
  if (v10)
    v10 += 40 * *(unsigned int *)(v10 - 4);
  if (v10 != v8)
  {
    v11 = *(WTF **)(v8 + 32);
    if (v11)
    {
      if (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v11, a3, v9))
      {
        goto LABEL_15;
      }
    }
  }
  v12 = (uint64_t *)((char *)this + 120);
  v13 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 15, (uint64_t)a2);
  v15 = *((_QWORD *)this + 15);
  if (v15)
    v15 += 56 * *(unsigned int *)(v15 - 4);
  if (v15 != v13
    && (WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v13 + 32), a3, v14) & 1) != 0)
  {
LABEL_15:
    v16 = 0;
    goto LABEL_92;
  }
  v17 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 15, (uint64_t)a2);
  v18 = v17;
  v19 = *v12;
  if (*v12)
    v19 += 56 * *(unsigned int *)(v19 - 4);
  if (v19 == v17)
  {
    v20 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v20 == -1)
      goto LABEL_177;
    v92[0] = (WTF::StringImpl *)&v91;
    ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, const WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v20])(&v94, v92, a2);
    LOBYTE(v92[0]) = 0;
    v93 = -1;
    v21 = v97;
    if (v97 != -1)
    {
      ((void (*)(unsigned int **, WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v97])(&v91, v92, &v94);
      v93 = v21;
      if (v97 != -1)
        ((void (*)(unsigned int **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v97])(&v91, &v94);
    }
    v22 = *v12;
    if (*v12
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash((uint64_t *)this + 15, 8u, 0), (v22 = *v12) != 0))
    {
      v23 = *(_DWORD *)(v22 - 8);
    }
    else
    {
      v23 = 0;
    }
    v89 = 0;
    v90 = 0;
    v91 = &v88;
    v24 = v93 == -1 ? -1 : v93;
    v25 = (v24 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v24 - 1640531527) << 16) ^ ((unsigned __int16)v24
                                                                                               - 1640531527);
    v26 = (v24 >> 37) & 0x7FFF800 ^ ((v25 + WORD2(v24) + (v25 >> 11)) << 16) ^ (v25 + WORD2(v24) + (v25 >> 11));
    v88 = v26 + (v26 >> 11);
    if (v93 == -1)
      goto LABEL_177;
    v94 = (WTF::StringImpl *)&v91;
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E336DE88[v93])(&v94, v92);
    v27 = v88;
    if (v90)
    {
      v85 = (v88 + v89) ^ ((v88 + v89) << 11);
      v27 = v85 + (v85 >> 17);
    }
    v86 = a2;
    v87 = (const WTF::String *)a3;
    v28 = (v27 ^ (8 * v27)) + ((v27 ^ (8 * v27)) >> 5);
    v29 = (v28 ^ (4 * v28)) + ((v28 ^ (4 * v28)) >> 15);
    v30 = v29 ^ (v29 << 10);
    if (!v30)
      v30 = 0x800000;
    v31 = v30 & v23;
    v18 = v22 + 56 * (v30 & v23);
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v18) & 1) == 0)
    {
      v33 = 0;
      v34 = 1;
      do
      {
        v35 = *(unsigned int *)(v18 + 24);
        if ((_DWORD)v35 == -1)
          goto LABEL_177;
        v94 = (WTF::StringImpl *)&v91;
        if ((((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v35])(&v94, v18) & 1) != 0)
        {
          v33 = v18;
        }
        else
        {
          if ((WTF::StringImpl **)v18 == v92)
          {
            v18 = (uint64_t)v92;
            goto LABEL_85;
          }
          v36 = *(unsigned int *)(v18 + 24);
          v38 = v93 == (_DWORD)v36 && v93 != -1;
          if ((_DWORD)v36 == -1 || !v38)
          {
            if ((_DWORD)v36 == -1)
              v39 = v93 == -1;
            else
              v39 = v38;
            if (v39)
              goto LABEL_85;
          }
          else
          {
            v94 = (WTF::StringImpl *)&v91;
            if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v36])(&v94, v18, v92) & 1) != 0)goto LABEL_85;
          }
        }
        v31 = (v31 + v34) & v23;
        v18 = v22 + 56 * v31;
        ++v34;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v18));
      v12 = (uint64_t *)((char *)this + 120);
      if (v33)
      {
        *(_QWORD *)(v33 + 48) = 0;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = 0u;
        *(_OWORD *)v33 = 0u;
        --*(_DWORD *)(*((_QWORD *)this + 15) - 16);
        v18 = v33;
      }
    }
    v40 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v40 == -1)
    {
      if (v93 == -1)
        goto LABEL_62;
    }
    else if (v93 == -1)
    {
      ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v40])(&v94, v18);
      *(_DWORD *)(v18 + 24) = -1;
      goto LABEL_62;
    }
    v94 = (WTF::StringImpl *)v18;
    ((void (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))off_1E336DEA8[v93])(&v94, v18, v92);
LABEL_62:
    v41 = *(WTF **)(v18 + 32);
    v42 = *(unsigned int *)(v18 + 40);
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 45) = 0;
    if (v41)
    {
      if ((_DWORD)v42)
      {
        v43 = (WTF::StringImpl **)v41;
        do
        {
          v44 = *v43;
          *v43 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v32);
            else
              *(_DWORD *)v44 -= 2;
          }
          ++v43;
          --v42;
        }
        while (v42);
      }
      WTF::fastFree(v41, v32);
    }
    v45 = *v12;
    if (*v12)
      v46 = *(_DWORD *)(v45 - 12) + 1;
    else
      v46 = 1;
    *(_DWORD *)(v45 - 12) = v46;
    v47 = *v12;
    if (*v12)
      v48 = *(_DWORD *)(v47 - 12);
    else
      v48 = 0;
    v49 = (*(_DWORD *)(v47 - 16) + v48);
    v50 = *(unsigned int *)(v47 - 4);
    if (v50 > 0x400)
    {
      if (v50 > 2 * v49)
        goto LABEL_85;
    }
    else
    {
      if (3 * v50 > 4 * v49)
      {
LABEL_85:
        if (v93 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v93])(&v94, v92);
        a2 = v86;
        a3 = (WTF::StringImpl **)v87;
        goto LABEL_88;
      }
      if (!(_DWORD)v50)
      {
        v51 = 8;
        goto LABEL_84;
      }
    }
    v51 = (_DWORD)v50 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v50));
LABEL_84:
    v18 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v12, v51, v18);
    goto LABEL_85;
  }
LABEL_88:
  WTF::String::isolatedCopy();
  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v18 + 32, v92, v52, (uint64_t)&v94);
  v54 = v92[0];
  v92[0] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
  v16 = 1;
LABEL_92:
  v55 = __ldxr(v6);
  if (v55 == 1)
  {
    if (!__stlxr(0, v6))
    {
      if (v16)
        goto LABEL_95;
      return 0;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v16)
  {
LABEL_95:
    if (__ldaxr(v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_102;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_102:
    WebCore::DatabaseTracker::fullPathForDatabaseNoLock(this, a2, (const WTF::String *)a3, 0, &v94);
    WTF::String::isolatedCopy();
    v59 = v94;
    v94 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v58);
      else
        *(_DWORD *)v59 -= 2;
    }
    v60 = __ldxr(v6);
    if (v60 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_110:
        if (!WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)v92, v58))
        {
          v66 = v92[0];
          v92[0] = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, v61);
            else
              *(_DWORD *)v66 -= 2;
          }
          goto LABEL_120;
        }
        v63 = WebCore::DatabaseTracker::deleteDatabaseFile(this, a2, (WTF::String *)a3, 1);
        v64 = v92[0];
        v92[0] = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
          {
            WTF::StringImpl::destroy(v64, v62);
            if ((v63 & 1) == 0)
            {
LABEL_115:
              if (__ldaxr(v6))
              {
                __clrex();
              }
              else if (!__stxr(1u, v6))
              {
LABEL_157:
                WebCore::DatabaseTracker::doneDeletingDatabase(this, a2, a3);
                v82 = __ldxr(v6);
                if (v82 == 1)
                {
                  v57 = 0;
                  goto LABEL_159;
                }
                v57 = 0;
                goto LABEL_162;
              }
              MEMORY[0x19AEA534C](v6);
              goto LABEL_157;
            }
LABEL_120:
            if (__ldaxr(v6))
            {
              __clrex();
            }
            else if (!__stxr(1u, v6))
            {
              goto LABEL_124;
            }
            MEMORY[0x19AEA534C](v6);
LABEL_124:
            WebCore::SQLiteDatabase::prepareStatement((uint64_t)this + 24, "DELETE FROM Databases WHERE origin=? AND name=?", 48, (uint64_t)&v94);
            if (v96)
              goto LABEL_150;
            WebCore::SecurityOriginData::databaseIdentifier(a2, v92);
            if (v92[0])
            {
              v68 = (char *)*((_QWORD *)v92[0] + 1);
              v69 = *((unsigned int *)v92[0] + 1) | ((unint64_t)((*((_DWORD *)v92[0] + 4) >> 2) & 1) << 32);
            }
            else
            {
              v68 = 0;
              v69 = 0x100000000;
            }
            WebCore::SQLiteStatement::bindText((uint64_t)&v94, 1, v68, v69);
            v71 = v92[0];
            v92[0] = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v70);
              else
                *(_DWORD *)v71 -= 2;
            }
            if (!v96)
            {
              v72 = *a3;
              if (*a3)
              {
                v73 = (char *)*((_QWORD *)v72 + 1);
                v74 = *((unsigned int *)v72 + 1) | ((unint64_t)((*((_DWORD *)v72 + 4) >> 2) & 1) << 32);
              }
              else
              {
                v73 = 0;
                v74 = 0x100000000;
              }
              WebCore::SQLiteStatement::bindText((uint64_t)&v94, 2, v73, v74);
              if (!v96)
              {
                v75 = (unsigned __int8 *)v94 + 32;
                if (__ldaxr((unsigned __int8 *)v94 + 32))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v75))
                {
LABEL_138:
                  if (*((_BYTE *)v94 + 20)
                    || (v77 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v77))
                  {
                    v78 = sqlite3_step(pStmt);
                  }
                  else
                  {
                    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v77);
                    v84 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
                    v78 = (int)v84;
                    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v84);
                  }
                  v79 = __ldxr(v75);
                  if (v79 == 1)
                  {
                    if (!__stlxr(0, v75))
                    {
LABEL_146:
                      if (v78 == 101)
                      {
                        v80 = *((_QWORD *)this + 13);
                        if (v80)
                        {
                          (*(void (**)(uint64_t, const WebCore::SecurityOriginData *))(*(_QWORD *)v80 + 16))(v80, a2);
                          (*(void (**)(_QWORD, const WebCore::SecurityOriginData *, WTF::StringImpl **))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), a2, a3);
                          (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13));
                        }
                        v57 = 1;
LABEL_151:
                        WebCore::DatabaseTracker::doneDeletingDatabase(this, a2, a3);
                        if (v96 != -1)
                          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E336DDD8[v96])(v92, &v94);
                        v81 = __ldxr(v6);
                        if (v81 == 1)
                        {
LABEL_159:
                          if (!__stlxr(0, v6))
                            return v57;
                          goto LABEL_163;
                        }
LABEL_162:
                        __clrex();
LABEL_163:
                        WTF::Lock::unlockSlow((WTF::Lock *)v6);
                        return v57;
                      }
LABEL_150:
                      v57 = 0;
                      goto LABEL_151;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v75);
                  goto LABEL_146;
                }
                MEMORY[0x19AEA534C](v75);
                goto LABEL_138;
              }
            }
LABEL_177:
            std::__throw_bad_variant_access[abi:sn180100]();
          }
          *(_DWORD *)v64 -= 2;
        }
        if ((v63 & 1) == 0)
          goto LABEL_115;
        goto LABEL_120;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_110;
  }
  return 0;
}

uint64_t WebCore::DatabaseTracker::deleteDatabaseFile(WebCore::DatabaseTracker *this, WebCore::SecurityOriginData *a2, WTF::String *a3, int a4)
{
  unsigned __int8 *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  uint64_t result;
  int v39;
  uint64_t v40;
  const WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  _BOOL4 v45;
  BOOL v46;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int i;
  uint64_t v54;
  WTF *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int **v59;
  unsigned int **v60;
  uint64_t v61;
  unsigned int **v62;
  unint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unsigned int v69;
  unsigned int **v70;
  WTF *v71;
  void *v72;
  int v73;
  WTF::StringImpl *v74;
  sqlite3 *v75;
  int v76;
  __int16 v77;
  char v78;
  uint64_t v79;
  char v80;
  WTF::Thread *v81;
  char v82;
  int v83;
  WTF *v84;
  WTF::StringImpl *v85;
  char v86;

  v8 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  WebCore::DatabaseTracker::fullPathForDatabaseNoLock(this, a2, a3, 0, &v74);
  WTF::String::isolatedCopy();
  v11 = v74;
  v74 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = __ldxr(v8);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v8))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v85)
    return 1;
  if (!*((_DWORD *)v85 + 1))
  {
    v13 = 1;
    goto LABEL_59;
  }
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](this);
LABEL_22:
  v15 = (uint64_t *)*((_QWORD *)this + 1);
  if (!v15
    || (v16 = *v15) == 0
    || (v17 = *(_DWORD *)(v16 - 8),
        v18 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)a2) & v17,
        v19 = (unsigned int *)(v16 + 40 * v18),
        (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19) & 1) != 0))
  {
LABEL_25:
    v20 = 0;
    v21 = 0;
    goto LABEL_26;
  }
  v73 = a4;
  v39 = 1;
  while (1)
  {
    v40 = v19[6];
    if ((_DWORD)v40 == -1)
    {
      result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_133:
      __break(0xC471u);
      return result;
    }
    v74 = (WTF::StringImpl *)&v86;
    if ((((uint64_t (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v40])(&v74, v19) & 1) == 0)
    {
      if (v19 == (unsigned int *)a2)
        break;
      v42 = v19[6];
      v43 = *((_DWORD *)a2 + 6);
      v45 = v43 == (_DWORD)v42 && v43 != -1;
      if ((_DWORD)v42 != -1 && v45)
      {
        v74 = (WTF::StringImpl *)&v86;
        if ((((uint64_t (*)(WTF::StringImpl **, unsigned int *, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v42])(&v74, v19, a2) & 1) != 0)break;
        goto LABEL_81;
      }
      v46 = v43 == -1;
      if ((_DWORD)v42 == -1 ? v46 : v45)
        break;
    }
LABEL_81:
    v18 = ((_DWORD)v18 + v39) & v17;
    v19 = (unsigned int *)(v16 + 40 * v18);
    ++v39;
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19) & 1) != 0)
      goto LABEL_82;
  }
  v48 = *(uint64_t **)(v16 + 40 * v18 + 32);
  if (!v48)
  {
LABEL_82:
    v20 = 0;
    v21 = 0;
    a4 = v73;
    goto LABEL_26;
  }
  v49 = *v48;
  a4 = v73;
  if (!*v48)
    goto LABEL_25;
  v50 = *(_DWORD *)(v49 - 8);
  v51 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v52 = v51 < 0x100 ? WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3) : v51 >> 8;
  for (i = 0; ; v52 = ++i + v54)
  {
    v54 = v52 & v50;
    v55 = *(WTF **)(v49 + 16 * v54);
    if (v55 != (WTF *)-1)
    {
      if (!v55)
        goto LABEL_25;
      result = WTF::equal(v55, *(const WTF::StringImpl **)a3, v41);
      if ((result & 1) != 0)
        break;
    }
  }
  v56 = *(_QWORD **)(v49 + 16 * v54 + 8);
  if (!v56)
    goto LABEL_25;
  v57 = (_QWORD *)*v56;
  if (!v57)
  {
    v60 = 0;
    v58 = 0;
LABEL_105:
    v59 = (unsigned int **)&v57[v58];
    goto LABEL_106;
  }
  v58 = *((unsigned int *)v57 - 1);
  v59 = (unsigned int **)&v57[v58];
  if (!*((_DWORD *)v57 - 3))
  {
    v60 = (unsigned int **)&v57[v58];
    goto LABEL_105;
  }
  v60 = (unsigned int **)v57;
  if ((_DWORD)v58)
  {
    v61 = 8 * v58;
    v60 = (unsigned int **)v57;
    while ((unint64_t)*v60 + 1 <= 1)
    {
      ++v60;
      v61 -= 8;
      if (!v61)
      {
        v60 = v59;
        break;
      }
    }
  }
LABEL_106:
  if (v57)
    v62 = (unsigned int **)&v57[*((unsigned int *)v57 - 1)];
  else
    v62 = 0;
  if (v62 == v60)
    goto LABEL_25;
  v21 = 0;
  LODWORD(v63) = 0;
  v20 = 0;
  do
  {
    v64 = *v60;
    v65 = v20;
    if (v20 == (_DWORD)v63)
    {
      v66 = ((unint64_t)v63 >> 2) + v63;
      if (v66 >= 0x10)
        v67 = v66 + 1;
      else
        v67 = 16;
      if (v67 <= (unint64_t)v20 + 1)
        v63 = v20 + 1;
      else
        v63 = v67;
      if (v63 >> 29)
        goto LABEL_133;
      v68 = (char *)WTF::fastMalloc((WTF *)(8 * v63));
      result = (uint64_t)memcpy(v68, v21, 8 * v65);
      if (v21)
      {
        if (v68 == v21)
        {
          LODWORD(v63) = 0;
          v68 = 0;
        }
        result = WTF::fastFree((WTF *)v21, v10);
      }
      v21 = v68;
    }
    do
      v69 = __ldaxr(v64);
    while (__stlxr(v69 + 1, v64));
    *(_QWORD *)&v21[8 * v65] = v64;
    v70 = v60 + 1;
    v60 = v59;
    if (v70 != v59)
    {
      v60 = v70;
      while ((unint64_t)*v60 + 1 <= 1)
      {
        if (++v60 == v59)
        {
          v60 = v59;
          break;
        }
      }
    }
    v20 = v65 + 1;
    a4 = v73;
  }
  while (v60 != v62);
LABEL_26:
  v22 = __ldxr((unsigned __int8 *)this);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_30:
    WTF::Lock::unlockSlow(this);
  if (v20)
  {
    v23 = 8 * v20;
    v24 = v21;
    do
    {
      v25 = *(_QWORD *)v24;
      if (!*(_BYTE *)(*(_QWORD *)v24 + 40))
      {
        *(_BYTE *)(v25 + 40) = 1;
        WebCore::Database::close((_QWORD *)v25);
      }
      v24 += 8;
      v23 -= 8;
    }
    while (v23);
  }
  if (a4 != 1)
  {
    v13 = WebCore::SQLiteFileSystem::deleteDatabaseFile(&v85, v10);
    if (!v20)
      goto LABEL_57;
    goto LABEL_51;
  }
  LODWORD(v74) = 0;
  v75 = 0;
  v76 = -1;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 1;
  v84 = 0;
  v13 = 0;
  if (WebCore::SQLiteDatabase::open((uint64_t)&v74, (WTF::FileSystemImpl *)&v85, 2u, 0))
    v13 = sqlite3_file_control(v75, 0, 101, 0) == 0;
  WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)&v74);
  v26 = v84;
  v84 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree(v26, v10);
    else
      --*(_DWORD *)v26;
  }
  v27 = (unsigned int *)v81;
  v81 = 0;
  if (v27)
  {
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::Thread::~Thread((WTF::Thread *)v27);
      WTF::fastFree(v71, v72);
    }
  }
  v30 = v79;
  v79 = 0;
  if (v30)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v30, v10);
  if (v20)
  {
LABEL_51:
    v31 = (unsigned int **)v21;
    do
    {
      v32 = *v31;
      *v31 = 0;
      if (v32)
      {
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          WebCore::Database::~Database((WebCore::Database *)v32);
          WTF::fastFree(v35, v36);
        }
      }
      ++v31;
    }
    while (v31 != (unsigned int **)&v21[8 * v20]);
  }
LABEL_57:
  if (v21)
    WTF::fastFree((WTF *)v21, v10);
LABEL_59:
  v37 = v85;
  v85 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v10);
    else
      *(_DWORD *)v37 -= 2;
  }
  return v13;
}

uint64_t WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t result;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 16 * v10);
    if (v11 == (WTF *)-1)
      goto LABEL_8;
    if (!v11)
    {
      v13 = *a1;
      if (*a1)
      {
        v14 = *(unsigned int *)(v13 - 4);
        v12 = v13 + 16 * v14;
LABEL_11:
        v15 = 0;
        v16 = v13 + 16 * v14;
        goto LABEL_12;
      }
      return 0;
    }
    if ((WTF::equal(v11, *a2, a3) & 1) != 0)
      break;
LABEL_8:
    ++i;
  }
  v12 = v3 + 16 * v10;
  v13 = *a1;
  if (*a1)
  {
    v14 = *(unsigned int *)(v13 - 4);
    goto LABEL_11;
  }
  v16 = 0;
  v15 = 1;
LABEL_12:
  if (v16 == v12)
    return 0;
  if (*(_DWORD *)(v12 + 8) != 1)
  {
    result = 0;
    --*(_DWORD *)(v12 + 8);
    return result;
  }
  if ((v15 & 1) != 0)
  {
    v17 = 0;
    goto LABEL_16;
  }
  v17 = v13 + 16 * *(unsigned int *)(v13 - 4);
  if (v17 == v12)
    return 1;
LABEL_16:
  if (v17 == v12)
    return 1;
  v18 = *(WTF::StringImpl **)v12;
  *(_QWORD *)v12 = -1;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  ++*(_DWORD *)(*a1 - 16);
  v19 = *a1;
  v20 = *a1 ? *(_DWORD *)(v19 - 12) - 1 : -1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a1;
  if (!*a1)
    return 1;
  v22 = 6 * *(_DWORD *)(v21 - 12);
  v23 = *(_DWORD *)(v21 - 4);
  result = 1;
  if (v22 < v23 && v23 >= 9)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v23 >> 1, 0);
    return 1;
  }
  return result;
}

uint64_t WebCore::DatabaseTracker::doneDeletingDatabase(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, WTF::StringImpl **a3)
{
  uint64_t *v5;
  uint64_t result;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v25;

  v5 = (uint64_t *)((char *)this + 120);
  result = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 15, (uint64_t)a2);
  v8 = result;
  v9 = *((_QWORD *)this + 15);
  if (v9)
    v9 += 56 * *(unsigned int *)(v9 - 4);
  if (v9 != result)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10)
    {
      result = (uint64_t)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(result + 32), a3, v7);
      v10 = *(_QWORD *)(v8 + 32);
      v11 = *(unsigned int *)(v8 + 40);
      if (result)
        v12 = (WTF::StringImpl *)result;
      else
        v12 = (WTF::StringImpl *)(v10 + 8 * v11);
    }
    else
    {
      v11 = *(unsigned int *)(result + 40);
      v12 = (WTF::StringImpl *)(8 * v11);
    }
    if ((WTF::StringImpl *)(v10 + 8 * v11) != v12)
      result = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(v8 + 32, v12);
    if (!*(_DWORD *)(v8 + 44))
    {
      if (*v5)
      {
        v13 = *v5 + 56 * *(unsigned int *)(*v5 - 4);
        if (v13 == v8)
          return result;
      }
      else
      {
        if (!v8)
          return result;
        v13 = 0;
      }
      if (v13 != v8)
      {
        v14 = *(unsigned int *)(v8 + 24);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v14])(&v25, v8);
        *(_QWORD *)v8 = -1;
        *(_QWORD *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v15 = *(WTF **)(v8 + 32);
        if (v15)
        {
          v16 = *(unsigned int *)(v8 + 40);
          if ((_DWORD)v16)
          {
            v17 = (WTF::StringImpl **)v15;
            do
            {
              v18 = *v17;
              *v17 = 0;
              if (v18)
              {
                if (*(_DWORD *)v18 == 2)
                  WTF::StringImpl::destroy(v18, v12);
                else
                  *(_DWORD *)v18 -= 2;
              }
              ++v17;
              --v16;
            }
            while (v16);
          }
          result = WTF::fastFree(v15, v12);
        }
        ++*(_DWORD *)(*v5 - 16);
        v19 = *v5;
        if (*v5)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v5;
        if (*v5)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
            return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v5, v23 >> 1, 0);
        }
      }
    }
  }
  return result;
}

void WebCore::DatabaseTracker::removeDeletedOpenedDatabases(WebCore::DatabaseTracker *this)
{
  WebCore::DatabaseTracker *v1;
  unsigned __int8 *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  unsigned int **v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  WebCore::SQLiteDatabaseTracker *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int **v44;
  unsigned int **v45;
  uint64_t v46;
  unsigned int **v47;
  char v48;
  unsigned int **v49;
  const WTF::String *v50;
  const WTF::StringImpl *v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WebCore::SQLiteDatabaseTracker *v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  char *v77;
  WTF *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  WTF *v83;
  char *v84;
  int v85;
  char *v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  WTF *v103;
  WTF *v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  WTF::StringImpl **v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  unsigned int **v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  WTF *v120;
  void *v121;
  unsigned int *v122;
  unsigned int *v123;
  uint64_t v124;
  WTF::Lock *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  char *__src;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF *v132;
  uint64_t v133;
  WTF *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  sqlite3_stmt *pStmt;
  unsigned int v138;
  int v139;
  WTF *v140;
  int v141;
  unsigned int v142;
  uint64_t v143;

  v1 = this;
  v143 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  WebCore::DatabaseTracker::openTrackerDatabase(v1, 0);
  v5 = *((_QWORD *)v1 + 4);
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
    {
      if (!v5)
        return;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return;
LABEL_11:
  v134 = 0;
  v135 = 0;
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v1);
LABEL_15:
  v8 = (unsigned int **)*((_QWORD *)v1 + 1);
  if (!v8)
  {
LABEL_205:
    v18 = 0;
    __src = 0;
    goto LABEL_206;
  }
  v9 = *v8;
  if (!*v8)
  {
    v15 = 0;
    LODWORD(v10) = 0;
    goto LABEL_27;
  }
  v10 = *(v9 - 1);
  v11 = &v9[10 * v10];
  if (!*(v9 - 3))
  {
    v15 = &v9[10 * v10];
LABEL_27:
    v11 = &v9[10 * v10];
    if (!v9)
      goto LABEL_30;
    goto LABEL_33;
  }
  if ((_DWORD)v10)
  {
    v12 = &v9[10 * v10];
    v13 = 40 * v10;
    while (1)
    {
      if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9) & 1) == 0)
      {
        v14 = v9[6];
        if ((_DWORD)v14 == -1)
LABEL_249:
          std::__throw_bad_variant_access[abi:sn180100]();
        v136 = (WTF::StringImpl *)&v132;
        if (!((unsigned int (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v14])(&v136, v9))break;
      }
      v9 += 10;
      v13 -= 40;
      if (!v13)
      {
        v11 = v12;
        v9 = v12;
        goto LABEL_32;
      }
    }
    v11 = v12;
LABEL_32:
    v15 = v9;
    v9 = *v8;
    if (*v8)
      goto LABEL_33;
LABEL_30:
    v16 = 0;
    goto LABEL_34;
  }
  v15 = *v8;
  if (!v9)
    goto LABEL_30;
LABEL_33:
  v16 = &v9[10 * *(v9 - 1)];
LABEL_34:
  if (v16 == v15)
    goto LABEL_205;
  __src = 0;
  LODWORD(v17) = 0;
  v18 = 0;
  v125 = v1;
  v126 = (uint64_t)v1 + 24;
  v122 = v16;
  v123 = v11;
  do
  {
    v19 = (uint64_t *)*((_QWORD *)v15 + 4);
    v132 = 0;
    v133 = 0;
    v20 = *v19;
    if (v20)
    {
      v21 = *(unsigned int *)(v20 - 4);
      v22 = v20 + 16 * v21;
      if (*(_DWORD *)(v20 - 12))
      {
        v23 = v20;
        if ((_DWORD)v21)
        {
          v24 = 16 * v21;
          v23 = v20;
          while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
          {
            v23 += 16;
            v24 -= 16;
            if (!v24)
            {
              v23 = v22;
              goto LABEL_43;
            }
          }
        }
        goto LABEL_43;
      }
      v23 = v20 + 16 * v21;
    }
    else
    {
      v23 = 0;
      v21 = 0;
    }
    v22 = v20 + 16 * v21;
    if (!v20)
    {
      v25 = 0;
      goto LABEL_48;
    }
LABEL_43:
    v25 = v20 + 16 * *(unsigned int *)(v20 - 4);
LABEL_48:
    if (v25 == v23)
    {
      v1 = v125;
      v73 = v123;
      goto LABEL_179;
    }
    v127 = v25;
    v128 = v15;
    v124 = v22;
    do
    {
      v26 = *(WTF::StringImpl **)v23;
      if (*(_QWORD *)v23)
        *(_DWORD *)v26 += 2;
      v131 = v26;
      WebCore::SQLiteDatabase::prepareStatement(v126, "SELECT path FROM Databases WHERE origin=? AND name=?;",
        54,
        (uint64_t)&v136);
      v27 = v138;
      if (v138)
      {
        v28 = 0;
        goto LABEL_80;
      }
      WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)v15, &v130);
      v29 = (unint64_t)v130;
      if (v130)
      {
        v30 = (char *)*((_QWORD *)v130 + 1);
        v29 = *((unsigned int *)v130 + 1);
        v31 = ((unint64_t)*((unsigned int *)v130 + 4) >> 2) & 1;
      }
      else
      {
        v30 = 0;
        v31 = 1;
      }
      WebCore::SQLiteStatement::bindText((uint64_t)&v136, 1, v30, v29 | (v31 << 32));
      v33 = v130;
      v130 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (v138)
        goto LABEL_249;
      v34 = (unint64_t)v131;
      if (v131)
      {
        v35 = (char *)*((_QWORD *)v131 + 1);
        v34 = *((unsigned int *)v131 + 1);
        v36 = ((unint64_t)*((unsigned int *)v131 + 4) >> 2) & 1;
      }
      else
      {
        v35 = 0;
        v36 = 1;
      }
      WebCore::SQLiteStatement::bindText((uint64_t)&v136, 2, v35, v34 | (v36 << 32));
      if (v138)
        goto LABEL_249;
      v37 = (unsigned __int8 *)v136 + 32;
      if (__ldaxr((unsigned __int8 *)v136 + 32))
      {
        __clrex();
LABEL_66:
        MEMORY[0x19AEA534C](v37);
        goto LABEL_67;
      }
      if (__stxr(1u, v37))
        goto LABEL_66;
LABEL_67:
      if (*((_BYTE *)v136 + 20) || (v39 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v39))
      {
        v40 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v39);
        v71 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v40 = (int)v71;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v71);
      }
      v41 = __ldxr(v37);
      if (v41 == 1)
      {
        if (!__stlxr(0, v37))
          goto LABEL_75;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_75:
      if (v40 == 100)
      {
        if (v138)
          goto LABEL_249;
        WebCore::SQLiteStatement::columnText(&v136, 0, &v130);
        v28 = v130;
      }
      else
      {
        v28 = 0;
      }
      v27 = v138;
LABEL_80:
      if (v27 != 0xFFFFFFFFLL)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E336DDD8[v27])(&v130, &v136);
      v42 = **(_QWORD **)(v23 + 8);
      if (v42)
      {
        v43 = *(unsigned int *)(v42 - 4);
        v44 = (unsigned int **)(v42 + 8 * v43);
        if (*(_DWORD *)(v42 - 12))
        {
          v45 = **(unsigned int ****)(v23 + 8);
          if ((_DWORD)v43)
          {
            v46 = 8 * v43;
            v45 = **(unsigned int ****)(v23 + 8);
            while ((unint64_t)*v45 + 1 <= 1)
            {
              ++v45;
              v46 -= 8;
              if (!v46)
              {
                v45 = v44;
                goto LABEL_89;
              }
            }
          }
          goto LABEL_89;
        }
        v45 = (unsigned int **)(v42 + 8 * v43);
      }
      else
      {
        v45 = 0;
        v43 = 0;
      }
      v44 = (unsigned int **)(v42 + 8 * v43);
      if (!v42)
      {
        v47 = 0;
        goto LABEL_94;
      }
LABEL_89:
      v47 = (unsigned int **)(v42 + 8 * *(unsigned int *)(v42 - 4));
LABEL_94:
      if (v47 == v45)
      {
        v64 = v127;
        v15 = v128;
        if (v28)
          goto LABEL_141;
        goto LABEL_143;
      }
      v48 = 0;
      do
      {
        if (*((_BYTE *)*v45 + 40))
          goto LABEL_97;
        if (v28)
        {
          WTF::String::isolatedCopy();
          WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v130, v50);
          v52 = WTF::equal(v28, v136, v51);
          v53 = v136;
          v136 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v4);
            else
              *(_DWORD *)v53 -= 2;
          }
          v54 = v130;
          v130 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
            {
              WTF::StringImpl::destroy(v54, v4);
              if ((v52 & 1) != 0)
                goto LABEL_97;
              goto LABEL_112;
            }
            *(_DWORD *)v54 -= 2;
          }
          if ((v52 & 1) != 0)
            goto LABEL_97;
        }
LABEL_112:
        v55 = v18;
        if (v18 == (_DWORD)v17)
        {
          v56 = v17;
          v57 = ((unint64_t)v17 >> 2) + v17;
          if (v57 >= 0x10)
            v58 = v57 + 1;
          else
            v58 = 16;
          if (v58 <= (unint64_t)v18 + 1)
            v17 = v18 + 1;
          else
            v17 = v58;
          if (v17 >> 29)
          {
            __break(0xC471u);
            return;
          }
          v59 = (char *)WTF::fastMalloc((WTF *)(8 * v17));
          memcpy(v59, __src, 8 * v18);
          if (__src)
          {
            if (v59 == __src)
            {
              LODWORD(v17) = 0;
              v59 = 0;
            }
            WTF::fastFree((WTF *)__src, v4);
          }
          v60 = *v45;
          if (*v45)
          {
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 + 1, v60));
          }
          __src = v59;
          *(_QWORD *)&v59[8 * v18] = v60;
          v18 = v56 + 1;
          v48 = 1;
        }
        else
        {
          v62 = *v45;
          if (*v45)
          {
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 + 1, v62));
          }
          ++v18;
          *(_QWORD *)&__src[8 * v55] = v62;
          v48 = 1;
        }
LABEL_97:
        v49 = v45 + 1;
        v45 = v44;
        if (v49 != v44)
        {
          v45 = v49;
          while ((unint64_t)*v45 + 1 <= 1)
          {
            if (++v45 == v44)
            {
              v45 = v44;
              break;
            }
          }
        }
      }
      while (v45 != v47);
      v64 = v127;
      v15 = v128;
      if (((*((_QWORD *)v125 + 13) != 0) & v48) != 0)
      {
        v22 = v124;
        if (!v28)
        {
          v65 = HIDWORD(v133);
          if (HIDWORD(v133) == (_DWORD)v133)
          {
            v66 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v132, HIDWORD(v133) + 1, (unint64_t)&v131);
            v65 = HIDWORD(v133);
            v67 = v132;
            v68 = *v66;
            if (!*v66)
            {
LABEL_157:
              *((_QWORD *)v67 + v65) = v68;
              HIDWORD(v133) = v65 + 1;
              goto LABEL_143;
            }
          }
          else
          {
            v68 = v131;
            v67 = v132;
            if (!v131)
              goto LABEL_157;
          }
          *(_DWORD *)v68 += 2;
          goto LABEL_157;
        }
      }
      else
      {
        v22 = v124;
        if (!v28)
          goto LABEL_143;
      }
LABEL_141:
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v4);
      else
        *(_DWORD *)v28 -= 2;
LABEL_143:
      v69 = v131;
      v131 = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v4);
        else
          *(_DWORD *)v69 -= 2;
      }
      v70 = v23 + 16;
      v23 = v22;
      if (v70 != v22)
      {
        v23 = v70;
        while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
        {
          v23 += 16;
          if (v23 == v22)
          {
            v23 = v22;
            break;
          }
        }
      }
    }
    while (v23 != v64);
    v72 = HIDWORD(v133);
    v1 = v125;
    v73 = v123;
    if (HIDWORD(v133))
    {
      LOBYTE(v136) = 0;
      v139 = -1;
      v74 = v15[6];
      if ((_DWORD)v74 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, unsigned int *))off_1E336DDC8[v74])(&v131, &v136, v15);
        v139 = v74;
        v72 = HIDWORD(v133);
      }
      v140 = v132;
      v75 = v133;
      v132 = 0;
      v133 = 0;
      v141 = v75;
      v142 = v72;
      v76 = HIDWORD(v135);
      if (HIDWORD(v135) == (_DWORD)v135)
      {
        v77 = WTF::Vector<std::pair<WebCore::SecurityOriginData,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, HIDWORD(v135) + 1, (unint64_t)&v136);
        v76 = HIDWORD(v135);
        v78 = v134;
        v79 = (char *)v134 + 48 * HIDWORD(v135);
        *v79 = 0;
        *((_DWORD *)v79 + 6) = -1;
        v80 = *((unsigned int *)v77 + 6);
        if ((_DWORD)v80 != -1)
        {
          ((void (*)(WTF::StringImpl **, char *, char *))off_1E336DDF8[v80])(&v131, v79, v77);
          *((_DWORD *)v79 + 6) = v80;
        }
        v81 = (char *)v78 + 48 * v76;
        *((_QWORD *)v81 + 4) = 0;
        *((_QWORD *)v81 + 5) = 0;
        v82 = *((_QWORD *)v77 + 4);
        *((_QWORD *)v77 + 4) = 0;
        *((_QWORD *)v81 + 4) = v82;
        LODWORD(v82) = *((_DWORD *)v77 + 10);
        *((_DWORD *)v77 + 10) = 0;
        *((_DWORD *)v81 + 10) = v82;
        LODWORD(v82) = *((_DWORD *)v77 + 11);
        *((_DWORD *)v77 + 11) = 0;
        *((_DWORD *)v81 + 11) = v82;
      }
      else
      {
        v83 = v134;
        v84 = (char *)v134 + 48 * HIDWORD(v135);
        *v84 = 0;
        *((_DWORD *)v84 + 6) = -1;
        v85 = v139;
        if (v139 != -1)
        {
          ((void (*)(WTF::StringImpl **, char *, WTF::StringImpl **))off_1E336DDF8[v139])(&v131, v84, &v136);
          *((_DWORD *)v84 + 6) = v85;
        }
        v86 = (char *)v83 + 48 * v76;
        *((_QWORD *)v86 + 4) = 0;
        *((_QWORD *)v86 + 5) = 0;
        v87 = v140;
        v140 = 0;
        *((_QWORD *)v86 + 4) = v87;
        LODWORD(v87) = v141;
        v141 = 0;
        *((_DWORD *)v86 + 10) = (_DWORD)v87;
        LODWORD(v87) = v142;
        v142 = 0;
        *((_DWORD *)v86 + 11) = (_DWORD)v87;
      }
      HIDWORD(v135) = v76 + 1;
      if (v142)
      {
        v96 = v140;
        v97 = 8 * v142;
        do
        {
          v98 = *(WTF::StringImpl **)v96;
          *(_QWORD *)v96 = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy(v98, v4);
            else
              *(_DWORD *)v98 -= 2;
          }
          v96 = (WTF *)((char *)v96 + 8);
          v97 -= 8;
        }
        while (v97);
      }
      v88 = v140;
      if (v140)
      {
        v140 = 0;
        v141 = 0;
        WTF::fastFree(v88, v4);
      }
      if (v139 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v139])(&v131, &v136);
      if (HIDWORD(v133))
      {
        v93 = v132;
        v94 = 8 * HIDWORD(v133);
        do
        {
          v95 = *(WTF::StringImpl **)v93;
          *(_QWORD *)v93 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
              WTF::StringImpl::destroy(v95, v4);
            else
              *(_DWORD *)v95 -= 2;
          }
          v93 = (WTF *)((char *)v93 + 8);
          v94 -= 8;
        }
        while (v94);
      }
    }
LABEL_179:
    v89 = v132;
    if (v132)
    {
      v132 = 0;
      LODWORD(v133) = 0;
      WTF::fastFree(v89, v4);
    }
    v90 = v15 + 10;
    v15 = v73;
    if (v90 != v73)
    {
      v15 = v90;
      do
      {
        v91 = v15[6];
        if ((_DWORD)v91 == -1)
          goto LABEL_249;
        v136 = (WTF::StringImpl *)&v132;
        if ((((uint64_t (*)(WTF::StringImpl **, unsigned int *))off_1E336DE98[v91])(&v136, v15) & 1) == 0)
        {
          v92 = v15[6];
          if ((_DWORD)v92 == -1)
            goto LABEL_249;
          v136 = (WTF::StringImpl *)&v132;
          if (!((unsigned int (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v92])(&v136, v15))goto LABEL_189;
        }
        v15 += 10;
      }
      while (v15 != v73);
      v15 = v73;
    }
LABEL_189:
    ;
  }
  while (v15 != v122);
LABEL_206:
  v99 = __ldxr((unsigned __int8 *)v1);
  if (v99 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v18)
        goto LABEL_216;
      goto LABEL_212;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(v1);
  if (!v18)
    goto LABEL_216;
LABEL_212:
  v100 = 8 * v18;
  v101 = __src;
  do
  {
    v102 = *(_QWORD *)v101;
    if (!*(_BYTE *)(*(_QWORD *)v101 + 40))
    {
      *(_BYTE *)(v102 + 40) = 1;
      WebCore::Database::close((_QWORD *)v102);
    }
    v101 += 8;
    v100 -= 8;
  }
  while (v100);
LABEL_216:
  v103 = v134;
  if (HIDWORD(v135))
  {
    v104 = (WTF *)((char *)v134 + 48 * HIDWORD(v135));
    v105 = v134;
    do
    {
      (*(void (**)(_QWORD, WTF *))(**((_QWORD **)v1 + 13) + 16))(*((_QWORD *)v1 + 13), v105);
      v106 = *((unsigned int *)v105 + 11);
      if ((_DWORD)v106)
      {
        v107 = *((_QWORD *)v105 + 4);
        v108 = 8 * v106;
        do
        {
          (*(void (**)(_QWORD, WTF *, uint64_t))(**((_QWORD **)v1 + 13) + 24))(*((_QWORD *)v1 + 13), v105, v107);
          v107 += 8;
          v108 -= 8;
        }
        while (v108);
      }
      v105 = (WTF *)((char *)v105 + 48);
    }
    while (v105 != v104);
    v109 = v103;
    do
    {
      v110 = *((unsigned int *)v109 + 11);
      if ((_DWORD)v110)
      {
        v113 = (WTF::StringImpl **)*((_QWORD *)v109 + 4);
        v114 = 8 * v110;
        do
        {
          v115 = *v113;
          *v113 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v4);
            else
              *(_DWORD *)v115 -= 2;
          }
          ++v113;
          v114 -= 8;
        }
        while (v114);
      }
      v111 = (WTF *)*((_QWORD *)v109 + 4);
      if (v111)
      {
        *((_QWORD *)v109 + 4) = 0;
        *((_DWORD *)v109 + 10) = 0;
        WTF::fastFree(v111, v4);
      }
      v112 = *((unsigned int *)v109 + 6);
      if ((_DWORD)v112 != -1)
        ((void (*)(WTF::StringImpl **, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v112])(&v136, v109);
      *((_DWORD *)v109 + 6) = -1;
      v109 = (WTF *)((char *)v109 + 48);
    }
    while (v109 != v104);
  }
  if (v103)
    WTF::fastFree(v103, v4);
  if (v18)
  {
    v116 = (unsigned int **)__src;
    do
    {
      v117 = *v116;
      *v116 = 0;
      if (v117)
      {
        do
        {
          v118 = __ldaxr(v117);
          v119 = v118 - 1;
        }
        while (__stlxr(v119, v117));
        if (!v119)
        {
          atomic_store(1u, v117);
          WebCore::Database::~Database((WebCore::Database *)v117);
          WTF::fastFree(v120, v121);
        }
      }
      ++v116;
    }
    while (v116 != (unsigned int **)&__src[8 * v18]);
  }
  if (__src)
    WTF::fastFree((WTF *)__src, v4);
}

uint64_t WebCore::DatabaseTracker::deleteDatabaseFileIfEmpty(WebCore::DatabaseTracker *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  _BOOL4 v7;
  unsigned __int8 *v8;
  WebCore::SQLiteDatabaseTracker *v10;
  int v11;
  int v12;
  const WTF::String *v13;
  void *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WebCore::SQLiteDatabaseTracker *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  sqlite3_stmt *pStmt;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  char v33;
  WTF::Thread *v34;
  char v35;
  int v36;
  WTF *v37;
  char v38;

  v3 = WTF::FileSystemImpl::fileSize(this, a2);
  v4 = 0;
  if (!v5 || v3)
    return v4;
  v27 = 0;
  v28 = 0;
  v29 = -1;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  v37 = 0;
  v4 = 0;
  if (WebCore::SQLiteDatabase::open((uint64_t)&v27, this, 2u, 0))
  {
    WebCore::SQLiteDatabase::prepareStatement((uint64_t)&v27, "PRAGMA locking_mode=EXCLUSIVE;", 31, (uint64_t)&v24);
    v6 = v26;
    if (v26)
    {
      v7 = 1;
LABEL_19:
      if (v6 != -1)
        ((void (*)(char *, uint64_t *))off_1E336DDD8[v6])(&v38, &v24);
      if (!v7
        && WebCore::SQLiteDatabase::executeCommand((uint64_t)&v27, "BEGIN EXCLUSIVE TRANSACTION;", 29)
        && WebCore::SQLiteDatabase::executeCommand((uint64_t)&v27, "SELECT name FROM sqlite_master WHERE type='table';",
                           51))
      {
        WebCore::SQLiteDatabase::executeCommand((uint64_t)&v27, "COMMIT TRANSACTION;", 20);
        WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)&v27);
        v4 = WebCore::SQLiteFileSystem::deleteDatabaseFile((WTF::StringImpl **)this, v13);
      }
      else
      {
        v4 = 0;
      }
      goto LABEL_26;
    }
    v8 = (unsigned __int8 *)(v24 + 32);
    if (__ldaxr((unsigned __int8 *)(v24 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
LABEL_10:
      if (*(_BYTE *)(v24 + 20) || (v10 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v10))
      {
        v11 = sqlite3_step(pStmt);
      }
      else
      {
        WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v10);
        v21 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
        v11 = (int)v21;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v21);
      }
      v12 = __ldxr(v8);
      if (v12 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_18;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_18:
      v7 = (v11 - 102) < 0xFFFFFFFE;
      v6 = v26;
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v8);
    goto LABEL_10;
  }
LABEL_26:
  WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)&v27);
  v15 = v37;
  v37 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v14);
    else
      --*(_DWORD *)v15;
  }
  v16 = (unsigned int *)v34;
  v34 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::Thread::~Thread((WTF::Thread *)v16);
      WTF::fastFree(v22, v23);
    }
  }
  v19 = v32;
  v32 = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::DatabaseAuthorizer,(WTF::DestructionThread)0>::deref(v19, (WTF::StringImpl *)v14);
  return v4;
}

WTF::StringImpl *WebCore::DatabaseTracker::scheduleNotifyDatabaseChanged(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2, const WTF::String *a3)
{
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  _QWORD *v24;
  int v25;
  WTF::StringImpl *v26;
  char v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  WTF::StringImpl *v32[2];

  v32[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (__ldaxr((unsigned __int8 *)&unk_1ECE82139))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECE82139))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](&unk_1ECE82139, a2, a3);
LABEL_5:
  if ((byte_1ECE8213A & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE82148 = 0;
    qword_1ECE82140 = 0;
    byte_1ECE8213A = 1;
  }
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v28[0] = &v26;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, const WebCore::SecurityOriginData *, const WTF::String *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJN7WebCore18SecurityOriginData5TupleENS9_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS9_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE4copyERKSJ_EUlRT_E_EEJRKNS0_6__implIJSB_SI_EEEEEEDcOSN_DpOT0____fmatrix[v5])(v30, v28, a2, a3);
  LOBYTE(v28[0]) = 0;
  v29 = -1;
  v6 = v31;
  if (v31 != -1)
  {
    ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal_0[v31])(&v26, v28, v30);
    v29 = v6;
    if (v31 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_13[v31])(&v26, v30);
  }
  WTF::String::isolatedCopy();
  LOBYTE(v30[0]) = 0;
  v31 = -1;
  v8 = v29;
  if (v29 != -1)
  {
    ((void (*)(char *, _QWORD *, _QWORD *))off_1E336DDF8[v29])(&v27, v30, v28);
    v31 = v8;
  }
  v9 = v26;
  v26 = 0;
  v32[0] = v9;
  v10 = dword_1ECE8214C;
  if (dword_1ECE8214C == dword_1ECE82148)
  {
    v11 = WTF::Vector<std::pair<WebCore::SecurityOriginData,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1ECE8214C + 1, (unint64_t)v30);
    v12 = dword_1ECE8214C;
    v13 = qword_1ECE82140;
    v14 = qword_1ECE82140 + 40 * dword_1ECE8214C;
    *(_BYTE *)v14 = 0;
    *(_DWORD *)(v14 + 24) = -1;
    v15 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(char *, uint64_t, unint64_t))off_1E336DDF8[v15])(&v27, v14, v11);
      *(_DWORD *)(v14 + 24) = v15;
    }
    v16 = (WTF::StringImpl **)(v13 + 40 * v12 + 32);
    v17 = (WTF::StringImpl **)(v11 + 32);
  }
  else
  {
    v17 = v32;
    v18 = qword_1ECE82140;
    v19 = qword_1ECE82140 + 40 * dword_1ECE8214C;
    *(_BYTE *)v19 = 0;
    *(_DWORD *)(v19 + 24) = -1;
    v20 = v31;
    if (v31 != -1)
    {
      ((void (*)(char *, uint64_t, _QWORD *))off_1E336DDF8[v31])(&v27, v19, v30);
      *(_DWORD *)(v19 + 24) = v20;
    }
    v16 = (WTF::StringImpl **)(v18 + 40 * v10 + 32);
  }
  v21 = *v17;
  *v17 = 0;
  *v16 = v21;
  ++dword_1ECE8214C;
  v22 = v32[0];
  v32[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v7);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v31 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v31])(&v27, v30);
  v31 = -1;
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  if (v29 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v29])(&v26, v28);
  if ((_MergedGlobals_150 & 1) == 0)
  {
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E336DEC8;
    v30[0] = v24;
    WTF::callOnMainThread();
    result = (WTF::StringImpl *)v30[0];
    v30[0] = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    _MergedGlobals_150 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)&unk_1ECE82139);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&unk_1ECE82139))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE82139);
}

void WebCore::LocalDOMWindowWebDatabase::openDatabase(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, int a3@<W2>, const WTF::String *a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  const WebCore::SecurityOrigin *v22;
  int v23;
  WebCore::SecurityOrigin *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WebCore::OriginLock *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  char v35;

  v8 = *(_QWORD *)(a1 + 72);
  if (!v8)
    goto LABEL_7;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_7;
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1955AACA4);
  }
  v10 = *(_QWORD *)(v9 + 240);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0 || *(_QWORD *)(*(_QWORD *)(v11 + 296) + 696) != a1)
  {
LABEL_7:
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 16) = 0;
    return;
  }
  {
    if (!byte_1ECE88AF0)
    {
      *(_BYTE *)a7 = 14;
      *(_QWORD *)(a7 + 8) = 0;
      *(_DWORD *)(a7 + 16) = 1;
      return;
    }
  }
  else
  {
    WebCore::DatabaseManager::singleton(void)::instance = 0;
    *(_QWORD *)&byte_1ECE88AF0 = 1;
    qword_1ECE88AF8 = 0;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
    {
      *(_BYTE *)a7 = 14;
      *(_QWORD *)(a7 + 8) = 0;
      *(_DWORD *)(a7 + 16) = 1;
      return;
    }
  }
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1955AACD0);
  }
  *(_DWORD *)(v9 - 264) += 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::Document::addConsoleMessage((_QWORD *)(v9 - 288), 4, 1, &v32, 0);
  v19 = v32;
  v32 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 - 96), v18);
  if (!v20)
    goto LABEL_41;
  v22 = (const WebCore::SecurityOrigin *)v20;
  if (*(_DWORD *)(v20 + 32) == 1 || *(_BYTE *)(v20 + 63) && !*(_BYTE *)(v20 + 60) && !*(_BYTE *)(v20 + 56))
    goto LABEL_41;
  v23 = *(unsigned __int8 *)(v9 + 176);
  if (v23 == 1)
  {
    v24 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 256))(v9 - 96);
    if (!WebCore::SecurityOrigin::isSameOriginAs(v24, v22) && !*((_BYTE *)v22 + 56))
      goto LABEL_41;
  }
  else if (v23 == 2)
  {
LABEL_41:
    *(_BYTE *)a7 = 14;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
    v29 = (_DWORD *)(v9 - 264);
    goto LABEL_42;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  if (*(_BYTE *)(v25 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1955AAD50);
  }
  WebCore::DatabaseManager::openDatabase((uint64_t)&WebCore::DatabaseManager::singleton(void)::instance, (_QWORD *)(v25 - 288), a2, a3, a4, a5, a6, (uint64_t)&v32);
  v27 = v34;
  if (!v34)
  {
    v30 = v32;
    v32 = 0;
    *(_QWORD *)a7 = v30;
    *(_DWORD *)(a7 + 16) = 0;
LABEL_28:
    v29 = (_DWORD *)(v9 - 264);
    goto LABEL_29;
  }
  if (v34 != 1)
  {
    v31 = (WebCore::OriginLock *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::OriginLock::~OriginLock(v31);
    return;
  }
  v28 = v33;
  v33 = 0;
  *(_BYTE *)a7 = (_BYTE)v32;
  *(_QWORD *)(a7 + 8) = 0;
  v27 = 1;
  *(_DWORD *)(a7 + 16) = 1;
  if (!v28)
    goto LABEL_28;
  v29 = (_DWORD *)(v9 - 264);
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    v27 = 1;
LABEL_29:
    ((void (*)(char *, WTF::StringImpl **))off_1E336DE08[v27])(&v35, &v32);
    goto LABEL_42;
  }
  WTF::StringImpl::destroy(v28, v26);
  v27 = v34;
  if (v34 != -1)
    goto LABEL_29;
LABEL_42:
  if (*v29 == 2)
  {
    if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 288), v21);
  }
  else
  {
    *v29 -= 2;
  }
}

void WebCore::OriginLock::~OriginLock(WebCore::OriginLock *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

unsigned int *WebCore::SQLResultSetRowList::item@<X0>(unsigned int *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31[8];
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = this[9];
  if (v3 && (v4 = this, v5 = this[5], v3 / v5 > a2))
  {
    v33 = 0;
    v34 = 0;
    if ((_DWORD)v5)
    {
      v28 = a3;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v29 = v5 * a2;
      v9 = 16 * v29;
      while (1)
      {
        if (v8 >= v4[5] || v29 + v8 >= v4[9])
        {
          __break(0xC471u);
          JUMPOUT(0x1955AB0B0);
        }
        v10 = *((_QWORD *)v4 + 3);
        v11 = *(WTF::StringImpl **)(*((_QWORD *)v4 + 1) + 8 * v8);
        if (v11)
          *(_DWORD *)v11 += 2;
        v30 = v11;
        v31[0] = 0;
        v32 = -1;
        v12 = *(unsigned int *)(v10 + v9 + 8);
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *, char *))off_1E336DE30[v12])(&v35, v31);
          v32 = v12;
        }
        v13 = v7;
        if (v7 == (_DWORD)v34)
          break;
        v22 = v6 + 24 * v7;
        v23 = v30;
        v30 = 0;
        *(_QWORD *)(v6 + 24 * v13) = v23;
        *(_BYTE *)(v22 + 8) = 0;
        v19 = (WTF::StringImpl *)(v22 + 8);
        *(_DWORD *)(v22 + 16) = -1;
        v24 = (int *)(v22 + 16);
        v25 = v32;
        if (v32 != -1)
        {
          ((void (*)(char *, WTF::StringImpl *, char *))off_1E336DE48[v32])(&v35, v19, v31);
          *v24 = v25;
          v15 = HIDWORD(v34);
LABEL_17:
          v7 = v15 + 1;
          HIDWORD(v34) = v7;
          if (v32 != -1)
            off_1E336DE18[v32](&v35, v31);
          goto LABEL_20;
        }
        v7 = ++HIDWORD(v34);
LABEL_20:
        v32 = -1;
        this = (unsigned int *)v30;
        v30 = 0;
        if (this)
        {
          if (*this == 2)
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v19);
          else
            *this -= 2;
        }
        ++v8;
        v9 += 16;
        if (v5 == v8)
        {
          v26 = v33;
          v27 = v34;
          a3 = v28;
          goto LABEL_28;
        }
      }
      v14 = WTF::Vector<WTF::KeyValuePair<WTF::String,std::variant<decltype(nullptr),WTF::String,double>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v33, v7 + 1, (unint64_t)&v30);
      v15 = HIDWORD(v34);
      v6 = v33;
      v16 = v33 + 24 * HIDWORD(v34);
      v17 = 24 * HIDWORD(v34);
      v18 = *(_QWORD *)v14;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v6 + v17) = v18;
      *(_BYTE *)(v16 + 8) = 0;
      v19 = (WTF::StringImpl *)(v16 + 8);
      *(_DWORD *)(v16 + 16) = -1;
      v20 = (_DWORD *)(v16 + 16);
      v21 = *(unsigned int *)(v14 + 16);
      if ((_DWORD)v21 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, unint64_t))off_1E336DE48[v21])(&v35, v19, v14 + 8);
        *v20 = v21;
      }
      goto LABEL_17;
    }
    v7 = 0;
    v27 = 0;
    v26 = 0;
LABEL_28:
    *(_QWORD *)a3 = v26;
    *(_DWORD *)(a3 + 8) = v27;
    *(_DWORD *)(a3 + 12) = v7;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return this;
}

void WebCore::SQLStatement::~SQLStatement(WebCore::SQLStatement *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  _QWORD *v56;
  char v57;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v54 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v54)
        WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(v54, a2);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v55 = *(WTF::StringImpl **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v55 -= 2;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
LABEL_10:
    MEMORY[0x19AEA534C]((char *)this + 48);
    goto LABEL_11;
  }
  if (__stxr(1u, v9))
    goto LABEL_10;
LABEL_11:
  if (!*((_QWORD *)this + 7))
    goto LABEL_25;
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 88))(*((_QWORD *)this + 8)))
  {
    v18 = *((_QWORD *)this + 7);
    v19 = *((_QWORD *)this + 8);
    v17 = 1;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    goto LABEL_26;
  }
  v11 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
  {
    v12 = v11 + 4;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (!v15)
    goto LABEL_25;
  v16 = *(unsigned __int8 *)(v15 + 274);
  if (!*(_BYTE *)(v15 + 274))
  {
    if (*(_DWORD *)(v15 - 168) != 2)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_DWORD *)(v15 - 168) -= 2;
      goto LABEL_26;
    }
    if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), a2);
    goto LABEL_25;
  }
  if (v16 != 1)
  {
    if (v16 == 2)
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
    goto LABEL_25;
  }
  if (*(_DWORD *)(v15 + 312) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
LABEL_25:
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_26;
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  --*(_DWORD *)(v15 + 312);
LABEL_26:
  v20 = __ldxr(v9);
  if (v20 == 1)
  {
    if (!__stlxr(0, v9))
    {
      if (!v17)
        goto LABEL_34;
      goto LABEL_32;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::SQLStatement *)((char *)this + 48));
  if (!v17)
    goto LABEL_34;
LABEL_32:
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v21 = off_1E336DF18;
  v21[1] = v18;
  v21[2] = v19;
  v56 = v21;
  v57 = 1;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v19 + 336))(v19, &v56);
  v22 = v56;
  v56 = 0;
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
LABEL_34:
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v23)
  {
    v24 = *(unsigned __int8 *)(v23 + 274);
    if (*(_BYTE *)(v23 + 274))
    {
      if (v24 == 1)
      {
        if (*(_DWORD *)(v23 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
        else
          --*(_DWORD *)(v23 + 312);
      }
      else if (v24 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v23 + 312));
      }
    }
    else if (*(_DWORD *)(v23 - 168) == 2)
    {
      if ((*(_WORD *)(v23 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v23 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v23 - 168) -= 2;
    }
  }
  v25 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v25)
  {
    v26 = v25 + 4;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
    }
  }
  v29 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
LABEL_46:
    MEMORY[0x19AEA534C]((char *)this + 24);
    goto LABEL_47;
  }
  if (__stxr(1u, v29))
    goto LABEL_46;
LABEL_47:
  if (!*((_QWORD *)this + 4))
    goto LABEL_63;
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 5) + 88))(*((_QWORD *)this + 5)))
  {
    v38 = *((_QWORD *)this + 4);
    v39 = *((_QWORD *)this + 5);
    v37 = 1;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    goto LABEL_64;
  }
  v31 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v31)
  {
    v32 = v31 + 4;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v31 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 16))(v31);
    }
  }
  v35 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v35)
    goto LABEL_63;
  v36 = *(unsigned __int8 *)(v35 + 274);
  if (!*(_BYTE *)(v35 + 274))
  {
    if (*(_DWORD *)(v35 - 168) != 2)
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      *(_DWORD *)(v35 - 168) -= 2;
      goto LABEL_64;
    }
    if ((*(_WORD *)(v35 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v35 - 192), a2);
    goto LABEL_63;
  }
  if (v36 != 1)
  {
    if (v36 == 2)
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v35 + 312));
    goto LABEL_63;
  }
  if (*(_DWORD *)(v35 + 312) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
LABEL_63:
    v37 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_64;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  --*(_DWORD *)(v35 + 312);
LABEL_64:
  v40 = __ldxr(v29);
  if (v40 == 1)
  {
    if (!__stlxr(0, v29))
    {
      if (!v37)
        goto LABEL_72;
      goto LABEL_70;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::SQLStatement *)((char *)this + 24));
  if (!v37)
    goto LABEL_72;
LABEL_70:
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v41 = off_1E336DEF0;
  v41[1] = v38;
  v41[2] = v39;
  v56 = v41;
  v57 = 1;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v39 + 336))(v39, &v56);
  v42 = v56;
  v56 = 0;
  if (v42)
    (*(void (**)(_QWORD *))(*v42 + 8))(v42);
LABEL_72:
  v43 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v43)
  {
    v44 = *(unsigned __int8 *)(v43 + 274);
    if (*(_BYTE *)(v43 + 274))
    {
      if (v44 == 1)
      {
        if (*(_DWORD *)(v43 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 40))(v43);
        else
          --*(_DWORD *)(v43 + 312);
      }
      else if (v44 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v43 + 312));
      }
    }
    else if (*(_DWORD *)(v43 - 168) == 2)
    {
      if ((*(_WORD *)(v43 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v43 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v43 - 168) -= 2;
    }
  }
  v45 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v45)
  {
    v46 = v45 + 4;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v45 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 16))(v45);
    }
  }
  v49 = *((unsigned int *)this + 5);
  v50 = *((_QWORD *)this + 1);
  if ((_DWORD)v49)
  {
    v51 = 16 * v49;
    do
    {
      v52 = *(unsigned int *)(v50 + 8);
      if ((_DWORD)v52 != -1)
        off_1E336DE18[v52]((char *)&v56, (char *)v50);
      *(_DWORD *)(v50 + 8) = -1;
      v50 += 16;
      v51 -= 16;
    }
    while (v51);
    v50 = *((_QWORD *)this + 1);
  }
  if (v50)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((WTF *)v50, a2);
  }
  v53 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v53 -= 2;
  }
}

uint64_t WebCore::SQLStatement::execute(WebCore::SQLStatement *this, WebCore::Database *a2)
{
  WebCore::Database *v2;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  sqlite3 *v27;
  const char *v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  sqlite3 *v44;
  const char *v45;
  WebCore::SQLiteDatabaseTracker *v46;
  signed int v47;
  int v48;
  sqlite3 *v49;
  const char *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  _DWORD **v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  sqlite3 *insert_rowid;
  sqlite3 *v71;
  const char *v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  WebCore::SQLiteDatabaseTracker *v81;
  unsigned int v82;
  int v83;
  WebCore::SQLiteDatabaseTracker *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  BOOL v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned __int8 *v99;
  WebCore::SQLiteDatabaseTracker *v101;
  int v102;
  WebCore::SQLiteDatabaseTracker *v103;
  void *v104;
  sqlite3 *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  sqlite3 *v109;
  const char *v110;
  WebCore::SQLiteDatabaseTracker *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  WTF *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  sqlite3_stmt *v130;
  sqlite3_stmt *pStmt;
  int v132;
  int v133;
  WTF::StringImpl *v134;
  int *v135;
  sqlite3_stmt **v136;
  int *v137;
  sqlite3_stmt **v138;
  int *v139;
  WTF::StringImpl **v140;

  v2 = a2;
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    if (*(_DWORD *)(v4 + 4) == 4)
    {
      *((_QWORD *)this + 9) = 0;
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v120 = *(WTF::StringImpl **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v120)
        {
          if (*(_DWORD *)v120 == 2)
            WTF::StringImpl::destroy(v120, a2);
          else
            *(_DWORD *)v120 -= 2;
        }
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    if (*((_QWORD *)this + 9))
      return 0;
  }
  *(_DWORD *)(*((_QWORD *)v2 + 20) + 4) = *((_DWORD *)this + 22);
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(unsigned int *)(v8 + 16);
    v10 = *(char **)(v8 + 8);
    LODWORD(v8) = *(_DWORD *)(v8 + 4);
    v11 = (v9 >> 2) & 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  WebCore::SQLiteDatabase::prepareStatementSlow((WebCore::Database *)((char *)v2 + 96), v10, v8 | (unint64_t)(v11 << 32), (uint64_t)&v130);
  if (v132)
  {
    if (v132 == 1)
    {
      v12 = v130;
      if ((_DWORD)v130 == 9)
      {
        WebCore::SQLError::create(1, (uint64_t)"could not prepare statement", 28, 9u, "interrupted", &v134);
        v14 = v134;
        v134 = 0;
        v15 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v14;
        if (v15)
        {
          do
          {
            v16 = __ldaxr((unsigned int *)v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unsigned int *)v15));
          if (!v17)
          {
            atomic_store(1u, (unsigned int *)v15);
            v122 = *(WTF::StringImpl **)(v15 + 8);
            *(_QWORD *)(v15 + 8) = 0;
            if (v122)
            {
              if (*(_DWORD *)v122 == 2)
                WTF::StringImpl::destroy(v122, v13);
              else
                *(_DWORD *)v122 -= 2;
            }
            WTF::fastFree((WTF *)v15, v13);
          }
          v18 = v134;
          v134 = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr((unsigned int *)v18);
              v20 = --v19 == 0;
            }
            while (__stlxr(v19, (unsigned int *)v18));
            goto LABEL_92;
          }
        }
      }
      else
      {
        v27 = (sqlite3 *)*((_QWORD *)v2 + 13);
        if (v27)
        {
          v28 = sqlite3_errmsg(v27);
        }
        else
        {
          v35 = *((_QWORD *)v2 + 19);
          if (v35)
            v28 = (const char *)(v35 + 16);
          else
            v28 = "database is not open";
        }
        WebCore::SQLError::create(5, (uint64_t)"could not prepare statement", 28, v12, v28, &v134);
        v36 = v134;
        v134 = 0;
        v37 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v36;
        if (v37)
        {
          do
          {
            v38 = __ldaxr((unsigned int *)v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, (unsigned int *)v37));
          if (!v39)
          {
            atomic_store(1u, (unsigned int *)v37);
            v124 = *(WTF::StringImpl **)(v37 + 8);
            *(_QWORD *)(v37 + 8) = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, v13);
              else
                *(_DWORD *)v124 -= 2;
            }
            WTF::fastFree((WTF *)v37, v13);
          }
          v18 = v134;
          v134 = 0;
          if (v18)
          {
            do
            {
              v40 = __ldaxr((unsigned int *)v18);
              v20 = --v40 == 0;
            }
            while (__stlxr(v40, (unsigned int *)v18));
            goto LABEL_92;
          }
        }
      }
      goto LABEL_93;
    }
    goto LABEL_238;
  }
  if (*((_DWORD *)this + 5) != sqlite3_bind_parameter_count(pStmt))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = 0x500000001;
    WTF::String::isolatedCopy();
    v31 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v29;
    if (v31)
    {
      do
      {
        v32 = __ldaxr((unsigned int *)v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, (unsigned int *)v31));
      if (!v33)
      {
        atomic_store(1u, (unsigned int *)v31);
        v123 = *(WTF::StringImpl **)(v31 + 8);
        *(_QWORD *)(v31 + 8) = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 2)
            WTF::StringImpl::destroy(v123, v30);
          else
            *(_DWORD *)v123 -= 2;
        }
        WTF::fastFree((WTF *)v31, v30);
      }
    }
    v34 = v134;
    v134 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v30);
      else
        *(_DWORD *)v34 -= 2;
    }
    goto LABEL_93;
  }
  v21 = 0;
  v22 = 0;
  while (v22 < *((unsigned int *)this + 5))
  {
    if (v132)
      goto LABEL_238;
    v23 = *((_QWORD *)this + 1) + v21;
    v133 = v22 + 1;
    v134 = (WTF::StringImpl *)&v130;
    v135 = &v133;
    v136 = &v130;
    v137 = &v133;
    v138 = &v130;
    v139 = &v133;
    v24 = *(unsigned int *)(v23 + 8);
    if ((_DWORD)v24 == -1)
      goto LABEL_238;
    v140 = &v134;
    v25 = ((uint64_t (*)(WTF::StringImpl ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15SQLiteStatement9bindValueEiRKNS_7variantIJDnNS6_6StringEdEEEE3__0JZNS9_9bindValueEiSE_E3__1ZNS9_9bindValueEiSE_E3__2EEEEEJRKNS0_6__implIJDnSB_dEEEEEEDcOT_DpOT0____fmatrix[v24])(&v140);
    v21 += 16;
    ++v22;
    if (v25)
    {
      v26 = v25;
      if (v25 == 13)
      {
        WebCore::SQLStatement::setFailureDueToQuota(this);
        goto LABEL_93;
      }
      v44 = (sqlite3 *)*((_QWORD *)v2 + 13);
      if (v44)
      {
        v45 = sqlite3_errmsg(v44);
      }
      else
      {
        v63 = *((_QWORD *)v2 + 19);
        if (v63)
          v45 = (const char *)(v63 + 16);
        else
          v45 = "database is not open";
      }
      WebCore::SQLError::create(1, (uint64_t)"could not bind value", 21, v26, v45, &v134);
      v64 = v134;
      v134 = 0;
      v65 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v64;
      if (!v65)
        goto LABEL_93;
      do
      {
        v66 = __ldaxr((unsigned int *)v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, (unsigned int *)v65));
      if (!v67)
      {
        atomic_store(1u, (unsigned int *)v65);
        v125 = *(WTF::StringImpl **)(v65 + 8);
        *(_QWORD *)(v65 + 8) = 0;
        if (v125)
        {
          if (*(_DWORD *)v125 == 2)
            WTF::StringImpl::destroy(v125, v13);
          else
            *(_DWORD *)v125 -= 2;
        }
        WTF::fastFree((WTF *)v65, v13);
      }
      v18 = v134;
      v134 = 0;
      if (!v18)
        goto LABEL_93;
      do
      {
        v68 = __ldaxr((unsigned int *)v18);
        v20 = --v68 == 0;
      }
      while (__stlxr(v68, (unsigned int *)v18));
LABEL_92:
      if (!v20)
      {
LABEL_93:
        v7 = 0;
        goto LABEL_94;
      }
      atomic_store(1u, (unsigned int *)v18);
      v121 = (WTF::StringImpl *)*((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 2)
          WTF::StringImpl::destroy(v121, v13);
        else
          *(_DWORD *)v121 -= 2;
      }
      v119 = v18;
LABEL_203:
      WTF::fastFree(v119, v13);
      goto LABEL_93;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  v41 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v41 = 1;
  *(_OWORD *)(v41 + 8) = 0u;
  *(_OWORD *)(v41 + 24) = 0u;
  *(_QWORD *)(v4 + 8) = v41;
  *(_BYTE *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  if (v132)
    goto LABEL_238;
  v42 = (unsigned __int8 *)v130 + 32;
  if (__ldaxr((unsigned __int8 *)v130 + 32))
  {
    __clrex();
LABEL_51:
    MEMORY[0x19AEA534C](v42);
    goto LABEL_52;
  }
  if (__stxr(1u, v42))
    goto LABEL_51;
LABEL_52:
  if (*((_BYTE *)v130 + 20) || (v46 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v46))
  {
    v47 = sqlite3_step(pStmt);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v46);
    v111 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
    v47 = (int)v111;
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v111);
  }
  v48 = __ldxr(v42);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_59;
  }
  if (__stlxr(0, v42))
LABEL_59:
    WTF::Lock::unlockSlow((WTF::Lock *)v42);
  if (v47 <= 99)
  {
    if (v47 == 13)
    {
      WebCore::SQLStatement::setFailureDueToQuota(this);
      do
LABEL_190:
        v117 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v117 - 1, (unsigned int *)v4));
      if (v117 != 1)
        goto LABEL_93;
      atomic_store(1u, (unsigned int *)v4);
      v118 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v118)
        WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(v118, v13);
      v119 = (WTF *)v4;
      goto LABEL_203;
    }
    if (v47 == 19)
    {
      v49 = (sqlite3 *)*((_QWORD *)v2 + 13);
      if (v49)
      {
        v50 = sqlite3_errmsg(v49);
      }
      else
      {
        v85 = *((_QWORD *)v2 + 19);
        if (v85)
          v50 = (const char *)(v85 + 16);
        else
          v50 = "database is not open";
      }
      WebCore::SQLError::create(6, (uint64_t)"could not execute statement due to a constaint failure", 55, 0x13u, v50, &v134);
      v86 = v134;
      v134 = 0;
      v87 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v86;
      if (!v87)
        goto LABEL_190;
      do
      {
        v88 = __ldaxr((unsigned int *)v87);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, (unsigned int *)v87));
      if (!v89)
      {
        atomic_store(1u, (unsigned int *)v87);
        v127 = *(WTF::StringImpl **)(v87 + 8);
        *(_QWORD *)(v87 + 8) = 0;
        if (v127)
        {
          if (*(_DWORD *)v127 == 2)
            WTF::StringImpl::destroy(v127, v13);
          else
            *(_DWORD *)v127 -= 2;
        }
        WTF::fastFree((WTF *)v87, v13);
      }
      v90 = v134;
      v134 = 0;
      if (!v90)
        goto LABEL_190;
      do
      {
        v91 = __ldaxr((unsigned int *)v90);
        v92 = --v91 == 0;
      }
      while (__stlxr(v91, (unsigned int *)v90));
      goto LABEL_189;
    }
    goto LABEL_103;
  }
  if (v47 != 101)
  {
    if (v47 != 100)
    {
LABEL_103:
      v71 = (sqlite3 *)*((_QWORD *)v2 + 13);
      if (v71)
      {
        v72 = sqlite3_errmsg(v71);
      }
      else
      {
        v93 = *((_QWORD *)v2 + 19);
        if (v93)
          v72 = (const char *)(v93 + 16);
        else
          v72 = "database is not open";
      }
      WebCore::SQLError::create(1, (uint64_t)"could not execute statement", 28, v47, v72, &v134);
      v94 = v134;
      v134 = 0;
      v95 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v94;
      if (!v95)
        goto LABEL_190;
      do
      {
        v96 = __ldaxr((unsigned int *)v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, (unsigned int *)v95));
      if (!v97)
      {
        atomic_store(1u, (unsigned int *)v95);
        v128 = *(WTF::StringImpl **)(v95 + 8);
        *(_QWORD *)(v95 + 8) = 0;
        if (v128)
        {
          if (*(_DWORD *)v128 == 2)
            WTF::StringImpl::destroy(v128, v13);
          else
            *(_DWORD *)v128 -= 2;
        }
        WTF::fastFree((WTF *)v95, v13);
      }
      v90 = v134;
      v134 = 0;
      if (!v90)
        goto LABEL_190;
      do
      {
        v98 = __ldaxr((unsigned int *)v90);
        v92 = --v98 == 0;
      }
      while (__stlxr(v98, (unsigned int *)v90));
      goto LABEL_189;
    }
    if (!v132)
    {
      v51 = sqlite3_data_count(pStmt);
      if (v51 > 0)
      {
        v52 = v51;
        v53 = 0;
        v54 = *(_QWORD *)(v4 + 8);
        do
        {
          if (v132)
            goto LABEL_238;
          WebCore::SQLiteStatement::columnName(&v130, v53, &v134);
          v56 = *(unsigned int *)(v54 + 20);
          if ((_DWORD)v56 == *(_DWORD *)(v54 + 16))
          {
            v60 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54 + 8, v56 + 1, (unint64_t)&v134);
            v56 = *(unsigned int *)(v54 + 20);
            v61 = *(_QWORD *)(v54 + 8);
            v62 = *v60;
            if (*v60)
              *v62 += 2;
            *(_QWORD *)(v61 + 8 * v56) = v62;
          }
          else
          {
            v57 = *(_QWORD *)(v54 + 8);
            v58 = v134;
            if (v134)
              *(_DWORD *)v134 += 2;
            *(_QWORD *)(v57 + 8 * v56) = v58;
          }
          *(_DWORD *)(v54 + 20) = v56 + 1;
          v59 = v134;
          v134 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v55);
            else
              *(_DWORD *)v59 -= 2;
          }
          ++v53;
        }
        while (v52 != v53);
        v73 = 0;
        while (1)
        {
          if (v132)
            goto LABEL_238;
          WebCore::SQLiteStatement::columnValue(&v130, v73, (uint64_t)&v134);
          v74 = *(unsigned int *)(v54 + 36);
          if ((_DWORD)v74 == *(_DWORD *)(v54 + 32))
            break;
          v76 = *(_QWORD *)(v54 + 24) + 16 * v74;
          *(_BYTE *)v76 = 0;
          *(_DWORD *)(v76 + 8) = -1;
          LODWORD(v77) = (_DWORD)v135;
          if ((_DWORD)v135 != -1)
          {
            ((void (*)(WTF::StringImpl ***, uint64_t, WTF::StringImpl **))off_1E336DE30[v135])(&v140, v76, &v134);
LABEL_111:
            *(_DWORD *)(v76 + 8) = v77;
LABEL_112:
            v78 = v135;
            ++*(_DWORD *)(v54 + 36);
            if ((_DWORD)v78 != -1)
              off_1E336DE18[v78]((char *)&v140, (char *)&v134);
            goto LABEL_115;
          }
          ++*(_DWORD *)(v54 + 36);
LABEL_115:
          if (++v73 == v52)
          {
            if (v132)
              goto LABEL_238;
            v79 = (unsigned __int8 *)v130 + 32;
            if (__ldaxr((unsigned __int8 *)v130 + 32))
            {
              __clrex();
LABEL_120:
              MEMORY[0x19AEA534C](v79);
              goto LABEL_121;
            }
            if (__stxr(1u, v79))
              goto LABEL_120;
LABEL_121:
            if (*((_BYTE *)v130 + 20)
              || (v81 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v81))
            {
              v82 = sqlite3_step(pStmt);
            }
            else
            {
              WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v81);
              v84 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
              v82 = v84;
              WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v84);
            }
            v83 = __ldxr(v79);
            if (v83 == 1)
            {
              if (!__stlxr(0, v79))
                goto LABEL_129;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v79);
LABEL_129:
            v73 = 0;
            if (v82 != 100)
              goto LABEL_166;
          }
        }
        v75 = WTF::Vector<std::variant<decltype(nullptr),WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54 + 24, v74 + 1, (unint64_t)&v134);
        v76 = *(_QWORD *)(v54 + 24) + 16 * *(unsigned int *)(v54 + 36);
        *(_BYTE *)v76 = 0;
        *(_DWORD *)(v76 + 8) = -1;
        v77 = *(unsigned int *)(v75 + 8);
        if ((_DWORD)v77 != -1)
        {
          ((void (*)(WTF::StringImpl ***, uint64_t, unint64_t))off_1E336DE30[v77])(&v140, v76, v75);
          goto LABEL_111;
        }
        goto LABEL_112;
      }
      while (1)
      {
        if (v132)
          goto LABEL_238;
        v99 = (unsigned __int8 *)v130 + 32;
        if (__ldaxr((unsigned __int8 *)v130 + 32))
          break;
        if (__stxr(1u, v99))
          goto LABEL_154;
LABEL_155:
        if (*((_BYTE *)v130 + 20)
          || (v101 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(pStmt), (_DWORD)v101))
        {
          v82 = sqlite3_step(pStmt);
        }
        else
        {
          WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v101);
          v103 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(pStmt);
          v82 = v103;
          WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v103);
        }
        v102 = __ldxr(v99);
        if (v102 == 1)
        {
          if (!__stlxr(0, v99))
            goto LABEL_163;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v99);
LABEL_163:
        if (v82 != 100)
        {
LABEL_166:
          if (v82 == 101)
            goto LABEL_167;
          v109 = (sqlite3 *)*((_QWORD *)v2 + 13);
          if (v109)
          {
            v110 = sqlite3_errmsg(v109);
          }
          else
          {
            v112 = *((_QWORD *)v2 + 19);
            if (v112)
              v110 = (const char *)(v112 + 16);
            else
              v110 = "database is not open";
          }
          WebCore::SQLError::create(1, (uint64_t)"could not iterate results", 26, v82, v110, &v134);
          v113 = v134;
          v134 = 0;
          v2 = (WebCore::Database *)*((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v113;
          if (!v2)
            goto LABEL_190;
          do
          {
            v114 = __ldaxr((unsigned int *)v2);
            v115 = v114 - 1;
          }
          while (__stlxr(v115, (unsigned int *)v2));
          if (!v115)
            goto LABEL_239;
          goto LABEL_187;
        }
      }
      __clrex();
LABEL_154:
      MEMORY[0x19AEA534C](v99);
      goto LABEL_155;
    }
LABEL_238:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_239:
    atomic_store(1u, (unsigned int *)v2);
    v129 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v129)
    {
      if (*(_DWORD *)v129 == 2)
        WTF::StringImpl::destroy(v129, v13);
      else
        *(_DWORD *)v129 -= 2;
    }
    WTF::fastFree(v2, v13);
LABEL_187:
    v90 = v134;
    v134 = 0;
    if (!v90)
      goto LABEL_190;
    do
    {
      v116 = __ldaxr((unsigned int *)v90);
      v92 = --v116 == 0;
    }
    while (__stlxr(v116, (unsigned int *)v90));
LABEL_189:
    if (v92)
    {
      atomic_store(1u, (unsigned int *)v90);
      v126 = (WTF::StringImpl *)*((_QWORD *)v90 + 1);
      *((_QWORD *)v90 + 1) = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, v13);
        else
          *(_DWORD *)v126 -= 2;
      }
      WTF::fastFree(v90, v13);
    }
    goto LABEL_190;
  }
  if ((*(_BYTE *)(*((_QWORD *)v2 + 20) + 8) & 2) != 0)
  {
    insert_rowid = (sqlite3 *)*((_QWORD *)v2 + 13);
    if (insert_rowid)
      insert_rowid = (sqlite3 *)sqlite3_last_insert_rowid(insert_rowid);
    *(_QWORD *)(v4 + 16) = insert_rowid;
    *(_BYTE *)(v4 + 24) = 1;
  }
LABEL_167:
  if (v132)
    goto LABEL_238;
  if (!sqlite3_stmt_readonly(pStmt))
  {
    v105 = (sqlite3 *)*((_QWORD *)v2 + 13);
    if (v105)
      LODWORD(v105) = sqlite3_changes(v105);
    *(_DWORD *)(v4 + 32) = (_DWORD)v105;
  }
  v106 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v4;
  if (v106)
  {
    do
      v107 = __ldaxr((unsigned int *)v106);
    while (__stlxr(v107 - 1, (unsigned int *)v106));
    v7 = 1;
    if (v107 == 1)
    {
      atomic_store(1u, (unsigned int *)v106);
      v108 = *(_QWORD *)(v106 + 8);
      *(_QWORD *)(v106 + 8) = 0;
      if (v108)
        WTF::RefCounted<WebCore::SQLResultSetRowList>::deref(v108, v104);
      WTF::fastFree((WTF *)v106, v104);
    }
  }
  else
  {
    v7 = 1;
  }
LABEL_94:
  if (v132 != -1)
    ((void (*)(WTF::StringImpl **, sqlite3_stmt **))off_1E336DDD8[v132])(&v134, &v130);
  return v7;
}

WTF::StringImpl *WebCore::SQLStatement::setFailureDueToQuota(WebCore::SQLStatement *this)
{
  _QWORD *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = 0x400000001;
  WTF::String::isolatedCopy();
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v2;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v9 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v9;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  result = v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::SQLStatement::setVersionMismatchedError(WebCore::SQLStatement *this)
{
  _QWORD *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = 0x200000001;
  WTF::String::isolatedCopy();
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v2;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(WTF::StringImpl **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v9 = v4;
          WTF::StringImpl::destroy(v8, v3);
          v4 = v9;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      WTF::fastFree((WTF *)v4, v3);
    }
  }
  result = v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

double WebCore::SQLTransaction::SQLTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double result;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 8) = 0x100000001;
  *(_QWORD *)a1 = off_1E336DCD0;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(v7 + 8);
  v9 = v8 + 192;
  *(_BYTE *)(a1 + 32) = 0;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v10;
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v8 + 466);
    if (*(_BYTE *)(v8 + 466))
    {
      if (v11 == 1 || v11 == 2)
        ++*(_DWORD *)(v8 + 504);
    }
    else
    {
      *(_DWORD *)(v8 + 24) += 2;
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a1 + 48) = v9;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v13 = v12 + 192;
  *(_BYTE *)(a1 + 56) = 0;
  v14 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 64) = v14;
  if (v14)
  {
    v15 = *(unsigned __int8 *)(v12 + 466);
    if (*(_BYTE *)(v12 + 466))
    {
      if (v15 == 1 || v15 == 2)
        ++*(_DWORD *)(v12 + 504);
    }
    else
    {
      *(_DWORD *)(v12 + 24) += 2;
    }
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a1 + 72) = v13;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  *(_BYTE *)(a1 + 80) = 0;
  v17 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 88) = v17;
  if (v17)
  {
    v17 = v16 + 192;
    v18 = *(unsigned __int8 *)(v16 + 466);
    if (*(_BYTE *)(v16 + 466))
    {
      if (v18 == 1 || v18 == 2)
        ++*(_DWORD *)(v16 + 504);
    }
    else
    {
      *(_DWORD *)(v16 + 24) += 2;
    }
  }
  *(_QWORD *)(a1 + 96) = v17;
  v19 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 104) = v19;
  *(_QWORD *)(a1 + 112) = WebCore::SQLTransaction::acquireLock;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 143) = 0;
  *(_BYTE *)(a1 + 147) = a7;
  *(_WORD *)(a1 + 148) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = &off_1E336E030;
  *(_QWORD *)(a1 + 224) = a1;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(a1 + 216) = 0x200000001;
  return result;
}

WTF::StringImpl *WebCore::SQLTransaction::acquireLock(WebCore::SQLTransaction *this)
{
  return WebCore::SQLTransactionCoordinator::acquireLock(*(WebCore::SQLTransactionCoordinator **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 32) + 88), this);
}

void WebCore::SQLTransaction::~SQLTransaction(WebCore::SQLTransaction *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore::SQLiteTransaction *v6;
  WTF *v7;
  void *v8;
  WebCore::SQLStatement *v9;
  WTF *v10;
  void *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  void *v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)this = off_1E336DCD0;
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = &off_1E336E030;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v42 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          v46 = v3;
          WTF::StringImpl::destroy(v42, a2);
          v3 = v46;
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WebCore::SQLiteTransaction *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    WebCore::SQLiteTransaction::~SQLiteTransaction(v6);
    WTF::fastFree(v7, v8);
  }
  v9 = (WebCore::SQLStatement *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v9)
  {
    WebCore::SQLStatement::~SQLStatement(v9, a2);
    WTF::fastFree(v10, v11);
  }
  WTF::Deque<std::unique_ptr<WebCore::SQLStatement>,0ul>::destroyAll((WebCore::SQLTransaction *)((char *)this + 152), a2);
  v13 = (WTF *)*((_QWORD *)this + 21);
  if (v13)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v13, v12);
  }
  v14 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v43 = *(WTF::StringImpl **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          v47 = v14;
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v12);
          v14 = v47;
        }
        else
        {
          *(_DWORD *)v43 -= 2;
        }
      }
      WTF::fastFree((WTF *)v14, v12);
    }
  }
  v17 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  WebCore::SQLCallbackWrapper<WebCore::SQLTransactionErrorCallback>::clear((uint64_t)this + 80);
  v22 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v22)
  {
    v23 = *(unsigned __int8 *)(v22 + 274);
    if (*(_BYTE *)(v22 + 274))
    {
      if (v23 == 1)
      {
        if (*(_DWORD *)(v22 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
        else
          --*(_DWORD *)(v22 + 312);
      }
      else if (v23 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v22 + 312));
      }
    }
    else if (*(_DWORD *)(v22 - 168) == 2)
    {
      if ((*(_WORD *)(v22 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v22 - 192), v21);
    }
    else
    {
      *(_DWORD *)(v22 - 168) -= 2;
    }
  }
  v24 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v24)
  {
    v25 = v24 + 4;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v24 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
    }
  }
  WebCore::SQLCallbackWrapper<WebCore::VoidCallback>::clear((uint64_t)this + 56);
  v29 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v29)
  {
    v30 = *(unsigned __int8 *)(v29 + 274);
    if (*(_BYTE *)(v29 + 274))
    {
      if (v30 == 1)
      {
        if (*(_DWORD *)(v29 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        else
          --*(_DWORD *)(v29 + 312);
      }
      else if (v30 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v29 + 312));
      }
    }
    else if (*(_DWORD *)(v29 - 168) == 2)
    {
      if ((*(_WORD *)(v29 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v29 - 192), v28);
    }
    else
    {
      *(_DWORD *)(v29 - 168) -= 2;
    }
  }
  v31 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v31)
  {
    if (v31[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
    else
      --v31[4];
  }
  WebCore::SQLCallbackWrapper<WebCore::SQLTransactionCallback>::clear((uint64_t)this + 32);
  v33 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v33)
  {
    v34 = *(unsigned __int8 *)(v33 + 274);
    if (*(_BYTE *)(v33 + 274))
    {
      if (v34 == 1)
      {
        if (*(_DWORD *)(v33 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
        else
          --*(_DWORD *)(v33 + 312);
      }
      else if (v34 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v33 + 312));
      }
    }
    else if (*(_DWORD *)(v33 - 168) == 2)
    {
      if ((*(_WORD *)(v33 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v33 - 192), v32);
    }
    else
    {
      *(_DWORD *)(v33 - 168) -= 2;
    }
  }
  v35 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v35)
  {
    v36 = v35 + 4;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v35 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 16))(v35);
    }
  }
  v39 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v39)
  {
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      WebCore::Database::~Database((WebCore::Database *)v39);
      WTF::fastFree(v44, v45);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::SQLTransaction::~SQLTransaction(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::SQLTransaction::executeSql@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  _QWORD *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  int v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  char v58;
  WTF::StringImpl *v59;

  if (!*(_BYTE *)(result + 128) || (v7 = result, v8 = *(_QWORD *)(result + 24), !*(_BYTE *)(v8 + 92)))
  {
    *(_BYTE *)a6 = 8;
    *(_QWORD *)(a6 + 8) = 0;
    *(_BYTE *)(a6 + 16) = 1;
    return result;
  }
  if (WebCore::DatabaseContext::allowDatabaseAccess(*(WebCore::DatabaseContext **)(v8 + 32), a2))
    v12 = 2 * *(unsigned __int8 *)(v7 + 147);
  else
    v12 = 4;
  if (*((_BYTE *)a3 + 16))
  {
    v13 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v13)
    {
      if (v13 >> 28)
      {
        __break(0xC471u);
LABEL_78:
        JUMPOUT(0x1955ACF50);
      }
      v14 = WTF::fastMalloc((WTF *)(16 * v13));
      v15 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v15)
      {
        v55 = a4;
        v56 = v12;
        v57 = a6;
        v16 = 0;
        v17 = *a3;
        v18 = 16 * v15;
        do
        {
          v19 = v14 + v16;
          *(_BYTE *)v19 = 0;
          *(_DWORD *)(v19 + 8) = -1;
          v20 = *(unsigned int *)(v17 + v16 + 8);
          if ((_DWORD)v20 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E336DE30[v20])(&v58, v14 + v16);
            *(_DWORD *)(v19 + 8) = v20;
          }
          v16 += 16;
        }
        while (v18 != v16);
        a6 = v57;
        v12 = v56;
        a4 = v55;
      }
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v14 = 0;
    LODWORD(v13) = 0;
  }
  v21 = WTF::fastMalloc((WTF *)0x60);
  v22 = *(_QWORD *)(v7 + 24);
  result = WTF::String::isolatedCopy();
  *(_QWORD *)(v21 + 8) = v14;
  *(_DWORD *)(v21 + 16) = v13;
  *(_DWORD *)(v21 + 20) = v13;
  v23 = *(_QWORD *)(v22 + 8);
  v24 = v23 + 192;
  *(_BYTE *)(v21 + 24) = 0;
  v25 = *a4;
  *a4 = 0;
  *(_QWORD *)(v21 + 32) = v25;
  if (v25)
  {
    v26 = *(unsigned __int8 *)(v23 + 466);
    if (*(_BYTE *)(v23 + 466))
    {
      if (v26 == 1 || v26 == 2)
        ++*(_DWORD *)(v23 + 504);
    }
    else
    {
      *(_DWORD *)(v23 + 24) += 2;
    }
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(v21 + 40) = v24;
  v27 = *(_QWORD *)(v22 + 8);
  *(_BYTE *)(v21 + 48) = 0;
  v28 = *a5;
  *a5 = 0;
  *(_QWORD *)(v21 + 56) = v28;
  if (v28)
  {
    v28 = v27 + 192;
    v29 = *(unsigned __int8 *)(v27 + 466);
    if (*(_BYTE *)(v27 + 466))
    {
      if (v29 == 1 || v29 == 2)
        ++*(_DWORD *)(v27 + 504);
    }
    else
    {
      *(_DWORD *)(v27 + 24) += 2;
    }
  }
  *(_QWORD *)(v21 + 72) = 0;
  v30 = (uint64_t *)(v21 + 72);
  *(_QWORD *)(v21 + 64) = v28;
  *(_QWORD *)(v21 + 80) = 0;
  *(_DWORD *)(v21 + 88) = v12;
  if (*(_BYTE *)(*(_QWORD *)(v7 + 24) + 40))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v31 = 1;
    WTF::String::isolatedCopy();
    v33 = *v30;
    *v30 = (uint64_t)v31;
    if (v33)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v33));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)v33);
        v54 = *(WTF::StringImpl **)(v33 + 8);
        *(_QWORD *)(v33 + 8) = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v32);
          else
            *(_DWORD *)v54 -= 2;
        }
        WTF::fastFree((WTF *)v33, v32);
      }
    }
    result = (uint64_t)v59;
    v59 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v36 = (unsigned __int8 *)(v7 + 149);
  if (__ldaxr((unsigned __int8 *)(v7 + 149)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v36))
  {
    goto LABEL_36;
  }
  result = MEMORY[0x19AEA534C](v7 + 149);
LABEL_36:
  v38 = *(_QWORD *)(v7 + 152);
  v39 = *(_QWORD *)(v7 + 160);
  if (v38)
  {
    if (v39 + 1 != v38)
      goto LABEL_53;
    LODWORD(v40) = *(_DWORD *)(v7 + 176);
  }
  else
  {
    v40 = *(unsigned int *)(v7 + 176);
    if (v39)
    {
      if (v39 != v40 - 1)
        goto LABEL_53;
    }
    else if ((_DWORD)v40)
    {
      goto LABEL_53;
    }
  }
  v41 = v40;
  v42 = ((unint64_t)v40 >> 2) + v40;
  if (v42 <= 0xF)
    v42 = 15;
  if (v42 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  v43 = *(char **)(v7 + 168);
  v44 = v42 + 1;
  v45 = (char *)WTF::fastMalloc((WTF *)(8 * (v42 + 1)));
  *(_DWORD *)(v7 + 176) = v44;
  *(_QWORD *)(v7 + 168) = v45;
  v47 = *(_QWORD *)(v7 + 152);
  v46 = *(_QWORD *)(v7 + 160);
  if (v47 <= v46)
  {
    result = (uint64_t)memcpy(&v45[8 * v47], &v43[8 * v47], 8 * v46 - 8 * v47);
    if (!v43)
      goto LABEL_53;
  }
  else
  {
    memcpy(v45, v43, 8 * v46);
    v48 = *(_QWORD *)(v7 + 152);
    v49 = v48 - v41 + *(unsigned int *)(v7 + 176);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v7 + 168) + 8 * v49), &v43[8 * v48], 8 * v41 - 8 * v48);
    *(_QWORD *)(v7 + 152) = v49;
    if (!v43)
      goto LABEL_53;
  }
  if (*(char **)(v7 + 168) == v43)
  {
    *(_QWORD *)(v7 + 168) = 0;
    *(_DWORD *)(v7 + 176) = 0;
  }
  result = WTF::fastFree((WTF *)v43, v50);
LABEL_53:
  v51 = *(_QWORD *)(v7 + 160);
  *(_QWORD *)(*(_QWORD *)(v7 + 168) + 8 * v51) = v21;
  if (v51 == *(unsigned int *)(v7 + 176) - 1)
    v52 = 0;
  else
    v52 = v51 + 1;
  *(_QWORD *)(v7 + 160) = v52;
  v53 = __ldxr(v36);
  if (v53 == 1)
  {
    if (!__stlxr(0, v36))
      goto LABEL_61;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 149));
LABEL_61:
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  return result;
}

unsigned __int8 *WebCore::SQLTransaction::checkAndHandleClosedDatabase(unsigned __int8 *this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  void *v5;
  WTF *v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  WTF *v17;
  void *v18;
  int v19;
  _QWORD *v20;

  if (!*(_BYTE *)(*((_QWORD *)this + 3) + 92))
  {
    v2 = (uint64_t)this;
    v3 = this + 149;
    if (__ldaxr(this + 149))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](this + 149);
LABEL_6:
    WTF::Deque<std::unique_ptr<WebCore::SQLStatement>,0ul>::destroyAll((WebCore::SQLStatement *)(v2 + 152), a2);
    *(_QWORD *)(v2 + 152) = 0;
    *(_QWORD *)(v2 + 160) = 0;
    v6 = *(WTF **)(v2 + 168);
    if (v6)
    {
      *(_QWORD *)(v2 + 168) = 0;
      *(_DWORD *)(v2 + 176) = 0;
      WTF::fastFree(v6, v5);
    }
    *(_QWORD *)(v2 + 112) = 0;
    *(_QWORD *)(v2 + 120) = 0;
    v7 = (unsigned __int8 *)(v2 + 80);
    if (__ldaxr((unsigned __int8 *)(v2 + 80)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 80);
LABEL_12:
    v9 = *(_QWORD *)(v2 + 96);
    *(_QWORD *)(v2 + 96) = 0;
    if (v9)
    {
      v10 = *(unsigned __int8 *)(v9 + 274);
      if (*(_BYTE *)(v9 + 274))
      {
        if (v10 == 1)
        {
          if (*(_DWORD *)(v9 + 312) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          else
            --*(_DWORD *)(v9 + 312);
        }
        else if (v10 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v9 + 312));
        }
      }
      else if (*(_DWORD *)(v9 - 168) == 2)
      {
        if ((*(_WORD *)(v9 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v9 - 192), v5);
      }
      else
      {
        *(_DWORD *)(v9 - 168) -= 2;
      }
    }
    v11 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    v12 = __ldxr(v7);
    if (v12 == 1)
    {
      if (!__stlxr(0, v7))
      {
        if (!v11)
          goto LABEL_24;
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 80));
    if (!v11)
      goto LABEL_24;
LABEL_22:
    v13 = WebCore::Document::eventLoop(*(WebCore::Document **)(*(_QWORD *)(v2 + 24) + 8), (WTF::StringImpl *)v5);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = &off_1E336DF40;
    v14[1] = v11;
    v20 = v14;
    WebCore::EventLoopTaskGroup::queueTask(v13, 11, (uint64_t *)&v20);
    v15 = (uint64_t)v20;
    v20 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_24:
    WebCore::SQLCallbackWrapper<WebCore::SQLTransactionCallback>::clear(v2 + 32);
    WebCore::SQLCallbackWrapper<WebCore::VoidCallback>::clear(v2 + 56);
    WebCore::SQLCallbackWrapper<WebCore::SQLTransactionErrorCallback>::clear(v2 + 80);
    v16 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 32) + 32) + 8);
    this = *(unsigned __int8 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!this)
      this = (unsigned __int8 *)WTF::Thread::initializeCurrentTLS(0);
    if (v16 != this)
    {
LABEL_35:
      v19 = __ldxr(v3);
      if (v19 == 1)
      {
        if (!__stlxr(0, v3))
          return this;
      }
      else
      {
        __clrex();
      }
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    }
    this = *(unsigned __int8 **)(v2 + 192);
    if (this)
    {
      if (this[8])
      {
        this[8] = 0;
        *(_BYTE *)(*(_QWORD *)this + 20) = 0;
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)this);
        this = *(unsigned __int8 **)(v2 + 192);
        *(_QWORD *)(v2 + 192) = 0;
        if (!this)
          goto LABEL_33;
      }
      else
      {
        *(_QWORD *)(v2 + 192) = 0;
      }
      WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)this);
      this = (unsigned __int8 *)WTF::fastFree(v17, v18);
    }
LABEL_33:
    if (*(_BYTE *)(v2 + 146))
      this = (unsigned __int8 *)WebCore::SQLTransactionCoordinator::releaseLock(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 32) + 32) + 88), (WebCore::SQLTransaction *)v2);
    goto LABEL_35;
  }
  return this;
}

uint64_t (*WebCore::SQLTransaction::stateFunctionFor(uint64_t a1, int a2))(WebCore::SQLTransaction *__hidden this)
{
  return WebCore::SQLTransaction::stateFunctionFor(WebCore::SQLTransactionState)::stateFunctions[2 * a2];
}

uint64_t WebCore::SQLTransaction::deliverTransactionCallback(WebCore::SQLTransaction *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  int v8;
  int v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v3 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 32);
LABEL_5:
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  v8 = __ldxr(v3);
  if (v8 != 1)
  {
    __clrex();
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      goto LABEL_12;
LABEL_22:
    *((_DWORD *)this + 55) = 4;
    return WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(*((_QWORD *)this + 28) + 24), *((WebCore::SQLTransaction **)this + 28));
  }
  if (__stlxr(0, v3))
    goto LABEL_21;
  if (!v7)
    goto LABEL_22;
LABEL_12:
  *((_BYTE *)this + 128) = 1;
  v9 = (*(uint64_t (**)(unsigned int *, WebCore::SQLTransaction *))(*(_QWORD *)v7 + 40))(v7, this);
  *((_BYTE *)this + 128) = 0;
  if (v9 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = 1;
    WTF::String::isolatedCopy();
    v12 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v10;
    if (v12)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v19 = *(WTF::StringImpl **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v11);
          else
            *(_DWORD *)v19 -= 2;
        }
        WTF::fastFree((WTF *)v12, v11);
      }
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v11);
      else
        *(_DWORD *)v20 -= 2;
    }
    result = WebCore::SQLTransaction::deliverTransactionErrorCallback(this, v11);
  }
  else
  {
    *((_DWORD *)this + 55) = 4;
    result = WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(*((_QWORD *)this + 28) + 24), *((WebCore::SQLTransaction **)this + 28));
  }
  v16 = v7 + 4;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v7 + 4);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
  }
  return result;
}

uint64_t WebCore::SQLTransaction::deliverTransactionErrorCallback(WebCore::SQLTransaction *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;

  v3 = (unsigned __int8 *)this + 80;
  if (__ldaxr((unsigned __int8 *)this + 80))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 80);
LABEL_5:
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  v8 = __ldxr(v3);
  if (v8 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v7)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (__stlxr(0, v3))
    goto LABEL_14;
  if (!v7)
    goto LABEL_19;
LABEL_15:
  v9 = WebCore::Document::eventLoop(*(WebCore::Document **)(*((_QWORD *)this + 3) + 8), (WTF::StringImpl *)a2);
  v10 = (unsigned int *)*((_QWORD *)this + 17);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E336DFE0;
  v12[1] = v7;
  v12[2] = v10;
  v15 = v12;
  WebCore::EventLoopTaskGroup::queueTask(v9, 11, (uint64_t *)&v15);
  v13 = (uint64_t)v15;
  v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_19:
  WebCore::SQLCallbackWrapper<WebCore::SQLTransactionCallback>::clear((uint64_t)this + 32);
  WebCore::SQLCallbackWrapper<WebCore::VoidCallback>::clear((uint64_t)this + 56);
  WebCore::SQLCallbackWrapper<WebCore::SQLTransactionErrorCallback>::clear((uint64_t)v3);
  *((_DWORD *)this + 55) = 7;
  return WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(*((_QWORD *)this + 28) + 24), *((WebCore::SQLTransaction **)this + 28));
}

uint64_t WebCore::SQLTransaction::deliverStatementCallback(WebCore::SQLTransaction *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  int v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  uint64_t (*v30)();
  WTF::StringImpl *v32;
  WebCore::SQLTransaction *v33;
  WTF::StringImpl *v34;

  *((_BYTE *)this + 128) = 1;
  v3 = *((_QWORD *)this + 23);
  if (*(_QWORD *)(v3 + 72))
  {
    v4 = (unsigned __int8 *)(v3 + 48);
    if (__ldaxr((unsigned __int8 *)(v3 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v3 + 48);
LABEL_8:
    v8 = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v3 + 64) = 0;
    if (v8)
    {
      v9 = *(unsigned __int8 *)(v8 + 274);
      if (*(_BYTE *)(v8 + 274))
      {
        if (v9 == 1)
        {
          if (*(_DWORD *)(v8 + 312) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
          else
            --*(_DWORD *)(v8 + 312);
        }
        else if (v9 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v8 + 312));
        }
      }
      else if (*(_DWORD *)(v8 - 168) == 2)
      {
        if ((*(_WORD *)(v8 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 192), a2);
      }
      else
      {
        *(_DWORD *)(v8 - 168) -= 2;
      }
    }
    v10 = *(unsigned int **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = 0;
    v11 = __ldxr(v4);
    if (v11 == 1)
    {
      if (!__stlxr(0, v4))
      {
        if (!v10)
          goto LABEL_65;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 48));
    if (!v10)
      goto LABEL_65;
LABEL_18:
    (*(void (**)(WTF::StringImpl **__return_ptr, unsigned int *, WebCore::SQLTransaction *, _QWORD))(*(_QWORD *)v10 + 40))(&v34, v10, this, *(_QWORD *)(v3 + 72));
    if (HIDWORD(v34))
    {
      if (HIDWORD(v34) == 1)
      {
        if (((_DWORD)v34 - 1) < 2)
        {
          LOBYTE(v3) = 1;
LABEL_23:
          v12 = 0;
LABEL_24:
          v13 = v10 + 4;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (v15)
          {
            if ((v12 & 1) != 0)
              goto LABEL_65;
            goto LABEL_44;
          }
          atomic_store(1u, v10 + 4);
          (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
          if ((v12 & 1) != 0)
          {
LABEL_65:
            *((_BYTE *)this + 128) = 0;
            goto LABEL_66;
          }
LABEL_44:
          *((_BYTE *)this + 128) = 0;
          if ((v3 & 1) == 0)
          {
LABEL_66:
            *((_DWORD *)this + 55) = 4;
            return WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(*((_QWORD *)this + 28) + 24), *((WebCore::SQLTransaction **)this + 28));
          }
          goto LABEL_45;
        }
        if ((_DWORD)v34)
        {
          v12 = 1;
          goto LABEL_24;
        }
      }
      v33 = (WebCore::SQLTransaction *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::SQLTransaction::deliverQuotaIncreaseCallback(v33);
    }
    LOBYTE(v3) = (_BYTE)v34 != 0;
    goto LABEL_23;
  }
  v6 = (unsigned __int8 *)(v3 + 24);
  if (__ldaxr((unsigned __int8 *)(v3 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_31;
  }
  MEMORY[0x19AEA534C](v3 + 24);
LABEL_31:
  v16 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  if (v16)
  {
    v17 = *(unsigned __int8 *)(v16 + 274);
    if (*(_BYTE *)(v16 + 274))
    {
      if (v17 == 1)
      {
        if (*(_DWORD *)(v16 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
        else
          --*(_DWORD *)(v16 + 312);
      }
      else if (v17 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v16 + 312));
      }
    }
    else if (*(_DWORD *)(v16 - 168) == 2)
    {
      if ((*(_WORD *)(v16 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v16 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v16 - 168) -= 2;
    }
  }
  v18 = *(unsigned int **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  v19 = __ldxr(v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, v6))
    {
      if (!v18)
        goto LABEL_65;
      goto LABEL_41;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 24));
  if (!v18)
    goto LABEL_65;
LABEL_41:
  v20 = v18 + 4;
  v21 = (*(uint64_t (**)(unsigned int *, WebCore::SQLTransaction *, _QWORD))(*(_QWORD *)v18 + 40))(v18, this, *(_QWORD *)(v3 + 80));
  LOBYTE(v3) = v21 == 1;
  do
  {
    v22 = __ldaxr(v20);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v20));
  if (v23)
    goto LABEL_44;
  atomic_store(1u, v18 + 4);
  (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
  *((_BYTE *)this + 128) = 0;
  if (v21 != 1)
    goto LABEL_66;
LABEL_45:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = 1;
  WTF::String::isolatedCopy();
  v26 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v24;
  if (v26)
  {
    do
    {
      v27 = __ldaxr((unsigned int *)v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v26));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)v26);
      v32 = *(WTF::StringImpl **)(v26 + 8);
      *(_QWORD *)(v26 + 8) = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v25);
        else
          *(_DWORD *)v32 -= 2;
      }
      WTF::fastFree((WTF *)v26, v25);
    }
  }
  v29 = v34;
  v34 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v25);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_QWORD *)this + 11))
    v30 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
  else
    v30 = 0;
  if (v30)
    return WebCore::SQLTransaction::deliverTransactionErrorCallback(this, v25);
  *((_DWORD *)this + 55) = 7;
  return WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(*((_QWORD *)this + 28) + 24), *((WebCore::SQLTransaction **)this + 28));
}

uint64_t WebCore::SQLTransaction::deliverQuotaIncreaseCallback(WebCore::SQLTransaction *this)
{
  *((_BYTE *)this + 144) = WebCore::Database::didExceedQuota(*((WebCore::Database **)this + 3));
  *((_DWORD *)this + 55) = 4;
  return WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(*((_QWORD *)this + 28) + 24), *((WebCore::SQLTransaction **)this + 28));
}

uint64_t WebCore::SQLTransaction::deliverSuccessCallback(WebCore::SQLTransaction *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;

  v3 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 56);
LABEL_5:
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v6 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  v8 = __ldxr(v3);
  if (v8 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v7)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (__stlxr(0, v3))
    goto LABEL_14;
  if (!v7)
    goto LABEL_17;
LABEL_15:
  v9 = WebCore::Document::eventLoop(*(WebCore::Document **)(*((_QWORD *)this + 3) + 8), (WTF::StringImpl *)a2);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E336E008;
  v10[1] = v7;
  v13 = v10;
  WebCore::EventLoopTaskGroup::queueTask(v9, 11, (uint64_t *)&v13);
  v11 = (uint64_t)v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_17:
  WebCore::SQLCallbackWrapper<WebCore::SQLTransactionCallback>::clear((uint64_t)this + 32);
  WebCore::SQLCallbackWrapper<WebCore::VoidCallback>::clear((uint64_t)v3);
  WebCore::SQLCallbackWrapper<WebCore::SQLTransactionErrorCallback>::clear((uint64_t)this + 80);
  *((_DWORD *)this + 55) = 6;
  return WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(*((_QWORD *)this + 28) + 24), *((WebCore::SQLTransaction **)this + 28));
}

uint64_t WebCore::SQLCallbackWrapper<WebCore::SQLTransactionCallback>::clear(uint64_t result)
{
  uint64_t v1;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;

  v1 = result;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(v1 + 8))
    goto LABEL_19;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 88))(*(_QWORD *)(v1 + 16));
  if (!(_DWORD)result)
  {
    v10 = *(_QWORD *)(v1 + 8);
    v11 = *(_QWORD *)(v1 + 16);
    v9 = 1;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    goto LABEL_20;
  }
  v4 = *(unsigned int **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 4;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  result = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (!result)
    goto LABEL_19;
  v8 = *(unsigned __int8 *)(result + 274);
  if (!*(_BYTE *)(result + 274))
  {
    if (*(_DWORD *)(result - 168) != 2)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      *(_DWORD *)(result - 168) -= 2;
      goto LABEL_20;
    }
    if ((*(_WORD *)(result - 162) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(result - 192), v3);
    goto LABEL_19;
  }
  if (v8 != 1)
  {
    if (v8 == 2)
      result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(result + 312));
    goto LABEL_19;
  }
  if (*(_DWORD *)(result + 312) == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
LABEL_19:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_20;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  --*(_DWORD *)(result + 312);
LABEL_20:
  v12 = __ldxr((unsigned __int8 *)v1);
  if (v12 != 1)
  {
    __clrex();
LABEL_25:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v9)
      return result;
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_25;
  if (!v9)
    return result;
LABEL_26:
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E336DF68;
  v13[1] = v10;
  v13[2] = v11;
  v14 = v13;
  v15 = 1;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v11 + 336))(v11, &v14);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::SQLCallbackWrapper<WebCore::VoidCallback>::clear(uint64_t result)
{
  uint64_t v1;
  void *v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;

  v1 = result;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(v1 + 8))
    goto LABEL_18;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 88))(*(_QWORD *)(v1 + 16));
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(v1 + 8);
    v8 = *(_QWORD *)(v1 + 16);
    v6 = 1;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    goto LABEL_19;
  }
  v4 = *(_DWORD **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  result = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (!result)
    goto LABEL_18;
  v5 = *(unsigned __int8 *)(result + 274);
  if (!*(_BYTE *)(result + 274))
  {
    if (*(_DWORD *)(result - 168) != 2)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      *(_DWORD *)(result - 168) -= 2;
      goto LABEL_19;
    }
    if ((*(_WORD *)(result - 162) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(result - 192), v3);
    goto LABEL_18;
  }
  if (v5 != 1)
  {
    if (v5 == 2)
      result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(result + 312));
    goto LABEL_18;
  }
  if (*(_DWORD *)(result + 312) == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
LABEL_18:
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_19;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  --*(_DWORD *)(result + 312);
LABEL_19:
  v9 = __ldxr((unsigned __int8 *)v1);
  if (v9 != 1)
  {
    __clrex();
LABEL_24:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v6)
      return result;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_24;
  if (!v6)
    return result;
LABEL_25:
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E336DF90;
  v10[1] = v7;
  v10[2] = v8;
  v11 = v10;
  v12 = 1;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 336))(v8, &v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::SQLCallbackWrapper<WebCore::SQLTransactionErrorCallback>::clear(uint64_t result)
{
  uint64_t v1;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;

  v1 = result;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(v1 + 8))
    goto LABEL_19;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 88))(*(_QWORD *)(v1 + 16));
  if (!(_DWORD)result)
  {
    v10 = *(_QWORD *)(v1 + 8);
    v11 = *(_QWORD *)(v1 + 16);
    v9 = 1;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    goto LABEL_20;
  }
  v4 = *(unsigned int **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 4;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  result = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (!result)
    goto LABEL_19;
  v8 = *(unsigned __int8 *)(result + 274);
  if (!*(_BYTE *)(result + 274))
  {
    if (*(_DWORD *)(result - 168) != 2)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      *(_DWORD *)(result - 168) -= 2;
      goto LABEL_20;
    }
    if ((*(_WORD *)(result - 162) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(result - 192), v3);
    goto LABEL_19;
  }
  if (v8 != 1)
  {
    if (v8 == 2)
      result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(result + 312));
    goto LABEL_19;
  }
  if (*(_DWORD *)(result + 312) == 1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
LABEL_19:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    goto LABEL_20;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  --*(_DWORD *)(result + 312);
LABEL_20:
  v12 = __ldxr((unsigned __int8 *)v1);
  if (v12 != 1)
  {
    __clrex();
LABEL_25:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v9)
      return result;
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_25;
  if (!v9)
    return result;
LABEL_26:
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E336DFB8;
  v13[1] = v10;
  v13[2] = v11;
  v14 = v13;
  v15 = 1;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v11 + 336))(v11, &v14);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::SQLTransaction::openTransactionAndPreflight(WebCore::SQLTransaction *this)
{
  WebCore::SQLTransaction *v1;
  uint64_t v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t (*v9)();
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  int i;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v59;
  int v60;
  sqlite3 **v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  WebCore::SQLiteTransaction *v68;
  WTF *v69;
  void *v70;
  void *v71;
  const WTF::StringImpl *v72;
  int v73;
  uint64_t v74;
  uint64_t (*v75)();
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  sqlite3 *v81;
  unsigned int v82;
  sqlite3 *v83;
  const char *v84;
  uint64_t v85;
  sqlite3 *v86;
  unsigned int v87;
  sqlite3 *v88;
  const char *v89;
  WebCore::SQLiteTransaction *v90;
  WTF *v91;
  void *v92;
  unsigned int *v93;
  WTF::StringImpl *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  uint64_t (*v104)();
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  WTF::StringImpl *v116;
  unsigned int v117;
  unsigned int v118;
  WebCore::SQLiteTransaction *v119;
  WTF *v120;
  void *v121;
  uint64_t (*v122)();
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  WTF::StringImpl *v132;
  unsigned int v133;
  unsigned int v134;
  WebCore::SQLiteTransaction *v135;
  WTF *v136;
  void *v137;
  uint64_t (*v138)();
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158[3];
  int v159;
  uint64_t v160;

  v1 = this;
  v160 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v2 + 40))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = 1;
    WTF::String::isolatedCopy();
    v5 = *((_QWORD *)v1 + 17);
    *((_QWORD *)v1 + 17) = v3;
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v146 = *(WTF::StringImpl **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 2)
            WTF::StringImpl::destroy(v146, v4);
          else
            *(_DWORD *)v146 -= 2;
        }
        WTF::fastFree((WTF *)v5, v4);
      }
    }
    v8 = v158[0];
    v158[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (*((_QWORD *)v1 + 11))
      v9 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
    else
      v9 = 0;
    if (v9)
    {
      *((_QWORD *)v1 + 14) = WebCore::SQLTransaction::deliverTransactionErrorCallback;
      *((_QWORD *)v1 + 15) = 0;
      v10 = (unsigned int *)*((_QWORD *)v1 + 3);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned int *)((char *)v1 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
LABEL_16:
      v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v14 = &off_1E336DC58;
      *((_QWORD *)v14 + 1) = v10;
      *((_QWORD *)v14 + 2) = v10;
      *((_QWORD *)v14 + 3) = v1;
      v158[0] = v14;
      WTF::callOnMainThread();
      result = (uint64_t)v158[0];
      v158[0] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
    return WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(*((WebCore::SQLTransaction **)v1 + 28), v4);
  }
  if (*((_BYTE *)this + 147))
    goto LABEL_104;
  v16 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v16 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    *(_DWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 40) = -1;
    *(_WORD *)(v16 + 44) = 0;
    *(_BYTE *)(v16 + 46) = 0;
    *(_QWORD *)(v16 + 48) = 0;
    *(_BYTE *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 64) = 0;
    *(_BYTE *)(v16 + 72) = 0;
    *(_DWORD *)(v16 + 76) = 1;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = 0;
    this = (WebCore::SQLTransaction *)WTF::String::isolatedCopy();
    *(_OWORD *)(v16 + 120) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    WebCore::staticTracker = v16;
    v2 = *((_QWORD *)v1 + 3);
  }
  if (WTF::isMainThread(this))
  {
    v17 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 32) + 8);
    v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v19)
      v19 = WTF::Thread::initializeCurrentTLS(0);
    if (v18 != v19)
    {
      result = 777;
      __break(0xC471u);
      return result;
    }
    v17 = *(_QWORD *)(v2 + 24);
  }
  LOBYTE(v158[0]) = 0;
  v159 = -1;
  v20 = *(unsigned int *)(v17 + 32);
  if ((_DWORD)v20 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v20])(&v157, v158, v17 + 8);
    v159 = v20;
  }
  v21 = (unsigned __int8 *)(v16 + 16);
  if (__ldaxr((unsigned __int8 *)(v16 + 16)))
  {
    __clrex();
LABEL_32:
    MEMORY[0x19AEA534C](v16 + 16);
    goto LABEL_33;
  }
  if (__stxr(1u, v21))
    goto LABEL_32;
LABEL_33:
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)v158, &v157);
  WTF::String::isolatedCopy();
  v25 = v157;
  v157 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (uint64_t *)(v16 + 88);
  v27 = *(_QWORD *)(v16 + 88);
  if (v27
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)(v16 + 88), 8u, 0), (v27 = *v26) != 0))
  {
    v28 = *(_DWORD *)(v27 - 8);
  }
  else
  {
    v28 = 0;
  }
  v29 = *((_DWORD *)v155 + 4);
  if (v29 < 0x100)
    v30 = WTF::StringImpl::hashSlowCase(v155);
  else
    v30 = v29 >> 8;
  v31 = 0;
  for (i = 1; ; ++i)
  {
    v33 = v30 & v28;
    v34 = v27 + 16 * (v30 & v28);
    v35 = *(WTF **)v34;
    if (*(_QWORD *)v34 == -1)
    {
      v31 = (_QWORD *)(v27 + 16 * v33);
      goto LABEL_49;
    }
    if (!v35)
      break;
    if ((WTF::equal(v35, v155, v24) & 1) != 0)
      goto LABEL_76;
LABEL_49:
    v30 = i + v33;
  }
  if (v31)
  {
    *v31 = 0;
    v31[1] = 0;
    --*(_DWORD *)(*v26 - 16);
    v34 = (uint64_t)v31;
  }
  if (v155)
    *(_DWORD *)v155 += 2;
  *(_QWORD *)v34 = v155;
  WebCore::DatabaseTracker::originPath((WebCore::DatabaseTracker *)&v156, (const WebCore::SecurityOriginData *)v16, (WebCore::SecurityOriginData *)v158);
  v37 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v37 = 1;
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::String::isolatedCopy();
  v38 = v157;
  v157 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v36);
    else
      *(_DWORD *)v38 -= 2;
  }
  *(_BYTE *)(v37 + 16) = 0;
  *(_DWORD *)(v37 + 20) = -1;
  v39 = v156;
  v156 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v36);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = v37;
  if (v40)
  {
    do
    {
      v41 = __ldaxr((unsigned int *)v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)v40));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)v40);
      v152 = *(WTF::StringImpl **)(v40 + 8);
      *(_QWORD *)(v40 + 8) = 0;
      if (v152)
      {
        if (*(_DWORD *)v152 == 2)
          WTF::StringImpl::destroy(v152, v36);
        else
          *(_DWORD *)v152 -= 2;
      }
      WTF::fastFree((WTF *)v40, v36);
    }
  }
  v43 = *v26;
  if (*v26)
    v44 = *(_DWORD *)(v43 - 12) + 1;
  else
    v44 = 1;
  *(_DWORD *)(v43 - 12) = v44;
  v45 = *v26;
  if (*v26)
    v46 = *(_DWORD *)(v45 - 12);
  else
    v46 = 0;
  v47 = (*(_DWORD *)(v45 - 16) + v46);
  v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v47)
    {
LABEL_72:
      v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
      goto LABEL_75;
    }
  }
  else if (3 * v48 <= 4 * v47)
  {
    if ((_DWORD)v48)
      goto LABEL_72;
    v49 = 8;
LABEL_75:
    v34 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v26, v49, (WTF::StringImpl **)v34);
  }
LABEL_76:
  v50 = *(unsigned int **)(v34 + 8);
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 + 1, v50));
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
      WTF::StringImpl::destroy(v155, v36);
    else
      *(_DWORD *)v155 -= 2;
  }
  v52 = __ldxr(v21);
  if (v52 == 1)
  {
    if (!__stlxr(0, v21))
      goto LABEL_86;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_86:
  v53 = *((_QWORD *)v1 + 25);
  *((_QWORD *)v1 + 25) = v50;
  if (v53)
  {
    do
    {
      v54 = __ldaxr((unsigned int *)v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, (unsigned int *)v53));
    if (!v55)
    {
      atomic_store(1u, (unsigned int *)v53);
      v147 = *(WTF::StringImpl **)(v53 + 8);
      *(_QWORD *)(v53 + 8) = 0;
      if (v147)
      {
        if (*(_DWORD *)v147 == 2)
          WTF::StringImpl::destroy(v147, v36);
        else
          *(_DWORD *)v147 -= 2;
      }
      WTF::fastFree((WTF *)v53, v36);
    }
  }
  if (v159 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v159])(&v157, v158);
  v56 = *((_QWORD *)v1 + 25);
  v57 = (unsigned __int8 *)(v56 + 16);
  if (__ldaxr((unsigned __int8 *)(v56 + 16)))
  {
    __clrex();
    goto LABEL_94;
  }
  if (__stxr(1u, v57))
LABEL_94:
    MEMORY[0x19AEA534C](v56 + 16);
  v59 = WTF::FileSystemImpl::openAndLockFile();
  *(_DWORD *)(v56 + 20) = v59;
  if (v59 == -1)
  {
    v60 = __ldxr(v57);
    if (v60 == 1)
    {
      if (!__stlxr(0, v57))
        goto LABEL_101;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v56 + 16));
  }
LABEL_101:
  v61 = (sqlite3 **)*((_QWORD *)v1 + 3);
  v62 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v62 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v62 = 0;
    *(_QWORD *)(v62 + 8) = 0;
    *(_BYTE *)(v62 + 16) = 0;
    *(_DWORD *)(v62 + 24) = 0;
    *(_QWORD *)(v62 + 32) = 0;
    *(_DWORD *)(v62 + 40) = -1;
    *(_WORD *)(v62 + 44) = 0;
    *(_BYTE *)(v62 + 46) = 0;
    *(_QWORD *)(v62 + 48) = 0;
    *(_BYTE *)(v62 + 56) = 0;
    *(_QWORD *)(v62 + 64) = 0;
    *(_BYTE *)(v62 + 72) = 0;
    *(_DWORD *)(v62 + 76) = 1;
    *(_QWORD *)(v62 + 80) = 0;
    *(_QWORD *)(v62 + 88) = 0;
    WTF::String::isolatedCopy();
    *(_OWORD *)(v62 + 120) = 0u;
    *(_OWORD *)(v62 + 104) = 0u;
    WebCore::staticTracker = v62;
  }
  v63 = WebCore::DatabaseTracker::maximumSize((WebCore::DatabaseTracker *)v62, (WebCore::Database *)v61);
  WebCore::SQLiteDatabase::setMaximumSize(v61 + 12, v63);
  v2 = *((_QWORD *)v1 + 3);
LABEL_104:
  v64 = (unsigned int *)(v2 + 96);
  v65 = WTF::fastMalloc((WTF *)0x10);
  v66 = *((_BYTE *)v1 + 147);
  *(_QWORD *)v65 = v64;
  do
    v67 = __ldaxr(v64);
  while (__stlxr(v67 + 1, v64));
  *(_BYTE *)(v65 + 8) = 0;
  *(_BYTE *)(v65 + 9) = v66;
  v68 = (WebCore::SQLiteTransaction *)*((_QWORD *)v1 + 24);
  *((_QWORD *)v1 + 24) = v65;
  if (v68)
  {
    WebCore::SQLiteTransaction::~SQLiteTransaction(v68);
    WTF::fastFree(v69, v70);
  }
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 160) + 8) &= ~8u;
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 160) + 8) &= ~1u;
  WebCore::SQLiteTransaction::begin(*((WebCore::SQLiteTransaction **)v1 + 24));
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 160) + 8) |= 1u;
  if (!*(_BYTE *)(*((_QWORD *)v1 + 24) + 8))
  {
    v80 = *((_QWORD *)v1 + 3);
    v81 = *(sqlite3 **)(v80 + 104);
    if (v81)
    {
      v82 = sqlite3_errcode(v81);
      v80 = *((_QWORD *)v1 + 3);
      v83 = *(sqlite3 **)(v80 + 104);
      if (v83)
      {
        v84 = sqlite3_errmsg(v83);
        goto LABEL_161;
      }
    }
    else
    {
      v82 = *(_DWORD *)(v80 + 148);
    }
    v111 = *(_QWORD *)(v80 + 152);
    if (v111)
      v84 = (const char *)(v111 + 16);
    else
      v84 = "database is not open";
LABEL_161:
    WebCore::SQLError::create(1, (uint64_t)"unable to begin transaction", 28, v82, v84, v158);
    v112 = v158[0];
    v158[0] = 0;
    v113 = *((_QWORD *)v1 + 17);
    *((_QWORD *)v1 + 17) = v112;
    if (v113)
    {
      do
      {
        v114 = __ldaxr((unsigned int *)v113);
        v115 = v114 - 1;
      }
      while (__stlxr(v115, (unsigned int *)v113));
      if (!v115)
      {
        atomic_store(1u, (unsigned int *)v113);
        v148 = *(WTF::StringImpl **)(v113 + 8);
        *(_QWORD *)(v113 + 8) = 0;
        if (v148)
        {
          if (*(_DWORD *)v148 == 2)
            WTF::StringImpl::destroy(v148, v4);
          else
            *(_DWORD *)v148 -= 2;
        }
        WTF::fastFree((WTF *)v113, v4);
      }
      v116 = v158[0];
      v158[0] = 0;
      if (v116)
      {
        do
        {
          v117 = __ldaxr((unsigned int *)v116);
          v118 = v117 - 1;
        }
        while (__stlxr(v118, (unsigned int *)v116));
        if (!v118)
        {
          atomic_store(1u, (unsigned int *)v116);
          v150 = (WTF::StringImpl *)*((_QWORD *)v116 + 1);
          *((_QWORD *)v116 + 1) = 0;
          if (v150)
          {
            if (*(_DWORD *)v150 == 2)
              WTF::StringImpl::destroy(v150, v4);
            else
              *(_DWORD *)v150 -= 2;
          }
          WTF::fastFree(v116, v4);
        }
      }
    }
    v119 = (WebCore::SQLiteTransaction *)*((_QWORD *)v1 + 24);
    *((_QWORD *)v1 + 24) = 0;
    if (v119)
    {
      WebCore::SQLiteTransaction::~SQLiteTransaction(v119);
      WTF::fastFree(v120, v121);
    }
    if (*((_QWORD *)v1 + 11))
      v122 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
    else
      v122 = 0;
    if (v122)
    {
      *((_QWORD *)v1 + 14) = WebCore::SQLTransaction::deliverTransactionErrorCallback;
      *((_QWORD *)v1 + 15) = 0;
      v10 = (unsigned int *)*((_QWORD *)v1 + 3);
      do
        v123 = __ldaxr(v10);
      while (__stlxr(v123 + 1, v10));
      v124 = (unsigned int *)((char *)v1 + 16);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 + 1, v124));
      goto LABEL_16;
    }
    return WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(*((WebCore::SQLTransaction **)v1 + 28), v4);
  }
  v157 = 0;
  if ((WebCore::Database::getVersionFromDatabase(*((WebCore::Database **)v1 + 3), &v157, 1) & 1) == 0)
  {
    v85 = *((_QWORD *)v1 + 3);
    v86 = *(sqlite3 **)(v85 + 104);
    if (v86)
    {
      v87 = sqlite3_errcode(v86);
      v85 = *((_QWORD *)v1 + 3);
      v88 = *(sqlite3 **)(v85 + 104);
      if (v88)
      {
        v89 = sqlite3_errmsg(v88);
LABEL_183:
        WebCore::SQLError::create(1, (uint64_t)"unable to read version", 23, v87, v89, v158);
        v128 = v158[0];
        v158[0] = 0;
        v129 = *((_QWORD *)v1 + 17);
        *((_QWORD *)v1 + 17) = v128;
        if (v129)
        {
          do
          {
            v130 = __ldaxr((unsigned int *)v129);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, (unsigned int *)v129));
          if (!v131)
          {
            atomic_store(1u, (unsigned int *)v129);
            v149 = *(WTF::StringImpl **)(v129 + 8);
            *(_QWORD *)(v129 + 8) = 0;
            if (v149)
            {
              if (*(_DWORD *)v149 == 2)
                WTF::StringImpl::destroy(v149, v127);
              else
                *(_DWORD *)v149 -= 2;
            }
            WTF::fastFree((WTF *)v129, v127);
          }
          v132 = v158[0];
          v158[0] = 0;
          if (v132)
          {
            do
            {
              v133 = __ldaxr((unsigned int *)v132);
              v134 = v133 - 1;
            }
            while (__stlxr(v134, (unsigned int *)v132));
            if (!v134)
            {
              atomic_store(1u, (unsigned int *)v132);
              v151 = (WTF::StringImpl *)*((_QWORD *)v132 + 1);
              *((_QWORD *)v132 + 1) = 0;
              if (v151)
              {
                if (*(_DWORD *)v151 == 2)
                  WTF::StringImpl::destroy(v151, v127);
                else
                  *(_DWORD *)v151 -= 2;
              }
              WTF::fastFree(v132, v127);
            }
          }
        }
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 160) + 8) &= ~1u;
        v135 = (WebCore::SQLiteTransaction *)*((_QWORD *)v1 + 24);
        *((_QWORD *)v1 + 24) = 0;
        if (v135)
        {
          WebCore::SQLiteTransaction::~SQLiteTransaction(v135);
          WTF::fastFree(v136, v137);
        }
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 160) + 8) |= 1u;
        if (*((_QWORD *)v1 + 11))
          v138 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
        else
          v138 = 0;
        if (v138)
        {
          *((_QWORD *)v1 + 14) = WebCore::SQLTransaction::deliverTransactionErrorCallback;
          *((_QWORD *)v1 + 15) = 0;
          v139 = (unsigned int *)*((_QWORD *)v1 + 3);
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 + 1, v139));
          v141 = (unsigned int *)((char *)v1 + 16);
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 + 1, v141));
          v143 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v143 = &off_1E336DC58;
          *((_QWORD *)v143 + 1) = v139;
          *((_QWORD *)v143 + 2) = v139;
          *((_QWORD *)v143 + 3) = v1;
          v158[0] = v143;
          WTF::callOnMainThread();
          v144 = v158[0];
          v158[0] = 0;
          if (v144)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v144 + 8))(v144);
        }
        else
        {
          WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(*((WebCore::SQLTransaction **)v1 + 28), v127);
        }
        goto LABEL_206;
      }
    }
    else
    {
      v87 = *(_DWORD *)(v85 + 148);
    }
    v126 = *(_QWORD *)(v85 + 152);
    if (v126)
      v89 = (const char *)(v126 + 16);
    else
      v89 = "database is not open";
    goto LABEL_183;
  }
  WTF::String::isolatedCopy();
  if (v156)
  {
    v73 = *((_DWORD *)v156 + 1);
    if (v73)
      LOBYTE(v73) = WTF::equal(v156, v157, v72) ^ 1;
  }
  else
  {
    LOBYTE(v73) = 0;
  }
  *((_BYTE *)v1 + 148) = v73;
  v74 = *((_QWORD *)v1 + 13);
  if (v74
    && ((*(uint64_t (**)(uint64_t, WebCore::SQLTransaction *))(*(_QWORD *)v74 + 16))(v74, v1) & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 160) + 8) &= ~1u;
    v90 = (WebCore::SQLiteTransaction *)*((_QWORD *)v1 + 24);
    *((_QWORD *)v1 + 24) = 0;
    if (v90)
    {
      WebCore::SQLiteTransaction::~SQLiteTransaction(v90);
      WTF::fastFree(v91, v92);
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 160) + 8) |= 1u;
    v93 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 13) + 32))(*((_QWORD *)v1 + 13));
    if (v93)
    {
      do
        v95 = __ldaxr(v93);
      while (__stlxr(v95 + 1, v93));
    }
    v96 = *((_QWORD *)v1 + 17);
    *((_QWORD *)v1 + 17) = v93;
    if (v96)
    {
      do
      {
        v97 = __ldaxr((unsigned int *)v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, (unsigned int *)v96));
      if (!v98)
      {
        atomic_store(1u, (unsigned int *)v96);
        v153 = *(WTF::StringImpl **)(v96 + 8);
        *(_QWORD *)(v96 + 8) = 0;
        if (v153)
        {
          if (*(_DWORD *)v153 == 2)
            WTF::StringImpl::destroy(v153, v94);
          else
            *(_DWORD *)v153 -= 2;
        }
        WTF::fastFree((WTF *)v96, v94);
      }
      v93 = (unsigned int *)*((_QWORD *)v1 + 17);
    }
    if (!v93)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v99 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v99 = 1;
      WTF::String::isolatedCopy();
      v100 = *((_QWORD *)v1 + 17);
      *((_QWORD *)v1 + 17) = v99;
      if (v100)
      {
        do
        {
          v101 = __ldaxr((unsigned int *)v100);
          v102 = v101 - 1;
        }
        while (__stlxr(v102, (unsigned int *)v100));
        if (!v102)
        {
          atomic_store(1u, (unsigned int *)v100);
          v154 = *(WTF::StringImpl **)(v100 + 8);
          *(_QWORD *)(v100 + 8) = 0;
          if (v154)
          {
            if (*(_DWORD *)v154 == 2)
              WTF::StringImpl::destroy(v154, v94);
            else
              *(_DWORD *)v154 -= 2;
          }
          WTF::fastFree((WTF *)v100, v94);
        }
      }
      v103 = v158[0];
      v158[0] = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
          WTF::StringImpl::destroy(v103, v94);
        else
          *(_DWORD *)v103 -= 2;
      }
    }
    if (*((_QWORD *)v1 + 11))
      v104 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
    else
      v104 = 0;
    if (v104)
    {
      *((_QWORD *)v1 + 14) = WebCore::SQLTransaction::deliverTransactionErrorCallback;
      *((_QWORD *)v1 + 15) = 0;
      v76 = (unsigned int *)*((_QWORD *)v1 + 3);
      do
        v105 = __ldaxr(v76);
      while (__stlxr(v105 + 1, v76));
      v106 = (unsigned int *)((char *)v1 + 16);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 + 1, v106));
      goto LABEL_152;
    }
    WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(*((WebCore::SQLTransaction **)v1 + 28), v94);
  }
  else
  {
    if (*((_QWORD *)v1 + 5))
      v75 = WTF::RefPtr<WebCore::SQLTransactionCallback,WTF::RawPtrTraits<WebCore::SQLTransactionCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionCallback>>::unspecifiedBoolTypeInstance;
    else
      v75 = 0;
    if (v75)
    {
      *((_QWORD *)v1 + 14) = WebCore::SQLTransaction::deliverTransactionCallback;
      *((_QWORD *)v1 + 15) = 0;
      v76 = (unsigned int *)*((_QWORD *)v1 + 3);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 + 1, v76));
      v78 = (unsigned int *)((char *)v1 + 16);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 + 1, v78));
LABEL_152:
      v108 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v108 = &off_1E336DC58;
      *((_QWORD *)v108 + 1) = v76;
      *((_QWORD *)v108 + 2) = v76;
      *((_QWORD *)v108 + 3) = v1;
      v158[0] = v108;
      WTF::callOnMainThread();
      v110 = v158[0];
      v158[0] = 0;
      if (v110)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v110 + 8))(v110);
    }
    else
    {
      WebCore::SQLTransaction::runStatements(v1, v71);
    }
  }
  v145 = v156;
  v156 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
      WTF::StringImpl::destroy(v145, v109);
    else
      *(_DWORD *)v145 -= 2;
  }
LABEL_206:
  result = (uint64_t)v157;
  v157 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v109);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SQLTransaction::runStatements(WebCore::SQLTransaction *this, void *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  sqlite3 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  while (1)
  {
    if (*((_BYTE *)this + 144))
    {
      v3 = (_BYTE *)*((_QWORD *)this + 24);
      if (!v3[8] || !sqlite3_get_autocommit(*(sqlite3 **)(*(_QWORD *)v3 + 8)))
      {
        *((_BYTE *)this + 144) = 0;
        v6 = (sqlite3 **)*((_QWORD *)this + 3);
        v7 = WebCore::staticTracker;
        if (!WebCore::staticTracker)
        {
          v7 = WTF::fastMalloc((WTF *)0x88);
          *(_BYTE *)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
          *(_BYTE *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_DWORD *)(v7 + 40) = -1;
          *(_WORD *)(v7 + 44) = 0;
          *(_BYTE *)(v7 + 46) = 0;
          *(_QWORD *)(v7 + 48) = 0;
          *(_BYTE *)(v7 + 56) = 0;
          *(_QWORD *)(v7 + 64) = 0;
          *(_BYTE *)(v7 + 72) = 0;
          *(_DWORD *)(v7 + 76) = 1;
          *(_QWORD *)(v7 + 80) = 0;
          *(_QWORD *)(v7 + 88) = 0;
          WTF::String::isolatedCopy();
          *(_OWORD *)(v7 + 120) = 0u;
          *(_OWORD *)(v7 + 104) = 0u;
          WebCore::staticTracker = v7;
        }
        v8 = WebCore::DatabaseTracker::maximumSize((WebCore::DatabaseTracker *)v7, (WebCore::Database *)v6);
        WebCore::SQLiteDatabase::setMaximumSize(v6 + 12, v8);
        goto LABEL_11;
      }
    }
    v4 = *((_QWORD *)this + 23);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 72);
      if (v5)
      {
        if (*(_DWORD *)(v5 + 4) == 4)
          break;
      }
    }
    WebCore::SQLTransaction::getNextStatement(this, a2);
LABEL_11:
    result = WebCore::SQLTransaction::runCurrentStatement(this);
    if ((result & 1) == 0)
      goto LABEL_14;
  }
  result = (uint64_t)WebCore::SQLTransaction::handleCurrentStatementError(this, (WTF::StringImpl *)a2);
LABEL_14:
  if (!*((_QWORD *)this + 23))
    return (uint64_t)WebCore::SQLTransaction::postflightAndCommit(this);
  return result;
}

WTF::StringImpl *WebCore::SQLTransaction::handleCurrentStatementError(WebCore::SQLTransaction *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  _BYTE *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t (*v15)();
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v3 = *((_QWORD *)this + 23);
  if (*(_QWORD *)(v3 + 56))
    v4 = WTF::RefPtr<WebCore::SQLStatementErrorCallback,WTF::RawPtrTraits<WebCore::SQLStatementErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLStatementErrorCallback>>::unspecifiedBoolTypeInstance;
  else
    v4 = 0;
  if (v4)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 24);
    if (!v5[8] || !sqlite3_get_autocommit(*(sqlite3 **)(*(_QWORD *)v5 + 8)))
    {
      *((_QWORD *)this + 14) = WebCore::SQLTransaction::deliverStatementCallback;
      *((_QWORD *)this + 15) = 0;
      v16 = (unsigned int *)*((_QWORD *)this + 3);
      do
        v20 = __ldaxr(v16);
      while (__stlxr(v20 + 1, v16));
      v21 = (unsigned int *)((char *)this + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      goto LABEL_34;
    }
    v3 = *((_QWORD *)this + 23);
  }
  v6 = *(unsigned int **)(v3 + 72);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v6;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v25 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          v27 = v8;
          WTF::StringImpl::destroy(v25, a2);
          v8 = v27;
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
      WTF::fastFree((WTF *)v8, a2);
    }
    v6 = (unsigned int *)*((_QWORD *)this + 17);
  }
  if (!v6)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = 0x100000001;
    WTF::String::isolatedCopy();
    v12 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v11;
    if (v12)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v26 = *(WTF::StringImpl **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            v28 = v12;
            WTF::StringImpl::destroy(v26, a2);
            v12 = v28;
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        WTF::fastFree((WTF *)v12, a2);
      }
    }
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, a2);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (*((_QWORD *)this + 11))
    v15 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
  else
    v15 = 0;
  if (!v15)
    return (WTF::StringImpl *)WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(*((WebCore::SQLTransaction **)this + 28), a2);
  *((_QWORD *)this + 14) = WebCore::SQLTransaction::deliverTransactionErrorCallback;
  *((_QWORD *)this + 15) = 0;
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = (unsigned int *)((char *)this + 16);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
LABEL_34:
  v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v23 = &off_1E336DC58;
  *((_QWORD *)v23 + 1) = v16;
  *((_QWORD *)v23 + 2) = v16;
  *((_QWORD *)v23 + 3) = this;
  v30 = v23;
  WTF::callOnMainThread();
  result = v30;
  if (v30)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
  return result;
}

WebCore::SQLStatement *WebCore::SQLTransaction::getNextStatement(WebCore::SQLTransaction *this, void *a2)
{
  WebCore::SQLStatement *result;
  WTF *v4;
  void *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::SQLStatement *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;

  result = (WebCore::SQLStatement *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (result)
  {
    WebCore::SQLStatement::~SQLStatement(result, a2);
    result = (WebCore::SQLStatement *)WTF::fastFree(v4, v5);
  }
  v6 = (unsigned __int8 *)this + 149;
  if (__ldaxr((unsigned __int8 *)this + 149))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  result = (WebCore::SQLStatement *)MEMORY[0x19AEA534C]((char *)this + 149);
LABEL_7:
  v8 = *((_QWORD *)this + 19);
  if (v8 != *((_QWORD *)this + 20))
  {
    v9 = *((_QWORD *)this + 21);
    v10 = *(_QWORD *)(v9 + 8 * v8);
    *(_QWORD *)(v9 + 8 * v8) = 0;
    v11 = *((_QWORD *)this + 21);
    v12 = *(WebCore::SQLStatement **)(v11 + 8 * v8);
    *(_QWORD *)(v11 + 8 * v8) = 0;
    if (v12)
    {
      WebCore::SQLStatement::~SQLStatement(v12, a2);
      WTF::fastFree(v13, v14);
      v8 = *((_QWORD *)this + 19);
    }
    if (v8 == *((unsigned int *)this + 44) - 1)
      v15 = 0;
    else
      v15 = v8 + 1;
    *((_QWORD *)this + 19) = v15;
    result = (WebCore::SQLStatement *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v10;
    if (result)
    {
      WebCore::SQLStatement::~SQLStatement(result, a2);
      result = (WebCore::SQLStatement *)WTF::fastFree(v16, v17);
    }
  }
  v18 = __ldxr(v6);
  if (v18 != 1)
  {
    __clrex();
    return (WebCore::SQLStatement *)WTF::Lock::unlockSlow((WebCore::SQLTransaction *)((char *)this + 149));
  }
  if (__stlxr(0, v6))
    return (WebCore::SQLStatement *)WTF::Lock::unlockSlow((WebCore::SQLTransaction *)((char *)this + 149));
  return result;
}

uint64_t WebCore::SQLTransaction::runCurrentStatement(WebCore::SQLTransaction *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v15;

  if (!*((_QWORD *)this + 23))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 160);
  *(_BYTE *)(v2 + 8) &= 0xF9u;
  *(_DWORD *)(v2 + 4) = 0;
  if (*((_BYTE *)this + 148))
    WebCore::SQLStatement::setVersionMismatchedError(*((WebCore::SQLStatement **)this + 23));
  if (WebCore::SQLStatement::execute(*((WebCore::SQLStatement **)this + 23), *((WebCore::Database **)this + 3)))
  {
    v4 = *((_QWORD *)this + 3);
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 160) + 8) & 4) != 0)
      *((_BYTE *)this + 145) = 1;
    if (*(_QWORD *)(*((_QWORD *)this + 23) + 32))
      v5 = WTF::RefPtr<WebCore::SQLStatementCallback,WTF::RawPtrTraits<WebCore::SQLStatementCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLStatementCallback>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
    if (!v5)
      return 1;
    *((_QWORD *)this + 14) = WebCore::SQLTransaction::deliverStatementCallback;
    *((_QWORD *)this + 15) = 0;
    do
      v6 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v6 + 1, (unsigned int *)v4));
    v7 = (unsigned int *)((char *)this + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(*((_QWORD *)this + 23) + 72);
  if (v9 && *(_DWORD *)(v9 + 4) == 4)
  {
    *((_QWORD *)this + 14) = WebCore::SQLTransaction::deliverQuotaIncreaseCallback;
    *((_QWORD *)this + 15) = 0;
    v4 = *((_QWORD *)this + 3);
    do
      v10 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v10 + 1, (unsigned int *)v4));
    v11 = (unsigned int *)((char *)this + 16);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
LABEL_22:
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v13 = &off_1E336DC58;
    v13[1] = v4;
    v13[2] = v4;
    v13[3] = this;
    v15 = v13;
    WTF::callOnMainThread();
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    return 0;
  }
  WebCore::SQLTransaction::handleCurrentStatementError(this, v3);
  return 0;
}

WTF::StringImpl *WebCore::SQLTransaction::postflightAndCommit(WebCore::SQLTransaction *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::FileSystemImpl *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t (*v19)();
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  sqlite3 *v29;
  unsigned int v30;
  sqlite3 *v31;
  const char *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t (*v44)();
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *result;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;

  v2 = *((_QWORD *)this + 13);
  if (v2 && ((*(uint64_t (**)(uint64_t, WebCore::SQLTransaction *))(*(_QWORD *)v2 + 24))(v2, this) & 1) == 0)
  {
    v8 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13));
    if (v8)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
    }
    v11 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v8;
    if (v11)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v52 = *(WTF::StringImpl **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v9);
          else
            *(_DWORD *)v52 -= 2;
        }
        WTF::fastFree((WTF *)v11, v9);
      }
      v8 = (unsigned int *)*((_QWORD *)this + 17);
    }
    if (!v8)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = 1;
      WTF::String::isolatedCopy();
      v15 = *((_QWORD *)this + 17);
      *((_QWORD *)this + 17) = v14;
      if (v15)
      {
        do
        {
          v16 = __ldaxr((unsigned int *)v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, (unsigned int *)v15));
        if (!v17)
        {
          atomic_store(1u, (unsigned int *)v15);
          v54 = *(WTF::StringImpl **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v9);
            else
              *(_DWORD *)v54 -= 2;
          }
          WTF::fastFree((WTF *)v15, v9);
        }
      }
      v18 = v55;
      v55 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v9);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    if (*((_QWORD *)this + 11))
      v19 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
    else
      v19 = 0;
    if (v19)
    {
      *((_QWORD *)this + 14) = WebCore::SQLTransaction::deliverTransactionErrorCallback;
      *((_QWORD *)this + 15) = 0;
      v20 = *((_QWORD *)this + 3);
      do
        v21 = __ldaxr((unsigned int *)v20);
      while (__stlxr(v21 + 1, (unsigned int *)v20));
      v22 = (unsigned int *)((char *)this + 16);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      goto LABEL_68;
    }
    return (WTF::StringImpl *)WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(*((WebCore::SQLTransaction **)this + 28), v9);
  }
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 160) + 8) &= ~1u;
  WebCore::SQLiteTransaction::commit(*((_QWORD *)this + 24));
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 160) + 8) |= 1u;
  v4 = *((_QWORD *)this + 25);
  if (v4)
  {
    v5 = (WTF::FileSystemImpl *)*(unsigned int *)(v4 + 20);
    if ((_DWORD)v5 != -1)
    {
      WTF::FileSystemImpl::unlockAndCloseFile(v5);
      *(_DWORD *)(v4 + 20) = -1;
      v6 = (unsigned __int8 *)(v4 + 16);
      v7 = __ldxr((unsigned __int8 *)(v4 + 16));
      if (v7 == 1)
      {
        if (!__stlxr(0, v6))
          goto LABEL_32;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
    }
LABEL_32:
    v24 = *((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v50 = *(WTF::StringImpl **)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v3);
          else
            *(_DWORD *)v50 -= 2;
        }
        WTF::fastFree((WTF *)v24, v3);
      }
    }
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 24) + 8))
  {
    v20 = *((_QWORD *)this + 3);
    if ((*(_BYTE *)(*(_QWORD *)(v20 + 160) + 8) & 8) != 0)
    {
      WebCore::Database::incrementalVacuumIfNeeded(*((sqlite3 ***)this + 3));
      v20 = *((_QWORD *)this + 3);
    }
    if (*((_BYTE *)this + 145))
    {
      WebCore::Database::didCommitWriteTransaction((WebCore::Database *)v20);
      v20 = *((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 14) = WebCore::SQLTransaction::deliverSuccessCallback;
    *((_QWORD *)this + 15) = 0;
    do
      v33 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v33 + 1, (unsigned int *)v20));
    v34 = (unsigned int *)((char *)this + 16);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    goto LABEL_68;
  }
  v27 = *((_QWORD *)this + 13);
  if (v27)
    (*(void (**)(uint64_t, WebCore::SQLTransaction *))(*(_QWORD *)v27 + 40))(v27, this);
  v28 = *((_QWORD *)this + 3);
  v29 = *(sqlite3 **)(v28 + 104);
  if (v29)
  {
    v30 = sqlite3_errcode(v29);
    v28 = *((_QWORD *)this + 3);
    v31 = *(sqlite3 **)(v28 + 104);
    if (v31)
    {
      v32 = sqlite3_errmsg(v31);
      goto LABEL_54;
    }
  }
  else
  {
    v30 = *(_DWORD *)(v28 + 148);
  }
  v36 = *(_QWORD *)(v28 + 152);
  if (v36)
    v32 = (const char *)(v36 + 16);
  else
    v32 = "database is not open";
LABEL_54:
  WebCore::SQLError::create(1, (uint64_t)"unable to commit transaction", 29, v30, v32, &v55);
  v37 = v55;
  v55 = 0;
  v38 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v37;
  if (v38)
  {
    do
    {
      v39 = __ldaxr((unsigned int *)v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v38));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)v38);
      v51 = *(WTF::StringImpl **)(v38 + 8);
      *(_QWORD *)(v38 + 8) = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v9);
        else
          *(_DWORD *)v51 -= 2;
      }
      WTF::fastFree((WTF *)v38, v9);
    }
    v41 = v55;
    v55 = 0;
    if (v41)
    {
      do
      {
        v42 = __ldaxr((unsigned int *)v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, (unsigned int *)v41));
      if (!v43)
      {
        atomic_store(1u, (unsigned int *)v41);
        v53 = (WTF::StringImpl *)*((_QWORD *)v41 + 1);
        *((_QWORD *)v41 + 1) = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v9);
          else
            *(_DWORD *)v53 -= 2;
        }
        WTF::fastFree(v41, v9);
      }
    }
  }
  if (*((_QWORD *)this + 11))
    v44 = WTF::RefPtr<WebCore::SQLTransactionErrorCallback,WTF::RawPtrTraits<WebCore::SQLTransactionErrorCallback>,WTF::DefaultRefDerefTraits<WebCore::SQLTransactionErrorCallback>>::unspecifiedBoolTypeInstance;
  else
    v44 = 0;
  if (!v44)
    return (WTF::StringImpl *)WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(*((WebCore::SQLTransaction **)this + 28), v9);
  *((_QWORD *)this + 14) = WebCore::SQLTransaction::deliverTransactionErrorCallback;
  *((_QWORD *)this + 15) = 0;
  v20 = *((_QWORD *)this + 3);
  do
    v45 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v45 + 1, (unsigned int *)v20));
  v46 = (unsigned int *)((char *)this + 16);
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 + 1, v46));
LABEL_68:
  v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v48 = &off_1E336DC58;
  *((_QWORD *)v48 + 1) = v20;
  *((_QWORD *)v48 + 2) = v20;
  *((_QWORD *)v48 + 3) = this;
  v55 = v48;
  WTF::callOnMainThread();
  result = v55;
  v55 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(WebCore::SQLTransaction *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::SQLiteDatabaseTracker *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  WTF::FileSystemImpl *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t result;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;

  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 160) + 8) &= ~1u;
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8))
    {
      v4 = (WebCore::SQLiteDatabaseTracker *)WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)v3, "ROLLBACK", 9);
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(*(_QWORD *)v3 + 20) = 0;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v4);
      v3 = *((_QWORD *)this + 24);
      *((_QWORD *)this + 24) = 0;
      if (!v3)
        goto LABEL_7;
    }
    else
    {
      *((_QWORD *)this + 24) = 0;
    }
    WebCore::SQLiteTransaction::~SQLiteTransaction((WebCore::SQLiteTransaction *)v3);
    WTF::fastFree(v5, v6);
  }
LABEL_7:
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 160) + 8) |= 1u;
  v7 = *((_QWORD *)this + 25);
  if (!v7)
    goto LABEL_17;
  v8 = (WTF::FileSystemImpl *)*(unsigned int *)(v7 + 20);
  if ((_DWORD)v8 != -1)
  {
    WTF::FileSystemImpl::unlockAndCloseFile(v8);
    *(_DWORD *)(v7 + 20) = -1;
    v9 = (unsigned __int8 *)(v7 + 16);
    v10 = __ldxr((unsigned __int8 *)(v7 + 16));
    if (v10 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_14:
  v11 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v19 = *(WTF::StringImpl **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          v20 = v11;
          WTF::StringImpl::destroy(v19, a2);
          v11 = v20;
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
      WTF::fastFree((WTF *)v11, a2);
    }
  }
LABEL_17:
  WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransaction *)((char *)this + 208), a2);
  v14 = *((_QWORD *)this + 3);
  v15 = (unsigned __int8 *)(v14 + 200);
  if (__ldaxr((unsigned __int8 *)(v14 + 200)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v14 + 200);
LABEL_21:
  *(_BYTE *)(v14 + 201) = 0;
  result = WebCore::Database::scheduleTransaction(v14);
  v18 = __ldxr(v15);
  if (v18 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v14 + 200));
  }
  if (__stlxr(0, v15))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v14 + 200));
  return result;
}

void WebCore::SQLTransactionCoordinator::CoordinationInfo::~CoordinationInfo(WebCore::SQLTransactionCoordinator::CoordinationInfo *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  WTF *v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int **v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(unsigned int **)(v7 + 8 * i);
        if (v10 != (unsigned int *)-1)
        {
          *(_QWORD *)(v7 + 8 * i) = 0;
          if (v10)
          {
            v11 = v10 + 4;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v10 + 4);
              (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v14 = *(_QWORD *)this;
  v15 = *((_QWORD *)this + 1);
  v16 = (WTF *)*((_QWORD *)this + 2);
  v17 = (unsigned int **)((char *)v16 + 8 * v15);
  if (*(_QWORD *)this <= v15)
  {
    if (*(_QWORD *)this == v15)
      goto LABEL_37;
    v22 = (unsigned int **)((char *)v16 + 8 * v14);
    do
    {
      v23 = *v22;
      *v22 = 0;
      if (v23)
      {
        v24 = v23 + 4;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 4);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      ++v22;
    }
    while (v22 != v17);
  }
  else
  {
    if (v15)
    {
      do
      {
        v18 = *(unsigned int **)v16;
        *(_QWORD *)v16 = 0;
        if (v18)
        {
          v19 = v18 + 4;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            atomic_store(1u, v18 + 4);
            (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
          }
        }
        v16 = (WTF *)((char *)v16 + 8);
      }
      while (v16 != (WTF *)v17);
      v16 = (WTF *)*((_QWORD *)this + 2);
      v14 = *(_QWORD *)this;
    }
    v27 = *((unsigned int *)this + 6);
    if (v14 != v27)
    {
      v28 = (unsigned int **)((char *)v16 + 8 * v27);
      v29 = (unsigned int **)((char *)v16 + 8 * v14);
      do
      {
        v30 = *v29;
        *v29 = 0;
        if (v30)
        {
          v31 = v30 + 4;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, v30 + 4);
            (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
          }
        }
        ++v29;
      }
      while (v29 != v28);
    }
  }
  v16 = (WTF *)*((_QWORD *)this + 2);
LABEL_37:
  if (v16)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v16, a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6StringEdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJDnS9_dEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6StringEdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJDnS9_dEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6StringEdEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSE_1EJDnS9_dEEERKSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DatabaseThread::start(void)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  unsigned __int8 *v6;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  unsigned __int8 *v29;
  WebCore::Database **v31;
  int v32;
  uint64_t v33;
  WebCore::Database **v34;
  WebCore::Database **v35;
  uint64_t v36;
  WebCore::Database **v37;
  WebCore::Database **v38;
  void *v39;
  _BYTE *v40;
  unsigned int *result;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  int v48;
  uint64_t v49;
  uint64_t i;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  void *v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *(*v62)(uint64_t);
  unsigned __int8 *(**v63)(uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned __int8 *(**v67)(uint64_t);

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned __int8 *)(v2 + 4);
  if (__ldaxr((unsigned __int8 *)(v2 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 4);
LABEL_5:
  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 4));
LABEL_10:
  v6 = (unsigned __int8 *)(v2 + 24);
  while (2)
  {
    if (__ldaxr(v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v2 + 24);
LABEL_15:
    if (*(_BYTE *)(v2 + 64))
    {
LABEL_16:
      v8 = 0;
      goto LABEL_17;
    }
    while (1)
    {
      v19 = *(_QWORD *)(v2 + 32);
      if (v19 != *(_QWORD *)(v2 + 40))
        break;
      v58 = 0x7FF0000000000000;
      v59 = 1;
      v65 = WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v58);
      v66 = v20;
      if (WTF::TimeWithDynamicClockType::operator<())
      {
        v17 = __ldxr(v6);
        if (v17 == 1)
        {
          if (!__stlxr(0, v6))
            goto LABEL_41;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
LABEL_41:
        v18 = 0;
        goto LABEL_45;
      }
      v60 = v2 + 24;
      v61 = v2 + 25;
      v65 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      v66 = &v65;
      v67 = (unsigned __int8 *(**)(uint64_t))&v61;
      v62 = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v63 = &v62;
      v64 = &v60;
      v18 = WTF::ParkingLot::parkConditionallyImpl() & 1;
LABEL_45:
      if (__ldaxr(v6))
      {
        __clrex();
LABEL_48:
        MEMORY[0x19AEA534C](v2 + 24);
        goto LABEL_49;
      }
      if (__stxr(1u, v6))
        goto LABEL_48;
LABEL_49:
      if (*(_BYTE *)(v2 + 64))
        v22 = 0;
      else
        v22 = v18;
      if ((v22 & 1) == 0)
        goto LABEL_16;
    }
    v23 = *(_QWORD *)(v2 + 48);
    v8 = *(_QWORD **)(v23 + 8 * v19);
    *(_QWORD *)(v23 + 8 * v19) = 0;
    v24 = *(_QWORD *)(v2 + 48);
    v25 = (uint64_t *)(v24 + 8 * v19);
    v26 = *v25;
    *v25 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = *(_QWORD *)(v2 + 32);
    if (v27 <= v19)
    {
      memmove((void *)(v24 + 8 * v27 + 8), (const void *)(v24 + 8 * v27), 8 * v19 - 8 * v27);
      *(_QWORD *)(v2 + 32) = (*(_QWORD *)(v2 + 32) + 1) % (unint64_t)*(unsigned int *)(v2 + 56);
    }
    else
    {
      memmove((void *)(v24 + 8 * v19), (const void *)(v24 + 8 * v19 + 8), 8 * *(_QWORD *)(v2 + 40) - (8 * v19 + 8));
      *(_QWORD *)(v2 + 40) = (*(_QWORD *)(v2 + 40) + (unint64_t)*(unsigned int *)(v2 + 56) - 1)
                           % *(unsigned int *)(v2 + 56);
    }
LABEL_17:
    v9 = __ldxr(v6);
    if (v9 != 1)
    {
      __clrex();
LABEL_22:
      WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 24));
      if (!v8)
        goto LABEL_59;
LABEL_23:
      WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)&v58);
      v10 = *(_QWORD *)(v8[1] + 160);
      *(_BYTE *)(v10 + 8) &= 0xF9u;
      *(_DWORD *)(v10 + 4) = 0;
      (*(void (**)(_QWORD *))(*v8 + 16))(v8);
      v11 = (_BYTE *)v8[2];
      if (!v11)
        goto LABEL_35;
      v12 = v11 + 1;
      if (__ldaxr(v11 + 1))
      {
        __clrex();
      }
      else if (!__stxr(1u, v12))
      {
LABEL_28:
        *v11 = 1;
        v14 = v11 + 2;
        v15 = atomic_load(v14);
        if ((v15 & 1) != 0)
        {
          LOBYTE(v61) = 0;
          v62 = (unsigned __int8 *(*)(uint64_t))v14;
          v63 = (unsigned __int8 *(**)(uint64_t))&v61;
          v65 = (uint64_t)WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
          v66 = &v65;
          v67 = &v62;
          WTF::ParkingLot::unparkOneImpl();
        }
        v16 = __ldxr(v12);
        if (v16 == 1)
        {
          if (!__stlxr(0, v12))
            goto LABEL_35;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_35:
        WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)&v58);
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
        continue;
      }
      MEMORY[0x19AEA534C](v11 + 1);
      goto LABEL_28;
    }
    break;
  }
  if (__stlxr(0, v6))
    goto LABEL_22;
  if (v8)
    goto LABEL_23;
LABEL_59:
  WebCore::SQLTransactionCoordinator::shutdown(*(unsigned int **)(v2 + 88), a2);
  v29 = (unsigned __int8 *)(v2 + 72);
  if (__ldaxr((unsigned __int8 *)(v2 + 72)))
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stxr(1u, v29))
LABEL_62:
    MEMORY[0x19AEA534C](v2 + 72);
  v31 = *(WebCore::Database ***)(v2 + 80);
  if (v31)
  {
    if (*((_DWORD *)v31 - 3))
      *(_QWORD *)(v2 + 80) = 0;
    else
      v31 = 0;
  }
  v32 = __ldxr(v29);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_78;
  }
  if (__stlxr(0, v29))
  {
LABEL_78:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 72));
    if (!v31)
      goto LABEL_79;
LABEL_70:
    v33 = *((unsigned int *)v31 - 1);
    v34 = &v31[v33];
    if (!*((_DWORD *)v31 - 3))
    {
      v35 = &v31[v33];
      goto LABEL_81;
    }
    v35 = v31;
    if ((_DWORD)v33)
    {
      v36 = 8 * v33;
      v35 = v31;
      while ((unint64_t)*v35 + 1 <= 1)
      {
        ++v35;
        v36 -= 8;
        if (!v36)
        {
          v35 = v34;
          goto LABEL_76;
        }
      }
    }
    goto LABEL_76;
  }
  if (v31)
    goto LABEL_70;
LABEL_79:
  v35 = 0;
  v33 = 0;
LABEL_81:
  v34 = &v31[v33];
  if (v31)
  {
LABEL_76:
    v37 = &v31[*((unsigned int *)v31 - 1)];
    goto LABEL_83;
  }
  v37 = 0;
LABEL_83:
  while (v35 != v37)
  {
    v38 = v35 + 1;
    WebCore::Database::performClose(*v35, v28);
    v35 = v34;
    if (v38 != v34)
    {
      v35 = v38;
      while ((unint64_t)*v35 + 1 <= 1)
      {
        if (++v35 == v34)
        {
          v35 = v34;
          break;
        }
      }
    }
  }
  WTF::Thread::detach(*(WTF::Thread **)(v2 + 8));
  v40 = *(_BYTE **)(v2 + 96);
  result = *(unsigned int **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (result)
  {
    do
    {
      v42 = __ldaxr(result);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, result));
    if (!v43)
    {
      atomic_store(1u, result);
      WebCore::DatabaseThread::~DatabaseThread((WebCore::DatabaseThread *)result, v39);
      result = (unsigned int *)WTF::fastFree(v56, v57);
      if (!v40)
        goto LABEL_105;
LABEL_94:
      v44 = v40 + 1;
      if (__ldaxr(v40 + 1))
      {
        __clrex();
      }
      else if (!__stxr(1u, v44))
      {
        goto LABEL_98;
      }
      result = (unsigned int *)MEMORY[0x19AEA534C](v40 + 1);
LABEL_98:
      *v40 = 1;
      v46 = v40 + 2;
      v47 = atomic_load(v46);
      if ((v47 & 1) != 0)
      {
        LOBYTE(v58) = 0;
        v62 = (unsigned __int8 *(*)(uint64_t))v46;
        v63 = (unsigned __int8 *(**)(uint64_t))&v58;
        v65 = (uint64_t)WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
        v66 = &v65;
        v67 = &v62;
        result = (unsigned int *)WTF::ParkingLot::unparkOneImpl();
      }
      v48 = __ldxr(v44);
      if (v48 == 1)
      {
        if (!__stlxr(0, v44))
          goto LABEL_105;
      }
      else
      {
        __clrex();
      }
      result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v44);
      goto LABEL_105;
    }
  }
  if (v40)
    goto LABEL_94;
LABEL_105:
  if (v31)
  {
    v49 = *((unsigned int *)v31 - 1);
    if ((_DWORD)v49)
    {
      for (i = 0; i != v49; ++i)
      {
        v51 = (unsigned int *)v31[i];
        if (v51 != (unsigned int *)-1)
        {
          v31[i] = 0;
          if (v51)
          {
            do
            {
              v52 = __ldaxr(v51);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v51));
            if (!v53)
            {
              atomic_store(1u, v51);
              WebCore::Database::~Database((WebCore::Database *)v51);
              WTF::fastFree(v54, v55);
            }
          }
        }
      }
    }
    return (unsigned int *)WTF::fastFree((WTF *)(v31 - 2), v39);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int **v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  WTF *v30;
  void *v31;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (unsigned int *)*a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (unsigned int **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v29 = v6 + 8 * v22;
        goto LABEL_37;
      }
      if (v15 == (unsigned int *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (unsigned int **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = (unsigned int *)*a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)result));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)result);
      WebCore::Database::~Database((WebCore::Database *)result);
      result = (uint64_t *)WTF::fastFree(v30, v31);
    }
  }
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_27;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_32:
      result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>>::rehash(v4, v27, v14);
      v14 = (unsigned int **)result;
      v23 = *v4;
      if (*v4)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_36;
    }
LABEL_27:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_32;
  }
LABEL_36:
  v29 = v23 + 8 * v26;
  v28 = 1;
LABEL_37:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v29;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

unsigned int **WTF::HashTable<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Database,WTF::RawPtrTraits<WebCore::Database>,WTF::DefaultRefDerefTraits<WebCore::Database>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  void *v30;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WebCore::Database::~Database((WebCore::Database *)v26);
              WTF::fastFree(v29, v30);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 32 * v5;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 24) = -1;
          v10 = *((unsigned int *)v9 + 6);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E336DDF8[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 24) = v10;
            v11 = *((unsigned int *)v9 + 6);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 6) = -1;
          v7 += 32;
          v9 = (WTF *)((char *)v9 + 32);
          v8 -= 32;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 v13;
  char v14;
  unsigned int *v15;
  unsigned int **v16;

  v13 = 0;
  v14 = 0;
  v1 = *(unsigned int *)(a1 + 24);
  v15 = &v12;
  if ((_DWORD)v1 == -1)
    v2 = -1;
  else
    v2 = v1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v12 = v4 + (v4 >> 11);
  if ((_DWORD)v1 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v11);
  }
  else
  {
    v16 = &v15;
    ((void (*)(unsigned int ***, uint64_t))off_1E336DE88[v1])(&v16, a1);
    v5 = v12;
    if (v14)
    {
      v10 = (v12 + v13) ^ ((v12 + v13) << 11);
      v5 = v10 + (v10 >> 17);
    }
    v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
    v8 = v7 ^ (v7 << 10);
    if (v8)
      return v8;
    else
      return 0x800000;
  }
}

void WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  char v33;
  char *v34;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v11 = 0;
    v12 = 0;
    v5 = v5;
    v28 = v5;
    v29 = v4;
    while (1)
    {
      v13 = v4 + 40 * v11;
      v14 = *(unsigned int *)(v13 + 24);
      if ((_DWORD)v14 == -1)
        break;
      v34 = &v33;
      if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v14])(&v34, v4 + 40 * v11) & 1) == 0)
      {
        if (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 40 * v11)))
        {
          v16 = *a1;
          v32 = v12;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v4 + 40 * v11);
          v19 = 0;
          while (1)
          {
            v20 = v18 & v17;
            v12 = v16 + 40 * (v18 & v17);
            v21 = *(unsigned int *)(v12 + 24);
            if ((_DWORD)v21 == -1)
              goto LABEL_34;
            v34 = &v33;
            v22 = ((uint64_t (*)(char **, uint64_t))off_1E336DE98[v21])(&v34, v16 + 40 * v20);
            v18 = ++v19 + v20;
            if (v22)
            {
              v23 = *(unsigned int *)(v12 + 24);
              if ((_DWORD)v23 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v23])(&v34, v16 + 40 * v20);
              *(_BYTE *)v12 = 0;
              *(_DWORD *)(v12 + 24) = -1;
              v24 = *(unsigned int *)(v13 + 24);
              if ((_DWORD)v24 == -1)
              {
                v4 = v29;
                *(_QWORD *)(v16 + 40 * v20 + 32) = *(_QWORD *)(v29 + 40 * v11 + 32);
              }
              else
              {
                ((void (*)(char **, uint64_t, uint64_t))off_1E336DDF8[v24])(&v34, v16 + 40 * v20, v13);
                *(_DWORD *)(v12 + 24) = v24;
                v25 = *(unsigned int *)(v13 + 24);
                v4 = v29;
                *(_QWORD *)(v16 + 40 * v20 + 32) = *(_QWORD *)(v29 + 40 * v11 + 32);
                if ((_DWORD)v25 != -1)
                  ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v25])(&v34, v13);
              }
              *(_DWORD *)(v13 + 24) = -1;
              if (v13 != a3)
                v12 = v32;
              v5 = v28;
              goto LABEL_29;
            }
          }
        }
        v15 = *(unsigned int *)(v13 + 24);
        if ((_DWORD)v15 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v15])(&v34, v4 + 40 * v11);
        *(_DWORD *)(v13 + 24) = -1;
      }
LABEL_29:
      if (++v11 == v5)
        goto LABEL_32;
    }
LABEL_34:
    v26 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v26, v27);
  }
  else if (v4)
  {
LABEL_32:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  WTF::StringImpl *v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = *((_DWORD *)v11 + 4);
          if (v14 < 0x100)
            v15 = WTF::StringImpl::hashSlowCase(v11);
          else
            v15 = v14 >> 8;
          v16 = 0;
          do
          {
            v17 = v15 & v13;
            v15 = ++v16 + v17;
          }
          while (*(_QWORD *)(v12 + 16 * v17));
          v18 = (_QWORD *)(v12 + 16 * v17);
          *v18 = 0;
          v19 = *(_OWORD *)v10;
          *v10 = 0;
          *(_OWORD *)v18 = v19;
          v20 = *v10;
          *v10 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v8);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::OriginLock,WTF::RawPtrTraits<WebCore::OriginLock>,WTF::DefaultRefDerefTraits<WebCore::OriginLock>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (WTF::StringImpl **)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = *((_DWORD *)v15 + 4);
          if (v23 < 0x100)
            v24 = WTF::StringImpl::hashSlowCase(v15);
          else
            v24 = v23 >> 8;
          v25 = 0;
          do
          {
            v26 = v24 & v22;
            v24 = ++v25 + v26;
          }
          while (*(_QWORD *)(v21 + 16 * v26));
          v27 = v21 + 16 * v26;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr((unsigned int *)v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, (unsigned int *)v28));
            if (!v30)
            {
              atomic_store(1u, (unsigned int *)v28);
              v40 = *(WTF::StringImpl **)(v28 + 8);
              *(_QWORD *)(v28 + 8) = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v10);
                else
                  *(_DWORD *)v40 -= 2;
              }
              WTF::fastFree((WTF *)v28, v10);
            }
          }
          v31 = *(WTF::StringImpl **)v27;
          *(_QWORD *)v27 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v10);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *v14;
          *v14 = 0;
          *(_QWORD *)v27 = v32;
          v33 = v6 + 16 * v11;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *(_QWORD *)(v27 + 8) = v34;
          v35 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr((unsigned int *)v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, (unsigned int *)v35));
            if (!v37)
            {
              atomic_store(1u, (unsigned int *)v35);
              v41 = *(WTF::StringImpl **)(v35 + 8);
              *(_QWORD *)(v35 + 8) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v10);
                else
                  *(_DWORD *)v41 -= 2;
              }
              WTF::fastFree((WTF *)v35, v10);
            }
          }
          v38 = *v14;
          *v14 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v10);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v14 == a3)
            v12 = v27;
        }
        else
        {
          v16 = v6 + 16 * v11;
          v17 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr((unsigned int *)v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, (unsigned int *)v17));
            if (!v19)
            {
              atomic_store(1u, (unsigned int *)v17);
              v39 = *(WTF::StringImpl **)(v17 + 8);
              *(_QWORD *)(v17 + 8) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, v10);
                else
                  *(_DWORD *)v39 -= 2;
              }
              WTF::fastFree((WTF *)v17, v10);
            }
          }
          v20 = *v14;
          *v14 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v10);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v14;
  char v15;
  uint64_t v17;
  char v18;
  char *v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2) & v5;
  v7 = (unsigned int *)(v2 + 40 * v6);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7) & 1) != 0)
  {
LABEL_22:
    if (*a1)
      return *a1 + 40 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  v8 = 1;
  while (1)
  {
    v9 = v7[6];
    if ((_DWORD)v9 == -1)
      break;
    v19 = &v18;
    if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v19, v7) & 1) == 0)
    {
      if (v7 == (unsigned int *)a2)
        return a2;
      v10 = v7[6];
      v11 = *(_DWORD *)(a2 + 24);
      v13 = v11 == (_DWORD)v10 && v11 != -1;
      if ((_DWORD)v10 == -1 || !v13)
      {
        v14 = v11 == -1;
        if ((_DWORD)v10 == -1)
          v15 = v14;
        else
          v15 = v13;
        if ((v15 & 1) != 0)
          return (uint64_t)v7;
      }
      else
      {
        v19 = &v18;
        if ((((uint64_t (*)(char **, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v10])(&v19, v7, a2) & 1) != 0)return (uint64_t)v7;
      }
    }
    v6 = (v6 + v8) & v5;
    v7 = (unsigned int *)(v2 + 40 * v6);
    ++v8;
    if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7))
      goto LABEL_22;
  }
  v17 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v17);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  uint64_t result;
  uint64_t v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v55;
  char v56;
  char *v57;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v51 = v4;
    v52 = v5;
    while (1)
    {
      v14 = v4 + 40 * v11;
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 == -1)
        break;
      v57 = &v56;
      if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v57, v4 + 40 * v11) & 1) == 0)
      {
        if (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 40 * v11)))
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v55 = v12;
          v21 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v4 + 40 * v11);
          v22 = 0;
          while (1)
          {
            v23 = v21 & v20;
            v24 = v19 + 40 * (v21 & v20);
            v25 = *(unsigned int *)(v24 + 24);
            if ((_DWORD)v25 == -1)
              goto LABEL_67;
            v57 = &v56;
            v26 = ((uint64_t (*)(char **, uint64_t))off_1E336DE98[v25])(&v57, v19 + 40 * v23);
            v21 = ++v22 + v23;
            if (v26)
            {
              v27 = v19 + 40 * v23;
              v30 = *(WTF::StringImpl ***)(v27 + 32);
              v28 = (_QWORD *)(v27 + 32);
              v29 = v30;
              v4 = v51;
              v12 = v55;
              if (v30)
              {
                v40 = *((unsigned int *)v29 - 1);
                if ((_DWORD)v40)
                {
                  v41 = v29;
                  do
                  {
                    v42 = *v41;
                    if (*v41 != (WTF::StringImpl *)-1)
                    {
                      *v41 = 0;
                      if (v42)
                      {
                        if (*(_DWORD *)v42 == 2)
                        {
                          v48 = v41;
                          v49 = v40;
                          WTF::StringImpl::destroy(v42, v8);
                          v41 = v48;
                          v40 = v49;
                        }
                        else
                        {
                          *(_DWORD *)v42 -= 2;
                        }
                      }
                    }
                    v41 += 2;
                    --v40;
                  }
                  while (v40);
                }
                WTF::fastFree((WTF *)(v29 - 2), v8);
              }
              v31 = *(unsigned int *)(v24 + 24);
              if ((_DWORD)v31 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v31])(&v57, v24);
              *(_BYTE *)v24 = 0;
              *(_DWORD *)(v24 + 24) = -1;
              v32 = *(unsigned int *)(v14 + 24);
              if ((_DWORD)v32 != -1)
              {
                ((void (*)(char **, uint64_t, uint64_t))off_1E336DDF8[v32])(&v57, v24, v14);
                *(_DWORD *)(v24 + 24) = v32;
              }
              v33 = v51 + 40 * v11;
              *v28 = 0;
              v34 = *(_QWORD *)(v33 + 32);
              *(_QWORD *)(v33 + 32) = 0;
              *v28 = v34;
              v35 = *(_QWORD *)(v33 + 32);
              if (v35)
              {
                v43 = *(unsigned int *)(v35 - 4);
                if ((_DWORD)v43)
                {
                  v44 = *(WTF::StringImpl ***)(v33 + 32);
                  do
                  {
                    v45 = *v44;
                    if (*v44 != (WTF::StringImpl *)-1)
                    {
                      *v44 = 0;
                      if (v45)
                      {
                        if (*(_DWORD *)v45 == 2)
                        {
                          v50 = v43;
                          WTF::StringImpl::destroy(v45, v8);
                          v43 = v50;
                        }
                        else
                        {
                          *(_DWORD *)v45 -= 2;
                        }
                      }
                    }
                    v44 += 2;
                    --v43;
                  }
                  while (v43);
                }
                WTF::fastFree((WTF *)(v35 - 16), v8);
              }
              v36 = *(unsigned int *)(v14 + 24);
              if ((_DWORD)v36 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v36])(&v57, v14);
              *(_DWORD *)(v14 + 24) = -1;
              if (v14 == a3)
                v12 = v24;
              v13 = v52;
              goto LABEL_32;
            }
          }
        }
        v16 = v4 + 40 * v11;
        v17 = *(_QWORD *)(v16 + 32);
        if (v17)
        {
          v37 = *(unsigned int *)(v17 - 4);
          if ((_DWORD)v37)
          {
            v38 = *(WTF::StringImpl ***)(v16 + 32);
            do
            {
              v39 = *v38;
              if (*v38 != (WTF::StringImpl *)-1)
              {
                *v38 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, v8);
                  else
                    *(_DWORD *)v39 -= 2;
                }
              }
              v38 += 2;
              --v37;
            }
            while (v37);
          }
          WTF::fastFree((WTF *)(v17 - 16), v8);
          v13 = v52;
        }
        v18 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v18 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v18])(&v57, v4 + 40 * v11);
        *(_DWORD *)(v14 + 24) = -1;
      }
LABEL_32:
      if (++v11 == v13)
        goto LABEL_65;
    }
LABEL_67:
    v47 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v47);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (v4)
    {
LABEL_65:
      WTF::fastFree((WTF *)(v4 - 16), v8);
      return v12;
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  int i;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl *)(v8 + 16 * (v11 & v9));
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (WTF::StringImpl *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v18 = *a2;
    *a2 = 0;
    result = *(WTF::StringImpl **)v15;
    *(_QWORD *)v15 = v18;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *((_DWORD *)v15 + 2) = *(_DWORD *)a3;
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *a1;
    if (*a1)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_25:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        v15 = result;
        v21 = *a1;
        if (*a1)
          v24 = *(unsigned int *)(v21 - 4);
        else
          v24 = 0;
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_25;
    }
    v25 = v21 + 16 * v24;
    v26 = 1;
    goto LABEL_31;
  }
  result = (WTF::StringImpl *)WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v27 = *a1;
  if (*a1)
    v28 = *(unsigned int *)(v27 - 4);
  else
    v28 = 0;
  v26 = 0;
  v25 = v27 + 16 * v28;
LABEL_31:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF::StringImpl *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(v14);
          else
            v18 = v17 >> 8;
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = v15 + 16 * v20;
          *(_QWORD *)v21 = 0;
          v22 = *v13;
          *v13 = 0;
          *(_QWORD *)v21 = v22;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v6 + 16 * v11 + 8);
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WTF *result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  uint64_t v9;

  if (result)
  {
    v4 = result;
    v5 = *((_DWORD *)result - 2);
    v6 = *((_DWORD *)*a2 + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = (WTF *)*((_QWORD *)v4 + 2 * v9);
      if (result != (WTF *)-1)
      {
        if (!result)
          return result;
        if ((WTF::equal(result, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    return (WTF *)((char *)v4 + 16 * v9);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::remove(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = (uint64_t *)result;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v4])(&v15, a2);
  *(_QWORD *)a2 = -1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v5 = *(WTF::StringImpl ***)(a2 + 32);
  if (v5)
  {
    v12 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v12)
    {
      v13 = v5;
      do
      {
        v14 = *v13;
        if (*v13 != (WTF::StringImpl *)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    result = WTF::fastFree((WTF *)(v5 - 2), (void *)a2);
  }
  ++*(_DWORD *)(*v3 - 16);
  v6 = *v3;
  if (*v3)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *v3;
  if (*v3)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashCountedSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v3, v10 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v14;
  char v15;
  uint64_t v17;
  char v18;
  char *v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2) & v5;
  v7 = (unsigned int *)(v2 + 56 * v6);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7) & 1) != 0)
  {
LABEL_22:
    if (*a1)
      return *a1 + 56 * *(unsigned int *)(*a1 - 4);
    return 0;
  }
  v8 = 1;
  while (1)
  {
    v9 = v7[6];
    if ((_DWORD)v9 == -1)
      break;
    v19 = &v18;
    if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v19, v7) & 1) == 0)
    {
      if (v7 == (unsigned int *)a2)
        return a2;
      v10 = v7[6];
      v11 = *(_DWORD *)(a2 + 24);
      v13 = v11 == (_DWORD)v10 && v11 != -1;
      if ((_DWORD)v10 == -1 || !v13)
      {
        v14 = v11 == -1;
        if ((_DWORD)v10 == -1)
          v15 = v14;
        else
          v15 = v13;
        if ((v15 & 1) != 0)
          return (uint64_t)v7;
      }
      else
      {
        v19 = &v18;
        if ((((uint64_t (*)(char **, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v10])(&v19, v7, a2) & 1) != 0)return (uint64_t)v7;
      }
    }
    v6 = (v6 + v8) & v5;
    v7 = (unsigned int *)(v2 + 56 * v6);
    ++v8;
    if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v7))
      goto LABEL_22;
  }
  v17 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v17);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  _QWORD *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WTF *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  WTF::StringImpl **v53;
  const WTF::StringImpl *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;

  v4 = *a1;
  v59 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 56 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v14 = v59;
    while (1)
    {
      v15 = v14 + 56 * v11;
      v16 = *(unsigned int *)(v15 + 24);
      if ((_DWORD)v16 == -1)
        break;
      v62 = &v61;
      if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v62, v14 + 56 * v11) & 1) == 0)
      {
        if (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v14 + 56 * v11)))
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v14 + 56 * v11);
          v24 = 0;
          while (1)
          {
            v25 = v23 & v22;
            v26 = v21 + 56 * (v23 & v22);
            v27 = *(unsigned int *)(v26 + 24);
            if ((_DWORD)v27 == -1)
              goto LABEL_63;
            v62 = &v61;
            v28 = ((uint64_t (*)(char **, uint64_t))off_1E336DE98[v27])(&v62, v21 + 56 * v25);
            v23 = ++v24 + v25;
            if (v28)
            {
              v60 = v12;
              v29 = v21 + 56 * v25;
              v32 = *(WTF **)(v29 + 32);
              v31 = (_QWORD *)(v29 + 32);
              v30 = v32;
              if (v32)
              {
                v33 = *(unsigned int *)(v21 + 56 * v25 + 40);
                if ((_DWORD)v33)
                {
                  v34 = (WTF::StringImpl **)v30;
                  do
                  {
                    v35 = *v34;
                    *v34 = 0;
                    if (v35)
                    {
                      if (*(_DWORD *)v35 == 2)
                      {
                        v56 = v30;
                        WTF::StringImpl::destroy(v35, v8);
                        v30 = v56;
                      }
                      else
                      {
                        *(_DWORD *)v35 -= 2;
                      }
                    }
                    ++v34;
                    --v33;
                  }
                  while (v33);
                }
                WTF::fastFree(v30, v8);
              }
              v37 = *(unsigned int *)(v26 + 24);
              if ((_DWORD)v37 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v37])(&v62, v21 + 56 * v25);
              *(_BYTE *)v26 = 0;
              *(_DWORD *)(v26 + 24) = -1;
              v38 = *(unsigned int *)(v15 + 24);
              if ((_DWORD)v38 != -1)
              {
                ((void (*)(char **, uint64_t, uint64_t))off_1E336DDF8[v38])(&v62, v21 + 56 * v25, v15);
                *(_DWORD *)(v26 + 24) = v38;
              }
              v14 = v59;
              v39 = v59 + 56 * v11;
              v40 = v21 + 56 * v25;
              *v31 = 0;
              v31[1] = 0;
              *(_QWORD *)((char *)v31 + 13) = 0;
              v42 = *(_DWORD *)(v39 + 40);
              v41 = (unsigned int *)(v39 + 40);
              v43 = *((_QWORD *)v41 - 1);
              *((_QWORD *)v41 - 1) = 0;
              *v31 = v43;
              *v41 = 0;
              *(_DWORD *)(v40 + 40) = v42;
              v44 = v41[1];
              v41[1] = 0;
              *(_DWORD *)(v40 + 44) = v44;
              v45 = v41[2];
              v41[2] = 0;
              *(_DWORD *)(v40 + 48) = v45;
              LOBYTE(v45) = *((_BYTE *)v41 + 12);
              *((_BYTE *)v41 + 12) = 0;
              *(_BYTE *)(v40 + 52) = v45;
              v46 = (WTF *)*((_QWORD *)v41 - 1);
              v12 = v60;
              v13 = v5;
              if (v46)
              {
                v47 = *v41;
                if ((_DWORD)v47)
                {
                  v48 = (WTF::StringImpl **)*((_QWORD *)v41 - 1);
                  do
                  {
                    v49 = *v48;
                    *v48 = 0;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                        WTF::StringImpl::destroy(v49, v8);
                      else
                        *(_DWORD *)v49 -= 2;
                    }
                    ++v48;
                    --v47;
                  }
                  while (v47);
                }
                WTF::fastFree(v46, v8);
                v14 = v59;
              }
              v50 = *(unsigned int *)(v15 + 24);
              if ((_DWORD)v50 != -1)
                ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v50])(&v62, v15);
              *(_DWORD *)(v15 + 24) = -1;
              if (v15 == a3)
                v12 = v26;
              goto LABEL_58;
            }
          }
        }
        v17 = *(WTF **)(v14 + 56 * v11 + 32);
        if (v17)
        {
          v18 = *(unsigned int *)(v14 + 56 * v11 + 40);
          if ((_DWORD)v18)
          {
            v19 = *(WTF::StringImpl ***)(v14 + 56 * v11 + 32);
            do
            {
              v20 = *v19;
              *v19 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v8);
                else
                  *(_DWORD *)v20 -= 2;
              }
              ++v19;
              --v18;
            }
            while (v18);
          }
          WTF::fastFree(v17, v8);
        }
        v36 = *(unsigned int *)(v15 + 24);
        if ((_DWORD)v36 != -1)
          ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v36])(&v62, v14 + 56 * v11);
        *(_DWORD *)(v15 + 24) = -1;
      }
LABEL_58:
      if (++v11 == v13)
        goto LABEL_61;
    }
LABEL_63:
    v52 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v52, v53, v54, v55);
  }
  else
  {
    v12 = 0;
    result = 0;
    v14 = v59;
    if (v59)
    {
LABEL_61:
      WTF::fastFree((WTF *)(v14 - 16), v8);
      return v12;
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  WTF **v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;
  WTF *v22;
  int i;
  int v24;
  uint64_t *v25;
  unsigned int v26;
  int v27;
  WTF *v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;

  v8 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  if (10 * v7 >= (unint64_t)(9 * v8) || *(_BYTE *)(a1 + 20) && v8 <= 2 * (int)v7)
  {
    if ((_DWORD)v8)
      v31 = 2 * v8;
    else
      v31 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v31);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  v9 = v8 - 1;
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *((_DWORD *)*a2 + 4);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v12 = v11 >> 8;
  v13 = (v12 ^ v10) & v9;
  v14 = (WTF **)(*(_QWORD *)a1 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v32 = a4;
    v16 = 0;
    while (1)
    {
      v17 = *((_DWORD *)v15 + 4);
      v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(v15) : v17 >> 8;
      v19 = (v13 + v8 - ((v18 ^ v10) & v9)) & v9;
      if (v16 > v19)
        break;
      if (v18 == v12)
      {
        result = WTF::equal(*v14, *a2, a3);
        v21 = *(_QWORD *)a1;
        if ((result & 1) != 0)
        {
          v30 = 0;
          a4 = v32;
          goto LABEL_33;
        }
      }
      else
      {
        v21 = *(_QWORD *)a1;
      }
      v13 = (v13 + 1) & v9;
      ++v16;
      v14 = (WTF **)(v21 + 8 * v13);
      v15 = *v14;
      if (!*v14)
      {
        if (v16 >= 0x80)
          *(_BYTE *)(a1 + 20) = 1;
        a4 = v32;
        goto LABEL_20;
      }
    }
    if (v16 >= 0x80)
      *(_BYTE *)(a1 + 20) = 1;
    v22 = *v14;
    *v14 = 0;
    WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(v14, (WTF::StringImpl *)a2);
    for (i = v13 + 1; ; i = v24 + 1)
    {
      v24 = i & v9;
      v25 = (uint64_t *)(*(_QWORD *)a1 + 8 * (i & v9));
      result = *v25;
      if (!*v25)
        break;
      v26 = *(_DWORD *)(result + 16);
      if (v26 < 0x100)
        v27 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        v27 = v26 >> 8;
      if (++v19 > ((v24 + (_DWORD)v8 - ((v27 ^ v10) & v9)) & v9))
      {
        v28 = (WTF *)*v25;
        *v25 = (uint64_t)v22;
        v22 = v28;
        v19 = (v24 + v8 - ((v27 ^ v10) & v9)) & v9;
      }
    }
    *v25 = (uint64_t)v22;
    a4 = v32;
  }
  else
  {
LABEL_20:
    result = (uint64_t)WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(v14, (WTF::StringImpl *)a2);
  }
  ++*(_DWORD *)(a1 + 12);
  v21 = *(_QWORD *)a1;
  v30 = 1;
LABEL_33:
  v29 = v21 + 8 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v30;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  uint64_t result;
  int v12;
  WTF::StringImpl **v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v4 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = -1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)a2 = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = v5 - 1;
  v8 = (unint64_t)a2 - *(_QWORD *)a1;
  v9 = ((v8 >> 3) + 1) & (v5 - 1);
  v10 = (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v9);
  result = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
  {
    v12 = *(_DWORD *)(a1 + 16);
    v13 = (WTF::StringImpl **)(*(_QWORD *)a1 + (v8 & 0x7FFFFFFF8));
    do
    {
      v14 = *(_DWORD *)(result + 16);
      if (v14 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v14 >> 8;
      if (((v9 + v5 - ((result ^ v12) & v7)) & v7) == 0)
        break;
      WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>(v13, v10);
      v16 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      *(_QWORD *)v10 = 0;
      v13 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v9);
      v9 = (v9 + 1) & v7;
      v10 = (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v9);
      result = *(_QWORD *)v10;
    }
    while (*(_QWORD *)v10);
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
  }
  if (v5 >= 9 && 6 * v6 < v5)
    return WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v5 >> 1);
  return result;
}

WTF **WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  if (*a1)
  {
    v6 = *((_DWORD *)a1 + 2);
    v7 = v6 - 1;
    v8 = *((_DWORD *)a1 + 4);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 < 0x100)
    {
      v10 = WTF::StringImpl::hashSlowCase(*a2);
      v3 = *a1;
    }
    else
    {
      v10 = v9 >> 8;
    }
    v11 = (v10 ^ v8) & v7;
    v12 = (WTF **)(v3 + 8 * v11);
    v13 = *v12;
    if (*v12)
    {
      v14 = -1;
      do
      {
        v15 = *((_DWORD *)v13 + 4);
        v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
        if (++v14 > ((v11 + v6 - ((v16 ^ v8) & v7)) & v7))
          break;
        if (v16 == v10 && (WTF::equal(*v12, *a2, a3) & 1) != 0)
          return v12;
        v11 = (v11 + 1) & v7;
        v12 = (WTF **)(*a1 + 8 * v11);
        v13 = *v12;
      }
      while (*v12);
    }
  }
  return 0;
}

char *WTF::Vector<std::pair<WebCore::SecurityOriginData,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1955B27A4);
      }
      v17 = (WTF *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      v18 = 48 * v16;
      v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::pair<WebCore::SecurityOriginData,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1955B27ACLL);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<WebCore::SecurityOriginData,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

WTF *WTF::VectorMover<false,std::pair<WebCore::SecurityOriginData,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(WTF *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 24) = -1;
      v8 = *((unsigned int *)v7 + 6);
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(char *, uint64_t, WTF *))off_1E336DDF8[v8])(&v15, a3, v7);
        *(_DWORD *)(a3 + 24) = v8;
      }
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v9 = *((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 10);
      *((_DWORD *)v7 + 10) = 0;
      *(_DWORD *)(a3 + 40) = v9;
      LODWORD(v9) = *((_DWORD *)v7 + 11);
      *((_DWORD *)v7 + 11) = 0;
      *(_DWORD *)(a3 + 44) = v9;
      v10 = *((unsigned int *)v7 + 11);
      if ((_DWORD)v10)
      {
        v12 = (WTF::StringImpl **)*((_QWORD *)v7 + 4);
        v13 = 8 * v10;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, a2);
            else
              *(_DWORD *)v14 -= 2;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      result = (WTF *)*((_QWORD *)v7 + 4);
      if (result)
      {
        *((_QWORD *)v7 + 4) = 0;
        *((_DWORD *)v7 + 10) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v11 = *((unsigned int *)v7 + 6);
      if ((_DWORD)v11 != -1)
        result = (WTF *)((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v11])(&v16, v7);
      *((_DWORD *)v7 + 6) = -1;
      a3 += 48;
      v7 = (WTF *)((char *)v7 + 48);
    }
    while (v7 != a2);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WebCore::SecurityOriginData,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = a2;
  if (qword_1ECE82140 > a2 || qword_1ECE82140 + 40 * (unint64_t)dword_1ECE8214C <= a2)
  {
    v6 = dword_1ECE82148 + ((unint64_t)dword_1ECE82148 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a1)
      a1 = v7;
    WTF::Vector<std::pair<WebCore::SecurityOriginData,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
  }
  else
  {
    v3 = a2 - qword_1ECE82140;
    v4 = dword_1ECE82148 + ((unint64_t)dword_1ECE82148 >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 > a1)
      a1 = v5;
    WTF::Vector<std::pair<WebCore::SecurityOriginData,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
    return qword_1ECE82140 + v3;
  }
  return v2;
}

unint64_t WTF::Vector<std::pair<WebCore::SecurityOriginData,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unint64_t result)
{
  WTF *v1;
  uint64_t v2;
  int v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (dword_1ECE82148 < result)
  {
    if (result >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v1 = (WTF *)qword_1ECE82140;
      v2 = dword_1ECE8214C;
      v3 = 40 * result;
      result = WTF::fastMalloc((WTF *)(40 * result));
      dword_1ECE82148 = (v3 & 0xFFFFFFF8) / 0x28;
      qword_1ECE82140 = result;
      if ((_DWORD)v2)
      {
        v5 = result;
        v6 = 0;
        v7 = 40 * v2;
        do
        {
          v8 = v5 + v6;
          v9 = (char *)v1 + v6;
          *(_BYTE *)v8 = 0;
          *(_DWORD *)(v8 + 24) = -1;
          v10 = *(unsigned int *)((char *)v1 + v6 + 24);
          if ((_DWORD)v10 != -1)
          {
            ((void (*)(char *, unint64_t, char *))off_1E336DDF8[v10])(&v13, v5 + v6, (char *)v1 + v6);
            *(_DWORD *)(v8 + 24) = v10;
          }
          v11 = *((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          *(_QWORD *)(v8 + 32) = v11;
          result = *((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
            else
              *(_DWORD *)result -= 2;
          }
          v12 = *((unsigned int *)v9 + 6);
          if ((_DWORD)v12 != -1)
            result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v12])(&v14, (char *)v1 + v6);
          *((_DWORD *)v9 + 6) = -1;
          v6 += 40;
        }
        while (v7 != v6);
      }
      if (v1)
      {
        if ((WTF *)qword_1ECE82140 == v1)
        {
          qword_1ECE82140 = 0;
          dword_1ECE82148 = 0;
        }
        return WTF::fastFree(v1, v4);
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::DatabaseTracker::scheduleForNotification(void)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF *v4;
  unsigned int v5;
  int v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  char v12;

  v2 = WebCore::staticTracker;
  if (!WebCore::staticTracker)
  {
    v2 = WTF::fastMalloc((WTF *)0x88);
    *(_BYTE *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = -1;
    *(_WORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 46) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_BYTE *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 76) = 1;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    WTF::String::isolatedCopy();
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    WebCore::staticTracker = v2;
  }
  if (__ldaxr((unsigned __int8 *)&unk_1ECE82139))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&unk_1ECE82139))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](&unk_1ECE82139);
LABEL_7:
  if ((byte_1ECE8213A & 1) != 0)
  {
    v4 = (WTF *)qword_1ECE82140;
    v5 = dword_1ECE8214C;
  }
  else
  {
    v5 = 0;
    v4 = 0;
    byte_1ECE8213A = 1;
  }
  qword_1ECE82140 = 0;
  *(_QWORD *)&dword_1ECE82148 = 0;
  _MergedGlobals_150 = 0;
  v6 = __ldxr((unsigned __int8 *)&unk_1ECE82139);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)&unk_1ECE82139))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)&unk_1ECE82139);
  if (*(_QWORD *)(v2 + 104))
  {
    if (!v5)
      goto LABEL_28;
    v7 = v4;
    do
    {
      (*(void (**)(_QWORD, WTF *, uint64_t))(**(_QWORD **)(v2 + 104) + 24))(*(_QWORD *)(v2 + 104), v7, (uint64_t)v7 + 32);
      v7 = (WTF *)((char *)v7 + 40);
    }
    while (v7 != (WTF *)((char *)v4 + 40 * v5));
  }
  if (v5)
  {
    v8 = 40 * v5;
    v9 = v4;
    do
    {
      v10 = (WTF::StringImpl *)*((_QWORD *)v9 + 4);
      *((_QWORD *)v9 + 4) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = *((unsigned int *)v9 + 6);
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v11])(&v12, v9);
      *((_DWORD *)v9 + 6) = -1;
      v9 = (WTF *)((char *)v9 + 40);
      v8 -= 40;
    }
    while (v8);
  }
LABEL_28:
  if (v4)
    WTF::fastFree(v4, a2);
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,std::variant<decltype(nullptr),WTF::String,double>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::KeyValuePair<WTF::String,std::variant<decltype(nullptr),WTF::String,double>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::KeyValuePair<WTF::String,std::variant<decltype(nullptr),WTF::String,double>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::KeyValuePair<WTF::String,std::variant<decltype(nullptr),WTF::String,double>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  char v16;
  char v17;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      v15 = v2;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 24 * v4;
        do
        {
          v10 = &v7[v8 / 4];
          v11 = (char *)v3 + v8;
          v12 = *(_QWORD *)((char *)v3 + v8);
          *(_QWORD *)((char *)v3 + v8) = 0;
          *(_QWORD *)v10 = v12;
          LOBYTE(v7[v8 / 4 + 2]) = 0;
          v6 = (WTF::StringImpl *)&v7[v8 / 4 + 2];
          v10[4] = -1;
          v13 = *(unsigned int *)((char *)v3 + v8 + 16);
          if ((_DWORD)v13 != -1)
          {
            ((void (*)(char *, WTF::StringImpl *, char *))off_1E336DE48[v13])(&v16, v6, v11 + 8);
            v10[4] = v13;
            v14 = *((unsigned int *)v11 + 4);
            if ((_DWORD)v14 != -1)
              off_1E336DE18[v14](&v17, v11 + 8);
          }
          *((_DWORD *)v11 + 4) = -1;
          result = *(unsigned int **)((char *)v3 + v8);
          *(_QWORD *)((char *)v3 + v8) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v8 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v15 == v3)
        {
          *(_QWORD *)v15 = 0;
          v15[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::SQLCallbackWrapper<WebCore::SQLStatementCallback>::clear(void)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  int v8;

  v3 = *(unsigned int **)(a1 + 8);
  v4 = v3 + 4;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 4);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = *(unsigned int **)(a1 + 16);
  v8 = *((unsigned __int8 *)result + 274);
  if (*((_BYTE *)result + 274))
  {
    if (v8 == 1)
    {
      if (result[78] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
      else
        --result[78];
    }
    else if (v8 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(result + 78);
    }
  }
  else if (*(result - 42) == 2)
  {
    if ((*((_WORD *)result - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(result - 48), a2);
  }
  else
  {
    *(result - 42) -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::SQLCallbackWrapper<WebCore::SQLStatementErrorCallback>::clear(void)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  int v8;

  v3 = *(unsigned int **)(a1 + 8);
  v4 = v3 + 4;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 4);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = *(unsigned int **)(a1 + 16);
  v8 = *((unsigned __int8 *)result + 274);
  if (*((_BYTE *)result + 274))
  {
    if (v8 == 1)
    {
      if (result[78] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
      else
        --result[78];
    }
    else if (v8 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(result + 78);
    }
  }
  else if (*(result - 42) == 2)
  {
    if ((*((_WORD *)result - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(result - 48), a2);
  }
  else
  {
    *(result - 42) -= 2;
  }
  return result;
}

WebCore::SQLStatement *WTF::Deque<std::unique_ptr<WebCore::SQLStatement>,0ul>::destroyAll(WebCore::SQLStatement *result, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  WebCore::SQLStatement **v4;
  WebCore::SQLStatement *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WebCore::SQLStatement **v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  WebCore::SQLStatement **v14;
  uint64_t v15;
  WTF *v16;
  void *v17;

  v2 = *(_QWORD *)result;
  v3 = *((_QWORD *)result + 1);
  v4 = (WebCore::SQLStatement **)*((_QWORD *)result + 2);
  if (*(_QWORD *)result <= v3)
  {
    if (*(_QWORD *)result != v3)
    {
      v14 = &v4[v2];
      v15 = 8 * v3 - 8 * v2;
      do
      {
        result = *v14;
        *v14 = 0;
        if (result)
        {
          WebCore::SQLStatement::~SQLStatement(result, a2);
          result = (WebCore::SQLStatement *)WTF::fastFree(v16, v17);
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else
  {
    v5 = result;
    if (v3)
    {
      v6 = 8 * v3;
      do
      {
        result = *v4;
        *v4 = 0;
        if (result)
        {
          WebCore::SQLStatement::~SQLStatement(result, a2);
          result = (WebCore::SQLStatement *)WTF::fastFree(v7, v8);
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      v4 = (WebCore::SQLStatement **)*((_QWORD *)v5 + 2);
      v2 = *(_QWORD *)v5;
    }
    v9 = *((unsigned int *)v5 + 6);
    if (v2 != v9)
    {
      v10 = &v4[v2];
      v11 = 8 * v9 - 8 * v2;
      do
      {
        result = *v10;
        *v10 = 0;
        if (result)
        {
          WebCore::SQLStatement::~SQLStatement(result, a2);
          result = (WebCore::SQLStatement *)WTF::fastFree(v12, v13);
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SQLTransaction::callErrorCallbackDueToInterruption(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E336DF40;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SQLTransaction::callErrorCallbackDueToInterruption(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336DF40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SQLTransaction::callErrorCallbackDueToInterruption(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = *(_QWORD *)(a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = 0x100000001;
  WTF::String::isolatedCopy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 40))(v1, v2);
  do
  {
    v4 = __ldaxr((unsigned int *)v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v2));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v2);
    v7 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    WTF::fastFree((WTF *)v2, v3);
  }
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::SQLCallbackWrapper<WebCore::SQLTransactionCallback>::clear(void)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  int v8;

  v3 = *(unsigned int **)(a1 + 8);
  v4 = v3 + 4;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 4);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = *(unsigned int **)(a1 + 16);
  v8 = *((unsigned __int8 *)result + 274);
  if (*((_BYTE *)result + 274))
  {
    if (v8 == 1)
    {
      if (result[78] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
      else
        --result[78];
    }
    else if (v8 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(result + 78);
    }
  }
  else if (*(result - 42) == 2)
  {
    if ((*((_WORD *)result - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(result - 48), a2);
  }
  else
  {
    *(result - 42) -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::SQLCallbackWrapper<WebCore::VoidCallback>::clear(void)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, void *a2)
{
  _DWORD *v3;
  unsigned int *result;
  int v5;

  v3 = *(_DWORD **)(a1 + 8);
  if (v3[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  else
    --v3[4];
  result = *(unsigned int **)(a1 + 16);
  v5 = *((unsigned __int8 *)result + 274);
  if (*((_BYTE *)result + 274))
  {
    if (v5 == 1)
    {
      if (result[78] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
      else
        --result[78];
    }
    else if (v5 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(result + 78);
    }
  }
  else if (*(result - 42) == 2)
  {
    if ((*((_WORD *)result - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(result - 48), a2);
  }
  else
  {
    *(result - 42) -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::SQLCallbackWrapper<WebCore::SQLTransactionErrorCallback>::clear(void)::{lambda(WebCore::ScriptExecutionContext &)#1},void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *result;
  int v8;

  v3 = *(unsigned int **)(a1 + 8);
  v4 = v3 + 4;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v3 + 4);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = *(unsigned int **)(a1 + 16);
  v8 = *((unsigned __int8 *)result + 274);
  if (*((_BYTE *)result + 274))
  {
    if (v8 == 1)
    {
      if (result[78] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
      else
        --result[78];
    }
    else if (v8 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(result + 78);
    }
  }
  else if (*(result - 42) == 2)
  {
    if ((*((_WORD *)result - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(result - 48), a2);
  }
  else
  {
    *(result - 42) -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SQLTransaction::deliverTransactionErrorCallback(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;
  uint64_t v12;

  *a1 = &off_1E336DFE0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v11 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          v12 = v3;
          WTF::StringImpl::destroy(v11, a2);
          v3 = v12;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    v7 = v6 + 4;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SQLTransaction::deliverTransactionErrorCallback(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E336DFE0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v11 = *(WTF::StringImpl **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          v12 = v3;
          WTF::StringImpl::destroy(v11, a2);
          v3 = v12;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    v7 = v6 + 4;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SQLTransaction::deliverTransactionErrorCallback(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SQLTransaction::deliverSuccessCallback(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E336E008;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SQLTransaction::deliverSuccessCallback(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336E008;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SQLTransaction::deliverSuccessCallback(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void WebCore::SQLTransactionBackend::~SQLTransactionBackend(WebCore::SQLTransactionBackend *this)
{
  *(_QWORD *)this = &off_1E336E030;
}

{
  *(_QWORD *)this = &off_1E336E030;
  JUMPOUT(0x19AEA7644);
}

unsigned int *WebCore::SQLTransactionBackend::doCleanup(WebCore::SQLTransactionBackend *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::FileSystemImpl *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  WebCore::SQLiteTransaction *v17;
  WTF *v18;
  void *v19;
  unsigned int *result;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl *v25;

  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 200);
  if (!v4)
    goto LABEL_11;
  v5 = (WTF::FileSystemImpl *)*(unsigned int *)(v4 + 20);
  if ((_DWORD)v5 != -1)
  {
    WTF::FileSystemImpl::unlockAndCloseFile(v5);
    *(_DWORD *)(v4 + 20) = -1;
    v6 = (unsigned __int8 *)(v4 + 16);
    v7 = __ldxr((unsigned __int8 *)(v4 + 16));
    if (v7 == 1)
    {
      if (!__stlxr(0, v6))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
LABEL_8:
  v8 = *(_QWORD *)(v3 + 200);
  *(_QWORD *)(v3 + 200) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v25 = *(WTF::StringImpl **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
LABEL_11:
  v11 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 149);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_15:
  v13 = *((_QWORD *)this + 2);
  WTF::Deque<std::unique_ptr<WebCore::SQLStatement>,0ul>::destroyAll((WebCore::SQLStatement *)(v13 + 152), a2);
  *(_QWORD *)(v13 + 152) = 0;
  *(_QWORD *)(v13 + 160) = 0;
  v15 = *(WTF **)(v13 + 168);
  if (v15)
  {
    *(_QWORD *)(v13 + 168) = 0;
    *(_DWORD *)(v13 + 176) = 0;
    WTF::fastFree(v15, v14);
  }
  v16 = *((_QWORD *)this + 2);
  v17 = *(WebCore::SQLiteTransaction **)(v16 + 192);
  if (v17)
  {
    *(_QWORD *)(v16 + 192) = 0;
    WebCore::SQLiteTransaction::~SQLiteTransaction(v17);
    WTF::fastFree(v18, v19);
    v16 = *((_QWORD *)this + 2);
  }
  if (*(_BYTE *)(v16 + 146))
  {
    WebCore::SQLTransactionCoordinator::releaseLock(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 32) + 32) + 88), (WebCore::SQLTransaction *)v16);
    v16 = *((_QWORD *)this + 2);
  }
  result = *(unsigned int **)(v16 + 104);
  *(_QWORD *)(v16 + 104) = 0;
  if (result)
  {
    v21 = result + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v24 = __ldxr(v11);
  if (v24 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  if (__stlxr(0, v11))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  return result;
}

uint64_t WebCore::SQLTransactionCoordinator::releaseLock(uint64_t this, WebCore::SQLTransaction *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SQLTransactionCoordinator::CoordinationInfo *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WebCore::SQLTransaction *v28;
  int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  char v46;
  _BYTE v47[24];
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 8))
    return this;
  v3 = (uint64_t *)this;
  v4 = (_QWORD *)*((_QWORD *)a2 + 3);
  if (WTF::isMainThread((WTF *)this))
  {
    v5 = v4[2];
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4[4] + 32) + 8);
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7)
      v7 = WTF::Thread::initializeCurrentTLS(0);
    if (v6 != v7)
    {
      this = 777;
      __break(0xC471u);
      return this;
    }
    v5 = v4[3];
  }
  v47[0] = 0;
  v48 = -1;
  v8 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v8])(&v45, v47, v5 + 8);
    v48 = v8;
  }
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)v47, &v45);
  if (v48 != -1)
    ((void (*)(char *, _BYTE *))off_1E336E378[v48])(&v46, v47);
  v11 = *v3;
  if (!*v3)
    goto LABEL_23;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = *((_DWORD *)v45 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(v45);
  else
    v14 = v13 >> 8;
  for (i = 0; ; v14 = i + v16)
  {
    v16 = v14 & v12;
    v17 = v11 + 56 * (v14 & v12);
    v18 = *(WTF **)v17;
    if (*(_QWORD *)v17 == -1)
      goto LABEL_20;
    if (!v18)
      break;
    if ((WTF::equal(v18, v45, v10) & 1) != 0)
      goto LABEL_24;
LABEL_20:
    ++i;
  }
  if (*v3)
  {
    v17 = *v3 + 56 * *(unsigned int *)(*v3 - 4);
    goto LABEL_24;
  }
LABEL_23:
  v17 = 0;
LABEL_24:
  v19 = (uint64_t *)(v17 + 8);
  if (*((_BYTE *)a2 + 147))
  {
    v22 = *(_QWORD *)(v17 + 40);
    v21 = (uint64_t *)(v17 + 40);
    v20 = v22;
    if (v22)
    {
      v23 = *(_DWORD *)(v20 - 8);
      v24 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
      v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
      v27 = v23 & ((v26 >> 31) ^ v26);
      v28 = *(WebCore::SQLTransaction **)(v20 + 8 * v27);
      if (v28 != a2)
      {
        v29 = 1;
        while (v28)
        {
          v27 = ((_DWORD)v27 + v29) & v23;
          v28 = *(WebCore::SQLTransaction **)(v20 + 8 * v27);
          ++v29;
          if (v28 == a2)
            goto LABEL_37;
        }
        v27 = *(unsigned int *)(v20 - 4);
      }
LABEL_37:
      if (v27 != *(_DWORD *)(v20 - 4))
      {
        v34 = *(unsigned int **)(v20 + 8 * v27);
        *(_QWORD *)(v20 + 8 * v27) = -1;
        if (v34)
        {
          v35 = v34 + 4;
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            atomic_store(1u, v34 + 4);
            (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
          }
        }
        ++*(_DWORD *)(*v21 - 16);
        v38 = *v21;
        if (*v21)
          v39 = *(_DWORD *)(v38 - 12) - 1;
        else
          v39 = -1;
        *(_DWORD *)(v38 - 12) = v39;
        v40 = *v21;
        if (*v21)
        {
          v41 = 6 * *(_DWORD *)(v40 - 12);
          v42 = *(_DWORD *)(v40 - 4);
          if (v41 < v42 && v42 >= 9)
            WTF::HashTable<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>>::rehash(v21, v42 >> 1);
        }
      }
    }
  }
  else
  {
    v30 = *(unsigned int **)(v17 + 48);
    *(_QWORD *)(v17 + 48) = 0;
    if (v30)
    {
      v31 = v30 + 4;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 4);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
  }
  WebCore::SQLTransactionCoordinator::processPendingTransactions(v19, v9);
  this = (uint64_t)v45;
  v45 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v44);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t (*WebCore::SQLTransactionBackend::stateFunctionFor(uint64_t a1, int a2))(WebCore::SQLTransactionBackend *__hidden this)
{
  return WebCore::SQLTransactionBackend::stateFunctionFor(WebCore::SQLTransactionState)::stateFunctions[2 * a2];
}

WTF::StringImpl *WebCore::SQLTransactionBackend::acquireLock(WebCore::SQLTransactionBackend *this)
{
  return WebCore::SQLTransactionCoordinator::acquireLock(*(WebCore::SQLTransactionCoordinator **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24)+ 32)+ 32)+ 88), *((WebCore::SQLTransaction **)this + 2));
}

uint64_t WebCore::SQLTransactionBackend::openTransactionAndPreflight(WebCore::SQLTransaction **this)
{
  return WebCore::SQLTransaction::openTransactionAndPreflight(this[2]);
}

uint64_t WebCore::SQLTransactionBackend::runStatements(WebCore::SQLTransaction **this, void *a2)
{
  return WebCore::SQLTransaction::runStatements(this[2], a2);
}

uint64_t WebCore::SQLTransactionBackend::cleanupAndTerminate(WebCore::SQLTransactionBackend *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t result;
  int v7;

  v2 = *((_QWORD *)this + 2);
  WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)(v2 + 208), a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = (unsigned __int8 *)(v3 + 200);
  if (__ldaxr((unsigned __int8 *)(v3 + 200)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3 + 200);
LABEL_5:
  *(_BYTE *)(v3 + 201) = 0;
  result = WebCore::Database::scheduleTransaction(v3);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 200));
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 200));
  return result;
}

uint64_t WebCore::SQLTransactionBackend::cleanupAfterTransactionErrorCallback(WebCore::SQLTransaction **this, WTF::StringImpl *a2)
{
  return WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback(this[2], a2);
}

unsigned int *WebCore::SQLTransactionBackend::computeNextStateAndCleanupIfNeeded(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  WebCore::SQLiteDatabaseTracker *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;

  v1 = this;
  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 24) + 92))
  {
    this[2] = this[3];
    this[3] = 1;
    return this;
  }
  if (this[2])
  {
    this[2] = 0;
    v3 = *(WebCore::SQLiteDatabaseTracker **)(v2 + 192);
    if (!v3)
      goto LABEL_11;
    if (*((_BYTE *)v3 + 8))
    {
      *((_BYTE *)v3 + 8) = 0;
      *(_BYTE *)(*(_QWORD *)v3 + 20) = 0;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v3);
      v4 = *((_QWORD *)v1 + 2);
      v3 = *(WebCore::SQLiteDatabaseTracker **)(v4 + 192);
      *(_QWORD *)(v4 + 192) = 0;
      if (!v3)
      {
LABEL_11:
        v7 = *((_QWORD *)v1 + 2);
        *(_DWORD *)(v7 + 12) = 0;
        v8 = *(unsigned int **)(v7 + 24);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (unsigned int *)(v7 + 16);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v12 = &off_1E336DC58;
        v12[1] = v8;
        v12[2] = v8;
        v12[3] = v7;
        v14 = v12;
        WTF::callOnMainThread();
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        return WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)v1, v13);
      }
    }
    else
    {
      *(_QWORD *)(v2 + 192) = 0;
    }
    WebCore::SQLiteTransaction::~SQLiteTransaction(v3);
    WTF::fastFree(v5, v6);
    goto LABEL_11;
  }
  return this;
}

uint64_t *WebCore::SQLTransactionCoordinator::processPendingTransactions(uint64_t *this, WebCore::SQLTransactionCoordinator::CoordinationInfo *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;

  if (!this[5])
  {
    v2 = this;
    if (*this != this[1])
    {
      v3 = *(_QWORD *)(this[2] + 8 * *this);
      if (v3)
      {
        v4 = (unsigned int *)(v3 + 16);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
      }
      if (*(_BYTE *)(v3 + 147))
      {
        v6 = this + 4;
        v7 = *this;
        v8 = this[1];
        v9 = (unsigned int *)v3;
        while (1)
        {
          if (v7 == v8)
          {
            __break(0xC471u);
            JUMPOUT(0x1955B436CLL);
          }
          v10 = v2[2];
          v3 = *(_QWORD *)(v10 + 8 * v7);
          *(_QWORD *)(v10 + 8 * v7) = 0;
          v11 = v2[2];
          v12 = *(unsigned int **)(v11 + 8 * v7);
          *(_QWORD *)(v11 + 8 * v7) = 0;
          if (v12)
          {
            v13 = v12 + 4;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v12 + 4);
              (*(void (**)(unsigned int *, WebCore::SQLTransactionCoordinator::CoordinationInfo *))(*(_QWORD *)v12 + 8))(v12, a2);
            }
          }
          if (*v2 == *((unsigned int *)v2 + 6) - 1)
            v16 = 0;
          else
            v16 = *v2 + 1;
          *v2 = v16;
          v17 = v9 + 4;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v9 + 4);
            (*(void (**)(unsigned int *, WebCore::SQLTransactionCoordinator::CoordinationInfo *))(*(_QWORD *)v9 + 8))(v9, a2);
          }
          v20 = *v6;
          if (*v6
            || (WTF::HashTable<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>>::rehash(v2 + 4, 8u), (v20 = *v6) != 0))
          {
            v21 = *(_DWORD *)(v20 - 8);
          }
          else
          {
            v21 = 0;
          }
          v22 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = (uint64_t *)(v20 + 8 * v25);
          v27 = *v26;
          if (*v26)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != v3)
            {
              if (v27 == -1)
                v28 = v26;
              v25 = (v25 + v29) & v21;
              v26 = (uint64_t *)(v20 + 8 * v25);
              v27 = *v26;
              ++v29;
              if (!*v26)
              {
                if (v28)
                {
                  *v28 = 0;
                  --*(_DWORD *)(*v6 - 16);
                  v26 = v28;
                }
                goto LABEL_32;
              }
            }
            goto LABEL_53;
          }
LABEL_32:
          if (v3)
          {
            v30 = (unsigned int *)(v3 + 16);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 + 1, v30));
            v32 = (unsigned int *)*v26;
            *v26 = v3;
            if (v32)
            {
              v33 = v32 + 4;
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                atomic_store(1u, v32 + 4);
                (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
              }
            }
          }
          else
          {
            *v26 = 0;
          }
          v36 = *v6;
          v37 = *v6 ? *(_DWORD *)(v36 - 12) + 1 : 1;
          *(_DWORD *)(v36 - 12) = v37;
          v38 = *v6;
          v39 = *v6 ? *(_DWORD *)(v38 - 12) : 0;
          v40 = (*(_DWORD *)(v38 - 16) + v39);
          v41 = *(unsigned int *)(v38 - 4);
          if (v41 <= 0x400)
            break;
          if (v41 <= 2 * v40)
            goto LABEL_49;
LABEL_53:
          *(_BYTE *)(v3 + 146) = 1;
          *(_DWORD *)(v3 + 220) = 3;
          this = (uint64_t *)WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(v3 + 24), (WebCore::SQLTransaction *)v3);
          v7 = *v2;
          v8 = v2[1];
          if (*v2 != v8)
          {
            v9 = (unsigned int *)v3;
            if (*(_BYTE *)(*(_QWORD *)(v2[2] + 8 * v7) + 147))
              continue;
          }
          goto LABEL_78;
        }
        if (3 * v41 > 4 * v40)
          goto LABEL_53;
        if ((_DWORD)v41)
LABEL_49:
          v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
        else
          v42 = 8;
        WTF::HashTable<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>>::rehash(v2 + 4, v42);
        goto LABEL_53;
      }
      v43 = this[4];
      if (!v43 || !*(_DWORD *)(v43 - 12))
      {
        v44 = *this;
        if (*this == this[1])
        {
          __break(0xC471u);
          JUMPOUT(0x1955B43BCLL);
        }
        v45 = this[2];
        v46 = *(unsigned int **)(v45 + 8 * v44);
        *(_QWORD *)(v45 + 8 * v44) = 0;
        if (v46)
        {
          v47 = v46 + 4;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v46 + 4);
            (*(void (**)(unsigned int *, WebCore::SQLTransactionCoordinator::CoordinationInfo *))(*(_QWORD *)v46 + 8))(v46, a2);
          }
        }
        if (*v2 == *((unsigned int *)v2 + 6) - 1)
          v50 = 0;
        else
          v50 = *v2 + 1;
        *v2 = v50;
        v51 = (unsigned int *)(v3 + 16);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
        v53 = (unsigned int *)v2[5];
        v2[5] = v3;
        if (v53)
        {
          v54 = v53 + 4;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            atomic_store(1u, v53 + 4);
            (*(void (**)(unsigned int *, WebCore::SQLTransactionCoordinator::CoordinationInfo *))(*(_QWORD *)v53 + 8))(v53, a2);
          }
        }
        *(_BYTE *)(v3 + 146) = 1;
        *(_DWORD *)(v3 + 220) = 3;
        this = (uint64_t *)WebCore::Database::scheduleTransactionStep(*(WebCore::Database **)(v3 + 24), (WebCore::SQLTransaction *)v3);
      }
LABEL_78:
      v57 = (unsigned int *)(v3 + 16);
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        atomic_store(1u, (unsigned int *)(v3 + 16));
        return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::SQLTransactionCoordinator::acquireLock(WebCore::SQLTransactionCoordinator *this, WebCore::SQLTransaction *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int j;
  unsigned int v26;
  WTF *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t k;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  int v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *result;
  WTF::StringImpl *v71;
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)a2 + 3);
  if (WTF::isMainThread(this))
  {
    v5 = v4[2];
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4[4] + 32) + 8);
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7)
      v7 = WTF::Thread::initializeCurrentTLS(0);
    if (v6 != v7)
    {
      __break(0xC471u);
      goto LABEL_103;
    }
    v5 = v4[3];
  }
  LOBYTE(v73) = 0;
  DWORD2(v74) = -1;
  v8 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(WTF::StringImpl **, __int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_3[v8])(&v71, &v73, v5 + 8);
    DWORD2(v74) = v8;
  }
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)&v73, &v71);
  if (DWORD2(v74) != -1)
    ((void (*)(char *, __int128 *))off_1E336E378[DWORD2(v74)])(&v72, &v73);
  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = *((_DWORD *)v71 + 4);
    if (v13 < 0x100)
      v14 = WTF::StringImpl::hashSlowCase(v71);
    else
      v14 = v13 >> 8;
    for (i = 0; ; v14 = i + v16)
    {
      v16 = v14 & v12;
      v17 = v11 + 56 * (v14 & v12);
      v18 = *(WTF **)v17;
      if (*(_QWORD *)v17 != -1)
      {
        if (!v18)
        {
          v19 = *(_QWORD *)this;
          if (!*(_QWORD *)this)
            break;
          v20 = *(_DWORD *)(v19 - 4);
          v17 = v19 + 56 * v20;
LABEL_26:
          if (v17 != v19 + 56 * v20)
            goto LABEL_72;
          v74 = 0u;
          v75 = 0u;
          v73 = 0u;
LABEL_28:
          v21 = *(_DWORD *)(v19 - 8);
          goto LABEL_29;
        }
        if ((WTF::equal(v18, v71, v10) & 1) != 0)
        {
          v19 = *(_QWORD *)this;
          if (!*(_QWORD *)this)
            goto LABEL_72;
          v20 = *(_DWORD *)(v19 - 4);
          goto LABEL_26;
        }
      }
      ++i;
    }
  }
  v74 = 0u;
  v75 = 0u;
  v73 = 0u;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SQLTransactionCoordinator::CoordinationInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this, 8u, 0);
  v19 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    goto LABEL_28;
  v21 = 0;
LABEL_29:
  v22 = *((_DWORD *)v71 + 4);
  if (v22 < 0x100)
    v23 = WTF::StringImpl::hashSlowCase(v71);
  else
    v23 = v22 >> 8;
  v24 = 0;
  for (j = 1; ; ++j)
  {
    v26 = v23 & v21;
    v17 = v19 + 56 * (v23 & v21);
    v27 = *(WTF **)v17;
    if (*(_QWORD *)v17 == -1)
    {
      v24 = v19 + 56 * v26;
      goto LABEL_38;
    }
    if (!v27)
      break;
    if ((WTF::equal(v27, v71, v10) & 1) != 0)
      goto LABEL_71;
LABEL_38:
    v23 = j + v26;
  }
  if (v24)
  {
    *(_QWORD *)(v24 + 48) = 0;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)v24 = 0u;
    --*(_DWORD *)(*(_QWORD *)this - 16);
    v17 = v24;
  }
  v28 = v71;
  if (v71)
    *(_DWORD *)v71 += 2;
  *(_QWORD *)v17 = v28;
  v29 = *(_OWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = *((_QWORD *)&v73 + 1);
  v73 = v29;
  v30 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v17 + 24) = v74;
  *(_QWORD *)&v74 = v30;
  LODWORD(v30) = *(_DWORD *)(v17 + 32);
  *(_DWORD *)(v17 + 32) = 0;
  DWORD2(v74) = v30;
  v31 = v75;
  *(_QWORD *)&v75 = 0;
  v32 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v31;
  if (v32)
  {
    v33 = *(unsigned int *)(v32 - 4);
    if ((_DWORD)v33)
    {
      for (k = 0; k != v33; ++k)
      {
        v35 = *(unsigned int **)(v32 + 8 * k);
        if (v35 != (unsigned int *)-1)
        {
          *(_QWORD *)(v32 + 8 * k) = 0;
          if (v35)
          {
            v36 = v35 + 4;
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v35 + 4);
              (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v32 - 16), v9);
  }
  v39 = *((_QWORD *)&v75 + 1);
  *((_QWORD *)&v75 + 1) = 0;
  v40 = *(unsigned int **)(v17 + 48);
  *(_QWORD *)(v17 + 48) = v39;
  if (v40)
  {
    v41 = v40 + 4;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v40 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v44 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v45 = *(_DWORD *)(v44 - 12) + 1;
  else
    v45 = 1;
  *(_DWORD *)(v44 - 12) = v45;
  v46 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 > 0x400)
  {
    if (v49 <= 2 * v48)
    {
LABEL_68:
      v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
      goto LABEL_70;
    }
  }
  else if (3 * v49 <= 4 * v48)
  {
    if ((_DWORD)v49)
      goto LABEL_68;
    v50 = 8;
LABEL_70:
    v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SQLTransactionCoordinator::CoordinationInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this, v50, (WTF::StringImpl **)v17);
  }
LABEL_71:
  WebCore::SQLTransactionCoordinator::CoordinationInfo::~CoordinationInfo((WebCore::SQLTransactionCoordinator::CoordinationInfo *)&v73, v9);
LABEL_72:
  v51 = *(_QWORD *)(v17 + 8);
  v52 = *(_QWORD *)(v17 + 16);
  if (v51)
  {
    if (v52 + 1 == v51)
    {
      LODWORD(v53) = *(_DWORD *)(v17 + 32);
      goto LABEL_79;
    }
    goto LABEL_89;
  }
  v53 = *(unsigned int *)(v17 + 32);
  if (v52)
  {
    if (v52 != v53 - 1)
      goto LABEL_89;
  }
  else if ((_DWORD)v53)
  {
    goto LABEL_89;
  }
LABEL_79:
  v54 = v53;
  v55 = ((unint64_t)v53 >> 2) + v53;
  if (v55 <= 0xF)
    v55 = 15;
  if (v55 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
LABEL_103:
    JUMPOUT(0x1955B49A4);
  }
  v56 = *(char **)(v17 + 24);
  v57 = v55 + 1;
  v58 = (char *)WTF::fastMalloc((WTF *)(8 * (v55 + 1)));
  *(_DWORD *)(v17 + 32) = v57;
  *(_QWORD *)(v17 + 24) = v58;
  v60 = *(_QWORD *)(v17 + 8);
  v59 = *(_QWORD *)(v17 + 16);
  if (v60 <= v59)
  {
    memcpy(&v58[8 * v60], &v56[8 * v60], 8 * v59 - 8 * v60);
    if (!v56)
      goto LABEL_89;
  }
  else
  {
    memcpy(v58, v56, 8 * v59);
    v61 = *(_QWORD *)(v17 + 8);
    v62 = v61 - v54 + *(unsigned int *)(v17 + 32);
    memcpy((void *)(*(_QWORD *)(v17 + 24) + 8 * v62), &v56[8 * v61], 8 * v54 - 8 * v61);
    *(_QWORD *)(v17 + 8) = v62;
    if (!v56)
      goto LABEL_89;
  }
  if (*(char **)(v17 + 24) == v56)
  {
    *(_QWORD *)(v17 + 24) = 0;
    *(_DWORD *)(v17 + 32) = 0;
  }
  WTF::fastFree((WTF *)v56, v9);
LABEL_89:
  v64 = *(_QWORD *)(v17 + 16);
  v63 = *(_QWORD *)(v17 + 24);
  v65 = (unsigned int *)((char *)a2 + 16);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 + 1, v65));
  v67 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v63 + 8 * v64) = a2;
  if (v67 == *(unsigned int *)(v17 + 32) - 1)
    v68 = 0;
  else
    v68 = v67 + 1;
  *(_QWORD *)(v17 + 16) = v68;
  WebCore::SQLTransactionCoordinator::processPendingTransactions((uint64_t *)(v17 + 8), (WebCore::SQLTransactionCoordinator::CoordinationInfo *)v9);
  result = v71;
  v71 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v69);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::SQLTransactionCoordinator::shutdown(unsigned int *this, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::SQLTransactionCoordinator::CoordinationInfo *v32;
  WTF::StringImpl *v33;

  v2 = this;
  *((_BYTE *)this + 8) = 1;
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 56 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD *)this;
      if ((_DWORD)v4)
      {
        v7 = 56 * v4;
        v6 = *(_QWORD *)this;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 56;
          v7 -= 56;
          if (!v7)
          {
            v6 = v5;
            break;
          }
        }
      }
      if (v3)
        goto LABEL_9;
      goto LABEL_13;
    }
    v6 = v3 + 56 * v4;
  }
  else
  {
    v6 = 0;
    LODWORD(v4) = 0;
  }
  v5 = v3 + 56 * v4;
  if (v3)
  {
LABEL_9:
    v8 = v3 + 56 * *(unsigned int *)(v3 - 4);
    goto LABEL_14;
  }
LABEL_13:
  v8 = 0;
LABEL_14:
  if (v8 == v6)
    goto LABEL_58;
  do
  {
    v9 = *(_QWORD *)(v6 + 48);
    if (v9)
      this = WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)(v9 + 208), a2);
    v10 = *(_QWORD *)(v6 + 40);
    if (v10)
    {
      v11 = *(unsigned int *)(v10 - 4);
      v12 = v10 + 8 * v11;
      if (*(_DWORD *)(v10 - 12))
      {
        v13 = *(_QWORD *)(v6 + 40);
        if ((_DWORD)v11)
        {
          v14 = 8 * v11;
          v13 = *(_QWORD *)(v6 + 40);
          while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
          {
            v13 += 8;
            v14 -= 8;
            if (!v14)
            {
              v13 = v12;
              break;
            }
          }
        }
LABEL_24:
        v15 = v10 + 8 * *(unsigned int *)(v10 - 4);
        goto LABEL_29;
      }
      v13 = v10 + 8 * v11;
    }
    else
    {
      v13 = 0;
      v11 = 0;
    }
    v12 = v10 + 8 * v11;
    if (v10)
      goto LABEL_24;
    v15 = 0;
LABEL_29:
    while (v13 != v15)
    {
      v16 = v13 + 8;
      this = WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)(*(_QWORD *)v13 + 208), a2);
      v13 = v12;
      if (v16 != v12)
      {
        v13 = v16;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 8;
          if (v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
    }
    while (1)
    {
      v29 = *(_QWORD *)(v6 + 8);
      if (v29 == *(_QWORD *)(v6 + 16))
        break;
      v17 = *(_QWORD *)(v6 + 24);
      v18 = *(unsigned int **)(v17 + 8 * v29);
      *(_QWORD *)(v17 + 8 * v29) = 0;
      v19 = *(_QWORD *)(v6 + 24);
      v20 = *(unsigned int **)(v19 + 8 * v29);
      *(_QWORD *)(v19 + 8 * v29) = 0;
      if (v20)
      {
        v21 = v20 + 4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 4);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
        }
      }
      v24 = *(_QWORD *)(v6 + 8);
      if (v24 == *(unsigned int *)(v6 + 32) - 1)
        v25 = 0;
      else
        v25 = v24 + 1;
      *(_QWORD *)(v6 + 8) = v25;
      this = WebCore::SQLTransactionBackend::doCleanup((WebCore::SQLTransactionBackend *)(v18 + 52), a2);
      if (v18)
      {
        v26 = v18 + 4;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v18 + 4);
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
        }
      }
    }
    v30 = v6 + 56;
    v6 = v5;
    if (v30 != v5)
    {
      v6 = v30;
      while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
      {
        v6 += 56;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  while (v6 != v8);
  v3 = *(_QWORD *)v2;
LABEL_58:
  if (v3)
  {
    *(_QWORD *)v2 = 0;
    v31 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v31)
    {
      v32 = (WebCore::SQLTransactionCoordinator::CoordinationInfo *)(v3 + 8);
      do
      {
        if (*((_QWORD *)v32 - 1) != -1)
        {
          WebCore::SQLTransactionCoordinator::CoordinationInfo::~CoordinationInfo(v32, a2);
          v33 = (WTF::StringImpl *)*((_QWORD *)v32 - 1);
          *((_QWORD *)v32 - 1) = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, a2);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
        v32 = (WebCore::SQLTransactionCoordinator::CoordinationInfo *)((char *)v32 + 56);
        --v31;
      }
      while (v31);
    }
    return (unsigned int *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return this;
}

uint64_t WebCore::NavigatorWebDriver::webdriver(WebCore::NavigatorWebDriver *this, const WebCore::Navigator *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t result;
  _QWORD *v17;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if (!*(_BYTE *)(v5 + 178))
  {
    v6 = *(_QWORD *)(v5 + 240);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = *(_QWORD *)(v7 + 24);
        v12 = v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && *(unsigned __int8 *)(v11 + 1091) != 0;
        do
        {
          v13 = __ldaxr(v8);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v8));
        if (!v14)
        {
          atomic_store(1u, v8);
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v15 = off_1E31FE290;
          v15[1] = v8;
          v17 = v15;
          WTF::ensureOnMainThread();
          if (v17)
            (*(void (**)(_QWORD *))(*v17 + 8))(v17);
        }
        return v12;
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WebCore::ThreadableWebSocketChannel *WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel(WebCore::ThreadableWebSocketChannel *this)
{
  uint64_t IdentifierInternal;

  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = &unk_1E336E128;
  *((_QWORD *)this + 1) = IdentifierInternal;
  return this;
}

uint64_t WebCore::ThreadableWebSocketChannel::validateURL@<X0>(uint64_t this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  int v18;
  int v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22[5];
  _QWORD v23[7];
  const WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v6 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v24 = v6;
  v25 = *(_OWORD *)((char *)a2 + 8);
  v26 = *(_OWORD *)((char *)a2 + 24);
  v27 = 1;
  v7 = *(_QWORD *)(this + 528);
  if (!v7)
    goto LABEL_23;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_23;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    goto LABEL_23;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_23;
  if (!*(_BYTE *)(v10 + 1681))
    goto LABEL_38;
  if (*(_BYTE *)(v10 + 1672))
  {
    v21 = this;
    if ((*((_BYTE *)a2 + 8) & 2) != 0
      || (this = WTF::URL::protocolIs(), (this & 1) != 0)
      || (v19 = WTF::URL::protocolIs(), this = v21, v19))
    {
      if (!*(_BYTE *)(v10 + 1672))
      {
        __break(1u);
        return this;
      }
      v23[0] = WTF::URL::host(a2);
      v23[1] = a2;
      if (!*(_QWORD *)(v10 + 1648)
        || (v20 = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>(v10 + 1648, (uint64_t)v23), this = v21, !v20))
      {
LABEL_38:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 48) = 0;
        goto LABEL_24;
      }
    }
  }
  v11 = *(_QWORD *)(this + 528);
  if (!v11
    || (v12 = *(_QWORD *)(v11 + 8)) == 0
    || (v13 = *(_DWORD **)(*(_QWORD *)(v12 + 280) + 88)) == 0
    || *(_QWORD *)(v12 + 296) != this)
  {
LABEL_23:
    v17 = v24;
    v24 = 0;
    *(_QWORD *)a3 = v17;
    v18 = v25;
    *(_OWORD *)(a3 + 8) = v25;
    *(_OWORD *)(a3 + 24) = v26;
    LODWORD(v25) = v18 & 0xFFFFFFFE;
    *(_BYTE *)(a3 + 40) = v27;
    *(_BYTE *)(a3 + 48) = 1;
    goto LABEL_24;
  }
  ++v13[6];
  v14 = *(_QWORD *)(v10 + 936);
  v22[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v22);
  WebCore::UserContentProvider::processContentRuleListsForLoad(v14, v10, &v24, 1024, (uint64_t)v13, (WTF::URL *)v22, (uint64_t)v23);
  v16 = v22[0];
  v22[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (!LOBYTE(v23[0]))
  {
    if (BYTE1(v23[0]))
      WTF::URL::setProtocol();
    v27 = BYTE2(v23[0]) ^ 1;
    WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v23, v15);
    if (v13[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
    else
      --v13[6];
    goto LABEL_23;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 48) = 0;
  WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v23, v15);
  if (v13[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
  else
    --v13[6];
LABEL_24:
  this = (uint64_t)v24;
  v24 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void WebCore::ThreadableWebSocketChannel::webSocketConnectRequest(WebCore::ThreadableWebSocketChannel *this@<X0>, WebCore::Document *a2@<X1>, WebCore::SecurityOrigin *a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WebCore::SecurityOrigin **v9;
  _DWORD *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::SecurityOrigin *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WebCore::SecurityOrigin *v18;
  int v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::SecurityOriginData *v30;
  _QWORD *v31;
  WTF::StringImpl *v32;
  const WebCore::Page *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  char v41;
  WTF::StringImpl *v42;
  const WebCore::SecurityOrigin *v43;
  WebCore::Quirks *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WebCore::SecurityOrigin *v49;
  WTF::StringImpl *v50;
  WebCore::SecurityOrigin *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  __int128 v55;
  WTF::StringImpl *v56;
  int v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 v79;
  __int128 v80;
  WTF::StringImpl *v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _BYTE v85[24];
  __int128 v86;
  __int128 v87;
  int v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  __int128 v96;
  __int128 v97;
  unsigned __int8 v98;
  char v99;
  WebCore::SecurityOrigin *v100;
  char v101;
  WTF::StringImpl **v102;

  WebCore::ThreadableWebSocketChannel::validateURL((uint64_t)this, a2, (uint64_t)&v95);
  if (!v99)
  {
    *(_BYTE *)a3 = 0;
    *((_BYTE *)a3 + 200) = 0;
    return;
  }
  v6 = v95;
  if (v95)
    *(_DWORD *)v95 += 2;
  v78 = v6;
  v79 = v96;
  v80 = v97;
  v81 = 0;
  WTF::URL::invalidate((WTF::URL *)&v81);
  v84 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)v85 = v74;
  *(_OWORD *)&v85[8] = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0x10000;
  v8 = v89 & 0x80 | 4;
  v89 = v8;
  *(_QWORD *)&v90 = 0;
  v9 = (WebCore::SecurityOrigin **)MEMORY[0x1E0CBF738];
  v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v10 += 2;
    v8 = v89;
  }
  *((_QWORD *)&v90 + 1) = v10;
  v91 = 0;
  LOBYTE(v92) = 0;
  BYTE4(v92) = 0;
  v93 = v93 & 0xE0 | 5;
  v89 = v8 | 2;
  v94 = 0;
  if (!v99)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    atomic_store(1u, (unsigned int *)a3);
    v70 = (WTF::StringImpl *)*((_QWORD *)a3 + 6);
    *((_QWORD *)a3 + 6) = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v7);
      else
        *(_DWORD *)v70 -= 2;
    }
    v71 = (WTF::StringImpl *)*((_QWORD *)a3 + 5);
    *((_QWORD *)a3 + 5) = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v7);
      else
        *(_DWORD *)v71 -= 2;
    }
    v72 = *((unsigned int *)a3 + 8);
    if ((_DWORD)v72 != -1)
      ((void (*)(WTF::StringImpl ***, char *))off_1E336E378[v72])(&v102, (char *)a3 + 8);
    *((_DWORD *)a3 + 8) = -1;
    WTF::fastFree(a3, v7);
    goto LABEL_107;
  }
  WebCore::Document::userAgent(this, (const WTF::URL *)&v95, (uint64_t *)&v74);
  if ((v93 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
    v93 |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v85[8], (WTF::StringImpl *)0x56, &v74);
  v93 &= ~2u;
  v12 = v74;
  v74 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v77 = v13;
    goto LABEL_15;
  }
  if (*((_BYTE *)this + 464) == 1)
  {
    v14 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 24) + 256))((char *)this + 192);
    WebCore::SecurityOrigin::domainForCachePartition(v14, &v77);
    if (v77)
    {
LABEL_15:
      v15 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
      if (v15 != -1)
      {
        v74 = (WTF::StringImpl *)&v101;
        v102 = &v74;
        std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v102, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
      }
      if (v77)
      {
        v16 = *((_QWORD *)v77 + 1);
        v17 = *((unsigned int *)v77 + 1) | ((unint64_t)((*((_DWORD *)v77 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v16 = 0;
        v17 = 0x100000000;
      }
      WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v16, v17, (uint64_t *)&v100);
      v18 = v100;
      if (!v100)
      {
        v18 = *v9;
        if (!*v9)
          goto LABEL_148;
        *(_DWORD *)v18 += 2;
      }
      v19 = *(_DWORD *)v18;
      goto LABEL_21;
    }
  }
  else
  {
    v73 = *v9;
    if (*v9)
      *(_DWORD *)v73 += 2;
    v77 = v73;
    if (v73)
      goto LABEL_15;
  }
  v18 = *v9;
  if (!*v9)
    goto LABEL_148;
  v19 = *(_DWORD *)v18 + 2;
  *(_DWORD *)v18 = v19;
LABEL_21:
  v20 = 0;
  *(_DWORD *)v18 = v19 + 2;
  while (1)
  {
    v21 = (WTF::StringImpl *)*((_QWORD *)&v90 + 1);
    *((_QWORD *)&v90 + 1) = v18;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v7);
        if ((v20 & 1) != 0)
          goto LABEL_28;
        goto LABEL_26;
      }
      *(_DWORD *)v21 -= 2;
    }
    if ((v20 & 1) != 0)
      goto LABEL_28;
LABEL_26:
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v7);
    else
      *(_DWORD *)v18 -= 2;
LABEL_28:
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v7);
      else
        *(_DWORD *)v77 -= 2;
    }
    if (!v99)
      goto LABEL_121;
    v18 = (WebCore::SecurityOrigin *)v98;
    v22 = v93;
    if ((v93 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
      v22 = v93 | 1;
      v93 |= 1u;
    }
    if (((_DWORD)v18 != 0) != ((v89 & 2) == 0))
    {
      if ((v22 & 1) != 0)
        goto LABEL_36;
    }
    else
    {
      v89 = v89 & 0xFD | (2 * ((_DWORD)v18 != 0));
      v93 = v22 & 0xFD;
      if ((v22 & 1) != 0)
        goto LABEL_36;
    }
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
    v93 |= 1u;
LABEL_36:
    if ((WTF::equal(v81, *((const WTF::StringImpl **)this + 126), v11) & 1) == 0)
    {
      v24 = (WTF::StringImpl *)*((_QWORD *)this + 126);
      if (v24)
        *(_DWORD *)v24 += 2;
      v25 = v81;
      v81 = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v23);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = *(_OWORD *)((char *)this + 1032);
      v82 = *(_OWORD *)((char *)this + 1016);
      v83 = v26;
      v93 &= ~2u;
    }
    WebCore::SecurityContext::securityOrigin((WebCore::ThreadableWebSocketChannel *)((char *)this + 192), v23);
    v28 = *(unsigned int *)(v27 + 32);
    if ((_DWORD)v28 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_47;
    }
    if ((_DWORD)v28 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_148:
    v20 = 1;
  }
  v29 = v27;
  v30 = (WebCore::SecurityOriginData *)(v27 + 8);
  v74 = (WTF::StringImpl *)&v102;
  v31 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v28])(&v74, v27 + 8);
  if (MEMORY[0x19AEA53F4](*v31, "file", 4) && *(_BYTE *)(v29 + 59))
    WTF::String::String(&v74, (uint64_t)"null", 5);
  else
    WebCore::SecurityOriginData::toString(v30, &v74);
LABEL_47:
  if ((v93 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
    v93 |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)&v85[8], (WTF::StringImpl *)0x35, &v74);
  v93 &= ~2u;
  v34 = v74;
  v74 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *((_QWORD *)this + 66);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(v36 + 280) + 88);
      if (v37)
      {
        if (*(WebCore::ThreadableWebSocketChannel **)(v36 + 296) == this)
        {
          ++*(_DWORD *)(v37 + 24);
          v38 = *(unsigned __int8 *)(v37 + 3533);
          v39 = v93;
          if ((v93 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
            v39 = v93 | 1;
            v93 |= 1u;
          }
          if ((v38 != 0) == ((v89 & 4) == 0))
          {
            v89 = v89 & 0xFB | (4 * (v38 != 0));
            v93 = v39 & 0xFD;
          }
          if (*(_DWORD *)(v37 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
          else
            --*(_DWORD *)(v37 + 24);
        }
      }
    }
  }
  WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)&v78, this, 0, v33);
  {
    WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
  }
  if ((v93 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
    v93 |= 1u;
  }
  WebCore::HTTPHeaderMap::add((WTF::StringImpl *)&v85[8], 56, &WebCore::HTTPHeaderValues::noCache(void)::value);
  v40 = v93;
  v93 &= ~2u;
  {
    if ((v40 & 1) != 0)
      goto LABEL_68;
LABEL_146:
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
    v93 |= 1u;
  }
  else
  {
    WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
    if ((v40 & 1) == 0)
      goto LABEL_146;
  }
LABEL_68:
  WebCore::HTTPHeaderMap::add((WTF::StringImpl *)&v85[8], 15, &WebCore::HTTPHeaderValues::noCache(void)::value);
  v41 = v93;
  v93 &= ~2u;
  if ((v41 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
    v93 |= 1u;
  }
  v42 = v78;
  if (v78)
    *(_DWORD *)v78 += 2;
  v74 = v42;
  v75 = v79;
  v76 = v80;
  WTF::URL::protocolIs();
  WTF::URL::setProtocol();
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v74, (uint64_t *)&v100);
  v43 = v100;
  if (WebCore::SecurityOrigin::isPotentiallyTrustworthy(v100))
  {
    v44 = (WebCore::Quirks *)*((_QWORD *)this + 86);
    if (!v44)
      v44 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
    if ((WebCore::Quirks::shouldDisableFetchMetadata(v44) & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v77 = (WTF::StringImpl *)v102;
      if ((v93 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
        v93 |= 1u;
      }
      WebCore::HTTPHeaderMap::add((WTF::StringImpl *)&v85[8], 65, (uint64_t *)&v77);
      v93 &= ~2u;
      v46 = v77;
      v77 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v45);
        else
          *(_DWORD *)v46 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v77 = (WTF::StringImpl *)v102;
      if ((v93 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
        v93 |= 1u;
      }
      WebCore::HTTPHeaderMap::add((WTF::StringImpl *)&v85[8], 66, (uint64_t *)&v77);
      v93 &= ~2u;
      v48 = v77;
      v77 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v47);
        else
          *(_DWORD *)v48 -= 2;
      }
      WebCore::SecurityContext::securityOrigin((WebCore::ThreadableWebSocketChannel *)((char *)this + 192), v47);
      if (!WebCore::SecurityOrigin::isSameOriginAs(v49, v43))
      {
        WebCore::SecurityContext::securityOrigin((WebCore::ThreadableWebSocketChannel *)((char *)this + 192), v50);
        WebCore::SecurityOrigin::isSameSiteAs(v51, v43);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if ((v93 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v78);
        v93 |= 1u;
      }
      WebCore::HTTPHeaderMap::add((WTF::StringImpl *)&v85[8], 67, (uint64_t *)&v102);
      v93 &= ~2u;
      v52 = (WTF::StringImpl *)v102;
      v102 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v7);
        else
          *(_DWORD *)v52 -= 2;
      }
    }
  }
  v53 = v78;
  v78 = 0;
  *(_QWORD *)a3 = v53;
  v54 = v79;
  v55 = v80;
  *(_OWORD *)((char *)a3 + 8) = v79;
  *(_OWORD *)((char *)a3 + 24) = v55;
  LODWORD(v79) = v54 & 0xFFFFFFFE;
  v56 = v81;
  v81 = 0;
  *((_QWORD *)a3 + 5) = v56;
  v57 = v82;
  v58 = v83;
  *((_OWORD *)a3 + 3) = v82;
  *((_OWORD *)a3 + 4) = v58;
  LODWORD(v82) = v57 & 0xFFFFFFFE;
  *(_QWORD *)&v58 = *(_QWORD *)&v85[16];
  *((_QWORD *)a3 + 10) = v84;
  v59 = *(_OWORD *)v85;
  *(_OWORD *)v85 = 0u;
  *(_OWORD *)((char *)a3 + 88) = v59;
  *(_QWORD *)&v85[16] = 0;
  *((_QWORD *)a3 + 13) = v58;
  v60 = v86;
  *(_QWORD *)&v86 = 0;
  *((_QWORD *)a3 + 14) = v60;
  *(_QWORD *)&v58 = *((_QWORD *)&v86 + 1);
  *((_QWORD *)&v86 + 1) = 0;
  *((_QWORD *)a3 + 15) = v58;
  v61 = v87;
  *(_QWORD *)&v87 = 0;
  *((_QWORD *)a3 + 16) = v61;
  *(_QWORD *)&v58 = *((_QWORD *)&v87 + 1);
  *((_QWORD *)&v87 + 1) = 0;
  *((_QWORD *)a3 + 17) = v58;
  LODWORD(v61) = v88;
  *((_BYTE *)a3 + 148) = v89;
  *((_DWORD *)a3 + 36) = v61;
  v62 = v90;
  v90 = 0u;
  *(_OWORD *)((char *)a3 + 152) = v62;
  v63 = v92;
  *((_BYTE *)a3 + 184) = v93;
  v64 = v94;
  *((_QWORD *)a3 + 21) = v91;
  *((_QWORD *)a3 + 22) = v63;
  v91 = 0;
  v94 = 0;
  *((_QWORD *)a3 + 24) = v64;
  *((_BYTE *)a3 + 200) = 1;
  a3 = v100;
  v100 = 0;
  if (a3)
  {
    do
    {
      v65 = __ldaxr((unsigned int *)a3);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, (unsigned int *)a3));
    if (!v66)
      goto LABEL_122;
  }
LABEL_107:
  v67 = v74;
  v74 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v7);
    else
      *(_DWORD *)v67 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v78, v7);
  if (v99)
  {
    v69 = v95;
    v95 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, v68);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
}

char *WebCore::ThreadableWebSocketChannelClientWrapper::setSubprotocol(char *this, const WTF::String *a2)
{
  char *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  int8x16x2_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;

  v2 = this;
  if (!*(_QWORD *)a2)
  {
    *((_DWORD *)this + 13) = 0;
    return this;
  }
  v4 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  v5 = *((unsigned int *)this + 13);
  if (v5 < v4)
  {
    v6 = *((unsigned int *)this + 12);
    if (v6 < v4)
    {
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v4)
        v9 = *(unsigned int *)(*(_QWORD *)a2 + 4);
      else
        v9 = v8;
      if (v9 >> 31)
      {
        __break(0xC471u);
        return this;
      }
      v10 = (void *)*((_QWORD *)this + 5);
      v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
      *((_DWORD *)v2 + 12) = v9;
      *((_QWORD *)v2 + 5) = v11;
      this = (char *)memcpy(v11, v10, 2 * v5);
      if (v10)
      {
        if (*((void **)v2 + 5) == v10)
        {
          *((_QWORD *)v2 + 5) = 0;
          *((_DWORD *)v2 + 12) = 0;
        }
        this = (char *)WTF::fastFree((WTF *)v10, v12);
      }
    }
  }
  v13 = *(_QWORD *)a2;
  *((_DWORD *)v2 + 13) = v4;
  if (v13)
  {
    v14 = *(int8x16_t **)(v13 + 8);
    v15 = *(unsigned int *)(v13 + 4);
    this = (char *)*((_QWORD *)v2 + 5);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      v16 = &this[2 * v15];
      if (v15 >= 0x40)
      {
        v17 = &this[2 * (v15 & 0xFFFFFFC0)];
        v18 = 0uLL;
        do
        {
          v26.val[0] = *v14;
          v19 = v14[1];
          v27.val[0] = v14[2];
          v20 = v14[3];
          v14 += 4;
          v21 = v20;
          v27.val[1] = 0uLL;
          v28.val[0] = v19;
          v26.val[1] = 0uLL;
          v22 = this;
          vst2q_s8(v22, v26);
          v22 += 32;
          v28.val[1] = 0uLL;
          vst2q_s8(v22, v28);
          v23 = this + 64;
          vst2q_s8(v23, v27);
          v24 = this + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          this += 128;
        }
        while (this != v17);
        this = v17;
      }
      while (this != v16)
      {
        v25 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)this = v25;
        this += 2;
      }
    }
    else if ((_DWORD)v15 == 1)
    {
      *(_WORD *)this = v14->i16[0];
    }
    else if ((_DWORD)v15)
    {
      return (char *)memcpy(this, v14, 2 * v15);
    }
  }
  return this;
}

char *WebCore::ThreadableWebSocketChannelClientWrapper::setExtensions(char *this, const WTF::String *a2)
{
  char *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  int8x16x2_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;

  v2 = this;
  if (!*(_QWORD *)a2)
  {
    *((_DWORD *)this + 17) = 0;
    return this;
  }
  v4 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  v5 = *((unsigned int *)this + 17);
  if (v5 < v4)
  {
    v6 = *((unsigned int *)this + 16);
    if (v6 < v4)
    {
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v4)
        v9 = *(unsigned int *)(*(_QWORD *)a2 + 4);
      else
        v9 = v8;
      if (v9 >> 31)
      {
        __break(0xC471u);
        return this;
      }
      v10 = (void *)*((_QWORD *)this + 7);
      v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
      *((_DWORD *)v2 + 16) = v9;
      *((_QWORD *)v2 + 7) = v11;
      this = (char *)memcpy(v11, v10, 2 * v5);
      if (v10)
      {
        if (*((void **)v2 + 7) == v10)
        {
          *((_QWORD *)v2 + 7) = 0;
          *((_DWORD *)v2 + 16) = 0;
        }
        this = (char *)WTF::fastFree((WTF *)v10, v12);
      }
    }
  }
  v13 = *(_QWORD *)a2;
  *((_DWORD *)v2 + 17) = v4;
  if (v13)
  {
    v14 = *(int8x16_t **)(v13 + 8);
    v15 = *(unsigned int *)(v13 + 4);
    this = (char *)*((_QWORD *)v2 + 7);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      v16 = &this[2 * v15];
      if (v15 >= 0x40)
      {
        v17 = &this[2 * (v15 & 0xFFFFFFC0)];
        v18 = 0uLL;
        do
        {
          v26.val[0] = *v14;
          v19 = v14[1];
          v27.val[0] = v14[2];
          v20 = v14[3];
          v14 += 4;
          v21 = v20;
          v27.val[1] = 0uLL;
          v28.val[0] = v19;
          v26.val[1] = 0uLL;
          v22 = this;
          vst2q_s8(v22, v26);
          v22 += 32;
          v28.val[1] = 0uLL;
          vst2q_s8(v22, v28);
          v23 = this + 64;
          vst2q_s8(v23, v27);
          v24 = this + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          this += 128;
        }
        while (this != v17);
        this = v17;
      }
      while (this != v16)
      {
        v25 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)this = v25;
        this += 2;
      }
    }
    else if ((_DWORD)v15 == 1)
    {
      *(_WORD *)this = v14->i16[0];
    }
    else if ((_DWORD)v15)
    {
      return (char *)memcpy(this, v14, 2 * v15);
    }
  }
  return this;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didConnect(WebCore::ThreadableWebSocketChannelClientWrapper *this)
{
  char *v2;
  unsigned int v3;
  WTF *v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;

  v2 = (char *)this + 88;
  do
    v3 = __ldaxr((unsigned int *)this);
  while (__stlxr(v3 + 1, (unsigned int *)this));
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = &off_1E336E3E0;
  *((_QWORD *)result + 1) = this;
  *((_QWORD *)result + 2) = this;
  *(_QWORD *)v4 = result;
  *((_BYTE *)v4 + 8) = 0;
  v10 = v4;
  v7 = *((unsigned int *)this + 25);
  if ((_DWORD)v7 == *((_DWORD *)this + 24))
  {
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>((uint64_t)v2, (unint64_t)&v10);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = (unsigned int *)WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v7) = v4;
    *((_DWORD *)this + 25) = v7 + 1;
  }
  if (!*((_BYTE *)this + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)this, v6);
  return result;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks(unsigned int *this, void *a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  void *v18;
  int v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  uint64_t v23;
  unsigned int *v24;
  char v25;

  if (*((_BYTE *)this + 80))
    return this;
  v2 = this;
  if (*((_BYTE *)this + 33))
  {
    v3 = (WTF *)*((_QWORD *)this + 11);
    v4 = this[25];
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = v6 - 96;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    v8 = *(unsigned __int8 *)(v7 + 274);
    if (*(_BYTE *)(v7 + 274))
    {
      if (v8 == 1 || v8 == 2)
        ++*(_DWORD *)(v7 + 312);
    }
    else
    {
      *(_DWORD *)(v7 - 168) += 2;
    }
    if ((_DWORD)v4)
    {
      v9 = 8 * v4;
      v10 = v3;
      do
      {
        v11 = *(_QWORD **)v10;
        v10 = (WTF *)((char *)v10 + 8);
        this = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v11 + 16))(*v11, v7);
        v9 -= 8;
      }
      while (v9);
      if (!v7)
      {
LABEL_17:
        if ((_DWORD)v4)
        {
          v20 = 8 * v4;
          v21 = (WTF **)v3;
          do
          {
            v22 = *v21;
            *v21 = 0;
            if (v22)
            {
              v23 = *(_QWORD *)v22;
              *(_QWORD *)v22 = 0;
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              this = (unsigned int *)WTF::fastFree(v22, a2);
            }
            ++v21;
            v20 -= 8;
          }
          while (v20);
        }
        if (v3)
          return (unsigned int *)WTF::fastFree(v3, a2);
        return this;
      }
      v8 = *(unsigned __int8 *)(v7 + 274);
    }
    if (v8)
    {
      if (v8 == 1)
      {
        if (*(_DWORD *)(v7 + 312) == 1)
          this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        else
          --*(_DWORD *)(v7 + 312);
      }
      else if (v8 == 2)
      {
        this = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 312));
      }
    }
    else if (*(_DWORD *)(v7 - 168) == 2)
    {
      if ((*(_WORD *)(v7 - 162) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v7 - 168) -= 2;
    }
    goto LABEL_17;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
  {
    v14 = (unsigned __int8 *)(v13 - 96);
    v15 = *(unsigned __int8 *)(v13 + 178);
    if (*(_BYTE *)(v13 + 178))
    {
      if (v15 == 1 || v15 == 2)
        ++*(_DWORD *)(v13 + 216);
    }
    else
    {
      *(_DWORD *)(v13 - 264) += 2;
    }
  }
  else
  {
    v14 = 0;
  }
  do
    v16 = __ldaxr(this);
  while (__stlxr(v16 + 1, this));
  v17 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v17 = &off_1E336E530;
  *((_QWORD *)v17 + 1) = v2;
  *((_QWORD *)v17 + 2) = v2;
  v24 = v17;
  v25 = 0;
  (*(void (**)(unsigned __int8 *, unsigned int **))(*(_QWORD *)v14 + 336))(v14, &v24);
  this = v24;
  v24 = 0;
  if (this)
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  v19 = v14[274];
  if (v14[274])
  {
    if (v19 == 1)
    {
      if (*((_DWORD *)v14 + 78) == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 40))(v14);
      else
        --*((_DWORD *)v14 + 78);
    }
    else if (v19 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v14 + 78);
    }
  }
  else if (*((_DWORD *)v14 - 42) == 2)
  {
    if ((*((_WORD *)v14 - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v14 - 192), v18);
  }
  else
  {
    *((_DWORD *)v14 - 42) -= 2;
  }
  return this;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessage(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *result;
  WebCore::ThreadableWebSocketChannelClientWrapper *v11[2];
  WTF::StringImpl *v12;
  WTF *v13;

  v2 = a1 + 88;
  v11[0] = (WebCore::ThreadableWebSocketChannelClientWrapper *)a1;
  do
    v3 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v3 + 1, (unsigned int *)a1));
  v11[1] = (WebCore::ThreadableWebSocketChannelClientWrapper *)a1;
  WTF::String::isolatedCopy();
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = &off_1E336E408;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v11;
  *(_QWORD *)(v5 + 24) = v12;
  *(_QWORD *)v4 = v5;
  *((_BYTE *)v4 + 8) = 0;
  v13 = v4;
  v7 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 96))
  {
    WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>(v2, (unint64_t)&v13);
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v7) = v4;
    *(_DWORD *)(a1 + 100) = v7 + 1;
    v13 = 0;
  }
  result = 0;
  if (!*(_BYTE *)(a1 + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)a1, v6);
  return result;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveBinaryData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *result;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;

  v3 = a1 + 88;
  do
    v4 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v4 + 1, (unsigned int *)a1));
  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)result = &off_1E336E430;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = a1;
  *((_QWORD *)result + 3) = v5;
  *((_QWORD *)result + 4) = v6;
  *(_QWORD *)v7 = result;
  *((_BYTE *)v7 + 8) = 0;
  v13 = v7;
  v10 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 96))
  {
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>(v3, (unint64_t)&v13);
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      v12 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      result = (unsigned int *)WTF::fastFree(v11, v9);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v10) = v7;
    *(_DWORD *)(a1 + 100) = v10 + 1;
  }
  if (!*(_BYTE *)(a1 + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)a1, v9);
  return result;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didUpdateBufferedAmount(WebCore::ThreadableWebSocketChannelClientWrapper *this, unsigned int a2)
{
  char *v4;
  unsigned int v5;
  WTF *v6;
  unsigned int *result;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;

  v4 = (char *)this + 88;
  do
    v5 = __ldaxr((unsigned int *)this);
  while (__stlxr(v5 + 1, (unsigned int *)this));
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = &off_1E336E458;
  *((_QWORD *)result + 1) = this;
  *((_QWORD *)result + 2) = this;
  result[6] = a2;
  *(_QWORD *)v6 = result;
  *((_BYTE *)v6 + 8) = 0;
  v12 = v6;
  v9 = *((unsigned int *)this + 25);
  if ((_DWORD)v9 == *((_DWORD *)this + 24))
  {
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>((uint64_t)v4, (unint64_t)&v12);
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      v11 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      result = (unsigned int *)WTF::fastFree(v10, v8);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v9) = v6;
    *((_DWORD *)this + 25) = v9 + 1;
  }
  if (!*((_BYTE *)this + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)this, v8);
  return result;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didStartClosingHandshake(WebCore::ThreadableWebSocketChannelClientWrapper *this)
{
  char *v2;
  unsigned int v3;
  WTF *v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;

  v2 = (char *)this + 88;
  do
    v3 = __ldaxr((unsigned int *)this);
  while (__stlxr(v3 + 1, (unsigned int *)this));
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = &off_1E336E480;
  *((_QWORD *)result + 1) = this;
  *((_QWORD *)result + 2) = this;
  *(_QWORD *)v4 = result;
  *((_BYTE *)v4 + 8) = 0;
  v10 = v4;
  v7 = *((unsigned int *)this + 25);
  if ((_DWORD)v7 == *((_DWORD *)this + 24))
  {
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>((uint64_t)v2, (unint64_t)&v10);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = (unsigned int *)WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v7) = v4;
    *((_DWORD *)this + 25) = v7 + 1;
  }
  if (!*((_BYTE *)this + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)this, v6);
  return result;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didClose(uint64_t a1, unsigned int a2, unsigned int a3, __int16 a4)
{
  uint64_t v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned int *result;
  WebCore::ThreadableWebSocketChannelClientWrapper *v14[2];
  unint64_t v15;
  WTF::StringImpl *v17;
  WTF *v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 88;
  v14[0] = (WebCore::ThreadableWebSocketChannelClientWrapper *)a1;
  do
    v6 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v6 + 1, (unsigned int *)a1));
  v14[1] = (WebCore::ThreadableWebSocketChannelClientWrapper *)a1;
  v15 = __PAIR64__(a3, a2);
  WTF::String::isolatedCopy();
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v19 = v15;
  v20 = a4;
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = &off_1E336E4A8;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)v14;
  *(_WORD *)(v8 + 32) = v20;
  *(_QWORD *)(v8 + 24) = v19;
  *(_QWORD *)(v8 + 40) = v17;
  *(_QWORD *)v7 = v8;
  *((_BYTE *)v7 + 8) = 0;
  v18 = v7;
  v10 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 96))
  {
    WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>(v5, (unint64_t)&v18);
    v11 = v18;
    v18 = 0;
    if (v11)
    {
      v12 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      WTF::fastFree(v11, v9);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v10) = v7;
    *(_DWORD *)(a1 + 100) = v10 + 1;
    v18 = 0;
  }
  result = 0;
  if (!*(_BYTE *)(a1 + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)a1, v9);
  return result;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessageError(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *result;
  WebCore::ThreadableWebSocketChannelClientWrapper *v11[2];
  WTF::StringImpl *v12;
  WTF *v13;

  v2 = a1 + 88;
  v11[0] = (WebCore::ThreadableWebSocketChannelClientWrapper *)a1;
  do
    v3 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v3 + 1, (unsigned int *)a1));
  v11[1] = (WebCore::ThreadableWebSocketChannelClientWrapper *)a1;
  WTF::String::isolatedCopy();
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = &off_1E336E4D0;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)v11;
  *(_QWORD *)(v5 + 24) = v12;
  *(_QWORD *)v4 = v5;
  *((_BYTE *)v4 + 8) = 0;
  v13 = v4;
  v7 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 96))
  {
    WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>(v2, (unint64_t)&v13);
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v7) = v4;
    *(_DWORD *)(a1 + 100) = v7 + 1;
    v13 = 0;
  }
  result = 0;
  if (!*(_BYTE *)(a1 + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)a1, v6);
  return result;
}

unsigned int *WebCore::ThreadableWebSocketChannelClientWrapper::didUpgradeURL(WebCore::ThreadableWebSocketChannelClientWrapper *this)
{
  char *v2;
  unsigned int v3;
  WTF *v4;
  unsigned int *result;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;

  v2 = (char *)this + 88;
  do
    v3 = __ldaxr((unsigned int *)this);
  while (__stlxr(v3 + 1, (unsigned int *)this));
  v4 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = &off_1E336E4F8;
  *((_QWORD *)result + 1) = this;
  *((_QWORD *)result + 2) = this;
  *(_QWORD *)v4 = result;
  *((_BYTE *)v4 + 8) = 0;
  v10 = v4;
  v7 = *((unsigned int *)this + 25);
  if ((_DWORD)v7 == *((_DWORD *)this + 24))
  {
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>>((uint64_t)v2, (unint64_t)&v10);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)v8;
      *(_QWORD *)v8 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = (unsigned int *)WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v7) = v4;
    *((_DWORD *)this + 25) = v7 + 1;
  }
  if (!*((_BYTE *)this + 80))
    return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)this, v6);
  return result;
}

WebCore::WebSocket *WebCore::WebSocket::WebSocket(WebCore::WebSocket *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ScriptExecutionContext *v2;
  WebCore::WebSocket *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  int v10;
  _BYTE v12[24];
  WebCore::WebSocket *v13;

  v2 = a2;
  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v4 = (WebCore::WebSocket *)((char *)this + 32);
  if (!*((_BYTE *)a2 + 274))
  {
    v5 = (char *)a2 - 192;
    v6 = *((_QWORD *)a2 + 64);
    if (v6)
    {
      v7 = *(char **)(v6 + 8);
      if (v7)
        v5 = v7;
    }
    v2 = (WebCore::ScriptExecutionContext *)(v5 + 192);
  }
  *((_QWORD *)this + 4) = &off_1E33A18C0;
  *((_QWORD *)this + 5) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::WebSocket *)((char *)this + 32), v2);
  *((_QWORD *)this + 4) = &off_1E33A0540;
  *((_QWORD *)this + 6) = 0;
  if (*((_BYTE *)v2 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1955B6C7CLL);
  }
  v13 = v4;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v2 + 16, (uint64_t *)&v13, (uint64_t)v12);
  *(_QWORD *)this = off_1E336E1E8;
  *((_QWORD *)this + 4) = &unk_1E336E2D0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = &unk_1E336E328;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 11) = 0;
  WTF::URL::invalidate((WebCore::WebSocket *)((char *)this + 88));
  *((_BYTE *)this + 136) = 0;
  *((_QWORD *)this + 16) = 0;
  v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v8 += 4;
  *((_QWORD *)this + 18) = v8;
  *((_QWORD *)this + 19) = v8;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 21) = 0;
  if (__ldaxr(WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](WebCore::WebSocket::s_allActiveWebSocketsLock);
LABEL_13:
  {
    WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets = 0;
  }
  v13 = this;
  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets, (uint64_t *)&v13, (uint64_t)v12);
  v10 = __ldxr(WebCore::WebSocket::s_allActiveWebSocketsLock);
  if (v10 == 1)
  {
    if (!__stlxr(0, WebCore::WebSocket::s_allActiveWebSocketsLock))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebSocket::s_allActiveWebSocketsLock);
  return this;
}

void WebCore::WebSocket::~WebSocket(WebCore::WebSocket *this, void *a2)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::WebSocket *v9;
  int v10;
  int v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  bmalloc::api *v27;
  void *v28;

  if (__ldaxr(WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebSocket::s_allActiveWebSocketsLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::WebSocket::s_allActiveWebSocketsLock);
LABEL_5:
  {
    if (WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets)
    {
      v4 = *(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 8);
      v5 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      v9 = *(WebCore::WebSocket **)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets
                                  + 8 * v8);
      if (v9 != this)
      {
        v10 = 1;
        while (v9)
        {
          v8 = ((_DWORD)v8 + v10) & v4;
          v9 = *(WebCore::WebSocket **)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets
                                      + 8 * v8);
          ++v10;
          if (v9 == this)
            goto LABEL_13;
        }
        v8 = *(unsigned int *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 4);
      }
LABEL_13:
      if (v8 != *(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 4))
      {
        *(_QWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets + 8 * v8) = -1;
        ++*(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 16);
        v11 = WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets
            ? *(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 12) - 1
            : -1;
        *(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 12) = v11;
        if (WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets)
        {
          v12 = *(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 4);
          if (6 * *(_DWORD *)(WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets - 12) < v12 && v12 >= 9)
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(&WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets, v12 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebCore::WebSocket::allActiveWebSockets(void)::activeWebSockets = 0;
  }
  v14 = __ldxr(WebCore::WebSocket::s_allActiveWebSocketsLock);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, WebCore::WebSocket::s_allActiveWebSocketsLock))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebSocket::s_allActiveWebSocketsLock);
  v15 = *((_QWORD *)this + 9);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  v16 = (WTF *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v26 = *((_QWORD *)v16 + 1);
      --*(_QWORD *)(v26 + 48);
      *((_QWORD *)v16 + 1) = 0;
      if (*(_DWORD *)(v26 + 24) == 1)
      {
        WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)v26);
        bmalloc::api::isoDeallocate(v27, v28);
      }
      else
      {
        --*(_DWORD *)(v26 + 24);
      }
      WTF::fastFree(v16, a2);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 168))(v20);
  v21 = *((_QWORD *)this + 8);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::WebSocket *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v25);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebSocket::~WebSocket(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::WebSocket::~WebSocket(WebCore::WebSocket *this, void *a2)
{
  WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)((char *)this - 32), a2);
}

{
  WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)((char *)this - 56), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::WebSocket::create@<X0>(WTF::StringImpl *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::ScriptExecutionContext *v7;
  WebCore::WebSocket *v8;
  WebCore::WebSocket *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  bmalloc::api *v12;
  void *v13;
  WTF::StringImpl *v14[5];
  _BYTE v15[8];
  uint64_t v16;
  char v17;

  if (*a2)
  {
    v7 = result;
    v8 = (WebCore::WebSocket *)bmalloc::api::isoAllocate();
    v9 = WebCore::WebSocket::WebSocket(v8, v7);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9 + 4);
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::ScriptExecutionContext *, _QWORD *, uint64_t))(*(_QWORD *)v7 + 120))(v14, v7, a2, 1);
    WebCore::WebSocket::connect((uint64_t)v8, (WTF::StringImpl ***)v14, a3, (uint64_t)v15);
    result = v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    if (v17)
    {
      v11 = v16;
      *(_BYTE *)a4 = v15[0];
      *(_QWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 16) = 1;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 1)
        {
          WebCore::WebSocket::~WebSocket(v8, v10);
          return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v12, v13);
        }
        else
        {
          --*((_DWORD *)v8 + 6);
        }
      }
    }
    else
    {
      *(_QWORD *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 0;
    }
  }
  else
  {
    *(_BYTE *)a4 = 9;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::WebSocket::connect@<X0>(uint64_t a1@<X0>, WTF::StringImpl ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  int v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  const WTF::URL *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unsigned __int16 v40;
  int v41;
  unsigned __int16 v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned __int16 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  char v54;
  WTF::StringImpl *v55;
  const WTF::StringImpl *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  const WTF::String *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  uint64_t (**v87)();
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  char v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  WebCore **v99;
  unsigned int *v100;
  unsigned int v101;
  WebCore::Document *v102;
  char v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  WTF::StringImpl **v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  WTF::StringImpl **v119;
  WTF::StringImpl *v120;
  BOOL v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t (**v124)();
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  WTF *v152;
  WTF::StringImpl *v153;
  uint64_t (**v154)();
  WTF::StringImpl *v155;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl **v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  bmalloc::api *v165;
  void *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  _BYTE v177[32];
  WTF::StringImpl *v178;
  unsigned int v179;
  __int128 v180;
  uint64_t v181;
  int v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF::StringImpl **v189[2];

  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v189[0] = v7;
  MEMORY[0x19AEA52D4](&v176, v189, 0);
  v9 = (WTF::StringImpl *)v189[0];
  v189[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = a1 + 88;
  v10 = *(WTF::StringImpl **)(a1 + 88);
  v12 = v176;
  v176 = 0;
  *(_QWORD *)(a1 + 88) = v12;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v13 = v176;
    }
    else
    {
      v13 = 0;
      *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_OWORD *)v177;
  *(_DWORD *)v177 &= ~1u;
  v15 = *(_OWORD *)&v177[16];
  *(_OWORD *)(a1 + 96) = v14;
  *(_OWORD *)(a1 + 112) = v15;
  v176 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17)
      v18 = v17 - 96;
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  if ((*(_BYTE *)(a1 + 96) & 1) == 0)
  {
    WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(a1 + 88));
    if (!v187)
    {
      v21 = 1;
      v20 = 26;
LABEL_21:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v20, v21, (int8x16_t *)"Invalid url for WebSocket ", 0x1Au, v187, &v176);
      if (v176)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v18 + 248))(v18, 1, 2, &v176, 0);
        v23 = v176;
        v176 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v22);
          else
            *(_DWORD *)v23 -= 2;
        }
        result = (WTF::StringImpl *)v187;
        v187 = 0;
        if (!result)
          goto LABEL_66;
        goto LABEL_64;
      }
LABEL_345:
      __break(0xC471u);
      JUMPOUT(0x1955B85E8);
    }
    v19 = *(_DWORD *)(v187 + 4);
    if ((v19 & 0x80000000) == 0)
    {
      v20 = (v19 + 26);
      if (!__OFADD__(v19, 26))
      {
        v21 = (*(unsigned __int8 *)(v187 + 16) >> 2) & 1;
        goto LABEL_21;
      }
    }
LABEL_344:
    v176 = 0;
    goto LABEL_345;
  }
  if ((WTF::URL::protocolIs() & 1) != 0 || WTF::URL::protocolIs())
    WTF::URL::setProtocol();
  if ((WTF::URL::protocolIs() & 1) == 0 && (WTF::URL::protocolIs() & 1) == 0)
  {
    WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(a1 + 88));
    if (v186)
    {
      v35 = *((_DWORD *)v186 + 1);
      if (v35 < 0 || (v36 = (v35 + 31), __OFADD__(v35, 31)))
      {
        v176 = 0;
        goto LABEL_349;
      }
      v37 = (*((unsigned __int8 *)v186 + 16) >> 2) & 1;
    }
    else
    {
      v37 = 1;
      v36 = 31;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v36, v37, (int8x16_t *)"Wrong url scheme for WebSocket ", 0x1Fu, (uint64_t)v186, &v176);
    if (v176)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v18 + 248))(v18, 1, 2, &v176, 0);
      v38 = v176;
      v176 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v22);
        else
          *(_DWORD *)v38 -= 2;
      }
      result = v186;
      v186 = 0;
      if (!result)
        goto LABEL_66;
LABEL_64:
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
LABEL_66:
      *(_DWORD *)(a1 + 80) = 3;
      *(_BYTE *)a4 = 9;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
LABEL_349:
    __break(0xC471u);
    JUMPOUT(0x1955B8600);
  }
  if ((*(_BYTE *)(a1 + 96) & 1) != 0 && *(_QWORD *)v11 && *(_DWORD *)(*(_QWORD *)v11 + 4) > *(_DWORD *)(a1 + 124))
  {
    WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(a1 + 88));
    if (v185)
    {
      v25 = *(_DWORD *)(v185 + 4);
      if (v25 < 0 || (v26 = (v25 + 27), __OFADD__(v25, 27)))
      {
        v176 = 0;
        goto LABEL_347;
      }
      v27 = (*(unsigned __int8 *)(v185 + 16) >> 2) & 1;
    }
    else
    {
      v27 = 1;
      v26 = 27;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v26, v27, (int8x16_t *)"URL has fragment component ", 0x1Bu, v185, &v176);
    if (v176)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v18 + 248))(v18, 1, 2, &v176, 0);
      v28 = v176;
      v176 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v22);
        else
          *(_DWORD *)v28 -= 2;
      }
      result = (WTF::StringImpl *)v185;
      v185 = 0;
      if (!result)
        goto LABEL_66;
      goto LABEL_64;
    }
LABEL_347:
    __break(0xC471u);
    JUMPOUT(0x1955B85F4);
  }
  v29 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)v18);
  v30 = v29;
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 + 1, v29));
  WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v29, (WebCore::SecurityOriginData *)(a1 + 88), 0, 0);
  if (!WTF::portAllowed() || WebCore::isIPAddressDisallowed((WebCore *)(a1 + 88), v32))
  {
    v189[0] = 0;
    if (WebCore::isIPAddressDisallowed((WebCore *)(a1 + 88), v32))
    {
      v33 = (_BYTE *)WTF::URL::host((WTF::URL *)(a1 + 88));
      if ((v34 & 0x80000000) != 0 || __OFADD__((_DWORD)v34, 8) || __OFADD__(v34 + 8, 18))
      {
        v176 = 0;
      }
      else
      {
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v34 + 26), (v34 & 0xFF00000000) != 0, "WebSocket address ", 0x12u, v33, v34, " blocked", 8u, &v176);
        if (v176)
        {
          v189[0] = (WTF::StringImpl **)v176;
          goto LABEL_138;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1955B860CLL);
    }
    if ((WTF::URL::port((WTF::URL *)(a1 + 88)) & 0xFF0000) != 0)
    {
      v39 = WTF::URL::port((WTF::URL *)(a1 + 88));
      if ((v39 & 0xFF0000) == 0)
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        goto LABEL_344;
      }
      v40 = v39;
      v41 = 0;
      v42 = v39;
      do
      {
        ++v41;
        v43 = v42;
        v42 /= 0xAu;
      }
      while (v43 > 9);
      if (v41 < 0
        || (v44 = __OFADD__(v41, 8), v45 = v41 + 8, v44)
        || (v46 = (v45 + 15), __OFADD__(v45, 15))
        || (WTF::tryFastCompactMalloc((WTF *)(v46 + 20)), (v47 = v176) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x1955B8614);
      }
      v48 = 0;
      *(_DWORD *)v176 = 2;
      *((_DWORD *)v47 + 1) = v46;
      qmemcpy((char *)v47 + 20, "WebSocket port ", 15);
      *((_QWORD *)v47 + 1) = (char *)v47 + 20;
      *((_DWORD *)v47 + 4) = 4;
      v49 = v40;
      do
      {
        v50 = v49;
        v177[v48-- - 2] = (v49 % 0xAu) | 0x30;
        v49 /= 0xAu;
      }
      while (v50 > 9);
      if (v48 + 8 <= 7)
        memcpy((char *)v47 + 35, &v177[v48 - 1], -v48);
      v51 = 0;
      do
      {
        ++v51;
        v52 = v40;
        v40 /= 0xAu;
      }
      while (v52 > 9);
      *(_QWORD *)((char *)v47 + v51 + 35) = 0x64656B636F6C6220;
      v189[0] = (WTF::StringImpl **)v47;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    }
LABEL_138:
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl ***, _QWORD))(*(_QWORD *)v18 + 248))(v18, 1, 2, v189, 0);
    v79 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v79 = off_1E336E590;
    v79[1] = a1;
    v80 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v80 = 1;
    v81 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(v80 + 8) = a1;
    ++*(_QWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 24) = v81 + 2;
    v82 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v82 = off_1E336E568;
    *((_QWORD *)v82 + 1) = a1;
    *((_QWORD *)v82 + 2) = v80;
    *((_QWORD *)v82 + 3) = v79;
    v176 = v82;
    v83 = *(_QWORD *)(a1 + 40);
    if (v83)
    {
      v84 = *(_QWORD *)(v83 + 8);
      if (v84)
      {
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v84 - 96) + 104))(v84 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v85, 24, (uint64_t *)&v176);
        v82 = v176;
        v176 = 0;
        if (!v82)
        {
LABEL_145:
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          result = (WTF::StringImpl *)v189[0];
          v189[0] = 0;
          if (!result)
            goto LABEL_286;
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v86);
            if (v30)
              goto LABEL_287;
          }
          else
          {
            *(_DWORD *)result -= 2;
            if (v30)
              goto LABEL_287;
          }
          return result;
        }
      }
      else
      {
        v176 = 0;
      }
      v87 = *(uint64_t (***)())v82;
    }
    else
    {
      v176 = 0;
      v87 = off_1E336E568;
    }
    v87[1]();
    goto LABEL_145;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 264))(v18) & 1) == 0)
  {
    v176 = 0;
    WTF::URL::invalidate((WTF::URL *)&v176);
    v54 = WebCore::ContentSecurityPolicy::allowConnectToSource((uint64_t)v30, (WTF::URL *)(a1 + 88), 0, (uint64_t)&v176);
    result = v176;
    v176 = 0;
    if (!result)
      goto LABEL_91;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_91:
      if ((v54 & 1) != 0)
        goto LABEL_92;
LABEL_247:
      *(_DWORD *)(a1 + 80) = 3;
      v90 = 14;
      goto LABEL_248;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v53);
    if ((v54 & 1) == 0)
      goto LABEL_247;
  }
LABEL_92:
  v55 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 192))(v18);
  if (v55)
  {
    v57 = (unsigned int *)v55;
    v58 = (unsigned int *)((char *)v55 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 + 1, v58));
    v60 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if (v60)
      v61 = v60 - 96;
    else
      v61 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 64))(v61))
    {
      ++*(_DWORD *)(v61 + 312);
      v159 = *(_QWORD *)(*(_QWORD *)(v61 + 360) + 48);
      v160 = (WTF::StringImpl **)(*(_QWORD *)(v159 + 8) + 1);
      *(_QWORD *)(v159 + 8) = v160;
      v176 = (WTF::StringImpl *)"webSocketChannelMode";
      *(_QWORD *)v177 = 21;
      v189[0] = v160;
      WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v176, (unint64_t *)v189, &v188);
      if (!v188)
      {
        __break(0xC471u);
        goto LABEL_355;
      }
      v161 = WTF::fastMalloc((WTF *)0x208);
      v176 = (WTF::StringImpl *)WebCore::WorkerThreadableWebSocketChannel::WorkerThreadableWebSocketChannel(v161, v61, a1 + 56, (_DWORD **)&v188, (uint64_t)v57);
      v163 = v188;
      v188 = 0;
      if (v163)
      {
        if (*(_DWORD *)v163 == 2)
          WTF::StringImpl::destroy(v163, v162);
        else
          *(_DWORD *)v163 -= 2;
      }
      if (*(_DWORD *)(v61 + 312) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
      else
        --*(_DWORD *)(v61 + 312);
    }
    else
    {
      if (*(_BYTE *)(v61 + 274))
      {
        __break(0xC471u);
        JUMPOUT(0x1955B84C0);
      }
      (**(void (***)(WTF::StringImpl **__return_ptr, unsigned int *, uint64_t, uint64_t))v57)(&v176, v57, v61 - 192, a1 + 56);
    }
    v62 = v176;
    v176 = 0;
    v55 = *(WTF::StringImpl **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v62;
    if (v55)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v55 + 168))(v55);
      v55 = v176;
      v176 = 0;
      if (v55)
        v55 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v55 + 168))(v55);
    }
    do
    {
      v63 = __ldaxr(v58);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v58));
    if (!v64)
    {
      atomic_store(1u, v57 + 2);
      v55 = (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v57 + 24))(v57);
    }
  }
  if (!*(_QWORD *)(a1 + 72))
  {
    __break(0xC471u);
    JUMPOUT(0x1955B8480);
  }
  v65 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v65)
  {
    v189[0] = 0;
LABEL_159:
    WTF::RunLoop::main(v55);
    WTF::URL::isolatedCopy();
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 112))(v18);
    WTF::URL::isolatedCopy();
    v91 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v91 = &off_1E336E5B8;
    v92 = v176;
    v176 = 0;
    *(_QWORD *)(v91 + 8) = v92;
    LODWORD(v92) = *(_DWORD *)v177;
    *(_DWORD *)(v91 + 16) = *(_DWORD *)v177;
    *(_OWORD *)(v91 + 20) = *(_OWORD *)&v177[4];
    *(_QWORD *)(v91 + 36) = *(_QWORD *)&v177[20];
    *(_DWORD *)(v91 + 44) = *(_DWORD *)&v177[28];
    *(_DWORD *)v177 = v92 & 0xFFFFFFFE;
    v93 = v178;
    v178 = 0;
    *(_QWORD *)(v91 + 48) = v93;
    LODWORD(v93) = v179;
    *(_DWORD *)(v91 + 56) = v179;
    *(_OWORD *)(v91 + 60) = v180;
    *(_QWORD *)(v91 + 76) = v181;
    *(_DWORD *)(v91 + 84) = v182;
    v179 = v93 & 0xFFFFFFFE;
    v188 = (WTF::StringImpl *)v91;
    WTF::RunLoop::dispatch();
    v95 = v188;
    v188 = 0;
    if (v95)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v95 + 8))(v95);
    v96 = v178;
    v178 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
        WTF::StringImpl::destroy(v96, v94);
      else
        *(_DWORD *)v96 -= 2;
    }
    v97 = v176;
    v176 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, v94);
      else
        *(_DWORD *)v97 -= 2;
    }
    if (*(_BYTE *)(v18 + 274))
      goto LABEL_182;
    *(_DWORD *)(v18 - 168) += 2;
    v98 = *(_QWORD *)(v18 + 336);
    if (v98)
    {
      v99 = *(WebCore ***)(v98 + 8);
      if (v99)
      {
        v100 = (unsigned int *)(v99 + 1);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 + 1, v100));
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v18, v94);
        if ((WebCore::MixedContentChecker::shouldBlockRequestForRunnableContent(v99, v102, (WebCore::LocalFrame *)(a1 + 88), 1) & 1) != 0)
        {
          v103 = 0;
          goto LABEL_174;
        }
        do
        {
          v112 = __ldaxr(v100);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v100));
        if (!v113)
        {
          atomic_store(1u, v100);
          v171 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v171 = off_1E31FE290;
          *((_QWORD *)v171 + 1) = v100;
          v176 = v171;
          WTF::ensureOnMainThread();
          v172 = v176;
          v176 = 0;
          if (v172)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v172 + 8))(v172);
        }
        if (*(_DWORD *)(v18 - 168) == 2)
        {
          if ((*(_WORD *)(v18 - 162) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v18 - 192));
        }
        else
        {
          *(_DWORD *)(v18 - 168) -= 2;
        }
LABEL_182:
        v188 = 0;
        v114 = *(_DWORD *)(a3 + 12);
        if (v114)
        {
          v176 = 0;
          *(_QWORD *)v177 = 0;
          *(_DWORD *)&v177[8] = 0;
          v177[12] = 1;
          v115 = *(WTF::StringImpl ***)a3;
          v116 = **(WTF::StringImpl ***)a3;
          if (v116)
            *(_DWORD *)v116 += 2;
          v176 = v116;
          v117 = *v115;
          if (v117)
            LODWORD(v117) = *((_DWORD *)v117 + 1);
          *(_DWORD *)&v177[8] = (_DWORD)v117;
          if (v114 >= 2)
          {
            v118 = 1;
            do
            {
              WTF::StringBuilder::append();
              if (v118 >= *(unsigned int *)(a3 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x1955B861CLL);
              }
              v119 = *(WTF::StringImpl ***)a3;
              v120 = *(WTF::StringImpl **)(*(_QWORD *)a3 + 8 * v118);
              if (*(_DWORD *)&v177[8])
                v121 = 0;
              else
                v121 = *(_QWORD *)v177 == 0;
              if (v121)
              {
                if (v120)
                  *(_DWORD *)v120 += 2;
                v122 = v176;
                v176 = v120;
                if (v122)
                {
                  if (*(_DWORD *)v122 == 2)
                    WTF::StringImpl::destroy(v122, v94);
                  else
                    *(_DWORD *)v122 -= 2;
                }
                v123 = v119[v118];
                if (v123)
                  LODWORD(v123) = *((_DWORD *)v123 + 1);
                *(_DWORD *)&v177[8] = (_DWORD)v123;
              }
              else if (v120 && (*((_BYTE *)v120 + 16) & 4) == 0)
              {
                WTF::StringBuilder::append();
              }
              else
              {
                WTF::StringBuilder::append();
              }
              ++v118;
            }
            while (v118 < *(unsigned int *)(a3 + 12));
            v116 = v176;
          }
          if (v116
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v176),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v176),
                (v116 = v176) != 0))
          {
            *(_DWORD *)v116 += 2;
          }
          v128 = *(WTF::StringImpl **)v177;
          *(_QWORD *)v177 = 0;
          v129 = v116;
          if (v128)
          {
            if (*(_DWORD *)v128 == 2)
            {
              WTF::StringImpl::destroy(v128, v94);
              v129 = v176;
            }
            else
            {
              *(_DWORD *)v128 -= 2;
              v129 = v116;
            }
          }
          v176 = 0;
          if (v129)
          {
            if (*(_DWORD *)v129 == 2)
              WTF::StringImpl::destroy(v129, v94);
            else
              *(_DWORD *)v129 -= 2;
          }
          v130 = v188;
          v188 = v116;
          if (v130)
          {
            if (*(_DWORD *)v130 == 2)
              WTF::StringImpl::destroy(v130, v94);
            else
              *(_DWORD *)v130 -= 2;
          }
        }
        if ((***(unsigned int (****)(_QWORD, uint64_t, WTF::StringImpl **))(a1 + 72))(*(_QWORD *)(a1 + 72), a1 + 88, &v188))
        {
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v174, (const WTF::URL *)(a1 + 88));
          WTF::String::isolatedCopy();
          if (v176 && *((_DWORD *)v176 + 1))
          {
            v175 = v176;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v132 = v176;
            v176 = 0;
            if (v132)
            {
              if (*(_DWORD *)v132 == 2)
                WTF::StringImpl::destroy(v132, v131);
              else
                *(_DWORD *)v132 -= 2;
            }
          }
          v140 = v174;
          v174 = 0;
          if (v140)
          {
            if (*(_DWORD *)v140 == 2)
              WTF::StringImpl::destroy(v140, v131);
            else
              *(_DWORD *)v140 -= 2;
          }
          if (*(_BYTE *)(v18 + 274))
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 64))(v18) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1955B859CLL);
            }
            v141 = *(_QWORD *)(*(_QWORD *)(v18 + 360) + 128);
            if (!v141)
              goto LABEL_270;
            v142 = v175;
            v175 = 0;
            v143 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v143 = &off_1E336E5E0;
            *((_QWORD *)v143 + 1) = v142;
            v176 = v143;
            v177[0] = 0;
            (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v141 + 56))(v141, &v176);
          }
          else
          {
            v145 = *(_QWORD *)(v18 + 336);
            if (!v145)
              goto LABEL_270;
            v146 = *(_QWORD *)(v145 + 8);
            if (!v146)
              goto LABEL_270;
            v147 = (unsigned int *)(v146 + 8);
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 + 1, v147));
            (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v146 + 280) + 16) + 1152))(*(_QWORD *)(*(_QWORD *)(v146 + 280) + 16), &v175);
            do
            {
              v149 = __ldaxr(v147);
              v150 = v149 - 1;
            }
            while (__stlxr(v150, v147));
            if (v150)
            {
LABEL_270:
              v151 = WTF::fastMalloc((WTF *)0x10);
              *(_DWORD *)v151 = 1;
              ++*(_DWORD *)(a1 + 24);
              *(_QWORD *)(v151 + 8) = a1;
              ++*(_QWORD *)(a1 + 48);
              v152 = *(WTF **)(a1 + 168);
              *(_QWORD *)(a1 + 168) = v151;
              if (v152)
              {
                if (*(_DWORD *)v152 == 1)
                {
                  v158 = *((_QWORD *)v152 + 1);
                  --*(_QWORD *)(v158 + 48);
                  *((_QWORD *)v152 + 1) = 0;
                  if (*(_DWORD *)(v158 + 24) == 1)
                  {
                    WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)v158, v111);
                    bmalloc::api::isoDeallocate(v165, v166);
                  }
                  else
                  {
                    --*(_DWORD *)(v158 + 24);
                  }
                  WTF::fastFree(v152, v111);
                }
                else
                {
                  --*(_DWORD *)v152;
                }
              }
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              v153 = v175;
              v175 = 0;
              if (v153)
              {
                if (*(_DWORD *)v153 == 2)
                  WTF::StringImpl::destroy(v153, (WTF::StringImpl *)v111);
                else
                  *(_DWORD *)v153 -= 2;
              }
              goto LABEL_282;
            }
            atomic_store(1u, v147);
            v173 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v173 = off_1E31FE290;
            *((_QWORD *)v173 + 1) = v147;
            v176 = v173;
            WTF::ensureOnMainThread();
          }
          v144 = v176;
          v176 = 0;
          if (v144)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v144 + 8))(v144);
          goto LABEL_270;
        }
        v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v133 = off_1E336E590;
        v133[1] = a1;
        v134 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v134 = 1;
        v135 = *(_DWORD *)(a1 + 24);
        *(_QWORD *)(v134 + 8) = a1;
        ++*(_QWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 24) = v135 + 2;
        v136 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v136 = off_1E336E568;
        *((_QWORD *)v136 + 1) = a1;
        *((_QWORD *)v136 + 2) = v134;
        *((_QWORD *)v136 + 3) = v133;
        v176 = v136;
        v137 = *(_QWORD *)(a1 + 40);
        if (v137)
        {
          v138 = *(_QWORD *)(v137 + 8);
          if (v138)
          {
            v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v138 - 96) + 104))(v138 - 96);
            WebCore::EventLoopTaskGroup::queueTask(v139, 24, (uint64_t *)&v176);
            v136 = v176;
            v176 = 0;
            if (!v136)
              goto LABEL_281;
          }
          else
          {
            v176 = 0;
          }
          v154 = *(uint64_t (***)())v136;
        }
        else
        {
          v176 = 0;
          v154 = off_1E336E568;
        }
        v154[1]();
LABEL_281:
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
LABEL_282:
        v155 = v188;
        v188 = 0;
        if (v155)
        {
          if (*(_DWORD *)v155 == 2)
            WTF::StringImpl::destroy(v155, (WTF::StringImpl *)v111);
          else
            *(_DWORD *)v155 -= 2;
        }
        goto LABEL_285;
      }
    }
    else
    {
      v99 = 0;
    }
    v103 = 1;
LABEL_174:
    v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v104 = off_1E336E590;
    v104[1] = a1;
    v105 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v105 = 1;
    v106 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(v105 + 8) = a1;
    ++*(_QWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 24) = v106 + 2;
    v107 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v107 = off_1E336E568;
    *((_QWORD *)v107 + 1) = a1;
    *((_QWORD *)v107 + 2) = v105;
    *((_QWORD *)v107 + 3) = v104;
    v176 = v107;
    v108 = *(_QWORD *)(a1 + 40);
    if (v108)
    {
      v109 = *(_QWORD *)(v108 + 8);
      if (v109)
      {
        v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v109 - 96) + 104))(v109 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v110, 24, (uint64_t *)&v176);
        v107 = v176;
        v176 = 0;
        if (!v107)
        {
LABEL_219:
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          if ((v103 & 1) == 0)
          {
            v125 = (unsigned int *)(v99 + 1);
            do
            {
              v126 = __ldaxr(v125);
              v127 = v126 - 1;
            }
            while (__stlxr(v127, v125));
            if (!v127)
            {
              atomic_store(1u, v125);
              v169 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v169 = off_1E31FE290;
              *((_QWORD *)v169 + 1) = v125;
              v176 = v169;
              WTF::ensureOnMainThread();
              v170 = v176;
              v176 = 0;
              if (v170)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v170 + 8))(v170);
            }
          }
          if (*(_DWORD *)(v18 - 168) == 2)
          {
            if ((*(_WORD *)(v18 - 162) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v18 - 192));
          }
          else
          {
            *(_DWORD *)(v18 - 168) -= 2;
          }
          goto LABEL_285;
        }
      }
      else
      {
        v176 = 0;
      }
      v124 = *(uint64_t (***)())v107;
    }
    else
    {
      v176 = 0;
      v124 = off_1E336E568;
    }
    v124[1]();
    goto LABEL_219;
  }
  v66 = *(WTF::StringImpl ***)a3;
  v67 = *(const WTF::String **)a3;
  do
  {
    v68 = *(_QWORD *)v67;
    if (!*(_QWORD *)v67)
      goto LABEL_149;
    v69 = *(unsigned int *)(v68 + 4);
    if (!(_DWORD)v69)
      goto LABEL_149;
    v70 = *(unsigned __int16 **)(v68 + 8);
    if ((*(_BYTE *)(v68 + 16) & 4) != 0)
    {
      while (1)
      {
        v72 = *(unsigned __int8 *)v70;
        v70 = (unsigned __int16 *)((char *)v70 + 1);
        v71 = v72;
        if (v72 - 33 > 0x5D)
          break;
        if (v71 <= 0x2F && ((1 << v71) & 0x930400000000) != 0)
          break;
        if (v71 - 58 < 7)
          break;
        v74 = v71 - 91;
        if (v74 <= 0x22 && ((1 << v74) & 0x500000007) != 0)
          break;
        if (!--v69)
          goto LABEL_123;
      }
LABEL_149:
      WebCore::encodeProtocolString((WebCore *)&v184, v67);
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Wrong protocol for WebSocket '", 31, (uint64_t *)&v184, 39, &v176);
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v18 + 248))(v18, 1, 2, &v176, 0);
      v89 = v176;
      v176 = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, v88);
        else
          *(_DWORD *)v89 -= 2;
      }
      result = v184;
      v184 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v88);
        else
          *(_DWORD *)result -= 2;
      }
      *(_DWORD *)(a1 + 80) = 3;
      v90 = 9;
LABEL_248:
      *(_BYTE *)a4 = v90;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = 1;
      if (v30)
        goto LABEL_287;
      return result;
    }
    do
    {
      v76 = *v70++;
      v75 = v76;
      if (v76 - 33 > 0x5D)
        goto LABEL_149;
      if (v75 <= 0x2F && ((1 << v75) & 0x930400000000) != 0)
        goto LABEL_149;
      if (v75 - 58 < 7)
        goto LABEL_149;
      v78 = v75 - 91;
      if (v78 <= 0x22 && ((1 << v78) & 0x500000007) != 0)
        goto LABEL_149;
      --v69;
    }
    while (v69);
LABEL_123:
    v67 = (const WTF::String *)((char *)v67 + 8);
  }
  while (v67 != (const WTF::String *)(*(_QWORD *)a3 + 8 * v65));
  v189[0] = 0;
  v164 = 8 * v65;
  while (1)
  {
    v55 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)v189, v66, v56, (uint64_t)&v176);
    if (!v177[8])
      break;
    ++v66;
    v164 -= 8;
    if (!v164)
      goto LABEL_159;
  }
  WebCore::encodeProtocolString((WebCore *)&v183, (const WTF::String *)v66);
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"WebSocket protocols contain duplicates: '", 42, (uint64_t *)&v183, 39, &v176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v18 + 248))(v18, 1, 2, &v176, 0);
  v167 = v176;
  v176 = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v111);
    else
      *(_DWORD *)v167 -= 2;
  }
  v168 = v183;
  v183 = 0;
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
      WTF::StringImpl::destroy(v168, (WTF::StringImpl *)v111);
    else
      *(_DWORD *)v168 -= 2;
  }
  *(_DWORD *)(a1 + 80) = 3;
  *(_BYTE *)a4 = 9;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
LABEL_285:
  result = (WTF::StringImpl *)v189[0];
  if (v189[0])
  {
    result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v189[0], (WTF::StringImpl *)v111);
    if (!v30)
      return result;
LABEL_287:
    if (atomic_load(v30))
    {
      do
        v157 = __ldaxr(v30);
      while (__stlxr(v157 - 1, v30));
      return result;
    }
    __break(0xC471u);
LABEL_355:
    JUMPOUT(0x1955B8354);
  }
LABEL_286:
  if (v30)
    goto LABEL_287;
  return result;
}

uint64_t WebCore::WebSocket::scriptExecutionContext(WebCore::WebSocket *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

WTF::StringImpl *WebCore::encodeProtocolString(WebCore *this, const WTF::String *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  char v19;
  __int16 *v20;
  int8x16_t *v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
LABEL_24:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16);
    result = v16;
    if (v16)
      goto LABEL_25;
    goto LABEL_26;
  }
  v5 = 0;
  do
  {
    v6 = *(unsigned int *)(v3 + 4);
    if (v5 >= v6)
      break;
    if (v6 > v5)
    {
      v7 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        v8 = *(unsigned __int8 *)(v7 + v5);
        if ((v8 - 127) >= 0xA1u)
          goto LABEL_9;
      }
      else
      {
        v8 = *(unsigned __int16 *)(v7 + 2 * v5);
        if ((unsigned __int16)(v8 - 127) >= 0xFFA1u)
        {
LABEL_9:
          if (v8 == 92)
          {
            WTF::StringBuilder::append();
          }
          else
          {
            v23 = v8;
            if (v17 && ((v10 = v18, v18 < *((_DWORD *)v17 + 1)) ? (v11 = v16 == 0) : (v11 = 0), v11))
            {
              v12 = *((_DWORD *)v17 + 4);
              v13 = *((_QWORD *)v17 + 1);
              ++v18;
              if ((v12 & 4) != 0)
                *(_BYTE *)(v13 + v10) = v8;
              else
                *(_WORD *)(v13 + 2 * v10) = v8;
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          goto LABEL_17;
        }
      }
    }
    WTF::Internal::appendHex();
    v24 = v9;
    v20 = &v23;
    v21 = (int8x16_t *)"\\u";
    v22 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v16, &v21, (uint64_t *)&v20);
LABEL_17:
    ++v5;
    v3 = *(_QWORD *)a2;
  }
  while (*(_QWORD *)a2);
  result = v16;
  if (!v16)
    goto LABEL_24;
LABEL_25:
  *(_DWORD *)result += 2;
LABEL_26:
  *(_QWORD *)this = result;
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, a2);
      result = v16;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::WebSocket::send@<X0>(WTF *this@<X0>, _QWORD *a2@<X8>)
{
  WTF *v4;
  void *v5;
  unint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  WTF *v18;

  if (*((_DWORD *)this + 20))
  {
    v4 = this;
    WTF::String::utf8();
    if ((*((_DWORD *)v4 + 20) & 0xFFFFFFFE) == 2)
    {
      this = v18;
      if (v18)
      {
        v6 = *((_QWORD *)v18 + 1);
        v8 = *((_DWORD *)v4 + 33);
        v7 = (int *)((char *)v4 + 132);
        v9 = v8 + v6;
        if (__CFADD__(v8, (_DWORD)v6))
          v9 = -1;
        if (v6 >> 16)
          v10 = 14;
        else
          v10 = 8;
        if (v6 >= 0x7E)
          v11 = v10;
        else
          v11 = 6;
      }
      else
      {
        v16 = *((_DWORD *)v4 + 33);
        v7 = (int *)((char *)v4 + 132);
        v9 = v16;
        v11 = 6;
      }
      v14 = __CFADD__(v9, v11);
      v17 = v9 + v11;
      if (v14)
        v17 = -1;
      *v7 = v17;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
    }
    else
    {
      v12 = *((_DWORD *)v4 + 32);
      v13 = (int)v18;
      if (v18)
        v13 = *((_DWORD *)v18 + 2);
      v14 = __CFADD__(v12, v13);
      v15 = v12 + v13;
      if (v14)
        v15 = -1;
      *((_DWORD *)v4 + 32) = v15;
      (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v4 + 9) + 24))(*((_QWORD *)v4 + 9), &v18);
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      this = v18;
    }
    v18 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
        return (WTF *)WTF::fastFree(this, v5);
      else
        --*(_DWORD *)this;
    }
  }
  else
  {
    *(_BYTE *)a2 = 8;
    a2[1] = 0;
    *((_BYTE *)a2 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::WebSocket::send@<X0>(uint64_t this@<X0>, JSC::ArrayBufferView *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  _BOOL4 v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = *(_DWORD *)(this + 80);
  if ((v4 - 2) < 2)
  {
    v5 = *((_QWORD *)a2 + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        if ((v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
          || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
          || (v6 & 0x3FFFFFFFFLL) + v7)
        {
          v8 = *((_BYTE *)a2 + 6);
          if ((v8 & 3) == 0)
          {
            LODWORD(v5) = *((_DWORD *)a2 + 4);
            goto LABEL_9;
          }
          if (*(_BYTE *)(v5 + 64) && (v58 = *(_QWORD *)(v5 + 32)) != 0)
          {
            v34 = atomic_load((unint64_t *)(v58 + 32));
            v8 = *((_BYTE *)a2 + 6);
          }
          else
          {
            v34 = *(_QWORD *)(v5 + 48);
          }
          v35 = *((_QWORD *)a2 + 1);
          if ((v8 & 4) == 0)
          {
            v36 = *((_QWORD *)a2 + 2) + v35 <= v34 && v34 >= v35;
            if (v36)
              LODWORD(v5) = 0;
            else
              v5 = *((_QWORD *)a2 + 2);
            goto LABEL_9;
          }
          v36 = v34 >= v35;
          v40 = v34 - v35;
          if (!v36)
          {
            if ((*((_BYTE *)a2 + 4) - 4) > 7u)
              LOBYTE(v41) = 0;
            else
              v41 = qword_1968DF438[(char)(*((_BYTE *)a2 + 4) - 4)];
            v5 = (-1 << v41) & v40;
            goto LABEL_9;
          }
        }
      }
      LODWORD(v5) = 0;
    }
LABEL_9:
    v9 = *(_DWORD *)(this + 132);
    v36 = __CFADD__(v9, (_DWORD)v5);
    v10 = v9 + v5;
    if (v36)
      v10 = -1;
    if (v5 <= 0x7DuLL)
      v11 = 6;
    else
      v11 = 8;
    if (WORD1(v5))
      v12 = 14;
    else
      v12 = v11;
    v36 = __CFADD__(v10, v12);
    v13 = v10 + v12;
    if (v36)
      v13 = -1;
    *(_DWORD *)(this + 132) = v13;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    return this;
  }
  if (!v4)
  {
    *(_BYTE *)a3 = 8;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
    return this;
  }
  v14 = *(_DWORD *)(this + 128);
  v15 = *((_QWORD *)a2 + 4);
  v16 = MEMORY[0x1E0CC10F8];
  if (v15)
  {
    v17 = *(_QWORD *)(v15 + 16);
    if (!v17)
      goto LABEL_98;
    v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v18 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v17 & 0x3FFFFFFFFLL) + v18))
      goto LABEL_98;
    v19 = *((_BYTE *)a2 + 6);
    if ((v19 & 3) == 0)
    {
      v15 = *((_QWORD *)a2 + 2);
      goto LABEL_31;
    }
    if (*(_BYTE *)(v15 + 64) && (v59 = *(_QWORD *)(v15 + 32)) != 0)
    {
      v37 = atomic_load((unint64_t *)(v59 + 32));
      v19 = *((_BYTE *)a2 + 6);
    }
    else
    {
      v37 = *(_QWORD *)(v15 + 48);
    }
    v38 = *((_QWORD *)a2 + 1);
    if ((v19 & 4) == 0)
    {
      if (*((_QWORD *)a2 + 2) + v38 <= v37 && v37 >= v38)
        LODWORD(v15) = 0;
      else
        v15 = *((_QWORD *)a2 + 2);
      goto LABEL_31;
    }
    v36 = v37 >= v38;
    v50 = v37 - v38;
    if (v36)
    {
LABEL_98:
      LODWORD(v15) = 0;
      goto LABEL_31;
    }
    if ((*((_BYTE *)a2 + 4) - 4) > 7u)
      LOBYTE(v51) = 0;
    else
      v51 = qword_1968DF438[(char)(*((_BYTE *)a2 + 4) - 4)];
    v15 = (-1 << v51) & v50;
  }
LABEL_31:
  v36 = __CFADD__(v14, (_DWORD)v15);
  v20 = v14 + v15;
  if (v36)
    v20 = -1;
  *(_DWORD *)(this + 128) = v20;
  v21 = *((_QWORD *)a2 + 4);
  v22 = *(_QWORD *)(v16 + 56);
  v23 = *(_QWORD *)(this + 72);
  v24 = *(_QWORD *)(v21 + 16);
  *(_DWORD *)v21 += 2;
  v25 = *(_QWORD *)(v21 + 32);
  v26 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  if (!v25)
    v26 = 0;
  if (v26)
  {
    __break(0xC471u);
    JUMPOUT(0x1955B8BD4);
  }
  if (v22 && (*(_BYTE *)(v16 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v24 & 0x3FFFFFFFFLL) + v22))
  {
    v28 = 0;
    goto LABEL_42;
  }
  v27 = *((unsigned __int8 *)a2 + 6);
  if ((v27 & 3) == 0)
  {
    v28 = *((unsigned int *)a2 + 2);
LABEL_42:
    v29 = v21;
    goto LABEL_43;
  }
  if (*(_BYTE *)(v21 + 64) && v25)
  {
    v42 = atomic_load((unint64_t *)(v25 + 32));
    v27 = *((unsigned __int8 *)a2 + 6);
    v29 = *((_QWORD *)a2 + 4);
  }
  else
  {
    v42 = *(_QWORD *)(v21 + 48);
    v29 = v21;
  }
  v43 = (v27 >> 2) & 1;
  v44 = *((_QWORD *)a2 + 1);
  v45 = v44 <= v42;
  if (*((_QWORD *)a2 + 2) + v44 <= v42)
    v46 = 1;
  else
    v46 = v43;
  if ((v45 & v46) != 0)
    v28 = 0;
  else
    v28 = v44;
  if (!v29)
    goto LABEL_104;
  v24 = *(_QWORD *)(v29 + 16);
  if (!v24)
    goto LABEL_104;
LABEL_43:
  v30 = *(_QWORD *)(v16 + 56);
  if (v30 && (*(_BYTE *)(v16 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v24 & 0x3FFFFFFFFLL) + v30))
  {
LABEL_104:
    v32 = 0;
    goto LABEL_48;
  }
  v31 = *((_BYTE *)a2 + 6);
  if ((v31 & 3) != 0)
  {
    if (*(_BYTE *)(v29 + 64) && (v60 = *(_QWORD *)(v29 + 32)) != 0)
    {
      v47 = atomic_load((unint64_t *)(v60 + 32));
      v31 = *((_BYTE *)a2 + 6);
    }
    else
    {
      v47 = *(_QWORD *)(v29 + 48);
    }
    v48 = *((_QWORD *)a2 + 1);
    if ((v31 & 4) == 0)
    {
      if (*((_QWORD *)a2 + 2) + v48 <= v47 && v47 >= v48)
        v32 = 0;
      else
        v32 = *((_QWORD *)a2 + 2);
      goto LABEL_48;
    }
    v52 = v47 - v48;
    if (v47 < v48)
    {
      if ((*((_BYTE *)a2 + 4) - 4) > 7u)
        LOBYTE(v53) = 0;
      else
        v53 = qword_1968DF438[(char)(*((_BYTE *)a2 + 4) - 4)];
      v32 = (-1 << v53) & v52;
      goto LABEL_48;
    }
    goto LABEL_104;
  }
  v32 = *((_QWORD *)a2 + 2);
LABEL_48:
  this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 32))(v23, v21, v28, v32);
  v33 = *(_DWORD *)v21 == 2;
  *(_DWORD *)v21 -= 2;
  if (v33)
  {
    v54 = *(_QWORD *)(v21 + 80);
    if (v54)
    {
      *(_QWORD *)(v54 + 8) = 3;
      *(_QWORD *)(v21 + 80) = 0;
    }
    if ((*(_BYTE *)(v21 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v21 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v21 + 16));
    v56 = *(WTF **)(v21 + 8);
    if ((v56 & 1) == 0 && v56)
    {
      v57 = *(WTF **)v56;
      if (*(_QWORD *)v56)
      {
        *(_QWORD *)v56 = 0;
        *((_DWORD *)v56 + 2) = 0;
        WTF::fastFree(v57, v55);
      }
      WTF::fastFree(v56, v55);
    }
    this = WTF::fastFree((WTF *)v21, v55);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return this;
}

WTF::StringImpl *WebCore::WebSocket::close@<X0>(WTF::StringImpl *result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v5 = result;
  if ((*(_QWORD *)&a2 & 0xFF0000) == 0)
  {
    v7 = 0xFFFFFFFFLL;
LABEL_10:
    v9 = *((_DWORD *)v5 + 20);
    if ((v9 - 2) >= 2)
    {
      if (v9)
      {
        *((_DWORD *)v5 + 20) = 2;
        result = (WTF::StringImpl *)*((_QWORD *)v5 + 9);
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, v7, a3);
      }
      else
      {
        *((_DWORD *)v5 + 20) = 2;
        v10 = *((_QWORD *)v5 + 9);
        if (v10)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 64))(v10, &v18);
          result = v18;
          v18 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  v7 = (unsigned __int16)a2;
  if ((unsigned __int16)a2 != 1000 && (unsigned __int16)a2 - 3000 >= 0x7D0)
  {
    *(_BYTE *)a4 = 12;
    a4[1] = 0;
    *((_BYTE *)a4 + 16) = 1;
    return result;
  }
  WTF::String::utf8();
  result = v18;
  if (!v18)
    goto LABEL_10;
  if (*((_QWORD *)v18 + 1) < 0x7CuLL)
  {
    v18 = 0;
    if (*(_DWORD *)result == 1)
      result = (WTF::StringImpl *)WTF::fastFree(result, v8);
    else
      --*(_DWORD *)result;
    goto LABEL_10;
  }
  v12 = *((_QWORD *)v5 + 5);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = v13 - 96;
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v14 + 248))(v14, 1, 2, &v17, 0);
  v16 = v17;
  v17 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  *(_BYTE *)a4 = 9;
  a4[1] = 0;
  *((_BYTE *)a4 + 16) = 1;
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl *)WTF::fastFree(result, v15);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::WebSocket::eventTargetInterface(WebCore::WebSocket *this)
{
  return 82;
}

unsigned int *WebCore::WebSocket::contextDestroyed(WebCore::WebSocket *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::WebSocket::contextDestroyed(WebCore::WebSocket *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebSocket::suspend(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = *((_QWORD *)result + 9);
  if (v2)
  {
    if (a2 == 2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 64))(v2, &v4);
      result = v4;
      v4 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*((_QWORD *)result + 9));
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::WebSocket::suspend(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = *((_QWORD *)result + 5);
  if (v2)
  {
    if (a2 == 2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 64))(v2, &v4);
      result = v4;
      v4 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*((_QWORD *)result + 5));
    }
  }
  return result;
}

uint64_t WebCore::WebSocket::resume(WebCore::WebSocket *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebSocket::resume(WebCore::WebSocket *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t WebCore::WebSocket::stop(WebCore::WebSocket *this, void *a2)
{
  uint64_t result;
  WTF *v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  result = *((_QWORD *)this + 9);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 72))(result);
    result = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 168))(result);
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  *((_DWORD *)this + 20) = 3;
  v4 = (WTF *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v5 + 48);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      return WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebSocket::stop(WebCore::WebSocket *this, void *a2)
{
  return WebCore::WebSocket::stop((WebCore::WebSocket *)((char *)this - 32), a2);
}

_QWORD *WebCore::WebSocket::didConnect(WebCore::WebSocket *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  _QWORD *v10;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E336E608;
  v2[1] = this;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *((_DWORD *)this + 6);
  *(_QWORD *)(v3 + 8) = this;
  ++*((_QWORD *)this + 6);
  *((_DWORD *)this + 6) = v4 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = this;
  result[2] = v3;
  result[3] = v2;
  v10 = result;
  v6 = *((_QWORD *)this + 5);
  if (!v6)
  {
    v10 = 0;
    v9 = off_1E336E568;
    return (_QWORD *)v9[1]();
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v8, 24, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
LABEL_6:
    v9 = (uint64_t (**)())*result;
    return (_QWORD *)v9[1]();
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::WebSocket::didConnect(WebCore::WebSocket *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  v2 = (char *)this - 56;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E336E608;
  v3[1] = v2;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this - 8);
  *(_QWORD *)(v4 + 8) = v2;
  ++*((_QWORD *)this - 1);
  *((_DWORD *)this - 8) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = v2;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this - 2);
  if (!v7)
  {
    v11 = 0;
    v10 = off_1E336E568;
    return (_QWORD *)v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 24, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = (uint64_t (**)())*result;
    return (_QWORD *)v10[1]();
  }
  return result;
}

uint64_t (***WebCore::WebSocket::didReceiveMessage(uint64_t a1, uint64_t (**a2)()))()
{
  uint64_t (*v3)();
  uint64_t (**v4)();
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v3 = *a2;
  *a2 = 0;
  v4 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v4 = (uint64_t (*)())&off_1E336E630;
  v4[1] = (uint64_t (*)())a1;
  v4[2] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v6 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E336E568;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 24, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::WebSocket::didReceiveMessage(uint64_t a1, uint64_t (**a2)()))()
{
  uint64_t (**v3)();
  uint64_t (*v4)();
  uint64_t (**v5)();
  uint64_t v6;
  int v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (***v13)();

  v3 = (uint64_t (**)())(a1 - 56);
  v4 = *a2;
  *a2 = 0;
  v5 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v5 = (uint64_t (*)())&off_1E336E630;
  v5[1] = (uint64_t (*)())v3;
  v5[2] = v4;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 - 32);
  *(_QWORD *)(v6 + 8) = v3;
  ++*(_QWORD *)(a1 - 8);
  *(_DWORD *)(a1 - 32) = v7 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = v3;
  result[2] = (uint64_t (**)())v6;
  result[3] = v5;
  v13 = result;
  v9 = *(_QWORD *)(a1 - 16);
  if (!v9)
  {
    v13 = 0;
    v12 = off_1E336E568;
    return (uint64_t (***)())v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 24, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = *result;
    return (uint64_t (***)())v12[1]();
  }
  return result;
}

uint64_t (***WebCore::WebSocket::didReceiveBinaryData(uint64_t a1, uint64_t (**a2)()))()
{
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (**v5)();
  uint64_t v6;
  int v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (***v13)();

  v3 = *a2;
  v4 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x20);
  *v5 = (uint64_t (*)())&off_1E336E698;
  v5[1] = (uint64_t (*)())a1;
  v5[2] = v3;
  v5[3] = v4;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v7 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v6;
  result[3] = v5;
  v13 = result;
  v9 = *(_QWORD *)(a1 + 40);
  if (!v9)
  {
    v13 = 0;
    v12 = off_1E336E568;
    return (uint64_t (***)())v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 24, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = *result;
    return (uint64_t (***)())v12[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::WebSocket::didReceiveBinaryData(uint64_t a1, uint64_t (**a2)()))()
{
  return WebCore::WebSocket::didReceiveBinaryData(a1 - 56, a2);
}

uint64_t (***WebCore::WebSocket::didReceiveMessageError(uint64_t a1, uint64_t (**a2)()))()
{
  uint64_t (*v3)();
  uint64_t (**v4)();
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v3 = *a2;
  *a2 = 0;
  v4 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v4 = (uint64_t (*)())&off_1E336E6C0;
  v4[1] = (uint64_t (*)())a1;
  v4[2] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v6 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E336E568;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 24, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::WebSocket::didReceiveMessageError(uint64_t a1, uint64_t (**a2)()))()
{
  uint64_t (**v3)();
  uint64_t (*v4)();
  uint64_t (**v5)();
  uint64_t v6;
  int v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (***v13)();

  v3 = (uint64_t (**)())(a1 - 56);
  v4 = *a2;
  *a2 = 0;
  v5 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v5 = (uint64_t (*)())&off_1E336E6C0;
  v5[1] = (uint64_t (*)())v3;
  v5[2] = v4;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 - 32);
  *(_QWORD *)(v6 + 8) = v3;
  ++*(_QWORD *)(a1 - 8);
  *(_DWORD *)(a1 - 32) = v7 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = v3;
  result[2] = (uint64_t (**)())v6;
  result[3] = v5;
  v13 = result;
  v9 = *(_QWORD *)(a1 - 16);
  if (!v9)
  {
    v13 = 0;
    v12 = off_1E336E568;
    return (uint64_t (***)())v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 24, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = *result;
    return (uint64_t (***)())v12[1]();
  }
  return result;
}

uint64_t WebCore::WebSocket::didUpdateBufferedAmount(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 80) != 3)
    *(_DWORD *)(this + 128) = a2;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocket::didUpdateBufferedAmount(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 24) != 3)
    *(_DWORD *)(this + 72) = a2;
  return this;
}

_QWORD *WebCore::WebSocket::didStartClosingHandshake(WebCore::WebSocket *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  _QWORD *v10;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E336E6E8;
  v2[1] = this;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *((_DWORD *)this + 6);
  *(_QWORD *)(v3 + 8) = this;
  ++*((_QWORD *)this + 6);
  *((_DWORD *)this + 6) = v4 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = this;
  result[2] = v3;
  result[3] = v2;
  v10 = result;
  v6 = *((_QWORD *)this + 5);
  if (!v6)
  {
    v10 = 0;
    v9 = off_1E336E568;
    return (_QWORD *)v9[1]();
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v8, 24, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
LABEL_6:
    v9 = (uint64_t (**)())*result;
    return (_QWORD *)v9[1]();
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::WebSocket::didStartClosingHandshake(WebCore::WebSocket *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  v2 = (char *)this - 56;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E336E6E8;
  v3[1] = v2;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this - 8);
  *(_QWORD *)(v4 + 8) = v2;
  ++*((_QWORD *)this - 1);
  *((_DWORD *)this - 8) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = v2;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this - 2);
  if (!v7)
  {
    v11 = 0;
    v10 = off_1E336E568;
    return (_QWORD *)v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 24, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = (uint64_t (**)())*result;
    return (_QWORD *)v10[1]();
  }
  return result;
}

uint64_t (***WebCore::WebSocket::didClose(uint64_t a1, int a2, int a3, __int16 a4, WTF::StringImpl **a5))()
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t (***result)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t (**v19)();
  uint64_t (***v20)();

  v9 = *a5;
  if (*a5)
    *(_DWORD *)v9 += 2;
  v10 = WTF::fastMalloc((WTF *)0x28);
  v11 = v10;
  *(_QWORD *)v10 = &off_1E336E710;
  *(_QWORD *)(v10 + 8) = a1;
  *(_DWORD *)(v10 + 16) = a2;
  *(_DWORD *)(v10 + 20) = a3;
  *(_WORD *)(v10 + 24) = a4;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)(v10 + 32) = v9;
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  v13 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v12 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v13 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E336E568;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v12;
  result[3] = (uint64_t (**)())v11;
  v20 = result;
  v15 = *(_QWORD *)(a1 + 40);
  if (!v15)
  {
    v20 = 0;
    v19 = off_1E336E568;
    goto LABEL_11;
  }
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
  {
    v20 = 0;
    goto LABEL_10;
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 - 96) + 104))(v16 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v17, 24, (uint64_t *)&v20);
  result = v20;
  v20 = 0;
  if (result)
  {
LABEL_10:
    v19 = *result;
LABEL_11:
    result = (uint64_t (***)())v19[1]();
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return (uint64_t (***)())WTF::StringImpl::destroy(v9, v18);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::WebSocket::didClose(uint64_t a1, int a2, int a3, __int16 a4, WTF::StringImpl **a5))()
{
  return WebCore::WebSocket::didClose(a1 - 56, a2, a3, a4, a5);
}

uint64_t WebCore::WebSocket::didUpgradeURL(WebCore::WebSocket *this)
{
  return WTF::URL::setProtocol();
}

uint64_t `non-virtual thunk to'WebCore::WebSocket::didUpgradeURL(WebCore::WebSocket *this)
{
  return WTF::URL::setProtocol();
}

WTF *WebCore::WebSocket::dispatchErrorEventIfNeeded(WTF *this)
{
  WebCore::EventTarget *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;

  if (!*((_BYTE *)this + 160))
  {
    v1 = this;
    *((_BYTE *)this + 160) = 1;
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
      v3 = WebCore::threadGlobalDataSlow(this);
    v4 = *(_QWORD *)(v3 + 40);
    if (!v4)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v4 = *(_QWORD *)(v3 + 40);
    }
    v5 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    *(_QWORD *)v5 = off_1E33A4B48;
    *(_QWORD *)(v5 + 8) = 0;
    v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
    v8 = *(_QWORD *)(v4 + 784) != 0;
    *(_DWORD *)(v5 + 16) = 1;
    *(_DWORD *)(v5 + 20) = v7 | v8;
    v9 = *(_DWORD **)(v4 + 784);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(v5 + 24) = v9;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = v6;
    *(_QWORD *)(v5 + 64) = 0;
    this = WebCore::EventTarget::dispatchEvent(v1, (WebCore::Event *)v5);
    if (*(_DWORD *)(v5 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 16);
  }
  return this;
}

uint64_t WebCore::WebSocket::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::WebSocket *WebCore::WebSocket::derefEventTarget(WebCore::WebSocket *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::WebSocket::~WebSocket(this, a2);
    return (WebCore::WebSocket *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::WebSocket::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::WebSocket *WebCore::WebSocket::deref(WebCore::WebSocket *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::WebSocket::~WebSocket(this, a2);
    return (WebCore::WebSocket *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocket::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebSocket::deref(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t WebCore::ThreadableWebSocketChannel::channelInspector(WebCore::ThreadableWebSocketChannel *this)
{
  return 0;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(int a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction *this)
{
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions14RedirectAction19ExtensionPathActionENSA_23RegexSubstitutionActionENSA_18URLTransformActionENSA_9URLActionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::ContentExtensions::RedirectAction::URLTransformAction::~URLTransformAction(WebCore::ContentExtensions::RedirectAction::URLTransformAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 18);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E336E3A8 + v5))(&v10, (char *)this + 40);
  *((_DWORD *)this + 18) = -1;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore17ContentExtensions14RedirectAction18URLTransformAction14QueryTransformEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SE_EEEEEEDcSI_DpT0_(int a1, WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *this)
{
  WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::~QueryTransform(this, this);
}

void WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::~QueryTransform(WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v12 = 8 * v3;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = 24 * v5;
    v7 = (WTF::StringImpl **)(*(_QWORD *)this + 16);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(v7 - 2);
      *(v7 - 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  v10 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2);
  }
}

uint64_t WTF::VectorDestructor<true,WebCore::ContentExtensions::ModifyHeadersAction>::destruct(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  if ((void *)result != a2)
  {
    v16 = v2;
    v17 = v3;
    v5 = result;
    do
    {
      v6 = *(unsigned int *)(v5 + 36);
      v7 = *(unsigned int **)(v5 + 24);
      if ((_DWORD)v6)
      {
        v8 = 24 * v6;
        do
        {
          v9 = v7[4];
          if ((_DWORD)v9 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E336E3B8[v9])(&v14, v7);
          v7[4] = -1;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
        v7 = *(unsigned int **)(v5 + 24);
      }
      if (v7)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
        result = WTF::fastFree((WTF *)v7, a2);
      }
      v10 = *(unsigned int *)(v5 + 20);
      v11 = *(unsigned int **)(v5 + 8);
      if ((_DWORD)v10)
      {
        v12 = 24 * v10;
        do
        {
          v13 = v11[4];
          if ((_DWORD)v13 != -1)
            result = ((uint64_t (*)(char *, unsigned int *))off_1E336E3B8[v13])(&v15, v11);
          v11[4] = -1;
          v11 += 6;
          v12 -= 24;
        }
        while (v12);
        v11 = *(unsigned int **)(v5 + 8);
      }
      if (v11)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        result = WTF::fastFree((WTF *)v11, a2);
      }
      v5 += 48;
    }
    while ((void *)v5 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17ContentExtensions19ModifyHeadersAction16ModifyHeaderInfo15AppendOperationENSB_12SetOperationENSB_15RemoveOperationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didConnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E336E3E0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didConnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = &off_1E336E3E0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didConnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper(WebCore::ThreadableWebSocketChannelClientWrapper *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF **v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;

  v3 = *((unsigned int *)this + 25);
  if ((_DWORD)v3)
  {
    v10 = (WTF **)*((_QWORD *)this + 11);
    v11 = 8 * v3;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        v13 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        WTF::fastFree(v12, a2);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v4 = (WTF *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessage(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E336E408;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessage(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336E408;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessage(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a1 + 24);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)a1 = &off_1E336E430;
  v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336E430;
  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a1 + 24);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didUpdateBufferedAmount(unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E336E458;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didUpdateBufferedAmount(unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = &off_1E336E458;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didUpdateBufferedAmount(unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 48))(result, *(unsigned int *)(a1 + 24));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didStartClosingHandshake(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E336E480;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didStartClosingHandshake(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = &off_1E336E480;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didStartClosingHandshake(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E336E4A8;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336E4A8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)result + 64))(result, *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28), *(unsigned __int16 *)(a1 + 32), a1 + 40);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessageError(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E336E4D0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessageError(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336E4D0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessageError(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1 + 24);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didUpgradeURL(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E336E4F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didUpgradeURL(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = &off_1E336E4F8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::didUpgradeURL(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3)
{
  uint64_t v5;
  char *result;
  int8x16_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  unsigned int v20;
  int8x16_t *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char *v32;
  int8x16_t *v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  size_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v5 = *((_QWORD *)a1 + 1);
  if ((v5 || (v5 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v7 = *a2;
      v8 = *a3;
      v9 = &result[2 * a2[1]];
      v10 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v10)
      {
        v11 = &result[2 * v10];
        v12 = 0uLL;
        do
        {
          v41.val[0] = *v7;
          v13 = v7[1];
          v43.val[0] = v7[2];
          v14 = v7[3];
          v7 += 4;
          v15 = v14;
          v43.val[1] = 0uLL;
          v45.val[0] = v13;
          v41.val[1] = 0uLL;
          v16 = result;
          vst2q_s8(v16, v41);
          v16 += 32;
          v45.val[1] = 0uLL;
          vst2q_s8(v16, v45);
          v17 = result + 64;
          vst2q_s8(v17, v43);
          v18 = result + 96;
          vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
          result += 128;
        }
        while (result != v11);
        result = v11;
      }
      while (result != v9)
      {
        v19 = v7->u8[0];
        v7 = (int8x16_t *)((char *)v7 + 1);
        *(_WORD *)result = v19;
        result += 2;
      }
      v20 = *(_DWORD *)(v8 + 16);
      v21 = (int8x16_t *)(v8 + 16 - v20);
      v22 = &v9[2 * v20];
      if (v20 >= 0x40)
      {
        v23 = &v9[2 * (v20 & 0xFFFFFFC0)];
        v24 = 0uLL;
        do
        {
          v42.val[0] = *v21;
          v25 = v21[1];
          v44.val[0] = v21[2];
          v26 = v21[3];
          v21 += 4;
          v27 = v26;
          v44.val[1] = 0uLL;
          v46.val[0] = v25;
          v42.val[1] = 0uLL;
          v28 = v9;
          vst2q_s8(v28, v42);
          v28 += 32;
          v46.val[1] = 0uLL;
          vst2q_s8(v28, v46);
          v29 = v9 + 64;
          vst2q_s8(v29, v44);
          v30 = v9 + 96;
          vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
          v9 += 128;
        }
        while (v9 != v23);
        v9 = v23;
      }
      while (v9 != v22)
      {
        v31 = v21->u8[0];
        v21 = (int8x16_t *)((char *)v21 + 1);
        *(_WORD *)v9 = v31;
        v9 += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v32 = result;
      v33 = a2[1];
      v34 = v33;
      v35 = *a3;
      if ((_DWORD)v33)
      {
        v36 = *a2;
        if ((_DWORD)v33 == 1)
          *result = v36->i8[0];
        else
          result = (char *)memcpy(result, v36, a2[1]);
      }
      v39 = *(_DWORD *)(v35 + 16);
      v38 = v35 + 16;
      v37 = v39;
      if (v39)
      {
        result = &v32[v34];
        v40 = (char *)(v38 - v37);
        if ((_DWORD)v37 == 1)
          *result = *v40;
        else
          return (char *)memcpy(result, v40, v37);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SQLTransaction,WTF::RawPtrTraits<WebCore::SQLTransaction>,WTF::DefaultRefDerefTraits<WebCore::SQLTransaction>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  unsigned int **v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (unsigned int **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (unsigned int *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (unsigned int **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            v24 = v23 + 4;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v23 + 4);
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SQLTransactionCoordinator::CoordinationInfo,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SQLTransactionCoordinator::CoordinationInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  WTF::StringImpl **v23;
  WebCore::SQLTransactionCoordinator::CoordinationInfo *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 56 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 56 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v15 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v15);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v23 = (WTF::StringImpl **)(v17 + 56 * (v20 & v18));
            v20 = ++v21 + (v20 & v18);
          }
          while (*v23);
          v24 = (WebCore::SQLTransactionCoordinator::CoordinationInfo *)(v17 + 56 * v22 + 8);
          WebCore::SQLTransactionCoordinator::CoordinationInfo::~CoordinationInfo(v24, v8);
          v26 = *v23;
          *v23 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v25);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = *v14;
          *v14 = 0;
          *v23 = v27;
          v28 = v4 + 56 * v11;
          *(_OWORD *)v24 = 0u;
          *(_OWORD *)(v17 + 56 * v22 + 24) = 0u;
          v29 = *(_QWORD *)(v28 + 8);
          v28 += 8;
          *(_QWORD *)v24 = v29;
          *(_QWORD *)v28 = 0;
          v30 = v17 + 56 * v22;
          v31 = *(_QWORD *)(v30 + 16);
          v32 = *(_QWORD *)(v28 + 16);
          *(_QWORD *)(v30 + 16) = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v30 + 24) = v32;
          *(_QWORD *)(v28 + 8) = v31;
          *(_QWORD *)(v28 + 16) = 0;
          *(_DWORD *)(v30 + 32) = *(_DWORD *)(v28 + 24);
          *(_DWORD *)(v28 + 24) = 0;
          *(_QWORD *)(v30 + 40) = 0;
          v33 = *(_QWORD *)(v28 + 32);
          *(_QWORD *)(v28 + 32) = 0;
          *(_QWORD *)(v30 + 40) = v33;
          v34 = *(_QWORD *)(v28 + 40);
          *(_QWORD *)(v28 + 40) = 0;
          *(_QWORD *)(v30 + 48) = v34;
          WebCore::SQLTransactionCoordinator::CoordinationInfo::~CoordinationInfo((WebCore::SQLTransactionCoordinator::CoordinationInfo *)v28, v25);
          v35 = *v14;
          *v14 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (v14 == a3)
            v12 = v17 + 56 * v22;
        }
        else
        {
          WebCore::SQLTransactionCoordinator::CoordinationInfo::~CoordinationInfo((WebCore::SQLTransactionCoordinator::CoordinationInfo *)(v4 + 56 * v11 + 8), v8);
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE **)result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v8 = *a2;
    v9 = *a2;
    do
    {
      ++v7;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
    if ((v7 & 0x80000000) == 0)
    {
      v11 = (v6 + v7);
      if (!__OFADD__((_DWORD)v6, v7))
      {
        if (!(_DWORD)v11)
        {
          v12 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_17;
        }
        if ((v11 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
          v12 = v15[0];
          if (v15[0])
          {
            v13 = (_BYTE *)(v15[0] + 20);
            *(_DWORD *)v15[0] = 2;
            *(_DWORD *)(v12 + 4) = v11;
            *(_QWORD *)(v12 + 8) = v12 + 20;
            *(_DWORD *)(v12 + 16) = 4;
            if ((_DWORD)v6)
            {
              if ((_DWORD)v6 == 1)
                *v13 = *v5;
              else
                result = (uint64_t)memcpy((void *)(v12 + 20), v5, v6);
            }
            v14 = 0;
            do
            {
              *((_BYTE *)&v15[3] + v14--) = (v8 % 0xA) | 0x30;
              v10 = v8 > 9;
              v8 /= 0xAuLL;
            }
            while (v10);
            if (v14 + 26 <= 25)
              result = (uint64_t)memcpy(&v13[v6], (char *)&v15[3] + v14 + 1, -v14);
          }
          goto LABEL_17;
        }
      }
    }
    v12 = 0;
LABEL_17:
    *a3 = v12;
    return result;
  }
  v6 = v4 - 1;
  if (!((unint64_t)(v4 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *a1 = &off_1E336E530;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = &off_1E336E530;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, void *a2)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks(*(unsigned int **)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebSocket>(WebCore::WebSocket &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebSocket>(WebCore::WebSocket &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebSocket>(WebCore::WebSocket &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::WebSocket>(WebCore::WebSocket &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::WebSocket *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E336E568;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 48);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::WebSocket *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::WebSocket::~WebSocket(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::failAsynchronously(void)::$_0,void>::call(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = *(WTF **)(a1 + 8);
  WebCore::WebSocket::dispatchErrorEventIfNeeded(v1);
  return WebCore::WebSocket::stop(v1, v2);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, unsigned int a8@<W7>, _QWORD *a9@<X8>)
{
  int v15;
  _DWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  int8x16_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  char v45;
  _DWORD *v46;
  uint64_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v46;
        if (v46)
        {
          v18 = v46 + 5;
          *v46 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v18 = *(_BYTE *)a3;
            else
              result = (uint64_t)memcpy(v17 + 5, a3, a4);
          }
          v19 = &v18[a4];
          if ((a6 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a6)
            {
              if ((_DWORD)a6 == 1)
                *v19 = *a5;
              else
                result = (uint64_t)memcpy(&v18[a4], a5, a6);
            }
          }
          else
          {
            if (a6 < 0x10)
            {
              v42 = (unsigned __int128 *)&v18[a4];
            }
            else
            {
              v42 = (unsigned __int128 *)&v19[a6 & 0xFFFFFFF0];
              v43 = (unsigned __int128 *)&v18[a4];
              do
              {
                v44 = (unsigned __int128)vld2q_s8(a5);
                a5 += 32;
                *v43++ = v44;
              }
              while (v43 != v42);
            }
            while (v42 != (unsigned __int128 *)&v19[a6])
            {
              v45 = *a5;
              a5 += 2;
              *(_BYTE *)v42 = v45;
              v42 = (unsigned __int128 *)((char *)v42 + 1);
            }
          }
          if (a8)
          {
            result = (uint64_t)&v19[a6];
            if (a8 == 1)
              *(_BYTE *)result = *(_BYTE *)a7;
            else
              result = (uint64_t)memcpy((void *)result, a7, a8);
          }
        }
        goto LABEL_30;
      }
LABEL_35:
      v17 = 0;
      goto LABEL_30;
    }
LABEL_34:
    v17 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_30;
  }
  if (!(_DWORD)result)
    goto LABEL_34;
  if (result > 0x7FFFFFEF)
    goto LABEL_35;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v46;
  if (v46)
  {
    v20 = (char *)(v46 + 5);
    *v46 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    v21 = (uint64_t)v17 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v22 = &v20[2 * (a4 & 0xFFFFFFC0)];
      v23 = 0uLL;
      do
      {
        v48.val[0] = (int8x16_t)*a3;
        v24 = *((int8x16_t *)a3 + 1);
        v50.val[0] = (int8x16_t)a3[2];
        v25 = a3[3];
        a3 += 4;
        v26 = v25;
        v50.val[1] = 0uLL;
        v52.val[0] = v24;
        v48.val[1] = 0uLL;
        v27 = v20;
        vst2q_s8(v27, v48);
        v27 += 32;
        v52.val[1] = 0uLL;
        vst2q_s8(v27, v52);
        v28 = v20 + 64;
        vst2q_s8(v28, v50);
        v29 = v20 + 96;
        vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
        v20 += 128;
      }
      while (v20 != v22);
      v20 = v22;
    }
    while (v20 != (char *)v21)
    {
      v30 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v20 = v30;
      v20 += 2;
    }
    v46 = a5;
    v47 = a6;
    result = (uint64_t)WTF::StringView::getCharacters<char16_t>(&v46, (char *)v17 + 2 * a4 + 20);
    v31 = (char *)(v21 + 2 * v47);
    v32 = &v31[2 * a8];
    if ((a8 & 0xFFFFFFC0) != 0)
    {
      v33 = &v31[2 * (a8 & 0xFFFFFFC0)];
      v34 = 0uLL;
      do
      {
        v49.val[0] = (int8x16_t)*a7;
        v35 = *((int8x16_t *)a7 + 1);
        v51.val[0] = (int8x16_t)a7[2];
        v36 = a7[3];
        a7 += 4;
        v37 = v36;
        v51.val[1] = 0uLL;
        v53.val[0] = v35;
        v49.val[1] = 0uLL;
        v38 = v31;
        vst2q_s8(v38, v49);
        v38 += 32;
        v53.val[1] = 0uLL;
        vst2q_s8(v38, v53);
        v39 = v31 + 64;
        vst2q_s8(v39, v51);
        v40 = v31 + 96;
        vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
        v31 += 128;
      }
      while (v31 != v33);
      v31 = v33;
    }
    while (v31 != v32)
    {
      v41 = *(unsigned __int8 *)a7;
      a7 = (_OWORD *)((char *)a7 + 1);
      *(_WORD *)v31 = v41;
      v31 += 2;
    }
  }
LABEL_30:
  *a9 = v17;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocket::connect(WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E336E5B8;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::connect(WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E336E5B8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::connect(WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::call(uint64_t a1)
{
  uint64_t *v1;

  {
    WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
  }
  v1 = (uint64_t *)WebCore::sharedObserver(void)::observer;
  if (!WebCore::sharedObserver(void)::observer)
    v1 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v1 + 24))(v1, a1 + 8, a1 + 48);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocket::connect(WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E336E5E0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::connect(WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336E5E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::connect(WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*(_BYTE *)(a2 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1955BBBE8);
  }
  v2 = *(_QWORD *)(a2 + 336);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 280) + 16) + 1152))(*(_QWORD *)(*(_QWORD *)(v3 + 280) + 16), result + 8);
      do
      {
        v6 = __ldaxr(v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v4));
      if (!v7)
      {
        atomic_store(1u, v4);
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v8 = off_1E31FE290;
        v8[1] = v4;
        v9 = v8;
        WTF::ensureOnMainThread();
        result = (uint64_t)v9;
        if (v9)
          return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
      }
    }
  }
  return result;
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::WebSocket::didConnect(void)::$_0,void>::call(uint64_t (***result)()))()
{
  uint64_t (**v1)();
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v1 = result[1];
  v2 = *((_DWORD *)v1 + 20);
  if (v2)
  {
    if (v2 != 3)
      return WebCore::WebSocket::didClose((uint64_t)result[1], 0, 0, 1006, MEMORY[0x1E0CBF738]);
    return result;
  }
  *((_DWORD *)v1 + 20) = 1;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v1[9] + 8))(&v19);
  v4 = v19;
  v19 = 0;
  v5 = (WTF::StringImpl *)v1[18];
  v1[18] = (uint64_t (*)())v4;
  if (v5)
  {
    v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 != 2)
    {
LABEL_6:
      *(_DWORD *)v5 = v6;
      goto LABEL_7;
    }
    WTF::StringImpl::destroy(v5, v3);
    v5 = v19;
    v19 = 0;
    if (v5)
    {
      v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 != 2)
        goto LABEL_6;
      WTF::StringImpl::destroy(v5, v17);
    }
  }
LABEL_7:
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v1[9] + 16))(&v19);
  v8 = v19;
  v19 = 0;
  v9 = (WTF::StringImpl *)v1[19];
  v1[19] = (uint64_t (*)())v8;
  if (!v9)
    goto LABEL_10;
  v10 = *(_DWORD *)v9 - 2;
  if (*(_DWORD *)v9 != 2)
    goto LABEL_9;
  WTF::StringImpl::destroy(v9, v7);
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 != 2)
    {
LABEL_9:
      *(_DWORD *)v9 = v10;
      goto LABEL_10;
    }
    v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v18);
  }
LABEL_10:
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
    v12 = WebCore::threadGlobalDataSlow(v9);
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
    v13 = *(_QWORD *)(v12 + 40);
  }
  v14 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
  *(_DWORD *)(v14 + 16) = 1;
  *(_QWORD *)v14 = off_1E33A4B48;
  *(_QWORD *)(v14 + 8) = 0;
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(v14 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v13 + 1376) != 0);
  v16 = *(_DWORD **)(v13 + 1376);
  if (v16)
    *v16 += 2;
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = 0;
  result = (uint64_t (***)())WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, (WebCore::Event *)v14);
  if (*(_DWORD *)(v14 + 16) == 1)
    return (uint64_t (***)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  --*(_DWORD *)(v14 + 16);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveMessage(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336E630;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveMessage(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336E630;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveMessage(WTF::String &&)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  _QWORD *v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::Event *v13;
  void *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  WTF *v22;
  char *v23;
  void *v24;
  uint64_t v25;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  int v49;
  uint64_t v50;
  int v51;
  char *v52;
  WTF *v53;

  v1 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v1 + 80) == 1)
  {
    v2 = result;
    if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      goto LABEL_3;
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 96))(*(_QWORD *)(v1 + 72));
    if (!v20)
      goto LABEL_3;
    v21 = (_QWORD *)v20;
    WTF::String::utf8();
    v22 = v48;
    if (v48)
    {
      v23 = (char *)v48 + 16;
      v22 = (WTF *)*((_QWORD *)v48 + 1);
    }
    else
    {
      v23 = 0;
    }
    LOBYTE(v51) = 0;
    v52 = v23;
    v53 = v22;
    v50 = 1;
    v24 = (void *)v21[1];
    if (v24)
    {
      if (*v21)
      {
        v25 = *(_QWORD *)(*v21 + 8);
        if (v25)
        {
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            goto LABEL_64;
        }
      }
    }
    while (1)
    {
      v27 = v48;
      v48 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::fastFree(v27, v24);
        else
          --*(_DWORD *)v27;
      }
LABEL_3:
      v4 = (WTF *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      v48 = v4;
      v49 = 2;
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v1 + 88), (uint64_t *)&v46);
      v5 = v46;
      v6 = *((unsigned int *)v46 + 8);
      if ((_DWORD)v6 == 1)
      {
        v8 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        goto LABEL_7;
      }
      if ((_DWORD)v6 != -1)
        break;
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_64:
      v33 = *(_QWORD *)(v25 + 528);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 8);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 24);
          if (v35)
          {
            v36 = *(_QWORD *)(v35 + 8);
            if (v36)
              goto LABEL_79;
          }
        }
      }
      v37 = *(_QWORD *)(v25 + 2632);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 8);
        if (v38)
        {
          v39 = *(_QWORD *)(v38 + 528);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 8);
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 24);
              if (v41)
              {
                v36 = *(_QWORD *)(v41 + 8);
                if (v36)
                {
LABEL_79:
                  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 80) + 8) + 192);
                  if (v42)
                    WebCore::InspectorNetworkAgent::didReceiveWebSocketFrame(v42, (Inspector::IdentifiersFactory *)v24, (const WebCore::WebSocketFrame *)&v50);
                }
              }
            }
          }
        }
      }
    }
    v50 = (uint64_t)&v43;
    v7 = (_QWORD *)((uint64_t (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v50, (char *)v46 + 8);
    if (MEMORY[0x19AEA53F4](*v7, "file", 4) && *((_BYTE *)v5 + 59))
      v8 = (WebCore *)WTF::String::String(&v47, (uint64_t)"null", 5);
    else
      v8 = (WebCore *)WebCore::SecurityOriginData::toString((WTF *)((char *)v5 + 8), &v47);
LABEL_7:
    v44 = 0;
    v45 = 0;
    LOBYTE(v50) = 0;
    LOBYTE(v52) = 0;
    v43 = 0;
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
      v10 = WebCore::threadGlobalDataSlow(v8);
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v11 = *(_QWORD *)(v10 + 40);
    }
    v12 = (_QWORD *)(v11 + 1192);
    v13 = (WebCore::Event *)bmalloc::api::isoAllocate();
    WebCore::MessageEvent::MessageEvent((uint64_t)v13, v12, (uint64_t)&v48, (_DWORD **)&v47, (_DWORD **)&v45, (uint64_t)&v50, (uint64_t *)&v43);
    WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, v13);
    if (*((_DWORD *)v13 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)v13 + 8))(v13);
    else
      --*((_DWORD *)v13 + 4);
    if (HIDWORD(v44))
    {
      v31 = (uint64_t *)v43;
      v32 = 8 * HIDWORD(v44);
      do
      {
        v31 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v31, v14)+ 1;
        v32 -= 8;
      }
      while (v32);
    }
    v15 = v43;
    if (v43)
    {
      v43 = 0;
      LODWORD(v44) = 0;
      WTF::fastFree(v15, v14);
    }
    if ((_BYTE)v52 && v51 != -1)
      ((void (*)(WTF **, uint64_t *))off_1E336E648[v51])(&v43, &v50);
    v16 = v45;
    v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = v47;
    v47 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
    v17 = v46;
    v46 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr((unsigned int *)v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)v17);
        v28 = (WTF::StringImpl *)*((_QWORD *)v17 + 6);
        *((_QWORD *)v17 + 6) = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v14);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = (WTF::StringImpl *)*((_QWORD *)v17 + 5);
        *((_QWORD *)v17 + 5) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v14);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = *((unsigned int *)v17 + 8);
        if ((_DWORD)v30 != -1)
          ((void (*)(uint64_t *, char *))off_1E336E378[v30])(&v50, (char *)v17 + 8);
        *((_DWORD *)v17 + 8) = -1;
        result = (WTF::StringImpl *)WTF::fastFree(v17, v14);
      }
    }
    if (v49 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF **))off_1E336E660[v49])(&v50, &v48);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E336E698;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E336E698;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD *v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::Event *v13;
  void *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  _QWORD *v28;
  WebCore *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  WebCore::Event *v34;
  void *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  Inspector::IdentifiersFactory *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;

  v1 = result[1];
  if (*(_DWORD *)(v1 + 80) != 1)
    return result;
  v2 = result;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v41 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 96))(*(_QWORD *)(v1 + 72));
    if (v41)
    {
      v42 = v2[2];
      v43 = *((unsigned int *)v2 + 7);
      LOBYTE(v77) = 0;
      v78 = v42;
      v79 = v43;
      v76 = 2;
      v44 = (Inspector::IdentifiersFactory *)v41[1];
      if (v44)
      {
        if (*v41)
        {
          v45 = *(_QWORD *)(*v41 + 8);
          if (v45)
          {
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v47 = *(_QWORD *)(v45 + 528);
              if (v47)
              {
                v48 = *(_QWORD *)(v47 + 8);
                if (v48)
                {
                  v49 = *(_QWORD *)(v48 + 24);
                  if (v49)
                  {
                    v50 = *(_QWORD *)(v49 + 8);
                    if (v50)
                      goto LABEL_89;
                  }
                }
              }
              v51 = *(_QWORD *)(v45 + 2632);
              if (v51)
              {
                v52 = *(_QWORD *)(v51 + 8);
                if (v52)
                {
                  v53 = *(_QWORD *)(v52 + 528);
                  if (v53)
                  {
                    v54 = *(_QWORD *)(v53 + 8);
                    if (v54)
                    {
                      v55 = *(_QWORD *)(v54 + 24);
                      if (v55)
                      {
                        v50 = *(_QWORD *)(v55 + 8);
                        if (v50)
                        {
LABEL_89:
                          v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80) + 8) + 192);
                          if (v56)
                            WebCore::InspectorNetworkAgent::didReceiveWebSocketFrame(v56, v44, (const WebCore::WebSocketFrame *)&v76);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (*(_BYTE *)(v1 + 136))
  {
    JSC::ArrayBuffer::create();
    v4 = v73;
    v73 = 0;
    v74 = (uint64_t)v4;
    v75 = 4;
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v1 + 88), (uint64_t *)&v71);
    v5 = v71;
    v6 = *((unsigned int *)v71 + 8);
    if ((_DWORD)v6 == 1)
    {
      v8 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_8:
      v68 = 0;
      v69 = 0;
      LOBYTE(v76) = 0;
      LOBYTE(v78) = 0;
      v70 = 0;
      v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
        v10 = WebCore::threadGlobalDataSlow(v8);
      v11 = *(_QWORD *)(v10 + 40);
      if (!v11)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
        v11 = *(_QWORD *)(v10 + 40);
      }
      v12 = (_QWORD *)(v11 + 1192);
      v13 = (WebCore::Event *)bmalloc::api::isoAllocate();
      WebCore::MessageEvent::MessageEvent((uint64_t)v13, v12, (uint64_t)&v74, (_DWORD **)&v72, (_DWORD **)&v68, (uint64_t)&v76, (uint64_t *)&v69);
      WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, v13);
      if (*((_DWORD *)v13 + 4) == 1)
        (*(void (**)(WebCore::Event *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 4);
      if (HIDWORD(v70))
      {
        v63 = (uint64_t *)v69;
        v64 = 8 * HIDWORD(v70);
        do
        {
          v63 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v63, v14)+ 1;
          v64 -= 8;
        }
        while (v64);
      }
      v15 = v69;
      if (v69)
      {
        v69 = 0;
        LODWORD(v70) = 0;
        WTF::fastFree(v15, v14);
      }
      if ((_BYTE)v78 && v77 != -1)
        ((void (*)(WTF **, uint64_t *))off_1E336E648[v77])(&v69, &v76);
      v16 = v68;
      v68 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v72;
      v72 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v71;
      v71 = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr((unsigned int *)v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)v18));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)v18);
          v57 = (WTF::StringImpl *)*((_QWORD *)v18 + 6);
          *((_QWORD *)v18 + 6) = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v14);
            else
              *(_DWORD *)v57 -= 2;
          }
          v58 = (WTF::StringImpl *)*((_QWORD *)v18 + 5);
          *((_QWORD *)v18 + 5) = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v14);
            else
              *(_DWORD *)v58 -= 2;
          }
          v59 = *((unsigned int *)v18 + 8);
          if ((_DWORD)v59 != -1)
            ((void (*)(uint64_t *, char *))off_1E336E378[v59])(&v76, (char *)v18 + 8);
          *((_DWORD *)v18 + 8) = -1;
          WTF::fastFree(v18, v14);
        }
      }
      if (v75 != -1)
        ((void (*)(uint64_t *, uint64_t *))off_1E336E660[v75])(&v76, &v74);
      v75 = -1;
      return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v73);
    }
    if ((_DWORD)v6 != -1)
    {
      v76 = (uint64_t)&v69;
      v7 = (_QWORD *)((uint64_t (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v76, (char *)v71 + 8);
      if (MEMORY[0x19AEA53F4](*v7, "file", 4) && *((_BYTE *)v5 + 59))
        v8 = (WebCore *)WTF::String::String(&v72, (uint64_t)"null", 5);
      else
        v8 = (WebCore *)WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v5 + 8), &v72);
      goto LABEL_8;
    }
LABEL_124:
    v67 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveMessageError(WTF::String &&)::$_0,void>::~CallableWrapper(v67);
  }
  v21 = *(_QWORD *)(v1 + 40);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
      v23 = (WebCore::ScriptExecutionContext *)(v22 - 96);
    else
      v23 = 0;
  }
  else
  {
    v23 = 0;
  }
  v24 = bmalloc::api::isoAllocate();
  v25 = WebCore::Blob::Blob(v24, v23, (uint64_t)(v2 + 2), MEMORY[0x1E0CBF738]);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v25 + 24));
  v74 = v24;
  v75 = 3;
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v1 + 88), (uint64_t *)&v72);
  v26 = v72;
  v27 = *((unsigned int *)v72 + 8);
  if ((_DWORD)v27 == 1)
  {
    v29 = (WebCore *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    if ((_DWORD)v27 == -1)
      goto LABEL_124;
    v76 = (uint64_t)&v69;
    v28 = (_QWORD *)((uint64_t (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v27])(&v76, (char *)v72 + 8);
    if (MEMORY[0x19AEA53F4](*v28, "file", 4) && *((_BYTE *)v26 + 59))
      v29 = (WebCore *)WTF::String::String(&v73, (uint64_t)"null", 5);
    else
      v29 = (WebCore *)WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v26 + 8), &v73);
  }
  v70 = 0;
  v71 = 0;
  LOBYTE(v76) = 0;
  LOBYTE(v78) = 0;
  v69 = 0;
  v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
    v31 = WebCore::threadGlobalDataSlow(v29);
  v32 = *(_QWORD *)(v31 + 40);
  if (!v32)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
    v32 = *(_QWORD *)(v31 + 40);
  }
  v33 = (_QWORD *)(v32 + 1192);
  v34 = (WebCore::Event *)bmalloc::api::isoAllocate();
  WebCore::MessageEvent::MessageEvent((uint64_t)v34, v33, (uint64_t)&v74, (_DWORD **)&v73, (_DWORD **)&v71, (uint64_t)&v76, (uint64_t *)&v69);
  WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, v34);
  if (*((_DWORD *)v34 + 4) == 1)
    (*(void (**)(WebCore::Event *))(*(_QWORD *)v34 + 8))(v34);
  else
    --*((_DWORD *)v34 + 4);
  if (HIDWORD(v70))
  {
    v65 = (uint64_t *)v69;
    v66 = 8 * HIDWORD(v70);
    do
    {
      v65 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v65, v35)+ 1;
      v66 -= 8;
    }
    while (v66);
  }
  v36 = v69;
  if (v69)
  {
    v69 = 0;
    LODWORD(v70) = 0;
    WTF::fastFree(v36, v35);
  }
  if ((_BYTE)v78 && v77 != -1)
    ((void (*)(WTF **, uint64_t *))off_1E336E648[v77])(&v69, &v76);
  v37 = v71;
  v71 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  result = (uint64_t *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)result -= 2;
  }
  v38 = v72;
  v72 = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr((unsigned int *)v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v38));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)v38);
      v60 = (WTF::StringImpl *)*((_QWORD *)v38 + 6);
      *((_QWORD *)v38 + 6) = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v35);
        else
          *(_DWORD *)v60 -= 2;
      }
      v61 = (WTF::StringImpl *)*((_QWORD *)v38 + 5);
      *((_QWORD *)v38 + 5) = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v35);
        else
          *(_DWORD *)v61 -= 2;
      }
      v62 = *((unsigned int *)v38 + 8);
      if ((_DWORD)v62 != -1)
        ((void (*)(uint64_t *, char *))off_1E336E378[v62])(&v76, (char *)v38 + 8);
      *((_DWORD *)v38 + 8) = -1;
      result = (uint64_t *)WTF::fastFree(v38, v35);
    }
  }
  if (v75 != -1)
    return (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E336E660[v75])(&v76, &v74);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveMessageError(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336E6C0;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveMessageError(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336E6C0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::WebSocket::didReceiveMessageError(WTF::String &&)::$_0,void>::call(WTF *result)
{
  uint64_t v1;
  WTF *v3;
  WebCore::WebSocketChannelInspector *v4;

  v1 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v1 + 80) != 3)
  {
    *(_DWORD *)(v1 + 80) = 3;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v3 = result;
      v4 = (WebCore::WebSocketChannelInspector *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 96))(*(_QWORD *)(v1 + 72));
      if (v4)
        WebCore::WebSocketChannelInspector::didReceiveWebSocketFrameError(v4, (WTF *)((char *)v3 + 16));
    }
    return WebCore::WebSocket::dispatchErrorEventIfNeeded((WTF *)v1);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::didStartClosingHandshake(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 80) != 3)
    *(_DWORD *)(v1 + 80) = 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocket::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336E710;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebSocket::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336E710;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebSocket::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  int v4;
  BOOL v6;
  __int16 v7;
  WebCore *v8;
  WebCore *v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  bmalloc::api *v19;
  void *v20;
  WebCore::WebSocketChannelInspector *v21;
  Inspector::IdentifiersFactory *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::WebSocketChannelInspector *v34;
  int v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v1 = result[1];
  if (!*(_QWORD *)(v1 + 72))
    return result;
  v2 = result;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v21 = (WebCore::WebSocketChannelInspector *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 96))(*(_QWORD *)(v1 + 72));
    if (v21)
    {
      v35 = 8;
      v36 = 1;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v22 = (Inspector::IdentifiersFactory *)*((_QWORD *)v21 + 1);
      if (v22)
      {
        if (*(_QWORD *)v21)
        {
          v23 = *(_QWORD *)(*(_QWORD *)v21 + 8);
          if (v23)
          {
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v25 = *(_QWORD *)(v23 + 528);
              if (v25)
              {
                v26 = *(_QWORD *)(v25 + 8);
                if (v26)
                {
                  v27 = *(_QWORD *)(v26 + 24);
                  if (v27)
                  {
                    v28 = *(_QWORD *)(v27 + 8);
                    if (v28)
                      goto LABEL_55;
                  }
                }
              }
              v29 = *(_QWORD *)(v23 + 2632);
              if (v29)
              {
                v30 = *(_QWORD *)(v29 + 8);
                if (v30)
                {
                  v31 = *(_QWORD *)(v30 + 528);
                  if (v31)
                  {
                    v32 = *(_QWORD *)(v31 + 8);
                    if (v32)
                    {
                      v33 = *(_QWORD *)(v32 + 24);
                      if (v33)
                      {
                        v28 = *(_QWORD *)(v33 + 8);
                        if (v28)
                        {
LABEL_55:
                          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 80) + 8) + 192))
                          {
                            v34 = v21;
                            WebCore::InspectorNetworkAgent::didReceiveWebSocketFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 80) + 8) + 192), v22, (const WebCore::WebSocketFrame *)&v35);
                            v21 = v34;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      WebCore::WebSocketChannelInspector::didCloseWebSocket(v21);
    }
  }
  v4 = *((_DWORD *)v2 + 4);
  if (*(_DWORD *)(v1 + 80) == 2 && v4 == 0)
  {
    if (*((_DWORD *)v2 + 5) == 1)
    {
      v4 = 0;
      v6 = *((unsigned __int16 *)v2 + 12) != 1006;
      goto LABEL_12;
    }
    v4 = 0;
  }
  v6 = 0;
LABEL_12:
  *(_DWORD *)(v1 + 80) = 3;
  *(_DWORD *)(v1 + 128) = v4;
  v7 = *((_WORD *)v2 + 12);
  v8 = (WebCore *)bmalloc::api::isoAllocate();
  v9 = v8;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(WebCore **)(v10 + 96)) == 0)
  {
    v8 = (WebCore *)WebCore::threadGlobalDataSlow(v8);
    v11 = v8;
  }
  v12 = *((_QWORD *)v11 + 5);
  if (!v12)
  {
    v8 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *((_QWORD *)v11 + 5);
  }
  WTF::MonotonicTime::now(v8);
  *((_QWORD *)v9 + 1) = 0;
  *((_DWORD *)v9 + 4) = 1;
  *((_DWORD *)v9 + 5) = *((_DWORD *)v9 + 5) & 0xFFC00000 | 0x1B0200 | (*(_QWORD *)(v12 + 408) != 0);
  v14 = *(_DWORD **)(v12 + 408);
  if (v14)
    *v14 += 2;
  *((_QWORD *)v9 + 3) = v14;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = v13;
  *((_QWORD *)v9 + 8) = 0;
  *(_QWORD *)v9 = off_1E32518A8;
  *((_BYTE *)v9 + 72) = v6;
  *((_WORD *)v9 + 37) = v7;
  v15 = (_DWORD *)v2[4];
  if (v15)
    *v15 += 2;
  *((_QWORD *)v9 + 10) = v15;
  WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, v9);
  if (*((_DWORD *)v9 + 4) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v9 + 8))(v9);
  else
    --*((_DWORD *)v9 + 4);
  result = *(_QWORD **)(v1 + 72);
  if (result)
  {
    (*(void (**)(_QWORD *))(*result + 72))(result);
    result = *(_QWORD **)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 168))(result);
  }
  v17 = *(WTF **)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      v18 = *((_QWORD *)v17 + 1);
      --*(_QWORD *)(v18 + 48);
      *((_QWORD *)v17 + 1) = 0;
      if (*(_DWORD *)(v18 + 24) == 1)
      {
        WebCore::WebSocket::~WebSocket((WebCore::WebSocket *)v18, v16);
        bmalloc::api::isoDeallocate(v19, v20);
      }
      else
      {
        --*(_DWORD *)(v18 + 24);
      }
      return (_QWORD *)WTF::fastFree(v17, v16);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  return result;
}

WebCore::WebSocketChannelInspector *WebCore::WebSocketChannelInspector::WebSocketChannelInspector(WebCore::WebSocketChannelInspector *this, WebCore::Document *a2)
{
  unsigned int *v3;
  unsigned int v4;

  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  return this;
}

{
  unsigned int *v3;
  unsigned int v4;

  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  return this;
}

void WebCore::WebSocketChannelInspector::~WebSocketChannelInspector(WebCore::WebSocketChannelInspector *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

WTF::StringImpl *WebCore::WebSocketChannelInspector::didCreateWebSocket(WebCore::WebSocketChannelInspector *this, const WTF::URL *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Inspector::NetworkFrontendDispatcher *v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  result = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (result)
  {
    v4 = *(_QWORD *)this;
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v7 = *(_QWORD *)(v5 + 528);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 24);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                  goto LABEL_16;
              }
            }
          }
          v11 = *(_QWORD *)(v5 + 2632);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 528);
              if (v13)
              {
                v14 = *(_QWORD *)(v13 + 8);
                if (v14)
                {
                  v15 = *(_QWORD *)(v14 + 24);
                  if (v15)
                  {
                    v10 = *(_QWORD *)(v15 + 8);
                    if (v10)
                    {
LABEL_16:
                      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 80) + 8) + 192);
                      if (v16)
                      {
                        v17 = *(Inspector::NetworkFrontendDispatcher **)(v16 + 40);
                        Inspector::IdentifiersFactory::requestId(result);
                        Inspector::NetworkFrontendDispatcher::webSocketCreated(v17, (const WTF::String *)&v20, a2);
                        result = v20;
                        v20 = 0;
                        if (result)
                        {
                          if (*(_DWORD *)result == 2)
                            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
                          else
                            *(_DWORD *)result -= 2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::WebSocketChannelInspector::willSendWebSocketHandshakeRequest(WTF::JSONImpl::Object *this, const WebCore::ResourceRequest *a2)
{
  Inspector::IdentifiersFactory *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (Inspector::IdentifiersFactory *)*((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)this)
    {
      v4 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (v4)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v6 = *(_QWORD *)(v4 + 528);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                  goto LABEL_16;
              }
            }
          }
          v10 = *(_QWORD *)(v4 + 2632);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 528);
              if (v12)
              {
                v13 = *(_QWORD *)(v12 + 8);
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 24);
                  if (v14)
                  {
                    v9 = *(_QWORD *)(v14 + 8);
                    if (v9)
                    {
LABEL_16:
                      this = *(WTF::JSONImpl::Object **)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 192);
                      if (this)
                        return (WTF::JSONImpl::Object *)WebCore::InspectorNetworkAgent::willSendWebSocketHandshakeRequest(this, v3, a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::JSONImpl::Object *WebCore::WebSocketChannelInspector::didReceiveWebSocketHandshakeResponse(WTF::JSONImpl::Object *this, const WebCore::ResourceResponse *a2)
{
  Inspector::IdentifiersFactory *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (Inspector::IdentifiersFactory *)*((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)this)
    {
      v4 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (v4)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v6 = *(_QWORD *)(v4 + 528);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                  goto LABEL_16;
              }
            }
          }
          v10 = *(_QWORD *)(v4 + 2632);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 528);
              if (v12)
              {
                v13 = *(_QWORD *)(v12 + 8);
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 24);
                  if (v14)
                  {
                    v9 = *(_QWORD *)(v14 + 8);
                    if (v9)
                    {
LABEL_16:
                      this = *(WTF::JSONImpl::Object **)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 192);
                      if (this)
                        return (WTF::JSONImpl::Object *)WebCore::InspectorNetworkAgent::didReceiveWebSocketHandshakeResponse(this, v3, (__int16 *)a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebSocketChannelInspector::didCloseWebSocket(WebCore::WebSocketChannelInspector *this)
{
  WTF::StringImpl *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Inspector::NetworkFrontendDispatcher *v16;
  double *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  result = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (result)
  {
    v3 = *(_QWORD *)this;
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v6 = *(_QWORD *)(v4 + 528);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                  goto LABEL_16;
              }
            }
          }
          v10 = *(_QWORD *)(v4 + 2632);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 528);
              if (v12)
              {
                v13 = *(_QWORD *)(v12 + 8);
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 24);
                  if (v14)
                  {
                    v9 = *(_QWORD *)(v14 + 8);
                    if (v9)
                    {
LABEL_16:
                      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 192);
                      if (v15)
                      {
                        v16 = *(Inspector::NetworkFrontendDispatcher **)(v15 + 40);
                        Inspector::IdentifiersFactory::requestId(result);
                        v17 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 24) + 56))(*(_QWORD *)(v15 + 24));
                        WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
                        Inspector::NetworkFrontendDispatcher::webSocketClosed(v16, (const WTF::String *)&v20, v17[1] + v18 - v17[2]);
                        result = v20;
                        v20 = 0;
                        if (result)
                        {
                          if (*(_DWORD *)result == 2)
                            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
                          else
                            *(_DWORD *)result -= 2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebSocketChannelInspector::didReceiveWebSocketFrame(WTF::StringImpl *this, const WebCore::WebSocketFrame *a2)
{
  Inspector::IdentifiersFactory *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (Inspector::IdentifiersFactory *)*((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)this)
    {
      v4 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (v4)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v6 = *(_QWORD *)(v4 + 528);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                  goto LABEL_16;
              }
            }
          }
          v10 = *(_QWORD *)(v4 + 2632);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 528);
              if (v12)
              {
                v13 = *(_QWORD *)(v12 + 8);
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 24);
                  if (v14)
                  {
                    v9 = *(_QWORD *)(v14 + 8);
                    if (v9)
                    {
LABEL_16:
                      this = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 192);
                      if (this)
                        return WebCore::InspectorNetworkAgent::didReceiveWebSocketFrame((uint64_t)this, v3, a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebSocketChannelInspector::didSendWebSocketFrame(WTF::StringImpl *this, const WebCore::WebSocketFrame *a2)
{
  Inspector::IdentifiersFactory *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (Inspector::IdentifiersFactory *)*((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_QWORD *)this)
    {
      v4 = *(_QWORD *)(*(_QWORD *)this + 8);
      if (v4)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v6 = *(_QWORD *)(v4 + 528);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                  goto LABEL_16;
              }
            }
          }
          v10 = *(_QWORD *)(v4 + 2632);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              v12 = *(_QWORD *)(v11 + 528);
              if (v12)
              {
                v13 = *(_QWORD *)(v12 + 8);
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 24);
                  if (v14)
                  {
                    v9 = *(_QWORD *)(v14 + 8);
                    if (v9)
                    {
LABEL_16:
                      this = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 192);
                      if (this)
                        return WebCore::InspectorNetworkAgent::didSendWebSocketFrame((uint64_t)this, v3, a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebSocketChannelInspector::didReceiveWebSocketFrameError(WebCore::WebSocketChannelInspector *this, const WTF::String *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Inspector::NetworkFrontendDispatcher *v17;
  double *v19;
  double v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  result = (WTF::StringImpl *)*((_QWORD *)this + 1);
  if (result)
  {
    v4 = *(_QWORD *)this;
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v7 = *(_QWORD *)(v5 + 528);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 24);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                  goto LABEL_16;
              }
            }
          }
          v11 = *(_QWORD *)(v5 + 2632);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 528);
              if (v13)
              {
                v14 = *(_QWORD *)(v13 + 8);
                if (v14)
                {
                  v15 = *(_QWORD *)(v14 + 24);
                  if (v15)
                  {
                    v10 = *(_QWORD *)(v15 + 8);
                    if (v10)
                    {
LABEL_16:
                      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 80) + 8) + 192);
                      if (v16)
                      {
                        v17 = *(Inspector::NetworkFrontendDispatcher **)(v16 + 40);
                        Inspector::IdentifiersFactory::requestId(result);
                        v19 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 24) + 56))(*(_QWORD *)(v16 + 24));
                        WTF::MonotonicTime::now((WTF::MonotonicTime *)v19);
                        Inspector::NetworkFrontendDispatcher::webSocketFrameError(v17, (const WTF::String *)&v22, v19[1] + v20 - v19[2], a2);
                        result = v22;
                        v22 = 0;
                        if (result)
                        {
                          if (*(_DWORD *)result == 2)
                            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
                          else
                            *(_DWORD *)result -= 2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::WebSocketChannelInspector::progressIdentifier(WebCore::WebSocketChannelInspector *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebCore::WebSocketChannelInspector::createFrame@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_BYTE *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = result;
  *(_QWORD *)(a4 + 24) = a2;
  *(_DWORD *)a4 = a3;
  *(_DWORD *)(a4 + 4) = 0;
  return result;
}

uint64_t WebCore::WebSocketFrame::WebSocketFrame(uint64_t result, int a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  *(_DWORD *)result = a2;
  *(_BYTE *)(result + 4) = a3;
  *(_BYTE *)(result + 5) = a4;
  *(_WORD *)(result + 6) = 0;
  *(_BYTE *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = a6;
  *(_QWORD *)(result + 24) = a7;
  return result;
}

{
  *(_DWORD *)result = a2;
  *(_BYTE *)(result + 4) = a3;
  *(_BYTE *)(result + 5) = a4;
  *(_WORD *)(result + 6) = 0;
  *(_BYTE *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = a6;
  *(_QWORD *)(result + 24) = a7;
  return result;
}

uint64_t WebCore::WebSocketExtensionDeflateFrame::handshakeString@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 8);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::WebSocketExtensionDeflateFrame::processResponse(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (*(_BYTE *)(a1 + 24))
    goto LABEL_2;
  v7 = 1;
  *(_BYTE *)(a1 + 24) = 1;
  v8 = *a2;
  if (!*a2)
    goto LABEL_13;
  v9 = 0;
  v10 = *(_DWORD *)(v8 - 8);
  for (i = 11016378; ; i = v9 + v12)
  {
    v12 = i & v10;
    v13 = *(_QWORD *)(v8 + 16 * v12);
    if (v13 == -1)
      goto LABEL_10;
    if (!v13)
    {
      v14 = *a2;
      if (*a2)
      {
        v52 = *(unsigned int *)(v14 - 4);
        v39 = v14 + 16 * v52;
        goto LABEL_71;
      }
      v7 = 1;
LABEL_13:
      v15 = 15;
LABEL_14:
      v16 = *(_QWORD *)(a1 + 16);
      v17 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v17 = v15;
      *(_DWORD *)(v17 + 4) = v7;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v18 = (_OWORD *)operator new();
      v19 = 0uLL;
      *v18 = 0u;
      v18[1] = 0u;
      v18[2] = 0u;
      v18[3] = 0u;
      v18[4] = 0u;
      v18[5] = 0u;
      v18[6] = 0u;
      v20 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = v18;
      if (v20)
      {
        MEMORY[0x19AEA7644](v20, 0x10B0C40E8CA615DLL);
        v19 = 0uLL;
        v18 = *(_OWORD **)(v17 + 24);
      }
      v18[5] = v19;
      v18[6] = v19;
      v18[3] = v19;
      v18[4] = v19;
      v18[1] = v19;
      v18[2] = v19;
      *v18 = v19;
      v21 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v17;
      if (v21)
      {
        deflateEnd(*(z_streamp *)(v21 + 24));
        v23 = *(_QWORD *)(v21 + 24);
        *(_QWORD *)(v21 + 24) = 0;
        if (v23)
          MEMORY[0x19AEA7644](v23, 0x10B0C40E8CA615DLL);
        v24 = *(WTF **)(v21 + 8);
        if (v24)
        {
          *(_QWORD *)(v21 + 8) = 0;
          *(_DWORD *)(v21 + 16) = 0;
          WTF::fastFree(v24, v22);
        }
        WTF::fastFree((WTF *)v21, v22);
      }
      v25 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v25 = 15;
      *(_QWORD *)(v25 + 8) = 0;
      *(_QWORD *)(v25 + 16) = 0;
      v26 = (_OWORD *)operator new();
      *(_QWORD *)(v25 + 24) = v26;
      *v26 = 0u;
      v26[1] = 0u;
      v26[2] = 0u;
      v26[3] = 0u;
      v26[4] = 0u;
      v26[5] = 0u;
      v26[6] = 0u;
      v27 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v16 + 16) = v25;
      if (v27)
      {
        inflateEnd(*(z_streamp *)(v27 + 24));
        v29 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        if (v29)
          MEMORY[0x19AEA7644](v29, 0x10B0C40E8CA615DLL);
        v30 = *(WTF **)(v27 + 8);
        if (v30)
        {
          *(_QWORD *)(v27 + 8) = 0;
          *(_DWORD *)(v27 + 16) = 0;
          WTF::fastFree(v30, v28);
        }
        WTF::fastFree((WTF *)v27, v28);
      }
      if (deflateInit2_(*(z_streamp *)(*(_QWORD *)(v16 + 8) + 24), -1, 8, -**(_DWORD **)(v16 + 8), 8, 0, "1.2.12", 112)|| inflateInit2_(*(z_streamp *)(*(_QWORD *)(v16 + 16) + 24), -**(_DWORD **)(v16 + 16), "1.2.12", 112))
      {
        v31 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v31)
        {
          deflateEnd(*(z_streamp *)(v31 + 24));
          v33 = *(_QWORD *)(v31 + 24);
          *(_QWORD *)(v31 + 24) = 0;
          if (v33)
            MEMORY[0x19AEA7644](v33, 0x10B0C40E8CA615DLL);
          v34 = *(WTF **)(v31 + 8);
          if (v34)
          {
            *(_QWORD *)(v31 + 8) = 0;
            *(_DWORD *)(v31 + 16) = 0;
            WTF::fastFree(v34, v32);
          }
          WTF::fastFree((WTF *)v31, v32);
        }
        v35 = *(_QWORD *)(v16 + 16);
        *(_QWORD *)(v16 + 16) = 0;
        if (v35)
        {
          inflateEnd(*(z_streamp *)(v35 + 24));
          v37 = *(_QWORD *)(v35 + 24);
          *(_QWORD *)(v35 + 24) = 0;
          if (v37)
            MEMORY[0x19AEA7644](v37, 0x10B0C40E8CA615DLL);
          v38 = *(WTF **)(v35 + 8);
          if (v38)
          {
            *(_QWORD *)(v35 + 8) = 0;
            *(_DWORD *)(v35 + 16) = 0;
            WTF::fastFree(v38, v36);
          }
          WTF::fastFree((WTF *)v35, v36);
        }
        return 1;
      }
      else
      {
        result = 1;
        *(_BYTE *)v16 = 1;
      }
      return result;
    }
    if ((MEMORY[0x19AEA53F4](v13, "max_window_bits", 15) & 1) != 0)
      break;
LABEL_10:
    ++v9;
  }
  v39 = v8 + 16 * v12;
  v14 = *a2;
  if (!*a2)
    goto LABEL_44;
  v52 = *(unsigned int *)(v14 - 4);
LABEL_71:
  if (v39 == v14 + 16 * v52)
  {
    v44 = 0;
    v15 = 15;
    goto LABEL_56;
  }
LABEL_44:
  v40 = *(_QWORD *)(v39 + 8);
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 8);
    v42 = *(unsigned int *)(v40 + 4);
    if ((*(_BYTE *)(v40 + 16) & 4) == 0)
    {
      v43 = WTF::parseInteger<int,char16_t>(v41, v42, 10, 1);
      goto LABEL_52;
    }
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v43 = WTF::parseInteger<int,unsigned char>(v41, v42, 10, 1);
LABEL_52:
  v15 = v43;
  if ((v43 & 0xFF00000000) == 0)
    goto LABEL_2;
  if ((v43 - 16) <= 0xFFFFFFF7)
    goto LABEL_2;
  v14 = *a2;
  if (!*a2)
    goto LABEL_2;
  v44 = 1;
LABEL_56:
  v45 = 0;
  v46 = *(_DWORD *)(v14 - 8);
  v47 = 7549386;
  while (2)
  {
    v48 = v47 & v46;
    v49 = *(_QWORD *)(v14 + 16 * v48);
    if (v49 == -1)
    {
LABEL_60:
      v47 = ++v45 + v48;
      continue;
    }
    break;
  }
  if (v49)
  {
    if ((MEMORY[0x19AEA53F4](v49, "no_context_takeover", 19) & 1) != 0)
    {
      v51 = v14 + 16 * v48;
      v50 = *a2;
      if (!*a2)
        goto LABEL_2;
      v53 = *(unsigned int *)(v50 - 4);
      goto LABEL_75;
    }
    goto LABEL_60;
  }
  v50 = *a2;
  if (!*a2)
  {
    v7 = 1;
    goto LABEL_64;
  }
  v53 = *(unsigned int *)(v50 - 4);
  v51 = v50 + 16 * v53;
LABEL_75:
  if (v51 == v50 + 16 * v53)
  {
    v7 = 1;
  }
  else
  {
    if (*(_QWORD *)(v51 + 8))
      goto LABEL_2;
    v7 = 0;
    ++v44;
  }
  LODWORD(v50) = *(_DWORD *)(v50 - 12);
LABEL_64:
  if (v44 == (_DWORD)v50)
    goto LABEL_14;
LABEL_2:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v54;
  if (v4)
  {
    if (*(_DWORD *)v4 != 2)
    {
      result = 0;
      *(_DWORD *)v4 -= 2;
      return result;
    }
    WTF::StringImpl::destroy(v4, v3);
  }
  return 0;
}

void WebCore::DeflateResultHolder::~DeflateResultHolder(WTF::StringImpl **this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;

  v3 = *((_QWORD *)*this + 1);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 16))
    {
      if (*(_DWORD *)(v3 + 20))
        *(_DWORD *)(v3 + 20) = 0;
      v5 = *(WTF **)(v3 + 8);
      if (v5)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v5, a2);
      }
    }
    if (!*(_DWORD *)(v3 + 4))
      deflateReset(*(z_streamp *)(v3 + 24));
  }
  v4 = this[2];
  this[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;

  v3 = *((_QWORD *)*this + 1);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 16))
    {
      if (*(_DWORD *)(v3 + 20))
        *(_DWORD *)(v3 + 20) = 0;
      v5 = *(WTF **)(v3 + 8);
      if (v5)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v5, a2);
      }
    }
    if (!*(_DWORD *)(v3 + 4))
      deflateReset(*(z_streamp *)(v3 + 24));
  }
  v4 = this[2];
  this[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebCore::InflateResultHolder::~InflateResultHolder(WTF::StringImpl **this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;

  v3 = *((_QWORD *)*this + 2);
  if (v3 && *(_DWORD *)(v3 + 16))
  {
    if (*(_DWORD *)(v3 + 20))
      *(_DWORD *)(v3 + 20) = 0;
    v5 = *(WTF **)(v3 + 8);
    if (v5)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  v4 = this[2];
  this[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;

  v3 = *((_QWORD *)*this + 2);
  if (v3 && *(_DWORD *)(v3 + 16))
  {
    if (*(_DWORD *)(v3 + 20))
      *(_DWORD *)(v3 + 20) = 0;
    v5 = *(WTF **)(v3 + 8);
    if (v5)
    {
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  v4 = this[2];
  this[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::WebSocketDeflateFramer::createExtensionProcessor@<X0>(WebCore::WebSocketDeflateFramer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t result;
  int v7;
  WTF::StringImpl *v8;

  v4 = WTF::fastMalloc((WTF *)0x28);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = (uint64_t)v8;
  *(_QWORD *)v4 = off_1E336E890;
  if (v8)
  {
    v7 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    *(_QWORD *)(v4 + 8) = v8;
    if (v7)
      *(_DWORD *)v8 = v7;
    else
      result = WTF::StringImpl::destroy(v8, v5);
  }
  else
  {
    *(_QWORD *)(v4 + 8) = 0;
  }
  *(_QWORD *)v4 = off_1E336E738;
  *(_QWORD *)(v4 + 16) = this;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *a2 = v4;
  return result;
}

uint64_t WebCore::WebSocketDeflateFramer::deflate@<X0>(WebCore::WebSocketDeflateFramer *this@<X0>, WebCore::WebSocketFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  BOOL v7;
  uLong v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uLong v12;
  size_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  size_t v38;
  int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::WebSocketFrame *v45;
  WTF::StringImpl *v46;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *a3 = result;
  if (*(_BYTE *)this)
    v7 = *(_DWORD *)a2 > 2u;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = result;
      v10 = *((_QWORD *)this + 1);
      v45 = a2;
      v11 = *((_QWORD *)a2 + 2);
      v12 = deflateBound(*(z_streamp *)(v10 + 24), v8);
      v13 = *(unsigned int *)(v10 + 20);
      v14 = v12 + v13;
      if (!__CFADD__(v12, v13))
      {
        v15 = v12;
        v16 = *(unsigned int *)(v10 + 16);
        if (v14 > v16)
        {
          v17 = v11;
          v18 = v16 + (v16 >> 2);
          if (v18 >= 0x10)
            v19 = v18 + 1;
          else
            v19 = 16;
          if (v19 <= v14)
            v20 = v12 + v13;
          else
            v20 = v19;
          if (HIDWORD(v20))
          {
LABEL_52:
            __break(0xC471u);
            JUMPOUT(0x1955BE1C4);
          }
          v21 = *(void **)(v10 + 8);
          v22 = (void *)WTF::fastMalloc((WTF *)v20);
          *(_DWORD *)(v10 + 16) = v20;
          *(_QWORD *)(v10 + 8) = v22;
          memcpy(v22, v21, v13);
          v11 = v17;
          if (v21)
          {
            if (*(void **)(v10 + 8) == v21)
            {
              *(_QWORD *)(v10 + 8) = 0;
              *(_DWORD *)(v10 + 16) = 0;
            }
            WTF::fastFree((WTF *)v21, v23);
          }
        }
        *(_DWORD *)(v10 + 20) = v14;
        v24 = *(_QWORD *)(v10 + 24);
        v25 = *(_QWORD *)(v10 + 8) + v13;
        *(_QWORD *)v24 = v11;
        *(_DWORD *)(v24 + 8) = v8;
        *(_QWORD *)(v24 + 24) = v25;
        *(_DWORD *)(v24 + 32) = v15;
        if (!deflate(*(z_streamp *)(v10 + 24), 0))
        {
          v26 = *(_QWORD *)(v10 + 24);
          if (!*(_DWORD *)(v26 + 8))
          {
            *(_DWORD *)(v10 + 20) = v14 - *(_DWORD *)(v26 + 32);
            v27 = *((_QWORD *)this + 1);
            while (1)
            {
              v28 = *(unsigned int *)(v27 + 16);
              v29 = *(unsigned int *)(v27 + 20);
              v30 = v29 + 4096;
              if (v29 + 4096 > v28)
              {
                v31 = v28 + (v28 >> 2);
                if (v31 >= 0x10)
                  v32 = v31 + 1;
                else
                  v32 = 16;
                if (v32 <= v30)
                  v33 = v29 + 4096;
                else
                  v33 = v32;
                if (HIDWORD(v33))
                  goto LABEL_52;
                v34 = *(void **)(v27 + 8);
                v35 = (void *)WTF::fastMalloc((WTF *)v33);
                *(_DWORD *)(v27 + 16) = v33;
                *(_QWORD *)(v27 + 8) = v35;
                memcpy(v35, v34, v29);
                if (v34)
                {
                  if (*(void **)(v27 + 8) == v34)
                  {
                    *(_QWORD *)(v27 + 8) = 0;
                    *(_DWORD *)(v27 + 16) = 0;
                  }
                  WTF::fastFree((WTF *)v34, v36);
                }
              }
              *(_DWORD *)(v27 + 20) = v30;
              v37 = *(_QWORD *)(v27 + 24);
              v38 = *(_QWORD *)(v27 + 8) + v29;
              *(_QWORD *)v37 = 0;
              *(_DWORD *)(v37 + 8) = 0;
              *(_QWORD *)(v37 + 24) = v38;
              *(_DWORD *)(v37 + 32) = 4096;
              result = deflate(*(z_streamp *)(v27 + 24), 2);
              v39 = *(_DWORD *)(*(_QWORD *)(v27 + 24) + 32);
              if (v39)
              {
                v40 = v30 - v39;
                *(_DWORD *)(v27 + 20) = v30 - v39;
                v39 = result != -5;
                if (!(_DWORD)result)
                  break;
              }
              if (v39)
                goto LABEL_39;
            }
            if (v40 > 4)
            {
              *(_DWORD *)(v27 + 20) = v40 - 4;
              *((_BYTE *)v45 + 5) = 1;
              v42 = *((_QWORD *)this + 1);
              v43 = *(_QWORD *)(v42 + 8);
              v44 = *(unsigned int *)(v42 + 20);
              *((_QWORD *)v45 + 2) = v43;
              *((_QWORD *)v45 + 3) = v44;
              return result;
            }
          }
        }
      }
LABEL_39:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)(v9 + 8) = 0;
      if (v46)
        *(_DWORD *)v46 += 2;
      result = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 16) = v46;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v41);
          if (!v46)
            return result;
          goto LABEL_45;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v46)
        return result;
LABEL_45:
      if (*(_DWORD *)v46 == 2)
        return WTF::StringImpl::destroy(v46, v41);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::WebSocketDeflateFramer::inflate@<X0>(WebCore::WebSocketDeflateFramer *this@<X0>, WebCore::WebSocketFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  size_t v23;
  int v24;
  z_stream *v25;
  uint64_t avail_in;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WebCore::WebSocketFrame *v49;
  WTF::StringImpl *v50;

  result = WTF::fastMalloc((WTF *)0x18);
  v7 = result;
  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *a3 = result;
  if (*(_BYTE *)this)
    v8 = 1;
  else
    v8 = *((_BYTE *)a2 + 5) == 0;
  if (v8)
  {
    if (!*((_BYTE *)a2 + 5))
      return result;
    if (*(_DWORD *)a2 < 3u)
    {
      v49 = a2;
      v9 = *((_QWORD *)a2 + 3);
      if (v9)
      {
        v10 = 0;
        v11 = *((_QWORD *)a2 + 2);
        v12 = *((_QWORD *)this + 2);
        while (1)
        {
          v13 = *(unsigned int *)(v12 + 16);
          v14 = *(unsigned int *)(v12 + 20);
          v15 = v14 + 4096;
          if (v14 + 4096 > v13)
          {
            v16 = v13 + (v13 >> 2);
            if (v16 >= 0x10)
              v17 = v16 + 1;
            else
              v17 = 16;
            if (v17 <= v15)
              v18 = v14 + 4096;
            else
              v18 = v17;
            if (HIDWORD(v18))
            {
              __break(0xC471u);
              goto LABEL_59;
            }
            v19 = *(void **)(v12 + 8);
            v20 = (void *)WTF::fastMalloc((WTF *)v18);
            *(_DWORD *)(v12 + 16) = v18;
            *(_QWORD *)(v12 + 8) = v20;
            memcpy(v20, v19, v14);
            if (v19)
            {
              if (*(void **)(v12 + 8) == v19)
              {
                *(_QWORD *)(v12 + 8) = 0;
                *(_DWORD *)(v12 + 16) = 0;
              }
              WTF::fastFree((WTF *)v19, v21);
            }
          }
          *(_DWORD *)(v12 + 20) = v15;
          v22 = *(_QWORD *)(v12 + 24);
          v23 = *(_QWORD *)(v12 + 8) + v14;
          *(_QWORD *)v22 = v11 + v10;
          *(_DWORD *)(v22 + 8) = v9 - v10;
          *(_QWORD *)(v22 + 24) = v23;
          *(_DWORD *)(v22 + 32) = 4096;
          v24 = inflate(*(z_streamp *)(v12 + 24), 0);
          v25 = *(z_stream **)(v12 + 24);
          avail_in = v25->avail_in;
          *(_DWORD *)(v12 + 20) = v15 - v25->avail_out;
          if (v24 != -5 && v24 && (v24 != 1 || inflateReset(v25)))
            break;
          v10 = v9 - avail_in;
          if (v9 - avail_in >= v9)
          {
            v27 = 0;
            v28 = *((_QWORD *)this + 2);
            LODWORD(v50) = -65536;
            v29 = *(_DWORD *)(v28 + 20);
            while (1)
            {
              v30 = v29;
              v31 = v29 + 4096;
              v32 = *(unsigned int *)(v28 + 16);
              if (v31 > v32)
              {
                v33 = v32 + (v32 >> 2);
                if (v33 >= 0x10)
                  v34 = v33 + 1;
                else
                  v34 = 16;
                if (v34 <= v31)
                  v35 = v31;
                else
                  v35 = v34;
                if (HIDWORD(v35))
                {
                  __break(0xC471u);
LABEL_59:
                  JUMPOUT(0x1955BE528);
                }
                v36 = *(void **)(v28 + 8);
                v37 = (void *)WTF::fastMalloc((WTF *)v35);
                *(_DWORD *)(v28 + 16) = v35;
                *(_QWORD *)(v28 + 8) = v37;
                memcpy(v37, v36, v30);
                if (v36)
                {
                  if (*(void **)(v28 + 8) == v36)
                  {
                    *(_QWORD *)(v28 + 8) = 0;
                    *(_DWORD *)(v28 + 16) = 0;
                  }
                  WTF::fastFree((WTF *)v36, v38);
                }
              }
              *(_DWORD *)(v28 + 20) = v31;
              v39 = *(_QWORD *)(v28 + 24);
              v40 = *(_QWORD *)(v28 + 8) + v30;
              *(_QWORD *)v39 = (char *)&v50 + v27;
              *(_DWORD *)(v39 + 8) = 4 - v27;
              *(_QWORD *)(v39 + 24) = v40;
              *(_DWORD *)(v39 + 32) = 4096;
              result = inflate(*(z_streamp *)(v28 + 24), 4);
              v41 = *(_QWORD *)(v28 + 24);
              v42 = *(unsigned int *)(v41 + 8);
              v29 = v31 - *(_DWORD *)(v41 + 32);
              *(_DWORD *)(v28 + 20) = v29;
              v43 = result > 1;
              if ((_DWORD)result == -5)
                v43 = 2;
              if ((v43 | 2) != 2)
                goto LABEL_45;
              v27 = 4 - v42;
              if ((unint64_t)(4 - v42) > 3)
              {
                *((_BYTE *)v49 + 5) = 0;
                v44 = *((_QWORD *)this + 2);
                v45 = *(_QWORD *)(v44 + 8);
                v46 = *(unsigned int *)(v44 + 20);
                *((_QWORD *)v49 + 2) = v45;
                *((_QWORD *)v49 + 3) = v46;
                return result;
              }
            }
          }
        }
      }
    }
  }
LABEL_45:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = v50;
  *(_BYTE *)(v7 + 8) = 0;
  if (v48)
    *(_DWORD *)v48 += 2;
  result = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v48;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v47);
      if (!v48)
        return result;
      goto LABEL_51;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v48)
    return result;
LABEL_51:
  if (*(_DWORD *)v48 == 2)
    return WTF::StringImpl::destroy(v48, v47);
  *(_DWORD *)v48 -= 2;
  return result;
}

uint64_t WebCore::WebSocketDeflateFramer::didFail(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this;
  v3 = *(_QWORD *)(this + 8);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 16))
    {
      if (*(_DWORD *)(v3 + 20))
        *(_DWORD *)(v3 + 20) = 0;
      this = *(_QWORD *)(v3 + 8);
      if (this)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    if (!*(_DWORD *)(v3 + 4))
      this = deflateReset(*(z_streamp *)(v3 + 24));
  }
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 && *(_DWORD *)(v4 + 16))
  {
    if (*(_DWORD *)(v4 + 20))
      *(_DWORD *)(v4 + 20) = 0;
    this = *(_QWORD *)(v4 + 8);
    if (this)
    {
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

void WebCore::WebSocketDeflater::~WebSocketDeflater(z_streamp *this)
{
  void *v2;
  z_streamp v3;
  WTF *v4;

  deflateEnd(this[3]);
  v3 = this[3];
  this[3] = 0;
  if (v3)
    MEMORY[0x19AEA7644](v3, 0x10B0C40E8CA615DLL);
  v4 = (WTF *)this[1];
  if (v4)
  {
    this[1] = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, v2);
  }
}

{
  void *v2;
  z_streamp v3;
  WTF *v4;

  deflateEnd(this[3]);
  v3 = this[3];
  this[3] = 0;
  if (v3)
    MEMORY[0x19AEA7644](v3, 0x10B0C40E8CA615DLL);
  v4 = (WTF *)this[1];
  if (v4)
  {
    this[1] = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, v2);
  }
}

void WebCore::WebSocketInflater::~WebSocketInflater(z_streamp *this)
{
  void *v2;
  z_streamp v3;
  WTF *v4;

  inflateEnd(this[3]);
  v3 = this[3];
  this[3] = 0;
  if (v3)
    MEMORY[0x19AEA7644](v3, 0x10B0C40E8CA615DLL);
  v4 = (WTF *)this[1];
  if (v4)
  {
    this[1] = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, v2);
  }
}

{
  void *v2;
  z_streamp v3;
  WTF *v4;

  inflateEnd(this[3]);
  v3 = this[3];
  this[3] = 0;
  if (v3)
    MEMORY[0x19AEA7644](v3, 0x10B0C40E8CA615DLL);
  v4 = (WTF *)this[1];
  if (v4)
  {
    this[1] = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, v2);
  }
}

WTF::StringImpl *WebCore::WebSocketExtensionDispatcher::createHeaderValue(WTF::StringImpl *this, unsigned int *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;

  v2 = this;
  v3 = a2[3];
  if (!(_DWORD)v3)
  {
    *(_QWORD *)this = 0;
    return this;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v4 = *(_QWORD *)a2;
  (*(void (**)(WTF::StringImpl **__return_ptr))(***(_QWORD ***)a2 + 16))(&v20);
  v6 = v20;
  if (v20)
    *(_DWORD *)v20 += 2;
  v7 = v14;
  v14 = v6;
  if (!v7)
  {
LABEL_7:
    if (!v6)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(v7, v5);
  v6 = v20;
  if (v20)
LABEL_8:
    LODWORD(v6) = *((_DWORD *)v6 + 1);
LABEL_9:
  v16 = (int)v6;
  v8 = v20;
  v20 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  if ((_DWORD)v3 != 1)
  {
    v11 = v4 + 8;
    v12 = 8 * v3 - 8;
    do
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)v11 + 16))(&v18);
      v21 = 2;
      v19 = v18;
      v20 = (WTF::StringImpl *)", ";
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v14, (uint64_t)&v20, (uint64_t *)&v19);
      v13 = v18;
      v18 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v5);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 8;
      v12 -= 8;
    }
    while (v12);
  }
  v9 = v14;
  if (v14
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
        (v9 = v14) != 0))
  {
    *(_DWORD *)v9 += 2;
  }
  *(_QWORD *)v2 = v9;
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  this = v14;
  v14 = 0;
  if (!this)
  {
LABEL_22:
    if (!v9)
      goto LABEL_36;
    return this;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_22;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
  if (!v9)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1955BE93CLL);
  }
  return this;
}

_QWORD *WebCore::WebSocketExtensionParser::consumeToken(_QWORD *this)
{
  _QWORD *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v1 = this;
  v2 = (unsigned __int8 *)*this;
  v3 = (unsigned __int8 *)this[1];
  if (*this < (unint64_t)v3)
  {
    v4 = v3 - v2;
    while (1)
    {
      v5 = *v2;
      if (v5 != 32 && v5 != 9)
        break;
      *this = ++v2;
      if (!--v4)
      {
        v2 = v3;
        break;
      }
    }
  }
  v7 = v2;
  if (v2 < v3)
  {
    v8 = v3 - v2;
    v7 = v2;
    while (1)
    {
      v9 = *v7;
      if ((v9 - 32) > 0x5E)
        break;
      this = memchr("()<>@,;:\\\"/[]?={} \t", v9, 0x14uLL);
      if (this)
      {
        if (*(_BYTE *)this)
          break;
      }
      *v1 = ++v7;
      if (!--v8)
      {
        v7 = v3;
        break;
      }
    }
  }
  if (v2 >= v7)
    return (_QWORD *)(v2 < v7);
  if (v7 - v2 >= 0)
  {
    WTF::String::String();
    v11 = (WTF::StringImpl *)v1[2];
    v1[2] = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return (_QWORD *)(v2 < v7);
  }
  __break(1u);
  return this;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v18 = *a2;
    if (*a2)
      *(_DWORD *)v18 += 2;
    *v15 = v18;
    v19 = *(WTF **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v19 += 2;
    result = v15[1];
    v15[1] = v19;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_30;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_36:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26, v15);
        v15 = (WTF **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_38;
      }
LABEL_30:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_36;
    }
LABEL_38:
    v30 = v22 + 16 * v25;
    v29 = 1;
    goto LABEL_39;
  }
  result = (WTF::StringImpl *)WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v27 = *a1;
  if (*a1)
    v28 = *(unsigned int *)(v27 - 4);
  else
    v28 = 0;
  v29 = 0;
  v30 = v27 + 16 * v28;
LABEL_39:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v18 = *a2;
    if (*a2)
      *(_DWORD *)v18 += 2;
    *v15 = v18;
    v19 = *(WTF **)a3;
    *(_QWORD *)a3 = 0;
    result = v15[1];
    v15[1] = v19;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_28;
    }
    else if (3 * v25 <= 4 * v24)
    {
      if (!(_DWORD)v25)
      {
        v26 = 8;
LABEL_34:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v26, v15);
        v15 = (WTF **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_36;
      }
LABEL_28:
      v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
      goto LABEL_34;
    }
LABEL_36:
    v30 = v22 + 16 * v25;
    v29 = 1;
    goto LABEL_37;
  }
  result = (WTF::StringImpl *)WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v27 = *a1;
  if (*a1)
    v28 = *(unsigned int *)(v27 - 4);
  else
    v28 = 0;
  v29 = 0;
  v30 = v27 + 16 * v28;
LABEL_37:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

BOOL WebCore::WebSocketFrame::needsExtendedLengthField(WebCore::WebSocketFrame *this)
{
  return (unint64_t)this > 0x7D;
}

uint64_t WebCore::WebSocketFrame::parseFrame(WebCore::WebSocketFrame *this, unsigned __int8 *a2, uint64_t a3, WebCore::WebSocketFrame *a4, WTF::StringImpl **a5, WTF::String *a6)
{
  unsigned int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t i;
  WTF::StringImpl *v26;
  const unsigned __int8 *v27;
  unsigned __int8 *v28;
  const char *v29;
  int v30;
  unint64_t v31;
  const unsigned __int8 *v32;
  int v33;

  if ((unint64_t)a2 < 2)
    return 1;
  v6 = *(unsigned __int8 *)this;
  v7 = (unsigned __int8 *)this + 2;
  v8 = *((unsigned __int8 *)this + 1);
  v9 = v8 & 0x7F;
  if ((v8 & 0x7F) > 0x7D)
  {
    v10 = v8 & 0x7F;
    if ((_DWORD)v9 == 126)
      v11 = 2;
    else
      v11 = 8;
    if ((uint64_t)(a2 - 2) < v11)
      return 1;
    v9 = 0;
    v13 = (v11 - 2) + 4;
    do
    {
      v14 = *v7++;
      v9 = v14 | (v9 << 8);
      LODWORD(v11) = v11 - 1;
    }
    while ((_DWORD)v11);
    if (v10 == 126 && v9 < 0x7E || v10 != 126 && !(v9 >> 16))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = *a5;
      *a5 = (WTF::StringImpl *)v32;
      if (!v16)
        return 2;
      goto LABEL_14;
    }
    if ((v9 & 0x8000000000000000) != 0)
    {
      v31 = v9;
      v32 = "WebSocket frame length too large: ";
      v33 = 34;
      v29 = " bytes";
      v30 = 6;
      result = (uint64_t)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v32, &v31, (uint64_t)&v29, &v28);
      v27 = v28;
      if (v28)
      {
        v28 = 0;
        v16 = *a5;
        *a5 = (WTF::StringImpl *)v27;
        if (!v16)
          return 2;
        v17 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 != 2)
          goto LABEL_15;
        WTF::StringImpl::destroy(v16, v26);
        v16 = (WTF::StringImpl *)v28;
        v28 = 0;
        if (!v16)
          return 2;
LABEL_14:
        v17 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, v15);
          return 2;
        }
LABEL_15:
        *(_DWORD *)v16 = v17;
        return 2;
      }
      __break(0xC471u);
      return result;
    }
    v7 = (unsigned __int8 *)this + v13;
  }
  v19 = (v8 >> 5) & 4;
  if (&a2[(_QWORD)this] - v7 < v9 + v19)
    return 1;
  v20 = v6 >> 7;
  v21 = (v6 >> 6) & 1;
  v22 = (v6 >> 5) & 1;
  v23 = v6 & 0xF;
  v24 = (v6 >> 4) & 1;
  if ((v8 & 0x80) != 0 && v9)
  {
    for (i = 0; i != v9; ++i)
      v7[i + 4] ^= v7[i & 3];
  }
  result = 0;
  *(_DWORD *)a3 = v23;
  *(_BYTE *)(a3 + 4) = v20;
  *(_BYTE *)(a3 + 5) = v21;
  *(_BYTE *)(a3 + 6) = v22;
  *(_BYTE *)(a3 + 7) = v24;
  *(_BYTE *)(a3 + 8) = v8 >> 7;
  *(_QWORD *)(a3 + 16) = &v7[v19];
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)a4 = &v7[v19 + v9];
  return result;
}

uint64_t WebCore::WebSocketFrame::makeFrameData(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  size_t v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  size_t v41;
  size_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  void *v60;

  v3 = result;
  v4 = a2[3];
  if (v4 <= 1 && a2[2] <= 1u)
  {
    v5 = *(_BYTE **)a2;
    v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    a2[2] = 16;
    *(_QWORD *)a2 = v6;
    result = (uint64_t)memcpy(v6, v5, v4);
    if (v5)
    {
      if (*(_BYTE **)a2 == v5)
      {
        *(_QWORD *)a2 = 0;
        a2[2] = 0;
      }
      result = WTF::fastFree((WTF *)v5, v7);
    }
  }
  a2[3] = 2;
  **(_BYTE **)a2 = *(_DWORD *)v3 | (*(_BYTE *)(v3 + 4) << 7) | (*(_BYTE *)(v3 + 5) << 6);
  if (a2[3] <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1955BF5D8);
  }
  *(_BYTE *)(*(_QWORD *)a2 + 1) = (*(_BYTE *)(v3 + 8) != 0) << 7;
  v8 = *(_QWORD *)(v3 + 24);
  if (v8 > 0x7D)
  {
    v10 = a2[3];
    if (v8 >> 16)
    {
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1955BF600);
      }
      *(_BYTE *)(*(_QWORD *)a2 + 1) |= 0x7Fu;
      v9 = *(_QWORD *)(v3 + 24);
      v20 = a2[2];
      v21 = a2[3];
      v22 = v21 + 8;
      if (v21 + 8 > v20)
      {
        v55 = v20 + (v20 >> 2);
        if (v55 >= 0x10)
          v56 = v55 + 1;
        else
          v56 = 16;
        if (v56 <= v22)
          v57 = v21 + 8;
        else
          v57 = v56;
        if (HIDWORD(v57))
          goto LABEL_109;
        v58 = *(void **)a2;
        v59 = (void *)WTF::fastMalloc((WTF *)v57);
        a2[2] = v57;
        *(_QWORD *)a2 = v59;
        result = (uint64_t)memcpy(v59, v58, v21);
        if (v58)
        {
          if (*(void **)a2 == v58)
          {
            *(_QWORD *)a2 = 0;
            a2[2] = 0;
          }
          result = WTF::fastFree((WTF *)v58, v60);
        }
      }
      v23 = a2[3];
      if (v22 < v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1955BF608);
      }
      *(_QWORD *)(*(_QWORD *)a2 + v23) = bswap64(v9);
      a2[3] = v22;
      LODWORD(v9) = v21 + 8;
    }
    else
    {
      if (v10 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1955BF5F8);
      }
      *(_BYTE *)(*(_QWORD *)a2 + 1) |= 0x7Eu;
      v11 = *(_QWORD *)(v3 + 24);
      v12 = a2[3];
      if ((_DWORD)v12 == a2[2])
      {
        v13 = v12 + (v12 >> 2);
        if (v13 >= 0x10)
          v14 = v13 + 1;
        else
          v14 = 16;
        if (v14 <= v12 + 1)
          v15 = v12 + 1;
        else
          v15 = v14;
        if (HIDWORD(v15))
        {
          __break(0xC471u);
          JUMPOUT(0x1955BF610);
        }
        v16 = *(void **)a2;
        v17 = (void *)WTF::fastMalloc((WTF *)v15);
        a2[2] = v15;
        *(_QWORD *)a2 = v17;
        result = (uint64_t)memcpy(v17, v16, v12);
        if (v16)
        {
          if (*(void **)a2 == v16)
          {
            *(_QWORD *)a2 = 0;
            a2[2] = 0;
          }
          result = WTF::fastFree((WTF *)v16, v18);
        }
        v19 = (_BYTE *)(*(_QWORD *)a2 + a2[3]);
      }
      else
      {
        v19 = (_BYTE *)(*(_QWORD *)a2 + v12);
      }
      *v19 = BYTE1(v11);
      v24 = a2[2];
      v25 = (a2[3] + 1);
      a2[3] = v25;
      v26 = *(_QWORD *)(v3 + 24);
      if ((_DWORD)v25 == v24)
      {
        v27 = v25 + (v25 >> 2);
        if (v27 >= 0x10)
          v28 = v27 + 1;
        else
          v28 = 16;
        if (v28 <= v25 + 1)
          v29 = v25 + 1;
        else
          v29 = v28;
        if (HIDWORD(v29))
        {
          __break(0xC471u);
          JUMPOUT(0x1955BF618);
        }
        v30 = *(void **)a2;
        v31 = (void *)WTF::fastMalloc((WTF *)v29);
        a2[2] = v29;
        *(_QWORD *)a2 = v31;
        result = (uint64_t)memcpy(v31, v30, v25);
        if (v30)
        {
          if (*(void **)a2 == v30)
          {
            *(_QWORD *)a2 = 0;
            a2[2] = 0;
          }
          result = WTF::fastFree((WTF *)v30, v32);
        }
        *(_BYTE *)(*(_QWORD *)a2 + a2[3]) = v26;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a2 + v25) = v26;
      }
      LODWORD(v9) = a2[3] + 1;
      a2[3] = v9;
    }
  }
  else
  {
    if (a2[3] <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x1955BF5F0);
    }
    *(_BYTE *)(*(_QWORD *)a2 + 1) |= v8;
    LODWORD(v9) = a2[3];
  }
  if (*(_BYTE *)(v3 + 8))
  {
    v33 = v9;
    v9 = v9 + 4;
    v34 = a2[2];
    if (v9 > v34)
    {
      v35 = v34 + (v34 >> 2);
      if (v35 >= 0x10)
        v36 = v35 + 1;
      else
        v36 = 16;
      if (v36 <= v9)
        v37 = v9;
      else
        v37 = v36;
      if (HIDWORD(v37))
      {
LABEL_103:
        __break(0xC471u);
        JUMPOUT(0x1955BF5E8);
      }
      v38 = *(void **)a2;
      v39 = (void *)WTF::fastMalloc((WTF *)v37);
      a2[2] = v37;
      *(_QWORD *)a2 = v39;
      result = (uint64_t)memcpy(v39, v38, v33);
      if (v38)
      {
        if (*(void **)a2 == v38)
        {
          *(_QWORD *)a2 = 0;
          a2[2] = 0;
        }
        result = WTF::fastFree((WTF *)v38, v40);
      }
    }
    a2[3] = v9;
  }
  else
  {
    v33 = 0;
  }
  v41 = v9;
  v42 = *(_QWORD *)(v3 + 24);
  if (v42)
  {
    v9 = *(_QWORD *)(v3 + 16);
    v43 = v42 + v41;
    v44 = a2[2];
    if (v42 + v41 > v44)
    {
      v49 = v44 + (v44 >> 2);
      if (v49 >= 0x10)
        v50 = v49 + 1;
      else
        v50 = 16;
      if (v50 <= v43)
        v51 = v42 + v41;
      else
        v51 = v50;
      if (HIDWORD(v51))
      {
        __break(0xC471u);
        JUMPOUT(0x1955BF620);
      }
      v52 = *(void **)a2;
      v53 = (void *)WTF::fastMalloc((WTF *)v51);
      a2[2] = v51;
      *(_QWORD *)a2 = v53;
      memcpy(v53, v52, v41);
      if (v52)
      {
        if (*(void **)a2 == v52)
        {
          *(_QWORD *)a2 = 0;
          a2[2] = 0;
        }
        WTF::fastFree((WTF *)v52, v54);
      }
    }
    v45 = a2[3];
    if (v43 < v45)
    {
      __break(0xC471u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    result = (uint64_t)memcpy((void *)(*(_QWORD *)a2 + v45), (const void *)v9, v42);
    a2[3] = v43;
    LODWORD(v9) = v42 + v41;
  }
  if (!*(_BYTE *)(v3 + 8))
    return result;
  if (v9 < v33 || v9 - v33 <= 3)
    goto LABEL_102;
  result = WTF::cryptographicallyRandomValues();
  if (*(_QWORD *)(v3 + 24))
  {
    v46 = 0;
    while (1)
    {
      v47 = (v46 & 3) + v33;
      v48 = a2[3];
      if (v47 >= v48)
        break;
      if (v41 + v46 >= v48)
      {
        __break(0xC471u);
        JUMPOUT(0x1955BF5D0);
      }
      *(_BYTE *)(*(_QWORD *)a2 + v41 + v46++) ^= *(_BYTE *)(*(_QWORD *)a2 + v47);
      if (v46 >= *(_QWORD *)(v3 + 24))
        return result;
    }
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x1955BF5C8);
  }
  return result;
}

WebCore::WebSocketHandshake *WebCore::WebSocketHandshake::WebSocketHandshake(WebCore::WebSocketHandshake *this, const WTF::URL *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5, char a6, char a7)
{
  _DWORD *v12;
  __int128 v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  char v17;
  int64x2_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const void *v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  CC_SHA1_CTX c;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v12 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v12 += 2;
  *(_QWORD *)this = v12;
  v13 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 8) = v13;
  v14 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v14 += 2;
  *((_QWORD *)this + 5) = v14;
  *((_BYTE *)this + 48) = WTF::URL::protocolIs();
  *((_DWORD *)this + 13) = 0;
  v15 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v15 += 2;
  *((_QWORD *)this + 7) = v15;
  v16 = *(_DWORD **)a5;
  if (*(_QWORD *)a5)
    *v16 += 2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = v16;
  *((_BYTE *)this + 72) = a6;
  *((_BYTE *)this + 73) = a7;
  WTF::URL::invalidate((WebCore::WebSocketHandshake *)((char *)this + 80));
  *((_BYTE *)this + 208) = 0;
  *((_WORD *)this + 108) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_BYTE *)this + 200) = 0;
  v17 = *((_BYTE *)this + 218);
  v18 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 14) = v18;
  *((int64x2_t *)this + 15) = v18;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0x8000000000000000;
  *((_QWORD *)this + 35) = 0x7FF8000000000000;
  *((int64x2_t *)this + 18) = v18;
  *((_BYTE *)this + 304) &= 0xF0u;
  *((_WORD *)this + 156) &= 0xC000u;
  *((_BYTE *)this + 314) = *((_BYTE *)this + 314) & 0xF8 | 2;
  *((_QWORD *)this + 40) = 0;
  *((_BYTE *)this + 328) = 0;
  *((_BYTE *)this + 218) = v17 & 0xC0 | 5;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *((_BYTE *)this + 396) = 1;
  *((_QWORD *)this + 50) = 0;
  WTF::cryptographicallyRandomValues();
  WTF::base64EncodeToString();
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = v28;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::SHA1::SHA1((WTF::SHA1 *)&c);
  WTF::String::ascii((WebCore::WebSocketHandshake *)((char *)this + 344));
  if (v27)
  {
    v21 = (char *)v27 + 16;
    v22 = *((_QWORD *)v27 + 1);
  }
  else
  {
    LODWORD(v22) = 0;
    v21 = 0;
  }
  CC_SHA1_Update(&c, v21, v22);
  CC_SHA1_Update(&c, "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", 0x24u);
  WTF::SHA1::computeHash();
  WTF::base64EncodeToString();
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      WTF::fastFree(v27, v23);
    else
      --*(_DWORD *)v27;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = v26;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  return this;
}

void WebCore::WebSocketHandshake::~WebSocketHandshake(WebCore::WebSocketHandshake *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::ResourceResponseBase *v14;
  const void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 93);
  if ((_DWORD)v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 45);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v10 = (WTF *)*((_QWORD *)this + 45);
  if (v10)
  {
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WebCore::WebSocketHandshake *)((char *)this + 80);
  v15 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v15)
  {
    CFRelease(v15);
    v14 = (WebCore::WebSocketHandshake *)((char *)this + 80);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v14, a2);
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
}

uint64_t WebCore::hostName(WebCore *this, const WTF::URL *a2, char a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned __int16 v12;
  int v13;
  unsigned __int16 v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _WORD *v28;
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v34;

  if ((WTF::URL::port(a2) & 0xFF0000) == 0)
    goto LABEL_24;
  v6 = WTF::URL::port(a2);
  v7 = v6 & 0xFF0000;
  if ((a3 & 1) == 0)
  {
    if (!v7)
      goto LABEL_35;
    if ((unsigned __int16)v6 != 80)
      goto LABEL_5;
LABEL_24:
    v30[0] = WTF::URL::host(a2);
    v30[1] = v24;
    return WTF::StringView::convertToASCIILowercase((WTF::StringView *)v30);
  }
  if (!v7)
  {
LABEL_35:
    result = std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_36;
  }
  if ((unsigned __int16)v6 == 443)
    goto LABEL_24;
LABEL_5:
  v8 = WTF::URL::host(a2);
  v10 = v9;
  v31 = 1;
  v32 = v8;
  v33 = v9;
  v34 = BYTE4(v9);
  result = WTF::URL::port(a2);
  if ((result & 0xFF0000) == 0)
    goto LABEL_35;
  v12 = result;
  v13 = 0;
  v14 = result;
  do
  {
    ++v13;
    v15 = v14;
    v14 /= 0xAu;
  }
  while (v15 > 9);
  if (v13 < 0)
    goto LABEL_36;
  v16 = __OFADD__(v13, 1);
  v17 = v13 + 1;
  v18 = v16;
  if ((v10 & 0x80000000) != 0)
    goto LABEL_36;
  if (v18)
    goto LABEL_36;
  v19 = (v10 + v17);
  if (__OFADD__((_DWORD)v10, v17))
    goto LABEL_36;
  if ((v10 & 0xFF00000000) == 0)
  {
    if (v19 <= 0x7FFFFFEF)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(2 * v19 + 20));
      v20 = v30[0];
      if (v30[0])
      {
        *(_DWORD *)v30[0] = 2;
        *(_DWORD *)(v20 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v20 + 20;
        *(_DWORD *)(v20 + 16) = 0;
        result = WTF::StringView::getCharactersWithASCIICase();
        v25 = 0;
        v26 = v33;
        *(_WORD *)(v20 + 20 + 2 * v33) = 58;
        do
        {
          v27 = v12;
          *((_BYTE *)v30 + v25-- + 6) = (v12 % 0xAu) | 0x30;
          v12 /= 0xAu;
        }
        while (v27 > 9);
        if (v25 + 8 <= 7)
        {
          v28 = (_WORD *)(v20 + 2 * v26 + 22);
          do
            *v28++ = *((unsigned __int8 *)v30 + v25 + 7);
          while (!__CFADD__(v25++, 1));
        }
        goto LABEL_33;
      }
    }
LABEL_36:
    *(_QWORD *)this = 0;
    __break(0xC471u);
    return result;
  }
  if ((v19 & 0x80000000) != 0)
    goto LABEL_36;
  result = WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
  v20 = v30[0];
  if (!v30[0])
    goto LABEL_36;
  *(_DWORD *)v30[0] = 2;
  *(_DWORD *)(v20 + 4) = v19;
  *(_QWORD *)(v20 + 8) = v20 + 20;
  *(_DWORD *)(v20 + 16) = 4;
  result = WTF::StringView::getCharactersWithASCIICase();
  v21 = 0;
  v22 = (_BYTE *)(v20 + 20 + v33);
  *v22 = 58;
  do
  {
    v23 = v12;
    *((_BYTE *)v30 + v21-- + 6) = (v12 % 0xAu) | 0x30;
    v12 /= 0xAu;
  }
  while (v23 > 9);
  if (v21 + 8 <= 7)
    result = (uint64_t)memcpy(v22 + 1, (char *)v30 + v21 + 7, -v21);
LABEL_33:
  *(_QWORD *)this = v20;
  return result;
}

WTF::StringImpl *WebCore::WebSocketHandshake::clientHandshakeMessage(WebCore::WebSocketHandshake *this)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  int8x16_t v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  char *v76;
  char *v77;
  __int16 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  WTF::StringImpl *v82;
  unsigned int *v83;
  int v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  size_t v88;
  uint64_t v89;
  char *v90;
  _BYTE *v91;
  _BYTE *v92;
  size_t v93;
  uint64_t i;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  size_t j;
  _BYTE *v99;
  size_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  size_t v105;
  size_t k;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  size_t v111;
  size_t m;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  size_t v118;
  size_t n;
  uint64_t v120;
  char *v121;
  char *v122;
  __int128 v123;
  int8x16_t v124;
  __int128 v125;
  __int128 v126;
  char *v127;
  char *v128;
  char *v129;
  __int16 v130;
  _WORD *v131;
  uint64_t v132;
  _WORD *v133;
  char *v134;
  char *v135;
  char *v136;
  __int128 v137;
  int8x16_t v138;
  __int128 v139;
  __int128 v140;
  char *v141;
  char *v142;
  char *v143;
  __int16 v144;
  unint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *result;
  unsigned __int128 *v150;
  unsigned __int128 *v151;
  unsigned __int128 *v152;
  unsigned __int128 v153;
  unsigned __int128 *v154;
  unsigned __int128 *v155;
  unsigned __int128 *v156;
  unsigned __int128 v157;
  unsigned __int128 *v158;
  unsigned __int128 *v159;
  unsigned __int128 *v160;
  unsigned __int128 v161;
  unsigned __int128 *v162;
  unsigned __int128 *v163;
  unsigned __int128 *v164;
  unsigned __int128 v165;
  unsigned __int128 *v166;
  unsigned __int128 *v167;
  unsigned __int128 *v168;
  unsigned __int128 v169;
  unsigned __int128 *v170;
  unsigned __int128 *v171;
  unsigned __int128 *v172;
  unsigned __int128 v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  char v179;
  unsigned int v180;
  int8x16_t *__src;
  size_t __n;
  size_t v183;
  size_t v184;
  size_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  _DWORD *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  int8x16x2_t v197;
  int8x16x2_t v198;
  int8x16x2_t v199;
  int8x16x2_t v200;
  int8x16x2_t v201;
  int8x16x2_t v202;
  int8x16x2_t v203;
  int8x16x2_t v204;
  int8x16x2_t v205;

  WebCore::WebSocketExtensionDispatcher::createHeaderValue((WTF::StringImpl *)&v190, (unsigned int *)this + 90);
  v3 = (_BYTE *)WTF::URL::path(this);
  v4 = v2;
  if ((_DWORD)v2)
    v5 = (int8x16_t *)"";
  else
    v5 = (int8x16_t *)"/";
  if ((_DWORD)v2)
    v6 = 1;
  else
    v6 = 2;
  v8 = (_BYTE *)WTF::URL::queryWithLeadingQuestionMark(this);
  v9 = v7;
  v180 = v6 - 1;
  if ((unint64_t)(v6 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1955C0C24);
  }
  if ((v7 & 0x80000000) != 0
    || ((v10 = v180 + v7, !__OFADD__(v180, (_DWORD)v7)) ? (v11 = 0) : (v11 = 1),
        (v4 & 0x80000000) != 0 || (v11 & 1) != 0 || __OFADD__((_DWORD)v4, v10)))
  {
    v189 = 0;
LABEL_291:
    __break(0xC471u);
    goto LABEL_312;
  }
  v12 = (v7 & 0xFF00000000) != 0 && (v4 & 0xFF00000000) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((v4 + v10), v12, v3, v4, v5, v180, v8, v9, &v189);
  if (!v189)
    goto LABEL_291;
  WebCore::hostName((WebCore *)&v188, this, *((_BYTE *)this + 48));
  v13 = (_DWORD *)*((_QWORD *)this + 8);
  if (v13)
    *v13 += 2;
  v14 = (_DWORD *)*((_QWORD *)this + 5);
  if (v14 && (v84 = v14[1], *v14 += 2, v84))
  {
    v17 = "\r\n";
    v18 = 3;
    v16 = 25;
    v15 = "Sec-WebSocket-Protocol: ";
  }
  else
  {
    v15 = "";
    v16 = 1;
    v17 = "";
    v18 = 1;
  }
  v19 = *((_QWORD *)this + 43);
  if (v19)
    *(_DWORD *)v19 += 2;
  v20 = (uint64_t)v190;
  if (v190 && (v85 = v190[1], *v190 += 2, v85))
  {
    __src = (int8x16_t *)"\r\n";
    v23 = 3;
    v22 = 27;
    v21 = "Sec-WebSocket-Extensions: ";
  }
  else
  {
    v21 = "";
    v22 = 1;
    __src = (int8x16_t *)"";
    v23 = 1;
  }
  v24 = *((_QWORD *)this + 7);
  if (v24)
    *(_DWORD *)v24 += 2;
  v26 = v188;
  v25 = v189;
  v186 = (uint64_t)v14;
  v187 = (uint64_t)v13;
  __n = v16 - 1;
  if ((unint64_t)(v16 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1955C0C54);
  }
  if ((unint64_t)(v18 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1955C0CBCLL);
  }
  v183 = v18 - 1;
  v184 = v22 - 1;
  if ((unint64_t)(v22 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1955C0C84);
  }
  v185 = v23 - 1;
  if ((unint64_t)(v23 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1955C0CF4);
  }
  if (v189)
  {
    v27 = *((_DWORD *)v189 + 1);
    if (!v188)
      goto LABEL_305;
LABEL_31:
    v28 = *((_DWORD *)v188 + 1);
    if (!v13)
      goto LABEL_306;
LABEL_32:
    v29 = v13[1];
    if (!v14)
      goto LABEL_307;
LABEL_33:
    v30 = v14[1];
    if (!v19)
      goto LABEL_308;
LABEL_34:
    v31 = *(_DWORD *)(v19 + 4);
    if (!v20)
      goto LABEL_309;
    goto LABEL_35;
  }
  v27 = 0;
  if (v188)
    goto LABEL_31;
LABEL_305:
  v28 = 0;
  if (v13)
    goto LABEL_32;
LABEL_306:
  v29 = 0;
  if (v14)
    goto LABEL_33;
LABEL_307:
  v30 = 0;
  if (v19)
    goto LABEL_34;
LABEL_308:
  v31 = 0;
  if (!v20)
  {
LABEL_309:
    v32 = 0;
    if (!v24)
      goto LABEL_310;
    goto LABEL_36;
  }
LABEL_35:
  v32 = *(_DWORD *)(v20 + 4);
  if (!v24)
  {
LABEL_310:
    v33 = 0;
    goto LABEL_37;
  }
LABEL_36:
  v33 = *(_DWORD *)(v24 + 4);
  if (v33 < 0)
    goto LABEL_311;
LABEL_37:
  v34 = __OFADD__(v33, 4);
  v35 = v33 + 4;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__(v35, 12);
  v36 = v35 + 12;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__((_DWORD)v185, v36);
  v37 = v185 + v36;
  v38 = v34;
  if (v32 < 0)
    goto LABEL_311;
  if (v38)
    goto LABEL_311;
  v34 = __OFADD__(v32, v37);
  v39 = v32 + v37;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__((_DWORD)v184, v39);
  v40 = v184 + v39;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__(v40, 29);
  v41 = v40 + 29;
  v42 = v34;
  if (v31 < 0)
    goto LABEL_311;
  if (v42)
    goto LABEL_311;
  v34 = __OFADD__(v31, v41);
  v43 = v31 + v41;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__(v43, 62);
  v44 = v43 + 62;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__((_DWORD)v183, v44);
  v45 = v183 + v44;
  v46 = v34;
  if (v30 < 0)
    goto LABEL_311;
  if (v46)
    goto LABEL_311;
  v34 = __OFADD__(v30, v45);
  v47 = v30 + v45;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__((_DWORD)__n, v47);
  v48 = __n + v47;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__(v48, 2);
  v49 = v48 + 2;
  v50 = v34;
  if (v29 < 0)
    goto LABEL_311;
  if (v50)
    goto LABEL_311;
  v34 = __OFADD__(v29, v49);
  v51 = v29 + v49;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__(v51, 10);
  v52 = v51 + 10;
  v53 = v34;
  if (v28 < 0)
    goto LABEL_311;
  if (v53)
    goto LABEL_311;
  v34 = __OFADD__(v28, v52);
  v54 = v28 + v52;
  if (v34)
    goto LABEL_311;
  v34 = __OFADD__(v54, 58);
  v55 = v54 + 58;
  v56 = v34;
  if (v27 < 0)
    goto LABEL_311;
  if (v56)
    goto LABEL_311;
  v34 = __OFADD__(v27, v55);
  v57 = v27 + v55;
  if (v34)
    goto LABEL_311;
  v58 = (v57 + 4);
  if (__OFADD__(v57, 4))
    goto LABEL_311;
  if (v189 && (*((_BYTE *)v189 + 16) & 4) == 0
    || v188 && (*((_BYTE *)v188 + 16) & 4) == 0
    || v187 && (*(_BYTE *)(v187 + 16) & 4) == 0
    || v186 && (*(_BYTE *)(v186 + 16) & 4) == 0
    || v19 && (*(_BYTE *)(v19 + 16) & 4) == 0
    || v20 && (*(_BYTE *)(v20 + 16) & 4) == 0
    || v24 && (*(_BYTE *)(v24 + 16) & 4) == 0)
  {
    if (v57 != -4)
    {
      if (v58 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v58 + 20));
        v59 = v196;
        if (v196)
        {
          *v196 = 2;
          v59[1] = v58;
          *(_QWORD *)(v59 + 5) = 0x20005400450047;
          *((_QWORD *)v59 + 1) = v59 + 5;
          v59[4] = 0;
          v191 = v25;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v191, (char *)v59 + 28);
          v60 = (uint64_t)v191;
          if (v191)
            v60 = *((unsigned int *)v191 + 1);
          v61 = (uint64_t)v59 + 2 * v60 + 28;
          *(_OWORD *)v61 = xmmword_1968DF4B0;
          *(_OWORD *)(v61 + 16) = xmmword_1968DF4C0;
          *(_OWORD *)(v61 + 32) = xmmword_1968DF4D0;
          *(_OWORD *)(v61 + 48) = xmmword_1968DF4E0;
          *(_OWORD *)(v61 + 64) = xmmword_1968DF4F0;
          *(_OWORD *)(v61 + 80) = xmmword_1968DF500;
          *(_OWORD *)(v61 + 96) = xmmword_1968DF510;
          *(_DWORD *)(v61 + 112) = 2097210;
          v62 = v61 + 116;
          v192 = v26;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v192, (char *)(v61 + 116));
          v63 = (uint64_t)v192;
          if (v192)
            v63 = *((unsigned int *)v192 + 1);
          v64 = v62 + 2 * v63;
          *(_OWORD *)v64 = xmmword_1968DF520;
          *(_DWORD *)(v64 + 16) = 2097210;
          v65 = v64 + 20;
          v193 = v187;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v193, (char *)(v64 + 20));
          v66 = v193;
          if (v193)
            v66 = *(unsigned int *)(v193 + 4);
          v67 = (_DWORD *)(v65 + 2 * v66);
          *v67 = 655373;
          v68 = (char *)(v67 + 1);
          v69 = &v68[2 * __n];
          if ((__n & 0x7FFFFFC0) != 0)
          {
            v70 = &v68[2 * (__n & 0x7FFFFFC0)];
            v71 = 0uLL;
            do
            {
              v197.val[0] = *(int8x16_t *)v15;
              v72 = *((int8x16_t *)v15 + 1);
              v200.val[0] = (int8x16_t)*((_OWORD *)v15 + 2);
              v73 = *((_OWORD *)v15 + 3);
              v15 += 64;
              v74 = v73;
              v200.val[1] = 0uLL;
              v203.val[0] = v72;
              v197.val[1] = 0uLL;
              v75 = v68;
              vst2q_s8(v75, v197);
              v75 += 32;
              v203.val[1] = 0uLL;
              vst2q_s8(v75, v203);
              v76 = v68 + 64;
              vst2q_s8(v76, v200);
              v77 = v68 + 96;
              vst2q_s8(v77, *(int8x16x2_t *)(&v71 - 1));
              v68 += 128;
            }
            while (v68 != v70);
            v68 = v70;
          }
          while (v68 != v69)
          {
            v78 = *(unsigned __int8 *)v15++;
            *(_WORD *)v68 = v78;
            v68 += 2;
          }
          v194 = v186;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v194, v69);
          v79 = v194;
          if (v194)
            v79 = *(unsigned int *)(v194 + 4);
          v80 = &v69[2 * v79];
          v81 = &v80[2 * v183];
          if ((v183 & 0x7FFFFFC0) != 0)
          {
            v122 = &v80[2 * (v183 & 0x7FFFFFC0)];
            v123 = 0uLL;
            v83 = (unsigned int *)v186;
            v82 = (WTF::StringImpl *)v187;
            do
            {
              v198.val[0] = *(int8x16_t *)v17;
              v124 = *((int8x16_t *)v17 + 1);
              v201.val[0] = (int8x16_t)*((_OWORD *)v17 + 2);
              v125 = *((_OWORD *)v17 + 3);
              v17 += 64;
              v126 = v125;
              v201.val[1] = 0uLL;
              v204.val[0] = v124;
              v198.val[1] = 0uLL;
              v127 = v80;
              vst2q_s8(v127, v198);
              v127 += 32;
              v204.val[1] = 0uLL;
              vst2q_s8(v127, v204);
              v128 = v80 + 64;
              vst2q_s8(v128, v201);
              v129 = v80 + 96;
              vst2q_s8(v129, *(int8x16x2_t *)(&v123 - 1));
              v80 += 128;
            }
            while (v80 != v122);
            v80 = v122;
          }
          else
          {
            v83 = (unsigned int *)v186;
            v82 = (WTF::StringImpl *)v187;
          }
          while (v80 != v81)
          {
            v130 = *(unsigned __int8 *)v17++;
            *(_WORD *)v80 = v130;
            v80 += 2;
          }
          *(_WORD *)v81 = 80;
          *(_OWORD *)(v81 + 2) = xmmword_1968DF530;
          *(_OWORD *)(v81 + 18) = xmmword_1968DF540;
          *(_OWORD *)(v81 + 34) = xmmword_1968DF550;
          *(_OWORD *)(v81 + 50) = xmmword_1968DF560;
          *(_OWORD *)(v81 + 66) = xmmword_1968DF570;
          *(_OWORD *)(v81 + 82) = xmmword_1968DF580;
          *(_OWORD *)(v81 + 98) = xmmword_1968DF590;
          *(_QWORD *)(v81 + 114) = 0x3A00790065004BLL;
          *((_WORD *)v81 + 61) = 32;
          v131 = v81 + 124;
          v195 = v19;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v195, v81 + 124);
          v132 = v195;
          if (v195)
            v132 = *(unsigned int *)(v195 + 4);
          v133 = &v131[v132];
          *v133 = 13;
          *(_OWORD *)(v133 + 1) = xmmword_1968DF5A0;
          *(_OWORD *)(v133 + 9) = xmmword_1968DF5B0;
          *(_OWORD *)(v133 + 17) = xmmword_1968DF5C0;
          *(_QWORD *)(v133 + 25) = 0xA000D00330031;
          v134 = (char *)(v133 + 29);
          v135 = &v134[2 * v184];
          if ((v184 & 0x7FFFFFC0) != 0)
          {
            v136 = &v134[2 * (v184 & 0x7FFFFFC0)];
            v137 = 0uLL;
            do
            {
              v199.val[0] = *(int8x16_t *)v21;
              v138 = *((int8x16_t *)v21 + 1);
              v202.val[0] = (int8x16_t)*((_OWORD *)v21 + 2);
              v139 = *((_OWORD *)v21 + 3);
              v21 += 64;
              v140 = v139;
              v202.val[1] = 0uLL;
              v205.val[0] = v138;
              v199.val[1] = 0uLL;
              v141 = v134;
              vst2q_s8(v141, v199);
              v141 += 32;
              v205.val[1] = 0uLL;
              vst2q_s8(v141, v205);
              v142 = v134 + 64;
              vst2q_s8(v142, v202);
              v143 = v134 + 96;
              vst2q_s8(v143, *(int8x16x2_t *)(&v137 - 1));
              v134 += 128;
            }
            while (v134 != v136);
            v134 = v136;
          }
          while (v134 != v135)
          {
            v144 = *(unsigned __int8 *)v21++;
            *(_WORD *)v134 = v144;
            v134 += 2;
          }
          v196 = (_DWORD *)v20;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v196, v135);
          v145 = (unint64_t)v196;
          if (v196)
            v145 = v196[1];
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v135[2 * v145], __src, v185, (int8x16_t *)"User-Agent: ", 12, v24, (int8x16_t *)"\r\n\r\n", 4);
          goto LABEL_184;
        }
      }
      goto LABEL_311;
    }
LABEL_225:
    v59 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v83 = (unsigned int *)v186;
    v82 = (WTF::StringImpl *)v187;
    goto LABEL_184;
  }
  if (v57 == -4)
    goto LABEL_225;
  if ((v58 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v58 + 20)), (v59 = v196) == 0))
  {
LABEL_311:
    v196 = 0;
    __break(0xC471u);
LABEL_312:
    JUMPOUT(0x1955C0BF8);
  }
  *v196 = 2;
  v59[1] = v58;
  *((_QWORD *)v59 + 1) = v59 + 5;
  *((_QWORD *)v59 + 2) = 0x2054454700000004;
  v86 = v59 + 6;
  if (v25)
  {
    v87 = (_BYTE *)*((_QWORD *)v25 + 1);
    v88 = *((unsigned int *)v25 + 1);
    if ((*((_BYTE *)v25 + 16) & 4) != 0)
    {
      if ((_DWORD)v88)
      {
        if ((_DWORD)v88 == 1)
          *v86 = *v87;
        else
          memcpy(v59 + 6, v87, v88);
      }
    }
    else
    {
      v150 = (unsigned __int128 *)&v86[v88];
      if (v88 < 0x10)
      {
        v152 = (unsigned __int128 *)(v59 + 6);
      }
      else
      {
        v151 = (unsigned __int128 *)(v59 + 6);
        v152 = (unsigned __int128 *)&v86[v88 & 0xFFFFFFF0];
        do
        {
          v153 = (unsigned __int128)vld2q_s8(v87);
          v87 += 32;
          *v151++ = v153;
        }
        while (v151 != v152);
      }
      for (; v152 != v150; v152 = (unsigned __int128 *)((char *)v152 + 1))
      {
        v174 = *v87;
        v87 += 2;
        *(_BYTE *)v152 = v174;
      }
    }
    v89 = *((unsigned int *)v25 + 1);
  }
  else
  {
    v89 = 0;
  }
  v90 = &v86[v89];
  qmemcpy(v90, " HTTP/1.1\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nHost: ", 58);
  v91 = v90 + 58;
  if (v26)
  {
    v92 = (_BYTE *)*((_QWORD *)v26 + 1);
    v93 = *((unsigned int *)v26 + 1);
    i = v187;
    if ((*((_BYTE *)v26 + 16) & 4) != 0)
    {
      if ((_DWORD)v93)
      {
        if ((_DWORD)v93 == 1)
          *v91 = *v92;
        else
          memcpy(v91, v92, v93);
      }
    }
    else
    {
      v154 = (unsigned __int128 *)&v91[v93];
      if (v93 < 0x10)
      {
        v155 = (unsigned __int128 *)v91;
      }
      else
      {
        v155 = (unsigned __int128 *)&v91[v93 & 0xFFFFFFF0];
        v156 = (unsigned __int128 *)v91;
        do
        {
          v157 = (unsigned __int128)vld2q_s8(v92);
          v92 += 32;
          *v156++ = v157;
        }
        while (v156 != v155);
      }
      for (i = v187; v155 != v154; v155 = (unsigned __int128 *)((char *)v155 + 1))
      {
        v175 = *v92;
        v92 += 2;
        *(_BYTE *)v155 = v175;
      }
    }
    v95 = *((unsigned int *)v26 + 1);
  }
  else
  {
    v95 = 0;
    i = v187;
  }
  v96 = &v91[v95];
  *(_QWORD *)v96 = *(_QWORD *)"\r\nOrigin: ";
  *((_WORD *)v96 + 4) = 8250;
  v97 = v96 + 10;
  j = __n;
  if (i)
  {
    v99 = *(_BYTE **)(i + 8);
    v100 = *(unsigned int *)(i + 4);
    if ((*(_BYTE *)(i + 16) & 4) != 0)
    {
      if ((_DWORD)v100)
      {
        if ((_DWORD)v100 == 1)
          *v97 = *v99;
        else
          memcpy(v97, v99, v100);
      }
    }
    else
    {
      v158 = (unsigned __int128 *)&v97[v100];
      if (v100 < 0x10)
      {
        v159 = (unsigned __int128 *)v97;
      }
      else
      {
        v159 = (unsigned __int128 *)&v97[v100 & 0xFFFFFFF0];
        v160 = (unsigned __int128 *)v97;
        do
        {
          v161 = (unsigned __int128)vld2q_s8(v99);
          v99 += 32;
          *v160++ = v161;
        }
        while (v160 != v159);
      }
      i = v187;
      for (j = __n; v159 != v158; v159 = (unsigned __int128 *)((char *)v159 + 1))
      {
        v176 = *v99;
        v99 += 2;
        *(_BYTE *)v159 = v176;
      }
    }
    v101 = *(unsigned int *)(i + 4);
  }
  else
  {
    v101 = 0;
  }
  *(_WORD *)&v97[v101] = 2573;
  v102 = &v97[v101 + 2];
  if ((_DWORD)j)
  {
    if ((_DWORD)j == 1)
      *v102 = *v15;
    else
      memcpy(v102, v15, j);
  }
  v103 = &v102[j];
  v83 = (unsigned int *)v186;
  if (v186)
  {
    v104 = *(char **)(v186 + 8);
    v105 = *(unsigned int *)(v186 + 4);
    v82 = (WTF::StringImpl *)v187;
    k = v183;
    if ((*(_BYTE *)(v186 + 16) & 4) != 0)
    {
      if ((_DWORD)v105)
      {
        if ((_DWORD)v105 == 1)
          *v103 = *v104;
        else
          memcpy(v103, v104, v105);
      }
    }
    else
    {
      v162 = (unsigned __int128 *)&v103[v105];
      if (v105 < 0x10)
      {
        v163 = (unsigned __int128 *)v103;
      }
      else
      {
        v163 = (unsigned __int128 *)&v103[v105 & 0xFFFFFFF0];
        v164 = (unsigned __int128 *)v103;
        do
        {
          v165 = (unsigned __int128)vld2q_s8(v104);
          v104 += 32;
          *v164++ = v165;
        }
        while (v164 != v163);
      }
      v83 = (unsigned int *)v186;
      v82 = (WTF::StringImpl *)v187;
      for (k = v183; v163 != v162; v163 = (unsigned __int128 *)((char *)v163 + 1))
      {
        v177 = *v104;
        v104 += 2;
        *(_BYTE *)v163 = v177;
      }
    }
    v107 = v83[1];
  }
  else
  {
    v107 = 0;
    v82 = (WTF::StringImpl *)v187;
    k = v183;
  }
  v108 = &v103[v107];
  if ((_DWORD)k)
  {
    if ((_DWORD)k == 1)
      *v108 = *v17;
    else
      memcpy(v108, v17, k);
  }
  qmemcpy(&v108[k], "Pragma: no-cache\r\nCache-Control: no-cache\r\nSec-WebSocket-Key: ", 62);
  v109 = &v108[k + 62];
  if (v19)
  {
    v110 = *(char **)(v19 + 8);
    v111 = *(unsigned int *)(v19 + 4);
    m = v184;
    if ((*(_BYTE *)(v19 + 16) & 4) != 0)
    {
      if ((_DWORD)v111)
      {
        if ((_DWORD)v111 == 1)
          *v109 = *v110;
        else
          memcpy(v109, v110, v111);
      }
    }
    else
    {
      v166 = (unsigned __int128 *)&v109[v111];
      if (v111 < 0x10)
      {
        v167 = (unsigned __int128 *)v109;
      }
      else
      {
        v167 = (unsigned __int128 *)&v109[v111 & 0xFFFFFFF0];
        v168 = (unsigned __int128 *)v109;
        do
        {
          v169 = (unsigned __int128)vld2q_s8(v110);
          v110 += 32;
          *v168++ = v169;
        }
        while (v168 != v167);
      }
      v83 = (unsigned int *)v186;
      v82 = (WTF::StringImpl *)v187;
      for (m = v184; v167 != v166; v167 = (unsigned __int128 *)((char *)v167 + 1))
      {
        v178 = *v110;
        v110 += 2;
        *(_BYTE *)v167 = v178;
      }
    }
    v113 = *(unsigned int *)(v19 + 4);
  }
  else
  {
    v113 = 0;
    m = v184;
  }
  v114 = &v109[v113];
  qmemcpy(v114, "\r\nSec-WebSocket-Version: 13\r\n", 29);
  v115 = v114 + 29;
  if ((_DWORD)m)
  {
    if ((_DWORD)m == 1)
      *v115 = *v21;
    else
      memcpy(v114 + 29, v21, m);
  }
  v116 = &v115[m];
  if (v20)
  {
    v117 = *(char **)(v20 + 8);
    v118 = *(unsigned int *)(v20 + 4);
    n = v185;
    if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    {
      if ((_DWORD)v118)
      {
        if ((_DWORD)v118 == 1)
          *v116 = *v117;
        else
          memcpy(v116, v117, v118);
      }
    }
    else
    {
      v170 = (unsigned __int128 *)&v116[v118];
      if (v118 < 0x10)
      {
        v171 = (unsigned __int128 *)v116;
      }
      else
      {
        v171 = (unsigned __int128 *)&v116[v118 & 0xFFFFFFF0];
        v172 = (unsigned __int128 *)v116;
        do
        {
          v173 = (unsigned __int128)vld2q_s8(v117);
          v117 += 32;
          *v172++ = v173;
        }
        while (v172 != v171);
      }
      v83 = (unsigned int *)v186;
      v82 = (WTF::StringImpl *)v187;
      for (n = v185; v171 != v170; v171 = (unsigned __int128 *)((char *)v171 + 1))
      {
        v179 = *v117;
        v117 += 2;
        *(_BYTE *)v171 = v179;
      }
    }
    v120 = *(unsigned int *)(v20 + 4);
  }
  else
  {
    v120 = 0;
    n = v185;
  }
  v121 = &v116[v120];
  if ((_DWORD)n)
  {
    if ((_DWORD)n == 1)
      *v121 = __src->i8[0];
    else
      memcpy(v121, __src, n);
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v121[n], "User-Agent: ", 0xCu, v24, "\r\n\r\n", 4u);
LABEL_184:
  v196 = v59;
  WTF::String::utf8();
  v147 = (WTF::StringImpl *)v196;
  v196 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::destroy(v147, v146);
      if (!v24)
        goto LABEL_190;
      goto LABEL_188;
    }
    *(_DWORD *)v147 -= 2;
  }
  if (!v24)
    goto LABEL_190;
LABEL_188:
  if (*(_DWORD *)v24 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v24, v146);
  else
    *(_DWORD *)v24 -= 2;
LABEL_190:
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v20, v146);
      if (!v19)
        goto LABEL_196;
      goto LABEL_194;
    }
    *(_DWORD *)v20 -= 2;
  }
  if (!v19)
    goto LABEL_196;
LABEL_194:
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v19, v146);
  else
    *(_DWORD *)v19 -= 2;
LABEL_196:
  if (v83)
  {
    if (*v83 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v83, v146);
      if (!v82)
        goto LABEL_202;
      goto LABEL_200;
    }
    *v83 -= 2;
  }
  if (!v82)
    goto LABEL_202;
LABEL_200:
  if (*(_DWORD *)v82 == 2)
    WTF::StringImpl::destroy(v82, v146);
  else
    *(_DWORD *)v82 -= 2;
LABEL_202:
  v148 = v188;
  v188 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
      WTF::StringImpl::destroy(v148, v146);
    else
      *(_DWORD *)v148 -= 2;
  }
  result = v189;
  v189 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v146);
      if (!v20)
        return result;
      goto LABEL_209;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v20)
    return result;
LABEL_209:
  if (*(_DWORD *)v20 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v20, v146);
  *(_DWORD *)v20 -= 2;
  return result;
}

WTF::StringImpl *WebCore::WebSocketHandshake::clientHandshakeRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD **v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  char v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;
  char v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  char v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  char v29;
  char v30;
  int v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38[5];
  WTF::StringImpl *v39;

  v5 = (_DWORD **)MEMORY[0x1E0CBF738];
  if (*(_BYTE *)(a1 + 72))
  {
    WTF::URL::isolatedCopy();
    WTF::URL::setProtocol();
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(*(_QWORD *)*a2 + 16))(&v39, *a2, v38);
    v8 = v38[0];
    v38[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v9 += 2;
    v39 = v9;
  }
  WebCore::WebSocketExtensionDispatcher::createHeaderValue((WTF::StringImpl *)&v37, (unsigned int *)(a1 + 360));
  v10 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v10 += 2;
  *(_QWORD *)a3 = v10;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a3 + 40) = 0;
  WTF::URL::invalidate((WTF::URL *)(a3 + 40));
  *(_QWORD *)(a3 + 80) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(WTF::StringImpl **)(a3 + 88) = v38[0];
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_DWORD *)(a3 + 144) = 0x10000;
  v11 = *(_BYTE *)(a3 + 148) & 0x80 | 4;
  *(_BYTE *)(a3 + 148) = v11;
  *(_QWORD *)(a3 + 152) = 0;
  v12 = *v5;
  if (*v5)
  {
    *v12 += 2;
    v11 = *(_BYTE *)(a3 + 148);
  }
  *(_QWORD *)(a3 + 160) = v12;
  *(_QWORD *)(a3 + 168) = 0;
  *(_BYTE *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 180) = 0;
  *(_BYTE *)(a3 + 184) = *(_BYTE *)(a3 + 184) & 0xE0 | 5;
  *(_BYTE *)(a3 + 148) = v11 | 2;
  *(_QWORD *)(a3 + 192) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v38[0];
  WebCore::ResourceRequestBase::setHTTPMethod((WTF **)a3, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(_BYTE *)(a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    *(_BYTE *)(a3 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x11, v38);
  *(_BYTE *)(a3 + 184) &= ~2u;
  v16 = v38[0];
  v38[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebCore::hostName((WebCore *)v38, (const WTF::URL *)a1, *(_BYTE *)(a1 + 48));
  if ((*(_BYTE *)(a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    *(_BYTE *)(a3 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x28, v38);
  *(_BYTE *)(a3 + 184) &= ~2u;
  v18 = v38[0];
  v38[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  if ((*(_BYTE *)(a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    *(_BYTE *)(a3 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x35, (WTF::StringImpl **)(a1 + 64));
  v19 = *(_BYTE *)(a3 + 184);
  v20 = v19 & 0xFD;
  *(_BYTE *)(a3 + 184) = v19 & 0xFD;
  v21 = (WTF::StringImpl **)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 40);
  if (v22 && *(_DWORD *)(v22 + 4))
  {
    if ((v19 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
      v21 = (WTF::StringImpl **)(a1 + 40);
      *(_BYTE *)(a3 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x47, v21);
    v20 = *(_BYTE *)(a3 + 184) & 0xFD;
    *(_BYTE *)(a3 + 184) = v20;
  }
  if (v39 && *((_DWORD *)v39 + 1))
  {
    if ((v20 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
      *(_BYTE *)(a3 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x1B, &v39);
    v20 = *(_BYTE *)(a3 + 184) & 0xFD;
    *(_BYTE *)(a3 + 184) = v20;
  }
  {
    if ((v20 & 1) != 0)
      goto LABEL_31;
  }
  else
  {
    WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
    if ((v20 & 1) != 0)
      goto LABEL_31;
  }
  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
  *(_BYTE *)(a3 + 184) |= 1u;
LABEL_31:
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x38, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::noCache(void)::value);
  v23 = *(_BYTE *)(a3 + 184);
  *(_BYTE *)(a3 + 184) = v23 & 0xFD;
  {
    if ((v23 & 1) != 0)
      goto LABEL_33;
  }
  else
  {
    WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
    WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
    if ((v23 & 1) != 0)
      goto LABEL_33;
  }
  WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
  *(_BYTE *)(a3 + 184) |= 1u;
LABEL_33:
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0xF, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::noCache(void)::value);
  v24 = *(_BYTE *)(a3 + 184);
  *(_BYTE *)(a3 + 184) = v24 & 0xFD;
  if ((v24 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    *(_BYTE *)(a3 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x46, (WTF::StringImpl **)(a1 + 344));
  *(_BYTE *)(a3 + 184) &= ~2u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(_BYTE *)(a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    *(_BYTE *)(a3 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x48, v38);
  *(_BYTE *)(a3 + 184) &= ~2u;
  v26 = v38[0];
  v38[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (v37)
  {
    v27 = *(_BYTE *)(a3 + 184);
    if (*((_DWORD *)v37 + 1))
    {
      if ((*(_BYTE *)(a3 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
        *(_BYTE *)(a3 + 184) |= 1u;
      }
      WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x45, &v37);
      v27 = *(_BYTE *)(a3 + 184) & 0xFD;
      *(_BYTE *)(a3 + 184) = v27;
    }
  }
  else
  {
    v27 = *(_BYTE *)(a3 + 184);
  }
  if ((v27 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    *(_BYTE *)(a3 + 184) |= 1u;
  }
  WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 96), (WTF::StringImpl *)0x56, (WTF::StringImpl **)(a1 + 56));
  v29 = *(_BYTE *)(a3 + 184);
  v30 = v29 & 0xFD;
  *(_BYTE *)(a3 + 184) = v29 & 0xFD;
  v31 = *(unsigned __int8 *)(a1 + 73);
  if ((v29 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a3);
    v35 = *(_BYTE *)(a3 + 184) | 1;
    *(_BYTE *)(a3 + 184) = v35;
    v30 = v35 & 0xFD;
  }
  v32 = *(_BYTE *)(a3 + 148);
  if ((v31 != 0) == ((v32 & 4) == 0))
  {
    *(_BYTE *)(a3 + 148) = v32 & 0xFB | (4 * (v31 != 0));
    *(_BYTE *)(a3 + 184) = v30;
  }
  v33 = v37;
  v37 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v28);
    else
      *(_DWORD *)v33 -= 2;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::WebSocketHandshake::httpURLForAuthenticationAndCookies(WebCore::WebSocketHandshake *this)
{
  WTF::URL::isolatedCopy();
  return WTF::URL::setProtocol();
}

uint64_t WebCore::WebSocketHandshake::reset(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(this + 52) = 0;
  if (*(_DWORD *)(this + 368))
  {
    v2 = this;
    v3 = *(unsigned int *)(this + 372);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(this + 360);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(v2 + 372) = 0;
    }
    this = *(_QWORD *)(v2 + 360);
    if (this)
    {
      *(_QWORD *)(v2 + 360) = 0;
      *(_DWORD *)(v2 + 368) = 0;
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

uint64_t WebCore::WebSocketHandshake::readServerHandshake(unint64_t HTTPHeaderName, WTF::StringImpl *a2, unint64_t a3)
{
  size_t v3;
  int8x16_t *v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  const void *v30;
  const void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned __int8 *v34;
  unint64_t v35;
  char v36;
  WTF::StringImpl **v37;
  int v38;
  WTF *v39;
  unsigned __int8 *v40;
  const WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _BYTE *v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  int v52;
  unsigned __int8 *v54;
  unint64_t v55;
  int v56;
  char *v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  char v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  unint64_t v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const WTF::StringImpl *v77;
  int v78;
  char v79;
  int v80;
  _BOOL4 v81;
  char *v82;
  WTF::StringImpl **v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  char v92;
  _QWORD *v93;
  WTF::StringImpl *v94;
  int v95;
  uint64_t v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl **v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  BOOL v112;
  WTF::StringImpl *v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  size_t v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  WTF::StringImpl *v122;
  int v123;
  uint64_t v124;
  char *v126;
  int8x16_t *v127;
  int8x16_t v128;
  int8x16_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  const WTF::StringImpl **v155;
  const WTF::StringImpl *v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  const WTF::StringImpl *v166;
  unint64_t v167;
  unint64_t v168;
  WTF::StringImpl **v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  int v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  BOOL v182;
  BOOL v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  _BYTE *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  unsigned int v196;
  uint64_t v197;
  const WTF::StringImpl *v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  unsigned int v202;
  BOOL v203;
  const void *v204;
  WTF::StringImpl *v205;
  unint64_t v206;
  char *v207;
  int16x8_t *v208;
  int16x8_t *v209;
  int16x8_t v210;
  int8x16_t v211;
  char *i8;
  int16x8_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  unsigned __int8 *v221;
  WTF::StringImpl **v222;
  uint64_t v223;
  WTF::StringImpl *__src;
  WebCore::HTTPHeaderMap *v225;
  uint64_t v226;
  WTF::StringBuilder *v227;
  unint64_t v228;
  unsigned __int16 v229;
  WTF::StringImpl *v230;
  WebCore::HTTPHeaderNamesHash *v231;
  uint64_t v232;
  _QWORD *v233;
  unsigned __int8 *v234;
  unint64_t v235;
  WTF::StringImpl *v236;
  WTF *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  _QWORD v241[4];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  char v247;
  char v248;
  __int16 v249;
  char v250;
  int64x2_t v251;
  int64x2_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  int64x2_t v256;
  uint64_t v257;
  char v258;
  __int16 v259;
  char v260;
  const void *v261;
  char v262;
  uint64_t v263;
  int8x16x2_t v264;
  int8x16x2_t v265;
  int8x16x2_t v266;
  int8x16x2_t v267;

  v3 = a3;
  v4 = (int8x16_t *)a2;
  v5 = HTTPHeaderName;
  v263 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(HTTPHeaderName + 52) = 0;
  v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v6 += 2;
  if (!a3)
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
LABEL_20:
    if (v7 == a3)
    {
LABEL_320:
      v3 = 0xFFFFFFFFLL;
      if (!v6)
        return v3;
LABEL_345:
      if (*(_DWORD *)v6 != 2)
      {
        *(_DWORD *)v6 -= 2;
        return v3;
      }
      v120 = v6;
      goto LABEL_349;
    }
    v14 = v7 + 1;
    if ((int)v7 + 1 >= 1025)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = *(WTF::StringImpl **)(v5 + 336);
      *(_QWORD *)(v5 + 336) = v240;
      if (!v15)
        goto LABEL_344;
      goto LABEL_23;
    }
    if (v14 < 2)
      goto LABEL_53;
    if (a3 <= v7 - 1)
      goto LABEL_538;
    if (*((_BYTE *)a2 + v7 - 1) != 13)
    {
LABEL_53:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = v240;
      goto LABEL_54;
    }
    if (v8 && v10)
    {
      if (a3 < v9)
        goto LABEL_538;
      __src = a2;
      v240 = a2;
      v241[0] = v9 | 0x100000000;
      HTTPHeaderName = WTF::StringView::startsWith();
      if (!(_DWORD)HTTPHeaderName)
        goto LABEL_527;
      v18 = LODWORD(v241[0]);
      if (LODWORD(v241[0]) < 8)
        goto LABEL_527;
      v19 = v240;
      if (BYTE4(v241[0]))
      {
        v20 = LODWORD(v241[0]) - 5;
        v21 = 16;
        if (v20 < 0x10)
          v21 = LODWORD(v241[0]) - 5;
        v22 = v21;
        HTTPHeaderName = (unint64_t)v240 + 5;
        do
        {
          if (*(_BYTE *)HTTPHeaderName == 46)
            goto LABEL_45;
          ++HTTPHeaderName;
          --v22;
        }
        while (v22);
        if (v20 < 0x11)
          goto LABEL_527;
        HTTPHeaderName = (unint64_t)memchr((char *)v240 + v21 + 5, 46, v20 - v21);
        v18 = LODWORD(v241[0]);
        v19 = v240;
        if (!HTTPHeaderName)
          goto LABEL_527;
LABEL_45:
        v23 = HTTPHeaderName - (_QWORD)v19;
      }
      else
      {
        v206 = v5;
        v207 = (char *)v240 + 10;
        v208 = (int16x8_t *)((char *)v240 + 2 * LODWORD(v241[0]));
        if (2 * (unint64_t)LODWORD(v241[0]) - 73 >= 0xFFFFFFFFFFFFFFC1)
        {
          v214 = 2 * LODWORD(v241[0]) - 10;
          while (*(_WORD *)v207 != 46)
          {
            v207 += 2;
            v214 -= 2;
            v5 = v206;
            if (!v214)
              goto LABEL_527;
          }
        }
        else
        {
          if (LODWORD(v241[0]) < 0xD)
          {
LABEL_634:
            if (v207 >= (char *)v208)
              goto LABEL_527;
            i8 = v208[-1].i8;
            v213.i64[0] = 0x2E002E002E002ELL;
            v213.i64[1] = 0x2E002E002E002ELL;
            v211 = (int8x16_t)vceqq_s16(v208[-1], v213);
            v213.i16[0] = vmaxvq_u16((uint16x8_t)v211);
            if (!v213.i32[0])
              goto LABEL_527;
          }
          else
          {
            v209 = (int16x8_t *)((char *)v240 + 24);
            v210.i64[0] = 0x2E002E002E002ELL;
            v210.i64[1] = 0x2E002E002E002ELL;
            while (1)
            {
              v211 = (int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v209 - 14), v210);
              LOWORD(v17) = vmaxvq_u16((uint16x8_t)v211);
              if (v17)
                break;
              if (++v209 >= v208)
              {
                v207 = &v209[-1].i8[2];
                goto LABEL_634;
              }
            }
            i8 = &v209[-1].i8[2];
          }
          v207 = &i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v211))];
        }
        v5 = v206;
        if (v207 == (char *)v208)
          goto LABEL_527;
        v23 = (v207 - (char *)v240) >> 1;
      }
      if (v23 == -1)
        goto LABEL_527;
      LODWORD(v24) = v23 - 5;
      if ((int)v18 - 5 >= (v23 - 5))
        v24 = v24;
      else
        v24 = (v18 - 5);
      if (BYTE4(v241[0]))
      {
        if (v18 - 5 < v24)
          goto LABEL_538;
        v25 = (uint64_t)v19 + 5;
        v24 |= 0x100000000uLL;
      }
      else
      {
        if (v18 - 5 < v24)
          goto LABEL_538;
        v25 = (uint64_t)v19 + 10;
      }
      if ((v24 & 0x100000000) != 0)
        HTTPHeaderName = WTF::parseInteger<int,unsigned char>(v25, v24, 10, 0);
      else
        HTTPHeaderName = WTF::parseInteger<int,char16_t>(v25, v24, 10, 0);
      v143 = HTTPHeaderName;
      if ((HTTPHeaderName & 0xFF00000000) != 0)
      {
        v144 = (LODWORD(v241[0]) - v23);
        if (v144 < 2)
        {
          LODWORD(v144) = 1;
        }
        else
        {
          if (!BYTE4(v241[0]))
          {
            v145 = 1;
            while (LODWORD(v241[0]) > (v23 + v145))
            {
              if (*((unsigned __int16 *)v240 + (v23 + v145)) - 48 > 9)
                goto LABEL_505;
              if (v144 == ++v145)
                goto LABEL_506;
            }
            goto LABEL_538;
          }
          v145 = 1;
          while (1)
          {
            if (LODWORD(v241[0]) <= (v23 + v145))
              goto LABEL_538;
            if (*((unsigned __int8 *)v240 + (v23 + v145)) - 48 >= 0xA)
              break;
            if (v144 == ++v145)
              goto LABEL_506;
          }
LABEL_505:
          LODWORD(v144) = v145;
        }
LABEL_506:
        v178 = (v23 + 1);
        if (LODWORD(v241[0]) <= v178)
        {
          v181 = 0;
          v180 = (WTF::StringImpl *)"";
          goto LABEL_516;
        }
        if (LODWORD(v241[0]) - (int)v178 <= v144)
        {
          if ((_DWORD)v23 == -1)
          {
            v180 = v240;
            v144 = v241[0];
            goto LABEL_515;
          }
          LODWORD(v144) = LODWORD(v241[0]) - v178;
        }
        v144 = v144;
        v179 = LODWORD(v241[0]) - (unint64_t)v178;
        if (BYTE4(v241[0]))
        {
          if (v179 < v144)
            goto LABEL_538;
          v180 = (WTF::StringImpl *)((char *)v240 + v178);
          v144 = v144 | 0x100000000;
        }
        else
        {
          if (v179 < v144)
            goto LABEL_538;
          v180 = (WTF::StringImpl *)((char *)v240 + 2 * v178);
        }
LABEL_515:
        v181 = v144;
        if ((v144 & 0xFF00000000) == 0)
        {
          HTTPHeaderName = WTF::parseInteger<int,char16_t>((uint64_t)v180, v144, 10, 0);
          goto LABEL_518;
        }
LABEL_516:
        HTTPHeaderName = WTF::parseInteger<int,unsigned char>((uint64_t)v180, v181, 10, 0);
LABEL_518:
        if ((HTTPHeaderName & 0xFF00000000) == 0)
          goto LABEL_527;
        v182 = v143 <= 0 || (int)HTTPHeaderName <= 0;
        v183 = !v182;
        if (v143 <= 1 && !v183)
          goto LABEL_527;
        v187 = v9 + 1;
        if (v3 >= v9 + 1)
        {
          v188 = v11 + ~v9;
          if (v188 == -1)
          {
            LODWORD(v188) = v3 - (v9 + 1);
            v4 = (int8x16_t *)__src;
          }
          else
          {
            v4 = (int8x16_t *)__src;
            if (v3 - (v9 + 1) < v188)
              goto LABEL_538;
          }
          if ((_DWORD)v188 != 3)
            goto LABEL_57;
          v189 = (uint64_t)v4->i64 + v187;
          if (v4->u8[v187] - 48 <= 9
            && *(unsigned __int8 *)(v189 + 1) - 48 <= 9
            && *(unsigned __int8 *)(v189 + 2) - 48 <= 9)
          {
            HTTPHeaderName = WTF::parseInteger<int,unsigned char>(v189, 3, 10, 0);
            if ((HTTPHeaderName & 0xFF00000000) != 0)
            {
              if (v3 >= v11 + 1)
              {
                v28 = HTTPHeaderName;
                if (v7 - v11 == 2 || v3 - (v11 + 1) >= v7 - v11 - 3)
                {
                  WTF::String::String();
                  v195 = v240;
                  v240 = 0;
                  if (v6)
                  {
                    if (*(_DWORD *)v6 == 2)
                    {
                      WTF::StringImpl::destroy(v6, a2);
                      v240 = 0;
                    }
                    else
                    {
                      *(_DWORD *)v6 -= 2;
                    }
                  }
                  v6 = v195;
                  v4 = (int8x16_t *)__src;
                  goto LABEL_58;
                }
              }
              goto LABEL_538;
            }
            std::__throw_bad_optional_access[abi:sn180100]();
            goto LABEL_661;
          }
          WTF::tryFastCompactMalloc((WTF *)0x2C);
          v26 = v240;
          if (!v240)
          {
            __break(0xC471u);
            goto LABEL_674;
          }
          *(_QWORD *)v240 = 0x1800000002;
          *((_QWORD *)v26 + 1) = (char *)v26 + 20;
          *((_DWORD *)v26 + 4) = 4;
          qmemcpy((char *)v26 + 20, "Invalid status code: ", 21);
          v190 = *(_BYTE *)(v189 + 2);
          *(_WORD *)((char *)v26 + 41) = *(_WORD *)v189;
          *((_BYTE *)v26 + 43) = v190;
LABEL_54:
          v27 = *(WTF::StringImpl **)(v5 + 336);
          *(_QWORD *)(v5 + 336) = v26;
          if (!v27)
            goto LABEL_57;
          goto LABEL_55;
        }
LABEL_538:
        __break(1u);
        goto LABEL_539;
      }
LABEL_527:
      if ((v9 & 0x80000000) == 0)
      {
        v184 = (v9 + 29);
        if (!__OFADD__((_DWORD)v9, 29))
        {
          WTF::tryFastCompactMalloc((WTF *)(v184 + 20));
          v185 = v240;
          if (v240)
          {
            *(_DWORD *)v240 = 2;
            *((_DWORD *)v185 + 1) = v184;
            *((_QWORD *)v185 + 1) = (char *)v185 + 20;
            *((_DWORD *)v185 + 4) = 4;
            qmemcpy((char *)v185 + 20, "Invalid HTTP version string: ", 29);
            v4 = (int8x16_t *)__src;
            if ((_DWORD)v9)
            {
              v186 = (char *)v185 + 49;
              if ((_DWORD)v9 == 1)
                *v186 = *(_BYTE *)__src;
              else
                memcpy(v186, __src, v9);
            }
            v27 = *(WTF::StringImpl **)(v5 + 336);
            *(_QWORD *)(v5 + 336) = v185;
            if (!v27)
              goto LABEL_57;
LABEL_55:
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, a2);
            else
              *(_DWORD *)v27 -= 2;
            goto LABEL_57;
          }
        }
      }
LABEL_661:
      __break(0xC471u);
      JUMPOUT(0x1955C3544);
    }
    v121 = (v7 - 1);
    if (v3 < v121)
      goto LABEL_538;
    if (v121 >= 0x81)
    {
      WTF::tryFastCompactMalloc((WTF *)0x116);
      v122 = v240;
      if (!v240)
      {
        __break(0xC471u);
        JUMPOUT(0x1955C3584);
      }
      v126 = (char *)v240 + 20;
      *(_QWORD *)v240 = 0x8100000002;
      *((_QWORD *)v122 + 1) = (char *)v122 + 20;
      *((_DWORD *)v122 + 4) = 0;
      v264.val[0] = *v4;
      v128 = v4[1];
      v265.val[0] = v4[2];
      v129 = v4[3];
      v127 = v4 + 4;
      v266.val[1] = 0uLL;
      v266.val[0] = v129;
      v265.val[1] = 0u;
      v267.val[0] = v128;
      v264.val[1] = 0u;
      vst2q_s8(v126, v264);
      v267.val[1] = 0u;
      v130 = (char *)v122 + 52;
      vst2q_s8(v130, v267);
      v131 = (char *)v122 + 84;
      vst2q_s8(v131, v265);
      v132 = (char *)v122 + 116;
      vst2q_s8(v132, v266);
      v133 = (char *)v122 + 148;
      v264.val[0] = *v127;
      v265.val[0] = v127[2];
      v266.val[0] = v127[3];
      v265.val[1] = 0u;
      v267.val[0] = v127[1];
      v264.val[1] = 0u;
      vst2q_s8(v133, v264);
      v267.val[1] = 0u;
      v134 = (char *)v122 + 180;
      vst2q_s8(v134, v267);
      v135 = (char *)v122 + 212;
      vst2q_s8(v135, v265);
      v136 = (char *)v122 + 244;
      vst2q_s8(v136, v266);
      *((_WORD *)v122 + 138) = 8230;
      v234 = (unsigned __int8 *)v122;
    }
    else
    {
      WTF::String::String();
      v122 = (WTF::StringImpl *)v234;
      if (!v234)
      {
        v123 = 1;
        v124 = 24;
        goto LABEL_356;
      }
    }
    v137 = *((_DWORD *)v122 + 1);
    if (v137 < 0 || (v124 = (v137 + 24), __OFADD__(v137, 24)))
    {
      v240 = 0;
      goto LABEL_663;
    }
    v123 = (*((unsigned __int8 *)v122 + 16) >> 2) & 1;
LABEL_356:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v124, v123, (int8x16_t *)"No response code found: ", 0x18u, (uint64_t)v122, &v240);
    v138 = v240;
    if (v240)
    {
      v240 = 0;
      v139 = *(WTF::StringImpl **)(v5 + 336);
      *(_QWORD *)(v5 + 336) = v138;
      if (v139)
      {
        if (*(_DWORD *)v139 == 2)
        {
          WTF::StringImpl::destroy(v139, a2);
          v142 = v240;
          v240 = 0;
          if (v142)
          {
            if (*(_DWORD *)v142 == 2)
              WTF::StringImpl::destroy(v142, a2);
            else
              *(_DWORD *)v142 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v139 -= 2;
          v240 = 0;
        }
      }
      v15 = (WTF::StringImpl *)v234;
      v234 = 0;
      if (!v15)
      {
LABEL_344:
        *(_DWORD *)(v5 + 52) = 2;
        if (!v6)
          return v3;
        goto LABEL_345;
      }
LABEL_23:
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, a2);
      else
        *(_DWORD *)v15 -= 2;
      goto LABEL_344;
    }
LABEL_663:
    __break(0xC471u);
    JUMPOUT(0x1955C3550);
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = *((unsigned __int8 *)a2 + v7);
    if (v12 != 32)
      break;
    if (v10)
      v13 = v11;
    else
      v13 = v7;
    if (v8)
    {
      v11 = v13;
      v10 = 1;
    }
    else
    {
      v9 = v7;
    }
    v8 = 1;
LABEL_17:
    if (a3 == ++v7)
      goto LABEL_320;
  }
  if (*((_BYTE *)a2 + v7) && (v12 & 0x80) == 0)
  {
    if (v12 == 10)
      goto LABEL_20;
    goto LABEL_17;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = *(WTF::StringImpl **)(v5 + 336);
  *(_QWORD *)(v5 + 336) = v240;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v14 = v7 + 1;
LABEL_57:
  v28 = -1;
LABEL_58:
  if (v14 == -1)
    goto LABEL_320;
  if (v28 == -1)
    goto LABEL_344;
  v240 = 0;
  WTF::URL::invalidate((WTF::URL *)&v240);
  v248 = 0;
  v249 = 0;
  v242 = 0u;
  v243 = 0u;
  v244 = 0u;
  v245 = 0u;
  v246 = 0u;
  v247 = 0;
  v251 = vdupq_n_s64(0x7FF8000000000000uLL);
  v252 = v251;
  v253 = 0;
  v254 = 0;
  v255 = 0x8000000000000000;
  v256 = v251;
  v257 = 0x7FF8000000000000;
  v258 &= 0xF0u;
  v259 &= 0xC000u;
  v260 = v260 & 0xF8 | 2;
  v261 = 0;
  v262 = 0;
  v250 = v250 & 0xC0 | 5;
  WebCore::ResourceResponseBase::operator=(v5 + 80, (uint64_t *)&v240);
  v30 = v261;
  v261 = 0;
  v31 = *(const void **)(v5 + 320);
  *(_QWORD *)(v5 + 320) = v30;
  if (v31)
  {
    CFRelease(v31);
    v204 = v261;
    *(_BYTE *)(v5 + 328) = v262;
    v261 = 0;
    if (v204)
      CFRelease(v204);
  }
  else
  {
    *(_BYTE *)(v5 + 328) = v262;
    v261 = 0;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v240, v29);
  WebCore::ResourceResponse::platformLazyInit(v5 + 80, 1);
  *(_WORD *)(v5 + 216) = v28;
  *(_BYTE *)(v5 + 218) &= ~1u;
  WebCore::ResourceResponse::platformLazyInit(v5 + 80, 2);
  v33 = *(WTF::StringImpl **)(v5 + 144);
  *(_QWORD *)(v5 + 144) = v6;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  if (v28 != 101)
  {
    *(_DWORD *)(v5 + 52) = 2;
    if ((v28 & 0x80000000) != 0)
    {
      v202 = -v28;
      v114 = 1;
      do
      {
        ++v114;
        v203 = v202 >= 0xA;
        v202 /= 0xAu;
      }
      while (v203);
    }
    else
    {
      v114 = 0;
      v115 = v28;
      do
      {
        ++v114;
        v182 = v115 > 9;
        v115 /= 0xAu;
      }
      while (v182);
    }
    if ((v114 & 0x80000000) == 0)
    {
      v116 = (v114 + 26);
      if (!__OFADD__(v114, 26))
      {
        WTF::tryFastCompactMalloc((WTF *)(v116 + 20));
        v117 = v240;
        if (v240)
        {
          *(_DWORD *)v240 = 2;
          *((_DWORD *)v117 + 1) = v116;
          *((_QWORD *)v117 + 1) = (char *)v117 + 20;
          *((_DWORD *)v117 + 4) = 4;
          qmemcpy((char *)v117 + 20, "Unexpected response code: ", 26);
          v118 = 0;
          if ((v28 & 0x80000000) != 0)
          {
            v196 = -v28;
            do
            {
              *((_BYTE *)v241 + v118-- + 4) = (v196 % 0xA) | 0x30;
              v182 = v196 > 9;
              v196 /= 0xAu;
            }
            while (v182);
            v197 = v118 + 12;
            a2 = (WTF::StringImpl *)((char *)&v240 + v118 + 12);
            *(_BYTE *)a2 = 45;
            if (v118 + 14 > 14)
              goto LABEL_333;
            if (v197 <= 12)
              v197 = 12;
            v119 = v197 - v118 - 11;
          }
          else
          {
            do
            {
              *((_BYTE *)v241 + v118-- + 4) = (v28 % 0xA) | 0x30;
              v182 = v28 > 9;
              v28 /= 0xAu;
            }
            while (v182);
            if (v118 + 14 > 13)
              goto LABEL_333;
            a2 = (WTF::StringImpl *)((char *)v241 + v118 + 5);
            v119 = -v118;
          }
          memcpy((char *)v117 + 46, a2, v119);
LABEL_333:
          v120 = *(WTF::StringImpl **)(v5 + 336);
          *(_QWORD *)(v5 + 336) = v117;
          if (!v120)
            return v3;
          if (*(_DWORD *)v120 != 2)
          {
            *(_DWORD *)v120 -= 2;
            return v3;
          }
LABEL_349:
          WTF::StringImpl::destroy(v120, a2);
          return v3;
        }
      }
    }
    __break(0xC471u);
LABEL_674:
    JUMPOUT(0x1955C3538);
  }
  *(_DWORD *)(v5 + 52) = 1;
  HTTPHeaderName = (unint64_t)memmem(v4, v3, "\r\n\r\n", 4uLL);
  if (!HTTPHeaderName)
  {
    *(_DWORD *)(v5 + 52) = 0;
    return 0xFFFFFFFFLL;
  }
  v226 = v5 + 80;
  if (v3 < v14)
    goto LABEL_538;
  __src = (WTF::StringImpl *)v4;
  v34 = &v4->u8[v14];
  v230 = 0;
  v231 = 0;
  LODWORD(v232) = 0;
  BYTE4(v232) = 1;
  v35 = v3 - v14;
  if (v3 == v14)
    goto LABEL_415;
  v36 = 0;
  v223 = 0;
  v37 = (WTF::StringImpl **)(v5 + 336);
  v225 = (WebCore::HTTPHeaderMap *)(v5 + 160);
  v227 = (WTF::StringBuilder *)(v5 + 376);
  do
  {
    HTTPHeaderName = WebCore::parseHTTPHeader(v34, v35, v37, (uint64_t)&v231, &v230, 1);
    if (!HTTPHeaderName)
      goto LABEL_406;
    if (v35 < HTTPHeaderName)
      goto LABEL_538;
    v228 = HTTPHeaderName;
    v34 += HTTPHeaderName;
    if (!(_DWORD)v232)
      break;
    v229 = 0;
    HTTPHeaderName = WebCore::findHTTPHeaderName(v231, (char *)v232, &v229);
    if ((HTTPHeaderName & 1) == 0)
    {
      if (BYTE4(v232))
        WTF::String::String();
      else
        WTF::String::String();
      WebCore::ResourceResponse::platformLazyInit(v226, 2);
      WebCore::HTTPHeaderMap::addUncommonHeader(v225, &v240, &v230);
      HTTPHeaderName = (unint64_t)v240;
      v240 = 0;
      if (HTTPHeaderName)
      {
        if (*(_DWORD *)HTTPHeaderName == 2)
          HTTPHeaderName = WTF::StringImpl::destroy((WTF::StringImpl *)HTTPHeaderName, a2);
        else
          *(_DWORD *)HTTPHeaderName -= 2;
      }
      goto LABEL_302;
    }
    v38 = v229;
    if (v229 - 68 <= 3 && v229 != 70)
    {
      HTTPHeaderName = WTF::String::containsOnlyASCII((WTF::String *)&v230);
      if ((HTTPHeaderName & 1) == 0)
      {
        if ((v232 & 0x80000000) != 0 || __OFADD__((_DWORD)v232, 50))
        {
          v240 = 0;
        }
        else
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v232 + 50), (v232 & 0xFF00000000) != 0, v231, v232, " header value should only contain ASCII characters", 0x32u, &v240);
          v140 = v240;
          if (v240)
          {
            v240 = 0;
            HTTPHeaderName = (unint64_t)*v37;
            *v37 = v140;
            if (HTTPHeaderName)
            {
              v141 = *(_DWORD *)HTTPHeaderName - 2;
              if (*(_DWORD *)HTTPHeaderName != 2)
              {
LABEL_405:
                *(_DWORD *)HTTPHeaderName = v141;
                goto LABEL_406;
              }
              WTF::StringImpl::destroy((WTF::StringImpl *)HTTPHeaderName, a2);
              HTTPHeaderName = (unint64_t)v240;
              v240 = 0;
              if (!HTTPHeaderName)
                goto LABEL_406;
              goto LABEL_404;
            }
LABEL_406:
            v34 = 0;
            break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1955C3590);
      }
      v38 = v229;
    }
    if (v38 == 68)
    {
      if ((v223 & 0x100000000) == 0)
      {
        BYTE4(v223) = 1;
LABEL_301:
        WebCore::ResourceResponse::platformLazyInit(v226, 2);
        WebCore::ResourceResponseBase::updateHeaderParsedState(v226, v38);
        HTTPHeaderName = (unint64_t)WebCore::HTTPHeaderMap::add(v225, v38, (uint64_t *)&v230);
LABEL_302:
        v111 = v228;
        goto LABEL_303;
      }
LABEL_385:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v146 = v240;
      goto LABEL_403;
    }
    if (v38 == 71)
    {
      if ((v223 & 1) == 0)
      {
        LOBYTE(v223) = 1;
        goto LABEL_301;
      }
      goto LABEL_385;
    }
    if (v38 != 69)
      goto LABEL_301;
    if ((v36 & 1) != 0)
      goto LABEL_385;
    if (!v230 || !*((_DWORD *)v230 + 1))
    {
      v36 = 1;
      goto LABEL_302;
    }
    if (!*(_DWORD *)(v5 + 372))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v147 = v240;
      if (v240)
        *(_DWORD *)v240 += 2;
      v148 = *(WTF::StringImpl **)(v5 + 400);
      *(_QWORD *)(v5 + 400) = v147;
      if (v148)
      {
        if (*(_DWORD *)v148 == 2)
          WTF::StringImpl::destroy(v148, a2);
        else
          *(_DWORD *)v148 -= 2;
      }
      v149 = *(WTF::StringImpl **)v227;
      *(_QWORD *)v227 = 0;
      if (v149)
      {
        if (*(_DWORD *)v149 == 2)
          WTF::StringImpl::destroy(v149, a2);
        else
          *(_DWORD *)v149 -= 2;
      }
      v150 = *(WTF::StringImpl **)(v5 + 384);
      *(_QWORD *)(v5 + 384) = 0;
      if (v150)
      {
        if (*(_DWORD *)v150 == 2)
          WTF::StringImpl::destroy(v150, a2);
        else
          *(_DWORD *)v150 -= 2;
      }
      *(_DWORD *)(v5 + 392) = 0;
      if (v147)
      {
        if (*(_DWORD *)v147 == 2)
          WTF::StringImpl::destroy(v147, a2);
        else
          *(_DWORD *)v147 -= 2;
      }
LABEL_401:
      v146 = *(WTF::StringImpl **)(v5 + 400);
      if (v146)
        *(_DWORD *)v146 += 2;
LABEL_403:
      HTTPHeaderName = (unint64_t)*v37;
      *v37 = v146;
      if (HTTPHeaderName)
      {
LABEL_404:
        v141 = *(_DWORD *)HTTPHeaderName - 2;
        if (*(_DWORD *)HTTPHeaderName != 2)
          goto LABEL_405;
LABEL_539:
        WTF::StringImpl::destroy((WTF::StringImpl *)HTTPHeaderName, a2);
        goto LABEL_406;
      }
      goto LABEL_406;
    }
    WTF::String::utf8();
    v39 = v237;
    v40 = (unsigned __int8 *)v237 + 16;
    if (v237)
      v39 = (WTF *)*((_QWORD *)v237 + 1);
    else
      v40 = 0;
    v234 = v40;
    v235 = (unint64_t)v39 + (_QWORD)v40;
    v236 = 0;
    v221 = v34;
    v222 = v37;
    while ((unint64_t)v234 < v235)
    {
      v233 = 0;
      v42 = 0;
      if (!WebCore::WebSocketExtensionParser::consumeToken(&v234))
        goto LABEL_202;
      v42 = v236;
      if (v236)
        *(_DWORD *)v236 += 2;
      while (1)
      {
        v43 = v234;
        if ((unint64_t)v234 < v235)
        {
          v44 = v235 - (_QWORD)v234;
          while (1)
          {
            v45 = *v43;
            v46 = v45 == 32 || v45 == 9;
            if (!v46)
              break;
            v234 = ++v43;
            if (!--v44)
            {
              v43 = (_BYTE *)v235;
              break;
            }
          }
        }
        if ((unint64_t)v43 >= v235)
          break;
        if (*v43 != 59)
        {
          v69 = v235 - (_QWORD)v43;
          while (1)
          {
            v70 = *v43;
            if (v70 != 32 && v70 != 9)
              break;
            v234 = ++v43;
            if (!--v69)
            {
              v43 = (_BYTE *)v235;
              break;
            }
          }
          if ((unint64_t)v43 >= v235 || *v43 != 44)
            goto LABEL_202;
          v234 = v43 + 1;
          break;
        }
        v234 = v43 + 1;
        if (!WebCore::WebSocketExtensionParser::consumeToken(&v234))
          goto LABEL_202;
        v48 = v236;
        if (v236)
          *(_DWORD *)v236 += 2;
        v238 = v48;
        v50 = v234;
        v49 = v235;
        if ((unint64_t)v234 < v235)
        {
          v51 = v235 - (_QWORD)v234;
          while (1)
          {
            v52 = *v50;
            if (v52 != 32 && v52 != 9)
              break;
            v234 = ++v50;
            if (!--v51)
            {
              v50 = (_BYTE *)v235;
              break;
            }
          }
        }
        if ((unint64_t)v50 >= v235 || *v50 != 61)
        {
          v239 = 0;
          WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>((uint64_t *)&v233, &v238, (const WTF::StringImpl *)&v239, (uint64_t)&v240);
          v63 = v239;
          v239 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, a2);
            else
              *(_DWORD *)v63 -= 2;
          }
LABEL_146:
          v64 = 1;
          goto LABEL_147;
        }
        v54 = v50 + 1;
        v234 = v54;
        if ((unint64_t)v54 < v235)
        {
          v55 = v235 - (_QWORD)v54;
          while (1)
          {
            v56 = *v54;
            if (v56 != 32 && v56 != 9)
              break;
            v234 = ++v54;
            if (!--v55)
            {
              v54 = (unsigned __int8 *)v235;
              break;
            }
          }
        }
        if ((unint64_t)v54 >= v235)
          goto LABEL_141;
        if (*v54 != 34)
          goto LABEL_141;
        v240 = 0;
        v241[0] = 0;
        v58 = (char *)(v54 + 1);
        v234 = v54 + 1;
        if ((unint64_t)(v54 + 1) >= v235)
          goto LABEL_141;
        v59 = 0;
        while (1)
        {
          v60 = v54[1];
          if (v60 == 92)
          {
            v58 = (char *)(v54 + 2);
            v234 = v54 + 2;
            if ((unint64_t)(v54 + 2) >= v49)
              goto LABEL_138;
            goto LABEL_135;
          }
          if (v60 == 34)
            break;
LABEL_135:
          v61 = v59;
          if (v59 == LODWORD(v241[0]))
          {
            v58 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v240, (WTF *)(v59 + 1), (unint64_t)v58);
            v61 = HIDWORD(v241[0]);
          }
          *((_BYTE *)v240 + v61) = *v58;
          v59 = ++HIDWORD(v241[0]);
          v54 = v234;
          v49 = v235;
          v58 = (char *)(v234 + 1);
          v234 = (unsigned __int8 *)v58;
          if ((unint64_t)v58 >= v235)
          {
LABEL_138:
            v62 = v240;
            goto LABEL_139;
          }
        }
        WTF::String::fromUTF8();
        v66 = v239;
        v239 = 0;
        v67 = v236;
        v236 = v66;
        if (v67)
        {
          v68 = *(_DWORD *)v67 - 2;
          if (*(_DWORD *)v67 != 2)
            goto LABEL_158;
          WTF::StringImpl::destroy(v67, v47);
          v67 = v239;
          v239 = 0;
          if (v67)
          {
            v68 = *(_DWORD *)v67 - 2;
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v47);
            else
LABEL_158:
              *(_DWORD *)v67 = v68;
          }
          v66 = v236;
        }
        v62 = v240;
        if (v66)
        {
          ++v234;
          if (v240)
          {
            v240 = 0;
            LODWORD(v241[0]) = 0;
            WTF::fastFree(v62, v47);
          }
          goto LABEL_142;
        }
LABEL_139:
        if (v62)
        {
          v240 = 0;
          LODWORD(v241[0]) = 0;
          WTF::fastFree(v62, v47);
        }
LABEL_141:
        if (WebCore::WebSocketExtensionParser::consumeToken(&v234))
        {
LABEL_142:
          WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>((uint64_t *)&v233, &v238, (const WTF::StringImpl *)&v236, (uint64_t)&v240);
          goto LABEL_146;
        }
        v64 = 0;
LABEL_147:
        v65 = v238;
        v238 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 != 2)
          {
            *(_DWORD *)v65 -= 2;
            goto LABEL_150;
          }
          WTF::StringImpl::destroy(v65, a2);
          if ((v64 & 1) == 0)
          {
LABEL_202:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v88 = v240;
            if (v240)
              *(_DWORD *)v240 += 2;
            v89 = *(WTF::StringImpl **)(v5 + 400);
            *(_QWORD *)(v5 + 400) = v88;
            if (v89)
            {
              if (*(_DWORD *)v89 == 2)
                WTF::StringImpl::destroy(v89, a2);
              else
                *(_DWORD *)v89 -= 2;
            }
            v90 = *(WTF::StringImpl **)v227;
            *(_QWORD *)v227 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
                WTF::StringImpl::destroy(v90, a2);
              else
                *(_DWORD *)v90 -= 2;
            }
            v91 = *(WTF::StringImpl **)(v5 + 384);
            *(_QWORD *)(v5 + 384) = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2)
                WTF::StringImpl::destroy(v91, a2);
              else
                *(_DWORD *)v91 -= 2;
            }
            *(_DWORD *)(v5 + 392) = 0;
            if (v88)
            {
              if (*(_DWORD *)v88 != 2)
              {
                v92 = 0;
                *(_DWORD *)v88 -= 2;
                goto LABEL_216;
              }
              v94 = v88;
LABEL_227:
              WTF::StringImpl::destroy(v94, a2);
            }
            goto LABEL_265;
          }
        }
        else
        {
LABEL_150:
          if ((v64 & 1) == 0)
            goto LABEL_202;
        }
      }
      v72 = *(unsigned int *)(v5 + 372);
      if (!(_DWORD)v72)
      {
        v75 = 0;
        goto LABEL_229;
      }
      v73 = 0;
      v74 = *(_QWORD *)(v5 + 360);
      v75 = ((v72 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      v76 = 8 * v72;
      while (2)
      {
        v77 = *(const WTF::StringImpl **)(*(_QWORD *)(v74 + 8 * v73) + 8);
        if (v77)
        {
          *(_DWORD *)v77 += 2;
          v78 = WTF::equal(v42, v77, v41);
          v79 = v78;
          if (*(_DWORD *)v77 == 2)
          {
            WTF::StringImpl::destroy(v77, a2);
            if ((v79 & 1) != 0)
              break;
          }
          else
          {
            *(_DWORD *)v77 -= 2;
            if (v78)
              break;
          }
          goto LABEL_182;
        }
        if ((WTF::equal(v42, 0, v41) & 1) == 0)
        {
LABEL_182:
          ++v73;
          v76 -= 8;
          if (!v76)
          {
            v34 = v221;
            v37 = v222;
            goto LABEL_229;
          }
          continue;
        }
        break;
      }
      if (!(*(unsigned int (**)(_QWORD, _QWORD **))(**(_QWORD **)(v74 + 8 * v73) + 24))(*(_QWORD *)(v74 + 8 * v73), &v233))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(v74 + 8 * v73) + 32))(&v240);
        v103 = v240;
        v34 = v221;
        if (v240)
          *(_DWORD *)v240 += 2;
        v104 = *(WTF::StringImpl **)(v5 + 400);
        *(_QWORD *)(v5 + 400) = v103;
        v37 = v222;
        if (v104)
        {
          if (*(_DWORD *)v104 == 2)
            WTF::StringImpl::destroy(v104, a2);
          else
            *(_DWORD *)v104 -= 2;
        }
        v105 = *(WTF::StringImpl **)v227;
        *(_QWORD *)v227 = 0;
        if (v105)
        {
          if (*(_DWORD *)v105 == 2)
            WTF::StringImpl::destroy(v105, a2);
          else
            *(_DWORD *)v105 -= 2;
        }
        v106 = *(WTF::StringImpl **)(v5 + 384);
        *(_QWORD *)(v5 + 384) = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, a2);
          else
            *(_DWORD *)v106 -= 2;
        }
        *(_DWORD *)(v5 + 392) = 0;
        v94 = v240;
        v240 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            goto LABEL_227;
          *(_DWORD *)v94 -= 2;
        }
        goto LABEL_265;
      }
      v80 = *(_DWORD *)(v5 + 392);
      v46 = v80 == 0;
      v81 = v80 != 0;
      v82 = ", ";
      if (v46)
        v82 = "";
      v239 = v42;
      v240 = (WTF::StringImpl *)v82;
      LODWORD(v241[0]) = 2 * v81;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v227, (uint64_t)&v240, (uint64_t *)&v239);
      v83 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v233);
      v84 = v83;
      v85 = a2;
      v34 = v221;
      if (v233)
        v86 = (WTF::StringImpl **)&v233[2 * *((unsigned int *)v233 - 1)];
      else
        v86 = 0;
      if (v86 != v83)
      {
        do
        {
          v240 = (WTF::StringImpl *)"; ";
          LODWORD(v241[0]) = 2;
          v239 = *v84;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v227, (uint64_t)&v240, (uint64_t *)&v239);
          v87 = v84[1];
          if (v87)
          {
            LOBYTE(v239) = 61;
            v240 = v87;
            WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v227, (char *)&v239, (uint64_t *)&v240);
          }
          v84 += 2;
          if (v84 == (WTF::StringImpl **)v85)
          {
            v84 = (WTF::StringImpl **)v85;
          }
          else
          {
            while ((unint64_t)*v84 + 1 <= 1)
            {
              v84 += 2;
              if (v84 == (WTF::StringImpl **)v85)
              {
                v84 = (WTF::StringImpl **)v85;
                break;
              }
            }
          }
        }
        while (v84 != v86);
      }
      v75 = v73;
      v37 = v222;
LABEL_229:
      if (v75 == *(_DWORD *)(v5 + 372))
      {
        if (v42)
        {
          v95 = *((_DWORD *)v42 + 1);
          *(_DWORD *)v42 += 2;
          if ((v95 & 0x80000000) == 0)
          {
            v96 = (v95 + 31);
            if (!__OFADD__(v95, 31))
            {
              v97 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
              goto LABEL_234;
            }
          }
          v240 = 0;
LABEL_665:
          __break(0xC471u);
          JUMPOUT(0x1955C355CLL);
        }
        v97 = 1;
        v96 = 31;
LABEL_234:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v96, v97, (int8x16_t *)"Received unexpected extension: ", 0x1Fu, (uint64_t)v42, &v240);
        v98 = v240;
        if (!v240)
          goto LABEL_665;
        *(_DWORD *)v240 += 2;
        v99 = *(WTF::StringImpl **)(v5 + 400);
        *(_QWORD *)(v5 + 400) = v98;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
            WTF::StringImpl::destroy(v99, a2);
          else
            *(_DWORD *)v99 -= 2;
        }
        v100 = *(WTF::StringImpl **)v227;
        *(_QWORD *)v227 = 0;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2)
            WTF::StringImpl::destroy(v100, a2);
          else
            *(_DWORD *)v100 -= 2;
        }
        v101 = *(WTF::StringImpl **)(v5 + 384);
        *(_QWORD *)(v5 + 384) = 0;
        if (v101)
        {
          if (*(_DWORD *)v101 == 2)
            WTF::StringImpl::destroy(v101, a2);
          else
            *(_DWORD *)v101 -= 2;
        }
        *(_DWORD *)(v5 + 392) = 0;
        v102 = v240;
        v240 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 != 2)
          {
            *(_DWORD *)v102 -= 2;
            goto LABEL_247;
          }
          WTF::StringImpl::destroy(v102, a2);
          if (!v42)
            goto LABEL_265;
        }
        else
        {
LABEL_247:
          if (!v42)
            goto LABEL_265;
        }
        if (*(_DWORD *)v42 == 2)
        {
          v94 = v42;
          goto LABEL_227;
        }
        *(_DWORD *)v42 -= 2;
LABEL_265:
        v92 = 0;
      }
      else
      {
        v92 = 1;
      }
LABEL_216:
      v93 = v233;
      if (v233)
      {
        v107 = *((unsigned int *)v233 - 1);
        if ((_DWORD)v107)
        {
          v108 = (WTF::StringImpl **)v233;
          do
          {
            v109 = *v108;
            if (*v108 != (WTF::StringImpl *)-1)
            {
              v110 = v108[1];
              v108[1] = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                {
                  WTF::StringImpl::destroy(v110, a2);
                  v109 = *v108;
                }
                else
                {
                  *(_DWORD *)v110 -= 2;
                }
              }
              *v108 = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                  WTF::StringImpl::destroy(v109, a2);
                else
                  *(_DWORD *)v109 -= 2;
              }
            }
            v108 += 2;
            --v107;
          }
          while (v107);
        }
        WTF::fastFree((WTF *)(v93 - 2), a2);
        v37 = v222;
        if (v42)
        {
LABEL_218:
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, a2);
          else
            *(_DWORD *)v42 -= 2;
        }
      }
      else if (v42)
      {
        goto LABEL_218;
      }
      if ((v92 & 1) == 0)
      {
        v112 = 0;
        goto LABEL_310;
      }
    }
    v112 = v234 == (unsigned __int8 *)v235;
LABEL_310:
    v113 = v236;
    v236 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
        WTF::StringImpl::destroy(v113, a2);
      else
        *(_DWORD *)v113 -= 2;
    }
    HTTPHeaderName = (unint64_t)v237;
    v237 = 0;
    if (HTTPHeaderName)
    {
      if (*(_DWORD *)HTTPHeaderName == 1)
        HTTPHeaderName = WTF::fastFree((WTF *)HTTPHeaderName, a2);
      else
        --*(_DWORD *)HTTPHeaderName;
    }
    v111 = v228;
    if (!v112)
      goto LABEL_401;
    v36 = 1;
LABEL_303:
    if (v35 == v111)
      goto LABEL_538;
    ++v34;
    v35 += ~v111;
  }
  while (v35);
  v151 = v230;
  v230 = 0;
  if (!v151)
  {
LABEL_415:
    v152 = v226;
    if (!v34)
      goto LABEL_416;
    goto LABEL_410;
  }
  v152 = v226;
  if (*(_DWORD *)v151 == 2)
  {
    WTF::StringImpl::destroy(v151, a2);
    if (!v34)
      goto LABEL_416;
LABEL_410:
    WebCore::ResourceResponse::platformLazyInit(v152, 2);
    v153 = *(unsigned int *)(v5 + 172);
    if ((_DWORD)v153)
    {
      v154 = 0;
      v155 = (const WTF::StringImpl **)(*(_QWORD *)(v5 + 160) + 8);
      while (*((_WORD *)v155 - 4) != 71)
      {
        ++v154;
        v155 += 2;
        if (v153 == v154)
          goto LABEL_414;
      }
      if (v154 >= v153)
      {
        __break(0xC471u);
        JUMPOUT(0x1955C3564);
      }
      v156 = *v155;
      if (*v155)
        *(_DWORD *)v156 += 2;
    }
    else
    {
LABEL_414:
      v156 = 0;
    }
    WebCore::ResourceResponse::platformLazyInit(v152, 2);
    v158 = *(unsigned int *)(v5 + 172);
    if ((_DWORD)v158)
    {
      v159 = 0;
      v160 = (_QWORD *)(*(_QWORD *)(v5 + 160) + 8);
      while (*((_WORD *)v160 - 4) != 84)
      {
        ++v159;
        v160 += 2;
        if (v158 == v159)
          goto LABEL_424;
      }
      if (v159 >= v158)
      {
        __break(0xC471u);
        JUMPOUT(0x1955C356CLL);
      }
      v161 = *v160;
      if (*v160)
        *(_DWORD *)v161 += 2;
    }
    else
    {
LABEL_424:
      v161 = 0;
    }
    WebCore::ResourceResponse::platformLazyInit(v152, 2);
    v162 = *(unsigned int *)(v5 + 172);
    if ((_DWORD)v162)
    {
      v163 = 0;
      v164 = (_QWORD *)(*(_QWORD *)(v5 + 160) + 8);
      while (*((_WORD *)v164 - 4) != 17)
      {
        ++v163;
        v164 += 2;
        if (v162 == v163)
          goto LABEL_432;
      }
      if (v163 >= v162)
      {
        __break(0xC471u);
        JUMPOUT(0x1955C3574);
      }
      v165 = *v164;
      if (*v164)
        *(_DWORD *)v165 += 2;
    }
    else
    {
LABEL_432:
      v165 = 0;
    }
    WebCore::ResourceResponse::platformLazyInit(v152, 2);
    v167 = *(unsigned int *)(v5 + 172);
    if ((_DWORD)v167)
    {
      v168 = 0;
      v169 = (WTF::StringImpl **)(*(_QWORD *)(v5 + 160) + 8);
      while (*((_WORD *)v169 - 4) != 68)
      {
        ++v168;
        v169 += 2;
        if (v167 == v168)
          goto LABEL_440;
      }
      if (v168 >= v167)
      {
        __break(0xC471u);
        JUMPOUT(0x1955C357CLL);
      }
      v170 = *v169;
      if (*v169)
        *(_DWORD *)v170 += 2;
    }
    else
    {
LABEL_440:
      v170 = 0;
    }
    if (!v161 || !v165)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v174 = *(WTF::StringImpl **)(v5 + 336);
      *(_QWORD *)(v5 + 336) = v240;
      if (v174)
      {
        if (*(_DWORD *)v174 != 2)
        {
          v173 = 0;
          *(_DWORD *)v174 -= 2;
          goto LABEL_454;
        }
        WTF::StringImpl::destroy(v174, v171);
      }
      v173 = 0;
LABEL_454:
      if (!v170)
      {
LABEL_457:
        if (!v165)
          goto LABEL_460;
        goto LABEL_458;
      }
LABEL_455:
      if (*(_DWORD *)v170 == 2)
      {
        WTF::StringImpl::destroy(v170, v171);
        if (!v165)
          goto LABEL_460;
        goto LABEL_458;
      }
      *(_DWORD *)v170 -= 2;
      goto LABEL_457;
    }
    if (v170)
    {
      if (*(_DWORD *)(v161 + 4) != 9)
        goto LABEL_448;
      v176 = *(_QWORD *)(v161 + 8);
      if ((*(_BYTE *)(v161 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v176 & 0xDF) == 0x57
          && (*(_BYTE *)(v176 + 1) & 0xDF) == 0x45
          && (*(_BYTE *)(v176 + 2) & 0xDF) == 0x42
          && (*(_BYTE *)(v176 + 3) & 0xDF) == 0x53
          && (*(_BYTE *)(v176 + 4) & 0xDF) == 0x4F
          && (*(_BYTE *)(v176 + 5) & 0xDF) == 0x43
          && (*(_BYTE *)(v176 + 6) & 0xDF) == 0x4B
          && (*(_BYTE *)(v176 + 7) & 0xDF) == 0x45)
        {
          v177 = *(unsigned __int8 *)(v176 + 8);
          goto LABEL_493;
        }
      }
      else if ((*(_WORD *)v176 & 0xFFDF) == 0x57
             && (*(_WORD *)(v176 + 2) & 0xFFDF) == 0x45
             && (*(_WORD *)(v176 + 4) & 0xFFDF) == 0x42
             && (*(_WORD *)(v176 + 6) & 0xFFDF) == 0x53
             && (*(_WORD *)(v176 + 8) & 0xFFDF) == 0x4F
             && (*(_WORD *)(v176 + 10) & 0xFFDF) == 0x43
             && (*(_WORD *)(v176 + 12) & 0xFFDF) == 0x4B
             && (*(_WORD *)(v176 + 14) & 0xFFDF) == 0x45)
      {
        v177 = *(unsigned __int16 *)(v176 + 16);
LABEL_493:
        if ((v177 & 0xFFFFFFDF) != 0x54 || *(_DWORD *)(v165 + 4) != 7)
          goto LABEL_448;
        v191 = *(_QWORD *)(v165 + 8);
        if ((*(_BYTE *)(v165 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v191 & 0xDF) != 0x55
            || (*(_BYTE *)(v191 + 1) & 0xDF) != 0x50
            || (*(_BYTE *)(v191 + 2) & 0xDF) != 0x47
            || (*(_BYTE *)(v191 + 3) & 0xDF) != 0x52
            || (*(_BYTE *)(v191 + 4) & 0xDF) != 0x41
            || (*(_BYTE *)(v191 + 5) & 0xDF) != 0x44)
          {
            goto LABEL_448;
          }
          v192 = *(unsigned __int8 *)(v191 + 6);
        }
        else
        {
          if ((*(_WORD *)v191 & 0xFFDF) != 0x55
            || (*(_WORD *)(v191 + 2) & 0xFFDF) != 0x50
            || (*(_WORD *)(v191 + 4) & 0xFFDF) != 0x47
            || (*(_WORD *)(v191 + 6) & 0xFFDF) != 0x52
            || (*(_WORD *)(v191 + 8) & 0xFFDF) != 0x41
            || (*(_WORD *)(v191 + 10) & 0xFFDF) != 0x44)
          {
            goto LABEL_448;
          }
          v192 = *(unsigned __int16 *)(v191 + 12);
        }
        if ((v192 & 0xFFFFFFDF) != 0x45)
          goto LABEL_448;
        if ((WTF::equal(v170, *(const WTF::StringImpl **)(v5 + 352), v166) & 1) == 0)
          goto LABEL_572;
        if (!v156)
        {
          v173 = 1;
          goto LABEL_455;
        }
        v193 = *(_QWORD *)(v5 + 40);
        if (!v193 || !*(_DWORD *)(v193 + 4))
        {
LABEL_572:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v194 = *(WTF::StringImpl **)(v5 + 336);
          *(_QWORD *)(v5 + 336) = v240;
          if (v194)
          {
            if (*(_DWORD *)v194 != 2)
            {
              v173 = 0;
              *(_DWORD *)v194 -= 2;
              goto LABEL_455;
            }
            WTF::StringImpl::destroy(v194, v171);
          }
          v173 = 0;
          goto LABEL_455;
        }
        WTF::String::split();
        if (HIDWORD(v241[0]))
        {
          v199 = 0;
          while ((WTF::equal(*((WTF **)v240 + v199), v156, v198) & 1) == 0)
          {
            if (++v199 >= (unint64_t)HIDWORD(v241[0]))
              goto LABEL_591;
          }
          if (HIDWORD(v241[0]))
          {
            v218 = v240;
            v219 = 8 * HIDWORD(v241[0]);
            do
            {
              v220 = *(WTF::StringImpl **)v218;
              *(_QWORD *)v218 = 0;
              if (v220)
              {
                if (*(_DWORD *)v220 == 2)
                  WTF::StringImpl::destroy(v220, v171);
                else
                  *(_DWORD *)v220 -= 2;
              }
              v218 = (WTF::StringImpl *)((char *)v218 + 8);
              v219 -= 8;
            }
            while (v219);
          }
          v205 = v240;
          if (v240)
          {
            v240 = 0;
            LODWORD(v241[0]) = 0;
            WTF::fastFree(v205, v171);
          }
          v173 = 1;
        }
        else
        {
LABEL_591:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v200 = *(WTF::StringImpl **)(v5 + 336);
          *(_QWORD *)(v5 + 336) = v234;
          if (v200)
          {
            if (*(_DWORD *)v200 == 2)
              WTF::StringImpl::destroy(v200, v171);
            else
              *(_DWORD *)v200 -= 2;
          }
          if (HIDWORD(v241[0]))
          {
            v215 = v240;
            v216 = 8 * HIDWORD(v241[0]);
            do
            {
              v217 = *(WTF::StringImpl **)v215;
              *(_QWORD *)v215 = 0;
              if (v217)
              {
                if (*(_DWORD *)v217 == 2)
                  WTF::StringImpl::destroy(v217, v171);
                else
                  *(_DWORD *)v217 -= 2;
              }
              v215 = (WTF::StringImpl *)((char *)v215 + 8);
              v216 -= 8;
            }
            while (v216);
          }
          v201 = v240;
          if (v240)
          {
            v240 = 0;
            LODWORD(v241[0]) = 0;
            WTF::fastFree(v201, v171);
          }
          v173 = 0;
        }
        goto LABEL_454;
      }
LABEL_448:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v172 = *(WTF::StringImpl **)(v5 + 336);
      *(_QWORD *)(v5 + 336) = v240;
      if (v172)
      {
        if (*(_DWORD *)v172 != 2)
        {
          v173 = 0;
          *(_DWORD *)v172 -= 2;
          goto LABEL_455;
        }
        WTF::StringImpl::destroy(v172, v171);
      }
      v173 = 0;
      goto LABEL_455;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v175 = *(WTF::StringImpl **)(v5 + 336);
    *(_QWORD *)(v5 + 336) = v240;
    if (v175)
    {
      if (*(_DWORD *)v175 != 2)
      {
        v173 = 0;
        *(_DWORD *)v175 -= 2;
        goto LABEL_458;
      }
      WTF::StringImpl::destroy(v175, v171);
    }
    v173 = 0;
LABEL_458:
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v165, v171);
    else
      *(_DWORD *)v165 -= 2;
LABEL_460:
    if (v161)
    {
      if (*(_DWORD *)v161 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v161, v171);
        if (v156)
        {
LABEL_464:
          if (*(_DWORD *)v156 == 2)
            WTF::StringImpl::destroy(v156, v171);
          else
            *(_DWORD *)v156 -= 2;
        }
LABEL_466:
        v3 = v34 - (unsigned __int8 *)__src;
        if (v173)
          v157 = 3;
        else
          v157 = 2;
        goto LABEL_469;
      }
      *(_DWORD *)v161 -= 2;
    }
    if (v156)
      goto LABEL_464;
    goto LABEL_466;
  }
  *(_DWORD *)v151 -= 2;
  if (v34)
    goto LABEL_410;
LABEL_416:
  v157 = 2;
LABEL_469:
  *(_DWORD *)(v5 + 52) = v157;
  return v3;
}

uint64_t WebCore::WebSocketHandshake::mode(WebCore::WebSocketHandshake *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t WebCore::WebSocketHandshake::failureReason@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 336);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

void WebCore::WebSocketHandshake::serverWebSocketProtocol(WebCore::WebSocketHandshake *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 80, 2);
  v4 = *((unsigned int *)this + 43);
  if (!(_DWORD)v4)
  {
LABEL_5:
    v7 = 0;
LABEL_9:
    *a2 = v7;
    return;
  }
  v5 = 0;
  v6 = (_DWORD **)(*((_QWORD *)this + 20) + 8);
  while (*((_WORD *)v6 - 4) != 71)
  {
    ++v5;
    v6 += 2;
    if (v4 == v5)
      goto LABEL_5;
  }
  if (v5 < v4)
  {
    v7 = *v6;
    if (*v6)
      *v7 += 2;
    goto LABEL_9;
  }
  __break(0xC471u);
}

void WebCore::WebSocketHandshake::serverSetCookie(WebCore::WebSocketHandshake *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 80, 2);
  v4 = *((unsigned int *)this + 43);
  if (!(_DWORD)v4)
  {
LABEL_5:
    v7 = 0;
LABEL_9:
    *a2 = v7;
    return;
  }
  v5 = 0;
  v6 = (_DWORD **)(*((_QWORD *)this + 20) + 8);
  while (*((_WORD *)v6 - 4) != 77)
  {
    ++v5;
    v6 += 2;
    if (v4 == v5)
      goto LABEL_5;
  }
  if (v5 < v4)
  {
    v7 = *v6;
    if (*v6)
      *v7 += 2;
    goto LABEL_9;
  }
  __break(0xC471u);
}

uint64_t WebCore::WebSocketHandshake::acceptedExtensions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD **v3;
  _DWORD *v4;

  if (*(_DWORD *)(this + 392))
  {
    v3 = (_DWORD **)(this + 376);
    v4 = *(_DWORD **)(this + 376);
    if (v4 || (this = WTF::StringBuilder::reifyString((WTF::StringBuilder *)(this + 376)), (v4 = *v3) != 0))
      *v4 += 2;
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return this;
}

uint64_t WebCore::WebSocketHandshake::serverHandshakeResponse(WebCore::WebSocketHandshake *this)
{
  return (uint64_t)this + 80;
}

char *WebCore::WebSocketHandshake::addExtensionProcessor(uint64_t a1, _QWORD **a2, const WTF::StringImpl *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  char **v12;
  char *result;
  char *v14;
  _QWORD *v15;

  v4 = *a2;
  *a2 = 0;
  v15 = v4;
  v5 = *(unsigned int *)(a1 + 372);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 360);
    v7 = 8 * v5;
    while (1)
    {
      v8 = *(WTF **)(*(_QWORD *)v6 + 8);
      if (v8)
        *(_DWORD *)v8 += 2;
      v9 = (const WTF::StringImpl *)v4[1];
      if (v9)
      {
        *(_DWORD *)v9 += 2;
        v11 = WTF::equal(v8, v9, a3);
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v10);
        else
          *(_DWORD *)v9 -= 2;
      }
      else
      {
        v11 = WTF::equal(v8, 0, a3);
      }
      if (!v8)
        goto LABEL_11;
      if (*(_DWORD *)v8 != 2)
        break;
      WTF::StringImpl::destroy(v8, v10);
      if (v11)
      {
LABEL_18:
        v15 = 0;
        return (char *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
      }
LABEL_12:
      v6 += 8;
      v7 -= 8;
      if (!v7)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 372);
        goto LABEL_19;
      }
    }
    *(_DWORD *)v8 -= 2;
LABEL_11:
    if (v11)
      goto LABEL_18;
    goto LABEL_12;
  }
LABEL_19:
  v12 = (char **)(a1 + 360);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 368))
  {
    result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v5 + 1, (unint64_t)&v15);
    v5 = *(unsigned int *)(a1 + 372);
    v14 = (char *)(*(_QWORD *)(a1 + 360) + 8 * v5);
    v4 = *(_QWORD **)result;
  }
  else
  {
    v14 = &(*v12)[8 * v5];
    result = (char *)&v15;
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)v14 = v4;
  *(_DWORD *)(a1 + 372) = v5 + 1;
  v4 = v15;
  v15 = 0;
  if (v4)
    return (char *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::WorkerThreadableWebSocketChannel(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4, uint64_t a5)
{
  uint64_t IdentifierInternal;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  char v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  int64x2_t v27;
  char v28;
  WebCore::WorkerThreadableWebSocketChannel::Bridge *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v34;
  __int128 v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v53;
  void *v54;
  void *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  WTF::StringImpl *v61;
  _BYTE v62[40];
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 16) = 1;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = &off_1E336E770;
  *(_QWORD *)(a1 + 8) = IdentifierInternal;
  ++*(_DWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 24) = a2;
  v11 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)v11 = 1;
  v12 = *(_QWORD *)(a2 + 104);
  if (v12)
    goto LABEL_53;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a2 + 96;
  v56 = *(unsigned int **)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v12;
  if (!v56)
    goto LABEL_53;
  do
  {
    v57 = __ldaxr(v56);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, v56));
  if (!v58)
  {
    atomic_store(1u, v56);
    WTF::fastFree((WTF *)v56, v55);
  }
  v12 = *(_QWORD *)(a2 + 104);
  if (v12)
  {
LABEL_53:
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
  }
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = 0;
  *(_WORD *)(v11 + 32) = 256;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_QWORD *)(v11 + 72) = 1;
  *(_BYTE *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(a1 + 32) = v11;
  do
    v14 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v14 + 1, (unsigned int *)v11));
  v15 = *(_QWORD *)(a1 + 24);
  ++*(_DWORD *)(v15 + 312);
  v16 = (unsigned int *)(a5 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v11;
  *(_QWORD *)(v18 + 16) = v15;
  *(_QWORD *)(v18 + 24) = *(_QWORD *)(*(_QWORD *)(v15 + 360) + 128);
  v19 = *a4;
  if (*a4)
    *v19 += 2;
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = a5;
  *(_QWORD *)(a1 + 40) = v18;
  do
    v20 = __ldaxr(v16);
  while (__stlxr(v20 + 1, v16));
  *(_QWORD *)(a1 + 48) = a5;
  v61 = 0;
  WTF::URL::invalidate((WTF::URL *)&v61);
  v21 = v61;
  if (v61)
    *(_DWORD *)v61 += 2;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 56) = v21;
  v22 = *(_OWORD *)&v62[16];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v62;
  *(_OWORD *)(a1 + 80) = v22;
  WTF::URL::invalidate((WTF::URL *)(a1 + 96));
  *(_QWORD *)(a1 + 136) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 144) = v59;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 200) = 0x10000;
  v24 = *(_BYTE *)(a1 + 204) & 0x80 | 4;
  *(_BYTE *)(a1 + 204) = v24;
  *(_QWORD *)(a1 + 208) = 0;
  v25 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v25 += 2;
    v24 = *(_BYTE *)(a1 + 204);
  }
  *(_QWORD *)(a1 + 216) = v25;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a1 + 240) & 0xE0 | 5;
  *(_BYTE *)(a1 + 204) = v24 | 2;
  v26 = v61;
  v61 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 256));
  *(_BYTE *)(a1 + 384) = 0;
  *(_WORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_BYTE *)(a1 + 376) = 0;
  v27 = vdupq_n_s64(0x7FF8000000000000uLL);
  v28 = *(_BYTE *)(a1 + 394);
  *(int64x2_t *)(a1 + 400) = v27;
  *(int64x2_t *)(a1 + 416) = v27;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0x8000000000000000;
  *(_QWORD *)(a1 + 456) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 464) = v27;
  *(_BYTE *)(a1 + 480) &= 0xF0u;
  *(_WORD *)(a1 + 488) &= 0xC000u;
  *(_BYTE *)(a1 + 490) = *(_BYTE *)(a1 + 490) & 0xF8 | 2;
  *(_QWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 394) = v28 & 0xC0 | 5;
  *(_QWORD *)(a1 + 512) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v29 = *(WebCore::WorkerThreadableWebSocketChannel::Bridge **)(a1 + 40);
  *(_BYTE *)(*((_QWORD *)v29 + 1) + 33) = 0;
  ++*(_DWORD *)v29;
  v30 = *((_QWORD *)v29 + 3);
  v31 = *(WTF::StringImpl **)(a2 + 360);
  v32 = *((_QWORD *)v31 + 1);
  if (__ldaxr((unsigned __int8 *)v32))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v32))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v32);
LABEL_22:
  ++*(_QWORD *)(v32 + 8);
  v34 = __ldxr((unsigned __int8 *)v32);
  if (v34 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v32))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_27:
  v61 = v31;
  v35 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)&v62[8] = *(_OWORD *)(a2 + 224);
  *(_OWORD *)&v62[24] = v35;
  v36 = (unsigned int *)*((_QWORD *)v29 + 1);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 + 1, v36));
  *(_QWORD *)&v63 = v36;
  WTF::String::isolatedCopy();
  v38 = *((_QWORD *)v29 + 6);
  v39 = (unsigned int *)(v38 + 8);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
  v64 = v38;
  v41 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v41 = off_1E336EAF8;
  *(_QWORD *)(v41 + 16) = v61;
  v42 = *(_OWORD *)&v62[24];
  *(_OWORD *)(v41 + 32) = *(_OWORD *)&v62[8];
  *(_OWORD *)(v41 + 48) = v42;
  v43 = v63;
  v61 = 0;
  v63 = 0uLL;
  *(_OWORD *)(v41 + 64) = v43;
  v44 = v64;
  v64 = 0;
  *(_QWORD *)(v41 + 80) = v44;
  v59 = v41;
  v60 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 56))(v30, &v59);
  v46 = v59;
  v59 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  WebCore::WorkerThreadableWebSocketChannel::Bridge::initialize(WebCore::WorkerGlobalScope &)::$_0::~$_0((uint64_t *)&v61, v45);
  v47 = (WTF::StringImpl *)*((_QWORD *)v29 + 2);
  if (v47)
  {
    v48 = *(_QWORD *)(*((_QWORD *)v47 + 45) + 48);
    v49 = 1;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)v29 + 1) + 33))
        break;
      if ((v49 & 1) == 0)
        break;
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      v47 = (WTF::StringImpl *)*((_QWORD *)v29 + 2);
    }
    while (v47);
  }
  v50 = *((_QWORD *)v29 + 1);
  v51 = *(_QWORD *)(v50 + 24);
  *((_QWORD *)v29 + 5) = v51;
  if (!v51)
    *(_BYTE *)(v50 + 32) = 1;
  if (*(_DWORD *)v29 == 1)
  {
    WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(v29, v47);
    WTF::fastFree(v53, v54);
  }
  else
  {
    --*(_DWORD *)v29;
  }
  return a1;
}

void WebCore::WorkerThreadableWebSocketChannel::~WorkerThreadableWebSocketChannel(WebCore::WorkerThreadableWebSocketChannel *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  WebCore::ResourceResponseBase *v9;
  const void *v10;
  void *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  WebCore::WorkerThreadableWebSocketChannel::Bridge *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _DWORD *v18;
  WTF *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  void *v25;
  _QWORD *v26;
  char v27;

  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (v3)
  {
    *(_QWORD *)(v3[1] + 16) = 0;
    v4 = v3[5];
    if (v4)
    {
      v5 = v3[3];
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = &off_1E336EC38;
      v6[1] = v4;
      v26 = v6;
      v27 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 56))(v5, &v26);
      v7 = v26;
      v26 = 0;
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      v3[5] = 0;
    }
    v8 = (_DWORD *)v3[2];
    v3[2] = 0;
    if (v8)
    {
      if (v8[78] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8);
      else
        --v8[78];
    }
  }
  v9 = (WebCore::WorkerThreadableWebSocketChannel *)((char *)this + 256);
  v10 = (const void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v10)
  {
    CFRelease(v10);
    v9 = (WebCore::WorkerThreadableWebSocketChannel *)((char *)this + 256);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v9, a2);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::WorkerThreadableWebSocketChannel *)((char *)this + 56), v11);
  v13 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    v21 = v13 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  v14 = (WebCore::WorkerThreadableWebSocketChannel::Bridge *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(v14, v12);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v15, v12);
      WTF::fastFree(v24, v25);
    }
  }
  v18 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    if (v18[78] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 40))(v18);
    else
      --v18[78];
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WorkerThreadableWebSocketChannel::~WorkerThreadableWebSocketChannel(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::connect(WebCore::WorkerThreadableWebSocketChannel *this, const WTF::URL *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 40))
    {
      v4 = *(_QWORD *)(v3 + 24);
      v8 = *(_QWORD *)(v3 + 40);
      WTF::URL::isolatedCopy();
      WTF::String::isolatedCopy();
      v5 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v5 = &off_1E336EB20;
      *(_QWORD *)(v5 + 8) = v8;
      *(_QWORD *)(v5 + 16) = v9;
      *(_DWORD *)(v5 + 24) = v10;
      *(_OWORD *)(v5 + 28) = v11;
      *(_QWORD *)(v5 + 44) = v12;
      *(_DWORD *)(v5 + 52) = v13;
      *(_QWORD *)(v5 + 56) = v14;
      v15 = v5;
      v16 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 56))(v4, &v15);
      v6 = v15;
      v15 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return 1;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::subprotocol@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  if (*(_DWORD *)(*(_QWORD *)(this + 32) + 52))
    return WTF::String::String();
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::extensions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  if (*(_DWORD *)(*(_QWORD *)(this + 32) + 68))
    return WTF::String::String();
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::send(uint64_t a1, uint64_t *a2)
{
  WebCore::WorkerThreadableWebSocketChannel::Bridge *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  char v17;

  v2 = *(WebCore::WorkerThreadableWebSocketChannel::Bridge **)(a1 + 40);
  if (!v2)
    return 1;
  v3 = *((_QWORD *)v2 + 5);
  if (!v3)
    return 1;
  *(_BYTE *)(*((_QWORD *)v2 + 1) + 33) = 0;
  v4 = *((_QWORD *)v2 + 3);
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E336EB48;
  v6[1] = v3;
  v6[2] = v5;
  v16 = v6;
  v17 = 0;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 56))(v4, &v16);
  v7 = v16;
  v16 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v8 = (*(_DWORD *)v2)++;
  v9 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
  if (v9)
  {
    v10 = *(_QWORD *)(*((_QWORD *)v9 + 45) + 48);
    v11 = 1;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)v2 + 1) + 33))
        break;
      if ((v11 & 1) == 0)
        break;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v9 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    }
    while (v9);
    v8 = *(_DWORD *)v2 - 1;
  }
  v12 = *(unsigned int *)(*((_QWORD *)v2 + 1) + 72);
  if (v8)
  {
    *(_DWORD *)v2 = v8;
  }
  else
  {
    WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(v2, v9);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::send(WebCore::WorkerThreadableWebSocketChannel *this, const JSC::ArrayBuffer *a2, unsigned int a3, WTF *a4)
{
  WebCore::WorkerThreadableWebSocketChannel::Bridge *v4;
  int v5;
  size_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v4 = (WebCore::WorkerThreadableWebSocketChannel::Bridge *)*((_QWORD *)this + 5);
  if (!v4 || !*((_QWORD *)v4 + 5))
    return 1;
  v5 = (int)a4;
  v8 = a4;
  if ((_DWORD)a4)
    v9 = (void *)WTF::fastMalloc((WTF *)a4);
  else
    v9 = 0;
  LODWORD(v11) = *((unsigned __int8 *)a2 + 64);
  if (*((_BYTE *)a2 + 64))
    goto LABEL_31;
LABEL_8:
  if (*((_QWORD *)a2 + 6))
  {
    while (1)
    {
      v12 = *((_QWORD *)a2 + 2);
      if (v12)
      {
        v13 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v13)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
            v12 = (v12 & 0x3FFFFFFFFLL) + v13;
        }
      }
      if ((_DWORD)v11 && (v26 = *((_QWORD *)a2 + 4)) != 0)
        v11 = *(_QWORD *)(v26 + 32);
      else
        v11 = *((_QWORD *)a2 + 6);
      if (v11 >= a3)
      {
        v11 -= a3;
        if (v11 >= v8)
          break;
      }
      __break(1u);
LABEL_31:
      v25 = *((_QWORD *)a2 + 4);
      if (!v25)
        goto LABEL_8;
      if (!*(_QWORD *)(v25 + 32))
        goto LABEL_18;
    }
    memcpy(v9, (const void *)(v12 + a3), v8);
  }
LABEL_18:
  *(_BYTE *)(*((_QWORD *)v4 + 1) + 33) = 0;
  v14 = *((_QWORD *)v4 + 3);
  v15 = *((_QWORD *)v4 + 5);
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v16 = &off_1E336EB70;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 16) = v9;
  *(_DWORD *)(v16 + 24) = v5;
  *(_DWORD *)(v16 + 28) = v5;
  v27 = v16;
  v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 56))(v14, &v27);
  v17 = v27;
  v27 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (*(_DWORD *)v4)++;
  v19 = (WTF::StringImpl *)*((_QWORD *)v4 + 2);
  if (v19)
  {
    v20 = *(_QWORD *)(*((_QWORD *)v19 + 45) + 48);
    v21 = 1;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)v4 + 1) + 33))
        break;
      if ((v21 & 1) == 0)
        break;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v19 = (WTF::StringImpl *)*((_QWORD *)v4 + 2);
    }
    while (v19);
    v18 = *(_DWORD *)v4 - 1;
  }
  v10 = *(unsigned int *)(*((_QWORD *)v4 + 1) + 72);
  if (v18)
  {
    *(_DWORD *)v4 = v18;
  }
  else
  {
    WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(v4, v19);
    WTF::fastFree(v23, v24);
  }
  return v10;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::send(WebCore::WorkerThreadableWebSocketChannel *this, WebCore::Blob *a2)
{
  WebCore::WorkerThreadableWebSocketChannel::Bridge *v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::ThreadableBlobRegistry *v7;
  const WTF::URL *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29;
  __int128 v30;
  uint64_t v31;
  char v32;

  v2 = (WebCore::WorkerThreadableWebSocketChannel::Bridge *)*((_QWORD *)this + 5);
  if (!v2)
    return 1;
  v3 = *((_QWORD *)v2 + 5);
  if (!v3)
    return 1;
  *(_BYTE *)(*((_QWORD *)v2 + 1) + 33) = 0;
  v5 = *((_QWORD *)v2 + 3);
  v23 = v3;
  v7 = (WebCore::Blob *)((char *)a2 + 80);
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v6)
    *(_DWORD *)v6 += 2;
  v22 = v6;
  WTF::URL::isolatedCopy();
  WTF::String::isolatedCopy();
  if (*((_BYTE *)a2 + 64))
  {
    v9 = *((_QWORD *)a2 + 7);
  }
  else
  {
    v11 = WebCore::ThreadableBlobRegistry::blobSize(v7, v8);
    v9 = v11 & ~(v11 >> 63);
    *((_QWORD *)a2 + 7) = v9;
    *((_BYTE *)a2 + 64) = 1;
  }
  *(_QWORD *)&v30 = v9;
  *((_QWORD *)&v30 + 1) = *((_QWORD *)a2 + 9);
  v12 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v12 = &off_1E336EB98;
  *(_QWORD *)(v12 + 8) = v23;
  *(_QWORD *)(v12 + 16) = v24;
  *(_DWORD *)(v12 + 24) = v25;
  *(_OWORD *)(v12 + 28) = v26;
  *(_QWORD *)(v12 + 44) = v27;
  *(_DWORD *)(v12 + 52) = v28;
  *(_QWORD *)(v12 + 56) = v29;
  *(_OWORD *)(v12 + 64) = v30;
  v31 = v12;
  v32 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, &v31);
  v14 = v31;
  v31 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v13);
    else
      *(_DWORD *)v22 -= 2;
  }
  v15 = (*(_DWORD *)v2)++;
  v16 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
  if (v16)
  {
    v17 = *(_QWORD *)(*((_QWORD *)v16 + 45) + 48);
    v18 = 1;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)v2 + 1) + 33))
        break;
      if ((v18 & 1) == 0)
        break;
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      v16 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
    }
    while (v16);
    v15 = *(_DWORD *)v2 - 1;
  }
  v10 = *(unsigned int *)(*((_QWORD *)v2 + 1) + 72);
  if (v15)
  {
    *(_DWORD *)v2 = v15;
  }
  else
  {
    WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(v2, v16);
    WTF::fastFree(v20, v21);
  }
  return v10;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::bufferedAmount(WebCore::WorkerThreadableWebSocketChannel *this)
{
  WebCore::WorkerThreadableWebSocketChannel::Bridge *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  WTF *v12;
  void *v13;
  _QWORD *v14;
  char v15;

  v1 = (WebCore::WorkerThreadableWebSocketChannel::Bridge *)*((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *((_QWORD *)v1 + 5);
  if (!v2)
    return 0;
  *(_BYTE *)(*((_QWORD *)v1 + 1) + 33) = 0;
  v3 = *((_QWORD *)v1 + 3);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E336EBC0;
  v4[1] = v2;
  v14 = v4;
  v15 = 0;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 56))(v3, &v14);
  v5 = v14;
  v14 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  v6 = (*(_DWORD *)v1)++;
  v7 = (WTF::StringImpl *)*((_QWORD *)v1 + 2);
  if (v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)v7 + 45) + 48);
    v9 = 1;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)v1 + 1) + 33))
        break;
      if ((v9 & 1) == 0)
        break;
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v7 = (WTF::StringImpl *)*((_QWORD *)v1 + 2);
    }
    while (v7);
    v6 = *(_DWORD *)v1 - 1;
  }
  v10 = *(unsigned int *)(*((_QWORD *)v1 + 1) + 76);
  if (v6)
  {
    *(_DWORD *)v1 = v6;
  }
  else
  {
    WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(v1, v7);
    WTF::fastFree(v12, v13);
  }
  return v10;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::close(uint64_t this, int a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)(this + 40);
  if (v3 && *(_QWORD *)(v3 + 40))
  {
    v4 = *(_QWORD *)(v3 + 24);
    v7 = *(_QWORD *)(v3 + 40);
    WTF::String::isolatedCopy();
    v5 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v5 = &off_1E336EBE8;
    *(_DWORD *)(v5 + 16) = a2;
    *(_QWORD *)(v5 + 8) = v7;
    v10 = v5;
    *(_QWORD *)(v5 + 24) = v9;
    v11 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 56))(v4, &v10);
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  return this;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::fail(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  char v8;

  v1 = *(_QWORD *)(result + 40);
  if (v1 && *(_QWORD *)(v1 + 40))
  {
    v2 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 40);
    WTF::String::isolatedCopy();
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v3 = &off_1E336EC10;
    v3[1] = v5;
    v7 = v3;
    v3[2] = v6;
    v8 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 56))(v2, &v7);
    v4 = v7;
    v7 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    return 0;
  }
  return result;
}

WebCore::WorkerThreadableWebSocketChannel::Bridge *WebCore::WorkerThreadableWebSocketChannel::disconnect(WebCore::WorkerThreadableWebSocketChannel *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  WebCore::WorkerThreadableWebSocketChannel::Bridge *result;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  char v13;

  v3 = (_QWORD *)*((_QWORD *)this + 5);
  *(_QWORD *)(v3[1] + 16) = 0;
  v4 = v3[5];
  if (v4)
  {
    v5 = v3[3];
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E336EC38;
    v6[1] = v4;
    v12 = v6;
    v13 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 56))(v5, &v12);
    v7 = v12;
    v12 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    v3[5] = 0;
  }
  v8 = (_DWORD *)v3[2];
  v3[2] = 0;
  if (v8)
  {
    if (v8[78] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8);
    else
      --v8[78];
  }
  result = (WebCore::WorkerThreadableWebSocketChannel::Bridge *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(result, a2);
      return (WebCore::WorkerThreadableWebSocketChannel::Bridge *)WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

_QWORD *WebCore::WorkerThreadableWebSocketChannel::suspend(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;

  *(_BYTE *)(this[4] + 80) = 1;
  v1 = this[5];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 24);
      v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v4 = off_1E336EC60;
      v4[1] = v2;
      v5 = v4;
      v6 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 56))(v3, &v5);
      this = v5;
      v5 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

unsigned int *WebCore::WorkerThreadableWebSocketChannel::resume(WebCore::WorkerThreadableWebSocketChannel *this, void *a2)
{
  uint64_t v3;
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;

  v3 = *((_QWORD *)this + 4);
  *(_BYTE *)(v3 + 80) = 0;
  result = WebCore::ThreadableWebSocketChannelClientWrapper::processPendingTasks((unsigned int *)v3, a2);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 40);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 24);
      v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = off_1E336EC88;
      *((_QWORD *)v8 + 1) = v6;
      v9 = v8;
      v10 = 0;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v7 + 56))(v7, &v9);
      result = v9;
      v9 = 0;
      if (result)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebCore::WorkerThreadableWebSocketChannel::Peer::~Peer(WebCore::WorkerThreadableWebSocketChannel::Peer *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;

  *(_QWORD *)this = off_1E336E830;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 168))(v5);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v6, a2);
      WTF::fastFree(v13, v14);
    }
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WorkerThreadableWebSocketChannel::Peer::~Peer(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::WorkerThreadableWebSocketChannel::Peer::didConnect(WebCore::WorkerThreadableWebSocketChannel::Peer *this)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WebCore::ThreadableWebSocketChannelClientWrapper *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 3) + 8))(&v20);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 3) + 16))(&v19);
  v2 = *((_OWORD *)this + 4);
  v21[0] = *((_OWORD *)this + 3);
  v21[1] = v2;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v14 = (WebCore::ThreadableWebSocketChannelClientWrapper *)v3;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E336E968;
  v5[1] = v14;
  v5[2] = v15;
  v5[3] = v16;
  v17 = v5;
  v18 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v21);
  if (v7)
  {
    v9 = v7[4];
    if (v9)
    {
      if (*(_BYTE *)(v9 + 274) == 1)
        (*(void (**)(_QWORD, _QWORD **, char *))(**(_QWORD **)(*(_QWORD *)(v9 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v9 + 360) + 48), &v17, (char *)this + 32);
    }
  }
  v10 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v11 = v17;
  v17 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessage(uint64_t a1)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  WebCore::ThreadableWebSocketChannelClientWrapper *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  char v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 64);
  v16[0] = *(_OWORD *)(a1 + 48);
  v16[1] = v2;
  v3 = *(unsigned int **)(a1 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v12 = (WebCore::ThreadableWebSocketChannelClientWrapper *)v3;
  WTF::String::isolatedCopy();
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E336E990;
  v5[1] = v12;
  v5[2] = v13;
  v14 = v5;
  v15 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v16);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
    {
      if (*(_BYTE *)(v8 + 274) == 1)
        (*(void (**)(_QWORD, _QWORD **, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 360) + 48), &v14, a1 + 32);
    }
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return 0;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveBinaryData(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _QWORD *v14;
  char v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 64);
  v16[0] = *(_OWORD *)(a1 + 48);
  v16[1] = v3;
  v4 = *(unsigned int **)(a1 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *a2;
  v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E336E9B8;
  v8[1] = v4;
  v8[2] = v6;
  v8[3] = v7;
  v14 = v8;
  v15 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v16);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (*(_BYTE *)(v11 + 274) == 1)
        (*(void (**)(_QWORD, _QWORD **, uint64_t))(**(_QWORD **)(*(_QWORD *)(v11 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v11 + 360) + 48), &v14, a1 + 32);
    }
  }
  v12 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::Peer::didUpdateBufferedAmount(WebCore::WorkerThreadableWebSocketChannel::Peer *this, int a2)
{
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *((_OWORD *)this + 4);
  v15[0] = *((_OWORD *)this + 3);
  v15[1] = v4;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = &off_1E336E9E0;
  *(_QWORD *)(v7 + 8) = v5;
  *(_DWORD *)(v7 + 16) = a2;
  v13 = v7;
  v14 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v15);
  if (v9)
  {
    v10 = v9[4];
    if (v10)
    {
      if (*(_BYTE *)(v10 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)(*(_QWORD *)(v10 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 360) + 48), &v13, (char *)this + 32);
    }
  }
  v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::Peer::didStartClosingHandshake(WebCore::WorkerThreadableWebSocketChannel::Peer *this)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *((_OWORD *)this + 4);
  v13[0] = *((_OWORD *)this + 3);
  v13[1] = v2;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E336EA08;
  v5[1] = v3;
  v11 = (uint64_t)v5;
  v12 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v13);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
    {
      if (*(_BYTE *)(v8 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)(*(_QWORD *)(v8 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 360) + 48), &v11, (char *)this + 32);
    }
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::Peer::didClose(uint64_t a1, unsigned int a2, unsigned int a3, __int16 a4)
{
  uint64_t v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WebCore::ThreadableWebSocketChannelClientWrapper *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 168))(v8);
  v9 = *(_OWORD *)(a1 + 64);
  v23[0] = *(_OWORD *)(a1 + 48);
  v23[1] = v9;
  v10 = *(unsigned int **)(a1 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v19 = (WebCore::ThreadableWebSocketChannelClientWrapper *)v10;
  WTF::String::isolatedCopy();
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = &off_1E336EA30;
  *(_QWORD *)(v12 + 8) = v19;
  *(_QWORD *)(v12 + 16) = __PAIR64__(a3, a2);
  *(_WORD *)(v12 + 24) = a4;
  v21 = v12;
  *(_QWORD *)(v12 + 32) = v20;
  v22 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_9:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v23);
  if (v14)
  {
    v15 = v14[4];
    if (v15)
    {
      if (*(_BYTE *)(v15 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v15 + 360) + 48), &v21, a1 + 32);
    }
  }
  v16 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v17 = v21;
  v21 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return 0;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessageError(uint64_t a1)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  WebCore::ThreadableWebSocketChannelClientWrapper *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  char v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 64);
  v16[0] = *(_OWORD *)(a1 + 48);
  v16[1] = v2;
  v3 = *(unsigned int **)(a1 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v12 = (WebCore::ThreadableWebSocketChannelClientWrapper *)v3;
  WTF::String::isolatedCopy();
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E336EA58;
  v5[1] = v12;
  v5[2] = v13;
  v14 = v5;
  v15 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v16);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
    {
      if (*(_BYTE *)(v8 + 274) == 1)
        (*(void (**)(_QWORD, _QWORD **, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 360) + 48), &v14, a1 + 32);
    }
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  return 0;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::Peer::didUpgradeURL(WebCore::WorkerThreadableWebSocketChannel::Peer *this)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *((_OWORD *)this + 4);
  v13[0] = *((_OWORD *)this + 3);
  v13[1] = v2;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E336EA80;
  v5[1] = v3;
  v11 = (uint64_t)v5;
  v12 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v13);
  if (v7)
  {
    v8 = v7[4];
    if (v8)
    {
      if (*(_BYTE *)(v8 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)(*(_QWORD *)(v8 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 360) + 48), &v11, (char *)this + 32);
    }
  }
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::WorkerThreadableWebSocketChannel::Bridge::~Bridge(WebCore::WorkerThreadableWebSocketChannel::Bridge *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  _QWORD *v19;
  char v20;

  *(_QWORD *)(*((_QWORD *)this + 1) + 16) = 0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E336EC38;
    v5[1] = v3;
    v19 = v5;
    v20 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 56))(v4, &v19);
    v6 = v19;
    v19 = 0;
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    *((_QWORD *)this + 5) = 0;
  }
  v7 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (v7[78] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 40))(v7);
    else
      --v7[78];
  }
  v8 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    v14 = v8 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (v10[78] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 40))(v10);
    else
      --v10[78];
  }
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v11, a2);
      WTF::fastFree(v17, v18);
    }
  }
}

uint64_t *WebCore::WorkerThreadableWebSocketChannel::Bridge::initialize(WebCore::WorkerGlobalScope &)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  void *v22;

  v3 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    v17 = v3 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v5, a2);
      WTF::fastFree(v21, v22);
    }
  }
  v8 = *a1;
  *a1 = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_14:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v20 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v20 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          return a1;
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return a1;
LABEL_22:
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (!v14)
      WTF::fastFree((WTF *)v9, a2);
  }
  return a1;
}

void WebCore::WebSocketExtensionDeflateFrame::~WebSocketExtensionDeflateFrame(WebCore::WebSocketExtensionDeflateFrame *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E336E890;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E336E890;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebSocketExtensionDeflateFrame::failureReason@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 32);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::progressIdentifier(WebCore::WorkerThreadableWebSocketChannel *this)
{
  return *((_QWORD *)this + 64);
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::hasCreatedHandshake(WebCore::WorkerThreadableWebSocketChannel *this)
{
  return 0;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::isConnected(WebCore::WorkerThreadableWebSocketChannel *this)
{
  return 0;
}

WebCore::HTTPHeaderMap *WebCore::WorkerThreadableWebSocketChannel::clientHandshakeRequest@<X0>(uint64_t a1@<X0>, WebCore::ResourceRequestBase::RequestData *a2@<X8>)
{
  WebCore::HTTPHeaderMap *result;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;

  result = WebCore::ResourceRequestBase::RequestData::RequestData(a2, (const WebCore::ResourceRequestBase::RequestData *)(a1 + 56));
  v4 = *(_DWORD **)(a1 + 208);
  if (v4)
    *v4 += 2;
  *((_QWORD *)result + 19) = v4;
  v5 = *(_DWORD **)(a1 + 216);
  if (v5)
    *v5 += 2;
  *((_QWORD *)result + 20) = v5;
  v6 = *(_DWORD **)(a1 + 224);
  if (v6)
    ++*v6;
  v7 = *(_QWORD *)(a1 + 232);
  *((_QWORD *)result + 21) = v6;
  *((_QWORD *)result + 22) = v7;
  *((_BYTE *)result + 184) = *(_BYTE *)(a1 + 240);
  v8 = *(const void **)(a1 + 248);
  *((_QWORD *)result + 24) = v8;
  if (v8)
    return (WebCore::HTTPHeaderMap *)CFRetain(v8);
  return result;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::serverHandshakeResponse(WebCore::WorkerThreadableWebSocketChannel *this)
{
  return (uint64_t)this + 256;
}

uint64_t WebCore::WorkerThreadableWebSocketChannel::refThreadableWebSocketChannel(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

WebCore::WorkerThreadableWebSocketChannel *WebCore::WorkerThreadableWebSocketChannel::derefThreadableWebSocketChannel(WebCore::WorkerThreadableWebSocketChannel *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::WorkerThreadableWebSocketChannel::~WorkerThreadableWebSocketChannel(this, a2);
    return (WebCore::WorkerThreadableWebSocketChannel *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return this;
}

uint64_t WebCore::WebSocketExtensionProcessor::failureReason@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  _DWORD *v11;
  unsigned __int128 *v12;
  unsigned __int128 *v13;
  unsigned __int128 v14;
  char v15;
  uint64_t v16;

  v3 = *(_QWORD *)(this + 8);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
    if (v4 < 0)
      goto LABEL_30;
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 7);
  v6 = v4 + 7;
  if (v5)
    goto LABEL_30;
  v7 = (v6 + 10);
  if (__OFADD__(v6, 10))
    goto LABEL_30;
  if (!v3)
  {
    this = WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
    if (v16)
    {
      *(_DWORD *)v16 = 2;
      *(_DWORD *)(v16 + 4) = v7;
      *(_QWORD *)(v16 + 20) = *(_QWORD *)"Extension ";
      *(_QWORD *)(v16 + 8) = v16 + 20;
      *(_DWORD *)(v16 + 16) = 4;
      *(_WORD *)(v16 + 28) = 8302;
      *(_DWORD *)(v16 + 30) = 1767990816;
      *(_DWORD *)(v16 + 33) = 1684368489;
      *a2 = v16;
      return this;
    }
    goto LABEL_30;
  }
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    this = WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
    if (v16)
    {
      *(_DWORD *)v16 = 2;
      *(_DWORD *)(v16 + 4) = v7;
      *(_QWORD *)(v16 + 20) = *(_QWORD *)"Extension ";
      *(_QWORD *)(v16 + 8) = v16 + 20;
      *(_DWORD *)(v16 + 16) = 4;
      *(_WORD *)(v16 + 28) = 8302;
      v9 = (_BYTE *)(v16 + 30);
      v8 = *(_BYTE **)(v3 + 8);
      v10 = *(unsigned int *)(v3 + 4);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((_DWORD)v10)
        {
          if ((_DWORD)v10 == 1)
            *v9 = *v8;
          else
            this = (uint64_t)memcpy((void *)(v16 + 30), v8, v10);
        }
      }
      else
      {
        if (v10 < 0x10)
        {
          v12 = (unsigned __int128 *)(v16 + 30);
        }
        else
        {
          v12 = (unsigned __int128 *)&v9[v10 & 0xFFFFFFF0];
          v13 = (unsigned __int128 *)(v16 + 30);
          do
          {
            v14 = (unsigned __int128)vld2q_s8(v8);
            v8 += 32;
            *v13++ = v14;
          }
          while (v13 != v12);
        }
        while (v12 != (unsigned __int128 *)&v9[v10])
        {
          v15 = *v8;
          v8 += 2;
          *(_BYTE *)v12 = v15;
          v12 = (unsigned __int128 *)((char *)v12 + 1);
        }
      }
      v11 = &v9[*(unsigned int *)(v3 + 4)];
      *(_DWORD *)((char *)v11 + 3) = 1684368489;
      *v11 = 1767990816;
      *a2 = v16;
      goto LABEL_15;
    }
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return this;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v7, 0, (int8x16_t *)"Extension ", 0xAu, v3, (int8x16_t *)" failed", 7u, a2);
  if (!*a2)
    goto LABEL_31;
LABEL_15:
  if (*(_DWORD *)v3 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v3, (WTF::StringImpl *)v8);
  *(_DWORD *)v3 -= 2;
  return this;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, _BYTE *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v15;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  char v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD v36[2];
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v36[0];
        if (v36[0])
        {
          v18 = (_BYTE *)(v36[0] + 20);
          *(_DWORD *)v36[0] = 2;
          *(_DWORD *)(v17 + 4) = v15;
          *(_QWORD *)(v17 + 8) = v17 + 20;
          *(_DWORD *)(v17 + 16) = 4;
          if ((a4 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a4)
            {
              if ((_DWORD)a4 == 1)
                *v18 = *a3;
              else
                memcpy((void *)(v17 + 20), a3, a4);
            }
          }
          else
          {
            if (a4 < 0x10)
            {
              v30 = (unsigned __int128 *)(v17 + 20);
            }
            else
            {
              v30 = (unsigned __int128 *)&v18[a4 & 0xFFFFFFF0];
              v31 = (unsigned __int128 *)(v17 + 20);
              do
              {
                v32 = (unsigned __int128)vld2q_s8(a3);
                a3 += 32;
                *v31++ = v32;
              }
              while (v31 != v30);
            }
            while (v30 != (unsigned __int128 *)&v18[a4])
            {
              v33 = *a3;
              a3 += 2;
              *(_BYTE *)v30 = v33;
              v30 = (unsigned __int128 *)((char *)v30 + 1);
            }
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(&v18[a4], a5, a6, a7, a8);
        }
        goto LABEL_20;
      }
LABEL_23:
      v17 = 0;
      goto LABEL_20;
    }
LABEL_22:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_20;
  }
  if (!(_DWORD)result)
    goto LABEL_22;
  if (result > 0x7FFFFFEF)
    goto LABEL_23;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v36[0];
  if (v36[0])
  {
    *(_DWORD *)v36[0] = 2;
    *(_DWORD *)(v17 + 4) = v15;
    *(_QWORD *)(v17 + 8) = v17 + 20;
    *(_DWORD *)(v17 + 16) = 0;
    v34 = a3;
    v35 = a4;
    WTF::StringView::getCharacters<char16_t>(&v34, (char *)(v17 + 20));
    v19 = (char *)(v17 + 20 + 2 * v35);
    v20 = &v19[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      v21 = &v19[2 * (a6 & 0xFFFFFFC0)];
      v22 = 0uLL;
      do
      {
        v37.val[0] = *a5;
        v23 = a5[1];
        v38.val[0] = a5[2];
        v24 = a5[3];
        a5 += 4;
        v25 = v24;
        v38.val[1] = 0uLL;
        v39.val[0] = v23;
        v37.val[1] = 0uLL;
        v26 = v19;
        vst2q_s8(v26, v37);
        v26 += 32;
        v39.val[1] = 0uLL;
        vst2q_s8(v26, v39);
        v27 = v19 + 64;
        vst2q_s8(v27, v38);
        v28 = v19 + 96;
        vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
        v19 += 128;
      }
      while (v19 != v21);
      v19 = v21;
    }
    while (v19 != v20)
    {
      v29 = a5->u8[0];
      a5 = (int8x16_t *)((char *)a5 + 1);
      *(_WORD *)v19 = v29;
      v19 += 2;
    }
    v36[0] = a7;
    v36[1] = a8;
    result = (uint64_t)WTF::StringView::getCharacters<char16_t>(v36, v20);
  }
LABEL_20:
  *a9 = v17;
  return result;
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(char *result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  size_t v17;
  char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  _QWORD v25[5];

  v5 = 0;
  v25[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)result + 2);
  v7 = *a2;
  v8 = *a2;
  do
  {
    ++v5;
    v9 = v8 > 9;
    v8 /= 0xAuLL;
  }
  while (v9);
  v10 = *(_DWORD *)(a3 + 8);
  if ((v10 | v5) < 0)
    goto LABEL_28;
  v11 = 0;
  v12 = __OFADD__(v5, v10);
  v13 = v5 + v10;
  v14 = v12;
  if (v6 < 0 || (v14 & 1) != 0)
    goto LABEL_25;
  v15 = (v6 + v13);
  if (__OFADD__(v6, v13))
    goto LABEL_28;
  if (!(_DWORD)v15)
  {
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_25;
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_28:
    v11 = 0;
    goto LABEL_25;
  }
  v16 = *(_BYTE **)result;
  v17 = *((unsigned int *)result + 2);
  v18 = *(char **)a3;
  v19 = *(unsigned int *)(a3 + 8);
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
  v11 = v25[0];
  if (v25[0])
  {
    v20 = (_BYTE *)(v25[0] + 20);
    *(_DWORD *)v25[0] = 2;
    *(_DWORD *)(v11 + 4) = v15;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 4;
    if ((_DWORD)v17)
    {
      if ((_DWORD)v17 == 1)
        *v20 = *v16;
      else
        result = (char *)memcpy((void *)(v11 + 20), v16, v17);
    }
    v21 = 0;
    v22 = v7;
    do
    {
      *((_BYTE *)&v25[3] + v21--) = (v22 % 0xA) | 0x30;
      v9 = v22 > 9;
      v22 /= 0xAuLL;
    }
    while (v9);
    v23 = &v20[v17];
    if (v21 + 26 <= 25)
      result = (char *)memcpy(v23, (char *)&v25[3] + v21 + 1, -v21);
    v24 = 0;
    do
    {
      ++v24;
      v9 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v9);
    if ((_DWORD)v19)
    {
      result = &v23[v24];
      if ((_DWORD)v19 == 1)
        *result = *v18;
      else
        result = (char *)memcpy(result, v18, v19);
    }
  }
LABEL_25:
  *a4 = v11;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  BOOL v14;
  _BYTE *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD v34[3];
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v9 = result;
  v34[2] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if ((_DWORD)result)
    {
      if (result <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
        v11 = v34[0];
        if (v34[0])
        {
          v17 = (char *)(v34[0] + 20);
          *(_DWORD *)v34[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(_QWORD *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 0;
          v18 = (char *)(v11 + 20 + 2 * a4);
          if ((a4 & 0xFFFFFFC0) != 0)
          {
            v19 = &v17[2 * (a4 & 0xFFFFFFC0)];
            v20 = 0uLL;
            do
            {
              v35.val[0] = *a3;
              v21 = a3[1];
              v36.val[0] = a3[2];
              v22 = a3[3];
              a3 += 4;
              v23 = v22;
              v36.val[1] = 0uLL;
              v37.val[0] = v21;
              v35.val[1] = 0uLL;
              v24 = v17;
              vst2q_s8(v24, v35);
              v24 += 32;
              v37.val[1] = 0uLL;
              vst2q_s8(v24, v37);
              v25 = v17 + 64;
              vst2q_s8(v25, v36);
              v26 = v17 + 96;
              vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
              v17 += 128;
            }
            while (v17 != v19);
            v17 = v19;
          }
          while (v17 != v18)
          {
            v27 = a3->u8[0];
            a3 = (int8x16_t *)((char *)a3 + 1);
            *(_WORD *)v17 = v27;
            v17 += 2;
          }
          if ((a5 & 0x80000000) != 0)
          {
            v30 = -a5;
            v31 = 12;
            do
            {
              *((_BYTE *)v34 + v31--) = (v30 % 0xA) | 0x30;
              v14 = v30 > 9;
              v30 /= 0xAu;
            }
            while (v14);
            *((_BYTE *)v34 + v31) = 45;
            if (v31 + 2 <= 14)
            {
              do
              {
                *(_WORD *)v18 = *((unsigned __int8 *)v34 + v31);
                v18 += 2;
                v14 = v31++ < 12;
              }
              while (v14);
            }
          }
          else
          {
            v28 = 0;
            do
            {
              *((_BYTE *)&v34[1] + v28-- + 4) = (a5 % 0xA) | 0x30;
              v14 = a5 > 9;
              a5 /= 0xAu;
            }
            while (v14);
            if (v28 + 14 <= 13)
            {
              do
              {
                *(_WORD *)v18 = *((unsigned __int8 *)&v34[1] + v28 + 5);
                v18 += 2;
              }
              while (!__CFADD__(v28++, 1));
            }
          }
        }
        goto LABEL_33;
      }
LABEL_36:
      v11 = 0;
      goto LABEL_33;
    }
LABEL_35:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_33;
  }
  if (!(_DWORD)result)
    goto LABEL_35;
  if ((result & 0x80000000) != 0)
    goto LABEL_36;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v11 = v34[0];
  if (v34[0])
  {
    v12 = (_BYTE *)(v34[0] + 20);
    *(_DWORD *)v34[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 4;
    if (a4)
    {
      if (a4 == 1)
        *v12 = a3->i8[0];
      else
        memcpy((void *)(v11 + 20), a3, a4);
    }
    result = (uint64_t)&v12[a4];
    v13 = 0;
    if ((a5 & 0x80000000) != 0)
    {
      v32 = -a5;
      do
      {
        *((_BYTE *)&v34[1] + v13-- + 4) = (v32 % 0xA) | 0x30;
        v14 = v32 > 9;
        v32 /= 0xAu;
      }
      while (v14);
      v33 = v13 + 12;
      v15 = (char *)&v34[1] + v13 + 4;
      *v15 = 45;
      if (v13 + 14 <= 14)
      {
        if (v33 <= 12)
          v33 = 12;
        v16 = v33 - v13 - 11;
        goto LABEL_12;
      }
    }
    else
    {
      do
      {
        *((_BYTE *)&v34[1] + v13-- + 4) = (a5 % 0xA) | 0x30;
        v14 = a5 > 9;
        a5 /= 0xAu;
      }
      while (v14);
      if (v13 + 14 <= 13)
      {
        v15 = (char *)&v34[1] + v13 + 5;
        v16 = -v13;
LABEL_12:
        result = (uint64_t)memcpy((void *)result, v15, v16);
      }
    }
  }
LABEL_33:
  *a6 = v11;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  _QWORD v26[2];
  int8x16x2_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v26[0];
        if (v26[0])
        {
          v14 = (_BYTE *)(v26[0] + 20);
          *(_DWORD *)v26[0] = 2;
          *(_DWORD *)(v13 + 4) = v11;
          *(_QWORD *)(v13 + 8) = v13 + 20;
          *(_DWORD *)(v13 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v14, a3, a4, a5, a6);
        }
        goto LABEL_16;
      }
LABEL_18:
      v13 = 0;
      goto LABEL_16;
    }
LABEL_17:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_18;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v26[0];
  if (v26[0])
  {
    v15 = (char *)(v26[0] + 20);
    *(_DWORD *)v26[0] = 2;
    *(_DWORD *)(v13 + 4) = v11;
    *(_QWORD *)(v13 + 8) = v13 + 20;
    *(_DWORD *)(v13 + 16) = 0;
    v16 = (char *)(v13 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v17 = &v15[2 * (a4 & 0xFFFFFFC0)];
      v18 = 0uLL;
      do
      {
        v27.val[0] = *a3;
        v19 = a3[1];
        v28.val[0] = a3[2];
        v20 = a3[3];
        a3 += 4;
        v21 = v20;
        v28.val[1] = 0uLL;
        v29.val[0] = v19;
        v27.val[1] = 0uLL;
        v22 = v15;
        vst2q_s8(v22, v27);
        v22 += 32;
        v29.val[1] = 0uLL;
        vst2q_s8(v22, v29);
        v23 = v15 + 64;
        vst2q_s8(v23, v28);
        v24 = v15 + 96;
        vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
        v15 += 128;
      }
      while (v15 != v17);
      v15 = v17;
    }
    while (v15 != v16)
    {
      v25 = a3->u8[0];
      a3 = (int8x16_t *)((char *)a3 + 1);
      *(_WORD *)v15 = v25;
      v15 += 2;
    }
    v26[0] = a5;
    v26[1] = a6;
    result = (uint64_t)WTF::StringView::getCharacters<char16_t>(v26, v16);
  }
LABEL_16:
  *a7 = v13;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(WTF::CString &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336E8C8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(WTF::CString &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336E8C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(WTF::CString &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v1 + 72) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v1 + 33) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(JSC::ArrayBuffer const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336E8F0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(JSC::ArrayBuffer const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336E8F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(JSC::ArrayBuffer const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v1 + 72) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v1 + 33) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(WebCore::Blob &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336E918;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(WebCore::Blob &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336E918;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::send(WebCore::Blob &)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v1 + 72) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v1 + 33) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::bufferedAmount(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336E940;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::bufferedAmount(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336E940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::bufferedAmount(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v1 + 76) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v1 + 33) = 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didConnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;

  *a1 = &off_1E336E968;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v5, a2);
      WTF::fastFree(v9, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didConnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  void *v10;

  *(_QWORD *)this = &off_1E336E968;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v5, a2);
      WTF::fastFree(v9, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didConnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(char **a1)
{
  WebCore::ThreadableWebSocketChannelClientWrapper::setSubprotocol(a1[1], (const WTF::String *)(a1 + 2));
  WebCore::ThreadableWebSocketChannelClientWrapper::setExtensions(a1[1], (const WTF::String *)(a1 + 3));
  return WebCore::ThreadableWebSocketChannelClientWrapper::didConnect((WebCore::ThreadableWebSocketChannelClientWrapper *)a1[1]);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessage(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E336E990;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessage(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336E990;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessage(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessage(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)a1 = &off_1E336E9B8;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336E9B8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveBinaryData(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveBinaryData(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didUpdateBufferedAmount(unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336E9E0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didUpdateBufferedAmount(unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336E9E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didUpdateBufferedAmount(unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::didUpdateBufferedAmount(*(WebCore::ThreadableWebSocketChannelClientWrapper **)(a1 + 8), *(_DWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didStartClosingHandshake(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336EA08;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didStartClosingHandshake(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336EA08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didStartClosingHandshake(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::didStartClosingHandshake(*(WebCore::ThreadableWebSocketChannelClientWrapper **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E336EA30;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336EA30;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didClose(unsigned int,WebCore::WebSocketChannelClient::ClosingHandshakeCompletionStatus,unsigned short,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::didClose(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_WORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessageError(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E336EA58;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessageError(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336EA58;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessageError(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::didReceiveMessageError(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didUpgradeURL(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E336EA80;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didUpgradeURL(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336EA80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v3, a2);
      WTF::fastFree(v7, v8);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Peer::didUpgradeURL(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::ThreadableWebSocketChannelClientWrapper::didUpgradeURL(*(WebCore::ThreadableWebSocketChannelClientWrapper **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::mainThreadInitialize(WebCore::ScriptExecutionContext &,WebCore::WorkerThread &,WebCore::ProcessQualified<WTF::UUID>,WTF::Ref<WebCore::ThreadableWebSocketChannelClientWrapper,WTF::RawPtrTraits<WebCore::ThreadableWebSocketChannelClientWrapper>,WTF::DefaultRefDerefTraits<WebCore::ThreadableWebSocketChannelClientWrapper>> &&,WTF::String const&,WTF::Ref<WebCore::SocketProvider,WTF::RawPtrTraits<WTF::String const&>,WTF::DefaultRefDerefTraits<WTF::String const&>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *a1 = &off_1E336EAA8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::mainThreadInitialize(WebCore::ScriptExecutionContext &,WebCore::WorkerThread &,WebCore::ProcessQualified<WTF::UUID>,WTF::Ref<WebCore::ThreadableWebSocketChannelClientWrapper,WTF::RawPtrTraits<WebCore::ThreadableWebSocketChannelClientWrapper>,WTF::DefaultRefDerefTraits<WebCore::ThreadableWebSocketChannelClientWrapper>> &&,WTF::String const&,WTF::Ref<WebCore::SocketProvider,WTF::RawPtrTraits<WTF::String const&>,WTF::DefaultRefDerefTraits<WTF::String const&>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  void *v9;

  *(_QWORD *)this = &off_1E336EAA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WebCore::ThreadableWebSocketChannelClientWrapper::~ThreadableWebSocketChannelClientWrapper((WebCore::ThreadableWebSocketChannelClientWrapper *)v4, a2);
      WTF::fastFree(v8, v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::mainThreadInitialize(WebCore::ScriptExecutionContext &,WebCore::WorkerThread &,WebCore::ProcessQualified<WTF::UUID>,WTF::Ref<WebCore::ThreadableWebSocketChannelClientWrapper,WTF::RawPtrTraits<WebCore::ThreadableWebSocketChannelClientWrapper>,WTF::DefaultRefDerefTraits<WebCore::ThreadableWebSocketChannelClientWrapper>> &&,WTF::String const&,WTF::Ref<WebCore::SocketProvider,WTF::RawPtrTraits<WTF::String const&>,WTF::DefaultRefDerefTraits<WTF::String const&>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v3 + 32))
  {
    if (*(_BYTE *)(a2 + 274) == 1)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 360) + 48))(*(_QWORD *)(a2 + 360));
      if (result)
      {
        v4 = result;
        v5 = *(_QWORD *)(v2 + 16);
        *(_QWORD *)(v2 + 16) = 0;
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = &off_1E336EAD0;
        v6[1] = v5;
        v8 = v6;
        v9 = 0;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 56))(v4, &v8);
        result = (uint64_t)v8;
        v8 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  else
  {
    v7 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(v3 + 24) = v7;
    *(_BYTE *)(v3 + 33) = 1;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore32WorkerThreadableWebSocketChannel6Bridge20mainThreadInitializeERNS2_22ScriptExecutionContextERNS2_12WorkerThreadENS2_16ProcessQualifiedINS_4UUIDEEEONS_3RefINS2_39ThreadableWebSocketChannelClientWrapperENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEERKNS_6StringEONSC_INS2_14SocketProviderENSE_ISN_EENSG_ISN_EEEEEN3__0clIS5_EEDaRT_EUlS6_E_vJS6_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336EAD0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore32WorkerThreadableWebSocketChannel6Bridge20mainThreadInitializeERNS2_22ScriptExecutionContextERNS2_12WorkerThreadENS2_16ProcessQualifiedINS_4UUIDEEEONS_3RefINS2_39ThreadableWebSocketChannelClientWrapperENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEERKNS_6StringEONSC_INS2_14SocketProviderENSE_ISN_EENSG_ISN_EEEEEN3__0clIS5_EEDaRT_EUlS6_E_vJS6_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336EAD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::initialize(WebCore::WorkerGlobalScope &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E336EAF8;
  WebCore::WorkerThreadableWebSocketChannel::Bridge::initialize(WebCore::WorkerGlobalScope &)::$_0::~$_0(a1 + 2, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::initialize(WebCore::WorkerGlobalScope &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E336EAF8;
  WebCore::WorkerThreadableWebSocketChannel::Bridge::initialize(WebCore::WorkerGlobalScope &)::$_0::~$_0(a1 + 2, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::initialize(WebCore::WorkerGlobalScope &)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t result;
  _DWORD **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  void (***v14)(_QWORD, uint64_t, uint64_t);
  _DWORD *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 48);
  v20 = *(_OWORD *)(a1 + 32);
  v21 = v5;
  v6 = *(_QWORD *)(v4 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  if ((_DWORD)result)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) = 0;
  }
  else
  {
    v8 = (_DWORD **)(a1 + 72);
    v9 = *(unsigned int **)(a1 + 64);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(unsigned int **)(a1 + 64);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = WTF::fastMalloc((WTF *)0x50);
    v14 = *(void (****)(_QWORD, uint64_t, uint64_t))(a1 + 80);
    *(_QWORD *)v13 = off_1E336E830;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = v11;
    if (*(_BYTE *)(a2 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x1955C7A64);
    }
    (**v14)(v14, a2 - 192, v13);
    v15 = *v8;
    if (*v8)
      *v15 += 2;
    *(_QWORD *)(v13 + 32) = v15;
    v16 = v21;
    *(_OWORD *)(v13 + 48) = v20;
    *(_OWORD *)(v13 + 64) = v16;
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = &off_1E336EAA8;
    v17[1] = v9;
    v17[2] = v13;
    v18 = v17;
    v19 = 1;
    (*(void (**)(uint64_t, _QWORD **, uint64_t))(*(_QWORD *)v6 + 32))(v6, &v18, a1 + 72);
    result = (uint64_t)v18;
    v18 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::connect(WTF::URL const&,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E336EB20;
  v3 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::connect(WTF::URL const&,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E336EB20;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::connect(WTF::URL const&,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, WebCore::SecurityContext *this)
{
  uint64_t v4;
  WebCore **v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::URL *v8;
  WebCore::Document *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (***v17)(_QWORD, uint64_t, uint64_t);
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD v28[2];
  _QWORD v29[2];
  WTF::StringImpl *v30[2];

  if (*((_BYTE *)this + 274))
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  v4 = *((_QWORD *)this + 42);
  if (!v4 || (v5 = *(WebCore ***)(v4 + 8)) == 0)
  {
LABEL_13:
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(uint64_t (****)(_QWORD, uint64_t, uint64_t))(v16 + 24);
    if (v17)
    {
      result = (WTF::StringImpl *)(**v17)(*(_QWORD *)(v16 + 24), a1 + 16, a1 + 56);
      if ((_DWORD)result)
        return result;
      v16 = *(_QWORD *)(a1 + 8);
    }
    WebCore::WorkerThreadableWebSocketChannel::Peer::didReceiveMessageError(v16);
    result = 0;
    v30[0] = 0;
    return result;
  }
  v6 = (unsigned int *)(v5 + 1);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebCore::SecurityContext::securityOrigin(this, this);
  v8 = (WTF::URL *)(a1 + 16);
  if ((WebCore::MixedContentChecker::shouldBlockRequestForRunnableContent(v5, v9, (WebCore::LocalFrame *)(a1 + 16), 0) & 1) == 0)
  {
    do
    {
      v14 = __ldaxr(v6);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v6));
    if (!v15)
    {
      atomic_store(1u, v6);
      v22 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v22 = off_1E31FE290;
      *((_QWORD *)v22 + 1) = v6;
      v30[0] = v22;
      WTF::ensureOnMainThread();
      v23 = v30[0];
      v30[0] = 0;
      if (v23)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
    }
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(a1 + 8);
  WTF::URL::stringCenterEllipsizedToLength((WebCore::SecurityContext *)((char *)this + 544));
  WTF::URL::stringCenterEllipsizedToLength(v8);
  v30[0] = (WTF::StringImpl *)"The page at ";
  v30[1] = (WTF::StringImpl *)13;
  v29[0] = " was blocked from connecting insecurely to ";
  v29[1] = 44;
  v28[0] = " either because the protocol is insecure or the page is embedded from an insecure page.";
  v28[1] = 88;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v30, (uint64_t *)&v26, (uint64_t)v29, (uint64_t *)&v25, (uint64_t)v28, &v27);
  v12 = v27;
  if (!v27)
  {
    __break(0xC471u);
LABEL_38:
    JUMPOUT(0x1955C7D88);
  }
  v13 = *(_QWORD *)(v10 + 24);
  if (!v13)
  {
    v27 = 0;
LABEL_18:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
    goto LABEL_20;
  }
  (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)v13 + 64))(*(_QWORD *)(v10 + 24), &v27);
  v12 = v27;
  v27 = 0;
  if (v12)
    goto LABEL_18;
LABEL_20:
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v11);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v20 = __ldaxr(v6);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v6));
  if (!v21)
  {
    atomic_store(1u, v6);
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v24 = off_1E31FE290;
    *((_QWORD *)v24 + 1) = v6;
    v30[0] = v24;
    WTF::ensureOnMainThread();
    result = v30[0];
    v30[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(WTF::CString &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;

  *a1 = &off_1E336EB48;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(WTF::CString &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E336EB48;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(WTF::CString &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v2 + 24);
  if (result)
  {
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a1 + 16);
    v5 = *(_OWORD *)(v2 + 64);
    v15[0] = *(_OWORD *)(v2 + 48);
    v15[1] = v5;
    v6 = *(unsigned int **)(v2 + 16);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v8 = &off_1E336E8C8;
    *(_QWORD *)(v8 + 8) = v6;
    *(_DWORD *)(v8 + 16) = v4;
    v13 = v8;
    v14 = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v15);
    if (v10)
    {
      v11 = v10[4];
      if (v11)
      {
        if (*(_BYTE *)(v11 + 274) == 1)
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v11 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v11 + 360) + 48), &v13, v2 + 32);
      }
    }
    v12 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v12 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      {
LABEL_19:
        result = v13;
        v13 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_19;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(JSC::ArrayBuffer const&,unsigned int,unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E336EB70;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(JSC::ArrayBuffer const&,unsigned int,unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E336EB70;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(JSC::ArrayBuffer const&,unsigned int,unsigned int)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  JSC::ArrayBuffer::create();
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v15);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v5 = *(_OWORD *)(v2 + 64);
  v18[0] = *(_OWORD *)(v2 + 48);
  v18[1] = v5;
  v6 = *(unsigned int **)(v2 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = &off_1E336E8F0;
  *(_QWORD *)(v8 + 8) = v6;
  *(_DWORD *)(v8 + 16) = v4;
  v16 = v8;
  v17 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v18);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (*(_BYTE *)(v11 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v11 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v11 + 360) + 48), &v16, v2 + 32);
    }
  }
  v12 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v13 = v16;
  v16 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v15);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(WebCore::Blob &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E336EB98;
  v3 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(WebCore::Blob &)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E336EB98;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::send(WebCore::Blob &)::$_0,void,WebCore::ScriptExecutionContext &>::call(_QWORD *a1, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v3;
  const WTF::URL *v4;
  WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  uint64_t v25;
  char v26;
  _OWORD v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v4 = (const WTF::URL *)(a1 + 2);
  v5 = (WTF::String *)(a1 + 7);
  v6 = a1[8];
  v7 = a1[9];
  v24 = 0;
  v8 = (_DWORD *)bmalloc::api::isoAllocate();
  v10 = WebCore::Blob::Blob((uint64_t)v8, v9, a2, v4, v5, v6, 1, v7, (const WTF::URL *)&v24);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v10 + 24));
  v12 = *(_QWORD *)(v3 + 24);
  if (!v12)
    goto LABEL_21;
  v13 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v12 + 40))(v12, v8);
  v14 = *(_OWORD *)(v3 + 64);
  v27[0] = *(_OWORD *)(v3 + 48);
  v27[1] = v14;
  v15 = *(unsigned int **)(v3 + 16);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  v17 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v17 = &off_1E336E918;
  *(_QWORD *)(v17 + 8) = v15;
  *(_DWORD *)(v17 + 16) = v13;
  v25 = v17;
  v26 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v19 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v27);
  if (v19)
  {
    v20 = v19[4];
    if (v20)
    {
      if (*(_BYTE *)(v20 + 274) == 1)
        (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v20 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v20 + 360) + 48), &v25, v3 + 32);
    }
  }
  v21 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  v22 = v25;
  v25 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_21:
  if (v8)
  {
    if (v8[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[4];
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::bufferedAmount(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v1 + 24);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    v4 = *(_OWORD *)(v1 + 64);
    v14[0] = *(_OWORD *)(v1 + 48);
    v14[1] = v4;
    v5 = *(unsigned int **)(v1 + 16);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = &off_1E336E940;
    *(_QWORD *)(v7 + 8) = v5;
    *(_DWORD *)(v7 + 16) = v3;
    v12 = v7;
    v13 = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v14);
    if (v9)
    {
      v10 = v9[4];
      if (v10)
      {
        if (*(_BYTE *)(v10 + 274) == 1)
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 360) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(v10 + 360) + 48), &v12, v1 + 32);
      }
    }
    v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v11 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      {
LABEL_19:
        result = v12;
        v12 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_19;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::close(int,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336EBE8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::close(int,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336EBE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::close(int,WTF::String const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 56))(result, *(unsigned int *)(a1 + 16), a1 + 24);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::fail(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E336EC10;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::fail(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E336EC10;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::fail(WTF::String &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 64))(result, a1 + 16);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::disconnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E336EC38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::disconnect(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336EC38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::suspend(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WorkerThreadableWebSocketChannel::Bridge::resume(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

void WebCore::DatagramSink::~DatagramSink(WebCore::DatagramSink *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)this = off_1E336ECB0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (__ldaxr((unsigned __int8 *)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v2))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v2);
LABEL_6:
    v4 = *(_QWORD *)(v2 + 16) - 1;
    *(_QWORD *)(v2 + 16) = v4;
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      v6 = __ldxr((unsigned __int8 *)v2);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v2))
        {
          if (v5)
            return;
LABEL_13:
          WTF::fastFree((WTF *)v2, a2);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v2);
      if (v5)
        return;
      goto LABEL_13;
    }
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_1E336ECB0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v8 = __ldxr((unsigned __int8 *)v3);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::DatagramSink::write(WTF::DeferrableRefCountedBase *a1, WebCore::ScriptExecutionContext *this, JSC::JSArrayBufferView *a3, WTF::StringImpl *a4)
{
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  WTF::DeferrableRefCountedBase *v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::DeferrableRefCountedBase **v18;
  char v19[8];
  WTF::StringImpl *v20;
  int v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (WebCore::ScriptExecutionContext::globalObject(this))
  {
    v13 = *(_QWORD *)(WebCore::ScriptExecutionContext::globalObject(this) + 56);
    v8 = (WTF::StringImpl *)JSC::JSArrayBuffer::toWrapped(v13, (uint64_t)a3);
    if (v8)
    {
      *(_DWORD *)v8 += 2;
      LODWORD(v16) = 0;
      v15 = 0;
      v20 = v8;
      v21 = 0;
      v22 = 0;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v18, &v15);
      v9 = 0;
    }
    else
    {
      JSC::JSArrayBufferView::toWrapped(a3, &v15);
      if (!v15)
      {
        JSC::throwTypeError();
        v22 = 1;
        LOBYTE(v15) = 37;
        v16 = 0;
        v17 = 1;
        result = WebCore::DOMPromiseDeferred<void>::settle(a4, (uint64_t)&v15);
        if (v17)
        {
          result = v16;
          v16 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
            else
              *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_12;
      }
      v20 = v15;
      v9 = 1;
      v21 = 1;
      v22 = 0;
    }
    LOBYTE(v13) = 0;
    v14 = -1;
    ((void (*)(WTF::DeferrableRefCountedBase **, uint64_t *, WTF::StringImpl **))off_1E336ED98[v9])(&v15, &v13, &v20);
    v14 = v9;
    v15 = a1;
    v16 = a4;
    v18 = &v15;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::DeferrableRefCountedBase ***, uint64_t *))off_1E336EE10[v9])(&v18, &v13);
    if (v14 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::DeferrableRefCountedBase **, uint64_t *))off_1E336ED88[v14])(&v15, &v13);
LABEL_12:
    if (v22 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::DeferrableRefCountedBase **, WTF::StringImpl **))off_1E336EDA8[v22])(&v15, &v20);
    return result;
  }
  v19[0] = 8;
  v20 = 0;
  LOBYTE(v21) = 1;
  result = WebCore::DOMPromiseDeferred<void>::settle(a4, (uint64_t)v19);
  if ((_BYTE)v21)
  {
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DatagramSink::send(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_18;
  v8 = *(_QWORD *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v5);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (v8)
        goto LABEL_12;
LABEL_18:
      v17 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
    goto LABEL_18;
LABEL_12:
  v11 = *(_QWORD *)(v8 + 176);
  if (v11)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v11 + 16))(*(_QWORD *)(v8 + 176));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 32))(v11, a2, a3, a4);
    v12 = 3;
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v12 = 1;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8 * v12))(v11);
  v15 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_21;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_21:
  v18 = *(_QWORD *)(v15 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v15 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v23 = *(_QWORD *)(v15 + 16);
    v20 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v21 = v23 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v15);
  if (v22 != 1)
  {
    __clrex();
LABEL_28:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v19)
      return result;
    goto LABEL_29;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_28;
  if (v19)
    return result;
LABEL_29:
  if (v20)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (!v21)
    return WTF::fastFree((WTF *)v15, v14);
  return result;
}

void WebCore::DatagramSource::~DatagramSource(WebCore::DatagramSource *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(_DWORD **)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[4];
    }
    WTF::fastFree(v2, a2);
  }
}

{
  WTF *v3;
  _DWORD *v4;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::DatagramSource::doCancel(uint64_t this)
{
  *(_BYTE *)(this + 36) = 1;
  return this;
}

WTF::StringImpl *WebCore::WebTransport::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::Structure *v41;
  int v42;
  JSC::VM *v43;
  unint64_t v44;
  WebCore::DOMGuardedObject *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WebCore::DOMGuardedObject *v49;
  WebCore::DOMGuardedObject *v50;
  uint64_t v51;
  JSC::Structure *v52;
  int v53;
  JSC::VM *v54;
  unint64_t v55;
  WebCore::DOMGuardedObject *v56;
  WebCore::DOMGuardedObject *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  WebCore::DOMGuardedObject *v61;
  WebCore::DOMGuardedObject *v62;
  uint64_t v63;
  JSC::Structure *v64;
  int v65;
  JSC::VM *v66;
  unint64_t v67;
  WebCore::DOMGuardedObject *v68;
  WebCore::DOMGuardedObject *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  WebCore::DOMGuardedObject *v73;
  WebCore::DOMGuardedObject *v74;
  void *v75;
  uint64_t v76;
  int v77;
  WebCore::ActiveDOMObject *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  int v91;
  WebCore::ActiveDOMObject *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  WTF::StringImpl *v111;
  char v112;
  unsigned int v113;
  WTF::StringImpl *v114[3];
  uint64_t v115;

  MEMORY[0x19AEA52D4](&v111, a2, 0);
  if ((v112 & 1) == 0
    || !WTF::URL::protocolIs()
    || (v112 & 1) != 0 && v111 && *((_DWORD *)v111 + 1) > v113)
  {
    v12 = 9;
LABEL_7:
    *(_BYTE *)a4 = v12;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    goto LABEL_8;
  }
  if (*(_BYTE *)a3 && *(_DWORD *)(a3 + 20))
  {
    v12 = 6;
    goto LABEL_7;
  }
  v14 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)a1);
  if (!v14)
  {
    v12 = 8;
    goto LABEL_7;
  }
  v15 = v14;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  v16[3] = 0;
  v16[4] = 0;
  v16[1] = 0;
  v16[2] = 0;
  *((_BYTE *)v16 + 24) = 0;
  *v16 = off_1E336ED40;
  *((_DWORD *)v16 + 8) = 2;
  v114[0] = (WTF::StringImpl *)v16;
  v17 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>(v15, v114);
  WebCore::ReadableStream::createFromJSValues((WebCore::JSDOMGlobalObject *)v15, v17, 0xAuLL, (uint64_t)&v108);
  v18 = v114[0];
  v114[0] = 0;
  if (v18)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 24))(v18);
  if (!v110)
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    v5[3] = 0;
    v5[4] = 0;
    v5[1] = 0;
    v5[2] = 0;
    *((_BYTE *)v5 + 24) = 0;
    *v5 = off_1E336F030;
    *((_DWORD *)v5 + 8) = 2;
    v114[0] = (WTF::StringImpl *)v5;
    v21 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>(v15, v114);
    WebCore::ReadableStream::createFromJSValues((WebCore::JSDOMGlobalObject *)v15, v21, 0xAuLL, (uint64_t)&v105);
    v22 = v114[0];
    v114[0] = 0;
    if (v22)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 24))(v22);
    if (v107)
    {
      if (v107 == 1)
      {
        v23 = v106;
        v106 = 0;
        *(_BYTE *)a4 = v105;
        *(_QWORD *)(a4 + 8) = v23;
        v24 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_127;
      }
      goto LABEL_149;
    }
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_BYTE *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)v6 = off_1E336ECE8;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 36) = 0;
    *(_DWORD *)(v6 + 32) = 2;
    v114[0] = (WTF::StringImpl *)v6;
    v25 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>(v15, v114);
    WebCore::ReadableStream::createFromJSValues((WebCore::JSDOMGlobalObject *)v15, v25, 0xAuLL, (uint64_t)&v102);
    v26 = v114[0];
    v114[0] = 0;
    if (v26)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 24))(v26);
    if (v104)
    {
      if (v104 == 1)
      {
        v27 = v103;
        v103 = 0;
        *(_BYTE *)a4 = v102;
        *(_QWORD *)(a4 + 8) = v27;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_121;
      }
      goto LABEL_149;
    }
    v4 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v4 = off_1E336ECB0;
    *(_QWORD *)(v4 + 16) = 0;
    v98 = (uint64_t *)(v4 + 16);
    *(_QWORD *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 8) = 2;
    v114[0] = (WTF::StringImpl *)v4;
    WebCore::WritableStream::create((JSC::Structure *)v15, v114, (uint64_t)&v99);
    v28 = v114[0];
    v114[0] = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
      else
        --*((_DWORD *)v28 + 2);
    }
    v7 = v101;
    if (v101)
    {
      if (v101 != 1)
        goto LABEL_149;
      v29 = v99;
      v30 = v100;
      v100 = 0;
    }
    else
    {
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
      if (v31)
      {
        v97 = v31;
        v32 = v102;
        v102 = 0;
        v33 = v99;
        v99 = 0;
        v34 = WTF::fastMalloc((WTF *)0x88);
        *(_DWORD *)v34 = 1;
        *(_QWORD *)(v34 + 8) = v32;
        *(_QWORD *)(v34 + 16) = v33;
        *(_OWORD *)(v34 + 24) = 0u;
        *(_OWORD *)(v34 + 40) = 0u;
        *(_QWORD *)(v34 + 56) = 0;
        *(_OWORD *)(v34 + 64) = xmmword_1968DF5D0;
        *(_OWORD *)(v34 + 80) = 0u;
        *(_OWORD *)(v34 + 96) = 0u;
        *(_OWORD *)(v34 + 112) = xmmword_1968DF5D0;
        v96 = v34;
        *(_QWORD *)(v34 + 128) = 1024;
        v7 = WTF::fastMalloc((WTF *)0xD0);
        v35 = v108;
        v108 = 0;
        v93 = v105;
        v94 = v35;
        v105 = 0;
        v95 = *(_BYTE *)(a3 + 24);
        v36 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v36 = 0;
        *(_OWORD *)(v36 + 8) = xmmword_19689B170;
        *(_QWORD *)(v36 + 24) = v7;
        *(_QWORD *)v7 = off_1E336EDE8;
        *(_QWORD *)(v7 + 8) = v36;
        v37 = a1;
        if (!*(_BYTE *)(a1 + 274))
        {
          v38 = a1 - 192;
          v39 = *(_QWORD *)(a1 + 512);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 8);
            if (v40)
              v38 = v40;
          }
          v37 = v38 + 192;
        }
        *(_QWORD *)(v7 + 16) = &off_1E33A18C0;
        *(_QWORD *)(v7 + 24) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v7 + 16), (WebCore::ScriptExecutionContext *)v37);
        *(_QWORD *)(v7 + 16) = &off_1E33A0540;
        *(_QWORD *)(v7 + 32) = 0;
        if (*(_BYTE *)(v37 + 278))
        {
          __break(0xC471u);
          JUMPOUT(0x1955C9A8CLL);
        }
        v92 = (WebCore::ActiveDOMObject *)(v7 + 16);
        v115 = v7 + 16;
        WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v37 + 128), &v115, (uint64_t)v114);
        *(_QWORD *)v7 = off_1E336EF18;
        *(_QWORD *)(v7 + 16) = &unk_1E336EF68;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *(_OWORD *)(v7 + 72) = 0u;
        *(_QWORD *)(v7 + 88) = v94;
        *(_QWORD *)(v7 + 96) = v93;
        *(_BYTE *)(v7 + 104) = 0;
        MEMORY[0x19AEA3294](v114, *(_QWORD *)(v15 + 56));
        v42 = *(_DWORD *)(v15 + 1164);
        if (v42)
          v43 = (JSC::VM *)(16 * (v42 & 0xFFFFFFFE));
        else
          v43 = 0;
        v44 = JSC::JSPromise::create(*(JSC::JSPromise **)(v15 + 56), v43, v41);
        a3 = WTF::fastMalloc((WTF *)0x30);
        v45 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)a3, v15, v44);
        *(_QWORD *)v45 = &off_1E3226868;
        *((_DWORD *)v45 + 10) = 0;
        *((_BYTE *)v45 + 44) = 0;
        v46 = *((_QWORD *)v45 + 3);
        if (!v46 || (v47 = *(_QWORD *)v46) == 0 || (*(_BYTE *)(v46 + 8) & 3) != 0)
        {
          v48 = 10;
          goto LABEL_59;
        }
        if ((v47 & 0xFFFE000000000002) == 0)
        {
          if (*(_BYTE *)(v47 + 5) == 68)
            v48 = *(_QWORD *)v46;
          else
            v48 = 0;
          goto LABEL_59;
        }
LABEL_150:
        v48 = 0;
LABEL_59:
        v49 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
        v50 = WebCore::DOMGuardedObject::DOMGuardedObject(v49, v15, v48);
        *(_QWORD *)v50 = &off_1E3251870;
        *(_QWORD *)(v7 + 112) = v50;
        *(_QWORD *)(v7 + 120) = a3;
        v51 = MEMORY[0x19AEA32A0](v114);
        *(_BYTE *)(v7 + 128) = 0;
        *(_BYTE *)(v7 + 129) = v95;
        MEMORY[0x19AEA3294](v51, *(_QWORD *)(v15 + 56));
        v53 = *(_DWORD *)(v15 + 1164);
        if (v53)
          v54 = (JSC::VM *)(16 * (v53 & 0xFFFFFFFE));
        else
          v54 = 0;
        v55 = JSC::JSPromise::create(*(JSC::JSPromise **)(v15 + 56), v54, v52);
        v56 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
        v57 = WebCore::DOMGuardedObject::DOMGuardedObject(v56, v15, v55);
        *(_QWORD *)v57 = &off_1E3226868;
        *((_DWORD *)v57 + 10) = 0;
        *((_BYTE *)v57 + 44) = 0;
        v58 = *((_QWORD *)v57 + 3);
        if (v58 && (v59 = *(_QWORD *)v58) != 0 && (*(_BYTE *)(v58 + 8) & 3) == 0)
        {
          if ((v59 & 0xFFFE000000000002) != 0)
          {
            v60 = 0;
          }
          else if (*(_BYTE *)(v59 + 5) == 68)
          {
            v60 = *(_QWORD *)v58;
          }
          else
          {
            v60 = 0;
          }
        }
        else
        {
          v60 = 10;
        }
        v61 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
        v62 = WebCore::DOMGuardedObject::DOMGuardedObject(v61, v15, v60);
        *(_QWORD *)v62 = &off_1E3251870;
        *(_QWORD *)(v7 + 136) = v62;
        *(_QWORD *)(v7 + 144) = v56;
        v63 = MEMORY[0x19AEA32A0](v114);
        MEMORY[0x19AEA3294](v63, *(_QWORD *)(v15 + 56));
        v65 = *(_DWORD *)(v15 + 1164);
        if (v65)
          v66 = (JSC::VM *)(16 * (v65 & 0xFFFFFFFE));
        else
          v66 = 0;
        v67 = JSC::JSPromise::create(*(JSC::JSPromise **)(v15 + 56), v66, v64);
        v68 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
        v69 = WebCore::DOMGuardedObject::DOMGuardedObject(v68, v15, v67);
        *(_QWORD *)v69 = &off_1E3226868;
        *((_DWORD *)v69 + 10) = 0;
        *((_BYTE *)v69 + 44) = 0;
        v70 = *((_QWORD *)v69 + 3);
        if (v70 && (v71 = *(_QWORD *)v70) != 0 && (*(_BYTE *)(v70 + 8) & 3) == 0)
        {
          if ((v71 & 0xFFFE000000000002) != 0)
          {
            v72 = 0;
          }
          else if (*(_BYTE *)(v71 + 5) == 68)
          {
            v72 = *(_QWORD *)v70;
          }
          else
          {
            v72 = 0;
          }
        }
        else
        {
          v72 = 10;
        }
        v73 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
        v74 = WebCore::DOMGuardedObject::DOMGuardedObject(v73, v15, v72);
        *(_QWORD *)v74 = &off_1E3251870;
        *(_QWORD *)(v7 + 152) = v74;
        *(_QWORD *)(v7 + 160) = v68;
        MEMORY[0x19AEA32A0](v114);
        *(_QWORD *)(v7 + 168) = v96;
        *(_QWORD *)(v7 + 176) = 0;
        *(_QWORD *)(v7 + 184) = v6;
        *(_QWORD *)(v7 + 192) = v5;
        *(_QWORD *)(v7 + 200) = v16;
        v76 = *(_QWORD *)(v7 + 8);
        if (!v76)
        {
          v79 = 0;
          v78 = v92;
          goto LABEL_93;
        }
        v77 = __ldaxr((unsigned __int8 *)v76);
        v78 = v92;
        if (v77)
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v76))
        {
          goto LABEL_86;
        }
        MEMORY[0x19AEA534C](v76);
LABEL_86:
        if (*(_QWORD *)(v76 + 24))
        {
          ++*(_QWORD *)(v76 + 16);
          v79 = v76;
        }
        else
        {
          v79 = 0;
        }
        v80 = __ldxr((unsigned __int8 *)v76);
        if (v80 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v76))
          {
LABEL_93:
            v81 = *v98;
            *v98 = v79;
            if (!v81)
              goto LABEL_106;
            if (__ldaxr((unsigned __int8 *)v81))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v81))
            {
              goto LABEL_98;
            }
            MEMORY[0x19AEA534C](v81);
LABEL_98:
            v83 = *(_QWORD *)(v81 + 16) - 1;
            *(_QWORD *)(v81 + 16) = v83;
            if (v83)
            {
              v91 = __ldxr((unsigned __int8 *)v81);
              if (v91 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v81))
                  goto LABEL_106;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v81);
              goto LABEL_106;
            }
            v84 = *(_QWORD *)(v81 + 8);
            v85 = __ldxr((unsigned __int8 *)v81);
            if (v85 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v81))
              {
LABEL_104:
                if (!v84)
                  WTF::fastFree((WTF *)v81, v75);
LABEL_106:
                *(_QWORD *)(v4 + 24) = v7;
                WebCore::ActiveDOMObject::suspendIfNeeded(v78);
                v86 = *(_QWORD *)(v7 + 8);
                if (__ldaxr((unsigned __int8 *)v86))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v86))
                {
                  goto LABEL_110;
                }
                MEMORY[0x19AEA534C](v86);
LABEL_110:
                ++*(_QWORD *)(v86 + 8);
                v88 = __ldxr((unsigned __int8 *)v86);
                if (v88 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v86))
                  {
LABEL_115:
                    v89 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                    *(_QWORD *)v89 = &off_1E336EE80;
                    *((_QWORD *)v89 + 1) = v7;
                    *((_QWORD *)v89 + 2) = v7;
                    v114[0] = v89;
                    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v97 + 8))(v97, a1, &v111, v114);
                    v90 = v114[0];
                    v114[0] = 0;
                    if (v90)
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v90 + 8))(v90);
                    v6 = 0;
                    v5 = 0;
                    v16 = 0;
                    *(_QWORD *)a4 = v7;
                    *(_DWORD *)(a4 + 16) = 0;
                    LODWORD(v7) = v101;
                    if (v101 == -1)
                      goto LABEL_119;
                    goto LABEL_118;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v86);
                goto LABEL_115;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v81);
            goto LABEL_104;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v76);
        goto LABEL_93;
      }
      v30 = 0;
      v29 = 8;
    }
    *(_BYTE *)a4 = v29;
    *(_QWORD *)(a4 + 8) = v30;
    *(_DWORD *)(a4 + 16) = 1;
LABEL_118:
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336EDB8[v7])(v114, &v99);
LABEL_119:
    if (*(_DWORD *)(v4 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    else
      --*(_DWORD *)(v4 + 8);
LABEL_121:
    if (v104 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336EDC8[v104])(v114, &v102);
    if (v6)
    {
      if (*(_DWORD *)(v6 + 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      else
        --*(_DWORD *)(v6 + 32);
    }
    v24 = v107;
    if (v107 == -1)
    {
LABEL_128:
      if (v5)
      {
        if (*((_DWORD *)v5 + 8) == 1)
          (*(void (**)(_QWORD *))(*v5 + 8))(v5);
        else
          --*((_DWORD *)v5 + 8);
      }
      v20 = v110;
      if (v110 == -1)
        goto LABEL_133;
      goto LABEL_132;
    }
LABEL_127:
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336EDC8[v24])(v114, &v105);
    goto LABEL_128;
  }
  if (v110 != 1)
  {
LABEL_149:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_150;
  }
  v19 = v109;
  v109 = 0;
  *(_BYTE *)a4 = v108;
  *(_QWORD *)(a4 + 8) = v19;
  v20 = 1;
  *(_DWORD *)(a4 + 16) = 1;
LABEL_132:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E336EDC8[v20])(v114, &v108);
LABEL_133:
  if (v16)
  {
    if (*((_DWORD *)v16 + 8) == 1)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 8);
  }
LABEL_8:
  result = v111;
  v111 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::WebTransport::~WebTransport(WebCore::WebTransport *this, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  WebCore::WebTransportDatagramDuplexStream *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  _DWORD *v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  _DWORD *v33;
  _DWORD *v34;

  *(_QWORD *)this = off_1E336EF18;
  *((_QWORD *)this + 2) = &unk_1E336EF68;
  v3 = (WebCore::WebTransport *)((char *)this + 16);
  v4 = (_DWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
  {
    if (v4[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[8];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (v5[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[8];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v6)
  {
    if (v6[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[8];
  }
  v7 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = (WebCore::WebTransportDatagramDuplexStream *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::WebTransportDatagramDuplexStream::~WebTransportDatagramDuplexStream(v8, a2);
      WTF::fastFree(v31, v32);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[4];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v10)
  {
    if (v10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[4];
  }
  v11 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[4];
  }
  v12 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[4];
  }
  v13 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v13)
  {
    if (v13[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
    else
      --v13[4];
  }
  v14 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[4];
  }
  v15 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v33 = (_DWORD *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v33)
      {
        if (v33[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
        else
          --v33[4];
      }
      WTF::fastFree(v15, a2);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  v16 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v34 = (_DWORD *)*((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = 0;
      if (v34)
      {
        if (v34[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
        else
          --v34[4];
      }
      WTF::fastFree(v16, a2);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  v17 = (WTF *)*((_QWORD *)this + 9);
  while (v17)
  {
    v18 = v17;
    v17 = (WTF *)*((_QWORD *)v17 + 2);
    v19 = *(WTF **)v18;
    *(_QWORD *)v18 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        v20 = (_DWORD *)*((_QWORD *)v19 + 1);
        *((_QWORD *)v19 + 1) = 0;
        if (v20)
        {
          if (v20[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
          else
            --v20[4];
        }
        WTF::fastFree(v19, a2);
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
    WTF::fastFree(v18, a2);
  }
  v21 = *((_QWORD *)this + 8);
  if (v21)
    WTF::fastFree((WTF *)(v21 - 16), a2);
  v22 = (WTF *)*((_QWORD *)this + 6);
  while (v22)
  {
    v23 = v22;
    v22 = (WTF *)*((_QWORD *)v22 + 2);
    v24 = *(WTF **)v23;
    *(_QWORD *)v23 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        v25 = (_DWORD *)*((_QWORD *)v24 + 2);
        *((_QWORD *)v24 + 2) = 0;
        if (v25)
        {
          if (v25[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
          else
            --v25[4];
        }
        v26 = *((_QWORD *)v24 + 1);
        if (v26)
        {
          *(_QWORD *)(v26 + 8) = 0;
          v27 = (unsigned int *)*((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, a2);
            }
          }
        }
        else
        {
          *((_QWORD *)v24 + 1) = 0;
        }
        WTF::fastFree(v24, a2);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    WTF::fastFree(v23, a2);
  }
  v30 = *((_QWORD *)this + 5);
  if (v30)
    WTF::fastFree((WTF *)(v30 - 16), a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::WebTransport::~WebTransport(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::WebTransport::~WebTransport(WebCore::WebTransport *this, void *a2)
{
  WebCore::WebTransport::~WebTransport((WebCore::WebTransport *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::WebTransport::~WebTransport((WebCore::WebTransport *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::WebTransport::virtualHasPendingActivity(WebCore::WebTransport *this)
{
  return *((unsigned __int8 *)this + 104) < 2u;
}

BOOL `non-virtual thunk to'WebCore::WebTransport::virtualHasPendingActivity(WebCore::WebTransport *this)
{
  return *((unsigned __int8 *)this + 88) < 2u;
}

uint64_t WebCore::WebTransport::receiveDatagram(uint64_t result, const void *a2, JSC::ArrayBuffer *this)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(result + 184);
  if (!*(_BYTE *)(v3 + 36))
  {
    JSC::ArrayBuffer::tryCreateUninitialized(this);
    if (!v14)
      goto LABEL_8;
    v6 = v14[2];
    if (v6)
    {
      v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v7)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
          goto LABEL_25;
LABEL_6:
        v6 = (v6 & 0x3FFFFFFFFLL) + v7;
      }
    }
    while (1)
    {
      memcpy((void *)v6, a2, (size_t)this);
LABEL_8:
      if (*(_BYTE *)(v3 + 24))
        break;
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_25:
      if (!*MEMORY[0x1E0CC10F0])
        goto LABEL_6;
    }
    result = WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v3 + 16), &v14);
    if ((result & 1) == 0)
      *(_BYTE *)(v3 + 36) = 1;
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      v9 = *(_DWORD *)v8 == 2;
      *(_DWORD *)v8 -= 2;
      if (v9)
      {
        v10 = v8[10];
        if (v10)
        {
          *(_QWORD *)(v10 + 8) = 3;
          v8[10] = 0;
        }
        if ((v8[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v8 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v8 + 2));
        v12 = (WTF *)v8[1];
        if ((v12 & 1) == 0 && v12)
        {
          v13 = *(WTF **)v12;
          if (*(_QWORD *)v12)
          {
            *(_QWORD *)v12 = 0;
            *((_DWORD *)v12 + 2) = 0;
            WTF::fastFree(v13, v11);
          }
          WTF::fastFree(v12, v11);
        }
        return WTF::fastFree((WTF *)v8, v11);
      }
    }
  }
  return result;
}

uint64_t WebCore::WebTransport::close(uint64_t result, unsigned int *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF *v24;
  WTF::StringImpl *v25[2];
  char v26;
  WTF *v27;

  if (*(unsigned __int8 *)(result + 104) - 3 < 2)
    return result;
  v3 = result;
  if (!*(_BYTE *)(result + 104))
  {
    v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v4 += 2;
    v5 = WTF::fastMalloc((WTF *)0x30);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E334F098;
    *(_BYTE *)(v5 + 12) = 0;
    v7 = v25[0];
    if (v25[0])
      *(_DWORD *)v25[0] += 2;
    *(_QWORD *)(v5 + 16) = v7;
    if (v4)
      *(_DWORD *)v4 += 2;
    *(_QWORD *)(v5 + 24) = v4;
    v25[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_QWORD *)v5 = off_1E336EFC0;
    *(_BYTE *)(v5 + 32) = 1;
    *(_BYTE *)(v5 + 36) = 0;
    *(_BYTE *)(v5 + 40) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v6);
      else
        *(_DWORD *)v4 -= 2;
    }
    LOBYTE(v25[0]) = 0;
    v26 = 0;
    result = (uint64_t)WebCore::WebTransport::cleanup(v3, (unsigned __int8 *)v25);
    if (*(_DWORD *)(v5 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    --*(_DWORD *)(v5 + 8);
    return result;
  }
  v9 = *(_QWORD *)(result + 176);
  *(_QWORD *)(result + 176) = 0;
  if (v9)
  {
    v10 = *a2;
    WTF::String::utf8();
    v11 = v23;
    if (v23 && *((_QWORD *)v23 + 1) >= 0x401uLL)
    {
      WTF::CString::CString();
      v13 = v23;
      v24 = v25[0];
      v25[0] = 0;
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        v25[0] = 0;
      }
      else
      {
        --*(_DWORD *)v13;
      }
      while (1)
      {
        v11 = v24;
        if (!v24 || !*((_QWORD *)v24 + 1))
          goto LABEL_36;
        result = WTF::String::fromUTF8();
        v15 = v25[0];
        if (v25[0])
          break;
        if (!*((_QWORD *)v24 + 1))
        {
          __break(1u);
          return result;
        }
        WTF::CString::CString();
        v17 = v27;
        v27 = 0;
        v18 = v24;
        v24 = v17;
        if (*(_DWORD *)v18 == 1)
        {
          WTF::fastFree(v18, v14);
          v27 = 0;
        }
        else
        {
          --*(_DWORD *)v18;
        }
        v16 = v25[0];
        v25[0] = 0;
        if (v16)
          goto LABEL_30;
LABEL_32:
        if (v15)
          goto LABEL_37;
      }
      v2 = v24;
      v24 = 0;
      v25[0] = 0;
      v16 = v15;
LABEL_30:
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v16 -= 2;
      goto LABEL_32;
    }
LABEL_36:
    v24 = 0;
    v2 = v11;
LABEL_37:
    v25[0] = v2;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 56))(v9, v10, v25);
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, v19);
      else
        --*(_DWORD *)v20;
    }
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, v19);
      else
        --*(_DWORD *)v24;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  }
  WebCore::DOMException::create(0x10u, MEMORY[0x1E0CBF738], (uint64_t *)&v27);
  LODWORD(v25[0]) = *a2;
  v21 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v25[1] = v21;
  v26 = 1;
  WebCore::WebTransport::cleanup(v3, (unsigned __int8 *)v25);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

WTF::StringImpl *WebCore::WebTransport::cleanup(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF *v19;
  WTF *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned __int8 v43[8];
  WTF::StringImpl *v44;
  objc_class *v45;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(WTF **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  while (v5)
  {
    v6 = v5;
    v5 = (WTF *)*((_QWORD *)v5 + 2);
    v7 = *(WTF **)v6;
    *(_QWORD *)v6 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        v8 = (_DWORD *)*((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 2) = 0;
        if (v8)
        {
          if (v8[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
          else
            --v8[4];
        }
        v9 = *((_QWORD *)v7 + 1);
        if (v9)
        {
          *(_QWORD *)(v9 + 8) = 0;
          v10 = (unsigned int *)*((_QWORD *)v7 + 1);
          *((_QWORD *)v7 + 1) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              WTF::fastFree((WTF *)v10, a2);
            }
          }
        }
        else
        {
          *((_QWORD *)v7 + 1) = 0;
        }
        WTF::fastFree(v7, a2);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
    WTF::fastFree(v6, a2);
  }
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(uint64_t **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v14)
  {
    v15 = v14;
    do
    {
      v16 = *v15;
      v43[0] = 15;
      v44 = 0;
      WebCore::InternalReadableStream::cancel(*(_QWORD *)(v16 + 8), v43);
      v17 = v44;
      v44 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      v15 = (uint64_t *)v15[2];
    }
    while (v15);
    do
    {
      v19 = (WTF *)v14;
      v14 = (uint64_t *)v14[2];
      v20 = *(WTF **)v19;
      *(_QWORD *)v19 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          v18 = (_DWORD *)*((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v18)
          {
            if (v18[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
            else
              --v18[4];
          }
          WTF::fastFree(v20, a2);
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
      WTF::fastFree(v19, a2);
    }
    while (v14);
  }
  if (v13)
    WTF::fastFree((WTF *)(v13 - 16), a2);
  v21 = a2[16];
  v22 = *(_QWORD *)(a1 + 144);
  if (v21)
  {
    v23 = *(_QWORD *)(v22 + 24);
    if (v23 && *(_QWORD *)v23 && (*(_BYTE *)(v23 + 8) & 3) == 0)
    {
      v24 = *(_QWORD *)(v22 + 32);
      if (!v24 || (*(_BYTE *)(v24 + 8) & 3) != 0)
        v25 = 0;
      else
        v25 = *(uint64_t **)v24;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v22, v25, 0, (objc_class *)0xA);
      MEMORY[0x19AEA32A0](v43);
    }
    v26 = *(_QWORD *)(a1 + 88);
    v43[0] = 15;
    v44 = 0;
    WebCore::InternalReadableStream::cancel(*(_QWORD *)(v26 + 8), v43);
    v28 = v44;
    v44 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = *(_QWORD *)(a1 + 96);
    v43[0] = 15;
    v44 = 0;
    WebCore::InternalReadableStream::cancel(*(_QWORD *)(v29 + 8), v43);
    result = v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      else
        *(_DWORD *)result -= 2;
    }
    v32 = 3;
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v43[0] = 15;
    WebCore::DeferredPromise::reject(v22, v43, 0, &v45);
    v34 = v44;
    v44 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = *(_QWORD *)(a1 + 120);
    v44 = 0;
    v45 = 0;
    v43[0] = 15;
    WebCore::DeferredPromise::reject(v35, v43, 0, &v45);
    v37 = v44;
    v44 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = *(_QWORD *)(a1 + 88);
    v43[0] = 15;
    v44 = 0;
    WebCore::InternalReadableStream::cancel(*(_QWORD *)(v38 + 8), v43);
    v40 = v44;
    v44 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = *(_QWORD *)(a1 + 96);
    v43[0] = 15;
    v44 = 0;
    WebCore::InternalReadableStream::cancel(*(_QWORD *)(v41 + 8), v43);
    result = v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
      else
        *(_DWORD *)result -= 2;
    }
    v32 = 4;
  }
  *(_BYTE *)(a1 + 104) = v32;
  return result;
}

WTF::StringImpl *WebCore::WebTransport::createBidirectionalStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;

  if (*(unsigned __int8 *)(a1 + 104) - 3 >= 2 && (v4 = *(_QWORD *)(a1 + 176)) != 0)
  {
    v6 = *a4;
    *a4 = 0;
    v7 = *(_QWORD *)(a2 + 104);
    if (v7)
      goto LABEL_20;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2 + 96;
    v14 = *(unsigned int **)(a2 + 104);
    *(_QWORD *)(a2 + 104) = v7;
    if (!v14)
      goto LABEL_20;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v7 = *(_QWORD *)(a2 + 104);
    if (v7)
    {
LABEL_20:
      do
        v8 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v8 + 1, (unsigned int *)v7));
    }
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = &off_1E336EEA8;
    *((_QWORD *)v9 + 1) = v6;
    *((_QWORD *)v9 + 2) = v7;
    v17 = v9;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 48))(v4, &v17);
    result = v17;
    v17 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v11 = *a4;
    v17 = 0;
    WebCore::DeferredPromise::reject(v11, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v17, 0);
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebTransport::createUnidirectionalStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;

  if (*(unsigned __int8 *)(a1 + 104) - 3 >= 2 && (v4 = *(_QWORD *)(a1 + 176)) != 0)
  {
    v6 = *a4;
    *a4 = 0;
    v7 = *(_QWORD *)(a2 + 104);
    if (v7)
      goto LABEL_20;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = a2 + 96;
    v14 = *(unsigned int **)(a2 + 104);
    *(_QWORD *)(a2 + 104) = v7;
    if (!v14)
      goto LABEL_20;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
    v7 = *(_QWORD *)(a2 + 104);
    if (v7)
    {
LABEL_20:
      do
        v8 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v8 + 1, (unsigned int *)v7));
    }
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = &off_1E336EEF0;
    *((_QWORD *)v9 + 1) = v6;
    *((_QWORD *)v9 + 2) = v7;
    v17 = v9;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 40))(v4, &v17);
    result = v17;
    v17 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v11 = *a4;
    v17 = 0;
    WebCore::DeferredPromise::reject(v11, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v17, 0);
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::WebTransportBidirectionalStreamConstructionParameters::WebTransportBidirectionalStreamConstructionParameters(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  *result = v3;
  v4 = *a3;
  *a3 = 0;
  result[1] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  *result = v3;
  v4 = *a3;
  *a3 = 0;
  result[1] = v4;
  return result;
}

_QWORD *WebCore::WebTransportBidirectionalStreamConstructionParameters::WebTransportBidirectionalStreamConstructionParameters(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  v3 = a2[1];
  a2[1] = 0;
  result[1] = v3;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  v3 = a2[1];
  a2[1] = 0;
  result[1] = v3;
  return result;
}

uint64_t *WebCore::WebTransportBidirectionalStreamConstructionParameters::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = a2[1];
  a2[1] = 0;
  v7 = (_DWORD *)a1[1];
  a1[1] = v6;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  return a1;
}

void WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters(WebCore::WebTransportBidirectionalStreamConstructionParameters *this)
{
  _DWORD *v2;
  uint64_t v3;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

{
  _DWORD *v2;
  uint64_t v3;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

uint64_t WebCore::WebTransportBidirectionalStreamSource::doCancel(uint64_t this)
{
  *(_BYTE *)(this + 36) = 1;
  return this;
}

void WebCore::WebTransportDatagramDuplexStream::~WebTransportDatagramDuplexStream(WebCore::WebTransportDatagramDuplexStream *this, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  WTF *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _DWORD *v40;

  v3 = *((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 11);
  v5 = *((_QWORD *)this + 12);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_24;
    v9 = v5 + 32 * v3;
    v10 = 32 * v4 - 32 * v3;
    do
    {
      v11 = *(_DWORD **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      v12 = *(WTF **)v9;
      if (*(_QWORD *)v9)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        WTF::fastFree(v12, a2);
      }
      v9 += 32;
      v10 -= 32;
    }
    while (v10);
  }
  else
  {
    if (v4)
    {
      v6 = 32 * v4;
      do
      {
        v7 = *(_DWORD **)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        if (v7)
        {
          if (v7[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
          else
            --v7[4];
        }
        v8 = *(WTF **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
          WTF::fastFree(v8, a2);
        }
        v5 += 32;
        v6 -= 32;
      }
      while (v6);
      v5 = *((_QWORD *)this + 12);
      v3 = *((_QWORD *)this + 10);
    }
    v13 = *((unsigned int *)this + 26);
    if (v3 != v13)
    {
      v31 = v5 + 32 * v3;
      v32 = 32 * v13 - 32 * v3;
      do
      {
        v33 = *(_DWORD **)(v31 + 24);
        *(_QWORD *)(v31 + 24) = 0;
        if (v33)
        {
          if (v33[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
          else
            --v33[4];
        }
        v34 = *(WTF **)v31;
        if (*(_QWORD *)v31)
        {
          *(_QWORD *)v31 = 0;
          *(_DWORD *)(v31 + 8) = 0;
          WTF::fastFree(v34, a2);
        }
        v31 += 32;
        v32 -= 32;
      }
      while (v32);
    }
  }
  v5 = *((_QWORD *)this + 12);
LABEL_24:
  if (v5)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  v14 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[4];
  }
  v15 = *((_QWORD *)this + 3);
  v16 = *((_QWORD *)this + 4);
  v17 = (WTF *)*((_QWORD *)this + 5);
  if (v15 <= v16)
  {
    if (v15 == v16)
      goto LABEL_48;
    v25 = 3 * v15;
    v26 = (_DWORD *)((char *)v17 + 8 * v25);
    v27 = 24 * v16 - 8 * v25;
    do
    {
      v28 = *(WTF **)v26;
      if (*(_QWORD *)v26)
      {
        *(_QWORD *)v26 = 0;
        v26[2] = 0;
        WTF::fastFree(v28, a2);
      }
      v26 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  else
  {
    if (v16)
    {
      v18 = 24 * v16;
      do
      {
        v19 = *(WTF **)v17;
        if (*(_QWORD *)v17)
        {
          *(_QWORD *)v17 = 0;
          *((_DWORD *)v17 + 2) = 0;
          WTF::fastFree(v19, a2);
        }
        v17 = (WTF *)((char *)v17 + 24);
        v18 -= 24;
      }
      while (v18);
      v17 = (WTF *)*((_QWORD *)this + 5);
      v15 = *((_QWORD *)this + 3);
    }
    v20 = *((unsigned int *)this + 12);
    if (v15 != v20)
    {
      v21 = 3 * v15;
      v22 = (_DWORD *)((char *)v17 + 8 * v21);
      v23 = 24 * v20 - 8 * v21;
      do
      {
        v24 = *(WTF **)v22;
        if (*(_QWORD *)v22)
        {
          *(_QWORD *)v22 = 0;
          v22[2] = 0;
          WTF::fastFree(v24, a2);
        }
        v22 += 6;
        v23 -= 24;
      }
      while (v23);
    }
  }
  v17 = (WTF *)*((_QWORD *)this + 5);
LABEL_48:
  if (v17)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v17, a2);
  }
  v29 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
    {
      v35 = (_DWORD *)*((_QWORD *)v29 + 2);
      *((_QWORD *)v29 + 2) = 0;
      if (v35)
      {
        if (v35[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
        else
          --v35[4];
      }
      v36 = *((_QWORD *)v29 + 1);
      if (v36)
      {
        *(_QWORD *)(v36 + 8) = 0;
        v37 = (unsigned int *)*((_QWORD *)v29 + 1);
        *((_QWORD *)v29 + 1) = 0;
        if (v37)
        {
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v37);
            WTF::fastFree((WTF *)v37, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v29 + 1) = 0;
      }
      WTF::fastFree(v29, a2);
    }
    else
    {
      --*(_DWORD *)v29;
    }
  }
  v30 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      v40 = (_DWORD *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = 0;
      if (v40)
      {
        if (v40[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 16))(v40);
        else
          --v40[4];
      }
      WTF::fastFree(v30, a2);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
}

void WebCore::WebTransportBidirectionalStreamSource::~WebTransportBidirectionalStreamSource(WebCore::WebTransportBidirectionalStreamSource *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(_DWORD **)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[4];
    }
    WTF::fastFree(v2, a2);
  }
}

{
  WTF *v3;
  _DWORD *v4;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebTransport::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::WebTransport::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebTransport::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebTransport::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

void WebCore::WebTransportError::~WebTransportError(WebCore::WebTransportError *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DatagramSink::write(WebCore::ScriptExecutionContext &,JSC::JSValue,WebCore::DOMPromiseDeferred<void> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<JSC::ArrayBufferView,WTF::RefPtr<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;

  v2 = *a2;
  v3 = **a1;
  v4 = *(_QWORD *)(*a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v5)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v4 = (v4 & 0x3FFFFFFFFLL) + v5;
    }
  }
  if (*(_BYTE *)(v2 + 64) && (v11 = *(_QWORD *)(v2 + 32)) != 0)
    v6 = *(_QWORD *)(v11 + 32);
  else
    v6 = *(_QWORD *)(v2 + 48);
  v7 = (uint64_t *)(*a1)[1];
  v8 = *v7;
  *v7 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E336EE30;
  v9[1] = v8;
  v12 = v9;
  WebCore::DatagramSink::send(v3, v4, v6, (uint64_t *)&v12);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DatagramSink::write(WebCore::ScriptExecutionContext &,JSC::JSValue,WebCore::DOMPromiseDeferred<void> &&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,std::__variant_detail::__base<JSC::ArrayBufferView,WTF::RefPtr<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>>> &&>(uint64_t **a1, JSC::ArrayBufferView **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v2 = *a1;
  v3 = **a1;
  v4 = JSC::ArrayBufferView::span(*a2);
  v6 = v5;
  v7 = (uint64_t *)v2[1];
  v8 = *v7;
  *v7 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E336EE58;
  v9[1] = v8;
  v11 = v9;
  WebCore::DatagramSink::send(v3, v4, v6, (uint64_t *)&v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12DatagramSink5writeERNS2_22ScriptExecutionContextEN3JSC7JSValueEONS2_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS6_11ArrayBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEEDaOT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E336EE30;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12DatagramSink5writeERNS2_22ScriptExecutionContextEN3JSC7JSValueEONS2_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS6_11ArrayBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336EE30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12DatagramSink5writeERNS2_22ScriptExecutionContextEN3JSC7JSValueEONS2_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS6_11ArrayBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = *(_QWORD *)(v1 + 32);
    if (!v3 || (*(_BYTE *)(v3 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(uint64_t **)v3;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v1, v4, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12DatagramSink5writeERNS2_22ScriptExecutionContextEN3JSC7JSValueEONS2_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS6_15ArrayBufferViewENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEEDaOT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E336EE58;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12DatagramSink5writeERNS2_22ScriptExecutionContextEN3JSC7JSValueEONS2_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS6_15ArrayBufferViewENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E336EE58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12DatagramSink5writeERNS2_22ScriptExecutionContextEN3JSC7JSValueEONS2_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS6_15ArrayBufferViewENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = *(_QWORD *)(v1 + 32);
    if (!v3 || (*(_BYTE *)(v3 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(uint64_t **)v3;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v1, v4, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *a1 = &off_1E336EE80;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = &off_1E336EE80;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::WebTransport::initializeOverHTTP(WebCore::SocketProvider &,WebCore::ScriptExecutionContext &,WTF::URL &&,BOOL,BOOL,WebCore::WebTransportCongestionControl,WTF::Vector<WebCore::WebTransportHash,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE v15[8];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  result = *(uint64_t **)(v2 + 176);
  *(_QWORD *)(v2 + 176) = v3;
  if (result)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 24))(result);
    v3 = *(_QWORD *)(v2 + 176);
  }
  if (v3)
  {
    result = WTF::ThreadSafeWeakPtr<WebCore::WebTransportSessionClient>::operator=<WebCore::WebTransportSessionClient,(void *)0>((uint64_t *)(v3 + 8), (_QWORD *)v2);
    *(_BYTE *)(v2 + 104) = 1;
    v5 = *(_QWORD *)(v2 + 120);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = *(_QWORD *)(v5 + 32);
      if (!v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
        v8 = 0;
      else
        v8 = *(uint64_t **)v7;
      JSC::JSLockHolder::JSLockHolder();
      v9 = v5;
      v10 = v8;
      v11 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    *(_BYTE *)(v2 + 104) = 4;
    v12 = *(_QWORD *)(v2 + 120);
    v13 = *(_QWORD *)(v12 + 24);
    if (v13 && *(_QWORD *)v13 && (*(_BYTE *)(v13 + 8) & 3) == 0)
    {
      v14 = **(uint64_t ***)(v12 + 32);
      JSC::JSLockHolder::JSLockHolder();
      v9 = v12;
      v10 = v14;
      v11 = 1;
LABEL_11:
      WebCore::DeferredPromise::callFunction(v9, v10, v11, (objc_class *)0xA);
      return (uint64_t *)MEMORY[0x19AEA32A0](v15);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebTransport::createBidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E336EEA8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebTransport::createBidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E336EEA8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::WebTransport::createBidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&>::call(WTF *result, WTF *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  JSC::Structure *v7;
  JSC::JSLock *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  objc_class *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  WTF *v46;
  WTF::StringImpl *v47;
  objc_class *v48;

  v3 = (uint64_t)result;
  if (*((_BYTE *)a2 + 16))
  {
    v4 = *((_QWORD *)result + 2);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = a2;
        result = (WTF *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v5 - 96));
        if (result)
        {
          v7 = result;
          v8 = *(JSC::JSLock **)(*((_QWORD *)result + 7) + 112);
          JSC::JSLock::lock(v8);
          v9 = *((unsigned __int8 *)v6 + 16);
          if (!*((_BYTE *)v6 + 16))
            goto LABEL_59;
          WebCore::WebTransportSendStream::create(v7, (WTF::StringImpl **)v6 + 1, (uint64_t)&v43);
          if (v8)
            JSC::JSLock::unlock(v8);
          if (v45)
          {
            if (v45 == 1)
            {
              v10 = *(_QWORD *)(v3 + 8);
              v11 = v44;
              v44 = 0;
              v46 = 0;
              LOBYTE(v40) = v43;
              if (v11)
                *(_DWORD *)v11 += 2;
              v41 = v11;
              WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v40, 0, &v46);
              v13 = v41;
              v41 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                {
                  WTF::StringImpl::destroy(v13, v12);
                  if (v11)
                  {
LABEL_16:
                    if (*(_DWORD *)v11 == 2)
                      WTF::StringImpl::destroy(v11, v12);
                    else
                      *(_DWORD *)v11 -= 2;
                  }
LABEL_18:
                  v14 = 1;
                  return (WTF *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E336EED0[v14])(&v40, &v43);
                }
                *(_DWORD *)v13 -= 2;
              }
              if (v11)
                goto LABEL_16;
              goto LABEL_18;
            }
            goto LABEL_63;
          }
          v8 = *(JSC::JSLock **)(*((_QWORD *)v7 + 7) + 112);
          JSC::JSLock::lock(v8);
          v9 = *((unsigned __int8 *)v6 + 16);
          if (*((_BYTE *)v6 + 16))
          {
            WebCore::WebTransportReceiveStream::create(v7, (WTF::StringImpl **)v6, (uint64_t)&v40);
            if (v8)
              JSC::JSLock::unlock(v8);
            if (v42)
            {
              if (v42 != 1)
              {
LABEL_63:
                std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_64;
              }
              v18 = *(_QWORD *)(v3 + 8);
              v19 = v41;
              v41 = 0;
              v48 = 0;
              LOBYTE(v46) = v40;
              if (v19)
                *(_DWORD *)v19 += 2;
              v47 = v19;
              WebCore::DeferredPromise::reject(v18, (unsigned __int8 *)&v46, 0, &v48);
              v21 = v47;
              v47 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                {
                  WTF::StringImpl::destroy(v21, v20);
                  if (v19)
                  {
LABEL_34:
                    if (*(_DWORD *)v19 == 2)
                      WTF::StringImpl::destroy(v19, v20);
                    else
                      *(_DWORD *)v19 -= 2;
                  }
LABEL_36:
                  v22 = 1;
LABEL_49:
                  result = (WTF *)((uint64_t (*)(WTF **, uint64_t *))off_1E336EEC0[v22])(&v46, &v40);
LABEL_50:
                  v14 = v45;
                  if (v45 == -1)
                    return result;
                  return (WTF *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E336EED0[v14])(&v40, &v43);
                }
                *(_DWORD *)v21 -= 2;
              }
              if (v19)
                goto LABEL_34;
              goto LABEL_36;
            }
            v23 = v40;
            v40 = 0;
            v24 = v43;
            v43 = 0;
            v25 = (WTF *)WTF::fastMalloc((WTF *)0x18);
            v6 = v25;
            *(_DWORD *)v25 = 1;
            *((_QWORD *)v25 + 1) = v23;
            *((_QWORD *)v25 + 2) = v24;
            v3 = *(_QWORD *)(v3 + 8);
            v27 = *(_QWORD *)(v3 + 24);
            if (!v27 || !*(_QWORD *)v27 || (*(_BYTE *)(v27 + 8) & 3) != 0)
            {
              WTF::RefCounted<WebCore::WebTransportBidirectionalStream>::deref(v25, v26);
              v22 = 0;
              goto LABEL_49;
            }
            v28 = *(_QWORD *)(v3 + 32);
            if (!v28 || (*(_BYTE *)(v28 + 8) & 3) != 0)
              v7 = 0;
            else
              v7 = *(JSC::Structure **)v28;
            v8 = (JSC::JSLock *)*((_QWORD *)v7 + 7);
            MEMORY[0x19AEA3294](&v48, v8);
            v29 = **(_QWORD **)(v3 + 32);
            ++*(_DWORD *)v6;
            v46 = v6;
            v31 = (objc_class *)WebCore::createWrapper<WebCore::WebTransportBidirectionalStream,WebCore::WebTransportBidirectionalStream>(v29, &v46);
            v32 = v46;
            v46 = 0;
            if (v32)
              WTF::RefCounted<WebCore::WebTransportBidirectionalStream>::deref(v32, v30);
            v9 = *((_QWORD *)v8 + 2);
            if (!v9)
            {
              WebCore::DeferredPromise::callFunction(v3, (uint64_t *)v7, 0, v31);
              v22 = 0;
              goto LABEL_48;
            }
          }
          else
          {
LABEL_59:
            __break(1u);
          }
          v39 = v9;
          v2 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v7);
          if (!(*(unsigned int (**)(_QWORD *))(*v2 + 64))(v2))
            goto LABEL_61;
LABEL_64:
          v34 = v2[43];
          if (*((_QWORD *)v8 + 3) == v39)
          {
LABEL_76:
            *(_BYTE *)(*(_QWORD *)(v34 + 8) + 93442) = 1;
            *(_BYTE *)(v3 + 44) = 1;
            goto LABEL_61;
          }
          if (!v34)
          {
LABEL_61:
            WebCore::reportException(v7, v39, 0, 0, 0);
            v22 = v42;
LABEL_48:
            MEMORY[0x19AEA32A0](&v48);
            result = WTF::RefCounted<WebCore::WebTransportBidirectionalStream>::deref(v6, v33);
            if (v22 == -1)
              goto LABEL_50;
            goto LABEL_49;
          }
          v35 = (unsigned __int8 *)(v34 + 40);
          if (__ldaxr((unsigned __int8 *)(v34 + 40)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v35))
          {
            goto LABEL_70;
          }
          MEMORY[0x19AEA534C](v34 + 40);
LABEL_70:
          v37 = *(unsigned __int8 *)(v34 + 41);
          v38 = __ldxr(v35);
          if (v38 == 1)
          {
            if (!__stlxr(0, v35))
            {
LABEL_75:
              if (v37)
                goto LABEL_76;
              goto LABEL_61;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)(v34 + 40));
          goto LABEL_75;
        }
      }
    }
  }
  v15 = *(_QWORD *)(v3 + 8);
  v16 = *(_QWORD *)(v15 + 24);
  if (v16 && *(_QWORD *)v16 && (*(_BYTE *)(v16 + 8) & 3) == 0)
  {
    v17 = **(uint64_t ***)(v15 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v15, v17, 1, (objc_class *)2);
    return (WTF *)MEMORY[0x19AEA32A0](&v43);
  }
  return result;
}

WTF *WTF::RefCounted<WebCore::WebTransportBidirectionalStream>::deref(WTF *this, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v5 = (_DWORD *)*((_QWORD *)v3 + 2);
        *((_QWORD *)v3 + 2) = 0;
        if (v5)
        {
          if (v5[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          else
            --v5[4];
        }
        v6 = *((_QWORD *)v3 + 1);
        if (v6)
        {
          *(_QWORD *)(v6 + 8) = 0;
          v7 = (unsigned int *)*((_QWORD *)v3 + 1);
          *((_QWORD *)v3 + 1) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              WTF::fastFree((WTF *)v7, a2);
            }
          }
        }
        else
        {
          *((_QWORD *)v3 + 1) = 0;
        }
        WTF::fastFree(v3, a2);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    v4 = (WTF *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v10 = (_DWORD *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v10)
        {
          if (v10[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
          else
            --v10[4];
        }
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25WebTransportReceiveStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
        else
          --v3[4];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25WebTransportReceiveStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22WebTransportSendStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
        else
          --v3[4];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22WebTransportSendStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::RefPtr<WebCore::WritableStreamSink,WebCore::DeferredPromise<WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0>,WTF::RawPtrTraits<WTF::Ref><WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E336EEF0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::RefPtr<WebCore::WritableStreamSink,WebCore::DeferredPromise<WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0>,WTF::RawPtrTraits<WTF::Ref><WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E336EEF0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::RefPtr<WebCore::WritableStreamSink,WebCore::DeferredPromise<WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0>,WTF::RawPtrTraits<WTF::Ref><WebCore::WebTransport::createUnidirectionalStream(WebCore::ScriptExecutionContext &,WebCore::WebTransportSendStreamOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0>> &&>::call(WTF::StringImpl *result, WTF **a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  JSC::Structure *v8;
  JSC::JSLock *v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  objc_class *v22;
  WTF *v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  WTF *v35;
  _QWORD *v36;
  int v38;
  int v39;
  WTF *v40;
  WTF *v41;
  int v42;
  WTF *v43;
  WTF::StringImpl *v44;
  objc_class *v45;

  v4 = result;
  if (*a2)
  {
    v5 = *((_QWORD *)result + 2);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = a2;
        result = (WTF::StringImpl *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v6 - 96));
        if (result)
        {
          v8 = result;
          v9 = *(JSC::JSLock **)(*((_QWORD *)result + 7) + 112);
          JSC::JSLock::lock(v9);
          v43 = *v7;
          *v7 = 0;
          WebCore::WebTransportSendStream::create(v8, &v43, (uint64_t)&v40);
          result = v43;
          v43 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
          if (v9)
            result = (WTF::StringImpl *)JSC::JSLock::unlock(v9);
          v11 = *((_QWORD *)v4 + 1);
          if (v42)
          {
            if (v42 == 1)
            {
              v4 = v41;
              v41 = 0;
              v45 = 0;
              LOBYTE(v43) = (_BYTE)v40;
              if (v4)
                *(_DWORD *)v4 += 2;
              v44 = v4;
              WebCore::DeferredPromise::reject(v11, (unsigned __int8 *)&v43, 0, &v45);
              result = v44;
              v44 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                {
                  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
                  if (!v4)
                  {
LABEL_38:
                    if (v42 != -1)
                      return (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF **))off_1E336EED0[v42])(&v43, &v40);
                    return result;
                  }
                  goto LABEL_18;
                }
                *(_DWORD *)result -= 2;
              }
              if (!v4)
                goto LABEL_38;
LABEL_18:
              v13 = *(_DWORD *)v4 - 2;
              if (*(_DWORD *)v4 == 2)
              {
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v12);
                goto LABEL_38;
              }
              goto LABEL_37;
            }
            std::__throw_bad_variant_access[abi:sn180100]();
          }
          else
          {
            v4 = v40;
            v40 = 0;
            v17 = *(_QWORD *)(v11 + 24);
            if (!v17 || !*(_QWORD *)v17 || (*(_BYTE *)(v17 + 8) & 3) != 0)
            {
LABEL_36:
              v13 = *(_DWORD *)v4 - 1;
              if (*(_DWORD *)v4 == 1)
              {
                v24 = (_DWORD *)*((_QWORD *)v4 + 2);
                *((_QWORD *)v4 + 2) = 0;
                if (v24)
                {
                  if (v24[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
                  else
                    --v24[4];
                }
                v25 = *((_QWORD *)v4 + 1);
                if (v25)
                {
                  *(_QWORD *)(v25 + 8) = 0;
                  v26 = (unsigned int *)*((_QWORD *)v4 + 1);
                  *((_QWORD *)v4 + 1) = 0;
                  if (v26)
                  {
                    do
                    {
                      v27 = __ldaxr(v26);
                      v28 = v27 - 1;
                    }
                    while (__stlxr(v28, v26));
                    if (!v28)
                    {
                      atomic_store(1u, v26);
                      WTF::fastFree((WTF *)v26, v10);
                    }
                  }
                }
                else
                {
                  *((_QWORD *)v4 + 1) = 0;
                }
                result = (WTF::StringImpl *)WTF::fastFree(v4, v10);
                goto LABEL_38;
              }
LABEL_37:
              *(_DWORD *)v4 = v13;
              goto LABEL_38;
            }
            v18 = *(_QWORD *)(v11 + 32);
            if (!v18 || (*(_BYTE *)(v18 + 8) & 3) != 0)
              v7 = 0;
            else
              v7 = *(WTF ***)v18;
            v19 = v7[7];
            MEMORY[0x19AEA3294](&v45, v19);
            v20 = **(_QWORD **)(v11 + 32);
            ++*(_DWORD *)v4;
            v43 = v4;
            v22 = (objc_class *)WebCore::createWrapper<WebCore::WritableStream,WebCore::WritableStream>(v20, &v43);
            v23 = v43;
            v43 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1)
              {
                v29 = (_DWORD *)*((_QWORD *)v23 + 2);
                *((_QWORD *)v23 + 2) = 0;
                if (v29)
                {
                  if (v29[4] == 1)
                  {
                    v35 = v23;
                    (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
                    v23 = v35;
                  }
                  else
                  {
                    --v29[4];
                  }
                }
                v30 = *((_QWORD *)v23 + 1);
                if (v30)
                {
                  *(_QWORD *)(v30 + 8) = 0;
                  v31 = (unsigned int *)*((_QWORD *)v23 + 1);
                  *((_QWORD *)v23 + 1) = 0;
                  if (v31)
                  {
                    do
                    {
                      v32 = __ldaxr(v31);
                      v33 = v32 - 1;
                    }
                    while (__stlxr(v33, v31));
                    if (!v33)
                    {
                      atomic_store(1u, v31);
                      v34 = v23;
                      WTF::fastFree((WTF *)v31, v21);
                      v23 = v34;
                    }
                  }
                }
                else
                {
                  *((_QWORD *)v23 + 1) = 0;
                }
                WTF::fastFree(v23, v21);
              }
              else
              {
                --*(_DWORD *)v23;
              }
            }
            if (!*((_QWORD *)v19 + 2))
            {
              WebCore::DeferredPromise::callFunction(v11, (uint64_t *)v7, 0, v22);
LABEL_35:
              result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v45);
              goto LABEL_36;
            }
            v2 = *((_QWORD *)v19 + 2);
            v36 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v7);
            if (!(*(unsigned int (**)(_QWORD *))(*v36 + 64))(v36))
              goto LABEL_67;
            v3 = v36[43];
            if (*((_QWORD *)v19 + 3) == v2)
            {
LABEL_82:
              *(_BYTE *)(*(_QWORD *)(v3 + 8) + 93442) = 1;
              *(_BYTE *)(v11 + 44) = 1;
              goto LABEL_67;
            }
            if (!v3)
            {
LABEL_67:
              WebCore::reportException((JSC::JSGlobalObject *)v7, v2, 0, 0, 0);
              goto LABEL_35;
            }
            v8 = (JSC::Structure *)(v3 + 40);
            if (__ldaxr((unsigned __int8 *)(v3 + 40)))
            {
              __clrex();
LABEL_75:
              MEMORY[0x19AEA534C](v8);
LABEL_76:
              v38 = *(unsigned __int8 *)(v3 + 41);
              v39 = __ldxr((unsigned __int8 *)v8);
              if (v39 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v8))
                {
LABEL_81:
                  if (v38)
                    goto LABEL_82;
                  goto LABEL_67;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v8);
              goto LABEL_81;
            }
          }
          if (!__stxr(1u, (unsigned __int8 *)v8))
            goto LABEL_76;
          goto LABEL_75;
        }
      }
    }
  }
  v14 = *((_QWORD *)v4 + 1);
  v15 = *(_QWORD *)(v14 + 24);
  if (v15 && *(_QWORD *)v15 && (*(_BYTE *)(v15 + 8) & 3) == 0)
  {
    v16 = **(uint64_t ***)(v14 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v14, v16, 1, (objc_class *)2);
    return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v40);
  }
  return result;
}

uint64_t WebCore::WebTransportReceiveStream::create@<X0>(JSC::Structure *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;

  v5 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>((uint64_t)a1, a2);
  WebCore::InternalReadableStream::createFromUnderlyingSource(a1, v5, 0xAuLL, (uint64_t)&v12);
  v6 = v14;
  if (v14)
  {
    if (v14 == 1)
    {
      v7 = v13;
      v13 = 0;
      *(_BYTE *)a3 = v12;
      *(_QWORD *)(a3 + 8) = v7;
LABEL_6:
      *(_DWORD *)(a3 + 16) = v6;
      return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalReadableStreamENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix_0[v6])(&v15, &v12);
    }
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x10);
    if (!v14)
    {
      v9 = v12;
      v12 = 0;
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)a3 = v8;
      goto LABEL_6;
    }
  }
  v11 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebTransportReceiveStreamSource::doCancel(v11);
}

uint64_t WebCore::WebTransportReceiveStreamSource::doCancel(uint64_t this)
{
  *(_BYTE *)(this + 36) = 1;
  return this;
}

void WebCore::WebTransportSendStream::create(JSC::Structure *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::WebTransportSession *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;

  v5 = WebCore::createWrapper<WebCore::WritableStreamSink,WebCore::WritableStreamSink>((uint64_t)a1, a2);
  WebCore::InternalWritableStream::createFromUnderlyingSink(a1, v5, 0xAuLL, (uint64_t)&v11);
  v6 = v13;
  if (v13)
  {
    if (v13 == 1)
    {
      v7 = v12;
      v12 = 0;
      *(_BYTE *)a3 = v11;
      *(_QWORD *)(a3 + 8) = v7;
LABEL_6:
      *(_DWORD *)(a3 + 16) = v6;
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore22InternalWritableStreamENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix_0[v6])(&v14, &v11);
      return;
    }
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x28);
    if (!v13)
    {
      v9 = v11;
      v11 = 0;
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = v9;
      *(_BYTE *)(v8 + 24) = 0;
      *(_BYTE *)(v8 + 32) = 0;
      *(_QWORD *)a3 = v8;
      goto LABEL_6;
    }
  }
  v10 = (WebCore::WebTransportSession *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::WebTransportSession::~WebTransportSession(v10);
}

void WebCore::WebTransportSession::~WebTransportSession(WebCore::WebTransportSession *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E336EFE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (__ldaxr((unsigned __int8 *)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v2))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v2);
LABEL_6:
    v4 = *(_QWORD *)(v2 + 16) - 1;
    *(_QWORD *)(v2 + 16) = v4;
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      v6 = __ldxr((unsigned __int8 *)v2);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v2))
        {
          if (v5)
            return;
LABEL_13:
          WTF::fastFree((WTF *)v2, a2);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v2);
      if (v5)
        return;
      goto LABEL_13;
    }
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
}

uint64_t *WebCore::WebTransportSession::attachClient(WebCore::WebTransportSession *this, WebCore::WebTransportSessionClient *a2)
{
  return WTF::ThreadSafeWeakPtr<WebCore::WebTransportSessionClient>::operator=<WebCore::WebTransportSessionClient,(void *)0>((uint64_t *)this + 1, a2);
}

uint64_t *WTF::ThreadSafeWeakPtr<WebCore::WebTransportSessionClient>::operator=<WebCore::WebTransportSessionClient,(void *)0>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;

  v4 = a2[1];
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *a1;
  *a1 = v6;
  if (!v8)
    goto LABEL_26;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_18:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (v10)
  {
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        goto LABEL_26;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    goto LABEL_26;
  }
  v11 = *(_QWORD *)(v8 + 8);
  v12 = __ldxr((unsigned __int8 *)v8);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_25;
      goto LABEL_26;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
LABEL_25:
    WTF::fastFree((WTF *)v8, a2);
LABEL_26:
  a1[1] = (uint64_t)a2;
  return a1;
}

void WebCore::WebTransportReceiveStreamSource::~WebTransportReceiveStreamSource(WebCore::WebTransportReceiveStreamSource *this, void *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(_DWORD **)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
    {
      if (v3[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[4];
    }
    WTF::fastFree(v2, a2);
  }
}

{
  WTF *v3;
  _DWORD *v4;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = *(_DWORD **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (v4[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
      else
        --v4[4];
    }
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::AXCoreObject::hasPopup(WebCore::AXCoreObject *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t result;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 1008))(&v39);
  v3 = v39;
  if (!v39)
    return 1;
  if (*((_DWORD *)v39 + 1) != 5)
    goto LABEL_5;
  v36 = *((_QWORD *)v39 + 1);
  if ((*((_BYTE *)v39 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v36 & 0xFFDF) == 0x46
      && (*(_WORD *)(v36 + 2) & 0xFFDF) == 0x41
      && (*(_WORD *)(v36 + 4) & 0xFFDF) == 0x4C
      && (*(_WORD *)(v36 + 6) & 0xFFDF) == 0x53)
    {
      v37 = *(unsigned __int16 *)(v36 + 8);
      goto LABEL_89;
    }
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  if ((*(_BYTE *)v36 & 0xDF) != 0x46
    || (*(_BYTE *)(v36 + 1) & 0xDF) != 0x41
    || (*(_BYTE *)(v36 + 2) & 0xDF) != 0x4C
    || (*(_BYTE *)(v36 + 3) & 0xDF) != 0x53)
  {
    goto LABEL_5;
  }
  v37 = *(unsigned __int8 *)(v36 + 4);
LABEL_89:
  v5 = (v37 & 0xFFFFFFDF) == 69;
LABEL_6:
  v39 = 0;
  if (*(_DWORD *)v3 == 2)
  {
    WTF::StringImpl::destroy(v3, v2);
    if (!v5)
      return 1;
  }
  else
  {
    *(_DWORD *)v3 -= 2;
    if (!v5)
      return 1;
  }
  result = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1232))(this);
  if (!result)
    return result;
  v6 = result;
  v7 = *(_QWORD *)(result + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_13:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
  {
LABEL_17:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_18;
  }
  while (1)
  {
LABEL_18:
    v10 = (_QWORD *)v6;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6))
      goto LABEL_24;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v6 + 1008))(&v39, v6);
    v12 = v39;
    if (!v39)
      goto LABEL_67;
    if (*((_DWORD *)v39 + 1) != 5)
    {
LABEL_21:
      v13 = 0;
      goto LABEL_22;
    }
    v26 = *((_QWORD *)v39 + 1);
    if ((*((_BYTE *)v39 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v26 & 0xDF) != 0x46
        || (*(_BYTE *)(v26 + 1) & 0xDF) != 0x41
        || (*(_BYTE *)(v26 + 2) & 0xDF) != 0x4C
        || (*(_BYTE *)(v26 + 3) & 0xDF) != 0x53)
      {
        goto LABEL_21;
      }
      v27 = *(unsigned __int8 *)(v26 + 4);
    }
    else
    {
      if ((*(_WORD *)v26 & 0xFFDF) != 0x46
        || (*(_WORD *)(v26 + 2) & 0xFFDF) != 0x41
        || (*(_WORD *)(v26 + 4) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v26 + 6) & 0xFFDF) != 0x53)
      {
        goto LABEL_21;
      }
      v27 = *(unsigned __int16 *)(v26 + 8);
    }
    v13 = (v27 & 0xFFFFFFDF) == 69;
LABEL_22:
    v39 = 0;
    if (*(_DWORD *)v12 == 2)
      break;
    *(_DWORD *)v12 -= 2;
    if (!v13)
      goto LABEL_67;
LABEL_24:
    v14 = (*(uint64_t (**)(_QWORD *))(*v10 + 1232))(v10);
    v6 = v14;
    if (!v14)
      goto LABEL_34;
    v16 = *(_QWORD *)(v14 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_29;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_29:
    ++*(_QWORD *)(v16 + 8);
    v18 = __ldxr((unsigned __int8 *)v16);
    if (v18 != 1)
    {
      __clrex();
LABEL_33:
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      goto LABEL_34;
    }
    if (__stlxr(0, (unsigned __int8 *)v16))
      goto LABEL_33;
LABEL_34:
    v19 = v10[1];
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_38:
    v21 = *(_QWORD *)(v19 + 8);
    v22 = v21 - 1;
    *(_QWORD *)(v19 + 8) = v21 - 1;
    if (v21 == 1)
    {
      v28 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 24) = 0;
      v24 = v28 != 0;
    }
    else
    {
      v23 = 0;
      v24 = 1;
    }
    v25 = __ldxr((unsigned __int8 *)v19);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
        goto LABEL_45;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_45:
    if (!v22)
    {
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      if (!v24)
        WTF::fastFree((WTF *)v19, v15);
    }
    result = 0;
    if (!v6)
      return result;
  }
  WTF::StringImpl::destroy(v12, v11);
  if (v13)
    goto LABEL_24;
LABEL_67:
  v29 = v10[1];
  if (__ldaxr((unsigned __int8 *)v29))
  {
    __clrex();
    goto LABEL_70;
  }
  if (__stxr(1u, (unsigned __int8 *)v29))
LABEL_70:
    MEMORY[0x19AEA534C](v29);
  v31 = *(_QWORD *)(v29 + 8);
  v32 = v31 - 1;
  *(_QWORD *)(v29 + 8) = v31 - 1;
  if (v31 == 1)
  {
    v38 = *(_QWORD *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)(v29 + 24) = 0;
    v34 = v38 != 0;
  }
  else
  {
    v33 = 0;
    v34 = 1;
  }
  v35 = __ldxr((unsigned __int8 *)v29);
  if (v35 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v29))
      goto LABEL_78;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_78:
  if (!v32)
  {
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if (!v34)
      WTF::fastFree((WTF *)v29, v11);
  }
  return 1;
}

uint64_t WebCore::AXCoreObject::tableLevel(WebCore::AXCoreObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  if ((*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 176))(this))
  {
    v2 = (*(uint64_t (**)(WebCore::AXCoreObject *, uint64_t))(*(_QWORD *)this + 2608))(this, 1);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)(v2 + 8);
      if (__ldaxr((unsigned __int8 *)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v4))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEA534C](v4);
LABEL_9:
      ++*(_QWORD *)(v4 + 8);
      v8 = __ldxr((unsigned __int8 *)v4);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_14:
      LODWORD(v6) = 0;
      while (1)
      {
        v9 = v3;
        v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 2608))(v3, 0);
        v3 = v10;
        if (!v10)
          goto LABEL_25;
        v12 = *(_QWORD *)(v10 + 8);
        if (__ldaxr((unsigned __int8 *)v12))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v12))
        {
          goto LABEL_20;
        }
        MEMORY[0x19AEA534C](v12);
LABEL_20:
        ++*(_QWORD *)(v12 + 8);
        v14 = __ldxr((unsigned __int8 *)v12);
        if (v14 != 1)
        {
          __clrex();
LABEL_24:
          WTF::Lock::unlockSlow((WTF::Lock *)v12);
          goto LABEL_25;
        }
        if (__stlxr(0, (unsigned __int8 *)v12))
          goto LABEL_24;
LABEL_25:
        v15 = *(_QWORD *)(v9 + 8);
        if (__ldaxr((unsigned __int8 *)v15))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v15))
        {
          goto LABEL_29;
        }
        MEMORY[0x19AEA534C](v15);
LABEL_29:
        v17 = *(_QWORD *)(v15 + 8);
        v18 = v17 - 1;
        *(_QWORD *)(v15 + 8) = v17 - 1;
        if (v17 == 1)
        {
          v22 = *(_QWORD *)(v15 + 16);
          v19 = *(_QWORD *)(v15 + 24);
          *(_QWORD *)(v15 + 24) = 0;
          v20 = v22 != 0;
        }
        else
        {
          v19 = 0;
          v20 = 1;
        }
        v21 = __ldxr((unsigned __int8 *)v15);
        if (v21 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
          {
            if (!v18)
              goto LABEL_37;
            goto LABEL_41;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
        if (!v18)
        {
LABEL_37:
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (!v20)
            WTF::fastFree((WTF *)v15, v11);
        }
LABEL_41:
        v6 = (v6 + 1);
        if (!v3)
          return v6;
      }
    }
  }
  return 0;
}

void WebCore::AXCoreObject::ariaLandmarkRoleDescription(WebCore::AXCoreObject *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  const char *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1456))(this);
  if (v3 > 119)
  {
    switch(v3)
    {
      case 120:
        v4 = "ARIATabPanel";
LABEL_12:
        v5 = a2;
        v6 = 12;
        break;
      case 135:
        v4 = "ARIAUserInterfaceTooltip";
        v5 = a2;
        v6 = 24;
        break;
      case 137:
        v4 = "ARIAWebApplication";
LABEL_30:
        v5 = a2;
        v6 = 18;
        break;
      default:
LABEL_16:
        *a2 = 0;
        return;
    }
  }
  else
  {
    switch(v3)
    {
      case '7':
        v4 = "ARIALandmarkBanner";
        goto LABEL_30;
      case '8':
        v4 = "ARIALandmarkComplementary";
        v5 = a2;
        v6 = 25;
        break;
      case '9':
        v4 = "ARIALandmarkContentInfo";
        v5 = a2;
        v6 = 23;
        break;
      case ':':
      case '=':
        v4 = "ARIALandmarkRegion";
        goto LABEL_30;
      case ';':
        v4 = "ARIALandmarkMain";
LABEL_34:
        v5 = a2;
        v6 = 16;
        break;
      case '<':
        v4 = "ARIALandmarkNavigation";
LABEL_28:
        v5 = a2;
        v6 = 22;
        break;
      case '>':
        v4 = "ARIALandmarkSearch";
        goto LABEL_30;
      default:
        switch(v3)
        {
          case 1:
            v4 = "ARIAApplicationAlert";
            goto LABEL_36;
          case 2:
            v4 = "ARIAApplicationAlertDialog";
            v5 = a2;
            v6 = 26;
            goto LABEL_37;
          case 3:
            v4 = "ARIAApplicationDialog";
            goto LABEL_22;
          case 4:
            v4 = "ARIAApplicationLog";
            goto LABEL_30;
          case 5:
            v4 = "ARIAApplicationMarquee";
            goto LABEL_28;
          case 6:
            v4 = "ARIAApplicationStatus";
LABEL_22:
            v5 = a2;
            v6 = 21;
            break;
          case 7:
            v4 = "ARIAApplicationTimer";
LABEL_36:
            v5 = a2;
            v6 = 20;
            break;
          default:
            switch(v3)
            {
              case 28:
                v4 = "ARIADocument";
                goto LABEL_12;
              case 29:
                v4 = "ARIADocumentArticle";
                v5 = a2;
                v6 = 19;
                goto LABEL_37;
              case 30:
                v4 = "ARIADocumentMath";
                goto LABEL_34;
              case 31:
                v4 = "ARIADocumentNote";
                goto LABEL_34;
              default:
                goto LABEL_16;
            }
        }
        break;
    }
  }
LABEL_37:
  WebCore::AXARIAContentGroupText(v4, v6 & 0xFFFF0000FFFFFFFFLL | 0x100000000, v5);
}

uint64_t WebCore::AXCoreObject::descriptionAttributeValue@<X0>(WebCore::AXCoreObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  BOOL v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  char v29;
  WTF *v30;
  uint64_t v31;

  result = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1456))(this);
  if ((_DWORD)result == 107)
  {
    *a2 = 0;
    return result;
  }
  v30 = 0;
  v31 = 0;
  (*(void (**)(WebCore::AXCoreObject *, WTF **))(*(_QWORD *)this + 1344))(this, &v30);
  if (!HIDWORD(v31))
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 1;
    goto LABEL_54;
  }
  v6 = 16 * HIDWORD(v31);
  v7 = v30;
  v8 = (_DWORD *)((char *)v30 + 8);
  v9 = v6;
  while (1)
  {
    if (*v8 > 0xAu || ((1 << *v8) & 0x76D) == 0)
    {
      v11 = *((_QWORD *)v8 - 1);
      if (v11)
      {
        if (*(_DWORD *)(v11 + 4))
          break;
      }
    }
    v8 += 4;
    v9 -= 16;
    if (!v9)
    {
      v12 = 0;
      goto LABEL_14;
    }
  }
  v12 = 1;
LABEL_14:
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  while (1)
  {
    v13 = *((_DWORD *)v7 + 2);
    if ((v13 - 8) >= 3)
    {
      if (!v13)
      {
        v18 = *(WTF::StringImpl **)v7;
        if (v28)
          v25 = 0;
        else
          v25 = v27 == 0;
        if (v25)
          goto LABEL_45;
LABEL_79:
        if (v18 && (*((_BYTE *)v18 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        goto LABEL_53;
      }
    }
    else
    {
      v14 = *(WTF::StringImpl **)v7;
      if (!*(_QWORD *)v7 || !*((_DWORD *)v14 + 1))
        goto LABEL_30;
      if (v28 < 0)
      {
        result = 268;
        __break(0xC471u);
        return result;
      }
      if (v28)
      {
        WTF::StringBuilder::append();
        v14 = *(WTF::StringImpl **)v7;
        if (!v14)
        {
LABEL_38:
          WTF::StringBuilder::append();
          goto LABEL_30;
        }
      }
      else if (!v27)
      {
        *(_DWORD *)v14 += 2;
        v15 = v26;
        v26 = v14;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v5);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = *(WTF::StringImpl **)v7;
        if (*(_QWORD *)v7)
          LODWORD(v16) = *((_DWORD *)v16 + 1);
        v28 = (int)v16;
        goto LABEL_30;
      }
      if ((*((_BYTE *)v14 + 16) & 4) != 0)
        goto LABEL_38;
      WTF::StringBuilder::append();
    }
LABEL_30:
    v17 = *((_DWORD *)v7 + 2) == 5 ? v12 : 1;
    if ((v17 & 1) == 0)
      break;
    v7 = (WTF *)((char *)v7 + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_53;
  }
  v18 = *(WTF::StringImpl **)v7;
  if (v28 || v27)
    goto LABEL_79;
LABEL_45:
  if (v18)
    *(_DWORD *)v18 += 2;
  v19 = v26;
  v26 = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v5);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(WTF::StringImpl **)v7;
  if (*(_QWORD *)v7)
    LODWORD(v20) = *((_DWORD *)v20 + 1);
  v28 = (int)v20;
LABEL_53:
  v21 = v26;
  if (v26)
    goto LABEL_55;
LABEL_54:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v26);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v26);
  v21 = v26;
  if (v26)
LABEL_55:
    *(_DWORD *)v21 += 2;
  *a2 = v21;
  v22 = v27;
  v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v5);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = (uint64_t)v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  v23 = v30;
  if (HIDWORD(v31))
  {
    v24 = 16 * HIDWORD(v31);
    do
    {
      result = *(_QWORD *)v23;
      *(_QWORD *)v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
        else
          *(_DWORD *)result -= 2;
      }
      v23 = (WTF *)((char *)v23 + 16);
      v24 -= 16;
    }
    while (v24);
    v23 = v30;
  }
  if (v23)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    return WTF::fastFree(v23, v5);
  }
  return result;
}

WTF::StringImpl *WebCore::AXCoreObject::titleAttributeValue@<X0>(WebCore::AXCoreObject *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;

  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1456))(this);
  if ((_DWORD)result == 107
    || (result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 504))(this),
        (_DWORD)result))
  {
    *a2 = 0;
    return result;
  }
  if ((*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 168))(this)
    && (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 2560))(this))
  {
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1384))(this);
  }
  v11 = 0;
  v12 = 0;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AXCoreObject *, WTF **))(*(_QWORD *)this + 1344))(this, &v11);
  v6 = v11;
  if (HIDWORD(v12))
  {
    v7 = 16 * HIDWORD(v12);
    v8 = v7;
    v9 = v11;
    while (2)
    {
      v10 = 0;
      switch(*((_DWORD *)v9 + 2))
      {
        case 0:
          break;
        case 1:
        case 4:
        case 7:
          v10 = *(_DWORD **)v9;
          if (*(_QWORD *)v9)
            *v10 += 2;
          break;
        default:
          v9 = (WTF *)((char *)v9 + 16);
          v8 -= 16;
          if (v8)
            continue;
          v10 = 0;
          break;
      }
      break;
    }
    *a2 = v10;
    do
    {
      result = *(WTF::StringImpl **)v6;
      *(_QWORD *)v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
      v6 = (WTF *)((char *)v6 + 16);
      v7 -= 16;
    }
    while (v7);
    v6 = v11;
    if (v11)
      goto LABEL_25;
  }
  else
  {
    *a2 = 0;
    if (v6)
    {
LABEL_25:
      v11 = 0;
      LODWORD(v12) = 0;
      return (WTF::StringImpl *)WTF::fastFree(v6, v5);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::AXCoreObject::helpTextAttributeValue@<X0>(WebCore::AXCoreObject *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AXCoreObject *, WTF **))(*(_QWORD *)this + 1344))(this, &v15);
  v5 = v15;
  if (HIDWORD(v16))
  {
    v6 = 16 * HIDWORD(v16);
    v7 = (_DWORD *)((char *)v15 + 8);
    v8 = v6;
    do
    {
      if (*v7 > 0xAu || ((1 << *v7) & 0x76C) == 0)
      {
        v10 = *((_QWORD *)v7 - 1);
        if (v10)
        {
          if (*(_DWORD *)(v10 + 4))
          {
            v11 = 16 * HIDWORD(v16);
            v14 = v15;
            while (1)
            {
              v12 = *((_DWORD *)v14 + 2);
              if ((v12 - 2) < 2 || v12 == 5)
                goto LABEL_21;
              v13 = 0;
              v14 = (WTF *)((char *)v14 + 16);
              v11 -= 16;
              if (!v11)
                goto LABEL_23;
            }
          }
        }
      }
      v7 += 4;
      v8 -= 16;
    }
    while (v8);
    v13 = (_DWORD *)(16 * HIDWORD(v16));
    v14 = v15;
    while ((*((_DWORD *)v14 + 2) & 0xFFFFFFFE) != 2)
    {
      v14 = (WTF *)((char *)v14 + 16);
      v13 -= 4;
      if (!v13)
        goto LABEL_23;
    }
LABEL_21:
    v13 = *(_DWORD **)v14;
    if (*(_QWORD *)v14)
      *v13 += 2;
LABEL_23:
    *a2 = v13;
    do
    {
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF *)((char *)v5 + 16);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
    if (v15)
      goto LABEL_31;
  }
  else
  {
    *a2 = 0;
    if (v5)
    {
LABEL_31:
      v15 = 0;
      LODWORD(v16) = 0;
      return (WTF::StringImpl *)WTF::fastFree(v5, v4);
    }
  }
  return result;
}

uint64_t WebCore::AXCoreObject::titleUIElement(WebCore::AXCoreObject *this)
{
  void *v1;
  uint64_t v2;
  uint64_t *v4;
  int v5;

  (*(void (**)(uint64_t **__return_ptr, WebCore::AXCoreObject *, uint64_t))(*(_QWORD *)this + 984))(&v4, this, 15);
  if (v5 == 1)
    v2 = *v4;
  else
    v2 = 0;
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v4, v1);
  return v2;
}

uint64_t WebCore::AXCoreObject::linkedObjects@<X0>(WebCore::AXCoreObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  int v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  void *v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  int v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unsigned int v91;

  (*(void (**)(uint64_t __return_ptr, WebCore::AXCoreObject *, uint64_t))(*(_QWORD *)this + 984))(a2, this, 12);
  if ((*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 104))(this))
  {
    v4 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 992))(this);
    if (!v4)
      goto LABEL_72;
    v6 = v4;
    v7 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_27;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_27:
    ++*(_QWORD *)(v7 + 8);
    v20 = __ldxr((unsigned __int8 *)v7);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
LABEL_32:
        v90 = (_QWORD *)v6;
        v21 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v21 == *(_DWORD *)(a2 + 8))
        {
          v22 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v21 + 1, (unint64_t)&v90);
          v23 = *(unsigned int *)(a2 + 12);
          v24 = *(_QWORD **)a2;
          v25 = *(_QWORD *)v22;
          if (!*(_QWORD *)v22)
            goto LABEL_53;
          v26 = *(_QWORD *)(v25 + 8);
          if (__ldaxr((unsigned __int8 *)v26))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v26))
          {
LABEL_48:
            ++*(_QWORD *)(v26 + 8);
            v32 = __ldxr((unsigned __int8 *)v26);
            if (v32 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v26))
                goto LABEL_53;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_53:
            v24[v23] = v25;
LABEL_54:
            ++*(_DWORD *)(a2 + 12);
            v33 = v90;
            v90 = 0;
            if (v33)
            {
              v34 = v33[1];
              goto LABEL_56;
            }
            goto LABEL_72;
          }
          MEMORY[0x19AEA534C](v26);
          goto LABEL_48;
        }
        v28 = *(_QWORD **)a2;
        v29 = *(_QWORD *)(v6 + 8);
        if (__ldaxr((unsigned __int8 *)v29))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v29))
        {
          goto LABEL_40;
        }
        MEMORY[0x19AEA534C](v29);
LABEL_40:
        ++*(_QWORD *)(v29 + 8);
        v31 = __ldxr((unsigned __int8 *)v29);
        if (v31 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v29))
            goto LABEL_45;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
LABEL_45:
        v28[v21] = v6;
        goto LABEL_54;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_32;
  }
  if ((*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1456))(this) != 88
    || (*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1456))(this) != 88)
  {
    goto LABEL_72;
  }
  if ((*(unsigned int (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 152))(this))
  {
    (*(void (**)(_QWORD **__return_ptr, WebCore::AXCoreObject *))(*(_QWORD *)this + 1000))(&v90, this);
    if (!v91)
    {
LABEL_24:
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v9);
      goto LABEL_72;
    }
    v10 = v90;
    v11 = *(_DWORD *)(a2 + 12);
    v12 = 8 * v91;
    while (1)
    {
      v13 = v11;
      if (v11 == *(_DWORD *)(a2 + 8))
      {
        v14 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v11 + 1, (unint64_t)v10);
        v13 = *(unsigned int *)(a2 + 12);
        v15 = *(_QWORD **)a2;
        v16 = *(_QWORD *)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_23;
      }
      else
      {
        v15 = *(_QWORD **)a2;
        v16 = *v10;
        if (!*v10)
          goto LABEL_23;
      }
      v17 = *(_QWORD *)(v16 + 8);
      if (__ldaxr((unsigned __int8 *)v17))
        break;
      if (__stxr(1u, (unsigned __int8 *)v17))
        goto LABEL_17;
LABEL_18:
      ++*(_QWORD *)(v17 + 8);
      v19 = __ldxr((unsigned __int8 *)v17);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v17))
          goto LABEL_23;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_23:
      v15[v13] = v16;
      v11 = *(_DWORD *)(a2 + 12) + 1;
      *(_DWORD *)(a2 + 12) = v11;
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_24;
    }
    __clrex();
LABEL_17:
    MEMORY[0x19AEA534C](v17);
    goto LABEL_18;
  }
  v70 = (*(uint64_t (**)(WebCore::AXCoreObject *))(*(_QWORD *)this + 1232))(this);
  if (!v70)
    goto LABEL_72;
  v71 = (_QWORD *)v70;
  v72 = *(_QWORD *)(v70 + 8);
  if (__ldaxr((unsigned __int8 *)v72))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v72))
  {
    goto LABEL_110;
  }
  MEMORY[0x19AEA534C](v72);
LABEL_110:
  ++*(_QWORD *)(v72 + 8);
  v74 = __ldxr((unsigned __int8 *)v72);
  if (v74 != 1)
  {
    __clrex();
    goto LABEL_114;
  }
  if (__stlxr(0, (unsigned __int8 *)v72))
LABEL_114:
    WTF::Lock::unlockSlow((WTF::Lock *)v72);
  while (1)
  {
    v75 = v71;
    if ((*(unsigned int (**)(_QWORD *))(*v71 + 1456))(v71) == 89)
      break;
    v76 = (*(uint64_t (**)(_QWORD *))(*v71 + 1232))(v71);
    v71 = (_QWORD *)v76;
    if (!v76)
      goto LABEL_126;
    v78 = *(_QWORD *)(v76 + 8);
    if (__ldaxr((unsigned __int8 *)v78))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v78))
    {
      goto LABEL_121;
    }
    MEMORY[0x19AEA534C](v78);
LABEL_121:
    ++*(_QWORD *)(v78 + 8);
    v80 = __ldxr((unsigned __int8 *)v78);
    if (v80 != 1)
    {
      __clrex();
LABEL_125:
      WTF::Lock::unlockSlow((WTF::Lock *)v78);
      goto LABEL_126;
    }
    if (__stlxr(0, (unsigned __int8 *)v78))
      goto LABEL_125;
LABEL_126:
    v81 = v75[1];
    if (__ldaxr((unsigned __int8 *)v81))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v81))
    {
      goto LABEL_130;
    }
    MEMORY[0x19AEA534C](v81);
LABEL_130:
    v83 = *(_QWORD *)(v81 + 8);
    v84 = v83 - 1;
    *(_QWORD *)(v81 + 8) = v83 - 1;
    if (v83 == 1)
    {
      v88 = *(_QWORD *)(v81 + 16);
      v85 = *(_QWORD *)(v81 + 24);
      *(_QWORD *)(v81 + 24) = 0;
      v86 = v88 != 0;
    }
    else
    {
      v85 = 0;
      v86 = 1;
    }
    v87 = __ldxr((unsigned __int8 *)v81);
    if (v87 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v81))
      {
        if (!v84)
          goto LABEL_138;
        goto LABEL_142;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v81);
    if (!v84)
    {
LABEL_138:
      if (v85)
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
      if (!v86)
        WTF::fastFree((WTF *)v81, v77);
    }
LABEL_142:
    if (!v71)
      goto LABEL_72;
  }
  WebCore::AXCoreObject::appendRadioButtonDescendants((uint64_t)v71, a2);
  v34 = v71[1];
LABEL_56:
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
    goto LABEL_59;
  }
  if (__stxr(1u, (unsigned __int8 *)v34))
LABEL_59:
    MEMORY[0x19AEA534C](v34);
  v36 = *(_QWORD *)(v34 + 8);
  v37 = v36 - 1;
  *(_QWORD *)(v34 + 8) = v36 - 1;
  if (v36 == 1)
  {
    v89 = *(_QWORD *)(v34 + 16);
    v38 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 24) = 0;
    v39 = v89 != 0;
  }
  else
  {
    v38 = 0;
    v39 = 1;
  }
  v40 = __ldxr((unsigned __int8 *)v34);
  if (v40 != 1)
  {
    __clrex();
LABEL_67:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
    if (!v37)
      goto LABEL_68;
    goto LABEL_72;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
    goto LABEL_67;
  if (!v37)
  {
LABEL_68:
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    if (!v39)
      WTF::fastFree((WTF *)v34, v5);
  }
LABEL_72:
  (*(void (**)(_QWORD **__return_ptr, WebCore::AXCoreObject *, uint64_t))(*(_QWORD *)this + 984))(&v90, this, 4);
  v42 = *(unsigned int *)(a2 + 8);
  v43 = *(unsigned int *)(a2 + 12);
  v44 = v91 + v43;
  if (v44 > v42)
  {
    v45 = v42 + (v42 >> 2);
    if (v45 >= 0x10)
      v46 = v45 + 1;
    else
      v46 = 16;
    if (v46 <= v44)
      v47 = v91 + v43;
    else
      v47 = v46;
    if (!(v47 >> 29))
    {
      v48 = *(_QWORD **)a2;
      v49 = (void *)WTF::fastMalloc((WTF *)(8 * v47));
      *(_DWORD *)(a2 + 8) = v47;
      *(_QWORD *)a2 = v49;
      memcpy(v49, v48, 8 * v43);
      if (v48)
      {
        if (*(_QWORD **)a2 == v48)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v48, v41);
      }
      goto LABEL_84;
    }
LABEL_147:
    __break(0xC471u);
    JUMPOUT(0x1955CE2F8);
  }
LABEL_84:
  if (v91)
  {
    v50 = v90;
    v51 = *(_DWORD *)(a2 + 12);
    v52 = 8 * v91;
    do
    {
      v53 = *(_QWORD **)a2;
      v54 = *v50;
      *v50++ = 0;
      v53[v51++] = v54;
      v52 -= 8;
    }
    while (v52);
    *(_DWORD *)(a2 + 12) = v51;
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v41);
  (*(void (**)(_QWORD **__return_ptr, WebCore::AXCoreObject *, uint64_t))(*(_QWORD *)this + 984))(&v90, this, 18);
  v56 = *(unsigned int *)(a2 + 8);
  v57 = *(unsigned int *)(a2 + 12);
  v58 = v91 + v57;
  if (v58 > v56)
  {
    v59 = v56 + (v56 >> 2);
    if (v59 >= 0x10)
      v60 = v59 + 1;
    else
      v60 = 16;
    if (v60 <= v58)
      v61 = v91 + v57;
    else
      v61 = v60;
    if (v61 >> 29)
      goto LABEL_147;
    v62 = *(_QWORD **)a2;
    v63 = (void *)WTF::fastMalloc((WTF *)(8 * v61));
    *(_DWORD *)(a2 + 8) = v61;
    *(_QWORD *)a2 = v63;
    memcpy(v63, v62, 8 * v57);
    if (v62)
    {
      if (*(_QWORD **)a2 == v62)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)v62, v55);
    }
  }
  if (v91)
  {
    v64 = v90;
    v65 = *(_DWORD *)(a2 + 12);
    v66 = 8 * v91;
    do
    {
      v67 = *(_QWORD **)a2;
      v68 = *v64;
      *v64++ = 0;
      v67[v65++] = v68;
      v66 -= 8;
    }
    while (v66);
    *(_DWORD *)(a2 + 12) = v65;
  }
  return WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v55);
}

uint64_t WebCore::AXCoreObject::appendRadioButtonDescendants(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1896))(a1, 1);
  v4 = *(unsigned int *)(result + 12);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)result;
    v6 = 8 * v4;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 1456))(*v5);
      if ((_DWORD)result == 88)
        break;
      result = WebCore::AXCoreObject::appendRadioButtonDescendants(*v5, a2);
LABEL_19:
      ++v5;
      v6 -= 8;
      if (!v6)
        return result;
    }
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 8))
    {
      result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v7 + 1, (unint64_t)v5);
      v7 = *(unsigned int *)(a2 + 12);
      v8 = *(char **)a2;
      v9 = *(_QWORD **)result;
      if (!*(_QWORD *)result)
        goto LABEL_18;
    }
    else
    {
      v8 = *(char **)a2;
      v9 = (_QWORD *)*v5;
      if (!*v5)
        goto LABEL_18;
    }
    v10 = v9[1];
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
LABEL_13:
      ++*(_QWORD *)(v10 + 8);
      v12 = __ldxr((unsigned __int8 *)v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_18;
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_18:
      *(_QWORD *)&v8[8 * v7] = v9;
      ++*(_DWORD *)(a2 + 12);
      goto LABEL_19;
    }
    result = MEMORY[0x19AEA534C](v10);
    goto LABEL_13;
  }
  return result;
}

uint64_t WebCore::AXImage::determineAccessibilityRole(WebCore::AXImage *this)
{
  uint64_t result;

  LODWORD(result) = (*(uint64_t (**)(WebCore::AXImage *))(*(_QWORD *)this + 3296))(this);
  *((_BYTE *)this + 234) = result;
  if ((_DWORD)result == 134)
    return 49;
  else
    return result;
}

unsigned int *WebCore::AXImage::imageOverlayElements@<X0>(WebCore::AXImage *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  char v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;

  result = (unsigned int *)(*(uint64_t (**)(WebCore::AXImage *, uint64_t))(*(_QWORD *)this + 1896))(this, 1);
  v5 = result[3];
  if (!(_DWORD)v5)
  {
    result = (unsigned int *)(*(uint64_t (**)(WebCore::AXImage *))(*(_QWORD *)this + 1704))(this);
    if (result)
    {
      v16 = result;
      result = (unsigned int *)(*(uint64_t (**)(WebCore::AXImage *))(*(_QWORD *)this + 832))(this);
      if (result)
      {
        v17 = result;
        v18 = *(_QWORD *)(*((_QWORD *)v16 + 6) + 16);
        v24 = 0;
        v25 = 0;
        v26 = 1;
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v19 = off_1E3370AC8;
        v23 = v19;
        (*(void (**)(uint64_t, unsigned int *, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v18 + 1688))(v18, v17, &v24, &v23);
        v21 = v23;
        v23 = 0;
        if (v21)
          (*(void (**)(_QWORD *))(*v21 + 8))(v21);
        v22 = v25;
        v25 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v20);
          else
            *(_DWORD *)v22 -= 2;
        }
        result = (unsigned int *)v24;
        v24 = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
          else
            *result -= 2;
        }
      }
    }
    v15 = 0;
    *(_BYTE *)a2 = 0;
LABEL_28:
    *(_BYTE *)(a2 + 16) = v15;
    return result;
  }
  *(_DWORD *)(a2 + 12) = v5;
  if (!(v5 >> 29))
  {
    v6 = result;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = result;
    v7 = v6[3];
    if ((_DWORD)v7)
    {
      v8 = result;
      v9 = *(uint64_t **)v6;
      v10 = 8 * v7;
      while (1)
      {
        v11 = *v9;
        if (!*v9)
          goto LABEL_15;
        v12 = *(_QWORD *)(v11 + 8);
        if (__ldaxr((unsigned __int8 *)v12))
          break;
        if (__stxr(1u, (unsigned __int8 *)v12))
          goto LABEL_9;
LABEL_10:
        ++*(_QWORD *)(v12 + 8);
        v14 = __ldxr((unsigned __int8 *)v12);
        if (v14 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v12))
            goto LABEL_15;
        }
        else
        {
          __clrex();
        }
        result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_15:
        *(_QWORD *)v8 = v11;
        v8 += 2;
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_16;
      }
      __clrex();
LABEL_9:
      result = (unsigned int *)MEMORY[0x19AEA534C](v12);
      goto LABEL_10;
    }
LABEL_16:
    v15 = 1;
    goto LABEL_28;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::streamAXCoreObject(WTF::TextStream *a1, WTF::StringImpl **a2, char *a3)
{
  char v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  BOOL v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  WTF::StringImpl *result;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  v6 = *a3;
  if ((*a3 & 1) != 0)
  {
    WTF::TextStream::operator<<();
    v29 = a2[2];
    WTF::operator<<();
    v6 = *a3;
  }
  if ((v6 & 2) != 0)
  {
    v7 = (*((uint64_t (**)(WTF::StringImpl **))*a2 + 182))(a2);
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    switch(v7)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::TextStream::operator<<();
        v28 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v8);
          else
            *(_DWORD *)v29 -= 2;
        }
        WTF::TextStream::endGroup(a1);
        break;
      default:
        abort();
    }
  }
  if ((*((unsigned int (**)(WTF::StringImpl **))*a2 + 6))(a2)
    && (*((uint64_t (**)(WTF::StringImpl **))*a2 + 106))(a2))
  {
    v10 = (*((uint64_t (**)(WTF::StringImpl **))*a2 + 106))(a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  v11 = *a3;
  if ((*a3 & 4) != 0)
  {
    v12 = (*((uint64_t (**)(WTF::StringImpl **))*a2 + 155))(a2);
    if (v12)
      v13 = *(WTF::StringImpl **)(v12 + 16);
    else
      v13 = 0;
    v29 = v13;
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::operator<<();
    WTF::TextStream::endGroup(a1);
    v11 = *a3;
  }
  if ((v11 & 8) != 0)
  {
    (*((void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **))*a2 + 134))(&v29, a2);
    v14 = v29;
    if (!v29)
      goto LABEL_25;
    goto LABEL_23;
  }
  v14 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v14 += 2;
  v29 = v14;
  if (v14)
  {
LABEL_23:
    if (*((_DWORD *)v14 + 1))
    {
      WTF::TextStream::startGroup(a1);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a1);
    }
  }
LABEL_25:
  if ((*a3 & 0x10) != 0)
  {
    v15 = (*((uint64_t (**)(WTF::StringImpl **))*a2 + 182))(a2);
    if (v15 == 10)
      v16 = a2;
    else
      v16 = 0;
    v17 = (*((uint64_t (**)(WTF::StringImpl **))*a2 + 155))(a2);
    if (v17)
      v18 = v15 == 107;
    else
      v18 = 0;
    if (!v18)
      v17 = (uint64_t)v16;
    if (v17)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v17 + 2632))(&v27);
      v19 = v27;
      if (v27)
      {
        if (*((_DWORD *)v27 + 1) > 0x96u)
        {
          WTF::StringImpl::substring(v27);
        }
        else
        {
          *(_DWORD *)v27 += 2;
          v28 = v19;
        }
      }
      else
      {
        v28 = 0;
      }
      WTF::TextStream::startGroup(a1);
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::endGroup(a1);
      v20 = v28;
      v28 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v9);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v27;
      v27 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v9);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  if ((*a3 & 0x20) == 0)
    goto LABEL_51;
  if (!(*((unsigned int (**)(WTF::StringImpl **))*a2 + 6))(a2))
    goto LABEL_51;
  v22 = (*((uint64_t (**)(WTF::StringImpl **))*a2 + 104))(a2);
  if (!v22)
    goto LABEL_51;
  v23 = *(_DWORD *)(v22 + 24);
  *(_DWORD *)(v22 + 24) = v23 + 2;
  if ((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v26 = *(_QWORD *)((*(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
    if (v26)
    {
      v24 = (*(_QWORD *)(v26 + 16) & 0x1FLL) == 18;
      if (!v23)
        goto LABEL_60;
LABEL_49:
      *(_DWORD *)(v22 + 24) = v23;
      if (!v24)
        goto LABEL_51;
      goto LABEL_50;
    }
  }
  v24 = 0;
  if (v23)
    goto LABEL_49;
LABEL_60:
  if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v22, v9);
    if (!v24)
      goto LABEL_51;
LABEL_50:
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
    goto LABEL_51;
  }
  if (v24)
    goto LABEL_50;
LABEL_51:
  if ((*a3 & 0x40) != 0)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::endGroup(a1);
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::TextStream *WebCore::streamSubtree(WTF::TextStream *result, WTF::StringImpl ***a2, char *a3)
{
  WTF::TextStream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a2)
  {
    v5 = result;
    ++*((_DWORD *)result + 6);
    WTF::TextStream::startGroup(result);
    WebCore::streamAXCoreObject(v5, *a2, a3);
    v6 = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))**a2 + 237))(*a2, 0);
    v7 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v6;
      v9 = 8 * v7;
      do
      {
        WebCore::streamSubtree(v5, v8, a3);
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    --*((_DWORD *)v5 + 6);
    return (WTF::TextStream *)WTF::TextStream::endGroup(v5);
  }
  return result;
}

WebCore::AccessibilityReplacedText *WebCore::AccessibilityReplacedText::AccessibilityReplacedText(WebCore::AccessibilityReplacedText *this, const WebCore::VisibleSelection *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  int v7;
  int v8;
  WebCore::VisiblePosition *v9;
  const WebCore::VisiblePosition *v10;
  void *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  WebCore::VisiblePosition *v16;
  const WebCore::VisiblePosition *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  int v23;
  int v24;
  const WebCore::VisiblePosition *v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v29;
  WebCore::Node *v30;
  void *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  void *v34;
  WTF::StringImpl *v35;
  WebCore::Node *v36;
  void *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  int v40;
  char v41;
  char v42;
  WebCore::Node *v43;
  int v44;
  char v45;
  char v46;
  WTF::StringImpl *v47;
  int v48;
  char v49;
  char v50;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = -1;
  *((_QWORD *)this + 2) = 0;
  v3 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 6) = -1;
  *((_QWORD *)this + 4) = 0;
  v4 = (uint64_t *)((char *)this + 32);
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) != 0)
  {
    v7 = *((unsigned __int8 *)a2 + 97);
    v8 = *((unsigned __int8 *)a2 + 96);
    v9 = (const WebCore::VisibleSelection *)((char *)a2 + 64);
    WebCore::VisiblePosition::canonicalPosition((const WebCore::VisibleSelection *)((char *)a2 + 64), (uint64_t)&v47);
    v50 = 1;
    if (v7 != 2 && v8 == 0)
    {
      v30 = v47;
      if (v47)
      {
        *((_DWORD *)v47 + 6) += 2;
        v39 = v30;
        v40 = v48;
        v41 = v49;
        v42 = 0;
        if (!WebCore::inSameLine((WebCore *)&v47, (const WebCore::VisiblePosition *)&v39, v10))
          v50 = 0;
        v32 = v39;
        v39 = 0;
        if (v32)
        {
          if (*((_DWORD *)v32 + 6) == 2)
          {
            if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v32, v31);
          }
          else
          {
            *((_DWORD *)v32 + 6) -= 2;
          }
        }
      }
    }
    *((_DWORD *)this + 2) = WebCore::indexForVisiblePosition((uint64_t *)&v47, (uint64_t)v3);
    v13 = v47;
    v47 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 2)
      {
        if ((*((_WORD *)v13 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v13, v12);
      }
      else
      {
        *((_DWORD *)v13 + 6) -= 2;
      }
    }
    if (*((_BYTE *)a2 + 97) == 2)
    {
      WebCore::VisiblePosition::canonicalPosition(v9, (uint64_t)&v39);
      v42 = 1;
      v14 = *((unsigned __int8 *)a2 + 97);
      v15 = *((unsigned __int8 *)a2 + 96);
      v16 = (const WebCore::VisibleSelection *)((char *)a2 + 80);
      WebCore::VisiblePosition::canonicalPosition((const WebCore::VisibleSelection *)((char *)a2 + 80), (uint64_t)&v43);
      v46 = 1;
      if (v14 == 2 || !v15)
      {
        v33 = v43;
        if (v43)
        {
          *((_DWORD *)v43 + 6) += 2;
          v47 = v33;
          v48 = v44;
          v49 = v45;
          v50 = 0;
          if (!WebCore::inSameLine((WebCore *)&v43, (const WebCore::VisiblePosition *)&v47, v17))
            v46 = 0;
          v35 = v47;
          v47 = 0;
          if (v35)
          {
            if (*((_DWORD *)v35 + 6) == 2)
            {
              if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v35, v34);
            }
            else
            {
              *((_DWORD *)v35 + 6) -= 2;
            }
          }
        }
      }
      WebCore::AccessibilityObject::stringForVisiblePositionRange((uint64_t *)&v39, &v47);
      v19 = v47;
      v47 = 0;
      v20 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::destroy(v20, v18);
          v29 = v47;
          v47 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v18);
            else
              *(_DWORD *)v29 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v20 -= 2;
          v47 = 0;
        }
      }
      v21 = v43;
      v43 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v18);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      v22 = v39;
      v39 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22, v18);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
      v23 = *((unsigned __int8 *)a2 + 97);
      v24 = *((unsigned __int8 *)a2 + 96);
      WebCore::VisiblePosition::canonicalPosition(v16, (uint64_t)&v47);
      v50 = 1;
      if (v23 == 2 || !v24)
      {
        v36 = v47;
        if (v47)
        {
          *((_DWORD *)v47 + 6) += 2;
          v39 = v36;
          v40 = v48;
          v41 = v49;
          v42 = 0;
          if (!WebCore::inSameLine((WebCore *)&v47, (const WebCore::VisiblePosition *)&v39, v25))
            v50 = 0;
          v38 = v39;
          v39 = 0;
          if (v38)
          {
            if (*((_DWORD *)v38 + 6) == 2)
            {
              if ((*((_WORD *)v38 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v38, v37);
            }
            else
            {
              *((_DWORD *)v38 + 6) -= 2;
            }
          }
        }
      }
      *((_DWORD *)this + 6) = WebCore::indexForVisiblePosition((uint64_t *)&v47, (uint64_t)v4);
      v27 = v47;
      v47 = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27, v26);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
    }
    else
    {
      *((_DWORD *)this + 6) = *((_DWORD *)this + 2);
      WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=(v4, v3);
    }
  }
  return this;
}

unsigned int *WebCore::AccessibilityReplacedText::postTextStateChangeNotification(unsigned int *result, WebCore::AXObjectCache *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5;
  unsigned int *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WebCore::Node *v12;
  void *v13;
  WebCore::Node *v14;
  int v15;
  char v16;
  WebCore::Node *v17;
  uint64_t v18;
  int v19;
  char v20;

  if (a2)
  {
    v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v5 & 1) != 0)
    {
      v8 = result;
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)(a5 + 64), (uint64_t)&v18);
      v9 = v18;
      if (v18)
        *(_DWORD *)(v18 + 24) += 2;
      v14 = (WebCore::Node *)v9;
      v15 = v19;
      v16 = v20;
      WebCore::highestEditableRoot((uint64_t)&v14, 1, (uint64_t *)&v17);
      v12 = v14;
      v14 = 0;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12, v10);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      if (*(_QWORD *)v8 && *(_DWORD *)(*(_QWORD *)v8 + 4))
        WebCore::AXObjectCache::postTextReplacementNotification(a2, v17, 1, v11, a3);
      else
        WebCore::AXObjectCache::postTextStateChangeNotification(a2, v17, a3);
      result = (unsigned int *)v17;
      v17 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v13);
        }
        else
        {
          result[6] -= 2;
        }
      }
      if (v9)
      {
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v9, v13);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
    }
  }
  return result;
}

void WebCore::AXObjectCache::postTextReplacementNotification(WebCore::AXObjectCache *a1, void *a2, int a3, uint64_t a4, unsigned int a5)
{
  WTF *v7;
  WebCore::AccessibilityObject *v8;
  WebCore::AccessibilityObject *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  _QWORD v13[2];

  if (a2 && a3 == 1 && a5 <= 6 && ((1 << a5) & 0x5C) != 0)
  {
    v7 = (WTF *)*((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 11) = 0;
    if (v7)
    {
      if (*(_QWORD *)v7)
        WTF::fastFree((WTF *)(*(_QWORD *)v7 - 16), a2);
      WTF::fastFree(v7, a2);
    }
    v8 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate((uint64_t)a1, (uint64_t)a2, 0);
    if (v8)
    {
      v9 = v8;
      if ((WebCore::AXObjectCache::enqueuePasswordValueChangeNotification(a1, v8) & 1) == 0)
      {
        v10 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v9 + 2960))(v9);
        if (v10)
        {
          v11 = v10;
          v13[0] = "AXValueChanged";
          v13[1] = 15;
          WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)v13);
          objc_msgSend(*(id *)(v11 + 24), "accessibilityOverrideProcessNotification:", cf);
          objc_msgSend(*(id *)(v11 + 24), "accessibilityPostedNotification:", cf);
          if (cf)
            CFRelease(cf);
        }
      }
    }
  }
}

void sub_1955CF920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::AXObjectCache::postTextStateChangeNotification(WebCore::AXObjectCache *a1, void *a2, int a3)
{
  WTF *v5;
  WebCore::AccessibilityObject *v6;
  WebCore::AccessibilityObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Widget *v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;
  _QWORD v15[2];

  if (a2 && a3)
  {
    v5 = (WTF *)*((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 11) = 0;
    if (v5)
    {
      if (*(_QWORD *)v5)
        WTF::fastFree((WTF *)(*(_QWORD *)v5 - 16), a2);
      WTF::fastFree(v5, a2);
    }
    v6 = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate((uint64_t)a1, (uint64_t)a2, 0);
    if (v6)
    {
      v7 = v6;
      if ((WebCore::AXObjectCache::enqueuePasswordValueChangeNotification(a1, v6) & 1) != 0)
        return;
      v8 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v7 + 2960))(v7);
      if (v8)
        goto LABEL_16;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 528);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(WebCore::Widget **)(v10 + 288);
        if (v11)
        {
          v12 = WebCore::AXObjectCache::getOrCreate(a1, v11);
          if (v12)
          {
            v13 = v12;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 1456))(v12) == 99)
            {
              v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 3232))(v13);
              if (v8)
              {
LABEL_16:
                v15[0] = "AXValueChanged";
                v15[1] = 15;
                WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)v15);
                objc_msgSend(*(id *)(v8 + 24), "accessibilityOverrideProcessNotification:", cf);
                objc_msgSend(*(id *)(v8 + 24), "accessibilityPostedNotification:", cf);
                if (cf)
                  CFRelease(cf);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1955CFA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AXObjectCache::accessibilityEnhancedUserInterfaceEnabled(WebCore::AXObjectCache *this)
{
  return WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled;
}

_QWORD *WebCore::AXObjectCache::notificationPostTimerFired(_QWORD *this, void *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  _DWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;

  v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v2 & 1) != 0)
  {
    v3 = (uint64_t)this;
    v4 = *(_QWORD *)(this[3] + 8);
    *(_DWORD *)(v4 + 24) += 2;
    if ((this[17] & 0xFFFFFFFFFFFFLL) != 0)
      this = (_QWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 13));
    if (!*(_QWORD *)(v4 + 1944) || *(_BYTE *)(v4 + 3405))
      goto LABEL_22;
    v5 = *(_QWORD **)(v3 + 160);
    v19 = v5;
    v6 = *(unsigned int *)(v3 + 172);
    v20 = *(_DWORD *)(v3 + 168);
    v21 = v6;
    v17 = 0;
    *(_QWORD *)(v3 + 160) = 0;
    v18 = 0;
    *(_QWORD *)(v3 + 168) = 0;
    this = (_QWORD *)WTF::Vector<std::pair<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WebCore::AXObjectCache::AXNotification>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, a2);
    v17 = 0;
    v18 = 0;
    if ((_DWORD)v6)
    {
      if (v6 >> 28)
      {
        __break(0xC471u);
        return this;
      }
      v8 = 16 * v6;
      v9 = (char *)WTF::fastMalloc((WTF *)(16 * v6));
      v10 = 0;
      LODWORD(v18) = v6;
      v17 = v9;
      do
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 40))(*v5) & 1) == 0)
        {
          if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 1488))(*v5))
          {
            v11 = v5 + 1;
            if (*((_DWORD *)v5 + 2) != 68
              || ((*(void (**)(_QWORD))(*(_QWORD *)*v5 + 1904))(*v5),
                  (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 1456))(*v5) == 73))
            {
              if (v10 == (_DWORD)v18)
              {
                v12 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v17, v10 + 1, (unint64_t)v5);
                v10 = HIDWORD(v18);
                v9 = v17;
                v13 = &v17[16 * HIDWORD(v18)];
                v14 = *(_QWORD *)v12;
                *(_QWORD *)v12 = 0;
                v11 = v12 + 8;
              }
              else
              {
                v13 = &v9[16 * v10];
                v14 = *v5;
                *v5 = 0;
              }
              *(_QWORD *)v13 = v14;
              ++v10;
              *((_DWORD *)v13 + 2) = *v11;
              HIDWORD(v18) = v10;
            }
          }
        }
        v5 += 2;
        v8 -= 16;
      }
      while (v8);
      if (v10)
      {
        v15 = &v9[16 * v10];
        do
        {
          WebCore::AXObjectCache::postPlatformNotification(v3, *(_QWORD *)v9, *((_DWORD *)v9 + 2));
          v9 += 16;
        }
        while (v9 != v15);
      }
    }
    WTF::Vector<std::pair<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WebCore::AXObjectCache::AXNotification>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v7);
    this = (_QWORD *)WTF::Vector<std::pair<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WebCore::AXObjectCache::AXNotification>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v16);
    if (v4)
    {
LABEL_22:
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::AXObjectCache::passwordNotificationPostTimerFired(WebCore::AXObjectCache *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const void *v10;
  uint64_t result;
  void *v12;
  CFTypeRef cf;
  WTF::StringImpl *v14[2];

  if ((*((_QWORD *)this + 26) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::AXObjectCache *)((char *)this + 176));
  v4 = *((_QWORD *)this + 29);
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(0, a2);
  WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(0, v5);
  if (v3)
  {
    v7 = (uint64_t *)v3;
    do
    {
      v8 = *v7;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v14[0];
      if (v8
        && (v14[0] = (WTF::StringImpl *)"AXValueChanged",
            v14[1] = (WTF::StringImpl *)15,
            WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)v14),
            objc_msgSend(*(id *)(v8 + 24), "accessibilityOverrideProcessNotification:", cf),
            objc_msgSend(*(id *)(v8 + 24), "accessibilityPostedNotification:", cf),
            v10 = cf,
            cf = 0,
            v10))
      {
        CFRelease(v10);
        if (v9)
        {
LABEL_8:
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v6);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      else if (v9)
      {
        goto LABEL_8;
      }
      v7 = (uint64_t *)v7[2];
    }
    while (v7);
  }
  result = WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(v3, v6);
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v12);
  return result;
}

void sub_1955CFDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AXObjectCache::liveRegionChangedNotificationPostTimerFired(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  WebCore::AXObjectCache **v5;
  WebCore::AXObjectCache *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = this;
  if ((*(_QWORD *)(this + 288) & 0xFFFFFFFFFFFFLL) != 0)
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 256));
  v3 = *(_QWORD *)(v2 + 312);
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v4 = (uint64_t *)(v2 + 320);
    v5 = *(WebCore::AXObjectCache ***)(v2 + 320);
    if (v5)
    {
      do
      {
        v6 = *v5;
        v7 = (*(uint64_t (**)(WebCore::AXObjectCache *))(*(_QWORD *)*v5 + 1712))(*v5);
        if (v7)
        {
          v8 = v7;
          *(_DWORD *)(v7 + 24) += 2;
          WebCore::AXObjectCache::postNotification((WTF **)v2, v6, v7, 61, 0);
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        else
        {
          WebCore::AXObjectCache::postNotification((WTF **)v2, v6, 0, 61, 0);
        }
        v5 = (WebCore::AXObjectCache **)v5[2];
      }
      while (v5);
      v9 = *v4;
    }
    else
    {
      v9 = 0;
    }
    this = WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(v9, a2);
    v11 = *(_QWORD *)(v2 + 312);
    if (v11)
    {
      *(_QWORD *)(v2 + 312) = 0;
      this = WTF::fastFree((WTF *)(v11 - 16), v10);
    }
    *v4 = 0;
    *(_QWORD *)(v2 + 328) = 0;
  }
  return this;
}

WebCore::Node *WebCore::AXObjectCache::performCacheUpdateTimerFired(WebCore::AXObjectCache *this)
{
  return WebCore::AXObjectCache::performDeferredCacheUpdate(this, 0);
}

WebCore::AXObjectCache *WebCore::AXObjectCache::AXObjectCache(WebCore::AXObjectCache *this, WebCore::Document *a2)
{
  uint64_t IdentifierInternal;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t StatusReg;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  void *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  do
  {
    do
LABEL_2:
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    while ((unint64_t)(IdentifierInternal - 1) > 0xFFFFFFFFFFFFFFFDLL);
    if ((byte_1ECE82168 & 1) == 0)
    {
      qword_1ECE82160 = 0;
      byte_1ECE82168 = 1;
      goto LABEL_11;
    }
    if (!qword_1ECE82160)
      goto LABEL_11;
    v5 = *(_DWORD *)(qword_1ECE82160 - 8);
    v6 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                + ~(IdentifierInternal << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(qword_1ECE82160 + 16 * v9);
  }
  while (v10 == IdentifierInternal);
  v11 = 1;
  while (v10)
  {
    v9 = (v9 + v11) & v5;
    v10 = *(_QWORD *)(qword_1ECE82160 + 16 * v9);
    ++v11;
    if (v10 == IdentifierInternal)
      goto LABEL_2;
  }
LABEL_11:
  *((_QWORD *)this + 2) = IdentifierInternal;
  v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *((_QWORD *)this + 3) = v12;
  v14 = *((_QWORD *)a2 + 66);
  v15 = 0uLL;
  v16 = 0uLL;
  if (v14)
  {
    v17 = *(_QWORD *)(v14 + 8);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 24);
      if (v18)
      {
        v19 = *(int8x16_t **)(v18 + 8);
        if (v19)
        {
          v20 = v19[2];
          v21.i64[0] = -256;
          v21.i64[1] = -256;
          v16 = vandq_s8(v20, v21);
          v22.i64[0] = 255;
          v22.i64[1] = 255;
          v15 = vandq_s8(v20, v22);
        }
      }
    }
  }
  *((int8x16_t *)this + 2) = vorrq_s8(v15, v16);
  *((_WORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 88) = 0uLL;
  *(_OWORD *)((char *)this + 72) = 0uLL;
  *(_OWORD *)((char *)this + 56) = 0uLL;
  *((_QWORD *)this + 13) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 7) = 0uLL;
  *((_OWORD *)this + 8) = 0uLL;
  v24 = *(unsigned int **)(StatusReg + 736);
  if (!v24)
    v24 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  *((_QWORD *)this + 18) = v24;
  *((_QWORD *)this + 13) = off_1E31F7378;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v26 = off_1E3370AF0;
  v26[1] = WebCore::AXObjectCache::notificationPostTimerFired;
  v26[2] = 0;
  v26[3] = this;
  *((_QWORD *)this + 19) = v26;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = off_1E3407128;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  v27 = *(unsigned int **)(StatusReg + 736);
  if (!v27)
    v27 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  *((_QWORD *)this + 27) = v27;
  *((_QWORD *)this + 22) = off_1E31F7378;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v29 = off_1E3370AF0;
  v29[1] = WebCore::AXObjectCache::passwordNotificationPostTimerFired;
  v29[2] = 0;
  v29[3] = this;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 28) = v29;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 32) = off_1E3407128;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v30 = *(unsigned int **)(StatusReg + 736);
  if (!v30)
    v30 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *((_QWORD *)this + 37) = v30;
  *((_QWORD *)this + 32) = off_1E31F7378;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v32 = off_1E3370AF0;
  v32[1] = WebCore::AXObjectCache::liveRegionChangedNotificationPostTimerFired;
  v32[2] = 0;
  v32[3] = this;
  *((_QWORD *)this + 38) = v32;
  *((_WORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 46) = off_1E3407128;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  v33 = *(unsigned int **)(StatusReg + 736);
  if (!v33)
    v33 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  *((_QWORD *)this + 51) = v33;
  *((_QWORD *)this + 46) = off_1E31F7378;
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v35 = off_1E3370AF0;
  v35[1] = WebCore::AXObjectCache::performCacheUpdateTimerFired;
  v35[2] = 0;
  v35[3] = this;
  *((_QWORD *)this + 52) = v35;
  *((_BYTE *)this + 712) = 0;
  *((_DWORD *)this + 188) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_BYTE *)this + 696) = 0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_WORD *)this + 368) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_BYTE *)this + 768) = 1;
  *(_OWORD *)((char *)this + 776) = 0u;
  v37 = 1.0;
  v38 = 1.0;
  v39 = *((_QWORD *)a2 + 66);
  if (v39)
  {
    v40 = *(_QWORD *)(v39 + 8);
    if (v40)
    {
      v41 = *(_QWORD *)(v40 + 24);
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + 8);
        if (v42)
          v38 = *(double *)(*(_QWORD *)(v42 + 128) + 128);
      }
    }
  }
  if (v38 > 0.0)
    v37 = v38;
  *((double *)this + 93) = v37;
  if (*((_BYTE *)this + 40))
    *((_WORD *)this + 24) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                                 + 8)
                                                                                     + 528)
                                                                         + 8)
                                                             + 24)
                                                 + 8)
                                     + 658);
  v43 = *((_QWORD *)this + 2);
  v44 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    goto LABEL_87;
  v44 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v44 = 1;
  *(_QWORD *)(v44 + 8) = this;
  v45 = *(unsigned int **)this;
  *(_QWORD *)this = v44;
  if (!v45)
    goto LABEL_87;
  do
  {
    v46 = __ldaxr(v45);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v45));
  if (!v47)
  {
    atomic_store(1u, v45);
    WTF::fastFree((WTF *)v45, v36);
  }
  v44 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
LABEL_87:
    do
      v48 = __ldaxr((unsigned int *)v44);
    while (__stlxr(v48 + 1, (unsigned int *)v44));
  }
  if ((byte_1ECE82168 & 1) != 0)
  {
    v49 = qword_1ECE82160;
    if (qword_1ECE82160)
    {
LABEL_49:
      v50 = *(_DWORD *)(v49 - 8);
      goto LABEL_50;
    }
  }
  else
  {
    qword_1ECE82160 = 0;
    byte_1ECE82168 = 1;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
  v49 = qword_1ECE82160;
  if (qword_1ECE82160)
    goto LABEL_49;
  v50 = 0;
LABEL_50:
  v51 = (v43 + ~(v43 << 32)) ^ ((unint64_t)(v43 + ~(v43 << 32)) >> 22);
  v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
  v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
  v54 = v50 & ((v53 >> 31) ^ v53);
  v55 = (_QWORD *)(v49 + 16 * v54);
  v56 = *v55;
  if (!*v55)
  {
LABEL_58:
    *v55 = v43;
    if (v44)
    {
      do
        v59 = __ldaxr((unsigned int *)v44);
      while (__stlxr(v59 + 1, (unsigned int *)v44));
    }
    v60 = (unsigned int *)v55[1];
    v55[1] = v44;
    if (v60)
    {
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v60);
        WTF::fastFree((WTF *)v60, v36);
      }
    }
    if (qword_1ECE82160)
      v63 = *(_DWORD *)(qword_1ECE82160 - 12) + 1;
    else
      v63 = 1;
    *(_DWORD *)(qword_1ECE82160 - 12) = v63;
    if (qword_1ECE82160)
      v64 = *(_DWORD *)(qword_1ECE82160 - 12);
    else
      v64 = 0;
    v65 = (*(_DWORD *)(qword_1ECE82160 - 16) + v64);
    v66 = *(unsigned int *)(qword_1ECE82160 - 4);
    if (v66 > 0x400)
    {
      if (v66 > 2 * v65)
        goto LABEL_77;
    }
    else
    {
      if (3 * v66 > 4 * v65)
        goto LABEL_77;
      if (!(_DWORD)v66)
      {
        v67 = 8;
        goto LABEL_76;
      }
    }
    v67 = (_DWORD)v66 << (6 * *(_DWORD *)(qword_1ECE82160 - 12) >= (2 * v66));
LABEL_76:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v67);
    goto LABEL_77;
  }
  v57 = 0;
  v58 = 1;
  while (v56 != v43)
  {
    if (v56 == -1)
      v57 = v55;
    v54 = (v54 + v58) & v50;
    v55 = (_QWORD *)(v49 + 16 * v54);
    v56 = *v55;
    ++v58;
    if (!*v55)
    {
      if (v57)
      {
        *v57 = 0;
        v57[1] = 0;
        --*(_DWORD *)(v49 - 16);
        v55 = v57;
      }
      goto LABEL_58;
    }
  }
LABEL_77:
  if (v44)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)v44);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)v44));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)v44);
      WTF::fastFree((WTF *)v44, v36);
    }
  }
  return this;
}

void WebCore::AXObjectCache::~AXObjectCache(WebCore::AXObjectCache *this)
{
  WebCore::AXObjectCache *v1;
  WebCore::TimerBase *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::AXObjectCache::AttributeChange *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  WTF *v42;
  void *v43;
  void *v44;
  WTF *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t m;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  WTF **v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  WTF **v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t i;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t j;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t k;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  WTF *v128;
  WTF *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  WTF *v133;
  uint64_t v134;
  WTF *v135;
  WTF *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  WTF *v140;
  uint64_t v141;
  WTF *v142;
  WTF *v143;
  WTF *v144;

  v1 = this;
  v2 = (WebCore::AXObjectCache *)((char *)this + 104);
  if ((*((_QWORD *)this + 17) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::AXObjectCache *)WebCore::TimerBase::stopSlowCase((WebCore::AXObjectCache *)((char *)this + 104));
  if ((*((_QWORD *)v1 + 36) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::AXObjectCache *)WebCore::TimerBase::stopSlowCase((WebCore::AXObjectCache *)((char *)v1 + 256));
  if ((*((_QWORD *)v1 + 50) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::AXObjectCache *)WebCore::TimerBase::stopSlowCase((WebCore::AXObjectCache *)((char *)v1 + 368));
  v3 = *((_QWORD *)v1 + 7);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (_QWORD *)*((_QWORD *)v1 + 7);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = (_QWORD *)*((_QWORD *)v1 + 7);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_14:
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_19;
  }
  v8 = 0;
LABEL_19:
  while (v6 != v8)
  {
    v9 = (_QWORD *)v6[1];
    (*(void (**)(_QWORD *, _QWORD))(*v9 + 2656))(v9, 0);
    v10 = (const void *)v9[3];
    v9[3] = 0;
    if (v10)
      CFRelease(v10);
    this = (WebCore::AXObjectCache *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v9 + 2648))(v9, 0);
    v11 = v6 + 2;
    v6 = v5;
    if (v11 != v5)
    {
      v6 = v11;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v12 = *((_QWORD *)v1 + 2);
  if (WTF::isMainThread(this))
  {
    if ((byte_1ECE82168 & 1) != 0)
    {
      if (qword_1ECE82160)
      {
        v14 = *(_DWORD *)(qword_1ECE82160 - 8);
        v15 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = *(_QWORD *)(qword_1ECE82160 + 16 * v18);
        if (v19 != v12)
        {
          v20 = 1;
          while (v19)
          {
            v18 = ((_DWORD)v18 + v20) & v14;
            v19 = *(_QWORD *)(qword_1ECE82160 + 16 * v18);
            ++v20;
            if (v19 == v12)
              goto LABEL_37;
          }
          v18 = *(unsigned int *)(qword_1ECE82160 - 4);
        }
LABEL_37:
        if (v18 != *(_DWORD *)(qword_1ECE82160 - 4))
        {
          v21 = (_QWORD *)(qword_1ECE82160 + 16 * v18);
          v22 = (unsigned int *)v21[1];
          *v21 = -1;
          v21[1] = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, v13);
            }
          }
          v25 = qword_1ECE82160;
          ++*(_DWORD *)(qword_1ECE82160 - 16);
          if (v25)
            v26 = *(_DWORD *)(v25 - 12) - 1;
          else
            v26 = -1;
          *(_DWORD *)(v25 - 12) = v26;
          if (qword_1ECE82160)
          {
            v27 = *(_DWORD *)(qword_1ECE82160 - 4);
            if (6 * *(_DWORD *)(qword_1ECE82160 - 12) < v27 && v27 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebCore::AXObjectCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v27 >> 1);
          }
        }
      }
    }
    else
    {
      qword_1ECE82160 = 0;
      byte_1ECE82168 = 1;
    }
  }
  v29 = *((_QWORD *)v1 + 98);
  if (v29)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v29, v13);
  v30 = *((_QWORD *)v1 + 97);
  if (v30)
    WTF::fastFree((WTF *)(v30 - 16), v13);
  v31 = *((_QWORD *)v1 + 95);
  if (v31)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v31, v13);
  v32 = *((_QWORD *)v1 + 90);
  if (v32)
  {
    v110 = *(unsigned int *)(v32 - 4);
    if ((_DWORD)v110)
    {
      for (i = 0; i != v110; ++i)
      {
        v112 = *(unsigned int **)(v32 + 8 * i);
        if (v112 != (unsigned int *)-1)
        {
          *(_QWORD *)(v32 + 8 * i) = 0;
          if (v112)
          {
            do
            {
              v113 = __ldaxr(v112);
              v114 = v113 - 1;
            }
            while (__stlxr(v114, v112));
            if (!v114)
            {
              atomic_store(1u, v112);
              WTF::fastFree((WTF *)v112, v13);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v32 - 16), v13);
  }
  if (*((_BYTE *)v1 + 712))
    std::pair<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~pair((uint64_t *)v1 + 87, v13);
  v33 = *((unsigned int *)v1 + 173);
  if ((_DWORD)v33)
  {
    v34 = (WebCore::AXObjectCache::AttributeChange *)*((_QWORD *)v1 + 85);
    v35 = 32 * v33;
    do
    {
      WebCore::AXObjectCache::AttributeChange::~AttributeChange(v34, (WTF::StringImpl *)v13);
      v34 = (WebCore::AXObjectCache::AttributeChange *)(v36 + 32);
      v35 -= 32;
    }
    while (v35);
  }
  v37 = (WTF *)*((_QWORD *)v1 + 85);
  if (v37)
  {
    *((_QWORD *)v1 + 85) = 0;
    *((_DWORD *)v1 + 172) = 0;
    WTF::fastFree(v37, v13);
  }
  v38 = *((_QWORD *)v1 + 83);
  if (v38)
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::String,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v38, (WTF::StringImpl *)v13);
  v39 = *((_QWORD *)v1 + 81);
  if (v39)
  {
    v40 = *(unsigned int *)(v39 - 4);
    if ((_DWORD)v40)
    {
      v41 = (WTF **)*((_QWORD *)v1 + 81);
      do
      {
        v42 = *v41;
        if (*v41 != (WTF *)-1)
        {
          *v41 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
              WTF::fastFree(v42, v13);
            else
              --*(_DWORD *)v42;
          }
        }
        ++v41;
        --v40;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)(v39 - 16), v13);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)v1 + 79, v13);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)v1 + 77, v43);
  v45 = (WTF *)*((_QWORD *)v1 + 74);
  while (v45)
  {
    v129 = v45;
    v45 = (WTF *)*((_QWORD *)v45 + 2);
    v130 = *(unsigned int **)v129;
    *(_QWORD *)v129 = 0;
    if (v130)
    {
      do
      {
        v131 = __ldaxr(v130);
        v132 = v131 - 1;
      }
      while (__stlxr(v132, v130));
      if (!v132)
      {
        v133 = v129;
        atomic_store(1u, v130);
        v143 = (WTF *)v130;
        v134 = v130[7];
        if ((_DWORD)v134)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v143 + 2), (WTF::StringImpl *)(*((_QWORD *)v143 + 2) + 32 * v134));
        v135 = (WTF *)*((_QWORD *)v143 + 2);
        if (v135)
        {
          *((_QWORD *)v143 + 2) = 0;
          *((_DWORD *)v143 + 6) = 0;
          WTF::fastFree(v135, v44);
        }
        WTF::fastFree(v143, v44);
        v129 = v133;
      }
    }
    WTF::fastFree(v129, v44);
  }
  v46 = *((_QWORD *)v1 + 73);
  if (v46)
    WTF::fastFree((WTF *)(v46 - 16), v44);
  WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(*((_QWORD *)v1 + 71), v44);
  v48 = *((_QWORD *)v1 + 70);
  if (v48)
    WTF::fastFree((WTF *)(v48 - 16), v47);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)v1 + 68, v47);
  v50 = (WTF *)*((_QWORD *)v1 + 65);
  while (v50)
  {
    v136 = v50;
    v50 = (WTF *)*((_QWORD *)v50 + 2);
    v137 = *(unsigned int **)v136;
    *(_QWORD *)v136 = 0;
    if (v137)
    {
      do
      {
        v138 = __ldaxr(v137);
        v139 = v138 - 1;
      }
      while (__stlxr(v139, v137));
      if (!v139)
      {
        v140 = v136;
        atomic_store(1u, v137);
        v144 = (WTF *)v137;
        v141 = v137[7];
        if ((_DWORD)v141)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v144 + 2), (WTF::StringImpl *)(*((_QWORD *)v144 + 2) + 32 * v141));
        v142 = (WTF *)*((_QWORD *)v144 + 2);
        if (v142)
        {
          *((_QWORD *)v144 + 2) = 0;
          *((_DWORD *)v144 + 6) = 0;
          WTF::fastFree(v142, v49);
        }
        WTF::fastFree(v144, v49);
        v136 = v140;
      }
    }
    WTF::fastFree(v136, v49);
  }
  v51 = *((_QWORD *)v1 + 64);
  if (v51)
    WTF::fastFree((WTF *)(v51 - 16), v49);
  v52 = *((_QWORD *)v1 + 62);
  if (v52)
  {
    v115 = *(unsigned int *)(v52 - 4);
    if ((_DWORD)v115)
    {
      for (j = 0; j != v115; ++j)
      {
        v117 = *(unsigned int **)(v52 + 8 * j);
        if (v117 != (unsigned int *)-1)
        {
          *(_QWORD *)(v52 + 8 * j) = 0;
          if (v117)
          {
            do
            {
              v118 = __ldaxr(v117);
              v119 = v118 - 1;
            }
            while (__stlxr(v119, v117));
            if (!v119)
            {
              atomic_store(1u, v117);
              WTF::fastFree((WTF *)v117, v49);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v52 - 16), v49);
  }
  v53 = *((_QWORD *)v1 + 60);
  if (v53)
  {
    v120 = *(unsigned int *)(v53 - 4);
    if ((_DWORD)v120)
    {
      for (k = 0; k != v120; ++k)
      {
        v122 = *(unsigned int **)(v53 + 8 * k);
        if (v122 != (unsigned int *)-1)
        {
          *(_QWORD *)(v53 + 8 * k) = 0;
          if (v122)
          {
            do
            {
              v123 = __ldaxr(v122);
              v124 = v123 - 1;
            }
            while (__stlxr(v124, v122));
            if (!v124)
            {
              atomic_store(1u, v122);
              WTF::fastFree((WTF *)v122, v49);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v53 - 16), v49);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)v1 + 58, v49);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)v1 + 56, v54);
  v56 = *((_QWORD *)v1 + 55);
  if (v56)
    WTF::fastFree((WTF *)(v56 - 16), v55);
  *((_QWORD *)v1 + 46) = off_1E31F7378;
  v57 = *((_QWORD *)v1 + 52);
  *((_QWORD *)v1 + 52) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  WebCore::TimerBase::~TimerBase((WebCore::AXObjectCache *)((char *)v1 + 368));
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1 + 344, v58);
  v60 = *((_QWORD *)v1 + 42);
  *((_QWORD *)v1 + 42) = 0;
  if (v60)
  {
    do
    {
      v61 = __ldaxr((unsigned int *)v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, (unsigned int *)v60));
    if (!v62)
    {
      atomic_store(1u, (unsigned int *)v60);
      v125 = *(unsigned int *)(v60 + 28);
      if ((_DWORD)v125)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v60 + 16), (WTF::StringImpl *)(*(_QWORD *)(v60 + 16) + 32 * v125));
      v126 = *(WTF **)(v60 + 16);
      if (v126)
      {
        *(_QWORD *)(v60 + 16) = 0;
        *(_DWORD *)(v60 + 24) = 0;
        WTF::fastFree(v126, v59);
      }
      WTF::fastFree((WTF *)v60, v59);
    }
  }
  WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(*((_QWORD *)v1 + 40), v59);
  v64 = *((_QWORD *)v1 + 39);
  if (v64)
    WTF::fastFree((WTF *)(v64 - 16), v63);
  *((_QWORD *)v1 + 32) = off_1E31F7378;
  v65 = *((_QWORD *)v1 + 38);
  *((_QWORD *)v1 + 38) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  WebCore::TimerBase::~TimerBase((WebCore::AXObjectCache *)((char *)v1 + 256));
  WTF::ListHashSet<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>::deleteAllNodes(*((_QWORD *)v1 + 30), v66);
  v68 = *((_QWORD *)v1 + 29);
  if (v68)
    WTF::fastFree((WTF *)(v68 - 16), v67);
  *((_QWORD *)v1 + 22) = off_1E31F7378;
  v69 = *((_QWORD *)v1 + 28);
  *((_QWORD *)v1 + 28) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  WebCore::TimerBase::~TimerBase((WebCore::AXObjectCache *)((char *)v1 + 176));
  WTF::Vector<std::pair<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WebCore::AXObjectCache::AXNotification>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1 + 160, v70);
  *((_QWORD *)v1 + 13) = off_1E31F7378;
  v71 = *((_QWORD *)v1 + 19);
  *((_QWORD *)v1 + 19) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  WebCore::TimerBase::~TimerBase(v2);
  v73 = *((_QWORD *)v1 + 12);
  if (v73)
    WTF::fastFree((WTF *)(v73 - 16), v72);
  v74 = (WTF *)*((_QWORD *)v1 + 11);
  *((_QWORD *)v1 + 11) = 0;
  if (v74)
  {
    if (*(_QWORD *)v74)
      WTF::fastFree((WTF *)(*(_QWORD *)v74 - 16), v72);
    WTF::fastFree(v74, v72);
  }
  v75 = *((_QWORD *)v1 + 10);
  if (v75)
  {
    v76 = *(unsigned int *)(v75 - 4);
    if ((_DWORD)v76)
    {
      for (m = 0; m != v76; ++m)
      {
        v78 = (uint64_t *)(v75 + 16 * m);
        v79 = *v78;
        if (*v78 != -1)
        {
          *v78 = 0;
          if (v79)
          {
            do
            {
              v80 = __ldaxr((unsigned int *)v79);
              v81 = v80 - 1;
            }
            while (__stlxr(v81, (unsigned int *)v79));
            if (!v81)
            {
              atomic_store(1u, (unsigned int *)v79);
              v82 = *(unsigned int *)(v79 + 28);
              if ((_DWORD)v82)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v79 + 16), (WTF::StringImpl *)(*(_QWORD *)(v79 + 16) + 32 * v82));
              v83 = *(WTF **)(v79 + 16);
              if (v83)
              {
                *(_QWORD *)(v79 + 16) = 0;
                *(_DWORD *)(v79 + 24) = 0;
                WTF::fastFree(v83, v72);
              }
              WTF::fastFree((WTF *)v79, v72);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v75 - 16), v72);
  }
  v84 = *((_QWORD *)v1 + 9);
  if (v84)
  {
    v85 = *(unsigned int *)(v84 - 4);
    if ((_DWORD)v85)
    {
      v86 = (WTF **)*((_QWORD *)v1 + 9);
      do
      {
        v87 = *v86;
        if (*v86 != (WTF *)-1)
        {
          *v86 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 1)
              WTF::fastFree(v87, v72);
            else
              --*(_DWORD *)v87;
          }
        }
        v86 += 2;
        --v85;
      }
      while (v85);
    }
    WTF::fastFree((WTF *)(v84 - 16), v72);
  }
  v88 = *((_QWORD *)v1 + 8);
  if (v88)
  {
    v89 = *(unsigned int *)(v88 - 4);
    if ((_DWORD)v89)
    {
      v90 = (WTF **)*((_QWORD *)v1 + 8);
      do
      {
        v91 = *v90;
        if (*v90 != (WTF *)-1)
        {
          *v90 = 0;
          if (v91)
          {
            if (*(_DWORD *)v91 == 1)
              WTF::fastFree(v91, v72);
            else
              --*(_DWORD *)v91;
          }
        }
        v90 += 2;
        --v89;
      }
      while (v89);
    }
    WTF::fastFree((WTF *)(v88 - 16), v72);
  }
  v92 = *((_QWORD *)v1 + 7);
  if (v92)
  {
    v93 = *(unsigned int *)(v92 - 4);
    if ((_DWORD)v93)
    {
      v94 = (uint64_t *)(v92 + 8);
      do
      {
        if (*(v94 - 1) == -1)
          goto LABEL_170;
        v95 = *v94;
        *v94 = 0;
        if (!v95)
          goto LABEL_170;
        v96 = *(_QWORD *)(v95 + 8);
        if (__ldaxr((unsigned __int8 *)v96))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v96))
        {
          goto LABEL_158;
        }
        MEMORY[0x19AEA534C](v96);
LABEL_158:
        v98 = *(_QWORD *)(v96 + 8);
        v99 = v98 - 1;
        *(_QWORD *)(v96 + 8) = v98 - 1;
        if (v98 == 1)
        {
          v103 = *(_QWORD *)(v96 + 16);
          v100 = *(_QWORD *)(v96 + 24);
          *(_QWORD *)(v96 + 24) = 0;
          v101 = v103 != 0;
        }
        else
        {
          v100 = 0;
          v101 = 1;
        }
        v102 = __ldxr((unsigned __int8 *)v96);
        if (v102 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v96))
          {
            if (!v99)
              goto LABEL_166;
            goto LABEL_170;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v96);
        if (!v99)
        {
LABEL_166:
          if (v100)
            (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
          if (!v101)
            WTF::fastFree((WTF *)v96, v72);
        }
LABEL_170:
        v94 += 2;
        --v93;
      }
      while (v93);
    }
    WTF::fastFree((WTF *)(v92 - 16), v72);
  }
  v104 = *((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = 0;
  if (v104)
  {
    do
    {
      v105 = __ldaxr((unsigned int *)v104);
      v106 = v105 - 1;
    }
    while (__stlxr(v106, (unsigned int *)v104));
    if (!v106)
    {
      atomic_store(1u, (unsigned int *)v104);
      v127 = *(unsigned int *)(v104 + 28);
      if ((_DWORD)v127)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v104 + 16), (WTF::StringImpl *)(*(_QWORD *)(v104 + 16) + 32 * v127));
      v128 = *(WTF **)(v104 + 16);
      if (v128)
      {
        *(_QWORD *)(v104 + 16) = 0;
        *(_DWORD *)(v104 + 24) = 0;
        WTF::fastFree(v128, v72);
      }
      WTF::fastFree((WTF *)v104, v72);
    }
  }
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(*(_QWORD *)v1 + 8) = 0;
    v107 = *(unsigned int **)v1;
    *(_QWORD *)v1 = 0;
    if (v107)
    {
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        atomic_store(1u, v107);
        WTF::fastFree((WTF *)v107, v72);
      }
    }
  }
  else
  {
    *(_QWORD *)v1 = 0;
  }
}

uint64_t *WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WebCore::AXObjectCache::isModalElement(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v22;
  int16x8_t *v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD *v26;

  if ((WebCore::nodeHasRole((uint64_t)this, (int16x8_t *)"dialog", 0x100000006) & 1) == 0
    && !WebCore::nodeHasRole((uint64_t)this, (int16x8_t *)"alertdialog", 0x10000000BLL))
  {
    goto LABEL_36;
  }
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_14;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_6;
LABEL_14:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_14;
LABEL_6:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::HTMLNames::aria_modalAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_modalAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_modalAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v9 = *v7;
  if (*v7)
  {
LABEL_16:
    if (*(_DWORD *)(v9 + 4) != 4)
      goto LABEL_36;
    v10 = *(_QWORD *)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) != 0x54
        || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x55)
      {
        goto LABEL_36;
      }
      v11 = *(unsigned __int8 *)(v10 + 3);
    }
    else
    {
      if ((*(_WORD *)v10 & 0xFFDF) != 0x54
        || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x55)
      {
        goto LABEL_36;
      }
      v11 = *(unsigned __int16 *)(v10 + 6);
    }
    if ((v11 & 0xFFFFFFDF) == 0x45)
      return 1;
LABEL_36:
    if ((*((_WORD *)this + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
    {
      return 0;
    }
    v20 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v20 + 2;
    v12 = *((_BYTE *)this + 120) != 0;
    if (v20)
    {
      *((_DWORD *)this + 6) = v20;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(this);
    }
    return v12;
  }
  v13 = *((_QWORD *)this + 9);
  if ((v13 & 0x3000000000000000) != 0x2000000000000000
    && ((v13 & 0x3000000000000000) != 0x3000000000000000 || (*((_WORD *)this + 14) & 0x100) != 0))
  {
    goto LABEL_34;
  }
  v14 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v14)
    goto LABEL_34;
  v15 = *(_QWORD *)(v14 + 104);
  if (!v15)
    goto LABEL_34;
  v16 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v15 + 8), (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_modalAttr);
  v17 = *(_QWORD *)(v15 + 8);
  if (v17)
    v17 += 32 * *(unsigned int *)(v17 - 4);
  if (v17 == v16)
  {
LABEL_34:
    v19 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_35:
    v9 = *v19;
    if (!*v19)
      goto LABEL_36;
    goto LABEL_16;
  }
  v25[0] = this;
  v25[1] = this;
  v18 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v18 != -1)
  {
    v26 = v25;
    v19 = (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v26, v16 + 8);
    goto LABEL_35;
  }
  v22 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::nodeHasRole(v22, v23, v24);
}

uint64_t WebCore::nodeHasRole(uint64_t a1, int16x8_t *a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WebCore::AXObjectCache *v25;
  _QWORD v26[2];
  _QWORD *v27;

  if (!a1)
    return 0;
  v4 = *(_WORD *)(a1 + 28);
  if ((v4 & 8) == 0)
    return 0;
  *(_DWORD *)(a1 + 24) += 2;
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
    goto LABEL_16;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_8;
LABEL_16:
    v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_17;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_16;
LABEL_8:
  v12 = v12;
  v13 = (uint64_t *)(v11 + 8);
  while (1)
  {
    v14 = *(v13 - 1);
    if (v14 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_17:
  v15 = *v13;
  if (*v13)
    goto LABEL_30;
  v16 = *(_QWORD *)(a1 + 72);
  if ((v16 & 0x3000000000000000) != 0x2000000000000000
    && ((v16 & 0x3000000000000000) != 0x3000000000000000 || (v4 & 0x100) != 0))
  {
    goto LABEL_28;
  }
  if ((v16 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_28;
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 0x68);
  if (!v17)
    goto LABEL_28;
  v18 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v17 + 8), (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::roleAttr);
  v19 = *(_QWORD *)(v17 + 8);
  if (v19)
    v19 += 32 * *(unsigned int *)(v19 - 4);
  if (v19 == v18)
  {
LABEL_28:
    v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_29:
    v15 = *v21;
    if (!*v21)
    {
      v5 = a2 == 0;
      goto LABEL_34;
    }
LABEL_30:
    v22 = *(_DWORD *)v15;
    v23 = *(unsigned int *)(v15 + 4);
    *(_DWORD *)v15 += 2;
    v5 = ((unint64_t)a2 | v23) == 0;
    if (a2 && (_DWORD)v23)
    {
      v24 = (WTF::StringImpl *)((*(_DWORD *)(v15 + 16) >> 2) & 1);
      v5 = WebCore::SpaceSplitString::spaceSplitStringContainsValue(*(_QWORD *)(v15 + 8), v23 | ((_QWORD)v24 << 32), a2, a3, 1, v24);
      v22 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2)
        goto LABEL_33;
    }
    else if (v22)
    {
LABEL_33:
      *(_DWORD *)v15 = v22;
      goto LABEL_34;
    }
    WTF::StringImpl::destroy((WTF::StringImpl *)v15, (WTF::StringImpl *)a2);
LABEL_34:
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a1);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
    return v5;
  }
  v26[0] = a1;
  v26[1] = a1;
  v20 = *(unsigned int *)(v18 + 24);
  if ((_DWORD)v20 != -1)
  {
    v27 = v26;
    v21 = (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v27, v18 + 8);
    goto LABEL_29;
  }
  v25 = (WebCore::AXObjectCache *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::AXObjectCache::findModalNodes(v25);
}

uint64_t WebCore::AXObjectCache::findModalNodes(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  const WebCore::Node *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const WebCore::Node *v14;

  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 96) + 80);
  if (v3)
  {
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        goto LABEL_4;
    }
    v4 = (uint64_t *)(this + 344);
    while (1)
    {
      if (WebCore::AXObjectCache::isModalElement((WebCore::AXObjectCache *)v3, a2))
      {
        v6 = *(unsigned int *)(v2 + 356);
        if ((_DWORD)v6 == *(_DWORD *)(v2 + 352))
        {
          v7 = v6 + (v6 >> 2);
          if (v7 >= 0x10)
            v8 = v7 + 1;
          else
            v8 = 16;
          if (v8 <= v6 + 1)
            v9 = v6 + 1;
          else
            v9 = v8;
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v2 + 344, v9);
          v6 = *(unsigned int *)(v2 + 356);
          v10 = *(_QWORD *)(v2 + 344);
          v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v3);
          if (v11)
          {
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 + 1, v11));
          }
        }
        else
        {
          v10 = *v4;
          v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v3);
          if (v11)
          {
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 + 1, v11));
          }
        }
        *(_QWORD *)(v10 + 8 * v6) = v11;
        ++*(_DWORD *)(v2 + 356);
      }
      this = WebCore::NodeTraversal::nextIncludingPseudo((WebCore::NodeTraversal *)v3, 0, v5);
      if (!this)
        break;
      v3 = this;
      while ((*(_WORD *)(v3 + 28) & 8) == 0)
      {
        this = WebCore::NodeTraversal::nextIncludingPseudo((WebCore::NodeTraversal *)v3, 0, v14);
        v3 = this;
        if (!this)
          goto LABEL_4;
      }
    }
  }
LABEL_4:
  *(_BYTE *)(v2 + 360) = 1;
  return this;
}

uint64_t WebCore::AXObjectCache::getOrCreate(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  void *v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  WebCore::Node *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  void (**v27)(WebCore::AccessibilityARIAGridRow *__hidden);
  uint64_t v28;
  WebCore::AXObjectCache *v29;
  __n128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Node *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  void *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  WebCore::AccessibilityObject *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;

  v6 = WebCore::AXObjectCache::get((WebCore::AXObjectCache *)a1, (WebCore::Node *)a2);
  if (v6)
    return v6;
  v8 = (void *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v8)
  {
    v6 = *(_QWORD *)(a2 + 32);
    if (!v6)
      return v6;
    v9 = *(_WORD *)(v6 + 28);
    if ((v9 & 8) == 0)
      return 0;
    *(_DWORD *)(a2 + 24) += 2;
    v10 = *(_WORD *)(a2 + 28);
    if ((v10 & 0x10) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24);
      if (v11 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        v12 = a2;
      else
        v12 = 0;
      if (v11 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
        v13 = a2;
      else
        v13 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    if (v12 | v13)
    {
      if (v12)
      {
        v14 = WebCore::HTMLOptionElement::ownerSelectElement((WebCore::HTMLOptionElement *)v12);
        if (v14)
        {
          if (!*(_BYTE *)(v14 + 297))
          {
            if ((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1955D2728);
              }
              v6 = WTF::fastMalloc((WTF *)0x100);
              *(_OWORD *)v6 = 0u;
              *(_OWORD *)(v6 + 16) = 0u;
              *(_OWORD *)(v6 + 32) = 0u;
              *(_OWORD *)(v6 + 48) = 0u;
              *(_OWORD *)(v6 + 64) = 0u;
              *(_OWORD *)(v6 + 80) = 0u;
              *(_OWORD *)(v6 + 96) = 0u;
              *(_OWORD *)(v6 + 112) = 0u;
              *(_OWORD *)(v6 + 128) = 0u;
              *(_OWORD *)(v6 + 144) = 0u;
              *(_OWORD *)(v6 + 160) = 0u;
              *(_OWORD *)(v6 + 176) = 0u;
              *(_OWORD *)(v6 + 192) = 0u;
              *(_OWORD *)(v6 + 208) = 0u;
              *(_OWORD *)(v6 + 218) = 0u;
              v15 = WTF::fastMalloc((WTF *)0x20);
              *(_BYTE *)v15 = 0;
              *(_OWORD *)(v15 + 8) = xmmword_19689B170;
              *(_QWORD *)(v15 + 24) = v6;
              *(_OWORD *)(v6 + 41) = 0u;
              *(_OWORD *)(v6 + 16) = 0u;
              *(_OWORD *)(v6 + 32) = 0u;
              *(_WORD *)(v6 + 57) = 134;
              *(_BYTE *)(v6 + 59) = 2;
              *(_BYTE *)(v6 + 64) = 0;
              *(_BYTE *)(v6 + 96) = 0;
              *(_BYTE *)(v6 + 104) = 0;
              *(_BYTE *)(v6 + 176) = 0;
              *(_WORD *)(v6 + 232) = 0;
              *(_OWORD *)(v6 + 211) = 0u;
              *(_OWORD *)(v6 + 200) = 0u;
              *(_OWORD *)(v6 + 184) = 0u;
              *(_QWORD *)v6 = off_1E337CD98;
              *(_QWORD *)(v6 + 8) = v15;
              *(_BYTE *)(v6 + 234) = -122;
              v16 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v12);
              if (v16)
              {
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 + 1, v16));
              }
              *(_QWORD *)v6 = off_1E337A6B8;
              *(_QWORD *)(v6 + 240) = v16;
              *(_QWORD *)(v6 + 248) = 0;
LABEL_83:
              WebCore::AXObjectCache::cacheAndInitializeWrapper((uint64_t *)a1, (WebCore::AccessibilityObject *)v6, a2, 2);
              v59 = *(_QWORD *)(v6 + 8);
              goto LABEL_100;
            }
            goto LABEL_156;
          }
LABEL_79:
          if ((v10 & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1955D2708);
          }
          v6 = WTF::fastMalloc((WTF *)0xF8);
          *(_OWORD *)v6 = 0u;
          *(_OWORD *)(v6 + 16) = 0u;
          *(_OWORD *)(v6 + 32) = 0u;
          *(_OWORD *)(v6 + 48) = 0u;
          *(_OWORD *)(v6 + 64) = 0u;
          *(_OWORD *)(v6 + 80) = 0u;
          *(_OWORD *)(v6 + 96) = 0u;
          *(_OWORD *)(v6 + 112) = 0u;
          *(_OWORD *)(v6 + 128) = 0u;
          *(_OWORD *)(v6 + 144) = 0u;
          *(_OWORD *)(v6 + 160) = 0u;
          *(_OWORD *)(v6 + 176) = 0u;
          *(_OWORD *)(v6 + 192) = 0u;
          *(_OWORD *)(v6 + 208) = 0u;
          *(_OWORD *)(v6 + 218) = 0u;
          v55 = WTF::fastMalloc((WTF *)0x20);
          *(_BYTE *)v55 = 0;
          *(_OWORD *)(v55 + 8) = xmmword_19689B170;
          *(_QWORD *)(v55 + 24) = v6;
          *(_OWORD *)(v6 + 41) = 0u;
          *(_OWORD *)(v6 + 16) = 0u;
          *(_OWORD *)(v6 + 32) = 0u;
          *(_WORD *)(v6 + 57) = 134;
          *(_BYTE *)(v6 + 59) = 2;
          *(_BYTE *)(v6 + 64) = 0;
          *(_BYTE *)(v6 + 96) = 0;
          *(_BYTE *)(v6 + 104) = 0;
          *(_BYTE *)(v6 + 176) = 0;
          *(_WORD *)(v6 + 232) = 0;
          *(_OWORD *)(v6 + 211) = 0u;
          *(_OWORD *)(v6 + 200) = 0u;
          *(_OWORD *)(v6 + 184) = 0u;
          *(_QWORD *)v6 = off_1E337CD98;
          *(_QWORD *)(v6 + 8) = v55;
          *(_BYTE *)(v6 + 234) = -122;
          v56 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
          if (v56)
          {
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 + 1, v56));
          }
          *(_QWORD *)(v6 + 240) = v56;
          *(_QWORD *)v6 = off_1E3377F98;
          goto LABEL_83;
        }
      }
      else
      {
        v54 = *(_QWORD *)(v13 + 32);
        if (v54
          && (*(_WORD *)(v54 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v54 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
          && *(_BYTE *)(v54 + 297))
        {
          goto LABEL_79;
        }
      }
LABEL_156:
      v6 = 0;
LABEL_157:
      if (*(_DWORD *)(a2 + 24) == 2)
      {
        if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)a2);
      }
      else
      {
        *(_DWORD *)(a2 + 24) -= 2;
      }
      return v6;
    }
    if ((v9 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
    {
      v19 = *(_QWORD *)(v6 + 32);
      if (!v19 || (v20 = *(_WORD *)(v19 + 28), (v20 & 8) == 0))
      {
LABEL_33:
        v18 = 1;
LABEL_34:
        if ((a3 & 1) != 0)
          goto LABEL_35;
        if (*(_BYTE *)(a1 + 768))
        {
          *(_BYTE *)(a1 + 768) = 0;
          v32 = *(_QWORD *)(a1 + 760);
          if (v32)
          {
            *(_QWORD *)(a1 + 760) = 0;
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v32, 0);
          }
          v33 = *(_QWORD *)(a1 + 784);
          if (v33)
          {
            *(_QWORD *)(a1 + 784) = 0;
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v33, v8);
          }
          v34 = *(_QWORD *)(a1 + 776);
          if (v34)
          {
            *(_QWORD *)(a1 + 776) = 0;
            WTF::fastFree((WTF *)(v34 - 16), v8);
          }
          WebCore::AXObjectCache::updateRelationsForTree((uint64_t *)a1, *(WebCore::ContainerNode **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 96));
          v6 = *(_QWORD *)(a2 + 32);
        }
        if (v6)
        {
          v35 = (WebCore::Node *)v6;
          do
          {
            v36 = WebCore::AXObjectCache::get((WebCore::AXObjectCache *)a1, v35);
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 16);
              v38 = *(_QWORD *)(a1 + 760);
              v39 = ~(v37 << 32);
              if (v38)
              {
                v40 = *(_DWORD *)(v38 - 8);
                v41 = ((v37 + v39) ^ ((unint64_t)(v37 + v39) >> 22))
                    + ~(((v37 + v39) ^ ((unint64_t)(v37 + v39) >> 22)) << 13);
                v42 = (9 * (v41 ^ (v41 >> 8))) ^ ((9 * (v41 ^ (v41 >> 8))) >> 15);
                v43 = v40 & (((v42 + ~(v42 << 27)) >> 31) ^ (v42 + ~((_DWORD)v42 << 27)));
                v44 = *(_QWORD *)(v38 + 16 * v43);
                if (v44 == v37)
                  goto LABEL_35;
                v45 = 1;
                while (v44)
                {
                  v43 = (v43 + v45) & v40;
                  v44 = *(_QWORD *)(v38 + 16 * v43);
                  ++v45;
                  if (v44 == v37)
                    goto LABEL_35;
                }
              }
              v46 = *(_QWORD *)(a1 + 776);
              if (v46)
              {
                v47 = *(_DWORD *)(v46 - 8);
                v48 = ((v37 + v39) ^ ((unint64_t)(v37 + v39) >> 22))
                    + ~(((v37 + v39) ^ ((unint64_t)(v37 + v39) >> 22)) << 13);
                v49 = (9 * (v48 ^ (v48 >> 8))) ^ ((9 * (v48 ^ (v48 >> 8))) >> 15);
                v50 = v47 & (((v49 + ~(v49 << 27)) >> 31) ^ (v49 + ~((_DWORD)v49 << 27)));
                v51 = *(_QWORD *)(v46 + 8 * v50);
                if (v51 == v37)
                  goto LABEL_35;
                v52 = 1;
                while (v51)
                {
                  v50 = (v50 + v52) & v47;
                  v51 = *(_QWORD *)(v46 + 8 * v50);
                  ++v52;
                  if (v51 == v37)
                    goto LABEL_35;
                }
              }
            }
            v35 = (WebCore::Node *)*((_QWORD *)v35 + 4);
          }
          while (v35);
          if ((*(_WORD *)(v6 + 28) & 8) != 0)
            v53 = v6;
          else
            v53 = 0;
        }
        else
        {
          v53 = 0;
        }
        v70 = (*(_WORD *)(v53 + 28) & 0x10) != 0
           && *(_QWORD *)(*(_QWORD *)(v53 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24);
        if ((*(_WORD *)(a2 + 28) & 8) != 0)
        {
          v71 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL;
          if (v71)
          {
            v71 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
            if (v71)
              LOBYTE(v71) = (*(_QWORD *)(v71 + 16) & 0x1FLL) == 18;
          }
          v76 = *(_QWORD *)(a2 + 104);
          if (v76)
          {
            v77 = *(_DWORD *)(v76 + 4);
            if ((v77 & 1) != 0)
            {
              v78 = *(uint64_t **)(v76 + 40);
              LODWORD(v79) = *(_DWORD *)(v76 + 52);
            }
            else
            {
              v78 = (uint64_t *)(v76 + 32);
              LODWORD(v79) = v77 >> 5;
            }
            if ((_DWORD)v79)
            {
              v79 = v79;
              do
              {
                v89 = *v78;
                if (*v78 == WebCore::HTMLNames::popoverAttr
                  || *(_QWORD *)(v89 + 24) == *(_QWORD *)(WebCore::HTMLNames::popoverAttr + 24)
                  && *(_QWORD *)(v89 + 32) == *(_QWORD *)(WebCore::HTMLNames::popoverAttr + 32))
                {
                  goto LABEL_35;
                }
                v78 += 2;
              }
              while (--v79);
            }
          }
        }
        else
        {
          LOBYTE(v71) = 0;
        }
        if (((v18 ^ 1 | v70) & 1) == 0
          && (v71 & 1) == 0
          && !WebCore::isNodeAriaVisible((WebCore *)a2, (WebCore::Node *)v8))
        {
          goto LABEL_156;
        }
LABEL_35:
        v6 = WebCore::AXObjectCache::get((WebCore::AXObjectCache *)a1, (WebCore::Node *)a2);
        if (v6)
          goto LABEL_157;
        if ((v18 & 1) == 0)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
          *(_DWORD *)(v22 + 24) += 2;
          WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v22);
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        if (WebCore::isAccessibilityList((WebCore *)a2, v21))
        {
          v23 = WTF::fastMalloc((WTF *)0x100);
          *(_OWORD *)v23 = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)(v23 + 64) = 0u;
          *(_OWORD *)(v23 + 80) = 0u;
          *(_OWORD *)(v23 + 96) = 0u;
          *(_OWORD *)(v23 + 112) = 0u;
          *(_OWORD *)(v23 + 128) = 0u;
          *(_OWORD *)(v23 + 144) = 0u;
          *(_OWORD *)(v23 + 160) = 0u;
          *(_OWORD *)(v23 + 176) = 0u;
          *(_OWORD *)(v23 + 192) = 0u;
          *(_OWORD *)(v23 + 208) = 0u;
          *(_OWORD *)(v23 + 218) = 0u;
          v24 = WTF::fastMalloc((WTF *)0x20);
          *(_BYTE *)v24 = 0;
          *(_OWORD *)(v24 + 8) = xmmword_19689B170;
          *(_QWORD *)(v24 + 24) = v23;
          *(_OWORD *)(v23 + 41) = 0u;
          *(_OWORD *)(v23 + 16) = 0u;
          *(_OWORD *)(v23 + 32) = 0u;
          *(_WORD *)(v23 + 57) = 134;
          *(_BYTE *)(v23 + 59) = 2;
          *(_BYTE *)(v23 + 64) = 0;
          *(_BYTE *)(v23 + 96) = 0;
          *(_BYTE *)(v23 + 104) = 0;
          *(_BYTE *)(v23 + 176) = 0;
          *(_WORD *)(v23 + 232) = 0;
          *(_OWORD *)(v23 + 211) = 0u;
          *(_OWORD *)(v23 + 200) = 0u;
          *(_OWORD *)(v23 + 184) = 0u;
          *(_QWORD *)v23 = off_1E337CD98;
          *(_QWORD *)(v23 + 8) = v24;
          *(_BYTE *)(v23 + 234) = -122;
          v25 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
          if (v25)
          {
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 + 1, v25));
          }
          *(_QWORD *)(v23 + 240) = v25;
          *(_QWORD *)(v23 + 248) = 0;
          v27 = off_1E3376578;
        }
        else
        {
          if ((*(_WORD *)(a2 + 28) & 0x10) != 0)
          {
            v72 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24);
            if (v72 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
            {
              v23 = WTF::fastMalloc((WTF *)0x140);
              *(_OWORD *)v23 = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_OWORD *)(v23 + 48) = 0u;
              *(_OWORD *)(v23 + 64) = 0u;
              *(_OWORD *)(v23 + 80) = 0u;
              *(_OWORD *)(v23 + 96) = 0u;
              *(_OWORD *)(v23 + 112) = 0u;
              *(_OWORD *)(v23 + 128) = 0u;
              *(_OWORD *)(v23 + 144) = 0u;
              *(_OWORD *)(v23 + 160) = 0u;
              *(_OWORD *)(v23 + 176) = 0u;
              *(_OWORD *)(v23 + 192) = 0u;
              *(_OWORD *)(v23 + 208) = 0u;
              *(_OWORD *)(v23 + 218) = 0u;
              v80 = WTF::fastMalloc((WTF *)0x20);
              *(_BYTE *)v80 = 0;
              *(_OWORD *)(v80 + 8) = xmmword_19689B170;
              *(_QWORD *)(v80 + 24) = v23;
              *(_OWORD *)(v23 + 41) = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_WORD *)(v23 + 57) = 134;
              *(_BYTE *)(v23 + 59) = 2;
              *(_BYTE *)(v23 + 64) = 0;
              *(_BYTE *)(v23 + 96) = 0;
              *(_BYTE *)(v23 + 104) = 0;
              *(_BYTE *)(v23 + 176) = 0;
              *(_WORD *)(v23 + 232) = 0;
              *(_OWORD *)(v23 + 211) = 0u;
              *(_OWORD *)(v23 + 200) = 0u;
              *(_OWORD *)(v23 + 184) = 0u;
              *(_QWORD *)v23 = off_1E337CD98;
              *(_QWORD *)(v23 + 8) = v80;
              *(_BYTE *)(v23 + 234) = -122;
              v81 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
              if (v81)
              {
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 + 1, v81));
              }
              *(_QWORD *)(v23 + 240) = v81;
              *(_QWORD *)(v23 + 248) = 0;
              *(_QWORD *)v23 = off_1E3386A58;
              *(_OWORD *)(v23 + 256) = 0u;
              *(_OWORD *)(v23 + 272) = 0u;
              *(_OWORD *)(v23 + 288) = 0u;
              *(_QWORD *)(v23 + 304) = 0;
              *(_BYTE *)(v23 + 312) = 1;
              goto LABEL_44;
            }
            if (v72 == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
            {
              v23 = WTF::fastMalloc((WTF *)0x108);
              *(_OWORD *)v23 = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_OWORD *)(v23 + 48) = 0u;
              *(_OWORD *)(v23 + 64) = 0u;
              *(_OWORD *)(v23 + 80) = 0u;
              *(_OWORD *)(v23 + 96) = 0u;
              *(_OWORD *)(v23 + 112) = 0u;
              *(_OWORD *)(v23 + 128) = 0u;
              *(_OWORD *)(v23 + 144) = 0u;
              *(_OWORD *)(v23 + 160) = 0u;
              *(_OWORD *)(v23 + 176) = 0u;
              *(_OWORD *)(v23 + 192) = 0u;
              *(_OWORD *)(v23 + 208) = 0u;
              *(_OWORD *)(v23 + 218) = 0u;
              v86 = WTF::fastMalloc((WTF *)0x20);
              *(_BYTE *)v86 = 0;
              *(_OWORD *)(v86 + 8) = xmmword_19689B170;
              *(_QWORD *)(v86 + 24) = v23;
              *(_OWORD *)(v23 + 41) = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_WORD *)(v23 + 57) = 134;
              *(_BYTE *)(v23 + 59) = 2;
              *(_BYTE *)(v23 + 64) = 0;
              *(_BYTE *)(v23 + 96) = 0;
              *(_BYTE *)(v23 + 104) = 0;
              *(_BYTE *)(v23 + 176) = 0;
              *(_WORD *)(v23 + 232) = 0;
              *(_OWORD *)(v23 + 211) = 0u;
              *(_OWORD *)(v23 + 200) = 0u;
              *(_OWORD *)(v23 + 184) = 0u;
              *(_QWORD *)v23 = off_1E337CD98;
              *(_QWORD *)(v23 + 8) = v86;
              *(_BYTE *)(v23 + 234) = -122;
              v87 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
              if (v87)
              {
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 + 1, v87));
              }
              *(_QWORD *)(v23 + 240) = v87;
              *(_QWORD *)(v23 + 248) = 0;
              v27 = off_1E3389E70;
              goto LABEL_43;
            }
            if (v72 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24)
              || v72 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
            {
              v23 = WTF::fastMalloc((WTF *)0x110);
              *(_OWORD *)v23 = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_OWORD *)(v23 + 48) = 0u;
              *(_OWORD *)(v23 + 64) = 0u;
              *(_OWORD *)(v23 + 80) = 0u;
              *(_OWORD *)(v23 + 96) = 0u;
              *(_OWORD *)(v23 + 112) = 0u;
              *(_OWORD *)(v23 + 128) = 0u;
              *(_OWORD *)(v23 + 144) = 0u;
              *(_OWORD *)(v23 + 160) = 0u;
              *(_OWORD *)(v23 + 176) = 0u;
              *(_OWORD *)(v23 + 192) = 0u;
              *(_OWORD *)(v23 + 208) = 0u;
              *(_OWORD *)(v23 + 218) = 0u;
              v83 = WTF::fastMalloc((WTF *)0x20);
              *(_BYTE *)v83 = 0;
              *(_OWORD *)(v83 + 8) = xmmword_19689B170;
              *(_QWORD *)(v83 + 24) = v23;
              *(_OWORD *)(v23 + 41) = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_WORD *)(v23 + 57) = 134;
              *(_BYTE *)(v23 + 59) = 2;
              *(_BYTE *)(v23 + 64) = 0;
              *(_BYTE *)(v23 + 96) = 0;
              *(_BYTE *)(v23 + 104) = 0;
              *(_BYTE *)(v23 + 176) = 0;
              *(_WORD *)(v23 + 232) = 0;
              *(_OWORD *)(v23 + 211) = 0u;
              *(_OWORD *)(v23 + 200) = 0u;
              *(_OWORD *)(v23 + 184) = 0u;
              *(_QWORD *)v23 = off_1E337CD98;
              *(_QWORD *)(v23 + 8) = v83;
              *(_BYTE *)(v23 + 234) = -122;
              v84 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
              if (v84)
              {
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 + 1, v84));
              }
              *(_QWORD *)(v23 + 240) = v84;
              *(_QWORD *)(v23 + 248) = 0;
              *(_QWORD *)v23 = off_1E3387778;
              *(_OWORD *)(v23 + 256) = xmmword_1968DF730;
              goto LABEL_44;
            }
          }
          if (WebCore::nodeHasRole(a2, (int16x8_t *)"tree", 0x100000004))
          {
            v23 = WTF::fastMalloc((WTF *)0x100);
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_OWORD *)(v23 + 112) = 0u;
            *(_OWORD *)(v23 + 128) = 0u;
            *(_OWORD *)(v23 + 144) = 0u;
            *(_OWORD *)(v23 + 160) = 0u;
            *(_OWORD *)(v23 + 176) = 0u;
            *(_OWORD *)(v23 + 192) = 0u;
            *(_OWORD *)(v23 + 208) = 0u;
            *(_OWORD *)(v23 + 218) = 0u;
            v73 = WTF::fastMalloc((WTF *)0x20);
            *(_BYTE *)v73 = 0;
            *(_OWORD *)(v73 + 8) = xmmword_19689B170;
            *(_QWORD *)(v73 + 24) = v23;
            *(_OWORD *)(v23 + 41) = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_WORD *)(v23 + 57) = 134;
            *(_BYTE *)(v23 + 59) = 2;
            *(_BYTE *)(v23 + 64) = 0;
            *(_BYTE *)(v23 + 96) = 0;
            *(_BYTE *)(v23 + 104) = 0;
            *(_BYTE *)(v23 + 176) = 0;
            *(_WORD *)(v23 + 232) = 0;
            *(_OWORD *)(v23 + 211) = 0u;
            *(_OWORD *)(v23 + 200) = 0u;
            *(_OWORD *)(v23 + 184) = 0u;
            *(_QWORD *)v23 = off_1E337CD98;
            *(_QWORD *)(v23 + 8) = v73;
            *(_BYTE *)(v23 + 234) = -122;
            v74 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
            if (v74)
            {
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 + 1, v74));
            }
            *(_QWORD *)(v23 + 240) = v74;
            *(_QWORD *)(v23 + 248) = 0;
            v27 = off_1E338AB88;
          }
          else if (WebCore::nodeHasRole(a2, (int16x8_t *)"treeitem", 0x100000008))
          {
            v23 = WTF::fastMalloc((WTF *)0x108);
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_OWORD *)(v23 + 112) = 0u;
            *(_OWORD *)(v23 + 128) = 0u;
            *(_OWORD *)(v23 + 144) = 0u;
            *(_OWORD *)(v23 + 160) = 0u;
            *(_OWORD *)(v23 + 176) = 0u;
            *(_OWORD *)(v23 + 192) = 0u;
            *(_OWORD *)(v23 + 208) = 0u;
            *(_OWORD *)(v23 + 218) = 0u;
            v90 = WTF::fastMalloc((WTF *)0x20);
            *(_BYTE *)v90 = 0;
            *(_OWORD *)(v90 + 8) = xmmword_19689B170;
            *(_QWORD *)(v90 + 24) = v23;
            *(_OWORD *)(v23 + 41) = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_WORD *)(v23 + 57) = 134;
            *(_BYTE *)(v23 + 59) = 2;
            *(_BYTE *)(v23 + 64) = 0;
            *(_BYTE *)(v23 + 96) = 0;
            *(_BYTE *)(v23 + 104) = 0;
            *(_BYTE *)(v23 + 176) = 0;
            *(_WORD *)(v23 + 232) = 0;
            *(_OWORD *)(v23 + 211) = 0u;
            *(_OWORD *)(v23 + 200) = 0u;
            *(_OWORD *)(v23 + 184) = 0u;
            *(_QWORD *)v23 = off_1E337CD98;
            *(_QWORD *)(v23 + 8) = v90;
            *(_BYTE *)(v23 + 234) = -122;
            v91 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
            if (v91)
            {
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 + 1, v91));
            }
            *(_QWORD *)(v23 + 240) = v91;
            *(_QWORD *)(v23 + 248) = 0;
            v27 = off_1E338B898;
          }
          else if ((WebCore::nodeHasRole(a2, (int16x8_t *)"grid", 0x100000004) & 1) != 0
                 || (WebCore::nodeHasRole(a2, (int16x8_t *)"table", 0x100000005) & 1) != 0
                 || WebCore::nodeHasRole(a2, (int16x8_t *)"treegrid", 0x100000008))
          {
            v23 = WTF::fastMalloc((WTF *)0x140);
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_OWORD *)(v23 + 112) = 0u;
            *(_OWORD *)(v23 + 128) = 0u;
            *(_OWORD *)(v23 + 144) = 0u;
            *(_OWORD *)(v23 + 160) = 0u;
            *(_OWORD *)(v23 + 176) = 0u;
            *(_OWORD *)(v23 + 192) = 0u;
            *(_OWORD *)(v23 + 208) = 0u;
            *(_OWORD *)(v23 + 218) = 0u;
            v93 = WTF::fastMalloc((WTF *)0x20);
            *(_BYTE *)v93 = 0;
            *(_OWORD *)(v93 + 8) = xmmword_19689B170;
            *(_QWORD *)(v93 + 24) = v23;
            *(_OWORD *)(v23 + 41) = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_WORD *)(v23 + 57) = 134;
            *(_BYTE *)(v23 + 59) = 2;
            *(_BYTE *)(v23 + 64) = 0;
            *(_BYTE *)(v23 + 96) = 0;
            *(_BYTE *)(v23 + 104) = 0;
            *(_BYTE *)(v23 + 176) = 0;
            *(_WORD *)(v23 + 232) = 0;
            *(_OWORD *)(v23 + 211) = 0u;
            *(_OWORD *)(v23 + 200) = 0u;
            *(_OWORD *)(v23 + 184) = 0u;
            *(_QWORD *)v23 = off_1E337CD98;
            *(_QWORD *)(v23 + 8) = v93;
            *(_BYTE *)(v23 + 234) = -122;
            v94 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
            if (v94)
            {
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 + 1, v94));
            }
            *(_QWORD *)(v23 + 240) = v94;
            *(_OWORD *)(v23 + 248) = 0u;
            *(_OWORD *)(v23 + 264) = 0u;
            *(_OWORD *)(v23 + 280) = 0u;
            *(_OWORD *)(v23 + 296) = 0u;
            *(_BYTE *)(v23 + 312) = 1;
            v27 = off_1E3373148;
          }
          else if (WebCore::nodeHasRole(a2, (int16x8_t *)"row", 0x100000003))
          {
            v23 = WTF::fastMalloc((WTF *)0x108);
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_OWORD *)(v23 + 112) = 0u;
            *(_OWORD *)(v23 + 128) = 0u;
            *(_OWORD *)(v23 + 144) = 0u;
            *(_OWORD *)(v23 + 160) = 0u;
            *(_OWORD *)(v23 + 176) = 0u;
            *(_OWORD *)(v23 + 192) = 0u;
            *(_OWORD *)(v23 + 208) = 0u;
            *(_OWORD *)(v23 + 218) = 0u;
            v96 = WTF::fastMalloc((WTF *)0x20);
            *(_BYTE *)v96 = 0;
            *(_OWORD *)(v96 + 8) = xmmword_19689B170;
            *(_QWORD *)(v96 + 24) = v23;
            *(_OWORD *)(v23 + 41) = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_WORD *)(v23 + 57) = 134;
            *(_BYTE *)(v23 + 59) = 2;
            *(_BYTE *)(v23 + 64) = 0;
            *(_BYTE *)(v23 + 96) = 0;
            *(_BYTE *)(v23 + 104) = 0;
            *(_BYTE *)(v23 + 176) = 0;
            *(_WORD *)(v23 + 232) = 0;
            *(_OWORD *)(v23 + 211) = 0u;
            *(_OWORD *)(v23 + 200) = 0u;
            *(_OWORD *)(v23 + 184) = 0u;
            *(_QWORD *)v23 = off_1E337CD98;
            *(_QWORD *)(v23 + 8) = v96;
            *(_BYTE *)(v23 + 234) = -122;
            v97 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
            if (v97)
            {
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 + 1, v97));
            }
            *(_QWORD *)(v23 + 240) = v97;
            *(_QWORD *)(v23 + 248) = 0;
            v27 = off_1E3372430;
          }
          else
          {
            if ((WebCore::nodeHasRole(a2, (int16x8_t *)"gridcell", 0x100000008) & 1) == 0
              && (WebCore::nodeHasRole(a2, (int16x8_t *)"cell", 0x100000004) & 1) == 0
              && (WebCore::nodeHasRole(a2, (int16x8_t *)"columnheader", 0x10000000CLL) & 1) == 0
              && !WebCore::nodeHasRole(a2, (int16x8_t *)"rowheader", 0x100000009))
            {
              v23 = WTF::fastMalloc((WTF *)0xF8);
              *(_OWORD *)v23 = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_OWORD *)(v23 + 48) = 0u;
              *(_OWORD *)(v23 + 64) = 0u;
              *(_OWORD *)(v23 + 80) = 0u;
              *(_OWORD *)(v23 + 96) = 0u;
              *(_OWORD *)(v23 + 112) = 0u;
              *(_OWORD *)(v23 + 128) = 0u;
              *(_OWORD *)(v23 + 144) = 0u;
              *(_OWORD *)(v23 + 160) = 0u;
              *(_OWORD *)(v23 + 176) = 0u;
              *(_OWORD *)(v23 + 192) = 0u;
              *(_OWORD *)(v23 + 208) = 0u;
              *(_OWORD *)(v23 + 218) = 0u;
              v103 = WTF::fastMalloc((WTF *)0x20);
              *(_BYTE *)v103 = 0;
              *(_OWORD *)(v103 + 8) = xmmword_19689B170;
              *(_QWORD *)(v103 + 24) = v23;
              *(_OWORD *)(v23 + 41) = 0u;
              *(_OWORD *)(v23 + 16) = 0u;
              *(_OWORD *)(v23 + 32) = 0u;
              *(_WORD *)(v23 + 57) = 134;
              *(_BYTE *)(v23 + 59) = 2;
              *(_BYTE *)(v23 + 64) = 0;
              *(_BYTE *)(v23 + 96) = 0;
              *(_BYTE *)(v23 + 104) = 0;
              *(_BYTE *)(v23 + 176) = 0;
              *(_WORD *)(v23 + 232) = 0;
              *(_OWORD *)(v23 + 211) = 0u;
              *(_OWORD *)(v23 + 200) = 0u;
              *(_OWORD *)(v23 + 184) = 0u;
              *(_QWORD *)v23 = off_1E337CD98;
              *(_QWORD *)(v23 + 8) = v103;
              *(_BYTE *)(v23 + 234) = -122;
              v104 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
              if (v104)
              {
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 + 1, v104));
              }
              *(_QWORD *)(v23 + 240) = v104;
              goto LABEL_44;
            }
            v23 = WTF::fastMalloc((WTF *)0x110);
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_OWORD *)(v23 + 112) = 0u;
            *(_OWORD *)(v23 + 128) = 0u;
            *(_OWORD *)(v23 + 144) = 0u;
            *(_OWORD *)(v23 + 160) = 0u;
            *(_OWORD *)(v23 + 176) = 0u;
            *(_OWORD *)(v23 + 192) = 0u;
            *(_OWORD *)(v23 + 208) = 0u;
            *(_OWORD *)(v23 + 218) = 0u;
            v99 = WTF::fastMalloc((WTF *)0x20);
            *(_BYTE *)v99 = 0;
            *(_OWORD *)(v99 + 8) = xmmword_19689B170;
            *(_QWORD *)(v99 + 24) = v23;
            *(_OWORD *)(v23 + 41) = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_WORD *)(v23 + 57) = 134;
            *(_BYTE *)(v23 + 59) = 2;
            *(_BYTE *)(v23 + 64) = 0;
            *(_BYTE *)(v23 + 96) = 0;
            *(_BYTE *)(v23 + 104) = 0;
            *(_BYTE *)(v23 + 176) = 0;
            *(_WORD *)(v23 + 232) = 0;
            *(_OWORD *)(v23 + 211) = 0u;
            *(_OWORD *)(v23 + 200) = 0u;
            *(_OWORD *)(v23 + 184) = 0u;
            *(_QWORD *)v23 = off_1E337CD98;
            *(_QWORD *)(v23 + 8) = v99;
            *(_BYTE *)(v23 + 234) = -122;
            v100 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
            if (v100)
            {
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 + 1, v100));
            }
            *(_QWORD *)(v23 + 248) = 0;
            *(_QWORD *)(v23 + 256) = 0;
            *(_QWORD *)(v23 + 240) = v100;
            *(_QWORD *)(v23 + 264) = 0x1FFFFFFFFLL;
            v27 = off_1E3371718;
          }
        }
LABEL_43:
        *(_QWORD *)v23 = v27;
LABEL_44:
        WebCore::AXObjectCache::cacheAndInitializeWrapper((uint64_t *)a1, (WebCore::AccessibilityObject *)v23, a2, 2);
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1488))(v23);
        v29 = (WebCore::AXObjectCache *)v28;
        if (v28 && *(_BYTE *)(v28 + 361)
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 2896))(v23) & 1) == 0)
        {
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 2872))(v23);
        }
        else
        {
          v31 = 1;
        }
        v60 = *(unsigned __int8 *)(v23 + 59);
        *(_BYTE *)(v23 + 59) = v31;
        if (v29)
        {
          v61 = v60 == 1 ? v31 : 1;
          v62 = v60 ? 0 : v31;
          if (v61 != 1 || v62)
          {
            v63 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1232))(v23);
            v30.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v29, v63);
          }
        }
        if ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v23 + 40))(v23, v30))
          v6 = 0;
        else
          v6 = v23;
        v59 = *(_QWORD *)(v23 + 8);
LABEL_100:
        if (__ldaxr((unsigned __int8 *)v59))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v59))
        {
          goto LABEL_104;
        }
        MEMORY[0x19AEA534C](v59);
LABEL_104:
        v65 = *(_QWORD *)(v59 + 8);
        v66 = v65 - 1;
        *(_QWORD *)(v59 + 8) = v65 - 1;
        if (v65 == 1)
        {
          v102 = *(_QWORD *)(v59 + 16);
          v67 = *(_QWORD *)(v59 + 24);
          *(_QWORD *)(v59 + 24) = 0;
          v68 = v102 != 0;
        }
        else
        {
          v67 = 0;
          v68 = 1;
        }
        v69 = __ldxr((unsigned __int8 *)v59);
        if (v69 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v59))
          {
LABEL_111:
            if (!v66)
            {
              if (v67)
                (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
              if (!v68)
                WTF::fastFree((WTF *)v59, v58);
            }
            goto LABEL_157;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v59);
        goto LABEL_111;
      }
      while ((v20 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
      {
        v19 = *(_QWORD *)(v19 + 32);
        if (v19)
        {
          v20 = *(_WORD *)(v19 + 28);
          if ((v20 & 8) != 0)
            continue;
        }
        goto LABEL_33;
      }
    }
    v18 = 0;
    goto LABEL_34;
  }
  return WebCore::AXObjectCache::getOrCreate((WebCore::AXObjectCache *)a1, (WebCore::RenderObject *)v8);
}

uint64_t WebCore::AXObjectCache::isNodeVisible(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (!a2)
    return 0;
  if ((*((_WORD *)a2 + 14) & 8) == 0)
    return 0;
  v2 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v3 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if ((*(_BYTE *)(v3 + 0x2D) & 2) != 0)
  {
    v3 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v3)
      v3 = *(_QWORD *)(v3 + 8);
  }
  if ((*(_QWORD *)(v3 + 96) & 0x1FLL) == 0x1A)
    return 0;
  v4 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if ((*(_BYTE *)(v4 + 0x2D) & 0x10) == 0)
  {
    v5 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (!v5)
      goto LABEL_25;
    v4 = *(_QWORD *)(v5 + 8);
    if (!v4)
      goto LABEL_25;
    while ((*(_BYTE *)(v4 + 45) & 0x10) == 0)
    {
      v6 = *(_QWORD *)(v4 + 32);
      if (!v6)
        goto LABEL_25;
      v7 = 0;
      v4 = *(_QWORD *)(v6 + 8);
      if (!v4)
        goto LABEL_18;
    }
  }
LABEL_16:
  if ((*(_BYTE *)(v4 + 21) & 0x80) != 0)
  {
    v7 = *(_QWORD *)(v4 + 144);
    goto LABEL_18;
  }
  while (1)
  {
    v8 = *(_QWORD *)(v4 + 32);
    if (!v8)
      break;
    v4 = *(_QWORD *)(v8 + 8);
    if (!v4)
      break;
    if ((*(_BYTE *)(v4 + 45) & 0x10) != 0)
      goto LABEL_16;
  }
LABEL_25:
  v7 = 0;
LABEL_18:
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v3 + 120) & 0x30) == 0
    || !v7
    || (*(_BYTE *)(v7 + 26) & 8) != 0)
  {
    while (1)
    {
      v10 = v2;
      if ((*(_BYTE *)(v2 + 45) & 2) != 0)
        v10 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
      if (*(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 32) + 4) == 0.0)
        break;
      v11 = *(_QWORD *)(v2 + 32);
      if (v11)
      {
        v2 = *(_QWORD *)(v11 + 8);
        if (v2)
          continue;
      }
      return WebCore::isNodeAriaVisible(a2, a2);
    }
  }
  return 0;
}

double WebCore::AXObjectCache::updateCurrentModalNode(WebCore::AXObjectCache *this, WebCore::Element *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  WebCore::AXObjectCache *v16;
  WebCore::AXObjectCache *isModalElement;
  double result;
  WebCore::Node *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WebCore::AccessibilityObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  uint64_t *v55;
  uint64_t **v56;
  unsigned int v57;
  char v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;

  v2 = (int)a2;
  v4 = *((_QWORD *)this + 42);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *((unsigned int *)this + 89);
  if (!(_DWORD)v6)
    goto LABEL_107;
  v7 = *(_QWORD **)(*((_QWORD *)this + 3) + 8);
  v8 = (uint64_t *)v7[387];
  if (v8)
  {
    v55 = 0;
    do
    {
      if (v55)
        v56 = (uint64_t **)(v55 + 1);
      else
        v56 = (uint64_t **)(v7 + 388);
      v55 = *v56;
      v38 = *v55;
      if ((*(_WORD *)(*v55 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v38 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
      {
        goto LABEL_143;
      }
    }
    while (v55 != v8);
  }
  v9 = *((_BYTE *)this + 361);
  *((_BYTE *)this + 361) = 1;
  v10 = v7[156];
  v58 = v9;
  if (v10)
  {
    *(_DWORD *)(v10 + 24) += 2;
    v11 = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::unspecifiedBoolTypeInstance;
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
  v13 = v11;
  v14 = *((_QWORD *)this + 43);
  v15 = v14 + 8 * v6;
  do
  {
    if (!*(_QWORD *)v14)
      goto LABEL_91;
    v16 = *(WebCore::AXObjectCache **)(*(_QWORD *)v14 + 8);
    if (!v16)
      goto LABEL_91;
    isModalElement = (WebCore::AXObjectCache *)WebCore::AXObjectCache::isModalElement(v16, a2);
    if (!(_DWORD)isModalElement)
      goto LABEL_91;
    v19 = *(_QWORD *)v14 ? *(WebCore::Node **)(*(_QWORD *)v14 + 8) : 0;
    if (!WebCore::AXObjectCache::isNodeVisible(isModalElement, v19))
      goto LABEL_91;
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 8) + 80);
    v21 = 1;
    v61 = 1;
    v60 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v60 = v20;
    while (1)
    {
      v22 = *((_QWORD *)v60 + --v21);
      HIDWORD(v61) = v21;
      if (v22)
        break;
LABEL_60:
      if (!v21)
      {
        v36 = 0;
        goto LABEL_63;
      }
    }
    while (1)
    {
      v23 = WebCore::AXObjectCache::getOrCreate((uint64_t)this, v22, 0);
      if (v23)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 2872))(v23))
          break;
      }
      if ((*(_WORD *)(v22 + 28) & 8) != 0)
      {
        v24 = *(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL;
        if (v24)
        {
          v25 = *(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v25 + 0x2D) & 2) != 0)
          {
            v25 = *(_QWORD *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
            if (v25)
              v25 = *(_QWORD *)(v25 + 8);
          }
          if ((*(_QWORD *)(v25 + 96) & 0x1FLL) != 0x1A)
          {
            v26 = *(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL;
            if ((*(_BYTE *)(v26 + 0x2D) & 0x10) != 0)
              goto LABEL_36;
            v27 = *(_QWORD *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
            if (v27)
            {
              v26 = *(_QWORD *)(v27 + 8);
              if (v26)
              {
                while ((*(_BYTE *)(v26 + 45) & 0x10) == 0)
                {
                  v28 = *(_QWORD *)(v26 + 32);
                  if (!v28)
                    goto LABEL_45;
                  v29 = 0;
                  v26 = *(_QWORD *)(v28 + 8);
                  if (!v26)
                    goto LABEL_38;
                }
LABEL_36:
                if ((*(_BYTE *)(v26 + 21) & 0x80) != 0)
                {
                  v29 = *(_QWORD *)(v26 + 144);
                  goto LABEL_38;
                }
                while (1)
                {
                  v30 = *(_QWORD *)(v26 + 32);
                  if (!v30)
                    break;
                  v26 = *(_QWORD *)(v30 + 8);
                  if (!v26)
                    break;
                  if ((*(_BYTE *)(v26 + 45) & 0x10) != 0)
                    goto LABEL_36;
                }
              }
            }
LABEL_45:
            v29 = 0;
LABEL_38:
            if ((*(_BYTE *)(*(_QWORD *)(v25 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v25 + 120) & 0x30) == 0
              || !v29
              || (*(_BYTE *)(v29 + 26) & 8) != 0)
            {
              while (1)
              {
                v31 = v24;
                if ((*(_BYTE *)(v24 + 45) & 2) != 0)
                  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 8);
                LODWORD(result) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 88) + 32) + 4);
                if (*(float *)&result == 0.0)
                  break;
                v32 = *(_QWORD *)(v24 + 32);
                if (v32)
                {
                  v24 = *(_QWORD *)(v32 + 8);
                  if (v24)
                    continue;
                }
                if (WebCore::isNodeAriaVisible((WebCore *)v22, a2))
                {
                  if ((*(_WORD *)(v22 + 28) & 4) != 0)
                    v33 = *(_QWORD *)(v22 + 80);
                  else
                    v33 = 0;
                  v59 = v33;
                  v34 = HIDWORD(v61);
                  if (HIDWORD(v61) == (_DWORD)v61)
                  {
                    v35 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v60, HIDWORD(v61) + 1, (unint64_t)&v59);
                    v34 = HIDWORD(v61);
                    *((_QWORD *)v60 + HIDWORD(v61)) = *(_QWORD *)v35;
                  }
                  else
                  {
                    *((_QWORD *)v60 + HIDWORD(v61)) = v33;
                  }
                  HIDWORD(v61) = v34 + 1;
                }
                break;
              }
            }
          }
        }
      }
      v22 = *(_QWORD *)(v22 + 56);
      if (!v22)
      {
        v21 = HIDWORD(v61);
        goto LABEL_60;
      }
    }
    v36 = 1;
LABEL_63:
    v37 = v60;
    if (v60)
    {
      v60 = 0;
      LODWORD(v61) = 0;
      WTF::fastFree(v37, a2);
    }
    if (!v36)
      goto LABEL_91;
    if (*(_QWORD *)v14)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v14 + 8);
      if (v38)
        *(_DWORD *)(v38 + 24) += 2;
    }
    else
    {
      v38 = 0;
    }
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    if (!v10)
      goto LABEL_90;
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    v40 = *(_WORD *)(v39 + 28);
    if ((v40 & 0xF000) == 0x9000)
    {
      if (**(_QWORD **)(v10 + 40) == v39 && (*(_WORD *)(v10 + 28) & 0xF000) != 0x9000)
      {
        v12 = v38;
        if ((*(_BYTE *)(v10 + 22) & 8) != 0)
          goto LABEL_99;
        goto LABEL_91;
      }
LABEL_90:
      v12 = v38;
      goto LABEL_91;
    }
    if ((v40 & 4) == 0
      || !*(_QWORD *)(v39 + 80)
      || ((*(unsigned __int8 *)(v10 + 22) ^ *(unsigned __int8 *)(v39 + 22)) & 8) != 0)
    {
      goto LABEL_90;
    }
    v41 = v10;
    do
      v41 = *(_QWORD *)(v41 + 32);
    while (v41 != v39 && v41 != 0);
    v12 = v38;
    if (v41)
    {
LABEL_99:
      v12 = v38;
      goto LABEL_100;
    }
LABEL_91:
    v14 += 8;
  }
  while (v14 != v15);
  if (!v13 || v2)
  {
    v38 = v12;
    goto LABEL_99;
  }
  v38 = 0;
LABEL_100:
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  *((_BYTE *)this + 361) = v58;
  if (!v38)
  {
LABEL_107:
    v43 = 0;
    goto LABEL_108;
  }
LABEL_143:
  v43 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v38);
  if (v43)
  {
    do
      v57 = __ldaxr((unsigned int *)v43);
    while (__stlxr(v57 + 1, (unsigned int *)v43));
  }
LABEL_108:
  v44 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = v43;
  if (v44)
  {
    do
    {
      v45 = __ldaxr((unsigned int *)v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, (unsigned int *)v44));
    if (!v46)
    {
      atomic_store(1u, (unsigned int *)v44);
      v53 = *(unsigned int *)(v44 + 28);
      if ((_DWORD)v53)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v44 + 16), (WTF::StringImpl *)(*(_QWORD *)(v44 + 16) + 32 * v53));
      v54 = *(WTF **)(v44 + 16);
      if (v54)
      {
        *(_QWORD *)(v44 + 16) = 0;
        *(_DWORD *)(v44 + 24) = 0;
        WTF::fastFree(v54, a2);
      }
      WTF::fastFree((WTF *)v44, a2);
    }
    v43 = *((_QWORD *)this + 42);
  }
  if (v43)
    v47 = *(_QWORD *)(v43 + 8);
  else
    v47 = 0;
  if (v5 != v47)
  {
    v48 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 528);
    if (!v48)
      goto LABEL_123;
    v49 = *(_QWORD *)(v48 + 8);
    if (!v49)
      goto LABEL_123;
    v50 = *(WebCore::AccessibilityObject **)(v49 + 288);
    if (!v50)
      return WebCore::AXObjectCache::childrenChanged(this, v50);
    v51 = WebCore::AXObjectCache::getOrCreate(this, v50);
    if (v51 && (v52 = v51, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 1456))(v51) == 99))
      v50 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 3232))(v52);
    else
LABEL_123:
      v50 = 0;
    return WebCore::AXObjectCache::childrenChanged(this, v50);
  }
  return result;
}

double WebCore::AXObjectCache::childrenChanged(WebCore::AXObjectCache *this, WebCore::AccessibilityObject *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v7;
  void *v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t FireTime;
  double v19;
  uint64_t v20;
  WebCore::Node *v21;
  double v22;
  double v23;
  double result;
  uint64_t v25;
  WebCore::Node *v26;
  uint64_t *v27[3];

  if (!a2)
    return result;
  v4 = (uint64_t *)((char *)this + 560);
  v5 = *((_QWORD *)a2 + 1);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v26 = a2;
  WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add(v27, v4, &v26);
  v9 = v26;
  v26 = 0;
  if (!v9)
    goto LABEL_28;
  v10 = *((_QWORD *)v9 + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_16:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v25 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v25 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
    {
      if (!v13)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (!v13)
  {
LABEL_24:
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      WTF::fastFree((WTF *)v10, v8);
  }
LABEL_28:
  v17 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 832))(a2);
  if (v17
    && (*(_WORD *)(v17 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
  {
    FireTime = WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLTableElement>((uint64_t)v27, (uint64_t)this + 464, v17);
    if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 49) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)FireTime);
      FireTime = WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v19 + 0.0);
    }
  }
  else
  {
    FireTime = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 832))(a2);
    if (FireTime)
    {
      if ((*(_WORD *)(FireTime + 28) & 0x10) != 0)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(FireTime + 96) + 24);
        if (v20 == *(_QWORD *)(WebCore::HTMLNames::theadTag + 24)
          || v20 == *(_QWORD *)(WebCore::HTMLNames::tfootTag + 24)
          || v20 == *(_QWORD *)(WebCore::HTMLNames::tbodyTag + 24))
        {
          FireTime = WebCore::HTMLTablePartElement::findParentTable(FireTime, &v26);
          v21 = v26;
          if (v26)
          {
            if ((*((_WORD *)v26 + 14) & 0x10) != 0
              && *(_QWORD *)(*((_QWORD *)v26 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
            {
              FireTime = WTF::WeakHashSet<WebCore::HTMLTableElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::HTMLTableElement>((uint64_t)v27, (uint64_t)this + 464, (uint64_t)v26);
              if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
                || *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              {
                *((_QWORD *)this + 49) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)FireTime);
                FireTime = WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v22 + 0.0);
              }
            }
            if (*((_DWORD *)v21 + 6) == 2)
            {
              if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                FireTime = WebCore::Node::removedLastRef(v21);
            }
            else
            {
              *((_DWORD *)v21 + 6) -= 2;
            }
          }
        }
      }
    }
  }
  if ((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 50) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *((_QWORD *)this + 49) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)FireTime);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 368, v23 + 0.0);
  }
  return result;
}

uint64_t WebCore::isNodeAriaVisible(WebCore *this, WebCore::Node *a2)
{
  WebCore *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  __int16 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL isUserActionElementFocused;
  int v25;

  v2 = this;
  if ((*((_WORD *)this + 14) & 8) != 0)
  {
    v3 = *((_DWORD *)this + 6) + 2;
    *((_DWORD *)this + 6) = v3;
    if ((*((_BYTE *)this + 54) & 2) != 0)
    {
      isUserActionElementFocused = WebCore::Element::isUserActionElementFocused(this);
      v3 = *((_DWORD *)v2 + 6);
      if (isUserActionElementFocused)
      {
        v25 = v3 - 2;
        if (v25)
        {
          *((_DWORD *)v2 + 6) = v25;
        }
        else if ((*((_WORD *)v2 + 15) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef(v2);
        }
        v7 = 1;
        return v7 & 1;
      }
    }
    v4 = v3 - 2;
    if (v4)
    {
      *((_DWORD *)v2 + 6) = v4;
    }
    else if ((*((_WORD *)v2 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v2);
    }
  }
  v5 = 0;
  v6 = *((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL;
  v7 = 1;
  v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  while (1)
  {
    v9 = *((_WORD *)v2 + 14);
    if ((v9 & 8) == 0)
      goto LABEL_31;
    *((_DWORD *)v2 + 6) += 2;
    v10 = *((_QWORD *)v2 + 13);
    if (!v10)
    {
LABEL_19:
      v14 = v8;
      goto LABEL_20;
    }
    v11 = *(unsigned int *)(v10 + 4);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v10 + 40);
      v13 = *(unsigned int *)(v10 + 52);
      if (!v13)
        goto LABEL_19;
    }
    else
    {
      v12 = v10 + 32;
      v13 = v11 >> 5;
      if (!(v11 >> 5))
        goto LABEL_19;
    }
    v14 = (uint64_t *)(v12 + 8);
    while (1)
    {
      v15 = *(v14 - 1);
      if (v15 == WebCore::HTMLNames::aria_hiddenAttr
        || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 24)
        && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_hiddenAttr + 32))
      {
        break;
      }
      v14 += 2;
      if (!--v13)
        goto LABEL_19;
    }
LABEL_20:
    v16 = *v14;
    if (!*v14 || *(_DWORD *)(v16 + 4) != 4)
    {
LABEL_21:
      if ((v9 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)v2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        v18 = 2;
        goto LABEL_41;
      }
      if (!v16)
        goto LABEL_24;
      if (*(_DWORD *)(v16 + 4) != 5)
        goto LABEL_48;
      v21 = *(_QWORD *)(v16 + 8);
      if ((*(_BYTE *)(v16 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v21 & 0xDF) == 0x46
          && (*(_BYTE *)(v21 + 1) & 0xDF) == 0x41
          && (*(_BYTE *)(v21 + 2) & 0xDF) == 0x4C
          && (*(_BYTE *)(v21 + 3) & 0xDF) == 0x53)
        {
          v22 = *(unsigned __int8 *)(v21 + 4);
LABEL_57:
          LODWORD(v16) = (v22 & 0xFFFFFFDF) == 69;
LABEL_24:
          if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
            v17 = 1;
          else
            v17 = v16;
          if ((v17 & (v5 ^ 1)) == 0)
            LODWORD(v16) = v5;
          if (v17 == 1)
          {
            v5 = v16;
LABEL_31:
            v18 = 0;
            goto LABEL_41;
          }
          goto LABEL_40;
        }
      }
      else if ((*(_WORD *)v21 & 0xFFDF) == 0x46
             && (*(_WORD *)(v21 + 2) & 0xFFDF) == 0x41
             && (*(_WORD *)(v21 + 4) & 0xFFDF) == 0x4C
             && (*(_WORD *)(v21 + 6) & 0xFFDF) == 0x53)
      {
        v22 = *(unsigned __int16 *)(v21 + 8);
        goto LABEL_57;
      }
LABEL_48:
      LODWORD(v16) = 0;
      goto LABEL_24;
    }
    v19 = *(_QWORD *)(v16 + 8);
    if ((*(_BYTE *)(v16 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v19 & 0xDF) != 0x54
        || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x55)
      {
        goto LABEL_21;
      }
      v20 = *(unsigned __int8 *)(v19 + 3);
    }
    else
    {
      if ((*(_WORD *)v19 & 0xFFDF) != 0x54
        || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x55)
      {
        goto LABEL_21;
      }
      v20 = *(unsigned __int16 *)(v19 + 6);
    }
    if ((v20 & 0xFFFFFFDF) != 0x45)
      goto LABEL_21;
LABEL_40:
    v7 = 0;
    v18 = 1;
LABEL_41:
    if ((v9 & 8) != 0)
    {
      if (*((_DWORD *)v2 + 6) == 2)
      {
        if ((*((_WORD *)v2 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v2);
      }
      else
      {
        *((_DWORD *)v2 + 6) -= 2;
      }
    }
    if (v18)
      break;
    v2 = (WebCore *)*((_QWORD *)v2 + 4);
    if (!v2)
      goto LABEL_68;
  }
  if (v18 != 2)
    return v7 & 1;
LABEL_68:
  v7 = (v6 != 0) | v5;
  return v7 & 1;
}

uint64_t WebCore::AXObjectCache::focusedImageMapUIElement(WebCore::AXObjectCache *this, WebCore::HTMLAreaElement *a2)
{
  uint64_t v2;
  const WTF::AtomString *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  const WebCore::TreeScope *v18;
  unsigned int *v19;
  uint64_t v20;
  BOOL v21;
  WebCore::AXObjectCache *v22;
  WebCore::AXObjectCache **v23;
  WebCore::AXObjectCache *v24;
  WebCore::Node *v25;
  WebCore::AXObjectCache *v26;
  uint64_t v27;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return v2;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::mapTag + 24))
  {
    return 0;
  }
  v4 = (const WTF::AtomString *)(v2 + 112);
  v5 = *(_QWORD *)(v2 + 112);
  v6 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v6 + 2;
  if (!v5
    || !*(_DWORD *)(v5 + 4)
    || (v18 = *(const WebCore::TreeScope **)(v2 + 40), (v19 = (unsigned int *)*((_QWORD *)v18 + 6)) == 0))
  {
    v25 = 0;
    if (!v6)
      goto LABEL_29;
LABEL_6:
    *(_DWORD *)(v2 + 24) = v6;
    goto LABEL_7;
  }
  WebCore::TreeScopeOrderedMap::getElementByUsemap(v19, v4, v18, (uint64_t *)&v25);
  v6 = *(_DWORD *)(v2 + 24) - 2;
  if (*(_DWORD *)(v2 + 24) != 2)
    goto LABEL_6;
LABEL_29:
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
LABEL_7:
  if (!v25)
    return 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v8 & 1) != 0)
  {
    v20 = WebCore::Document::topDocument(v7);
    *(_DWORD *)(v20 + 24) += 2;
    v27 = v20;
    if (*(_QWORD *)(v20 + 1944))
      v21 = *(_BYTE *)(v20 + 3405) == 0;
    else
      v21 = 0;
    if (v21)
    {
      v23 = (WebCore::AXObjectCache **)v20;
      v22 = *(WebCore::AXObjectCache **)(v20 + 1488);
      if (!v22)
      {
        v24 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
        v26 = WebCore::AXObjectCache::AXObjectCache(v24, (WebCore::Document *)v23);
        std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v23 + 186, &v26);
        std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v26);
        WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        v22 = v23[186];
      }
    }
    else
    {
      v22 = 0;
    }
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v27);
    v9 = (uint64_t)v22;
  }
  else
  {
    v9 = 0;
  }
  v11 = WebCore::AXObjectCache::getOrCreate(v9, (uint64_t)v25, 0);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (v11
    && (v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 1896))(v11, 1),
        v13 = *(unsigned int *)(v12 + 12),
        (_DWORD)v13))
  {
    v14 = *(_QWORD **)v12;
    v15 = 8 * v13;
    while (1)
    {
      v2 = *v14;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v14 + 48))(*v14))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 2792))(v2))
        {
          v16 = *(_QWORD *)(v2 + 248);
          if (v16)
          {
            if (*(WebCore::AXObjectCache **)(v16 + 8) == this)
              break;
          }
        }
      }
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    v2 = 0;
  }
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v10);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  return v2;
}

uint64_t WebCore::AXObjectCache::focusedObjectForPage(WebCore::AXObjectCache *this, const WebCore::Page *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v16;
  _QWORD *v17;

  v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v2 & 1) == 0)
    return 0;
  v5 = *((_QWORD *)a2 + 9);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 144))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 160);
    if (*(_BYTE *)(v7 + 144))
      return 0;
  }
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = *(_QWORD *)(v7 + 296);
  if (v10)
  {
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v10);
    v11 = *(_QWORD *)(v10 + 1248);
    if (v11)
    {
      *(_DWORD *)(v11 + 24) += 2;
      v3 = WebCore::AXObjectCache::focusedObjectForNode(this, (WebCore::Node *)v11);
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    else
    {
      v3 = WebCore::AXObjectCache::focusedObjectForNode(this, (WebCore::Node *)v10);
    }
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  else
  {
    v3 = 0;
  }
  do
  {
    v13 = __ldaxr(v8);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v8));
  if (!v14)
  {
    atomic_store(1u, v8);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E31FE290;
    v16[1] = v8;
    v17 = v16;
    WTF::ensureOnMainThread();
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  return v3;
}

uint64_t WebCore::AXObjectCache::focusedObjectForNode(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;

  if (!a2)
    return 0;
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
  {
    return WebCore::AXObjectCache::focusedImageMapUIElement(a2, a2);
  }
  v4 = WebCore::AXObjectCache::getOrCreate((uint64_t)this, (uint64_t)a2, 0);
  v3 = v4;
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2976))(v4);
    v6 = (v5 - 42) > 0x32 || ((1 << (v5 - 42)) & 0x4A48182000005) == 0;
    if (v6 && v5 != 133 && v5 != 129)
      goto LABEL_17;
    (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 984))(&v9, v3, 1);
    if (v10)
    {
      v8 = *v9;
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v7);
      if (v8)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8))
          return v8;
        else
          return 0;
      }
    }
    else
    {
      WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v7);
    }
LABEL_17:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 856))(v3))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1240))(v3);
  }
  return v3;
}

uint64_t WebCore::AXObjectCache::get(WebCore::AXObjectCache *this, WebCore::Widget *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = v7;
      v10 = *(_QWORD *)(v2 + 16 * v7);
      if (v10 != -1)
      {
        if (!v10)
          return 0;
        if (*(WebCore::Widget **)(v10 + 8) == a2)
          break;
      }
      v7 = (v9 + i) & v3;
    }
    v11 = *(_QWORD *)(v2 + 16 * v9 + 8);
    if (v11)
    {
      v12 = *((_QWORD *)this + 7);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = *(_QWORD *)(v12 + 16 * v17);
        if (v18 == v11)
          return *(_QWORD *)(v12 + 16 * v17 + 8);
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(v12 + 16 * v17);
          ++v19;
          if (v18 == v11)
            return *(_QWORD *)(v12 + 16 * v17 + 8);
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::AXObjectCache::get(WebCore::AXObjectCache *this, WebCore::RenderObject *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = v7;
      v10 = *(_QWORD *)(v2 + 16 * v7);
      if (v10 != -1)
      {
        if (!v10)
          return 0;
        if (*(WebCore::RenderObject **)(v10 + 8) == a2)
          break;
      }
      v7 = (v9 + i) & v3;
    }
    v11 = *(_QWORD *)(v2 + 16 * v9 + 8);
    if (v11)
    {
      v12 = *((_QWORD *)this + 7);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = *(_QWORD *)(v12 + 16 * v17);
        if (v18 == v11)
          return *(_QWORD *)(v12 + 16 * v17 + 8);
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(v12 + 16 * v17);
          ++v19;
          if (v18 == v11)
            return *(_QWORD *)(v12 + 16 * v17 + 8);
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::AXObjectCache::get(WebCore::AXObjectCache *this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;

  v2 = *((_QWORD *)a2 + 8);
  v3 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_15;
  v4 = *((_QWORD *)this + 8);
  if (!v4)
    goto LABEL_15;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (v3 + ~(v2 << 32)) ^ ((unint64_t)(v3 + ~(v2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; v9 = (v11 + i++) & v5)
  {
    v11 = v9;
    v12 = *(_QWORD *)(v4 + 16 * v9);
    if (v12 != -1)
    {
      if (!v12)
        goto LABEL_15;
      if (*(_QWORD *)(v12 + 8) == v3)
        break;
    }
  }
  v13 = *(_QWORD *)(v4 + 16 * v11 + 8);
  if ((unint64_t)(v13 - 1) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_15:
    v22 = *((_QWORD *)this + 10);
    if (!v22)
      return 0;
    v23 = *(_DWORD *)(v22 - 8);
    v24 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v23 & ((v26 >> 31) ^ v26);
    for (j = 1; ; v27 = (v29 + j++) & v23)
    {
      v29 = v27;
      v30 = *(_QWORD *)(v22 + 16 * v27);
      if (v30 != -1)
      {
        if (!v30)
          return 0;
        if (*(WebCore::Node **)(v30 + 8) == a2)
          break;
      }
    }
    v31 = *(_QWORD *)(v22 + 16 * v29 + 8);
    if ((unint64_t)(v31 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      return 0;
    v14 = *((_QWORD *)this + 7);
    if (!v14)
      return 0;
    v32 = *(_DWORD *)(v14 - 8);
    v33 = (v31 + ~(v31 << 32)) ^ ((unint64_t)(v31 + ~(v31 << 32)) >> 22);
    v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
    v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
    v19 = v32 & ((v35 >> 31) ^ v35);
    v36 = *(_QWORD *)(v14 + 16 * v19);
    if (v36 != v31)
    {
      v37 = 1;
      while (v36)
      {
        v19 = ((_DWORD)v19 + v37) & v32;
        v36 = *(_QWORD *)(v14 + 16 * v19);
        ++v37;
        if (v36 == v31)
          return *(_QWORD *)(v14 + 16 * v19 + 8);
      }
      return 0;
    }
    return *(_QWORD *)(v14 + 16 * v19 + 8);
  }
  v14 = *((_QWORD *)this + 7);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(_QWORD *)(v14 + 16 * v19);
    if (v20 != v13)
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(_QWORD *)(v14 + 16 * v19);
        ++v21;
        if (v20 == v13)
          return *(_QWORD *)(v14 + 16 * v19 + 8);
      }
      return 0;
    }
    return *(_QWORD *)(v14 + 16 * v19 + 8);
  }
  return 0;
}

BOOL WebCore::hasAccNameAttribute(WebCore *this, WebCore::Element *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  BOOL v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  WebCore::hasAccNameAttribute(WebCore::Element &)::$_0::operator()<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>((WTF::StringImpl *)&v24, (uint64_t)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelAttr);
  v4 = v24;
  if (v24 && *((_DWORD *)v24 + 1))
  {
    v24 = 0;
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
    return 1;
  }
  WebCore::hasAccNameAttribute(WebCore::Element &)::$_0::operator()<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>((WTF::StringImpl *)&v23, (uint64_t)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labelledbyAttr);
  v6 = v23;
  if (!v23 || !*((_DWORD *)v23 + 1))
  {
    WebCore::hasAccNameAttribute(WebCore::Element &)::$_0::operator()<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>((WTF::StringImpl *)&v22, (uint64_t)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_labeledbyAttr);
    v8 = v22;
    if (v22 && *((_DWORD *)v22 + 1))
    {
      v22 = 0;
      v7 = 1;
LABEL_22:
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
LABEL_24:
      v6 = v23;
      v23 = 0;
      if (!v6)
        goto LABEL_27;
      goto LABEL_25;
    }
    WebCore::hasAccNameAttribute(WebCore::Element &)::$_0::operator()<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>((WTF::StringImpl *)&v21, (uint64_t)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_descriptionAttr);
    v9 = v21;
    if (v21 && *((_DWORD *)v21 + 1))
    {
      v21 = 0;
      v7 = 1;
    }
    else
    {
      WebCore::hasAccNameAttribute(WebCore::Element &)::$_0::operator()<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>((WTF::StringImpl *)&v20, (uint64_t)this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_describedbyAttr);
      v10 = v20;
      if (v20)
      {
        v7 = *((_DWORD *)v20 + 1) != 0;
        v20 = 0;
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v5);
        else
          *(_DWORD *)v10 -= 2;
      }
      else
      {
        v7 = 0;
      }
      v9 = v21;
      v21 = 0;
      if (!v9)
      {
LABEL_21:
        v8 = v22;
        v22 = 0;
        if (!v8)
          goto LABEL_24;
        goto LABEL_22;
      }
    }
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
    goto LABEL_21;
  }
  v23 = 0;
  v7 = 1;
LABEL_25:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v5);
  else
    *(_DWORD *)v6 -= 2;
LABEL_27:
  v11 = v24;
  v24 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v5);
      if (v7)
        return 1;
      goto LABEL_35;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (v7)
    return 1;
LABEL_35:
  v13 = *((_QWORD *)this + 13);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 4);
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(v13 + 40);
      LODWORD(v16) = *(_DWORD *)(v13 + 52);
      if ((_DWORD)v16)
      {
LABEL_38:
        v16 = v16;
        v17 = (uint64_t *)(v15 + 8);
        while (1)
        {
          v18 = *(v17 - 1);
          if (v18 == WebCore::HTMLNames::titleAttr
            || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
            && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
          {
            goto LABEL_47;
          }
          v17 += 2;
          if (!--v16)
          {
            v17 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_47;
          }
        }
      }
    }
    else
    {
      v15 = v13 + 32;
      LODWORD(v16) = v14 >> 5;
      if ((_DWORD)v16)
        goto LABEL_38;
    }
  }
  v17 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_47:
  v19 = *v17;
  return v19 && *(_DWORD *)(v19 + 4) != 0;
}

WTF::StringImpl *WebCore::hasAccNameAttribute(WebCore::Element &)::$_0::operator()<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>(WTF::StringImpl *result, uint64_t a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;
  WTF::StringImpl **v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WebCore::AXObjectCache *v21;
  WebCore::RenderObject *v22;
  WebCore::Node **v23;
  WTF::StringImpl *v24[2];
  WTF::StringImpl **v25;

  v4 = result;
  v5 = *(_QWORD *)(a2 + 104);
  if (!v5)
    goto LABEL_12;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if ((_DWORD)v8)
      goto LABEL_4;
LABEL_12:
    v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_12;
LABEL_4:
  v9 = *a3;
  v8 = v8;
  v10 = (WTF::StringImpl **)(v7 + 8);
  while (1)
  {
    v11 = *(v10 - 1);
    if (v11 == v9 || *((_QWORD *)v11 + 3) == *((_QWORD *)v9 + 3) && *((_QWORD *)v11 + 4) == *((_QWORD *)v9 + 4))
      break;
    v10 += 2;
    if (!--v8)
    {
      v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v12 = *v10;
  if (!v12)
  {
    v14 = *(_QWORD *)(a2 + 72);
    if ((v14 & 0x3000000000000000) != 0x2000000000000000
      && ((v14 & 0x3000000000000000) != 0x3000000000000000 || (*(_WORD *)(a2 + 28) & 0x100) != 0))
    {
      goto LABEL_28;
    }
    v15 = v14 & 0xFFFFFFFFFFFFLL;
    if (!v15)
      goto LABEL_28;
    v16 = *(_QWORD *)(v15 + 104);
    if (!v16)
      goto LABEL_28;
    v17 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>((uint64_t *)(v16 + 8), a3);
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
      v18 += 32 * *(unsigned int *)(v18 - 4);
    if (v18 != v17)
    {
      v24[0] = (WTF::StringImpl *)a2;
      v24[1] = (WTF::StringImpl *)a2;
      v19 = *(unsigned int *)(v17 + 24);
      if ((_DWORD)v19 == -1)
      {
        v21 = (WebCore::AXObjectCache *)std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)WebCore::AXObjectCache::createObjectFromRenderer(v21, v22, v23);
      }
      v25 = v24;
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore24CustomElementDefaultARIA17valueForAttributeERKNS8_7ElementERKNS8_13QualifiedNameEE3__0JZNKS9_17valueForAttributeESC_SF_E3__1ZNKS9_17valueForAttributeESC_SF_E3__2EEEEEJRKNS0_6__implIJNS6_10AtomStringENS6_7WeakPtrISA_NS8_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISO_EEEENS6_6VectorISR_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v25, v17 + 8);
    }
    else
    {
LABEL_28:
      result = (WTF::StringImpl *)MEMORY[0x1E0CBF2F8];
    }
    v12 = *(WTF::StringImpl **)result;
    if (!*(_QWORD *)result)
      goto LABEL_30;
  }
  if (*((_DWORD *)v12 + 1))
  {
    *(_DWORD *)v12 += 2;
    v24[0] = v12;
    WTF::String::trim();
    result = v24[0];
    v24[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_30:
    v20 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v20 += 2;
    *(_QWORD *)v4 = v20;
  }
  return result;
}

uint64_t WebCore::AXObjectCache::createObjectFromRenderer@<X0>(WebCore::AXObjectCache *this@<X0>, WebCore::RenderObject *a2@<X1>, WebCore::Node **a3@<X8>)
{
  uint64_t v6;
  BOOL v7;
  WebCore::AccessibilityRenderObject *v8;
  uint64_t result;
  void (**v10)(WebCore::AccessibilityMediaObject *__hidden);
  WebCore::AccessibilityRenderObject *v11;
  WebCore::AccessibilityRenderObject *v12;
  WebCore::AccessibilityRenderObject *v13;
  int v14;
  _BYTE *v15;
  WebCore::AccessibilitySVGElement *v16;
  WebCore::AccessibilityRenderObject *v17;
  WebCore::AccessibilityRenderObject *v18;
  __int16 v19;
  uint64_t v20;
  unint64_t v21;
  int16x8_t *v22;
  uint64_t v23;
  WebCore::AccessibilityRenderObject *v24;
  uint64_t v25;
  unint64_t v26;
  int16x8_t *v27;
  uint64_t v28;
  WebCore::AccessibilityRenderObject *v29;
  int v30;
  BOOL v31;
  WebCore::RenderObject *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int16 v36;
  const WTF::AtomString *v37;
  uint64_t v38;
  uint64_t v39;
  const WebCore::TreeScope *v40;
  unsigned int *v41;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  WebCore::AccessibilityRenderObject *v49;
  void (**v50)(WebCore::AXImage *__hidden);
  uint64_t v51;
  WebCore::AccessibilitySVGElement *v52;
  WebCore::RenderObject *v53;
  int v54;
  char v55;
  unsigned int v56;
  WebCore::AccessibilityRenderObject *v57;
  uint64_t v58;
  WebCore::AccessibilityRenderObject *v59;
  WebCore::AccessibilityRenderObject *v60;
  WebCore::AccessibilityRenderObject *v61;
  WebCore::AccessibilityRenderObject *v62;
  WebCore::AccessibilityRenderObject *v63;
  uint64_t v64;
  WebCore::AccessibilityRenderObject *v65;
  WebCore::Node *v66;

  if ((*((_BYTE *)a2 + 45) & 1) != 0)
  {
    v6 = 0;
    v15 = (char *)a2 + 46;
    v14 = *((unsigned __int8 *)a2 + 46);
    v7 = 1;
    if (v14 != 83 && v14 != 103)
      goto LABEL_48;
LABEL_25:
    v16 = (WebCore::AccessibilitySVGElement *)WTF::fastMalloc((WTF *)0x110);
    result = (uint64_t)WebCore::AccessibilitySVGElement::AccessibilitySVGElement(v16, a2, this);
    *(_QWORD *)result = off_1E3380F28;
    *(_QWORD *)(result + 264) = 0;
    goto LABEL_94;
  }
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  v7 = v6 == 0;
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    if (WebCore::isAccessibilityList((WebCore *)v6, a2))
    {
      v8 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x100);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v8, a2);
      v10 = off_1E3376578;
LABEL_9:
      *(_QWORD *)result = v10;
LABEL_10:
      *a3 = (WebCore::Node *)result;
      goto LABEL_11;
    }
    if ((WebCore::nodeHasRole(v6, (int16x8_t *)"grid", 0x100000004) & 1) != 0
      || (WebCore::nodeHasRole(v6, (int16x8_t *)"table", 0x100000005) & 1) != 0
      || WebCore::nodeHasRole(v6, (int16x8_t *)"treegrid", 0x100000008))
    {
      v11 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x140);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v11, a2);
      *(_QWORD *)(result + 304) = 0;
      *(_OWORD *)(result + 272) = 0u;
      *(_OWORD *)(result + 288) = 0u;
      *(_OWORD *)(result + 256) = 0u;
      *(_BYTE *)(result + 312) = 1;
      v10 = off_1E3373148;
      goto LABEL_9;
    }
    if (WebCore::nodeHasRole(v6, (int16x8_t *)"row", 0x100000003))
    {
      v12 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x108);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v12, a2);
      v10 = off_1E3372430;
      goto LABEL_9;
    }
    if ((WebCore::nodeHasRole(v6, (int16x8_t *)"gridcell", 0x100000008) & 1) != 0
      || (WebCore::nodeHasRole(v6, (int16x8_t *)"cell", 0x100000004) & 1) != 0
      || (WebCore::nodeHasRole(v6, (int16x8_t *)"columnheader", 0x10000000CLL) & 1) != 0
      || WebCore::nodeHasRole(v6, (int16x8_t *)"rowheader", 0x100000009))
    {
      v13 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x110);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v13, a2);
      *(_OWORD *)(result + 256) = xmmword_1968DF730;
      v10 = off_1E3371718;
      goto LABEL_9;
    }
    if (WebCore::nodeHasRole(v6, (int16x8_t *)"tree", 0x100000004))
    {
      v17 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x100);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v17, a2);
      v10 = off_1E338AB88;
      goto LABEL_9;
    }
    if (WebCore::nodeHasRole(v6, (int16x8_t *)"treeitem", 0x100000008))
    {
      v18 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x108);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v18, a2);
      v10 = off_1E338B898;
      goto LABEL_9;
    }
    v19 = *(_WORD *)(v6 + 28);
    if ((v19 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::labelTag + 24))
    {
      v20 = *MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
      {
        v21 = *(unsigned int *)(v20 + 16);
        v22 = *(int16x8_t **)(v20 + 8);
        LODWORD(v20) = *(_DWORD *)(v20 + 4);
        v23 = (v21 >> 2) & 1;
      }
      else
      {
        v22 = 0;
        v23 = 1;
      }
      if ((WebCore::nodeHasRole(v6, v22, v20 | (unint64_t)(v23 << 32)) & 1) != 0)
      {
        v24 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x108);
        result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v24, a2);
        v10 = off_1E3375868;
        goto LABEL_9;
      }
      v19 = *(_WORD *)(v6 + 28);
    }
    if ((v19 & 8) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 824))(v6))
    {
      v25 = *MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
      {
        v26 = *(unsigned int *)(v25 + 16);
        v27 = *(int16x8_t **)(v25 + 8);
        LODWORD(v25) = *(_DWORD *)(v25 + 4);
        v28 = (v26 >> 2) & 1;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      if (WebCore::nodeHasRole(v6, v27, v25 | (unint64_t)(v28 << 32)))
      {
        v29 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x100);
        result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v29, a2);
        v10 = off_1E31F5B40;
        goto LABEL_9;
      }
    }
  }
  v15 = (char *)a2 + 46;
  v30 = *((unsigned __int8 *)a2 + 46);
  if (v30 == 83 || v30 == 103)
    goto LABEL_25;
  if (v6)
  {
    if ((*(_WORD *)(v6 + 28) & 0x20) != 0)
    {
      v52 = (WebCore::AccessibilitySVGElement *)WTF::fastMalloc((WTF *)0x108);
      result = (uint64_t)WebCore::AccessibilitySVGElement::AccessibilitySVGElement(v52, a2, this);
      goto LABEL_10;
    }
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
LABEL_48:
  v31 = (*((_BYTE *)a2 + 53) & 1) != 0 && (*((_BYTE *)a2 + 52) & 7) == 3;
  if (v31)
    v32 = a2;
  else
    v32 = 0;
  if (!v31)
    goto LABEL_127;
  ++*((_DWORD *)a2 + 4);
  if ((*((_BYTE *)a2 + 45) & 1) != 0)
  {
    v33 = 0;
    goto LABEL_113;
  }
  v33 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (!v33)
  {
LABEL_113:
    v34 = 1;
LABEL_61:
    if ((*((_BYTE *)a2 + 45) & 1) == 0)
    {
      v35 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
      if (v35)
      {
        v36 = *(_WORD *)(v35 + 28);
        if ((v36 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1955D4A34);
        }
        if ((v36 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v35 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
        {
          v39 = *(_QWORD *)(v35 + 248);
          v37 = (const WTF::AtomString *)(v35 + 248);
          v38 = v39;
          v40 = (const WebCore::TreeScope *)*((_QWORD *)v37 - 26);
          v41 = (unsigned int *)*((_QWORD *)v40 + 5);
          if (v41 && v38 != 0)
          {
            WebCore::TreeScopeOrderedMap::getElementByMapName(v41, v37, v40, (uint64_t *)&v66);
            if (v66)
            {
              if (*((_DWORD *)v66 + 6) == 2)
              {
                if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v66);
              }
              else
              {
                *((_DWORD *)v66 + 6) -= 2;
              }
              if ((v34 & 1) != 0)
              {
                v54 = *((_DWORD *)a2 + 4);
                if (v54)
                {
                  *((_DWORD *)a2 + 4) = v54 - 1;
                  goto LABEL_127;
                }
LABEL_175:
                __break(0xC471u);
                JUMPOUT(0x1955D4D5CLL);
              }
              goto LABEL_87;
            }
          }
        }
      }
    }
    if ((v34 & 1) != 0)
    {
      v53 = v32;
      v32 = a2;
      if (!v33)
        goto LABEL_90;
      v43 = *(_DWORD *)(v33 + 24) - 2;
      v32 = v53;
      if (*(_DWORD *)(v33 + 24) != 2)
        goto LABEL_75;
    }
    else
    {
      v43 = *(_DWORD *)(v33 + 24);
      *(_DWORD *)(v33 + 24) = v43 + 2;
      if ((*(_WORD *)(v33 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v33 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      {
        v44 = *(_QWORD *)(v33 + 104);
        if (v44)
        {
          v45 = *(_DWORD *)(v44 + 4);
          if ((v45 & 1) != 0)
          {
            v46 = *(uint64_t **)(v44 + 40);
            LODWORD(v47) = *(_DWORD *)(v44 + 52);
          }
          else
          {
            v46 = (uint64_t *)(v44 + 32);
            LODWORD(v47) = v45 >> 5;
          }
          if ((_DWORD)v47)
          {
            v47 = v47;
            do
            {
              v51 = *v46;
              if (*v46 == WebCore::HTMLNames::usemapAttr
                || *(_QWORD *)(v51 + 24) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 24)
                && *(_QWORD *)(v51 + 32) == *(_QWORD *)(WebCore::HTMLNames::usemapAttr + 32))
              {
                if (v43)
                {
                  v32 = 0;
                  *(_DWORD *)(v33 + 24) = v43;
                  goto LABEL_88;
                }
                if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v33);
                goto LABEL_87;
              }
              v46 += 2;
              --v47;
            }
            while (v47);
            if (!v33)
              goto LABEL_76;
          }
        }
        if (v43)
          goto LABEL_75;
      }
      else if (v43)
      {
LABEL_75:
        *(_DWORD *)(v33 + 24) = v43;
        goto LABEL_76;
      }
    }
    if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v33);
LABEL_76:
    if ((v34 & 1) != 0)
      goto LABEL_90;
    if ((*(_WORD *)(v33 + 28) & 8) == 0
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 824))(v33) & 1) == 0)
    {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  *(_DWORD *)(v33 + 24) += 2;
  if ((*(_WORD *)(v33 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v33 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    v34 = 0;
    goto LABEL_61;
  }
LABEL_87:
  v32 = 0;
LABEL_88:
  if (*(_DWORD *)(v33 + 24) == 2)
  {
    if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v33);
  }
  else
  {
    *(_DWORD *)(v33 + 24) -= 2;
  }
LABEL_90:
  v48 = *((_DWORD *)a2 + 4);
  if (!v48)
    goto LABEL_175;
  *((_DWORD *)a2 + 4) = v48 - 1;
  if (v32)
  {
    v49 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x100);
    result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v49, v32);
    v50 = off_1E336F0A8;
LABEL_93:
    *(_QWORD *)result = v50;
    goto LABEL_94;
  }
LABEL_127:
  if ((*((_BYTE *)a2 + 45) & 1) != 0
    && ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 184))(a2) & 1) != 0)
  {
    v55 = 1;
LABEL_158:
    v59 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x108);
    result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v59, a2);
    *(_QWORD *)result = off_1E3378C98;
    *(_BYTE *)(result + 256) = v55;
    goto LABEL_94;
  }
  if (!v7 && (*(_WORD *)(v6 + 28) & 0x40) != 0)
  {
    v55 = 0;
    goto LABEL_158;
  }
  v56 = *v15;
  if (v56 > 0x22)
  {
    if ((v56 == 35 || v56 == 63) && (*((_BYTE *)a2 + 45) & 1) == 0)
      goto LABEL_159;
  }
  else
  {
    if (v56 == 18)
    {
      v61 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x100);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v61, a2);
      v50 = off_1E3377288;
      goto LABEL_93;
    }
    if (v56 == 22)
    {
      v57 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x100);
      result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v57, a2);
      v50 = off_1E33799A8;
      goto LABEL_93;
    }
  }
  if (!v7
    && (*(_WORD *)(v6 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
  {
LABEL_159:
    v60 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x140);
    result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v60, a2);
    *(_QWORD *)result = off_1E3386A58;
    *(_OWORD *)(result + 256) = 0u;
    *(_OWORD *)(result + 272) = 0u;
    *(_OWORD *)(result + 288) = 0u;
    *(_QWORD *)(result + 304) = 0;
    *(_BYTE *)(result + 312) = 1;
    goto LABEL_94;
  }
  if (v56 == 39 && (*((_BYTE *)a2 + 45) & 1) == 0
    || !v7
    && (*(_WORD *)(v6 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::trTag + 24))
  {
    v62 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x108);
    result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v62, a2);
    v50 = off_1E3389E70;
    goto LABEL_93;
  }
  if (v56 == 37 && (*((_BYTE *)a2 + 45) & 1) == 0
    || !v7
    && (*(_WORD *)(v6 + 28) & 0x10) != 0
    && ((v58 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24), v58 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
     || v58 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24)))
  {
    v63 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x110);
    result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v63, a2);
    *(_QWORD *)result = off_1E3387778;
    *(_OWORD *)(result + 256) = xmmword_1968DF730;
LABEL_94:
    *a3 = (WebCore::Node *)result;
    if (v7)
      return result;
    goto LABEL_11;
  }
  if (v56 == 23 || v56 == 28)
  {
    result = WebCore::AccessibilityProgressIndicator::create(a2, &v66);
    *a3 = v66;
    if (v7)
      return result;
    goto LABEL_11;
  }
  if (v7
    || (*(_WORD *)(v6 + 28) & 0x10) == 0
    || (v64 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24), v64 != *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
    && v64 != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
  {
    if (v56 == 33)
    {
      result = WebCore::AccessibilitySlider::create(a2, a3);
      if (v7)
        return result;
      goto LABEL_11;
    }
    if (*v15)
    {
      result = WebCore::AccessibilityRenderObject::create(a2, a3);
      if (v7)
        return result;
      goto LABEL_11;
    }
    v65 = (WebCore::AccessibilityRenderObject *)WTF::fastMalloc((WTF *)0x100);
    result = (uint64_t)WebCore::AccessibilityRenderObject::AccessibilityRenderObject(v65, a2);
    v50 = off_1E3373E68;
    goto LABEL_93;
  }
  result = WebCore::AccessibilityProgressIndicator::create(a2, &v66);
  *a3 = v66;
LABEL_11:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::isAccessibilityList(WebCore *this, WebCore::Node *a2)
{
  uint64_t result;
  uint64_t v4;
  int16x8_t *v5;
  unint64_t v6;
  uint64_t v7;

  if ((WebCore::nodeHasRole((uint64_t)this, (int16x8_t *)"list", 0x100000004) & 1) != 0
    || (WebCore::nodeHasRole((uint64_t)this, (int16x8_t *)"directory", 0x100000009) & 1) != 0)
  {
    return 1;
  }
  v4 = *MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    v5 = *(int16x8_t **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  result = WebCore::nodeHasRole((uint64_t)this, v5, v6);
  if ((_DWORD)result)
  {
    if ((*((_WORD *)this + 14) & 0x10) == 0)
      return 0;
    v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
    if (v7 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
      && v7 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24)
      && v7 != *(_QWORD *)(WebCore::HTMLNames::dlTag + 24))
    {
      return v7 == *(_QWORD *)(WebCore::HTMLNames::menuTag + 24);
    }
    return 1;
  }
  return result;
}

void WebCore::AXObjectCache::cacheAndInitializeWrapper(uint64_t *a1, WebCore::AccessibilityObject *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  WebCore::AXObjectCache *v7;
  WebCore::AccessibilityObject *v8;
  uint64_t AXID;
  _QWORD v10[2];
  _QWORD v11[6];
  _QWORD *v12;

  v4 = a4;
  v10[0] = a3;
  v10[1] = a4;
  AXID = WebCore::AXObjectCache::getAXID((WebCore::AXObjectCache *)a1, a2);
  v11[0] = &AXID;
  v11[1] = a1;
  v11[2] = &AXID;
  v11[3] = a1;
  v11[4] = &AXID;
  v11[5] = a1;
  if (v4 == 0xFFFFFFFFLL)
  {
    v7 = (WebCore::AXObjectCache *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::AXObjectCache::getAXID(v7, v8);
  }
  else
  {
    v12 = v11;
    ((void (*)(_QWORD **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13AXObjectCache25cacheAndInitializeWrapperERNS8_19AccessibilityObjectENS_7variantIJDnPNS8_12RenderObjectEPNS8_4NodeEPNS8_6WidgetEEEEE3__0JZNS9_25cacheAndInitializeWrapperESB_SJ_E3__1ZNS9_25cacheAndInitializeWrapperESB_SJ_E3__2ZNS9_25cacheAndInitializeWrapperESB_SJ_E3__3EEEEEJRNS0_6__implIJDnSE_SG_SI_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v12, v10);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::AccessibilityObject&>(a1 + 7, &AXID, (uint64_t)a2, (uint64_t)v11);
    (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)a2 + 2664))(a2);
    WebCore::AXObjectCache::attachWrapper((WebCore::AXObjectCache *)a1, a2);
  }
}

uint64_t WebCore::AXObjectCache::getAXID(WebCore::AXObjectCache *this, WebCore::AccessibilityObject *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t IdentifierInternal;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v15[3];
  uint64_t v16;

  v2 = *((_QWORD *)a2 + 2);
  if ((unint64_t)(v2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v4 = (uint64_t *)((char *)this + 96);
    while (1)
    {
      do
LABEL_3:
        IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      while ((unint64_t)(IdentifierInternal - 1) > 0xFFFFFFFFFFFFFFFDLL);
      v2 = IdentifierInternal;
      v6 = *v4;
      if (!*v4)
        break;
      v7 = *(_DWORD *)(v6 - 8);
      v8 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                  + ~(IdentifierInternal << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(_QWORD *)(v6 + 8 * v11);
      if (v12 != IdentifierInternal)
      {
        v13 = 1;
        while (v12)
        {
          v11 = (v11 + v13) & v7;
          v12 = *(_QWORD *)(v6 + 8 * v11);
          ++v13;
          if (v12 == IdentifierInternal)
            goto LABEL_3;
        }
        break;
      }
    }
    v16 = IdentifierInternal;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v15, v4, &v16);
    *((_QWORD *)a2 + 2) = v2;
  }
  return v2;
}

uint64_t WebCore::AXObjectCache::getOrCreate(WebCore::AXObjectCache *this, WebCore::Widget *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v15;

  v4 = WebCore::AXObjectCache::get(this, a2);
  if (v4)
    return v4;
  if ((*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)a2 + 104))(a2))
  {
    v4 = WTF::fastMalloc((WTF *)0x120);
    WebCore::AccessibilityScrollView::AccessibilityScrollView((WebCore::AccessibilityScrollView *)v4, a2);
  }
  else
  {
    if (!(*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)a2 + 96))(a2))
      return 0;
    v4 = WTF::fastMalloc((WTF *)0x100);
    v5 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v5 = 0;
    *(_OWORD *)(v5 + 8) = xmmword_19689B170;
    *(_QWORD *)(v5 + 24) = v4;
    *(_OWORD *)(v4 + 41) = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_WORD *)(v4 + 57) = 134;
    *(_BYTE *)(v4 + 59) = 2;
    *(_BYTE *)(v4 + 64) = 0;
    *(_BYTE *)(v4 + 96) = 0;
    *(_BYTE *)(v4 + 104) = 0;
    *(_BYTE *)(v4 + 176) = 0;
    *(_WORD *)(v4 + 232) = 0;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 211) = 0u;
    *(_QWORD *)v4 = off_1E3382920;
    *(_QWORD *)(v4 + 8) = v5;
    ++*((_DWORD *)a2 + 2);
    *(_QWORD *)(v4 + 240) = 0;
    *(_QWORD *)(v4 + 248) = a2;
  }
  WebCore::AXObjectCache::cacheAndInitializeWrapper((uint64_t *)this, (WebCore::AccessibilityObject *)v4, (uint64_t)a2, 3);
  v7 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_10:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v15 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v15 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (v10)
        return v4;
      goto LABEL_18;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v10)
    return v4;
LABEL_18:
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    WTF::fastFree((WTF *)v7, v6);
  return v4;
}

uint64_t WebCore::AXObjectCache::getOrCreate(WebCore::AXObjectCache *this, WebCore::RenderObject *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  WebCore::AXObjectCache *v7;
  __n128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  WebCore::AccessibilityObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  WebCore::Node *v25;

  v4 = WebCore::AXObjectCache::get(this, a2);
  if (v4)
    return v4;
  if ((*((_BYTE *)a2 + 20) & 4) != 0)
    return 0;
  WebCore::AXObjectCache::createObjectFromRenderer(this, a2, &v25);
  v5 = (unsigned __int8 *)v25;
  WebCore::AXObjectCache::cacheAndInitializeWrapper((uint64_t *)this, v25, (uint64_t)a2, 1);
  v6 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 1488))(v5);
  v7 = (WebCore::AXObjectCache *)v6;
  if (v6 && *(_BYTE *)(v6 + 361)
    || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 2896))(v5) & 1) == 0)
  {
    v9 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 2872))(v5);
  }
  else
  {
    v9 = 1;
  }
  v10 = v5[59];
  v5[59] = v9;
  if (v7)
  {
    v11 = v10 == 1 ? v9 : 1;
    v12 = v10 ? 0 : v9;
    if (v11 != 1 || v12 != 0)
    {
      v14 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 1232))(v5);
      v8.n128_f64[0] = WebCore::AXObjectCache::childrenChanged(v7, v14);
    }
  }
  if ((*(unsigned int (**)(unsigned __int8 *, __n128))(*(_QWORD *)v5 + 40))(v5, v8))
    v4 = 0;
  else
    v4 = (uint64_t)v5;
  v25 = 0;
  v16 = *((_QWORD *)v5 + 1);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_28;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_28:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v24 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v24 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v16))
    {
      if (v19)
        return v4;
      goto LABEL_36;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v16);
  if (v19)
    return v4;
LABEL_36:
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (!v21)
    WTF::fastFree((WTF *)v16, v15);
  return v4;
}

uint64_t WebCore::AXObjectCache::rootObject(WebCore::AXObjectCache *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Widget *v5;

  v1 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v1 & 1) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 528);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(WebCore::Widget **)(v4 + 288);
  if (!v5)
    return 0;
  ++*((_DWORD *)v5 + 2);
  v2 = WebCore::AXObjectCache::getOrCreate(this, v5);
  if (*((_DWORD *)v5 + 2) == 1)
    (*(void (**)(WebCore::Widget *))(*(_QWORD *)v5 + 8))(v5);
  else
    --*((_DWORD *)v5 + 2);
  return v2;
}

uint64_t WebCore::AXObjectCache::rootObjectForFrame(WebCore::AXObjectCache *this, WebCore::LocalFrame *a2)
{
  unsigned __int8 v2;
  WebCore::Widget *v3;

  v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if (a2 && (v2 & 1) != 0 && (v3 = (WebCore::Widget *)*((_QWORD *)a2 + 36)) != 0)
    return WebCore::AXObjectCache::getOrCreate(this, v3);
  else
    return 0;
}

uint64_t WebCore::AXObjectCache::create(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  void (**v6)(WebCore::AccessibilityImageMapLink *__hidden);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(WebCore::AccessibilityMenuListPopup *__hidden);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t AXID;

  v3 = 0;
  if (a2 <= 102)
  {
    if (a2 <= 78)
    {
      if (a2 != 17)
      {
        if (a2 != 51)
          return v3;
        v3 = WTF::fastMalloc((WTF *)0x108);
        v4 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v4 = 0;
        *(_OWORD *)(v4 + 8) = xmmword_19689B170;
        *(_QWORD *)(v4 + 24) = v3;
        v5 = 0uLL;
        *(_OWORD *)(v3 + 41) = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
        *(_OWORD *)(v3 + 32) = 0u;
        *(_WORD *)(v3 + 57) = 134;
        *(_BYTE *)(v3 + 59) = 2;
        *(_BYTE *)(v3 + 64) = 0;
        *(_BYTE *)(v3 + 96) = 0;
        *(_BYTE *)(v3 + 104) = 0;
        *(_BYTE *)(v3 + 176) = 0;
        *(_WORD *)(v3 + 232) = 0;
        *(_OWORD *)(v3 + 211) = 0u;
        *(_OWORD *)(v3 + 200) = 0u;
        v6 = off_1E3374B78;
        goto LABEL_15;
      }
      v3 = WTF::fastMalloc((WTF *)0x100);
      v9 = WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)v9 = 0;
      *(_OWORD *)(v9 + 8) = xmmword_19689B170;
      *(_QWORD *)(v9 + 24) = v3;
      *(_OWORD *)(v3 + 41) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_WORD *)(v3 + 57) = 134;
      *(_BYTE *)(v3 + 59) = 2;
      *(_BYTE *)(v3 + 64) = 0;
      *(_BYTE *)(v3 + 96) = 0;
      *(_BYTE *)(v3 + 104) = 0;
      *(_BYTE *)(v3 + 176) = 0;
      *(_WORD *)(v3 + 232) = 0;
      *(_OWORD *)(v3 + 211) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_QWORD *)(v3 + 240) = 0;
      v10 = off_1E3388490;
      goto LABEL_19;
    }
    if (a2 != 79)
    {
      if (a2 != 90)
        return v3;
      v3 = WTF::fastMalloc((WTF *)0x108);
      v8 = WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)v8 = 0;
      *(_OWORD *)(v8 + 8) = xmmword_19689B170;
      *(_QWORD *)(v8 + 24) = v3;
      *(_OWORD *)(v3 + 41) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_WORD *)(v3 + 57) = 134;
      *(_BYTE *)(v3 + 59) = 2;
      *(_BYTE *)(v3 + 64) = 0;
      *(_BYTE *)(v3 + 96) = 0;
      *(_BYTE *)(v3 + 104) = 0;
      *(_BYTE *)(v3 + 176) = 0;
      *(_WORD *)(v3 + 232) = 0;
      *(_OWORD *)(v3 + 211) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_QWORD *)v3 = off_1E336FDB8;
      *(_QWORD *)(v3 + 8) = v8;
      *(_QWORD *)(v3 + 240) = 0;
      *(_QWORD *)(v3 + 248) = 0;
      *(_DWORD *)(v3 + 256) = 0;
      goto LABEL_21;
    }
    v3 = WTF::fastMalloc((WTF *)0xF8);
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v9 = 0;
    *(_OWORD *)(v9 + 8) = xmmword_19689B170;
    *(_QWORD *)(v9 + 24) = v3;
    *(_OWORD *)(v3 + 41) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_WORD *)(v3 + 57) = 134;
    *(_BYTE *)(v3 + 59) = 2;
    *(_BYTE *)(v3 + 64) = 0;
    *(_BYTE *)(v3 + 96) = 0;
    *(_BYTE *)(v3 + 104) = 0;
    *(_BYTE *)(v3 + 176) = 0;
    *(_WORD *)(v3 + 232) = 0;
    *(_OWORD *)(v3 + 211) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_QWORD *)(v3 + 240) = 0;
    v10 = off_1E337B3B8;
LABEL_19:
    *(_QWORD *)v3 = v10;
    *(_QWORD *)(v3 + 8) = v9;
    goto LABEL_21;
  }
  if (a2 <= 104)
  {
    if (a2 != 103)
    {
      v3 = WTF::fastMalloc((WTF *)0x100);
      v7 = WTF::fastMalloc((WTF *)0x20);
      *(_BYTE *)v7 = 0;
      *(_OWORD *)(v7 + 8) = xmmword_19689B170;
      *(_QWORD *)(v7 + 24) = v3;
      *(_OWORD *)(v3 + 41) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_WORD *)(v3 + 57) = 134;
      *(_BYTE *)(v3 + 59) = 2;
      *(_BYTE *)(v3 + 64) = 0;
      *(_BYTE *)(v3 + 96) = 0;
      *(_BYTE *)(v3 + 104) = 0;
      *(_BYTE *)(v3 + 176) = 0;
      *(_WORD *)(v3 + 232) = 0;
      *(_OWORD *)(v3 + 211) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_QWORD *)v3 = off_1E3385078;
      *(_QWORD *)(v3 + 8) = v7;
      *(_QWORD *)(v3 + 240) = 0;
      *(_QWORD *)(v3 + 248) = 0;
      goto LABEL_21;
    }
    v3 = WTF::fastMalloc((WTF *)0xF8);
    v9 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v9 = 0;
    *(_OWORD *)(v9 + 8) = xmmword_19689B170;
    *(_QWORD *)(v9 + 24) = v3;
    *(_OWORD *)(v3 + 41) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_WORD *)(v3 + 57) = 134;
    *(_BYTE *)(v3 + 59) = 2;
    *(_BYTE *)(v3 + 64) = 0;
    *(_BYTE *)(v3 + 96) = 0;
    *(_BYTE *)(v3 + 104) = 0;
    *(_BYTE *)(v3 + 176) = 0;
    *(_WORD *)(v3 + 232) = 0;
    *(_OWORD *)(v3 + 211) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_QWORD *)(v3 + 240) = 0;
    v10 = off_1E3384320;
    goto LABEL_19;
  }
  if (a2 != 105)
  {
    if (a2 != 123)
      return v3;
    v3 = WTF::fastMalloc((WTF *)0x108);
    v4 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v4 = 0;
    *(_OWORD *)(v4 + 8) = xmmword_19689B170;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = 0uLL;
    *(_OWORD *)(v3 + 41) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_WORD *)(v3 + 57) = 134;
    *(_BYTE *)(v3 + 59) = 2;
    *(_BYTE *)(v3 + 64) = 0;
    *(_BYTE *)(v3 + 96) = 0;
    *(_BYTE *)(v3 + 104) = 0;
    *(_BYTE *)(v3 + 176) = 0;
    *(_WORD *)(v3 + 232) = 0;
    *(_OWORD *)(v3 + 211) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    v6 = off_1E3389180;
LABEL_15:
    *(_OWORD *)(v3 + 184) = v5;
    *(_QWORD *)v3 = v6;
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v3 + 240) = 0;
    *(_QWORD *)(v3 + 248) = 0;
    *(_QWORD *)(v3 + 256) = 0;
    goto LABEL_21;
  }
  v3 = WTF::fastMalloc((WTF *)0x100);
  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v11 = 0;
  *(_OWORD *)(v11 + 8) = xmmword_19689B170;
  *(_QWORD *)(v11 + 24) = v3;
  *(_OWORD *)(v3 + 41) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 57) = 134;
  *(_BYTE *)(v3 + 59) = 2;
  *(_BYTE *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 176) = 0;
  *(_WORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 211) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)v3 = off_1E3385D68;
  *(_QWORD *)(v3 + 8) = v11;
  *(_BYTE *)(v3 + 248) = 0;
LABEL_21:
  AXID = WebCore::AXObjectCache::getAXID((WebCore::AXObjectCache *)a1, (WebCore::AccessibilityObject *)v3);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::AccessibilityObject&>(a1 + 7, &AXID, v3, (uint64_t)&v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 2664))(v3);
  WebCore::AXObjectCache::attachWrapper((WebCore::AXObjectCache *)a1, (WebCore::AccessibilityObject *)v3);
  v13 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_25:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v21 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v21 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
    {
      if (v16)
        return v3;
      goto LABEL_33;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  if (v16)
    return v3;
LABEL_33:
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (!v18)
    WTF::fastFree((WTF *)v13, v12);
  return v3;
}

uint64_t *WebCore::AXObjectCache::remove(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  _DWORD *v44;
  unsigned int v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t *v62;
  _QWORD *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  WTF *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t j;
  uint64_t v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t **v93;
  int v94;
  int v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  int v102;
  _QWORD *v103;
  WTF *v104;
  WTF *v105;
  WTF *v106;
  unsigned __int8 *v107;
  uint64_t *v108;
  uint64_t *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t i;
  unsigned __int8 *v113;
  WTF *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  uint64_t *v119;
  unsigned int v120;
  unsigned int v121;
  const void *v123;
  void *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  int v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  _QWORD *v148;
  unsigned int v149;
  uint64_t *v150;
  unsigned __int8 **v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  uint64_t *v155[3];

  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v2 = result;
    v4 = result[7];
    result += 7;
    v3 = v4;
    if (v4)
    {
      v6 = *(_DWORD *)(v3 - 8);
      v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = (v9 >> 31) ^ v9;
      v11 = v6 & v10;
      v12 = *(_QWORD *)(v3 + 16 * v11);
      if (v12 != a2)
      {
        v13 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v13) & v6;
          v12 = *(_QWORD *)(v3 + 16 * v11);
          ++v13;
          if (v12 == a2)
            goto LABEL_9;
        }
        v11 = *(unsigned int *)(v3 - 4);
      }
LABEL_9:
      v14 = *(unsigned int *)(v3 - 4);
      if (v11 != v14)
      {
        v15 = (_QWORD *)(v3 + 16 * v11);
        v16 = v15 + 1;
        v17 = (_QWORD *)v15[1];
        if (v17)
        {
          *v16 = 0;
          v3 = *result;
          if (!*result)
          {
LABEL_14:
            if ((_QWORD *)v3 != v15)
            {
              *v15 = -1;
              *v16 = 0;
              ++*(_DWORD *)(*result - 16);
              v18 = *result;
              v19 = *result ? *(_DWORD *)(v18 - 12) - 1 : -1;
              *(_DWORD *)(v18 - 12) = v19;
              v20 = *result;
              if (*result)
              {
                v21 = 6 * *(_DWORD *)(v20 - 12);
                v22 = *(_DWORD *)(v20 - 4);
                if (v21 < v22 && v22 >= 9)
                  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::AccessibilityObject,WTF::RawPtrTraits<WebCore::AccessibilityObject>,WTF::DefaultRefDerefTraits<WebCore::AccessibilityObject>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v22 >> 1, 0);
              }
            }
LABEL_25:
            if (!v17)
              return result;
            v24 = v2[95];
            if (!v24)
              goto LABEL_192;
            v25 = *(_DWORD *)(v24 - 8);
            v26 = v25 & v10;
            v27 = *(_QWORD *)(v24 + 16 * v26);
            if (v27 != a2)
            {
              v28 = 1;
              while (v27)
              {
                v26 = ((_DWORD)v26 + v28) & v25;
                v27 = *(_QWORD *)(v24 + 16 * v26);
                ++v28;
                if (v27 == a2)
                  goto LABEL_33;
              }
              v26 = *(unsigned int *)(v24 - 4);
            }
LABEL_33:
            if (v26 == *(_DWORD *)(v24 - 4))
              goto LABEL_192;
            v150 = (uint64_t *)(v24 + 16 * v26);
            v29 = v2 + 98;
            v30 = v2[98];
            if (v30
              || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2 + 98, 8u, 0), (v30 = *v29) != 0))
            {
              v31 = *(_DWORD *)(v30 - 8);
            }
            else
            {
              v31 = 0;
            }
            v151 = (unsigned __int8 **)(v150 + 1);
            v32 = v31 & v10;
            v33 = (uint64_t *)(v30 + 16 * (v31 & v10));
            v34 = *v33;
            v149 = v10;
            v148 = v17;
            if (*v33)
            {
              v35 = 0;
              v36 = 1;
              while (v34 != a2)
              {
                if (v34 == -1)
                  v35 = v33;
                v32 = (v32 + v36) & v31;
                v33 = (uint64_t *)(v30 + 16 * v32);
                v34 = *v33;
                ++v36;
                if (!*v33)
                {
                  if (v35)
                  {
                    *v35 = 0;
                    v35[1] = 0;
                    --*(_DWORD *)(*v29 - 16);
                    v33 = v35;
                  }
                  goto LABEL_45;
                }
              }
LABEL_116:
              v87 = *v151;
              if (*v151)
              {
                v88 = *((unsigned int *)v87 - 1);
                v89 = &v87[32 * v88];
                if (*((_DWORD *)v87 - 3))
                {
                  v90 = *v151;
                  if ((_DWORD)v88)
                  {
                    v91 = 32 * v88;
                    v90 = *v151;
                    while (*v90 >= 0xFEu)
                    {
                      v90 += 32;
                      v91 -= 32;
                      if (!v91)
                      {
                        v90 = v89;
                        goto LABEL_126;
                      }
                    }
                  }
                  goto LABEL_126;
                }
                v90 = &v87[32 * v88];
              }
              else
              {
                v90 = 0;
                v88 = 0;
              }
              v89 = &v87[32 * v88];
LABEL_126:
              if (v87)
                v92 = &v87[32 * *((unsigned int *)v87 - 1)];
              else
                v92 = 0;
              v93 = (uint64_t **)(v2 + 95);
              while (v90 != v92)
              {
                v94 = *v90;
                v95 = 2;
                switch(*v90)
                {
                  case 0u:
                    goto LABEL_161;
                  case 1u:
                    goto LABEL_148;
                  case 2u:
                    v95 = 1;
                    goto LABEL_148;
                  case 3u:
                    v95 = 4;
                    goto LABEL_148;
                  case 4u:
                    v95 = 3;
                    goto LABEL_148;
                  case 5u:
                    v95 = 6;
                    goto LABEL_148;
                  case 6u:
                    v95 = 5;
                    goto LABEL_148;
                  case 7u:
                    v95 = 8;
                    goto LABEL_148;
                  case 8u:
                    v95 = 7;
                    goto LABEL_148;
                  case 9u:
                    v95 = 10;
                    goto LABEL_148;
                  case 0xAu:
                    v95 = 9;
                    goto LABEL_148;
                  case 0xBu:
                    v95 = 12;
                    goto LABEL_148;
                  case 0xCu:
                    v95 = 11;
                    goto LABEL_148;
                  case 0xDu:
                    v95 = 14;
                    goto LABEL_148;
                  case 0xEu:
                    v95 = 13;
                    goto LABEL_148;
                  case 0xFu:
                    v95 = 16;
                    goto LABEL_148;
                  case 0x10u:
                    v95 = 15;
                    goto LABEL_148;
                  case 0x11u:
                    v95 = 18;
                    goto LABEL_148;
                  case 0x12u:
                    v95 = 17;
LABEL_148:
                    v96 = *v151;
                    if (!*v151)
                      goto LABEL_161;
                    v97 = *((_DWORD *)v96 - 2);
                    v98 = 9 * ((~(v94 << 15) + v94) ^ ((~(v94 << 15) + v94) >> 10));
                    v99 = (v98 ^ (v98 >> 6)) + ~((v98 ^ (v98 >> 6)) << 11);
                    v100 = v97 & (v99 ^ HIWORD(v99));
                    v101 = v96[32 * v100];
                    if (v101 == v94)
                      goto LABEL_153;
                    v102 = 1;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x1955D6488);
                }
                while (v101 != 255)
                {
                  v100 = ((_DWORD)v100 + v102) & v97;
                  v101 = v96[32 * v100];
                  ++v102;
                  if (v101 == v94)
                  {
LABEL_153:
                    v152 = 0;
                    v153 = 0;
                    v154 = 0;
                    v103 = *(_QWORD **)&v96[32 * v100 + 16];
                    if (v103)
                    {
                      do
                      {
                        WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v155, &v152, v103);
                        v103 = (_QWORD *)v103[2];
                      }
                      while (v103);
                      v104 = v153;
                      if (v153)
                      {
                        do
                        {
                          WebCore::AXObjectCache::removeRelationByID(*v93, *(void **)v104, a2, v95);
                          v104 = (WTF *)*((_QWORD *)v104 + 2);
                        }
                        while (v104);
                        v105 = v153;
                        if (v153)
                        {
                          do
                          {
                            v106 = (WTF *)*((_QWORD *)v105 + 2);
                            WTF::fastFree(v105, (void *)a2);
                            v105 = v106;
                          }
                          while (v106);
                        }
                      }
                      if (v152)
                        WTF::fastFree((WTF *)(v152 - 16), (void *)a2);
                    }
                    break;
                  }
                }
LABEL_161:
                v107 = v90 + 32;
                v90 = v89;
                if (v107 != v89)
                {
                  v90 = v107;
                  while (*v90 >= 0xFEu)
                  {
                    v90 += 32;
                    if (v90 == v89)
                    {
                      v90 = v89;
                      break;
                    }
                  }
                }
              }
              v108 = *v93;
              if (*v93)
              {
                v108 += 2 * *((unsigned int *)v108 - 1);
                v109 = v150;
                v17 = v148;
                v10 = v149;
                if (v108 == v150)
                  goto LABEL_192;
              }
              else
              {
                v17 = v148;
                v10 = v149;
                v109 = v150;
              }
              if (v108 != v109)
              {
                *v109 = -1;
                v110 = *v151;
                if (*v151)
                {
                  v111 = *((unsigned int *)v110 - 1);
                  if ((_DWORD)v111)
                  {
                    for (i = 0; i != v111; ++i)
                    {
                      if (v110[32 * i] != 254)
                      {
                        v113 = &v110[32 * i];
                        v114 = (WTF *)*((_QWORD *)v113 + 2);
                        if (v114)
                        {
                          do
                          {
                            v115 = (WTF *)*((_QWORD *)v114 + 2);
                            WTF::fastFree(v114, (void *)a2);
                            v114 = v115;
                          }
                          while (v115);
                        }
                        v116 = *((_QWORD *)v113 + 1);
                        if (v116)
                          WTF::fastFree((WTF *)(v116 - 16), (void *)a2);
                      }
                    }
                  }
                  WTF::fastFree((WTF *)(v110 - 16), (void *)a2);
                }
                ++*((_DWORD *)*v93 - 4);
                v117 = *v93;
                if (*v93)
                  v118 = *((_DWORD *)v117 - 3) - 1;
                else
                  v118 = -1;
                v10 = v149;
                *((_DWORD *)v117 - 3) = v118;
                v119 = *v93;
                if (*v93)
                {
                  v120 = 6 * *((_DWORD *)v119 - 3);
                  v121 = *((_DWORD *)v119 - 1);
                  if (v120 < v121 && v121 >= 9)
                    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2 + 95, v121 >> 1, 0);
                }
              }
LABEL_192:
              (*(void (**)(_QWORD *, uint64_t))(*v17 + 2656))(v17, 1);
              v123 = (const void *)v17[3];
              v17[3] = 0;
              if (v123)
                CFRelease(v123);
              result = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v17 + 2648))(v17, 1);
              v127 = v2[12];
              v126 = v2 + 12;
              v125 = v127;
              if (v127)
              {
                v128 = *(_DWORD *)(v125 - 8);
                v129 = v128 & v10;
                v130 = *(_QWORD *)(v125 + 8 * v129);
                if (v130 != a2)
                {
                  v131 = 1;
                  while (v130)
                  {
                    v129 = ((_DWORD)v129 + v131) & v128;
                    v130 = *(_QWORD *)(v125 + 8 * v129);
                    ++v131;
                    if (v130 == a2)
                      goto LABEL_201;
                  }
                  v129 = *(unsigned int *)(v125 - 4);
                }
LABEL_201:
                if (v129 != *(_DWORD *)(v125 - 4))
                {
                  *(_QWORD *)(v125 + 8 * v129) = -1;
                  ++*(_DWORD *)(*v126 - 16);
                  v132 = *v126;
                  v133 = *v126 ? *(_DWORD *)(v132 - 12) - 1 : -1;
                  *(_DWORD *)(v132 - 12) = v133;
                  v134 = *v126;
                  if (*v126)
                  {
                    v135 = 6 * *(_DWORD *)(v134 - 12);
                    v136 = *(_DWORD *)(v134 - 4);
                    if (v135 < v136 && v136 >= 9)
                      result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(v126, v136 >> 1, 0);
                  }
                }
              }
              v138 = v17[1];
              if (__ldaxr((unsigned __int8 *)v138))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v138))
              {
                goto LABEL_216;
              }
              result = (uint64_t *)MEMORY[0x19AEA534C](v138);
LABEL_216:
              v140 = *(_QWORD *)(v138 + 8);
              v141 = v140 - 1;
              *(_QWORD *)(v138 + 8) = v140 - 1;
              if (v140 == 1)
              {
                v145 = *(_QWORD *)(v138 + 16);
                v142 = *(_QWORD *)(v138 + 24);
                *(_QWORD *)(v138 + 24) = 0;
                v143 = v145 != 0;
              }
              else
              {
                v142 = 0;
                v143 = 1;
              }
              v144 = __ldxr((unsigned __int8 *)v138);
              if (v144 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v138))
                {
LABEL_223:
                  if (!v141)
                  {
                    if (v142)
                      result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
                    if (!v143)
                      return (uint64_t *)WTF::fastFree((WTF *)v138, v124);
                  }
                  return result;
                }
              }
              else
              {
                __clrex();
              }
              result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v138);
              goto LABEL_223;
            }
LABEL_45:
            *v33 = a2;
            if (!*v151 || (v37 = *((unsigned int *)*v151 - 3), !(_DWORD)v37))
            {
              v44 = 0;
              goto LABEL_94;
            }
            v38 = (v37 - 1) | ((v37 - 1) >> 1) | ((((_DWORD)v37 - 1) | ((v37 - 1) >> 1)) >> 2);
            v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
            v40 = (v39 | HIWORD(v39)) + 1;
            v147 = v2 + 98;
            if (v40 > 0x400)
            {
              if (v40 > 2 * v37)
                goto LABEL_54;
            }
            else if (3 * v40 > 4 * v37)
            {
LABEL_50:
              v41 = (double)v37;
              v42 = (double)v40;
              v43 = 0.604166667;
              goto LABEL_55;
            }
            LODWORD(v40) = 2 * v40;
            if (v40 <= 0x400)
              goto LABEL_50;
LABEL_54:
            v41 = (double)v37;
            v42 = (double)v40;
            v43 = 0.416666667;
LABEL_55:
            if (v42 * v43 <= v41)
              LODWORD(v40) = 2 * v40;
            if (v40 <= 8)
              v45 = 8;
            else
              v45 = v40;
            v46 = (_DWORD *)WTF::fastMalloc((WTF *)((32 * v45) | 0x10));
            v47 = v46;
            v48 = 0;
            v44 = v46 + 4;
            do
            {
              v49 = &v46[v48];
              *((_BYTE *)v49 + 16) = -1;
              *((_QWORD *)v49 + 4) = 0;
              *((_QWORD *)v49 + 5) = 0;
              *((_QWORD *)v49 + 3) = 0;
              v48 += 8;
            }
            while (8 * v45 != v48);
            v46[2] = v45 - 1;
            v46[3] = v45;
            *v46 = 0;
            v46[1] = v37;
            v50 = *v151;
            if (*v151)
            {
              v51 = *((unsigned int *)v50 - 1);
              v52 = &v50[32 * v51];
              if (*((_DWORD *)v50 - 3))
              {
                v53 = *v151;
                if ((_DWORD)v51)
                {
                  v54 = 32 * v51;
                  v53 = *v151;
                  while (*v53 >= 0xFEu)
                  {
                    v53 += 32;
                    v54 -= 32;
                    if (!v54)
                    {
                      v53 = v52;
                      goto LABEL_72;
                    }
                  }
                }
                goto LABEL_72;
              }
              v53 = &v50[32 * v51];
            }
            else
            {
              v53 = 0;
              v51 = 0;
            }
            v52 = &v50[32 * v51];
LABEL_72:
            v146 = v2;
            if (v50)
              v55 = &v50[32 * *((unsigned int *)v50 - 1)];
            else
              v55 = 0;
            while (v53 != v55)
            {
              v56 = 0;
              v57 = *v53;
              v58 = 9 * ((~(v57 << 15) + v57) ^ ((~(v57 << 15) + v57) >> 10));
              v59 = ((v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11)) ^ (((v58 ^ (v58 >> 6))
                                                                         + ~((v58 ^ (v58 >> 6)) << 11)) >> 16);
              do
              {
                v60 = v59 & v47[2];
                v59 = ++v56 + v60;
              }
              while (LOBYTE(v44[8 * v60]) != 255);
              v61 = &v44[8 * v60];
              *(_BYTE *)v61 = v57;
              v62 = (uint64_t *)(v61 + 2);
              v153 = 0;
              v154 = 0;
              v152 = 0;
              v63 = (_QWORD *)*((_QWORD *)v53 + 2);
              if (v63)
              {
                do
                {
                  WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v155, &v152, v63);
                  v63 = (_QWORD *)v63[2];
                }
                while (v63);
                v65 = v152;
                v64 = v153;
                v66 = v154;
              }
              else
              {
                v66 = 0;
                v64 = 0;
                v65 = 0;
              }
              v67 = *v62;
              *v62 = v65;
              v152 = v67;
              v68 = (WTF *)*((_QWORD *)v61 + 2);
              *((_QWORD *)v61 + 2) = v64;
              v153 = v68;
              v69 = *((_QWORD *)v61 + 3);
              *((_QWORD *)v61 + 3) = v66;
              v154 = v69;
              if (v68)
              {
                do
                {
                  v70 = (WTF *)*((_QWORD *)v68 + 2);
                  WTF::fastFree(v68, (void *)a2);
                  v68 = v70;
                }
                while (v70);
                v67 = v152;
              }
              if (v67)
                WTF::fastFree((WTF *)(v67 - 16), (void *)a2);
              v71 = v53 + 32;
              v53 = v52;
              if (v71 != v52)
              {
                v53 = v71;
                while (*v53 >= 0xFEu)
                {
                  v53 += 32;
                  if (v53 == v52)
                  {
                    v53 = v52;
                    break;
                  }
                }
              }
            }
            v2 = v146;
            v29 = v147;
LABEL_94:
            v72 = v33[1];
            v33[1] = (uint64_t)v44;
            if (v72)
            {
              v73 = v29;
              v74 = *(unsigned int *)(v72 - 4);
              if ((_DWORD)v74)
              {
                for (j = 0; j != v74; ++j)
                {
                  if (*(unsigned __int8 *)(v72 + 32 * j) != 254)
                  {
                    v76 = v72 + 32 * j;
                    v77 = *(WTF **)(v76 + 16);
                    if (v77)
                    {
                      do
                      {
                        v78 = (WTF *)*((_QWORD *)v77 + 2);
                        WTF::fastFree(v77, (void *)a2);
                        v77 = v78;
                      }
                      while (v78);
                    }
                    v79 = *(_QWORD *)(v76 + 8);
                    if (v79)
                      WTF::fastFree((WTF *)(v79 - 16), (void *)a2);
                  }
                }
              }
              WTF::fastFree((WTF *)(v72 - 16), (void *)a2);
              v29 = v73;
            }
            v80 = *v29;
            if (*v29)
              v81 = *(_DWORD *)(v80 - 12) + 1;
            else
              v81 = 1;
            *(_DWORD *)(v80 - 12) = v81;
            v82 = *v29;
            if (*v29)
              v83 = *(_DWORD *)(v82 - 12);
            else
              v83 = 0;
            v84 = (*(_DWORD *)(v82 - 16) + v83);
            v85 = *(unsigned int *)(v82 - 4);
            if (v85 > 0x400)
            {
              if (v85 > 2 * v84)
                goto LABEL_116;
            }
            else
            {
              if (3 * v85 > 4 * v84)
                goto LABEL_116;
              if (!(_DWORD)v85)
              {
                v86 = 8;
                goto LABEL_115;
              }
            }
            v86 = (_DWORD)v85 << (6 * *(_DWORD *)(v82 - 12) >= (2 * v85));
LABEL_115:
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashMap<WebCore::AXRelationType,WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WTF::ListHashSet<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AXIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v29, v86, v33);
            goto LABEL_116;
          }
          v14 = *(unsigned int *)(v3 - 4);
        }
        v3 += 16 * v14;
        if ((_QWORD *)v3 == v15)
          goto LABEL_25;
        goto LABEL_14;
      }
    }
  }
  return result;
}

