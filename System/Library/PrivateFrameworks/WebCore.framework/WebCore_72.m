uint64_t WebCore::HTMLMediaElement::havePotentialSourceChild(WebCore::HTMLMediaElement *this, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  WTF::StringImpl *v19;
  int v20;

  v3 = *((_QWORD *)this + 133);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *((_QWORD *)this + 134);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  WebCore::HTMLMediaElement::selectNextSourceChild((WTF::URL *)&v19, (uint64_t)this, 0, 0, a2);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v6 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = v3;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      v11 = *(_WORD *)(v6 + 30);
      if ((v11 & 0x400) == 0)
      {
        v12 = *(_WORD *)(v6 + 28);
        if ((v12 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v6, v5);
        }
        else
        {
          if ((v12 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
            v11 = *(_WORD *)(v6 + 30);
          }
          *(_WORD *)(v6 + 30) = v11 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v7 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = v4;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v13 = *(_WORD *)(v7 + 30);
      if ((v13 & 0x400) == 0)
      {
        v14 = *(_WORD *)(v7 + 28);
        if ((v14 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, v5);
        }
        else
        {
          if ((v14 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v13 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v13 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = v20;
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
      if (!v4)
        goto LABEL_21;
      goto LABEL_19;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (!v4)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v15 = *(_WORD *)(v4 + 30);
    if ((v15 & 0x400) == 0)
    {
      v16 = *(_WORD *)(v4 + 28);
      if ((v16 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v4, v5);
      }
      else
      {
        if ((v16 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v15 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v15 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
LABEL_21:
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v17 = *(_WORD *)(v3 + 30);
      if ((v17 & 0x400) == 0)
      {
        v18 = *(_WORD *)(v3 + 28);
        if ((v18 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, v5);
        }
        else
        {
          if ((v18 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v17 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v17 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v8 & 1;
}

uint64_t WebCore::HTMLMediaElement::error(WebCore::HTMLMediaElement *this)
{
  return *((_QWORD *)this + 120);
}

uint64_t WebCore::HTMLMediaElement::setSrcObject(WebCore::HTMLMediaElement *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::MediaStream *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  bmalloc::api *v18;
  void *v19;
  _QWORD v20[4];

  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v20[0] = "HTMLMediaElement";
  v20[1] = 17;
  v20[2] = "setSrcObject";
  v20[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v20);
  }
  v7 = (uint64_t *)((char *)this + 1528);
  if (*((unsigned __int8 *)this + 1544) == *(unsigned __int8 *)(a2 + 16))
  {
    if (!*((_BYTE *)this + 1544))
      goto LABEL_22;
    v8 = *((unsigned int *)this + 384);
    v9 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v8 == -1)
    {
      if ((_DWORD)v9 == -1)
        goto LABEL_22;
    }
    else if ((_DWORD)v9 == -1)
    {
      ((void (*)(_QWORD *, char *))off_1E33C50B8[v8])(v20, (char *)this + 1528);
      *((_DWORD *)this + 384) = -1;
      goto LABEL_22;
    }
    v20[0] = (char *)this + 1528;
    ((void (*)(_QWORD *, char *, uint64_t))off_1E33C50D8[v9])(v20, (char *)this + 1528, a2);
  }
  else if (*((_BYTE *)this + 1544))
  {
    v10 = *((unsigned int *)this + 384);
    if ((_DWORD)v10 != -1)
      ((void (*)(_QWORD *, char *))off_1E33C50B8[v10])(v20, (char *)this + 1528);
    *((_DWORD *)this + 384) = -1;
    *((_BYTE *)this + 1544) = 0;
  }
  else
  {
    *((_BYTE *)this + 1528) = 0;
    *((_DWORD *)this + 384) = -1;
    v11 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(_QWORD *, char *, uint64_t))off_1E33C50F8[v11])(v20, (char *)this + 1528, a2);
      *((_DWORD *)this + 384) = v11;
    }
    *((_BYTE *)this + 1544) = 1;
  }
LABEL_22:
  v12 = (WebCore::MediaStream *)*((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(v12);
      bmalloc::api::isoDeallocate(v18, v19);
    }
    else
    {
      --*((_DWORD *)v12 + 22);
    }
  }
  v13 = (_DWORD *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v13)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 80))(v13);
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v13 + 104))(v13, 0);
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = (_DWORD *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v14)
  {
    if (v14[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[4];
  }
  if (*((_BYTE *)this + 1544) && *((_DWORD *)this + 384) == 1)
  {
    v15 = *v7;
    if (*v7)
    {
      v16 = *(_DWORD *)(v15 + 24);
      *(_DWORD *)(v15 + 24) = v16 + 1;
      *(_BYTE *)(v15 + 233) = 1;
      if (v16)
        *(_DWORD *)(v15 + 24) = v16;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
    else
    {
      MEMORY[0xE9] = 1;
    }
  }
  return WebCore::HTMLMediaElement::prepareForLoad(this);
}

WTF::StringImpl *WebCore::HTMLMediaElement::setCrossOrigin(WebCore::HTMLMediaElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t *WebCore::HTMLMediaElement::crossOrigin@<X0>(WebCore::HTMLMediaElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    return WebCore::parseCORSSettingsAttribute(v6, a2);
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      return WebCore::parseCORSSettingsAttribute(v6, a2);
    }
  }
  return WebCore::parseCORSSettingsAttribute(v6, a2);
}

uint64_t WebCore::HTMLMediaElement::networkState(WebCore::HTMLMediaElement *this)
{
  return *((unsigned int *)this + 225);
}

void WebCore::HTMLMediaElement::canPlayType(WebCore::HTMLMediaElement *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  double v10;
  double v11;
  float v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  WTF::StringImpl *v88;
  uint64_t *v89;
  const WTF::String *v90;
  _QWORD v91[4];
  WTF::StringImpl *v92;
  char v93;
  uint64_t v94[5];
  __int16 v95;
  char v96;
  _QWORD v97[2];
  unsigned int v98[4];
  char v99;
  unsigned int v100[4];
  char v101;
  WTF *v102;
  int v103;
  int v104;
  char v105;
  WTF *v106;
  int v107;
  int v108;
  char v109;
  WTF *v110;
  int v111;
  int v112;
  char v113;
  WTF::StringImpl **v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint8_t buf[4];
  _BYTE v120[12];
  int v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v92 = 0;
  v93 = 0;
  v94[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v94);
  v95 = 0;
  v96 = 0;
  v99 = 0;
  LOBYTE(v100[0]) = 0;
  v101 = 0;
  LOBYTE(v102) = 0;
  v105 = 0;
  LOBYTE(v106) = 0;
  v109 = 0;
  LOBYTE(v110) = 0;
  v113 = 0;
  v97[0] = 0;
  v97[1] = 0;
  LOBYTE(v98[0]) = 0;
  v90 = (const WTF::String *)a2;
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 4;
  v8 = v92;
  v92 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v93 = 0;
  WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)v97, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 80));
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v98, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 96));
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v100, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 120));
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  v89 = a3;
  if (v105 == *(_BYTE *)(v13 + 160))
  {
    if (v105)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v102, (WTF *)(v13 + 144));
  }
  else if (v105)
  {
    v14 = v102;
    if (v102)
    {
      v102 = 0;
      v103 = 0;
      WTF::fastFree(v14, v9);
    }
    v105 = 0;
  }
  else
  {
    v15 = *(unsigned int *)(v13 + 156);
    v102 = 0;
    v103 = 0;
    v104 = v15;
    if ((_DWORD)v15)
    {
      if (v15 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x195C06B7CLL);
      }
      v16 = (WTF *)WTF::fastMalloc((WTF *)(4 * v15));
      v103 = v15;
      v102 = v16;
      v17 = *(unsigned int *)(v13 + 156);
      if ((_DWORD)v17)
      {
        v18 = *(int **)(v13 + 144);
        v19 = 4 * v17;
        do
        {
          v20 = *v18++;
          *(_DWORD *)v16 = v20;
          v16 = (WTF *)((char *)v16 + 4);
          v19 -= 4;
        }
        while (v19);
      }
    }
    v105 = 1;
    a3 = v89;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  if (v109 == *(_BYTE *)(v21 + 184))
  {
    if (v109)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v106, (WTF *)(v21 + 168));
  }
  else if (v109)
  {
    v22 = v106;
    if (v106)
    {
      v106 = 0;
      v107 = 0;
      WTF::fastFree(v22, v9);
    }
    v109 = 0;
  }
  else
  {
    v23 = *(unsigned int *)(v21 + 180);
    v106 = 0;
    v107 = 0;
    v108 = v23;
    if ((_DWORD)v23)
    {
      if (v23 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x195C06B84);
      }
      v24 = (WTF *)WTF::fastMalloc((WTF *)(4 * v23));
      v107 = v23;
      v106 = v24;
      v25 = *(unsigned int *)(v21 + 180);
      if ((_DWORD)v25)
      {
        v26 = *(int **)(v21 + 168);
        v27 = 4 * v25;
        do
        {
          v28 = *v26++;
          *(_DWORD *)v24 = v28;
          v24 = (WTF *)((char *)v24 + 4);
          v27 -= 4;
        }
        while (v27);
      }
    }
    v109 = 1;
    a3 = v89;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  if (v113 == *(_BYTE *)(v29 + 208))
  {
    if (v113)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v110, (WTF *)(v29 + 192));
  }
  else if (v113)
  {
    v30 = v110;
    if (v110)
    {
      v110 = 0;
      v111 = 0;
      WTF::fastFree(v30, v9);
    }
    v113 = 0;
  }
  else
  {
    v31 = *(unsigned int *)(v29 + 204);
    v110 = 0;
    v111 = 0;
    v112 = v31;
    if ((_DWORD)v31)
    {
      if (v31 >> 30)
      {
        __break(0xC471u);
LABEL_186:
        JUMPOUT(0x195C06B74);
      }
      v32 = (WTF *)WTF::fastMalloc((WTF *)(4 * v31));
      v111 = v31;
      v110 = v32;
      v33 = *(unsigned int *)(v29 + 204);
      if ((_DWORD)v33)
      {
        v34 = *(int **)(v29 + 192);
        v35 = 4 * v33;
        do
        {
          v36 = *v34++;
          *(_DWORD *)v32 = v36;
          v32 = (WTF *)((char *)v32 + 4);
          v35 -= 4;
        }
        while (v35);
      }
    }
    v113 = 1;
  }
  v37 = WebCore::MediaPlayer::supportsType((WebCore::MediaPlayer *)&v92, (const WebCore::MediaEngineSupportParameters *)v9, v10, v11, v12);
  *a3 = 0;
  if (v37 == 2 || v37 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else if (!v37)
  {
    v39 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v39 += 2;
    *a3 = (uint64_t)v39;
  }
  v40 = *((_QWORD *)this + 228);
  v41 = *((_QWORD *)this + 229);
  v91[0] = "HTMLMediaElement";
  v91[1] = 17;
  v91[2] = "canPlayType";
  v91[3] = v41;
  if (!*(_BYTE *)(v40 + 12))
    goto LABEL_156;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v91);
  v42 = *(WTF::StringImpl **)v90;
  if (*(_QWORD *)v90)
    *(_DWORD *)v42 += 2;
  WTF::String::String((WTF::String *)&v116, ": ");
  v43 = *a3;
  if (*a3)
    *(_DWORD *)v43 += 2;
  if (v117)
  {
    v44 = *(_DWORD *)(v117 + 4);
    if (v42)
      goto LABEL_59;
  }
  else
  {
    v44 = 0;
    if (v42)
    {
LABEL_59:
      v45 = *((_DWORD *)v42 + 1);
      if (v116)
        goto LABEL_60;
LABEL_176:
      v46 = 0;
      if (v43)
        goto LABEL_61;
LABEL_177:
      v47 = 0;
      goto LABEL_62;
    }
  }
  v45 = 0;
  if (!v116)
    goto LABEL_176;
LABEL_60:
  v46 = *((_DWORD *)v116 + 1);
  if (!v43)
    goto LABEL_177;
LABEL_61:
  v47 = *(_DWORD *)(v43 + 4);
LABEL_62:
  if ((v47 | v46) < 0
    || ((v48 = __OFADD__(v46, v47), v49 = v46 + v47, !v48) ? (v50 = 0) : (v50 = 1),
        v45 < 0
     || (v50 & 1) != 0
     || ((v48 = __OFADD__(v45, v49), v51 = v45 + v49, !v48) ? (v52 = 0) : (v52 = 1),
         v44 < 0 || (v52 & 1) != 0 || (v53 = (v44 + v51), __OFADD__(v44, v51)))))
  {
    v118 = 0;
    goto LABEL_182;
  }
  if (v117 && (*(_BYTE *)(v117 + 16) & 4) == 0 || v42 && (*((_BYTE *)v42 + 16) & 4) == 0)
  {
    v54 = 0;
    goto LABEL_79;
  }
  if (!v116)
  {
    if (!v43)
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v53, 1, v117, v42, 0, 0, &v118);
      if (v118)
        goto LABEL_83;
      goto LABEL_182;
    }
    goto LABEL_163;
  }
  v87 = *((_DWORD *)v116 + 4);
  v54 = (v87 >> 2) & 1;
  if (v43 && (v87 & 4) != 0)
LABEL_163:
    v54 = (*(unsigned __int8 *)(v43 + 16) >> 2) & 1;
LABEL_79:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v53, v54, v117, v42, (uint64_t)v116, v43, &v118);
  if (!v118)
  {
LABEL_182:
    __break(0xC471u);
    goto LABEL_186;
  }
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v43, v55);
    else
      *(_DWORD *)v43 -= 2;
  }
LABEL_83:
  v56 = v116;
  v116 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::destroy(v56, v55);
      if (!v42)
        goto LABEL_89;
      goto LABEL_87;
    }
    *(_DWORD *)v56 -= 2;
  }
  if (!v42)
    goto LABEL_89;
LABEL_87:
  if (*(_DWORD *)v42 == 2)
    WTF::StringImpl::destroy(v42, v55);
  else
    *(_DWORD *)v42 -= 2;
LABEL_89:
  v57 = (WTF::StringImpl *)v117;
  v117 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v55);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = qword_1ECE7C4A0;
  v59 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v59)
  {
    WTF::String::utf8();
    v60 = v114 ? (uint64_t)(v114 + 2) : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v120 = v60;
    _os_log_impl(&dword_1940B8000, v58, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v59 = (uint64_t)v114;
    v114 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
        v59 = WTF::fastFree((WTF *)v59, v38);
      else
        --*(_DWORD *)v59;
    }
  }
  if (WebCore::LogMedia)
  {
    v61 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v62 = *v61;
      if ((v62 & 1) != 0)
        break;
      v63 = __ldaxr(v61);
      if (v63 == v62)
      {
        if (!__stxr(v62 | 1, v61))
        {
          v88 = v7;
          v64 = WTF::Logger::observers((WTF::Logger *)v59);
          v65 = *(unsigned int *)(v64 + 12);
          if ((_DWORD)v65)
          {
            v66 = *(uint64_t **)v64;
            v67 = *(_QWORD *)v64 + 8 * v65;
            do
            {
              v68 = *v66;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v91);
              v121 = 0;
              v69 = *(WTF::StringImpl **)v90;
              if (*(_QWORD *)v90)
                *(_DWORD *)v69 += 2;
              v122 = v69;
              v123 = 0;
              WTF::String::String((WTF::String *)&v124, ": ");
              v125 = 0;
              v70 = (WTF::StringImpl *)*a3;
              if (*a3)
                *(_DWORD *)v70 += 2;
              v126 = v70;
              v114 = 0;
              v115 = 0;
              v71 = WTF::fastMalloc((WTF *)0x40);
              LODWORD(v115) = 4;
              v114 = (WTF::StringImpl **)v71;
              v72 = HIDWORD(v115);
              *(_DWORD *)(v71 + 16 * HIDWORD(v115)) = *(_DWORD *)buf;
              v73 = *(_QWORD *)&v120[4];
              if (*(_QWORD *)&v120[4])
                **(_DWORD **)&v120[4] += 2;
              *(_QWORD *)(v71 + 16 * v72 + 8) = v73;
              *(_DWORD *)(v71 + 16 * (v72 + 1)) = v121;
              v74 = v122;
              if (v122)
                *(_DWORD *)v122 += 2;
              *(_QWORD *)(v71 + 16 * (v72 + 1) + 8) = v74;
              *(_DWORD *)(v71 + 16 * (v72 + 2)) = v123;
              v75 = v124;
              if (v124)
                *(_DWORD *)v124 += 2;
              *(_QWORD *)(v71 + 16 * (v72 + 2) + 8) = v75;
              *(_DWORD *)(v71 + 16 * (v72 + 3)) = v125;
              v76 = v126;
              if (v126)
                *(_DWORD *)v126 += 2;
              *(_QWORD *)(v71 + 16 * (v72 + 3) + 8) = v76;
              HIDWORD(v115) = v72 + 4;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::StringImpl ***))(*(_QWORD *)v68 + 16))(v68, &WebCore::LogMedia, 0, &v114);
              v77 = (WTF *)v114;
              if (HIDWORD(v115))
              {
                v78 = 16 * HIDWORD(v115);
                v79 = v114 + 1;
                do
                {
                  v80 = *v79;
                  *v79 = 0;
                  if (v80)
                  {
                    if (*(_DWORD *)v80 == 2)
                      WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v38);
                    else
                      *(_DWORD *)v80 -= 2;
                  }
                  v79 += 2;
                  v78 -= 16;
                }
                while (v78);
                v77 = (WTF *)v114;
                a3 = v89;
              }
              if (v77)
              {
                v114 = 0;
                LODWORD(v115) = 0;
                WTF::fastFree(v77, v38);
              }
              v81 = v126;
              v126 = 0;
              if (v81)
              {
                if (*(_DWORD *)v81 == 2)
                  WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v81 -= 2;
              }
              v82 = v124;
              v124 = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v82 -= 2;
              }
              v83 = v122;
              v122 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v83 -= 2;
              }
              v84 = *(WTF::StringImpl **)&v120[4];
              *(_QWORD *)&v120[4] = 0;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                  WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v84 -= 2;
              }
              ++v66;
            }
            while (v66 != (uint64_t *)v67);
          }
          v85 = __ldxr(v61);
          if (v85 == 1)
          {
            v7 = v88;
            if (!__stlxr(0, v61))
              break;
          }
          else
          {
            __clrex();
            v7 = v88;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v86 = v118;
  v118 = 0;
  if (!v86)
  {
LABEL_156:
    if (!v7)
      goto LABEL_159;
    goto LABEL_157;
  }
  if (*(_DWORD *)v86 != 2)
  {
    *(_DWORD *)v86 -= 2;
    goto LABEL_156;
  }
  WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v38);
  if (!v7)
    goto LABEL_159;
LABEL_157:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v38);
  else
    *(_DWORD *)v7 -= 2;
LABEL_159:
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v92, v38);
}

uint64_t WebCore::HTMLMediaElement::mediaContentTypesRequiringHardwareSupport(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 80;
}

WTF *WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, unsigned int *a2)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _DWORD *v31;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = (WTF::StringImpl **)(*(_QWORD *)result + 16 * v5);
    v7 = 16 * v4 - 16 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    *((_DWORD *)v2 + 3) = v5;
    goto LABEL_36;
  }
  v9 = *((_DWORD *)result + 2);
  if (v5 <= v9)
    goto LABEL_35;
  if (v9)
  {
    if ((_DWORD)v4)
    {
      v10 = *(WTF::StringImpl ***)result;
      v11 = 16 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v13 = a2[3];
  if (*((_DWORD *)v2 + 2) >= v13)
  {
LABEL_35:
    v5 = *((unsigned int *)v2 + 3);
LABEL_36:
    v22 = *(_QWORD *)a2;
    v23 = *(WTF **)v2;
    if ((_DWORD)v5)
    {
      v24 = v22 + 16 * v5;
      do
      {
        v25 = *(_DWORD **)v22;
        if (*(_QWORD *)v22)
          *v25 += 2;
        v26 = *(WTF::StringImpl **)v23;
        *(_QWORD *)v23 = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v26 -= 2;
        }
        *((_BYTE *)v23 + 8) = *(_BYTE *)(v22 + 8);
        v22 += 16;
        v23 = (WTF *)((char *)v23 + 16);
      }
      while (v22 != v24);
      v22 = *(_QWORD *)a2;
      v27 = *((_DWORD *)v2 + 3);
      v23 = *(WTF **)v2;
    }
    else
    {
      v27 = 0;
    }
    v28 = a2[3];
    if (v27 != (_DWORD)v28)
    {
      v29 = (char *)v23 + 16 * v27;
      v30 = v22 + 16 * v27;
      do
      {
        v31 = *(_DWORD **)v30;
        if (*(_QWORD *)v30)
          *v31 += 2;
        *(_QWORD *)v29 = v31;
        v29[8] = *(_BYTE *)(v30 + 8);
        v30 += 16;
        v29 += 16;
      }
      while (v30 != v22 + 16 * v28);
    }
    *((_DWORD *)v2 + 3) = v28;
    return v2;
  }
  if (!(v13 >> 28))
  {
    v14 = *(WTF **)v2;
    v15 = *((unsigned int *)v2 + 3);
    v16 = WTF::fastMalloc((WTF *)(16 * v13));
    *((_DWORD *)v2 + 2) = v13;
    *(_QWORD *)v2 = v16;
    if ((_DWORD)v15)
    {
      v17 = v16;
      v18 = (WTF *)((char *)v14 + 16 * v15);
      v19 = v14;
      do
      {
        v20 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)v17 = v20;
        *(_BYTE *)(v17 + 8) = *((_BYTE *)v19 + 8);
        v21 = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v21 -= 2;
        }
        v19 = (WTF *)((char *)v19 + 16);
        v17 += 16;
      }
      while (v19 != v18);
    }
    if (v14)
    {
      if (*(WTF **)v2 == v14)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v14, a2);
    }
    goto LABEL_35;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::HTMLMediaElement::allowedMediaContainerTypes(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 96;
}

uint64_t WebCore::HTMLMediaElement::allowedMediaCodecTypes(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 120;
}

uint64_t WebCore::HTMLMediaElement::allowedMediaVideoCodecIDs(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 144;
}

uint64_t WebCore::HTMLMediaElement::allowedMediaAudioCodecIDs(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 168;
}

uint64_t WebCore::HTMLMediaElement::allowedMediaCaptionFormatTypes(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 192;
}

double WebCore::HTMLMediaElement::getStartDate(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  _QWORD v4[2];

  v1 = *((_QWORD *)this + 142);
  if (!v1)
    return NAN;
  v4[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 376))(*(_QWORD *)(v1 + 72));
  v4[1] = v2;
  WTF::MediaTime::toDouble((WTF::MediaTime *)v4);
  return result;
}

uint64_t WebCore::HTMLMediaElement::load(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  WebCore::Quirks *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t (**v11[4])();

  *((_DWORD *)this + 6) += 2;
  v2 = *((_QWORD *)this + 228);
  v3 = (uint64_t (**)())*((_QWORD *)this + 229);
  v11[0] = (uint64_t (**)())"HTMLMediaElement";
  v11[1] = (uint64_t (**)())17;
  v11[2] = (uint64_t (**)())"load";
  v11[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  if (*((_DWORD *)this + 270) != 2)
    goto LABEL_13;
  v5 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 688);
  if (!v5)
    v5 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
  if (!WebCore::Quirks::requiresUserGestureToLoadInPictureInPicture(v5)
    || (result = WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)),
        (_DWORD)result))
  {
LABEL_13:
    WebCore::HTMLMediaElement::prepareForLoad(this);
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = off_1E33C58C0;
    *(_QWORD *)(v8 + 8) = WebCore::HTMLMediaElement::prepareToPlay;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = this;
    v11[0] = (uint64_t (**)())v8;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)this, 9, (uint64_t)this + 784, v11);
    result = (uint64_t)v11[0];
    v11[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    v9 = *((_WORD *)this + 15);
    if ((v9 & 0x400) == 0)
    {
      v10 = *((_WORD *)this + 14);
      if ((v10 & 0xF000) == 0x9000)
      {
        return (uint64_t)WebCore::Document::removedLastRef(this, v7);
      }
      else
      {
        if ((v10 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v9 = *((_WORD *)this + 15);
        }
        *((_WORD *)this + 15) = v9 | 0x400;
        return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 72))(this);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::prepareToPlay(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  int v14;
  _QWORD v15[4];

  v1 = this;
  ++WebCore::ScriptDisallowedScope::s_count;
  v2 = *(_QWORD *)(this + 1824);
  v3 = *(_QWORD *)(this + 1832);
  v15[0] = "HTMLMediaElement";
  v15[1] = 17;
  v15[2] = "prepareToPlay";
  v15[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia)
      v4 = byte_1ECE7C490 >= 3u;
    else
      v4 = 0;
    if (v4)
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v15);
  }
  v5 = *(unsigned int *)(v1 + 1265);
  v6 = v5 | ((unint64_t)*(unsigned __int16 *)(v1 + 1269) << 32);
  if ((v5 & 0x200000) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8))
      {
        *(_WORD *)(v1 + 1269) = WORD2(v6);
        *(_DWORD *)(v1 + 1265) = v6 | 0x200000;
        v8 = *(_QWORD *)(v1 + 1136);
        if (v8)
        {
          v9 = *(unsigned __int8 **)v8;
          if (__ldaxr(*(unsigned __int8 **)v8))
          {
            __clrex();
          }
          else if (!__stxr(1u, v9))
          {
            goto LABEL_16;
          }
          MEMORY[0x19AEA534C](v9);
LABEL_16:
          ++*((_QWORD *)v9 + 1);
          v11 = __ldxr(v9);
          if (v11 == 1)
          {
            if (!__stlxr(0, v9))
            {
LABEL_21:
              v12 = *(unsigned __int8 **)v8;
              if (__ldaxr(*(unsigned __int8 **)v8))
              {
                __clrex();
              }
              else if (!__stxr(1u, v12))
              {
                goto LABEL_25;
              }
              MEMORY[0x19AEA534C](v12);
LABEL_25:
              ++*((_QWORD *)v12 + 1);
              v14 = __ldxr(v12);
              if (v14 == 1)
              {
                if (!__stlxr(0, v12))
                  goto LABEL_30;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_30:
              *(_BYTE *)(v8 + 230) = 1;
              (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 80))(*(_QWORD *)(v8 + 72));
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
              this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
              goto LABEL_31;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v9);
          goto LABEL_21;
        }
      }
    }
  }
LABEL_31:
  --WebCore::ScriptDisallowedScope::s_count;
  return this;
}

WTF::Thread *WebCore::HTMLMediaElement::createMediaPlayer(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  WebCore::PlatformMediaSessionManager *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  WebCore::AudioNode *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WebCore::MediaPlayer *v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  char v39;
  WebCore::Widget *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  int v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  char v59;
  WTF::MonotonicTime *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  double v67;
  int v68;
  unsigned int *updated;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  WTF *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WebCore::AudioNode *v93;
  char v94;
  unsigned __int8 *v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::PlatformMediaSessionManager *v100;
  uint64_t v102;
  void *v103;
  WTF::Thread *result;
  int v105;
  WTF *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  char v115;
  WTF *v116;
  uint64_t v117;
  const char *v118;
  WebCore::PlatformMediaSessionManager *v119;
  char v120;

  v2 = *((_QWORD *)this + 228);
  v3 = (WebCore::PlatformMediaSessionManager *)*((_QWORD *)this + 229);
  v116 = (WTF *)"HTMLMediaElement";
  v117 = 17;
  v118 = "createMediaPlayer";
  v119 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v116);
  v4 = *((_QWORD *)this + 200);
  if (!v4)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v4 = *((_QWORD *)this + 200);
  }
  v5 = 1;
  WebCore::PlatformMediaSession::setActive(v4, 1);
  v6 = *((_QWORD *)this + 175);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_13;
  }
  v7 = *(WebCore::AudioNode **)(v6 + 8);
  if (!v7)
  {
LABEL_13:
    v10 = 0;
    v12 = 1;
    goto LABEL_17;
  }
  WebCore::AudioNode::ref(*(WebCore::AudioNode **)(v6 + 8));
  v8 = *((_QWORD *)this + 175);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v5 = 0;
    goto LABEL_13;
  }
  v10 = (unsigned __int8 *)(v9 + 176);
  if (__ldaxr((unsigned __int8 *)(v9 + 176)))
  {
    __clrex();
LABEL_15:
    MEMORY[0x19AEA534C](v10);
    goto LABEL_16;
  }
  if (__stxr(1u, v10))
    goto LABEL_15;
LABEL_16:
  v5 = 0;
  v12 = 0;
LABEL_17:
  v13 = (_DWORD *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v13)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 80))(v13);
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v13 + 104))(v13, 0);
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  WebCore::HTMLMediaElement::forgetResourceSpecificTracks((uint64_t (**)())this);
  if (*((_BYTE *)this + 1697))
    WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget(this, 0);
  *((_BYTE *)this + 1792) = 0;
  if (*((_BYTE *)this + 1816))
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 225);
    *((_QWORD *)this + 225) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    *((_BYTE *)this + 1816) = 0;
  }
  v16 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v16)
  {
    v17 = (unsigned int *)*((_QWORD *)this + 223);
    *((_QWORD *)this + 223) = 0;
    if (v17)
    {
      WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v17, v14);
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    {
      v21 = qword_1EE2F8C50;
      if (qword_1EE2F8C50)
      {
        do
LABEL_40:
          v25 = __ldaxr((unsigned int *)v21);
        while (__stlxr(v25 + 1, (unsigned int *)v21));
LABEL_41:
        v26 = *(unsigned int **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = v21;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v14);
          }
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v16);
        goto LABEL_46;
      }
    }
    else
    {
      WebCore::nullMediaPlayerClient(void)::client = (uint64_t)&off_1E340E220;
      qword_1EE2F8C50 = 0;
    }
    v21 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = &WebCore::nullMediaPlayerClient(void)::client;
    v22 = (unsigned int *)qword_1EE2F8C50;
    qword_1EE2F8C50 = v21;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v14);
      }
      v21 = qword_1EE2F8C50;
      if (!qword_1EE2F8C50)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_46:
  v29 = WTF::fastMalloc((WTF *)0x120);
  v30 = WebCore::MediaPlayer::MediaPlayer((WebCore::MediaPlayer *)v29, (WebCore::HTMLMediaElement *)((char *)this + 176));
  v31 = (unsigned __int8 **)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = v30;
  if (v31)
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v31);
    v29 = *((_QWORD *)this + 142);
    if (!v29)
    {
      v35 = 1;
      goto LABEL_58;
    }
  }
  v32 = *(unsigned __int8 **)v29;
  if (__ldaxr(*(unsigned __int8 **)v29))
  {
    __clrex();
  }
  else if (!__stxr(1u, v32))
  {
    goto LABEL_52;
  }
  MEMORY[0x19AEA534C](v32);
LABEL_52:
  ++*((_QWORD *)v32 + 1);
  v34 = __ldxr(v32);
  if (v34 == 1)
  {
    if (!__stlxr(0, v32))
      goto LABEL_57;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_57:
  v35 = 0;
LABEL_58:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v29 + 72) + 232))(*(_QWORD *)(v29 + 72), *((unsigned __int8 *)this + 1264));
  v36 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v36 && (v37 = *(_QWORD *)(v36 + 8)) != 0)
  {
    v38 = *(_DWORD **)(v37 + 288);
    if (v38)
      ++v38[2];
  }
  else
  {
    v38 = 0;
  }
  if (*((_BYTE *)this + 1441))
    v39 = *((_BYTE *)this + 1440);
  else
    v39 = 1;
  *(_BYTE *)(v29 + 233) = v39;
  (*(void (**)(_QWORD))(**(_QWORD **)(v29 + 72) + 1136))(*(_QWORD *)(v29 + 72));
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v41 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0 && (v43 = *(WebCore **)(v42 + 288)) != 0)
  {
    ++*((_DWORD *)v43 + 2);
    v44 = WebCore::screenSupportsHighDynamicRange(v43, v40);
    if (*((_DWORD *)v43 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v43 + 8))(v43);
    else
      --*((_DWORD *)v43 + 2);
  }
  else
  {
    v44 = WebCore::screenSupportsHighDynamicRange(0, v40);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v29 + 72) + 696))(*(_QWORD *)(v29 + 72), v44 ^ 1);
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) != 0)
    goto LABEL_90;
  v45 = *((_QWORD *)this + 177);
  if (v45)
  {
    if (*(_BYTE *)(v45 + 104))
      goto LABEL_90;
  }
  v46 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v46)
    goto LABEL_82;
  v47 = *(_QWORD *)(v46 + 8);
  if (!v47)
    goto LABEL_82;
  v48 = *(_QWORD *)(v47 + 24);
  if (!v48)
    goto LABEL_82;
  v49 = *(_QWORD *)(v48 + 8);
  if (!v49)
    goto LABEL_82;
  v50 = (*(_DWORD *)v49)++;
  v51 = *(_BYTE *)(v49 + 352);
  if (!v50)
  {
    WebCore::Page::~Page(v49);
    WTF::fastFree(v53, v54);
    if ((v51 & 1) == 0)
      goto LABEL_82;
LABEL_90:
    LOBYTE(v52) = 1;
    goto LABEL_91;
  }
  *(_DWORD *)v49 = v50;
  if ((v51 & 1) != 0)
    goto LABEL_90;
LABEL_82:
  v52 = (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
LABEL_91:
  *(_BYTE *)(v29 + 227) = v52;
  (*(void (**)(_QWORD))(**(_QWORD **)(v29 + 72) + 512))(*(_QWORD *)(v29 + 72));
  v55 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v55 && (v56 = *(_QWORD *)(v55 + 8)) != 0 && (v57 = *(_QWORD *)(v56 + 24)) != 0)
  {
    v58 = *(_DWORD **)(v57 + 8);
    if (v58)
    {
      v59 = 0;
      ++*v58;
      goto LABEL_98;
    }
  }
  else
  {
    v58 = 0;
  }
  v59 = 1;
LABEL_98:
  *(_BYTE *)(v29 + 224) = (*(_DWORD *)((_BYTE *)this + 1265) & 0x800000) == 0;
  v60 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 72) + 312))(*(_QWORD *)(v29 + 72));
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C07BB0);
    }
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C07BD0);
    }
    v61 = (*(_WORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2;
  }
  else
  {
    v61 = 0;
  }
  if (*(unsigned __int8 *)(v29 + 226) != v61)
  {
    *(_BYTE *)(v29 + 226) = v61;
    v60 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 72) + 328))(*(_QWORD *)(v29 + 72));
  }
  v62 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v62)
  {
    v63 = *(_QWORD *)(v62 + 8);
    if (v63)
    {
      v64 = *(_QWORD *)(v63 + 24);
      if (v64)
      {
        v65 = *(_QWORD *)(v64 + 8);
        if (v65)
        {
          v66 = *(_DWORD *)v65 + 1;
          *(_DWORD *)v65 = v66;
          if ((*(_QWORD *)(v65 + 1064) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v65 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v65 + 1056) = 0;
            WTF::MonotonicTime::now(v60);
            WebCore::TimerBase::setNextFireTime(v65 + 1032, v67 + 0.0);
            v66 = *(_DWORD *)v65;
          }
          v68 = v66 - 1;
          if (v68)
          {
            *(_DWORD *)v65 = v68;
          }
          else
          {
            WebCore::Page::~Page(v65);
            WTF::fastFree(v82, v83);
          }
        }
      }
    }
  }
  updated = (unsigned int *)WebCore::HTMLMediaElement::updateShouldContinueAfterNeedKey((unsigned __int8 *)this);
  v70 = *((_QWORD *)this + 175);
  if (v70)
  {
    if (*(_QWORD *)(v70 + 8))
    {
      v71 = *((_QWORD *)this + 142);
      if (v71)
      {
        updated = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v71 + 72) + 904))(*(_QWORD *)(v71 + 72));
        if (updated)
        {
          v72 = *((_QWORD *)this + 142);
          if (v72)
            v73 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v72 + 72) + 904))(*(_QWORD *)(v72 + 72));
          else
            v73 = 0;
          v74 = *((_QWORD *)this + 175);
          if (v74)
          {
            v114 = v59;
            v75 = *(_QWORD *)(v74 + 8);
            if (v75)
            {
              v76 = *(_QWORD *)(v75 + 160);
              if (v76)
                goto LABEL_129;
              v76 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v76 = 1;
              *(_QWORD *)(v76 + 8) = v75 + 152;
              v78 = *(unsigned int **)(v75 + 160);
              *(_QWORD *)(v75 + 160) = v76;
              if (!v78)
                goto LABEL_129;
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                atomic_store(1u, v78);
                WTF::fastFree((WTF *)v78, v77);
              }
              v76 = *(_QWORD *)(v75 + 160);
              if (v76)
              {
LABEL_129:
                v59 = v114;
                do
                  v81 = __ldaxr((unsigned int *)v76);
                while (__stlxr(v81 + 1, (unsigned int *)v76));
                goto LABEL_136;
              }
            }
            else
            {
              v76 = 0;
            }
            v59 = v114;
          }
          else
          {
            v76 = 0;
          }
LABEL_136:
          v116 = (WTF *)v76;
          (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v73 + 8))(v73, &v116);
          updated = (unsigned int *)v116;
          v116 = 0;
          if (updated)
          {
            do
            {
              v85 = __ldaxr(updated);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, updated));
            if (!v86)
            {
              atomic_store(1u, updated);
              updated = (unsigned int *)WTF::fastFree((WTF *)updated, v84);
            }
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 1696))
    goto LABEL_160;
  v87 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v87 || (v88 = *(_QWORD *)(v87 + 96)) == 0)
    v88 = WebCore::threadGlobalDataSlow((WebCore *)updated);
  v89 = *(_QWORD *)(v88 + 40);
  if (!v89)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v88);
    v89 = *(_QWORD *)(v88 + 40);
  }
  v90 = *((_QWORD *)this + 2);
  if ((v90 & 0x1000000000000) != 0
    && (v108 = v90 & 0xFFFFFFFFFFFFLL, v109 = *(unsigned int *)(v108 + 28), (_DWORD)v109))
  {
    v110 = *(_QWORD **)(v108 + 16);
    v111 = *(_QWORD *)(v89 + 2464);
    v112 = 32 * v109;
    while (*v110 != v111)
    {
      v110 += 4;
      v112 -= 32;
      if (!v112)
        goto LABEL_147;
    }
  }
  else
  {
LABEL_147:
    v91 = *((_QWORD *)this + 230);
    v92 = *(_QWORD *)(v91 + 88);
    if ((!v92 || !*(_DWORD *)(v92 - 12)) && !*(_DWORD *)(v91 + 140))
      goto LABEL_160;
  }
  v115 = v59;
  v113 = v35;
  v93 = v7;
  v94 = v12;
  v95 = v10;
  v96 = v5;
  v97 = 1;
  *((_BYTE *)this + 1648) = 1;
  v98 = *((_QWORD *)this + 200);
  if (!v98)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v98 = *((_QWORD *)this + 200);
  }
  v120 = 1;
  v99 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v98 + 32) + 248))(*(_QWORD *)(v98 + 32));
  v100 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v98 + 32) + 256))(*(_QWORD *)(v98 + 32));
  v116 = (WTF *)"MediaElementSession";
  v117 = 20;
  v118 = "setHasPlaybackTargetAvailabilityListeners";
  v119 = v100;
  if (*(_BYTE *)(v99 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      v100 = (WebCore::PlatformMediaSessionManager *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v116);
      v97 = v120;
    }
  }
  *(_BYTE *)(v98 + 250) = v97;
  v102 = WebCore::PlatformMediaSessionManager::sharedManager(v100);
  (*(void (**)(uint64_t))(*(_QWORD *)v102 + 192))(v102);
  WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent((uint64_t (**)())this, 0);
  v5 = v96;
  v10 = v95;
  v12 = v94;
  v7 = v93;
  v35 = v113;
  v59 = v115;
LABEL_160:
  WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
  result = (WTF::Thread *)WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)this, v103);
  if ((v59 & 1) != 0)
    goto LABEL_163;
  if (*v58 != 1)
  {
    --*v58;
LABEL_163:
    if ((v35 & 1) != 0)
      goto LABEL_165;
    goto LABEL_164;
  }
  WebCore::Page::~Page((uint64_t)v58);
  result = (WTF::Thread *)WTF::fastFree(v106, v107);
  if ((v35 & 1) == 0)
LABEL_164:
    result = (WTF::Thread *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v29);
LABEL_165:
  if ((v12 & 1) != 0)
    goto LABEL_171;
  v105 = __ldxr(v10);
  if (v105 != 1)
  {
    __clrex();
    goto LABEL_170;
  }
  if (__stlxr(0, v10))
LABEL_170:
    result = (WTF::Thread *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_171:
  if ((v5 & 1) == 0)
    return WebCore::AudioNode::deref(v7);
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::forgetResourceSpecificTracks(uint64_t (**this)()))()
{
  uint64_t v1;
  uint64_t (*i)();
  uint64_t v3;
  WebCore::TrackBase **v4;
  WebCore::TrackBase *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WebCore::TextTrack *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t j;
  uint64_t v29;
  WebCore::TrackBase **v30;
  WebCore::TrackBase *v31;
  WebCore *v32;
  uint64_t (**v33)();

  v1 = (uint64_t)this;
  for (i = this[168]; i; i = *(uint64_t (**)())(v1 + 1344))
  {
    v3 = *((unsigned int *)i + 17);
    if (!(_DWORD)v3)
      break;
    v4 = (WebCore::TrackBase **)*((_QWORD *)i + 7);
    v5 = v4[(v3 - 1)];
    if (v5 && *((_DWORD *)v5 + 10) != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x195C08064);
    }
    ++*((_DWORD *)v5 + 4);
    while (*v4 != v5)
    {
      ++v4;
      if (!--v3)
        goto LABEL_10;
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)v5 + 152, (_QWORD *)(v1 + 224));
    this = (uint64_t (**)())WebCore::AudioTrackList::remove(*(WebCore::AudioTrackList **)(v1 + 1344), v5, 1);
LABEL_10:
    if (*((_DWORD *)v5 + 4) == 1)
      this = (uint64_t (**)())(*(uint64_t (**)(WebCore::TrackBase *))(*(_QWORD *)v5 + 16))(v5);
    else
      --*((_DWORD *)v5 + 4);
  }
  if (*(_QWORD *)(v1 + 1352))
  {
    if (!*(_QWORD *)(v1 + 296))
    {
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = v1;
      v8 = *(unsigned int **)(v1 + 296);
      *(_QWORD *)(v1 + 296) = v7;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v6);
        }
      }
    }
    v11 = *(_QWORD *)(v1 + 296);
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_DWORD *)(v13 + 1392);
    *(_DWORD *)(v13 + 1392) = v14 + 1;
    v15 = *(_DWORD *)(*(_QWORD *)(v1 + 1352) + 108)
        + *(_DWORD *)(*(_QWORD *)(v1 + 1352) + 124)
        + *(_DWORD *)(*(_QWORD *)(v1 + 1352) + 68);
    v16 = (v15 - 1);
    if (v15 - 1 >= 0)
    {
      do
      {
        v17 = *(_QWORD *)(v1 + 1352);
        v18 = *(unsigned int *)(v17 + 124);
        if (v16 >= v18)
        {
          v20 = *(_DWORD *)(v17 + 108);
          if (v20 <= (int)v16 - (int)v18)
          {
            v21 = v16 - (v18 + v20);
            if (*(_DWORD *)(v17 + 68) <= v21)
            {
              v19 = 0;
            }
            else
            {
              v19 = *(WebCore::TextTrack **)(*(_QWORD *)(v17 + 56) + 8 * v21);
              if (v19 && *((_DWORD *)v19 + 10) != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x195C080E4);
              }
            }
          }
          else
          {
            v19 = *(WebCore::TextTrack **)(*(_QWORD *)(v17 + 96) + 8 * (v16 - v18));
            if (v19 && *((_DWORD *)v19 + 10) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195C080C4);
            }
          }
        }
        else
        {
          v19 = *(WebCore::TextTrack **)(*(_QWORD *)(v17 + 112) + 8 * v16);
          if (v19 && *((_DWORD *)v19 + 10) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195C080A4);
          }
        }
        v22 = *((_DWORD *)v19 + 4) + 1;
        *((_DWORD *)v19 + 4) = v22;
        if (*((_DWORD *)v19 + 58) == 2)
        {
          WebCore::HTMLMediaElement::removeTextTrack((uint64_t (**)())v1, v19, 0);
          v22 = *((_DWORD *)v19 + 4);
        }
        v23 = v22 - 1;
        if (v23)
          *((_DWORD *)v19 + 4) = v23;
        else
          (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v19 + 16))(v19);
        --v16;
        --v15;
      }
      while (v15 > 0);
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_DWORD *)(v13 + 1392) - 1;
    }
    *(_DWORD *)(v13 + 1392) = v14;
    v24 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v24 = off_1E33C5A20;
    *(_QWORD *)(v24 + 8) = v13;
    v33 = (uint64_t (**)())v24;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v13, 9, v13 + 656, &v33);
    this = v33;
    v33 = 0;
    if (this)
      this = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
    do
    {
      v26 = __ldaxr((unsigned int *)v11);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v11));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v11);
      this = (uint64_t (**)())WTF::fastFree((WTF *)v11, v25);
    }
  }
  for (j = *(_QWORD *)(v1 + 1360); j; j = *(_QWORD *)(v1 + 1360))
  {
    v29 = *(unsigned int *)(j + 68);
    if (!(_DWORD)v29)
      break;
    v30 = *(WebCore::TrackBase ***)(j + 56);
    v31 = v30[(v29 - 1)];
    if (v31 && *((_DWORD *)v31 + 10) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x195C08084);
    }
    ++*((_DWORD *)v31 + 4);
    while (*v30 != v31)
    {
      ++v30;
      if (!--v29)
        goto LABEL_60;
    }
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)v31 + 152, (_QWORD *)(v1 + 256));
    v32 = *(WebCore **)(v1 + 1360);
    if (v32)
    {
      ++*((_DWORD *)v32 + 6);
      this = (uint64_t (**)())WebCore::TrackListBase::remove(v32, v31, 1);
      if (*((_DWORD *)v32 + 6) == 1)
        this = (uint64_t (**)())(*(uint64_t (**)(WebCore *))(*(_QWORD *)v32 + 72))(v32);
      else
        --*((_DWORD *)v32 + 6);
    }
    else
    {
      this = (uint64_t (**)())WebCore::TrackListBase::remove(0, v31, 1);
    }
LABEL_60:
    if (*((_DWORD *)v31 + 4) == 1)
      this = (uint64_t (**)())(*(uint64_t (**)(WebCore::TrackBase *))(*(_QWORD *)v31 + 16))(v31);
    else
      --*((_DWORD *)v31 + 4);
  }
  return this;
}

unsigned __int8 *WebCore::HTMLMediaElement::setPaused(unsigned __int8 *this, int a2)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::HTMLMediaElement *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  char v17;
  int v18;
  void *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  v2 = (unsigned int *)(this + 1265);
  v3 = *(unsigned int *)(this + 1265);
  v4 = v3 | ((unint64_t)*(unsigned __int16 *)(this + 1269) << 32);
  if (((((v3 & 0x400) == 0) ^ a2) & 1) != 0)
    return this;
  v6 = (WebCore::HTMLMediaElement *)this;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = v7[1];
  if (!*(_QWORD *)(v8 + 1944) || *(_BYTE *)(v8 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v12 = *v7;
    v13 = (*(_WORD *)(v12 + 28) & 0x80) == 0 || v12 == 0;
    v14 = v12 + 216;
    if (v13)
      v14 = v8 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v14 + 236))
      goto LABEL_21;
  }
  v9 = *(_QWORD *)(v8 + 1272);
  if (v9 && (*(_BYTE *)(v9 + 70) & 4) != 0)
  {
LABEL_21:
    LOBYTE(v20) = 0;
    v22 = 0;
    v23 = 0;
    v21 = this;
  }
  else
  {
    if (!*(_BYTE *)(v8 + 3362)
      && ((v10 = *(unsigned __int8 *)(v8 + 3390), *(_BYTE *)(v8 + 3390))
       || (*(_BYTE *)(v8 + 70) & 8) != 0
       || *(_QWORD *)(v8 + 1560)
       || (v11 = *(_QWORD *)(v8 + 1328), *(_BYTE *)(v11 + 233))
       || *(_BYTE *)(v11 + 234)))
    {
      v15 = *(unsigned __int8 *)(v8 + 3391);
      if (v10)
        v16 = v15 == 0;
      else
        v16 = 0;
      v17 = !v16;
      LOBYTE(v20) = v17;
      v22 = 0;
      v23 = 0;
      v21 = this;
      if (v16)
        goto LABEL_30;
    }
    else
    {
      LOBYTE(v20) = 1;
      v22 = 0;
      v23 = 0;
      v21 = this;
    }
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v20, (WTF::StringImpl *)0x3C, a2, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v20, (WTF::StringImpl *)0x3F, a2 ^ 1, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v21, &v22);
    v4 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
  }
LABEL_30:
  v18 = 1024;
  if (!a2)
    v18 = 0;
  *((_WORD *)v2 + 2) = WORD2(v4);
  *v2 = v4 & 0xFFFFFBFF | v18;
  WebCore::HTMLMediaElement::updateBufferingState(v6);
  WebCore::HTMLMediaElement::updateStalledState(v6);
  if ((_BYTE)v20)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v21, &v23);
  if (v23)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v23, v19);
  this = v22;
  if (v22)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v22, v19);
  return this;
}

uint64_t WebCore::HTMLMediaElement::updateActiveTextTrackCues(uint64_t this, const WTF::MediaTime *a2)
{
  int *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF *v19;
  const WTF::MediaTime *v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  const WTF::MediaTime *v27;
  int v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v66;
  uint64_t v67;
  void *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  __int128 v74;
  WTF *v75;
  int v76;
  unint64_t i;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  unsigned int **v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _OWORD *v93;
  int v94;
  _OWORD *v95;
  _QWORD *v96;
  uint64_t *v97;
  unsigned int **v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  _OWORD *v102;
  int v103;
  _OWORD *v104;
  _QWORD *v105;
  uint64_t *v106;
  unsigned int **v107;
  uint64_t v108;
  _DWORD *v109;
  unint64_t j;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  _OWORD *v118;
  int v119;
  _OWORD *v120;
  _QWORD *v121;
  uint64_t *v122;
  unsigned int **v123;
  uint64_t v124;
  _DWORD *v125;
  unint64_t k;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  int v135;
  _OWORD *v136;
  _QWORD *v137;
  uint64_t *v138;
  unsigned int **v139;
  uint64_t v140;
  _DWORD *v141;
  unsigned int **v142;
  unint64_t v143;
  uint64_t *v144;
  char *v145;
  unint64_t v146;
  unsigned int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  void *v160;
  char *v161;
  double v162;
  double v163;
  double v164;
  _BOOL4 v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  WTF *v170;
  uint64_t v171;
  unint64_t StatusReg;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  uint64_t v190;
  void *v191;
  _DWORD *v192;
  __int16 v193;
  __int16 v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t m;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  WebCore::MediaControlTextTrackContainerElement *v203;
  _DWORD **v204;
  _DWORD *v205;
  WTF *v206;
  uint64_t v207;
  _DWORD **v208;
  _DWORD *v209;
  WTF *v210;
  WebCore::HTMLMediaElement *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int v215;
  __int128 v216;
  WTF *v217;
  uint64_t v218;
  WTF *v219[2];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _BYTE v225[24];
  char v226;
  __int128 v227;
  __int128 v228;
  WTF *v229;
  uint64_t v230;
  WTF *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;

  v2 = (int *)(this + 1265);
  if ((*(_DWORD *)(this + 1265) & 0x800) != 0)
    return this;
  v3 = this;
  if (*(int *)(this + 1392) > 0)
    return this;
  if (!*(_QWORD *)(this + 1352))
    return this;
  v4 = *(uint64_t **)(this + 1384);
  if (!v4 || !*v4)
    return this;
  v233 = 0;
  v234 = 0;
  if (*(_DWORD *)(this + 904) && *(_QWORD *)(this + 1136))
  {
    v223 = *(_OWORD *)a2;
    v224 = v223;
    *(_QWORD *)v225 = 0;
    *(_OWORD *)&v225[8] = v223;
    v219[0] = 0;
    v219[1] = 0;
    *(_QWORD *)&v221 = v219;
    *((_QWORD *)&v221 + 1) = &v223;
    WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::searchForOverlapsFrom<WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::OverlapsSearchAdapter>(*v4, (const WTF::MediaTime **)&v221);
    v7 = v219[0];
    if (HIDWORD(v219[1]))
    {
      v8 = 56 * HIDWORD(v219[1]);
      do
      {
        if ((int)WTF::MediaTime::compare(v7, a2) <= 0
          && WTF::MediaTime::compare((WTF *)((char *)v7 + 16), a2) == 1)
        {
          v9 = HIDWORD(v234);
          if (HIDWORD(v234) == (_DWORD)v234)
          {
            v10 = WTF::Vector<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v233, HIDWORD(v234) + 1, (unint64_t)v7);
            v9 = HIDWORD(v234);
            v11 = v233 + 56 * HIDWORD(v234);
            v13 = *((_OWORD *)v10 + 1);
            v12 = *((_OWORD *)v10 + 2);
            v14 = *(_OWORD *)v10;
            *(_QWORD *)(v11 + 48) = *((_QWORD *)v10 + 6);
            *(_OWORD *)(v11 + 16) = v13;
            *(_OWORD *)(v11 + 32) = v12;
            *(_OWORD *)v11 = v14;
          }
          else
          {
            v15 = v233 + 56 * HIDWORD(v234);
            v16 = *(_OWORD *)v7;
            v17 = *((_OWORD *)v7 + 1);
            v18 = *((_OWORD *)v7 + 2);
            *(_QWORD *)(v15 + 48) = *((_QWORD *)v7 + 6);
            *(_OWORD *)(v15 + 16) = v17;
            *(_OWORD *)(v15 + 32) = v18;
            *(_OWORD *)v15 = v16;
          }
          HIDWORD(v234) = v9 + 1;
        }
        v7 = (WTF *)((char *)v7 + 56);
        v8 -= 56;
      }
      while (v8);
      v7 = v219[0];
    }
    if (v7)
    {
      v219[0] = 0;
      LODWORD(v219[1]) = 0;
      WTF::fastFree(v7, v6);
    }
    if (HIDWORD(v234) > 1)
    {
      *(_QWORD *)&v223 = WebCore::compareCueInterval;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*,false>(v233, v233 + 56 * HIDWORD(v234), (uint64_t (**)(__int128 *, __int128 *))&v223, 126 - 2 * __clz(HIDWORD(v234)), 1);
    }
  }
  v231 = 0;
  v232 = 0;
  v229 = 0;
  v230 = 0;
  v19 = WTF::Vector<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v231, (WTF *)(*(_QWORD *)(v3 + 1384) + 8));
  v228 = *(_OWORD *)(v3 + 1320);
  v20 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v19);
  v21 = WTF::MediaTime::compare((WTF::MediaTime *)&v228, v20);
  v211 = (WebCore::HTMLMediaElement *)v3;
  if ((v21 & 0x80000000) == 0)
  {
    v21 = WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 1000), a2);
    if ((_DWORD)v21 == -1)
    {
      v22 = *(uint64_t **)(v3 + 1384);
      v23 = *(_OWORD *)a2;
      v223 = v228;
      v224 = v23;
      *(_QWORD *)v225 = 0;
      *(_OWORD *)&v225[8] = v23;
      v219[0] = 0;
      v219[1] = 0;
      *(_QWORD *)&v221 = v219;
      *((_QWORD *)&v221 + 1) = &v223;
      v21 = WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::searchForOverlapsFrom<WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::OverlapsSearchAdapter>(*v22, (const WTF::MediaTime **)&v221);
      v25 = v219[0];
      if (HIDWORD(v219[1]))
      {
        v26 = 56 * HIDWORD(v219[1]);
        do
        {
          if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 1000), (const WTF::MediaTime *)&v228) == -1)
            v27 = (const WTF::MediaTime *)&v228;
          else
            v27 = (const WTF::MediaTime *)(v3 + 1000);
          v21 = WTF::MediaTime::compare(v25, v27);
          if ((_DWORD)v21 == 1)
          {
            v21 = WTF::MediaTime::compare((WTF *)((char *)v25 + 16), a2);
            if ((_DWORD)v21 == -1)
            {
              v28 = HIDWORD(v230);
              if (HIDWORD(v230) == (_DWORD)v230)
              {
                v21 = (uint64_t)WTF::Vector<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v229, HIDWORD(v230) + 1, (unint64_t)v25);
                v28 = HIDWORD(v230);
                v29 = (char *)v229 + 56 * HIDWORD(v230);
                v31 = *(_OWORD *)(v21 + 16);
                v30 = *(_OWORD *)(v21 + 32);
                v32 = *(_OWORD *)v21;
                *((_QWORD *)v29 + 6) = *(_QWORD *)(v21 + 48);
              }
              else
              {
                v29 = (char *)v229 + 56 * HIDWORD(v230);
                v31 = *((_OWORD *)v25 + 1);
                v30 = *((_OWORD *)v25 + 2);
                v32 = *(_OWORD *)v25;
                *((_QWORD *)v29 + 6) = *((_QWORD *)v25 + 6);
              }
              *((_OWORD *)v29 + 1) = v31;
              *((_OWORD *)v29 + 2) = v30;
              *(_OWORD *)v29 = v32;
              HIDWORD(v230) = v28 + 1;
            }
          }
          v25 = (WTF *)((char *)v25 + 56);
          v26 -= 56;
        }
        while (v26);
        v25 = v219[0];
      }
      if (v25)
      {
        v219[0] = 0;
        LODWORD(v219[1]) = 0;
        v21 = WTF::fastFree(v25, v24);
      }
    }
  }
  v33 = *(_QWORD *)a2;
  *(_QWORD *)(v3 + 1325) = *(_QWORD *)((char *)a2 + 5);
  *(_QWORD *)(v3 + 1320) = v33;
  if ((*v2 & 0x400) == 0)
  {
    v21 = WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 1000), (const WTF::MediaTime *)&v228);
    if ((int)v21 <= 0)
      v21 = (uint64_t)WebCore::HTMLMediaElement::scheduleTimeupdateEvent((WebCore::HTMLMediaElement *)v3, 1);
  }
  v214 = HIDWORD(v234);
  v34 = HIDWORD(v230) != 0;
  v35 = HIDWORD(v232);
  v212 = HIDWORD(v230);
  v213 = HIDWORD(v232);
  if (!HIDWORD(v230) && HIDWORD(v232))
  {
    v36 = 0;
    do
    {
      v37 = HIDWORD(v232);
      if (v36 >= HIDWORD(v232))
      {
        __break(0xC471u);
        JUMPOUT(0x195C09830);
      }
      if (HIDWORD(v234))
      {
        v38 = 0;
        v39 = (_QWORD *)((char *)v231 + 56 * v36);
        v40 = 32;
        while (1)
        {
          v41 = v233;
          v21 = WTF::MediaTime::compare((WTF::MediaTime *)(v233 + v40 - 32), (const WTF::MediaTime *)v39);
          if (!(_DWORD)v21)
          {
            v21 = WTF::MediaTime::compare((WTF::MediaTime *)(v41 + v40 - 16), (const WTF::MediaTime *)(v39 + 2));
            if (!(_DWORD)v21 && *(_QWORD *)(v41 + v40) == v39[4])
              break;
          }
          ++v38;
          v40 += 56;
          if (v38 >= HIDWORD(v234))
          {
            v37 = HIDWORD(v232);
            v35 = v213;
            goto LABEL_54;
          }
        }
        v34 = 0;
        v35 = v213;
      }
      else
      {
LABEL_54:
        if (v36 >= v37)
        {
          __break(0xC471u);
          JUMPOUT(0x195C09838);
        }
        v42 = *((_QWORD *)v231 + 7 * v36 + 4);
        if (*(_BYTE *)(v42 + 133) && (v43 = *(_QWORD *)(v42 + 104)) != 0 && (v44 = *(_QWORD *)(v43 + 8)) != 0)
        {
          v34 = *(_DWORD *)(v44 + 104) != 0;
          if (*(_DWORD *)(v44 + 104))
            break;
        }
        else
        {
          v34 = 0;
        }
      }
      ++v36;
    }
    while (v36 < v35);
  }
  if ((_DWORD)v214)
  {
    v45 = 0;
    v46 = 32;
    do
    {
      if (v45 >= HIDWORD(v234))
      {
        __break(0xC471u);
        goto LABEL_368;
      }
      v47 = *(_DWORD **)(v233 + v46);
      if (v47)
        ++v47[6];
      v21 = (*(uint64_t (**)(_DWORD *, const WTF::MediaTime *))(*(_QWORD *)v47 + 216))(v47, a2);
      v50 = *((_BYTE *)v47 + 133)
         && (v48 = *((_QWORD *)v47 + 13)) != 0
         && (v49 = *(_QWORD *)(v48 + 8)) != 0
         && *(_DWORD *)(v49 + 104) != 0;
      if (v47[6] == 1)
        v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 72))(v47);
      else
        --v47[6];
      v34 |= !v50;
      ++v45;
      v46 += 56;
    }
    while (v214 != v45);
  }
  v227 = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v21);
  v51 = v233;
  if (HIDWORD(v234) >= 2)
  {
    v52 = v233 + 56;
    v53 = 56 * HIDWORD(v234) - 56;
    do
    {
      v223 = *(_OWORD *)(*(_QWORD *)(v52 + 32) + 80);
      v221 = *(_OWORD *)(*(_QWORD *)(v51 + 32) + 80);
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v223, (const WTF::MediaTime *)&v221) == 1)
        v51 = v52;
      v52 += 56;
      v53 -= 56;
    }
    while (v53);
  }
  if (v51)
  {
    v54 = *(_QWORD *)(v51 + 32);
    v56 = *(_QWORD *)(v54 + 80);
    v55 = *(_QWORD *)(v54 + 88);
    *(_QWORD *)&v227 = v56;
    DWORD2(v227) = v55;
    BYTE12(v227) = BYTE4(v55);
  }
  v57 = WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::smallestNodeGreaterThanFrom(a2, **((_QWORD **)v211 + 173));
  if (v57)
  {
    v59 = *(_OWORD *)(v57 + 48);
    v223 = *(_OWORD *)(v57 + 32);
    v224 = v59;
    *(_OWORD *)v225 = *(_OWORD *)(v57 + 64);
    *(_QWORD *)&v225[16] = *(_QWORD *)(v57 + 80);
    v226 = 1;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v223, (const WTF::MediaTime *)&v227) == -1)
      v60 = &v223;
    else
      v60 = &v227;
    v61 = *(_QWORD *)((char *)v60 + 5);
    *(_QWORD *)&v227 = *(_QWORD *)v60;
    *(_QWORD *)((char *)&v227 + 5) = v61;
  }
  else
  {
    LOBYTE(v223) = 0;
    v226 = 0;
  }
  v62 = *((_QWORD *)v211 + 229);
  *(_QWORD *)&v221 = "HTMLMediaElement";
  *((_QWORD *)&v221 + 1) = 17;
  *(_QWORD *)&v222 = "updateActiveTextTrackCues";
  *((_QWORD *)&v222 + 1) = v62;
  if (*(_BYTE *)(*((_QWORD *)v211 + 228) + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v221, "nextInterestingTime:", (WTF::MediaTime *)&v227);
  v63 = *((_QWORD *)v211 + 142);
  if (v63)
  {
    v64 = *(unsigned __int8 **)v63;
    if (__ldaxr(*(unsigned __int8 **)v63))
    {
      __clrex();
    }
    else if (!__stxr(1u, v64))
    {
      goto LABEL_101;
    }
    MEMORY[0x19AEA534C](v64);
LABEL_101:
    ++*((_QWORD *)v64 + 1);
    v66 = __ldxr(v64);
    if (v66 == 1)
    {
      if (!__stlxr(0, v64))
        goto LABEL_106;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_106:
    if ((BYTE12(v227) & 1) != 0)
    {
      v67 = *((_QWORD *)v211 + 37);
      if (v67)
        goto LABEL_383;
      v67 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v67 = 1;
      *(_QWORD *)(v67 + 8) = v211;
      v69 = (unsigned int *)*((_QWORD *)v211 + 37);
      *((_QWORD *)v211 + 37) = v67;
      if (!v69)
        goto LABEL_383;
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        atomic_store(1u, v69);
        WTF::fastFree((WTF *)v69, v68);
      }
      v67 = *((_QWORD *)v211 + 37);
      if (v67)
      {
LABEL_383:
        do
          v72 = __ldaxr((unsigned int *)v67);
        while (__stlxr(v72 + 1, (unsigned int *)v67));
      }
      *(_OWORD *)v219 = v221;
      v220 = v222;
      v73 = WTF::fastMalloc((WTF *)0x38);
      *(_QWORD *)v73 = &off_1E33C59D0;
      *(_QWORD *)(v73 + 8) = v211;
      *(_QWORD *)(v73 + 16) = v67;
      v74 = *(_OWORD *)v219;
      *(_OWORD *)(v73 + 40) = v220;
      *(_OWORD *)(v73 + 24) = v74;
      v217 = (WTF *)v73;
      (*(void (**)(_QWORD, WTF **, __int128 *))(**(_QWORD **)(v63 + 72) + 1120))(*(_QWORD *)(v63 + 72), &v217, &v227);
      v75 = v217;
      v217 = 0;
      if (v75)
        (*(void (**)(WTF *))(*(_QWORD *)v75 + 8))(v75);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v63);
  }
  if ((v34 & 1) != 0)
  {
    LOWORD(v76) = *v2;
    if ((*v2 & 0x400) == 0 && (_DWORD)v35)
    {
      for (i = 0; i < v35; ++i)
      {
        if (i >= HIDWORD(v232))
        {
          __break(0xC471u);
          JUMPOUT(0x195C09880);
        }
        v78 = *((_QWORD *)v231 + 7 * i + 4);
        if (*(_BYTE *)(v78 + 134))
        {
          if (*(_BYTE *)(v78 + 133))
          {
            v79 = *(_QWORD *)(v78 + 104);
            if (v79)
            {
              v80 = *(_QWORD *)(v79 + 8);
              if (v80)
              {
                if (*(_DWORD *)(v80 + 104))
                {
                  if (HIDWORD(v234))
                  {
                    v81 = 0;
                    v82 = (_QWORD *)((char *)v231 + 56 * i);
                    v83 = 32;
                    while (1)
                    {
                      v84 = v233;
                      if (!WTF::MediaTime::compare((WTF::MediaTime *)(v233 + v83 - 32), (const WTF::MediaTime *)v82)&& !WTF::MediaTime::compare((WTF::MediaTime *)(v84 + v83 - 16), (const WTF::MediaTime *)(v82 + 2))&& *(_QWORD *)(v84 + v83) == v82[4])
                      {
                        break;
                      }
                      ++v81;
                      v83 += 56;
                      if (v81 >= HIDWORD(v234))
                        goto LABEL_133;
                    }
                  }
                  else
                  {
LABEL_133:
                    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v211 + 1448))(v211);
                  }
                }
              }
            }
          }
        }
        LOWORD(v76) = *v2;
        if ((*v2 & 0x400) != 0)
          break;
      }
    }
    if ((_DWORD)v212 && (v76 & 0x400) == 0)
    {
      v85 = 0;
      v86 = HIDWORD(v230);
      v87 = (char *)v229 + 32;
      do
      {
        if (v86 == v85)
        {
          __break(0xC471u);
          JUMPOUT(0x195C09888);
        }
        if (*(_BYTE *)(*(_QWORD *)v87 + 134))
        {
          (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v211 + 1448))(v211);
          v76 = *v2;
        }
        if ((v76 & 0x400) != 0)
          break;
        ++v85;
        v87 += 56;
      }
      while (v85 < v212);
    }
    v217 = 0;
    v218 = 0;
    v88 = 0;
    LODWORD(v89) = 0;
    if ((_DWORD)v212)
    {
      v90 = HIDWORD(v230);
      v91 = (char *)v229 + 32;
      do
      {
        if (!v90)
        {
          __break(0xC471u);
          JUMPOUT(0x195C09840);
        }
        *(_OWORD *)v219 = *(_OWORD *)(*(_QWORD *)v91 + 64);
        v92 = *(_QWORD *)v91;
        if (*(_QWORD *)v91)
          ++*(_DWORD *)(v92 + 24);
        *(_QWORD *)&v220 = v92;
        if ((_DWORD)v89 == (_DWORD)v218)
        {
          v93 = (_OWORD *)WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v217, v89 + 1, (unint64_t)v219);
          v94 = HIDWORD(v218);
          v88 = (unsigned int **)v217;
          v95 = (_OWORD *)((char *)v217 + 24 * HIDWORD(v218));
          *v95 = *v93;
          v96 = v95 + 1;
          v97 = (uint64_t *)(v93 + 1);
        }
        else
        {
          v98 = &v88[3 * v89];
          *(_OWORD *)v98 = *(_OWORD *)v219;
          v96 = v98 + 2;
          v94 = HIDWORD(v218);
          v97 = (uint64_t *)&v220;
        }
        v99 = *v97;
        *v97 = 0;
        *v96 = v99;
        v89 = (v94 + 1);
        HIDWORD(v218) = v94 + 1;
        v100 = (_DWORD *)v220;
        *(_QWORD *)&v220 = 0;
        if (v100)
        {
          if (v100[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 72))(v100);
          else
            --v100[6];
        }
        *(_OWORD *)v219 = *(_OWORD *)(*(_QWORD *)v91 + 64);
        v216 = *(_OWORD *)(*(_QWORD *)v91 + 80);
        if (WTF::MediaTime::compare((WTF::MediaTime *)v219, (const WTF::MediaTime *)&v216) == -1)
        {
          *(_OWORD *)v219 = *(_OWORD *)(*(_QWORD *)v91 + 80);
          v101 = *(_QWORD *)v91;
          if (*(_QWORD *)v91)
            ++*(_DWORD *)(v101 + 24);
          *(_QWORD *)&v220 = v101;
          if ((_DWORD)v89 == (_DWORD)v218)
          {
            v102 = (_OWORD *)WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v217, v89 + 1, (unint64_t)v219);
            v103 = HIDWORD(v218);
            v88 = (unsigned int **)v217;
            v104 = (_OWORD *)((char *)v217 + 24 * HIDWORD(v218));
            *v104 = *v102;
            v105 = v104 + 1;
            v106 = (uint64_t *)(v102 + 1);
          }
          else
          {
            v107 = &v88[3 * v89];
            *(_OWORD *)v107 = *(_OWORD *)v219;
            v105 = v107 + 2;
            v103 = HIDWORD(v218);
            v106 = (uint64_t *)&v220;
          }
          v108 = *v106;
          *v106 = 0;
          *v105 = v108;
          LODWORD(v89) = v103 + 1;
          HIDWORD(v218) = v103 + 1;
          v109 = (_DWORD *)v220;
          *(_QWORD *)&v220 = 0;
          if (v109)
          {
            if (v109[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v109 + 72))(v109);
            else
              --v109[6];
          }
        }
        --v90;
        v91 += 56;
        --v212;
      }
      while (v212);
    }
    if ((_DWORD)v35)
    {
      for (j = 0; j != v35; ++j)
      {
        v111 = HIDWORD(v232);
        if (j >= HIDWORD(v232))
        {
          __break(0xC471u);
          JUMPOUT(0x195C09848);
        }
        if (HIDWORD(v234))
        {
          v112 = 0;
          v113 = (_QWORD *)((char *)v231 + 56 * j);
          v114 = 32;
          while (1)
          {
            v115 = v233;
            if (!WTF::MediaTime::compare((WTF::MediaTime *)(v233 + v114 - 32), (const WTF::MediaTime *)v113)&& !WTF::MediaTime::compare((WTF::MediaTime *)(v115 + v114 - 16), (const WTF::MediaTime *)(v113 + 2))&& *(_QWORD *)(v115 + v114) == v113[4])
            {
              break;
            }
            ++v112;
            v114 += 56;
            if (v112 >= HIDWORD(v234))
            {
              v111 = HIDWORD(v232);
              v35 = v213;
              goto LABEL_178;
            }
          }
          v35 = v213;
        }
        else
        {
LABEL_178:
          if (j >= v111)
          {
            __break(0xC471u);
            JUMPOUT(0x195C09868);
          }
          v116 = (char *)v231 + 56 * j;
          *(_OWORD *)v219 = *(_OWORD *)(*((_QWORD *)v116 + 4) + 80);
          v117 = *((_QWORD *)v116 + 4);
          if (v117)
            ++*(_DWORD *)(v117 + 24);
          *(_QWORD *)&v220 = v117;
          if ((_DWORD)v89 == (_DWORD)v218)
          {
            v118 = (_OWORD *)WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v217, v89 + 1, (unint64_t)v219);
            v119 = HIDWORD(v218);
            v88 = (unsigned int **)v217;
            v120 = (_OWORD *)((char *)v217 + 24 * HIDWORD(v218));
            *v120 = *v118;
            v121 = v120 + 1;
            v122 = (uint64_t *)(v118 + 1);
          }
          else
          {
            v123 = &v88[3 * v89];
            *(_OWORD *)v123 = *(_OWORD *)v219;
            v121 = v123 + 2;
            v119 = HIDWORD(v218);
            v122 = (uint64_t *)&v220;
          }
          v124 = *v122;
          *v122 = 0;
          *v121 = v124;
          LODWORD(v89) = v119 + 1;
          HIDWORD(v218) = v119 + 1;
          v125 = (_DWORD *)v220;
          *(_QWORD *)&v220 = 0;
          if (v125)
          {
            if (v125[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 72))(v125);
            else
              --v125[6];
          }
        }
      }
    }
    if ((_DWORD)v214)
    {
      for (k = 0; k != v214; ++k)
      {
        v127 = HIDWORD(v234);
        if (k >= HIDWORD(v234))
        {
          __break(0xC471u);
          JUMPOUT(0x195C09850);
        }
        if (HIDWORD(v232))
        {
          v128 = 0;
          v129 = (_QWORD *)(v233 + 56 * k);
          v130 = 32;
          while (1)
          {
            v131 = v231;
            if (!WTF::MediaTime::compare((WTF *)((char *)v231 + v130 - 32), (const WTF::MediaTime *)v129)
              && !WTF::MediaTime::compare((WTF *)((char *)v131 + v130 - 16), (const WTF::MediaTime *)(v129 + 2))&& *(_QWORD *)((char *)v131 + v130) == v129[4])
            {
              break;
            }
            ++v128;
            v130 += 56;
            if (v128 >= HIDWORD(v232))
            {
              v127 = HIDWORD(v234);
              goto LABEL_201;
            }
          }
        }
        else
        {
LABEL_201:
          if (k >= v127)
          {
            __break(0xC471u);
            JUMPOUT(0x195C09870);
          }
          v132 = v233 + 56 * k;
          *(_OWORD *)v219 = *(_OWORD *)(*(_QWORD *)(v132 + 32) + 64);
          v133 = *(_QWORD *)(v132 + 32);
          if (v133)
            ++*(_DWORD *)(v133 + 24);
          *(_QWORD *)&v220 = v133;
          if ((_DWORD)v89 == (_DWORD)v218)
          {
            v134 = (_OWORD *)WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v217, v89 + 1, (unint64_t)v219);
            v135 = HIDWORD(v218);
            v88 = (unsigned int **)v217;
            v136 = (_OWORD *)((char *)v217 + 24 * HIDWORD(v218));
            *v136 = *v134;
            v137 = v136 + 1;
            v138 = (uint64_t *)(v134 + 1);
          }
          else
          {
            v139 = &v88[3 * v89];
            *(_OWORD *)v139 = *(_OWORD *)v219;
            v137 = v139 + 2;
            v135 = HIDWORD(v218);
            v138 = (uint64_t *)&v220;
          }
          v140 = *v138;
          *v138 = 0;
          *v137 = v140;
          LODWORD(v89) = v135 + 1;
          HIDWORD(v218) = v135 + 1;
          v141 = (_DWORD *)v220;
          *(_QWORD *)&v220 = 0;
          if (v141)
          {
            if (v141[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v141 + 72))(v141);
            else
              --v141[6];
          }
        }
      }
    }
    v142 = &v88[3 * v89];
    v219[0] = (WTF *)WebCore::eventTimeCueCompare;
    v143 = 126 - 2 * __clz(v89);
    if ((_DWORD)v89)
      v144 = (uint64_t *)v143;
    else
      v144 = 0;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*,false>((uint64_t)v88, (uint64_t *)&v88[3 * v89], (unsigned int (**)(uint64_t *, uint64_t))v219, v144, 1);
    v145 = 0;
    if ((_DWORD)v89)
    {
      v146 = 0;
      LODWORD(v89) = 0;
      do
      {
        v147 = v88[2];
        v148 = *((_QWORD *)v147 + 13);
        if (v148)
        {
          v149 = *(_QWORD *)(v148 + 8);
          if (v149)
            v150 = v149 - 120;
          else
            v150 = 0;
        }
        else
        {
          v150 = 0;
        }
        v151 = v89;
        if ((_DWORD)v89)
        {
          v152 = 0;
          while (*(_QWORD *)&v145[v152] != v150)
          {
            v152 += 8;
            if (8 * v89 == v152)
              goto LABEL_227;
          }
          goto LABEL_256;
        }
LABEL_227:
        if (v148)
        {
          v153 = *(_QWORD *)(v148 + 8);
          if (v153)
            v154 = v153 - 120;
          else
            v154 = 0;
          if ((_DWORD)v89 != (_DWORD)v146)
          {
            v155 = &v145[8 * v89];
            if (v153)
            {
              ++*(_DWORD *)(v153 - 104);
              v154 = v153 - 120;
            }
            else
            {
              v154 = 0;
            }
            goto LABEL_254;
          }
        }
        else
        {
          if ((_DWORD)v89 != (_DWORD)v146)
          {
            v154 = 0;
            v155 = &v145[8 * v89];
LABEL_254:
            v158 = v146;
            goto LABEL_255;
          }
          v154 = 0;
        }
        v156 = ((unint64_t)v146 >> 2) + v146;
        if (v156 >= 0x10)
          v157 = v156 + 1;
        else
          v157 = 16;
        if (v157 <= (unint64_t)v89 + 1)
          v158 = v89 + 1;
        else
          v158 = v157;
        if (v158 >> 29)
        {
          __break(0xC471u);
LABEL_368:
          JUMPOUT(0x195C09828);
        }
        v159 = (char *)WTF::fastMalloc((WTF *)(8 * v158));
        memcpy(v159, v145, 8 * v151);
        if (v145)
        {
          if (v159 == v145)
            v158 = 0;
          else
            v158 = v158;
          if (v159 == v145)
            v161 = 0;
          else
            v161 = v159;
          WTF::fastFree((WTF *)v145, v160);
          v145 = v161;
          if (!v154)
            goto LABEL_252;
        }
        else
        {
          v145 = v159;
          if (!v154)
            goto LABEL_252;
        }
        ++*(_DWORD *)(v154 + 16);
LABEL_252:
        v155 = &v145[8 * v151];
        LODWORD(v89) = v146;
LABEL_255:
        LODWORD(v89) = v89 + 1;
        *(_QWORD *)v155 = v154;
        v147 = v88[2];
        v146 = v158;
LABEL_256:
        *(_OWORD *)v219 = *((_OWORD *)v147 + 4);
        WTF::MediaTime::toDouble((WTF::MediaTime *)v219);
        v163 = v162;
        *(_OWORD *)v219 = *((_OWORD *)v88[2] + 5);
        WTF::MediaTime::toDouble((WTF::MediaTime *)v219);
        if (v163 >= v164)
        {
          v166 = (uint64_t)v211;
          WebCore::HTMLMediaElement::executeCueEnterOrExitActionForTime((uint64_t)v211, v88[2], 0);
          v165 = 1;
        }
        else
        {
          *(_OWORD *)v219 = *((_OWORD *)v88[2] + 4);
          v165 = WTF::MediaTime::compare((WTF::MediaTime *)v88, (const WTF::MediaTime *)v219) != 0;
          v166 = (uint64_t)v211;
        }
        WebCore::HTMLMediaElement::executeCueEnterOrExitActionForTime(v166, v88[2], v165);
        v88 += 3;
      }
      while (v88 != v142);
    }
    v167 = v89;
    v219[0] = (WTF *)WebCore::trackIndexCompare;
    v168 = 126 - 2 * __clz(v89);
    if ((_DWORD)v89)
      v169 = v168;
    else
      v169 = 0;
    v170 = (WTF *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*,false>((uint64_t)v145, (uint64_t *)&v145[8 * v89], (uint64_t (**)(uint64_t *, uint64_t *))v219, v169, 1);
    v171 = 8 * v89;
    if ((_DWORD)v89)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v173 = (uint64_t)v211 + 824;
      v174 = 8 * v89;
      v175 = v145;
      do
      {
        v176 = *(_QWORD *)(StatusReg + 736);
        if (!v176 || (v177 = *(_QWORD *)(v176 + 96)) == 0)
          v177 = WebCore::threadGlobalDataSlow(v170);
        v178 = *(_QWORD *)(v177 + 40);
        if (!v178)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v177);
          v178 = *(_QWORD *)(v177 + 40);
        }
        v179 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v179);
        *(_DWORD *)(v179 + 16) = 1;
        *(_QWORD *)v179 = off_1E33A4B48;
        *(_QWORD *)(v179 + 8) = 0;
        *(_DWORD *)(v179 + 20) = *(_DWORD *)(v179 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v178 + 544) != 0);
        v181 = *(_DWORD **)(v178 + 544);
        if (v181)
          *v181 += 2;
        *(_QWORD *)(v179 + 24) = v181;
        *(_QWORD *)(v179 + 32) = 0;
        *(_QWORD *)(v179 + 40) = 0;
        *(_QWORD *)(v179 + 48) = 0;
        *(_QWORD *)(v179 + 56) = v180;
        *(_QWORD *)(v179 + 64) = 0;
        v219[0] = (WTF *)v179;
        v182 = WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(*(_QWORD *)v175 + 144), *(_QWORD *)v175 + 120, 9, v173, (uint64_t *)v219);
        v183 = *(_QWORD *)v175;
        if (*(_QWORD *)v175 && !*(_DWORD *)(v183 + 232))
        {
          ++*(_DWORD *)(v183 + 16);
          v184 = *(_QWORD *)(StatusReg + 736);
          if (!v184 || (v185 = *(_QWORD *)(v184 + 96)) == 0)
            v185 = WebCore::threadGlobalDataSlow((WebCore *)v182);
          v186 = *(_QWORD *)(v185 + 40);
          if (!v186)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v185);
            v186 = *(_QWORD *)(v185 + 40);
          }
          v187 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v187);
          *(_DWORD *)(v187 + 16) = 1;
          *(_QWORD *)v187 = off_1E33A4B48;
          *(_QWORD *)(v187 + 8) = 0;
          *(_DWORD *)(v187 + 20) = *(_DWORD *)(v187 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v186 + 544) != 0);
          v189 = *(_DWORD **)(v186 + 544);
          if (v189)
            *v189 += 2;
          *(_QWORD *)(v187 + 24) = v189;
          *(_QWORD *)(v187 + 32) = 0;
          *(_QWORD *)(v187 + 40) = 0;
          *(_QWORD *)(v187 + 48) = 0;
          *(_QWORD *)(v187 + 56) = v188;
          *(_QWORD *)(v187 + 64) = 0;
          *(_QWORD *)&v216 = v187;
          v190 = *(_QWORD *)(v183 + 280);
          if (v190)
            *(_DWORD *)(v190 + 24) += 2;
          WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v190 + 112), v190, 9, v173, (uint64_t *)&v216);
          if (*(_DWORD *)(v190 + 24) == 2)
          {
            v193 = *(_WORD *)(v190 + 30);
            if ((v193 & 0x400) == 0)
            {
              v194 = *(_WORD *)(v190 + 28);
              if ((v194 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v190, v191);
              }
              else
              {
                if ((v194 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v190 + 160) + 16))(*(_QWORD *)(v190 + 160));
                  v193 = *(_WORD *)(v190 + 30);
                }
                *(_WORD *)(v190 + 30) = v193 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v190 + 72))(v190);
              }
            }
          }
          else
          {
            *(_DWORD *)(v190 + 24) -= 2;
          }
          v192 = (_DWORD *)v216;
          *(_QWORD *)&v216 = 0;
          if (v192)
          {
            if (v192[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v192 + 8))(v192);
            else
              --v192[4];
          }
          if (*(_DWORD *)(v183 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v183 + 16))(v183);
          else
            --*(_DWORD *)(v183 + 16);
        }
        v170 = v219[0];
        v219[0] = 0;
        if (v170)
        {
          if (*((_DWORD *)v170 + 4) == 1)
            v170 = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v170 + 8))(v170);
          else
            --*((_DWORD *)v170 + 4);
        }
        v175 += 8;
        v174 -= 8;
      }
      while (v174);
    }
    if ((_DWORD)v214)
    {
      v195 = 0;
      v196 = 32;
      do
      {
        if (v195 >= HIDWORD(v234))
        {
          __break(0xC471u);
          JUMPOUT(0x195C09858);
        }
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v233 + v196) + 104))(*(_QWORD *)(v233 + v196), 1);
        ++v195;
        v196 += 56;
      }
      while (v214 != v195);
    }
    v215 = v167;
    if ((_DWORD)v213)
    {
      for (m = 0; m != v213; ++m)
      {
        v198 = HIDWORD(v232);
        if (m >= HIDWORD(v232))
        {
          __break(0xC471u);
          JUMPOUT(0x195C09860);
        }
        if (HIDWORD(v234))
        {
          v199 = 0;
          v200 = (_QWORD *)((char *)v231 + 56 * m);
          v201 = 32;
          while (1)
          {
            v202 = v233;
            if (!WTF::MediaTime::compare((WTF::MediaTime *)(v233 + v201 - 32), (const WTF::MediaTime *)v200)&& !WTF::MediaTime::compare((WTF::MediaTime *)(v202 + v201 - 16), (const WTF::MediaTime *)(v200 + 2))&& *(_QWORD *)(v202 + v201) == v200[4])
            {
              break;
            }
            ++v199;
            v201 += 56;
            if (v199 >= HIDWORD(v234))
            {
              v198 = HIDWORD(v232);
              goto LABEL_322;
            }
          }
        }
        else
        {
LABEL_322:
          if (m >= v198)
          {
            __break(0xC471u);
            JUMPOUT(0x195C09878);
          }
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v231 + 7 * m + 4) + 104))(*((_QWORD *)v231 + 7 * m + 4), 0);
        }
      }
    }
    WTF::Vector<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(*((_QWORD *)v211 + 173) + 8), (WTF *)&v233);
    if (WebCore::HTMLMediaElement::ensureMediaControls(v211))
    {
      v203 = *(WebCore::MediaControlTextTrackContainerElement **)(*((_QWORD *)v211 + 202) + 24);
      if (v203)
        WebCore::MediaControlTextTrackContainerElement::updateDisplay(v203);
    }
    if (v215)
    {
      v204 = (_DWORD **)v145;
      do
      {
        v205 = *v204;
        *v204 = 0;
        if (v205)
        {
          if (v205[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v205 + 16))(v205);
          else
            --v205[4];
        }
        ++v204;
        v171 -= 8;
      }
      while (v171);
    }
    if (v145)
      WTF::fastFree((WTF *)v145, v58);
    v206 = v217;
    if (HIDWORD(v218))
    {
      v207 = 24 * HIDWORD(v218);
      v208 = (_DWORD **)((char *)v217 + 16);
      do
      {
        v209 = *v208;
        *v208 = 0;
        if (v209)
        {
          if (v209[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v209 + 72))(v209);
          else
            --v209[6];
        }
        v208 += 3;
        v207 -= 24;
      }
      while (v207);
    }
    if (v206)
      WTF::fastFree(v206, v58);
  }
  if (v229)
    WTF::fastFree(v229, v58);
  v210 = v231;
  if (v231)
  {
    v231 = 0;
    LODWORD(v232) = 0;
    WTF::fastFree(v210, v58);
  }
  this = v233;
  if (v233)
  {
    v233 = 0;
    LODWORD(v234) = 0;
    return WTF::fastFree((WTF *)this, v58);
  }
  return this;
}

unsigned __int8 *WebCore::HTMLMediaElement::noneSupported(unsigned __int8 *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WebCore *v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _DWORD *v30;
  void *v31;
  WTF::StringImpl *v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  WebCore::Node *ElementSibling;
  WebCore::Element *v37;
  char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  unsigned __int8 v42;

  if (!*((_QWORD *)this + 120))
  {
    v2 = (uint64_t)this;
    v3 = *((_QWORD *)this + 228);
    v4 = *((_QWORD *)this + 229);
    v38 = "HTMLMediaElement";
    v39 = 17;
    v40 = "noneSupported";
    v41 = v4;
    if (*(_BYTE *)(v3 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v38);
    if ((*(_QWORD *)(v2 + 336) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 304));
    if ((*(_QWORD *)(v2 + 392) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 360));
    if ((*(_QWORD *)(v2 + 616) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 584));
    *(_DWORD *)(v2 + 1056) = 0;
    v5 = *(_QWORD *)(v2 + 1064);
    *(_QWORD *)(v2 + 1064) = 0;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        v33 = *(_WORD *)(v5 + 30);
        if ((v33 & 0x400) == 0)
        {
          v34 = *(_WORD *)(v5 + 28);
          if ((v34 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
          }
          else
          {
            if ((v34 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
              v33 = *(_WORD *)(v5 + 30);
            }
            *(_WORD *)(v5 + 30) = v33 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
          }
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    v6 = *(_QWORD *)(v2 + 1136);
    if (v6)
    {
      v7 = *(char **)(v6 + 272);
      if (v7)
        *(_DWORD *)v7 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = v38;
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = 0x400000001;
    v8[1] = v7;
    v10 = *(WTF **)(v2 + 960);
    *(_QWORD *)(v2 + 960) = v8;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        v32 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v9);
          else
            *(_DWORD *)v32 -= 2;
        }
        WTF::fastFree(v10, v9);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    v11 = (WebCore *)WebCore::HTMLMediaElement::forgetResourceSpecificTracks((uint64_t (**)())v2);
    *(_DWORD *)(v2 + 900) = 3;
    v42 = 1;
    v12 = (_DWORD *)(v2 + 1265);
    v13 = *(unsigned int *)(v2 + 1265) | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32);
    if ((v13 & 0x400000000) == 0)
    {
      v14 = *(_QWORD *)(v2 + 1824);
      v15 = *(_QWORD *)(v2 + 1832);
      v38 = "HTMLMediaElement";
      v39 = 17;
      v40 = "setShowPosterFlag";
      v41 = v15;
      if (*(_BYTE *)(v14 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v38);
        v16 = v42;
        v13 = *v12 | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32);
      }
      else
      {
        v16 = 1;
      }
      v17 = v13 & 0xFFFFFFFBFFFFFFFFLL;
      *v12 = v17;
      *(_WORD *)(v2 + 1269) = (v17 | (v16 << 34)) >> 32;
      v11 = (WebCore *)WebCore::Node::invalidateStyle(v2, 3u, 1);
      if ((*(_BYTE *)(v2 + 71) & 1) != 0)
      {
        v35 = *(_QWORD *)(v2 + 32);
        if (!v35 || (*(_WORD *)(v35 + 28) & 8) == 0 || (*(_BYTE *)(v35 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v2);
          v11 = WebCore::invalidateForSiblingCombinators(ElementSibling, v37);
        }
      }
    }
    v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
      v19 = WebCore::threadGlobalDataSlow(v11);
    v20 = *(_QWORD *)(v19 + 40);
    if (!v20)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v19);
      v20 = *(_QWORD *)(v19 + 40);
    }
    v21 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v21);
    *(_DWORD *)(v21 + 16) = 1;
    *(_QWORD *)v21 = off_1E33A4B48;
    *(_QWORD *)(v21 + 8) = 0;
    *(_DWORD *)(v21 + 20) = *(_DWORD *)(v21 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v20 + 784) != 0);
    v23 = *(_DWORD **)(v20 + 784);
    if (v23)
      *v23 += 2;
    *(_QWORD *)(v21 + 24) = v23;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 48) = 0;
    *(_QWORD *)(v21 + 56) = v22;
    *(_QWORD *)(v21 + 64) = 0;
    v38 = (char *)v21;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v2 + 112), v2, 9, v2 + 824, (uint64_t *)&v38);
    v24 = v38;
    v38 = 0;
    if (v24)
    {
      if (*((_DWORD *)v24 + 4) == 1)
        (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
      else
        --*((_DWORD *)v24 + 4);
    }
    WebCore::DOMException::create(6u, MEMORY[0x1E0CBF738], (uint64_t *)&v38);
    v25 = *(unsigned int *)(v2 + 868);
    if ((_DWORD)v25)
    {
      v26 = *(uint64_t **)(v2 + 856);
      v27 = 8 * v25;
      do
      {
        v28 = *v26++;
        WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::DOMException>>(v28, v38);
        v27 -= 8;
      }
      while (v27);
    }
    v29 = v38;
    v38 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 2) == 1)
        (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
      else
        --*((_DWORD *)v29 + 2);
    }
    v30 = *(_DWORD **)(v2 + 1152);
    *(_QWORD *)(v2 + 1152) = 0;
    if (v30)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 80))(v30);
      (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v30 + 104))(v30, 0);
      if (v30[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
      else
        --v30[2];
    }
    WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)v2, 0);
    return WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)v2, v31);
  }
  return this;
}

unsigned int *WebCore::HTMLMediaElement::selectMediaResource(WebCore::HTMLMediaElement *this)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  WebCore::Node *ElementSibling;
  WebCore::Element *v30;
  uint64_t (**v31)();
  uint64_t v32;
  const char *v33;
  uint64_t v34;

  *((_DWORD *)this + 225) = 3;
  v2 = (unsigned int *)((char *)this + 1265);
  v3 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if ((v3 & 0x400000000) == 0)
  {
    v4 = *((_QWORD *)this + 228);
    v5 = *((_QWORD *)this + 229);
    v31 = (uint64_t (**)())"HTMLMediaElement";
    v32 = 17;
    v33 = "setShowPosterFlag";
    v34 = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31);
      v3 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
    }
    v6 = v3 & 0xFFFFFFFBFFFFFFFFLL;
    *v2 = v6;
    *((_WORD *)v2 + 2) = (v6 | 0x400000000) >> 32;
    WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
    if ((*((_BYTE *)this + 71) & 1) != 0)
    {
      v28 = *((_QWORD *)this + 4);
      if (!v28 || (*(_WORD *)(v28 + 28) & 8) == 0 || (*(_BYTE *)(v28 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v30);
      }
    }
  }
  result = WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)this, 1uLL);
  v8 = (unsigned int *)**((_QWORD **)this + 99);
  if (!v8 || (v9 = atomic_load(v8), v9 == 1))
  {
    v10 = *((_QWORD *)this + 200);
    if (!v10)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v10 = *((_QWORD *)this + 200);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 80) + 40) + 8) + 528);
    if (!v11
      || (v12 = *(_QWORD *)(v11 + 8)) == 0
      || (v13 = *(_QWORD *)(v12 + 24)) == 0
      || (*(_BYTE *)(v10 + 88) & 8) == 0
      || (v14 = *(_QWORD *)(v13 + 8)) == 0
      || *(_BYTE *)(v14 + 544))
    {
      WebCore::MediaElementSession::removeBehaviorRestriction((WTF::MonotonicTime *)v10, 8);
      v15 = *((_QWORD *)this + 229);
      v16 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v16 = off_1E33C5988;
      *(_QWORD *)(v16 + 8) = this;
      *(_QWORD *)(v16 + 16) = "HTMLMediaElement";
      *(_QWORD *)(v16 + 24) = 17;
      *(_QWORD *)(v16 + 32) = "selectMediaResource";
      *(_QWORD *)(v16 + 40) = v15;
      v31 = (uint64_t (**)())v16;
      WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)this, 9, (uint64_t)this + 784, &v31);
      result = (unsigned int *)v31;
      v31 = 0;
      if (!result)
        return result;
      v17 = *(uint64_t (**)(void))(*(_QWORD *)result + 8);
      return (unsigned int *)v17();
    }
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 32) + 248))(*(_QWORD *)(v10 + 32));
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 32) + 256))(*(_QWORD *)(v10 + 32));
    v31 = (uint64_t (**)())"MediaElementSession";
    v32 = 20;
    v33 = "pageAllowsDataLoading";
    v34 = v19;
    if (*(_BYTE *)(v18 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v31, "returning FALSE");
    v20 = *((_QWORD *)this + 228);
    v21 = *((_QWORD *)this + 229);
    v31 = (uint64_t (**)())"HTMLMediaElement";
    v32 = 17;
    v33 = "selectMediaResource";
    v34 = v21;
    if (*(_BYTE *)(v20 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31, "not allowed to load in background, waiting");
    result = WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)this, 0);
    v22 = *v2;
    v23 = v22 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
    if ((v22 & 4) == 0)
    {
      *((_WORD *)v2 + 2) = WORD2(v23);
      *v2 = v23 | 4;
      v24 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      *(_DWORD *)(v24 + 24) += 2;
      result = WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v24 + 1960, (_QWORD *)this + 20, (uint64_t)&v31);
      if (*(_DWORD *)(v24 + 24) != 2)
      {
        *(_DWORD *)(v24 + 24) -= 2;
        return result;
      }
      v26 = *(_WORD *)(v24 + 30);
      if ((v26 & 0x400) == 0)
      {
        v27 = *(_WORD *)(v24 + 28);
        if ((v27 & 0xF000) == 0x9000)
          return WebCore::Document::removedLastRef((WebCore::Document *)v24, v25);
        if ((v27 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160));
          v26 = *(_WORD *)(v24 + 30);
        }
        *(_WORD *)(v24 + 30) = v26 | 0x400;
        v17 = *(uint64_t (**)(void))(*(_QWORD *)v24 + 72);
        return (unsigned int *)v17();
      }
    }
  }
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::mediaPlayerReloadAndResumePlaybackIfNeeded(WebCore::HTMLMediaElement *this))()
{
  char v2;
  unsigned int v3;
  uint64_t (**result)();
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7[2])();
  uint64_t (**v8)();
  __int128 v9;

  v9 = *((_OWORD *)this + 74);
  v2 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
  WebCore::HTMLMediaElement::load(this);
  v3 = *((_DWORD *)this + 270);
  if (v3)
    WebCore::HTMLMediaElement::enterFullscreen(this, v3);
  result = (uint64_t (**)())WTF::MediaTime::operator BOOL();
  if ((_DWORD)result)
  {
    v7[0] = (uint64_t (**)())v9;
    *(uint64_t (***)())((char *)v7 + 5) = *(uint64_t (***)())((char *)&v9 + 5);
    v5 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v5 = off_1E33C5960;
    *(_QWORD *)(v5 + 8) = this;
    *(uint64_t (***)())(v5 + 16) = v7[0];
    *(uint64_t (***)())(v5 + 21) = *(uint64_t (***)())((char *)v7 + 5);
    v8 = (uint64_t (**)())v5;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)this, 9, (uint64_t)this + 784, &v8);
    result = v8;
    v8 = 0;
    if (result)
      result = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*result + 1))(result);
  }
  if ((v2 & 1) == 0)
  {
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v6 = off_1E33C58C0;
    *(_QWORD *)(v6 + 8) = WebCore::HTMLMediaElement::playInternal;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = this;
    v7[0] = (uint64_t (**)())v6;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)this, 9, (uint64_t)this + 784, v7);
    result = v7[0];
    v7[0] = 0;
    if (result)
      return (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*result + 1))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLMediaElement::enterFullscreen(WTF::StringImpl *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WTF::String *v22;
  WTF::Logger *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::LocalDOMWindow *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (**v59)();
  WTF *v60;
  void *v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD v64[4];
  WTF::Logger *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 buf;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  uint64_t v85;

  v63 = a2;
  v2 = (uint64_t)this;
  v85 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v64[0] = "HTMLMediaElement";
  v64[1] = 17;
  v64[2] = "enterFullscreen";
  v64[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v64);
    WTF::String::String((WTF::String *)&v70, ", m_videoFullscreenMode = ");
    WTF::String::number((WTF::String *)*(unsigned int *)(v2 + 1080));
    WTF::String::String((WTF::String *)&v68, ", mode = ");
    WTF::String::number((WTF::String *)v63);
    v65 = v70;
    v75 = v69;
    *(_QWORD *)&buf = v71;
    v73 = v67;
    v74 = v68;
    this = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v65, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, &v72);
    if (!v72)
    {
      __break(0xC471u);
      return this;
    }
    v6 = v67;
    v67 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v68;
    v68 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v69;
    v69 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v70;
    v70 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v71;
    v71 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v5);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = qword_1ECE7C4A0;
    v12 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v65 ? (char *)v65 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v12 = (uint64_t)v65;
      v65 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = WTF::fastFree((WTF *)v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (WebCore::LogMedia)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers((WTF::Logger *)v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v62 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v21 = *v20;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v64);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, ", m_videoFullscreenMode = ");
                v22 = (WTF::String *)*(unsigned int *)(v2 + 1080);
                v79 = 0;
                WTF::String::number(v22);
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, ", mode = ");
                v83 = 0;
                WTF::String::number((WTF::String *)v63);
                v65 = 0;
                v66 = 0;
                v23 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v66) = 5;
                v65 = v23;
                v24 = HIDWORD(v66);
                *((_DWORD *)v23 + 4 * HIDWORD(v66)) = buf;
                v25 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v23 + 2 * v24 + 1) = v25;
                *((_DWORD *)v23 + 4 * (v24 + 1)) = v77;
                v26 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v23 + 2 * (v24 + 1) + 1) = v26;
                *((_DWORD *)v23 + 4 * (v24 + 2)) = v79;
                v27 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v23 + 2 * (v24 + 2) + 1) = v27;
                *((_DWORD *)v23 + 4 * (v24 + 3)) = v81;
                v28 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v23 + 2 * (v24 + 3) + 1) = v28;
                *((_DWORD *)v23 + 4 * (v24 + 4)) = v83;
                v29 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v23 + 2 * (v24 + 4) + 1) = v29;
                HIDWORD(v66) = v24 + 5;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v21 + 16))(v21, &WebCore::LogMedia, 0, &v65);
                v30 = v65;
                if (HIDWORD(v66))
                {
                  v31 = v2;
                  v32 = 16 * HIDWORD(v66);
                  v33 = (WTF::StringImpl **)((char *)v65 + 8);
                  do
                  {
                    v34 = *v33;
                    *v33 = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v13);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                    v33 += 2;
                    v32 -= 16;
                  }
                  while (v32);
                  v30 = v65;
                  v2 = v31;
                }
                if (v30)
                {
                  v65 = 0;
                  LODWORD(v66) = 0;
                  WTF::fastFree(v30, v13);
                }
                v35 = v84;
                v84 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                v36 = v82;
                v82 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                v37 = v80;
                v80 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = v78;
                v78 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v62);
            }
            v40 = __ldxr(v15);
            if (v40 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    this = v72;
    v72 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)this -= 2;
    }
  }
  v41 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  v42 = *(_QWORD *)(v41 + 528);
  if (v42)
  {
    v43 = *(_QWORD *)(v42 + 8);
    if (v43)
    {
      v44 = *(_QWORD *)(v43 + 24);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 8);
        if (v45)
        {
          ++*(_DWORD *)v45;
          if (*(_BYTE *)(v45 + 1095))
            goto LABEL_113;
          v46 = *(WebCore::LocalDOMWindow **)(v41 + 696);
          if (!v46)
            goto LABEL_113;
          v47 = *((_DWORD *)v46 + 6);
          *((_DWORD *)v46 + 6) = v47 + 1;
          if (*(_DWORD *)(v2 + 1080) == v63
            || (v48 = *(unsigned int *)(v2 + 1265),
                v49 = v48 | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32),
                (v49 & 0x100000000) != 0))
          {
LABEL_111:
            if (v47)
              *((_DWORD *)v46 + 6) = v47;
            else
              this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v46 + 72))(v46);
LABEL_113:
            if (*(_DWORD *)v45 == 1)
            {
              WebCore::Page::~Page(v45);
              return (WTF::StringImpl *)WTF::fastFree(v60, v61);
            }
            else
            {
              --*(_DWORD *)v45;
            }
            return this;
          }
          *(_DWORD *)(v2 + 1265) = v48;
          *(_WORD *)(v2 + 1269) = (v49 | 0x200000000) >> 32;
          v50 = *(_QWORD *)(v2 + 1600);
          if (!v50)
          {
            WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v2);
            v50 = *(_QWORD *)(v2 + 1600);
          }
          if ((*(_BYTE *)(v50 + 88) & 4) != 0)
            WebCore::LocalDOMWindow::consumeTransientActivation(v46);
          v51 = v2;
          v52 = *(_QWORD *)(v2 + 1832);
          v53 = WTF::fastMalloc((WTF *)0x38);
          *(_QWORD *)v53 = off_1E33C5CD8;
          *(_QWORD *)(v53 + 8) = v51;
          *(_DWORD *)(v53 + 16) = v63;
          *(_QWORD *)(v53 + 24) = "HTMLMediaElement";
          *(_QWORD *)(v53 + 32) = 17;
          *(_QWORD *)(v53 + 40) = "enterFullscreen";
          *(_QWORD *)(v53 + 48) = v52;
          v54 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v54 = 1;
          v55 = *(_DWORD *)(v51 + 24);
          *(_QWORD *)(v54 + 8) = v51;
          ++*(_QWORD *)(v51 + 128);
          *(_DWORD *)(v51 + 24) = v55 + 4;
          this = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)this = &off_1E33C5820;
          *((_QWORD *)this + 1) = v51;
          *((_QWORD *)this + 2) = v54;
          *((_QWORD *)this + 3) = v53;
          *(_QWORD *)&buf = this;
          v56 = *(_QWORD *)(v51 + 120);
          if (v56)
          {
            v57 = *(_QWORD *)(v56 + 8);
            if (v57)
            {
              v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v57 - 96) + 104))(v57 - 96);
              WebCore::EventLoopTaskGroup::queueTask(v58, 9, (uint64_t *)&buf);
              this = (WTF::StringImpl *)buf;
              *(_QWORD *)&buf = 0;
              if (!this)
                goto LABEL_110;
            }
            else
            {
              *(_QWORD *)&buf = 0;
            }
            v59 = *(uint64_t (***)())this;
          }
          else
          {
            *(_QWORD *)&buf = 0;
            v59 = &off_1E33C5820;
          }
          this = (WTF::StringImpl *)v59[1]();
LABEL_110:
          v47 = *((_DWORD *)v46 + 6) - 1;
          goto LABEL_111;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::playInternal(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MediaElementSession *v9;
  _BOOL8 v10;
  WTF::MediaTime *v11;
  WTF::MediaTime *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::MediaTime *v15;
  __int128 *v16;
  WebCore::MediaController *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WebCore *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::MediaTime *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::MonotonicTime *v42;
  double v43;
  int v44;
  char v45;
  WebCore *v46;
  uint64_t v47;
  unint64_t StatusReg;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  WebCore *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  bmalloc::api *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int v70;
  __int16 v71;
  WebCore::HTMLElement *v72;
  uint64_t v73;
  WebCore::Node *ElementSibling;
  WebCore::Element *v75;
  WebCore *v76[2];
  __int128 v77;
  __int128 v78;
  int v79;

  v1 = this;
  v2 = *(_QWORD *)(this + 1824);
  v3 = *(_QWORD *)(this + 1832);
  v76[0] = (WebCore *)"HTMLMediaElement";
  v76[1] = (WebCore *)17;
  *(_QWORD *)&v77 = "playInternal";
  *((_QWORD *)&v77 + 1) = v3;
  if (*(_BYTE *)(v2 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v76);
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_BYTE *)(v4 + 467) || *(_BYTE *)(v4 + 468))
  {
    v5 = *(_QWORD *)(v1 + 1824);
    v6 = *(_QWORD *)(v1 + 1832);
    v76[0] = (WebCore *)"HTMLMediaElement";
    v76[1] = (WebCore *)17;
    *(_QWORD *)&v77 = "playInternal";
    *((_QWORD *)&v77 + 1) = v6;
    if (*(_BYTE *)(v5 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v76, "returning because context is suspended");
    return this;
  }
  v7 = *(_QWORD *)(v4 + 528);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    v8 = *(_QWORD *)(v1 + 1600);
    if (!v8)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v1);
      v8 = *(_QWORD *)(v1 + 1600);
    }
    WebCore::PlatformMediaSession::setActive(v8, 1);
    v9 = *(WebCore::MediaElementSession **)(v1 + 1600);
    if (!v9)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v1);
      v9 = *(WebCore::MediaElementSession **)(v1 + 1600);
    }
    this = WebCore::MediaElementSession::clientWillBeginPlayback(v9);
    if ((this & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 1136) || !*(_DWORD *)(v1 + 900))
        WebCore::HTMLMediaElement::selectMediaResource((WebCore::HTMLMediaElement *)v1);
      v10 = WebCore::HTMLMediaElement::endedPlayback((WebCore::HTMLMediaElement *)v1);
      if (v10)
      {
        v11 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v10);
        v12 = v11;
        v13 = *(_QWORD *)(v1 + 1824);
        v14 = *(_QWORD *)(v1 + 1832);
        v76[0] = (WebCore *)"HTMLMediaElement";
        v76[1] = (WebCore *)17;
        *(_QWORD *)&v77 = "seekInternal";
        *((_QWORD *)&v77 + 1) = v14;
        if (*(_BYTE *)(v13 + 12))
          v11 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v76, v11);
        v15 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v11);
        v16 = (__int128 *)WTF::MediaTime::zeroTime(v15);
        *(_OWORD *)v76 = *(_OWORD *)v12;
        v77 = *(_OWORD *)v15;
        v78 = *v16;
        WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)v1, (const WebCore::SeekTarget *)v76, 0);
      }
      v17 = *(WebCore::MediaController **)(v1 + 1416);
      if (v17)
      {
        ++*((_DWORD *)v17 + 2);
        WebCore::MediaController::bringElementUpToSpeed(v17, (WebCore::HTMLMediaElement *)v1);
        if (*((_DWORD *)v17 + 2) == 1)
        {
          WebCore::MediaController::~MediaController(v17);
          bmalloc::api::isoDeallocate(v62, v63);
        }
        else
        {
          --*((_DWORD *)v17 + 2);
        }
      }
      if ((*(_DWORD *)(v1 + 1265) & 0x400) != 0)
      {
        v33 = (WTF::MediaTime *)WebCore::HTMLMediaElement::setPaused((unsigned __int8 *)v1, 0);
        LOBYTE(v79) = 0;
        v34 = *(unsigned int *)(v1 + 1265) | ((unint64_t)*(unsigned __int16 *)(v1 + 1269) << 32);
        if ((v34 & 0x400000000) != 0)
        {
          v35 = *(_QWORD *)(v1 + 1824);
          v36 = *(_QWORD *)(v1 + 1832);
          v76[0] = (WebCore *)"HTMLMediaElement";
          v76[1] = (WebCore *)17;
          *(_QWORD *)&v77 = "setShowPosterFlag";
          *((_QWORD *)&v77 + 1) = v36;
          if (*(_BYTE *)(v35 + 12))
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v76);
            v37 = v79;
            v34 = *(unsigned int *)(v1 + 1265) | ((unint64_t)*(unsigned __int16 *)(v1 + 1269) << 32);
          }
          else
          {
            v37 = 0;
          }
          v38 = v34 & 0xFFFFFFFBFFFFFFFFLL;
          *(_DWORD *)(v1 + 1265) = v38;
          *(_WORD *)(v1 + 1269) = (v38 | (v37 << 34)) >> 32;
          v33 = (WTF::MediaTime *)WebCore::Node::invalidateStyle(v1, 3u, 1);
          if ((*(_BYTE *)(v1 + 71) & 1) != 0)
          {
            v73 = *(_QWORD *)(v1 + 32);
            if (!v73 || (*(_WORD *)(v73 + 28) & 8) == 0 || (*(_BYTE *)(v73 + 70) & 4) == 0)
            {
              ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v1);
              v33 = WebCore::invalidateForSiblingCombinators(ElementSibling, v75);
            }
          }
        }
        v39 = (_QWORD *)WTF::MediaTime::invalidTime(v33);
        v40 = *(_QWORD *)((char *)v39 + 5);
        *(_QWORD *)(v1 + 1184) = *v39;
        *(_QWORD *)(v1 + 1189) = v40;
        v41 = *(_QWORD *)(v1 + 1136);
        if (v41 && (*(double (**)(_QWORD))(**(_QWORD **)(v41 + 72) + 848))(*(_QWORD *)(v41 + 72)) != 0.0)
        {
          WTF::MonotonicTime::now(v42);
          *(double *)(v1 + 1208) = v43 + 0.5;
        }
        *(_QWORD *)(v1 + 1040) = WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)v1);
        *(_DWORD *)(v1 + 1048) = v44;
        *(_BYTE *)(v1 + 1052) = v45;
        v46 = (WebCore *)WTF::MediaTime::toDouble((WTF::MediaTime *)(v1 + 1040));
        *(_QWORD *)(v1 + 1024) = v47;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v49 = *(_QWORD *)(StatusReg + 736);
        if (!v49 || (v50 = *(_QWORD *)(v49 + 96)) == 0)
          v50 = WebCore::threadGlobalDataSlow(v46);
        v51 = *(_QWORD *)(v50 + 40);
        if (!v51)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v50);
          v51 = *(_QWORD *)(v50 + 40);
        }
        v52 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v52);
        *(_DWORD *)(v52 + 16) = 1;
        *(_QWORD *)v52 = off_1E33A4B48;
        *(_QWORD *)(v52 + 8) = 0;
        *(_DWORD *)(v52 + 20) = *(_DWORD *)(v52 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v51 + 1464) != 0);
        v54 = *(_DWORD **)(v51 + 1464);
        if (v54)
          *v54 += 2;
        *(_QWORD *)(v52 + 24) = v54;
        *(_QWORD *)(v52 + 32) = 0;
        *(_QWORD *)(v52 + 40) = 0;
        *(_QWORD *)(v52 + 48) = 0;
        *(_QWORD *)(v52 + 56) = v53;
        *(_QWORD *)(v52 + 64) = 0;
        v76[0] = (WebCore *)v52;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v1 + 112), v1, 9, v1 + 824, (uint64_t *)v76);
        v55 = v76[0];
        v76[0] = 0;
        if (v55)
        {
          if (*((_DWORD *)v55 + 4) == 1)
            v55 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v55 + 8))(v55);
          else
            --*((_DWORD *)v55 + 4);
        }
        if (*(int *)(v1 + 904) > 2)
        {
          WebCore::HTMLMediaElement::scheduleNotifyAboutPlaying((WebCore::HTMLMediaElement *)v1);
          goto LABEL_69;
        }
        v56 = *(_QWORD *)(StatusReg + 736);
        if (!v56 || (v57 = *(_QWORD *)(v56 + 96)) == 0)
          v57 = WebCore::threadGlobalDataSlow(v55);
        v58 = *(_QWORD *)(v57 + 40);
        if (!v58)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v57);
          v58 = *(_QWORD *)(v57 + 40);
        }
        v59 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v59);
        *(_DWORD *)(v59 + 16) = 1;
        *(_QWORD *)v59 = off_1E33A4B48;
        *(_QWORD *)(v59 + 8) = 0;
        *(_DWORD *)(v59 + 20) = *(_DWORD *)(v59 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v58 + 2272) != 0);
        v61 = *(_DWORD **)(v58 + 2272);
        if (v61)
          *v61 += 2;
        *(_QWORD *)(v59 + 24) = v61;
        *(_QWORD *)(v59 + 32) = 0;
        *(_QWORD *)(v59 + 40) = 0;
        *(_QWORD *)(v59 + 48) = 0;
        *(_QWORD *)(v59 + 56) = v60;
        *(_QWORD *)(v59 + 64) = 0;
        v76[0] = (WebCore *)v59;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v1 + 112), v1, 9, v1 + 824, (uint64_t *)v76);
        v24 = v76[0];
        v76[0] = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 4) != 1)
          {
            --*((_DWORD *)v24 + 4);
            goto LABEL_69;
          }
          goto LABEL_31;
        }
      }
      else if (*(int *)(v1 + 904) >= 3)
      {
        v18 = *(_DWORD *)(v1 + 868);
        if (v18)
        {
          v19 = *(_QWORD *)(v1 + 856);
          *(_QWORD *)(v1 + 856) = 0;
          v20 = *(_DWORD *)(v1 + 864);
          *(_QWORD *)(v1 + 864) = 0;
          v21 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v21 = &off_1E33C58E8;
          *(_QWORD *)(v21 + 8) = v1;
          *(_QWORD *)(v21 + 16) = v19;
          *(_DWORD *)(v21 + 24) = v20;
          *(_DWORD *)(v21 + 28) = v18;
          v22 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v22 = 1;
          v23 = *(_DWORD *)(v1 + 24);
          *(_QWORD *)(v22 + 8) = v1;
          ++*(_QWORD *)(v1 + 128);
          *(_DWORD *)(v1 + 24) = v23 + 4;
          v24 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v24 = &off_1E33C5820;
          *((_QWORD *)v24 + 1) = v1;
          *((_QWORD *)v24 + 2) = v22;
          *((_QWORD *)v24 + 3) = v21;
          v76[0] = v24;
          v25 = *(_QWORD *)(v1 + 120);
          if (!v25 || (v26 = *(_QWORD *)(v25 + 8)) == 0)
          {
            v76[0] = 0;
            v28 = &off_1E33C5820;
            goto LABEL_68;
          }
          v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 - 96) + 104))(v26 - 96);
          WebCore::EventLoopTaskGroup::queueTask(v27, 9, (uint64_t *)v76);
          v24 = v76[0];
          v76[0] = 0;
          if (!v24)
            goto LABEL_69;
LABEL_31:
          v28 = *(uint64_t (***)())v24;
LABEL_68:
          ((void (*)(WebCore *))v28[1])(v24);
        }
      }
LABEL_69:
      if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(v1 + 40) + 8)))
      {
        if (*(_DWORD *)(v1 + 1292) == 1)
        {
          WebCore::HTMLMediaElement::handleAutoplayEvent((_QWORD *)v1, 1);
          v79 = 0;
          v64 = *(_QWORD *)(v1 + 1824);
          v65 = *(_QWORD *)(v1 + 1832);
          v76[0] = (WebCore *)"HTMLMediaElement";
          v76[1] = (WebCore *)17;
          *(_QWORD *)&v77 = "setAutoplayEventPlaybackState";
          *((_QWORD *)&v77 + 1) = v65;
          if (!*(_BYTE *)(v64 + 12))
          {
            *(_DWORD *)(v1 + 1292) = 0;
LABEL_79:
            v71 = *(_WORD *)(v1 + 1269);
            *(_DWORD *)(v1 + 1265) &= ~0x40u;
            *(_WORD *)(v1 + 1269) = v71;
            WebCore::HTMLMediaElement::updatePlayState((WebCore::HTMLMediaElement *)v1);
            return (uint64_t)WebCore::ImageOverlay::removeOverlaySoonIfNeeded((unsigned int *)v1, v72);
          }
          goto LABEL_76;
        }
        v66 = 2;
      }
      else
      {
        v66 = 3;
      }
      v79 = v66;
      v67 = *(_QWORD *)(v1 + 1824);
      v68 = *(_QWORD *)(v1 + 1832);
      v76[0] = (WebCore *)"HTMLMediaElement";
      v76[1] = (WebCore *)17;
      *(_QWORD *)&v77 = "setAutoplayEventPlaybackState";
      *((_QWORD *)&v77 + 1) = v68;
      if (!*(_BYTE *)(v67 + 12))
      {
        *(_DWORD *)(v1 + 1292) = v66;
        goto LABEL_79;
      }
LABEL_76:
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v76, &v79);
      v70 = v79;
      *(_DWORD *)(v1 + 1292) = v79;
      if (v70 == 1)
      {
        WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks((WebCore::HTMLMediaElement *)v1, v69);
        WebCore::HTMLMediaElement::handleAutoplayEvent((_QWORD *)v1, 0);
      }
      goto LABEL_79;
    }
    v31 = *(_QWORD *)(v1 + 1824);
    v32 = *(_QWORD *)(v1 + 1832);
    v76[0] = (WebCore *)"HTMLMediaElement";
    v76[1] = (WebCore *)17;
    *(_QWORD *)&v77 = "playInternal";
    *((_QWORD *)&v77 + 1) = v32;
    if (*(_BYTE *)(v31 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v76, "returning because of interruption");
  }
  else
  {
    v29 = *(_QWORD *)(v1 + 1824);
    v30 = *(_QWORD *)(v1 + 1832);
    v76[0] = (WebCore *)"HTMLMediaElement";
    v76[1] = (WebCore *)17;
    *(_QWORD *)&v77 = "playInternal";
    *((_QWORD *)&v77 + 1) = v30;
    if (*(_BYTE *)(v29 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v76, "returning because there is no browsing context");
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerReloadAndResumePlaybackIfNeeded(WebCore::HTMLMediaElement *this))()
{
  return WebCore::HTMLMediaElement::mediaPlayerReloadAndResumePlaybackIfNeeded((WebCore::HTMLMediaElement *)((char *)this - 176));
}

WTF::StringImpl *WebCore::HTMLMediaElement::selectNextSourceChild(WTF::URL *this, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WTF::String *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  WebCore::Element **v12;
  int v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  WTF::String *v21;
  int v22;
  WebCore::Element **v23;
  WebCore::Element **v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  int v29;
  WTF::StringImpl *result;
  WebCore::HTMLSourceElement *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  void *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  NSObject *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  BOOL v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  WebCore::Document *v72;
  uint64_t v73;
  _DWORD *v74;
  WTF::Logger *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::Logger *v80;
  char *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int v88;
  __int16 v89;
  __int16 v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v94;
  _DWORD *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  WTF::URL *v101;
  WTF::String *v102;
  WebCore::Element **v103;
  char *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  WTF::StringImpl **v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  WebCore::Element *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  __int128 v136;
  const WebCore::MediaEngineSupportParameters *v137;
  double v138;
  double v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  WebCore::Element *v146;
  WebCore::Element *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  int v152;
  int v153;
  int v154;
  int v155;
  char v156;
  uint64_t v157;
  int v158;
  BOOL v159;
  WebCore::Document *v160;
  __int16 v161;
  __int16 v162;
  uint64_t v163;
  WebCore::Element *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  void *v168;
  WTF::StringImpl *v169;
  unsigned int v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  NSObject *v175;
  uint64_t v176;
  char *v177;
  unsigned __int8 *v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  WTF::Logger *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WTF::Logger *v191;
  uint64_t v192;
  WTF::StringImpl **v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  int v198;
  __int16 v199;
  __int16 v200;
  __int16 v201;
  __int16 v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  _BYTE *v205;
  size_t v206;
  uint64_t v207;
  WTF *v208;
  unsigned __int128 *v209;
  unsigned __int128 *v210;
  unsigned __int128 v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WebCore::Element *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  __int16 v220;
  __int16 v221;
  __int16 v222;
  __int16 v223;
  __int16 v224;
  __int16 v225;
  __int16 v226;
  __int16 v227;
  __int128 *v228;
  WebCore::Document *v229;
  WebCore::Document *v230;
  uint64_t v231;
  WebCore::Element **v232;
  int v233;
  unsigned int i;
  int v235;
  const char *v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  unsigned int v241;
  unsigned int v242;
  WTF::StringImpl *v243;
  WTF::Logger *v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  __int128 buf;
  WTF::StringImpl *v250;
  __int128 v251;
  __int128 v252;
  __int16 v253;
  char v254;
  _QWORD v255[2];
  char v256;
  char v257;
  char v258;
  char v259;
  char v260;
  char v261;
  char v262;
  char v263;
  char v264;
  char v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a2 + 1824) + 12) && (_DWORD)a4)
  {
    v8 = a4;
    v9 = *(_QWORD *)(a2 + 1832);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v250 = (WTF::StringImpl *)"selectNextSourceChild";
    *(_QWORD *)&v251 = v9;
    if (WebCore::LogMedia)
      v10 = byte_1ECE7C490 >= 3u;
    else
      v10 = 0;
    if (v10)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&buf);
    v11 = *(_QWORD *)(a2 + 1072);
    if (v11)
    {
      v231 = a3;
      v12 = (WebCore::Element **)(a2 + 1072);
      v235 = 1;
      goto LABEL_13;
    }
    v213 = *(_QWORD *)(a2 + 1824);
    v214 = *(_QWORD *)(a2 + 1832);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v250 = (WTF::StringImpl *)"selectNextSourceChild";
    *(_QWORD *)&v251 = v214;
    if (*(_BYTE *)(v213 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "end of list, stopping");
LABEL_469:
    *(_QWORD *)this = 0;
    return (WTF::StringImpl *)WTF::URL::invalidate(this);
  }
  v11 = *(_QWORD *)(a2 + 1072);
  if (!v11)
    goto LABEL_469;
  v8 = a4;
  v231 = a3;
  v235 = 0;
  v12 = (WebCore::Element **)(a2 + 1072);
LABEL_13:
  v13 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v13 + 2;
  if (v13)
  {
    *(_DWORD *)(v11 + 24) = v13;
  }
  else
  {
    v222 = *(_WORD *)(v11 + 30);
    if ((v222 & 0x400) == 0)
    {
      v223 = *(_WORD *)(v11 + 28);
      if ((v223 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v11, (void *)a2);
      }
      else
      {
        if ((v223 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
          v222 = *(_WORD *)(v11 + 30);
        }
        *(_WORD *)(v11 + 30) = v222 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      }
    }
  }
  v14 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v17 = v16;
    if (v16 == (_DWORD)v15)
    {
      v18 = ((unint64_t)v15 >> 2) + v15;
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= (unint64_t)v16 + 1)
        v15 = v16 + 1;
      else
        v15 = v19;
      if (v15 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x195C0CAE8);
      }
      v20 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      memcpy(v20, v14, 8 * v17);
      if (v14)
      {
        if (v20 == v14)
        {
          LODWORD(v15) = 0;
          v20 = 0;
        }
        WTF::fastFree((WTF *)v14, (void *)a2);
      }
      v14 = v20;
    }
    *(_DWORD *)(v11 + 24) += 2;
    *(_QWORD *)&v14[8 * v17] = v11;
    v16 = v17 + 1;
    v11 = *(_QWORD *)(v11 + 56);
    if (!v11)
      break;
    while ((*(_WORD *)(v11 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
    {
      v11 = *(_QWORD *)(v11 + 56);
      if (!v11)
        goto LABEL_35;
    }
  }
LABEL_35:
  v21 = v8;
  v22 = v235;
  v233 = v17 + 1;
  if ((_DWORD)v17 != -1)
  {
    v23 = (WebCore::Element **)&v14[8 * v16];
    v228 = (__int128 *)((char *)this + 8);
    a5.n128_u64[0] = 136446210;
    v24 = (WebCore::Element **)v14;
    v232 = v23;
    while (1)
    {
      if (*((_QWORD *)*v24 + 4) != a2)
        goto LABEL_59;
      WebCore::Element::getNonEmptyURLAttribute(*v24, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a3, a4, this, a5);
      v243 = 0;
      if (v22)
      {
        v25 = *(_QWORD *)(a2 + 1824);
        v26 = *(_QWORD *)(a2 + 1832);
        *(_QWORD *)&buf = "HTMLMediaElement";
        *((_QWORD *)&buf + 1) = 17;
        v250 = (WTF::StringImpl *)"selectNextSourceChild";
        *(_QWORD *)&v251 = v26;
        if (*(_BYTE *)(v25 + 12))
        {
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WTF::URL>((WTF::Logger::LogSiteIdentifier *)&buf);
        }
      }
      if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
        goto LABEL_47;
      v31 = *v24;
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
      *(_DWORD *)(v32 + 24) += 2;
      v33 = WebCore::HTMLSourceElement::parsedMediaAttribute(v31, (WebCore::Document *)v32);
      v35 = *((unsigned int *)v33 + 3);
      v240 = 0;
      v241 = 0;
      v242 = v35;
      if ((_DWORD)v35)
      {
        if (v35 >= 0x4924925)
        {
          __break(0xC471u);
          JUMPOUT(0x195C0CAF0);
        }
        v36 = v33;
        v37 = 56 * v35;
        v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(56 * v35));
        v241 = v37 / 0x38;
        v240 = v38;
        WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>((uint64_t)*v36, (uint64_t)*v36 + 56 * *((unsigned int *)v36 + 3), (uint64_t)v38);
        v22 = v235;
      }
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        v89 = *(_WORD *)(v32 + 30);
        v23 = v232;
        if ((v89 & 0x400) == 0)
        {
          v90 = *(_WORD *)(v32 + 28);
          if ((v90 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v32, v34);
          }
          else
          {
            if ((v90 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v32 + 160) + 16))(*(_QWORD *)(v32 + 160));
              v89 = *(_WORD *)(v32 + 30);
            }
            *(_WORD *)(v32 + 30) = v89 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 72))(v32);
          }
        }
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
        v23 = v232;
      }
      if (!v242)
        goto LABEL_210;
      if (v22)
        break;
LABEL_185:
      v92 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
      if (v92)
      {
        if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          goto LABEL_519;
        if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
          || (*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195C0CADCLL);
        }
        v94 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
        v95 = (_DWORD *)(v94 + 24);
        *(_DWORD *)(v94 + 24) += 2;
        v96 = (WTF::StringImpl *)(v92 + 80);
      }
      else
      {
        v96 = 0;
        v94 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
        v95 = (_DWORD *)(v94 + 24);
        *(_DWORD *)(v94 + 24) += 2;
      }
      v97 = WebCore::screenAtomData;
      if (WebCore::screenAtomData)
        *(_DWORD *)WebCore::screenAtomData += 2;
      *(_QWORD *)&buf = v97;
      v230 = (WebCore::Document *)v94;
      v98 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v94);
      v99 = v98;
      if (v98)
      {
        do
          v100 = __ldaxr(v98);
        while (__stlxr(v100 + 1, v98));
      }
      *((_QWORD *)&buf + 1) = v98;
      v250 = v96;
      LOBYTE(v251) = 2;
      if (v242)
      {
        v101 = this;
        v102 = v21;
        v103 = v12;
        v104 = v14;
        v105 = v240;
        v106 = 56 * v242 - 56;
        do
        {
          v107 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&buf, v105);
          if (v107)
            break;
          v105 = (WTF::StringImpl *)((char *)v105 + 56);
          v108 = v106;
          v106 -= 56;
        }
        while (v108);
        v99 = (unsigned int *)*((_QWORD *)&buf + 1);
        v14 = v104;
        v12 = v103;
        v21 = v102;
        this = v101;
        v22 = v235;
      }
      else
      {
        v107 = 1;
      }
      *((_QWORD *)&buf + 1) = 0;
      if (v99)
      {
        do
        {
          v109 = __ldaxr(v99);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v99));
        if (!v110)
        {
          atomic_store(1u, v99);
          v207 = v99[7];
          if ((_DWORD)v207)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v99 + 2), (WTF::StringImpl *)(*((_QWORD *)v99 + 2) + 32 * v207));
          v208 = (WTF *)*((_QWORD *)v99 + 2);
          if (v208)
          {
            *((_QWORD *)v99 + 2) = 0;
            v99[6] = 0;
            WTF::fastFree(v208, v34);
          }
          WTF::fastFree((WTF *)v99, v34);
        }
      }
      v111 = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = 0;
      v23 = v232;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
          WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v34);
        else
          *(_DWORD *)v111 -= 2;
      }
      if (*v95 == 2)
      {
        v160 = v230;
        v161 = *((_WORD *)v230 + 15);
        if ((v161 & 0x400) == 0)
        {
          v162 = *((_WORD *)v230 + 14);
          if ((v162 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef(v230, v34);
          }
          else
          {
            if ((v162 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v230 + 20) + 16))(*((_QWORD *)v230 + 20));
              v160 = v230;
              v161 = *((_WORD *)v230 + 15);
            }
            *((_WORD *)v160 + 15) = v161 | 0x400;
            (*(void (**)(WebCore::Document *))(*(_QWORD *)v160 + 72))(v160);
          }
        }
      }
      else
      {
        *v95 -= 2;
      }
      if (!v107)
      {
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v240, v34);
LABEL_47:
        if ((_DWORD)v21 == 1)
          WebCore::HTMLSourceElement::scheduleErrorEvent((uint64_t)*v24);
        v28 = 0;
        v29 = 0;
        goto LABEL_50;
      }
LABEL_210:
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v240, v34);
      v113 = *((_QWORD *)*v24 + 13);
      if (!v113)
        goto LABEL_223;
      v114 = *(unsigned int *)(v113 + 4);
      if ((v114 & 1) != 0)
      {
        v115 = *(_QWORD *)(v113 + 40);
        v116 = *(unsigned int *)(v113 + 52);
        if (!v116)
        {
LABEL_223:
          v117 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
          goto LABEL_224;
        }
      }
      else
      {
        v115 = v113 + 32;
        v116 = v114 >> 5;
        if (!(v114 >> 5))
          goto LABEL_223;
      }
      v117 = (WTF::StringImpl **)(v115 + 8);
      while (1)
      {
        v118 = (uint64_t)*(v117 - 1);
        if (v118 == WebCore::HTMLNames::typeAttr
          || *(_QWORD *)(v118 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
          && *(_QWORD *)(v118 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
        {
          break;
        }
        v117 += 2;
        if (!--v116)
          goto LABEL_223;
      }
LABEL_224:
      v119 = *v117;
      if (*v117)
        *(_DWORD *)v119 += 2;
      v120 = v243;
      v243 = v119;
      if (!v120)
        goto LABEL_229;
      if (*(_DWORD *)v120 != 2)
      {
        *(_DWORD *)v120 -= 2;
LABEL_229:
        if (v119)
          goto LABEL_236;
        goto LABEL_230;
      }
      WTF::StringImpl::destroy(v120, v112);
      v119 = v243;
      if (v243)
      {
LABEL_236:
        if (*((_DWORD *)v119 + 1))
          goto LABEL_237;
      }
LABEL_230:
      if (WTF::URL::protocolIs())
      {
        WTF::mimeTypeFromDataURL();
        v122 = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = 0;
        v123 = v243;
        v243 = v122;
        if (v123)
        {
          v124 = *(_DWORD *)v123 - 2;
          if (*(_DWORD *)v123 == 2)
          {
            WTF::StringImpl::destroy(v123, v121);
            v123 = (WTF::StringImpl *)buf;
            *(_QWORD *)&buf = 0;
            if (!v123)
              goto LABEL_237;
            v124 = *(_DWORD *)v123 - 2;
            if (*(_DWORD *)v123 == 2)
            {
              WTF::StringImpl::destroy(v123, v169);
              goto LABEL_237;
            }
          }
          *(_DWORD *)v123 = v124;
        }
      }
LABEL_237:
      if (v243 && *((_DWORD *)v243 + 1))
      {
        if (v22)
        {
          v129 = *(_QWORD *)(a2 + 1824);
          v130 = *(_QWORD *)(a2 + 1832);
          *(_QWORD *)&buf = "HTMLMediaElement";
          *((_QWORD *)&buf + 1) = 17;
          v250 = (WTF::StringImpl *)"selectNextSourceChild";
          *(_QWORD *)&v251 = v130;
          if (*(_BYTE *)(v129 + 12))
          {
            if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],WTF::String>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "'type' is ", (uint64_t *)&v243);
          }
        }
        *(_QWORD *)&buf = 0;
        BYTE8(buf) = 0;
        v250 = 0;
        WTF::URL::invalidate((WTF::URL *)&v250);
        v253 = 0;
        v254 = 0;
        v257 = 0;
        v258 = 0;
        v259 = 0;
        v260 = 0;
        v261 = 0;
        v262 = 0;
        v263 = 0;
        v264 = 0;
        v265 = 0;
        v255[0] = 0;
        v255[1] = 0;
        v256 = 0;
        v132 = v243;
        if (v243)
          *(_DWORD *)v243 += 2;
        v133 = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = v132;
        if (v133)
        {
          if (*(_DWORD *)v133 == 2)
            WTF::StringImpl::destroy(v133, v131);
          else
            *(_DWORD *)v133 -= 2;
        }
        BYTE8(buf) = 0;
        v134 = *(WTF::StringImpl **)this;
        if (*(_QWORD *)this)
          *(_DWORD *)v134 += 2;
        v135 = v250;
        v250 = v134;
        if (v135)
        {
          if (*(_DWORD *)v135 == 2)
            WTF::StringImpl::destroy(v135, v131);
          else
            *(_DWORD *)v135 -= 2;
        }
        v136 = v228[1];
        v251 = *v228;
        v252 = v136;
        if (WTF::URL::protocolIs())
        {
          if (WebCore::MediaSource::s_registry)
          {
            v141 = (*(uint64_t (**)(uint64_t, WTF::URL *))(*(_QWORD *)WebCore::MediaSource::s_registry + 40))(WebCore::MediaSource::s_registry, this);
            v142 = v141 - 64;
            if (!v141)
              v142 = 0;
          }
          else
          {
            v142 = 0;
          }
          v159 = v142 != 0;
        }
        else
        {
          v159 = 0;
        }
        LOBYTE(v253) = v159;
        v254 = *(_BYTE *)(a2 + 1688);
        v163 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 680);
        if ((*(_QWORD *)(v163 + 664) & 0x10000) != 0)
        {
          v164 = *v24;
          while (1)
          {
            v165 = *((_QWORD *)v164 + 7);
            if (v165)
              break;
            v164 = (WebCore::Element *)*((_QWORD *)v164 + 4);
            if (!v164)
              goto LABEL_331;
          }
          while (1)
          {
            v166 = v165;
            if ((*(_WORD *)(v165 + 28) & 0x10) != 0
              && *(_QWORD *)(*(_QWORD *)(v165 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
            {
              break;
            }
            while (1)
            {
              v165 = *(_QWORD *)(v166 + 56);
              if (v165)
                break;
              v166 = *(_QWORD *)(v166 + 32);
              if (!v166)
                goto LABEL_331;
            }
          }
        }
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)v255, (unsigned int *)(v163 + 80));
LABEL_331:
        v167 = WebCore::MediaPlayer::supportsType((WebCore::MediaPlayer *)&buf, v137, v138, v139, v140);
        WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&buf, v168);
        if (!v167)
          goto LABEL_47;
      }
      if (!WebCore::HTMLMediaElement::isSafeToLoadURL((_QWORD *)a2, this, (int)v21, 1))
        goto LABEL_47;
      v125 = *v24;
      if (*((_QWORD *)*v24 + 4) == a2)
      {
        if (v231)
        {
          v143 = v243;
          if (v243)
            *(_DWORD *)v243 += 2;
          v144 = *(WTF::StringImpl **)v231;
          *(_QWORD *)v231 = v143;
          if (v144)
          {
            if (*(_DWORD *)v144 == 2)
              WTF::StringImpl::destroy(v144, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v144 -= 2;
          }
          *(_BYTE *)(v231 + 8) = 0;
          v125 = *v24;
        }
        while (1)
        {
          v145 = *((_QWORD *)v125 + 7);
          if (v145)
            break;
          v125 = (WebCore::Element *)*((_QWORD *)v125 + 4);
          if (!v125)
            goto LABEL_283;
        }
        while (1)
        {
          v125 = (WebCore::Element *)v145;
          if ((*(_WORD *)(v145 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v145 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
          {
            break;
          }
          while (1)
          {
            v145 = *((_QWORD *)v125 + 7);
            if (v145)
              break;
            v125 = (WebCore::Element *)*((_QWORD *)v125 + 4);
            if (!v125)
              goto LABEL_283;
          }
        }
        *(_DWORD *)(v145 + 24) += 2;
LABEL_283:
        v146 = *v12;
        *v12 = v125;
        if (v146)
        {
          if (*((_DWORD *)v146 + 6) == 2)
          {
            v199 = *((_WORD *)v146 + 15);
            if ((v199 & 0x400) == 0)
            {
              v200 = *((_WORD *)v146 + 14);
              if ((v200 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef(v146, (void *)a2);
              }
              else
              {
                if ((v200 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v146 + 20) + 16))(*((_QWORD *)v146 + 20));
                  v199 = *((_WORD *)v146 + 15);
                }
                *((_WORD *)v146 + 15) = v199 | 0x400;
                (*(void (**)(WebCore::Element *))(*(_QWORD *)v146 + 72))(v146);
              }
            }
          }
          else
          {
            *((_DWORD *)v146 + 6) -= 2;
          }
        }
        v147 = *v24;
        *v24 = 0;
        v148 = *(_QWORD *)(a2 + 1064);
        *(_QWORD *)(a2 + 1064) = v147;
        if (v148)
        {
          if (*(_DWORD *)(v148 + 24) == 2)
          {
            v201 = *(_WORD *)(v148 + 30);
            if ((v201 & 0x400) == 0)
            {
              v202 = *(_WORD *)(v148 + 28);
              if ((v202 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v148, (void *)a2);
              }
              else
              {
                if ((v202 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v148 + 160) + 16))(*(_QWORD *)(v148 + 160));
                  v201 = *(_WORD *)(v148 + 30);
                }
                *(_WORD *)(v148 + 30) = v201 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v148 + 72))(v148);
              }
            }
          }
          else
          {
            *(_DWORD *)(v148 + 24) -= 2;
          }
        }
        if (!v22
          || (v149 = *(_QWORD *)(a2 + 1824),
              v150 = *(_QWORD *)(a2 + 1832),
              v236 = "HTMLMediaElement",
              v237 = 17,
              v238 = "selectNextSourceChild",
              v239 = v150,
              !*(_BYTE *)(v149 + 12))
          || (WebCore::LogMedia ? (v151 = byte_1ECE7C490 >= 3u) : (v151 = 0), !v151))
        {
LABEL_424:
          v28 = 1;
          v29 = 1;
          goto LABEL_50;
        }
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v236);
        WTF::String::String((WTF::String *)&v247, " = ");
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        if (v248)
          v152 = *((_DWORD *)v248 + 1);
        else
          v152 = 0;
        if (v247)
        {
          v153 = *((_DWORD *)v247 + 1);
          if (v246)
            goto LABEL_300;
LABEL_448:
          v154 = 0;
        }
        else
        {
          v153 = 0;
          if (!v246)
            goto LABEL_448;
LABEL_300:
          v154 = *((_DWORD *)v246 + 1);
        }
        if ((v154 | v153) < 0
          || ((v54 = __OFADD__(v153, v154), v155 = v153 + v154, !v54) ? (v156 = 0) : (v156 = 1),
              v152 < 0 || (v156 & 1) != 0 || (v157 = (v152 + v155), __OFADD__(v152, v155))))
        {
          v240 = 0;
LABEL_517:
          __break(0xC471u);
          JUMPOUT(0x195C0CAFCLL);
        }
        if (!v248 || (*((_BYTE *)v248 + 16) & 4) != 0)
        {
          if (v247)
          {
            v170 = *((_DWORD *)v247 + 4);
            v158 = (v170 >> 2) & 1;
            if (!v246 || (v170 & 4) == 0)
              goto LABEL_342;
          }
          else if (!v246)
          {
            v158 = 1;
            goto LABEL_342;
          }
          v158 = (*((unsigned __int8 *)v246 + 16) >> 2) & 1;
        }
        else
        {
          v158 = 0;
        }
LABEL_342:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v157, v158, v248, (uint64_t)v247, (uint64_t)v246, &v240);
        if (!v240)
          goto LABEL_517;
        v172 = v246;
        v246 = 0;
        if (v172)
        {
          if (*(_DWORD *)v172 == 2)
            WTF::StringImpl::destroy(v172, v171);
          else
            *(_DWORD *)v172 -= 2;
        }
        v173 = v247;
        v247 = 0;
        if (v173)
        {
          if (*(_DWORD *)v173 == 2)
            WTF::StringImpl::destroy(v173, v171);
          else
            *(_DWORD *)v173 -= 2;
        }
        v174 = v248;
        v248 = 0;
        if (v174)
        {
          if (*(_DWORD *)v174 == 2)
            WTF::StringImpl::destroy(v174, v171);
          else
            *(_DWORD *)v174 -= 2;
        }
        v175 = qword_1ECE7C4A0;
        v176 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v176)
        {
          WTF::String::utf8();
          v177 = v244 ? (char *)v244 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v177;
          _os_log_impl(&dword_1940B8000, v175, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v176 = (uint64_t)v244;
          v244 = 0;
          if (v176)
          {
            if (*(_DWORD *)v176 == 1)
              v176 = WTF::fastFree((WTF *)v176, (void *)a2);
            else
              --*(_DWORD *)v176;
          }
        }
        v178 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          while (1)
          {
            v179 = *v178;
            if ((v179 & 1) != 0)
              break;
            v180 = __ldaxr(v178);
            if (v180 == v179)
            {
              if (!__stxr(v179 | 1, v178))
              {
                v181 = WTF::Logger::observers((WTF::Logger *)v176);
                v182 = *(unsigned int *)(v181 + 12);
                if ((_DWORD)v182)
                {
                  v183 = *(uint64_t **)v181;
                  v184 = *(_QWORD *)v181 + 8 * v182;
                  do
                  {
                    v185 = *v183;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v236);
                    LODWORD(v250) = 0;
                    WTF::String::String((WTF::String *)&v251, " = ");
                    DWORD2(v251) = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v244 = 0;
                    v245 = 0;
                    v186 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                    LODWORD(v245) = 3;
                    v244 = v186;
                    v187 = HIDWORD(v245);
                    *((_DWORD *)v186 + 4 * HIDWORD(v245)) = buf;
                    v188 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v186 + 2 * v187 + 1) = v188;
                    *((_DWORD *)v186 + 4 * (v187 + 1)) = (_DWORD)v250;
                    v189 = v251;
                    if ((_QWORD)v251)
                      *(_DWORD *)v251 += 2;
                    *((_QWORD *)v186 + 2 * (v187 + 1) + 1) = v189;
                    *((_DWORD *)v186 + 4 * (v187 + 2)) = DWORD2(v251);
                    v190 = v252;
                    if ((_QWORD)v252)
                      *(_DWORD *)v252 += 2;
                    *((_QWORD *)v186 + 2 * (v187 + 2) + 1) = v190;
                    HIDWORD(v245) = v187 + 3;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v185 + 16))(v185, &WebCore::LogMedia, 3, &v244);
                    v191 = v244;
                    if (HIDWORD(v245))
                    {
                      v192 = 16 * HIDWORD(v245);
                      v193 = (WTF::StringImpl **)((char *)v244 + 8);
                      do
                      {
                        v194 = *v193;
                        *v193 = 0;
                        if (v194)
                        {
                          if (*(_DWORD *)v194 == 2)
                            WTF::StringImpl::destroy(v194, (WTF::StringImpl *)a2);
                          else
                            *(_DWORD *)v194 -= 2;
                        }
                        v193 += 2;
                        v192 -= 16;
                      }
                      while (v192);
                      v191 = v244;
                      v22 = v235;
                    }
                    if (v191)
                    {
                      v244 = 0;
                      LODWORD(v245) = 0;
                      WTF::fastFree(v191, (void *)a2);
                    }
                    v195 = (WTF::StringImpl *)v252;
                    *(_QWORD *)&v252 = 0;
                    if (v195)
                    {
                      if (*(_DWORD *)v195 == 2)
                        WTF::StringImpl::destroy(v195, (WTF::StringImpl *)a2);
                      else
                        *(_DWORD *)v195 -= 2;
                    }
                    v196 = (WTF::StringImpl *)v251;
                    *(_QWORD *)&v251 = 0;
                    if (v196)
                    {
                      if (*(_DWORD *)v196 == 2)
                        WTF::StringImpl::destroy(v196, (WTF::StringImpl *)a2);
                      else
                        *(_DWORD *)v196 -= 2;
                    }
                    v197 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v197)
                    {
                      if (*(_DWORD *)v197 == 2)
                        WTF::StringImpl::destroy(v197, (WTF::StringImpl *)a2);
                      else
                        *(_DWORD *)v197 -= 2;
                    }
                    ++v183;
                  }
                  while (v183 != (uint64_t *)v184);
                }
                v198 = __ldxr(MEMORY[0x1E0CBF890]);
                if (v198 == 1)
                {
                  v23 = v232;
                  if (!__stlxr(0, MEMORY[0x1E0CBF890]))
                    break;
                }
                else
                {
                  __clrex();
                  v23 = v232;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v203 = v240;
        v240 = 0;
        if (v203)
        {
          if (*(_DWORD *)v203 == 2)
            WTF::StringImpl::destroy(v203, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v203 -= 2;
        }
        goto LABEL_424;
      }
      v126 = *(_QWORD *)(a2 + 1824);
      v127 = *(_QWORD *)(a2 + 1832);
      *(_QWORD *)&buf = "HTMLMediaElement";
      *((_QWORD *)&buf + 1) = 17;
      v250 = (WTF::StringImpl *)"selectNextSourceChild";
      *(_QWORD *)&v251 = v127;
      if (*(_BYTE *)(v126 + 12))
      {
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "'beforeload' removed current element");
      }
      v28 = 0;
      v29 = 6;
LABEL_50:
      result = v243;
      v243 = 0;
      if (!result)
        goto LABEL_53;
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
LABEL_53:
        if ((v28 & 1) != 0)
          goto LABEL_57;
        goto LABEL_54;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      if ((v28 & 1) != 0)
        goto LABEL_57;
LABEL_54:
      result = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
LABEL_57:
      if (v29 && v29 != 6)
        goto LABEL_478;
LABEL_59:
      if (++v24 == v23)
        goto LABEL_471;
    }
    v39 = *(_QWORD *)(a2 + 1824);
    v40 = *(_QWORD *)(a2 + 1832);
    v236 = "HTMLMediaElement";
    v237 = 17;
    v238 = "selectNextSourceChild";
    v239 = v40;
    v41 = *((_QWORD *)*v24 + 13);
    if (!v41)
      goto LABEL_84;
    v42 = *(unsigned int *)(v41 + 4);
    if ((v42 & 1) != 0)
    {
      v43 = *(_QWORD *)(v41 + 40);
      v44 = *(unsigned int *)(v41 + 52);
      if (!v44)
      {
LABEL_84:
        v45 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        goto LABEL_85;
      }
    }
    else
    {
      v43 = v41 + 32;
      v44 = v42 >> 5;
      if (!(v42 >> 5))
        goto LABEL_84;
    }
    v45 = (uint64_t *)(v43 + 8);
    while (1)
    {
      v46 = *(v45 - 1);
      if (v46 == WebCore::HTMLNames::mediaAttr
        || *(_QWORD *)(v46 + 24) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 24)
        && *(_QWORD *)(v46 + 32) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 32))
      {
        break;
      }
      v45 += 2;
      if (!--v44)
        goto LABEL_84;
    }
LABEL_85:
    if (!*(_BYTE *)(v39 + 12))
      goto LABEL_185;
    if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
      goto LABEL_185;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v236);
    WTF::String::String((WTF::String *)&v246, "'media' is ");
    v49 = *v45;
    if (*v45)
      *(_DWORD *)v49 += 2;
    v50 = v247;
    if (v247)
    {
      v51 = *((_DWORD *)v247 + 1);
      if (v246)
        goto LABEL_95;
    }
    else
    {
      v51 = 0;
      if (v246)
      {
LABEL_95:
        v52 = *((_DWORD *)v246 + 1);
        if (v49)
        {
LABEL_96:
          v53 = *(_DWORD *)(v49 + 4);
LABEL_97:
          if ((v53 | v52) < 0
            || ((v54 = __OFADD__(v52, v53), v55 = v52 + v53, !v54) ? (v56 = 0) : (v56 = 1),
                v51 < 0 || (v56 & 1) != 0 || (v57 = (v51 + v55), __OFADD__(v51, v55))))
          {
LABEL_518:
            v248 = 0;
LABEL_519:
            __break(0xC471u);
            JUMPOUT(0x195C0CABCLL);
          }
          if (!v247 || (*((_BYTE *)v247 + 16) & 4) != 0)
          {
            if (v246)
            {
              v59 = *((_DWORD *)v246 + 4);
              v58 = (v59 >> 2) & 1;
              if (!v49 || (v59 & 4) == 0)
                goto LABEL_111;
            }
            else if (!v49)
            {
              if ((_DWORD)v57)
              {
                if ((v57 & 0x80000000) != 0)
                  goto LABEL_518;
                WTF::tryFastCompactMalloc((WTF *)(v57 + 20));
                v204 = buf;
                if (!(_QWORD)buf)
                  goto LABEL_518;
                v205 = (_BYTE *)(buf + 20);
                *(_DWORD *)buf = 2;
                *(_DWORD *)(v204 + 4) = v57;
                *(_QWORD *)(v204 + 8) = v204 + 20;
                *(_DWORD *)(v204 + 16) = 4;
                if (v50)
                {
                  v48 = (_BYTE *)*((_QWORD *)v50 + 1);
                  v206 = *((unsigned int *)v50 + 1);
                  if ((*((_BYTE *)v50 + 16) & 4) != 0)
                  {
                    if ((_DWORD)v206)
                    {
                      if ((_DWORD)v206 == 1)
                        *v205 = *v48;
                      else
                        memcpy(v205, v48, v206);
                    }
                  }
                  else
                  {
                    if (v206 < 0x10)
                    {
                      v209 = (unsigned __int128 *)(v204 + 20);
                    }
                    else
                    {
                      v209 = (unsigned __int128 *)&v205[v206 & 0xFFFFFFF0];
                      v210 = (unsigned __int128 *)(v204 + 20);
                      do
                      {
                        v211 = (unsigned __int128)vld2q_s8(v48);
                        v48 += 32;
                        *v210++ = v211;
                      }
                      while (v210 != v209);
                    }
                    while (v209 != (unsigned __int128 *)&v205[v206])
                    {
                      v212 = *v48;
                      v48 += 2;
                      *(_BYTE *)v209 = v212;
                      v209 = (unsigned __int128 *)((char *)v209 + 1);
                    }
                  }
                }
              }
              else
              {
                v204 = MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
              }
              v248 = (WTF::StringImpl *)v204;
              goto LABEL_115;
            }
            v58 = (*(unsigned __int8 *)(v49 + 16) >> 2) & 1;
          }
          else
          {
            v58 = 0;
          }
LABEL_111:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v57, v58, v247, (uint64_t)v246, v49, &v248);
          if (!v248)
            goto LABEL_519;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v49, (WTF::StringImpl *)v48);
            else
              *(_DWORD *)v49 -= 2;
          }
LABEL_115:
          v60 = v246;
          v246 = 0;
          v22 = v235;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v48);
            else
              *(_DWORD *)v60 -= 2;
          }
          v61 = v247;
          v247 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v48);
            else
              *(_DWORD *)v61 -= 2;
          }
          v62 = qword_1ECE7C4A0;
          v63 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v63)
          {
            WTF::String::utf8();
            v65 = v244 ? (char *)v244 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v65;
            _os_log_impl(&dword_1940B8000, v62, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v63 = (uint64_t)v244;
            v244 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 1)
                v63 = WTF::fastFree((WTF *)v63, v64);
              else
                --*(_DWORD *)v63;
            }
          }
          if (WebCore::LogMedia)
            v66 = byte_1ECE7C490 >= 3u;
          else
            v66 = 0;
          v67 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          if (v66)
          {
            while (1)
            {
              v68 = *v67;
              if ((v68 & 1) != 0)
                break;
              v69 = __ldaxr(v67);
              if (v69 == v68)
              {
                if (!__stxr(v68 | 1, v67))
                {
                  v70 = WTF::Logger::observers((WTF::Logger *)v63);
                  v71 = *(unsigned int *)(v70 + 12);
                  if ((_DWORD)v71)
                  {
                    v72 = *(WebCore::Document **)v70;
                    v229 = (WebCore::Document *)(*(_QWORD *)v70 + 8 * v71);
                    do
                    {
                      v73 = *(_QWORD *)v72;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v236);
                      LODWORD(v250) = 0;
                      WTF::String::String((WTF::String *)&v251, "'media' is ");
                      DWORD2(v251) = 0;
                      v74 = (_DWORD *)*v45;
                      if (*v45)
                        *v74 += 2;
                      *(_QWORD *)&v252 = v74;
                      v244 = 0;
                      v245 = 0;
                      v75 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                      LODWORD(v245) = 3;
                      v244 = v75;
                      v76 = HIDWORD(v245);
                      *((_DWORD *)v75 + 4 * HIDWORD(v245)) = buf;
                      v77 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v75 + 2 * v76 + 1) = v77;
                      *((_DWORD *)v75 + 4 * (v76 + 1)) = (_DWORD)v250;
                      v78 = v251;
                      if ((_QWORD)v251)
                        *(_DWORD *)v251 += 2;
                      *((_QWORD *)v75 + 2 * (v76 + 1) + 1) = v78;
                      *((_DWORD *)v75 + 4 * (v76 + 2)) = DWORD2(v251);
                      v79 = v252;
                      if ((_QWORD)v252)
                        *(_DWORD *)v252 += 2;
                      *((_QWORD *)v75 + 2 * (v76 + 2) + 1) = v79;
                      HIDWORD(v245) = v76 + 3;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v73 + 16))(v73, &WebCore::LogMedia, 3, &v244);
                      v80 = v244;
                      if (HIDWORD(v245))
                      {
                        v81 = v14;
                        v82 = 16 * HIDWORD(v245);
                        v83 = (WTF::StringImpl **)((char *)v244 + 8);
                        do
                        {
                          v84 = *v83;
                          *v83 = 0;
                          if (v84)
                          {
                            if (*(_DWORD *)v84 == 2)
                              WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v64);
                            else
                              *(_DWORD *)v84 -= 2;
                          }
                          v83 += 2;
                          v82 -= 16;
                        }
                        while (v82);
                        v80 = v244;
                        v14 = v81;
                        v22 = v235;
                      }
                      if (v80)
                      {
                        v244 = 0;
                        LODWORD(v245) = 0;
                        WTF::fastFree(v80, v64);
                      }
                      v85 = (WTF::StringImpl *)v252;
                      *(_QWORD *)&v252 = 0;
                      if (v85)
                      {
                        if (*(_DWORD *)v85 == 2)
                          WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v64);
                        else
                          *(_DWORD *)v85 -= 2;
                      }
                      v86 = (WTF::StringImpl *)v251;
                      *(_QWORD *)&v251 = 0;
                      if (v86)
                      {
                        if (*(_DWORD *)v86 == 2)
                          WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v64);
                        else
                          *(_DWORD *)v86 -= 2;
                      }
                      v87 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v87)
                      {
                        if (*(_DWORD *)v87 == 2)
                          WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v64);
                        else
                          *(_DWORD *)v87 -= 2;
                      }
                      v72 = (WebCore::Document *)((char *)v72 + 8);
                    }
                    while (v72 != v229);
                  }
                  v88 = __ldxr(MEMORY[0x1E0CBF890]);
                  if (v88 == 1)
                  {
                    if (!__stlxr(0, MEMORY[0x1E0CBF890]))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v91 = v248;
          v248 = 0;
          if (v91)
          {
            if (*(_DWORD *)v91 == 2)
              WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v64);
            else
              *(_DWORD *)v91 -= 2;
          }
          goto LABEL_185;
        }
LABEL_428:
        v53 = 0;
        goto LABEL_97;
      }
    }
    v52 = 0;
    if (v49)
      goto LABEL_96;
    goto LABEL_428;
  }
LABEL_471:
  v215 = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a2 + 1064) = 0;
  if (v215)
  {
    if (*(_DWORD *)(v215 + 24) == 2)
    {
      v224 = *(_WORD *)(v215 + 30);
      if ((v224 & 0x400) == 0)
      {
        v225 = *(_WORD *)(v215 + 28);
        if ((v225 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v215, (void *)a2);
        }
        else
        {
          if ((v225 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v215 + 160) + 16))(*(_QWORD *)(v215 + 160));
            v224 = *(_WORD *)(v215 + 30);
          }
          *(_WORD *)(v215 + 30) = v224 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v215 + 72))(v215);
        }
      }
    }
    else
    {
      *(_DWORD *)(v215 + 24) -= 2;
    }
  }
  v216 = *v12;
  *v12 = 0;
  if (v216)
  {
    if (*((_DWORD *)v216 + 6) == 2)
    {
      v226 = *((_WORD *)v216 + 15);
      if ((v226 & 0x400) == 0)
      {
        v227 = *((_WORD *)v216 + 14);
        if ((v227 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v216, (void *)a2);
        }
        else
        {
          if ((v227 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v216 + 20) + 16))(*((_QWORD *)v216 + 20));
            v226 = *((_WORD *)v216 + 15);
          }
          *((_WORD *)v216 + 15) = v226 | 0x400;
          (*(void (**)(WebCore::Element *))(*(_QWORD *)v216 + 72))(v216);
        }
      }
    }
    else
    {
      *((_DWORD *)v216 + 6) -= 2;
    }
  }
  *(_QWORD *)this = 0;
  result = (WTF::StringImpl *)WTF::URL::invalidate(this);
LABEL_478:
  if (v233)
  {
    v217 = 8 * i;
    v218 = (uint64_t *)v14;
    do
    {
      v219 = *v218;
      *v218 = 0;
      if (v219)
      {
        if (*(_DWORD *)(v219 + 24) == 2)
        {
          v220 = *(_WORD *)(v219 + 30);
          if ((v220 & 0x400) == 0)
          {
            v221 = *(_WORD *)(v219 + 28);
            if ((v221 & 0xF000) == 0x9000)
            {
              result = (WTF::StringImpl *)WebCore::Document::removedLastRef((WebCore::Document *)v219, (void *)a2);
            }
            else
            {
              if ((v221 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v219 + 160) + 16))(*(_QWORD *)(v219 + 160));
                v220 = *(_WORD *)(v219 + 30);
              }
              *(_WORD *)(v219 + 30) = v220 | 0x400;
              result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 72))(v219);
            }
          }
        }
        else
        {
          *(_DWORD *)(v219 + 24) -= 2;
        }
      }
      ++v218;
      v217 -= 8;
    }
    while (v217);
  }
  if (v14)
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v14, (void *)a2);
  return result;
}

unsigned __int8 *WebCore::HTMLMediaElement::waitForSourceChange(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v12;
  WebCore::Node *ElementSibling;
  WebCore::Element *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 v19;

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v15 = "HTMLMediaElement";
  v16 = 17;
  v17 = "waitForSourceChange";
  v18 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  if ((*((_QWORD *)this + 42) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 304));
  if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 360));
  if ((*((_QWORD *)this + 77) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 584));
  *((_DWORD *)this + 264) = 0;
  *((_DWORD *)this + 225) = 3;
  v19 = 1;
  v4 = (_DWORD *)((char *)this + 1265);
  v5 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if ((v5 & 0x400000000) == 0)
  {
    v6 = *((_QWORD *)this + 228);
    v7 = *((_QWORD *)this + 229);
    v15 = "HTMLMediaElement";
    v16 = 17;
    v17 = "setShowPosterFlag";
    v18 = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
      v8 = v19;
      v5 = *v4 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    }
    else
    {
      v8 = 1;
    }
    v9 = v5 & 0xFFFFFFFBFFFFFFFFLL;
    *v4 = v9;
    *(_WORD *)((char *)this + 1269) = (v9 | (v8 << 34)) >> 32;
    WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
    if ((*((_BYTE *)this + 71) & 1) != 0)
    {
      v12 = *((_QWORD *)this + 4);
      if (!v12 || (*(_WORD *)(v12 + 28) & 8) == 0 || (*(_BYTE *)(v12 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v14);
      }
    }
  }
  WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)this, 0);
  return WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)this, v10);
}

WTF::StringImpl *WebCore::HTMLMediaElement::loadResource(WTF::StringImpl **this, const WTF::URL *a2, const WebCore::ContentType *a3, const WTF::String *a4)
{
  WebCore::HTMLMediaElement *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t MediaElementURL;
  _DWORD *v63;
  WebCore::HTMLMediaElement *v64;
  _DWORD *v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *result;
  WTF::StringImpl *v71;
  uint64_t *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 v79;
  WTF::StringImpl *IdentifierInternal;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  char v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  char v94;
  _DWORD *v95;
  int shouldLoadResourceFromApplicationCache;
  void *v97;
  uint64_t v98;
  unsigned int v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  NSObject *v104;
  uint64_t v105;
  void *v106;
  char *v107;
  unsigned __int8 *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  WTF::StringImpl **v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  int v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  int v132;
  int v133;
  int v134;
  int v135;
  char v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  NSObject *v144;
  uint64_t v145;
  void *v146;
  char *v147;
  unsigned __int8 *v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  WTF::StringImpl **v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  int v168;
  WTF::MonotonicTime *v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BOOL8 v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t *v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  WebCore::PlatformMediaSession *v208;
  WTF::StringImpl *v209;
  uint64_t v210;
  uint64_t v211;
  WTF::StringImpl **v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int *v215;
  unsigned int v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int *v224;
  WTF::StringImpl *v225;
  unsigned int *v226;
  unsigned int v227;
  uint64_t v228;
  _DWORD *v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  _DWORD *v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  unsigned int v239;
  unsigned int v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  __int128 v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  unsigned __int8 *v248;
  int v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  double v257;
  double v258;
  float v259;
  int v260;
  WTF::StringImpl *v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  WTF::StringImpl *v265;
  unsigned __int8 **v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  _DWORD *v269;
  unsigned int v270;
  unsigned int v271;
  WTF *v272;
  void *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  _QWORD *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  char v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  uint64_t v291;
  uint64_t v292;
  _DWORD *v293;
  uint64_t v294;
  uint64_t v295;
  WTF::StringImpl *v296;
  uint64_t v297;
  void *v298;
  unsigned int *v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  void *v303;
  char v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  _DWORD *v308;
  WTF::StringImpl *v309;
  void *v310;
  WTF::StringImpl *v311;
  uint64_t v312;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  BOOL v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  BOOL v326;
  int v327;
  _DWORD *v328;
  uint64_t v329;
  uint64_t v330;
  _DWORD *v331;
  __int16 v332;
  __int16 v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  int v338;
  int v339;
  BOOL v340;
  uint64_t v341;
  int v342;
  unsigned int v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  NSObject *v348;
  uint64_t v349;
  void *v350;
  char *v351;
  unsigned __int8 *v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  WTF::StringImpl *v359;
  uint64_t v360;
  uint64_t v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  uint64_t v365;
  WTF::StringImpl **v366;
  WTF::StringImpl *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  int v371;
  WTF::StringImpl *v372;
  WTF::StringImpl *v373;
  WebCore::MediaStreamPrivate *v374;
  void *v375;
  BOOL v376;
  WTF *v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  WTF::String *v382;
  uint64_t v384;
  BOOL v386;
  WTF::StringImpl *v387;
  char v388;
  int v389;
  WTF::StringImpl *v390;
  char v391;
  _DWORD *v392;
  WTF::StringImpl *v393;
  __int128 v394;
  __int128 v395;
  WTF::StringImpl *v396;
  uint64_t v397;
  WTF::StringImpl *v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;
  WTF::StringImpl *v401;
  WTF::StringImpl *v402;
  __int128 v403;
  __int128 v404;
  _BYTE buf[24];
  __int128 v406;
  WTF::StringImpl *v407;
  WTF::StringImpl *v408;
  WTF::StringImpl *v409;
  _DWORD *v410;
  char v411;
  uint64_t v412;
  uint64_t v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  int v417;
  char v418;
  uint64_t v419;
  _DWORD *v420;
  uint64_t v421;
  char v422;
  char v423;
  char v424;
  uint64_t v425;
  __int128 v426;
  const char *v427;
  WTF::StringImpl *v428;
  int v429;
  WTF::StringImpl *v430;
  uint64_t v431;

  v5 = (WebCore::HTMLMediaElement *)this;
  v431 = *MEMORY[0x1E0C80C00];
  v6 = this[228];
  v7 = this[229];
  *(_QWORD *)&v426 = "HTMLMediaElement";
  *((_QWORD *)&v426 + 1) = 17;
  v427 = "loadResource";
  v428 = v7;
  if (!*((_BYTE *)v6 + 12))
    goto LABEL_111;
  if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
    goto LABEL_111;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v426);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ContentType::toJSONString(a3);
  v9 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v9 += 2;
  if (v387)
  {
    v10 = *((_DWORD *)v387 + 1);
    if (v396)
      goto LABEL_11;
  }
  else
  {
    v10 = 0;
    if (v396)
    {
LABEL_11:
      v11 = *((_DWORD *)v396 + 1);
      if (v390)
        goto LABEL_12;
LABEL_193:
      v12 = 0;
      if (v9)
        goto LABEL_13;
LABEL_194:
      v13 = 0;
      goto LABEL_14;
    }
  }
  v11 = 0;
  if (!v390)
    goto LABEL_193;
LABEL_12:
  v12 = *((_DWORD *)v390 + 1);
  if (!v9)
    goto LABEL_194;
LABEL_13:
  v13 = *(_DWORD *)(v9 + 4);
LABEL_14:
  if ((v13 | v12) < 0
    || ((v14 = __OFADD__(v12, v13), v15 = v12 + v13, !v14) ? (v16 = 0) : (v16 = 1),
        v11 < 0
     || (v16 & 1) != 0
     || ((v14 = __OFADD__(v11, v15), v17 = v11 + v15, !v14) ? (v18 = 0) : (v18 = 1),
         v10 < 0 || (v18 & 1) != 0 || (v19 = (v10 + v17), __OFADD__(v10, v17)))))
  {
    v402 = 0;
    goto LABEL_849;
  }
  if (v387 && (*((_BYTE *)v387 + 16) & 4) == 0 || v396 && (*((_BYTE *)v396 + 16) & 4) == 0)
  {
    v20 = 0;
    goto LABEL_31;
  }
  if (v390)
  {
    v53 = *((_DWORD *)v390 + 4);
    v20 = (v53 >> 2) & 1;
    if (!v9 || (v53 & 4) == 0)
    {
LABEL_31:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v19, v20, (uint64_t)v387, v396, (uint64_t)v390, v9, &v402);
      if (v402)
      {
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v21);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_35;
      }
LABEL_849:
      __break(0xC471u);
      JUMPOUT(0x195C0F958);
    }
LABEL_105:
    v20 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    goto LABEL_31;
  }
  if (v9)
    goto LABEL_105;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v19, 1, (uint64_t)v387, v396, 0, 0, &v402);
  if (!v402)
    goto LABEL_849;
LABEL_35:
  v22 = v390;
  v390 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v396;
  v396 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v387;
  v387 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = qword_1ECE7C4A0;
  v26 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v26)
  {
    WTF::String::utf8();
    v28 = v393 ? (char *)v393 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v28;
    _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v26 = (uint64_t)v393;
    v393 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        v26 = WTF::fastFree((WTF *)v26, v27);
      else
        --*(_DWORD *)v26;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v30 = *v29;
      if ((v30 & 1) != 0)
        break;
      v31 = __ldaxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 | 1, v29))
        {
          v32 = WTF::Logger::observers((WTF::Logger *)v26);
          v33 = *(unsigned int *)(v32 + 12);
          if ((_DWORD)v33)
          {
            v34 = *(uint64_t **)v32;
            v35 = *(_QWORD *)v32 + 8 * v33;
            do
            {
              v36 = *v34;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v426);
              *(_DWORD *)&buf[16] = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              DWORD2(v406) = 1;
              WebCore::ContentType::toJSONString(a3);
              LODWORD(v408) = 0;
              v37 = *(WTF::StringImpl **)a4;
              if (*(_QWORD *)a4)
                *(_DWORD *)v37 += 2;
              v409 = v37;
              v393 = 0;
              *(_QWORD *)&v394 = 0;
              v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v394) = 4;
              v393 = v38;
              v39 = DWORD1(v394);
              *((_DWORD *)v38 + 4 * DWORD1(v394)) = *(_DWORD *)buf;
              v40 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v38 + 2 * v39 + 1) = v40;
              *((_DWORD *)v38 + 4 * (v39 + 1)) = *(_DWORD *)&buf[16];
              v41 = v406;
              if ((_QWORD)v406)
                *(_DWORD *)v406 += 2;
              *((_QWORD *)v38 + 2 * (v39 + 1) + 1) = v41;
              *((_DWORD *)v38 + 4 * (v39 + 2)) = DWORD2(v406);
              v42 = v407;
              if (v407)
                *(_DWORD *)v407 += 2;
              *((_QWORD *)v38 + 2 * (v39 + 2) + 1) = v42;
              *((_DWORD *)v38 + 4 * (v39 + 3)) = (_DWORD)v408;
              v43 = v409;
              if (v409)
                *(_DWORD *)v409 += 2;
              *((_QWORD *)v38 + 2 * (v39 + 3) + 1) = v43;
              DWORD1(v394) = v39 + 4;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v36 + 16))(v36, &WebCore::LogMedia, 3, &v393);
              v44 = v393;
              if (DWORD1(v394))
              {
                v45 = 16 * DWORD1(v394);
                v46 = (WTF::StringImpl **)((char *)v393 + 8);
                do
                {
                  v47 = *v46;
                  *v46 = 0;
                  if (v47)
                  {
                    if (*(_DWORD *)v47 == 2)
                      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v47 -= 2;
                  }
                  v46 += 2;
                  v45 -= 16;
                }
                while (v45);
                v44 = v393;
              }
              if (v44)
              {
                v393 = 0;
                LODWORD(v394) = 0;
                WTF::fastFree(v44, v27);
              }
              v48 = v409;
              v409 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v407;
              v407 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = (WTF::StringImpl *)v406;
              *(_QWORD *)&v406 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v51 -= 2;
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v35);
          }
          v52 = __ldxr(v29);
          if (v52 == 1)
          {
            if (!__stlxr(0, v29))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v54 = v402;
  v402 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v54 -= 2;
  }
LABEL_111:
  v55 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 528);
  if (!v55)
    return (WTF::StringImpl *)WebCore::HTMLMediaElement::mediaLoadingFailed(v5, (void *)4);
  v56 = *(_QWORD *)(v55 + 8);
  if (!v56)
    return (WTF::StringImpl *)WebCore::HTMLMediaElement::mediaLoadingFailed(v5, (void *)4);
  v57 = (unsigned int *)(v56 + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 + 1, v57));
  v59 = *(_QWORD *)(v56 + 24);
  if (!v59 || (v60 = *(_QWORD *)(v59 + 8)) == 0)
  {
    result = (WTF::StringImpl *)WebCore::HTMLMediaElement::mediaLoadingFailed(v5, (void *)4);
    goto LABEL_532;
  }
  ++*(_DWORD *)v60;
  if (*((_QWORD *)v5 + 142))
  {
    v61 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v61 += 2;
    v393 = v61;
    v394 = *(_OWORD *)((char *)a2 + 8);
    v395 = *(_OWORD *)((char *)a2 + 24);
    MediaElementURL = WTF::URL::protocolIs();
    if ((_DWORD)MediaElementURL)
    {
      MediaElementURL = WebCore::FrameLoader::willLoadMediaElementURL(*(WebCore::FrameLoader **)(v56 + 280), (WTF::URL *)&v393, v5);
      if ((MediaElementURL & 1) == 0)
      {
        WebCore::HTMLMediaElement::mediaLoadingFailed(v5, (void *)4);
        goto LABEL_527;
      }
    }
    v63 = *(_DWORD **)(*(_QWORD *)(v56 + 280) + 88);
    if (v63)
    {
      v64 = v5;
      ++v63[6];
      v65 = *(_DWORD **)(v60 + 936);
      ++v65[2];
      *(_QWORD *)&v426 = 0;
      WTF::URL::invalidate((WTF::URL *)&v426);
      WebCore::UserContentProvider::processContentRuleListsForLoad((uint64_t)v65, v60, &v393, 64, (uint64_t)v63, (WTF::URL *)&v426, (uint64_t)buf);
      v66 = buf[0];
      WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)buf, v67);
      MediaElementURL = v426;
      *(_QWORD *)&v426 = 0;
      if (MediaElementURL)
      {
        if (*(_DWORD *)MediaElementURL == 2)
          MediaElementURL = WTF::StringImpl::destroy((WTF::StringImpl *)MediaElementURL, v68);
        else
          *(_DWORD *)MediaElementURL -= 2;
      }
      if (v65[2] == 1)
        MediaElementURL = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v65 + 8))(v65);
      else
        --v65[2];
      v5 = v64;
      if (v66)
      {
        WebCore::HTMLMediaElement::mediaLoadingFailed(v64, (void *)4);
        if (v63[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 24))(v63);
        else
          --v63[6];
LABEL_527:
        result = v393;
        v393 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v69);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_530;
      }
      if (v63[6] == 1)
        MediaElementURL = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v63 + 24))(v63);
      else
        --v63[6];
    }
    *((_DWORD *)v5 + 225) = 2;
    v392 = 0;
    v71 = v393;
    if (v393 && *((_DWORD *)v393 + 1))
    {
      v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 280) + 88) + 2872);
      *(_DWORD *)v393 += 2;
      *(_OWORD *)&buf[8] = v394;
      v406 = v395;
      *(_QWORD *)buf = v71;
      v407 = 0;
      WTF::URL::invalidate((WTF::URL *)&v407);
      v412 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v413 = v426;
      v414 = 0u;
      v415 = 0u;
      v416 = 0u;
      v417 = 0x10000;
      v94 = v418 & 0x80 | 4;
      v418 = v94;
      v419 = 0;
      v95 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v95 += 2;
        v94 = v418;
      }
      v420 = v95;
      v421 = 0;
      v422 = 0;
      v423 = 0;
      v424 = v424 & 0xE0 | 5;
      v418 = v94 | 2;
      v425 = 0;
      shouldLoadResourceFromApplicationCache = WebCore::ApplicationCacheHost::shouldLoadResourceFromApplicationCache(v93, (const WebCore::ResourceRequest *)buf, &v392);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v97);
      if (shouldLoadResourceFromApplicationCache)
      {
        if (!v392 || (v98 = *((_QWORD *)v392 + 43)) == 0 || !*(_DWORD *)(v98 + 4))
        {
          WebCore::HTMLMediaElement::mediaLoadingFailed(v5, (void *)4);
          goto LABEL_524;
        }
      }
    }
    if ((*(_QWORD *)(*(_QWORD *)(v60 + 112) + 672) & 0x800000000000) == 0
      || (v72 = *(uint64_t **)(v60 + 256)) == 0)
    {
      v72 = WebCore::emptyDiagnosticLoggingClient((WebCore *)MediaElementURL);
    }
    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v5 + 1264))(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t *, _BYTE *, __int128 *, _QWORD))*v72)(v72, buf, &v426, 0);
    v74 = (WTF::StringImpl *)v426;
    *(_QWORD *)&v426 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v73);
      else
        *(_DWORD *)v74 -= 2;
    }
    v75 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v73);
      else
        *(_DWORD *)v75 -= 2;
    }
    *(_DWORD *)((char *)v5 + 1265) |= 1u;
    v76 = (WTF::StringImpl **)((char *)v5 + 912);
    v77 = v393;
    if (v393)
      *(_DWORD *)v393 += 2;
    v78 = *v76;
    *v76 = v77;
    v381 = (char *)v5 + 912;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v73);
      else
        *(_DWORD *)v78 -= 2;
    }
    v79 = v395;
    *(_OWORD *)((char *)v5 + 920) = v394;
    *(_OWORD *)((char *)v5 + 936) = v79;
    if (WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      goto LABEL_861;
    }
    v382 = (WebCore::HTMLMediaElement *)((char *)v5 + 1265);
    IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    *((_QWORD *)v5 + 119) = IdentifierInternal;
    if (!v392)
      goto LABEL_268;
    WTF::URL::fileURLWithFileSystemPath();
    v82 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    v83 = v393;
    v393 = v82;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::destroy(v83, v81);
        IdentifierInternal = *(WTF::StringImpl **)buf;
      }
      else
      {
        IdentifierInternal = 0;
        *(_DWORD *)v83 -= 2;
      }
    }
    else
    {
      IdentifierInternal = 0;
    }
    v394 = *(_OWORD *)&buf[8];
    *(_DWORD *)&buf[8] &= ~1u;
    v395 = v406;
    *(_QWORD *)buf = 0;
    if (IdentifierInternal)
    {
      if (*(_DWORD *)IdentifierInternal == 2)
        IdentifierInternal = (WTF::StringImpl *)WTF::StringImpl::destroy(IdentifierInternal, v81);
      else
        *(_DWORD *)IdentifierInternal -= 2;
    }
    v84 = *((_QWORD *)v5 + 228);
    v85 = (WTF::StringImpl *)*((_QWORD *)v5 + 229);
    *(_QWORD *)&v426 = "HTMLMediaElement";
    *((_QWORD *)&v426 + 1) = 17;
    v427 = "loadResource";
    v428 = v85;
    if (!*(_BYTE *)(v84 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
    {
LABEL_268:
      v129 = *((_QWORD *)v5 + 228);
      v130 = (WTF::StringImpl *)*((_QWORD *)v5 + 229);
      *(_QWORD *)&v426 = "HTMLMediaElement";
      *((_QWORD *)&v426 + 1) = 17;
      v427 = "loadResource";
      v428 = v130;
      if (!*(_BYTE *)(v129 + 12))
        goto LABEL_357;
      if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
        goto LABEL_357;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v426);
      WTF::String::String((WTF::String *)&v390, "m_currentSrc is ");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (v396)
      {
        v132 = *((_DWORD *)v396 + 1);
        if (v390)
          goto LABEL_276;
      }
      else
      {
        v132 = 0;
        if (v390)
        {
LABEL_276:
          v133 = *((_DWORD *)v390 + 1);
          if (v401)
          {
LABEL_277:
            v134 = *((_DWORD *)v401 + 1);
LABEL_278:
            if ((v134 | v133) < 0
              || ((v14 = __OFADD__(v133, v134), v135 = v133 + v134, !v14) ? (v136 = 0) : (v136 = 1),
                  v132 < 0 || (v136 & 1) != 0 || (v137 = (v132 + v135), __OFADD__(v132, v135))))
            {
              v387 = 0;
              goto LABEL_855;
            }
            if (v396 && (*((_BYTE *)v396 + 16) & 4) == 0)
            {
              v138 = 0;
              goto LABEL_292;
            }
            if (v390)
            {
              v139 = *((_DWORD *)v390 + 4);
              v138 = (v139 >> 2) & 1;
              if (v401 && (v139 & 4) != 0)
                goto LABEL_291;
            }
            else
            {
              if (v401)
              {
LABEL_291:
                v138 = (*((unsigned __int8 *)v401 + 16) >> 2) & 1;
                goto LABEL_292;
              }
              v138 = 1;
            }
LABEL_292:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v137, v138, v396, (uint64_t)v390, (uint64_t)v401, &v387);
            if (v387)
            {
              v141 = v401;
              v401 = 0;
              if (v141)
              {
                if (*(_DWORD *)v141 == 2)
                  WTF::StringImpl::destroy(v141, v140);
                else
                  *(_DWORD *)v141 -= 2;
              }
              v142 = v390;
              v390 = 0;
              if (v142)
              {
                if (*(_DWORD *)v142 == 2)
                  WTF::StringImpl::destroy(v142, v140);
                else
                  *(_DWORD *)v142 -= 2;
              }
              v143 = v396;
              v396 = 0;
              if (v143)
              {
                if (*(_DWORD *)v143 == 2)
                  WTF::StringImpl::destroy(v143, v140);
                else
                  *(_DWORD *)v143 -= 2;
              }
              v144 = qword_1ECE7C4A0;
              v145 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v145)
              {
                WTF::String::utf8();
                v147 = v402 ? (char *)v402 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v147;
                _os_log_impl(&dword_1940B8000, v144, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v145 = (uint64_t)v402;
                v402 = 0;
                if (v145)
                {
                  if (*(_DWORD *)v145 == 1)
                    v145 = WTF::fastFree((WTF *)v145, v146);
                  else
                    --*(_DWORD *)v145;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              {
                v148 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v149 = *v148;
                  if ((v149 & 1) != 0)
                    break;
                  v150 = __ldaxr(v148);
                  if (v150 == v149)
                  {
                    if (!__stxr(v149 | 1, v148))
                    {
                      v151 = WTF::Logger::observers((WTF::Logger *)v145);
                      v152 = *(unsigned int *)(v151 + 12);
                      if ((_DWORD)v152)
                      {
                        v153 = *(uint64_t **)v151;
                        v154 = *(_QWORD *)v151 + 8 * v152;
                        do
                        {
                          v155 = *v153;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v426);
                          *(_DWORD *)&buf[16] = 0;
                          WTF::String::String((WTF::String *)&v406, "m_currentSrc is ");
                          DWORD2(v406) = 0;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v402 = 0;
                          *(_QWORD *)&v403 = 0;
                          v156 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v403) = 3;
                          v402 = v156;
                          v157 = DWORD1(v403);
                          *((_DWORD *)v156 + 4 * DWORD1(v403)) = *(_DWORD *)buf;
                          v158 = *(_QWORD *)&buf[8];
                          if (*(_QWORD *)&buf[8])
                            **(_DWORD **)&buf[8] += 2;
                          *((_QWORD *)v156 + 2 * v157 + 1) = v158;
                          *((_DWORD *)v156 + 4 * (v157 + 1)) = *(_DWORD *)&buf[16];
                          v159 = v406;
                          if ((_QWORD)v406)
                            *(_DWORD *)v406 += 2;
                          *((_QWORD *)v156 + 2 * (v157 + 1) + 1) = v159;
                          *((_DWORD *)v156 + 4 * (v157 + 2)) = DWORD2(v406);
                          v160 = v407;
                          if (v407)
                            *(_DWORD *)v407 += 2;
                          *((_QWORD *)v156 + 2 * (v157 + 2) + 1) = v160;
                          DWORD1(v403) = v157 + 3;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v155 + 16))(v155, &WebCore::LogMedia, 3, &v402);
                          v161 = v402;
                          if (DWORD1(v403))
                          {
                            v162 = 16 * DWORD1(v403);
                            v163 = (WTF::StringImpl **)((char *)v402 + 8);
                            do
                            {
                              v164 = *v163;
                              *v163 = 0;
                              if (v164)
                              {
                                if (*(_DWORD *)v164 == 2)
                                  WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v146);
                                else
                                  *(_DWORD *)v164 -= 2;
                              }
                              v163 += 2;
                              v162 -= 16;
                            }
                            while (v162);
                            v161 = v402;
                          }
                          if (v161)
                          {
                            v402 = 0;
                            LODWORD(v403) = 0;
                            WTF::fastFree(v161, v146);
                          }
                          v165 = v407;
                          v407 = 0;
                          if (v165)
                          {
                            if (*(_DWORD *)v165 == 2)
                              WTF::StringImpl::destroy(v165, (WTF::StringImpl *)v146);
                            else
                              *(_DWORD *)v165 -= 2;
                          }
                          v166 = (WTF::StringImpl *)v406;
                          *(_QWORD *)&v406 = 0;
                          if (v166)
                          {
                            if (*(_DWORD *)v166 == 2)
                              WTF::StringImpl::destroy(v166, (WTF::StringImpl *)v146);
                            else
                              *(_DWORD *)v166 -= 2;
                          }
                          v167 = *(WTF::StringImpl **)&buf[8];
                          *(_QWORD *)&buf[8] = 0;
                          if (v167)
                          {
                            if (*(_DWORD *)v167 == 2)
                              WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v146);
                            else
                              *(_DWORD *)v167 -= 2;
                          }
                          ++v153;
                        }
                        while (v153 != (uint64_t *)v154);
                      }
                      v168 = __ldxr(v148);
                      if (v168 == 1)
                      {
                        if (!__stlxr(0, v148))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              IdentifierInternal = v387;
              v387 = 0;
              if (IdentifierInternal)
              {
                if (*(_DWORD *)IdentifierInternal == 2)
                  IdentifierInternal = (WTF::StringImpl *)WTF::StringImpl::destroy(IdentifierInternal, (WTF::StringImpl *)v146);
                else
                  *(_DWORD *)IdentifierInternal -= 2;
              }
LABEL_357:
              if ((*((_QWORD *)v5 + 42) & 0xFFFFFFFFFFFFLL) == 0
                || *(double *)((*((_QWORD *)v5 + 42) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              {
                v169 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(IdentifierInternal);
                *((_QWORD *)v5 + 127) = v170;
                *((_QWORD *)v5 + 41) = 0x3FD6666666666666;
                WTF::MonotonicTime::now(v169);
                WebCore::TimerBase::setNextFireTime((uint64_t)v5 + 304, v171 + 0.35);
              }
              v172 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 528);
              v177 = v172
                  && (v173 = *(_QWORD *)(v172 + 8)) != 0
                  && (v174 = *(_QWORD *)(v173 + 24)) != 0
                  && (v175 = *(_QWORD *)(v174 + 8)) != 0
                  && (v176 = *(_QWORD *)(v175 + 1008), v176 < 0)
                  && v176 != -1;
              v178 = (uint64_t)v5;
              v179 = *((_QWORD *)v5 + 142);
              if (!v179)
              {
LABEL_375:
                *(_BYTE *)(v179 + 229) = v177;
                v183 = *(_QWORD *)(v179 + 72);
                if (v183)
                  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v183 + 888))(v183, v177);
                v184 = v178;
                v185 = *(_QWORD *)(v178 + 104);
                if (!v185)
                  goto LABEL_389;
                v186 = *(_DWORD *)(v185 + 4);
                if ((v186 & 1) != 0)
                {
                  v187 = *(uint64_t **)(v185 + 40);
                  LODWORD(v188) = *(_DWORD *)(v185 + 52);
                  if (!(_DWORD)v188)
                    goto LABEL_389;
                }
                else
                {
                  v187 = (uint64_t *)(v185 + 32);
                  LODWORD(v188) = v186 >> 5;
                  if (!(_DWORD)v188)
                  {
LABEL_389:
                    if ((*(_DWORD *)v382 & 0x200000) == 0)
                    {
                      v190 = *(_QWORD *)(v178 + 1600);
                      if (!v190)
                      {
                        WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v178);
                        v190 = *(_QWORD *)(v178 + 1600);
                      }
                      v191 = *(_QWORD *)(v190 + 80);
                      v192 = *(unsigned __int8 *)(v191 + 1144);
                      v193 = *(_QWORD *)(*(_QWORD *)(v191 + 40) + 8);
                      v194 = *(_QWORD *)(v193 + 528);
                      if (!v194)
                        goto LABEL_397;
                      v195 = *(_QWORD *)(v194 + 8);
                      if (!v195)
                        goto LABEL_397;
                      v196 = *(_QWORD *)(v195 + 24);
                      if (v196)
                        v196 = *(_QWORD *)(v196 + 8);
                      if ((*(_WORD *)(v193 + 3358) & 0x10) == 0
                        || (v204 = *(_QWORD *)(v195 + 120)) != 0 && *(_QWORD *)(v204 + 8)
                        || !v196
                        || !*(_BYTE *)(v196 + 1088))
                      {
LABEL_397:
                        if (((v192 > 1) & (*(unsigned __int8 *)(v190 + 89) >> 2)) != 0)
                          LOBYTE(v192) = 1;
                      }
                      *(_BYTE *)(v179 + 208) = v192;
                      (*(void (**)(_QWORD))(**(_QWORD **)(v179 + 72) + 704))(*(_QWORD *)(v179 + 72));
                    }
                    goto LABEL_400;
                  }
                }
                v188 = v188;
                while (1)
                {
                  v189 = *v187;
                  if (*v187 == WebCore::HTMLNames::autoplayAttr
                    || *(_QWORD *)(v189 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
                    && *(_QWORD *)(v189 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
                  {
                    break;
                  }
                  v187 += 2;
                  if (!--v188)
                    goto LABEL_389;
                }
LABEL_400:
                *(_BYTE *)(v179 + 228) = *(_BYTE *)(v178 + 896);
                (*(void (**)(_QWORD))(**(_QWORD **)(v179 + 72) + 464))(*(_QWORD *)(v179 + 72));
                v197 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v178 + 40) + 8) + 680) + 520);
                if (*(unsigned __int8 *)(v179 + 234) != v197)
                {
                  *(_BYTE *)(v179 + 234) = v197;
                  (*(void (**)(_QWORD))(**(_QWORD **)(v179 + 72) + 472))(*(_QWORD *)(v179 + 72));
                }
                v198 = *(unsigned int *)v382 | ((unint64_t)*((unsigned __int16 *)v382 + 2) << 32);
                if ((*(_DWORD *)v382 & 0x100) != 0)
                {
LABEL_424:
                  WebCore::HTMLMediaElement::updateVolume(v178);
                  v209 = *(WTF::StringImpl **)a3;
                  if (*(_QWORD *)a3)
                    *(_DWORD *)v209 += 2;
                  v390 = v209;
                  v391 = *((_BYTE *)a3 + 8);
                  if (!*(_QWORD *)(v178 + 1448) || *(_BYTE *)(v178 + 1688))
                  {
LABEL_477:
                    v246 = v393;
                    if (v393)
                      *(_DWORD *)v393 += 2;
                    *(_QWORD *)buf = v246;
                    *(_OWORD *)&buf[8] = v394;
                    v406 = v395;
                    v247 = *(WTF::StringImpl **)(v184 + 1136);
                    if (!v247)
                    {
LABEL_489:
                      v407 = v247;
                      v251 = *(WTF::StringImpl **)a4;
                      if (*(_QWORD *)a4)
                        *(_DWORD *)v251 += 2;
                      v408 = v251;
                      v252 = *(_QWORD *)(v184 + 296);
                      if (v252)
                        goto LABEL_867;
                      v252 = WTF::fastCompactMalloc((WTF *)0x10);
                      *(_DWORD *)v252 = 1;
                      *(_QWORD *)(v252 + 8) = v184;
                      v253 = *(unsigned int **)(v184 + 296);
                      *(_QWORD *)(v184 + 296) = v252;
                      if (!v253)
                        goto LABEL_867;
                      do
                      {
                        v254 = __ldaxr(v253);
                        v255 = v254 - 1;
                      }
                      while (__stlxr(v255, v253));
                      if (!v255)
                      {
                        atomic_store(1u, v253);
                        WTF::fastFree((WTF *)v253, v69);
                      }
                      v252 = *(_QWORD *)(v184 + 296);
                      if (v252)
                      {
LABEL_867:
                        do
                          v256 = __ldaxr((unsigned int *)v252);
                        while (__stlxr(v256 + 1, (unsigned int *)v252));
                      }
                      v409 = (WTF::StringImpl *)v252;
                      v410 = (_DWORD *)v184;
                      if (*(_QWORD *)(v184 + 1152)
                        || WTF::URL::protocolIs()
                        && WebCore::MediaSource::s_registry
                        && (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)WebCore::MediaSource::s_registry
                                                                      + 40))(WebCore::MediaSource::s_registry, v381)|| *(_QWORD *)(v184 + 1632)|| *(_BYTE *)(v184 + 1688)|| !v393|| !*((_DWORD *)v393 + 1))
                      {
LABEL_505:
                        v260 = 0;
                        v261 = v390;
                        v390 = 0;
                        v387 = v261;
                        v388 = v391;
                        v389 = 0;
                        if (!v409)
                        {
LABEL_506:
                          ((void (*)(__int128 *, WTF::StringImpl **))off_1E33C5118[v260])(&v426, &v387);
LABEL_507:
                          v262 = (unsigned int *)v409;
                          v409 = 0;
                          if (v262)
                          {
                            do
                            {
                              v263 = __ldaxr(v262);
                              v264 = v263 - 1;
                            }
                            while (__stlxr(v264, v262));
                            if (!v264)
                            {
                              atomic_store(1u, v262);
                              WTF::fastFree((WTF *)v262, v69);
                            }
                          }
                          v265 = v408;
                          v408 = 0;
                          if (v265)
                          {
                            if (*(_DWORD *)v265 == 2)
                              WTF::StringImpl::destroy(v265, v69);
                            else
                              *(_DWORD *)v265 -= 2;
                          }
                          v266 = (unsigned __int8 **)v407;
                          v407 = 0;
                          if (v266)
                            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v266);
                          v267 = *(WTF::StringImpl **)buf;
                          *(_QWORD *)buf = 0;
                          if (v267)
                          {
                            if (*(_DWORD *)v267 == 2)
                              WTF::StringImpl::destroy(v267, v69);
                            else
                              *(_DWORD *)v267 -= 2;
                          }
                          v268 = v390;
                          v390 = 0;
                          if (v268)
                          {
                            if (*(_DWORD *)v268 == 2)
                            {
                              WTF::StringImpl::destroy(v268, v69);
                              if (!v179)
                              {
LABEL_524:
                                v269 = v392;
                                v392 = 0;
                                if (v269)
                                {
                                  if (v269[2] == 1)
                                    (*(void (**)(_DWORD *))(*(_QWORD *)v269 + 8))(v269);
                                  else
                                    --v269[2];
                                }
                                goto LABEL_527;
                              }
LABEL_523:
                              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v179);
                              goto LABEL_524;
                            }
                            *(_DWORD *)v268 -= 2;
                          }
                          if (!v179)
                            goto LABEL_524;
                          goto LABEL_523;
                        }
                        v292 = *((_QWORD *)v409 + 1);
                        if (!v292)
                        {
LABEL_733:
                          v260 = v389;
                          if (v389 == -1)
                            goto LABEL_507;
                          goto LABEL_506;
                        }
                        v293 = v410;
                        *(_DWORD *)(v292 + 24) += 2;
                        v294 = *((_QWORD *)v293 + 144);
                        if (!v294)
                        {
                          if (!WTF::URL::protocolIs()
                            || *((_BYTE *)v293 + 1688)
                            || !WebCore::MediaSource::s_registry
                            || (v329 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)WebCore::MediaSource::s_registry
                                                                                   + 40))(WebCore::MediaSource::s_registry, buf)) == 0)
                          {
LABEL_659:
                            v294 = *((_QWORD *)v293 + 144);
                            if (v294)
                              goto LABEL_660;
                            v314 = *((_QWORD *)v293 + 204);
                            if (!v314 || *((_BYTE *)v293 + 1688))
                            {
                              if (!v389)
                              {
                                if (WebCore::MediaPlayer::load((unsigned __int8 **)v407, (const WTF::URL *)buf, (unsigned __int8 **)&v387, (const WTF::String *)&v408, *((_BYTE *)v293 + 1688)))
                                {
LABEL_730:
                                  (*(void (**)(_DWORD *))(*((_QWORD *)v293 + 22) + 144))(v293 + 44);
LABEL_731:
                                  if (*(_DWORD *)(v292 + 24) == 2)
                                  {
                                    v332 = *(_WORD *)(v292 + 30);
                                    if ((v332 & 0x400) == 0)
                                    {
                                      v333 = *(_WORD *)(v292 + 28);
                                      if ((v333 & 0xF000) == 0x9000)
                                      {
                                        WebCore::Document::removedLastRef((WebCore::Document *)v292, v69);
                                      }
                                      else
                                      {
                                        if ((v333 & 0x20) != 0)
                                        {
                                          (*(void (**)(_QWORD))(**(_QWORD **)(v292 + 160) + 16))(*(_QWORD *)(v292 + 160));
                                          v332 = *(_WORD *)(v292 + 30);
                                        }
                                        *(_WORD *)(v292 + 30) = v332 | 0x400;
                                        (*(void (**)(uint64_t))(*(_QWORD *)v292 + 72))(v292);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v292 + 24) -= 2;
                                  }
                                  goto LABEL_733;
                                }
LABEL_691:
                                WebCore::HTMLMediaElement::mediaLoadingFailed((WebCore::HTMLMediaElement *)v293, (void *)4);
                                goto LABEL_731;
                              }
LABEL_858:
                              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_859:
                              v401 = 0;
                              goto LABEL_860;
                            }
                            v334 = *((_QWORD *)v293 + 228);
                            v335 = *((_QWORD *)v293 + 229);
                            v402 = (WTF::StringImpl *)"HTMLMediaElement";
                            *(_QWORD *)&v403 = 17;
                            *((_QWORD *)&v403 + 1) = "operator()";
                            *(_QWORD *)&v404 = v335;
                            if (!*(_BYTE *)(v334 + 12))
                            {
LABEL_832:
                              v373 = v407;
                              v374 = *(WebCore::MediaStreamPrivate **)(v314 + 96);
                              ++*((_DWORD *)v374 + 4);
                              v376 = WebCore::MediaPlayer::load(v373, v374);
                              if (*((_DWORD *)v374 + 4) == 1)
                              {
                                WebCore::MediaStreamPrivate::~MediaStreamPrivate(v374, v375);
                                WTF::fastFree(v377, v378);
                              }
                              else
                              {
                                --*((_DWORD *)v374 + 4);
                              }
                              if (v376)
                                goto LABEL_730;
                              goto LABEL_691;
                            }
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v402);
                            WTF::String::String((WTF::String *)&v399, "loading media stream blob ");
                            WTF::LogArgument<void const*>::toString();
                            if (v400)
                            {
                              v336 = *((_DWORD *)v400 + 1);
                              if (v399)
                                goto LABEL_749;
                            }
                            else
                            {
                              v336 = 0;
                              if (v399)
                              {
LABEL_749:
                                v337 = *((_DWORD *)v399 + 1);
                                if (v398)
                                {
LABEL_750:
                                  v338 = *((_DWORD *)v398 + 1);
LABEL_751:
                                  if ((v338 | v337) < 0)
                                    goto LABEL_859;
                                  v14 = __OFADD__(v337, v338);
                                  v339 = v337 + v338;
                                  v340 = v14;
                                  if (v336 < 0)
                                    goto LABEL_859;
                                  if (v340)
                                    goto LABEL_859;
                                  v341 = (v336 + v339);
                                  if (__OFADD__(v336, v339))
                                    goto LABEL_859;
                                  if (!v400 || (*((_BYTE *)v400 + 16) & 4) != 0)
                                  {
                                    if (v399)
                                    {
                                      v343 = *((_DWORD *)v399 + 4);
                                      v342 = (v343 >> 2) & 1;
                                      if (!v398 || (v343 & 4) == 0)
                                        goto LABEL_766;
                                    }
                                    else if (!v398)
                                    {
                                      v342 = 1;
                                      goto LABEL_766;
                                    }
                                    v342 = (*((unsigned __int8 *)v398 + 16) >> 2) & 1;
                                  }
                                  else
                                  {
                                    v342 = 0;
                                  }
LABEL_766:
                                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v341, v342, v400, (uint64_t)v399, (uint64_t)v398, &v401);
                                  if (!v401)
                                  {
LABEL_860:
                                    __break(0xC471u);
LABEL_861:
                                    JUMPOUT(0x195C0EDD8);
                                  }
                                  v345 = v398;
                                  v398 = 0;
                                  if (v345)
                                  {
                                    if (*(_DWORD *)v345 == 2)
                                      WTF::StringImpl::destroy(v345, v344);
                                    else
                                      *(_DWORD *)v345 -= 2;
                                  }
                                  v346 = v399;
                                  v399 = 0;
                                  if (v346)
                                  {
                                    if (*(_DWORD *)v346 == 2)
                                      WTF::StringImpl::destroy(v346, v344);
                                    else
                                      *(_DWORD *)v346 -= 2;
                                  }
                                  v347 = v400;
                                  v400 = 0;
                                  if (v347)
                                  {
                                    if (*(_DWORD *)v347 == 2)
                                      WTF::StringImpl::destroy(v347, v344);
                                    else
                                      *(_DWORD *)v347 -= 2;
                                  }
                                  v348 = qword_1ECE7C4A0;
                                  v349 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                                  if ((_DWORD)v349)
                                  {
                                    WTF::String::utf8();
                                    v351 = v396 ? (char *)v396 + 16 : 0;
                                    LODWORD(v426) = 136446210;
                                    *(_QWORD *)((char *)&v426 + 4) = v351;
                                    _os_log_impl(&dword_1940B8000, v348, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&v426, 0xCu);
                                    v349 = (uint64_t)v396;
                                    v396 = 0;
                                    if (v349)
                                    {
                                      if (*(_DWORD *)v349 == 1)
                                        v349 = WTF::fastFree((WTF *)v349, v350);
                                      else
                                        --*(_DWORD *)v349;
                                    }
                                  }
                                  if (WebCore::LogMedia)
                                  {
                                    v352 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                                    while (1)
                                    {
                                      v353 = *v352;
                                      if ((v353 & 1) != 0)
                                        break;
                                      v354 = __ldaxr(v352);
                                      if (v354 == v353)
                                      {
                                        if (!__stxr(v353 | 1, v352))
                                        {
                                          v355 = WTF::Logger::observers((WTF::Logger *)v349);
                                          v356 = *(unsigned int *)(v355 + 12);
                                          if ((_DWORD)v356)
                                          {
                                            v357 = *(uint64_t **)v355;
                                            v384 = *(_QWORD *)v355 + 8 * v356;
                                            do
                                            {
                                              v358 = *v357;
                                              LODWORD(v426) = 0;
                                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v402);
                                              LODWORD(v427) = 0;
                                              WTF::String::String((WTF::String *)&v428, "loading media stream blob ");
                                              v429 = 0;
                                              WTF::LogArgument<void const*>::toString();
                                              v396 = 0;
                                              v397 = 0;
                                              v359 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
                                              LODWORD(v397) = 3;
                                              v396 = v359;
                                              v360 = HIDWORD(v397);
                                              *((_DWORD *)v359 + 4 * HIDWORD(v397)) = v426;
                                              v361 = *((_QWORD *)&v426 + 1);
                                              if (*((_QWORD *)&v426 + 1))
                                                **((_DWORD **)&v426 + 1) += 2;
                                              *((_QWORD *)v359 + 2 * v360 + 1) = v361;
                                              *((_DWORD *)v359 + 4 * (v360 + 1)) = (_DWORD)v427;
                                              v362 = v428;
                                              if (v428)
                                                *(_DWORD *)v428 += 2;
                                              *((_QWORD *)v359 + 2 * (v360 + 1) + 1) = v362;
                                              *((_DWORD *)v359 + 4 * (v360 + 2)) = v429;
                                              v363 = v430;
                                              if (v430)
                                                *(_DWORD *)v430 += 2;
                                              *((_QWORD *)v359 + 2 * (v360 + 2) + 1) = v363;
                                              HIDWORD(v397) = v360 + 3;
                                              (*(void (**)(uint64_t, char *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v358 + 16))(v358, &WebCore::LogMedia, 0, &v396);
                                              v364 = v396;
                                              if (HIDWORD(v397))
                                              {
                                                v365 = 16 * HIDWORD(v397);
                                                v366 = (WTF::StringImpl **)((char *)v396 + 8);
                                                do
                                                {
                                                  v367 = *v366;
                                                  *v366 = 0;
                                                  if (v367)
                                                  {
                                                    if (*(_DWORD *)v367 == 2)
                                                      WTF::StringImpl::destroy(v367, (WTF::StringImpl *)v350);
                                                    else
                                                      *(_DWORD *)v367 -= 2;
                                                  }
                                                  v366 += 2;
                                                  v365 -= 16;
                                                }
                                                while (v365);
                                                v364 = v396;
                                              }
                                              if (v364)
                                              {
                                                v396 = 0;
                                                LODWORD(v397) = 0;
                                                WTF::fastFree(v364, v350);
                                              }
                                              v368 = v430;
                                              v430 = 0;
                                              if (v368)
                                              {
                                                if (*(_DWORD *)v368 == 2)
                                                  WTF::StringImpl::destroy(v368, (WTF::StringImpl *)v350);
                                                else
                                                  *(_DWORD *)v368 -= 2;
                                              }
                                              v369 = v428;
                                              v428 = 0;
                                              if (v369)
                                              {
                                                if (*(_DWORD *)v369 == 2)
                                                  WTF::StringImpl::destroy(v369, (WTF::StringImpl *)v350);
                                                else
                                                  *(_DWORD *)v369 -= 2;
                                              }
                                              v370 = (WTF::StringImpl *)*((_QWORD *)&v426 + 1);
                                              *((_QWORD *)&v426 + 1) = 0;
                                              if (v370)
                                              {
                                                if (*(_DWORD *)v370 == 2)
                                                  WTF::StringImpl::destroy(v370, (WTF::StringImpl *)v350);
                                                else
                                                  *(_DWORD *)v370 -= 2;
                                              }
                                              ++v357;
                                            }
                                            while (v357 != (uint64_t *)v384);
                                          }
                                          v371 = __ldxr(v352);
                                          if (v371 == 1)
                                          {
                                            if (!__stlxr(0, v352))
                                              break;
                                          }
                                          else
                                          {
                                            __clrex();
                                          }
                                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                                          break;
                                        }
                                      }
                                      else
                                      {
                                        __clrex();
                                      }
                                    }
                                  }
                                  v372 = v401;
                                  v401 = 0;
                                  if (v372)
                                  {
                                    if (*(_DWORD *)v372 == 2)
                                      WTF::StringImpl::destroy(v372, (WTF::StringImpl *)v350);
                                    else
                                      *(_DWORD *)v372 -= 2;
                                  }
                                  v314 = *((_QWORD *)v293 + 204);
                                  goto LABEL_832;
                                }
LABEL_847:
                                v338 = 0;
                                goto LABEL_751;
                              }
                            }
                            v337 = 0;
                            if (v398)
                              goto LABEL_750;
                            goto LABEL_847;
                          }
                          v330 = v329 - 64;
                          ++*(_DWORD *)(v329 - 40);
                          v294 = WTF::fastMalloc((WTF *)0x20);
                          *(_DWORD *)(v294 + 8) = 1;
                          *(_QWORD *)v294 = off_1E335DF30;
                          *(_QWORD *)(v294 + 16) = 0;
                          *(_QWORD *)(v294 + 24) = v330;
                          v331 = (_DWORD *)*((_QWORD *)v293 + 144);
                          *((_QWORD *)v293 + 144) = v294;
                          if (v331)
                          {
                            if (v331[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v331 + 8))(v331);
                            else
                              --v331[2];
                            goto LABEL_659;
                          }
                        }
LABEL_660:
                        v295 = *((_QWORD *)v293 + 228);
                        v296 = (WTF::StringImpl *)*((_QWORD *)v293 + 229);
                        *(_QWORD *)&v426 = "HTMLMediaElement";
                        *((_QWORD *)&v426 + 1) = 17;
                        v427 = "operator()";
                        v428 = v296;
                        if (*(_BYTE *)(v295 + 12))
                        {
                          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v426, "loading MSE blob");
                          v294 = *((_QWORD *)v293 + 144);
                        }
                        v297 = *((_QWORD *)v293 + 37);
                        if (v297)
                          goto LABEL_868;
                        v297 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v297 = 1;
                        *(_QWORD *)(v297 + 8) = v293;
                        v299 = (unsigned int *)*((_QWORD *)v293 + 37);
                        *((_QWORD *)v293 + 37) = v297;
                        if (!v299)
                          goto LABEL_868;
                        do
                        {
                          v300 = __ldaxr(v299);
                          v301 = v300 - 1;
                        }
                        while (__stlxr(v301, v299));
                        if (!v301)
                        {
                          atomic_store(1u, v299);
                          WTF::fastFree((WTF *)v299, v298);
                        }
                        v297 = *((_QWORD *)v293 + 37);
                        if (v297)
                        {
LABEL_868:
                          do
                            v302 = __ldaxr((unsigned int *)v297);
                          while (__stlxr(v302 + 1, (unsigned int *)v297));
                        }
                        *(_QWORD *)&v426 = v297;
                        v304 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v294 + 72))(v294, &v426);
                        v305 = (unsigned int *)v426;
                        *(_QWORD *)&v426 = 0;
                        if (v305)
                        {
                          do
                          {
                            v306 = __ldaxr(v305);
                            v307 = v306 - 1;
                          }
                          while (__stlxr(v307, v305));
                          if (!v307)
                          {
                            atomic_store(1u, v305);
                            WTF::fastFree((WTF *)v305, v303);
                          }
                        }
                        v308 = (_DWORD *)*((_QWORD *)v293 + 144);
                        if ((v304 & 1) == 0)
                        {
                          *((_QWORD *)v293 + 144) = 0;
                          if (!v308)
                            goto LABEL_691;
                          goto LABEL_727;
                        }
                        if (v308)
                          ++v308[2];
                        (*(void (**)(__int128 *__return_ptr, _DWORD *))(*(_QWORD *)v308 + 16))(&v426, v308);
                        if (!(_QWORD)v426)
                        {
LABEL_724:
                          (*(void (**)(_DWORD *))(*(_QWORD *)v308 + 80))(v308);
                          v328 = (_DWORD *)*((_QWORD *)v293 + 144);
                          *((_QWORD *)v293 + 144) = 0;
                          if (v328)
                          {
                            if (v328[2] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v328 + 8))(v328);
                            else
                              --v328[2];
                          }
LABEL_727:
                          if (v308[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v308 + 8))(v308);
                          else
                            --v308[2];
                          if (*((_QWORD *)v293 + 144))
                            goto LABEL_730;
                          goto LABEL_691;
                        }
                        if (!v389)
                        {
                          v309 = v407;
                          (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v308 + 16))(&v402, v308);
                          v386 = WebCore::MediaPlayer::load(v309, (const WTF::URL *)buf, (const WebCore::ContentType *)&v387, v402);
                          v311 = v402;
                          v402 = 0;
                          if (!v311)
                            goto LABEL_706;
                          v312 = *((_QWORD *)v311 + 1);
                          if (__ldaxr((unsigned __int8 *)v312))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, (unsigned __int8 *)v312))
                          {
                            goto LABEL_694;
                          }
                          MEMORY[0x19AEA534C](v312);
LABEL_694:
                          v315 = *(_QWORD *)(v312 + 8);
                          v316 = v315 - 1;
                          *(_QWORD *)(v312 + 8) = v315 - 1;
                          if (v315 == 1)
                          {
                            v380 = *(_QWORD *)(v312 + 16);
                            v317 = *(_QWORD *)(v312 + 24);
                            *(_QWORD *)(v312 + 24) = 0;
                            v318 = v380 != 0;
                          }
                          else
                          {
                            v317 = 0;
                            v318 = 1;
                          }
                          v319 = __ldxr((unsigned __int8 *)v312);
                          if (v319 == 1)
                          {
                            if (!__stlxr(0, (unsigned __int8 *)v312))
                            {
LABEL_701:
                              if (!v316)
                              {
                                if (v317)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
                                if (!v318)
                                  WTF::fastFree((WTF *)v312, v310);
                              }
LABEL_706:
                              v320 = v426;
                              *(_QWORD *)&v426 = 0;
                              if (!v320)
                                goto LABEL_723;
                              v321 = *(_QWORD *)(v320 + 8);
                              if (__ldaxr((unsigned __int8 *)v321))
                              {
                                __clrex();
                              }
                              else if (!__stxr(1u, (unsigned __int8 *)v321))
                              {
                                goto LABEL_711;
                              }
                              MEMORY[0x19AEA534C](v321);
LABEL_711:
                              v323 = *(_QWORD *)(v321 + 8);
                              v324 = v323 - 1;
                              *(_QWORD *)(v321 + 8) = v323 - 1;
                              if (v323 == 1)
                              {
                                v379 = *(_QWORD *)(v321 + 16);
                                v325 = *(_QWORD *)(v321 + 24);
                                *(_QWORD *)(v321 + 24) = 0;
                                v326 = v379 != 0;
                              }
                              else
                              {
                                v325 = 0;
                                v326 = 1;
                              }
                              v327 = __ldxr((unsigned __int8 *)v321);
                              if (v327 == 1)
                              {
                                if (!__stlxr(0, (unsigned __int8 *)v321))
                                {
LABEL_718:
                                  if (!v324)
                                  {
                                    if (v325)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
                                    if (!v326)
                                      WTF::fastFree((WTF *)v321, v310);
                                  }
LABEL_723:
                                  if (v386)
                                    goto LABEL_727;
                                  goto LABEL_724;
                                }
                              }
                              else
                              {
                                __clrex();
                              }
                              WTF::Lock::unlockSlow((WTF::Lock *)v321);
                              goto LABEL_718;
                            }
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow((WTF::Lock *)v312);
                          goto LABEL_701;
                        }
                        goto LABEL_858;
                      }
                      if ((!v390 || !*((_DWORD *)v390 + 1)) && WTF::URL::protocolIs())
                      {
                        WTF::mimeTypeFromDataURL();
                        v274 = (WTF::StringImpl *)v426;
                        *(_QWORD *)&v426 = 0;
                        v275 = v390;
                        v390 = v274;
                        if (v275)
                        {
                          if (*(_DWORD *)v275 == 2)
                          {
                            WTF::StringImpl::destroy(v275, v69);
                            v391 = 0;
                            v285 = (WTF::StringImpl *)v426;
                            *(_QWORD *)&v426 = 0;
                            if (v285)
                            {
                              if (*(_DWORD *)v285 == 2)
                                WTF::StringImpl::destroy(v285, v69);
                              else
                                *(_DWORD *)v285 -= 2;
                              v184 = v178;
                            }
                            goto LABEL_606;
                          }
                          *(_DWORD *)v275 -= 2;
                        }
                        v391 = 0;
LABEL_606:
                        v283 = v390;
                        if (*(_BYTE *)(v184 + 1816))
                        {
                          if (v390)
                            *(_DWORD *)v390 += 2;
                          v284 = *(WTF::StringImpl **)(v184 + 1800);
                          *(_QWORD *)(v184 + 1800) = v283;
                          if (v284)
                          {
                            if (*(_DWORD *)v284 == 2)
                              WTF::StringImpl::destroy(v284, v69);
                            else
                              *(_DWORD *)v284 -= 2;
                          }
                          *(_BYTE *)(v184 + 1808) = v391;
                        }
                        else
                        {
                          if (v390)
                            *(_DWORD *)v390 += 2;
                          *(_QWORD *)(v184 + 1800) = v283;
                          *(_BYTE *)(v184 + 1808) = v391;
                          *(_BYTE *)(v184 + 1816) = 1;
                        }
                        goto LABEL_505;
                      }
                      WebCore::ContentType::containerType((WebCore::ContentType *)&v390, v257, v258, v259);
                      v277 = v387;
                      v387 = 0;
                      if (!v277)
                        goto LABEL_599;
                      v402 = v277;
                      if ((*((_BYTE *)v277 + 16) & 0x10) == 0)
                      {
                        WTF::AtomStringImpl::addSlowCase();
                        v278 = v402;
                        v277 = (WTF::StringImpl *)v426;
                        *(_QWORD *)&v426 = 0;
                        v402 = 0;
                        if (v278)
                        {
                          if (*(_DWORD *)v278 == 2)
                            WTF::StringImpl::destroy(v278, v69);
                          else
                            *(_DWORD *)v278 -= 2;
                          v184 = v178;
                        }
                      }
                      v279 = v387;
                      v387 = 0;
                      if (v279)
                      {
                        if (*(_DWORD *)v279 == 2)
                        {
                          WTF::StringImpl::destroy(v279, v69);
                          if (!v277)
                            goto LABEL_599;
                          goto LABEL_621;
                        }
                        *(_DWORD *)v279 -= 2;
                      }
                      if (!v277)
                      {
LABEL_599:
                        v280 = 1;
                        goto LABEL_600;
                      }
LABEL_621:
                      v280 = 0;
                      if (*((_DWORD *)v277 + 1)
                        && v277 != (WTF::StringImpl *)WebCore::applicationOctetStreamAtomData
                        && v277 != (WTF::StringImpl *)WebCore::textPlainContentTypeAtomData)
                      {
LABEL_604:
                        if (*(_DWORD *)v277 == 2)
                          WTF::StringImpl::destroy(v277, v69);
                        else
                          *(_DWORD *)v277 -= 2;
                        goto LABEL_606;
                      }
LABEL_600:
                      WebCore::ContentType::fromURL((WebCore::ContentType *)&v393, (WTF::StringImpl **)&v426);
                      v281 = (WTF::StringImpl *)v426;
                      *(_QWORD *)&v426 = 0;
                      v282 = v390;
                      v390 = v281;
                      if (v282)
                      {
                        if (*(_DWORD *)v282 == 2)
                          WTF::StringImpl::destroy(v282, v69);
                        else
                          *(_DWORD *)v282 -= 2;
                      }
                      v391 = BYTE8(v426);
                      if ((v280 & 1) != 0)
                        goto LABEL_606;
                      goto LABEL_604;
                    }
                    v248 = *(unsigned __int8 **)v247;
                    if (__ldaxr(*(unsigned __int8 **)v247))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, v248))
                    {
                      goto LABEL_484;
                    }
                    MEMORY[0x19AEA534C](v248);
LABEL_484:
                    ++*((_QWORD *)v248 + 1);
                    v250 = __ldxr(v248);
                    if (v250 == 1)
                    {
                      if (!__stlxr(0, v248))
                        goto LABEL_489;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v248);
                    goto LABEL_489;
                  }
                  v210 = *(_QWORD *)(v178 + 1824);
                  v211 = *(_QWORD *)(v178 + 1832);
                  *(_QWORD *)buf = "HTMLMediaElement";
                  *(_QWORD *)&buf[8] = 17;
                  *(_QWORD *)&buf[16] = "loadResource";
                  *(_QWORD *)&v406 = v211;
                  if (*(_BYTE *)(v210 + 12))
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, "loading generic blob");
                  v212 = (WTF::StringImpl **)(v178 + 1456);
                  v213 = *(_QWORD *)(v178 + 1456);
                  if (v213)
                  {
                    if (*(_DWORD *)(v213 + 4))
                    {
                      WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)(v178 + 1496), (uint64_t)buf);
                      WebCore::ThreadableBlobRegistry::unregisterBlobURL(v178 + 1456, (uint64_t)buf);
                      if (BYTE8(v406))
                      {
                        if ((_DWORD)v406 != -1)
                          ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v406])(&v426, buf);
                      }
                    }
                  }
                  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(v178 + 40) + 8) + 192), v69);
                  v215 = v214;
                  if (v214)
                  {
                    do
                      v216 = __ldaxr(v214);
                    while (__stlxr(v216 + 1, v214));
                  }
                  WebCore::BlobURL::createPublicURL((WebCore::BlobURL *)v214, (uint64_t)&v426);
                  WebCore::Document::topOrigin(*(WebCore::Document **)(*(_QWORD *)(v178 + 40) + 8), v217);
                  LOBYTE(v402) = 0;
                  LODWORD(v404) = -1;
                  v219 = *(unsigned int *)(v218 + 32);
                  if ((_DWORD)v219 != -1)
                  {
                    ((void (*)(_BYTE *, WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_6[v219])(buf, &v402, v218 + 8);
                    LODWORD(v404) = v219;
                  }
                  BYTE8(v404) = 1;
                  WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive((uint64_t)buf, (uint64_t)&v426, (uint64_t)&v402);
                  WebCore::URLKeepingBlobAlive::operator=(v178 + 1456, (WTF::StringImpl **)buf);
                  WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)buf);
                  if (BYTE8(v404) && (_DWORD)v404 != -1)
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33C4BB8[v404])(&v387, &v402);
                  v221 = (WTF::StringImpl *)v426;
                  *(_QWORD *)&v426 = 0;
                  if (v221)
                  {
                    if (*(_DWORD *)v221 == 2)
                    {
                      WTF::StringImpl::destroy(v221, v220);
                      if (v215)
                      {
                        do
                        {
LABEL_442:
                          v222 = __ldaxr(v215);
                          v223 = v222 - 1;
                        }
                        while (__stlxr(v223, v215));
                        if (!v223)
                        {
                          atomic_store(1u, v215);
                          v286 = (WTF::StringImpl *)*((_QWORD *)v215 + 6);
                          *((_QWORD *)v215 + 6) = 0;
                          if (v286)
                          {
                            if (*(_DWORD *)v286 == 2)
                              WTF::StringImpl::destroy(v286, v220);
                            else
                              *(_DWORD *)v286 -= 2;
                          }
                          v287 = (WTF::StringImpl *)*((_QWORD *)v215 + 5);
                          *((_QWORD *)v215 + 5) = 0;
                          if (v287)
                          {
                            if (*(_DWORD *)v287 == 2)
                              WTF::StringImpl::destroy(v287, v220);
                            else
                              *(_DWORD *)v287 -= 2;
                          }
                          v288 = v215[8];
                          if ((_DWORD)v288 != -1)
                            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33C4BB8[v288])(&v402, v215 + 2);
                          v215[8] = -1;
                          WTF::fastFree((WTF *)v215, v220);
                          v184 = v178;
                        }
                      }
LABEL_444:
                      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(v184 + 40) + 8) + 192), v220);
                      v226 = v224;
                      if (v224)
                      {
                        do
                          v227 = __ldaxr(v224);
                        while (__stlxr(v227 + 1, v224));
                      }
                      v228 = *(_QWORD *)(*(_QWORD *)(v178 + 40) + 8);
                      WebCore::ContentSecurityPolicy::responseHeaders(*(_QWORD *)(v228 + 208), v225, (uint64_t)buf);
                      LOWORD(v406) = *(_WORD *)(v228 + 216);
                      v229 = *(_DWORD **)(v228 + 224);
                      if (v229)
                        *v229 += 2;
                      v230 = v228 + 192;
                      *((_QWORD *)&v406 + 1) = v229;
                      v231 = *(WTF::StringImpl **)(v228 + 232);
                      if (v231)
                        *(_DWORD *)v231 += 2;
                      v407 = v231;
                      v232 = (**(uint64_t (***)(uint64_t))v230)(v228 + 192);
                      LOWORD(v408) = *(_WORD *)v232;
                      v233 = *(WTF::StringImpl **)(v232 + 8);
                      if (v233)
                        *(_DWORD *)v233 += 2;
                      v409 = v233;
                      v234 = *(_DWORD **)(v232 + 16);
                      if (v234)
                        *v234 += 2;
                      v410 = v234;
                      v411 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 8))(v228 + 192);
                      v235 = *(_QWORD *)(v178 + 1448);
                      v236 = *(WTF::StringImpl **)(v235 + 80);
                      if (v236)
                        *(_DWORD *)v236 += 2;
                      v402 = v236;
                      v403 = *(_OWORD *)(v235 + 88);
                      v404 = *(_OWORD *)(v235 + 104);
                      WTF::Markable<WebCore::SecurityOriginData,WebCore::SecurityOriginDataMarkableTraits>::operator std::optional<WebCore::SecurityOriginData>((unsigned int *)(v178 + 1496), (uint64_t)&v426);
                      WebCore::ThreadableBlobRegistry::registerBlobURL(v226, (unint64_t *)buf, (WTF::URL *)(v178 + 1456), (uint64_t)&v402, (uint64_t)&v426);
                      if ((_BYTE)v429 && (_DWORD)v428 != -1)
                        ((void (*)(WTF::StringImpl **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_7[v428])(&v387, &v426);
                      v238 = v402;
                      v402 = 0;
                      if (v238)
                      {
                        if (*(_DWORD *)v238 == 2)
                          WTF::StringImpl::destroy(v238, v237);
                        else
                          *(_DWORD *)v238 -= 2;
                      }
                      WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)buf, v237);
                      if (v226)
                      {
                        do
                        {
                          v239 = __ldaxr(v226);
                          v240 = v239 - 1;
                        }
                        while (__stlxr(v240, v226));
                        if (!v240)
                        {
                          atomic_store(1u, v226);
                          v289 = (WTF::StringImpl *)*((_QWORD *)v226 + 6);
                          *((_QWORD *)v226 + 6) = 0;
                          if (v289)
                          {
                            if (*(_DWORD *)v289 == 2)
                              WTF::StringImpl::destroy(v289, v69);
                            else
                              *(_DWORD *)v289 -= 2;
                          }
                          v290 = (WTF::StringImpl *)*((_QWORD *)v226 + 5);
                          *((_QWORD *)v226 + 5) = 0;
                          if (v290)
                          {
                            if (*(_DWORD *)v290 == 2)
                              WTF::StringImpl::destroy(v290, v69);
                            else
                              *(_DWORD *)v290 -= 2;
                          }
                          v291 = v226[8];
                          if ((_DWORD)v291 != -1)
                            ((void (*)(_BYTE *, unsigned int *))off_1E33C4BB8[v291])(buf, v226 + 2);
                          v226[8] = -1;
                          WTF::fastFree((WTF *)v226, v69);
                        }
                      }
                      v241 = *v212;
                      if (*v212)
                        *(_DWORD *)v241 += 2;
                      v242 = v393;
                      v393 = v241;
                      v184 = v178;
                      if (v242)
                      {
                        if (*(_DWORD *)v242 == 2)
                          WTF::StringImpl::destroy(v242, v69);
                        else
                          *(_DWORD *)v242 -= 2;
                      }
                      v243 = *(_OWORD *)(v178 + 1480);
                      v394 = *(_OWORD *)(v178 + 1464);
                      v395 = v243;
                      v244 = v390;
                      if (!v390 || !*((_DWORD *)v390 + 1))
                      {
                        v245 = *(WTF::StringImpl **)(*(_QWORD *)(v178 + 1448) + 48);
                        if (v245)
                          *(_DWORD *)v245 += 2;
                        v390 = v245;
                        if (v244)
                        {
                          if (*(_DWORD *)v244 == 2)
                            WTF::StringImpl::destroy(v244, v69);
                          else
                            *(_DWORD *)v244 -= 2;
                        }
                        v391 = 0;
                      }
                      goto LABEL_477;
                    }
                    *(_DWORD *)v221 -= 2;
                  }
                  if (v215)
                    goto LABEL_442;
                  goto LABEL_444;
                }
                v199 = v198 | 0x100;
                *((_WORD *)v382 + 2) = WORD2(v198);
                *(_DWORD *)v382 = v198 | 0x100;
                v200 = *(_QWORD *)(v178 + 104);
                if (!v200)
                {
LABEL_421:
                  v207 = v199 & 0xFFFFFFFFFFFFFF7FLL;
                  *((_WORD *)v382 + 2) = WORD2(v207);
                  *(_DWORD *)v382 = v200 | v207;
                  v208 = *(WebCore::PlatformMediaSession **)(v178 + 1600);
                  if (!v208)
                  {
                    WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v178);
                    v208 = *(WebCore::PlatformMediaSession **)(v178 + 1600);
                  }
                  WebCore::PlatformMediaSession::canProduceAudioChanged(v208);
                  goto LABEL_424;
                }
                v201 = *(_DWORD *)(v200 + 4);
                if ((v201 & 1) != 0)
                {
                  v202 = *(uint64_t **)(v200 + 40);
                  v203 = *(_DWORD *)(v200 + 52);
                  if (!v203)
                  {
LABEL_420:
                    LODWORD(v200) = 0;
                    goto LABEL_421;
                  }
                }
                else
                {
                  v202 = (uint64_t *)(v200 + 32);
                  v203 = v201 >> 5;
                  if (!(v201 >> 5))
                    goto LABEL_420;
                }
                v205 = v203;
                LODWORD(v200) = 128;
                while (1)
                {
                  v206 = *v202;
                  if (*v202 == WebCore::HTMLNames::mutedAttr
                    || *(_QWORD *)(v206 + 24) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 24)
                    && *(_QWORD *)(v206 + 32) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 32))
                  {
                    goto LABEL_421;
                  }
                  v202 += 2;
                  if (!--v205)
                    goto LABEL_420;
                }
              }
              v180 = *(unsigned __int8 **)v179;
              if (__ldaxr(*(unsigned __int8 **)v179))
              {
                __clrex();
              }
              else if (!__stxr(1u, v180))
              {
                goto LABEL_370;
              }
              MEMORY[0x19AEA534C](v180);
LABEL_370:
              ++*((_QWORD *)v180 + 1);
              v182 = __ldxr(v180);
              if (v182 == 1)
              {
                if (!__stlxr(0, v180))
                  goto LABEL_375;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v180);
              goto LABEL_375;
            }
LABEL_855:
            __break(0xC471u);
            JUMPOUT(0x195C0F9BCLL);
          }
LABEL_573:
          v134 = 0;
          goto LABEL_278;
        }
      }
      v133 = 0;
      if (v401)
        goto LABEL_277;
      goto LABEL_573;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v426);
    WTF::String::String((WTF::String *)&v390, "will load from app cache ");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v396)
    {
      v86 = *((_DWORD *)v396 + 1);
      if (v390)
        goto LABEL_162;
    }
    else
    {
      v86 = 0;
      if (v390)
      {
LABEL_162:
        v87 = *((_DWORD *)v390 + 1);
        if (v401)
        {
LABEL_163:
          v88 = *((_DWORD *)v401 + 1);
LABEL_164:
          if ((v88 | v87) < 0
            || ((v14 = __OFADD__(v87, v88), v89 = v87 + v88, !v14) ? (v90 = 0) : (v90 = 1),
                v86 < 0 || (v90 & 1) != 0 || (v91 = (v86 + v89), __OFADD__(v86, v89))))
          {
            v387 = 0;
            goto LABEL_857;
          }
          if (v396 && (*((_BYTE *)v396 + 16) & 4) == 0)
          {
            v92 = 0;
            goto LABEL_199;
          }
          if (v390)
          {
            v99 = *((_DWORD *)v390 + 4);
            v92 = (v99 >> 2) & 1;
            if (v401 && (v99 & 4) != 0)
              goto LABEL_198;
          }
          else
          {
            if (v401)
            {
LABEL_198:
              v92 = (*((unsigned __int8 *)v401 + 16) >> 2) & 1;
              goto LABEL_199;
            }
            v92 = 1;
          }
LABEL_199:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v91, v92, v396, (uint64_t)v390, (uint64_t)v401, &v387);
          if (v387)
          {
            v101 = v401;
            v401 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 2)
                WTF::StringImpl::destroy(v101, v100);
              else
                *(_DWORD *)v101 -= 2;
            }
            v102 = v390;
            v390 = 0;
            if (v102)
            {
              if (*(_DWORD *)v102 == 2)
                WTF::StringImpl::destroy(v102, v100);
              else
                *(_DWORD *)v102 -= 2;
            }
            v103 = v396;
            v396 = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, v100);
              else
                *(_DWORD *)v103 -= 2;
            }
            v104 = qword_1ECE7C4A0;
            v105 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v105)
            {
              WTF::String::utf8();
              v107 = v402 ? (char *)v402 + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v107;
              _os_log_impl(&dword_1940B8000, v104, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v105 = (uint64_t)v402;
              v402 = 0;
              if (v105)
              {
                if (*(_DWORD *)v105 == 1)
                  v105 = WTF::fastFree((WTF *)v105, v106);
                else
                  --*(_DWORD *)v105;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            {
              v108 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v109 = *v108;
                if ((v109 & 1) != 0)
                  break;
                v110 = __ldaxr(v108);
                if (v110 == v109)
                {
                  if (!__stxr(v109 | 1, v108))
                  {
                    v111 = WTF::Logger::observers((WTF::Logger *)v105);
                    v112 = *(unsigned int *)(v111 + 12);
                    if ((_DWORD)v112)
                    {
                      v113 = *(uint64_t **)v111;
                      v114 = *(_QWORD *)v111 + 8 * v112;
                      do
                      {
                        v115 = *v113;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v426);
                        *(_DWORD *)&buf[16] = 0;
                        WTF::String::String((WTF::String *)&v406, "will load from app cache ");
                        DWORD2(v406) = 0;
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v402 = 0;
                        *(_QWORD *)&v403 = 0;
                        v116 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v403) = 3;
                        v402 = v116;
                        v117 = DWORD1(v403);
                        *((_DWORD *)v116 + 4 * DWORD1(v403)) = *(_DWORD *)buf;
                        v118 = *(_QWORD *)&buf[8];
                        if (*(_QWORD *)&buf[8])
                          **(_DWORD **)&buf[8] += 2;
                        *((_QWORD *)v116 + 2 * v117 + 1) = v118;
                        *((_DWORD *)v116 + 4 * (v117 + 1)) = *(_DWORD *)&buf[16];
                        v119 = v406;
                        if ((_QWORD)v406)
                          *(_DWORD *)v406 += 2;
                        *((_QWORD *)v116 + 2 * (v117 + 1) + 1) = v119;
                        *((_DWORD *)v116 + 4 * (v117 + 2)) = DWORD2(v406);
                        v120 = v407;
                        if (v407)
                          *(_DWORD *)v407 += 2;
                        *((_QWORD *)v116 + 2 * (v117 + 2) + 1) = v120;
                        DWORD1(v403) = v117 + 3;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v115 + 16))(v115, &WebCore::LogMedia, 3, &v402);
                        v121 = v402;
                        if (DWORD1(v403))
                        {
                          v122 = 16 * DWORD1(v403);
                          v123 = (WTF::StringImpl **)((char *)v402 + 8);
                          do
                          {
                            v124 = *v123;
                            *v123 = 0;
                            if (v124)
                            {
                              if (*(_DWORD *)v124 == 2)
                                WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v106);
                              else
                                *(_DWORD *)v124 -= 2;
                            }
                            v123 += 2;
                            v122 -= 16;
                          }
                          while (v122);
                          v121 = v402;
                        }
                        if (v121)
                        {
                          v402 = 0;
                          LODWORD(v403) = 0;
                          WTF::fastFree(v121, v106);
                        }
                        v125 = v407;
                        v407 = 0;
                        if (v125)
                        {
                          if (*(_DWORD *)v125 == 2)
                            WTF::StringImpl::destroy(v125, (WTF::StringImpl *)v106);
                          else
                            *(_DWORD *)v125 -= 2;
                        }
                        v126 = (WTF::StringImpl *)v406;
                        *(_QWORD *)&v406 = 0;
                        if (v126)
                        {
                          if (*(_DWORD *)v126 == 2)
                            WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v106);
                          else
                            *(_DWORD *)v126 -= 2;
                        }
                        v127 = *(WTF::StringImpl **)&buf[8];
                        *(_QWORD *)&buf[8] = 0;
                        if (v127)
                        {
                          if (*(_DWORD *)v127 == 2)
                            WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v106);
                          else
                            *(_DWORD *)v127 -= 2;
                        }
                        ++v113;
                      }
                      while (v113 != (uint64_t *)v114);
                    }
                    v128 = __ldxr(v108);
                    if (v128 == 1)
                    {
                      if (!__stlxr(0, v108))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            IdentifierInternal = v387;
            v387 = 0;
            if (IdentifierInternal)
            {
              if (*(_DWORD *)IdentifierInternal == 2)
                IdentifierInternal = (WTF::StringImpl *)WTF::StringImpl::destroy(IdentifierInternal, (WTF::StringImpl *)v106);
              else
                *(_DWORD *)IdentifierInternal -= 2;
            }
            goto LABEL_268;
          }
LABEL_857:
          __break(0xC471u);
          JUMPOUT(0x195C0F9C8);
        }
LABEL_584:
        v88 = 0;
        goto LABEL_164;
      }
    }
    v87 = 0;
    if (v401)
      goto LABEL_163;
    goto LABEL_584;
  }
  result = (WTF::StringImpl *)WebCore::HTMLMediaElement::mediaLoadingFailed(v5, (void *)4);
LABEL_530:
  if (*(_DWORD *)v60 == 1)
  {
    WebCore::Page::~Page(v60);
    result = (WTF::StringImpl *)WTF::fastFree(v272, v273);
  }
  else
  {
    --*(_DWORD *)v60;
  }
  do
  {
LABEL_532:
    v270 = __ldaxr(v57);
    v271 = v270 - 1;
  }
  while (__stlxr(v271, v57));
  if (!v271)
  {
    atomic_store(1u, v57);
    v276 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v276 = off_1E31FE290;
    v276[1] = v57;
    *(_QWORD *)buf = v276;
    WTF::ensureOnMainThread();
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::mediaLoadingFailed(WebCore::HTMLMediaElement *this, void *a2)
{
  WebCore::HTMLMediaElement *v3;
  int v4;
  uint64_t v5;
  void *v6;
  __n128 v7;
  int havePotentialSourceChild;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t result;
  WebCore::HTMLMediaElement *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  char v22;
  int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  NSObject *v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t *v58;
  WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl *v61;
  WebCore::PlatformMediaSession *v62;
  _DWORD *v63;
  _DWORD *v64;
  WebCore::Navigator *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF *v68;
  void *v69;
  __int16 v70;
  __int16 v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  _QWORD v74[4];
  WTF::Logger *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WebCore *v80;
  __int128 buf;
  const char *v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  uint64_t v86;

  v3 = this;
  v86 = *MEMORY[0x1E0C80C00];
  if ((*((_QWORD *)this + 42) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::HTMLMediaElement *)WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 304));
  if ((*((_QWORD *)v3 + 49) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::HTMLMediaElement *)WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)v3 + 360));
  if ((*((_QWORD *)v3 + 77) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::HTMLMediaElement *)WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)v3 + 584));
  v4 = *((_DWORD *)v3 + 226);
  if (v4 <= 0 && *((_DWORD *)v3 + 264) == 2)
  {
    v5 = *((_QWORD *)v3 + 133);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      WebCore::HTMLSourceElement::scheduleErrorEvent(v5);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        v70 = *(_WORD *)(v5 + 30);
        if ((v70 & 0x400) == 0)
        {
          v71 = *(_WORD *)(v5 + 28);
          if ((v71 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v5, v6);
          }
          else
          {
            if ((v71 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
              v70 = *(_WORD *)(v5 + 30);
            }
            *(_WORD *)(v5 + 30) = v70 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
          }
        }
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    else
    {
      v72 = *((_QWORD *)v3 + 228);
      v73 = (WTF::StringImpl *)*((_QWORD *)v3 + 229);
      *(_QWORD *)&buf = "HTMLMediaElement";
      *((_QWORD *)&buf + 1) = 17;
      v82 = "mediaLoadingFailed";
      v83 = v73;
      if (*(_BYTE *)(v72 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "error event not sent, <source> was removed");
    }
    WebCore::HTMLMediaElement::forgetResourceSpecificTracks((uint64_t (**)())v3);
    havePotentialSourceChild = WebCore::HTMLMediaElement::havePotentialSourceChild(v3, v7);
    v9 = *((_QWORD *)v3 + 228);
    if (havePotentialSourceChild)
    {
      v10 = (WTF::StringImpl *)*((_QWORD *)v3 + 229);
      *(_QWORD *)&buf = "HTMLMediaElement";
      *((_QWORD *)&buf + 1) = 17;
      v82 = "mediaLoadingFailed";
      v83 = v10;
      if (*(_BYTE *)(v9 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "scheduling next <source>");
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v11 = off_1E33C58C0;
      v11[1] = WebCore::HTMLMediaElement::loadNextSourceChild;
      v11[2] = 0;
      v11[3] = v3;
      *(_QWORD *)&buf = v11;
      WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)v3, 9, (uint64_t)v3 + 784, (uint64_t (***)())&buf);
      result = buf;
      *(_QWORD *)&buf = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v67 = (WTF::StringImpl *)*((_QWORD *)v3 + 229);
      *(_QWORD *)&buf = "HTMLMediaElement";
      *((_QWORD *)&buf + 1) = 17;
      v82 = "mediaLoadingFailed";
      v83 = v67;
      if (*(_BYTE *)(v9 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "no more <source> elements, waiting");
      return (uint64_t)WebCore::HTMLMediaElement::waitForSourceChange(v3);
    }
    return result;
  }
  if ((_DWORD)a2 == 6)
  {
    v13 = v3;
    v14 = 6;
    goto LABEL_22;
  }
  if ((_DWORD)a2 == 5)
  {
    if (v4 >= 1)
    {
      v13 = v3;
      v14 = 5;
LABEL_22:
      this = (WebCore::HTMLMediaElement *)WebCore::HTMLMediaElement::mediaLoadingFailedFatally(v13, v14);
      goto LABEL_26;
    }
  }
  else if ((a2 & 0xFE) != 4)
  {
    goto LABEL_26;
  }
  if (*((_DWORD *)v3 + 264) == 1)
    this = (WebCore::HTMLMediaElement *)WebCore::HTMLMediaElement::noneSupported((unsigned __int8 *)v3, a2);
LABEL_26:
  v15 = *((_QWORD *)v3 + 228);
  v16 = *((_QWORD *)v3 + 229);
  v74[0] = "HTMLMediaElement";
  v74[1] = 17;
  v74[2] = "mediaLoadingFailed";
  v74[3] = v16;
  if (!*(_BYTE *)(v15 + 12))
    goto LABEL_110;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v74);
  WTF::String::String((WTF::String *)&v78, "error = ");
  result = WTF::String::number((WTF::String *)a2);
  if (v79)
  {
    v17 = *((_DWORD *)v79 + 1);
    if (v78)
      goto LABEL_29;
LABEL_159:
    v18 = 0;
    if (v77)
      goto LABEL_30;
LABEL_160:
    v19 = 0;
    goto LABEL_31;
  }
  v17 = 0;
  if (!v78)
    goto LABEL_159;
LABEL_29:
  v18 = *((_DWORD *)v78 + 1);
  if (!v77)
    goto LABEL_160;
LABEL_30:
  v19 = *((_DWORD *)v77 + 1);
LABEL_31:
  if ((v19 | v18) < 0
    || ((v20 = __OFADD__(v18, v19), v21 = v18 + v19, !v20) ? (v22 = 0) : (v22 = 1),
        v17 < 0 || (v22 & 1) != 0 || (result = (v17 + v21), __OFADD__(v17, v21))))
  {
    v80 = 0;
    goto LABEL_174;
  }
  if (v79 && (*((_BYTE *)v79 + 16) & 4) == 0)
  {
    v23 = 0;
    goto LABEL_45;
  }
  if (v78)
  {
    v24 = *((_DWORD *)v78 + 4);
    v23 = (v24 >> 2) & 1;
    if (v77 && (v24 & 4) != 0)
      goto LABEL_44;
  }
  else
  {
    if (v77)
    {
LABEL_44:
      v23 = (*((unsigned __int8 *)v77 + 16) >> 2) & 1;
      goto LABEL_45;
    }
    v23 = 1;
  }
LABEL_45:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v23, v79, (uint64_t)v78, (uint64_t)v77, &v80);
  if (!v80)
  {
LABEL_174:
    __break(0xC471u);
    return result;
  }
  v26 = v77;
  v77 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v78;
  v78 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v79;
  v79 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v25);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = qword_1ECE7C4A0;
  v30 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v30)
  {
    WTF::String::utf8();
    v31 = v75 ? (char *)v75 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v31;
    _os_log_impl(&dword_1940B8000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v30 = (uint64_t)v75;
    v75 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        v30 = WTF::fastFree((WTF *)v30, a2);
      else
        --*(_DWORD *)v30;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490)
  {
    v32 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v33 = *v32;
      if ((v33 & 1) != 0)
        break;
      v34 = __ldaxr(v32);
      if (v34 == v33)
      {
        if (!__stxr(v33 | 1, v32))
        {
          v35 = WTF::Logger::observers((WTF::Logger *)v30);
          v36 = *(unsigned int *)(v35 + 12);
          if ((_DWORD)v36)
          {
            v37 = *(uint64_t **)v35;
            v38 = *(_QWORD *)v35 + 8 * v36;
            do
            {
              v39 = *v37;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v74);
              LODWORD(v82) = 0;
              WTF::String::String((WTF::String *)&v83, "error = ");
              v84 = 0;
              WTF::String::number((WTF::String *)a2);
              v75 = 0;
              v76 = 0;
              v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v76) = 3;
              v75 = v40;
              v41 = HIDWORD(v76);
              *((_DWORD *)v40 + 4 * HIDWORD(v76)) = buf;
              v42 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v40 + 2 * v41 + 1) = v42;
              *((_DWORD *)v40 + 4 * (v41 + 1)) = (_DWORD)v82;
              v43 = v83;
              if (v83)
                *(_DWORD *)v83 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
              *((_DWORD *)v40 + 4 * (v41 + 2)) = v84;
              v44 = v85;
              if (v85)
                *(_DWORD *)v85 += 2;
              *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
              HIDWORD(v76) = v41 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v39 + 16))(v39, &WebCore::LogMedia, 1, &v75);
              v45 = v75;
              if (HIDWORD(v76))
              {
                v46 = 16 * HIDWORD(v76);
                v47 = (WTF::StringImpl **)((char *)v75 + 8);
                do
                {
                  v48 = *v47;
                  *v47 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                  v47 += 2;
                  v46 -= 16;
                }
                while (v46);
                v45 = v75;
              }
              if (v45)
              {
                v75 = 0;
                LODWORD(v76) = 0;
                WTF::fastFree(v45, a2);
              }
              v49 = v85;
              v85 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v83;
              v83 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v51 -= 2;
              }
              ++v37;
            }
            while (v37 != (uint64_t *)v38);
          }
          v52 = __ldxr(v32);
          if (v52 == 1)
          {
            if (!__stlxr(0, v32))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  this = v80;
  v80 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WebCore::HTMLMediaElement *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_110:
  v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (v53
    && (v54 = *(_QWORD *)(v53 + 8)) != 0
    && (v55 = *(_QWORD *)(v54 + 24)) != 0
    && (v56 = *(_QWORD *)(v55 + 8)) != 0)
  {
    ++*(_DWORD *)v56;
    {
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
      qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
      unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
      qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
      unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
      qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
    }
    v57 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[a2];
    if (v57)
      *v57 += 2;
    v74[0] = v57;
    if ((*(_QWORD *)(*(_QWORD *)(v56 + 112) + 672) & 0x800000000000) == 0
      || (v58 = *(uint64_t **)(v56 + 256)) == 0)
    {
      v58 = WebCore::emptyDiagnosticLoggingClient(this);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t *, __int128 *, _QWORD *, uint64_t, _QWORD))(*v58 + 8))(v58, &buf, v74, 1, 0);
    v59 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v59 -= 2;
    }
    v60 = 0;
    v61 = (WTF::StringImpl *)v74[0];
  }
  else
  {
    {
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
      qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
      unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
      qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
      unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
      qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
    }
    v61 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[a2];
    v56 = 0;
    if (v61)
      *(_DWORD *)v61 += 2;
    v60 = 1;
  }
  v74[0] = 0;
  if (!v61)
  {
LABEL_132:
    if ((v60 & 1) == 0)
      goto LABEL_133;
    goto LABEL_135;
  }
  if (*(_DWORD *)v61 != 2)
  {
    *(_DWORD *)v61 -= 2;
    goto LABEL_132;
  }
  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)a2);
  if ((v60 & 1) == 0)
  {
LABEL_133:
    if (*(_DWORD *)v56 == 1)
    {
      WebCore::Page::~Page(v56);
      WTF::fastFree(v68, v69);
    }
    else
    {
      --*(_DWORD *)v56;
    }
  }
LABEL_135:
  v62 = (WebCore::PlatformMediaSession *)*((_QWORD *)v3 + 200);
  if (!v62)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(v3);
    v62 = (WebCore::PlatformMediaSession *)*((_QWORD *)v3 + 200);
  }
  v63 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v62 + 10) + 40) + 8) + 696);
  if (v63)
  {
    WebCore::LocalDOMWindow::protectedNavigator(v63, &buf);
    v64 = (_DWORD *)buf;
    WebCore::NavigatorMediaSession::mediaSession((WebCore::NavigatorMediaSession *)buf, v65);
    if (v64[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 16))(v64);
    else
      --v64[4];
  }
  result = WebCore::PlatformMediaSession::clientCharacteristicsChanged(v62, 0);
  if (!*((_BYTE *)v3 + 1648))
  {
    v66 = *((_QWORD *)v3 + 200);
    if (!v66)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(v3);
      v66 = *((_QWORD *)v3 + 200);
    }
    return WebCore::PlatformMediaSession::setActive(v66, 0);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::updateVolume(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  _DWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(this + 1136);
  if (v1)
  {
    v2 = this;
    v3 = *(double *)(v1 + 216);
    v4 = v3;
    if (*(double *)(this + 984) != v4)
    {
      *(double *)(this + 984) = v4;
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
        v6 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v7 = *(_QWORD *)(v6 + 40);
      if (!v7)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
        v7 = *(_QWORD *)(v6 + 40);
      }
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      *(_QWORD *)v8 = off_1E33A4B48;
      *(_QWORD *)(v8 + 8) = 0;
      v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8204;
      v11 = *(_QWORD *)(v7 + 2264) != 0;
      *(_DWORD *)(v8 + 16) = 1;
      *(_DWORD *)(v8 + 20) = v10 | v11;
      v12 = *(_DWORD **)(v7 + 2264);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(v8 + 24) = v12;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = v9;
      *(_QWORD *)(v8 + 64) = 0;
      v13 = v8;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v2 + 112), v2, 9, v2 + 824, &v13);
      this = v13;
      v13 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 16) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 16);
      }
    }
  }
  return this;
}

void WebCore::HTMLMediaElement::userCancelledLoad(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  const char *v5;
  WebCore *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  WebCore *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  const char *v31;
  WTF::MediaTime *Event;
  void *v33;
  uint64_t v34;
  WebCore::MediaController *v35;
  uint64_t v36;
  const WTF::MediaTime *v37;
  bmalloc::api *v38;
  void *v39;
  __int16 v40;
  __int16 v41;
  uint64_t v42;
  WebCore::Node *ElementSibling;
  WebCore::Element *v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  unsigned __int8 v49;

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v45 = "HTMLMediaElement";
  v46 = 17;
  v47 = "userCancelledLoad";
  v48 = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v45);
  }
  if (*((_DWORD *)this + 225) && *((int *)this + 226) <= 0)
  {
    WebCore::HTMLMediaElement::clearMediaPlayer(this);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v45;
    v6 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = 0x100000001;
    *((_QWORD *)v6 + 1) = v5;
    v8 = (WTF *)*((_QWORD *)this + 120);
    *((_QWORD *)this + 120) = v6;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        v23 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v7);
          else
            *(_DWORD *)v23 -= 2;
        }
        v6 = (WebCore *)WTF::fastFree(v8, v7);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(StatusReg + 736);
    if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
      v11 = WebCore::threadGlobalDataSlow(v6);
    v12 = *(_QWORD *)(v11 + 40);
    if (!v12)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
      v12 = *(_QWORD *)(v11 + 40);
    }
    v13 = (char *)bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    *((_DWORD *)v13 + 4) = 1;
    *(_QWORD *)v13 = off_1E33A4B48;
    *((_QWORD *)v13 + 1) = 0;
    *((_DWORD *)v13 + 5) = *((_DWORD *)v13 + 5) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v12 + 64) != 0);
    v15 = *(_DWORD **)(v12 + 64);
    if (v15)
      *v15 += 2;
    *((_QWORD *)v13 + 3) = v15;
    *((_QWORD *)v13 + 4) = 0;
    *((_QWORD *)v13 + 5) = 0;
    *((_QWORD *)v13 + 6) = 0;
    *((_QWORD *)v13 + 7) = v14;
    *((_QWORD *)v13 + 8) = 0;
    v45 = v13;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v45);
    v16 = (WebCore *)v45;
    v45 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 4) == 1)
        v16 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
      else
        --*((_DWORD *)v16 + 4);
    }
    v17 = (_DWORD *)*((_QWORD *)this + 144);
    *((_QWORD *)this + 144) = 0;
    if (v17)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 80))(v17);
      v16 = (WebCore *)(*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v17 + 104))(v17, 0);
      if (v17[2] == 1)
        v16 = (WebCore *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      else
        --v17[2];
    }
    if (*((_DWORD *)this + 226))
    {
      *((_DWORD *)this + 225) = 1;
    }
    else
    {
      *((_DWORD *)this + 225) = 0;
      v49 = 1;
      v18 = (_DWORD *)((char *)this + 1265);
      v19 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
      if ((v19 & 0x400000000) == 0)
      {
        v20 = *((_QWORD *)this + 228);
        v21 = *((_QWORD *)this + 229);
        v45 = "HTMLMediaElement";
        v46 = 17;
        v47 = "setShowPosterFlag";
        v48 = v21;
        if (*(_BYTE *)(v20 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v45);
          v22 = v49;
          v19 = *v18 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
        }
        else
        {
          v22 = 1;
        }
        v24 = v19 & 0xFFFFFFFBFFFFFFFFLL;
        *v18 = v24;
        *(_WORD *)((char *)this + 1269) = (v24 | (v22 << 34)) >> 32;
        v16 = (WebCore *)WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
        if ((*((_BYTE *)this + 71) & 1) != 0)
        {
          v42 = *((_QWORD *)this + 4);
          if (!v42 || (*(_WORD *)(v42 + 28) & 8) == 0 || (*(_BYTE *)(v42 + 70) & 4) == 0)
          {
            ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
            v16 = WebCore::invalidateForSiblingCombinators(ElementSibling, v44);
          }
        }
      }
      v25 = *(_QWORD *)(StatusReg + 736);
      if (!v25 || (v26 = *(_QWORD *)(v25 + 96)) == 0)
        v26 = WebCore::threadGlobalDataSlow(v16);
      v27 = *(_QWORD *)(v26 + 40);
      if (!v27)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v26);
        v27 = *(_QWORD *)(v26 + 40);
      }
      v28 = (char *)bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v28);
      *((_DWORD *)v28 + 4) = 1;
      *(_QWORD *)v28 = off_1E33A4B48;
      *((_QWORD *)v28 + 1) = 0;
      *((_DWORD *)v28 + 5) = *((_DWORD *)v28 + 5) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v27 + 720) != 0);
      v30 = *(_DWORD **)(v27 + 720);
      if (v30)
        *v30 += 2;
      *((_QWORD *)v28 + 3) = v30;
      *((_QWORD *)v28 + 4) = 0;
      *((_QWORD *)v28 + 5) = 0;
      *((_QWORD *)v28 + 6) = 0;
      *((_QWORD *)v28 + 7) = v29;
      *((_QWORD *)v28 + 8) = 0;
      v45 = v28;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v45);
      v31 = v45;
      v45 = 0;
      if (v31)
      {
        if (*((_DWORD *)v31 + 4) == 1)
          (*(void (**)(const char *))(*(_QWORD *)v31 + 8))(v31);
        else
          --*((_DWORD *)v31 + 4);
      }
    }
    Event = (WTF::MediaTime *)WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)this, 0);
    v34 = *((_QWORD *)this + 133);
    *((_QWORD *)this + 133) = 0;
    if (v34)
    {
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        v40 = *(_WORD *)(v34 + 30);
        if ((v40 & 0x400) == 0)
        {
          v41 = *(_WORD *)(v34 + 28);
          if ((v41 & 0xF000) == 0x9000)
          {
            Event = (WTF::MediaTime *)WebCore::Document::removedLastRef((WebCore::Document *)v34, v33);
          }
          else
          {
            if ((v41 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v34 + 160) + 16))(*(_QWORD *)(v34 + 160));
              v40 = *(_WORD *)(v34 + 30);
            }
            *(_WORD *)(v34 + 30) = v40 | 0x400;
            Event = (WTF::MediaTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
          }
        }
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
    }
    *((_DWORD *)this + 226) = 0;
    v35 = (WebCore::MediaController *)*((_QWORD *)this + 177);
    if (v35)
    {
      ++*((_DWORD *)v35 + 2);
      WebCore::MediaController::updateReadyState((uint64_t)v35);
      WebCore::MediaController::updatePlaybackState((uint64_t)v35);
      if (*((_DWORD *)v35 + 2) == 1)
      {
        WebCore::MediaController::~MediaController(v35);
        Event = (WTF::MediaTime *)bmalloc::api::isoDeallocate(v38, v39);
      }
      else
      {
        --*((_DWORD *)v35 + 2);
      }
    }
    v36 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (!*(_BYTE *)(v36 + 467) && !*(_BYTE *)(v36 + 468))
    {
      v37 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(Event);
      WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)this, v37);
    }
  }
}

uint64_t WebCore::compareCueInterval(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(_DWORD **)(a1 + 32);
  if (v2)
    ++v2[6];
  v3 = *(_DWORD **)(a2 + 32);
  if (v3)
  {
    ++v3[6];
    v4 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(_QWORD *)v2 + 112))(v2, v3);
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  else
  {
    v4 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v2 + 112))(v2, 0);
  }
  if (v2[6] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 72))(v2);
  else
    --v2[6];
  return v4;
}

WTF *WTF::Vector<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  WTF *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_20:
    v18 = *(WTF **)v2;
    if (v5)
    {
      memmove(v18, *(const void **)a2, 56 * v5);
      v5 = *((_DWORD *)v2 + 3);
      v18 = *(WTF **)v2;
    }
    v19 = *((_DWORD *)a2 + 3);
    if (v5 != v19)
    {
      v20 = (char *)v18 + 56 * v5;
      v21 = *(_QWORD *)a2 + 56 * v5;
      v22 = 56 * v19 - 56 * v5;
      do
      {
        v23 = *(_OWORD *)v21;
        v24 = *(_OWORD *)(v21 + 16);
        v25 = *(_OWORD *)(v21 + 32);
        *((_QWORD *)v20 + 6) = *(_QWORD *)(v21 + 48);
        *((_OWORD *)v20 + 1) = v24;
        *((_OWORD *)v20 + 2) = v25;
        *(_OWORD *)v20 = v23;
        v20 += 56;
        v21 += 56;
        v22 -= 56;
      }
      while (v22);
      v5 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)v2 + 3) = v5;
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_19;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_19:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_20;
  }
  if (v7 < 0x4924925)
  {
    v8 = *(WTF **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = 56 * v7;
    v11 = WTF::fastMalloc((WTF *)(56 * v7));
    *((_DWORD *)v2 + 2) = v10 / 0x38;
    *(_QWORD *)v2 = v11;
    if ((_DWORD)v9)
    {
      v13 = 56 * v9;
      v14 = v8;
      do
      {
        v15 = *(_OWORD *)v14;
        v16 = *((_OWORD *)v14 + 1);
        v17 = *((_OWORD *)v14 + 2);
        *(_QWORD *)(v11 + 48) = *((_QWORD *)v14 + 6);
        *(_OWORD *)(v11 + 16) = v16;
        *(_OWORD *)(v11 + 32) = v17;
        *(_OWORD *)v11 = v15;
        v11 += 56;
        v14 = (WTF *)((char *)v14 + 56);
        v13 -= 56;
      }
      while (v13);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v8, v12);
    }
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

WebCore *WebCore::HTMLMediaElement::scheduleTimeupdateEvent(WebCore::HTMLMediaElement *this, int a2)
{
  WebCore *result;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  __int128 v14;
  WebCore *v15;

  result = (WebCore *)WTF::MonotonicTime::now(this);
  v6 = v5;
  if (!a2 || v5 - *((double *)this + 129) >= 0.25)
  {
    *(_QWORD *)&v14 = WebCore::HTMLMediaElement::currentMediaTime(this);
    *((_QWORD *)&v14 + 1) = v7;
    result = (WebCore *)WTF::MediaTime::compare((WTF::MediaTime *)&v14, (WebCore::HTMLMediaElement *)((char *)this + 1040));
    if ((_DWORD)result)
    {
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
        v9 = WebCore::threadGlobalDataSlow(result);
      v10 = *(_QWORD *)(v9 + 40);
      if (!v10)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
        v10 = *(_QWORD *)(v9 + 40);
      }
      v11 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      *(_DWORD *)(v11 + 16) = 1;
      *(_QWORD *)v11 = off_1E33A4B48;
      *(_QWORD *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v10 + 2048) != 0);
      v13 = *(_DWORD **)(v10 + 2048);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v11 + 24) = v13;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = v12;
      *(_QWORD *)(v11 + 64) = 0;
      v15 = (WebCore *)v11;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v15);
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 4);
      }
      *((double *)this + 129) = v6;
      *((_QWORD *)this + 130) = v14;
      *(_QWORD *)((char *)this + 1045) = *(_QWORD *)((char *)&v14 + 5);
    }
  }
  return result;
}

uint64_t WebCore::eventTimeCueCompare(WTF::MediaTime *a1, const WTF::MediaTime *a2)
{
  WTF::MediaTime *v4;
  const WTF::MediaTime *v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  WebCore::TextTrack *v17;
  uint64_t v18;
  char v19;
  WebCore::TextTrack *v20;
  int v21;
  void *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  WTF::MediaTime *v28[2];

  if (WTF::MediaTime::compare(a1, a2))
  {
    v28[0] = (WTF::MediaTime *)WTF::MediaTime::operator-();
    v28[1] = v4;
    v5 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v28[0]);
    return WTF::MediaTime::compare((WTF::MediaTime *)v28, v5) == -1;
  }
  v7 = (_QWORD *)*((_QWORD *)a1 + 2);
  v8 = v7[13];
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = v9 - 120;
    if (!v9)
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = (_QWORD *)*((_QWORD *)a2 + 2);
  v12 = v11[13];
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v14 = v13 - 120;
    else
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
  if (v10 != v14)
  {
    if (v8 && (v15 = *(_QWORD *)(v8 + 8)) != 0)
    {
      v16 = 0;
      v17 = (WebCore::TextTrack *)(v15 - 120);
      *(_DWORD *)(v15 - 104) += 2;
    }
    else
    {
      v17 = 0;
      v16 = 1;
    }
    if (v12 && (v18 = *(_QWORD *)(v12 + 8)) != 0)
    {
      v19 = 0;
      v20 = (WebCore::TextTrack *)(v18 - 120);
      *(_DWORD *)(v18 - 104) += 2;
    }
    else
    {
      v20 = 0;
      v19 = 1;
    }
    v21 = WebCore::TextTrack::trackIndex(v17, v11);
    v6 = v21 < (int)WebCore::TextTrack::trackIndex(v20, v22);
    if ((v19 & 1) == 0)
    {
      v23 = *((_DWORD *)v20 + 4) - 1;
      if (*((_DWORD *)v20 + 4) == 1)
      {
        (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v20 + 16))(v20);
        v23 = *((_DWORD *)v20 + 4);
      }
      else
      {
        *((_DWORD *)v20 + 4) = v23;
      }
      v24 = v23 - 1;
      if (!v24)
      {
        (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v20 + 16))(v20);
        if ((v16 & 1) != 0)
          return v6;
        goto LABEL_27;
      }
      *((_DWORD *)v20 + 4) = v24;
    }
    if ((v16 & 1) != 0)
      return v6;
LABEL_27:
    v25 = *((_DWORD *)v17 + 4) - 1;
    if (*((_DWORD *)v17 + 4) == 1)
    {
      (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v17 + 16))(v17);
      v25 = *((_DWORD *)v17 + 4);
    }
    else
    {
      *((_DWORD *)v17 + 4) = v25;
    }
    v26 = v25 - 1;
    if (v26)
      *((_DWORD *)v17 + 4) = v26;
    else
      (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v17 + 16))(v17);
    return v6;
  }
  return (*(uint64_t (**)(_QWORD *))(*v7 + 112))(v7);
}

uint64_t WebCore::HTMLMediaElement::executeCueEnterOrExitActionForTime(uint64_t result, unsigned int *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WebCore::TextTrackCue *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  unsigned int *v25;
  _DWORD *v26;
  double v27;
  double v28;
  uint64_t v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  __int128 v44;
  const char *v45;
  uint64_t v46;
  __int128 v47;

  v3 = *((_QWORD *)a2 + 13);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v7 = result;
  if (*(_BYTE *)(result + 1768))
  {
    if (*(_DWORD *)(v4 + 108) == 2 && *(_DWORD *)(v4 + 104) == 2)
    {
      v44 = *((_OWORD *)a2 + 4);
      WTF::MediaTime::toDouble((WTF::MediaTime *)&v44);
      v9 = v8;
      v44 = *((_OWORD *)a2 + 5);
      result = WTF::MediaTime::toDouble((WTF::MediaTime *)&v44);
      if (v9 < v10)
      {
        if (a3)
        {
          if (*(_BYTE *)(v7 + 1769) && *(_BYTE *)(v7 + 1744) == 1)
          {
            v11 = *(_QWORD *)(v7 + 1824);
            v12 = *(_QWORD *)(v7 + 1832);
            *(_QWORD *)&v44 = "HTMLMediaElement";
            *((_QWORD *)&v44 + 1) = 17;
            v45 = "pausePlaybackForExtendedTextDescription";
            v46 = v12;
            if (*(_BYTE *)(v11 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v44);
            WebCore::HTMLMediaElement::setSpeechSynthesisState((WebCore::HTMLMediaElement *)v7, 2u);
          }
          goto LABEL_14;
        }
        v17 = *(WebCore::TextTrackCue **)(v7 + 1752);
        if (!v17
          || (v44 = *((_OWORD *)v17 + 5),
              v47 = *((_OWORD *)a2 + 5),
              WTF::MediaTime::compare((WTF::MediaTime *)&v44, (const WTF::MediaTime *)&v47))
          || (v18 = (*(uint64_t (**)(WebCore::TextTrackCue *))(*(_QWORD *)v17 + 128))(v17),
              v18 != (*(unsigned int (**)(unsigned int *))(*(_QWORD *)a2 + 128))(a2))
          || !WebCore::TextTrackCue::hasEquivalentStartTime(v17, (const WebCore::TextTrackCue *)a2)
          || (result = (*(uint64_t (**)(WebCore::TextTrackCue *, unsigned int *))(*(_QWORD *)v17 + 256))(v17, a2), (result & 1) == 0))
        {
          v19 = *(_QWORD *)(v7 + 1824);
          v20 = *(_QWORD *)(v7 + 1832);
          *(_QWORD *)&v44 = "HTMLMediaElement";
          *((_QWORD *)&v44 + 1) = 17;
          v45 = "speakCueText";
          v46 = v20;
          if (*(_BYTE *)(v19 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrackCue>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v44, (uint64_t)a2);
          if (*(_BYTE *)(v7 + 1744))
          {
            v21 = *(_QWORD *)(v7 + 1824);
            v22 = *(_QWORD *)(v7 + 1832);
            *(_QWORD *)&v44 = "HTMLMediaElement";
            *((_QWORD *)&v44 + 1) = 17;
            v45 = "cancelSpeakingCueText";
            v46 = v22;
            if (*(_BYTE *)(v21 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v44);
            WebCore::HTMLMediaElement::setSpeechSynthesisState((WebCore::HTMLMediaElement *)v7, 0);
          }
          v23 = a2[6] + 1;
          a2[6] = v23;
          v24 = *(_DWORD **)(v7 + 1752);
          *(_QWORD *)(v7 + 1752) = a2;
          if (v24)
          {
            if (v24[6] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
              v25 = *(unsigned int **)(v7 + 1752);
              if (!v25)
                goto LABEL_36;
            }
            else
            {
              --v24[6];
              v25 = a2;
            }
            v23 = v25[6];
          }
          else
          {
            v25 = a2;
          }
          v25[6] = v23 + 1;
LABEL_36:
          v26 = WebCore::HTMLMediaElement::speechSynthesis((WebCore::HTMLMediaElement *)v7);
          ++v26[6];
          v27 = *(double *)(v7 + 880);
          if (v27 == 0.0)
            v27 = *(double *)(v7 + 872);
          v28 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 1456))(v7);
          v29 = *(_QWORD *)(v7 + 296);
          if (v29)
            goto LABEL_75;
          v29 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v29 = 1;
          *(_QWORD *)(v29 + 8) = v7;
          v31 = *(unsigned int **)(v7 + 296);
          *(_QWORD *)(v7 + 296) = v29;
          if (!v31)
            goto LABEL_75;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, v30);
          }
          v29 = *(_QWORD *)(v7 + 296);
          if (v29)
          {
LABEL_75:
            do
              v34 = __ldaxr((unsigned int *)v29);
            while (__stlxr(v34 + 1, (unsigned int *)v29));
          }
          v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v35 = &off_1E33C59F8;
          v35[1] = v29;
          *(_QWORD *)&v44 = v35;
          (*(void (**)(unsigned int *, _DWORD *, __int128 *, double, double))(*(_QWORD *)v25 + 224))(v25, v26, &v44, v27, v28);
          v36 = v44;
          *(_QWORD *)&v44 = 0;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          if (v26[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 64))(v26);
          else
            --v26[6];
          if (v25[6] == 1)
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 72))(v25);
          else
            --v25[6];
          if ((*(_DWORD *)(v7 + 1265) & 0x40400) != 0)
            v37 = 3;
          else
            v37 = 1;
          WebCore::HTMLMediaElement::setSpeechSynthesisState((WebCore::HTMLMediaElement *)v7, v37);
        }
LABEL_55:
        v38 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v38 || (v39 = *(_QWORD *)(v38 + 96)) == 0)
          v39 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v40 = *(_QWORD *)(v39 + 40);
        if (!v40)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v39);
          v40 = *(_QWORD *)(v39 + 40);
        }
        v16 = (_QWORD *)(v40 + 768);
        goto LABEL_61;
      }
    }
  }
  if (!a3)
    goto LABEL_55;
LABEL_14:
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow((WebCore *)result);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD *)(v14 + 40);
  }
  v16 = (_QWORD *)(v15 + 792);
LABEL_61:
  v41 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v41);
  *(_DWORD *)(v41 + 16) = 1;
  *(_QWORD *)v41 = off_1E33A4B48;
  *(_QWORD *)(v41 + 8) = 0;
  *(_DWORD *)(v41 + 20) = *(_DWORD *)(v41 + 20) & 0xFFC00000 | 0x1E8200 | (*v16 != 0);
  v43 = (_DWORD *)*v16;
  if (*v16)
    *v43 += 2;
  *(_QWORD *)(v41 + 24) = v43;
  *(_QWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 40) = 0;
  *(_QWORD *)(v41 + 48) = 0;
  *(_QWORD *)(v41 + 56) = v42;
  *(_QWORD *)(v41 + 64) = 0;
  *(_QWORD *)&v44 = v41;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal(a2 + 8, (uint64_t)a2, 9, v7 + 824, (uint64_t *)&v44);
  result = v44;
  *(_QWORD *)&v44 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 16);
  }
  return result;
}

BOOL WebCore::trackIndexCompare(WebCore::TextTrack **a1, WebCore::TextTrack **a2)
{
  int v3;
  void *v4;

  v3 = WebCore::TextTrack::trackIndex(*a1, a2);
  return v3 < (int)WebCore::TextTrack::trackIndex(*a2, v4);
}

void WebCore::HTMLMediaElement::setSpeechSynthesisState(WebCore::HTMLMediaElement *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::String *v14;
  WTF::String *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  NSObject *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::String *v60;
  WTF::String *v61;
  WTF::Logger *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::Logger *v75;
  uint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::Logger *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::Logger *v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  char v120;
  int v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  void (*v125)(void);
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::Logger *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  __int128 buf;
  int v157;
  WTF::StringImpl *v158;
  int v159;
  WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162;
  int v163;
  WTF::StringImpl *v164;
  int v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  int v169;
  WTF::StringImpl *v170;
  int v171;
  WTF::StringImpl *v172;
  int v173;
  WTF::StringImpl *v174;
  int v175;
  WTF::StringImpl *v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 1770))
    return;
  v2 = a2;
  if (*((unsigned __int8 *)this + 1744) == a2)
    return;
  v4 = *((_QWORD *)this + 228);
  if (!*((_QWORD *)this + 219))
  {
    v34 = *((_QWORD *)this + 229);
    v131 = "HTMLMediaElement";
    v132 = 17;
    v133 = "setSpeechSynthesisState";
    v134 = v34;
    v129 = WebCore::HTMLMediaElement::currentMediaTime(this);
    v130 = v35;
    if (!*(_BYTE *)(v4 + 12))
      goto LABEL_273;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v131);
    WTF::String::String((WTF::String *)&v148, "changing state from ");
    v36 = *((unsigned __int8 *)this + 1744);
    if ((byte_1EE337C0C & 1) == 0)
    {
      dword_1ECE7BA70 += 2;
      qword_1EE337C20[10] = &dword_1ECE7BA70;
      dword_1ECE7BA90 += 2;
      qword_1EE337C20[11] = &dword_1ECE7BA90;
      dword_1ECE7BAB0 += 2;
      qword_1EE337C20[12] = &dword_1ECE7BAB0;
      dword_1ECE7BAD0 += 2;
      qword_1EE337C20[13] = &dword_1ECE7BAD0;
      byte_1EE337C0C = 1;
    }
    v37 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v36 + 104];
    if (v37)
      *(_DWORD *)v37 += 2;
    WTF::String::String((WTF::String *)&v147, " to ");
    if ((byte_1EE337C0C & 1) == 0)
    {
      dword_1ECE7BA70 += 2;
      qword_1EE337C20[10] = &dword_1ECE7BA70;
      dword_1ECE7BA90 += 2;
      qword_1EE337C20[11] = &dword_1ECE7BA90;
      dword_1ECE7BAB0 += 2;
      qword_1EE337C20[12] = &dword_1ECE7BAB0;
      dword_1ECE7BAD0 += 2;
      qword_1EE337C20[13] = &dword_1ECE7BAD0;
      byte_1EE337C0C = 1;
    }
    v38 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v2 + 104];
    if (v38)
      *(_DWORD *)v38 += 2;
    WTF::String::String((WTF::String *)&v146, ", at time ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v129);
    v155 = v37;
    *(_QWORD *)&buf = v149;
    v143 = v148;
    v153 = v38;
    v154 = v147;
    v151 = v145;
    v152 = v146;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v143, (uint64_t *)&v155, (uint64_t *)&v154, (uint64_t *)&v153, (uint64_t *)&v152, (uint64_t *)&v151, &v150);
    if (!v150)
    {
      __break(0xC471u);
      JUMPOUT(0x195C12C2CLL);
    }
    v40 = v145;
    v145 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v146;
    v146 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy(v41, v39);
        if (!v38)
          goto LABEL_80;
        goto LABEL_78;
      }
      *(_DWORD *)v41 -= 2;
    }
    if (!v38)
      goto LABEL_80;
LABEL_78:
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
LABEL_80:
    v42 = v147;
    v147 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::destroy(v42, v39);
        if (!v37)
          goto LABEL_86;
        goto LABEL_84;
      }
      *(_DWORD *)v42 -= 2;
    }
    if (!v37)
      goto LABEL_86;
LABEL_84:
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v39);
    else
      *(_DWORD *)v37 -= 2;
LABEL_86:
    v43 = v148;
    v148 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v39);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = v149;
    v149 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = qword_1ECE7C4A0;
    v46 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v46)
    {
      WTF::String::utf8();
      v47 = v143 ? (char *)v143 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v47;
      _os_log_impl(&dword_1940B8000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v46 = (uint64_t)v143;
      v143 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
          v46 = WTF::fastFree((WTF *)v46, v28);
        else
          --*(_DWORD *)v46;
      }
    }
    v48 = &byte_1EE337000;
    if (WebCore::LogMedia)
    {
      v49 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v50 = *v49;
        if ((v50 & 1) != 0)
          break;
        v51 = __ldaxr(v49);
        if (v51 == v50)
        {
          if (!__stxr(v50 | 1, v49))
          {
            v91 = WTF::Logger::observers((WTF::Logger *)v46);
            v92 = *(unsigned int *)(v91 + 12);
            if ((_DWORD)v92)
            {
              v93 = *(uint64_t **)v91;
              v128 = *(_QWORD *)v91 + 8 * v92;
              do
              {
                v94 = *v93;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v131);
                v157 = 0;
                WTF::String::String((WTF::String *)&v158, "changing state from ");
                v95 = *((unsigned __int8 *)this + 1744);
                v159 = 0;
                if ((v48[3084] & 1) == 0)
                {
                  dword_1ECE7BA70 += 2;
                  qword_1EE337C20[10] = &dword_1ECE7BA70;
                  dword_1ECE7BA90 += 2;
                  qword_1EE337C20[11] = &dword_1ECE7BA90;
                  dword_1ECE7BAB0 += 2;
                  qword_1EE337C20[12] = &dword_1ECE7BAB0;
                  dword_1ECE7BAD0 += 2;
                  qword_1EE337C20[13] = &dword_1ECE7BAD0;
                  byte_1EE337C0C = 1;
                }
                v96 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v95 + 104];
                if (v96)
                  *(_DWORD *)v96 += 2;
                v160 = v96;
                v161 = 0;
                WTF::String::String((WTF::String *)&v162, " to ");
                v163 = 0;
                if ((v48[3084] & 1) == 0)
                {
                  dword_1ECE7BA70 += 2;
                  qword_1EE337C20[10] = &dword_1ECE7BA70;
                  dword_1ECE7BA90 += 2;
                  qword_1EE337C20[11] = &dword_1ECE7BA90;
                  dword_1ECE7BAB0 += 2;
                  qword_1EE337C20[12] = &dword_1ECE7BAB0;
                  dword_1ECE7BAD0 += 2;
                  qword_1EE337C20[13] = &dword_1ECE7BAD0;
                  byte_1EE337C0C = 1;
                }
                v97 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v2 + 104];
                if (v97)
                  *(_DWORD *)v97 += 2;
                v164 = v97;
                v165 = 0;
                WTF::String::String((WTF::String *)&v166, ", at time ");
                v167 = 1;
                WTF::MediaTime::toJSONString((WTF::MediaTime *)&v129);
                v143 = 0;
                v144 = 0;
                v98 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v144) = 7;
                v143 = v98;
                v99 = HIDWORD(v144);
                *((_DWORD *)v98 + 4 * HIDWORD(v144)) = buf;
                v100 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v98 + 2 * v99 + 1) = v100;
                *((_DWORD *)v98 + 4 * (v99 + 1)) = v157;
                v101 = v158;
                if (v158)
                  *(_DWORD *)v158 += 2;
                *((_QWORD *)v98 + 2 * (v99 + 1) + 1) = v101;
                *((_DWORD *)v98 + 4 * (v99 + 2)) = v159;
                v102 = v160;
                if (v160)
                  *(_DWORD *)v160 += 2;
                *((_QWORD *)v98 + 2 * (v99 + 2) + 1) = v102;
                *((_DWORD *)v98 + 4 * (v99 + 3)) = v161;
                v103 = v162;
                if (v162)
                  *(_DWORD *)v162 += 2;
                *((_QWORD *)v98 + 2 * (v99 + 3) + 1) = v103;
                *((_DWORD *)v98 + 4 * (v99 + 4)) = v163;
                v104 = v164;
                if (v164)
                  *(_DWORD *)v164 += 2;
                *((_QWORD *)v98 + 2 * (v99 + 4) + 1) = v104;
                *((_DWORD *)v98 + 4 * (v99 + 5)) = v165;
                v105 = v166;
                if (v166)
                  *(_DWORD *)v166 += 2;
                *((_QWORD *)v98 + 2 * (v99 + 5) + 1) = v105;
                *((_DWORD *)v98 + 4 * (v99 + 6)) = v167;
                v106 = v168;
                if (v168)
                  *(_DWORD *)v168 += 2;
                *((_QWORD *)v98 + 2 * (v99 + 6) + 1) = v106;
                HIDWORD(v144) = v99 + 7;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v94 + 16))(v94, &WebCore::LogMedia, 0, &v143);
                v107 = v143;
                if (HIDWORD(v144))
                {
                  v108 = 16 * HIDWORD(v144);
                  v109 = (WTF::StringImpl **)((char *)v143 + 8);
                  do
                  {
                    v110 = *v109;
                    *v109 = 0;
                    if (v110)
                    {
                      if (*(_DWORD *)v110 == 2)
                        WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v28);
                      else
                        *(_DWORD *)v110 -= 2;
                    }
                    v109 += 2;
                    v108 -= 16;
                  }
                  while (v108);
                  v107 = v143;
                  v48 = &byte_1EE337000;
                }
                if (v107)
                {
                  v143 = 0;
                  LODWORD(v144) = 0;
                  WTF::fastFree(v107, v28);
                }
                v111 = v168;
                v168 = 0;
                if (v111)
                {
                  if (*(_DWORD *)v111 == 2)
                    WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v111 -= 2;
                }
                v112 = v166;
                v166 = 0;
                if (v112)
                {
                  if (*(_DWORD *)v112 == 2)
                    WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v112 -= 2;
                }
                v113 = v164;
                v164 = 0;
                if (v113)
                {
                  if (*(_DWORD *)v113 == 2)
                    WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v113 -= 2;
                }
                v114 = v162;
                v162 = 0;
                if (v114)
                {
                  if (*(_DWORD *)v114 == 2)
                    WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v114 -= 2;
                }
                v115 = v160;
                v160 = 0;
                if (v115)
                {
                  if (*(_DWORD *)v115 == 2)
                    WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v115 -= 2;
                }
                v116 = v158;
                v158 = 0;
                if (v116)
                {
                  if (*(_DWORD *)v116 == 2)
                    WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v116 -= 2;
                }
                v117 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v117)
                {
                  if (*(_DWORD *)v117 == 2)
                    WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v117 -= 2;
                }
                ++v93;
              }
              while (v93 != (uint64_t *)v128);
            }
            v118 = __ldxr(v49);
            if (v118 == 1)
            {
              if (!__stlxr(0, v49))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v119 = v150;
    v150 = 0;
    if (!v119)
      goto LABEL_273;
LABEL_271:
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)v119 -= 2;
    goto LABEL_273;
  }
  v5 = *((_QWORD *)this + 229);
  v131 = "HTMLMediaElement";
  v132 = 17;
  v133 = "setSpeechSynthesisState";
  v134 = v5;
  v129 = WebCore::HTMLMediaElement::currentMediaTime(this);
  v130 = v6;
  buf = *(_OWORD *)(*((_QWORD *)this + 219) + 64);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&buf);
  v8 = v7;
  buf = *(_OWORD *)(*((_QWORD *)this + 219) + 80);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&buf);
  if (*(_BYTE *)(v4 + 12))
  {
    v10 = v9;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v131);
    WTF::String::String((WTF::String *)&v142, "changing state from ");
    v11 = *((unsigned __int8 *)this + 1744);
    if ((byte_1EE337C0C & 1) == 0)
    {
      dword_1ECE7BA70 += 2;
      qword_1EE337C20[10] = &dword_1ECE7BA70;
      dword_1ECE7BA90 += 2;
      qword_1EE337C20[11] = &dword_1ECE7BA90;
      dword_1ECE7BAB0 += 2;
      qword_1EE337C20[12] = &dword_1ECE7BAB0;
      dword_1ECE7BAD0 += 2;
      qword_1EE337C20[13] = &dword_1ECE7BAD0;
      byte_1EE337C0C = 1;
    }
    v12 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v11 + 104];
    if (v12)
      *(_DWORD *)v12 += 2;
    WTF::String::String((WTF::String *)&v141, " to ");
    if ((byte_1EE337C0C & 1) == 0)
    {
      dword_1ECE7BA70 += 2;
      qword_1EE337C20[10] = &dword_1ECE7BA70;
      dword_1ECE7BA90 += 2;
      qword_1EE337C20[11] = &dword_1ECE7BA90;
      dword_1ECE7BAB0 += 2;
      qword_1EE337C20[12] = &dword_1ECE7BAB0;
      dword_1ECE7BAD0 += 2;
      qword_1EE337C20[13] = &dword_1ECE7BAD0;
      byte_1EE337C0C = 1;
    }
    v13 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v2 + 104];
    if (v13)
      *(_DWORD *)v13 += 2;
    WTF::String::String((WTF::String *)&v140, ", at time ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v129);
    v14 = (WTF::String *)WTF::String::String((WTF::String *)&v138, ", for cue ");
    WTF::String::number(v14, v8);
    v15 = (WTF::String *)WTF::String::String((WTF::String *)&v136, "..");
    WTF::String::number(v15, v10);
    v155 = v12;
    *(_QWORD *)&buf = v145;
    v143 = v142;
    v153 = v13;
    v154 = v141;
    v151 = v139;
    v152 = v140;
    v149 = v137;
    v150 = v138;
    v147 = v135;
    v148 = v136;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v143, (uint64_t *)&v155, (uint64_t *)&v154, (uint64_t *)&v153, (uint64_t *)&v152, (uint64_t *)&v151, (uint64_t *)&v150, &v146, (uint64_t *)&v149, (uint64_t *)&v148, (uint64_t *)&v147);
    if (!v146)
    {
      __break(0xC471u);
      JUMPOUT(0x195C12C24);
    }
    v17 = v135;
    v135 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v136;
    v136 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v137;
    v137 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v138;
    v138 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v139;
    v139 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v16);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v140;
    v140 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v16);
        if (!v13)
          goto LABEL_35;
        goto LABEL_33;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (!v13)
      goto LABEL_35;
LABEL_33:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v16);
    else
      *(_DWORD *)v13 -= 2;
LABEL_35:
    v23 = v141;
    v141 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v16);
        if (!v12)
          goto LABEL_41;
        goto LABEL_39;
      }
      *(_DWORD *)v23 -= 2;
    }
    if (!v12)
      goto LABEL_41;
LABEL_39:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v16);
    else
      *(_DWORD *)v12 -= 2;
LABEL_41:
    v24 = v142;
    v142 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v16);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v145;
    v145 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v16);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = qword_1ECE7C4A0;
    v27 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v27)
    {
      WTF::String::utf8();
      v29 = v143 ? (char *)v143 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v29;
      _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v27 = (uint64_t)v143;
      v143 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          v27 = WTF::fastFree((WTF *)v27, v28);
        else
          --*(_DWORD *)v27;
      }
    }
    if (WebCore::LogMedia)
    {
      v30 = v2;
      v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v32 = *v31;
        if ((v32 & 1) != 0)
          break;
        v33 = __ldaxr(v31);
        if (v33 == v32)
        {
          if (!__stxr(v32 | 1, v31))
          {
            v126 = v2;
            v52 = WTF::Logger::observers((WTF::Logger *)v27);
            v53 = *(unsigned int *)(v52 + 12);
            if ((_DWORD)v53)
            {
              v54 = *(uint64_t **)v52;
              v127 = *(_QWORD *)v52 + 8 * v53;
              v55 = &_MergedGlobals_1512[8 * v30];
              do
              {
                v56 = *v54;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v131);
                v157 = 0;
                WTF::String::String((WTF::String *)&v158, "changing state from ");
                v57 = *((unsigned __int8 *)this + 1744);
                v159 = 0;
                if ((byte_1EE337C0C & 1) == 0)
                {
                  dword_1ECE7BA70 += 2;
                  qword_1EE337C20[10] = &dword_1ECE7BA70;
                  dword_1ECE7BA90 += 2;
                  qword_1EE337C20[11] = &dword_1ECE7BA90;
                  dword_1ECE7BAB0 += 2;
                  qword_1EE337C20[12] = &dword_1ECE7BAB0;
                  dword_1ECE7BAD0 += 2;
                  qword_1EE337C20[13] = &dword_1ECE7BAD0;
                  byte_1EE337C0C = 1;
                }
                v58 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v57 + 104];
                if (v58)
                  *(_DWORD *)v58 += 2;
                v160 = v58;
                v161 = 0;
                WTF::String::String((WTF::String *)&v162, " to ");
                v163 = 0;
                if ((byte_1EE337C0C & 1) == 0)
                {
                  dword_1ECE7BA70 += 2;
                  qword_1EE337C20[10] = &dword_1ECE7BA70;
                  dword_1ECE7BA90 += 2;
                  qword_1EE337C20[11] = &dword_1ECE7BA90;
                  dword_1ECE7BAB0 += 2;
                  qword_1EE337C20[12] = &dword_1ECE7BAB0;
                  dword_1ECE7BAD0 += 2;
                  qword_1EE337C20[13] = &dword_1ECE7BAD0;
                  byte_1EE337C0C = 1;
                }
                v59 = (WTF::StringImpl *)*((_QWORD *)v55 + 13);
                if (v59)
                  *(_DWORD *)v59 += 2;
                v164 = v59;
                v165 = 0;
                WTF::String::String((WTF::String *)&v166, ", at time ");
                v167 = 1;
                WTF::MediaTime::toJSONString((WTF::MediaTime *)&v129);
                v169 = 0;
                v60 = (WTF::String *)WTF::String::String((WTF::String *)&v170, ", for cue ");
                v171 = 0;
                WTF::String::number(v60, v8);
                v173 = 0;
                v61 = (WTF::String *)WTF::String::String((WTF::String *)&v174, "..");
                v175 = 0;
                WTF::String::number(v61, v10);
                v143 = 0;
                v144 = 0;
                v62 = (WTF::Logger *)WTF::fastMalloc((WTF *)0xB0);
                LODWORD(v144) = 11;
                v143 = v62;
                v63 = HIDWORD(v144);
                *((_DWORD *)v62 + 4 * HIDWORD(v144)) = buf;
                v64 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v62 + 2 * v63 + 1) = v64;
                *((_DWORD *)v62 + 4 * (v63 + 1)) = v157;
                v65 = v158;
                if (v158)
                  *(_DWORD *)v158 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 1) + 1) = v65;
                *((_DWORD *)v62 + 4 * (v63 + 2)) = v159;
                v66 = v160;
                if (v160)
                  *(_DWORD *)v160 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 2) + 1) = v66;
                *((_DWORD *)v62 + 4 * (v63 + 3)) = v161;
                v67 = v162;
                if (v162)
                  *(_DWORD *)v162 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 3) + 1) = v67;
                *((_DWORD *)v62 + 4 * (v63 + 4)) = v163;
                v68 = v164;
                if (v164)
                  *(_DWORD *)v164 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 4) + 1) = v68;
                *((_DWORD *)v62 + 4 * (v63 + 5)) = v165;
                v69 = v166;
                if (v166)
                  *(_DWORD *)v166 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 5) + 1) = v69;
                *((_DWORD *)v62 + 4 * (v63 + 6)) = v167;
                v70 = v168;
                if (v168)
                  *(_DWORD *)v168 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 6) + 1) = v70;
                *((_DWORD *)v62 + 4 * (v63 + 7)) = v169;
                v71 = v170;
                if (v170)
                  *(_DWORD *)v170 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 7) + 1) = v71;
                *((_DWORD *)v62 + 4 * (v63 + 8)) = v171;
                v72 = v172;
                if (v172)
                  *(_DWORD *)v172 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 8) + 1) = v72;
                *((_DWORD *)v62 + 4 * (v63 + 9)) = v173;
                v73 = v174;
                if (v174)
                  *(_DWORD *)v174 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 9) + 1) = v73;
                *((_DWORD *)v62 + 4 * (v63 + 10)) = v175;
                v74 = v176;
                if (v176)
                  *(_DWORD *)v176 += 2;
                *((_QWORD *)v62 + 2 * (v63 + 10) + 1) = v74;
                HIDWORD(v144) = v63 + 11;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v56 + 16))(v56, &WebCore::LogMedia, 0, &v143);
                v75 = v143;
                if (HIDWORD(v144))
                {
                  v76 = 16 * HIDWORD(v144);
                  v77 = (WTF::StringImpl **)((char *)v143 + 8);
                  do
                  {
                    v78 = *v77;
                    *v77 = 0;
                    if (v78)
                    {
                      if (*(_DWORD *)v78 == 2)
                        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v28);
                      else
                        *(_DWORD *)v78 -= 2;
                    }
                    v77 += 2;
                    v76 -= 16;
                  }
                  while (v76);
                  v75 = v143;
                }
                if (v75)
                {
                  v143 = 0;
                  LODWORD(v144) = 0;
                  WTF::fastFree(v75, v28);
                }
                v79 = v176;
                v176 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                v80 = v174;
                v174 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                    WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v80 -= 2;
                }
                v81 = v172;
                v172 = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v81 -= 2;
                }
                v82 = v170;
                v170 = 0;
                if (v82)
                {
                  if (*(_DWORD *)v82 == 2)
                    WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v82 -= 2;
                }
                v83 = v168;
                v168 = 0;
                if (v83)
                {
                  if (*(_DWORD *)v83 == 2)
                    WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v83 -= 2;
                }
                v84 = v166;
                v166 = 0;
                if (v84)
                {
                  if (*(_DWORD *)v84 == 2)
                    WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v84 -= 2;
                }
                v85 = v164;
                v164 = 0;
                if (v85)
                {
                  if (*(_DWORD *)v85 == 2)
                    WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v85 -= 2;
                }
                v86 = v162;
                v162 = 0;
                if (v86)
                {
                  if (*(_DWORD *)v86 == 2)
                    WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v86 -= 2;
                }
                v87 = v160;
                v160 = 0;
                if (v87)
                {
                  if (*(_DWORD *)v87 == 2)
                    WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v87 -= 2;
                }
                v88 = v158;
                v158 = 0;
                if (v88)
                {
                  if (*(_DWORD *)v88 == 2)
                    WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v88 -= 2;
                }
                v89 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v89)
                {
                  if (*(_DWORD *)v89 == 2)
                    WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v89 -= 2;
                }
                ++v54;
              }
              while (v54 != (uint64_t *)v127);
            }
            v90 = __ldxr(v31);
            if (v90 == 1)
            {
              v2 = v126;
              if (!__stlxr(0, v31))
                break;
            }
            else
            {
              __clrex();
              v2 = v126;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v119 = v146;
    v146 = 0;
    if (!v119)
      goto LABEL_273;
    goto LABEL_271;
  }
LABEL_273:
  v120 = *((_BYTE *)this + 1770);
  *((_BYTE *)this + 1770) = 1;
  v121 = *((unsigned __int8 *)this + 1744);
  *((_BYTE *)this + 1744) = v2;
  switch(v2)
  {
    case 0u:
      *((_QWORD *)this + 220) = 0x3FF0000000000000;
      WebCore::HTMLMediaElement::updateVolume((uint64_t)this);
      if (v121 == 2 && (*(_DWORD *)((_BYTE *)this + 1265) & 0x400) != 0)
        (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1440))(this);
      v122 = *((_QWORD *)this + 219);
      if (v122)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 248))(v122);
        v123 = (_DWORD *)*((_QWORD *)this + 219);
        *((_QWORD *)this + 219) = 0;
        if (v123)
        {
          if (v123[6] == 1)
          {
            v125 = *(void (**)(void))(*(_QWORD *)v123 + 72);
            goto LABEL_286;
          }
          --v123[6];
        }
      }
      break;
    case 1u:
      *((_QWORD *)this + 220) = 0x3FD999999999999ALL;
      WebCore::HTMLMediaElement::updateVolume((uint64_t)this);
      v125 = *(void (**)(void))(**((_QWORD **)this + 219) + 232);
      goto LABEL_286;
    case 2u:
      if (*((_QWORD *)this + 219))
        WebCore::HTMLMediaElement::pauseInternal(this);
      break;
    case 3u:
      v124 = *((_QWORD *)this + 219);
      if (v124)
      {
        v125 = *(void (**)(void))(*(_QWORD *)v124 + 240);
LABEL_286:
        v125();
      }
      break;
    default:
      break;
  }
  *((_BYTE *)this + 1770) = v120;
}

void WebCore::HTMLMediaElement::pauseInternal(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::MediaElementSession *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::MemoryPressureHandler *v27;
  WTF::MemoryPressureHandler *v28;
  uint64_t v29;
  int v30;
  WTF::MemoryPressureHandler *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  int v35;

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v31 = (WTF::MemoryPressureHandler *)"HTMLMediaElement";
  v32 = 17;
  v33 = "pauseInternal";
  v34 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31);
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(_BYTE *)(v4 + 467) || *(_BYTE *)(v4 + 468))
  {
    v5 = *((_QWORD *)this + 228);
    v6 = *((_QWORD *)this + 229);
    v31 = (WTF::MemoryPressureHandler *)"HTMLMediaElement";
    v32 = 17;
    v33 = "pauseInternal";
    v34 = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31, "returning because context is suspended");
    return;
  }
  v7 = *(_QWORD *)(v4 + 528);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    v8 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    if (!v8)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v8 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    }
    if ((WebCore::MediaElementSession::clientWillPausePlayback(v8) & 1) != 0)
    {
      if (*((_QWORD *)this + 142) && *((_DWORD *)this + 225))
        goto LABEL_19;
      v9 = *((_QWORD *)this + 200);
      if (!v9)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(this);
        v9 = *((_QWORD *)this + 200);
      }
      WebCore::MediaElementSession::playbackStateChangePermitted(v9, 0, (uint64_t)&v31);
      if (!BYTE4(v31))
      {
        WebCore::HTMLMediaElement::selectMediaResource(this);
LABEL_19:
        v10 = *(unsigned int *)((char *)this + 1265);
        v11 = v10 & 0xFFFFFFFFFFFFFFBFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
        *(_DWORD *)((char *)this + 1265) = v10 & 0xFFFFFFBF;
        *(_WORD *)((char *)this + 1269) = WORD2(v11);
        if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
          WebCore::HTMLMediaElement::userDidInterfereWithAutoplay(this);
        v35 = 0;
        v12 = *((_QWORD *)this + 228);
        v13 = *((_QWORD *)this + 229);
        v31 = (WTF::MemoryPressureHandler *)"HTMLMediaElement";
        v32 = 17;
        v33 = "setAutoplayEventPlaybackState";
        v34 = v13;
        if (*(_BYTE *)(v12 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31, &v35);
          v15 = v35;
          *((_DWORD *)this + 323) = v35;
          if (v15 == 1)
          {
            WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v14);
            WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
          }
        }
        else
        {
          *((_DWORD *)this + 323) = 0;
        }
        if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x40400) == 0)
        {
          WebCore::HTMLMediaElement::setPaused((unsigned __int8 *)this, 1);
          v20 = WebCore::HTMLMediaElement::scheduleTimeupdateEvent(this, 0);
          v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v21 || (v22 = *(_QWORD *)(v21 + 96)) == 0)
            v22 = WebCore::threadGlobalDataSlow(v20);
          v23 = *(_QWORD *)(v22 + 40);
          if (!v23)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v22);
            v23 = *(_QWORD *)(v22 + 40);
          }
          v24 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v24);
          *(_DWORD *)(v24 + 16) = 1;
          *(_QWORD *)v24 = off_1E33A4B48;
          *(_QWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v24 + 20) = *(_DWORD *)(v24 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v23 + 1424) != 0);
          v26 = *(_DWORD **)(v23 + 1424);
          if (v26)
            *v26 += 2;
          *(_QWORD *)(v24 + 24) = v26;
          *(_QWORD *)(v24 + 32) = 0;
          *(_QWORD *)(v24 + 40) = 0;
          *(_QWORD *)(v24 + 48) = 0;
          *(_QWORD *)(v24 + 56) = v25;
          *(_QWORD *)(v24 + 64) = 0;
          v31 = (WTF::MemoryPressureHandler *)v24;
          WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v31);
          v27 = v31;
          v31 = 0;
          if (v27)
          {
            if (*((_DWORD *)v27 + 4) == 1)
              (*(void (**)(WTF::MemoryPressureHandler *))(*(_QWORD *)v27 + 8))(v27);
            else
              --*((_DWORD *)v27 + 4);
          }
          WebCore::DOMException::create(0x10u, MEMORY[0x1E0CBF738], (uint64_t *)&v31);
          WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises((uint64_t)this, (uint64_t *)&v31);
          v28 = v31;
          v31 = 0;
          if (v28)
          {
            if (*((_DWORD *)v28 + 2) == 1)
              v28 = (WTF::MemoryPressureHandler *)(*(uint64_t (**)(WTF::MemoryPressureHandler *))(*(_QWORD *)v28 + 8))(v28);
            else
              --*((_DWORD *)v28 + 2);
          }
          v29 = WTF::MemoryPressureHandler::singleton(v28);
          v30 = atomic_load((unsigned __int8 *)(v29 + 4));
          if (v30 == 2 || *(_BYTE *)(v29 + 7))
            WebCore::HTMLMediaElement::purgeBufferedDataIfPossible((uint64_t)this);
        }
        WebCore::HTMLMediaElement::updatePlayState(this);
      }
    }
    else
    {
      v18 = *((_QWORD *)this + 228);
      v19 = *((_QWORD *)this + 229);
      v31 = (WTF::MemoryPressureHandler *)"HTMLMediaElement";
      v32 = 17;
      v33 = "pauseInternal";
      v34 = v19;
      if (*(_BYTE *)(v18 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31, "returning because of interruption");
    }
  }
  else
  {
    v16 = *((_QWORD *)this + 228);
    v17 = *((_QWORD *)this + 229);
    v31 = (WTF::MemoryPressureHandler *)"HTMLMediaElement";
    v32 = 17;
    v33 = "pauseInternal";
    v34 = v17;
    if (*(_BYTE *)(v16 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v31, "returning because there is no browsing context");
  }
}

_DWORD *WebCore::HTMLMediaElement::speechSynthesis(WebCore::HTMLMediaElement *this)
{
  _DWORD *result;
  uint64_t v3;
  void *v4;
  _DWORD *v5;
  int v6;
  __int16 v7;
  __int16 v8;
  WebCore::SpeechSynthesis *v9;

  result = (_DWORD *)*((_QWORD *)this + 217);
  if (!result)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v3 + 24) += 2;
    WebCore::SpeechSynthesis::create((WebCore::SpeechSynthesis *)(v3 + 192), &v9);
    v5 = (_DWORD *)*((_QWORD *)this + 217);
    *((_QWORD *)this + 217) = v9;
    if (v5)
    {
      if (v5[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 64))(v5);
      else
        --v5[6];
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v7 = *(_WORD *)(v3 + 30);
      if ((v7 & 0x400) == 0)
      {
        v8 = *(_WORD *)(v3 + 28);
        if ((v8 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, v4);
        }
        else
        {
          if ((v8 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v7 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v7 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    result = (_DWORD *)*((_QWORD *)this + 217);
    if (result)
    {
      v6 = result[6];
      result[6] = v6 + 1;
    }
    else
    {
      v6 = MEMORY[0x18] - 1;
    }
    result[39] &= ~1u;
    if (v6)
    {
      result[6] = v6;
    }
    else
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)result + 64))(result);
      return (_DWORD *)*((_QWORD *)this + 217);
    }
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::cueBeingSpoken@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 1752);
  if (v2)
    ++*(_DWORD *)(v2 + 24);
  *a2 = v2;
  return this;
}

uint64_t WebCore::HTMLMediaElement::audioTrackEnabledChanged(WebCore::HTMLMediaElement *this, WebCore::AudioTrack *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::AudioTrack **v6;
  WTF::MonotonicTime *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  WebCore::PlatformMediaSession *v18;
  __int16 v20;
  __int16 v21;

  v3 = *((_QWORD *)this + 168);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 1;
    v5 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::AudioTrack ***)(v3 + 56);
      while (*v6 != a2)
      {
        ++v6;
        if (!--v5)
          goto LABEL_6;
      }
      WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v3);
      v4 = *(_DWORD *)(v3 + 24) - 1;
      if (*(_DWORD *)(v3 + 24) == 1)
        goto LABEL_21;
    }
    else
    {
LABEL_6:
      if (!v4)
      {
LABEL_21:
        (*(void (**)(uint64_t, WebCore::AudioTrack *))(*(_QWORD *)v3 + 72))(v3, a2);
        goto LABEL_8;
      }
    }
    *(_DWORD *)(v3 + 24) = v4;
  }
LABEL_8:
  if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
  {
    *((_BYTE *)this + 1699) = 1;
    v7 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    if (!v7)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v7 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    }
    WebCore::MediaElementSession::removeBehaviorRestriction(v7, 35175);
    v8 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
    *(_DWORD *)(v8 + 24) += 2;
    WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v8, v9);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v20 = *(_WORD *)(v8 + 30);
      if ((v20 & 0x400) == 0)
      {
        v21 = *(_WORD *)(v8 + 28);
        if ((v21 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v8, v10);
        }
        else
        {
          if ((v21 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v20 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v20 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v11 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
  v12 = (unsigned int *)((char *)this + 1265);
  v13 = *(_DWORD *)((_BYTE *)this + 1265) & 0x8000000;
  if (v11)
    v13 = 0x8000000;
  v14 = v13 | *(_DWORD *)((_BYTE *)this + 1265) & 0xF7FFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v12 = v14;
  v15 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1272))(this);
  v16 = *v12 & 0x10000000;
  if (v15)
    v16 = 0x10000000;
  v17 = v16 | *v12 & 0xEFFFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v12 = v17;
  v18 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  if (!v18)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v18 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  }
  return WebCore::PlatformMediaSession::canProduceAudioChanged(v18);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::audioTrackEnabledChanged(WebCore::HTMLMediaElement *this, WebCore::AudioTrack *a2)
{
  return WebCore::HTMLMediaElement::audioTrackEnabledChanged((WebCore::HTMLMediaElement *)((char *)this - 224), a2);
}

_QWORD *WebCore::HTMLMediaElement::audioTrackKindChanged(_QWORD *this, WebCore::AudioTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::AudioTrack **v5;

  v2 = this[168];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::AudioTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::audioTrackKindChanged(_QWORD *this, WebCore::AudioTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::AudioTrack **v5;

  v2 = this[140];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::AudioTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *WebCore::HTMLMediaElement::audioTrackLabelChanged(_QWORD *this, WebCore::AudioTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::AudioTrack **v5;

  v2 = this[168];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::AudioTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::audioTrackLabelChanged(_QWORD *this, WebCore::AudioTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::AudioTrack **v5;

  v2 = this[140];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::AudioTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *WebCore::HTMLMediaElement::audioTrackLanguageChanged(_QWORD *this, WebCore::AudioTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::AudioTrack **v5;

  v2 = this[168];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::AudioTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::audioTrackLanguageChanged(_QWORD *this, WebCore::AudioTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::AudioTrack **v5;

  v2 = this[140];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::AudioTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

WebCore *WebCore::HTMLMediaElement::willRemoveAudioTrack(WebCore *this, WebCore::AudioTrack *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  WebCore::AudioTrack **v7;

  v3 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3 + 1;
  v4 = *((_QWORD *)this + 168);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 68);
    if ((_DWORD)v5)
    {
      v6 = this;
      v7 = *(WebCore::AudioTrack ***)(v4 + 56);
      while (*v7 != a2)
      {
        ++v7;
        if (!--v5)
          goto LABEL_6;
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 152, (_QWORD *)this + 28);
      this = WebCore::AudioTrackList::remove(*((WebCore::AudioTrackList **)v6 + 168), a2, 1);
      v3 = *((_DWORD *)a2 + 4) - 1;
      if (*((_DWORD *)a2 + 4) == 1)
        return (WebCore *)(*(uint64_t (**)(WebCore::AudioTrack *))(*(_QWORD *)a2 + 16))(a2);
LABEL_7:
      *((_DWORD *)a2 + 4) = v3;
      return this;
    }
  }
LABEL_6:
  if (v3)
    goto LABEL_7;
  return (WebCore *)(*(uint64_t (**)(WebCore::AudioTrack *))(*(_QWORD *)a2 + 16))(a2);
}

WebCore *`non-virtual thunk to'WebCore::HTMLMediaElement::willRemoveAudioTrack(WebCore *this, WebCore::AudioTrack *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  WebCore *v6;
  WebCore::AudioTrack **v7;

  v3 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3 + 1;
  v4 = *((_QWORD *)this + 140);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 68);
    if ((_DWORD)v5)
    {
      v6 = this;
      v7 = *(WebCore::AudioTrack ***)(v4 + 56);
      while (*v7 != a2)
      {
        ++v7;
        if (!--v5)
          goto LABEL_6;
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 152, this);
      this = WebCore::AudioTrackList::remove(*((WebCore::AudioTrackList **)v6 + 140), a2, 1);
      v3 = *((_DWORD *)a2 + 4) - 1;
      if (*((_DWORD *)a2 + 4) == 1)
        return (WebCore *)(*(uint64_t (**)(WebCore::AudioTrack *))(*(_QWORD *)a2 + 16))(a2);
LABEL_7:
      *((_DWORD *)a2 + 4) = v3;
      return this;
    }
  }
LABEL_6:
  if (v3)
    goto LABEL_7;
  return (WebCore *)(*(uint64_t (**)(WebCore::AudioTrack *))(*(_QWORD *)a2 + 16))(a2);
}

void WebCore::HTMLMediaElement::textTrackModeChanged(WebCore::HTMLMediaElement *this, WebCore::TextTrack *a2)
{
  BOOL v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  const WebCore::TextTrackCueList *v8;
  void *v9;
  WebCore::TextTrackCueList *v10;
  void *v11;
  WebCore::TrackListBase *v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  WebCore::TextTrack **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  uint64_t v24;
  __int16 v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;

  if (*((_DWORD *)a2 + 58))
  {
    v4 = 0;
  }
  else
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      while (1)
      {
        v6 = *(_WORD *)(v5 + 28);
        if ((v6 & 0x10) != 0 && (v6 & 0x110) != 0x110)
        {
          v7 = *(_QWORD *)(WebCore::HTMLNames::trackTag + 24);
          if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == v7)
            break;
        }
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          goto LABEL_8;
      }
      if (*(WebCore::TextTrack **)(v5 + 152) == a2)
      {
LABEL_55:
        v4 = (*((_DWORD *)a2 + 59) - 3) < 0xFFFFFFFE;
        goto LABEL_9;
      }
      while (1)
      {
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          break;
        v25 = *(_WORD *)(v5 + 28);
        if ((v25 & 0x10) != 0
          && (v25 & 0x110) != 0x110
          && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == v7
          && *(WebCore::TextTrack **)(v5 + 152) == a2)
        {
          goto LABEL_55;
        }
      }
    }
LABEL_8:
    v4 = 1;
  }
LABEL_9:
  WebCore::HTMLMediaElement::ensureTextTracks(this);
  *((_BYTE *)a2 + 256) = 1;
  if (!v4 && *((_DWORD *)a2 + 56))
  {
    v8 = (const WebCore::TextTrackCueList *)*((_QWORD *)a2 + 21);
    if (!v8)
    {
      v8 = (const WebCore::TextTrackCueList *)WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v8 = 1;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *((_QWORD *)v8 + 1) = 0;
      v10 = (WebCore::TextTrackCueList *)*((_QWORD *)a2 + 21);
      *((_QWORD *)a2 + 21) = v8;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::TextTrackCueList::~TextTrackCueList(v10, v9);
          WTF::fastFree(v28, v29);
          v8 = (const WebCore::TextTrackCueList *)*((_QWORD *)a2 + 21);
          if (!v8)
          {
LABEL_16:
            WebCore::HTMLMediaElement::textTrackAddCues((uint64_t (**)())this, a2, v8);
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::TextTrackCueList::~TextTrackCueList(v8, v11);
              WTF::fastFree(v26, v27);
            }
            else
            {
              --*(_DWORD *)v8;
            }
            goto LABEL_18;
          }
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    ++*(_DWORD *)v8;
    goto LABEL_16;
  }
LABEL_18:
  WebCore::HTMLMediaElement::configureTextTrackDisplay(this, 1u);
  v12 = (WebCore::TrackListBase *)*((_QWORD *)this + 169);
  if (v12)
  {
    v13 = *((_DWORD *)v12 + 6);
    *((_DWORD *)v12 + 6) = v13 + 1;
    if (*((_DWORD *)a2 + 10) != 1)
    {
      __break(0xC471u);
      return;
    }
    v14 = *((_DWORD *)a2 + 58);
    v15 = (_DWORD *)((char *)v12 + 56);
    v16 = (_DWORD *)((char *)v12 + 96);
    v17 = (_DWORD *)((char *)v12 + 112);
    if (v14)
      v17 = 0;
    if (v14 != 1)
      v16 = v17;
    if (v14 != 2)
      v15 = v16;
    v18 = v15[3];
    if ((_DWORD)v18)
    {
      v19 = *(WebCore::TextTrack ***)v15;
      while (*v19 != a2)
      {
        ++v19;
        if (!--v18)
          goto LABEL_30;
      }
      WebCore::TrackListBase::scheduleChangeEvent(v12);
      v13 = *((_DWORD *)v12 + 6) - 1;
      if (*((_DWORD *)v12 + 6) == 1)
        goto LABEL_38;
    }
    else
    {
LABEL_30:
      if (!v13)
      {
LABEL_38:
        (*(void (**)(WebCore::TrackListBase *))(*(_QWORD *)v12 + 72))(v12);
        goto LABEL_32;
      }
    }
    *((_DWORD *)v12 + 6) = v13;
  }
LABEL_32:
  if (*((_DWORD *)a2 + 58))
    return;
  v20 = *((_QWORD *)this + 142);
  if (!v20)
    return;
  v21 = *(unsigned __int8 **)v20;
  if (__ldaxr(*(unsigned __int8 **)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, v21))
  {
    goto LABEL_41;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_41:
  ++*((_QWORD *)v21 + 1);
  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
      goto LABEL_46;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_46:
  v24 = *(_QWORD *)(v20 + 72);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 1072))(v24);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v20);
}

uint64_t WebCore::HTMLMediaElement::ensureTextTracks(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ScriptExecutionContext *v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;

  if (!*((_QWORD *)this + 169))
  {
    v2 = *((_QWORD *)this + 15);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    {
      v4 = (WebCore::ScriptExecutionContext *)(v3 - 96);
      v5 = *(unsigned __int8 *)(v3 + 178);
      if (*(_BYTE *)(v3 + 178))
      {
        if (v5 == 1 || v5 == 2)
          ++*(_DWORD *)(v3 + 216);
      }
      else
      {
        *(_DWORD *)(v3 - 264) += 2;
      }
    }
    else
    {
      v4 = 0;
    }
    v6 = bmalloc::api::isoAllocate();
    v8 = *((_QWORD *)WebCore::TextTrackList::TextTrackList((WebCore::TextTrackList *)v6, v4) + 5);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(unsigned __int8 *)(v9 + 178);
        if (*(_BYTE *)(v9 + 178))
        {
          if (v10 == 1 || v10 == 2)
            ++*(_DWORD *)(v9 + 216);
        }
        else
        {
          *(_DWORD *)(v9 - 264) += 2;
        }
        v11 = (unsigned int *)(v9 - 96);
        v12 = v6 + 32;
        if (*(_BYTE *)(v9 + 179))
        {
          v31 = (unsigned int *)(v9 - 96);
          v30 = v9;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 24))(v6 + 32, *(unsigned __int8 *)(v9 + 177));
          v9 = v30;
          v12 = v6 + 32;
          v11 = v31;
        }
        if (*(_BYTE *)(v9 + 180))
        {
          v32 = v11;
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
          v11 = v32;
        }
        WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed(v11, v7);
      }
    }
    if (v4)
      WebCore::ScriptExecutionContext::deref(v4);
    ++*(_DWORD *)(v6 + 24);
    v13 = (_DWORD *)*((_QWORD *)this + 169);
    *((_QWORD *)this + 169) = v6;
    if (v13)
    {
      if (v13[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 72))(v13);
      else
        --v13[6];
    }
    v14 = *((_QWORD *)this + 194);
    if (v14)
      goto LABEL_53;
    v15 = (uint64_t *)((char *)this + 1552);
    v14 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = (char *)this + 1552;
    v16 = (unsigned int *)*((_QWORD *)this + 194);
    *((_QWORD *)this + 194) = v14;
    if (!v16)
      goto LABEL_53;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v7);
    }
    v14 = *v15;
    if (*v15)
    {
LABEL_53:
      do
        v19 = __ldaxr((unsigned int *)v14);
      while (__stlxr(v19 + 1, (unsigned int *)v14));
    }
    v20 = *(unsigned int **)(v6 + 80);
    *(_QWORD *)(v6 + 80) = v14;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v7);
      }
    }
    v23 = *((_QWORD *)this + 144);
    if (v23)
    {
      v24 = *(uint64_t (**)(void))(*(_QWORD *)v23 + 40);
    }
    else
    {
      v27 = *((_QWORD *)this + 142);
      if (!v27 || *((int *)this + 226) < 1)
      {
        v28 = (uint64_t *)WTF::MediaTime::invalidTime(0);
        v25 = *v28;
        v26 = v28[1];
LABEL_39:
        *(_QWORD *)(v6 + 128) = v25;
        *(_DWORD *)(v6 + 136) = v26;
        *(_BYTE *)(v6 + 140) = BYTE4(v26);
        if (*(_DWORD *)(v6 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
        else
          --*(_DWORD *)(v6 + 24);
        return *((_QWORD *)this + 169);
      }
      v24 = *(uint64_t (**)(void))(**(_QWORD **)(v27 + 72) + 336);
    }
    v25 = v24();
    goto LABEL_39;
  }
  return *((_QWORD *)this + 169);
}

uint64_t (**WebCore::HTMLMediaElement::textTrackAddCues(uint64_t (**this)(), WebCore::TextTrack *a2, const WebCore::TextTrackCueList *a3))()
{
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t i;
  WebCore::TextTrackCue *v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t (**v22)();

  if (*((_DWORD *)a2 + 56))
  {
    v5 = (uint64_t *)this;
    if (!this[37])
    {
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = v5;
      v8 = (unsigned int *)v5[37];
      v5[37] = v7;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v6);
        }
      }
    }
    v11 = v5[37];
    do
      v12 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v12 + 1, (unsigned int *)v11));
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_DWORD *)(v13 + 1392);
    *(_DWORD *)(v13 + 1392) = v14 + 1;
    v15 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        if (i >= v15)
          v17 = 0;
        else
          v17 = *(WebCore::TextTrackCue **)(*((_QWORD *)a3 + 1) + 8 * i);
        ++*((_DWORD *)v17 + 6);
        WebCore::HTMLMediaElement::textTrackAddCue(v5, a2, v17);
        if (*((_DWORD *)v17 + 6) == 1)
          (*(void (**)(WebCore::TextTrackCue *))(*(_QWORD *)v17 + 72))(v17);
        else
          --*((_DWORD *)v17 + 6);
        v15 = *((unsigned int *)a3 + 5);
      }
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_DWORD *)(v13 + 1392) - 1;
    }
    *(_DWORD *)(v13 + 1392) = v14;
    v18 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = off_1E33C5A20;
    *(_QWORD *)(v18 + 8) = v13;
    v22 = (uint64_t (**)())v18;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v13, 9, v13 + 656, &v22);
    this = v22;
    v22 = 0;
    if (this)
      this = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
    do
    {
      v20 = __ldaxr((unsigned int *)v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v11));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (uint64_t (**)())WTF::fastFree((WTF *)v11, v19);
    }
  }
  return this;
}

void WebCore::HTMLMediaElement::configureTextTrackDisplay(WebCore::HTMLMediaElement *this, unsigned int a2)
{
  WebCore::HTMLMediaElement *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  WebCore::MediaControlTextTrackContainerElement *v59;
  unsigned int v60;
  WebCore::HTMLMediaElement *v61;
  _QWORD v62[4];
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  __int128 buf;
  int v68;
  WTF::StringImpl *v69;
  uint64_t v70;

  v3 = this;
  v70 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v62[0] = "HTMLMediaElement";
  v62[1] = 17;
  v62[2] = "configureTextTrackDisplay";
  v62[3] = v5;
  if (!*(_BYTE *)(v4 + 12))
    goto LABEL_74;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v62);
  if ((byte_1EE337C0B & 1) == 0)
  {
    *(_QWORD *)&algn_1EE337C0E[2] = &dword_1ECE7BA30;
    dword_1ECE7BA30 += 2;
    dword_1ECE7BA50 += 2;
    *(_QWORD *)&algn_1EE337C0E[10] = &dword_1ECE7BA50;
    byte_1EE337C0B = 1;
  }
  v7 = *(_QWORD *)&_MergedGlobals_1512[8 * a2 + 8];
  if (v7)
    *(_DWORD *)v7 += 2;
  if (v65)
  {
    v8 = *((_DWORD *)v65 + 1);
    if (v7)
    {
LABEL_8:
      v9 = *(_DWORD *)(v7 + 4);
      goto LABEL_9;
    }
  }
  else
  {
    v8 = 0;
    if (v7)
      goto LABEL_8;
  }
  v9 = 0;
LABEL_9:
  if ((v9 | v8) < 0)
    goto LABEL_115;
  v10 = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_115;
  if (v65)
  {
    v11 = *((_DWORD *)v65 + 4);
    v12 = (v11 >> 2) & 1;
    if (!v7 || (v11 & 4) == 0)
    {
LABEL_15:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v65, v7, &v66);
      if (v66)
      {
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
          else
            *(_DWORD *)v7 -= 2;
        }
        goto LABEL_19;
      }
LABEL_116:
      __break(0xC471u);
      JUMPOUT(0x195C14560);
    }
LABEL_14:
    v12 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
    goto LABEL_15;
  }
  if (v7)
    goto LABEL_14;
  if (!(_DWORD)v10)
  {
    v54 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_105;
  }
  if ((v10 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v10 + 20)), (v54 = buf) == 0))
  {
LABEL_115:
    v66 = 0;
    goto LABEL_116;
  }
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v54 + 4) = v10;
  *(_QWORD *)(v54 + 8) = v54 + 20;
  *(_DWORD *)(v54 + 16) = 4;
LABEL_105:
  v66 = (WTF::StringImpl *)v54;
LABEL_19:
  v13 = v65;
  v65 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = qword_1ECE7C4A0;
  v15 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v15)
  {
    WTF::String::utf8();
    v17 = v63 ? (char *)v63 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v15 = (uint64_t)v63;
    v63 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        v15 = WTF::fastFree((WTF *)v15, v16);
      else
        --*(_DWORD *)v15;
    }
  }
  if (WebCore::LogMedia)
  {
    v18 = a2;
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v60 = a2;
          v61 = v3;
          v22 = WTF::Logger::observers((WTF::Logger *)v15);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v62);
              v68 = 0;
              if ((byte_1EE337C0B & 1) == 0)
              {
                dword_1ECE7BA30 += 2;
                *(_QWORD *)&algn_1EE337C0E[2] = &dword_1ECE7BA30;
                dword_1ECE7BA50 += 2;
                *(_QWORD *)&algn_1EE337C0E[10] = &dword_1ECE7BA50;
                byte_1EE337C0B = 1;
              }
              v27 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v18 + 8];
              if (v27)
                *(_DWORD *)v27 += 2;
              v69 = v27;
              v63 = 0;
              v64 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v64) = 2;
              v63 = v28;
              v29 = HIDWORD(v64);
              *((_DWORD *)v28 + 4 * HIDWORD(v64)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v68;
              v31 = v69;
              if (v69)
                *(_DWORD *)v69 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v64) = v29 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogMedia, 0, &v63);
              v32 = v63;
              if (HIDWORD(v64))
              {
                v33 = 16 * HIDWORD(v64);
                v34 = (WTF::StringImpl **)((char *)v63 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v63;
              }
              if (v32)
              {
                v63 = 0;
                LODWORD(v64) = 0;
                WTF::fastFree(v32, v16);
              }
              v36 = v69;
              v69 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            v3 = v61;
            a2 = v60;
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
            v3 = v61;
            a2 = v60;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v39 = v66;
  v66 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v39 -= 2;
  }
LABEL_74:
  v40 = *(unsigned int *)((char *)v3 + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)v3 + 1269) << 32);
  if ((v40 & 0x2000000000) == 0)
  {
    v41 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
    if (!*(_BYTE *)(v41 + 467) && !*(_BYTE *)(v41 + 468))
    {
      v42 = *((_QWORD *)v3 + 15);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 8);
        if (v43)
        {
          if (!*(_BYTE *)(v43 + 180))
          {
            v44 = 0;
            v45 = *((_QWORD *)v3 + 169);
            v46 = *(_DWORD *)(v45 + 108);
            v47 = *(unsigned int *)(v45 + 124);
            v48 = v47 + v46 + *(_DWORD *)(v45 + 68);
            do
            {
              v49 = v44;
              if (v48 == v44)
                break;
              if (v44 >= v47)
              {
                v51 = v44 - v47;
                if (v46 <= (int)v49 - (int)v47)
                {
                  v50 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * (-(int)v47 - v46 + v49));
                  if (*(_DWORD *)(v50 + 40) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195C145A0);
                  }
                }
                else
                {
                  v50 = *(_QWORD *)(*(_QWORD *)(v45 + 96) + 8 * v51);
                  if (*(_DWORD *)(v50 + 40) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195C14580);
                  }
                }
              }
              else
              {
                v50 = *(_QWORD *)(*(_QWORD *)(v45 + 112) + 8 * v44);
                if (*(_DWORD *)(v50 + 40) != 1)
                  goto LABEL_116;
              }
              v52 = *(_DWORD *)(v50 + 224);
              v44 = v49 + 1;
            }
            while (v52 != 2);
            if (a2 || ((v40 & 0x1000000000) == 0) == v49 < v48)
            {
              v55 = v40 & 0xFFEFFFF7FFFFLL;
              v56 = v49 >= v48;
              if (v49 >= v48)
                v57 = 0;
              else
                v57 = 0x1000080000;
              v58 = v57 | v55;
              *(_DWORD *)((char *)v3 + 1265) = v58;
              *(_WORD *)((char *)v3 + 1269) = WORD2(v58);
              if (!v56)
              {
                if (WebCore::HTMLMediaElement::ensureMediaControls(v3))
                {
                  v59 = *(WebCore::MediaControlTextTrackContainerElement **)(*((_QWORD *)v3 + 202) + 24);
                  if (v59)
                    WebCore::MediaControlTextTrackContainerElement::updateDisplay(v59);
                }
              }
            }
            else
            {
              *(_QWORD *)&buf = WebCore::HTMLMediaElement::currentMediaTime(v3);
              *((_QWORD *)&buf + 1) = v53;
              WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)v3, (const WTF::MediaTime *)&buf);
            }
          }
        }
      }
    }
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::textTrackModeChanged(WebCore::HTMLMediaElement *this, WebCore::TextTrack *a2)
{
  WebCore::HTMLMediaElement::textTrackModeChanged((WebCore::HTMLMediaElement *)((char *)this - 240), a2);
}

uint64_t WebCore::HTMLMediaElement::textTrackKindChanged(uint64_t this, WebCore::TextTrack *a2)
{
  uint64_t v3;
  WebCore::TrackListBase *v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  WebCore::TextTrack **v12;

  v3 = this;
  if (*((_DWORD *)a2 + 57) >= 2u && *((_DWORD *)a2 + 56) == 2)
    this = (*(uint64_t (**)(WebCore::TextTrack *, uint64_t))(*(_QWORD *)a2 + 120))(a2, 1);
  v5 = *(WebCore::TrackListBase **)(v3 + 1352);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 6);
    *((_DWORD *)v5 + 6) = v6 + 1;
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v7 = *((_DWORD *)a2 + 58);
      v8 = (_DWORD *)((char *)v5 + 56);
      v9 = (_DWORD *)((char *)v5 + 96);
      v10 = (_DWORD *)((char *)v5 + 112);
      if (v7)
        v10 = 0;
      if (v7 != 1)
        v9 = v10;
      if (v7 != 2)
        v8 = v9;
      v11 = v8[3];
      if ((_DWORD)v11)
      {
        v12 = *(WebCore::TextTrack ***)v8;
        while (*v12 != a2)
        {
          ++v12;
          if (!--v11)
            goto LABEL_19;
        }
        this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(v5);
        v6 = *((_DWORD *)v5 + 6) - 1;
        if (*((_DWORD *)v5 + 6) == 1)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v5 + 72))(v5);
      }
      else
      {
LABEL_19:
        if (!v6)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v5 + 72))(v5);
      }
      *((_DWORD *)v5 + 6) = v6;
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::textTrackKindChanged(uint64_t this, WebCore::TextTrack *a2)
{
  uint64_t v3;
  WebCore::TrackListBase *v5;
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  WebCore::TextTrack **v12;

  v3 = this;
  if (*((_DWORD *)a2 + 57) >= 2u && *((_DWORD *)a2 + 56) == 2)
    this = (*(uint64_t (**)(WebCore::TextTrack *, uint64_t))(*(_QWORD *)a2 + 120))(a2, 1);
  v5 = *(WebCore::TrackListBase **)(v3 + 1112);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 6);
    *((_DWORD *)v5 + 6) = v6 + 1;
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v7 = *((_DWORD *)a2 + 58);
      v8 = (_DWORD *)((char *)v5 + 56);
      v9 = (_DWORD *)((char *)v5 + 96);
      v10 = (_DWORD *)((char *)v5 + 112);
      if (v7)
        v10 = 0;
      if (v7 != 1)
        v9 = v10;
      if (v7 != 2)
        v8 = v9;
      v11 = v8[3];
      if ((_DWORD)v11)
      {
        v12 = *(WebCore::TextTrack ***)v8;
        while (*v12 != a2)
        {
          ++v12;
          if (!--v11)
            goto LABEL_19;
        }
        this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(v5);
        v6 = *((_DWORD *)v5 + 6) - 1;
        if (*((_DWORD *)v5 + 6) == 1)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v5 + 72))(v5);
      }
      else
      {
LABEL_19:
        if (!v6)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v5 + 72))(v5);
      }
      *((_DWORD *)v5 + 6) = v6;
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::textTrackLabelChanged(uint64_t this, WebCore::TextTrack *a2)
{
  WebCore::TrackListBase *v2;
  int v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::TextTrack **v9;

  v2 = *(WebCore::TrackListBase **)(this + 1352);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = v3 + 1;
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v4 = *((_DWORD *)a2 + 58);
      v5 = (_DWORD *)((char *)v2 + 56);
      v6 = (_DWORD *)((char *)v2 + 96);
      v7 = (_DWORD *)((char *)v2 + 112);
      if (v4)
        v7 = 0;
      if (v4 != 1)
        v6 = v7;
      if (v4 != 2)
        v5 = v6;
      v8 = v5[3];
      if ((_DWORD)v8)
      {
        v9 = *(WebCore::TextTrack ***)v5;
        while (*v9 != a2)
        {
          ++v9;
          if (!--v8)
            goto LABEL_13;
        }
        this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(v2);
        v3 = *((_DWORD *)v2 + 6) - 1;
        if (*((_DWORD *)v2 + 6) == 1)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      else
      {
LABEL_13:
        if (!v3)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      *((_DWORD *)v2 + 6) = v3;
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::textTrackLabelChanged(uint64_t this, WebCore::TextTrack *a2)
{
  WebCore::TrackListBase *v2;
  int v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::TextTrack **v9;

  v2 = *(WebCore::TrackListBase **)(this + 1112);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = v3 + 1;
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v4 = *((_DWORD *)a2 + 58);
      v5 = (_DWORD *)((char *)v2 + 56);
      v6 = (_DWORD *)((char *)v2 + 96);
      v7 = (_DWORD *)((char *)v2 + 112);
      if (v4)
        v7 = 0;
      if (v4 != 1)
        v6 = v7;
      if (v4 != 2)
        v5 = v6;
      v8 = v5[3];
      if ((_DWORD)v8)
      {
        v9 = *(WebCore::TextTrack ***)v5;
        while (*v9 != a2)
        {
          ++v9;
          if (!--v8)
            goto LABEL_13;
        }
        this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(v2);
        v3 = *((_DWORD *)v2 + 6) - 1;
        if (*((_DWORD *)v2 + 6) == 1)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      else
      {
LABEL_13:
        if (!v3)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      *((_DWORD *)v2 + 6) = v3;
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::textTrackLanguageChanged(uint64_t this, WebCore::TextTrack *a2)
{
  WebCore::TrackListBase *v2;
  int v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::TextTrack **v9;

  v2 = *(WebCore::TrackListBase **)(this + 1352);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = v3 + 1;
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v4 = *((_DWORD *)a2 + 58);
      v5 = (_DWORD *)((char *)v2 + 56);
      v6 = (_DWORD *)((char *)v2 + 96);
      v7 = (_DWORD *)((char *)v2 + 112);
      if (v4)
        v7 = 0;
      if (v4 != 1)
        v6 = v7;
      if (v4 != 2)
        v5 = v6;
      v8 = v5[3];
      if ((_DWORD)v8)
      {
        v9 = *(WebCore::TextTrack ***)v5;
        while (*v9 != a2)
        {
          ++v9;
          if (!--v8)
            goto LABEL_13;
        }
        this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(v2);
        v3 = *((_DWORD *)v2 + 6) - 1;
        if (*((_DWORD *)v2 + 6) == 1)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      else
      {
LABEL_13:
        if (!v3)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      *((_DWORD *)v2 + 6) = v3;
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::textTrackLanguageChanged(uint64_t this, WebCore::TextTrack *a2)
{
  WebCore::TrackListBase *v2;
  int v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::TextTrack **v9;

  v2 = *(WebCore::TrackListBase **)(this + 1112);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 6);
    *((_DWORD *)v2 + 6) = v3 + 1;
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v4 = *((_DWORD *)a2 + 58);
      v5 = (_DWORD *)((char *)v2 + 56);
      v6 = (_DWORD *)((char *)v2 + 96);
      v7 = (_DWORD *)((char *)v2 + 112);
      if (v4)
        v7 = 0;
      if (v4 != 1)
        v6 = v7;
      if (v4 != 2)
        v5 = v6;
      v8 = v5[3];
      if ((_DWORD)v8)
      {
        v9 = *(WebCore::TextTrack ***)v5;
        while (*v9 != a2)
        {
          ++v9;
          if (!--v8)
            goto LABEL_13;
        }
        this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(v2);
        v3 = *((_DWORD *)v2 + 6) - 1;
        if (*((_DWORD *)v2 + 6) == 1)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      else
      {
LABEL_13:
        if (!v3)
          return (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v2 + 72))(v2);
      }
      *((_DWORD *)v2 + 6) = v3;
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t (**WebCore::HTMLMediaElement::willRemoveTextTrack(uint64_t (**this)(), WebCore::TextTrack *a2))()
{
  if (*((_DWORD *)a2 + 58) == 2)
    return WebCore::HTMLMediaElement::removeTextTrack(this, a2, 1);
  return this;
}

uint64_t (**WebCore::HTMLMediaElement::removeTextTrack(uint64_t (**this)(), WebCore::TextTrack *a2, int a3))()
{
  uint64_t (*v3)();
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t (**v12)();
  WebCore::TextTrack **i;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t (*v18)();
  unsigned int v19;
  const WebCore::TextTrackCueList *v20;
  WebCore::TextTrackCueList *v21;
  void *v22;
  WebCore *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  void *v32;
  uint64_t (**v33)();

  v3 = this[169];
  if (v3)
  {
    if (*((_DWORD *)a2 + 10) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195C14E08);
    }
    v5 = *((_DWORD *)a2 + 58);
    v6 = (char *)v3 + 56;
    v7 = (char *)v3 + 96;
    v8 = (char *)v3 + 112;
    if (v5)
      v8 = 0;
    if (v5 == 1)
      v8 = v7;
    v9 = v5 == 2 ? v6 : v8;
    v10 = *((unsigned int *)v9 + 3);
    if ((_DWORD)v10)
    {
      v12 = this;
      for (i = *(WebCore::TextTrack ***)v9; *i != a2; ++i)
      {
        if (!--v10)
          return this;
      }
      if (!this[37])
      {
        v14 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v14 = 1;
        *(_QWORD *)(v14 + 8) = v12;
        v15 = (unsigned int *)v12[37];
        v12[37] = (uint64_t (*)())v14;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, a2);
          }
        }
      }
      v18 = v12[37];
      do
        v19 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v19 + 1, (unsigned int *)v18));
      ++*(_DWORD *)(*((_QWORD *)v18 + 1) + 1392);
      if (!*((_DWORD *)a2 + 56))
        goto LABEL_29;
      v20 = (const WebCore::TextTrackCueList *)*((_QWORD *)a2 + 21);
      if (!v20)
      {
        v20 = (const WebCore::TextTrackCueList *)WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)v20 = 1;
        *((_QWORD *)v20 + 2) = 0;
        *((_QWORD *)v20 + 3) = 0;
        *((_QWORD *)v20 + 1) = 0;
        v21 = (WebCore::TextTrackCueList *)*((_QWORD *)a2 + 21);
        *((_QWORD *)a2 + 21) = v20;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
          {
            WebCore::TextTrackCueList::~TextTrackCueList(v21, a2);
            WTF::fastFree(v31, v32);
            v20 = (const WebCore::TextTrackCueList *)*((_QWORD *)a2 + 21);
            if (!v20)
            {
LABEL_29:
              WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 200, v12 + 30);
              v23 = (WebCore *)v12[169];
              if (v23)
              {
                ++*((_DWORD *)v23 + 6);
                WebCore::TextTrackList::remove(v23, a2, a3);
                if (*((_DWORD *)v23 + 6) == 1)
                  (*(void (**)(WebCore *))(*(_QWORD *)v23 + 72))(v23);
                else
                  --*((_DWORD *)v23 + 6);
              }
              v24 = *((_QWORD *)v18 + 1);
              --*(_DWORD *)(v24 + 1392);
              v25 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v25 = off_1E33C5A20;
              *(_QWORD *)(v25 + 8) = v24;
              v33 = (uint64_t (**)())v25;
              WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v24, 9, v24 + 656, &v33);
              this = v33;
              v33 = 0;
              if (this)
                this = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
              do
              {
                v27 = __ldaxr((unsigned int *)v18);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, (unsigned int *)v18));
              if (!v28)
              {
                atomic_store(1u, (unsigned int *)v18);
                return (uint64_t (**)())WTF::fastFree((WTF *)v18, v26);
              }
              return this;
            }
          }
          else
          {
            --*(_DWORD *)v21;
          }
        }
      }
      ++*(_DWORD *)v20;
      WebCore::HTMLMediaElement::textTrackRemoveCues((WebCore::HTMLMediaElement *)v12, a2, v20);
      if (*(_DWORD *)v20 == 1)
      {
        WebCore::TextTrackCueList::~TextTrackCueList(v20, v22);
        WTF::fastFree(v29, v30);
      }
      else
      {
        --*(_DWORD *)v20;
      }
      goto LABEL_29;
    }
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::willRemoveTextTrack(uint64_t (**this)(), WebCore::TextTrack *a2))()
{
  if (*((_DWORD *)a2 + 58) == 2)
    return WebCore::HTMLMediaElement::removeTextTrack(this - 30, a2, 1);
  return this;
}

uint64_t WebCore::HTMLMediaElement::videoTrackSelectedChanged(WebCore::HTMLMediaElement *this, WebCore::VideoTrack *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::VideoTrack **v6;
  int v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  WebCore::PlatformMediaSession *v14;

  v3 = *((_QWORD *)this + 170);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 24) = v4 + 1;
    v5 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::VideoTrack ***)(v3 + 56);
      while (*v6 != a2)
      {
        ++v6;
        if (!--v5)
          goto LABEL_6;
      }
      WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v3);
      v4 = *(_DWORD *)(v3 + 24) - 1;
      if (*(_DWORD *)(v3 + 24) == 1)
        goto LABEL_16;
    }
    else
    {
LABEL_6:
      if (!v4)
      {
LABEL_16:
        (*(void (**)(uint64_t, WebCore::VideoTrack *))(*(_QWORD *)v3 + 72))(v3, a2);
        goto LABEL_8;
      }
    }
    *(_DWORD *)(v3 + 24) = v4;
  }
LABEL_8:
  v7 = (*(uint64_t (**)(WebCore::HTMLMediaElement *, WebCore::VideoTrack *))(*(_QWORD *)this + 1280))(this, a2);
  v8 = (unsigned int *)((char *)this + 1265);
  v9 = *(_DWORD *)((_BYTE *)this + 1265) & 0x8000000;
  if (v7)
    v9 = 0x8000000;
  v10 = v9 | *(_DWORD *)((_BYTE *)this + 1265) & 0xF7FFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v8 = v10;
  v11 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1272))(this);
  v12 = *v8 & 0x10000000;
  if (v11)
    v12 = 0x10000000;
  v13 = v12 | *v8 & 0xEFFFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v8 = v13;
  v14 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  if (!v14)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v14 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  }
  return WebCore::PlatformMediaSession::canProduceAudioChanged(v14);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::videoTrackSelectedChanged(WebCore::HTMLMediaElement *this, WebCore::VideoTrack *a2)
{
  return WebCore::HTMLMediaElement::videoTrackSelectedChanged((WebCore::HTMLMediaElement *)((char *)this - 256), a2);
}

_QWORD *WebCore::HTMLMediaElement::videoTrackKindChanged(_QWORD *this, WebCore::VideoTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::VideoTrack **v5;

  v2 = this[170];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::VideoTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::videoTrackKindChanged(_QWORD *this, WebCore::VideoTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::VideoTrack **v5;

  v2 = this[138];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::VideoTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *WebCore::HTMLMediaElement::videoTrackLabelChanged(_QWORD *this, WebCore::VideoTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::VideoTrack **v5;

  v2 = this[170];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::VideoTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::videoTrackLabelChanged(_QWORD *this, WebCore::VideoTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::VideoTrack **v5;

  v2 = this[138];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::VideoTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *WebCore::HTMLMediaElement::videoTrackLanguageChanged(_QWORD *this, WebCore::VideoTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::VideoTrack **v5;

  v2 = this[170];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::VideoTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::videoTrackLanguageChanged(_QWORD *this, WebCore::VideoTrack *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::VideoTrack **v5;

  v2 = this[138];
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 1;
    v4 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::VideoTrack ***)(v2 + 56);
      while (*v5 != a2)
      {
        ++v5;
        if (!--v4)
          goto LABEL_6;
      }
      this = WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)v2);
      v3 = *(_DWORD *)(v2 + 24) - 1;
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    else
    {
LABEL_6:
      if (!v3)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
    *(_DWORD *)(v2 + 24) = v3;
  }
  return this;
}

WebCore *WebCore::HTMLMediaElement::willRemoveVideoTrack(WebCore *this, WebCore::VideoTrack *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore *v5;
  WebCore::VideoTrack **v6;
  WebCore *v7;

  ++*((_DWORD *)a2 + 4);
  v3 = *((_QWORD *)this + 170);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v4)
    {
      v5 = this;
      v6 = *(WebCore::VideoTrack ***)(v3 + 56);
      while (*v6 != a2)
      {
        ++v6;
        if (!--v4)
          goto LABEL_10;
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 152, (_QWORD *)this + 32);
      v7 = (WebCore *)*((_QWORD *)v5 + 170);
      if (v7)
      {
        ++*((_DWORD *)v7 + 6);
        this = WebCore::TrackListBase::remove(v7, a2, 1);
        if (*((_DWORD *)v7 + 6) == 1)
          this = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v7 + 72))(v7);
        else
          --*((_DWORD *)v7 + 6);
      }
      else
      {
        this = WebCore::TrackListBase::remove(0, a2, 1);
      }
    }
  }
LABEL_10:
  if (*((_DWORD *)a2 + 4) == 1)
    return (WebCore *)(*(uint64_t (**)(WebCore::VideoTrack *))(*(_QWORD *)a2 + 16))(a2);
  --*((_DWORD *)a2 + 4);
  return this;
}

WebCore *`non-virtual thunk to'WebCore::HTMLMediaElement::willRemoveVideoTrack(WebCore::HTMLMediaElement *this, WebCore::VideoTrack *a2)
{
  return WebCore::HTMLMediaElement::willRemoveVideoTrack((WebCore::HTMLMediaElement *)((char *)this - 256), a2);
}

uint64_t *WebCore::HTMLMediaElement::textTrackAddCue(uint64_t *this, WebCore::TextTrack *a2, WebCore::TextTrackCue *a3)
{
  WebCore::HTMLMediaElement *v4;
  uint64_t *v5;
  _QWORD *v6;
  __int128 v7;
  __int128 *v8;
  uint64_t **v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[24];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (*((_DWORD *)a2 + 56))
  {
    v4 = (WebCore::HTMLMediaElement *)this;
    v5 = this + 173;
    if (!this[173])
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      std::unique_ptr<WebCore::HTMLMediaElement::CueData>::reset[abi:sn180100](v5, v6);
    }
    v7 = *((_OWORD *)a3 + 5);
    v17 = *((_OWORD *)a3 + 4);
    v13 = v7;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v17, (const WTF::MediaTime *)&v13) == -1)
      v8 = &v13;
    else
      v8 = &v17;
    v16 = *v8;
    v13 = *((_OWORD *)a3 + 4);
    v14 = v16;
    *(_QWORD *)v15 = a3;
    *(_OWORD *)&v15[8] = v16;
    if (!WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::treeSearch((_QWORD *)*v5, (WTF::MediaTime *)&v13))
    {
      v9 = (uint64_t **)*v5;
      v17 = v13;
      v18 = v14;
      v19 = *(_OWORD *)v15;
      v20 = *(_QWORD *)&v15[16];
      v10 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 24) = 0;
      v11 = v18;
      *(_OWORD *)(v10 + 32) = v17;
      *(_OWORD *)(v10 + 48) = v11;
      *(_OWORD *)(v10 + 64) = v19;
      *(_QWORD *)(v10 + 80) = v20;
      WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::insertNode(v9, (uint64_t *)v10);
    }
    *(_QWORD *)&v17 = WebCore::HTMLMediaElement::currentMediaTime(v4);
    *((_QWORD *)&v17 + 1) = v12;
    return (uint64_t *)WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)v4, (const WTF::MediaTime *)&v17);
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::textTrackAddCues(uint64_t (**this)(), WebCore::TextTrack *a2, const WebCore::TextTrackCueList *a3))()
{
  return WebCore::HTMLMediaElement::textTrackAddCues(this - 30, a2, a3);
}

uint64_t (**WebCore::HTMLMediaElement::textTrackRemoveCues(WebCore::HTMLMediaElement *this, WebCore::TextTrack *a2, const WebCore::TextTrackCueList *a3))()
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t (**result)();
  unsigned int v21;
  unsigned int v22;
  uint64_t (**v23)();

  if (!*((_QWORD *)this + 37))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = this;
    v6 = (unsigned int *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v5;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  v9 = *((_QWORD *)this + 37);
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_DWORD *)(v11 + 1392);
  *(_DWORD *)(v11 + 1392) = v12 + 1;
  v13 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v13)
  {
    for (i = 0; i < v13; ++i)
    {
      if (i >= v13)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 8 * i);
      ++*(_DWORD *)(v15 + 24);
      v16 = *(_QWORD *)(v15 + 104);
      if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0)
      {
        ++*(_DWORD *)(v17 - 104);
        WebCore::HTMLMediaElement::textTrackRemoveCue(this, a2, (WebCore::TextTrackCue *)v15);
        if (*(_DWORD *)(v17 - 104) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)(v17 - 120) + 16))(v17 - 120);
        else
          --*(_DWORD *)(v17 - 104);
      }
      else
      {
        WebCore::HTMLMediaElement::textTrackRemoveCue(this, a2, (WebCore::TextTrackCue *)v15);
      }
      if (*(_DWORD *)(v15 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      else
        --*(_DWORD *)(v15 + 24);
      v13 = *((unsigned int *)a3 + 5);
    }
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_DWORD *)(v11 + 1392) - 1;
  }
  *(_DWORD *)(v11 + 1392) = v12;
  v18 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v18 = off_1E33C5A20;
  *(_QWORD *)(v18 + 8) = v11;
  v23 = (uint64_t (**)())v18;
  WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v11, 9, v11 + 656, &v23);
  result = v23;
  v23 = 0;
  if (result)
    result = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*result + 1))(result);
  do
  {
    v21 = __ldaxr((unsigned int *)v9);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v9));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v9);
    return (uint64_t (**)())WTF::fastFree((WTF *)v9, v19);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::textTrackRemoveCue(WebCore::HTMLMediaElement *this, WebCore::TextTrack *a2, WebCore::TextTrackCue *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *i;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  WebCore::TextTrackCue *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v60;
  __int128 v61;
  WebCore::TextTrackCue *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  v4 = (uint64_t *)((char *)this + 1384);
  if (!*((_QWORD *)this + 173))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    std::unique_ptr<WebCore::HTMLMediaElement::CueData>::reset[abi:sn180100](v4, v5);
  }
  v6 = *((_OWORD *)a3 + 5);
  v60 = *((_OWORD *)a3 + 4);
  v64 = v6;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v60, (const WTF::MediaTime *)&v64) == -1)
    v7 = &v64;
  else
    v7 = &v60;
  v65 = *v7;
  v60 = *((_OWORD *)a3 + 4);
  v61 = v65;
  v62 = a3;
  v63 = v65;
  v8 = (uint64_t **)*v4;
  v9 = WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::treeSearch((_QWORD *)*v4, (WTF::MediaTime *)&v60);
  if (!v9)
    goto LABEL_87;
  v11 = v9;
  v12 = (uint64_t *)*v9;
  v13 = v9;
  if (*v9)
  {
    v14 = (uint64_t *)v9[1];
    if (!v14)
    {
      v15 = v4;
      v13 = v9;
      goto LABEL_14;
    }
    do
    {
      v13 = v14;
      v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  v12 = (uint64_t *)v13[1];
  if (!v12)
  {
    v15 = v4;
    v16 = (uint64_t *)v13[2];
    v17 = v16;
    goto LABEL_15;
  }
  v15 = v4;
LABEL_14:
  v17 = (uint64_t *)v13[2];
  v12[2] = (uint64_t)v17;
  v16 = (uint64_t *)v13[2];
LABEL_15:
  v18 = v8;
  if (v16)
  {
    v18 = (uint64_t **)(v16 + 1);
    if (v13 == (uint64_t *)*v16)
      v18 = (uint64_t **)v16;
  }
  *v18 = v12;
  if (v13 != v9)
  {
    v19 = *((_OWORD *)v13 + 2);
    v20 = *((_OWORD *)v13 + 3);
    v21 = *((_OWORD *)v13 + 4);
    v9[10] = v13[10];
    *((_OWORD *)v9 + 3) = v20;
    *((_OWORD *)v9 + 4) = v21;
    *((_OWORD *)v9 + 2) = v19;
    v22 = v9 + 6;
    v23 = *v9;
    if (*v9)
    {
      v24 = (_QWORD *)(v23 + 72);
      if (WTF::MediaTime::compare((WTF::MediaTime *)(v9 + 6), (const WTF::MediaTime *)(v23 + 72)) == -1)
        v22 = v24;
    }
    v25 = v11[1];
    if (v25)
    {
      v26 = (_QWORD *)(v25 + 72);
      if (WTF::MediaTime::compare((WTF::MediaTime *)v22, (const WTF::MediaTime *)(v25 + 72)) == -1)
        v22 = v26;
    }
    if (WTF::MediaTime::compare((WTF::MediaTime *)v22, (const WTF::MediaTime *)(v11 + 9)))
    {
      v27 = *v22;
      *(uint64_t *)((char *)v11 + 77) = *(_QWORD *)((char *)v22 + 5);
      v11[9] = v27;
    }
    for (i = (uint64_t *)v11[2]; i; i = (uint64_t *)i[2])
    {
      v30 = i + 6;
      v29 = *i;
      if (*i)
      {
        v31 = (_QWORD *)(v29 + 72);
        if (WTF::MediaTime::compare((WTF::MediaTime *)(i + 6), (const WTF::MediaTime *)(v29 + 72)) == -1)
          v30 = v31;
      }
      v32 = i[1];
      if (v32)
      {
        v33 = (_QWORD *)(v32 + 72);
        if (WTF::MediaTime::compare((WTF::MediaTime *)v30, (const WTF::MediaTime *)(v32 + 72)) == -1)
          v30 = v33;
      }
      if (!WTF::MediaTime::compare((WTF::MediaTime *)v30, (const WTF::MediaTime *)(i + 9)))
        break;
      v34 = *v30;
      *(uint64_t *)((char *)i + 77) = *(_QWORD *)((char *)v30 + 5);
      i[9] = v34;
    }
  }
  if (v17 != v11 && v17 && v17 != v13)
  {
    v35 = v17;
    do
    {
      v37 = v35 + 6;
      v36 = *v35;
      if (*v35)
      {
        v38 = (_QWORD *)(v36 + 72);
        if (WTF::MediaTime::compare((WTF::MediaTime *)(v35 + 6), (const WTF::MediaTime *)(v36 + 72)) == -1)
          v37 = v38;
      }
      v39 = v35[1];
      if (v39)
      {
        v40 = (_QWORD *)(v39 + 72);
        if (WTF::MediaTime::compare((WTF::MediaTime *)v37, (const WTF::MediaTime *)(v39 + 72)) == -1)
          v37 = v40;
      }
      if (!WTF::MediaTime::compare((WTF::MediaTime *)v37, (const WTF::MediaTime *)(v35 + 9)))
        break;
      v41 = *v37;
      *(uint64_t *)((char *)v35 + 77) = *(_QWORD *)((char *)v37 + 5);
      v35[9] = v41;
      v35 = (uint64_t *)v35[2];
    }
    while (v35);
  }
  if (*((_DWORD *)v13 + 6) == 1)
  {
    if (*v8 != v12)
    {
      while (1)
      {
        if (v12 && *((_DWORD *)v12 + 6) != 1)
          goto LABEL_85;
        v10 = *v17;
        if (v12 == (uint64_t *)*v17)
        {
          v10 = v17[1];
          if (!*(_DWORD *)(v10 + 24))
          {
            *(_DWORD *)(v10 + 24) = 1;
            *((_DWORD *)v17 + 6) = 0;
            WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::leftRotate(v8, v17);
            v10 = v17[1];
          }
          v44 = *(_QWORD *)v10;
          if (*(_QWORD *)v10 && *(_DWORD *)(v44 + 24) != 1)
          {
            v45 = *(_QWORD *)(v10 + 8);
            if (v45 && *(_DWORD *)(v45 + 24) != 1)
            {
LABEL_78:
              *(_DWORD *)(v10 + 24) = *((_DWORD *)v17 + 6);
              *((_DWORD *)v17 + 6) = 1;
            }
            else
            {
              *(_DWORD *)(v44 + 24) = 1;
              *(_DWORD *)(v10 + 24) = 0;
              WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::rightRotate(v8, (uint64_t *)v10);
              v46 = v17[1];
              v45 = *(_QWORD *)(v46 + 8);
              *(_DWORD *)(v46 + 24) = *((_DWORD *)v17 + 6);
              *((_DWORD *)v17 + 6) = 1;
              if (!v45)
              {
LABEL_80:
                WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::leftRotate(v8, v17);
                goto LABEL_81;
              }
            }
            *(_DWORD *)(v45 + 24) = 1;
            goto LABEL_80;
          }
          v45 = *(_QWORD *)(v10 + 8);
          if (v45 && *(_DWORD *)(v45 + 24) != 1)
            goto LABEL_78;
        }
        else
        {
          if (!*(_DWORD *)(v10 + 24))
          {
            *(_DWORD *)(v10 + 24) = 1;
            *((_DWORD *)v17 + 6) = 0;
            WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::rightRotate(v8, v17);
            v10 = *v17;
          }
          v42 = *(_QWORD *)(v10 + 8);
          if (v42 && *(_DWORD *)(v42 + 24) != 1)
          {
            v43 = *(_QWORD *)v10;
            if (*(_QWORD *)v10 && *(_DWORD *)(v43 + 24) != 1)
            {
LABEL_71:
              *(_DWORD *)(v10 + 24) = *((_DWORD *)v17 + 6);
              *((_DWORD *)v17 + 6) = 1;
            }
            else
            {
              *(_DWORD *)(v42 + 24) = 1;
              *(_DWORD *)(v10 + 24) = 0;
              WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::leftRotate(v8, (uint64_t *)v10);
              v43 = *(_QWORD *)*v17;
              *(_DWORD *)(*v17 + 24) = *((_DWORD *)v17 + 6);
              *((_DWORD *)v17 + 6) = 1;
              if (!v43)
                goto LABEL_73;
            }
            *(_DWORD *)(v43 + 24) = 1;
LABEL_73:
            WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::rightRotate(v8, v17);
LABEL_81:
            v17 = *v8;
            goto LABEL_82;
          }
          v43 = *(_QWORD *)v10;
          if (*(_QWORD *)v10 && *(_DWORD *)(v43 + 24) != 1)
            goto LABEL_71;
        }
        *(_DWORD *)(v10 + 24) = 0;
LABEL_82:
        v12 = v17;
        v17 = (uint64_t *)v17[2];
        if (v12 == *v8)
          goto LABEL_85;
      }
    }
    if (v12)
LABEL_85:
      *((_DWORD *)v12 + 6) = 1;
  }
  WTF::fastFree((WTF *)v13, (void *)v10);
  v4 = v15;
LABEL_87:
  if ((*(unsigned int (**)(WebCore::TextTrackCue *))(*(_QWORD *)a3 + 128))(a3) == 3
    || (*(unsigned int (**)(WebCore::TextTrackCue *))(*(_QWORD *)a3 + 128))(a3) == 2)
  {
    v58 = 0;
    ++*((_DWORD *)a3 + 6);
    *((_BYTE *)a3 + 357) &= ~4u;
    v47 = 1;
    v48 = a3;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v58 = 1;
  }
  v49 = v4;
  v50 = *v4;
  if (*(_DWORD *)(v50 + 20))
  {
    v51 = 0;
    v52 = 0;
    while (1)
    {
      v53 = *(_QWORD *)(v50 + 8);
      if (!WTF::MediaTime::compare((WTF::MediaTime *)(v53 + v51), (const WTF::MediaTime *)&v60)
        && !WTF::MediaTime::compare((WTF::MediaTime *)(v53 + v51 + 16), (const WTF::MediaTime *)&v61)
        && *(WebCore::TextTrackCue **)(v53 + v51 + 32) == v62)
      {
        break;
      }
      ++v52;
      v51 += 56;
      if (v52 >= *(unsigned int *)(v50 + 20))
        goto LABEL_97;
    }
    (*(void (**)(WebCore::TextTrackCue *, _QWORD))(*(_QWORD *)a3 + 104))(a3, 0);
    v56 = *v49;
    v57 = *(unsigned int *)(*v49 + 20);
    if (56 * v57 - 56 != v51)
    {
      memmove((void *)(*(_QWORD *)(v56 + 8) + v51), (const void *)(*(_QWORD *)(v56 + 8) + v51 + 56), 56 * ((56 * (v57 - v52) - 112) / 0x38) + 56);
      LODWORD(v57) = *(_DWORD *)(v56 + 20);
    }
    *(_DWORD *)(v56 + 20) = v57 - 1;
  }
LABEL_97:
  (*(void (**)(WebCore::TextTrackCue *))(*(_QWORD *)a3 + 160))(a3);
  *(_QWORD *)&v64 = WebCore::HTMLMediaElement::currentMediaTime(this);
  *((_QWORD *)&v64 + 1) = v54;
  result = WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)this, (const WTF::MediaTime *)&v64);
  if (v47)
    *((_BYTE *)v48 + 357) |= 4u;
  if ((v58 & 1) == 0)
  {
    if (*((_DWORD *)v48 + 6) == 1)
      return (*(uint64_t (**)(WebCore::TextTrackCue *))(*(_QWORD *)v48 + 72))(v48);
    else
      --*((_DWORD *)v48 + 6);
  }
  return result;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::textTrackRemoveCues(WebCore::HTMLMediaElement *this, WebCore::TextTrack *a2, const WebCore::TextTrackCueList *a3))()
{
  return WebCore::HTMLMediaElement::textTrackRemoveCues((WebCore::HTMLMediaElement *)((char *)this - 240), a2, a3);
}

uint64_t *`non-virtual thunk to'WebCore::HTMLMediaElement::textTrackAddCue(WebCore::HTMLMediaElement *this, WebCore::TextTrack *a2, WebCore::TextTrackCue *a3)
{
  return WebCore::HTMLMediaElement::textTrackAddCue((uint64_t *)this - 30, a2, a3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::textTrackRemoveCue(WebCore::HTMLMediaElement *this, WebCore::TextTrack *a2, WebCore::TextTrackCue *a3)
{
  return WebCore::HTMLMediaElement::textTrackRemoveCue((WebCore::HTMLMediaElement *)((char *)this - 240), a2, a3);
}

uint64_t WebCore::HTMLMediaElement::isSafeToLoadURL(_QWORD *a1, WTF::URL *this, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v18;
  WebCore::FrameLoader *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  char canDisplay;
  WTF::StringImpl *v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  const WTF::URL *v30;
  const WTF::URL *v31;
  const WTF::URL *v32;
  int isIPAddressDisallowed;
  uint64_t v34;
  WTF::StringImpl *v35;
  const char *v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::Logger *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  WebCore *v67;
  BOOL v68;
  uint64_t isAllowedToLoadMediaURL;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unsigned int v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  NSObject *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::Logger *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::Logger *v103;
  uint64_t v104;
  WTF::StringImpl **v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl *v111;
  _BOOL8 v112;
  char v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  const WTF::String *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  char v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  NSObject *v134;
  uint64_t v135;
  void *v136;
  char *v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  WTF::Logger *v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::Logger *v151;
  uint64_t v152;
  WTF::StringImpl **v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  int v158;
  WTF::StringImpl *v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  _QWORD *v164;
  uint64_t v165;
  char v166;
  const char *v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  WTF::Logger *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  __int128 buf;
  const char *v178;
  WTF::StringImpl *v179;
  int v180;
  WTF::StringImpl *v181[3];

  v181[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 8) & 1) == 0)
  {
    if (!a4)
      return 0;
    v6 = a1[228];
    v7 = a1[229];
    v167 = "HTMLMediaElement";
    v168 = 17;
    v169 = "isSafeToLoadURL";
    v170 = v7;
    if (!*(_BYTE *)(v6 + 12))
      return 0;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v167);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::String((WTF::String *)&v173, " is invalid");
    if (v175)
    {
      v8 = *((_DWORD *)v175 + 1);
      if (v174)
        goto LABEL_6;
    }
    else
    {
      v8 = 0;
      if (v174)
      {
LABEL_6:
        v9 = *((_DWORD *)v174 + 1);
        if (v173)
        {
LABEL_7:
          v10 = *((_DWORD *)v173 + 1);
LABEL_8:
          if ((v10 | v9) < 0
            || ((v11 = __OFADD__(v9, v10), v12 = v9 + v10, !v11) ? (v13 = 0) : (v13 = 1),
                v8 < 0 || (v13 & 1) != 0 || (v14 = (v8 + v12), __OFADD__(v8, v12))))
          {
            v176 = 0;
            goto LABEL_350;
          }
          if (v175 && (*((_BYTE *)v175 + 16) & 4) == 0)
          {
            v15 = 0;
            goto LABEL_41;
          }
          if (v174)
          {
            v37 = *((_DWORD *)v174 + 4);
            v15 = (v37 >> 2) & 1;
            if (v173 && (v37 & 4) != 0)
              goto LABEL_40;
          }
          else
          {
            if (v173)
            {
LABEL_40:
              v15 = (*((unsigned __int8 *)v173 + 16) >> 2) & 1;
              goto LABEL_41;
            }
            v15 = 1;
          }
LABEL_41:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14, v15, v175, (uint64_t)v174, (uint64_t)v173, &v176);
          if (v176)
          {
            v39 = v173;
            v173 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v38);
              else
                *(_DWORD *)v39 -= 2;
            }
            v40 = v174;
            v174 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v38);
              else
                *(_DWORD *)v40 -= 2;
            }
            v41 = v175;
            v175 = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v38);
              else
                *(_DWORD *)v41 -= 2;
            }
            v42 = qword_1ECE7C4A0;
            v43 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v43)
            {
              WTF::String::utf8();
              v45 = v171 ? (char *)v171 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v45;
              _os_log_impl(&dword_1940B8000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v43 = (uint64_t)v171;
              v171 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 1)
                  v43 = WTF::fastFree((WTF *)v43, v44);
                else
                  --*(_DWORD *)v43;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490)
            {
              v46 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v47 = *v46;
                if ((v47 & 1) != 0)
                  break;
                v48 = __ldaxr(v46);
                if (v48 == v47)
                {
                  if (!__stxr(v47 | 1, v46))
                  {
                    v49 = WTF::Logger::observers((WTF::Logger *)v43);
                    v50 = *(unsigned int *)(v49 + 12);
                    if ((_DWORD)v50)
                    {
                      v51 = *(uint64_t **)v49;
                      v52 = *(_QWORD *)v49 + 8 * v50;
                      do
                      {
                        v53 = *v51;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v167);
                        LODWORD(v178) = 0;
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v180 = 0;
                        WTF::String::String((WTF::String *)v181, " is invalid");
                        v171 = 0;
                        v172 = 0;
                        v54 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v172) = 3;
                        v171 = v54;
                        v55 = HIDWORD(v172);
                        *((_DWORD *)v54 + 4 * HIDWORD(v172)) = buf;
                        v56 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v54 + 2 * v55 + 1) = v56;
                        *((_DWORD *)v54 + 4 * (v55 + 1)) = (_DWORD)v178;
                        v57 = v179;
                        if (v179)
                          *(_DWORD *)v179 += 2;
                        *((_QWORD *)v54 + 2 * (v55 + 1) + 1) = v57;
                        *((_DWORD *)v54 + 4 * (v55 + 2)) = v180;
                        v58 = v181[0];
                        if (v181[0])
                          *(_DWORD *)v181[0] += 2;
                        *((_QWORD *)v54 + 2 * (v55 + 2) + 1) = v58;
                        HIDWORD(v172) = v55 + 3;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v53 + 16))(v53, &WebCore::LogMedia, 1, &v171);
                        v59 = v171;
                        if (HIDWORD(v172))
                        {
                          v60 = 16 * HIDWORD(v172);
                          v61 = (WTF::StringImpl **)((char *)v171 + 8);
                          do
                          {
                            v62 = *v61;
                            *v61 = 0;
                            if (v62)
                            {
                              if (*(_DWORD *)v62 == 2)
                                WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v44);
                              else
                                *(_DWORD *)v62 -= 2;
                            }
                            v61 += 2;
                            v60 -= 16;
                          }
                          while (v60);
                          v59 = v171;
                        }
                        if (v59)
                        {
                          v171 = 0;
                          LODWORD(v172) = 0;
                          WTF::fastFree(v59, v44);
                        }
                        v63 = v181[0];
                        v181[0] = 0;
                        if (v63)
                        {
                          if (*(_DWORD *)v63 == 2)
                            WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v44);
                          else
                            *(_DWORD *)v63 -= 2;
                        }
                        v64 = v179;
                        v179 = 0;
                        if (v64)
                        {
                          if (*(_DWORD *)v64 == 2)
                            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v44);
                          else
                            *(_DWORD *)v64 -= 2;
                        }
                        v65 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v65)
                        {
                          if (*(_DWORD *)v65 == 2)
                            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v44);
                          else
                            *(_DWORD *)v65 -= 2;
                        }
                        ++v51;
                      }
                      while (v51 != (uint64_t *)v52);
                    }
                    v66 = __ldxr(v46);
                    if (v66 == 1)
                    {
                      if (!__stlxr(0, v46))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v79 = v176;
            v176 = 0;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
                WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v44);
              else
                *(_DWORD *)v79 -= 2;
            }
            return 0;
          }
LABEL_350:
          __break(0xC471u);
          JUMPOUT(0x195C16E58);
        }
LABEL_204:
        v10 = 0;
        goto LABEL_8;
      }
    }
    v9 = 0;
    if (v173)
      goto LABEL_7;
    goto LABEL_204;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 528);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_218;
  }
  v19 = *(WebCore::FrameLoader **)(v18 + 8);
  if (!v19)
  {
LABEL_218:
    v113 = 1;
    goto LABEL_235;
  }
  v20 = (unsigned int *)((char *)v19 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(a1[5] + 8) + 192), this);
  v23 = v22;
  if (v22)
  {
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 + 1, v22));
  }
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  canDisplay = WebCore::SecurityOrigin::canDisplay((uint64_t)v22, this, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  v27 = canDisplay;
  if (!v23)
    goto LABEL_29;
  do
  {
    v28 = __ldaxr(v23);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v23));
  if (v29)
  {
LABEL_29:
    if ((canDisplay & 1) != 0)
      goto LABEL_30;
    goto LABEL_234;
  }
  atomic_store(1u, v23);
  v114 = (WTF::StringImpl *)*((_QWORD *)v23 + 6);
  *((_QWORD *)v23 + 6) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v26);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = (WTF::StringImpl *)*((_QWORD *)v23 + 5);
  *((_QWORD *)v23 + 5) = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, v26);
    else
      *(_DWORD *)v115 -= 2;
  }
  v116 = v23[8];
  if ((_DWORD)v116 != -1)
    ((void (*)(__int128 *, unsigned int *))off_1E33C4BB8[v116])(&buf, v23 + 2);
  v23[8] = -1;
  WTF::fastFree((WTF *)v23, v26);
  if ((v27 & 1) == 0)
  {
LABEL_234:
    v113 = 0;
LABEL_235:
    if (a3 != 1)
      goto LABEL_324;
    WTF::URL::stringCenterEllipsizedToLength(this);
    WebCore::FrameLoader::reportLocalLoadFailed((uint64_t)v19, (WebCore::LocalFrame *)&buf, v117);
    v119 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2)
      {
        WTF::StringImpl::destroy(v119, v118);
        if (!a4)
          goto LABEL_324;
LABEL_240:
        v120 = a1[228];
        v121 = a1[229];
        v167 = "HTMLMediaElement";
        v168 = 17;
        v169 = "isSafeToLoadURL";
        v170 = v121;
        if (!*(_BYTE *)(v120 + 12))
          goto LABEL_324;
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v167);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::String::String((WTF::String *)&v173, " was rejected by SecurityOrigin");
        if (v175)
        {
          v122 = *((_DWORD *)v175 + 1);
          if (v174)
            goto LABEL_243;
        }
        else
        {
          v122 = 0;
          if (v174)
          {
LABEL_243:
            v123 = *((_DWORD *)v174 + 1);
            if (v173)
            {
LABEL_244:
              v124 = *((_DWORD *)v173 + 1);
LABEL_245:
              if ((v124 | v123) < 0
                || ((v11 = __OFADD__(v123, v124), v125 = v123 + v124, !v11) ? (v126 = 0) : (v126 = 1),
                    v122 < 0 || (v126 & 1) != 0 || (v127 = (v122 + v125), __OFADD__(v122, v125))))
              {
                v176 = 0;
                goto LABEL_348;
              }
              if (v175 && (*((_BYTE *)v175 + 16) & 4) == 0)
              {
                v128 = 0;
                goto LABEL_259;
              }
              if (v174)
              {
                v129 = *((_DWORD *)v174 + 4);
                v128 = (v129 >> 2) & 1;
                if (v173 && (v129 & 4) != 0)
                  goto LABEL_258;
              }
              else
              {
                if (v173)
                {
LABEL_258:
                  v128 = (*((unsigned __int8 *)v173 + 16) >> 2) & 1;
                  goto LABEL_259;
                }
                v128 = 1;
              }
LABEL_259:
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v127, v128, v175, (uint64_t)v174, (uint64_t)v173, &v176);
              if (v176)
              {
                v131 = v173;
                v173 = 0;
                if (v131)
                {
                  if (*(_DWORD *)v131 == 2)
                    WTF::StringImpl::destroy(v131, v130);
                  else
                    *(_DWORD *)v131 -= 2;
                }
                v132 = v174;
                v174 = 0;
                if (v132)
                {
                  if (*(_DWORD *)v132 == 2)
                    WTF::StringImpl::destroy(v132, v130);
                  else
                    *(_DWORD *)v132 -= 2;
                }
                v133 = v175;
                v175 = 0;
                if (v133)
                {
                  if (*(_DWORD *)v133 == 2)
                    WTF::StringImpl::destroy(v133, v130);
                  else
                    *(_DWORD *)v133 -= 2;
                }
                v134 = qword_1ECE7C4A0;
                v135 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v135)
                {
                  WTF::String::utf8();
                  v137 = v171 ? (char *)v171 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v137;
                  _os_log_impl(&dword_1940B8000, v134, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v135 = (uint64_t)v171;
                  v171 = 0;
                  if (v135)
                  {
                    if (*(_DWORD *)v135 == 1)
                      v135 = WTF::fastFree((WTF *)v135, v136);
                    else
                      --*(_DWORD *)v135;
                  }
                }
                if (WebCore::LogMedia && byte_1ECE7C490)
                {
                  v138 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v139 = *v138;
                    if ((v139 & 1) != 0)
                      break;
                    v140 = __ldaxr(v138);
                    if (v140 == v139)
                    {
                      if (!__stxr(v139 | 1, v138))
                      {
                        v166 = v113;
                        v141 = WTF::Logger::observers((WTF::Logger *)v135);
                        v142 = *(unsigned int *)(v141 + 12);
                        if ((_DWORD)v142)
                        {
                          v143 = *(uint64_t **)v141;
                          v144 = *(_QWORD *)v141 + 8 * v142;
                          do
                          {
                            v145 = *v143;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v167);
                            LODWORD(v178) = 0;
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v180 = 0;
                            WTF::String::String((WTF::String *)v181, " was rejected by SecurityOrigin");
                            v171 = 0;
                            v172 = 0;
                            v146 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                            LODWORD(v172) = 3;
                            v171 = v146;
                            v147 = HIDWORD(v172);
                            *((_DWORD *)v146 + 4 * HIDWORD(v172)) = buf;
                            v148 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v146 + 2 * v147 + 1) = v148;
                            *((_DWORD *)v146 + 4 * (v147 + 1)) = (_DWORD)v178;
                            v149 = v179;
                            if (v179)
                              *(_DWORD *)v179 += 2;
                            *((_QWORD *)v146 + 2 * (v147 + 1) + 1) = v149;
                            *((_DWORD *)v146 + 4 * (v147 + 2)) = v180;
                            v150 = v181[0];
                            if (v181[0])
                              *(_DWORD *)v181[0] += 2;
                            *((_QWORD *)v146 + 2 * (v147 + 2) + 1) = v150;
                            HIDWORD(v172) = v147 + 3;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v145 + 16))(v145, &WebCore::LogMedia, 1, &v171);
                            v151 = v171;
                            if (HIDWORD(v172))
                            {
                              v152 = 16 * HIDWORD(v172);
                              v153 = (WTF::StringImpl **)((char *)v171 + 8);
                              do
                              {
                                v154 = *v153;
                                *v153 = 0;
                                if (v154)
                                {
                                  if (*(_DWORD *)v154 == 2)
                                    WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v136);
                                  else
                                    *(_DWORD *)v154 -= 2;
                                }
                                v153 += 2;
                                v152 -= 16;
                              }
                              while (v152);
                              v151 = v171;
                            }
                            if (v151)
                            {
                              v171 = 0;
                              LODWORD(v172) = 0;
                              WTF::fastFree(v151, v136);
                            }
                            v155 = v181[0];
                            v181[0] = 0;
                            if (v155)
                            {
                              if (*(_DWORD *)v155 == 2)
                                WTF::StringImpl::destroy(v155, (WTF::StringImpl *)v136);
                              else
                                *(_DWORD *)v155 -= 2;
                            }
                            v156 = v179;
                            v179 = 0;
                            if (v156)
                            {
                              if (*(_DWORD *)v156 == 2)
                                WTF::StringImpl::destroy(v156, (WTF::StringImpl *)v136);
                              else
                                *(_DWORD *)v156 -= 2;
                            }
                            v157 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v157)
                            {
                              if (*(_DWORD *)v157 == 2)
                                WTF::StringImpl::destroy(v157, (WTF::StringImpl *)v136);
                              else
                                *(_DWORD *)v157 -= 2;
                            }
                            ++v143;
                          }
                          while (v143 != (uint64_t *)v144);
                        }
                        v158 = __ldxr(v138);
                        if (v158 == 1)
                        {
                          v113 = v166;
                          if (!__stlxr(0, v138))
                            break;
                        }
                        else
                        {
                          __clrex();
                          v113 = v166;
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v159 = v176;
                v176 = 0;
                if (v159)
                {
                  if (*(_DWORD *)v159 == 2)
                    WTF::StringImpl::destroy(v159, (WTF::StringImpl *)v136);
                  else
                    *(_DWORD *)v159 -= 2;
                }
LABEL_324:
                isAllowedToLoadMediaURL = 0;
                if ((v113 & 1) != 0)
                  return isAllowedToLoadMediaURL;
                goto LABEL_325;
              }
LABEL_348:
              __break(0xC471u);
              JUMPOUT(0x195C16E64);
            }
LABEL_338:
            v124 = 0;
            goto LABEL_245;
          }
        }
        v123 = 0;
        if (v173)
          goto LABEL_244;
        goto LABEL_338;
      }
      *(_DWORD *)v119 -= 2;
    }
    if (!a4)
      goto LABEL_324;
    goto LABEL_240;
  }
LABEL_30:
  if (!WTF::portAllowed() || WebCore::isIPAddressDisallowed(this, v30))
  {
    if (a3 != 1)
      goto LABEL_210;
    WebCore::FrameLoader::reportBlockedLoadFailed(v19, this, v31);
    if (!a4)
      goto LABEL_210;
    isIPAddressDisallowed = WebCore::isIPAddressDisallowed(this, v32);
    v34 = a1[228];
    if (isIPAddressDisallowed)
    {
      v35 = (WTF::StringImpl *)a1[229];
      *(_QWORD *)&buf = "HTMLMediaElement";
      *((_QWORD *)&buf + 1) = 17;
      v178 = "isSafeToLoadURL";
      v179 = v35;
      if (*(_BYTE *)(v34 + 12))
      {
        v36 = " was rejected because the address not allowed";
LABEL_132:
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::URL,char [46]>((WTF::Logger::LogSiteIdentifier *)&buf, v36);
      }
    }
    else
    {
      v80 = (WTF::StringImpl *)a1[229];
      *(_QWORD *)&buf = "HTMLMediaElement";
      *((_QWORD *)&buf + 1) = 17;
      v178 = "isSafeToLoadURL";
      v179 = v80;
      if (*(_BYTE *)(v34 + 12))
      {
        v36 = " was rejected because the port is not allowed";
        goto LABEL_132;
      }
    }
LABEL_210:
    isAllowedToLoadMediaURL = 0;
    goto LABEL_325;
  }
  v67 = (WebCore *)a1[5];
  if (*(_QWORD *)v67)
    v68 = (*(_WORD *)(*(_QWORD *)v67 + 28) & 0x80) == 0;
  else
    v68 = 1;
  v112 = !v68 && *(unsigned __int8 *)(*(_QWORD *)v67 + 193) == 0;
  isAllowedToLoadMediaURL = WebCore::isAllowedToLoadMediaURL(v67, this, (const WTF::URL *)v112);
  if ((isAllowedToLoadMediaURL & 1) == 0 && a4)
  {
    v70 = a1[228];
    v71 = a1[229];
    v167 = "HTMLMediaElement";
    v168 = 17;
    v169 = "isSafeToLoadURL";
    v170 = v71;
    if (!*(_BYTE *)(v70 + 12))
      goto LABEL_210;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v167);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::String((WTF::String *)&v173, " was rejected by Content Security Policy");
    if (v175)
    {
      v72 = *((_DWORD *)v175 + 1);
      if (v174)
        goto LABEL_112;
    }
    else
    {
      v72 = 0;
      if (v174)
      {
LABEL_112:
        v73 = *((_DWORD *)v174 + 1);
        if (v173)
        {
LABEL_113:
          v74 = *((_DWORD *)v173 + 1);
LABEL_114:
          if ((v74 | v73) < 0
            || ((v11 = __OFADD__(v73, v74), v75 = v73 + v74, !v11) ? (v76 = 0) : (v76 = 1),
                v72 < 0 || (v76 & 1) != 0 || (v77 = (v72 + v75), __OFADD__(v72, v75))))
          {
            v176 = 0;
            goto LABEL_350;
          }
          if (!v175 || (*((_BYTE *)v175 + 16) & 4) != 0)
          {
            if (v174)
            {
              v81 = *((_DWORD *)v174 + 4);
              v78 = (v81 >> 2) & 1;
              if (!v173 || (v81 & 4) == 0)
                goto LABEL_141;
            }
            else if (!v173)
            {
              v78 = 1;
              goto LABEL_141;
            }
            v78 = (*((unsigned __int8 *)v173 + 16) >> 2) & 1;
          }
          else
          {
            v78 = 0;
          }
LABEL_141:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v77, v78, v175, (uint64_t)v174, (uint64_t)v173, &v176);
          if (!v176)
            goto LABEL_350;
          v83 = v173;
          v173 = 0;
          if (v83)
          {
            if (*(_DWORD *)v83 == 2)
              WTF::StringImpl::destroy(v83, v82);
            else
              *(_DWORD *)v83 -= 2;
          }
          v84 = v174;
          v174 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              WTF::StringImpl::destroy(v84, v82);
            else
              *(_DWORD *)v84 -= 2;
          }
          v85 = v175;
          v175 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v82);
            else
              *(_DWORD *)v85 -= 2;
          }
          v86 = qword_1ECE7C4A0;
          v87 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v87)
          {
            WTF::String::utf8();
            v89 = v171 ? (char *)v171 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v89;
            _os_log_impl(&dword_1940B8000, v86, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v87 = (uint64_t)v171;
            v171 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 1)
                v87 = WTF::fastFree((WTF *)v87, v88);
              else
                --*(_DWORD *)v87;
            }
          }
          if (WebCore::LogMedia && byte_1ECE7C490)
          {
            v90 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v91 = *v90;
              if ((v91 & 1) != 0)
                break;
              v92 = __ldaxr(v90);
              if (v92 == v91)
              {
                if (!__stxr(v91 | 1, v90))
                {
                  v93 = WTF::Logger::observers((WTF::Logger *)v87);
                  v94 = *(unsigned int *)(v93 + 12);
                  if ((_DWORD)v94)
                  {
                    v95 = *(uint64_t **)v93;
                    v96 = *(_QWORD *)v93 + 8 * v94;
                    do
                    {
                      v97 = *v95;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v167);
                      LODWORD(v178) = 0;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v180 = 0;
                      WTF::String::String((WTF::String *)v181, " was rejected by Content Security Policy");
                      v171 = 0;
                      v172 = 0;
                      v98 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                      LODWORD(v172) = 3;
                      v171 = v98;
                      v99 = HIDWORD(v172);
                      *((_DWORD *)v98 + 4 * HIDWORD(v172)) = buf;
                      v100 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v98 + 2 * v99 + 1) = v100;
                      *((_DWORD *)v98 + 4 * (v99 + 1)) = (_DWORD)v178;
                      v101 = v179;
                      if (v179)
                        *(_DWORD *)v179 += 2;
                      *((_QWORD *)v98 + 2 * (v99 + 1) + 1) = v101;
                      *((_DWORD *)v98 + 4 * (v99 + 2)) = v180;
                      v102 = v181[0];
                      if (v181[0])
                        *(_DWORD *)v181[0] += 2;
                      *((_QWORD *)v98 + 2 * (v99 + 2) + 1) = v102;
                      HIDWORD(v172) = v99 + 3;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v97 + 16))(v97, &WebCore::LogMedia, 1, &v171);
                      v103 = v171;
                      if (HIDWORD(v172))
                      {
                        v104 = 16 * HIDWORD(v172);
                        v105 = (WTF::StringImpl **)((char *)v171 + 8);
                        do
                        {
                          v106 = *v105;
                          *v105 = 0;
                          if (v106)
                          {
                            if (*(_DWORD *)v106 == 2)
                              WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v88);
                            else
                              *(_DWORD *)v106 -= 2;
                          }
                          v105 += 2;
                          v104 -= 16;
                        }
                        while (v104);
                        v103 = v171;
                      }
                      if (v103)
                      {
                        v171 = 0;
                        LODWORD(v172) = 0;
                        WTF::fastFree(v103, v88);
                      }
                      v107 = v181[0];
                      v181[0] = 0;
                      if (v107)
                      {
                        if (*(_DWORD *)v107 == 2)
                          WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v88);
                        else
                          *(_DWORD *)v107 -= 2;
                      }
                      v108 = v179;
                      v179 = 0;
                      if (v108)
                      {
                        if (*(_DWORD *)v108 == 2)
                          WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v88);
                        else
                          *(_DWORD *)v108 -= 2;
                      }
                      v109 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v109)
                      {
                        if (*(_DWORD *)v109 == 2)
                          WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v88);
                        else
                          *(_DWORD *)v109 -= 2;
                      }
                      ++v95;
                    }
                    while (v95 != (uint64_t *)v96);
                  }
                  v110 = __ldxr(v90);
                  if (v110 == 1)
                  {
                    if (!__stlxr(0, v90))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v111 = v176;
          v176 = 0;
          if (v111)
          {
            if (*(_DWORD *)v111 == 2)
              WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v88);
            else
              *(_DWORD *)v111 -= 2;
          }
          goto LABEL_210;
        }
LABEL_222:
        v74 = 0;
        goto LABEL_114;
      }
    }
    v73 = 0;
    if (v173)
      goto LABEL_113;
    goto LABEL_222;
  }
LABEL_325:
  v160 = (unsigned int *)((char *)v19 + 8);
  do
  {
    v161 = __ldaxr(v160);
    v162 = v161 - 1;
  }
  while (__stlxr(v162, v160));
  if (!v162)
  {
    atomic_store(1u, v160);
    v164 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v164 = off_1E31FE290;
    v164[1] = v160;
    *(_QWORD *)&buf = v164;
    WTF::ensureOnMainThread();
    v165 = buf;
    *(_QWORD *)&buf = 0;
    if (v165)
      (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  }
  return isAllowedToLoadMediaURL;
}

uint64_t WebCore::isAllowedToLoadMediaURL(WebCore *this, const WebCore::HTMLMediaElement *a2, const WTF::URL *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v12;
  uint64_t result;
  __int16 v14;
  __int16 v15;
  WTF::StringImpl *v16[5];

  if ((a3 & 1) != 0)
    return 1;
  v5 = *((_QWORD *)this + 1);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v5 + 192));
  v7 = v6;
  if (v6)
  {
    do
      v8 = __ldaxr(v6);
    while (__stlxr(v8 + 1, v6));
  }
  v16[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v16);
  v3 = WebCore::ContentSecurityPolicy::allowResourceFromSource((uint64_t)v7, a2, 0, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForMedia, 0, (WTF::URL *)v16);
  v10 = v16[0];
  v16[0] = 0;
  if (!v10)
  {
LABEL_8:
    if (!v7)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v10, v9);
  if (!v7)
    goto LABEL_11;
LABEL_9:
  if (atomic_load(v7))
  {
    do
      v12 = __ldaxr(v7);
    while (__stlxr(v12 - 1, v7));
LABEL_11:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v14 = *(_WORD *)(v5 + 30);
      if ((v14 & 0x400) == 0)
      {
        v15 = *(_WORD *)(v5 + 28);
        if ((v15 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, v9);
        }
        else
        {
          if ((v15 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v14 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v14 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    return v3;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::HTMLMediaElement::mediaLoadingFailedFatally(WebCore::HTMLMediaElement *this, int a2)
{
  _QWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  unsigned int *Event;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  unsigned int *result;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int16 v23;
  __int16 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  if ((*((_QWORD *)this + 42) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 304));
  if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 360));
  if ((*((_QWORD *)this + 77) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 584));
  *((_DWORD *)this + 264) = 0;
  if (a2 == 6)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::HTMLMediaElement::mediaLoadingFailedFatally(WebCore::MediaPlayerNetworkState)::$_0::operator()((uint64_t)&v26, (uint64_t)this, (uint64_t *)&v25);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v6 = 0x300000001;
  }
  else
  {
    if (a2 != 5)
      goto LABEL_18;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::HTMLMediaElement::mediaLoadingFailedFatally(WebCore::MediaPlayerNetworkState)::$_0::operator()((uint64_t)&v26, (uint64_t)this, (uint64_t *)&v25);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v6 = 0x200000001;
  }
  *v4 = v6;
  v7 = v26;
  v26 = 0;
  v4[1] = v7;
  v8 = (WTF *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = v4;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v21 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v5);
        else
          *(_DWORD *)v21 -= 2;
      }
      WTF::fastFree(v8, v5);
      v22 = v26;
      v26 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v5);
        else
          *(_DWORD *)v22 -= 2;
      }
      goto LABEL_15;
    }
    --*(_DWORD *)v8;
  }
  v26 = 0;
LABEL_15:
  v9 = v25;
  v25 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_18:
  v10 = (_DWORD *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v10)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 80))(v10);
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v10 + 104))(v10, 0);
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  *((_DWORD *)this + 225) = 1;
  Event = WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)this, 0);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow((WebCore *)Event);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  v15 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
  *(_DWORD *)(v15 + 16) = 1;
  *(_QWORD *)v15 = off_1E33A4B48;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v14 + 784) != 0);
  v17 = *(_DWORD **)(v14 + 784);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(v15 + 24) = v17;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v16;
  *(_QWORD *)(v15 + 64) = 0;
  v26 = (WTF::StringImpl *)v15;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v26);
  result = (unsigned int *)v26;
  v26 = 0;
  if (result)
  {
    if (result[4] == 1)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  v20 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      v23 = *(_WORD *)(v20 + 30);
      if ((v23 & 0x400) == 0)
      {
        v24 = *(_WORD *)(v20 + 28);
        if ((v24 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v20, v18);
        }
        else
        {
          if ((v24 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 160) + 16))(*(_QWORD *)(v20 + 160));
            v23 = *(_WORD *)(v20 + 30);
          }
          *(_WORD *)(v20 + 30) = v23 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
        }
      }
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::mediaLoadingFailedFatally(WebCore::MediaPlayerNetworkState)::$_0::operator()(uint64_t result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  WTF::StringImpl *v14;

  v3 = (_QWORD *)result;
  v4 = *a3;
  *a3 = 0;
  v5 = *(_QWORD *)(a2 + 1136);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 272)) == 0)
  {
    *(_QWORD *)result = v4;
    return result;
  }
  v7 = *(_DWORD *)v6 + 2;
  *(_DWORD *)v6 = v7;
  if (v4)
  {
    v8 = *(_DWORD *)(v4 + 4);
    *(_DWORD *)v4 += 2;
    v7 = *(_DWORD *)v6;
  }
  else
  {
    v8 = 0;
  }
  *(_DWORD *)v6 = v7 + 2;
  v9 = *(_DWORD *)(v6 + 4);
  if (v9 < 0
    || ((v10 = __OFADD__(v9, 2), v11 = v9 + 2, !v10) ? (v12 = 0) : (v12 = 1),
        v8 < 0 || (v12 & 1) != 0 || (result = (v8 + v11), __OFADD__(v8, v11))))
  {
    *v3 = 0;
LABEL_35:
    __break(0xC471u);
    return result;
  }
  if (v4 && (*(_BYTE *)(v4 + 16) & 4) == 0)
    v13 = 0;
  else
    v13 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v4, (int8x16_t *)": ", 2u, v6, v3);
  if (!*v3)
    goto LABEL_35;
  if (*(_DWORD *)v6 == 2)
  {
    result = WTF::StringImpl::destroy((WTF::StringImpl *)v6, v14);
    if (!v4)
      goto LABEL_20;
  }
  else
  {
    *(_DWORD *)v6 -= 2;
    if (!v4)
      goto LABEL_20;
  }
  if (*(_DWORD *)v4 == 2)
    result = WTF::StringImpl::destroy((WTF::StringImpl *)v4, v14);
  else
    *(_DWORD *)v4 -= 2;
LABEL_20:
  if (*(_DWORD *)v6 == 2)
  {
    result = WTF::StringImpl::destroy((WTF::StringImpl *)v6, v14);
    if (!v4)
      return result;
  }
  else
  {
    *(_DWORD *)v6 -= 2;
    if (!v4)
      return result;
  }
  if (*(_DWORD *)v4 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v4, v14);
  *(_DWORD *)v4 -= 2;
  return result;
}

unsigned int *WebCore::HTMLMediaElement::mediaPlayerNetworkStateChanged(WebCore::HTMLMediaElement *this)
{
  unint64_t v2;
  unsigned int *result;

  ++*((_DWORD *)this + 287);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 552))(*(_QWORD *)(*((_QWORD *)this + 142) + 72));
  result = WebCore::HTMLMediaElement::setNetworkState(this, v2);
  --*((_DWORD *)this + 287);
  return result;
}

unsigned int *WebCore::HTMLMediaElement::setNetworkState(WebCore::HTMLMediaElement *this, unint64_t a2)
{
  unint64_t v2;
  WebCore::HTMLMediaElement *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Lock *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  int v46;
  BOOL v47;
  WTF::MonotonicTime *v48;
  uint64_t v49;
  double v50;
  int v51;
  unsigned int *result;
  uint64_t v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  int v56;
  char v57;
  _DWORD *v58;
  void *v59;
  WTF::Lock *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  WTF::RunLoop *v80;
  unsigned int *v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned __int8 **v87;
  unsigned __int8 *v88;
  int v90;
  _DWORD *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned __int8 *v96;
  void *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  NSObject *v108;
  uint64_t v109;
  char *v110;
  unsigned __int8 *v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  WTF::Logger *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF::Logger *v128;
  uint64_t v129;
  WTF::StringImpl **v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  int v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  char *v143;
  int v144;
  uint64_t v145;
  WTF::NativePromiseBase *v146;
  WTF::Lock *v147;
  int v148;
  unsigned int *v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  WTF::Logger *v162;
  WTF::Logger *v163;
  int v164;
  int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  WTF::StringImpl *v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  __int128 v175;
  unsigned int *v176;
  unsigned int *v177;
  __int128 v178;
  const char *v179;
  uint64_t v180;
  WTF::Logger *v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  WTF::NativePromiseBase *v185;
  WTF::Lock *v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  __int128 buf;
  int v203;
  int v204;
  WTF::StringImpl *v205;
  int v206;
  int v207;
  WTF::StringImpl *v208;
  int v209;
  WTF::StringImpl *v210;
  int v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  WTF::StringImpl *v214;
  __int128 v215;
  WTF::StringImpl *v216[4];
  int v217;
  char v218;
  uint64_t v219;
  _DWORD *v220;
  uint64_t v221;
  char v222;
  char v223;
  char v224;
  uint64_t v225;
  uint64_t v226;

  v2 = a2;
  v3 = this;
  v226 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 225) != (_DWORD)a2)
  {
    v4 = *((_QWORD *)this + 228);
    v5 = *((_QWORD *)this + 229);
    v181 = (WTF::Logger *)"HTMLMediaElement";
    v182 = 17;
    v183 = "setNetworkState";
    v184 = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v181);
      WTF::String::String((WTF::String *)&v197, "new state = ");
      {
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
        *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
        qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
        unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
        qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
        unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
        qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
      }
      v6 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[v2];
      if (v6)
        *(_DWORD *)v6 += 2;
      WTF::String::String((WTF::String *)&v196, ", current state = ");
      v7 = *((unsigned int *)v3 + 225);
      if ((byte_1EE337C09 & 1) == 0)
      {
        dword_1ECE7B930 += 2;
        qword_1EE337C20[2] = &dword_1ECE7B930;
        dword_1ECE7B950 += 2;
        qword_1EE337C20[3] = &dword_1ECE7B950;
        dword_1ECE7B970 += 2;
        qword_1EE337C20[4] = &dword_1ECE7B970;
        dword_1ECE7B990 += 2;
        qword_1EE337C20[5] = &dword_1ECE7B990;
        byte_1EE337C09 = 1;
      }
      v8 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v7 + 40];
      if (v8)
        *(_DWORD *)v8 += 2;
      v186 = v197;
      *(_QWORD *)&v175 = v6;
      v201 = v196;
      *(_QWORD *)&buf = v198;
      v200 = v8;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v186, (uint64_t *)&v175, (uint64_t *)&v201, (uint64_t *)&v200, &v199);
      if (!v199)
      {
        __break(0xC471u);
        JUMPOUT(0x195C18DD4);
      }
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v9);
        else
          *(_DWORD *)v8 -= 2;
      }
      v10 = v196;
      v196 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v9);
          if (v6)
          {
LABEL_19:
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, v9);
            else
              *(_DWORD *)v6 -= 2;
          }
LABEL_21:
          v11 = v197;
          v197 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v9);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v198;
          v198 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v9);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = qword_1ECE7C4A0;
          v14 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v186 ? (char *)v186 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v14 = (uint64_t)v186;
            v186 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (WebCore::LogMedia)
          {
            v17 = v2;
            v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v19 = *v18;
              if ((v19 & 1) != 0)
                break;
              v20 = __ldaxr(v18);
              if (v20 == v19)
              {
                if (!__stxr(v19 | 1, v18))
                {
                  v172 = v2;
                  v21 = WTF::Logger::observers((WTF::Logger *)v14);
                  v22 = *(unsigned int *)(v21 + 12);
                  if ((_DWORD)v22)
                  {
                    v23 = *(uint64_t **)v21;
                    v24 = *(_QWORD *)v21 + 8 * v22;
                    do
                    {
                      v25 = *v23;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v181);
                      v203 = 0;
                      WTF::String::String((WTF::String *)&v205, "new state = ");
                      v206 = 0;
                      {
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
                        *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
                        qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
                        unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
                        qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
                        unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
                        qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
                      }
                      v26 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[v17];
                      if (v26)
                        *(_DWORD *)v26 += 2;
                      v208 = v26;
                      v209 = 0;
                      WTF::String::String((WTF::String *)&v210, ", current state = ");
                      v27 = *((unsigned int *)v3 + 225);
                      v211 = 0;
                      if ((byte_1EE337C09 & 1) == 0)
                      {
                        dword_1ECE7B930 += 2;
                        qword_1EE337C20[2] = &dword_1ECE7B930;
                        dword_1ECE7B950 += 2;
                        qword_1EE337C20[3] = &dword_1ECE7B950;
                        dword_1ECE7B970 += 2;
                        qword_1EE337C20[4] = &dword_1ECE7B970;
                        dword_1ECE7B990 += 2;
                        qword_1EE337C20[5] = &dword_1ECE7B990;
                        byte_1EE337C09 = 1;
                      }
                      v28 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v27 + 40];
                      if (v28)
                        *(_DWORD *)v28 += 2;
                      v212 = v28;
                      v186 = 0;
                      v187 = 0;
                      v29 = (WTF::Lock *)WTF::fastMalloc((WTF *)0x50);
                      LODWORD(v187) = 5;
                      v186 = v29;
                      v30 = HIDWORD(v187);
                      *((_DWORD *)v29 + 4 * HIDWORD(v187)) = buf;
                      v31 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v29 + 2 * v30 + 1) = v31;
                      *((_DWORD *)v29 + 4 * (v30 + 1)) = v203;
                      v32 = v205;
                      if (v205)
                        *(_DWORD *)v205 += 2;
                      *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
                      *((_DWORD *)v29 + 4 * (v30 + 2)) = v206;
                      v33 = v208;
                      if (v208)
                        *(_DWORD *)v208 += 2;
                      *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
                      *((_DWORD *)v29 + 4 * (v30 + 3)) = v209;
                      v34 = v210;
                      if (v210)
                        *(_DWORD *)v210 += 2;
                      *((_QWORD *)v29 + 2 * (v30 + 3) + 1) = v34;
                      *((_DWORD *)v29 + 4 * (v30 + 4)) = v211;
                      v35 = v212;
                      if (v212)
                        *(_DWORD *)v212 += 2;
                      *((_QWORD *)v29 + 2 * (v30 + 4) + 1) = v35;
                      HIDWORD(v187) = v30 + 5;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Lock **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogMedia, 0, &v186);
                      v36 = v186;
                      if (HIDWORD(v187))
                      {
                        v37 = 16 * HIDWORD(v187);
                        v38 = (WTF::StringImpl **)((char *)v186 + 8);
                        do
                        {
                          v39 = *v38;
                          *v38 = 0;
                          if (v39)
                          {
                            if (*(_DWORD *)v39 == 2)
                              WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v39 -= 2;
                          }
                          v38 += 2;
                          v37 -= 16;
                        }
                        while (v37);
                        v36 = v186;
                      }
                      if (v36)
                      {
                        v186 = 0;
                        LODWORD(v187) = 0;
                        WTF::fastFree(v36, v15);
                      }
                      v40 = v212;
                      v212 = 0;
                      if (v40)
                      {
                        if (*(_DWORD *)v40 == 2)
                          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v40 -= 2;
                      }
                      v41 = v210;
                      v210 = 0;
                      if (v41)
                      {
                        if (*(_DWORD *)v41 == 2)
                          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v41 -= 2;
                      }
                      v42 = v208;
                      v208 = 0;
                      if (v42)
                      {
                        if (*(_DWORD *)v42 == 2)
                          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v42 -= 2;
                      }
                      v43 = v205;
                      v205 = 0;
                      if (v43)
                      {
                        if (*(_DWORD *)v43 == 2)
                          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v43 -= 2;
                      }
                      v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v44)
                      {
                        if (*(_DWORD *)v44 == 2)
                          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v44 -= 2;
                      }
                      ++v23;
                    }
                    while (v23 != (uint64_t *)v24);
                  }
                  v45 = __ldxr(v18);
                  if (v45 == 1)
                  {
                    v2 = v172;
                    if (!__stlxr(0, v18))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v2 = v172;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          this = v199;
          v199 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WebCore::HTMLMediaElement *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)this -= 2;
          }
          goto LABEL_101;
        }
        *(_DWORD *)v10 -= 2;
      }
      if (v6)
        goto LABEL_19;
      goto LABEL_21;
    }
  }
LABEL_101:
  switch((int)v2)
  {
    case 0:
      *((_DWORD *)v3 + 225) = 0;
      goto LABEL_130;
    case 1:
      if (*((int *)v3 + 225) < 2)
      {
        v51 = 1;
LABEL_129:
        *((_DWORD *)v3 + 225) = v51;
      }
      else
      {
        WebCore::HTMLMediaElement::changeNetworkStateFromLoadingToIdle(v3);
        WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)v3, 0);
      }
      goto LABEL_130;
    case 2:
      v46 = *((_DWORD *)v3 + 225);
      v47 = v46 < 2 || v46 == 3;
      if (v47
        && ((*((_QWORD *)v3 + 42) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*((_QWORD *)v3 + 42) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
      {
        v48 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
        *((_QWORD *)v3 + 127) = v49;
        *((_QWORD *)v3 + 41) = 0x3FD6666666666666;
        WTF::MonotonicTime::now(v48);
        WebCore::TimerBase::setNextFireTime((uint64_t)v3 + 304, v50 + 0.35);
      }
      v51 = 2;
      goto LABEL_129;
    case 3:
      if (*((_DWORD *)v3 + 225) != 1)
        WebCore::HTMLMediaElement::changeNetworkStateFromLoadingToIdle(v3);
      *(_DWORD *)((char *)v3 + 1265) |= 0x100000u;
      goto LABEL_130;
    case 4:
      if (*((int *)v3 + 226) > 0
        || *((_DWORD *)v3 + 264) != 1
        || *((_QWORD *)v3 + 144)
        || WTF::URL::protocolIs()
        && WebCore::MediaSource::s_registry
        && (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)WebCore::MediaSource::s_registry + 40))(WebCore::MediaSource::s_registry, (uint64_t)v3 + 912)|| *((_QWORD *)v3 + 204)|| *((_BYTE *)v3 + 1688)|| (*(_DWORD *)((_BYTE *)v3 + 1265) & 1) == 0|| *((_QWORD *)v3 + 223)|| *((_BYTE *)v3 + 1792)|| !*((_BYTE *)v3 + 1816))
      {
        return (unsigned int *)WebCore::HTMLMediaElement::mediaLoadingFailed(v3, (void *)v2);
      }
      v53 = 912;
      if (*((_QWORD *)v3 + 181))
      {
        v53 = 1456;
        v54 = (_DWORD *)((char *)v3 + 1456);
      }
      else
      {
        v54 = (_DWORD *)((char *)v3 + 912);
      }
      v55 = *(WTF::StringImpl **)((char *)v3 + v53);
      if (v55)
        *(_DWORD *)v55 += 2;
      v173 = v54[2];
      v171 = v54[3];
      v56 = v54[5];
      v170 = v54[4];
      v168 = v54[6];
      v167 = v54[7];
      v165 = v54[8];
      v164 = v54[9];
      if (v55)
        *(_DWORD *)v55 += 2;
      v169 = v55;
      *(_QWORD *)&buf = v55;
      *((_QWORD *)&buf + 1) = __PAIR64__(v171, v173);
      v203 = v170;
      v204 = v56;
      v205 = (WTF::StringImpl *)__PAIR64__(v167, v168);
      v206 = v165;
      v207 = v164;
      v208 = 0;
      WTF::URL::invalidate((WTF::URL *)&v208);
      v213 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v214 = v181;
      v215 = 0u;
      memset(v216, 0, sizeof(v216));
      v217 = 0x10000;
      v57 = v218 & 0x80 | 4;
      v218 = v57;
      v219 = 0;
      v58 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v58 += 2;
        v57 = v218;
      }
      v220 = v58;
      v221 = 0;
      v222 = 0;
      v223 = 0;
      v224 = v224 & 0xE0 | 5;
      v218 = v57 | 2;
      v225 = 0;
      (*(void (**)(__int128 *__return_ptr, WebCore::HTMLMediaElement *))(*(_QWORD *)v3 + 2288))(&v175, v3);
      WebCore::MediaResourceSniffer::create(v175, &buf, 0x5A5uLL, 1u, (uint64_t *)&v186);
      v60 = v186;
      v186 = 0;
      v61 = (unsigned int *)*((_QWORD *)v3 + 223);
      *((_QWORD *)v3 + 223) = v60;
      if (!v61)
        goto LABEL_159;
      v62 = v61 + 2;
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_154;
      break;
    case 5:
    case 6:
      return (unsigned int *)WebCore::HTMLMediaElement::mediaLoadingFailed(v3, (void *)v2);
    default:
LABEL_130:
      WebCore::HTMLMediaElement::updateBufferingState(v3);
      return (unsigned int *)WebCore::HTMLMediaElement::updateStalledState(v3);
  }
  while (1)
  {
    atomic_store(1u, v61 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
LABEL_154:
    v65 = (unsigned int *)v186;
    v186 = 0;
    if (v65)
    {
      v66 = v65 + 2;
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        atomic_store(1u, v65 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
      }
    }
LABEL_159:
    v69 = v175;
    *(_QWORD *)&v175 = 0;
    if (v69)
    {
      v70 = (unsigned int *)(v69 + 8);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        atomic_store(1u, v70);
        v162 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v162 = off_1E32051E8;
        *((_QWORD *)v162 + 1) = v70;
        v181 = v162;
        WTF::ensureOnMainThread();
        v163 = v181;
        v181 = 0;
        if (v163)
          (*(void (**)(WTF::Logger *))(*(_QWORD *)v163 + 8))(v163);
      }
    }
    v73 = *(_QWORD *)(*((_QWORD *)v3 + 223) + 40);
    if (v73)
    {
      v74 = (unsigned int *)(v73 + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 + 1, v74));
      do
      {
        v76 = __ldaxr(v74);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v74));
      if (!v77)
      {
        atomic_store(1u, (unsigned int *)(v73 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
      }
    }
    v78 = (unsigned int *)(v73 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&buf, v59);
    v61 = (unsigned int *)WTF::RunLoop::main(v80);
    v81 = v61;
    v82 = *((_QWORD *)v3 + 37);
    if (v82)
      goto LABEL_368;
    v82 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v82 = 1;
    *(_QWORD *)(v82 + 8) = v3;
    v61 = (unsigned int *)*((_QWORD *)v3 + 37);
    *((_QWORD *)v3 + 37) = v82;
    if (!v61)
      goto LABEL_368;
    do
    {
      v84 = __ldaxr(v61);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v61));
    if (!v85)
    {
      atomic_store(1u, v61);
      v61 = (unsigned int *)WTF::fastFree((WTF *)v61, v83);
    }
    v82 = *((_QWORD *)v3 + 37);
    if (v82)
    {
LABEL_368:
      do
        v86 = __ldaxr((unsigned int *)v82);
      while (__stlxr(v86 + 1, (unsigned int *)v82));
    }
    if (v169)
      *(_DWORD *)v169 += 2;
    v87 = (unsigned __int8 **)*((_QWORD *)v3 + 142);
    if (!v87)
      goto LABEL_190;
    v88 = *v87;
    if (__ldaxr(*v87))
    {
      __clrex();
LABEL_184:
      v61 = (unsigned int *)MEMORY[0x19AEA534C](v88);
      goto LABEL_185;
    }
    if (__stxr(1u, v88))
      goto LABEL_184;
LABEL_185:
    ++*((_QWORD *)v88 + 1);
    v90 = __ldxr(v88);
    if (v90 != 1)
    {
      __clrex();
LABEL_189:
      v61 = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v88);
      goto LABEL_190;
    }
    if (__stlxr(0, v88))
      goto LABEL_189;
LABEL_190:
    if (*((_BYTE *)v3 + 1816))
      break;
    __break(1u);
  }
  v91 = (_DWORD *)*((_QWORD *)v3 + 225);
  if (v91)
    *v91 += 2;
  v92 = *((_BYTE *)v3 + 1808);
  v175 = 0uLL;
  v93 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(unsigned int *))(*(_QWORD *)v81 + 32))(v81);
  v94 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v94 = &off_1E33C5138;
  *(_QWORD *)(v94 + 8) = v82;
  *(_QWORD *)(v94 + 16) = v3;
  *(_QWORD *)(v94 + 24) = v169;
  *(_DWORD *)(v94 + 32) = v173;
  *(_DWORD *)(v94 + 36) = v171;
  *(_DWORD *)(v94 + 40) = v170;
  *(_DWORD *)(v94 + 44) = v56;
  *(_DWORD *)(v94 + 48) = v168;
  *(_DWORD *)(v94 + 52) = v167;
  *(_DWORD *)(v94 + 56) = v165;
  *(_DWORD *)(v94 + 60) = v164;
  *(_QWORD *)(v94 + 64) = v87;
  *(_QWORD *)(v94 + 72) = v91;
  *(_BYTE *)(v94 + 80) = v92;
  *(_DWORD *)(v93 + 8) = 1;
  *(_QWORD *)(v93 + 16) = v81;
  *(_QWORD *)(v93 + 24) = 0;
  *(_QWORD *)(v93 + 32) = 0;
  *(_QWORD *)(v93 + 40) = "setNetworkState";
  *(_QWORD *)(v93 + 48) = 0;
  *(_WORD *)(v93 + 56) = 0;
  *(_QWORD *)v93 = &off_1E33C5160;
  *(_QWORD *)(v93 + 64) = 0;
  *(_QWORD *)(v93 + 72) = v94;
  do
    v95 = __ldaxr(v78);
  while (__stlxr(v95 + 1, v78));
  v178 = v175;
  v179 = "setNetworkState";
  v180 = 0;
  v176 = (unsigned int *)v73;
  v177 = 0;
  v96 = (unsigned __int8 *)(v73 + 48);
  v185 = (WTF::NativePromiseBase *)v93;
  v186 = (WTF::Lock *)(v73 + 48);
  LOBYTE(v187) = 1;
  if (__ldaxr((unsigned __int8 *)(v73 + 48)))
  {
    __clrex();
    goto LABEL_198;
  }
  if (__stxr(1u, v96))
LABEL_198:
    v96 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
  *(_BYTE *)(v73 + 128) = 1;
  v174 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v96);
  if (*(_BYTE *)v174 && *(unsigned __int8 *)(v174 + 16) >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v178);
    WTF::String::String((WTF::String *)&v193, " invoking maybeSettle() [");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v73, &v192);
    WTF::String::String((WTF::String *)&v191, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v189, " isNothing:");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v99 = (WTF::StringImpl *)buf;
    WTF::String::String((WTF::String *)&v188, "]");
    v181 = v193;
    v201 = v192;
    *(_QWORD *)&buf = v194;
    v199 = v190;
    v200 = v191;
    v197 = v99;
    v198 = v189;
    v196 = v188;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v181, (uint64_t *)&v201, (uint64_t *)&v200, (uint64_t *)&v199, (uint64_t *)&v198, (uint64_t *)&v197, (uint64_t *)&v196, &v195);
    if (!v195)
    {
      __break(0xC471u);
      JUMPOUT(0x195C18DFCLL);
    }
    v101 = v188;
    v188 = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 != 2)
      {
        *(_DWORD *)v101 -= 2;
        goto LABEL_205;
      }
      WTF::StringImpl::destroy(v101, v100);
      if (!v99)
      {
LABEL_208:
        v102 = v189;
        v189 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 2)
            WTF::StringImpl::destroy(v102, v100);
          else
            *(_DWORD *)v102 -= 2;
        }
        v103 = v190;
        v190 = 0;
        if (v103)
        {
          if (*(_DWORD *)v103 == 2)
            WTF::StringImpl::destroy(v103, v100);
          else
            *(_DWORD *)v103 -= 2;
        }
        v104 = v191;
        v191 = 0;
        if (v104)
        {
          if (*(_DWORD *)v104 == 2)
            WTF::StringImpl::destroy(v104, v100);
          else
            *(_DWORD *)v104 -= 2;
        }
        v105 = v192;
        v192 = 0;
        if (v105)
        {
          if (*(_DWORD *)v105 == 2)
            WTF::StringImpl::destroy(v105, v100);
          else
            *(_DWORD *)v105 -= 2;
        }
        v106 = v193;
        v193 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, v100);
          else
            *(_DWORD *)v106 -= 2;
        }
        v107 = v194;
        v194 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, v100);
          else
            *(_DWORD *)v107 -= 2;
        }
        v108 = *(NSObject **)(v174 + 32);
        v109 = os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v109)
        {
          WTF::String::utf8();
          v110 = v181 ? (char *)v181 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v110;
          _os_log_impl(&dword_1940B8000, v108, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v109 = (uint64_t)v181;
          v181 = 0;
          if (v109)
          {
            if (*(_DWORD *)v109 == 1)
              v109 = WTF::fastFree((WTF *)v109, v98);
            else
              --*(_DWORD *)v109;
          }
        }
        if (*(_BYTE *)v174 && *(unsigned __int8 *)(v174 + 16) >= 4u)
        {
          v111 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v112 = *v111;
            if ((v112 & 1) != 0)
              break;
            v113 = __ldaxr(v111);
            if (v113 == v112)
            {
              if (!__stxr(v112 | 1, v111))
              {
                v114 = WTF::Logger::observers((WTF::Logger *)v109);
                v115 = *(unsigned int *)(v114 + 12);
                if ((_DWORD)v115)
                {
                  v116 = *(uint64_t **)v114;
                  v166 = *(_QWORD *)v114 + 8 * v115;
                  do
                  {
                    v117 = *v116;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v178);
                    v203 = 0;
                    WTF::String::String((WTF::String *)&v205, " invoking maybeSettle() [");
                    v206 = 0;
                    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(v73, &v208);
                    v209 = 0;
                    WTF::String::String((WTF::String *)&v210, " callback:");
                    v211 = 0;
                    WTF::LogArgument<void const*>::toString();
                    LODWORD(v213) = 0;
                    WTF::String::String((WTF::String *)&v214, " isNothing:");
                    LODWORD(v215) = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    *((_QWORD *)&v215 + 1) = v181;
                    LODWORD(v216[0]) = 0;
                    WTF::String::String((WTF::String *)&v216[1], "]");
                    v181 = 0;
                    v182 = 0;
                    v118 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                    LODWORD(v182) = 8;
                    v181 = v118;
                    v119 = HIDWORD(v182);
                    *((_DWORD *)v118 + 4 * HIDWORD(v182)) = buf;
                    v120 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v118 + 2 * v119 + 1) = v120;
                    *((_DWORD *)v118 + 4 * (v119 + 1)) = v203;
                    v121 = v205;
                    if (v205)
                      *(_DWORD *)v205 += 2;
                    *((_QWORD *)v118 + 2 * (v119 + 1) + 1) = v121;
                    *((_DWORD *)v118 + 4 * (v119 + 2)) = v206;
                    v122 = v208;
                    if (v208)
                      *(_DWORD *)v208 += 2;
                    *((_QWORD *)v118 + 2 * (v119 + 2) + 1) = v122;
                    *((_DWORD *)v118 + 4 * (v119 + 3)) = v209;
                    v123 = v210;
                    if (v210)
                      *(_DWORD *)v210 += 2;
                    *((_QWORD *)v118 + 2 * (v119 + 3) + 1) = v123;
                    *((_DWORD *)v118 + 4 * (v119 + 4)) = v211;
                    v124 = v212;
                    if (v212)
                      *(_DWORD *)v212 += 2;
                    *((_QWORD *)v118 + 2 * (v119 + 4) + 1) = v124;
                    *((_DWORD *)v118 + 4 * (v119 + 5)) = v213;
                    v125 = v214;
                    if (v214)
                      *(_DWORD *)v214 += 2;
                    *((_QWORD *)v118 + 2 * (v119 + 5) + 1) = v125;
                    *((_DWORD *)v118 + 4 * (v119 + 6)) = v215;
                    v126 = *((_QWORD *)&v215 + 1);
                    if (*((_QWORD *)&v215 + 1))
                      **((_DWORD **)&v215 + 1) += 2;
                    *((_QWORD *)v118 + 2 * (v119 + 6) + 1) = v126;
                    *((_DWORD *)v118 + 4 * (v119 + 7)) = v216[0];
                    v127 = v216[1];
                    if (v216[1])
                      *(_DWORD *)v216[1] += 2;
                    *((_QWORD *)v118 + 2 * (v119 + 7) + 1) = v127;
                    HIDWORD(v182) = v119 + 8;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v117 + 16))(v117, v174, 4, &v181);
                    v128 = v181;
                    if (HIDWORD(v182))
                    {
                      v129 = 16 * HIDWORD(v182);
                      v130 = (WTF::StringImpl **)((char *)v181 + 8);
                      do
                      {
                        v131 = *v130;
                        *v130 = 0;
                        if (v131)
                        {
                          if (*(_DWORD *)v131 == 2)
                            WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v98);
                          else
                            *(_DWORD *)v131 -= 2;
                        }
                        v130 += 2;
                        v129 -= 16;
                      }
                      while (v129);
                      v128 = v181;
                    }
                    if (v128)
                    {
                      v181 = 0;
                      LODWORD(v182) = 0;
                      WTF::fastFree(v128, v98);
                    }
                    v132 = v216[1];
                    v216[1] = 0;
                    if (v132)
                    {
                      if (*(_DWORD *)v132 == 2)
                        WTF::StringImpl::destroy(v132, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v132 -= 2;
                    }
                    v133 = (WTF::StringImpl *)*((_QWORD *)&v215 + 1);
                    *((_QWORD *)&v215 + 1) = 0;
                    if (v133)
                    {
                      if (*(_DWORD *)v133 == 2)
                        WTF::StringImpl::destroy(v133, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v133 -= 2;
                    }
                    v134 = v214;
                    v214 = 0;
                    if (v134)
                    {
                      if (*(_DWORD *)v134 == 2)
                        WTF::StringImpl::destroy(v134, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v134 -= 2;
                    }
                    v135 = v212;
                    v212 = 0;
                    if (v135)
                    {
                      if (*(_DWORD *)v135 == 2)
                        WTF::StringImpl::destroy(v135, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v135 -= 2;
                    }
                    v136 = v210;
                    v210 = 0;
                    if (v136)
                    {
                      if (*(_DWORD *)v136 == 2)
                        WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v136 -= 2;
                    }
                    v137 = v208;
                    v208 = 0;
                    if (v137)
                    {
                      if (*(_DWORD *)v137 == 2)
                        WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v137 -= 2;
                    }
                    v138 = v205;
                    v205 = 0;
                    if (v138)
                    {
                      if (*(_DWORD *)v138 == 2)
                        WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v138 -= 2;
                    }
                    v139 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v139)
                    {
                      if (*(_DWORD *)v139 == 2)
                        WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v98);
                      else
                        *(_DWORD *)v139 -= 2;
                    }
                    ++v116;
                  }
                  while (v116 != (uint64_t *)v166);
                }
                v140 = __ldxr(v111);
                if (v140 == 1)
                {
                  if (!__stlxr(0, v111))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v141 = v195;
        v195 = 0;
        if (v141)
        {
          if (*(_DWORD *)v141 == 2)
            WTF::StringImpl::destroy(v141, (WTF::StringImpl *)v98);
          else
            *(_DWORD *)v141 -= 2;
        }
        goto LABEL_311;
      }
    }
    else
    {
LABEL_205:
      if (!v99)
        goto LABEL_208;
    }
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, v100);
    else
      *(_DWORD *)v99 -= 2;
    goto LABEL_208;
  }
LABEL_311:
  if (*(_DWORD *)(v73 + 80))
  {
    WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v185, v73, (unsigned __int8 **)&v186);
  }
  else
  {
    v142 = *(unsigned int *)(v73 + 100);
    if ((_DWORD)v142 == *(_DWORD *)(v73 + 96))
    {
      v143 = WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v73 + 88), v142 + 1, (unint64_t)&v185);
      v142 = *(unsigned int *)(v73 + 100);
      v144 = v142 + 1;
      v145 = *(_QWORD *)(v73 + 88);
      v146 = *(WTF::NativePromiseBase **)v143;
      *(_QWORD *)v143 = 0;
    }
    else
    {
      v144 = v142 + 1;
      v145 = *(_QWORD *)(v73 + 88);
      v146 = v185;
      v185 = 0;
    }
    *(_QWORD *)(v145 + 8 * v142) = v146;
    *(_DWORD *)(v73 + 100) = v144;
  }
  if ((_BYTE)v187)
  {
    v147 = v186;
    v148 = __ldxr((unsigned __int8 *)v186);
    if (v148 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v186))
        goto LABEL_323;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v147);
  }
LABEL_323:
  v149 = (unsigned int *)v185;
  v185 = 0;
  if (v149)
  {
    v150 = v149 + 2;
    do
    {
      v151 = __ldaxr(v150);
      v152 = v151 - 1;
    }
    while (__stlxr(v152, v150));
    if (!v152)
    {
      atomic_store(1u, v149 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v149 + 8))(v149);
    }
  }
  v153 = v177;
  v177 = 0;
  if (v153)
  {
    v154 = v153 + 2;
    do
    {
      v155 = __ldaxr(v154);
      v156 = v155 - 1;
    }
    while (__stlxr(v156, v154));
    if (!v156)
    {
      atomic_store(1u, v153 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v153 + 8))(v153);
    }
  }
  result = v176;
  v176 = 0;
  if (result)
  {
    v157 = result + 2;
    do
    {
      v158 = __ldaxr(v157);
      v159 = v158 - 1;
    }
    while (__stlxr(v159, v157));
    if (!v159)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  do
  {
    v160 = __ldaxr(v78);
    v161 = v160 - 1;
  }
  while (__stlxr(v161, v78));
  if (!v161)
  {
    atomic_store(1u, (unsigned int *)(v73 + 8));
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
  }
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      return (unsigned int *)WTF::StringImpl::destroy(v169, (WTF::StringImpl *)v98);
    else
      *(_DWORD *)v169 -= 2;
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerNetworkStateChanged(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v2;
  unint64_t v3;
  unsigned int *result;

  v2 = (WebCore::HTMLMediaElement *)((char *)this - 176);
  ++*((_DWORD *)this + 243);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 120) + 72) + 552))(*(_QWORD *)(*((_QWORD *)this + 120) + 72));
  result = WebCore::HTMLMediaElement::setNetworkState(v2, v3);
  --*((_DWORD *)this + 243);
  return result;
}

uint64_t WebCore::HTMLMediaElement::updateBufferingState(WebCore::HTMLMediaElement *this)
{
  uint64_t result;
  void *v3;
  _BOOL4 v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  char v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  WebCore::HTMLMediaElement *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;

  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
  if ((result & 1) != 0 || *((_DWORD *)this + 225) != 2)
  {
    v5 = (char *)this + 1265;
    v8 = *(unsigned int *)((char *)this + 1265);
    v7 = v8 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    if ((v8 & 0x1000) == 0)
      return result;
    v4 = 0;
  }
  else
  {
    v4 = *((_DWORD *)this + 226) < 3;
    v5 = (char *)this + 1265;
    v6 = *(unsigned int *)((char *)this + 1265);
    v7 = v6 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    if (v4 != ((v6 & 0x1000) == 0))
      return result;
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_26;
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  v10 = v9[1];
  if (!*(_QWORD *)(v10 + 1944) || *(_BYTE *)(v10 + 3405))
    goto LABEL_26;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v14 = *v9;
    v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0 || v14 == 0;
    v16 = v14 + 216;
    if (v15)
      v16 = v10 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v16 + 236))
      goto LABEL_26;
  }
  v11 = *(_QWORD *)(v10 + 1272);
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 70) & 4) != 0)
    {
LABEL_26:
      LOBYTE(v25) = 0;
      v27 = 0;
      v28 = 0;
      v26 = this;
      goto LABEL_27;
    }
  }
  if (!*(_BYTE *)(v10 + 3362))
  {
    v12 = *(unsigned __int8 *)(v10 + 3390);
    if (*(_BYTE *)(v10 + 3390)
      || (*(_BYTE *)(v10 + 70) & 8) != 0
      || *(_QWORD *)(v10 + 1560)
      || (v13 = *(_QWORD *)(v10 + 1328), *(_BYTE *)(v13 + 233))
      || *(_BYTE *)(v13 + 234))
    {
      v19 = *(unsigned __int8 *)(v10 + 3391);
      if (v12)
        v20 = v19 == 0;
      else
        v20 = 0;
      v21 = !v20;
      LOBYTE(v25) = v21;
      v27 = 0;
      v28 = 0;
      v26 = this;
      if (!v20)
        goto LABEL_42;
LABEL_27:
      v17 = 4096;
      if (!v4)
        v17 = 0;
      v18 = v7 & 0xFFFFFFFFFFFFEFFFLL;
      *((_WORD *)v5 + 2) = WORD2(v18);
      *(_DWORD *)v5 = v18 | v17;
      goto LABEL_30;
    }
  }
  LOBYTE(v25) = 1;
  v27 = 0;
  v28 = 0;
  v26 = this;
LABEL_42:
  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v25, (WTF::StringImpl *)0xF, v4, 0);
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v26, &v27);
  v22 = v25;
  v23 = 4096;
  if (!v4)
    v23 = 0;
  v24 = *(_DWORD *)v5 & 0xFFFFEFFF | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
  *(_DWORD *)v5 = *(_DWORD *)v5 & 0xFFFFEFFF | v23;
  *((_WORD *)v5 + 2) = WORD2(v24);
  if (v22)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v26, &v28);
LABEL_30:
  if (v28)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v28, v3);
  result = (uint64_t)v27;
  if (v27)
    return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v27, v3);
  return result;
}

uint64_t WebCore::HTMLMediaElement::updateStalledState(WebCore::HTMLMediaElement *this)
{
  uint64_t result;
  void *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  char v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  WebCore::HTMLMediaElement *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;

  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
  if ((result & 1) != 0 || *((_DWORD *)this + 225) != 2 || *((int *)this + 226) >= 3)
  {
    v4 = (char *)this + 1265;
    v8 = *(unsigned int *)((char *)this + 1265);
    v6 = v8 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    if ((v8 & 0x2000) == 0)
      return result;
    LODWORD(v7) = 0;
  }
  else
  {
    v4 = (char *)this + 1265;
    v5 = *(unsigned int *)((char *)this + 1265);
    v6 = v5 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    v7 = (v6 >> 16) & 1;
    if (((v5 & 0x2000) == 0) != ((v6 >> 16) & 1))
      return result;
  }
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_27;
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  v10 = v9[1];
  if (!*(_QWORD *)(v10 + 1944) || *(_BYTE *)(v10 + 3405))
    goto LABEL_27;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v14 = *v9;
    v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0 || v14 == 0;
    v16 = v14 + 216;
    if (v15)
      v16 = v10 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v16 + 236))
      goto LABEL_27;
  }
  v11 = *(_QWORD *)(v10 + 1272);
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 70) & 4) != 0)
    {
LABEL_27:
      LOBYTE(v25) = 0;
      v27 = 0;
      v28 = 0;
      v26 = this;
      goto LABEL_28;
    }
  }
  if (!*(_BYTE *)(v10 + 3362))
  {
    v12 = *(unsigned __int8 *)(v10 + 3390);
    if (*(_BYTE *)(v10 + 3390)
      || (*(_BYTE *)(v10 + 70) & 8) != 0
      || *(_QWORD *)(v10 + 1560)
      || (v13 = *(_QWORD *)(v10 + 1328), *(_BYTE *)(v13 + 233))
      || *(_BYTE *)(v13 + 234))
    {
      v19 = *(unsigned __int8 *)(v10 + 3391);
      if (v12)
        v20 = v19 == 0;
      else
        v20 = 0;
      v21 = !v20;
      LOBYTE(v25) = v21;
      v27 = 0;
      v28 = 0;
      v26 = this;
      if (!v20)
        goto LABEL_43;
LABEL_28:
      v17 = 0x2000;
      if (!(_DWORD)v7)
        v17 = 0;
      v18 = v6 & 0xFFFFFFFFFFFFDFFFLL;
      *((_WORD *)v4 + 2) = WORD2(v18);
      *(_DWORD *)v4 = v18 | v17;
      goto LABEL_31;
    }
  }
  LOBYTE(v25) = 1;
  v27 = 0;
  v28 = 0;
  v26 = this;
LABEL_43:
  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v25, (WTF::StringImpl *)0x47, v7, 0);
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v26, &v27);
  v22 = v25;
  v23 = 0x2000;
  if (!(_DWORD)v7)
    v23 = 0;
  v24 = *(_DWORD *)v4 & 0xFFFFDFFF | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
  *(_DWORD *)v4 = *(_DWORD *)v4 & 0xFFFFDFFF | v23;
  *((_WORD *)v4 + 2) = WORD2(v24);
  if (v22)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v26, &v28);
LABEL_31:
  if (v28)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v28, v3);
  result = (uint64_t)v27;
  if (v27)
    return WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v27, v3);
  return result;
}

WebCore *WebCore::HTMLMediaElement::changeNetworkStateFromLoadingToIdle(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v1;
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  WebCore *result;
  WebCore *v17;

  v1 = this;
  if ((*((_QWORD *)this + 42) & 0xFFFFFFFFFFFFLL) != 0)
    this = (WebCore::HTMLMediaElement *)WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 304));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow(this);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  v6 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
  *(_DWORD *)(v6 + 16) = 1;
  *(_QWORD *)v6 = off_1E33A4B48;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 20) = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v5 + 1584) != 0);
  v8 = *(_DWORD **)(v5 + 1584);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  *(_QWORD *)(v6 + 64) = 0;
  v17 = (WebCore *)v6;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v1 + 28, (uint64_t)v1, 9, (uint64_t)v1 + 824, (uint64_t *)&v17);
  v9 = v17;
  v17 = 0;
  if (v9)
  {
    if (*((_DWORD *)v9 + 4) == 1)
      v9 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v9 + 8))(v9);
    else
      --*((_DWORD *)v9 + 4);
  }
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(v9);
  v12 = *(_QWORD *)(v11 + 40);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *(_QWORD *)(v11 + 40);
  }
  v13 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
  *(_DWORD *)(v13 + 16) = 1;
  *(_QWORD *)v13 = off_1E33A4B48;
  *(_QWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v12 + 2024) != 0);
  v15 = *(_DWORD **)(v12 + 2024);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(v13 + 24) = v15;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = v14;
  *(_QWORD *)(v13 + 64) = 0;
  v17 = (WebCore *)v13;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v1 + 28, (uint64_t)v1, 9, (uint64_t)v1 + 824, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 4);
  }
  *((_DWORD *)v1 + 225) = 1;
  return result;
}

void WebCore::HTMLMediaElement::mediaPlayerReadyStateChanged(WebCore::HTMLMediaElement *this)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t (**v4)();
  uint64_t v5;
  int v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  unsigned int v12;
  uint64_t (***v13)();

  if (!*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 467))
  {
    ++*((_DWORD *)this + 287);
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 560))(*(_QWORD *)(*((_QWORD *)this + 142) + 72));
    WebCore::HTMLMediaElement::setReadyState((uint64_t)this, v12);
    --*((_DWORD *)this + 287);
    *((_BYTE *)this + 1848) = 0;
    atomic_store(0, (unsigned int *)this + 463);
    return;
  }
  if (!*((_BYTE *)this + 1848))
  {
    *((_BYTE *)this + 1848) = 1;
    atomic_store(0x80u, (unsigned int *)this + 463);
  }
  v2 = (unsigned int *)((char *)this + 1852);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (v3)
  {
    v4 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v4 = (uint64_t (*)())&unk_1E33C5A58;
    v4[1] = (uint64_t (*)())this;
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    v6 = *((_DWORD *)this + 6);
    *(_QWORD *)(v5 + 8) = this;
    ++*((_QWORD *)this + 16);
    *((_DWORD *)this + 6) = v6 + 4;
    v7 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v7 = &off_1E33C5820;
    v7[1] = (uint64_t (**)())this;
    v7[2] = (uint64_t (**)())v5;
    v7[3] = v4;
    v13 = v7;
    v8 = *((_QWORD *)this + 15);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v10, 9, (uint64_t *)&v13);
        v7 = v13;
        v13 = 0;
        if (!v7)
          return;
      }
      else
      {
        v13 = 0;
      }
      v11 = *v7;
    }
    else
    {
      v13 = 0;
      v11 = &off_1E33C5820;
    }
    v11[1]();
  }
}

BOOL WebCore::HTMLMediaElement::isSuspended(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  return *(_BYTE *)(v1 + 467) || *(_BYTE *)(v1 + 468) != 0;
}

void WebCore::HTMLMediaElement::setReadyState(uint64_t FireTime, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  WebCore::HTMLMediaElement **v7;
  uint64_t v8;
  char v9;
  WebCore::HTMLMediaElement *v10;
  uint64_t v11;
  WebCore::HTMLMediaElement *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  WTF::MonotonicTime *v21;
  double v22;
  double v23;
  _BOOL4 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  unsigned int v76;
  int v77;
  _BOOL4 v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::MonotonicTime *v82;
  double v83;
  WebCore *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  _DWORD *v102;
  WTF::MediaTime *v103;
  uint64_t v104;
  uint64_t (*v105)(void);
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  WTF::MediaTime *v110;
  WTF::StringImpl **v111;
  unint64_t v112;
  const WTF::MediaTime *v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  unint64_t v117;
  const WTF::MediaTime *v118;
  WTF::StringImpl *v119;
  _QWORD *v120;
  uint64_t v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WebCore *v125;
  unint64_t StatusReg;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  WTF::MediaTime *v133;
  _OWORD *v134;
  const WTF::MediaTime *v135;
  WTF::MediaTime *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::MediaTime *v142;
  _OWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  BOOL v154;
  void *v155;
  float v156;
  float v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WebCore *v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  uint64_t *v176;
  WTF::StringImpl *v177;
  const WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  const WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WebCore::PlatformMediaSession *v187;
  _DWORD *v188;
  _DWORD *v189;
  WebCore::Navigator *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  WTF::MediaTime *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::MediaTime *v203;
  _OWORD *v204;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  WTF::MediaTime *v210;
  _OWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _DWORD *v217;
  _DWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _DWORD *v224;
  _DWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _DWORD *v232;
  void *v233;
  _DWORD *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  WTF::MediaTime *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF *v246;
  void *v247;
  __int16 v248;
  __int16 v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  WTF::MonotonicTime *v259;
  double v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  int v264;
  uint64_t v265;
  WebCore *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _DWORD *v273;
  _DWORD *v274;
  uint64_t v275;
  uint64_t v276;
  double v277;
  WebCore::HTMLMediaElement **v278;
  uint64_t v279;
  int v280;
  WebCore::HTMLMediaElement *v281;
  uint64_t v282;
  WebCore::HTMLMediaElement *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  double v288;
  uint64_t v289;
  double v290;
  double v291;
  WTF::MonotonicTime *v292;
  double v293;
  double v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  WebCore::MediaController *v303;
  uint64_t v304;
  bmalloc::api *v305;
  void *v306;
  uint64_t v307;
  WTF::StringImpl **v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  uint64_t v311;
  WebCore::Node *ElementSibling;
  WebCore::Element *v313;
  int v314;
  unsigned int v315;
  WTF::StringImpl *v316[2];
  const char *v317;
  uint64_t v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  __int128 v325;
  __int128 v326;
  _BYTE buf[48];
  WTF::StringImpl *v328[2];
  WTF::StringImpl *v329[2];
  WTF *v330;
  uint64_t v331;
  uint64_t v332;

  v3 = (_QWORD *)FireTime;
  v332 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(FireTime + 1416);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 72))
      goto LABEL_29;
    v5 = *(unsigned int *)(v4 + 68);
    v6 = 0.0;
    if ((_DWORD)v5)
    {
      v7 = *(WebCore::HTMLMediaElement ***)(v4 + 56);
      v8 = 8 * v5;
      v9 = 1;
      while (1)
      {
        v10 = *v7;
        if (*((int *)*v7 + 226) < 3)
          goto LABEL_29;
        v11 = *((_QWORD *)v10 + 200);
        if (!v11)
        {
          FireTime = (uint64_t)WebCore::HTMLMediaElement::initializeMediaSession(*v7);
          v11 = *((_QWORD *)v10 + 200);
        }
        if (*(_BYTE *)(v11 + 48) == 4)
          goto LABEL_29;
        v12 = *v7;
        if ((*(_DWORD *)((_BYTE *)*v7 + 1265) & 0x40) != 0)
        {
          FireTime = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12);
          if ((FireTime & 1) != 0)
            goto LABEL_29;
          v12 = *v7;
        }
        FireTime = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12);
        v9 &= FireTime;
        ++v7;
        v8 -= 8;
        if (!v8)
        {
          if ((v9 & 1) != 0)
            goto LABEL_29;
          v13 = v3[177];
          v14 = *(unsigned int *)(v13 + 68);
          if ((_DWORD)v14)
          {
            v6 = *(double *)(v13 + 96);
            if (v6 == -1.0)
            {
              v15 = *(uint64_t **)(v13 + 56);
              v16 = 8 * v14;
              v17 = 0.0;
              do
              {
                v18 = *v15++;
                v19 = (*(double (**)(uint64_t))(*(_QWORD *)v18 + 1376))(v18);
                if (v17 >= v19)
                  v20 = v17;
                else
                  v20 = v19;
                v17 = v20;
                v16 -= 8;
              }
              while (v16);
              v22 = (*(double (**)(_QWORD))(**(_QWORD **)(v13 + 256) + 24))(*(_QWORD *)(v13 + 256));
              if (v22 >= v17)
                v22 = v17;
              *(double *)(v13 + 96) = fmax(v22, 0.0);
              *(_QWORD *)(v13 + 216) = 0;
              WTF::MonotonicTime::now(v21);
              FireTime = WebCore::TimerBase::setNextFireTime(v13 + 192, v23 + 0.0);
              v6 = *(double *)(v13 + 96);
            }
            if (v6 < 0.0)
              goto LABEL_29;
          }
          break;
        }
      }
    }
    if (v6 > (*(double (**)(_QWORD *))(*v3 + 1376))(v3))
      goto LABEL_29;
  }
  FireTime = WebCore::HTMLMediaElement::couldPlayIfEnoughData((WebCore::HTMLMediaElement *)v3);
  if (!(_DWORD)FireTime)
  {
LABEL_29:
    v24 = 0;
    goto LABEL_30;
  }
  v24 = *((int *)v3 + 226) > 2 || *((_DWORD *)v3 + 227) > 2;
LABEL_30:
  v25 = *((_DWORD *)v3 + 226);
  v26 = *((unsigned int *)v3 + 345);
  if ((_DWORD)v26)
  {
    v27 = v3[171];
    if (*(_DWORD *)(*(_QWORD *)v27 + 236) >= 2u)
    {
      v29 = 0;
      v30 = v27 + 8;
      while (v26 - 1 != v29)
      {
        v31 = *(_DWORD *)(*(_QWORD *)(v30 + 8 * v29++) + 236);
        if (v31 <= 1)
          goto LABEL_39;
      }
      v29 = *((unsigned int *)v3 + 345);
LABEL_39:
      v28 = v29 >= v26;
    }
    else
    {
      v28 = 0;
    }
  }
  else
  {
    v28 = 1;
  }
  v32 = (unsigned int *)((char *)v3 + 1265);
  v33 = *(unsigned int *)((char *)v3 + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)v3 + 1269) << 32);
  if (v25 == a2 && ((v28 ^ ((v33 & 0x800000000) == 0)) & 1) != 0)
    return;
  v34 = 0x800000000;
  if (!v28)
    v34 = 0;
  *v32 = *(_DWORD *)((char *)v3 + 1265);
  *(_WORD *)((char *)v3 + 1269) = (v33 & 0xFFFFFFF7FFFFFFFFLL | v34) >> 32;
  v35 = v3[228];
  v36 = v3[229];
  v316[0] = (WTF::StringImpl *)"HTMLMediaElement";
  v316[1] = (WTF::StringImpl *)17;
  v317 = "setReadyState";
  v318 = v36;
  if (*(_BYTE *)(v35 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v316);
    WTF::String::String((WTF::String *)&v320, "new state = ");
    {
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
      qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
      unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
      qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
    }
    v37 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[a2];
    if (v37)
      *(_DWORD *)v37 += 2;
    WTF::String::String((WTF::String *)&v319, ", current state = ");
    v38 = *((unsigned int *)v3 + 226);
    if ((_MergedGlobals_1512[0] & 1) == 0)
    {
      _MergedGlobals_39 += 2;
      dword_1ECE7B8B0 += 2;
      qword_1EE337C90 = (uint64_t)&_MergedGlobals_39;
      unk_1EE337C98 = &dword_1ECE7B8B0;
      dword_1ECE7B8D0 += 2;
      dword_1ECE7B8F0 += 2;
      qword_1EE337CA0 = (uint64_t)&dword_1ECE7B8D0;
      unk_1EE337CA8 = &dword_1ECE7B8F0;
      dword_1ECE7B910 += 2;
      qword_1EE337CB0 = (uint64_t)&dword_1ECE7B910;
      _MergedGlobals_1512[0] = 1;
    }
    v39 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v38 + 136];
    if (v39)
      *(_DWORD *)v39 += 2;
    *(_QWORD *)buf = v321;
    *(_QWORD *)&v326 = v320;
    v324 = v319;
    *(_QWORD *)&v325 = v37;
    v323 = v39;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v326, (uint64_t *)&v325, (uint64_t *)&v324, (uint64_t *)&v323, &v322);
    if (!v322)
    {
      __break(0xC471u);
      return;
    }
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v40);
      else
        *(_DWORD *)v39 -= 2;
    }
    v41 = v319;
    v319 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy(v41, v40);
        if (v37)
        {
LABEL_61:
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v40);
          else
            *(_DWORD *)v37 -= 2;
        }
LABEL_63:
        v42 = v320;
        v320 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v40);
          else
            *(_DWORD *)v42 -= 2;
        }
        v315 = a2;
        v43 = v321;
        v321 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v40);
          else
            *(_DWORD *)v43 -= 2;
        }
        v44 = qword_1ECE7C4A0;
        v45 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v45)
        {
          WTF::String::utf8();
          v47 = (_QWORD)v326 ? v326 + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v47;
          _os_log_impl(&dword_1940B8000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v45 = v326;
          *(_QWORD *)&v326 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 1)
              v45 = WTF::fastFree((WTF *)v45, v46);
            else
              --*(_DWORD *)v45;
          }
        }
        if (WebCore::LogMedia)
        {
          v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v49 = *v48;
            if ((v49 & 1) != 0)
              break;
            v50 = __ldaxr(v48);
            if (v50 == v49)
            {
              if (!__stxr(v49 | 1, v48))
              {
                v314 = v25;
                v51 = WTF::Logger::observers((WTF::Logger *)v45);
                v52 = *(unsigned int *)(v51 + 12);
                if ((_DWORD)v52)
                {
                  v53 = *(uint64_t **)v51;
                  v54 = *(_QWORD *)v51 + 8 * v52;
                  do
                  {
                    v55 = *v53;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v316);
                    *(_DWORD *)&buf[16] = 0;
                    WTF::String::String((WTF::String *)&buf[24], "new state = ");
                    *(_DWORD *)&buf[32] = 0;
                    {
                      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
                      *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
                      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
                      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
                      qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
                      unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
                      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
                      qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
                    }
                    v56 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[v315];
                    if (v56)
                      *v56 += 2;
                    *(_QWORD *)&buf[40] = v56;
                    LODWORD(v328[0]) = 0;
                    WTF::String::String((WTF::String *)&v328[1], ", current state = ");
                    v57 = *((unsigned int *)v3 + 226);
                    LODWORD(v329[0]) = 0;
                    if ((_MergedGlobals_1512[0] & 1) == 0)
                    {
                      _MergedGlobals_39 += 2;
                      dword_1ECE7B8B0 += 2;
                      qword_1EE337C90 = (uint64_t)&_MergedGlobals_39;
                      unk_1EE337C98 = &dword_1ECE7B8B0;
                      dword_1ECE7B8D0 += 2;
                      dword_1ECE7B8F0 += 2;
                      qword_1EE337CA0 = (uint64_t)&dword_1ECE7B8D0;
                      unk_1EE337CA8 = &dword_1ECE7B8F0;
                      dword_1ECE7B910 += 2;
                      qword_1EE337CB0 = (uint64_t)&dword_1ECE7B910;
                      _MergedGlobals_1512[0] = 1;
                    }
                    v58 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v57 + 136];
                    if (v58)
                      *(_DWORD *)v58 += 2;
                    v329[1] = v58;
                    v326 = 0uLL;
                    v59 = WTF::fastMalloc((WTF *)0x50);
                    DWORD2(v326) = 5;
                    *(_QWORD *)&v326 = v59;
                    v60 = HIDWORD(v326);
                    *(_DWORD *)(v59 + 16 * HIDWORD(v326)) = *(_DWORD *)buf;
                    v61 = *(_QWORD *)&buf[8];
                    if (*(_QWORD *)&buf[8])
                      **(_DWORD **)&buf[8] += 2;
                    *(_QWORD *)(v59 + 16 * v60 + 8) = v61;
                    *(_DWORD *)(v59 + 16 * (v60 + 1)) = *(_DWORD *)&buf[16];
                    v62 = *(_QWORD *)&buf[24];
                    if (*(_QWORD *)&buf[24])
                      **(_DWORD **)&buf[24] += 2;
                    *(_QWORD *)(v59 + 16 * (v60 + 1) + 8) = v62;
                    *(_DWORD *)(v59 + 16 * (v60 + 2)) = *(_DWORD *)&buf[32];
                    v63 = *(_QWORD *)&buf[40];
                    if (*(_QWORD *)&buf[40])
                      **(_DWORD **)&buf[40] += 2;
                    *(_QWORD *)(v59 + 16 * (v60 + 2) + 8) = v63;
                    *(_DWORD *)(v59 + 16 * (v60 + 3)) = v328[0];
                    v64 = v328[1];
                    if (v328[1])
                      *(_DWORD *)v328[1] += 2;
                    *(_QWORD *)(v59 + 16 * (v60 + 3) + 8) = v64;
                    *(_DWORD *)(v59 + 16 * (v60 + 4)) = v329[0];
                    v65 = v329[1];
                    if (v329[1])
                      *(_DWORD *)v329[1] += 2;
                    *(_QWORD *)(v59 + 16 * (v60 + 4) + 8) = v65;
                    HIDWORD(v326) = v60 + 5;
                    (*(void (**)(uint64_t, char *, _QWORD, __int128 *))(*(_QWORD *)v55 + 16))(v55, &WebCore::LogMedia, 0, &v326);
                    v66 = (WTF *)v326;
                    if (HIDWORD(v326))
                    {
                      v67 = 16 * HIDWORD(v326);
                      v68 = (WTF::StringImpl **)(v326 + 8);
                      do
                      {
                        v69 = *v68;
                        *v68 = 0;
                        if (v69)
                        {
                          if (*(_DWORD *)v69 == 2)
                            WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v46);
                          else
                            *(_DWORD *)v69 -= 2;
                        }
                        v68 += 2;
                        v67 -= 16;
                      }
                      while (v67);
                      v66 = (WTF *)v326;
                    }
                    if (v66)
                    {
                      *(_QWORD *)&v326 = 0;
                      DWORD2(v326) = 0;
                      WTF::fastFree(v66, v46);
                    }
                    v70 = v329[1];
                    v329[1] = 0;
                    if (v70)
                    {
                      if (*(_DWORD *)v70 == 2)
                        WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v46);
                      else
                        *(_DWORD *)v70 -= 2;
                    }
                    v71 = v328[1];
                    v328[1] = 0;
                    if (v71)
                    {
                      if (*(_DWORD *)v71 == 2)
                        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v46);
                      else
                        *(_DWORD *)v71 -= 2;
                    }
                    v72 = *(WTF::StringImpl **)&buf[40];
                    *(_QWORD *)&buf[40] = 0;
                    if (v72)
                    {
                      if (*(_DWORD *)v72 == 2)
                        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v46);
                      else
                        *(_DWORD *)v72 -= 2;
                    }
                    v73 = *(WTF::StringImpl **)&buf[24];
                    *(_QWORD *)&buf[24] = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 2)
                        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v46);
                      else
                        *(_DWORD *)v73 -= 2;
                    }
                    v74 = *(WTF::StringImpl **)&buf[8];
                    *(_QWORD *)&buf[8] = 0;
                    if (v74)
                    {
                      if (*(_DWORD *)v74 == 2)
                        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v46);
                      else
                        *(_DWORD *)v74 -= 2;
                    }
                    ++v53;
                  }
                  while (v53 != (uint64_t *)v54);
                }
                v75 = __ldxr(v48);
                if (v75 == 1)
                {
                  v25 = v314;
                  v32 = (unsigned int *)((char *)v3 + 1265);
                  if (!__stlxr(0, v48))
                    break;
                }
                else
                {
                  __clrex();
                  v25 = v314;
                  v32 = (unsigned int *)((char *)v3 + 1265);
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        FireTime = (uint64_t)v322;
        v322 = 0;
        if (FireTime)
        {
          if (*(_DWORD *)FireTime == 2)
            FireTime = WTF::StringImpl::destroy((WTF::StringImpl *)FireTime, (WTF::StringImpl *)v46);
          else
            *(_DWORD *)FireTime -= 2;
        }
        a2 = v315;
        goto LABEL_144;
      }
      *(_DWORD *)v41 -= 2;
    }
    if (v37)
      goto LABEL_61;
    goto LABEL_63;
  }
LABEL_144:
  if (a2 >= 2)
    v76 = 2;
  else
    v76 = a2;
  if (v28)
    v76 = a2;
  *((_DWORD *)v3 + 226) = v76;
  if (v25 > *((_DWORD *)v3 + 227))
    *((_DWORD *)v3 + 227) = v25;
  if (*((_DWORD *)v3 + 225))
  {
    v77 = *v32;
    v78 = v76 < 3 && v24;
    if ((v77 & 0x800) != 0)
    {
      if (v78)
      {
        v91 = v3[228];
        v92 = v3[229];
        *(_QWORD *)buf = "HTMLMediaElement";
        *(_QWORD *)&buf[8] = 17;
        *(_QWORD *)&buf[16] = "setReadyState";
        *(_QWORD *)&buf[24] = v92;
        v93 = (WTF::StringImpl *)WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)v3);
        v316[0] = v93;
        v316[1] = v94;
        if (*(_BYTE *)(v91 + 12))
          v93 = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38],WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, "queuing waiting event, currentTime = ", (WTF::MediaTime *)v316);
        v95 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v95 || (v96 = *(_QWORD *)(v95 + 96)) == 0)
          v96 = WebCore::threadGlobalDataSlow(v93);
        v97 = *(_QWORD *)(v96 + 40);
        if (!v97)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v96);
          v97 = *(_QWORD *)(v96 + 40);
        }
        v98 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v98);
        *(_DWORD *)(v98 + 16) = 1;
        *(_QWORD *)v98 = off_1E33A4B48;
        *(_QWORD *)(v98 + 8) = 0;
        *(_DWORD *)(v98 + 20) = *(_DWORD *)(v98 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v97 + 2272) != 0);
        v100 = *(_DWORD **)(v97 + 2272);
        if (v100)
          *v100 += 2;
        *(_QWORD *)(v98 + 24) = v100;
        *(_QWORD *)(v98 + 32) = 0;
        *(_QWORD *)(v98 + 40) = 0;
        *(_QWORD *)(v98 + 48) = 0;
        *(_QWORD *)(v98 + 56) = v99;
        *(_QWORD *)(v98 + 64) = 0;
        *(_QWORD *)buf = v98;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
        FireTime = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (FireTime)
        {
          if (*(_DWORD *)(FireTime + 16) == 1)
            FireTime = (*(uint64_t (**)(uint64_t))(*(_QWORD *)FireTime + 8))(FireTime);
          else
            --*(_DWORD *)(FireTime + 16);
        }
        v77 = *v32;
      }
      if ((v77 & 0x4000) != 0)
      {
        FireTime = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3[142] + 72) + 408))(*(_QWORD *)(v3[142] + 72));
        if ((FireTime & 1) == 0 && *((int *)v3 + 226) > 1)
          FireTime = (uint64_t)WebCore::HTMLMediaElement::finishSeek((WebCore::HTMLMediaElement *)v3);
      }
    }
    else if (v78)
    {
      v79 = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)FireTime);
      v80 = *(_QWORD *)((char *)v79 + 5);
      v3[148] = *v79;
      *(_QWORD *)((char *)v3 + 1189) = v80;
      v81 = v3[142];
      if (v81 && (*(double (**)(_QWORD))(**(_QWORD **)(v81 + 72) + 848))(*(_QWORD *)(v81 + 72)) != 0.0)
      {
        WTF::MonotonicTime::now(v82);
        *((double *)v3 + 151) = v83 + 0.5;
      }
      v84 = WebCore::HTMLMediaElement::scheduleTimeupdateEvent((WebCore::HTMLMediaElement *)v3, 0);
      v85 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v85 || (v86 = *(_QWORD *)(v85 + 96)) == 0)
        v86 = WebCore::threadGlobalDataSlow(v84);
      v87 = *(_QWORD *)(v86 + 40);
      if (!v87)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v86);
        v87 = *(_QWORD *)(v86 + 40);
      }
      v88 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v88);
      *(_DWORD *)(v88 + 16) = 1;
      *(_QWORD *)v88 = off_1E33A4B48;
      *(_QWORD *)(v88 + 8) = 0;
      *(_DWORD *)(v88 + 20) = *(_DWORD *)(v88 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v87 + 2272) != 0);
      v90 = *(_DWORD **)(v87 + 2272);
      if (v90)
        *v90 += 2;
      *(_QWORD *)(v88 + 24) = v90;
      *(_QWORD *)(v88 + 32) = 0;
      *(_QWORD *)(v88 + 40) = 0;
      *(_QWORD *)(v88 + 48) = 0;
      *(_QWORD *)(v88 + 56) = v89;
      *(_QWORD *)(v88 + 64) = 0;
      *(_QWORD *)buf = v88;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
      FireTime = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (FireTime)
      {
        if (*(_DWORD *)(FireTime + 16) == 1)
          FireTime = (*(uint64_t (**)(uint64_t))(*(_QWORD *)FireTime + 8))(FireTime);
        else
          --*(_DWORD *)(FireTime + 16);
      }
    }
    v101 = *((_DWORD *)v3 + 226);
    if (v101 < 1 || v25 > 0)
      goto LABEL_314;
    v102 = (_DWORD *)v3[114];
    if (v102)
      *v102 += 2;
    *(_QWORD *)buf = v102;
    *(_OWORD *)&buf[8] = *(_OWORD *)(v3 + 115);
    *(_OWORD *)&buf[24] = *(_OWORD *)(v3 + 117);
    *(_DWORD *)&buf[40] = 0;
    v103 = (WTF::MediaTime *)WTF::MediaTime::invalidTime((WTF::MediaTime *)FireTime);
    *(_OWORD *)v328 = *(_OWORD *)v103;
    *(_OWORD *)v329 = *(_OWORD *)WTF::MediaTime::invalidTime(v103);
    v330 = 0;
    v331 = 0;
    v104 = v3[144];
    if (v104)
    {
      v105 = *(uint64_t (**)(void))(*(_QWORD *)v104 + 40);
    }
    else
    {
      v108 = v3[142];
      if (!v108 || *((int *)v3 + 226) < 1)
      {
        v109 = WTF::MediaTime::invalidTime(0);
        v106 = *(WTF::StringImpl **)v109;
        v107 = *(WTF::StringImpl **)(v109 + 8);
LABEL_200:
        v316[0] = v106;
        v316[1] = v107;
        if ((buf[8] & 1) != 0)
        {
          v111 = v328;
          v110 = (WTF::MediaTime *)WebCore::MediaFragmentURIParser::parseTimeFragment((WebCore::MediaFragmentURIParser *)buf);
        }
        else
        {
          v110 = (WTF::MediaTime *)WTF::MediaTime::invalidTime(v106);
          v111 = (WTF::StringImpl **)v110;
        }
        v112 = (unint64_t)v111[1];
        *(_QWORD *)&v326 = *v111;
        *((_QWORD *)&v326 + 1) = v112;
        if ((v112 & 0x100000000) != 0
          && (v113 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v110),
              v110 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v326, v113),
              (_DWORD)v110 == 1))
        {
          v3[152] = v326;
          *(_QWORD *)((char *)v3 + 1221) = *(_QWORD *)((char *)&v326 + 5);
          v114 = WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 152), (const WTF::MediaTime *)v316);
          if ((_DWORD)v114 == 1)
          {
            v3[152] = v316[0];
            *(_QWORD *)((char *)v3 + 1221) = *(WTF::StringImpl **)((char *)v316 + 5);
          }
        }
        else
        {
          v114 = WTF::MediaTime::invalidTime(v110);
          v115 = *(_QWORD *)(v114 + 5);
          v3[152] = *(_QWORD *)v114;
          *(_QWORD *)((char *)v3 + 1221) = v115;
        }
        if ((buf[8] & 1) != 0)
        {
          v116 = v329;
          if (!*(_DWORD *)&buf[40])
            v114 = (uint64_t)WebCore::MediaFragmentURIParser::parseTimeFragment((WebCore::MediaFragmentURIParser *)buf);
        }
        else
        {
          v114 = WTF::MediaTime::invalidTime((WTF::MediaTime *)v114);
          v116 = (WTF::StringImpl **)v114;
        }
        v117 = (unint64_t)v116[1];
        *(_QWORD *)&v325 = *v116;
        *((_QWORD *)&v325 + 1) = v117;
        if ((v117 & 0x100000000) != 0
          && (v118 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v114),
              v114 = WTF::MediaTime::compare((WTF::MediaTime *)&v325, v118),
              (_DWORD)v114 == 1)
          && ((*((_BYTE *)v3 + 1228) & 1) == 0
           || (v114 = WTF::MediaTime::compare((WTF::MediaTime *)&v325, (const WTF::MediaTime *)(v3 + 152)),
               (_DWORD)v114 == 1)))
        {
          v3[154] = v325;
          *(_QWORD *)((char *)v3 + 1237) = *(_QWORD *)((char *)&v325 + 5);
          if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 154), (const WTF::MediaTime *)v316) == 1)
          {
            v3[154] = v316[0];
            *(_QWORD *)((char *)v3 + 1237) = *(WTF::StringImpl **)((char *)v316 + 5);
          }
        }
        else
        {
          v120 = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v114);
          v121 = *(_QWORD *)((char *)v120 + 5);
          v3[154] = *v120;
          *(_QWORD *)((char *)v3 + 1237) = v121;
        }
        if ((*((_BYTE *)v3 + 1228) & 1) != 0 && *((int *)v3 + 226) <= 2)
          WebCore::HTMLMediaElement::prepareToPlay((uint64_t)v3);
        if (HIDWORD(v331))
        {
          v307 = 16 * HIDWORD(v331);
          v308 = (WTF::StringImpl **)((char *)v330 + 8);
          do
          {
            v309 = *v308;
            *v308 = 0;
            if (v309)
            {
              if (*(_DWORD *)v309 == 2)
                WTF::StringImpl::destroy(v309, v119);
              else
                *(_DWORD *)v309 -= 2;
            }
            v310 = *(v308 - 1);
            *(v308 - 1) = 0;
            if (v310)
            {
              if (*(_DWORD *)v310 == 2)
                WTF::StringImpl::destroy(v310, v119);
              else
                *(_DWORD *)v310 -= 2;
            }
            v308 += 2;
            v307 -= 16;
          }
          while (v307);
        }
        v122 = v330;
        if (v330)
        {
          v330 = 0;
          LODWORD(v331) = 0;
          WTF::fastFree(v122, v119);
        }
        v123 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 2)
            WTF::StringImpl::destroy(v123, v119);
          else
            *(_DWORD *)v123 -= 2;
        }
        WebCore::HTMLMediaElement::durationChanged((WebCore::HTMLMediaElement *)v3);
        *(_DWORD *)buf = (*(float (**)(_QWORD))(**(_QWORD **)(v3[142] + 72) + 288))(*(_QWORD *)(v3[142] + 72));
        *(_DWORD *)&buf[4] = v124;
        v125 = (WebCore *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*v3 + 2504))(v3, buf);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v127 = *(_QWORD *)(StatusReg + 736);
        if (!v127 || (v128 = *(_QWORD *)(v127 + 96)) == 0)
          v128 = WebCore::threadGlobalDataSlow(v125);
        v129 = *(_QWORD *)(v128 + 40);
        if (!v129)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v128);
          v129 = *(_QWORD *)(v128 + 40);
        }
        v130 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v130);
        *(_DWORD *)(v130 + 16) = 1;
        *(_QWORD *)v130 = off_1E33A4B48;
        *(_QWORD *)(v130 + 8) = 0;
        *(_DWORD *)(v130 + 20) = *(_DWORD *)(v130 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v129 + 1120) != 0);
        v132 = *(_DWORD **)(v129 + 1120);
        if (v132)
          *v132 += 2;
        *(_QWORD *)(v130 + 24) = v132;
        *(_QWORD *)(v130 + 32) = 0;
        *(_QWORD *)(v130 + 40) = 0;
        *(_QWORD *)(v130 + 48) = 0;
        *(_QWORD *)(v130 + 56) = v131;
        *(_QWORD *)(v130 + 64) = 0;
        *(_QWORD *)buf = v130;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
        v133 = *(WTF::MediaTime **)buf;
        *(_QWORD *)buf = 0;
        if (v133)
        {
          if (*((_DWORD *)v133 + 4) == 1)
            v133 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v133 + 8))(v133);
          else
            --*((_DWORD *)v133 + 4);
        }
        v134 = v3 + 146;
        v135 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v133);
        v136 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 146), v135);
        if ((_DWORD)v136 == 1)
        {
          *(_OWORD *)v316 = *v134;
          v138 = WTF::MediaTime::zeroTime(v136);
          v139 = *(_QWORD *)(v138 + 5);
          *(_QWORD *)v134 = *(_QWORD *)v138;
          *(_QWORD *)((char *)v3 + 1173) = v139;
          v140 = v3[228];
          v141 = v3[229];
          *(_QWORD *)buf = "HTMLMediaElement";
          *(_QWORD *)&buf[8] = 17;
          *(_QWORD *)&buf[16] = "seekInternal";
          *(_QWORD *)&buf[24] = v141;
          if (*(_BYTE *)(v140 + 12))
            v138 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, (WTF::MediaTime *)v316);
          v142 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v138);
          v143 = (_OWORD *)WTF::MediaTime::zeroTime(v142);
          *(_OWORD *)buf = *(_OWORD *)v316;
          *(_OWORD *)&buf[16] = *(_OWORD *)v142;
          *(_OWORD *)&buf[32] = *v143;
          v136 = (WTF::MediaTime *)WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)v3, (const WebCore::SeekTarget *)buf, 0);
        }
        if (!*((_BYTE *)v3 + 1696))
        {
          v144 = *(_QWORD *)(StatusReg + 736);
          if (!v144 || (v145 = *(_QWORD *)(v144 + 96)) == 0)
            v145 = WebCore::threadGlobalDataSlow(v136);
          v146 = *(_QWORD *)(v145 + 40);
          if (!v146)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v145);
            v146 = *(_QWORD *)(v145 + 40);
          }
          v147 = v3[2];
          if ((v147 & 0x1000000000000) != 0)
          {
            v250 = v147 & 0xFFFFFFFFFFFFLL;
            v251 = *(unsigned int *)(v250 + 28);
            if ((_DWORD)v251)
            {
              v252 = *(_QWORD **)(v250 + 16);
              v253 = *(_QWORD *)(v146 + 2464);
              v254 = 32 * v251;
              while (*v252 != v253)
              {
                v252 += 4;
                v254 -= 32;
                if (!v254)
                  goto LABEL_249;
              }
              goto LABEL_252;
            }
          }
LABEL_249:
          v148 = v3[230];
          v149 = *(_QWORD *)(v148 + 88);
          if (v149 && *(_DWORD *)(v149 - 12) || *(_DWORD *)(v148 + 140))
LABEL_252:
            WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent((uint64_t (**)())v3, 1);
        }
        if (*((double *)v3 + 123) >= 0.05)
        {
          v151 = (*(uint64_t (**)(_QWORD *))(*v3 + 1472))(v3);
          v150 = *v32 | ((unint64_t)*((unsigned __int16 *)v32 + 2) << 32);
          if (!v151)
          {
            v152 = 0;
LABEL_258:
            *((_WORD *)v32 + 2) = WORD2(v150);
            *v32 = v150 & 0xFFFFFDFF | v152;
            WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)v3, v137);
            v153 = *(_QWORD *)(v3[5] + 8);
            if (v153)
              v154 = (*(_WORD *)(v153 + 3358) & 0x10) == 0;
            else
              v154 = 1;
            if (v154)
              goto LABEL_279;
            *(_DWORD *)(v153 + 24) += 2;
            v156 = ceilf((*(float (**)(_QWORD))(**(_QWORD **)(v3[142] + 72) + 288))(*(_QWORD *)(v3[142] + 72)));
            v158 = 0x7FFFFFFFLL;
            v159 = 0x80000000;
            if (v156 > -2147500000.0)
              v159 = (int)v156;
            if (v156 < 2147500000.0)
              v158 = v159;
            v160 = ceilf(v157);
            if (v160 >= 2147500000.0)
            {
              v161 = 0x7FFFFFFF00000000;
            }
            else if (v160 <= -2147500000.0)
            {
              v161 = 0x8000000000000000;
            }
            else
            {
              v161 = (unint64_t)(int)v160 << 32;
            }
            *(_QWORD *)buf = v161 | v158;
            v162 = *(_QWORD *)(v153 + 528);
            if (v162)
            {
              v163 = *(_QWORD *)(v162 + 8);
              if (v163)
              {
                v164 = HIDWORD(v161);
                v165 = *(_QWORD *)(v163 + 120);
                if (v165)
                {
                  v166 = v158 | v164;
                  if (*(_QWORD *)(v165 + 8))
                    v167 = 1;
                  else
                    v167 = v166 == 0;
                  if (!v167)
                  {
LABEL_406:
                    v239 = *(_QWORD *)(v163 + 24);
                    if (v239)
                    {
                      v240 = *(_QWORD *)(v239 + 8);
                      if (v240)
                        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(*(_QWORD *)(v240 + 48) + 16) + 1584))(*(_QWORD *)(*(_QWORD *)(v240 + 48) + 16), buf);
                    }
                  }
                }
                else if (v158 | v164)
                {
                  goto LABEL_406;
                }
              }
            }
            if (*(_DWORD *)(v153 + 24) == 2)
            {
              v248 = *(_WORD *)(v153 + 30);
              if ((v248 & 0x400) == 0)
              {
                v249 = *(_WORD *)(v153 + 28);
                if ((v249 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v153, v155);
                }
                else
                {
                  if ((v249 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v153 + 160) + 16))(*(_QWORD *)(v153 + 160));
                    v248 = *(_WORD *)(v153 + 30);
                  }
                  *(_WORD *)(v153 + 30) = v248 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v153 + 72))(v153);
                }
              }
            }
            else
            {
              *(_DWORD *)(v153 + 24) -= 2;
            }
LABEL_279:
            v168 = *(_QWORD *)(*(_QWORD *)(v3[5] + 8) + 528);
            if (v168
              && (v169 = *(_QWORD *)(v168 + 8)) != 0
              && (v170 = *(_QWORD *)(v169 + 24)) != 0
              && (v171 = *(_QWORD *)(v170 + 8)) != 0)
            {
              ++*(_DWORD *)v171;
              v172 = *(WebCore **)(v3[142] + 72);
              if (v172)
                v172 = (WebCore *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v172 + 896))(v316);
              else
                v316[0] = 0;
              if ((*(_QWORD *)(*(_QWORD *)(v171 + 112) + 672) & 0x800000000000) == 0
                || (v176 = *(uint64_t **)(v171 + 256)) == 0)
              {
                v176 = WebCore::emptyDiagnosticLoggingClient(v172);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD))*v176)(v176, buf, v316, 0);
              v179 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v179)
              {
                if (*(_DWORD *)v179 == 2)
                  WTF::StringImpl::destroy(v179, v177);
                else
                  *(_DWORD *)v179 -= 2;
              }
              if (!*(_DWORD *)(v171 + 852))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(uint64_t *, _BYTE *, _QWORD, _QWORD))*v176)(v176, buf, MEMORY[0x1E0CBF738], 0);
                v181 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v181)
                {
                  if (*(_DWORD *)v181 == 2)
                    WTF::StringImpl::destroy(v181, v180);
                  else
                    *(_DWORD *)v181 -= 2;
                }
              }
              if ((WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v171 + 840), v316, v178) & 1) == 0)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(uint64_t *, _BYTE *, WTF::StringImpl **, _QWORD))*v176)(v176, buf, v316, 0);
                v184 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v184)
                {
                  if (*(_DWORD *)v184 == 2)
                    WTF::StringImpl::destroy(v184, v183);
                  else
                    *(_DWORD *)v184 -= 2;
                }
              }
              WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v171 + 840, v316, v182, (uint64_t)buf);
              v186 = v316[0];
              v316[0] = 0;
              if (v186)
              {
                if (*(_DWORD *)v186 == 2)
                  WTF::StringImpl::destroy(v186, v185);
                else
                  *(_DWORD *)v186 -= 2;
              }
              if (*(_DWORD *)v171 == 1)
              {
                WebCore::Page::~Page(v171);
                WTF::fastFree(v246, v247);
              }
              else
              {
                --*(_DWORD *)v171;
              }
            }
            else
            {
              v173 = *(_QWORD *)(v3[142] + 72);
              if (v173)
              {
                (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v173 + 896))(v316);
                v175 = v316[0];
                v316[0] = 0;
                if (v175)
                {
                  if (*(_DWORD *)v175 == 2)
                    WTF::StringImpl::destroy(v175, v174);
                  else
                    *(_DWORD *)v175 -= 2;
                }
              }
            }
            WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())v3);
            v187 = (WebCore::PlatformMediaSession *)v3[200];
            if (!v187)
            {
              WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v3);
              v187 = (WebCore::PlatformMediaSession *)v3[200];
            }
            v188 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v187 + 10) + 40) + 8) + 696);
            if (v188)
            {
              WebCore::LocalDOMWindow::protectedNavigator(v188, buf);
              v189 = *(_DWORD **)buf;
              WebCore::NavigatorMediaSession::mediaSession(*(WebCore::NavigatorMediaSession **)buf, v190);
              if (v189[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v189 + 16))(v189);
              else
                --v189[4];
            }
            FireTime = WebCore::PlatformMediaSession::clientCharacteristicsChanged(v187, 0);
            v101 = *((_DWORD *)v3 + 226);
            if (v101 == 1)
              goto LABEL_456;
LABEL_314:
            if (v101 <= 1 || v25 > 1)
            {
              if (!v28)
                goto LABEL_456;
              if (v25 > 2)
              {
                if (v101 != 4 || v25 != 3)
                  goto LABEL_498;
LABEL_381:
                v226 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                v227 = *(_QWORD *)(v226 + 736);
                if (!v227 || (v228 = *(_QWORD *)(v227 + 96)) == 0)
                  v228 = WebCore::threadGlobalDataSlow((WebCore *)FireTime);
                v229 = *(_QWORD *)(v228 + 40);
                if (!v229)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v228);
                  v229 = *(_QWORD *)(v228 + 40);
                }
                v230 = bmalloc::api::isoAllocate();
                WTF::MonotonicTime::now((WTF::MonotonicTime *)v230);
                *(_DWORD *)(v230 + 16) = 1;
                *(_QWORD *)v230 = off_1E33A4B48;
                *(_QWORD *)(v230 + 8) = 0;
                *(_DWORD *)(v230 + 20) = *(_DWORD *)(v230 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v229 + 360) != 0);
                v232 = *(_DWORD **)(v229 + 360);
                if (v232)
                  *v232 += 2;
                *(_QWORD *)(v230 + 24) = v232;
                *(_QWORD *)(v230 + 32) = 0;
                *(_QWORD *)(v230 + 40) = 0;
                *(_QWORD *)(v230 + 48) = 0;
                *(_QWORD *)(v230 + 56) = v231;
                *(_QWORD *)(v230 + 64) = 0;
                *(_QWORD *)buf = v230;
                WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
                v234 = *(_DWORD **)buf;
                *(_QWORD *)buf = 0;
                if (v234)
                {
                  if (v234[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v234 + 8))(v234);
                  else
                    --v234[4];
                }
                WebCore::HTMLMediaElement::canTransitionFromAutoplayToPlay((WebCore::HTMLMediaElement *)v3, v233, (int *)v316);
                if (!BYTE4(v316[0]))
                {
                  v241 = (WTF::MediaTime *)WebCore::HTMLMediaElement::setPaused((unsigned __int8 *)v3, 0);
                  LOBYTE(v326) = 0;
                  v242 = *v32 | ((unint64_t)*((unsigned __int16 *)v32 + 2) << 32);
                  if ((v242 & 0x400000000) != 0)
                  {
                    v243 = v3[228];
                    v244 = v3[229];
                    *(_QWORD *)buf = "HTMLMediaElement";
                    *(_QWORD *)&buf[8] = 17;
                    *(_QWORD *)&buf[16] = "setShowPosterFlag";
                    *(_QWORD *)&buf[24] = v244;
                    if (*(_BYTE *)(v243 + 12))
                    {
                      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf);
                      v245 = v326;
                      v242 = *v32 | ((unint64_t)*((unsigned __int16 *)v32 + 2) << 32);
                    }
                    else
                    {
                      v245 = 0;
                    }
                    v255 = v242 & 0xFFFFFFFBFFFFFFFFLL;
                    *v32 = v255;
                    *((_WORD *)v32 + 2) = (v255 | (v245 << 34)) >> 32;
                    v241 = (WTF::MediaTime *)WebCore::Node::invalidateStyle((uint64_t)v3, 3u, 1);
                    if ((*((_BYTE *)v3 + 71) & 1) != 0)
                    {
                      v311 = v3[4];
                      if (!v311 || (*(_WORD *)(v311 + 28) & 8) == 0 || (*(_BYTE *)(v311 + 70) & 4) == 0)
                      {
                        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)v3);
                        v241 = WebCore::invalidateForSiblingCombinators(ElementSibling, v313);
                      }
                    }
                  }
                  v256 = (_QWORD *)WTF::MediaTime::invalidTime(v241);
                  v257 = *(_QWORD *)((char *)v256 + 5);
                  v3[148] = *v256;
                  *(_QWORD *)((char *)v3 + 1189) = v257;
                  v258 = v3[142];
                  if (v258
                    && (*(double (**)(_QWORD))(**(_QWORD **)(v258 + 72) + 848))(*(_QWORD *)(v258 + 72)) != 0.0)
                  {
                    WTF::MonotonicTime::now(v259);
                    *((double *)v3 + 151) = v260 + 0.5;
                  }
                  LODWORD(v326) = 3;
                  v261 = v3[228];
                  v262 = v3[229];
                  *(_QWORD *)buf = "HTMLMediaElement";
                  *(_QWORD *)&buf[8] = 17;
                  *(_QWORD *)&buf[16] = "setAutoplayEventPlaybackState";
                  *(_QWORD *)&buf[24] = v262;
                  if (*(_BYTE *)(v261 + 12))
                  {
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, (int *)&v326);
                    v264 = v326;
                    *((_DWORD *)v3 + 323) = v326;
                    if (v264 == 1)
                    {
                      WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks((WebCore::HTMLMediaElement *)v3, v263);
                      WebCore::HTMLMediaElement::handleAutoplayEvent(v3, 0);
                    }
                  }
                  else
                  {
                    *((_DWORD *)v3 + 323) = 3;
                  }
                  *(_QWORD *)buf = WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)v3);
                  *(_QWORD *)&buf[8] = v265;
                  v266 = (WebCore *)WTF::MediaTime::toDouble((WTF::MediaTime *)buf);
                  v3[128] = v267;
                  v268 = *(_QWORD *)(v226 + 736);
                  if (!v268 || (v269 = *(_QWORD *)(v268 + 96)) == 0)
                    v269 = WebCore::threadGlobalDataSlow(v266);
                  v270 = *(_QWORD *)(v269 + 40);
                  if (!v270)
                  {
                    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v269);
                    v270 = *(_QWORD *)(v269 + 40);
                  }
                  v271 = bmalloc::api::isoAllocate();
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)v271);
                  *(_DWORD *)(v271 + 16) = 1;
                  *(_QWORD *)v271 = off_1E33A4B48;
                  *(_QWORD *)(v271 + 8) = 0;
                  *(_DWORD *)(v271 + 20) = *(_DWORD *)(v271 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v270 + 1464) != 0);
                  v273 = *(_DWORD **)(v270 + 1464);
                  if (v273)
                    *v273 += 2;
                  *(_QWORD *)(v271 + 24) = v273;
                  *(_QWORD *)(v271 + 32) = 0;
                  *(_QWORD *)(v271 + 40) = 0;
                  *(_QWORD *)(v271 + 48) = 0;
                  *(_QWORD *)(v271 + 56) = v272;
                  *(_QWORD *)(v271 + 64) = 0;
                  *(_QWORD *)buf = v271;
                  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
                  v274 = *(_DWORD **)buf;
                  *(_QWORD *)buf = 0;
                  if (v274)
                  {
                    if (v274[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v274 + 8))(v274);
                    else
                      --v274[4];
                  }
                  goto LABEL_455;
                }
                if (!LODWORD(v316[0]))
                {
                  v236 = v3[228];
                  v237 = v3[229];
                  *(_QWORD *)buf = "HTMLMediaElement";
                  *(_QWORD *)&buf[8] = 17;
                  *(_QWORD *)&buf[16] = "setReadyState";
                  *(_QWORD *)&buf[24] = v237;
                  if (*(_BYTE *)(v236 + 12))
                  {
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, "Autoplay blocked, user gesture required");
                    v236 = v3[228];
                    v237 = v3[229];
                  }
                  LODWORD(v326) = 1;
                  *(_QWORD *)buf = "HTMLMediaElement";
                  *(_QWORD *)&buf[8] = 17;
                  *(_QWORD *)&buf[16] = "setAutoplayEventPlaybackState";
                  *(_QWORD *)&buf[24] = v237;
                  if (*(_BYTE *)(v236 + 12))
                  {
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, (int *)&v326);
                    v238 = v326;
                    *((_DWORD *)v3 + 323) = v326;
                    if (v238 != 1)
                      goto LABEL_456;
                  }
                  else
                  {
                    *((_DWORD *)v3 + 323) = 1;
                  }
                  WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks((WebCore::HTMLMediaElement *)v3, v235);
                  WebCore::HTMLMediaElement::handleAutoplayEvent(v3, 0);
                }
LABEL_456:
                if (*((_DWORD *)v3 + 226) == 3 && v25 <= 2)
                {
                  v275 = v3[177];
                  if (!v275)
                    goto LABEL_485;
                  if (!*(_BYTE *)(v275 + 72))
                  {
                    v276 = *(unsigned int *)(v275 + 68);
                    v277 = 0.0;
                    if ((_DWORD)v276)
                    {
                      v278 = *(WebCore::HTMLMediaElement ***)(v275 + 56);
                      v279 = 8 * v276;
                      v280 = 1;
                      while (1)
                      {
                        v281 = *v278;
                        if (*((int *)*v278 + 226) < 3)
                          goto LABEL_498;
                        v282 = *((_QWORD *)v281 + 200);
                        if (!v282)
                        {
                          WebCore::HTMLMediaElement::initializeMediaSession(*v278);
                          v282 = *((_QWORD *)v281 + 200);
                        }
                        if (*(_BYTE *)(v282 + 48) == 4)
                          goto LABEL_498;
                        v283 = *v278;
                        if ((*(_DWORD *)((_BYTE *)*v278 + 1265) & 0x40) != 0)
                        {
                          if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v283 + 1384))(v283) & 1) != 0)
                            goto LABEL_498;
                          v283 = *v278;
                        }
                        v280 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v283 + 1384))(v283);
                        ++v278;
                        v279 -= 8;
                        if (!v279)
                        {
                          if ((v280 & 1) != 0)
                            goto LABEL_498;
                          v284 = v3[177];
                          v285 = *(unsigned int *)(v284 + 68);
                          if ((_DWORD)v285)
                          {
                            v277 = *(double *)(v284 + 96);
                            if (v277 == -1.0)
                            {
                              v286 = *(uint64_t **)(v284 + 56);
                              v287 = 8 * v285;
                              v288 = 0.0;
                              do
                              {
                                v289 = *v286++;
                                v290 = (*(double (**)(uint64_t))(*(_QWORD *)v289 + 1376))(v289);
                                if (v288 >= v290)
                                  v291 = v288;
                                else
                                  v291 = v290;
                                v288 = v291;
                                v287 -= 8;
                              }
                              while (v287);
                              v293 = (*(double (**)(_QWORD))(**(_QWORD **)(v284 + 256) + 24))(*(_QWORD *)(v284 + 256));
                              if (v293 >= v288)
                                v293 = v288;
                              *(double *)(v284 + 96) = fmax(v293, 0.0);
                              *(_QWORD *)(v284 + 216) = 0;
                              WTF::MonotonicTime::now(v292);
                              WebCore::TimerBase::setNextFireTime(v284 + 192, v294 + 0.0);
                              v277 = *(double *)(v284 + 96);
                            }
                            if (v277 < 0.0)
                              goto LABEL_498;
                          }
                          break;
                        }
                      }
                    }
                    if (v277 <= (*(double (**)(_QWORD *))(*v3 + 1376))(v3))
                    {
LABEL_485:
                      if (WebCore::HTMLMediaElement::couldPlayIfEnoughData((WebCore::HTMLMediaElement *)v3)
                        && (*((int *)v3 + 226) > 2 || *((int *)v3 + 227) >= 3))
                      {
                        v295 = v3[200];
                        if (!v295)
                        {
                          WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v3);
                          v295 = v3[200];
                        }
                        WebCore::MediaElementSession::playbackStateChangePermitted(v295, 0, (uint64_t)buf);
                        if (buf[4])
                        {
                          WebCore::HTMLMediaElement::canTransitionFromAutoplayToPlay((WebCore::HTMLMediaElement *)v3, v296, (int *)v316);
                          if (BYTE4(v316[0]))
                          {
                            if (!LODWORD(v316[0]))
                            {
                              v297 = v3[228];
                              v298 = v3[229];
                              *(_QWORD *)buf = "HTMLMediaElement";
                              *(_QWORD *)&buf[8] = 17;
                              *(_QWORD *)&buf[16] = "setReadyState";
                              *(_QWORD *)&buf[24] = v298;
                              if (*(_BYTE *)(v297 + 12))
                                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, "Autoplay blocked, user gesture required");
                            }
                          }
                          WebCore::HTMLMediaElement::pauseInternal((WebCore::HTMLMediaElement *)v3);
                          LODWORD(v326) = 1;
                          v300 = v3[228];
                          v301 = v3[229];
                          *(_QWORD *)buf = "HTMLMediaElement";
                          *(_QWORD *)&buf[8] = 17;
                          *(_QWORD *)&buf[16] = "setAutoplayEventPlaybackState";
                          *(_QWORD *)&buf[24] = v301;
                          if (*(_BYTE *)(v300 + 12))
                          {
                            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, (int *)&v326);
                            v302 = v326;
                            *((_DWORD *)v3 + 323) = v326;
                            if (v302 != 1)
                              goto LABEL_498;
                          }
                          else
                          {
                            *((_DWORD *)v3 + 323) = 1;
                          }
                          WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks((WebCore::HTMLMediaElement *)v3, v299);
                          WebCore::HTMLMediaElement::handleAutoplayEvent(v3, 0);
                        }
                      }
                    }
                  }
                }
LABEL_498:
                WebCore::HTMLMediaElement::updatePlayState((WebCore::HTMLMediaElement *)v3);
                v303 = (WebCore::MediaController *)v3[177];
                if (v303)
                {
                  ++*((_DWORD *)v303 + 2);
                  WebCore::MediaController::updateReadyState((uint64_t)v303);
                  WebCore::MediaController::updatePlaybackState((uint64_t)v303);
                  if (*((_DWORD *)v303 + 2) == 1)
                  {
                    WebCore::MediaController::~MediaController(v303);
                    bmalloc::api::isoDeallocate(v305, v306);
                  }
                  else
                  {
                    --*((_DWORD *)v303 + 2);
                  }
                }
                *(_QWORD *)buf = WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)v3);
                *(_QWORD *)&buf[8] = v304;
                WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)v3, (const WTF::MediaTime *)buf);
                WebCore::HTMLMediaElement::updateBufferingState((WebCore::HTMLMediaElement *)v3);
                WebCore::HTMLMediaElement::updateStalledState((WebCore::HTMLMediaElement *)v3);
                return;
              }
              if (v101 < 3)
                goto LABEL_456;
            }
            else
            {
              v191 = *v32;
              v192 = v191 | ((unint64_t)*((unsigned __int16 *)v32 + 2) << 32);
              if ((v191 & 0x10) == 0)
              {
                *((_WORD *)v32 + 2) = WORD2(v192);
                *v32 = v192 | 0x10;
                v193 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v193 || (v194 = *(_QWORD *)(v193 + 96)) == 0)
                  v194 = WebCore::threadGlobalDataSlow((WebCore *)FireTime);
                v195 = *(_QWORD *)(v194 + 40);
                if (!v195)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v194);
                  v195 = *(_QWORD *)(v194 + 40);
                }
                v196 = bmalloc::api::isoAllocate();
                WTF::MonotonicTime::now((WTF::MonotonicTime *)v196);
                *(_DWORD *)(v196 + 16) = 1;
                *(_QWORD *)v196 = off_1E33A4B48;
                *(_QWORD *)(v196 + 8) = 0;
                *(_DWORD *)(v196 + 20) = *(_DWORD *)(v196 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v195 + 1112) != 0);
                v198 = *(_DWORD **)(v195 + 1112);
                if (v198)
                  *v198 += 2;
                *(_QWORD *)(v196 + 24) = v198;
                *(_QWORD *)(v196 + 32) = 0;
                *(_QWORD *)(v196 + 40) = 0;
                *(_QWORD *)(v196 + 48) = 0;
                *(_QWORD *)(v196 + 56) = v197;
                *(_QWORD *)(v196 + 64) = 0;
                *(_QWORD *)buf = v196;
                WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
                v199 = *(WTF::MediaTime **)buf;
                *(_QWORD *)buf = 0;
                if (v199)
                {
                  if (*((_DWORD *)v199 + 4) == 1)
                    v199 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v199 + 8))(v199);
                  else
                    --*((_DWORD *)v199 + 4);
                }
                if ((*((_BYTE *)v3 + 1228) & 1) != 0)
                {
                  v200 = *v32 & 0xFFFDFFFF | ((unint64_t)*((unsigned __int16 *)v32 + 2) << 32);
                  *v32 &= ~0x20000u;
                  *((_WORD *)v32 + 2) = WORD2(v200);
                  v201 = v3[228];
                  v202 = v3[229];
                  *(_QWORD *)buf = "HTMLMediaElement";
                  *(_QWORD *)&buf[8] = 17;
                  *(_QWORD *)&buf[16] = "seek";
                  *(_QWORD *)&buf[24] = v202;
                  if (*(_BYTE *)(v201 + 12))
                    v199 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, (WTF::MediaTime *)(v3 + 152));
                  v203 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v199);
                  v204 = (_OWORD *)WTF::MediaTime::zeroTime(v203);
                  *(_OWORD *)buf = *((_OWORD *)v3 + 76);
                  *(_OWORD *)&buf[16] = *(_OWORD *)v203;
                  *(_OWORD *)&buf[32] = *v204;
                  WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)v3, (const WebCore::SeekTarget *)buf, 1);
                }
              }
              FireTime = (uint64_t)WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)v3, 0);
              v101 = *((_DWORD *)v3 + 226);
              if (v101 <= 2 || !v28)
                goto LABEL_456;
            }
            if (*((_BYTE *)v3 + 1688))
            {
              v206 = v3[228];
              v207 = v3[229];
              *(_QWORD *)buf = "HTMLMediaElement";
              *(_QWORD *)&buf[8] = 17;
              *(_QWORD *)&buf[16] = "applyConfiguration";
              *(_QWORD *)&buf[24] = v207;
              if (*(_BYTE *)(v206 + 12))
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf);
              FireTime = WTF::MediaTime::operator BOOL();
              if ((_DWORD)FireTime && !v3[177])
              {
                v208 = v3[228];
                v209 = v3[229];
                *(_QWORD *)buf = "HTMLMediaElement";
                *(_QWORD *)&buf[8] = 17;
                *(_QWORD *)&buf[16] = "seekInternal";
                *(_QWORD *)&buf[24] = v209;
                if (*(_BYTE *)(v208 + 12))
                  FireTime = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf, (WTF::MediaTime *)(v3 + 207));
                v210 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)FireTime);
                v211 = (_OWORD *)WTF::MediaTime::zeroTime(v210);
                *(_OWORD *)buf = *(_OWORD *)(v3 + 207);
                *(_OWORD *)&buf[16] = *(_OWORD *)v210;
                *(_OWORD *)&buf[32] = *v211;
                FireTime = (uint64_t)WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)v3, (const WebCore::SeekTarget *)buf, 0);
              }
              if (*((double *)v3 + 209) != 1.0)
                FireTime = (*(uint64_t (**)(_QWORD *))(*v3 + 1416))(v3);
              if (!*((_BYTE *)v3 + 1680))
                FireTime = (*(uint64_t (**)(_QWORD *))(*v3 + 2576))(v3);
              *((_BYTE *)v3 + 1656) = 0;
              *((_BYTE *)v3 + 1688) = 0;
              v101 = *((_DWORD *)v3 + 226);
            }
            if (v101 != 4)
            {
              if (v101 != 3)
                goto LABEL_456;
              v212 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
              if (!v212 || (v213 = *(_QWORD *)(v212 + 96)) == 0)
                v213 = WebCore::threadGlobalDataSlow((WebCore *)FireTime);
              v214 = *(_QWORD *)(v213 + 40);
              if (!v214)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v213);
                v214 = *(_QWORD *)(v213 + 40);
              }
              v215 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v215);
              *(_DWORD *)(v215 + 16) = 1;
              *(_QWORD *)v215 = off_1E33A4B48;
              *(_QWORD *)(v215 + 8) = 0;
              *(_DWORD *)(v215 + 20) = *(_DWORD *)(v215 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v214 + 352) != 0);
              v217 = *(_DWORD **)(v214 + 352);
              if (v217)
                *v217 += 2;
              *(_QWORD *)(v215 + 24) = v217;
              *(_QWORD *)(v215 + 32) = 0;
              *(_QWORD *)(v215 + 40) = 0;
              *(_QWORD *)(v215 + 48) = 0;
              *(_QWORD *)(v215 + 56) = v216;
              *(_QWORD *)(v215 + 64) = 0;
              *(_QWORD *)buf = v215;
              WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
              v218 = *(_DWORD **)buf;
              *(_QWORD *)buf = 0;
              if (v218)
              {
                if (v218[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v218 + 8))(v218);
                else
                  --v218[4];
              }
              if (((*(uint64_t (**)(_QWORD *))(*v3 + 1384))(v3) & 1) != 0)
                goto LABEL_456;
LABEL_455:
              WebCore::HTMLMediaElement::scheduleNotifyAboutPlaying((WebCore::HTMLMediaElement *)v3);
              goto LABEL_456;
            }
            v219 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v219 || (v220 = *(_QWORD *)(v219 + 96)) == 0)
              v220 = WebCore::threadGlobalDataSlow((WebCore *)FireTime);
            v221 = *(_QWORD *)(v220 + 40);
            if (!v221)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v220);
              v221 = *(_QWORD *)(v220 + 40);
            }
            v222 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v222);
            *(_DWORD *)(v222 + 16) = 1;
            *(_QWORD *)v222 = off_1E33A4B48;
            *(_QWORD *)(v222 + 8) = 0;
            *(_DWORD *)(v222 + 20) = *(_DWORD *)(v222 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v221 + 352) != 0);
            v224 = *(_DWORD **)(v221 + 352);
            if (v224)
              *v224 += 2;
            *(_QWORD *)(v222 + 24) = v224;
            *(_QWORD *)(v222 + 32) = 0;
            *(_QWORD *)(v222 + 40) = 0;
            *(_QWORD *)(v222 + 48) = 0;
            *(_QWORD *)(v222 + 56) = v223;
            *(_QWORD *)(v222 + 64) = 0;
            *(_QWORD *)buf = v222;
            WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)(v3 + 103), (uint64_t *)buf);
            v225 = *(_DWORD **)buf;
            *(_QWORD *)buf = 0;
            if (v225)
            {
              if (v225[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v225 + 8))(v225);
              else
                --v225[4];
            }
            FireTime = (*(uint64_t (**)(_QWORD *))(*v3 + 1384))(v3);
            if ((FireTime & 1) == 0)
              FireTime = (uint64_t)WebCore::HTMLMediaElement::scheduleNotifyAboutPlaying((WebCore::HTMLMediaElement *)v3);
            goto LABEL_381;
          }
        }
        else
        {
          v150 = *v32 | ((unint64_t)*((unsigned __int16 *)v32 + 2) << 32);
        }
        v152 = 512;
        goto LABEL_258;
      }
      v105 = *(uint64_t (**)(void))(**(_QWORD **)(v108 + 72) + 336);
    }
    v106 = (WTF::StringImpl *)v105();
    goto LABEL_200;
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerReadyStateChanged(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::mediaPlayerReadyStateChanged((WebCore::HTMLMediaElement *)((char *)this - 176));
}

void WebCore::HTMLMediaElement::canTransitionFromAutoplayToPlay(WebCore::HTMLMediaElement *this@<X0>, void *a2@<X1>, int *a3@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::MediaElementSession *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  WTF::StringImpl *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::Logger *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  _QWORD v65[4];
  WTF::Logger *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  __int128 buf;
  const char *v71;
  WTF::StringImpl *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 226) != 4)
  {
    v7 = *((_QWORD *)this + 228);
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v8;
    if (*(_BYTE *)(v7 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "m_readyState != HAVE_ENOUGH_DATA");
    goto LABEL_7;
  }
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x40) == 0)
  {
    v5 = *((_QWORD *)this + 228);
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "!isAutoplaying");
LABEL_7:
    *a3 = 2;
    *((_BYTE *)a3 + 4) = 1;
    return;
  }
  v9 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  if (!v9)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v9 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  }
  if ((WebCore::MediaElementSession::autoplayPermitted(v9, a2) & 1) == 0)
  {
    v14 = *((_QWORD *)this + 228);
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v15;
    if (*(_BYTE *)(v14 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "!mediaSession().autoplayPermitted");
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) == 0)
  {
    v16 = *((_QWORD *)this + 228);
    v17 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v17;
    if (*(_BYTE *)(v16 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [8]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "!paused");
    goto LABEL_7;
  }
  v10 = *((_QWORD *)this + 13);
  if (!v10)
  {
LABEL_33:
    v22 = *((_QWORD *)this + 228);
    v23 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v23;
    if (*(_BYTE *)(v22 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "!autoplay");
    goto LABEL_7;
  }
  v11 = *(_DWORD *)(v10 + 4);
  if ((v11 & 1) != 0)
  {
    v12 = *(uint64_t **)(v10 + 40);
    LODWORD(v13) = *(_DWORD *)(v10 + 52);
    if (!(_DWORD)v13)
      goto LABEL_33;
  }
  else
  {
    v12 = (uint64_t *)(v10 + 32);
    LODWORD(v13) = v11 >> 5;
    if (!(_DWORD)v13)
      goto LABEL_33;
  }
  v13 = v13;
  while (1)
  {
    v18 = *v12;
    if (*v12 == WebCore::HTMLNames::autoplayAttr
      || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
      && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
    {
      break;
    }
    v12 += 2;
    if (!--v13)
      goto LABEL_33;
  }
  v19 = *((_QWORD *)this + 200);
  if (!v19)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v19 = *((_QWORD *)this + 200);
  }
  if (*(_BYTE *)(v19 + 48) == 4)
  {
    v20 = *((_QWORD *)this + 228);
    v21 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v21;
    if (*(_BYTE *)(v20 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "pausedForUserInteraction");
    goto LABEL_7;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 268) & 0x80) != 0)
  {
    v42 = *((_QWORD *)this + 228);
    v43 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v43;
    if (*(_BYTE *)(v42 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12]>((WTF::Logger::LogSiteIdentifier *)&buf, "isSandboxed");
    goto LABEL_7;
  }
  WebCore::MediaElementSession::playbackStateChangePermitted(v19, 0, (uint64_t)a3);
  v24 = *((_QWORD *)this + 228);
  if (!*((_BYTE *)a3 + 4))
  {
    v44 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v71 = "canTransitionFromAutoplayToPlay";
    v72 = v44;
    if (*(_BYTE *)(v24 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "can transition!");
    return;
  }
  v25 = *((_QWORD *)this + 229);
  v65[0] = "HTMLMediaElement";
  v65[1] = 17;
  v65[2] = "canTransitionFromAutoplayToPlay";
  v65[3] = v25;
  if (!*(_BYTE *)(v24 + 12))
    return;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v65);
  v27 = *a3;
  {
    WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl;
    unk_1EE2F5A10 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl;
    qword_1EE2F5A18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl;
    unk_1EE2F5A20 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl;
  }
  v28 = WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[v27];
  if (v28)
    *(_DWORD *)v28 += 2;
  if (v68)
  {
    v29 = *((_DWORD *)v68 + 1);
    if (v28)
    {
LABEL_44:
      v30 = *(_DWORD *)(v28 + 4);
      goto LABEL_45;
    }
  }
  else
  {
    v29 = 0;
    if (v28)
      goto LABEL_44;
  }
  v30 = 0;
LABEL_45:
  if ((v30 | v29) < 0)
    goto LABEL_127;
  v31 = (v29 + v30);
  if (__OFADD__(v29, v30))
    goto LABEL_127;
  if (v68)
  {
    v32 = *((_DWORD *)v68 + 4);
    v33 = (v32 >> 2) & 1;
    if (!v28 || (v32 & 4) == 0)
    {
LABEL_51:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v31, v33, (uint64_t)v68, v28, &v69);
      if (v69)
      {
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v28, v26);
          else
            *(_DWORD *)v28 -= 2;
        }
        goto LABEL_55;
      }
LABEL_128:
      __break(0xC471u);
      return;
    }
LABEL_50:
    v33 = (*(unsigned __int8 *)(v28 + 16) >> 2) & 1;
    goto LABEL_51;
  }
  if (v28)
    goto LABEL_50;
  if (!(_DWORD)v31)
  {
    v64 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_125;
  }
  if ((v31 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v31 + 20)), (v64 = buf) == 0))
  {
LABEL_127:
    v69 = 0;
    goto LABEL_128;
  }
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v64 + 4) = v31;
  *(_QWORD *)(v64 + 8) = v64 + 20;
  *(_DWORD *)(v64 + 16) = 4;
LABEL_125:
  v69 = (WTF::StringImpl *)v64;
LABEL_55:
  v34 = v68;
  v68 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v26);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = qword_1ECE7C4A0;
  v36 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v36)
  {
    WTF::String::utf8();
    v38 = v66 ? (char *)v66 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v38;
    _os_log_impl(&dword_1940B8000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v36 = (uint64_t)v66;
    v66 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        v36 = WTF::fastFree((WTF *)v36, v37);
      else
        --*(_DWORD *)v36;
    }
  }
  if (WebCore::LogMedia)
  {
    v39 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v40 = *v39;
      if ((v40 & 1) != 0)
        break;
      v41 = __ldaxr(v39);
      if (v41 == v40)
      {
        if (!__stxr(v40 | 1, v39))
        {
          v45 = WTF::Logger::observers((WTF::Logger *)v36);
          v46 = *(unsigned int *)(v45 + 12);
          if ((_DWORD)v46)
          {
            v47 = *(uint64_t **)v45;
            v48 = *(_QWORD *)v45 + 8 * v46;
            do
            {
              v49 = *v47;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v65);
              v50 = *a3;
              LODWORD(v71) = 0;
              {
                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl;
                unk_1EE2F5A10 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F5A18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl;
                unk_1EE2F5A20 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl;
              }
              v51 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[v50];
              if (v51)
                *(_DWORD *)v51 += 2;
              v72 = v51;
              v66 = 0;
              v67 = 0;
              v52 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v67) = 2;
              v66 = v52;
              v53 = HIDWORD(v67);
              *((_DWORD *)v52 + 4 * HIDWORD(v67)) = buf;
              v54 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v52 + 2 * v53 + 1) = v54;
              *((_DWORD *)v52 + 4 * (v53 + 1)) = (_DWORD)v71;
              v55 = v72;
              if (v72)
                *(_DWORD *)v72 += 2;
              *((_QWORD *)v52 + 2 * (v53 + 1) + 1) = v55;
              HIDWORD(v67) = v53 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v49 + 16))(v49, &WebCore::LogMedia, 0, &v66);
              v56 = v66;
              if (HIDWORD(v67))
              {
                v57 = 16 * HIDWORD(v67);
                v58 = (WTF::StringImpl **)((char *)v66 + 8);
                do
                {
                  v59 = *v58;
                  *v58 = 0;
                  if (v59)
                  {
                    if (*(_DWORD *)v59 == 2)
                      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v37);
                    else
                      *(_DWORD *)v59 -= 2;
                  }
                  v58 += 2;
                  v57 -= 16;
                }
                while (v57);
                v56 = v66;
              }
              if (v56)
              {
                v66 = 0;
                LODWORD(v67) = 0;
                WTF::fastFree(v56, v37);
              }
              v60 = v72;
              v72 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v61 -= 2;
              }
              ++v47;
            }
            while (v47 != (uint64_t *)v48);
          }
          v62 = __ldxr(v39);
          if (v62 == 1)
          {
            if (!__stlxr(0, v39))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v63 = v69;
  v69 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v37);
    else
      *(_DWORD *)v63 -= 2;
  }
}

WebCore *WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(WebCore::HTMLMediaElement *this, void *a2)
{
  WebCore::Document *v3;
  WebCore::Quirks *v4;
  WebCore *result;
  uint64_t v6;
  WebCore *v7;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WebCore *v22[4];

  v3 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  v4 = (WebCore::Quirks *)*((_QWORD *)v3 + 86);
  if (!v4)
    v4 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v3);
  result = (WebCore *)WebCore::Quirks::needsAutoplayPlayPauseEvents(v4, a2);
  if ((_DWORD)result)
  {
    v6 = *((_QWORD *)this + 228);
    v7 = (WebCore *)*((_QWORD *)this + 229);
    v22[0] = (WebCore *)"HTMLMediaElement";
    v22[1] = (WebCore *)17;
    v22[2] = (WebCore *)"dispatchPlayPauseEventsIfNeedsQuirks";
    v22[3] = v7;
    if (*(_BYTE *)(v6 + 12))
      result = (WebCore *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v22);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = *(_QWORD *)(StatusReg + 736);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
      v10 = WebCore::threadGlobalDataSlow(result);
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v11 = *(_QWORD *)(v10 + 40);
    }
    v12 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
    *(_DWORD *)(v12 + 16) = 1;
    *(_QWORD *)v12 = off_1E33A4B48;
    *(_QWORD *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v11 + 1472) != 0);
    v14 = *(_DWORD **)(v11 + 1472);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(v12 + 24) = v14;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 56) = v13;
    *(_QWORD *)(v12 + 64) = 0;
    v22[0] = (WebCore *)v12;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)v22);
    v15 = v22[0];
    v22[0] = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 4) == 1)
        v15 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v15 + 8))(v15);
      else
        --*((_DWORD *)v15 + 4);
    }
    v16 = *(_QWORD *)(StatusReg + 736);
    if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
      v17 = WebCore::threadGlobalDataSlow(v15);
    v18 = *(_QWORD *)(v17 + 40);
    if (!v18)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
      v18 = *(_QWORD *)(v17 + 40);
    }
    v19 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v19);
    *(_DWORD *)(v19 + 16) = 1;
    *(_QWORD *)v19 = off_1E33A4B48;
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 20) = *(_DWORD *)(v19 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v18 + 1424) != 0);
    v21 = *(_DWORD **)(v18 + 1424);
    if (v21)
      *v21 += 2;
    *(_QWORD *)(v19 + 24) = v21;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = v20;
    *(_QWORD *)(v19 + 64) = 0;
    v22[0] = (WebCore *)v19;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)v22);
    result = v22[0];
    v22[0] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        return (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 4);
    }
  }
  return result;
}

_DWORD *WebCore::HTMLMediaElement::durationChanged(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *result;
  _DWORD *v17;

  v1 = this;
  v2 = *((_QWORD *)this + 169);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 24);
    v3 = *((_QWORD *)this + 144);
    if (v3)
    {
      v4 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 40);
    }
    else
    {
      v6 = *((_QWORD *)v1 + 142);
      if (!v6 || *((int *)v1 + 226) < 1)
      {
        v7 = WTF::MediaTime::invalidTime(0);
        this = *(WebCore::HTMLMediaElement **)v7;
        v5 = *(_QWORD *)(v7 + 8);
LABEL_9:
        *(_QWORD *)(v2 + 128) = this;
        *(_DWORD *)(v2 + 136) = v5;
        *(_BYTE *)(v2 + 140) = BYTE4(v5);
        if (*(_DWORD *)(v2 + 24) == 1)
          this = (WebCore::HTMLMediaElement *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
        else
          --*(_DWORD *)(v2 + 24);
        goto LABEL_11;
      }
      v4 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 72) + 336);
    }
    this = (WebCore::HTMLMediaElement *)v4();
    goto LABEL_9;
  }
LABEL_11:
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(this);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  v11 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
  *(_QWORD *)v11 = off_1E33A4B48;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8204;
  v14 = *(_QWORD *)(v10 + 712) != 0;
  *(_DWORD *)(v11 + 16) = 1;
  *(_DWORD *)(v11 + 20) = v13 | v14;
  v15 = *(_DWORD **)(v10 + 712);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(v11 + 24) = v15;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = v12;
  *(_QWORD *)(v11 + 64) = 0;
  v17 = (_DWORD *)v11;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v1 + 28, (uint64_t)v1, 9, (uint64_t)v1 + 824, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::MediaElementSession *WebCore::HTMLMediaElement::finishSeek(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::MonotonicTime *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::MediaElementSession *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::Logger *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  _QWORD *v57;
  unint64_t StatusReg;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  WebCore *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  WebCore::Quirks *v74;
  _BOOL8 CanPlayAfterSeekedQuirk;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  WebCore::HTMLMediaElement *v84;
  int v85;
  uint64_t v86;
  _QWORD v87[2];
  _QWORD v88[4];
  WTF::Logger *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  __int128 buf;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  uint64_t v108;

  v1 = this;
  v108 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int *)((char *)this + 1265);
  v85 = *(_DWORD *)((char *)this + 1265);
  v3 = *((_QWORD *)this + 142);
  if (v3)
  {
    v4 = WTF::MediaTime::invalidTime(this);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 72) + 384))(*(_QWORD *)(v3 + 72), v4);
  }
  v5 = WebCore::HTMLMediaElement::setSeeking((unsigned __int8 *)v1, 0);
  v6 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
  *((_DWORD *)v1 + 244) = 0;
  v6 &= 0xFFFFFFFFFFFF3FFFLL;
  *v2 = v6;
  *((_WORD *)v2 + 2) = WORD2(v6);
  v7 = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v5);
  v8 = *(_QWORD *)((char *)v7 + 5);
  *((_QWORD *)v1 + 148) = *v7;
  *(_QWORD *)((char *)v1 + 1189) = v8;
  v9 = *((_QWORD *)v1 + 142);
  if (v9 && (*(double (**)(_QWORD))(**(_QWORD **)(v9 + 72) + 848))(*(_QWORD *)(v9 + 72)) != 0.0)
  {
    WTF::MonotonicTime::now(v10);
    *((double *)v1 + 151) = v11 + 0.5;
  }
  v12 = *((_QWORD *)v1 + 228);
  v13 = *((_QWORD *)v1 + 229);
  v88[0] = "HTMLMediaElement";
  v88[1] = 17;
  v88[2] = "finishSeek";
  v88[3] = v13;
  v14 = (WTF::StringImpl *)WebCore::HTMLMediaElement::currentMediaTime(v1);
  v87[0] = v14;
  v87[1] = v15;
  v16 = *((_QWORD *)v1 + 121);
  if (*(_BYTE *)(v12 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v88);
    WTF::String::String((WTF::String *)&v93, "current time = ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)v87);
    WTF::String::String((WTF::String *)&v91, ", pending seek = ");
    if (v16)
      v17 = 5;
    else
      v17 = 6;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = (WTF::StringImpl *)buf;
    v89 = v93;
    v98 = v92;
    *(_QWORD *)&buf = v94;
    v96 = v18;
    v97 = v91;
    result = (WebCore::MediaElementSession *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v89, (uint64_t *)&v98, (uint64_t *)&v97, (uint64_t *)&v96, &v95);
    if (!v95)
    {
      __break(0xC471u);
      return result;
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v20);
      else
        *(_DWORD *)v18 -= 2;
    }
    v21 = v91;
    v91 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v92;
    v92 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v93;
    v93 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v20);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v94;
    v94 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = qword_1ECE7C4A0;
    v26 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      WTF::String::utf8();
      v28 = v89 ? (char *)v89 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v28;
      _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v26 = (uint64_t)v89;
      v89 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          v26 = WTF::fastFree((WTF *)v26, v27);
        else
          --*(_DWORD *)v26;
      }
    }
    if (WebCore::LogMedia)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v84 = v1;
            v32 = WTF::Logger::observers((WTF::Logger *)v26);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v86 = *(_QWORD *)v32 + 8 * v33;
              v35 = v17 - 1;
              do
              {
                v36 = *v34;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v88);
                v100 = 0;
                WTF::String::String((WTF::String *)&v101, "current time = ");
                v102 = 1;
                WTF::MediaTime::toJSONString((WTF::MediaTime *)v87);
                v104 = 0;
                WTF::String::String((WTF::String *)&v105, ", pending seek = ");
                v106 = 0;
                if (v35)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v37 = v89;
                }
                else
                {
                  v55 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                  *MEMORY[0x1E0CBEF70] += 2;
                  v37 = v55;
                }
                v107 = v37;
                v89 = 0;
                v90 = 0;
                v38 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v90) = 5;
                v89 = v38;
                v39 = HIDWORD(v90);
                *((_DWORD *)v38 + 4 * HIDWORD(v90)) = buf;
                v40 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v38 + 2 * v39 + 1) = v40;
                *((_DWORD *)v38 + 4 * (v39 + 1)) = v100;
                v41 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v38 + 2 * (v39 + 1) + 1) = v41;
                *((_DWORD *)v38 + 4 * (v39 + 2)) = v102;
                v42 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v38 + 2 * (v39 + 2) + 1) = v42;
                *((_DWORD *)v38 + 4 * (v39 + 3)) = v104;
                v43 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v38 + 2 * (v39 + 3) + 1) = v43;
                *((_DWORD *)v38 + 4 * (v39 + 4)) = v106;
                v44 = v107;
                if (v107)
                  *(_DWORD *)v107 += 2;
                *((_QWORD *)v38 + 2 * (v39 + 4) + 1) = v44;
                HIDWORD(v90) = v39 + 5;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v36 + 16))(v36, &WebCore::LogMedia, 0, &v89);
                v45 = v89;
                if (HIDWORD(v90))
                {
                  v46 = v17;
                  v47 = 16 * HIDWORD(v90);
                  v48 = (WTF::StringImpl **)((char *)v89 + 8);
                  do
                  {
                    v49 = *v48;
                    *v48 = 0;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v27);
                      else
                        *(_DWORD *)v49 -= 2;
                    }
                    v48 += 2;
                    v47 -= 16;
                  }
                  while (v47);
                  v45 = v89;
                  v17 = v46;
                }
                if (v45)
                {
                  v89 = 0;
                  LODWORD(v90) = 0;
                  WTF::fastFree(v45, v27);
                }
                v50 = v107;
                v107 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v27);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v105;
                v105 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v27);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v103;
                v103 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v27);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v101;
                v101 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v27);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v27);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v86);
            }
            v56 = __ldxr(v29);
            if (v56 == 1)
            {
              v1 = v84;
              if (!__stlxr(0, v29))
                break;
            }
            else
            {
              __clrex();
              v1 = v84;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v14 = v95;
    v95 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        v14 = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)v14 -= 2;
    }
    v16 = *((_QWORD *)v1 + 121);
  }
  if (!v16)
  {
    v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v57 = off_1E33C5B20;
    v57[1] = v1;
    *(_QWORD *)&buf = v57;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)v1, 9, (uint64_t)v1 + 656, (uint64_t (***)())&buf);
    v14 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    if (v14)
      v14 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v59 = *(_QWORD *)(StatusReg + 736);
  if (!v59 || (v60 = *(_QWORD *)(v59 + 96)) == 0)
    v60 = WebCore::threadGlobalDataSlow(v14);
  v61 = *(_QWORD *)(v60 + 40);
  if (!v61)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v60);
    v61 = *(_QWORD *)(v60 + 40);
  }
  v62 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v62);
  *(_DWORD *)(v62 + 16) = 1;
  *(_QWORD *)v62 = off_1E33A4B48;
  *(_QWORD *)(v62 + 8) = 0;
  *(_DWORD *)(v62 + 20) = *(_DWORD *)(v62 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v61 + 2048) != 0);
  v64 = *(_DWORD **)(v61 + 2048);
  if (v64)
    *v64 += 2;
  *(_QWORD *)(v62 + 24) = v64;
  *(_QWORD *)(v62 + 32) = 0;
  *(_QWORD *)(v62 + 40) = 0;
  *(_QWORD *)(v62 + 48) = 0;
  *(_QWORD *)(v62 + 56) = v63;
  *(_QWORD *)(v62 + 64) = 0;
  *(_QWORD *)&buf = v62;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v1 + 28, (uint64_t)v1, 9, (uint64_t)v1 + 824, (uint64_t *)&buf);
  v65 = (WebCore *)buf;
  *(_QWORD *)&buf = 0;
  if (v65)
  {
    if (*((_DWORD *)v65 + 4) == 1)
      v65 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v65 + 8))(v65);
    else
      --*((_DWORD *)v65 + 4);
  }
  v66 = *(_QWORD *)(StatusReg + 736);
  if (!v66 || (v67 = *(_QWORD *)(v66 + 96)) == 0)
    v67 = WebCore::threadGlobalDataSlow(v65);
  v68 = *(_QWORD *)(v67 + 40);
  if (!v68)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v67);
    v68 = *(_QWORD *)(v67 + 40);
  }
  v69 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v69);
  *(_DWORD *)(v69 + 16) = 1;
  *(_QWORD *)v69 = off_1E33A4B48;
  *(_QWORD *)(v69 + 8) = 0;
  *(_DWORD *)(v69 + 20) = *(_DWORD *)(v69 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v68 + 1760) != 0);
  v71 = *(_DWORD **)(v68 + 1760);
  if (v71)
    *v71 += 2;
  *(_QWORD *)(v69 + 24) = v71;
  *(_QWORD *)(v69 + 32) = 0;
  *(_QWORD *)(v69 + 40) = 0;
  *(_QWORD *)(v69 + 48) = 0;
  *(_QWORD *)(v69 + 56) = v70;
  *(_QWORD *)(v69 + 64) = 0;
  *(_QWORD *)&buf = v69;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v1 + 28, (uint64_t)v1, 9, (uint64_t)v1 + 824, (uint64_t *)&buf);
  v73 = (_DWORD *)buf;
  *(_QWORD *)&buf = 0;
  if (v73)
  {
    if (v73[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 8))(v73);
    else
      --v73[4];
  }
  v74 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)v1 + 5) + 8) + 688);
  if (!v74)
    v74 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)v1 + 5) + 8));
  CanPlayAfterSeekedQuirk = WebCore::Quirks::needsCanPlayAfterSeekedQuirk(v74, v72);
  if (CanPlayAfterSeekedQuirk && *((int *)v1 + 226) >= 3)
  {
    v76 = *(_QWORD *)(StatusReg + 736);
    if (!v76 || (v77 = *(_QWORD *)(v76 + 96)) == 0)
      v77 = WebCore::threadGlobalDataSlow((WebCore *)CanPlayAfterSeekedQuirk);
    v78 = *(_QWORD *)(v77 + 40);
    if (!v78)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v77);
      v78 = *(_QWORD *)(v77 + 40);
    }
    v79 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v79);
    *(_DWORD *)(v79 + 16) = 1;
    *(_QWORD *)v79 = off_1E33A4B48;
    *(_QWORD *)(v79 + 8) = 0;
    *(_DWORD *)(v79 + 20) = *(_DWORD *)(v79 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v78 + 352) != 0);
    v81 = *(_DWORD **)(v78 + 352);
    if (v81)
      *v81 += 2;
    *(_QWORD *)(v79 + 24) = v81;
    *(_QWORD *)(v79 + 32) = 0;
    *(_QWORD *)(v79 + 40) = 0;
    *(_QWORD *)(v79 + 48) = 0;
    *(_QWORD *)(v79 + 56) = v80;
    *(_QWORD *)(v79 + 64) = 0;
    *(_QWORD *)&buf = v79;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v1 + 28, (uint64_t)v1, 9, (uint64_t)v1 + 824, (uint64_t *)&buf);
    v82 = (_DWORD *)buf;
    *(_QWORD *)&buf = 0;
    if (v82)
    {
      if (v82[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
      else
        --v82[4];
    }
  }
  result = (WebCore::MediaElementSession *)*((_QWORD *)v1 + 200);
  if (result)
    result = (WebCore::MediaElementSession *)WebCore::MediaElementSession::clientCharacteristicsChanged(result, 1);
  v83 = (_DWORD *)*((_QWORD *)v1 + 144);
  if (!v83)
  {
LABEL_138:
    if ((v85 & 0x8000) == 0)
      return result;
    return (WebCore::MediaElementSession *)WebCore::HTMLMediaElement::playInternal((uint64_t)v1);
  }
  ++v83[2];
  result = (WebCore::MediaElementSession *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v83 + 24))(v83);
  if (v83[2] != 1)
  {
    --v83[2];
    goto LABEL_138;
  }
  result = (WebCore::MediaElementSession *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v83 + 8))(v83);
  if ((v85 & 0x8000) != 0)
    return (WebCore::MediaElementSession *)WebCore::HTMLMediaElement::playInternal((uint64_t)v1);
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent(uint64_t (**result)(), int a2))()
{
  uint64_t v3;
  int v4;
  uint64_t (*v5)();
  uint64_t v6;
  _BYTE *v7;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::AtomString *v14;
  WebCore::WebKitPlaybackTargetAvailabilityEvent *v15;
  const char *v16;
  unsigned __int8 v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t (**v21)();

  v3 = (uint64_t)result;
  if (*((_BYTE *)result + 1696) || (v5 = result[200]) == 0)
  {
    v4 = 0;
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 4) + 248))(*((_QWORD *)v5 + 4));
    result = (uint64_t (**)())(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 4) + 256))(*((_QWORD *)v5 + 4));
    v18 = "MediaElementSession";
    v19 = 20;
    v20 = "hasWirelessPlaybackTargets";
    v21 = result;
    v7 = (char *)v5 + 249;
    if (*(_BYTE *)(v6 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        result = (uint64_t (**)())WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v18, "returning ");
    }
    v4 = *v7 != 0;
  }
  v17 = v4;
  if (a2 != 1 || *(unsigned __int8 *)(v3 + 1650) != v4)
  {
    v9 = *(_QWORD *)(v3 + 1824);
    v10 = *(uint64_t (***)())(v3 + 1832);
    v18 = "HTMLMediaElement";
    v19 = 17;
    v20 = "enqueuePlaybackTargetAvailabilityChangedEvent";
    v21 = v10;
    if (*(_BYTE *)(v9 + 12))
    {
      result = (uint64_t (**)())WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v18, "hasTargets = ");
      LOBYTE(v4) = v17;
    }
    *(_BYTE *)(v3 + 1650) = v4;
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
      v12 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v13 = *(_QWORD *)(v12 + 40);
    if (!v13)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
      v13 = *(_QWORD *)(v12 + 40);
    }
    v14 = (const WTF::AtomString *)(v13 + 2464);
    v15 = (WebCore::WebKitPlaybackTargetAvailabilityEvent *)bmalloc::api::isoAllocate();
    v18 = (const char *)WebCore::WebKitPlaybackTargetAvailabilityEvent::WebKitPlaybackTargetAvailabilityEvent(v15, v14, v17);
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v3 + 112), v3, 9, v3 + 824, (uint64_t *)&v18);
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 4) == 1)
        (*(void (**)(const char *))(*(_QWORD *)v16 + 8))(v16);
      else
        --*((_DWORD *)v16 + 4);
    }
    return WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())v3);
  }
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::scheduleUpdateMediaState(uint64_t (**this)()))()
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t (*v4)();
  BOOL v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t (**v9)();
  __int128 v10;
  __int128 v11;

  v1 = (uint64_t)this;
  v2 = *(unsigned int **)this[85];
  if (!v2 || (v3 = atomic_load(v2), v3 == 1))
  {
    v4 = this[229];
    *(_QWORD *)&v10 = "HTMLMediaElement";
    *((_QWORD *)&v10 + 1) = 17;
    *(_QWORD *)&v11 = "scheduleUpdateMediaState";
    *((_QWORD *)&v11 + 1) = v4;
    if (*((_BYTE *)this[228] + 12))
    {
      if (WebCore::LogMedia)
        v5 = byte_1ECE7C490 >= 3u;
      else
        v5 = 0;
      if (v5)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v10, "task scheduled");
    }
    v7 = v10;
    v8 = v11;
    v6 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v6 = off_1E33C5E18;
    *(_QWORD *)(v6 + 8) = v1;
    *(_OWORD *)(v6 + 16) = v7;
    *(_OWORD *)(v6 + 32) = v8;
    v9 = (uint64_t (**)())v6;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 672, &v9);
    this = v9;
    v9 = 0;
    if (this)
      return (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
  }
  return this;
}

void WebCore::HTMLMediaElement::updatePlayState(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  WebCore::HTMLMediaElement **v7;
  uint64_t v8;
  int v9;
  WebCore::HTMLMediaElement *v10;
  uint64_t v11;
  WebCore::HTMLMediaElement *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  WTF::MonotonicTime *v21;
  double v22;
  double v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t FireTime;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  NSObject *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::Logger *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::Logger *v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  WebCore::MediaElementSession *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  double v74;
  int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  WebCore::MediaElementSession *v81;
  __n128 v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v86;
  uint64_t v87;
  int v88;
  char v89;
  WTF::MediaTime *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::MonotonicTime *v94;
  double v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char v105;
  int v106;
  WTF *v107;
  void *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  int v116;
  char v117;
  WTF::MediaTime *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::MonotonicTime *v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  __int16 v130;
  __int16 v131;
  WTF *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  double v140;
  uint64_t v141;
  WebCore *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  unsigned __int8 *v151;
  int v153;
  WebCore::AudioSessionIOS *v154;
  WebCore::AudioSession *v155;
  WebCore::AudioSessionIOS *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  WTF::MonotonicTime *v159;
  uint64_t v160;
  double v161;
  WTF::MonotonicTime *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  WebCore::MediaController *v167;
  int v168;
  char *v169;
  unsigned int v170;
  unint64_t v171;
  int v172;
  unint64_t v173;
  int v174;
  int v175;
  unsigned int v176;
  WebCore::PlatformMediaSession *v177;
  bmalloc::api *v178;
  void *v179;
  __int16 v180;
  __int16 v181;
  WTF *v182;
  void *v183;
  _BOOL4 v184;
  int v185;
  WTF::StringImpl *v186[4];
  WTF::Logger *v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  __int128 buf;
  const char *v197;
  WTF::StringImpl *v198;
  int v199;
  WTF::StringImpl *v200;
  int v201;
  WTF::StringImpl *v202;
  int v203;
  WTF::StringImpl *v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 142);
  if (!v1)
    return;
  v3 = (char *)this + 1192;
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x40000) == 0)
  {
    v4 = *((_QWORD *)this + 177);
    if (!v4)
      goto LABEL_310;
    if (!*(_BYTE *)(v4 + 72))
    {
      v5 = *(unsigned int *)(v4 + 68);
      v6 = 0.0;
      if ((_DWORD)v5)
      {
        v7 = *(WebCore::HTMLMediaElement ***)(v4 + 56);
        v8 = 8 * v5;
        v9 = 1;
        while (1)
        {
          v10 = *v7;
          if (*((int *)*v7 + 226) < 3)
            goto LABEL_35;
          v11 = *((_QWORD *)v10 + 200);
          if (!v11)
          {
            WebCore::HTMLMediaElement::initializeMediaSession(*v7);
            v11 = *((_QWORD *)v10 + 200);
          }
          if (*(_BYTE *)(v11 + 48) == 4)
            goto LABEL_35;
          v12 = *v7;
          if ((*(_DWORD *)((_BYTE *)*v7 + 1265) & 0x40) != 0)
          {
            if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12) & 1) != 0)
              goto LABEL_35;
            v12 = *v7;
          }
          v9 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12);
          ++v7;
          v8 -= 8;
          if (!v8)
          {
            if ((v9 & 1) != 0)
              goto LABEL_35;
            v13 = *((_QWORD *)this + 177);
            v14 = *(unsigned int *)(v13 + 68);
            if ((_DWORD)v14)
            {
              v6 = *(double *)(v13 + 96);
              if (v6 == -1.0)
              {
                v15 = *(uint64_t **)(v13 + 56);
                v16 = 8 * v14;
                v17 = 0.0;
                do
                {
                  v18 = *v15++;
                  v19 = (*(double (**)(uint64_t))(*(_QWORD *)v18 + 1376))(v18);
                  if (v17 >= v19)
                    v20 = v17;
                  else
                    v20 = v19;
                  v17 = v20;
                  v16 -= 8;
                }
                while (v16);
                v22 = (*(double (**)(_QWORD))(**(_QWORD **)(v13 + 256) + 24))(*(_QWORD *)(v13 + 256));
                if (v22 >= v17)
                  v22 = v17;
                *(double *)(v13 + 96) = fmax(v22, 0.0);
                *(_QWORD *)(v13 + 216) = 0;
                WTF::MonotonicTime::now(v21);
                WebCore::TimerBase::setNextFireTime(v13 + 192, v23 + 0.0);
                v6 = *(double *)(v13 + 96);
              }
              if (v6 < 0.0)
                goto LABEL_35;
            }
            break;
          }
        }
      }
      if (v6 <= (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1376))(this))
      {
LABEL_310:
        if (WebCore::HTMLMediaElement::couldPlayIfEnoughData(this))
        {
          v24 = *((int *)this + 226) > 2 || *((_DWORD *)this + 227) > 2;
LABEL_36:
          FireTime = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 480))(*(_QWORD *)(*((_QWORD *)this + 142) + 72));
          v29 = FireTime;
          v30 = *((_QWORD *)this + 228);
          v31 = (WTF::StringImpl *)*((_QWORD *)this + 229);
          v186[0] = (WTF::StringImpl *)"HTMLMediaElement";
          v186[1] = (WTF::StringImpl *)17;
          v186[2] = (WTF::StringImpl *)"updatePlayState";
          v186[3] = v31;
          if (!*(_BYTE *)(v30 + 12))
            goto LABEL_119;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v186);
          WTF::String::String((WTF::String *)&v190, "shouldBePlaying = ");
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v32 = (WTF::StringImpl *)buf;
          WTF::String::String((WTF::String *)&v189, ", playerPaused = ");
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v33 = (WTF::StringImpl *)buf;
          v195 = v32;
          *(_QWORD *)&buf = v191;
          v187 = v190;
          v193 = v33;
          v194 = v189;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v187, (uint64_t *)&v195, (uint64_t *)&v194, (uint64_t *)&v193, &v192);
          if (!v192)
          {
            __break(0xC471u);
            return;
          }
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v34);
            else
              *(_DWORD *)v33 -= 2;
          }
          v35 = v189;
          v189 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::destroy(v35, v34);
              if (v32)
              {
LABEL_45:
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, v34);
                else
                  *(_DWORD *)v32 -= 2;
              }
LABEL_47:
              v36 = v190;
              v190 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v34);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = v191;
              v191 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, v34);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = qword_1ECE7C4A0;
              v39 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v39)
              {
                WTF::String::utf8();
                v41 = v187 ? (char *)v187 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v41;
                _os_log_impl(&dword_1940B8000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v39 = (uint64_t)v187;
                v187 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 1)
                    v39 = WTF::fastFree((WTF *)v39, v40);
                  else
                    --*(_DWORD *)v39;
                }
              }
              if (WebCore::LogMedia)
              {
                v42 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v43 = *v42;
                  if ((v43 & 1) != 0)
                    break;
                  v44 = __ldaxr(v42);
                  if (v44 == v43)
                  {
                    if (!__stxr(v43 | 1, v42))
                    {
                      v184 = v24;
                      v185 = v29;
                      v45 = WTF::Logger::observers((WTF::Logger *)v39);
                      v46 = *(unsigned int *)(v45 + 12);
                      if ((_DWORD)v46)
                      {
                        v47 = *(uint64_t **)v45;
                        v48 = *(_QWORD *)v45 + 8 * v46;
                        do
                        {
                          v49 = *v47;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v186);
                          LODWORD(v197) = 0;
                          WTF::String::String((WTF::String *)&v198, "shouldBePlaying = ");
                          v199 = 0;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v200 = v187;
                          v201 = 0;
                          WTF::String::String((WTF::String *)&v202, ", playerPaused = ");
                          v203 = 0;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v204 = v187;
                          v187 = 0;
                          v188 = 0;
                          v50 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                          LODWORD(v188) = 5;
                          v187 = v50;
                          v51 = HIDWORD(v188);
                          *((_DWORD *)v50 + 4 * HIDWORD(v188)) = buf;
                          v52 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v50 + 2 * v51 + 1) = v52;
                          *((_DWORD *)v50 + 4 * (v51 + 1)) = (_DWORD)v197;
                          v53 = v198;
                          if (v198)
                            *(_DWORD *)v198 += 2;
                          *((_QWORD *)v50 + 2 * (v51 + 1) + 1) = v53;
                          *((_DWORD *)v50 + 4 * (v51 + 2)) = v199;
                          v54 = v200;
                          if (v200)
                            *(_DWORD *)v200 += 2;
                          *((_QWORD *)v50 + 2 * (v51 + 2) + 1) = v54;
                          *((_DWORD *)v50 + 4 * (v51 + 3)) = v201;
                          v55 = v202;
                          if (v202)
                            *(_DWORD *)v202 += 2;
                          *((_QWORD *)v50 + 2 * (v51 + 3) + 1) = v55;
                          *((_DWORD *)v50 + 4 * (v51 + 4)) = v203;
                          v56 = v204;
                          if (v204)
                            *(_DWORD *)v204 += 2;
                          *((_QWORD *)v50 + 2 * (v51 + 4) + 1) = v56;
                          HIDWORD(v188) = v51 + 5;
                          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v49 + 16))(v49, &WebCore::LogMedia, 0, &v187);
                          v57 = v187;
                          if (HIDWORD(v188))
                          {
                            v58 = 16 * HIDWORD(v188);
                            v59 = (WTF::StringImpl **)((char *)v187 + 8);
                            do
                            {
                              v60 = *v59;
                              *v59 = 0;
                              if (v60)
                              {
                                if (*(_DWORD *)v60 == 2)
                                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v40);
                                else
                                  *(_DWORD *)v60 -= 2;
                              }
                              v59 += 2;
                              v58 -= 16;
                            }
                            while (v58);
                            v57 = v187;
                          }
                          if (v57)
                          {
                            v187 = 0;
                            LODWORD(v188) = 0;
                            WTF::fastFree(v57, v40);
                          }
                          v61 = v204;
                          v204 = 0;
                          if (v61)
                          {
                            if (*(_DWORD *)v61 == 2)
                              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v40);
                            else
                              *(_DWORD *)v61 -= 2;
                          }
                          v62 = v202;
                          v202 = 0;
                          if (v62)
                          {
                            if (*(_DWORD *)v62 == 2)
                              WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v40);
                            else
                              *(_DWORD *)v62 -= 2;
                          }
                          v63 = v200;
                          v200 = 0;
                          if (v63)
                          {
                            if (*(_DWORD *)v63 == 2)
                              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v40);
                            else
                              *(_DWORD *)v63 -= 2;
                          }
                          v64 = v198;
                          v198 = 0;
                          if (v64)
                          {
                            if (*(_DWORD *)v64 == 2)
                              WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v40);
                            else
                              *(_DWORD *)v64 -= 2;
                          }
                          v65 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v65)
                          {
                            if (*(_DWORD *)v65 == 2)
                              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v40);
                            else
                              *(_DWORD *)v65 -= 2;
                          }
                          ++v47;
                        }
                        while (v47 != (uint64_t *)v48);
                      }
                      v66 = __ldxr(v42);
                      if (v66 == 1)
                      {
                        v24 = v184;
                        v29 = v185;
                        if (!__stlxr(0, v42))
                          break;
                      }
                      else
                      {
                        __clrex();
                        v24 = v184;
                        v29 = v185;
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              FireTime = (uint64_t)v192;
              v192 = 0;
              if (FireTime)
              {
                if (*(_DWORD *)FireTime == 2)
                  FireTime = WTF::StringImpl::destroy((WTF::StringImpl *)FireTime, (WTF::StringImpl *)v40);
                else
                  *(_DWORD *)FireTime -= 2;
              }
LABEL_119:
              if ((v24 & v29) == 1)
              {
                v67 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
                if (!v67)
                {
                  WebCore::HTMLMediaElement::initializeMediaSession(this);
                  v67 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
                }
                FireTime = WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(v67);
                if ((_DWORD)FireTime)
                {
                  v68 = *(unsigned int *)(v3 + 73) | ((unint64_t)*(unsigned __int16 *)(v3 + 77) << 32);
                  if ((v68 & 0x100000000) == 0)
                  {
                    FireTime = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1800))(this);
                    if ((FireTime & 1) != 0)
                      goto LABEL_128;
                    v68 = *(unsigned int *)(v3 + 73) | ((unint64_t)*(unsigned __int16 *)(v3 + 77) << 32);
                  }
                  if ((v68 & 0x100000000) == 0)
                    FireTime = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1808))(this);
                }
              }
LABEL_128:
              v69 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
              if (v69)
              {
                v70 = *(_QWORD *)(v69 + 8);
                if (v70)
                {
                  v71 = *(_QWORD *)(v70 + 24);
                  if (v71)
                  {
                    v72 = *(_QWORD *)(v71 + 8);
                    if (v72)
                    {
                      v73 = *(_DWORD *)v72 + 1;
                      *(_DWORD *)v72 = v73;
                      if ((*(_QWORD *)(v72 + 1064) & 0xFFFFFFFFFFFFLL) == 0
                        || *(double *)((*(_QWORD *)(v72 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                      {
                        *(_QWORD *)(v72 + 1056) = 0;
                        WTF::MonotonicTime::now((WTF::MonotonicTime *)FireTime);
                        FireTime = WebCore::TimerBase::setNextFireTime(v72 + 1032, v74 + 0.0);
                        v73 = *(_DWORD *)v72;
                      }
                      v75 = v73 - 1;
                      if (!v75)
                      {
                        WebCore::Page::~Page(v72);
                        FireTime = WTF::fastFree(v107, v108);
                        if (v24)
                          goto LABEL_137;
                        goto LABEL_184;
                      }
                      *(_DWORD *)v72 = v75;
                    }
                  }
                }
              }
              if (v24)
              {
LABEL_137:
                v76 = WTF::MediaTime::invalidTime((WTF::MediaTime *)FireTime);
                v78 = *(_QWORD *)(v76 + 5);
                *((_QWORD *)this + 148) = *(_QWORD *)v76;
                *(_QWORD *)((char *)this + 1189) = v78;
                v79 = *((_QWORD *)this + 142);
                if (v79
                  && (*(double (**)(_QWORD))(**(_QWORD **)(v79 + 72) + 848))(*(_QWORD *)(v79 + 72)) != 0.0)
                {
                  v76 = WTF::MonotonicTime::now((WTF::MonotonicTime *)v76);
                  *((double *)this + 151) = v80 + 0.5;
                }
                if (!v29)
                  goto LABEL_272;
                v81 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
                if (!v81)
                {
                  WebCore::HTMLMediaElement::initializeMediaSession(this);
                  v81 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
                }
                WebCore::MediaElementSession::clientWillBeginPlayback(v81);
                v83 = *((_QWORD *)this + 142);
                if (!v83)
                {
LABEL_170:
                  v98 = *((_QWORD *)this + 177);
                  if (v98)
                    (*(void (**)(_QWORD))(**(_QWORD **)(v98 + 256) + 40))(*(_QWORD *)(v98 + 256));
                  else
                    v82.n128_u64[0] = *((_QWORD *)this + 109);
                  (*(void (**)(_QWORD, __n128))(**(_QWORD **)(v83 + 72) + 440))(*(_QWORD *)(v83 + 72), v82);
                  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) == 0)
                  {
                    v99 = *((_QWORD *)this + 177);
                    if (!v99 || !*(_BYTE *)(v99 + 104))
                    {
                      v100 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
                      if (!v100)
                        goto LABEL_182;
                      v101 = *(_QWORD *)(v100 + 8);
                      if (!v101)
                        goto LABEL_182;
                      v102 = *(_QWORD *)(v101 + 24);
                      if (!v102)
                        goto LABEL_182;
                      v103 = *(_QWORD *)(v102 + 8);
                      if (!v103)
                        goto LABEL_182;
                      v104 = (*(_DWORD *)v103)++;
                      v105 = *(_BYTE *)(v103 + 352);
                      if (v104)
                      {
                        *(_DWORD *)v103 = v104;
                        if ((v105 & 1) == 0)
                        {
LABEL_182:
                          v106 = (*(unsigned __int16 *)(v3 + 77) >> 9) & 1;
LABEL_231:
                          *(_BYTE *)(v83 + 227) = v106;
                          (*(void (**)(_QWORD))(**(_QWORD **)(v83 + 72) + 512))(*(_QWORD *)(v83 + 72));
                          v134 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
                          if (v134 && (v135 = *(_QWORD *)(v134 + 8)) != 0 && (v136 = *(_QWORD *)(v135 + 24)) != 0)
                          {
                            v137 = *(_QWORD *)(v136 + 8);
                            v138 = *((double *)this + 220);
                            if (v137)
                            {
                              v139 = *(float *)(v137 + 348);
                              goto LABEL_238;
                            }
                          }
                          else
                          {
                            v138 = *((double *)this + 220);
                          }
                          v139 = 1.0;
LABEL_238:
                          v140 = v138 * v139;
                          v141 = *((_QWORD *)this + 177);
                          if (v141)
                            v140 = v140 * *(double *)(v141 + 88);
                          *(double *)(v83 + 216) = v140 * *((double *)this + 123);
                          v142 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v83 + 72) + 496))(*(_QWORD *)(v83 + 72));
                          if ((*(_DWORD *)(v3 + 73) & 1) != 0)
                          {
                            v143 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
                            if (v143)
                            {
                              v144 = *(_QWORD *)(v143 + 8);
                              if (v144)
                              {
                                v145 = *(_QWORD *)(v144 + 24);
                                if (v145)
                                {
                                  v146 = *(_QWORD *)(v145 + 8);
                                  if (v146)
                                  {
                                    ++*(_DWORD *)v146;
                                    if ((*(_QWORD *)(*(_QWORD *)(v146 + 112) + 672) & 0x800000000000) == 0
                                      || (v147 = *(uint64_t **)(v146 + 256)) == 0)
                                    {
                                      v147 = WebCore::emptyDiagnosticLoggingClient(v142);
                                    }
                                    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this);
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    (*(void (**)(uint64_t *, __int128 *, WTF::StringImpl **, _QWORD))*v147)(v147, &buf, v186, 0);
                                    v149 = v186[0];
                                    v186[0] = 0;
                                    if (v149)
                                    {
                                      if (*(_DWORD *)v149 == 2)
                                        WTF::StringImpl::destroy(v149, v148);
                                      else
                                        *(_DWORD *)v149 -= 2;
                                    }
                                    v142 = (WebCore *)buf;
                                    *(_QWORD *)&buf = 0;
                                    if (v142)
                                    {
                                      if (*(_DWORD *)v142 == 2)
                                        v142 = (WebCore *)WTF::StringImpl::destroy(v142, v148);
                                      else
                                        *(_DWORD *)v142 -= 2;
                                    }
                                    if (*(_DWORD *)v146 == 1)
                                    {
                                      WebCore::Page::~Page(v146);
                                      v142 = (WebCore *)WTF::fastFree(v182, v183);
                                    }
                                    else
                                    {
                                      --*(_DWORD *)v146;
                                    }
                                  }
                                }
                              }
                            }
                            *(_DWORD *)(v3 + 73) &= ~1u;
                          }
                          v150 = *((_QWORD *)this + 142);
                          if (!v150)
                            goto LABEL_267;
                          v151 = *(unsigned __int8 **)v150;
                          if (__ldaxr(*(unsigned __int8 **)v150))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, v151))
                          {
                            goto LABEL_261;
                          }
                          v142 = (WebCore *)MEMORY[0x19AEA534C](v151);
LABEL_261:
                          ++*((_QWORD *)v151 + 1);
                          v153 = __ldxr(v151);
                          if (v153 == 1)
                          {
                            if (!__stlxr(0, v151))
                              goto LABEL_266;
                          }
                          else
                          {
                            __clrex();
                          }
                          v142 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v151);
LABEL_266:
                          v154 = WebCore::AudioSession::sharedSession(v142);
                          v155 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v154 + 16))(v154);
                          *((_BYTE *)this + 1728) = (_BYTE)v155;
                          v156 = WebCore::AudioSession::sharedSession(v155);
                          *((_BYTE *)this + 1729) = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v156 + 24))(v156);
                          (*(void (**)(_QWORD))(**(_QWORD **)(v150 + 72) + 216))(*(_QWORD *)(v150 + 72));
                          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v150);
LABEL_267:
                          if ((*((_BYTE *)this + 1744) & 0xFE) == 2)
                          {
                            v157 = *((_QWORD *)this + 228);
                            v158 = (WTF::StringImpl *)*((_QWORD *)this + 229);
                            *(_QWORD *)&buf = "HTMLMediaElement";
                            *((_QWORD *)&buf + 1) = 17;
                            v197 = "resumeSpeakingCueText";
                            v198 = v158;
                            if (*(_BYTE *)(v157 + 12))
                              WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
                            WebCore::HTMLMediaElement::setSpeechSynthesisState(this);
                          }
                          v76 = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v83);
LABEL_272:
                          if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) == 0
                            || *(double *)((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                          {
                            v159 = (WTF::MonotonicTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v76);
                            *((_QWORD *)this + 127) = v160;
                            *((_QWORD *)this + 48) = 0x3FD0000000000000;
                            WTF::MonotonicTime::now(v159);
                            WebCore::TimerBase::setNextFireTime((uint64_t)this + 360, v161 + 0.25);
                          }
                          v162 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
                          if (v162)
                            WebCore::MediaElementSession::removeBehaviorRestriction(v162, 0x4000);
                          v163 = *(unsigned int *)(v3 + 73);
                          v164 = v163 | ((unint64_t)*(unsigned __int16 *)(v3 + 77) << 32);
                          if ((v163 & 2) == 0)
                          {
                            *(_WORD *)(v3 + 77) = WORD2(v164);
                            *(_DWORD *)(v3 + 73) = v164 | 2;
                            v165 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
                            *(_DWORD *)(v165 + 24) += 2;
                            WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v165);
                            if (*(_DWORD *)(v165 + 24) == 2)
                            {
                              v180 = *(_WORD *)(v165 + 30);
                              if ((v180 & 0x400) == 0)
                              {
                                v181 = *(_WORD *)(v165 + 28);
                                if ((v181 & 0xF000) == 0x9000)
                                {
                                  WebCore::Document::removedLastRef((WebCore::Document *)v165, v166);
                                }
                                else
                                {
                                  if ((v181 & 0x20) != 0)
                                  {
                                    (*(void (**)(_QWORD))(**(_QWORD **)(v165 + 160) + 16))(*(_QWORD *)(v165 + 160));
                                    v180 = *(_WORD *)(v165 + 30);
                                  }
                                  *(_WORD *)(v165 + 30) = v180 | 0x400;
                                  (*(void (**)(uint64_t))(*(_QWORD *)v165 + 72))(v165);
                                }
                              }
                            }
                            else
                            {
                              *(_DWORD *)(v165 + 24) -= 2;
                            }
                            WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())this);
                          }
LABEL_280:
                          v167 = (WebCore::MediaController *)*((_QWORD *)this + 177);
                          if (v167)
                          {
                            ++*((_DWORD *)v167 + 2);
                            WebCore::MediaController::updateReadyState((uint64_t)v167);
                            WebCore::MediaController::updatePlaybackState((uint64_t)v167);
                            if (*((_DWORD *)v167 + 2) == 1)
                            {
                              WebCore::MediaController::~MediaController(v167);
                              bmalloc::api::isoDeallocate(v178, v179);
                            }
                            else
                            {
                              --*((_DWORD *)v167 + 2);
                            }
                          }
                          WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)this, v77);
                          v168 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
                          v170 = *(_DWORD *)(v3 + 73);
                          v169 = v3 + 73;
                          v171 = v170 | ((unint64_t)*((unsigned __int16 *)v169 + 2) << 32);
                          v172 = v170 & 0x8000000;
                          if (v168)
                            v172 = 0x8000000;
                          v173 = v171 & 0xFFFFFFFFF7FFFFFFLL;
                          *((_WORD *)v169 + 2) = WORD2(v173);
                          *(_DWORD *)v169 = v172 | v173;
                          v174 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1272))(this);
                          v175 = *(_DWORD *)v169 & 0x10000000;
                          if (v174)
                            v175 = 0x10000000;
                          v176 = v175 | *(_DWORD *)v169 & 0xEFFFFFFF;
                          *((_WORD *)v169 + 2) = *((_WORD *)v169 + 2);
                          *(_DWORD *)v169 = v176;
                          v177 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
                          if (!v177)
                          {
                            WebCore::HTMLMediaElement::initializeMediaSession(this);
                            v177 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
                          }
                          WebCore::PlatformMediaSession::canProduceAudioChanged(v177);
                          return;
                        }
                      }
                      else
                      {
                        WebCore::Page::~Page(v103);
                        WTF::fastFree(v132, v133);
                        if ((v105 & 1) == 0)
                          goto LABEL_182;
                      }
                    }
                  }
                  LOBYTE(v106) = 1;
                  goto LABEL_231;
                }
                v84 = *(unsigned __int8 **)v83;
                if (__ldaxr(*(unsigned __int8 **)v83))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v84))
                {
                  goto LABEL_165;
                }
                MEMORY[0x19AEA534C](v84);
LABEL_165:
                ++*((_QWORD *)v84 + 1);
                v97 = __ldxr(v84);
                if (v97 == 1)
                {
                  if (!__stlxr(0, v84))
                    goto LABEL_170;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v84);
                goto LABEL_170;
              }
LABEL_184:
              if ((v29 & 1) != 0)
              {
LABEL_200:
                v115 = *((_QWORD *)this + 142);
                if (v115)
                {
                  *((_QWORD *)this + 148) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v115 + 72) + 352))(*(_QWORD *)(v115 + 72));
                  *(_DWORD *)v3 = v116;
                  v3[4] = v117;
                  v118 = (WTF::MediaTime *)WTF::MediaTime::operator!();
                  if ((_DWORD)v118)
                  {
                    v119 = (_QWORD *)WTF::MediaTime::invalidTime(v118);
                    v120 = *(_QWORD *)((char *)v119 + 5);
                    *((_QWORD *)this + 148) = *v119;
                    *(_QWORD *)((char *)this + 1189) = v120;
                    v121 = *((_QWORD *)this + 142);
                    if (v121
                      && (*(double (**)(_QWORD))(**(_QWORD **)(v121 + 72) + 848))(*(_QWORD *)(v121 + 72)) != 0.0)
                    {
                      WTF::MonotonicTime::now(v122);
                      *((double *)this + 151) = v123 + 0.5;
                    }
                  }
                  else
                  {
                    WTF::MonotonicTime::now(v118);
                    *((_QWORD *)this + 150) = v124;
                  }
                }
                if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) != 0)
                  WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 360));
                v125 = *(unsigned int *)(v3 + 73);
                if ((v125 & 2) != 0)
                {
                  v126 = v125 & 0xFFFFFFFFFFFFFFFDLL | ((unint64_t)*(unsigned __int16 *)(v3 + 77) << 32);
                  *(_DWORD *)(v3 + 73) = v125 & 0xFFFFFFFD;
                  *(_WORD *)(v3 + 77) = WORD2(v126);
                  v127 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
                  *(_DWORD *)(v127 + 24) += 2;
                  WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v127);
                  if (*(_DWORD *)(v127 + 24) == 2)
                  {
                    v130 = *(_WORD *)(v127 + 30);
                    if ((v130 & 0x400) == 0)
                    {
                      v131 = *(_WORD *)(v127 + 28);
                      if ((v131 & 0xF000) == 0x9000)
                      {
                        WebCore::Document::removedLastRef((WebCore::Document *)v127, v128);
                      }
                      else
                      {
                        if ((v131 & 0x20) != 0)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)(v127 + 160) + 16))(*(_QWORD *)(v127 + 160));
                          v130 = *(_WORD *)(v127 + 30);
                        }
                        *(_WORD *)(v127 + 30) = v130 | 0x400;
                        (*(void (**)(uint64_t))(*(_QWORD *)v127 + 72))(v127);
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v127 + 24) -= 2;
                  }
                  WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())this);
                }
                *(_QWORD *)&buf = WebCore::HTMLMediaElement::currentMediaTime(this);
                *((_QWORD *)&buf + 1) = v129;
                if (WTF::MediaTime::compare((WTF::MediaTime *)&buf, (WebCore::HTMLMediaElement *)((char *)this + 1000)) == 1)WebCore::HTMLMediaElement::addPlayedRange(this, (WebCore::HTMLMediaElement *)((char *)this + 1000), (const WTF::MediaTime *)&buf);
                if (WebCore::HTMLMediaElement::couldPlayIfEnoughData(this))
                  WebCore::HTMLMediaElement::prepareToPlay((uint64_t)this);
                goto LABEL_280;
              }
              v109 = *((_QWORD *)this + 142);
              if (!v109)
              {
LABEL_196:
                if (*((unsigned __int8 *)this + 1744) - 1 <= 1)
                {
                  v113 = *((_QWORD *)this + 228);
                  v114 = (WTF::StringImpl *)*((_QWORD *)this + 229);
                  *(_QWORD *)&buf = "HTMLMediaElement";
                  *((_QWORD *)&buf + 1) = 17;
                  v197 = "pauseSpeakingCueText";
                  v198 = v114;
                  if (*(_BYTE *)(v113 + 12))
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
                  WebCore::HTMLMediaElement::setSpeechSynthesisState(this);
                }
                goto LABEL_200;
              }
              v110 = *(unsigned __int8 **)v109;
              if (__ldaxr(*(unsigned __int8 **)v109))
              {
                __clrex();
              }
              else if (!__stxr(1u, v110))
              {
                goto LABEL_190;
              }
              MEMORY[0x19AEA534C](v110);
LABEL_190:
              ++*((_QWORD *)v110 + 1);
              v112 = __ldxr(v110);
              if (v112 == 1)
              {
                if (!__stlxr(0, v110))
                  goto LABEL_195;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v110);
LABEL_195:
              (*(void (**)(_QWORD))(**(_QWORD **)(v109 + 72) + 224))(*(_QWORD *)(v109 + 72));
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v109);
              goto LABEL_196;
            }
            *(_DWORD *)v35 -= 2;
          }
          if (v32)
            goto LABEL_45;
          goto LABEL_47;
        }
      }
    }
LABEL_35:
    v24 = 0;
    goto LABEL_36;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 480))(*(_QWORD *)(v1 + 72)) & 1) != 0)
    goto LABEL_154;
  v25 = *((_QWORD *)this + 142);
  if (v25)
  {
    v26 = *(unsigned __int8 **)v25;
    if (__ldaxr(*(unsigned __int8 **)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_148;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_148:
    ++*((_QWORD *)v26 + 1);
    v86 = __ldxr(v26);
    if (v86 == 1)
    {
      if (!__stlxr(0, v26))
        goto LABEL_153;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_153:
    (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 72) + 224))(*(_QWORD *)(v25 + 72));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v25);
LABEL_154:
    v87 = *((_QWORD *)this + 142);
    if (v87)
    {
      *((_QWORD *)this + 148) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v87 + 72) + 352))(*(_QWORD *)(v87 + 72));
      *(_DWORD *)v3 = v88;
      v3[4] = v89;
      v90 = (WTF::MediaTime *)WTF::MediaTime::operator!();
      if ((_DWORD)v90)
      {
        v91 = (_QWORD *)WTF::MediaTime::invalidTime(v90);
        v92 = *(_QWORD *)((char *)v91 + 5);
        *((_QWORD *)this + 148) = *v91;
        *(_QWORD *)((char *)this + 1189) = v92;
        v93 = *((_QWORD *)this + 142);
        if (v93 && (*(double (**)(_QWORD))(**(_QWORD **)(v93 + 72) + 848))(*(_QWORD *)(v93 + 72)) != 0.0)
        {
          WTF::MonotonicTime::now(v94);
          *((double *)this + 151) = v95 + 0.5;
        }
      }
      else
      {
        WTF::MonotonicTime::now(v90);
        *((_QWORD *)this + 150) = v96;
      }
    }
  }
  if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 360));
}

unsigned __int8 *WebCore::HTMLMediaElement::updateShouldContinueAfterNeedKey(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  _BOOL8 v7;
  WebCore::Quirks *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (*((_QWORD *)this + 142))
  {
    v1 = this;
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
      v3 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v4 = *(_QWORD *)(v3 + 40);
    if (!v4)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v4 = *(_QWORD *)(v3 + 40);
    }
    v5 = *((_QWORD *)v1 + 2);
    if ((v5 & 0x1000000000000) != 0 && (v13 = v5 & 0xFFFFFFFFFFFFLL, v14 = *(unsigned int *)(v13 + 28), (_DWORD)v14))
    {
      v15 = *(_QWORD **)(v13 + 16);
      v16 = *(_QWORD *)(v4 + 2448);
      v17 = 32 * v14;
      while (*v15 != v16)
      {
        v15 += 4;
        v17 -= 32;
        if (!v17)
          goto LABEL_8;
      }
      v7 = 1;
    }
    else
    {
LABEL_8:
      v6 = *(WebCore::Document **)(*((_QWORD *)v1 + 5) + 8);
      if ((*(_QWORD *)(*((_QWORD *)v6 + 85) + 704) & 0x20000000000000) != 0)
      {
        v8 = (WebCore::Quirks *)*((_QWORD *)v6 + 86);
        if (!v8)
          v8 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v6);
        v7 = !WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v8);
      }
      else
      {
        v7 = 0;
      }
    }
    v9 = *((_QWORD *)v1 + 142);
    if (v9)
    {
      v10 = *(unsigned __int8 **)v9;
      if (__ldaxr(*(unsigned __int8 **)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_19;
      }
      MEMORY[0x19AEA534C](v10);
LABEL_19:
      ++*((_QWORD *)v10 + 1);
      v12 = __ldxr(v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, v10))
          goto LABEL_24;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_24:
      *(_BYTE *)(v9 + 264) = v7;
      (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(v9 + 72) + 976))(*(_QWORD *)(v9 + 72), v7);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
    }
    MEMORY[0x108] = v7;
    return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _BOOL8))(*MEMORY[0x48] + 976))(MEMORY[0x48], v7);
  }
  return this;
}

_QWORD *WebCore::HTMLMediaElement::mediaPlayerCachedKeyForKeyId@<X0>(_QWORD *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = this[197];
  if (v4 && (v5 = *(unsigned int *)(v4 + 28), (_DWORD)v5))
  {
    v7 = *(_QWORD *)(v4 + 16);
    v8 = 8 * v5;
    while (1)
    {
      this = *(_QWORD **)(*(_QWORD *)v7 + 120);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *, const WTF::String *))(*this + 56))(this, a2);
        if (*a3)
          break;
      }
      *a3 = 0;
      v7 += 8;
      v8 -= 8;
      if (!v8)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    *a3 = 0;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerCachedKeyForKeyId@<X0>(_QWORD *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = this[175];
  if (v4 && (v5 = *(unsigned int *)(v4 + 28), (_DWORD)v5))
  {
    v7 = *(_QWORD *)(v4 + 16);
    v8 = 8 * v5;
    while (1)
    {
      this = *(_QWORD **)(*(_QWORD *)v7 + 120);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *, const WTF::String *))(*this + 56))(this, a2);
        if (*a3)
          break;
      }
      *a3 = 0;
      v7 += 8;
      v8 -= 8;
      if (!v8)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerKeyNeeded(uint64_t this, const WebCore::SharedBuffer *a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  WebCore::Quirks *v10;
  uint64_t v11;
  WebCore *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore *v27;
  _DWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 680) + 712) & 0x100) != 0)
  {
    v3 = this;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v5 = *(_QWORD *)(StatusReg + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow((WebCore *)this);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    v8 = *(_QWORD *)(v3 + 16);
    if ((v8 & 0x1000000000000) != 0)
    {
      v22 = v8 & 0xFFFFFFFFFFFFLL;
      v23 = *(unsigned int *)(v22 + 28);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD **)(v22 + 16);
        v25 = *(_QWORD *)(v7 + 2448);
        v26 = 32 * v23;
        while (*v24 != v25)
        {
          v24 += 4;
          v26 -= 32;
          if (!v26)
            goto LABEL_8;
        }
LABEL_34:
        v27 = (WebCore *)WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(a2, &v45);
        if (v45)
        {
          v43 = v45;
          v45 = 0;
          JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create(&v43, (uint64_t *)&v44);
          v28 = v44;
          v44 = 0;
          v27 = (WebCore *)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v43);
          v29 = v45;
          v45 = 0;
          if (v29)
          {
            v30 = *(_DWORD *)v29 == 2;
            *(_DWORD *)v29 -= 2;
            if (v30)
            {
              v42 = (WTF *)v29;
              v31 = *(_QWORD *)(v29 + 80);
              if (v31)
              {
                *(_QWORD *)(v31 + 8) = 3;
                *((_QWORD *)v42 + 10) = 0;
              }
              if ((*((_BYTE *)v42 + 72) & 1) == 0)
                JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v42 + 72));
              JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v42 + 16));
              v33 = (WTF *)*((_QWORD *)v42 + 1);
              if ((v33 & 1) == 0 && v33)
              {
                v34 = *(WTF **)v33;
                if (*(_QWORD *)v33)
                {
                  *(_QWORD *)v33 = 0;
                  *((_DWORD *)v33 + 2) = 0;
                  WTF::fastFree(v34, v32);
                }
                WTF::fastFree(v33, v32);
              }
              v27 = (WebCore *)WTF::fastFree(v42, v32);
            }
          }
        }
        else
        {
          v28 = 0;
        }
        v35 = *(_QWORD *)(StatusReg + 736);
        if (!v35 || (v36 = *(_QWORD *)(v35 + 96)) == 0)
          v36 = WebCore::threadGlobalDataSlow(v27);
        v37 = *(_QWORD *)(v36 + 40);
        if (!v37)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v36);
          v37 = *(_QWORD *)(v36 + 40);
        }
        v38 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v38);
        *(_QWORD *)(v38 + 8) = 0;
        *(_DWORD *)(v38 + 16) = 1;
        v40 = *(_DWORD *)(v38 + 20) & 0xFFC00000 | (*(_QWORD *)(v37 + 2448) != 0) | 0x80000;
        *(_DWORD *)(v38 + 20) = v40;
        v41 = *(_DWORD **)(v37 + 2448);
        if (v41)
        {
          *v41 += 2;
          v40 = *(_DWORD *)(v38 + 20);
        }
        *(_QWORD *)(v38 + 24) = v41;
        *(_QWORD *)(v38 + 32) = 0;
        *(_QWORD *)(v38 + 40) = 0;
        *(_QWORD *)(v38 + 48) = 0;
        *(_QWORD *)(v38 + 56) = v39;
        *(_QWORD *)(v38 + 64) = 0;
        *(_DWORD *)(v38 + 20) = v40 | 0x4000;
        *(_QWORD *)v38 = off_1E34866F8;
        if (v28)
          ++*v28;
        *(_QWORD *)(v38 + 72) = v28;
        v45 = v38;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v3 + 112), v3, 9, v3 + 824, &v45);
        this = v45;
        v45 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 16) == 1)
          {
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            if (!v28)
              return this;
            goto LABEL_62;
          }
          --*(_DWORD *)(this + 16);
        }
        if (!v28)
          return this;
LABEL_62:
        if (*v28 == 1)
          return JSC::ArrayBufferView::operator delete();
        --*v28;
        return this;
      }
    }
LABEL_8:
    v9 = *(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8);
    if ((*(_QWORD *)(*((_QWORD *)v9 + 85) + 704) & 0x20000000000000) != 0)
    {
      v10 = (WebCore::Quirks *)*((_QWORD *)v9 + 86);
      if (!v10)
        v10 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v9);
      if (!WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v10))
        goto LABEL_34;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = v45;
    v12 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = 0x500000001;
    *((_QWORD *)v12 + 1) = v11;
    v14 = *(WTF **)(v3 + 960);
    *(_QWORD *)(v3 + 960) = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
      {
        v21 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v13);
          else
            *(_DWORD *)v21 -= 2;
        }
        v12 = (WebCore *)WTF::fastFree(v14, v13);
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
    v15 = *(_QWORD *)(StatusReg + 736);
    if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
      v16 = WebCore::threadGlobalDataSlow(v12);
    v17 = *(_QWORD *)(v16 + 40);
    if (!v17)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
      v17 = *(_QWORD *)(v16 + 40);
    }
    v18 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
    *(_DWORD *)(v18 + 16) = 1;
    *(_QWORD *)v18 = off_1E33A4B48;
    *(_QWORD *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v17 + 784) != 0);
    v20 = *(_DWORD **)(v17 + 784);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v18 + 24) = v20;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 56) = v19;
    *(_QWORD *)(v18 + 64) = 0;
    v45 = v18;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v3 + 112), v3, 9, v3 + 824, &v45);
    this = v45;
    v45 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 16);
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerKeyNeeded(WebCore::HTMLMediaElement *this, const WebCore::SharedBuffer *a2)
{
  return WebCore::HTMLMediaElement::mediaPlayerKeyNeeded((uint64_t)this - 176, a2);
}

void WebCore::HTMLMediaElement::mediaPlayerMediaKeysStorageDirectory(WebCore::HTMLMediaElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Document::mediaKeysStorageDirectory(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), a2, a3);
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerMediaKeysStorageDirectory(WebCore::HTMLMediaElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Document::mediaKeysStorageDirectory(*(WebCore::Document **)(*((_QWORD *)this - 17) + 8), a2, a3);
}

uint64_t WebCore::HTMLMediaElement::setMediaKeys(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t (**v18)();
  WTF::StringImpl *v19;

  if (*(_BYTE *)(result + 1592))
  {
    v3 = *a3;
    v19 = 0;
    WebCore::DeferredPromise::reject(v3, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v19, 0);
    result = (uint64_t)v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v6 = result;
    if (*(_QWORD *)(result + 1584) != a2)
    {
      *(_BYTE *)(result + 1592) = 1;
      if (a2)
        ++*(_DWORD *)(a2 + 16);
      v7 = *a3;
      *a3 = 0;
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v8 = &off_1E33C5A80;
      v8[1] = v6;
      v8[2] = a2;
      v8[3] = v7;
      v9 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v9 = 1;
      v10 = *(_DWORD *)(v6 + 24);
      *(_QWORD *)(v9 + 8) = v6;
      ++*(_QWORD *)(v6 + 128);
      *(_DWORD *)(v6 + 24) = v10 + 4;
      result = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)result = &off_1E33C5820;
      *(_QWORD *)(result + 8) = v6;
      *(_QWORD *)(result + 16) = v9;
      *(_QWORD *)(result + 24) = v8;
      v19 = (WTF::StringImpl *)result;
      v11 = *(_QWORD *)(v6 + 120);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 - 96) + 104))(v12 - 96);
          WebCore::EventLoopTaskGroup::queueTask(v13, 9, (uint64_t *)&v19);
          result = (uint64_t)v19;
          v19 = 0;
          if (!result)
            return result;
        }
        else
        {
          v19 = 0;
        }
        v18 = *(uint64_t (***)())result;
      }
      else
      {
        v19 = 0;
        v18 = &off_1E33C5820;
      }
      return v18[1]();
    }
    v14 = *a3;
    v15 = *(_QWORD *)(*a3 + 24);
    if (v15 && *(_QWORD *)v15 && (*(_BYTE *)(v15 + 8) & 3) == 0)
    {
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
        v17 = 0;
      else
        v17 = *(uint64_t **)v16;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v14, v17, 0, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](&v19);
    }
  }
  return result;
}

void WebCore::HTMLMediaElement::mediaPlayerInitializationDataEncountered(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  WebCore::Document *v4;
  WebCore::Quirks *v7;
  _BOOL8 hasBrokenEncryptedMediaAPISupportQuirk;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  _DWORD *v20;
  __int16 v21;
  char v22;
  _DWORD *v23;
  _DWORD *v24;

  v4 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  if ((*(_QWORD *)(*((_QWORD *)v4 + 85) + 704) & 0x20000000000000) != 0)
  {
    v7 = (WebCore::Quirks *)*((_QWORD *)v4 + 86);
    if (!v7)
      v7 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v4);
    hasBrokenEncryptedMediaAPISupportQuirk = WebCore::Quirks::hasBrokenEncryptedMediaAPISupportQuirk(v7);
    if (!hasBrokenEncryptedMediaAPISupportQuirk)
    {
      v22 = 0;
      v21 = 0;
      v9 = *a2;
      if (v9)
        *v9 += 2;
      v10 = *a3;
      *a3 = 0;
      v23 = v9;
      v24 = v10;
      v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
        v12 = WebCore::threadGlobalDataSlow((WebCore *)hasBrokenEncryptedMediaAPISupportQuirk);
      v13 = *(_QWORD *)(v12 + 40);
      if (!v13)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
        v13 = *(_QWORD *)(v12 + 40);
      }
      v14 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
      *(_QWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 16) = 1;
      v16 = *(_DWORD *)(v14 + 20) & 0xFFC00000 | 0x58200 | (*(_QWORD *)(v13 + 728) != 0);
      *(_DWORD *)(v14 + 20) = v16;
      v17 = *(_DWORD **)(v13 + 728);
      if (v17)
      {
        *v17 += 2;
        v16 = *(_DWORD *)(v14 + 20);
      }
      *(_QWORD *)(v14 + 24) = v17;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = v15;
      *(_QWORD *)(v14 + 64) = 0;
      *(_DWORD *)(v14 + 20) = v16 | 0x4000;
      *(_QWORD *)v14 = off_1E3203778;
      if (v9)
        *v9 += 2;
      *(_QWORD *)(v14 + 72) = v9;
      if (v10)
        *v10 += 2;
      *(_QWORD *)(v14 + 80) = v10;
      v20 = (_DWORD *)v14;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(a1 + 112), a1, 9, a1 + 824, (uint64_t *)&v20);
      v19 = v20;
      v20 = 0;
      if (v19)
      {
        if (v19[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[4];
      }
      WebCore::MediaEncryptedEventInit::~MediaEncryptedEventInit((WebCore::MediaEncryptedEventInit *)&v21, v18);
    }
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerInitializationDataEncountered(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  WebCore::HTMLMediaElement::mediaPlayerInitializationDataEncountered(a1 - 176, a2, a3);
}

void WebCore::HTMLMediaElement::mediaPlayerWaitingForKeyChanged(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  WebCore::TimeRanges *v6;
  double v7;
  WebCore *v8;
  void *v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;

  v1 = *((_QWORD *)this + 142);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 72);
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 968))(v3) & 1) != 0)
      {
        if (*((_BYTE *)this + 1593))
          return;
      }
      else if (*((_BYTE *)this + 1593))
      {
        v4 = *(_QWORD *)(*((_QWORD *)this + 142) + 72);
        *((_BYTE *)this + 1593) = 0;
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 560))(v4);
        WebCore::HTMLMediaElement::setReadyState((uint64_t)this, v5);
        return;
      }
    }
    *((_BYTE *)this + 1593) = 1;
    (*(void (**)(WTF **__return_ptr, WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1344))(&v20, this);
    v6 = v20;
    v7 = (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1360))(this);
    v8 = (WebCore *)WebCore::TimeRanges::contain(v6, v7);
    if ((_DWORD)v8)
      v10 = 2;
    else
      v10 = 1;
    v11 = v20;
    v20 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        v19 = (WTF *)*((_QWORD *)v11 + 1);
        if (v19)
        {
          *((_QWORD *)v11 + 1) = 0;
          *((_DWORD *)v11 + 4) = 0;
          WTF::fastFree(v19, v9);
        }
        v8 = (WebCore *)WTF::fastFree(v11, v9);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    if (v10 < *((_DWORD *)this + 226))
      WebCore::HTMLMediaElement::setReadyState((uint64_t)this, v10);
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
      v13 = WebCore::threadGlobalDataSlow(v8);
    v14 = *(_QWORD *)(v13 + 40);
    if (!v14)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
      v14 = *(_QWORD *)(v13 + 40);
    }
    v15 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
    *(_DWORD *)(v15 + 16) = 1;
    *(_QWORD *)v15 = off_1E33A4B48;
    *(_QWORD *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v14 + 2280) != 0);
    v17 = *(_DWORD **)(v14 + 2280);
    if (v17)
      *v17 += 2;
    *(_QWORD *)(v15 + 24) = v17;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = v16;
    *(_QWORD *)(v15 + 64) = 0;
    v20 = (WTF *)v15;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&v20);
    v18 = v20;
    v20 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 4) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
      else
        --*((_DWORD *)v18 + 4);
    }
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerWaitingForKeyChanged(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::mediaPlayerWaitingForKeyChanged((WebCore::HTMLMediaElement *)((char *)this - 176));
}

unsigned __int8 *WebCore::HTMLMediaElement::attemptToDecrypt(unsigned __int8 *this)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;

  v1 = *((_QWORD *)this + 198);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 48);
    v3 = v2[2];
    v2[2] = v3 + 1;
    v4 = *(unsigned int *)(v1 + 68);
    if (!(_DWORD)v4)
      goto LABEL_18;
    v5 = *(_QWORD *)(v1 + 56);
    v6 = 8 * v4;
    while (*(_BYTE *)(*(_QWORD *)v5 + 128))
    {
      v5 += 8;
      v6 -= 8;
      if (!v6)
        goto LABEL_18;
    }
    v7 = *((_QWORD *)this + 142);
    if (!v7)
      goto LABEL_18;
    v8 = *(unsigned __int8 **)v7;
    if (__ldaxr(*(unsigned __int8 **)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_12:
    ++*((_QWORD *)v8 + 1);
    v10 = __ldxr(v8);
    if (v10 == 1)
    {
      if (!__stlxr(0, v8))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_17:
    (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(v7 + 72) + 960))(*(_QWORD *)(v7 + 72), v2);
    this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
    v3 = v2[2] - 1;
LABEL_18:
    if (v3)
      v2[2] = v3;
    else
      return (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

unsigned __int8 *WebCore::HTMLMediaElement::cdmClientAttemptToResumePlaybackIfNecessary(unsigned __int8 *this)
{
  if (this[1593])
    return WebCore::HTMLMediaElement::attemptToDecrypt(this);
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLMediaElement::cdmClientAttemptToResumePlaybackIfNecessary(unsigned __int8 *this)
{
  if (this[1321])
    return WebCore::HTMLMediaElement::attemptToDecrypt(this - 272);
  return this;
}

void WebCore::HTMLMediaElement::cdmClientUnrequestedInitializationDataReceived(uint64_t a1, _DWORD **a2, WebCore::FragmentedSharedBuffer **a3)
{
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  WTF **v9;
  WTF *v10;
  WTF *v11;
  _DWORD *v12;

  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(*a3, &v12);
  WebCore::HTMLMediaElement::mediaPlayerInitializationDataEncountered(a1, a2, &v12);
  v5 = v12;
  v12 = 0;
  if (v5)
  {
    v6 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v6)
    {
      v7 = v5[10];
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v9 = (WTF **)v5[1];
      if ((v9 & 1) == 0 && v9)
      {
        v11 = (WTF *)v5[1];
        v10 = *v9;
        if (*v9)
        {
          *(_QWORD *)v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          WTF::fastFree(v10, v8);
        }
        WTF::fastFree(v11, v8);
      }
      WTF::fastFree((WTF *)v5, v8);
    }
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::cdmClientUnrequestedInitializationDataReceived(uint64_t a1, _DWORD **a2, WebCore::FragmentedSharedBuffer **a3)
{
  WebCore::HTMLMediaElement::cdmClientUnrequestedInitializationDataReceived(a1 - 272, a2, a3);
}

unsigned int *WebCore::HTMLMediaElement::rewind(WebCore::HTMLMediaElement *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::MediaTime *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::MediaTime *v12;
  unsigned int *result;
  uint64_t v14;
  uint64_t v15;
  WTF::MediaTime *v16;
  __int128 *v17;
  _QWORD v18[4];
  WTF::MediaTime *v19;
  uint64_t v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v19 = (WTF::MediaTime *)WebCore::HTMLMediaElement::currentMediaTime(this);
  v20 = v4;
  v18[2] = WTF::MediaTime::createWithDouble(v19, a2);
  v18[3] = v5;
  v6 = (WTF::MediaTime *)WTF::MediaTime::operator-();
  v21[0] = v6;
  v21[1] = v7;
  v8 = *((_QWORD *)this + 142);
  if (v8)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 584))(*(_QWORD *)(v8 + 72));
  }
  else
  {
    v11 = (uint64_t *)WTF::MediaTime::zeroTime(v6);
    v9 = *v11;
    v10 = v11[1];
  }
  v18[0] = v9;
  v18[1] = v10;
  v12 = (WTF::MediaTime *)v21;
  result = (unsigned int *)WTF::MediaTime::compare((WTF::MediaTime *)v21, (const WTF::MediaTime *)v18);
  if ((_DWORD)result == -1)
    v12 = (WTF::MediaTime *)v18;
  if (!*((_QWORD *)this + 177))
  {
    v14 = *((_QWORD *)this + 228);
    v15 = *((_QWORD *)this + 229);
    *(_QWORD *)&v22 = "HTMLMediaElement";
    *((_QWORD *)&v22 + 1) = 17;
    *(_QWORD *)&v23 = "seekInternal";
    *((_QWORD *)&v23 + 1) = v15;
    if (*(_BYTE *)(v14 + 12))
      result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v22, v12);
    v16 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
    v17 = (__int128 *)WTF::MediaTime::zeroTime(v16);
    v22 = *(_OWORD *)v12;
    v23 = *(_OWORD *)v16;
    v24 = *v17;
    return WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)this, (const WebCore::SeekTarget *)&v22, 0);
  }
  return result;
}

unsigned int *WebCore::HTMLMediaElement::returnToRealtime(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::MediaTime *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *((_QWORD *)this + 142);
  if (v2)
  {
    result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 576))(*(_QWORD *)(v2 + 72));
  }
  else
  {
    v5 = WTF::MediaTime::zeroTime(this);
    result = *(unsigned int **)v5;
    v4 = *(_QWORD *)(v5 + 8);
  }
  *(_QWORD *)&v10 = result;
  *((_QWORD *)&v10 + 1) = v4;
  if (!*((_QWORD *)this + 177))
  {
    v6 = *((_QWORD *)this + 228);
    v7 = *((_QWORD *)this + 229);
    *(_QWORD *)&v11 = "HTMLMediaElement";
    *((_QWORD *)&v11 + 1) = 17;
    *(_QWORD *)&v12 = "seekInternal";
    *((_QWORD *)&v12 + 1) = v7;
    if (*(_BYTE *)(v6 + 12))
      result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v11, (WTF::MediaTime *)&v10);
    v8 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
    v9 = (__int128 *)WTF::MediaTime::zeroTime(v8);
    v11 = v10;
    v12 = *(_OWORD *)v8;
    v13 = *v9;
    return WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)this, (const WebCore::SeekTarget *)&v11, 0);
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMediaElement::returnToRealtime(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::returnToRealtime((WebCore::HTMLMediaElement *)((char *)this - 136));
}

void WebCore::HTMLMediaElement::addPlayedRange(WebCore::HTMLMediaElement *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  __int128 *v45;
  _BYTE v46[13];
  _QWORD v47[2];
  _QWORD v48[4];
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[4];
  _BYTE v55[12];
  int v56;
  WTF::StringImpl *v57;
  uint64_t v58;

  v3 = (__int128 *)a3;
  v58 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 228);
  v48[0] = "HTMLMediaElement";
  v48[1] = 17;
  v7 = *((_QWORD *)this + 229);
  v48[2] = "addPlayedRange";
  v48[3] = v7;
  *(_QWORD *)&v46[5] = *(_QWORD *)((char *)a2 + 5);
  v8 = *(_QWORD *)a3;
  *(_QWORD *)v46 = *(_QWORD *)a2;
  v47[0] = v8;
  *(_QWORD *)((char *)v47 + 5) = *(_QWORD *)((char *)a3 + 5);
  if (*(_BYTE *)(v6 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
    WTF::MediaTimeRange::toJSONString((WTF::MediaTimeRange *)v46);
    if (v52)
    {
      v9 = *((_DWORD *)v52 + 1);
      if (v51)
      {
LABEL_6:
        v10 = *((_DWORD *)v51 + 1);
LABEL_7:
        if ((v10 | v9) < 0 || (v11 = (v9 + v10), __OFADD__(v9, v10)))
        {
          v53 = 0;
          goto LABEL_86;
        }
        if (v52)
        {
          v12 = *((_DWORD *)v52 + 4);
          v13 = (v12 >> 2) & 1;
          if (v51 && (v12 & 4) != 0)
            goto LABEL_12;
        }
        else
        {
          if (v51)
          {
LABEL_12:
            v13 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
            goto LABEL_13;
          }
          v13 = 1;
        }
LABEL_13:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v52, (uint64_t)v51, &v53);
        if (v53)
        {
          v15 = v51;
          v51 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v14);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v52;
          v52 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v14);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = qword_1ECE7C4A0;
          v18 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v18)
          {
            WTF::String::utf8();
            v20 = v49 ? (char *)v49 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v55 = v20;
            _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v18 = (uint64_t)v49;
            v49 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 1)
                v18 = WTF::fastFree((WTF *)v18, v19);
              else
                --*(_DWORD *)v18;
            }
          }
          if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
          {
            v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v22 = *v21;
              if ((v22 & 1) != 0)
                break;
              v23 = __ldaxr(v21);
              if (v23 == v22)
              {
                if (!__stxr(v22 | 1, v21))
                {
                  v45 = v3;
                  v24 = WTF::Logger::observers((WTF::Logger *)v18);
                  v25 = *(unsigned int *)(v24 + 12);
                  if ((_DWORD)v25)
                  {
                    v26 = *(uint64_t **)v24;
                    v27 = *(_QWORD *)v24 + 8 * v25;
                    do
                    {
                      v28 = *v26;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
                      v56 = 1;
                      WTF::MediaTimeRange::toJSONString((WTF::MediaTimeRange *)v46);
                      v49 = 0;
                      v50 = 0;
                      v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v50) = 2;
                      v49 = v29;
                      v30 = HIDWORD(v50);
                      *((_DWORD *)v29 + 4 * HIDWORD(v50)) = *(_DWORD *)buf;
                      v31 = *(_QWORD *)&v55[4];
                      if (*(_QWORD *)&v55[4])
                        **(_DWORD **)&v55[4] += 2;
                      *((_QWORD *)v29 + 2 * v30 + 1) = v31;
                      *((_DWORD *)v29 + 4 * (v30 + 1)) = v56;
                      v32 = v57;
                      if (v57)
                        *(_DWORD *)v57 += 2;
                      *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
                      HIDWORD(v50) = v30 + 2;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, 4, &v49);
                      v33 = v49;
                      if (HIDWORD(v50))
                      {
                        v34 = 16 * HIDWORD(v50);
                        v35 = (WTF::StringImpl **)((char *)v49 + 8);
                        do
                        {
                          v36 = *v35;
                          *v35 = 0;
                          if (v36)
                          {
                            if (*(_DWORD *)v36 == 2)
                              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v19);
                            else
                              *(_DWORD *)v36 -= 2;
                          }
                          v35 += 2;
                          v34 -= 16;
                        }
                        while (v34);
                        v33 = v49;
                      }
                      if (v33)
                      {
                        v49 = 0;
                        LODWORD(v50) = 0;
                        WTF::fastFree(v33, v19);
                      }
                      v37 = v57;
                      v57 = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                      v38 = *(WTF::StringImpl **)&v55[4];
                      *(_QWORD *)&v55[4] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                      ++v26;
                    }
                    while (v26 != (uint64_t *)v27);
                  }
                  v39 = __ldxr(v21);
                  if (v39 == 1)
                  {
                    v3 = v45;
                    if (!__stlxr(0, v21))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v3 = v45;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v40 = v53;
          v53 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)v40 -= 2;
          }
          goto LABEL_69;
        }
LABEL_86:
        __break(0xC471u);
        return;
      }
    }
    else
    {
      v9 = 0;
      if (v51)
        goto LABEL_6;
    }
    v10 = 0;
    goto LABEL_7;
  }
LABEL_69:
  v41 = *((_QWORD *)this + 102);
  if (!v41)
  {
    v41 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v41 = 1;
    *(_QWORD *)(v41 + 8) = 0;
    *(_QWORD *)(v41 + 16) = 0;
    v43 = *((_QWORD *)this + 102);
    *((_QWORD *)this + 102) = v41;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1)
      {
        v44 = *(WTF **)(v43 + 8);
        if (v44)
        {
          *(_QWORD *)(v43 + 8) = 0;
          *(_DWORD *)(v43 + 16) = 0;
          WTF::fastFree(v44, v42);
        }
        WTF::fastFree((WTF *)v43, v42);
        v41 = *((_QWORD *)this + 102);
      }
      else
      {
        --*(_DWORD *)v43;
      }
    }
  }
  WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)(v41 + 8), (__int128 *)a2, v3, 0);
}

uint64_t WebCore::HTMLMediaElement::supportsScanning(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 142);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 256))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::supportsScanning(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 125);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 256))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

unsigned int *WebCore::HTMLMediaElement::fastSeek(WebCore::HTMLMediaElement *this, double a2)
{
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = WTF::MediaTime::createWithDouble(this, a2);
  v5[1] = v3;
  return WebCore::HTMLMediaElement::fastSeek(this, (const WTF::MediaTime *)v5);
}

unsigned int *WebCore::HTMLMediaElement::fastSeek(WebCore::HTMLMediaElement *this, const WTF::MediaTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  WTF::MediaTime *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::MonotonicTime *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  WTF::MediaTime *v17;
  const WTF::MediaTime *v18;
  WTF::MediaTime **v19;
  WTF::MediaTime *v20;
  __int128 *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  WTF::MediaTime *v27[2];

  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  *(_QWORD *)&v23 = "HTMLMediaElement";
  *((_QWORD *)&v23 + 1) = 17;
  *(_QWORD *)&v24 = "fastSeek";
  *((_QWORD *)&v24 + 1) = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v23, a2);
  v6 = *((_QWORD *)this + 142);
  if (v6)
  {
    *((_QWORD *)this + 148) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 352))(*(_QWORD *)(v6 + 72));
    *((_DWORD *)this + 298) = v7;
    *((_BYTE *)this + 1196) = v8;
    v9 = (WTF::MediaTime *)WTF::MediaTime::operator!();
    if ((_DWORD)v9)
    {
      v10 = (_QWORD *)WTF::MediaTime::invalidTime(v9);
      v11 = *(_QWORD *)((char *)v10 + 5);
      *((_QWORD *)this + 148) = *v10;
      *(_QWORD *)((char *)this + 1189) = v11;
      v12 = *((_QWORD *)this + 142);
      if (v12 && (*(double (**)(_QWORD))(**(_QWORD **)(v12 + 72) + 848))(*(_QWORD *)(v12 + 72)) != 0.0)
      {
        WTF::MonotonicTime::now(v13);
        *((double *)this + 151) = v14 + 0.5;
      }
    }
    else
    {
      WTF::MonotonicTime::now(v9);
      *((_QWORD *)this + 150) = v15;
    }
  }
  *(_QWORD *)&v23 = WebCore::HTMLMediaElement::currentMediaTime(this);
  *((_QWORD *)&v23 + 1) = v16;
  v27[0] = (WTF::MediaTime *)WTF::MediaTime::operator-();
  v27[1] = v17;
  v18 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v27[0]);
  v19 = v27;
  v20 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)v27, v18);
  if ((_DWORD)v20 == -1)
  {
    v20 = (WTF::MediaTime *)WTF::MediaTime::positiveInfiniteTime(v20);
    v19 = (WTF::MediaTime **)v20;
  }
  v26 = *(_OWORD *)v19;
  v21 = (__int128 *)WTF::MediaTime::zeroTime(v20);
  v23 = *(_OWORD *)a2;
  v24 = v26;
  v25 = *v21;
  return WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)this, (const WebCore::SeekTarget *)&v23, 1);
}

unsigned int *WebCore::HTMLMediaElement::seekWithTolerance(unsigned int *this, const WebCore::SeekTarget *a2, int a3)
{
  const WebCore::SeekTarget *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  char v54;
  WTF::MediaTime *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::MonotonicTime *v59;
  double v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  NSObject *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  WTF::Logger *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::Logger *v104;
  uint64_t v105;
  WTF::StringImpl **v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  int v113;
  WTF::StringImpl *v114;
  _QWORD *v115;
  uint64_t v116;
  WebCore::HTMLElement *v117;
  WTF::MonotonicTime *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  WebCore::Node *ElementSibling;
  WebCore::Element *v123;
  uint64_t v124;
  WTF::StringImpl *v126[2];
  const char *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  WTF::Logger *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  __int128 buf;
  const char *v143;
  WTF::StringImpl *v144;
  int v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  int v149;
  WTF::StringImpl *v150;
  uint64_t v151;

  v4 = a2;
  v5 = (uint64_t)this;
  v151 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 228);
  v7 = *((_QWORD *)this + 229);
  v127 = "HTMLMediaElement";
  v128 = 17;
  v129 = "seekWithTolerance";
  v130 = v7;
  if (!*(_BYTE *)(v6 + 12))
    goto LABEL_84;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v127);
  WTF::String::String((WTF::String *)&v140, "SeekTarget = ");
  WebCore::SeekTarget::toString(v4, &v139);
  if (v141)
  {
    v8 = *((_DWORD *)v141 + 1);
    if (v140)
      goto LABEL_4;
LABEL_215:
    v9 = 0;
    if (v139)
      goto LABEL_5;
LABEL_216:
    v10 = 0;
    goto LABEL_6;
  }
  v8 = 0;
  if (!v140)
    goto LABEL_215;
LABEL_4:
  v9 = *((_DWORD *)v140 + 1);
  if (!v139)
    goto LABEL_216;
LABEL_5:
  v10 = *((_DWORD *)v139 + 1);
LABEL_6:
  if ((v10 | v9) < 0
    || ((v11 = __OFADD__(v9, v10), v12 = v9 + v10, !v11) ? (v13 = 0) : (v13 = 1),
        v8 < 0 || (v13 & 1) != 0 || (v14 = (v8 + v12), __OFADD__(v8, v12))))
  {
    v126[0] = 0;
    goto LABEL_235;
  }
  if (!v141 || (*((_BYTE *)v141 + 16) & 4) != 0)
  {
    if (v140)
    {
      v16 = *((_DWORD *)v140 + 4);
      v15 = (v16 >> 2) & 1;
      if (!v139 || (v16 & 4) == 0)
        goto LABEL_20;
    }
    else if (!v139)
    {
      v15 = 1;
      goto LABEL_20;
    }
    v15 = (*((unsigned __int8 *)v139 + 16) >> 2) & 1;
  }
  else
  {
    v15 = 0;
  }
LABEL_20:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14, v15, v141, (uint64_t)v140, (uint64_t)v139, v126);
  if (!v126[0])
    goto LABEL_235;
  v18 = v139;
  v139 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v140;
  v140 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v141;
  v141 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = qword_1ECE7C4A0;
  v22 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v131 ? (char *)v131 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v131;
    v131 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (WebCore::LogMedia)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v127);
              LODWORD(v143) = 0;
              WTF::String::String((WTF::String *)&v144, "SeekTarget = ");
              v145 = 0;
              WebCore::SeekTarget::toString(v4, &v146);
              v131 = 0;
              v132 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v132) = 3;
              v131 = v33;
              v34 = HIDWORD(v132);
              *((_DWORD *)v33 + 4 * HIDWORD(v132)) = buf;
              v35 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = (_DWORD)v143;
              v36 = v144;
              if (v144)
                *(_DWORD *)v144 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v145;
              v37 = v146;
              if (v146)
                *(_DWORD *)v146 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v132) = v34 + 3;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, &WebCore::LogMedia, 0, &v131);
              v38 = v131;
              if (HIDWORD(v132))
              {
                v39 = 16 * HIDWORD(v132);
                v40 = (WTF::StringImpl **)((char *)v131 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v131;
                v4 = a2;
              }
              if (v38)
              {
                v131 = 0;
                LODWORD(v132) = 0;
                WTF::fastFree(v38, v23);
              }
              v42 = v146;
              v146 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v144;
              v144 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v45 = __ldxr(v25);
          if (v45 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  this = (unsigned int *)v126[0];
  v126[0] = 0;
  if (this)
  {
    if (*this == 2)
      this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v23);
    else
      *this -= 2;
  }
LABEL_84:
  LOBYTE(v127) = 0;
  v46 = *(unsigned int *)(v5 + 1265) | ((unint64_t)*(unsigned __int16 *)(v5 + 1269) << 32);
  if ((v46 & 0x400000000) != 0)
  {
    v47 = *(_QWORD *)(v5 + 1824);
    v48 = *(WTF::StringImpl **)(v5 + 1832);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v143 = "setShowPosterFlag";
    v144 = v48;
    if (*(_BYTE *)(v47 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
      v49 = v127;
      v46 = *(unsigned int *)(v5 + 1265) | ((unint64_t)*(unsigned __int16 *)(v5 + 1269) << 32);
    }
    else
    {
      v49 = 0;
    }
    v50 = v46 & 0xFFFFFFFBFFFFFFFFLL;
    *(_DWORD *)(v5 + 1265) = v50;
    *(_WORD *)(v5 + 1269) = (v50 | (v49 << 34)) >> 32;
    this = (unsigned int *)WebCore::Node::invalidateStyle(v5, 3u, 1);
    if ((*(_BYTE *)(v5 + 71) & 1) != 0)
    {
      v121 = *(_QWORD *)(v5 + 32);
      if (!v121 || (*(_WORD *)(v121 + 28) & 8) == 0 || (*(_BYTE *)(v121 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v5);
        this = (unsigned int *)WebCore::invalidateForSiblingCombinators(ElementSibling, v123);
      }
    }
  }
  v51 = *(_DWORD *)(v5 + 904);
  if (v51)
  {
    v52 = *(_QWORD *)(v5 + 1136);
    if (v52)
    {
      if (v51 > 2
        || *(unsigned __int8 *)(v5 + 1144) > 1u
        || (WebCore::HTMLMediaElement::prepareToPlay(v5), (v52 = *(_QWORD *)(v5 + 1136)) != 0))
      {
        *(_QWORD *)(v5 + 1184) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 72) + 352))(*(_QWORD *)(v52 + 72));
        *(_DWORD *)(v5 + 1192) = v53;
        *(_BYTE *)(v5 + 1196) = v54;
        v55 = (WTF::MediaTime *)WTF::MediaTime::operator!();
        if ((_DWORD)v55)
        {
          v56 = (_QWORD *)WTF::MediaTime::invalidTime(v55);
          v57 = *(_QWORD *)((char *)v56 + 5);
          *(_QWORD *)(v5 + 1184) = *v56;
          *(_QWORD *)(v5 + 1189) = v57;
          v58 = *(_QWORD *)(v5 + 1136);
          if (v58 && (*(double (**)(_QWORD))(**(_QWORD **)(v58 + 72) + 848))(*(_QWORD *)(v58 + 72)) != 0.0)
          {
            WTF::MonotonicTime::now(v59);
            *(double *)(v5 + 1208) = v60 + 0.5;
          }
        }
        else
        {
          WTF::MonotonicTime::now(v55);
          *(_QWORD *)(v5 + 1200) = v61;
        }
      }
      v126[0] = (WTF::StringImpl *)WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)v5);
      v126[1] = v62;
      v63 = **(unsigned int ***)(v5 + 744);
      if (v63)
      {
        v64 = atomic_load(v63);
        if (v64 != 1)
        {
          v65 = *(_QWORD *)(v5 + 1824);
          v66 = *(WTF::StringImpl **)(v5 + 1832);
          *(_QWORD *)&buf = "HTMLMediaElement";
          *((_QWORD *)&buf + 1) = 17;
          v143 = "seekWithTolerance";
          v144 = v66;
          if (*(_BYTE *)(v65 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "cancelling pending seeks");
          v67 = *(uint64_t **)(v5 + 744);
          v68 = *v67;
          *v67 = 0;
          if (v68)
          {
            *(_QWORD *)(v68 + 8) = 0;
            do
            {
              v119 = __ldaxr((unsigned int *)v68);
              v120 = v119 - 1;
            }
            while (__stlxr(v120, (unsigned int *)v68));
            v4 = a2;
            if (!v120)
            {
              atomic_store(1u, (unsigned int *)v68);
              WTF::fastFree((WTF *)v68, v62);
            }
          }
          v69 = *(WTF::StringImpl ***)(v5 + 968);
          if (v69)
          {
            v70 = *v69;
            *(WTF::StringImpl **)((char *)v126 + 5) = *(WTF::StringImpl **)((char *)v69 + 5);
            v126[0] = v70;
            *(_QWORD *)(v5 + 968) = 0;
            WTF::fastFree((WTF *)v69, v62);
          }
          *(_DWORD *)(v5 + 976) = 0;
        }
      }
      WebCore::HTMLMediaElement::setSeeking((unsigned __int8 *)v5, (void *)1);
      if ((*(_DWORD *)(v5 + 1265) & 2) != 0
        && WTF::MediaTime::compare((WTF::MediaTime *)(v5 + 1000), (const WTF::MediaTime *)v126) == -1)
      {
        WebCore::HTMLMediaElement::addPlayedRange((WebCore::HTMLMediaElement *)v5, (const WTF::MediaTime *)(v5 + 1000), (const WTF::MediaTime *)v126);
      }
      v71 = *(_QWORD *)v4;
      *(_QWORD *)(v5 + 1005) = *(_QWORD *)((char *)v4 + 5);
      *(_QWORD *)(v5 + 1000) = v71;
      v72 = *(_QWORD *)(v5 + 1136);
      if (v72)
        (*(void (**)(_QWORD, const WebCore::SeekTarget *))(**(_QWORD **)(v72 + 72) + 384))(*(_QWORD *)(v72 + 72), v4);
      v74 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
      *v74 = *(_OWORD *)v126;
      v75 = *((_OWORD *)v4 + 2);
      v76 = *(_OWORD *)v4;
      v74[2] = *((_OWORD *)v4 + 1);
      v74[3] = v75;
      v74[1] = v76;
      v77 = *(WTF **)(v5 + 968);
      *(_QWORD *)(v5 + 968) = v74;
      if (v77)
        WTF::fastFree(v77, v73);
      if (!a3)
      {
        WebCore::HTMLMediaElement::seekTask((WebCore::HTMLMediaElement *)v5, v73);
LABEL_207:
        if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8)))
        {
          v118 = *(WTF::MonotonicTime **)(v5 + 1600);
          if (!v118)
          {
            WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v5);
            v118 = *(WTF::MonotonicTime **)(v5 + 1600);
          }
          WebCore::MediaElementSession::removeBehaviorRestriction(v118, 0x2000);
        }
        return WebCore::ImageOverlay::removeOverlaySoonIfNeeded((unsigned int *)v5, v117);
      }
      v78 = *(_QWORD *)(v5 + 1824);
      v79 = *(_QWORD *)(v5 + 1832);
      v127 = "HTMLMediaElement";
      v128 = 17;
      v129 = "seekWithTolerance";
      v130 = v79;
      if (!*(_BYTE *)(v78 + 12))
      {
LABEL_205:
        v115 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v115 = off_1E33C58C0;
        v115[1] = WebCore::HTMLMediaElement::seekTask;
        v115[2] = 0;
        v115[3] = v5;
        *(_QWORD *)&buf = v115;
        WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v5, 9, v5 + 736, (uint64_t (***)())&buf);
        v116 = buf;
        *(_QWORD *)&buf = 0;
        if (v116)
          (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
        goto LABEL_207;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v127);
      WTF::String::String((WTF::String *)&v136, "enqueuing seek from ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)v126);
      WTF::String::String((WTF::String *)&v134, " to ");
      WTF::MediaTime::toJSONString(v4);
      v131 = v136;
      v141 = v135;
      *(_QWORD *)&buf = v137;
      v139 = v133;
      v140 = v134;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v131, (uint64_t *)&v141, (uint64_t *)&v140, (uint64_t *)&v139, &v138);
      if (v138)
      {
        v81 = v133;
        v133 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v80);
          else
            *(_DWORD *)v81 -= 2;
        }
        v82 = v134;
        v134 = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v80);
          else
            *(_DWORD *)v82 -= 2;
        }
        v83 = v135;
        v135 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v80);
          else
            *(_DWORD *)v83 -= 2;
        }
        v84 = v136;
        v136 = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
            WTF::StringImpl::destroy(v84, v80);
          else
            *(_DWORD *)v84 -= 2;
        }
        v85 = v137;
        v137 = 0;
        if (v85)
        {
          if (*(_DWORD *)v85 == 2)
            WTF::StringImpl::destroy(v85, v80);
          else
            *(_DWORD *)v85 -= 2;
        }
        v86 = qword_1ECE7C4A0;
        v87 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v87)
        {
          WTF::String::utf8();
          v89 = v131 ? (char *)v131 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v89;
          _os_log_impl(&dword_1940B8000, v86, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v87 = (uint64_t)v131;
          v131 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 1)
              v87 = WTF::fastFree((WTF *)v87, v88);
            else
              --*(_DWORD *)v87;
          }
        }
        if (WebCore::LogMedia)
        {
          v90 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v91 = *v90;
            if ((v91 & 1) != 0)
              break;
            v92 = __ldaxr(v90);
            if (v92 == v91)
            {
              if (!__stxr(v91 | 1, v90))
              {
                v93 = WTF::Logger::observers((WTF::Logger *)v87);
                v94 = *(unsigned int *)(v93 + 12);
                if ((_DWORD)v94)
                {
                  v95 = *(uint64_t **)v93;
                  v124 = *(_QWORD *)v93 + 8 * v94;
                  do
                  {
                    v96 = *v95;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v127);
                    LODWORD(v143) = 0;
                    WTF::String::String((WTF::String *)&v144, "enqueuing seek from ");
                    v145 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)v126);
                    v147 = 0;
                    WTF::String::String((WTF::String *)&v148, " to ");
                    v149 = 1;
                    WTF::MediaTime::toJSONString(a2);
                    v131 = 0;
                    v132 = 0;
                    v97 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                    LODWORD(v132) = 5;
                    v131 = v97;
                    v98 = HIDWORD(v132);
                    *((_DWORD *)v97 + 4 * HIDWORD(v132)) = buf;
                    v99 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v97 + 2 * v98 + 1) = v99;
                    *((_DWORD *)v97 + 4 * (v98 + 1)) = (_DWORD)v143;
                    v100 = v144;
                    if (v144)
                      *(_DWORD *)v144 += 2;
                    *((_QWORD *)v97 + 2 * (v98 + 1) + 1) = v100;
                    *((_DWORD *)v97 + 4 * (v98 + 2)) = v145;
                    v101 = v146;
                    if (v146)
                      *(_DWORD *)v146 += 2;
                    *((_QWORD *)v97 + 2 * (v98 + 2) + 1) = v101;
                    *((_DWORD *)v97 + 4 * (v98 + 3)) = v147;
                    v102 = v148;
                    if (v148)
                      *(_DWORD *)v148 += 2;
                    *((_QWORD *)v97 + 2 * (v98 + 3) + 1) = v102;
                    *((_DWORD *)v97 + 4 * (v98 + 4)) = v149;
                    v103 = v150;
                    if (v150)
                      *(_DWORD *)v150 += 2;
                    *((_QWORD *)v97 + 2 * (v98 + 4) + 1) = v103;
                    HIDWORD(v132) = v98 + 5;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v96 + 16))(v96, &WebCore::LogMedia, 0, &v131);
                    v104 = v131;
                    if (HIDWORD(v132))
                    {
                      v105 = 16 * HIDWORD(v132);
                      v106 = (WTF::StringImpl **)((char *)v131 + 8);
                      do
                      {
                        v107 = *v106;
                        *v106 = 0;
                        if (v107)
                        {
                          if (*(_DWORD *)v107 == 2)
                            WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v88);
                          else
                            *(_DWORD *)v107 -= 2;
                        }
                        v106 += 2;
                        v105 -= 16;
                      }
                      while (v105);
                      v104 = v131;
                    }
                    if (v104)
                    {
                      v131 = 0;
                      LODWORD(v132) = 0;
                      WTF::fastFree(v104, v88);
                    }
                    v108 = v150;
                    v150 = 0;
                    if (v108)
                    {
                      if (*(_DWORD *)v108 == 2)
                        WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v88);
                      else
                        *(_DWORD *)v108 -= 2;
                    }
                    v109 = v148;
                    v148 = 0;
                    if (v109)
                    {
                      if (*(_DWORD *)v109 == 2)
                        WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v88);
                      else
                        *(_DWORD *)v109 -= 2;
                    }
                    v110 = v146;
                    v146 = 0;
                    if (v110)
                    {
                      if (*(_DWORD *)v110 == 2)
                        WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v88);
                      else
                        *(_DWORD *)v110 -= 2;
                    }
                    v111 = v144;
                    v144 = 0;
                    if (v111)
                    {
                      if (*(_DWORD *)v111 == 2)
                        WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v88);
                      else
                        *(_DWORD *)v111 -= 2;
                    }
                    v112 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v112)
                    {
                      if (*(_DWORD *)v112 == 2)
                        WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v88);
                      else
                        *(_DWORD *)v112 -= 2;
                    }
                    ++v95;
                  }
                  while (v95 != (uint64_t *)v124);
                }
                v113 = __ldxr(v90);
                if (v113 == 1)
                {
                  if (!__stlxr(0, v90))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v114 = v138;
        v138 = 0;
        if (v114)
        {
          if (*(_DWORD *)v114 == 2)
            WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v88);
          else
            *(_DWORD *)v114 -= 2;
        }
        goto LABEL_205;
      }
LABEL_235:
      __break(0xC471u);
      JUMPOUT(0x195C20E90);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLMediaElement::setAudioOutputDevice(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  WebCore::LocalDOMWindow *v4;
  WebCore::NavigatorMediaDevices *v7;
  WebCore::Navigator *v8;
  WebCore::NavigatorMediaDevices *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  bmalloc::api *v42;
  void *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  objc_class *v48;
  WTF::StringImpl *v49;
  objc_class *v50;
  _QWORD *v51;
  WTF::StringImpl *v52;

  v4 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 696);
  if (v4)
  {
    ++*((_DWORD *)v4 + 6);
    v7 = (WebCore::NavigatorMediaDevices *)WebCore::LocalDOMWindow::navigator(v4);
    v9 = (WebCore::NavigatorMediaDevices *)WebCore::NavigatorMediaDevices::from(v7, v8);
    v10 = WebCore::NavigatorMediaDevices::mediaDevices(v9);
    if (!v10)
    {
      v46 = *a3;
      v48 = 0;
      LOBYTE(v51) = 31;
      v52 = 0;
      WebCore::DeferredPromise::reject(v46, (unsigned __int8 *)&v51, 0, &v48);
      result = v52;
      v52 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_55;
    }
    v11 = (_DWORD *)v10;
    ++*(_DWORD *)(v10 + 24);
    if (!WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8))
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 712) & 0x40000000) != 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v27 = *a3;
      LOBYTE(v48) = 31;
      v50 = 0;
      LOBYTE(v51) = 31;
      v28 = v49;
      if (v49)
        *(_DWORD *)v49 += 2;
      v52 = v28;
      WebCore::DeferredPromise::reject(v27, (unsigned __int8 *)&v51, 0, &v50);
      v29 = v52;
      v52 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v16);
        else
          *(_DWORD *)v29 -= 2;
      }
      result = v49;
      v49 = 0;
      if (!result)
        goto LABEL_53;
    }
    else
    {
      v14 = *a2;
      if (*a2)
      {
        if (!*((_DWORD *)v14 + 1))
        {
          *a2 = 0;
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::destroy(v14, v12);
            v14 = *a2;
          }
          else
          {
            *(_DWORD *)v14 -= 2;
            v14 = 0;
          }
        }
      }
      else
      {
        *a2 = 0;
      }
      result = (WTF::StringImpl *)WTF::equal(v14, *(const WTF::StringImpl **)(a1 + 1712), v13);
      if ((_DWORD)result)
      {
        v18 = *a3;
        v19 = *(_QWORD *)(v18 + 24);
        if (v19 && *(_QWORD *)v19 && (*(_BYTE *)(v19 + 8) & 3) == 0)
        {
          v20 = *(_QWORD *)(v18 + 32);
          if (!v20 || (*(_BYTE *)(v20 + 8) & 3) != 0)
            v21 = 0;
          else
            v21 = *(uint64_t **)v20;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v18, v21, 0, (objc_class *)0xA);
          result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v51);
        }
        goto LABEL_53;
      }
      v22 = (uint64_t)*a2;
      if (!*a2
        || (WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)(v11 + 34), a2, v17, &v51), (v22 = (uint64_t)v51) != 0))
      {
        v23 = *(WTF::StringImpl **)(a1 + 1704);
        *(_QWORD *)(a1 + 1704) = v22;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v16);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = *(_QWORD *)(a1 + 1136);
        if (!v24)
          goto LABEL_41;
        v25 = *(unsigned __int8 **)v24;
        if (__ldaxr(*(unsigned __int8 **)v24))
        {
          __clrex();
        }
        else if (!__stxr(1u, v25))
        {
          goto LABEL_35;
        }
        MEMORY[0x19AEA534C](v25);
LABEL_35:
        ++*((_QWORD *)v25 + 1);
        v30 = __ldxr(v25);
        if (v30 == 1)
        {
          if (!__stlxr(0, v25))
            goto LABEL_40;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_40:
        (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 72) + 1144))(*(_QWORD *)(v24 + 72));
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v24);
LABEL_41:
        v31 = *(_QWORD *)(a1 + 120);
        if (v31 && (v32 = *(_QWORD *)(v31 + 8)) != 0)
        {
          v33 = (_DWORD *)(v32 - 96);
          v34 = *(unsigned __int8 *)(v32 + 178);
          if (*(_BYTE *)(v32 + 178))
          {
            if (v34 == 1 || v34 == 2)
              ++*(_DWORD *)(v32 + 216);
          }
          else
          {
            *(_DWORD *)(v32 - 264) += 2;
          }
        }
        else
        {
          v33 = 0;
        }
        v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v33 + 104))(v33);
        ++*(_DWORD *)(v35 + 8);
        *(_DWORD *)(a1 + 24) += 2;
        v36 = *a2;
        *a2 = 0;
        v37 = *a3;
        *a3 = 0;
        v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v38 = &off_1E33C5AF8;
        v38[1] = a1;
        v38[2] = a1;
        v38[3] = v36;
        v38[4] = v37;
        v51 = v38;
        WebCore::EventLoopTaskGroup::queueTask(v35, 9, (uint64_t *)&v51);
        v39 = (uint64_t)v51;
        v51 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        v40 = *(_DWORD *)(v35 + 8);
        if (!v40)
        {
          __break(0xC471u);
          JUMPOUT(0x195C212F4);
        }
        *(_DWORD *)(v35 + 8) = v40 - 1;
        result = (WTF::StringImpl *)WebCore::ScriptExecutionContext::deref(v33);
        goto LABEL_53;
      }
      v41 = *a3;
      v48 = 0;
      LOBYTE(v51) = 5;
      v52 = 0;
      WebCore::DeferredPromise::reject(v41, (unsigned __int8 *)&v51, 0, &v48);
      result = v52;
      v52 = 0;
      if (!result)
      {
LABEL_53:
        if (v11[6] == 1)
        {
          WebCore::MediaDevices::~MediaDevices((WebCore::MediaDevices *)v11, v16);
          result = (WTF::StringImpl *)bmalloc::api::isoDeallocate(v42, v43);
        }
        else
        {
          --v11[6];
        }
LABEL_55:
        if (*((_DWORD *)v4 + 6) == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v4 + 72))(v4);
        --*((_DWORD *)v4 + 6);
        return result;
      }
    }
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
    goto LABEL_53;
  }
  v44 = *a3;
  v48 = 0;
  LOBYTE(v51) = 31;
  v52 = 0;
  WebCore::DeferredPromise::reject(v44, (unsigned __int8 *)&v51, 0, &v48);
  result = v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WebCore::HTMLMediaElement::setSeeking(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  char v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;

  v2 = this + 1265;
  v3 = *(unsigned int *)(this + 1265);
  v4 = v3 | ((unint64_t)*(unsigned __int16 *)(this + 1269) << 32);
  if (((((v3 & 0x800) == 0) ^ a2) & 1) != 0)
    return this;
  v5 = (int)a2;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v6 = (uint64_t *)*((_QWORD *)this + 5);
  v7 = v6[1];
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v11 = *v6;
    v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0 || v11 == 0;
    v13 = v11 + 216;
    if (v12)
      v13 = v7 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v13 + 236))
      goto LABEL_21;
  }
  v8 = *(_QWORD *)(v7 + 1272);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 70) & 4) != 0)
    {
LABEL_21:
      LOBYTE(v22) = 0;
      v24 = 0;
      v25 = 0;
      v23 = this;
      goto LABEL_22;
    }
  }
  if (!*(_BYTE *)(v7 + 3362))
  {
    v9 = *(unsigned __int8 *)(v7 + 3390);
    if (*(_BYTE *)(v7 + 3390)
      || (*(_BYTE *)(v7 + 70) & 8) != 0
      || *(_QWORD *)(v7 + 1560)
      || (v10 = *(_QWORD *)(v7 + 1328), *(_BYTE *)(v10 + 233))
      || *(_BYTE *)(v10 + 234))
    {
      v16 = *(unsigned __int8 *)(v7 + 3391);
      if (v9)
        v17 = v16 == 0;
      else
        v17 = 0;
      v18 = !v17;
      LOBYTE(v22) = v18;
      v24 = 0;
      v25 = 0;
      v23 = this;
      if (!v17)
        goto LABEL_37;
LABEL_22:
      v14 = 2048;
      if (!(_DWORD)a2)
        v14 = 0;
      v15 = v4 & 0xFFFFFFFFFFFFF7FFLL;
      *(_WORD *)(this + 1269) = WORD2(v15);
      *(_DWORD *)v2 = v15 | v14;
      goto LABEL_25;
    }
  }
  LOBYTE(v22) = 1;
  v24 = 0;
  v25 = 0;
  v23 = this;
LABEL_37:
  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v22, (WTF::StringImpl *)0x46, (int)a2, 0);
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v23, &v24);
  v19 = v22;
  v20 = 2048;
  if (!v5)
    v20 = 0;
  v21 = *(_DWORD *)v2 & 0xFFFFF7FF | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
  *(_DWORD *)v2 = *(_DWORD *)v2 & 0xFFFFF7FF | v20;
  *((_WORD *)v2 + 2) = WORD2(v21);
  if (v19)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v23, &v25);
LABEL_25:
  if (v25)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v25, a2);
  this = v24;
  if (v24)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v24, a2);
  return this;
}

void WebCore::HTMLMediaElement::seekTask(WebCore::HTMLMediaElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::MonotonicTime *v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  WTF::Logger *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  int v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  int v74;
  char v75;
  WTF::MediaTime *v76;
  _DWORD *v77;
  int v78;
  const WTF::MediaTime *v79;
  WTF::MediaTime *v80;
  int v81;
  BOOL v82;
  int v83;
  char v84;
  _BOOL4 v85;
  const WTF::MediaTime *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  char v95;
  uint64_t v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  char v101;
  unint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  WTF::MediaTime *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  double v118;
  double v119;
  double v120;
  BOOL v121;
  unsigned int v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  NSObject *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  unsigned __int8 *v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::Logger *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::Logger *v144;
  uint64_t v145;
  WTF::StringImpl **v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  int v151;
  double v152;
  double v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  NSObject *v163;
  uint64_t v164;
  char *v165;
  unsigned __int8 *v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  WTF::Logger *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  WTF::Logger *v179;
  WTF::Logger *v180;
  uint64_t v181;
  WTF::StringImpl **v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  int v189;
  WTF::StringImpl *v190;
  uint64_t CanPlayAfterSeekedQuirk;
  unint64_t StatusReg;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  _DWORD *v199;
  WebCore *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _DWORD *v206;
  WTF::StringImpl *v207;
  _DWORD *v208;
  WebCore::Quirks *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned __int8 *v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  WTF::MonotonicTime *v223;
  double v224;
  WTF::StringImpl *v225;
  uint64_t v226;
  uint64_t v227;
  WTF *v228;
  uint64_t v229;
  uint64_t v230;
  BOOL v231;
  _DWORD *v232;
  _DWORD *v233;
  uint64_t v234;
  uint64_t v235;
  WTF::StringImpl *v236[2];
  _QWORD v237[2];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  const char *v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  WTF::Logger *v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  uint8_t buf[16];
  __int128 v256;
  __int128 v257;
  int v258;
  WTF::StringImpl *v259;
  int v260;
  WTF::Logger *v261;
  uint64_t v262;

  v262 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  *(_QWORD *)buf = "HTMLMediaElement";
  *(_QWORD *)&buf[8] = 17;
  *(_QWORD *)&v256 = "seekTask";
  *((_QWORD *)&v256 + 1) = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)buf);
  }
  if (*((_QWORD *)this + 142))
  {
    v6 = (WTF *)*((_QWORD *)this + 121);
    v7 = *(_OWORD *)v6;
    v240 = *((_OWORD *)v6 + 1);
    v241 = v7;
    v8 = *((_OWORD *)v6 + 2);
    v238 = *((_OWORD *)v6 + 3);
    v239 = v8;
    *((_QWORD *)this + 121) = 0;
    WTF::fastFree(v6, a2);
    v9 = *((_QWORD *)this + 144);
    if (v9)
    {
      v10 = *(uint64_t (**)(void))(*(_QWORD *)v9 + 40);
    }
    else
    {
      v20 = *((_QWORD *)this + 142);
      if (!v20 || *((int *)this + 226) < 1)
      {
        v21 = (uint64_t *)WTF::MediaTime::invalidTime(0);
        v11 = *v21;
        v12 = v21[1];
LABEL_19:
        *(_QWORD *)buf = v11;
        *(_QWORD *)&buf[8] = v12;
        if (WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)&v240) == -1)
          v22 = buf;
        else
          v22 = (uint8_t *)&v240;
        v23 = *(_QWORD *)(v22 + 5);
        *(_QWORD *)&v240 = *(_QWORD *)v22;
        *(_QWORD *)((char *)&v240 + 5) = v23;
        v237[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 416))(*(_QWORD *)(*((_QWORD *)this + 142) + 72));
        v237[1] = v24;
        if (WTF::MediaTime::compare((WTF::MediaTime *)&v240, (const WTF::MediaTime *)v237) == -1)
          v25 = v237;
        else
          v25 = (uint64_t *)&v240;
        v26 = *v25;
        *(_QWORD *)((char *)&v240 + 5) = *(uint64_t *)((char *)v25 + 5);
        *(_QWORD *)&v240 = v26;
        if (!*(_BYTE *)(*((_QWORD *)this + 228) + 12))
          goto LABEL_132;
        if (!WebCore::LogMedia)
          goto LABEL_132;
        if (byte_1ECE7C490 < 3u)
          goto LABEL_132;
        v236[0] = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(*((_QWORD *)this + 142)
                                                                                                 + 72)
                                                                                   + 840))(*(_QWORD *)(*((_QWORD *)this + 142) + 72), &v240);
        v236[1] = v27;
        if (!WTF::MediaTime::compare((WTF::MediaTime *)&v240, (const WTF::MediaTime *)v236))
          goto LABEL_132;
        v28 = *((_QWORD *)this + 228);
        v29 = *((_QWORD *)this + 229);
        v242 = "HTMLMediaElement";
        v243 = 17;
        v244 = "seekTask";
        v245 = v29;
        if (!*(_BYTE *)(v28 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
          goto LABEL_132;
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v242);
        WTF::MediaTime::toJSONString((WTF::MediaTime *)&v240);
        WTF::String::String((WTF::String *)&v251, " media timeline equivalent is ");
        WTF::MediaTime::toJSONString((WTF::MediaTime *)v236);
        if (v253)
        {
          v30 = *((_DWORD *)v253 + 1);
          if (v252)
            goto LABEL_34;
        }
        else
        {
          v30 = 0;
          if (v252)
          {
LABEL_34:
            v31 = *((_DWORD *)v252 + 1);
            if (v251)
              goto LABEL_35;
            goto LABEL_425;
          }
        }
        v31 = 0;
        if (v251)
        {
LABEL_35:
          v32 = *((_DWORD *)v251 + 1);
          if (v250)
          {
LABEL_36:
            v33 = *((_DWORD *)v250 + 1);
LABEL_37:
            if ((v33 | v32) < 0
              || ((v34 = __OFADD__(v32, v33), v35 = v32 + v33, !v34) ? (v36 = 0) : (v36 = 1),
                  v31 < 0
               || (v36 & 1) != 0
               || ((v34 = __OFADD__(v31, v35), v37 = v31 + v35, !v34) ? (v38 = 0) : (v38 = 1),
                   v30 < 0 || (v38 & 1) != 0 || (v39 = (v30 + v37), __OFADD__(v30, v37)))))
            {
              v254 = 0;
              goto LABEL_433;
            }
            if (v253 && (*((_BYTE *)v253 + 16) & 4) == 0 || v252 && (*((_BYTE *)v252 + 16) & 4) == 0)
            {
              v40 = 0;
              goto LABEL_54;
            }
            if (v251)
            {
              v72 = *((_DWORD *)v251 + 4);
              v40 = (v72 >> 2) & 1;
              if (v250 && (v72 & 4) != 0)
                goto LABEL_126;
            }
            else
            {
              if (v250)
              {
LABEL_126:
                v40 = (*((unsigned __int8 *)v250 + 16) >> 2) & 1;
                goto LABEL_54;
              }
              v40 = 1;
            }
LABEL_54:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v40, (uint64_t)v253, v252, (uint64_t)v251, (uint64_t)v250, &v254);
            if (v254)
            {
              v42 = v250;
              v250 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, v41);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v251;
              v251 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v41);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v252;
              v252 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, v41);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v253;
              v253 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v41);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = qword_1ECE7C4A0;
              v47 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v47)
              {
                WTF::String::utf8();
                v49 = v246 ? (char *)v246 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v49;
                _os_log_impl(&dword_1940B8000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v47 = (uint64_t)v246;
                v246 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 1)
                    v47 = WTF::fastFree((WTF *)v47, v48);
                  else
                    --*(_DWORD *)v47;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              {
                v50 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v51 = *v50;
                  if ((v51 & 1) != 0)
                    break;
                  v52 = __ldaxr(v50);
                  if (v52 == v51)
                  {
                    if (!__stxr(v51 | 1, v50))
                    {
                      v53 = WTF::Logger::observers((WTF::Logger *)v47);
                      v54 = *(unsigned int *)(v53 + 12);
                      if ((_DWORD)v54)
                      {
                        v55 = *(uint64_t **)v53;
                        v235 = *(_QWORD *)v53 + 8 * v54;
                        do
                        {
                          v56 = *v55;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v242);
                          LODWORD(v256) = 1;
                          WTF::MediaTime::toJSONString((WTF::MediaTime *)&v240);
                          LODWORD(v257) = 0;
                          WTF::String::String((WTF::String *)((char *)&v257 + 8), " media timeline equivalent is ");
                          v258 = 1;
                          WTF::MediaTime::toJSONString((WTF::MediaTime *)v236);
                          v246 = 0;
                          v247 = 0;
                          v57 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                          LODWORD(v247) = 4;
                          v246 = v57;
                          v58 = HIDWORD(v247);
                          *((_DWORD *)v57 + 4 * HIDWORD(v247)) = *(_DWORD *)buf;
                          v59 = *(_QWORD *)&buf[8];
                          if (*(_QWORD *)&buf[8])
                            **(_DWORD **)&buf[8] += 2;
                          *((_QWORD *)v57 + 2 * v58 + 1) = v59;
                          *((_DWORD *)v57 + 4 * (v58 + 1)) = v256;
                          v60 = *((_QWORD *)&v256 + 1);
                          if (*((_QWORD *)&v256 + 1))
                            **((_DWORD **)&v256 + 1) += 2;
                          *((_QWORD *)v57 + 2 * (v58 + 1) + 1) = v60;
                          *((_DWORD *)v57 + 4 * (v58 + 2)) = v257;
                          v61 = *((_QWORD *)&v257 + 1);
                          if (*((_QWORD *)&v257 + 1))
                            **((_DWORD **)&v257 + 1) += 2;
                          *((_QWORD *)v57 + 2 * (v58 + 2) + 1) = v61;
                          *((_DWORD *)v57 + 4 * (v58 + 3)) = v258;
                          v62 = v259;
                          if (v259)
                            *(_DWORD *)v259 += 2;
                          *((_QWORD *)v57 + 2 * (v58 + 3) + 1) = v62;
                          HIDWORD(v247) = v58 + 4;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v56 + 16))(v56, &WebCore::LogMedia, 3, &v246);
                          v63 = v246;
                          if (HIDWORD(v247))
                          {
                            v64 = 16 * HIDWORD(v247);
                            v65 = (WTF::StringImpl **)((char *)v246 + 8);
                            do
                            {
                              v66 = *v65;
                              *v65 = 0;
                              if (v66)
                              {
                                if (*(_DWORD *)v66 == 2)
                                  WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v48);
                                else
                                  *(_DWORD *)v66 -= 2;
                              }
                              v65 += 2;
                              v64 -= 16;
                            }
                            while (v64);
                            v63 = v246;
                          }
                          if (v63)
                          {
                            v246 = 0;
                            LODWORD(v247) = 0;
                            WTF::fastFree(v63, v48);
                          }
                          v67 = v259;
                          v259 = 0;
                          if (v67)
                          {
                            if (*(_DWORD *)v67 == 2)
                              WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v67 -= 2;
                          }
                          v68 = (WTF::StringImpl *)*((_QWORD *)&v257 + 1);
                          *((_QWORD *)&v257 + 1) = 0;
                          if (v68)
                          {
                            if (*(_DWORD *)v68 == 2)
                              WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v68 -= 2;
                          }
                          v69 = (WTF::StringImpl *)*((_QWORD *)&v256 + 1);
                          *((_QWORD *)&v256 + 1) = 0;
                          if (v69)
                          {
                            if (*(_DWORD *)v69 == 2)
                              WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v69 -= 2;
                          }
                          v70 = *(WTF::StringImpl **)&buf[8];
                          *(_QWORD *)&buf[8] = 0;
                          if (v70)
                          {
                            if (*(_DWORD *)v70 == 2)
                              WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v70 -= 2;
                          }
                          ++v55;
                        }
                        while (v55 != (uint64_t *)v235);
                      }
                      v71 = __ldxr(v50);
                      if (v71 == 1)
                      {
                        if (!__stlxr(0, v50))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v73 = v254;
              v254 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                  WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v48);
                else
                  *(_DWORD *)v73 -= 2;
              }
LABEL_132:
              *(_QWORD *)&v240 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(*((_QWORD *)this + 142)
                                                                                             + 72)
                                                                               + 840))(*(_QWORD *)(*((_QWORD *)this + 142) + 72), &v240);
              DWORD2(v240) = v74;
              BYTE12(v240) = v75;
              v76 = (WTF::MediaTime *)(*(_QWORD *(**)(uint8_t *__return_ptr, WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1432))(buf, this);
              v77 = *(_DWORD **)buf;
              v78 = *(_DWORD *)(*(_QWORD *)buf + 20);
              v79 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v76);
              v80 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v239, v79);
              v81 = 1;
              if ((_DWORD)v80)
              {
                v82 = 0;
                if (v78)
                {
LABEL_134:
                  v83 = WTF::MediaTime::compare((WTF::MediaTime *)&v240, (const WTF::MediaTime *)&v241);
                  v84 = !v82;
                  if (v83)
                    v84 = 1;
                  v85 = (v84 & 1) == 0
                     && *((_DWORD *)this + 244) != 1
                     && ((*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0x400000000) == 0;
LABEL_145:
                  v88 = *((_QWORD *)this + 144);
                  if (v88 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 32))(v88) & 1) == 0)
                  {
                    if (v77[5])
                      v98 = 0;
                    else
                      v98 = v85;
                    if (v98)
                    {
LABEL_148:
                      v89 = *((_QWORD *)this + 228);
                      v90 = *((_QWORD *)this + 229);
                      v242 = "HTMLMediaElement";
                      v243 = 17;
                      v244 = "seekTask";
                      v245 = v90;
                      if (!*(_BYTE *)(v89 + 12))
                      {
LABEL_338:
                        CanPlayAfterSeekedQuirk = WTF::MediaTime::compare((WTF::MediaTime *)&v240, (const WTF::MediaTime *)&v241);
                        if (!(_DWORD)CanPlayAfterSeekedQuirk)
                        {
                          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                          v193 = *(_QWORD *)(StatusReg + 736);
                          if (!v193 || (v194 = *(_QWORD *)(v193 + 96)) == 0)
                            v194 = WebCore::threadGlobalDataSlow((WebCore *)CanPlayAfterSeekedQuirk);
                          v195 = *(_QWORD *)(v194 + 40);
                          if (!v195)
                          {
                            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v194);
                            v195 = *(_QWORD *)(v194 + 40);
                          }
                          v196 = bmalloc::api::isoAllocate();
                          WTF::MonotonicTime::now((WTF::MonotonicTime *)v196);
                          *(_DWORD *)(v196 + 16) = 1;
                          *(_QWORD *)v196 = off_1E33A4B48;
                          *(_QWORD *)(v196 + 8) = 0;
                          *(_DWORD *)(v196 + 20) = *(_DWORD *)(v196 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v195 + 1768) != 0);
                          v198 = *(_DWORD **)(v195 + 1768);
                          if (v198)
                            *v198 += 2;
                          *(_QWORD *)(v196 + 24) = v198;
                          *(_QWORD *)(v196 + 32) = 0;
                          *(_QWORD *)(v196 + 40) = 0;
                          *(_QWORD *)(v196 + 48) = 0;
                          *(_QWORD *)(v196 + 56) = v197;
                          *(_QWORD *)(v196 + 64) = 0;
                          *(_QWORD *)buf = v196;
                          WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)buf);
                          v199 = *(_DWORD **)buf;
                          *(_QWORD *)buf = 0;
                          if (v199)
                          {
                            if (v199[4] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v199 + 8))(v199);
                            else
                              --v199[4];
                          }
                          v200 = WebCore::HTMLMediaElement::scheduleTimeupdateEvent(this, 0);
                          v201 = *(_QWORD *)(StatusReg + 736);
                          if (!v201 || (v202 = *(_QWORD *)(v201 + 96)) == 0)
                            v202 = WebCore::threadGlobalDataSlow(v200);
                          v203 = *(_QWORD *)(v202 + 40);
                          if (!v203)
                          {
                            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v202);
                            v203 = *(_QWORD *)(v202 + 40);
                          }
                          v204 = bmalloc::api::isoAllocate();
                          WTF::MonotonicTime::now((WTF::MonotonicTime *)v204);
                          *(_DWORD *)(v204 + 16) = 1;
                          *(_QWORD *)v204 = off_1E33A4B48;
                          *(_QWORD *)(v204 + 8) = 0;
                          *(_DWORD *)(v204 + 20) = *(_DWORD *)(v204 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v203 + 1760) != 0);
                          v206 = *(_DWORD **)(v203 + 1760);
                          if (v206)
                            *v206 += 2;
                          *(_QWORD *)(v204 + 24) = v206;
                          *(_QWORD *)(v204 + 32) = 0;
                          *(_QWORD *)(v204 + 40) = 0;
                          *(_QWORD *)(v204 + 48) = 0;
                          *(_QWORD *)(v204 + 56) = v205;
                          *(_QWORD *)(v204 + 64) = 0;
                          *(_QWORD *)buf = v204;
                          WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)buf);
                          v208 = *(_DWORD **)buf;
                          *(_QWORD *)buf = 0;
                          if (v208)
                          {
                            if (v208[4] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v208 + 8))(v208);
                            else
                              --v208[4];
                          }
                          v209 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 688);
                          if (!v209)
                            v209 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
                          CanPlayAfterSeekedQuirk = WebCore::Quirks::needsCanPlayAfterSeekedQuirk(v209, v207);
                          if ((_DWORD)CanPlayAfterSeekedQuirk && *((int *)this + 226) >= 3)
                          {
                            v210 = *(_QWORD *)(StatusReg + 736);
                            if (!v210 || (v211 = *(_QWORD *)(v210 + 96)) == 0)
                              v211 = WebCore::threadGlobalDataSlow((WebCore *)CanPlayAfterSeekedQuirk);
                            v212 = *(_QWORD *)(v211 + 40);
                            if (!v212)
                            {
                              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v211);
                              v212 = *(_QWORD *)(v211 + 40);
                            }
                            v213 = bmalloc::api::isoAllocate();
                            WTF::MonotonicTime::now((WTF::MonotonicTime *)v213);
                            *(_DWORD *)(v213 + 16) = 1;
                            *(_QWORD *)v213 = off_1E33A4B48;
                            *(_QWORD *)(v213 + 8) = 0;
                            *(_DWORD *)(v213 + 20) = *(_DWORD *)(v213 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v212 + 352) != 0);
                            v215 = *(_DWORD **)(v212 + 352);
                            if (v215)
                              *v215 += 2;
                            *(_QWORD *)(v213 + 24) = v215;
                            *(_QWORD *)(v213 + 32) = 0;
                            *(_QWORD *)(v213 + 40) = 0;
                            *(_QWORD *)(v213 + 48) = 0;
                            *(_QWORD *)(v213 + 56) = v214;
                            *(_QWORD *)(v213 + 64) = 0;
                            *(_QWORD *)buf = v213;
                            WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)buf);
                            CanPlayAfterSeekedQuirk = *(_QWORD *)buf;
                            *(_QWORD *)buf = 0;
                            if (CanPlayAfterSeekedQuirk)
                            {
                              if (*(_DWORD *)(CanPlayAfterSeekedQuirk + 16) == 1)
                                CanPlayAfterSeekedQuirk = (*(uint64_t (**)(uint64_t))(*(_QWORD *)CanPlayAfterSeekedQuirk
                                                                                             + 8))(CanPlayAfterSeekedQuirk);
                              else
                                --*(_DWORD *)(CanPlayAfterSeekedQuirk + 16);
                            }
                          }
                        }
                        v216 = *((_QWORD *)this + 142);
                        if (v216)
                        {
                          v217 = WTF::MediaTime::invalidTime((WTF::MediaTime *)CanPlayAfterSeekedQuirk);
                          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v216 + 72) + 384))(*(_QWORD *)(v216 + 72), v217);
                        }
                        v218 = WebCore::HTMLMediaElement::setSeeking((unsigned __int8 *)this, 0);
                        v219 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
                        *((_DWORD *)this + 244) = 0;
                        v219 &= 0xFFFFFFFFFFFF3FFFLL;
                        *(_DWORD *)((char *)this + 1265) = v219;
                        *(_WORD *)((char *)this + 1269) = WORD2(v219);
                        v220 = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v218);
                        v221 = *(_QWORD *)((char *)v220 + 5);
                        *((_QWORD *)this + 148) = *v220;
                        *(_QWORD *)((char *)this + 1189) = v221;
                        v222 = *((_QWORD *)this + 142);
                        if (v222
                          && (*(double (**)(_QWORD))(**(_QWORD **)(v222 + 72) + 848))(*(_QWORD *)(v222 + 72)) != 0.0)
                        {
                          WTF::MonotonicTime::now(v223);
                          *((double *)this + 151) = v224 + 0.5;
                        }
                        goto LABEL_388;
                      }
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v242);
                      WTF::String::String((WTF::String *)&v253, "ignored seek to ");
                      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v240);
                      if (v254)
                      {
                        v91 = *((_DWORD *)v254 + 1);
                        if (v253)
                          goto LABEL_151;
                      }
                      else
                      {
                        v91 = 0;
                        if (v253)
                        {
LABEL_151:
                          v92 = *((_DWORD *)v253 + 1);
                          if (v252)
                          {
LABEL_152:
                            v93 = *((_DWORD *)v252 + 1);
LABEL_153:
                            if ((v93 | v92) < 0
                              || ((v34 = __OFADD__(v92, v93), v94 = v92 + v93, !v34) ? (v95 = 0) : (v95 = 1),
                                  v91 < 0 || (v95 & 1) != 0 || (v96 = (v91 + v94), __OFADD__(v91, v94))))
                            {
                              v236[0] = 0;
                              goto LABEL_434;
                            }
                            if (v254 && (*((_BYTE *)v254 + 16) & 4) == 0)
                            {
                              v97 = 0;
                              goto LABEL_195;
                            }
                            if (v253)
                            {
                              v122 = *((_DWORD *)v253 + 4);
                              v97 = (v122 >> 2) & 1;
                              if (v252 && (v122 & 4) != 0)
                                goto LABEL_194;
                            }
                            else
                            {
                              if (v252)
                              {
LABEL_194:
                                v97 = (*((unsigned __int8 *)v252 + 16) >> 2) & 1;
                                goto LABEL_195;
                              }
                              v97 = 1;
                            }
LABEL_195:
                            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v96, v97, v254, (uint64_t)v253, (uint64_t)v252, v236);
                            if (v236[0])
                            {
                              v124 = v252;
                              v252 = 0;
                              if (v124)
                              {
                                if (*(_DWORD *)v124 == 2)
                                  WTF::StringImpl::destroy(v124, v123);
                                else
                                  *(_DWORD *)v124 -= 2;
                              }
                              v125 = v253;
                              v253 = 0;
                              if (v125)
                              {
                                if (*(_DWORD *)v125 == 2)
                                  WTF::StringImpl::destroy(v125, v123);
                                else
                                  *(_DWORD *)v125 -= 2;
                              }
                              v126 = v254;
                              v254 = 0;
                              if (v126)
                              {
                                if (*(_DWORD *)v126 == 2)
                                  WTF::StringImpl::destroy(v126, v123);
                                else
                                  *(_DWORD *)v126 -= 2;
                              }
                              v127 = qword_1ECE7C4A0;
                              v128 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                              if ((_DWORD)v128)
                              {
                                WTF::String::utf8();
                                v130 = v246 ? (char *)v246 + 16 : 0;
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = v130;
                                _os_log_impl(&dword_1940B8000, v127, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                                v128 = (uint64_t)v246;
                                v246 = 0;
                                if (v128)
                                {
                                  if (*(_DWORD *)v128 == 1)
                                    v128 = WTF::fastFree((WTF *)v128, v129);
                                  else
                                    --*(_DWORD *)v128;
                                }
                              }
                              if (WebCore::LogMedia)
                              {
                                v131 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                                while (1)
                                {
                                  v132 = *v131;
                                  if ((v132 & 1) != 0)
                                    break;
                                  v133 = __ldaxr(v131);
                                  if (v133 == v132)
                                  {
                                    if (!__stxr(v132 | 1, v131))
                                    {
                                      v232 = v77;
                                      v134 = WTF::Logger::observers((WTF::Logger *)v128);
                                      v135 = *(unsigned int *)(v134 + 12);
                                      if ((_DWORD)v135)
                                      {
                                        v136 = *(uint64_t **)v134;
                                        v137 = *(_QWORD *)v134 + 8 * v135;
                                        do
                                        {
                                          v138 = *v136;
                                          *(_DWORD *)buf = 0;
                                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v242);
                                          LODWORD(v256) = 0;
                                          WTF::String::String((WTF::String *)((char *)&v256 + 8), "ignored seek to ");
                                          LODWORD(v257) = 1;
                                          WTF::MediaTime::toJSONString((WTF::MediaTime *)&v240);
                                          v246 = 0;
                                          v247 = 0;
                                          v139 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                                          LODWORD(v247) = 3;
                                          v246 = v139;
                                          v140 = HIDWORD(v247);
                                          *((_DWORD *)v139 + 4 * HIDWORD(v247)) = *(_DWORD *)buf;
                                          v141 = *(_QWORD *)&buf[8];
                                          if (*(_QWORD *)&buf[8])
                                            **(_DWORD **)&buf[8] += 2;
                                          *((_QWORD *)v139 + 2 * v140 + 1) = v141;
                                          *((_DWORD *)v139 + 4 * (v140 + 1)) = v256;
                                          v142 = *((_QWORD *)&v256 + 1);
                                          if (*((_QWORD *)&v256 + 1))
                                            **((_DWORD **)&v256 + 1) += 2;
                                          *((_QWORD *)v139 + 2 * (v140 + 1) + 1) = v142;
                                          *((_DWORD *)v139 + 4 * (v140 + 2)) = v257;
                                          v143 = *((_QWORD *)&v257 + 1);
                                          if (*((_QWORD *)&v257 + 1))
                                            **((_DWORD **)&v257 + 1) += 2;
                                          *((_QWORD *)v139 + 2 * (v140 + 2) + 1) = v143;
                                          HIDWORD(v247) = v140 + 3;
                                          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v138 + 16))(v138, &WebCore::LogMedia, 0, &v246);
                                          v144 = v246;
                                          if (HIDWORD(v247))
                                          {
                                            v145 = 16 * HIDWORD(v247);
                                            v146 = (WTF::StringImpl **)((char *)v246 + 8);
                                            do
                                            {
                                              v147 = *v146;
                                              *v146 = 0;
                                              if (v147)
                                              {
                                                if (*(_DWORD *)v147 == 2)
                                                  WTF::StringImpl::destroy(v147, (WTF::StringImpl *)v129);
                                                else
                                                  *(_DWORD *)v147 -= 2;
                                              }
                                              v146 += 2;
                                              v145 -= 16;
                                            }
                                            while (v145);
                                            v144 = v246;
                                          }
                                          if (v144)
                                          {
                                            v246 = 0;
                                            LODWORD(v247) = 0;
                                            WTF::fastFree(v144, v129);
                                          }
                                          v148 = (WTF::StringImpl *)*((_QWORD *)&v257 + 1);
                                          *((_QWORD *)&v257 + 1) = 0;
                                          if (v148)
                                          {
                                            if (*(_DWORD *)v148 == 2)
                                              WTF::StringImpl::destroy(v148, (WTF::StringImpl *)v129);
                                            else
                                              *(_DWORD *)v148 -= 2;
                                          }
                                          v149 = (WTF::StringImpl *)*((_QWORD *)&v256 + 1);
                                          *((_QWORD *)&v256 + 1) = 0;
                                          if (v149)
                                          {
                                            if (*(_DWORD *)v149 == 2)
                                              WTF::StringImpl::destroy(v149, (WTF::StringImpl *)v129);
                                            else
                                              *(_DWORD *)v149 -= 2;
                                          }
                                          v150 = *(WTF::StringImpl **)&buf[8];
                                          *(_QWORD *)&buf[8] = 0;
                                          if (v150)
                                          {
                                            if (*(_DWORD *)v150 == 2)
                                              WTF::StringImpl::destroy(v150, (WTF::StringImpl *)v129);
                                            else
                                              *(_DWORD *)v150 -= 2;
                                          }
                                          ++v136;
                                        }
                                        while (v136 != (uint64_t *)v137);
                                      }
                                      v151 = __ldxr(v131);
                                      if (v151 == 1)
                                      {
                                        v77 = v232;
                                        if (!__stlxr(0, v131))
                                          break;
                                      }
                                      else
                                      {
                                        __clrex();
                                        v77 = v232;
                                      }
                                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                                      break;
                                    }
                                  }
                                  else
                                  {
                                    __clrex();
                                  }
                                }
                              }
                              v190 = v236[0];
                              v236[0] = 0;
                              if (v190)
                              {
                                if (*(_DWORD *)v190 == 2)
                                  WTF::StringImpl::destroy(v190, (WTF::StringImpl *)v129);
                                else
                                  *(_DWORD *)v190 -= 2;
                              }
                              goto LABEL_338;
                            }
LABEL_434:
                            __break(0xC471u);
                            JUMPOUT(0x195C22F7CLL);
                          }
LABEL_410:
                          v93 = 0;
                          goto LABEL_153;
                        }
                      }
                      v92 = 0;
                      if (v252)
                        goto LABEL_152;
                      goto LABEL_410;
                    }
                  }
                  else if (v85)
                  {
                    goto LABEL_148;
                  }
                  v99 = WebCore::PlatformTimeRanges::nearest((WebCore::PlatformTimeRanges *)(v77 + 2), (const WTF::MediaTime *)&v240);
                  *(_QWORD *)&v240 = v99;
                  DWORD2(v240) = v100;
                  BYTE12(v240) = v101;
                  v102 = *(_DWORD *)((_BYTE *)this + 1265) & 0xFFFDFFFF | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
                  *(_DWORD *)((char *)this + 1265) &= ~0x20000u;
                  *(_WORD *)((char *)this + 1269) = WORD2(v102);
                  *((_QWORD *)this + 125) = v99;
                  *(_QWORD *)((char *)this + 1005) = *(_QWORD *)((char *)&v240 + 5);
                  *((_DWORD *)this + 244) = v81;
                  v103 = WebCore::HTMLMediaElement::setSeeking((unsigned __int8 *)this, (void *)1);
                  v104 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                  if (!v104 || (v105 = *(_QWORD *)(v104 + 96)) == 0)
                    v105 = WebCore::threadGlobalDataSlow((WebCore *)v103);
                  v106 = *(_QWORD *)(v105 + 40);
                  if (!v106)
                  {
                    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v105);
                    v106 = *(_QWORD *)(v105 + 40);
                  }
                  v107 = bmalloc::api::isoAllocate();
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)v107);
                  *(_DWORD *)(v107 + 16) = 1;
                  *(_QWORD *)v107 = off_1E33A4B48;
                  *(_QWORD *)(v107 + 8) = 0;
                  *(_DWORD *)(v107 + 20) = *(_DWORD *)(v107 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v106 + 1768) != 0);
                  v109 = *(_DWORD **)(v106 + 1768);
                  if (v109)
                    *v109 += 2;
                  *(_QWORD *)(v107 + 24) = v109;
                  *(_QWORD *)(v107 + 32) = 0;
                  *(_QWORD *)(v107 + 40) = 0;
                  *(_QWORD *)(v107 + 48) = 0;
                  *(_QWORD *)(v107 + 56) = v108;
                  *(_QWORD *)(v107 + 64) = 0;
                  *(_QWORD *)buf = v107;
                  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)buf);
                  v110 = *(WTF::MediaTime **)buf;
                  *(_QWORD *)buf = 0;
                  if (v110)
                  {
                    if (*((_DWORD *)v110 + 4) == 1)
                      v110 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v110 + 8))(v110);
                    else
                      --*((_DWORD *)v110 + 4);
                  }
                  *(_DWORD *)((char *)this + 1265) |= 0x4000u;
                  v111 = *((_QWORD *)this + 142);
                  if (!v111)
                  {
                    *(_OWORD *)buf = v240;
                    v256 = v239;
                    v257 = v238;
                    v229 = MEMORY[0x48];
                    v230 = WTF::MediaTime::invalidTime(v110);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v229 + 384))(v229, v230);
                    (*(void (**)(_QWORD, uint8_t *))(*MEMORY[0x48] + 400))(MEMORY[0x48], buf);
LABEL_188:
                    if (!*((_QWORD *)this + 219))
                      goto LABEL_384;
                    WTF::MediaTime::toDouble((WTF::MediaTime *)&v240);
                    v119 = v118;
                    *(_OWORD *)buf = *(_OWORD *)(*((_QWORD *)this + 219) + 64);
                    WTF::MediaTime::toDouble((WTF::MediaTime *)buf);
                    if (v119 >= v120)
                    {
                      WTF::MediaTime::toDouble((WTF::MediaTime *)&v240);
                      v153 = v152;
                      *(_OWORD *)buf = *(_OWORD *)(*((_QWORD *)this + 219) + 80);
                      WTF::MediaTime::toDouble((WTF::MediaTime *)buf);
                      v121 = v153 < v154;
                    }
                    else
                    {
                      v121 = 0;
                    }
                    v155 = *((_QWORD *)this + 228);
                    v156 = *((_QWORD *)this + 229);
                    v242 = "HTMLMediaElement";
                    v243 = 17;
                    v244 = "shouldSpeakCueTextForTime";
                    v245 = v156;
                    if (*(_BYTE *)(v155 + 12))
                    {
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v242);
                      WTF::String::String((WTF::String *)&v250, "time = ");
                      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v240);
                      WTF::String::String((WTF::String *)&v248, ", returning ");
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v157 = *(WTF::StringImpl **)buf;
                      v246 = v250;
                      v236[0] = v249;
                      v254 = v248;
                      *(_QWORD *)buf = v251;
                      v253 = v157;
                      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v246, (uint64_t *)v236, (uint64_t *)&v254, (uint64_t *)&v253, &v252);
                      if (!v252)
                        goto LABEL_434;
                      if (v157)
                      {
                        if (*(_DWORD *)v157 == 2)
                          WTF::StringImpl::destroy(v157, v158);
                        else
                          *(_DWORD *)v157 -= 2;
                      }
                      v159 = v248;
                      v248 = 0;
                      if (v159)
                      {
                        if (*(_DWORD *)v159 == 2)
                          WTF::StringImpl::destroy(v159, v158);
                        else
                          *(_DWORD *)v159 -= 2;
                      }
                      v160 = v249;
                      v249 = 0;
                      if (v160)
                      {
                        if (*(_DWORD *)v160 == 2)
                          WTF::StringImpl::destroy(v160, v158);
                        else
                          *(_DWORD *)v160 -= 2;
                      }
                      v161 = v250;
                      v250 = 0;
                      if (v161)
                      {
                        if (*(_DWORD *)v161 == 2)
                          WTF::StringImpl::destroy(v161, v158);
                        else
                          *(_DWORD *)v161 -= 2;
                      }
                      v162 = v251;
                      v251 = 0;
                      if (v162)
                      {
                        if (*(_DWORD *)v162 == 2)
                          WTF::StringImpl::destroy(v162, v158);
                        else
                          *(_DWORD *)v162 -= 2;
                      }
                      v163 = qword_1ECE7C4A0;
                      v164 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                      if ((_DWORD)v164)
                      {
                        WTF::String::utf8();
                        v165 = v246 ? (char *)v246 + 16 : 0;
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = v165;
                        _os_log_impl(&dword_1940B8000, v163, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                        v164 = (uint64_t)v246;
                        v246 = 0;
                        if (v164)
                        {
                          if (*(_DWORD *)v164 == 1)
                            v164 = WTF::fastFree((WTF *)v164, v117);
                          else
                            --*(_DWORD *)v164;
                        }
                      }
                      if (WebCore::LogMedia)
                      {
                        v166 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                        while (1)
                        {
                          v167 = *v166;
                          if ((v167 & 1) != 0)
                            break;
                          v168 = __ldaxr(v166);
                          if (v168 == v167)
                          {
                            if (!__stxr(v167 | 1, v166))
                            {
                              v231 = v121;
                              v233 = v77;
                              v169 = WTF::Logger::observers((WTF::Logger *)v164);
                              v170 = *(unsigned int *)(v169 + 12);
                              if ((_DWORD)v170)
                              {
                                v171 = *(uint64_t **)v169;
                                v234 = *(_QWORD *)v169 + 8 * v170;
                                do
                                {
                                  v172 = *v171;
                                  *(_DWORD *)buf = 0;
                                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v242);
                                  LODWORD(v256) = 0;
                                  WTF::String::String((WTF::String *)((char *)&v256 + 8), "time = ");
                                  LODWORD(v257) = 1;
                                  WTF::MediaTime::toJSONString((WTF::MediaTime *)&v240);
                                  v258 = 0;
                                  WTF::String::String((WTF::String *)&v259, ", returning ");
                                  v260 = 0;
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v261 = v246;
                                  v246 = 0;
                                  v247 = 0;
                                  v173 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                                  LODWORD(v247) = 5;
                                  v246 = v173;
                                  v174 = HIDWORD(v247);
                                  *((_DWORD *)v173 + 4 * HIDWORD(v247)) = *(_DWORD *)buf;
                                  v175 = *(_QWORD *)&buf[8];
                                  if (*(_QWORD *)&buf[8])
                                    **(_DWORD **)&buf[8] += 2;
                                  *((_QWORD *)v173 + 2 * v174 + 1) = v175;
                                  *((_DWORD *)v173 + 4 * (v174 + 1)) = v256;
                                  v176 = *((_QWORD *)&v256 + 1);
                                  if (*((_QWORD *)&v256 + 1))
                                    **((_DWORD **)&v256 + 1) += 2;
                                  *((_QWORD *)v173 + 2 * (v174 + 1) + 1) = v176;
                                  *((_DWORD *)v173 + 4 * (v174 + 2)) = v257;
                                  v177 = *((_QWORD *)&v257 + 1);
                                  if (*((_QWORD *)&v257 + 1))
                                    **((_DWORD **)&v257 + 1) += 2;
                                  *((_QWORD *)v173 + 2 * (v174 + 2) + 1) = v177;
                                  *((_DWORD *)v173 + 4 * (v174 + 3)) = v258;
                                  v178 = v259;
                                  if (v259)
                                    *(_DWORD *)v259 += 2;
                                  *((_QWORD *)v173 + 2 * (v174 + 3) + 1) = v178;
                                  *((_DWORD *)v173 + 4 * (v174 + 4)) = v260;
                                  v179 = v261;
                                  if (v261)
                                    *(_DWORD *)v261 += 2;
                                  *((_QWORD *)v173 + 2 * (v174 + 4) + 1) = v179;
                                  HIDWORD(v247) = v174 + 5;
                                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v172
                                                                                                  + 16))(v172, &WebCore::LogMedia, 0, &v246);
                                  v180 = v246;
                                  if (HIDWORD(v247))
                                  {
                                    v181 = 16 * HIDWORD(v247);
                                    v182 = (WTF::StringImpl **)((char *)v246 + 8);
                                    do
                                    {
                                      v183 = *v182;
                                      *v182 = 0;
                                      if (v183)
                                      {
                                        if (*(_DWORD *)v183 == 2)
                                          WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v117);
                                        else
                                          *(_DWORD *)v183 -= 2;
                                      }
                                      v182 += 2;
                                      v181 -= 16;
                                    }
                                    while (v181);
                                    v180 = v246;
                                  }
                                  if (v180)
                                  {
                                    v246 = 0;
                                    LODWORD(v247) = 0;
                                    WTF::fastFree(v180, v117);
                                  }
                                  v184 = v261;
                                  v261 = 0;
                                  if (v184)
                                  {
                                    if (*(_DWORD *)v184 == 2)
                                      WTF::StringImpl::destroy(v184, (WTF::StringImpl *)v117);
                                    else
                                      *(_DWORD *)v184 -= 2;
                                  }
                                  v185 = v259;
                                  v259 = 0;
                                  if (v185)
                                  {
                                    if (*(_DWORD *)v185 == 2)
                                      WTF::StringImpl::destroy(v185, (WTF::StringImpl *)v117);
                                    else
                                      *(_DWORD *)v185 -= 2;
                                  }
                                  v186 = (WTF::StringImpl *)*((_QWORD *)&v257 + 1);
                                  *((_QWORD *)&v257 + 1) = 0;
                                  if (v186)
                                  {
                                    if (*(_DWORD *)v186 == 2)
                                      WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v117);
                                    else
                                      *(_DWORD *)v186 -= 2;
                                  }
                                  v187 = (WTF::StringImpl *)*((_QWORD *)&v256 + 1);
                                  *((_QWORD *)&v256 + 1) = 0;
                                  if (v187)
                                  {
                                    if (*(_DWORD *)v187 == 2)
                                      WTF::StringImpl::destroy(v187, (WTF::StringImpl *)v117);
                                    else
                                      *(_DWORD *)v187 -= 2;
                                  }
                                  v188 = *(WTF::StringImpl **)&buf[8];
                                  *(_QWORD *)&buf[8] = 0;
                                  if (v188)
                                  {
                                    if (*(_DWORD *)v188 == 2)
                                      WTF::StringImpl::destroy(v188, (WTF::StringImpl *)v117);
                                    else
                                      *(_DWORD *)v188 -= 2;
                                  }
                                  ++v171;
                                }
                                while (v171 != (uint64_t *)v234);
                              }
                              v189 = __ldxr(v166);
                              if (v189 == 1)
                              {
                                v77 = v233;
                                v121 = v231;
                                if (!__stlxr(0, v166))
                                  break;
                              }
                              else
                              {
                                __clrex();
                                v77 = v233;
                                v121 = v231;
                              }
                              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                              break;
                            }
                          }
                          else
                          {
                            __clrex();
                          }
                        }
                      }
                      v225 = v252;
                      v252 = 0;
                      if (v225)
                      {
                        if (*(_DWORD *)v225 == 2)
                        {
                          WTF::StringImpl::destroy(v225, (WTF::StringImpl *)v117);
                          if (!v121)
                          {
LABEL_384:
                            if (*((_BYTE *)this + 1744))
                            {
                              v226 = *((_QWORD *)this + 228);
                              v227 = *((_QWORD *)this + 229);
                              *(_QWORD *)buf = "HTMLMediaElement";
                              *(_QWORD *)&buf[8] = 17;
                              *(_QWORD *)&v256 = "cancelSpeakingCueText";
                              *((_QWORD *)&v256 + 1) = v227;
                              if (*(_BYTE *)(v226 + 12))
                                WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)buf);
                              WebCore::HTMLMediaElement::setSpeechSynthesisState(this, 0);
                            }
                          }
LABEL_388:
                          if (v77)
                          {
                            if (*v77 == 1)
                            {
                              v228 = (WTF *)*((_QWORD *)v77 + 1);
                              if (v228)
                              {
                                *((_QWORD *)v77 + 1) = 0;
                                v77[4] = 0;
                                WTF::fastFree(v228, v117);
                              }
                              WTF::fastFree((WTF *)v77, v117);
                            }
                            else
                            {
                              --*v77;
                            }
                          }
                          return;
                        }
                        *(_DWORD *)v225 -= 2;
                      }
                    }
                    if (!v121)
                      goto LABEL_384;
                    goto LABEL_388;
                  }
                  v112 = *(unsigned __int8 **)v111;
                  if (__ldaxr(*(unsigned __int8 **)v111))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, v112))
                  {
                    goto LABEL_182;
                  }
                  v110 = (WTF::MediaTime *)MEMORY[0x19AEA534C](v112);
LABEL_182:
                  ++*((_QWORD *)v112 + 1);
                  v114 = __ldxr(v112);
                  if (v114 == 1)
                  {
                    if (!__stlxr(0, v112))
                      goto LABEL_187;
                  }
                  else
                  {
                    __clrex();
                  }
                  v110 = (WTF::MediaTime *)WTF::Lock::unlockSlow((WTF::Lock *)v112);
LABEL_187:
                  *(_OWORD *)buf = v240;
                  v256 = v239;
                  v257 = v238;
                  v115 = *(_QWORD *)(v111 + 72);
                  v116 = WTF::MediaTime::invalidTime(v110);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 384))(v115, v116);
                  (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v111 + 72) + 400))(*(_QWORD *)(v111 + 72), buf);
                  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v111);
                  goto LABEL_188;
                }
              }
              else
              {
                v86 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v80);
                v87 = WTF::MediaTime::compare((WTF::MediaTime *)&v238, v86);
                v82 = v87 == 0;
                if (v87)
                  v81 = 1;
                else
                  v81 = 2;
                if (v78)
                  goto LABEL_134;
              }
              v85 = 1;
              goto LABEL_145;
            }
LABEL_433:
            __break(0xC471u);
            JUMPOUT(0x195C22F88);
          }
LABEL_426:
          v33 = 0;
          goto LABEL_37;
        }
LABEL_425:
        v32 = 0;
        if (v250)
          goto LABEL_36;
        goto LABEL_426;
      }
      v10 = *(uint64_t (**)(void))(**(_QWORD **)(v20 + 72) + 336);
    }
    v11 = v10();
    goto LABEL_19;
  }
  v13 = WebCore::HTMLMediaElement::setSeeking((unsigned __int8 *)this, 0);
  v14 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  *((_DWORD *)this + 244) = 0;
  v14 &= 0xFFFFFFFFFFFF3FFFLL;
  *(_DWORD *)((char *)this + 1265) = v14;
  *(_WORD *)((char *)this + 1269) = WORD2(v14);
  v15 = (_QWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v13);
  v16 = *(_QWORD *)((char *)v15 + 5);
  *((_QWORD *)this + 148) = *v15;
  *(_QWORD *)((char *)this + 1189) = v16;
  v17 = *((_QWORD *)this + 142);
  if (v17 && (*(double (**)(_QWORD))(**(_QWORD **)(v17 + 72) + 848))(*(_QWORD *)(v17 + 72)) != 0.0)
  {
    WTF::MonotonicTime::now(v18);
    *((double *)this + 151) = v19 + 0.5;
  }
}

uint64_t WebCore::HTMLMediaElement::readyState(WebCore::HTMLMediaElement *this)
{
  return *((unsigned int *)this + 226);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::readyState(WebCore::HTMLMediaElement *this)
{
  return *((unsigned int *)this + 192);
}

uint64_t WebCore::HTMLMediaElement::mediaSessionGroupIdentifier(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  result = *(_QWORD *)(v4 + 1728);
  if (result)
    return result;
  if (!*(_BYTE *)(v4 + 40))
    return 0;
  result = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 1728) = result;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaSessionGroupIdentifier(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 13) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  result = *(_QWORD *)(v4 + 1728);
  if (result)
    return result;
  if (!*(_BYTE *)(v4 + 40))
    return 0;
  result = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 1728) = result;
  return result;
}

uint64_t WebCore::HTMLMediaElement::hasAudio(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 142);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 304))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::hasAudio(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 125);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 304))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

unint64_t WebCore::HTMLMediaElement::seeking(WebCore::HTMLMediaElement *this)
{
  return ((unint64_t)*(unsigned int *)((char *)this + 1265) >> 11) & 1;
}

uint64_t WebCore::HTMLMediaElement::currentTime(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = WebCore::HTMLMediaElement::currentMediaTime(this);
  v3[1] = v1;
  return WTF::MediaTime::toDouble((WTF::MediaTime *)v3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::currentTime(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)((char *)this - 136));
  v3[1] = v1;
  return WTF::MediaTime::toDouble((WTF::MediaTime *)v3);
}

double WebCore::HTMLMediaElement::effectivePlaybackRate(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 177);
  if (!v1)
    return *((double *)this + 110);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 40))(*(_QWORD *)(v1 + 256));
  return result;
}

unsigned int *WebCore::HTMLMediaElement::setCurrentTime(WebCore::HTMLMediaElement *this, double a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::MediaTime *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  result = (unsigned int *)WTF::MediaTime::createWithDouble(this, a2);
  *(_QWORD *)&v9 = result;
  *((_QWORD *)&v9 + 1) = v4;
  if (!*((_QWORD *)this + 177))
  {
    v5 = *((_QWORD *)this + 228);
    v6 = *((_QWORD *)this + 229);
    *(_QWORD *)&v10 = "HTMLMediaElement";
    *((_QWORD *)&v10 + 1) = 17;
    *(_QWORD *)&v11 = "seekInternal";
    *((_QWORD *)&v11 + 1) = v6;
    if (*(_BYTE *)(v5 + 12))
      result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v10, (WTF::MediaTime *)&v9);
    v7 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
    v8 = (__int128 *)WTF::MediaTime::zeroTime(v7);
    v10 = v9;
    v11 = *(_OWORD *)v7;
    v12 = *v8;
    return WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)this, (const WebCore::SeekTarget *)&v10, 0);
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMediaElement::setCurrentTime(WebCore::HTMLMediaElement *this, double a2)
{
  return WebCore::HTMLMediaElement::setCurrentTime((WebCore::HTMLMediaElement *)((char *)this - 136), a2);
}

uint64_t WebCore::HTMLMediaElement::setCurrentTimeForBindings@<X0>(uint64_t this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::MediaTime *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::MediaTime *v9;
  __int128 *v10;
  int v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*(_QWORD *)(this + 1416))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v4 = this;
    if (*(_DWORD *)(this + 904) && *(_QWORD *)(this + 1136))
    {
      v5 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)this, a2);
      *(_QWORD *)&v13 = v5;
      *((_QWORD *)&v13 + 1) = v6;
      v7 = *(_QWORD *)(v4 + 1824);
      v8 = *(_QWORD *)(v4 + 1832);
      *(_QWORD *)&v14 = "HTMLMediaElement";
      *((_QWORD *)&v14 + 1) = 17;
      *(_QWORD *)&v15 = "seek";
      *((_QWORD *)&v15 + 1) = v8;
      if (*(_BYTE *)(v7 + 12))
        v5 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v14, (WTF::MediaTime *)&v13);
      v9 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v5);
      v10 = (__int128 *)WTF::MediaTime::zeroTime(v9);
      v14 = v13;
      v15 = *(_OWORD *)v9;
      v16 = *v10;
      this = (uint64_t)WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)v4, (const WebCore::SeekTarget *)&v14, 1);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    else
    {
      this = WTF::MediaTime::createWithDouble((WTF::MediaTime *)this, a2);
      *(_QWORD *)(v4 + 1168) = this;
      *(_DWORD *)(v4 + 1176) = v11;
      *(_BYTE *)(v4 + 1180) = v12;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::duration(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD v7[2];

  v1 = *((_QWORD *)this + 144);
  if (v1)
  {
    v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 40))(*((_QWORD *)this + 144));
  }
  else
  {
    v4 = *((_QWORD *)this + 142);
    if (v4 && *((int *)this + 226) >= 1)
    {
      v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 336))(*(_QWORD *)(v4 + 72));
    }
    else
    {
      v5 = (uint64_t *)WTF::MediaTime::invalidTime(this);
      v2 = *v5;
      v3 = v5[1];
    }
  }
  v7[0] = v2;
  v7[1] = v3;
  return WTF::MediaTime::toDouble((WTF::MediaTime *)v7);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::duration(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD v7[2];

  v1 = *((_QWORD *)this + 127);
  if (v1)
  {
    v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 40))(*((_QWORD *)this + 127));
  }
  else
  {
    v4 = *((_QWORD *)this + 125);
    if (v4 && *((int *)this + 192) >= 1)
    {
      v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 336))(*(_QWORD *)(v4 + 72));
    }
    else
    {
      v5 = (uint64_t *)WTF::MediaTime::invalidTime(this);
      v2 = *v5;
      v3 = v5[1];
    }
  }
  v7[0] = v2;
  v7[1] = v3;
  return WTF::MediaTime::toDouble((WTF::MediaTime *)v7);
}

unint64_t WebCore::HTMLMediaElement::paused(WebCore::HTMLMediaElement *this)
{
  return ((unint64_t)*(unsigned int *)((char *)this + 1265) >> 10) & 1;
}

unint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::paused(WebCore::HTMLMediaElement *this)
{
  return ((unint64_t)*(unsigned int *)((char *)this + 1129) >> 10) & 1;
}

double WebCore::HTMLMediaElement::defaultPlaybackRate(WebCore::HTMLMediaElement *this)
{
  double result;

  result = 1.0;
  if (!*((_QWORD *)this + 204))
    return *((double *)this + 111);
  return result;
}

double `non-virtual thunk to'WebCore::HTMLMediaElement::defaultPlaybackRate(WebCore::HTMLMediaElement *this)
{
  double result;

  result = 1.0;
  if (!*((_QWORD *)this + 187))
    return *((double *)this + 94);
  return result;
}

uint64_t WebCore::HTMLMediaElement::setDefaultPlaybackRate(uint64_t this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11[4];
  double v12;

  v12 = a2;
  if (!*(_QWORD *)(this + 1632))
  {
    v2 = this;
    if (*(double *)(this + 888) != a2)
    {
      v3 = *(_QWORD *)(this + 1824);
      v4 = *(_QWORD *)(this + 1832);
      v11[0] = (uint64_t)"HTMLMediaElement";
      v11[1] = 17;
      v11[2] = (uint64_t)"setDefaultPlaybackRate";
      v11[3] = v4;
      if (*(_BYTE *)(v3 + 12))
      {
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, &v12);
        a2 = v12;
      }
      *(double *)(v2 + 888) = a2;
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
        v6 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v7 = *(_QWORD *)(v6 + 40);
      if (!v7)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
        v7 = *(_QWORD *)(v6 + 40);
      }
      v8 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      *(_DWORD *)(v8 + 16) = 1;
      *(_QWORD *)v8 = off_1E33A4B48;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v7 + 1624) != 0);
      v10 = *(_DWORD **)(v7 + 1624);
      if (v10)
        *v10 += 2;
      *(_QWORD *)(v8 + 24) = v10;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = v9;
      *(_QWORD *)(v8 + 64) = 0;
      v11[0] = v8;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v2 + 112), v2, 9, v2 + 824, v11);
      this = v11[0];
      v11[0] = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 16) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 16);
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::setDefaultPlaybackRate(WebCore::HTMLMediaElement *this, double a2)
{
  return WebCore::HTMLMediaElement::setDefaultPlaybackRate((uint64_t)this - 136, a2);
}

double WebCore::HTMLMediaElement::playbackRate(WebCore::HTMLMediaElement *this)
{
  double result;

  result = 1.0;
  if (!*((_QWORD *)this + 204))
    return *((double *)this + 109);
  return result;
}

double `non-virtual thunk to'WebCore::HTMLMediaElement::playbackRate(WebCore::HTMLMediaElement *this)
{
  double result;

  result = 1.0;
  if (!*((_QWORD *)this + 187))
    return *((double *)this + 92);
  return result;
}

void WebCore::HTMLMediaElement::setPlaybackRate(uint64_t this, double a2)
{
  WebCore::HTMLMediaElement *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  WebCore::HTMLMediaElement **v8;
  uint64_t v9;
  char v10;
  WebCore::HTMLMediaElement *v11;
  uint64_t v12;
  WebCore::HTMLMediaElement *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  WTF::MonotonicTime *v22;
  double v23;
  double v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41[4];
  double v42;

  v2 = (WebCore::HTMLMediaElement *)this;
  v42 = a2;
  v3 = *(_QWORD *)(this + 1824);
  v4 = *(_QWORD *)(this + 1832);
  v41[0] = (uint64_t)"HTMLMediaElement";
  v41[1] = 17;
  v41[2] = (uint64_t)"setPlaybackRate";
  v41[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v41, &v42);
  if (!*((_QWORD *)v2 + 204))
  {
    if (*((_QWORD *)v2 + 142))
    {
      v5 = *((_QWORD *)v2 + 177);
      if (!v5)
        goto LABEL_31;
      if (!*(_BYTE *)(v5 + 72))
      {
        v6 = *(unsigned int *)(v5 + 68);
        v7 = 0.0;
        if ((_DWORD)v6)
        {
          v8 = *(WebCore::HTMLMediaElement ***)(v5 + 56);
          v9 = 8 * v6;
          v10 = 1;
          while (1)
          {
            v11 = *v8;
            if (*((int *)*v8 + 226) < 3)
              goto LABEL_46;
            v12 = *((_QWORD *)v11 + 200);
            if (!v12)
            {
              this = (uint64_t)WebCore::HTMLMediaElement::initializeMediaSession(*v8);
              v12 = *((_QWORD *)v11 + 200);
            }
            if (*(_BYTE *)(v12 + 48) == 4)
              goto LABEL_46;
            v13 = *v8;
            if ((*(_DWORD *)((_BYTE *)*v8 + 1265) & 0x40) != 0)
            {
              this = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v13 + 1384))(v13);
              if ((this & 1) != 0)
                goto LABEL_46;
              v13 = *v8;
            }
            this = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v13 + 1384))(v13);
            v10 &= this;
            ++v8;
            v9 -= 8;
            if (!v9)
            {
              if ((v10 & 1) != 0)
                goto LABEL_46;
              v14 = *((_QWORD *)v2 + 177);
              v15 = *(unsigned int *)(v14 + 68);
              if ((_DWORD)v15)
              {
                v7 = *(double *)(v14 + 96);
                if (v7 == -1.0)
                {
                  v16 = *(uint64_t **)(v14 + 56);
                  v17 = 8 * v15;
                  v18 = 0.0;
                  do
                  {
                    v19 = *v16++;
                    v20 = (*(double (**)(uint64_t))(*(_QWORD *)v19 + 1376))(v19);
                    if (v18 >= v20)
                      v21 = v18;
                    else
                      v21 = v20;
                    v18 = v21;
                    v17 -= 8;
                  }
                  while (v17);
                  v23 = (*(double (**)(_QWORD))(**(_QWORD **)(v14 + 256) + 24))(*(_QWORD *)(v14 + 256));
                  if (v23 >= v18)
                    v23 = v18;
                  *(double *)(v14 + 96) = fmax(v23, 0.0);
                  *(_QWORD *)(v14 + 216) = 0;
                  WTF::MonotonicTime::now(v22);
                  this = WebCore::TimerBase::setNextFireTime(v14 + 192, v24 + 0.0);
                  v7 = *(double *)(v14 + 96);
                }
                if (v7 < 0.0)
                  goto LABEL_46;
              }
              break;
            }
          }
        }
        if (v7 <= (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v2 + 1376))(v2))
        {
LABEL_31:
          this = WebCore::HTMLMediaElement::couldPlayIfEnoughData(v2);
          if ((_DWORD)this && (*((int *)v2 + 226) > 2 || *((int *)v2 + 227) >= 3) && !*((_QWORD *)v2 + 177))
          {
            v25 = *((_QWORD *)v2 + 142);
            if (v25)
            {
              v26 = *(unsigned __int8 **)v25;
              if (__ldaxr(*(unsigned __int8 **)v25))
              {
                __clrex();
              }
              else if (!__stxr(1u, v26))
              {
                goto LABEL_40;
              }
              MEMORY[0x19AEA534C](v26);
LABEL_40:
              ++*((_QWORD *)v26 + 1);
              v28 = __ldxr(v26);
              if (v28 == 1)
              {
                if (!__stlxr(0, v26))
                  goto LABEL_45;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_45:
              (*(void (**)(_QWORD, double))(**(_QWORD **)(v25 + 72) + 440))(*(_QWORD *)(v25 + 72), v42);
              this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v25);
              goto LABEL_46;
            }
            this = (*(uint64_t (**)(_QWORD, double))(*MEMORY[0x48] + 440))(MEMORY[0x48], v42);
          }
        }
      }
    }
LABEL_46:
    v29 = v42;
    if (*((double *)v2 + 109) != v42)
    {
      *((double *)v2 + 109) = v42;
      *((double *)v2 + 110) = v29;
      v30 = WTF::MediaTime::invalidTime((WTF::MediaTime *)this);
      v31 = *(_QWORD *)(v30 + 5);
      *((_QWORD *)v2 + 148) = *(_QWORD *)v30;
      *(_QWORD *)((char *)v2 + 1189) = v31;
      v32 = *((_QWORD *)v2 + 142);
      if (v32 && (*(double (**)(_QWORD))(**(_QWORD **)(v32 + 72) + 848))(*(_QWORD *)(v32 + 72)) != 0.0)
      {
        v30 = WTF::MonotonicTime::now((WTF::MonotonicTime *)v30);
        *((double *)v2 + 151) = v33 + 0.5;
      }
      v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v34 || (v35 = *(_QWORD *)(v34 + 96)) == 0)
        v35 = WebCore::threadGlobalDataSlow((WebCore *)v30);
      v36 = *(_QWORD *)(v35 + 40);
      if (!v36)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v35);
        v36 = *(_QWORD *)(v35 + 40);
      }
      v37 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v37);
      *(_DWORD *)(v37 + 16) = 1;
      *(_QWORD *)v37 = off_1E33A4B48;
      *(_QWORD *)(v37 + 8) = 0;
      *(_DWORD *)(v37 + 20) = *(_DWORD *)(v37 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v36 + 1624) != 0);
      v39 = *(_DWORD **)(v36 + 1624);
      if (v39)
        *v39 += 2;
      *(_QWORD *)(v37 + 24) = v39;
      *(_QWORD *)(v37 + 32) = 0;
      *(_QWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = v38;
      *(_QWORD *)(v37 + 64) = 0;
      v41[0] = v37;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v2 + 28, (uint64_t)v2, 9, (uint64_t)v2 + 824, v41);
      v40 = (_DWORD *)v41[0];
      v41[0] = 0;
      if (v40)
      {
        if (v40[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
        else
          --v40[4];
      }
    }
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::setPlaybackRate(WebCore::HTMLMediaElement *this, double a2)
{
  WebCore::HTMLMediaElement::setPlaybackRate((uint64_t)this - 136, a2);
}

void WebCore::HTMLMediaElement::updatePlaybackRate(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  WebCore::HTMLMediaElement **v7;
  uint64_t v8;
  int v9;
  WebCore::HTMLMediaElement *v10;
  uint64_t v11;
  WebCore::HTMLMediaElement *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  WTF::MonotonicTime *v21;
  double v22;
  double v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;

  v2 = *((_QWORD *)this + 177);
  if (v2)
    v3 = (*(double (**)(_QWORD))(**(_QWORD **)(v2 + 256) + 40))(*(_QWORD *)(v2 + 256));
  else
    v3 = *((double *)this + 109);
  if (!*((_QWORD *)this + 142))
    return;
  v4 = *((_QWORD *)this + 177);
  if (!v4)
  {
LABEL_30:
    if (!WebCore::HTMLMediaElement::couldPlayIfEnoughData(this)
      || *((int *)this + 226) <= 2 && *((int *)this + 227) < 3
      || (*(double (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 448))(*(_QWORD *)(*((_QWORD *)this + 142) + 72)) == v3)
    {
      return;
    }
    v24 = *((_QWORD *)this + 142);
    if (!v24)
    {
      (*(void (**)(_QWORD, double))(*MEMORY[0x48] + 440))(MEMORY[0x48], v3);
      return;
    }
    v25 = *(unsigned __int8 **)v24;
    if (__ldaxr(*(unsigned __int8 **)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, v25))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v25);
LABEL_40:
    ++*((_QWORD *)v25 + 1);
    v27 = __ldxr(v25);
    if (v27 == 1)
    {
      if (!__stlxr(0, v25))
        goto LABEL_45;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_45:
    (*(void (**)(_QWORD, double))(**(_QWORD **)(v24 + 72) + 440))(*(_QWORD *)(v24 + 72), v3);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v24);
    return;
  }
  if (*(_BYTE *)(v4 + 72))
    return;
  v5 = *(unsigned int *)(v4 + 68);
  v6 = 0.0;
  if (!(_DWORD)v5)
  {
LABEL_29:
    if (v6 > (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1376))(this))
      return;
    goto LABEL_30;
  }
  v7 = *(WebCore::HTMLMediaElement ***)(v4 + 56);
  v8 = 8 * v5;
  v9 = 1;
  while (1)
  {
    v10 = *v7;
    if (*((int *)*v7 + 226) < 3)
      break;
    v11 = *((_QWORD *)v10 + 200);
    if (!v11)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(*v7);
      v11 = *((_QWORD *)v10 + 200);
    }
    if (*(_BYTE *)(v11 + 48) == 4)
      break;
    v12 = *v7;
    if ((*(_DWORD *)((_BYTE *)*v7 + 1265) & 0x40) != 0)
    {
      if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12) & 1) != 0)
        return;
      v12 = *v7;
    }
    v9 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12);
    ++v7;
    v8 -= 8;
    if (!v8)
    {
      if ((v9 & 1) != 0)
        return;
      v13 = *((_QWORD *)this + 177);
      v14 = *(unsigned int *)(v13 + 68);
      if ((_DWORD)v14)
      {
        v6 = *(double *)(v13 + 96);
        if (v6 == -1.0)
        {
          v15 = *(uint64_t **)(v13 + 56);
          v16 = 8 * v14;
          v17 = 0.0;
          do
          {
            v18 = *v15++;
            v19 = (*(double (**)(uint64_t))(*(_QWORD *)v18 + 1376))(v18);
            if (v17 >= v19)
              v20 = v17;
            else
              v20 = v19;
            v17 = v20;
            v16 -= 8;
          }
          while (v16);
          v22 = (*(double (**)(_QWORD))(**(_QWORD **)(v13 + 256) + 24))(*(_QWORD *)(v13 + 256));
          if (v22 >= v17)
            v22 = v17;
          *(double *)(v13 + 96) = fmax(v22, 0.0);
          *(_QWORD *)(v13 + 216) = 0;
          WTF::MonotonicTime::now(v21);
          WebCore::TimerBase::setNextFireTime(v13 + 192, v23 + 0.0);
          v6 = *(double *)(v13 + 96);
        }
        if (v6 < 0.0)
          return;
      }
      goto LABEL_29;
    }
  }
}

uint64_t WebCore::HTMLMediaElement::preservesPitch(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 896);
}

unsigned __int8 *WebCore::HTMLMediaElement::setPreservesPitch(unsigned __int8 *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  _QWORD v10[4];
  char v11;

  v2 = (uint64_t)this;
  v11 = a2;
  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v10[0] = "HTMLMediaElement";
  v10[1] = 17;
  v10[2] = "setPreservesPitch";
  v10[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia)
      v5 = byte_1ECE7C490 >= 3u;
    else
      v5 = 0;
    if (v5)
    {
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v10);
      a2 = v11;
    }
  }
  *(_BYTE *)(v2 + 896) = a2;
  v6 = *(_QWORD *)(v2 + 1136);
  if (v6)
  {
    v7 = *(unsigned __int8 **)v6;
    if (__ldaxr(*(unsigned __int8 **)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_13:
    ++*((_QWORD *)v7 + 1);
    v9 = __ldxr(v7);
    if (v9 == 1)
    {
      if (!__stlxr(0, v7))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_18:
    *(_BYTE *)(v6 + 228) = v11;
    (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 464))(*(_QWORD *)(v6 + 72));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
  }
  return this;
}

BOOL WebCore::HTMLMediaElement::ended(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double v5;

  if (*((_QWORD *)this + 204))
  {
    v2 = *((_QWORD *)this + 142);
    if (v2)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 1048))(*(_QWORD *)(v2 + 72)) & 1) != 0)
        return 1;
    }
  }
  result = WebCore::HTMLMediaElement::endedPlayback(this);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)this + 177);
    if (v4)
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 256) + 40))(*(_QWORD *)(v4 + 256));
    else
      v5 = *((double *)this + 109);
    return v5 > 0.0;
  }
  return result;
}

BOOL WebCore::HTMLMediaElement::endedPlayback(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  WTF::MediaTime *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  const WTF::MediaTime *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  double v21;
  const WTF::MediaTime *v22;
  _QWORD v23[2];
  _QWORD v24[2];

  v2 = *((_QWORD *)this + 144);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 40);
  }
  else
  {
    v6 = *((_QWORD *)this + 142);
    if (!v6 || *((int *)this + 226) < 1)
    {
      v7 = (uint64_t *)WTF::MediaTime::invalidTime(0);
      v4 = *v7;
      v5 = v7[1];
      goto LABEL_8;
    }
    v3 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 72) + 336);
  }
  v4 = v3();
LABEL_8:
  v24[0] = v4;
  v24[1] = v5;
  if (*((_QWORD *)this + 142))
    v8 = (v5 & 0x100000000) == 0;
  else
    v8 = 1;
  if (v8 || *((int *)this + 226) < 1)
    return 0;
  v9 = (WTF::MediaTime *)WebCore::HTMLMediaElement::currentMediaTime(this);
  v23[0] = v9;
  v23[1] = v10;
  v11 = *((_QWORD *)this + 177);
  if (v11)
    v9 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 256) + 40))(*(_QWORD *)(v11 + 256));
  else
    v12 = *((double *)this + 109);
  if (v12 <= 0.0)
  {
    v20 = *((_QWORD *)this + 177);
    if (v20)
      v9 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v20 + 256) + 40))(*(_QWORD *)(v20 + 256));
    else
      v21 = *((double *)this + 109);
    if (v21 < 0.0)
    {
      v22 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v9);
      return (int)WTF::MediaTime::compare((WTF::MediaTime *)v23, v22) < 1;
    }
    return 0;
  }
  v13 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v9);
  if (WTF::MediaTime::compare((WTF::MediaTime *)v24, v13) != 1
    || (WTF::MediaTime::compare((WTF::MediaTime *)v23, (const WTF::MediaTime *)v24) & 0x80000000) != 0)
  {
    return 0;
  }
  v14 = *((_QWORD *)this + 13);
  if (!v14)
    return 1;
  v15 = *(_DWORD *)(v14 + 4);
  if ((v15 & 1) == 0)
  {
    v16 = (uint64_t *)(v14 + 32);
    LODWORD(v17) = v15 >> 5;
    if ((_DWORD)v17)
      goto LABEL_22;
    return 1;
  }
  v16 = *(uint64_t **)(v14 + 40);
  LODWORD(v17) = *(_DWORD *)(v14 + 52);
  if (!(_DWORD)v17)
    return 1;
LABEL_22:
  v17 = v17;
  result = 1;
  while (1)
  {
    v19 = *v16;
    if (*v16 == WebCore::HTMLNames::loopAttr
      || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 24)
      && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v17)
      return result;
  }
  return *((_QWORD *)this + 177) != 0;
}

uint64_t WebCore::HTMLMediaElement::preload@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  int v3;

  if (*(_QWORD *)(this + 1632))
  {
LABEL_2:
    v2 = (_DWORD *)WebCore::noneAtomData;
    if (!WebCore::noneAtomData)
    {
LABEL_4:
      *a2 = v2;
      return this;
    }
LABEL_3:
    *v2 += 2;
    goto LABEL_4;
  }
  v3 = *(unsigned __int8 *)(this + 1144);
  if (v3 == 2)
  {
    v2 = (_DWORD *)WebCore::autoAtomData;
    if (!WebCore::autoAtomData)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3 == 1)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (!*(_BYTE *)(this + 1144))
    goto LABEL_2;
  *a2 = 0;
  return this;
}

WTF::StringImpl *WebCore::HTMLMediaElement::setPreload(WTF::StringImpl *this, const WTF::AtomString *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v3 = this;
  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v12[0] = "HTMLMediaElement";
  v12[1] = 17;
  v12[2] = "setPreload";
  v12[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::AtomString>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12, (uint64_t *)a2);
  if (!*((_QWORD *)v3 + 204))
  {
    v6 = *((_QWORD *)v3 + 13);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) == 0)
      {
        v8 = (uint64_t *)(v6 + 32);
        v9 = v7 >> 5;
        if (!v9)
          goto LABEL_16;
LABEL_9:
        v10 = 0;
        while (1)
        {
          v11 = *v8;
          if (*v8 == WebCore::HTMLNames::preloadAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::preloadAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::preloadAttr + 32))
          {
            return WebCore::Element::setAttributeInternal(v3, v10, (WebCore::TreeScope *)&WebCore::HTMLNames::preloadAttr, (WTF::StringImpl **)a2, 0);
          }
          ++v10;
          v8 += 2;
          if (v9 == v10)
            goto LABEL_16;
        }
      }
      v8 = *(uint64_t **)(v6 + 40);
      v9 = *(_DWORD *)(v6 + 52);
      if (v9)
        goto LABEL_9;
    }
LABEL_16:
    v10 = 0xFFFFFFFFLL;
    return WebCore::Element::setAttributeInternal(v3, v10, (WebCore::TreeScope *)&WebCore::HTMLNames::preloadAttr, (WTF::StringImpl **)a2, 0);
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLMediaElement::play(WebCore::HTMLMediaElement *this, uint64_t *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::MonotonicTime *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *result;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  BOOL v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::Logger *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::Logger *v64;
  uint64_t *v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  _BYTE *v76;
  size_t v77;
  __int16 v78;
  __int16 v79;
  _BYTE *v80;
  _BYTE *v81;
  unsigned __int128 v82;
  char v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  int v88;
  char v89;
  WTF::Logger *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  __int128 buf;
  const char *v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 228);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 229);
  v6 = "HTMLMediaElement";
  *(_QWORD *)&buf = "HTMLMediaElement";
  *((_QWORD *)&buf + 1) = 17;
  v96 = "play";
  v97 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v7 = *((_QWORD *)this + 200);
  if (!v7)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v7 = *((_QWORD *)this + 200);
  }
  WebCore::MediaElementSession::playbackStateChangePermitted(v7, 0, (uint64_t)&v88);
  if (v89)
  {
    if (v88)
    {
      v9 = *((_QWORD *)this + 228);
      v10 = *((_QWORD *)this + 229);
      v84 = "HTMLMediaElement";
      v85 = 17;
      v86 = "play";
      v87 = v10;
      goto LABEL_28;
    }
    LODWORD(v84) = 1;
    v23 = *((_QWORD *)this + 228);
    v24 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v96 = "setAutoplayEventPlaybackState";
    v97 = v24;
    if (*(_BYTE *)(v23 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (int *)&v84);
      v25 = (int)v84;
      *((_DWORD *)this + 323) = (_DWORD)v84;
      if (v25 != 1)
        goto LABEL_27;
    }
    else
    {
      *((_DWORD *)this + 323) = 1;
    }
    WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v8);
    WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
LABEL_27:
    v9 = *((_QWORD *)this + 228);
    v28 = *((_QWORD *)this + 229);
    v84 = "HTMLMediaElement";
    v85 = 17;
    v86 = "play";
    v87 = v28;
    if (v89)
    {
LABEL_28:
      if (!*(_BYTE *)(v9 + 12))
      {
LABEL_122:
        v15 = *a2;
        *(_QWORD *)&buf = 0;
        v16 = 31;
LABEL_123:
        WebCore::DeferredPromise::reject(v15, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&buf, 0);
        result = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v74);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v84);
      result = (WTF::StringImpl *)WTF::String::String((WTF::String *)&v92, "rejecting promise: ");
      v30 = WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values;
      {
        WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl;
        unk_1EE2F5A10 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl;
        qword_1EE2F5A18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl;
        unk_1EE2F5A20 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl;
      }
      v31 = WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[v88];
      if (v31)
        *(_DWORD *)v31 += 2;
      v32 = v93;
      if (v93)
      {
        v33 = *((_DWORD *)v93 + 1);
        if (v92)
          goto LABEL_35;
      }
      else
      {
        v33 = 0;
        if (v92)
        {
LABEL_35:
          v34 = *((_DWORD *)v92 + 1);
          if (v31)
          {
LABEL_36:
            v35 = *(_DWORD *)(v31 + 4);
LABEL_37:
            if (((v35 | v34) & 0x80000000) == 0)
            {
              v36 = __OFADD__(v34, v35);
              v37 = v34 + v35;
              v38 = v36;
              if ((v33 & 0x80000000) == 0 && !v38)
              {
                v39 = (v33 + v37);
                if (!__OFADD__(v33, v37))
                {
                  if (v93 && (*((_BYTE *)v93 + 16) & 4) == 0)
                  {
                    v40 = 0;
                    goto LABEL_51;
                  }
                  if (v92)
                  {
                    v41 = *((_DWORD *)v92 + 4);
                    v40 = (v41 >> 2) & 1;
                    if (!v31 || (v41 & 4) == 0)
                    {
LABEL_51:
                      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v40, v93, (uint64_t)v92, v31, &v94);
                      if (v94)
                      {
                        if (v31)
                        {
                          if (*(_DWORD *)v31 == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v31, v29);
                          else
                            *(_DWORD *)v31 -= 2;
                        }
                        goto LABEL_55;
                      }
LABEL_163:
                      __break(0xC471u);
                      return result;
                    }
LABEL_50:
                    v40 = (*(unsigned __int8 *)(v31 + 16) >> 2) & 1;
                    goto LABEL_51;
                  }
                  if (v31)
                    goto LABEL_50;
                  if (!(_DWORD)v39)
                  {
                    v75 = MEMORY[0x1E0CBEF70];
                    *MEMORY[0x1E0CBEF70] += 2;
LABEL_145:
                    v94 = (WTF::StringImpl *)v75;
LABEL_55:
                    v42 = v92;
                    v92 = 0;
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, v29);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                    v43 = v93;
                    v93 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, v29);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v44 = qword_1ECE7C4A0;
                    v45 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                    if ((_DWORD)v45)
                    {
                      WTF::String::utf8();
                      v47 = v90 ? (char *)v90 + 16 : 0;
                      LODWORD(buf) = 136446210;
                      *(_QWORD *)((char *)&buf + 4) = v47;
                      _os_log_impl(&dword_1940B8000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                      v45 = (uint64_t)v90;
                      v90 = 0;
                      if (v45)
                      {
                        if (*(_DWORD *)v45 == 1)
                          v45 = WTF::fastFree((WTF *)v45, v46);
                        else
                          --*(_DWORD *)v45;
                      }
                    }
                    if (WebCore::LogMedia)
                      v48 = byte_1ECE7C490 == 0;
                    else
                      v48 = 1;
                    if (!v48)
                    {
                      v49 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                      while (1)
                      {
                        v50 = *v49;
                        if ((v50 & 1) != 0)
                          break;
                        v51 = __ldaxr(v49);
                        if (v51 == v50)
                        {
                          if (!__stxr(v50 | 1, v49))
                          {
                            v52 = WTF::Logger::observers((WTF::Logger *)v45);
                            v53 = *(unsigned int *)(v52 + 12);
                            if ((_DWORD)v53)
                            {
                              v54 = *(uint64_t **)v52;
                              v55 = *(_QWORD *)v52 + 8 * v53;
                              do
                              {
                                v56 = *v54;
                                LODWORD(buf) = 0;
                                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v84);
                                LODWORD(v96) = 0;
                                WTF::String::String((WTF::String *)&v97, "rejecting promise: ");
                                v57 = v88;
                                v98 = 0;
                                {
                                  WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl += 2;
                                  WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl += 2;
                                  *v30 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl;
                                  v30[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl;
                                  WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl += 2;
                                  WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl += 2;
                                  v30[2] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl;
                                  v30[3] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl;
                                }
                                v58 = (WTF::StringImpl *)v30[v57];
                                if (v58)
                                  *(_DWORD *)v58 += 2;
                                v99 = v58;
                                v90 = 0;
                                v91 = 0;
                                v59 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                                LODWORD(v91) = 3;
                                v90 = v59;
                                v60 = HIDWORD(v91);
                                *((_DWORD *)v59 + 4 * HIDWORD(v91)) = buf;
                                v61 = *((_QWORD *)&buf + 1);
                                if (*((_QWORD *)&buf + 1))
                                  **((_DWORD **)&buf + 1) += 2;
                                *((_QWORD *)v59 + 2 * v60 + 1) = v61;
                                *((_DWORD *)v59 + 4 * (v60 + 1)) = (_DWORD)v96;
                                v62 = v97;
                                if (v97)
                                  *(_DWORD *)v97 += 2;
                                *((_QWORD *)v59 + 2 * (v60 + 1) + 1) = v62;
                                *((_DWORD *)v59 + 4 * (v60 + 2)) = v98;
                                v63 = v99;
                                if (v99)
                                  *(_DWORD *)v99 += 2;
                                *((_QWORD *)v59 + 2 * (v60 + 2) + 1) = v63;
                                HIDWORD(v91) = v60 + 3;
                                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v56 + 16))(v56, &WebCore::LogMedia, 1, &v90);
                                v64 = v90;
                                if (HIDWORD(v91))
                                {
                                  v65 = v30;
                                  v66 = 16 * HIDWORD(v91);
                                  v67 = (WTF::StringImpl **)((char *)v90 + 8);
                                  do
                                  {
                                    v68 = *v67;
                                    *v67 = 0;
                                    if (v68)
                                    {
                                      if (*(_DWORD *)v68 == 2)
                                        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v46);
                                      else
                                        *(_DWORD *)v68 -= 2;
                                    }
                                    v67 += 2;
                                    v66 -= 16;
                                  }
                                  while (v66);
                                  v64 = v90;
                                  v30 = v65;
                                }
                                if (v64)
                                {
                                  v90 = 0;
                                  LODWORD(v91) = 0;
                                  WTF::fastFree(v64, v46);
                                }
                                v69 = v99;
                                v99 = 0;
                                if (v69)
                                {
                                  if (*(_DWORD *)v69 == 2)
                                    WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v46);
                                  else
                                    *(_DWORD *)v69 -= 2;
                                }
                                v70 = v97;
                                v97 = 0;
                                if (v70)
                                {
                                  if (*(_DWORD *)v70 == 2)
                                    WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v46);
                                  else
                                    *(_DWORD *)v70 -= 2;
                                }
                                v71 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                                *((_QWORD *)&buf + 1) = 0;
                                if (v71)
                                {
                                  if (*(_DWORD *)v71 == 2)
                                    WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v46);
                                  else
                                    *(_DWORD *)v71 -= 2;
                                }
                                ++v54;
                              }
                              while (v54 != (uint64_t *)v55);
                            }
                            v72 = __ldxr(v49);
                            if (v72 == 1)
                            {
                              if (!__stlxr(0, v49))
                                break;
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                            break;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                      }
                    }
                    v73 = v94;
                    v94 = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 2)
                        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v46);
                      else
                        *(_DWORD *)v73 -= 2;
                    }
                    goto LABEL_122;
                  }
                  if ((v39 & 0x80000000) == 0)
                  {
                    result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
                    v75 = buf;
                    if ((_QWORD)buf)
                    {
                      v76 = (_BYTE *)(buf + 20);
                      *(_DWORD *)buf = 2;
                      *(_DWORD *)(v75 + 4) = v39;
                      *(_QWORD *)(v75 + 8) = v75 + 20;
                      *(_DWORD *)(v75 + 16) = 4;
                      if (v32)
                      {
                        v29 = (WTF::StringImpl *)*((_QWORD *)v32 + 1);
                        v77 = *((unsigned int *)v32 + 1);
                        if ((*((_BYTE *)v32 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v77)
                          {
                            if ((_DWORD)v77 == 1)
                              *v76 = *(_BYTE *)v29;
                            else
                              memcpy(v76, v29, v77);
                          }
                        }
                        else
                        {
                          v80 = &v76[v77];
                          if (v77 >= 0x10)
                          {
                            v81 = &v76[v77 & 0xFFFFFFF0];
                            do
                            {
                              v82 = (unsigned __int128)vld2q_s8((const char *)v29);
                              v29 = (WTF::StringImpl *)((char *)v29 + 32);
                              *(_OWORD *)v76 = v82;
                              v76 += 16;
                            }
                            while (v76 != v81);
                            v76 = v81;
                          }
                          while (v76 != v80)
                          {
                            v83 = *(_BYTE *)v29;
                            v29 = (WTF::StringImpl *)((char *)v29 + 2);
                            *v76++ = v83;
                          }
                        }
                      }
                      goto LABEL_145;
                    }
                  }
                }
              }
            }
            v94 = 0;
            goto LABEL_163;
          }
LABEL_135:
          v35 = 0;
          goto LABEL_37;
        }
      }
      v34 = 0;
      if (v31)
        goto LABEL_36;
      goto LABEL_135;
    }
    __break(1u);
LABEL_152:
    (*(void (**)(_QWORD))(**((_QWORD **)v6 + 20) + 16))(*((_QWORD *)v6 + 20));
    v78 = *((_WORD *)v6 + 15);
LABEL_149:
    *((_WORD *)v6 + 15) = v78 | 0x400;
    (*(void (**)(char *))(*(_QWORD *)v6 + 72))(v6);
    goto LABEL_18;
  }
  v11 = *((_QWORD *)this + 120);
  if (v11 && *(_DWORD *)(v11 + 4) == 4)
  {
    v12 = *((_QWORD *)this + 228);
    v13 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v96 = "play";
    v97 = v13;
    if (*(_BYTE *)(v12 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "rejecting promise because of error");
    v14 = *a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = v14;
    v16 = 6;
    goto LABEL_123;
  }
  if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
  {
    *((_BYTE *)this + 1699) = 1;
    v17 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    if (!v17)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v17 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    }
    WebCore::MediaElementSession::removeBehaviorRestriction(v17, 43367);
    v6 = (char *)WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
    *((_DWORD *)v6 + 6) += 2;
    WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v6, v18);
    if (*((_DWORD *)v6 + 6) == 2)
    {
      v78 = *((_WORD *)v6 + 15);
      if ((v78 & 0x400) == 0)
      {
        v79 = *((_WORD *)v6 + 14);
        if ((v79 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v6, v19);
          goto LABEL_18;
        }
        if ((v79 & 0x20) == 0)
          goto LABEL_149;
        goto LABEL_152;
      }
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
LABEL_18:
  v20 = (_QWORD *)((char *)this + 856);
  v21 = *((unsigned int *)this + 217);
  if ((_DWORD)v21 == *((_DWORD *)this + 216))
  {
    a2 = (uint64_t *)WTF::Vector<WebCore::DOMPromiseDeferred<void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)a2);
    v21 = *((unsigned int *)this + 217);
    v22 = (uint64_t *)(*((_QWORD *)this + 107) + 8 * v21);
  }
  else
  {
    v22 = (uint64_t *)(*v20 + 8 * v21);
  }
  v26 = *a2;
  *a2 = 0;
  *v22 = v26;
  *((_DWORD *)this + 217) = v21 + 1;
  return (WTF::StringImpl *)WebCore::HTMLMediaElement::playInternal((uint64_t)this);
}

void WebCore::HTMLMediaElement::play(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  WTF::MonotonicTime *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  _BYTE *v57;
  size_t v58;
  __int16 v59;
  __int16 v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned __int128 v63;
  char v64;
  _QWORD v65[4];
  int v66;
  char v67;
  WTF::Logger *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  __int128 buf;
  const char *v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 228);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 229);
  *(_QWORD *)&buf = "HTMLMediaElement";
  *((_QWORD *)&buf + 1) = 17;
  v74 = "play";
  v75 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v4 = *((_QWORD *)this + 200);
  if (!v4)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v4 = *((_QWORD *)this + 200);
  }
  WebCore::MediaElementSession::playbackStateChangePermitted(v4, 0, (uint64_t)&v66);
  if (!v67)
  {
    if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
    {
      *((_BYTE *)this + 1699) = 1;
      v19 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
      if (!v19)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(this);
        v19 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
      }
      WebCore::MediaElementSession::removeBehaviorRestriction(v19, 43367);
      v20 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
      *(_DWORD *)(v20 + 24) += 2;
      WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v20, v21);
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        v59 = *(_WORD *)(v20 + 30);
        if ((v59 & 0x400) == 0)
        {
          v60 = *(_WORD *)(v20 + 28);
          if ((v60 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v20, v22);
          }
          else
          {
            if ((v60 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 160) + 16))(*(_QWORD *)(v20 + 160));
              v59 = *(_WORD *)(v20 + 30);
            }
            *(_WORD *)(v20 + 30) = v59 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
          }
        }
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
    WebCore::HTMLMediaElement::playInternal((uint64_t)this);
    return;
  }
  v6 = *((_QWORD *)this + 228);
  v7 = *((_QWORD *)this + 229);
  v65[0] = "HTMLMediaElement";
  v65[1] = 17;
  v65[2] = "play";
  v65[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v65);
    WTF::String::String((WTF::String *)&v70, "playback not permitted: ");
    {
      WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl;
      unk_1EE2F5A10 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl;
      qword_1EE2F5A18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl;
      unk_1EE2F5A20 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl;
    }
    v9 = WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[v66];
    if (v9)
      *(_DWORD *)v9 += 2;
    v10 = v71;
    if (v71)
    {
      v11 = *((_DWORD *)v71 + 1);
      if (v70)
        goto LABEL_13;
    }
    else
    {
      v11 = 0;
      if (v70)
      {
LABEL_13:
        v12 = *((_DWORD *)v70 + 1);
        if (v9)
        {
LABEL_14:
          v13 = *(_DWORD *)(v9 + 4);
LABEL_15:
          if (((v13 | v12) & 0x80000000) == 0)
          {
            v14 = __OFADD__(v12, v13);
            v15 = v12 + v13;
            v16 = v14;
            if ((v11 & 0x80000000) == 0 && !v16)
            {
              v17 = (v11 + v15);
              if (!__OFADD__(v11, v15))
              {
                if (v71 && (*((_BYTE *)v71 + 16) & 4) == 0)
                {
                  v18 = 0;
                  goto LABEL_35;
                }
                if (v70)
                {
                  v23 = *((_DWORD *)v70 + 4);
                  v18 = (v23 >> 2) & 1;
                  if (!v9 || (v23 & 4) == 0)
                  {
LABEL_35:
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v17, v18, v71, (uint64_t)v70, v9, &v72);
                    if (v72)
                    {
                      if (v9)
                      {
                        if (*(_DWORD *)v9 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v9, v8);
                        else
                          *(_DWORD *)v9 -= 2;
                      }
                      goto LABEL_39;
                    }
LABEL_149:
                    __break(0xC471u);
                    return;
                  }
LABEL_34:
                  v18 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
                  goto LABEL_35;
                }
                if (v9)
                  goto LABEL_34;
                if (!(_DWORD)v17)
                {
                  v56 = MEMORY[0x1E0CBEF70];
                  *MEMORY[0x1E0CBEF70] += 2;
LABEL_147:
                  v72 = (WTF::StringImpl *)v56;
LABEL_39:
                  v24 = v70;
                  v70 = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, v8);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                  v25 = v71;
                  v71 = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, v8);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                  v26 = qword_1ECE7C4A0;
                  v27 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v27)
                  {
                    WTF::String::utf8();
                    v28 = v68 ? (char *)v68 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v28;
                    _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v27 = (uint64_t)v68;
                    v68 = 0;
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 1)
                        v27 = WTF::fastFree((WTF *)v27, v5);
                      else
                        --*(_DWORD *)v27;
                    }
                  }
                  if (WebCore::LogMedia)
                    v29 = byte_1ECE7C490 == 0;
                  else
                    v29 = 1;
                  if (!v29)
                  {
                    v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v31 = *v30;
                      if ((v31 & 1) != 0)
                        break;
                      v32 = __ldaxr(v30);
                      if (v32 == v31)
                      {
                        if (!__stxr(v31 | 1, v30))
                        {
                          v33 = WTF::Logger::observers((WTF::Logger *)v27);
                          v34 = *(unsigned int *)(v33 + 12);
                          if ((_DWORD)v34)
                          {
                            v35 = *(uint64_t **)v33;
                            v36 = *(_QWORD *)v33 + 8 * v34;
                            do
                            {
                              v37 = *v35;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v65);
                              LODWORD(v74) = 0;
                              WTF::String::String((WTF::String *)&v75, "playback not permitted: ");
                              v76 = 0;
                              {
                                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl += 2;
                                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl += 2;
                                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_0::operator() const(void)::impl;
                                unk_1EE2F5A10 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_1::operator() const(void)::impl;
                                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl += 2;
                                WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl += 2;
                                qword_1EE2F5A18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_2::operator() const(void)::impl;
                                unk_1EE2F5A20 = &WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::$_3::operator() const(void)::impl;
                              }
                              v38 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlaybackDenialReason)::values[v66];
                              if (v38)
                                *(_DWORD *)v38 += 2;
                              v77 = v38;
                              v68 = 0;
                              v69 = 0;
                              v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                              LODWORD(v69) = 3;
                              v68 = v39;
                              v40 = HIDWORD(v69);
                              *((_DWORD *)v39 + 4 * HIDWORD(v69)) = buf;
                              v41 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v39 + 2 * v40 + 1) = v41;
                              *((_DWORD *)v39 + 4 * (v40 + 1)) = (_DWORD)v74;
                              v42 = v75;
                              if (v75)
                                *(_DWORD *)v75 += 2;
                              *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
                              *((_DWORD *)v39 + 4 * (v40 + 2)) = v76;
                              v43 = v77;
                              if (v77)
                                *(_DWORD *)v77 += 2;
                              *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
                              HIDWORD(v69) = v40 + 3;
                              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, &WebCore::LogMedia, 1, &v68);
                              v44 = v68;
                              if (HIDWORD(v69))
                              {
                                v45 = 16 * HIDWORD(v69);
                                v46 = (WTF::StringImpl **)((char *)v68 + 8);
                                do
                                {
                                  v47 = *v46;
                                  *v46 = 0;
                                  if (v47)
                                  {
                                    if (*(_DWORD *)v47 == 2)
                                      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v5);
                                    else
                                      *(_DWORD *)v47 -= 2;
                                  }
                                  v46 += 2;
                                  v45 -= 16;
                                }
                                while (v45);
                                v44 = v68;
                              }
                              if (v44)
                              {
                                v68 = 0;
                                LODWORD(v69) = 0;
                                WTF::fastFree(v44, v5);
                              }
                              v48 = v77;
                              v77 = 0;
                              if (v48)
                              {
                                if (*(_DWORD *)v48 == 2)
                                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v5);
                                else
                                  *(_DWORD *)v48 -= 2;
                              }
                              v49 = v75;
                              v75 = 0;
                              if (v49)
                              {
                                if (*(_DWORD *)v49 == 2)
                                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v5);
                                else
                                  *(_DWORD *)v49 -= 2;
                              }
                              v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v50)
                              {
                                if (*(_DWORD *)v50 == 2)
                                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v5);
                                else
                                  *(_DWORD *)v50 -= 2;
                              }
                              ++v35;
                            }
                            while (v35 != (uint64_t *)v36);
                          }
                          v51 = __ldxr(v30);
                          if (v51 == 1)
                          {
                            if (!__stlxr(0, v30))
                              break;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  v52 = v72;
                  v72 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v5);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  if (!v67)
                    __break(1u);
                  goto LABEL_107;
                }
                if ((v17 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v17 + 20));
                  v56 = buf;
                  if ((_QWORD)buf)
                  {
                    v57 = (_BYTE *)(buf + 20);
                    *(_DWORD *)buf = 2;
                    *(_DWORD *)(v56 + 4) = v17;
                    *(_QWORD *)(v56 + 8) = v56 + 20;
                    *(_DWORD *)(v56 + 16) = 4;
                    if (v10)
                    {
                      v8 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
                      v58 = *((unsigned int *)v10 + 1);
                      if ((*((_BYTE *)v10 + 16) & 4) != 0)
                      {
                        if ((_DWORD)v58)
                        {
                          if ((_DWORD)v58 == 1)
                            *v57 = *(_BYTE *)v8;
                          else
                            memcpy(v57, v8, v58);
                        }
                        v72 = (WTF::StringImpl *)v56;
                        goto LABEL_39;
                      }
                      v61 = &v57[v58];
                      if (v58 >= 0x10)
                      {
                        v62 = &v57[v58 & 0xFFFFFFF0];
                        do
                        {
                          v63 = (unsigned __int128)vld2q_s8((const char *)v8);
                          v8 = (WTF::StringImpl *)((char *)v8 + 32);
                          *(_OWORD *)v57 = v63;
                          v57 += 16;
                        }
                        while (v57 != v62);
                        v57 = v62;
                      }
                      while (v57 != v61)
                      {
                        v64 = *(_BYTE *)v8;
                        v8 = (WTF::StringImpl *)((char *)v8 + 2);
                        *v57++ = v64;
                      }
                    }
                    goto LABEL_147;
                  }
                }
              }
            }
          }
          v72 = 0;
          goto LABEL_149;
        }
LABEL_121:
        v13 = 0;
        goto LABEL_15;
      }
    }
    v12 = 0;
    if (v9)
      goto LABEL_14;
    goto LABEL_121;
  }
LABEL_107:
  if (!v66)
  {
    LODWORD(v65[0]) = 1;
    v53 = *((_QWORD *)this + 228);
    v54 = (WTF::StringImpl *)*((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    v74 = "setAutoplayEventPlaybackState";
    v75 = v54;
    if (*(_BYTE *)(v53 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (int *)v65);
      v55 = v65[0];
      *((_DWORD *)this + 323) = v65[0];
      if (v55 != 1)
        return;
    }
    else
    {
      *((_DWORD *)this + 323) = 1;
    }
    WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v5);
    WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::play(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::play((WebCore::HTMLMediaElement *)((char *)this - 136));
}

_QWORD *WebCore::HTMLMediaElement::handleAutoplayEvent(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  _BOOL4 isElementMainContentForPurposesOfAutoplay;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD v62[4];
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  __int128 buf;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::Logger *v79;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::Logger *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::Logger *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 528);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return result;
  v7 = result;
  ++*(_DWORD *)v5;
  v8 = (*(unsigned int (**)(_QWORD *))(*result + 1280))(result)
    && ((*(uint64_t (**)(_QWORD *))(*v7 + 1472))(v7) & 1) == 0
    && (*(double (**)(_QWORD *))(*v7 + 1456))(v7) != 0.0;
  v9 = *((_DWORD *)v7 + 323);
  v10 = v7[200];
  if (v10)
    isElementMainContentForPurposesOfAutoplay = WebCore::isElementMainContentForPurposesOfAutoplay(*(WebCore **)(v10 + 80), 0);
  else
    isElementMainContentForPurposesOfAutoplay = 0;
  v12 = v7[228];
  v13 = v7[229];
  v62[0] = "HTMLMediaElement";
  v62[1] = 17;
  v62[2] = "handleAutoplayEvent";
  v62[3] = v13;
  if (*(_BYTE *)(v12 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v62);
    WTF::String::String((WTF::String *)&v67, "hasAudio = ");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = (WTF::StringImpl *)buf;
    WTF::String::String((WTF::String *)&v66, " wasPlaybackPrevented = ");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = (WTF::StringImpl *)buf;
    WTF::String::String((WTF::String *)&v65, " hasMainContent = ");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = v68;
    v63 = v67;
    v73 = v66;
    v74 = v14;
    v71 = v65;
    v72 = v15;
    v70 = v16;
    result = (_QWORD *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v63, (uint64_t *)&v74, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v69);
    if (!v69)
    {
      __break(0xC471u);
      return result;
    }
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    v18 = v65;
    v65 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (!v15)
          goto LABEL_23;
        goto LABEL_21;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (!v15)
      goto LABEL_23;
LABEL_21:
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v17);
    else
      *(_DWORD *)v15 -= 2;
LABEL_23:
    v19 = v66;
    v66 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v17);
        if (v14)
        {
LABEL_27:
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v17);
          else
            *(_DWORD *)v14 -= 2;
        }
LABEL_29:
        v20 = v67;
        v67 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v17);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = v68;
        v68 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v17);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = qword_1ECE7C4A0;
        v23 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v23)
        {
          WTF::String::utf8();
          v25 = v63 ? (char *)v63 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v25;
          _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v23 = (uint64_t)v63;
          v63 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              v23 = WTF::fastFree((WTF *)v23, v24);
            else
              --*(_DWORD *)v23;
          }
        }
        if (WebCore::LogMedia)
        {
          v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v27 = *v26;
            if ((v27 & 1) != 0)
              break;
            v28 = __ldaxr(v26);
            if (v28 == v27)
            {
              if (!__stxr(v27 | 1, v26))
              {
                v59 = v5;
                v60 = a2;
                v29 = WTF::Logger::observers((WTF::Logger *)v23);
                v30 = *(unsigned int *)(v29 + 12);
                if ((_DWORD)v30)
                {
                  v31 = *(uint64_t **)v29;
                  v61 = *(_QWORD *)v29 + 8 * v30;
                  do
                  {
                    v32 = *v31;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v62);
                    v76 = 0;
                    WTF::String::String((WTF::String *)&v77, "hasAudio = ");
                    v78 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v79 = v63;
                    v80 = 0;
                    WTF::String::String((WTF::String *)&v81, " wasPlaybackPrevented = ");
                    v82 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v83 = v63;
                    v84 = 0;
                    WTF::String::String((WTF::String *)&v85, " hasMainContent = ");
                    v86 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v87 = v63;
                    v63 = 0;
                    v64 = 0;
                    v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                    LODWORD(v64) = 7;
                    v63 = v33;
                    v34 = HIDWORD(v64);
                    *((_DWORD *)v33 + 4 * HIDWORD(v64)) = buf;
                    v35 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v33 + 2 * v34 + 1) = v35;
                    *((_DWORD *)v33 + 4 * (v34 + 1)) = v76;
                    v36 = v77;
                    if (v77)
                      *(_DWORD *)v77 += 2;
                    *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
                    *((_DWORD *)v33 + 4 * (v34 + 2)) = v78;
                    v37 = v79;
                    if (v79)
                      *(_DWORD *)v79 += 2;
                    *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
                    *((_DWORD *)v33 + 4 * (v34 + 3)) = v80;
                    v38 = v81;
                    if (v81)
                      *(_DWORD *)v81 += 2;
                    *((_QWORD *)v33 + 2 * (v34 + 3) + 1) = v38;
                    *((_DWORD *)v33 + 4 * (v34 + 4)) = v82;
                    v39 = v83;
                    if (v83)
                      *(_DWORD *)v83 += 2;
                    *((_QWORD *)v33 + 2 * (v34 + 4) + 1) = v39;
                    *((_DWORD *)v33 + 4 * (v34 + 5)) = v84;
                    v40 = v85;
                    if (v85)
                      *(_DWORD *)v85 += 2;
                    *((_QWORD *)v33 + 2 * (v34 + 5) + 1) = v40;
                    *((_DWORD *)v33 + 4 * (v34 + 6)) = v86;
                    v41 = v87;
                    if (v87)
                      *(_DWORD *)v87 += 2;
                    *((_QWORD *)v33 + 2 * (v34 + 6) + 1) = v41;
                    HIDWORD(v64) = v34 + 7;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, &WebCore::LogMedia, 0, &v63);
                    v42 = v63;
                    if (HIDWORD(v64))
                    {
                      v43 = 16 * HIDWORD(v64);
                      v44 = (WTF::StringImpl **)((char *)v63 + 8);
                      do
                      {
                        v45 = *v44;
                        *v44 = 0;
                        if (v45)
                        {
                          if (*(_DWORD *)v45 == 2)
                            WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                          else
                            *(_DWORD *)v45 -= 2;
                        }
                        v44 += 2;
                        v43 -= 16;
                      }
                      while (v43);
                      v42 = v63;
                    }
                    if (v42)
                    {
                      v63 = 0;
                      LODWORD(v64) = 0;
                      WTF::fastFree(v42, v24);
                    }
                    v46 = v87;
                    v87 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v47 = v85;
                    v85 = 0;
                    if (v47)
                    {
                      if (*(_DWORD *)v47 == 2)
                        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v47 -= 2;
                    }
                    v48 = v83;
                    v83 = 0;
                    if (v48)
                    {
                      if (*(_DWORD *)v48 == 2)
                        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v48 -= 2;
                    }
                    v49 = v81;
                    v81 = 0;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v49 -= 2;
                    }
                    v50 = v79;
                    v79 = 0;
                    if (v50)
                    {
                      if (*(_DWORD *)v50 == 2)
                        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v50 -= 2;
                    }
                    v51 = v77;
                    v77 = 0;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    v52 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v52)
                    {
                      if (*(_DWORD *)v52 == 2)
                        WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v52 -= 2;
                    }
                    ++v31;
                  }
                  while (v31 != (uint64_t *)v61);
                }
                v53 = __ldxr(v26);
                if (v53 == 1)
                {
                  a2 = v60;
                  v5 = v59;
                  if (!__stlxr(0, v26))
                    break;
                }
                else
                {
                  __clrex();
                  a2 = v60;
                  v5 = v59;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v54 = v69;
        v69 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v24);
          else
            *(_DWORD *)v54 -= 2;
        }
        goto LABEL_113;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (v14)
      goto LABEL_27;
    goto LABEL_29;
  }
LABEL_113:
  v55 = v8 | 2;
  if (v9 != 1)
    v55 = v8;
  if (isElementMainContentForPurposesOfAutoplay)
    v56 = v55 | 4;
  else
    v56 = v55;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 48) + 16)
                                                                         + 1464))(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 16), a2, v56);
  if (*(_DWORD *)v5 == 1)
  {
    WebCore::Page::~Page(v5);
    return (_QWORD *)WTF::fastFree(v57, v58);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return result;
}

void WebCore::HTMLMediaElement::pause(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::MonotonicTime *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int16 v15;
  _QWORD v16[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v16[0] = "HTMLMediaElement";
  v16[1] = 17;
  v16[2] = "pause";
  v16[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v16);
  *((_BYTE *)this + 1096) = 0;
  v4 = (_DWORD *)((char *)this + 1265);
  v5 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if ((v5 & 0x100000000) != 0)
  {
    v6 = v5 & 0xFFFFFFFEFFFFFFFFLL;
    *v4 = v6;
    *(_WORD *)((char *)this + 1269) = WORD2(v6);
  }
  v7 = *((_QWORD *)this + 200);
  if (!v7)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v7 = *((_QWORD *)this + 200);
  }
  WebCore::MediaElementSession::playbackStateChangePermitted(v7, 1, (uint64_t)v16);
  if (!BYTE4(v16[0]))
  {
    if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
    {
      *((_BYTE *)this + 1699) = 1;
      v8 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
      if (!v8)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(this);
        v8 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
      }
      WebCore::MediaElementSession::removeBehaviorRestriction(v8, 0x2000);
      v9 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
      *(_DWORD *)(v9 + 24) += 2;
      WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v9, v10);
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        v14 = *(_WORD *)(v9 + 30);
        if ((v14 & 0x400) == 0)
        {
          v15 = *(_WORD *)(v9 + 28);
          if ((v15 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v9, v11);
          }
          else
          {
            if ((v15 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
              v14 = *(_WORD *)(v9 + 30);
            }
            *(_WORD *)(v9 + 30) = v14 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
          }
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    WebCore::HTMLMediaElement::pauseInternal(this);
    v12 = *v4;
    v13 = v12 & 0xFFFFFFFFFFFF7FFFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    *v4 = v12 & 0xFFFF7FFF;
    *(_WORD *)((char *)this + 1269) = WORD2(v13);
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::pause(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::pause((WebCore::HTMLMediaElement *)((char *)this - 136));
}

void WebCore::HTMLMediaElement::userDidInterfereWithAutoplay(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;

  if (*((_DWORD *)this + 323) == 3
    && (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1360))(this)
     - *((double *)this + 128) <= 10.0)
  {
    v2 = *((_QWORD *)this + 228);
    v3 = *((_QWORD *)this + 229);
    v8 = "HTMLMediaElement";
    v9 = 17;
    v10 = "userDidInterfereWithAutoplay";
    v11 = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v8);
    WebCore::HTMLMediaElement::handleAutoplayEvent(this, 3);
    v12 = 0;
    v4 = *((_QWORD *)this + 228);
    v5 = *((_QWORD *)this + 229);
    v8 = "HTMLMediaElement";
    v9 = 17;
    v10 = "setAutoplayEventPlaybackState";
    v11 = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v8, &v12);
      v7 = v12;
      *((_DWORD *)this + 323) = v12;
      if (v7 == 1)
      {
        WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v6);
        WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
      }
    }
    else
    {
      *((_DWORD *)this + 323) = 0;
    }
  }
}

uint64_t WebCore::HTMLMediaElement::purgeBufferedDataIfPossible(uint64_t this)
{
  WebCore::HTMLMediaElement *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebCore::MediaElementSession *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v1 = (WebCore::HTMLMediaElement *)this;
  v2 = *(_QWORD *)(this + 1824);
  v3 = *(_QWORD *)(this + 1832);
  v10 = "HTMLMediaElement";
  v11 = 17;
  v12 = "purgeBufferedDataIfPossible";
  v13 = v3;
  if (*(_BYTE *)(v2 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v10);
  if (*((_QWORD *)v1 + 144)
    || (this = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v1 + 1384))(v1), (_DWORD)this))
  {
    v4 = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)this);
    v5 = atomic_load((unsigned __int8 *)(v4 + 4));
    if (v5 == 2 || *(_BYTE *)(v4 + 7) != 0)
      goto LABEL_13;
    v7 = (WebCore::MediaElementSession *)*((_QWORD *)v1 + 200);
    if (!v7)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(v1);
      v7 = (WebCore::MediaElementSession *)*((_QWORD *)v1 + 200);
    }
    this = WebCore::MediaElementSession::preferredBufferingPolicy(v7);
    if ((_DWORD)this)
    {
LABEL_13:
      this = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v1 + 1784))(v1);
      if ((this & 1) != 0
        || (this = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v1 + 1792))(v1), (_DWORD)this))
      {
        v8 = *((_QWORD *)v1 + 228);
        v9 = *((_QWORD *)v1 + 229);
        v10 = "HTMLMediaElement";
        v11 = 17;
        v12 = "purgeBufferedDataIfPossible";
        v13 = v9;
        if (*(_BYTE *)(v8 + 12))
          return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [48]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v10, "early return because playing to wireless target");
      }
      else
      {
        return WebCore::HTMLMediaElement::setBufferingPolicy((uint64_t)v1, 3);
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::hasWirelessPlaybackTargetAlternative(WebCore::HTMLMediaElement *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  char v12;
  WTF::StringImpl *v13[5];

  if (*((_DWORD *)this + 264) != 2)
    return 0;
  v6 = *((_QWORD *)this + 10);
  if (!v6)
    return 0;
  while ((*(_WORD *)(v6 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
  {
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
      return 0;
  }
  while (1)
  {
    WebCore::Element::getNonEmptyURLAttribute((WebCore::Element *)v6, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a4, a5, (WTF::URL *)v13, a2);
    if (v13[0])
    {
      v11 = *((_DWORD *)v13[0] + 1);
      v12 = WTF::URL::protocolIs();
      v9 = 1;
      if (v11 && (v12 & 1) == 0)
        v9 = WebCore::HTMLMediaElement::isSafeToLoadURL(this, (WTF::URL *)v13, 0, 0) ^ 1;
    }
    else
    {
      WTF::URL::protocolIs();
      v9 = 1;
    }
    v10 = v13[0];
    v13[0] = 0;
    if (v10)
      break;
LABEL_12:
    if (!v9)
      return v9 ^ 1u;
LABEL_13:
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
      return v9 ^ 1u;
    while ((*(_WORD *)(v6 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
    {
      v6 = *(_QWORD *)(v6 + 56);
      if (!v6)
        return v9 ^ 1u;
    }
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_12;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (v9)
    goto LABEL_13;
  return v9 ^ 1u;
}

WTF::StringImpl **WebCore::HTMLMediaElement::setControls(WebCore::HTMLMediaElement *this, _BOOL4 a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  _QWORD v8[4];
  BOOL v9;

  v9 = a2;
  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v8[0] = "HTMLMediaElement";
  v8[1] = 17;
  v8[2] = "setControls";
  v8[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
    v6 = v9;
  }
  else
  {
    v6 = a2;
  }
  return WebCore::Element::setBooleanAttribute((WTF::StringImpl **)this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::controlsAttr, v6, a3);
}

double WebCore::HTMLMediaElement::volume(WebCore::HTMLMediaElement *this)
{
  return *((double *)this + 123);
}

double `non-virtual thunk to'WebCore::HTMLMediaElement::volume(WebCore::HTMLMediaElement *this)
{
  return *((double *)this + 106);
}

uint64_t (**WebCore::HTMLMediaElement::setVolume@<X0>(uint64_t (**this)()@<X0>, double a2@<D0>, uint64_t a3@<X8>))()
{
  uint64_t v3;
  uint64_t (*v5)();
  uint64_t (**v6)();
  double v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (**v12[4])();
  double v13;

  v3 = (uint64_t)this;
  v13 = a2;
  v5 = this[228];
  v6 = (uint64_t (**)())this[229];
  v12[0] = (uint64_t (**)())"HTMLMediaElement";
  v12[1] = (uint64_t (**)())17;
  v12[2] = (uint64_t (**)())"setVolume";
  v12[3] = v6;
  if (*((_BYTE *)v5 + 12))
  {
    this = (uint64_t (**)())WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12, &v13);
    a2 = v13;
  }
  if (a2 < 0.0 || a2 > 1.0)
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v8 = *(double *)(v3 + 984);
    if (v8 != a2)
    {
      *(double *)(v3 + 984) = a2;
      v9 = **(unsigned int ***)(v3 + 848);
      if (!v9 || (v10 = atomic_load(v9), v10 == 1))
      {
        v11 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v11 = off_1E33C5B48;
        *(_QWORD *)(v11 + 8) = v3;
        *(double *)(v11 + 16) = v8;
        v12[0] = (uint64_t (**)())v11;
        WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v3, 9, v3 + 840, v12);
        this = v12[0];
        v12[0] = 0;
        if (this)
          this = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::setVolume@<X0>(uint64_t (**this)()@<X0>, double a2@<D0>, uint64_t a3@<X8>))()
{
  return WebCore::HTMLMediaElement::setVolume(this - 17, a2, a3);
}

unint64_t WebCore::HTMLMediaElement::muted(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x100) != 0)
    return ((*(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) >> 7) & 1;
  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_5;
    return 0;
  }
  v3 = *(uint64_t **)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return 0;
LABEL_5:
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::mutedAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 32))
    {
      break;
    }
    result = 0;
    v3 += 2;
    if (!--v4)
      return result;
  }
  return 1;
}

unint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::muted(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  if ((*(_DWORD *)((_BYTE *)this + 1129) & 0x100) != 0)
    return ((*(unsigned int *)((char *)this + 1129) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1133) << 32)) >> 7) & 1;
  v1 = *((_QWORD *)this - 4);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_5;
    return 0;
  }
  v3 = *(uint64_t **)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return 0;
LABEL_5:
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::mutedAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::mutedAttr + 32))
    {
      break;
    }
    result = 0;
    v3 += 2;
    if (!--v4)
      return result;
  }
  return 1;
}

WTF::MonotonicTime *WebCore::HTMLMediaElement::setMuted(WTF::MonotonicTime *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  unsigned __int8 *v9;
  WTF::MonotonicTime *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  BOOL v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  __int16 v39;
  __int16 v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t (**v49)();
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t (**v53)();
  uint64_t v54;
  void *v55;
  WebCore::PlatformMediaSession *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  double v63;
  WTF *v64;
  void *v65;
  __int16 v66;
  __int16 v67;
  const char *v68;
  uint64_t v69;
  WTF::MonotonicTime *v70;
  unsigned __int8 *v71;
  unsigned __int8 v72;
  uint64_t (**v73)();

  v2 = (uint64_t)this;
  v72 = a2;
  v3 = *((_QWORD *)this + 228);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 229);
  v68 = "HTMLMediaElement";
  v69 = 17;
  v70 = (WTF::MonotonicTime *)"setMuted";
  v71 = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    this = (WTF::MonotonicTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v68);
    v5 = v72;
  }
  else
  {
    v5 = a2;
  }
  v6 = (unsigned int *)(v2 + 1265);
  v7 = *(_DWORD *)(v2 + 1265);
  v8 = (v7 >> 7) & 1;
  if ((v7 & 0x100) != 0 && v8 == v5)
    goto LABEL_96;
  v9 = (unsigned __int8 *)WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(v2 + 40)
                                                                                                 + 8));
  if ((_DWORD)v9)
  {
    *(_BYTE *)(v2 + 1699) = 1;
    v10 = *(WTF::MonotonicTime **)(v2 + 1600);
    if (!v10)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v2);
      v10 = *(WTF::MonotonicTime **)(v2 + 1600);
    }
    WebCore::MediaElementSession::removeBehaviorRestriction(v10, 35175);
    v11 = WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8));
    *(_DWORD *)(v11 + 24) += 2;
    WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v11, v12);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      v39 = *(_WORD *)(v11 + 30);
      if ((v39 & 0x400) == 0)
      {
        v40 = *(_WORD *)(v11 + 28);
        if ((v40 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v11, v13);
        }
        else
        {
          if ((v40 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
            v39 = *(_WORD *)(v11 + 30);
          }
          *(_WORD *)(v11 + 30) = v39 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
        }
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1280))(v2);
    if ((_DWORD)v9 && v72)
      WebCore::HTMLMediaElement::userDidInterfereWithAutoplay((WebCore::HTMLMediaElement *)v2);
  }
  v14 = v72;
  if ((*(_BYTE *)(v2 + 22) & 8) == 0)
    goto LABEL_33;
  v15 = *(uint64_t **)(v2 + 40);
  v16 = v15[1];
  if (!*(_QWORD *)(v16 + 1944) || *(_BYTE *)(v16 + 3405))
    goto LABEL_33;
  if ((*(_BYTE *)(v2 + 70) & 4) != 0)
  {
    v20 = *v15;
    v21 = (*(_WORD *)(v20 + 28) & 0x80) == 0 || v20 == 0;
    v22 = v20 + 216;
    if (v21)
      v22 = v16 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v22 + 236))
      goto LABEL_33;
  }
  v17 = *(_QWORD *)(v16 + 1272);
  if (v17 && (*(_BYTE *)(v17 + 70) & 4) != 0)
  {
LABEL_33:
    LOBYTE(v68) = 0;
    v70 = 0;
    v71 = 0;
    v69 = v2;
  }
  else
  {
    if (*(_BYTE *)(v16 + 3362)
      || (v18 = *(unsigned __int8 *)(v16 + 3390), !*(_BYTE *)(v16 + 3390))
      && (*(_BYTE *)(v16 + 70) & 8) == 0
      && !*(_QWORD *)(v16 + 1560)
      && (v19 = *(_QWORD *)(v16 + 1328), !*(_BYTE *)(v19 + 233))
      && !*(_BYTE *)(v19 + 234))
    {
      LOBYTE(v68) = 1;
      v70 = 0;
      v71 = 0;
      v69 = v2;
LABEL_45:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v68, (WTF::StringImpl *)0x30, v72, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v69, (unsigned __int8 **)&v70);
      v14 = v72;
      goto LABEL_34;
    }
    v27 = *(unsigned __int8 *)(v16 + 3391);
    if (v18)
      v28 = v27 == 0;
    else
      v28 = 0;
    v29 = !v28;
    LOBYTE(v68) = v29;
    v70 = 0;
    v71 = 0;
    v69 = v2;
    if (!v28)
      goto LABEL_45;
  }
LABEL_34:
  v23 = *v6 & 0xFFFFFE7F | ((v14 & 1) << 7) | 0x100;
  *(_WORD *)(v2 + 1269) = *(_WORD *)(v2 + 1269);
  *v6 = v23;
  if (*(int *)(v2 + 1148) > 0)
    goto LABEL_71;
  v24 = *(_QWORD *)(v2 + 1136);
  if (!v24)
    goto LABEL_71;
  v25 = *(unsigned __int8 **)v24;
  if (__ldaxr(*(unsigned __int8 **)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v25))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_48:
  ++*((_QWORD *)v25 + 1);
  v30 = __ldxr(v25);
  if (v30 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_53;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_53:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1472))(v2) & 1) != 0)
    goto LABEL_69;
  v31 = *(_QWORD *)(v2 + 1416);
  if (v31)
  {
    if (*(_BYTE *)(v31 + 104))
      goto LABEL_69;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528);
  if (!v32)
    goto LABEL_62;
  v33 = *(_QWORD *)(v32 + 8);
  if (!v33)
    goto LABEL_62;
  v34 = *(_QWORD *)(v33 + 24);
  if (!v34)
    goto LABEL_62;
  v35 = *(_QWORD *)(v34 + 8);
  if (!v35)
    goto LABEL_62;
  v36 = (*(_DWORD *)v35)++;
  v37 = *(_BYTE *)(v35 + 352);
  if (!v36)
  {
    WebCore::Page::~Page(v35);
    WTF::fastFree(v41, v42);
    if ((v37 & 1) == 0)
      goto LABEL_62;
LABEL_69:
    LOBYTE(v38) = 1;
    goto LABEL_70;
  }
  *(_DWORD *)v35 = v36;
  if ((v37 & 1) != 0)
    goto LABEL_69;
LABEL_62:
  v38 = (*(unsigned __int16 *)(v2 + 1269) >> 9) & 1;
LABEL_70:
  *(_BYTE *)(v24 + 227) = v38;
  (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 72) + 512))(*(_QWORD *)(v24 + 72));
  v9 = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v24);
LABEL_71:
  if (v8 != v5)
  {
    v43 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v43 || (v44 = *(_QWORD *)(v43 + 96)) == 0)
      v44 = WebCore::threadGlobalDataSlow((WebCore *)v9);
    v45 = *(_QWORD *)(v44 + 40);
    if (!v45)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v44);
      v45 = *(_QWORD *)(v44 + 40);
    }
    v46 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v46);
    *(_DWORD *)(v46 + 16) = 1;
    *(_QWORD *)v46 = off_1E33A4B48;
    *(_QWORD *)(v46 + 8) = 0;
    *(_DWORD *)(v46 + 20) = *(_DWORD *)(v46 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v45 + 2264) != 0);
    v48 = *(_DWORD **)(v45 + 2264);
    if (v48)
      *v48 += 2;
    *(_QWORD *)(v46 + 24) = v48;
    *(_QWORD *)(v46 + 32) = 0;
    *(_QWORD *)(v46 + 40) = 0;
    *(_QWORD *)(v46 + 48) = 0;
    *(_QWORD *)(v46 + 56) = v47;
    *(_QWORD *)(v46 + 64) = 0;
    v73 = (uint64_t (**)())v46;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v2 + 112), v2, 9, v2 + 824, (uint64_t *)&v73);
    v49 = v73;
    v73 = 0;
    if (v49)
    {
      if (*((_DWORD *)v49 + 4) == 1)
        (*((void (**)(uint64_t (**)()))*v49 + 1))(v49);
      else
        --*((_DWORD *)v49 + 4);
    }
    v50 = **(unsigned int ***)(v2 + 808);
    if (!v50 || (v51 = atomic_load(v50), v51 == 1))
    {
      v52 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v52 = off_1E33C5E68;
      *(_QWORD *)(v52 + 8) = v2;
      v73 = (uint64_t (**)())v52;
      WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v2, 9, v2 + 800, &v73);
      v53 = v73;
      v73 = 0;
      if (v53)
        (*((void (**)(uint64_t (**)()))*v53 + 1))(v53);
    }
  }
  WebCore::HTMLMediaElement::updateShouldPlay((WebCore::HTMLMediaElement *)v2);
  v54 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  *(_DWORD *)(v54 + 24) += 2;
  WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v54);
  if (*(_DWORD *)(v54 + 24) == 2)
  {
    v66 = *(_WORD *)(v54 + 30);
    if ((v66 & 0x400) == 0)
    {
      v67 = *(_WORD *)(v54 + 28);
      if ((v67 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v54, v55);
      }
      else
      {
        if ((v67 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v54 + 160) + 16))(*(_QWORD *)(v54 + 160));
          v66 = *(_WORD *)(v54 + 30);
        }
        *(_WORD *)(v54 + 30) = v66 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 72))(v54);
      }
    }
  }
  else
  {
    *(_DWORD *)(v54 + 24) -= 2;
  }
  WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())v2);
  v56 = *(WebCore::PlatformMediaSession **)(v2 + 1600);
  if (!v56)
  {
    WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v2);
    v56 = *(WebCore::PlatformMediaSession **)(v2 + 1600);
  }
  WebCore::PlatformMediaSession::canProduceAudioChanged(v56);
  WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)v2);
  if ((_BYTE)v68)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v69, &v71);
  if (v71)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v71, v57);
  this = v70;
  if (v70)
    this = (WTF::MonotonicTime *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v70, v57);
LABEL_96:
  v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528);
  if (v58)
  {
    v59 = *(_QWORD *)(v58 + 8);
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 24);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 8);
        if (v61)
        {
          v62 = (*(_DWORD *)v61)++;
          if ((*(_QWORD *)(v61 + 1064) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v61 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v61 + 1056) = 0;
            WTF::MonotonicTime::now(this);
            this = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v61 + 1032, v63 + 0.0);
            v62 = *(_DWORD *)v61 - 1;
          }
          if (v62)
          {
            *(_DWORD *)v61 = v62;
          }
          else
          {
            WebCore::Page::~Page(v61);
            return (WTF::MonotonicTime *)WTF::fastFree(v64, v65);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::effectiveMuted(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  WTF *v10;
  void *v11;

  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) == 0)
  {
    v2 = *((_QWORD *)this + 177);
    if (!v2 || !*(_BYTE *)(v2 + 104))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
      if (!v3)
        return (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
      v4 = *(_QWORD *)(v3 + 8);
      if (!v4)
        return (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
      v5 = *(_QWORD *)(v4 + 24);
      if (!v5)
        return (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
      v6 = *(_QWORD *)(v5 + 8);
      if (!v6)
        return (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
      v7 = (*(_DWORD *)v6)++;
      v8 = *(_BYTE *)(v6 + 352);
      if (v7)
      {
        *(_DWORD *)v6 = v7;
        if ((v8 & 1) == 0)
          return (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
      }
      else
      {
        WebCore::Page::~Page(v6);
        WTF::fastFree(v10, v11);
        if ((v8 & 1) == 0)
          return (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
      }
    }
  }
  return 1;
}

void WebCore::HTMLMediaElement::updateShouldPlay(WebCore::HTMLMediaElement *this)
{
  void *v2;
  uint64_t v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9[4];
  int v10;

  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) != 0)
    goto LABEL_11;
  v3 = *((_QWORD *)this + 200);
  if (!v3)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v3 = *((_QWORD *)this + 200);
  }
  WebCore::MediaElementSession::playbackStateChangePermitted(v3, 0, (uint64_t)v9);
  if (!BYTE4(v9[0]))
  {
LABEL_11:
    WebCore::HTMLMediaElement::canTransitionFromAutoplayToPlay(this, v2, (int *)v9);
    if (!BYTE4(v9[0]))
      (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1440))(this);
  }
  else
  {
    WebCore::DOMException::create(0x1Fu, MEMORY[0x1E0CBF738], v9);
    WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises((uint64_t)this, v9);
    v4 = (_DWORD *)v9[0];
    v9[0] = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    WebCore::HTMLMediaElement::pauseInternal(this);
    v10 = 1;
    v6 = *((_QWORD *)this + 228);
    v7 = *((_QWORD *)this + 229);
    v9[0] = (uint64_t)"HTMLMediaElement";
    v9[1] = 17;
    v9[2] = (uint64_t)"setAutoplayEventPlaybackState";
    v9[3] = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9, &v10);
      v8 = v10;
      *((_DWORD *)this + 323) = v10;
      if (v8 != 1)
        return;
    }
    else
    {
      *((_DWORD *)this + 323) = 1;
    }
    WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v5);
    WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
  }
}

WTF::MonotonicTime *`non-virtual thunk to'WebCore::HTMLMediaElement::setMuted(WebCore::HTMLMediaElement *this, int a2)
{
  return WebCore::HTMLMediaElement::setMuted((WebCore::HTMLMediaElement *)((char *)this - 136), a2);
}

unsigned __int8 *WebCore::HTMLMediaElement::setVolumeLocked(unsigned __int8 *this, void *a2)
{
  unsigned int *v2;
  unint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  char v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;

  v2 = (unsigned int *)(this + 1265);
  v3 = *(unsigned int *)(this + 1265) | ((unint64_t)*(unsigned __int16 *)(this + 1269) << 32);
  if (((((v3 & 0x10000000000) == 0) ^ a2) & 1) != 0)
    return this;
  v4 = (int)a2;
  if ((this[22] & 8) == 0)
    goto LABEL_21;
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_21;
  if ((this[70] & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_21;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 70) & 4) != 0)
    {
LABEL_21:
      LOBYTE(v21) = 0;
      v23 = 0;
      v24 = 0;
      v22 = this;
      goto LABEL_22;
    }
  }
  if (!*(_BYTE *)(v6 + 3362))
  {
    v8 = *(unsigned __int8 *)(v6 + 3390);
    if (*(_BYTE *)(v6 + 3390)
      || (*(_BYTE *)(v6 + 70) & 8) != 0
      || *(_QWORD *)(v6 + 1560)
      || (v9 = *(_QWORD *)(v6 + 1328), *(_BYTE *)(v9 + 233))
      || *(_BYTE *)(v9 + 234))
    {
      v15 = *(unsigned __int8 *)(v6 + 3391);
      if (v8)
        v16 = v15 == 0;
      else
        v16 = 0;
      v17 = !v16;
      LOBYTE(v21) = v17;
      v23 = 0;
      v24 = 0;
      v22 = this;
      if (!v16)
        goto LABEL_37;
LABEL_22:
      v13 = 256;
      if (!(_DWORD)a2)
        v13 = 0;
      v14 = v3 & 0xFFFFFEFFFFFFFFFFLL;
      *v2 = v14;
      *(_WORD *)(this + 1269) = WORD2(v14) | v13;
      goto LABEL_25;
    }
  }
  LOBYTE(v21) = 1;
  v23 = 0;
  v24 = 0;
  v22 = this;
LABEL_37:
  WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v21, (WTF::StringImpl *)0x51, (int)a2, 0);
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v22, &v23);
  v18 = v21;
  v19 = 0x10000000000;
  if (!v4)
    v19 = 0;
  v20 = (*v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32)) & 0xFFFFFEFFFFFFFFFFLL | v19;
  *v2 = *v2;
  *((_WORD *)v2 + 2) = WORD2(v20);
  if (v18)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v22, &v24);
LABEL_25:
  if (v24)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v24, a2);
  this = v23;
  if (v23)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v23, a2);
  return this;
}

void WebCore::HTMLMediaElement::togglePlayState(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v5[0] = "HTMLMediaElement";
  v5[1] = 17;
  v5[2] = "togglePlayState";
  v5[3] = v3;
  (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1520))(this);
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v5, "canPlay() is ");
  }
  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1520))(this))
  {
    WebCore::HTMLMediaElement::updatePlaybackRate(this);
    WebCore::HTMLMediaElement::playInternal((uint64_t)this);
  }
  else
  {
    WebCore::HTMLMediaElement::pauseInternal(this);
  }
}

WTF::MonotonicTime *WebCore::HTMLMediaElement::beginScrubbing(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  uint64_t v7;
  WTF::MonotonicTime *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  BOOL v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  int v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  unint64_t v61;
  WTF::MonotonicTime *v62;
  uint64_t v63;
  _BYTE *v64;
  size_t v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned __int128 v68;
  char v69;
  _QWORD v70[4];
  WTF::Logger *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 buf;
  const char *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v70[0] = "HTMLMediaElement";
  v70[1] = 17;
  v70[2] = "beginScrubbing";
  v70[3] = v3;
  v4 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      v6 = v4;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v70);
      WTF::String::String((WTF::String *)&v73, "paused() is ");
      if (v6)
        v7 = 5;
      else
        v7 = 6;
      result = (WTF::MonotonicTime *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = (WTF::StringImpl *)buf;
      v11 = v74;
      if (v74)
      {
        v12 = *((_DWORD *)v74 + 1);
        if (v73)
          goto LABEL_12;
      }
      else
      {
        v12 = 0;
        if (v73)
        {
LABEL_12:
          v13 = *((_DWORD *)v73 + 1);
          if ((_QWORD)buf)
          {
LABEL_13:
            v14 = *(_DWORD *)(buf + 4);
LABEL_14:
            if (((v14 | v13) & 0x80000000) == 0)
            {
              v15 = __OFADD__(v13, v14);
              v16 = v13 + v14;
              v17 = v15;
              if ((v12 & 0x80000000) == 0 && !v17)
              {
                v18 = (v12 + v16);
                if (!__OFADD__(v12, v16))
                {
                  if (v74 && (*((_BYTE *)v74 + 16) & 4) == 0)
                  {
                    v19 = 0;
                    goto LABEL_28;
                  }
                  if (v73)
                  {
                    v20 = *((_DWORD *)v73 + 4);
                    v19 = (v20 >> 2) & 1;
                    if (!(_QWORD)buf || (v20 & 4) == 0)
                    {
LABEL_28:
                      result = (WTF::MonotonicTime *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, v74, (uint64_t)v73, buf, &v75);
                      if (v75)
                      {
                        if (v10)
                        {
                          if (*(_DWORD *)v10 == 2)
                            WTF::StringImpl::destroy(v10, v9);
                          else
                            *(_DWORD *)v10 -= 2;
                        }
                        goto LABEL_32;
                      }
LABEL_143:
                      __break(0xC471u);
                      return result;
                    }
LABEL_27:
                    v19 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
                    goto LABEL_28;
                  }
                  if ((_QWORD)buf)
                    goto LABEL_27;
                  if (!(_DWORD)v18)
                  {
                    v63 = MEMORY[0x1E0CBEF70];
                    *MEMORY[0x1E0CBEF70] += 2;
LABEL_132:
                    v75 = (WTF::StringImpl *)v63;
LABEL_32:
                    v21 = v73;
                    v73 = 0;
                    if (v21)
                    {
                      if (*(_DWORD *)v21 == 2)
                        WTF::StringImpl::destroy(v21, v9);
                      else
                        *(_DWORD *)v21 -= 2;
                    }
                    v22 = v74;
                    v74 = 0;
                    if (v22)
                    {
                      if (*(_DWORD *)v22 == 2)
                        WTF::StringImpl::destroy(v22, v9);
                      else
                        *(_DWORD *)v22 -= 2;
                    }
                    v23 = qword_1ECE7C4A0;
                    v24 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                    if ((_DWORD)v24)
                    {
                      WTF::String::utf8();
                      v26 = v71 ? (char *)v71 + 16 : 0;
                      LODWORD(buf) = 136446210;
                      *(_QWORD *)((char *)&buf + 4) = v26;
                      _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                      v24 = (uint64_t)v71;
                      v71 = 0;
                      if (v24)
                      {
                        if (*(_DWORD *)v24 == 1)
                          v24 = WTF::fastFree((WTF *)v24, v25);
                        else
                          --*(_DWORD *)v24;
                      }
                    }
                    if (WebCore::LogMedia)
                      v27 = byte_1ECE7C490 >= 3u;
                    else
                      v27 = 0;
                    if (v27)
                    {
                      v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                      while (1)
                      {
                        v29 = *v28;
                        if ((v29 & 1) != 0)
                          break;
                        v30 = __ldaxr(v28);
                        if (v30 == v29)
                        {
                          if (!__stxr(v29 | 1, v28))
                          {
                            v31 = WTF::Logger::observers((WTF::Logger *)v24);
                            v32 = *(unsigned int *)(v31 + 12);
                            if ((_DWORD)v32)
                            {
                              v33 = *(uint64_t **)v31;
                              v34 = *(_QWORD *)v31 + 8 * v32;
                              v35 = v7 - 1;
                              do
                              {
                                v36 = *v33;
                                LODWORD(buf) = 0;
                                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v70);
                                LODWORD(v77) = 0;
                                WTF::String::String((WTF::String *)&v78, "paused() is ");
                                v79 = 0;
                                if (v35)
                                {
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v37 = v71;
                                }
                                else
                                {
                                  v51 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                                  *MEMORY[0x1E0CBEF70] += 2;
                                  v37 = v51;
                                }
                                v80 = v37;
                                v71 = 0;
                                v72 = 0;
                                v38 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                                LODWORD(v72) = 3;
                                v71 = v38;
                                v39 = HIDWORD(v72);
                                *((_DWORD *)v38 + 4 * HIDWORD(v72)) = buf;
                                v40 = *((_QWORD *)&buf + 1);
                                if (*((_QWORD *)&buf + 1))
                                  **((_DWORD **)&buf + 1) += 2;
                                *((_QWORD *)v38 + 2 * v39 + 1) = v40;
                                *((_DWORD *)v38 + 4 * (v39 + 1)) = (_DWORD)v77;
                                v41 = v78;
                                if (v78)
                                  *(_DWORD *)v78 += 2;
                                *((_QWORD *)v38 + 2 * (v39 + 1) + 1) = v41;
                                *((_DWORD *)v38 + 4 * (v39 + 2)) = v79;
                                v42 = v80;
                                if (v80)
                                  *(_DWORD *)v80 += 2;
                                *((_QWORD *)v38 + 2 * (v39 + 2) + 1) = v42;
                                HIDWORD(v72) = v39 + 3;
                                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v36 + 16))(v36, &WebCore::LogMedia, 3, &v71);
                                v43 = v71;
                                if (HIDWORD(v72))
                                {
                                  v44 = v7;
                                  v45 = 16 * HIDWORD(v72);
                                  v46 = (WTF::StringImpl **)((char *)v71 + 8);
                                  do
                                  {
                                    v47 = *v46;
                                    *v46 = 0;
                                    if (v47)
                                    {
                                      if (*(_DWORD *)v47 == 2)
                                        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v25);
                                      else
                                        *(_DWORD *)v47 -= 2;
                                    }
                                    v46 += 2;
                                    v45 -= 16;
                                  }
                                  while (v45);
                                  v43 = v71;
                                  v7 = v44;
                                }
                                if (v43)
                                {
                                  v71 = 0;
                                  LODWORD(v72) = 0;
                                  WTF::fastFree(v43, v25);
                                }
                                v48 = v80;
                                v80 = 0;
                                if (v48)
                                {
                                  if (*(_DWORD *)v48 == 2)
                                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                                  else
                                    *(_DWORD *)v48 -= 2;
                                }
                                v49 = v78;
                                v78 = 0;
                                if (v49)
                                {
                                  if (*(_DWORD *)v49 == 2)
                                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v25);
                                  else
                                    *(_DWORD *)v49 -= 2;
                                }
                                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                                *((_QWORD *)&buf + 1) = 0;
                                if (v50)
                                {
                                  if (*(_DWORD *)v50 == 2)
                                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v25);
                                  else
                                    *(_DWORD *)v50 -= 2;
                                }
                                ++v33;
                              }
                              while (v33 != (uint64_t *)v34);
                            }
                            v52 = __ldxr(v28);
                            if (v52 == 1)
                            {
                              if (!__stlxr(0, v28))
                                break;
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                            break;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                      }
                    }
                    v53 = v75;
                    v75 = 0;
                    if (v53)
                    {
                      if (*(_DWORD *)v53 == 2)
                        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v25);
                      else
                        *(_DWORD *)v53 -= 2;
                    }
                    goto LABEL_99;
                  }
                  if ((v18 & 0x80000000) == 0)
                  {
                    result = (WTF::MonotonicTime *)WTF::tryFastCompactMalloc((WTF *)(v18 + 20));
                    v63 = buf;
                    if ((_QWORD)buf)
                    {
                      v64 = (_BYTE *)(buf + 20);
                      *(_DWORD *)buf = 2;
                      *(_DWORD *)(v63 + 4) = v18;
                      *(_QWORD *)(v63 + 8) = v63 + 20;
                      *(_DWORD *)(v63 + 16) = 4;
                      if (v11)
                      {
                        v9 = (WTF::StringImpl *)*((_QWORD *)v11 + 1);
                        v65 = *((unsigned int *)v11 + 1);
                        if ((*((_BYTE *)v11 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v65)
                          {
                            if ((_DWORD)v65 == 1)
                              *v64 = *(_BYTE *)v9;
                            else
                              memcpy(v64, v9, v65);
                          }
                        }
                        else
                        {
                          v66 = &v64[v65];
                          if (v65 >= 0x10)
                          {
                            v67 = &v64[v65 & 0xFFFFFFF0];
                            do
                            {
                              v68 = (unsigned __int128)vld2q_s8((const char *)v9);
                              v9 = (WTF::StringImpl *)((char *)v9 + 32);
                              *(_OWORD *)v64 = v68;
                              v64 += 16;
                            }
                            while (v64 != v67);
                            v64 = v67;
                          }
                          while (v64 != v66)
                          {
                            v69 = *(_BYTE *)v9;
                            v9 = (WTF::StringImpl *)((char *)v9 + 2);
                            *v64++ = v69;
                          }
                        }
                      }
                      goto LABEL_132;
                    }
                  }
                }
              }
            }
            v75 = 0;
            goto LABEL_143;
          }
LABEL_122:
          v14 = 0;
          goto LABEL_14;
        }
      }
      v13 = 0;
      if ((_QWORD)buf)
        goto LABEL_13;
      goto LABEL_122;
    }
  }
LABEL_99:
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) == 0)
  {
    if (*((_QWORD *)this + 204))
    {
      v54 = *((_QWORD *)this + 142);
      if (v54)
      {
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v54 + 72) + 1048))(*(_QWORD *)(v54 + 72)) & 1) != 0)
          goto LABEL_108;
      }
    }
    if (!WebCore::HTMLMediaElement::endedPlayback(this))
      goto LABEL_109;
    v55 = *((_QWORD *)this + 177);
    if (v55)
      (*(void (**)(_QWORD))(**(_QWORD **)(v55 + 256) + 40))(*(_QWORD *)(v55 + 256));
    else
      v56 = *((double *)this + 109);
    if (v56 > 0.0)
    {
LABEL_108:
      (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1448))(this);
    }
    else
    {
LABEL_109:
      v57 = 1;
      LOBYTE(v70[0]) = 1;
      v58 = *((_QWORD *)this + 228);
      v59 = (WTF::StringImpl *)*((_QWORD *)this + 229);
      *(_QWORD *)&buf = "HTMLMediaElement";
      *((_QWORD *)&buf + 1) = 17;
      v77 = "setPausedInternal";
      v78 = v59;
      if (*(_BYTE *)(v58 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
        v57 = LOBYTE(v70[0]);
      }
      v60 = *(unsigned int *)((char *)this + 1265);
      v61 = v60 & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
      *(_DWORD *)((char *)this + 1265) = v60 & 0xFFFBFFFF | (v57 << 18);
      *(_WORD *)((char *)this + 1269) = WORD2(v61);
      WebCore::HTMLMediaElement::scheduleUpdatePlayState((uint64_t (**)())this);
    }
  }
  v62 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
  if (!v62)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v62 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
  }
  return WebCore::MediaElementSession::removeBehaviorRestriction(v62, 0x2000);
}

WTF::MonotonicTime *`non-virtual thunk to'WebCore::HTMLMediaElement::beginScrubbing(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::beginScrubbing((WebCore::HTMLMediaElement *)((char *)this - 136));
}

uint64_t (**WebCore::HTMLMediaElement::endScrubbing(uint64_t (**this)()))()
{
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t (*v3)();
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t (*v9)();
  int v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t (*v15)();
  BOOL v16;

  v1 = (uint64_t)this;
  v2 = this[228];
  v3 = this[229];
  v12 = "HTMLMediaElement";
  v13 = 17;
  v14 = "endScrubbing";
  v15 = v3;
  v4 = (unsigned int *)((char *)this + 1265);
  v5 = *(unsigned int *)((char *)this + 1265);
  v6 = v5 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  v16 = (v5 & 0x40000) != 0;
  if (*((_BYTE *)v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      this = (uint64_t (**)())WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v12, "m_pausedInternal is");
      v6 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
    }
  }
  if ((v6 & 0x40000) != 0)
  {
    v16 = 0;
    v8 = *(_QWORD *)(v1 + 1824);
    v9 = *(uint64_t (**)())(v1 + 1832);
    v12 = "HTMLMediaElement";
    v13 = 17;
    v14 = "setPausedInternal";
    v15 = v9;
    if (*(_BYTE *)(v8 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v12);
      v10 = v16;
      v6 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
    }
    else
    {
      v10 = 0;
    }
    v11 = v6 & 0xFFFFFFFFFFFBFFFFLL;
    *((_WORD *)v4 + 2) = WORD2(v11);
    *v4 = v11 | (v10 << 18);
    return WebCore::HTMLMediaElement::scheduleUpdatePlayState((uint64_t (**)())v1);
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::endScrubbing(uint64_t (**this)()))()
{
  return WebCore::HTMLMediaElement::endScrubbing(this - 17);
}

uint64_t WebCore::HTMLMediaElement::beginScanning(uint64_t a1, int a2)
{
  int v4;
  char v5;
  int v6;
  int v7;
  __n128 v8;
  double v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  WTF::MonotonicTime *v15;
  double v16;
  double v17;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  v5 = v4;
  *(_DWORD *)(a1 + 1256) = v4;
  *(_DWORD *)(a1 + 1260) = a2;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1);
  if ((v5 & 1) != 0)
  {
    if (v6)
      v7 = 2;
    else
      v7 = 0;
    *(_DWORD *)(a1 + 1252) = v7;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1440))(a1);
    v9 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1408))(a1);
    v10 = *(_DWORD *)(a1 + 1260);
    v11 = *(_QWORD *)(a1 + 1136);
    v12 = 0.0;
    if (v11)
    {
      v13 = (*(double (**)(_QWORD))(**(_QWORD **)(v11 + 72) + 544))(*(_QWORD *)(v11 + 72));
      v14 = *(_QWORD *)(a1 + 1136);
      if (v14)
        v12 = (*(double (**)(_QWORD))(**(_QWORD **)(v14 + 72) + 536))(*(_QWORD *)(v14 + 72));
    }
    else
    {
      v13 = 0.0;
    }
    v8.n128_f64[0] = fmin(fabs(v9 + v9), 8.0);
    if (!v10)
      v8.n128_f64[0] = -v8.n128_f64[0];
    if (v8.n128_f64[0] < v13)
      v8.n128_f64[0] = v13;
    if (v12 < v8.n128_f64[0])
      v8.n128_f64[0] = v12;
    v15 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 1416))(a1, v8);
  }
  else
  {
    *(_DWORD *)(a1 + 1252) = v6 ^ 1;
    v15 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1448))(a1);
  }
  v16 = 0.1;
  if (*(_DWORD *)(a1 + 1256))
    v16 = 1.5;
  *(double *)(a1 + 440) = v16;
  WTF::MonotonicTime::now(v15);
  return WebCore::TimerBase::setNextFireTime(a1 + 416, v17 + 0.0);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::beginScanning(uint64_t a1, int a2)
{
  return WebCore::HTMLMediaElement::beginScanning(a1 - 136, a2);
}

_DWORD *WebCore::HTMLMediaElement::endScanning(_DWORD *this)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;

  v1 = this;
  if (this[314] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)this + 1392))(this);
    this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 1416))(v1);
  }
  v2 = v1[313];
  if (v2 == 1)
  {
    v3 = 180;
  }
  else
  {
    if (v2 != 2)
      goto LABEL_8;
    v3 = 181;
  }
  this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8 * v3))(v1);
LABEL_8:
  if ((*((_QWORD *)v1 + 56) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)v1 + 56) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return (_DWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 104));
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::endScanning(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = this;
  v2 = this - 136;
  if (*(_DWORD *)(this + 1120) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1392))(this - 136);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1416))(v2);
  }
  v3 = *(_DWORD *)(v1 + 1116);
  if (v3 == 1)
  {
    v4 = 180;
  }
  else
  {
    if (v3 != 2)
      goto LABEL_8;
    v4 = 181;
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8 * v4))(v2);
LABEL_8:
  if ((*(_QWORD *)(v1 + 312) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(v1 + 312) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 280));
  }
  return this;
}

BOOL WebCore::HTMLMediaElement::canPlay(WebCore::HTMLMediaElement *this)
{
  uint64_t v3;
  uint64_t v4;
  double v5;

  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) != 0)
    return 1;
  if (*((_QWORD *)this + 204))
  {
    v3 = *((_QWORD *)this + 142);
    if (v3)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 1048))(*(_QWORD *)(v3 + 72)) & 1) != 0)
        return 1;
    }
  }
  if (!WebCore::HTMLMediaElement::endedPlayback(this))
    return *((_DWORD *)this + 226) < 1;
  v4 = *((_QWORD *)this + 177);
  if (v4)
    (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 256) + 40))(*(_QWORD *)(v4 + 256));
  else
    v5 = *((double *)this + 109);
  return v5 > 0.0 || *((_DWORD *)this + 226) < 1;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::canPlay(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v2 = (WebCore::HTMLMediaElement *)((char *)this - 136);
  if (((*(uint64_t (**)(char *))(*((_QWORD *)this - 17) + 1384))((char *)this - 136) & 1) != 0)
    return 1;
  if (*((_QWORD *)this + 187))
  {
    v4 = *((_QWORD *)this + 125);
    if (v4)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 1048))(*(_QWORD *)(v4 + 72)) & 1) != 0)
        return 1;
    }
  }
  if (!WebCore::HTMLMediaElement::endedPlayback(v2))
    return *((_DWORD *)this + 192) < 1;
  v5 = *((_QWORD *)this + 160);
  if (v5)
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 256) + 40))(*(_QWORD *)(v5 + 256));
  else
    v6 = *((double *)this + 92);
  return v6 > 0.0 || *((_DWORD *)this + 192) < 1;
}

WebCore::AudioTrack *WebCore::HTMLMediaElement::mediaPlayerDidAddAudioTrack(WebCore::HTMLMediaElement *this, WebCore::AudioTrackPrivate *a2)
{
  uint64_t v4;
  _DWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ScriptExecutionContext *v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::AudioTrack *result;
  WebCore::AudioTrack *v28;
  uint64_t v29[4];

  if ((*(_DWORD *)((_BYTE *)this + 1265) & 2) != 0)
  {
    v4 = *((_QWORD *)this + 200);
    if (!v4)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v4 = *((_QWORD *)this + 200);
    }
    WebCore::MediaElementSession::playbackStateChangePermitted(v4, 0, (uint64_t)v29);
    if (BYTE4(v29[0]))
    {
      WebCore::DOMException::create(0x1Fu, MEMORY[0x1E0CBF738], v29);
      WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises((uint64_t)this, v29);
      v5 = (_DWORD *)v29[0];
      v29[0] = 0;
      if (v5)
      {
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
      }
      WebCore::HTMLMediaElement::pauseInternal(this);
      LODWORD(v28) = 1;
      v7 = *((_QWORD *)this + 228);
      v8 = *((_QWORD *)this + 229);
      v29[0] = (uint64_t)"HTMLMediaElement";
      v29[1] = 17;
      v29[2] = (uint64_t)"setAutoplayEventPlaybackState";
      v29[3] = v8;
      if (*(_BYTE *)(v7 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v29, (int *)&v28);
        v9 = (int)v28;
        *((_DWORD *)this + 323) = (_DWORD)v28;
        if (v9 != 1)
          goto LABEL_13;
      }
      else
      {
        *((_DWORD *)this + 323) = 1;
      }
      WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v6);
      WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
    }
  }
LABEL_13:
  v10 = *((_QWORD *)this + 15);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
  {
    v12 = (WebCore::ScriptExecutionContext *)(v11 - 96);
    v13 = *(unsigned __int8 *)(v11 + 178);
    if (*(_BYTE *)(v11 + 178))
    {
      if (v13 == 1 || v13 == 2)
        ++*(_DWORD *)(v11 + 216);
    }
    else
    {
      *(_DWORD *)(v11 - 264) += 2;
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = WTF::fastMalloc((WTF *)0xC0);
  v28 = WebCore::AudioTrack::AudioTrack((WebCore::AudioTrack *)v14, v12, a2);
  v15 = (unsigned int *)*((_QWORD *)this + 228);
  v16 = v15 + 2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = *((_QWORD *)this + 229);
  do
    v19 = __ldaxr(v16);
  while (__stlxr(v19 + 1, v16));
  v20 = *(unsigned int **)(v14 + 88);
  *(_QWORD *)(v14 + 88) = v15;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  *(_QWORD *)(v14 + 96) = v18 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v14 + 44);
  (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(v14 + 168) + 112))(*(_QWORD *)(v14 + 168), v15);
  do
  {
    v24 = __ldaxr(v16);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v16));
  if (!v25)
  {
    atomic_store(1u, v15 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v28 + 152, (_QWORD *)this + 28, (uint64_t)v29);
  v26 = WebCore::HTMLMediaElement::ensureAudioTracks(this);
  WebCore::AudioTrackList::append(v26, (uint64_t *)&v28);
  result = v28;
  v28 = 0;
  if (!result)
  {
LABEL_34:
    if (!v12)
      return result;
    return (WebCore::AudioTrack *)WebCore::ScriptExecutionContext::deref(v12);
  }
  if (*((_DWORD *)result + 4) != 1)
  {
    --*((_DWORD *)result + 4);
    goto LABEL_34;
  }
  result = (WebCore::AudioTrack *)(*(uint64_t (**)(WebCore::AudioTrack *))(*(_QWORD *)result + 16))(result);
  if (v12)
    return (WebCore::AudioTrack *)WebCore::ScriptExecutionContext::deref(v12);
  return result;
}

_DWORD *WebCore::HTMLMediaElement::addAudioTrack(WebCore::HTMLMediaElement *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE v18[24];

  v4 = *a2;
  v5 = (unsigned int *)*((_QWORD *)a1 + 228);
  v6 = v5 + 2;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((_QWORD *)a1 + 229);
  do
    v9 = __ldaxr(v6);
  while (__stlxr(v9 + 1, v6));
  v10 = *(unsigned int **)(v4 + 88);
  *(_QWORD *)(v4 + 88) = v5;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  *(_QWORD *)(v4 + 96) = v8 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v4 + 44);
  (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(v4 + 168) + 112))(*(_QWORD *)(v4 + 168), v5);
  do
  {
    v14 = __ldaxr(v6);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v6));
  if (!v15)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*a2 + 152, (_QWORD *)a1 + 28, (uint64_t)v18);
  v16 = WebCore::HTMLMediaElement::ensureAudioTracks(a1);
  return WebCore::AudioTrackList::append(v16, a2);
}

WebCore::AudioTrack *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDidAddAudioTrack(WebCore::HTMLMediaElement *this, WebCore::AudioTrackPrivate *a2)
{
  return WebCore::HTMLMediaElement::mediaPlayerDidAddAudioTrack((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

WebCore::LoadableTextTrack *WebCore::HTMLMediaElement::mediaPlayerDidAddTextTrack(WebCore::HTMLMediaElement *this, WebCore::InbandTextTrackPrivate *a2)
{
  uint64_t v3;
  void *v4;
  WebCore::LoadableTextTrack *v5;
  WebCore::LoadableTextTrack *result;
  __int16 v7;
  __int16 v8;
  WebCore::LoadableTextTrack *v9;
  WebCore::InbandTextTrack *v10;

  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::InbandTextTrack::create((WebCore::InbandTextTrack *)(v3 + 192), a2, &v10);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v7 = *(_WORD *)(v3 + 30);
    if ((v7 & 0x400) == 0)
    {
      v8 = *(_WORD *)(v3 + 28);
      if ((v8 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v3, v4);
      }
      else
      {
        if ((v8 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v7 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v7 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v5 = v10;
  *((_DWORD *)v10 + 59) = 2;
  WebCore::HTMLMediaElement::scheduleConfigureTextTracks((uint64_t (**)())this);
  v9 = v5;
  WebCore::HTMLMediaElement::addTextTrack((uint64_t)this, &v9);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (WebCore::LoadableTextTrack *)(*(uint64_t (**)(WebCore::LoadableTextTrack *))(*(_QWORD *)result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

WebCore::LoadableTextTrack *WebCore::HTMLMediaElement::addTextTrack(uint64_t a1, WebCore::LoadableTextTrack **a2)
{
  WebCore::LoadableTextTrack *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Page *v15;
  uint64_t v16;
  WebCore::PageGroup *v17;
  WebCore::CaptionUserPreferencesMediaAF *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  WebCore::TextTrackList *v22;
  WTF *v24;
  void *v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  _BYTE v29[24];

  v4 = *a2;
  v5 = *(unsigned int **)(a1 + 1824);
  v6 = v5 + 2;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  (*(void (**)(WebCore::LoadableTextTrack *, unsigned int *, _QWORD))(*(_QWORD *)v4 + 56))(v4, v5, *(_QWORD *)(a1 + 1832));
  if (v5)
  {
    do
    {
      v8 = __ldaxr(v6);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v6));
    if (!v9)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  if (!*(_BYTE *)(a1 + 1396))
  {
    *(_BYTE *)(a1 + 1396) = 1;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::Document::registerForCaptionPreferencesChangedCallbacks((WebCore::Document *)v10, (WebCore::HTMLMediaElement *)a1);
    v12 = *(_QWORD *)(v10 + 528);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(WebCore::Page **)(v14 + 8);
          if (v15)
          {
            ++*(_DWORD *)v15;
            v16 = *((_QWORD *)v15 + 66);
            if (!v16 || (v17 = *(WebCore::PageGroup **)(v16 + 8)) == 0)
            {
              WebCore::Page::initGroup(v15);
              v28 = *((_QWORD *)v15 + 66);
              if (v28)
                v17 = *(WebCore::PageGroup **)(v28 + 8);
              else
                v17 = 0;
            }
            v18 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v17 + 5);
            if (!v18)
            {
              v18 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
              WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v18, v17);
              v19 = (_DWORD *)*((_QWORD *)v17 + 5);
              *((_QWORD *)v17 + 5) = v18;
              if (v19)
              {
                if (v19[2] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
                  v18 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v17 + 5);
                }
                else
                {
                  --v19[2];
                }
              }
            }
            *(_WORD *)(a1 + 1336) = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v18 + 16))(v18) | 0x100;
            v20 = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v18 + 80))(v18);
            *(_BYTE *)(a1 + 1768) = v20;
            if (v20)
              v21 = (*(_QWORD *)(*(_QWORD *)(v10 + 680) + 712) >> 53) & 1;
            else
              LOBYTE(v21) = 0;
            *(_BYTE *)(a1 + 1769) = v21;
            if (*(_DWORD *)v15 == 1)
            {
              WebCore::Page::~Page((uint64_t)v15);
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      v26 = *(_WORD *)(v10 + 30);
      if ((v26 & 0x400) == 0)
      {
        v27 = *(_WORD *)(v10 + 28);
        if ((v27 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v10, v11);
        }
        else
        {
          if ((v27 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
            v26 = *(_WORD *)(v10 + 30);
          }
          *(_WORD *)(v10 + 30) = v26 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
        }
      }
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)*a2 + 200, (_QWORD *)(a1 + 240), (uint64_t)v29);
  v22 = (WebCore::TextTrackList *)WebCore::HTMLMediaElement::ensureTextTracks((WebCore::HTMLMediaElement *)a1);
  return WebCore::TextTrackList::append(v22, a2);
}

WebCore::LoadableTextTrack *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDidAddTextTrack(WebCore::HTMLMediaElement *this, WebCore::InbandTextTrackPrivate *a2)
{
  return WebCore::HTMLMediaElement::mediaPlayerDidAddTextTrack((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

WebCore::VideoTrack *WebCore::HTMLMediaElement::mediaPlayerDidAddVideoTrack(WebCore::HTMLMediaElement *this, WebCore::VideoTrackPrivate *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::VideoTrack *result;
  WebCore::VideoTrack *v22;
  _BYTE v23[24];

  v4 = *((_QWORD *)this + 15);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
    v7 = *(unsigned __int8 *)(v5 + 178);
    if (*(_BYTE *)(v5 + 178))
    {
      if (v7 == 1 || v7 == 2)
        ++*(_DWORD *)(v5 + 216);
    }
    else
    {
      *(_DWORD *)(v5 - 264) += 2;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)0xC0);
  v22 = WebCore::VideoTrack::VideoTrack((WebCore::VideoTrack *)v8, v6, a2);
  v9 = (unsigned int *)*((_QWORD *)this + 228);
  v10 = v9 + 2;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *((_QWORD *)this + 229);
  do
    v13 = __ldaxr(v10);
  while (__stlxr(v13 + 1, v10));
  v14 = *(unsigned int **)(v8 + 88);
  *(_QWORD *)(v8 + 88) = v9;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  *(_QWORD *)(v8 + 96) = v12 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v8 + 44);
  (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(v8 + 168) + 112))(*(_QWORD *)(v8 + 168), v9);
  do
  {
    v18 = __ldaxr(v10);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v10));
  if (!v19)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v22 + 152, (_QWORD *)this + 32, (uint64_t)v23);
  v20 = WebCore::HTMLMediaElement::ensureVideoTracks(this);
  WebCore::VideoTrackList::append(v20, (uint64_t *)&v22);
  result = v22;
  v22 = 0;
  if (!result)
  {
LABEL_22:
    if (!v6)
      return result;
    return (WebCore::VideoTrack *)WebCore::ScriptExecutionContext::deref(v6);
  }
  if (*((_DWORD *)result + 4) != 1)
  {
    --*((_DWORD *)result + 4);
    goto LABEL_22;
  }
  result = (WebCore::VideoTrack *)(*(uint64_t (**)(WebCore::VideoTrack *))(*(_QWORD *)result + 16))(result);
  if (v6)
    return (WebCore::VideoTrack *)WebCore::ScriptExecutionContext::deref(v6);
  return result;
}

_DWORD *WebCore::HTMLMediaElement::addVideoTrack(WebCore::HTMLMediaElement *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE v18[24];

  v4 = *a2;
  v5 = (unsigned int *)*((_QWORD *)a1 + 228);
  v6 = v5 + 2;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((_QWORD *)a1 + 229);
  do
    v9 = __ldaxr(v6);
  while (__stlxr(v9 + 1, v6));
  v10 = *(unsigned int **)(v4 + 88);
  *(_QWORD *)(v4 + 88) = v5;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  *(_QWORD *)(v4 + 96) = v8 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v4 + 44);
  (*(void (**)(_QWORD, unsigned int *))(**(_QWORD **)(v4 + 168) + 112))(*(_QWORD *)(v4 + 168), v5);
  do
  {
    v14 = __ldaxr(v6);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v6));
  if (!v15)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*a2 + 152, (_QWORD *)a1 + 32, (uint64_t)v18);
  v16 = WebCore::HTMLMediaElement::ensureVideoTracks(a1);
  return WebCore::VideoTrackList::append(v16, a2);
}

WebCore::VideoTrack *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDidAddVideoTrack(WebCore::HTMLMediaElement *this, WebCore::VideoTrackPrivate *a2)
{
  return WebCore::HTMLMediaElement::mediaPlayerDidAddVideoTrack((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

_QWORD *WebCore::HTMLMediaElement::mediaPlayerDidRemoveAudioTrack(WebCore::HTMLMediaElement *this, WebCore::AudioTrackPrivate *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33C51C0;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients((uint64_t)a2, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDidRemoveAudioTrack(WebCore::HTMLMediaElement *this, WebCore::AudioTrackPrivate *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33C51C0;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients((uint64_t)a2, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *WebCore::HTMLMediaElement::mediaPlayerDidRemoveTextTrack(WebCore::HTMLMediaElement *this, WebCore::InbandTextTrackPrivate *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33C51C0;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients((uint64_t)a2, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDidRemoveTextTrack(WebCore::HTMLMediaElement *this, WebCore::InbandTextTrackPrivate *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33C51C0;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients((uint64_t)a2, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *WebCore::HTMLMediaElement::mediaPlayerDidRemoveVideoTrack(WebCore::HTMLMediaElement *this, WebCore::VideoTrackPrivate *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33C51C0;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients((uint64_t)a2, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDidRemoveVideoTrack(WebCore::HTMLMediaElement *this, WebCore::VideoTrackPrivate *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33C51C0;
  v5 = v3;
  WebCore::TrackPrivateBase::notifyClients((uint64_t)a2, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t WebCore::HTMLMediaElement::ensureAudioTracks(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;

  if (*((_QWORD *)this + 168))
    return *((_QWORD *)this + 168);
  v2 = *((_QWORD *)this + 15);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = v3 - 96;
    v5 = *(unsigned __int8 *)(v3 + 178);
    if (*(_BYTE *)(v3 + 178))
    {
      if (v5 == 1 || v5 == 2)
        ++*(_DWORD *)(v3 + 216);
    }
    else
    {
      *(_DWORD *)(v3 - 264) += 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &unk_1E33A4FC0;
  v8 = v6 + 32;
  if (v4)
  {
    v9 = v4;
    if (!*(_BYTE *)(v4 + 274))
    {
      v10 = v4 - 192;
      v11 = *(_QWORD *)(v4 + 512);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v9 = v10 + 192;
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v6 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 32), (WebCore::ScriptExecutionContext *)v9);
  *(_QWORD *)(v7 + 32) = &off_1E33A0540;
  *(_QWORD *)(v7 + 48) = 0;
  if (v9)
  {
    if (*(_BYTE *)(v9 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195C28D0CLL);
    }
    v30 = v8;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v9 + 128), &v30, (uint64_t)&v29);
  }
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_DWORD *)(v7 + 72) = 3;
  *(_QWORD *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 0;
  *(_QWORD *)v7 = off_1E33EA040;
  *(_QWORD *)(v7 + 32) = &unk_1E33EA0F8;
  v14 = *(_QWORD *)(v7 + 40);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(unsigned __int8 *)(v15 + 178);
      if (*(_BYTE *)(v15 + 178))
      {
        if (v16 == 1 || v16 == 2)
          ++*(_DWORD *)(v15 + 216);
      }
      else
      {
        *(_DWORD *)(v15 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v15 - 96), v13);
    }
  }
  v17 = (_DWORD *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = v7;
  if (v17)
  {
    if (v17[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17);
      if (!v4)
        goto LABEL_26;
      goto LABEL_25;
    }
    --v17[6];
  }
  if (v4)
LABEL_25:
    WebCore::ScriptExecutionContext::deref((_DWORD *)v4);
LABEL_26:
  v18 = *((_QWORD *)this + 168);
  if (v18)
    ++*(_DWORD *)(v18 + 24);
  v19 = *((_QWORD *)this + 194);
  if (v19)
    goto LABEL_57;
  v20 = (uint64_t *)((char *)this + 1552);
  v19 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = (char *)this + 1552;
  v21 = (unsigned int *)*((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = v19;
  if (!v21)
    goto LABEL_57;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, v13);
  }
  v19 = *v20;
  if (*v20)
  {
LABEL_57:
    do
      v24 = __ldaxr((unsigned int *)v19);
    while (__stlxr(v24 + 1, (unsigned int *)v19));
  }
  v25 = *(unsigned int **)(v18 + 80);
  *(_QWORD *)(v18 + 80) = v19;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v13);
    }
  }
  if (*(_DWORD *)(v18 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
  else
    --*(_DWORD *)(v18 + 24);
  return *((_QWORD *)this + 168);
}

uint64_t WebCore::HTMLMediaElement::ensureVideoTracks(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;

  if (*((_QWORD *)this + 170))
    return *((_QWORD *)this + 170);
  v2 = *((_QWORD *)this + 15);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = v3 - 96;
    v5 = *(unsigned __int8 *)(v3 + 178);
    if (*(_BYTE *)(v3 + 178))
    {
      if (v5 == 1 || v5 == 2)
        ++*(_DWORD *)(v3 + 216);
    }
    else
    {
      *(_DWORD *)(v3 - 264) += 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &unk_1E33A4FC0;
  v8 = v6 + 32;
  if (v4)
  {
    v9 = v4;
    if (!*(_BYTE *)(v4 + 274))
    {
      v10 = v4 - 192;
      v11 = *(_QWORD *)(v4 + 512);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          v10 = v12;
      }
      v9 = v10 + 192;
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v6 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 32), (WebCore::ScriptExecutionContext *)v9);
  *(_QWORD *)(v7 + 32) = &off_1E33A0540;
  *(_QWORD *)(v7 + 48) = 0;
  if (v9)
  {
    if (*(_BYTE *)(v9 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195C29000);
    }
    v30 = v8;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v9 + 128), &v30, (uint64_t)&v29);
  }
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_DWORD *)(v7 + 72) = 3;
  *(_QWORD *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 0;
  *(_QWORD *)v7 = off_1E33ED4A8;
  *(_QWORD *)(v7 + 32) = &unk_1E33ED560;
  v14 = *(_QWORD *)(v7 + 40);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(unsigned __int8 *)(v15 + 178);
      if (*(_BYTE *)(v15 + 178))
      {
        if (v16 == 1 || v16 == 2)
          ++*(_DWORD *)(v15 + 216);
      }
      else
      {
        *(_DWORD *)(v15 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)(v15 - 96), v13);
    }
  }
  v17 = (_DWORD *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = v7;
  if (v17)
  {
    if (v17[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17);
      if (!v4)
        goto LABEL_26;
      goto LABEL_25;
    }
    --v17[6];
  }
  if (v4)
LABEL_25:
    WebCore::ScriptExecutionContext::deref((_DWORD *)v4);
LABEL_26:
  v18 = *((_QWORD *)this + 170);
  if (v18)
    ++*(_DWORD *)(v18 + 24);
  v19 = *((_QWORD *)this + 194);
  if (v19)
    goto LABEL_57;
  v20 = (uint64_t *)((char *)this + 1552);
  v19 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = (char *)this + 1552;
  v21 = (unsigned int *)*((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = v19;
  if (!v21)
    goto LABEL_57;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, v13);
  }
  v19 = *v20;
  if (*v20)
  {
LABEL_57:
    do
      v24 = __ldaxr((unsigned int *)v19);
    while (__stlxr(v24 + 1, (unsigned int *)v19));
  }
  v25 = *(unsigned int **)(v18 + 80);
  *(_QWORD *)(v18 + 80) = v19;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v13);
    }
  }
  if (*(_DWORD *)(v18 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
  else
    --*(_DWORD *)(v18 + 24);
  return *((_QWORD *)this + 170);
}

WebCore *WebCore::HTMLMediaElement::removeAudioTrack(WebCore *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  WebCore *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v2 = *((_QWORD *)this + 168);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v3)
    {
      v4 = this;
      v5 = 0;
      v6 = *(_QWORD **)(v2 + 56);
      while (1)
      {
        v7 = v6[v5];
        if (*(_QWORD *)(v7 + 56) == a2)
          break;
        if (v3 == ++v5)
          return this;
      }
      if (v5 >= v3 || (v8 = *(_DWORD *)(v7 + 16), *(_DWORD *)(v7 + 16) = v8 + 1, *(_DWORD *)(v7 + 40) != 2))
      {
        __break(0xC471u);
        JUMPOUT(0x195C2919CLL);
      }
      v9 = v8 + 2;
      *(_DWORD *)(v7 + 16) = v9;
      while (*v6 != v7)
      {
        ++v6;
        if (!--v3)
          goto LABEL_14;
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v7 + 152, (_QWORD *)this + 28);
      this = WebCore::AudioTrackList::remove(*((WebCore::AudioTrackList **)v4 + 168), (WebCore::TrackBase *)v7, 1);
      v9 = *(_DWORD *)(v7 + 16);
LABEL_14:
      v10 = v9 - 1;
      if (v9 == 1)
      {
        this = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        v10 = *(_DWORD *)(v7 + 16);
      }
      else
      {
        *(_DWORD *)(v7 + 16) = v10;
      }
      v11 = v10 - 1;
      if (v11)
        *(_DWORD *)(v7 + 16) = v11;
      else
        return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  return this;
}

WebCore *WebCore::HTMLMediaElement::removeVideoTrack(WebCore *this, uint64_t a2)
{
  uint64_t v2;
  WebCore *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  WebCore *v12;
  int v13;
  int v14;

  v2 = *((_QWORD *)this + 170);
  if (v2)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 168);
    v5 = *(unsigned int *)(v4 + 68);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(v4 + 56);
      while (1)
      {
        v8 = *(_QWORD *)(v7 + 8 * v6);
        if (*(_QWORD *)(v8 + 56) == a2)
          break;
        if (v5 == ++v6)
          return this;
      }
      if (v6 >= v5 || (v9 = *(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 16) = v9 + 1, *(_DWORD *)(v8 + 40) != 3))
      {
        __break(0xC471u);
        JUMPOUT(0x195C2930CLL);
      }
      *(_DWORD *)(v8 + 16) = v9 + 2;
      v10 = *(unsigned int *)(v2 + 68);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(v2 + 56);
        while (*v11 != v8)
        {
          ++v11;
          if (!--v10)
            goto LABEL_17;
        }
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v8 + 152, (_QWORD *)this + 32);
        v12 = (WebCore *)*((_QWORD *)v3 + 170);
        if (v12)
        {
          ++*((_DWORD *)v12 + 6);
          this = WebCore::TrackListBase::remove(v12, (WebCore::TrackBase *)v8, 1);
          if (*((_DWORD *)v12 + 6) == 1)
            this = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v12 + 72))(v12);
          else
            --*((_DWORD *)v12 + 6);
        }
        else
        {
          this = WebCore::TrackListBase::remove(0, (WebCore::TrackBase *)v8, 1);
        }
      }
LABEL_17:
      v13 = *(_DWORD *)(v8 + 16) - 1;
      if (*(_DWORD *)(v8 + 16) == 1)
      {
        this = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        v13 = *(_DWORD *)(v8 + 16);
      }
      else
      {
        *(_DWORD *)(v8 + 16) = v13;
      }
      v14 = v13 - 1;
      if (v14)
        *(_DWORD *)(v8 + 16) = v14;
      else
        return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::addTextTrack@<X0>(WebCore::HTMLMediaElement *this@<X0>, const WTF::AtomString *a2@<X1>, const WTF::AtomString *a3@<X2>, const WTF::AtomString *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::LoadableTextTrack *v19;
  WebCore::LoadableTextTrack *v20;
  __int16 v21;
  __int16 v22;
  WebCore::LoadableTextTrack *v23;
  WebCore::LoadableTextTrack *v24;

  result = WebCore::TextTrack::isValidKindKeyword(a2, a2);
  if ((result & 1) != 0)
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v11 + 24) += 2;
    WebCore::TextTrack::create((WebCore::TextTrack *)(v11 + 192), a2, MEMORY[0x1E0CBF3B8], a3, a4, (uint64_t *)&v24);
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      v21 = *(_WORD *)(v11 + 30);
      if ((v21 & 0x400) == 0)
      {
        v22 = *(_WORD *)(v11 + 28);
        if ((v22 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v11, v12);
        }
        else
        {
          if ((v22 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
            v21 = *(_WORD *)(v11 + 30);
          }
          *(_WORD *)(v11 + 30) = v21 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
        }
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    v13 = (uint64_t)v24;
    v14 = (unsigned int *)*((_QWORD *)this + 228);
    v15 = v14 + 2;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    (*(void (**)(uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v13 + 56))(v13, v14, *((_QWORD *)this + 229));
    if (v14)
    {
      do
      {
        v17 = __ldaxr(v15);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v15));
      if (!v18)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
    v19 = v24;
    ++*((_DWORD *)v24 + 4);
    v23 = v19;
    WebCore::HTMLMediaElement::addTextTrack((uint64_t)this, &v23);
    v20 = v23;
    v23 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 4) == 1)
        (*(void (**)(WebCore::LoadableTextTrack *))(*(_QWORD *)v20 + 16))(v20);
      else
        --*((_DWORD *)v20 + 4);
    }
    *((_DWORD *)v19 + 59) = 2;
    result = (*(uint64_t (**)(WebCore::LoadableTextTrack *, uint64_t))(*(_QWORD *)v19 + 120))(v19, 1);
    *(_QWORD *)a5 = v19;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a5 = 33;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
  }
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::didAddTextTrack(WebCore::HTMLMediaElement *this, WebCore::HTMLTrackElement *a2))()
{
  uint64_t (**v3)();
  uint64_t (**result)();
  uint64_t (**v5)();

  v3 = (uint64_t (**)())*((_QWORD *)a2 + 19);
  ++*((_DWORD *)v3 + 4);
  v5 = v3;
  WebCore::HTMLMediaElement::addTextTrack((uint64_t)this, (WebCore::LoadableTextTrack **)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      result = (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*result + 2))(result);
    else
      --*((_DWORD *)result + 4);
  }
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x400000) == 0)
    return WebCore::HTMLMediaElement::scheduleConfigureTextTracks((uint64_t (**)())this);
  return result;
}

_QWORD *WebCore::HTMLMediaElement::didRemoveTextTrack(_QWORD *this, WebCore::HTMLTrackElement *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *((_QWORD *)a2 + 19);
  ++*(_DWORD *)(v2 + 16);
  *(_BYTE *)(v2 + 256) = 0;
  if (this[169])
  {
    v3 = this;
    this = WebCore::HTMLMediaElement::removeTextTrack((uint64_t (**)())this, (WebCore::TextTrack *)v2, 1);
    v4 = *((unsigned int *)v3 + 345);
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)v3[171];
      if (*v5 == v2)
      {
        v6 = 0;
LABEL_9:
        v8 = &v5[v6];
        *v8 = 0;
        if (*(_DWORD *)(v2 + 16) == 1)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
          v4 = *((unsigned int *)v3 + 345);
        }
        else
        {
          --*(_DWORD *)(v2 + 16);
        }
        this = memmove(v8, v8 + 1, v3[171] + 8 * v4 - (_QWORD)(v8 + 1));
        --*((_DWORD *)v3 + 345);
      }
      else
      {
        v6 = 0;
        while (v4 - 1 != v6)
        {
          v7 = v5[++v6];
          if (v7 == v2)
            goto LABEL_9;
        }
      }
    }
  }
  if (*(_DWORD *)(v2 + 16) == 1)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  --*(_DWORD *)(v2 + 16);
  return this;
}

WTF::StringImpl **WebCore::HTMLMediaElement::configureTextTrackGroup(uint64_t a1, WebCore::TextTrack *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  uint64_t v7;
  WebCore::PageGroup *v8;
  WebCore::CaptionUserPreferencesMediaAF *v9;
  _DWORD *v10;
  WTF::StringImpl **result;
  WebCore::TextTrack **v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  char v16;
  unint64_t v17;
  WebCore::TextTrack *v18;
  WebCore::TextTrack *v19;
  unsigned __int8 *v20;
  WebCore::TextTrack *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  WTF::String *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WebCore::TextTrack *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  NSObject *v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::Logger *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  int v76;
  WebCore::TextTrack *v77;
  WebCore::TextTrack *v78;
  char v79;
  BOOL v80;
  WebCore::TextTrack *v81;
  int v82;
  WebCore::TextTrack *v83;
  WebCore::TextTrack *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF *v87;
  WebCore::TextTrack *v88;
  int v89;
  int v90;
  WebCore::TextTrack *v91;
  WTF *v92;
  uint64_t v93;
  WTF *v94;
  WTF *v95;
  void *v96;
  _DWORD *v97;
  uint64_t v98;
  char v99;
  WebCore::Page *v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  WebCore::CaptionUserPreferencesMediaAF *v105;
  WebCore::TextTrack *v106;
  WebCore::TextTrack *v107;
  int v108;
  unsigned int *v109;
  int v110;
  unsigned int *v111;
  WebCore::TextTrack *v112;
  WebCore::TextTrack *v113;
  int v114;
  WebCore::TextTrack *v115;
  _QWORD v116[4];
  WebCore::TextTrack *v117;
  WTF *v118;
  uint64_t v119;
  WTF::Logger *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  __int128 buf;
  int v137;
  WTF::StringImpl *v138;
  int v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  int v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  int v149;
  WTF::StringImpl *v150;
  int v151;
  WTF::StringImpl *v152;
  uint64_t v153;

  v112 = a2;
  v2 = a1;
  v153 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(WebCore::Page **)(v5 + 8)) != 0)
  {
    ++*(_DWORD *)v6;
    v7 = *((_QWORD *)v6 + 66);
    if (!v7 || (v8 = *(WebCore::PageGroup **)(v7 + 8)) == 0)
    {
      WebCore::Page::initGroup(v6);
      v98 = *((_QWORD *)v6 + 66);
      if (v98)
        v8 = *(WebCore::PageGroup **)(v98 + 8);
      else
        v8 = 0;
    }
    v9 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v8 + 5);
    if (!v9)
    {
      v9 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v9, v8);
      v10 = (_DWORD *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = v9;
      if (v10)
      {
        if (v10[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          v9 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v8 + 5);
        }
        else
        {
          --v10[2];
        }
      }
    }
    result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v9 + 16))(v9);
    v101 = (int)result;
    v118 = 0;
    v119 = 0;
    v12 = (WebCore::TextTrack **)((char *)v112 + 16);
    a2 = (WebCore::TextTrack *)*((_QWORD *)v112 + 2);
    if (a2)
    {
      v104 = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *, WebCore::TextTrack *, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2, v2);
      result = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v118, 1uLL, (unint64_t)v12);
      v13 = HIDWORD(v119);
      v14 = v118;
      v15 = *result;
      if (*result)
        ++*((_DWORD *)v15 + 4);
      *((_QWORD *)v14 + v13) = v15;
      HIDWORD(v119) = v13 + 1;
    }
    else
    {
      v104 = 0;
    }
    v111 = (unsigned int *)((char *)v112 + 12);
    if (!*((_DWORD *)v112 + 3))
    {
      v16 = 0;
      v19 = 0;
      v83 = 0;
      v18 = 0;
      v84 = 0;
      if (v101 != 3)
        goto LABEL_257;
      goto LABEL_274;
    }
    v105 = v9;
    v103 = (_QWORD *)((char *)v112 + 16);
    v100 = v6;
    v99 = 0;
    v110 = 1;
  }
  else
  {
    v6 = 0;
    v118 = 0;
    v119 = 0;
    v111 = (unsigned int *)((char *)a2 + 12);
    v12 = (WebCore::TextTrack **)((char *)a2 + 16);
    v16 = 1;
    if (!*((_DWORD *)a2 + 3))
    {
      v18 = 0;
      v83 = 0;
      goto LABEL_252;
    }
    v103 = (_QWORD *)((char *)a2 + 16);
    v99 = 1;
    v104 = 0;
    v110 = 0;
    v101 = 0;
    v105 = 0;
    v100 = 0;
  }
  v17 = 0;
  v114 = 0;
  v108 = 0;
  v18 = 0;
  v106 = 0;
  v19 = 0;
  v109 = (unsigned int *)(v2 + 1265);
  v115 = 0;
  v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
  v102 = v2;
  do
  {
    v21 = *(WebCore::TextTrack **)(*(_QWORD *)v112 + 8 * v17);
    if (v21)
      ++*((_DWORD *)v21 + 4);
    v117 = v21;
    if (((*v109 | ((unint64_t)*((unsigned __int16 *)v109 + 2) << 32)) & 0x2000000000) != 0
      && *((_DWORD *)v21 + 56) == 2)
    {
      v22 = HIDWORD(v119);
      if (HIDWORD(v119) == (_DWORD)v119)
      {
        v23 = *(_QWORD *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v118, HIDWORD(v119) + 1, (unint64_t)&v117);
        if (v23)
          ++*(_DWORD *)(v23 + 16);
        v24 = HIDWORD(v119);
        *((_QWORD *)v118 + HIDWORD(v119)) = v23;
      }
      else
      {
        v25 = v118;
        ++*((_DWORD *)v21 + 4);
        *((_QWORD *)v25 + v22) = v21;
        v24 = v22;
      }
      HIDWORD(v119) = v24 + 1;
      v21 = v117;
    }
    if (v110)
    {
      v26 = (WTF::String *)(*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v105 + 32))(v105);
      v21 = v117;
    }
    else
    {
      v26 = 0;
    }
    v113 = v18;
    v27 = *(_QWORD *)(v2 + 1824);
    v28 = *(_QWORD *)(v2 + 1832);
    v116[0] = "HTMLMediaElement";
    v116[1] = 17;
    v116[2] = "configureTextTrackGroup";
    v116[3] = v28;
    result = (WTF::StringImpl **)WebCore::TextTrack::kindKeyword(v21);
    v29 = result;
    v30 = v117;
    v31 = (WTF::StringImpl *)*((_QWORD *)v117 + 9);
    if (v31)
      *(_DWORD *)v31 += 2;
    v32 = (WTF::StringImpl *)*((_QWORD *)v30 + 10);
    if (v32)
      *(_DWORD *)v32 += 2;
    if (!*(_BYTE *)(v27 + 12))
      goto LABEL_168;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v116);
    WTF::String::String((WTF::String *)&v126, "'");
    v33 = *v29;
    if (*v29)
      *(_DWORD *)v33 += 2;
    WTF::String::String((WTF::String *)&v125, "' track with language '");
    if (v31)
      *(_DWORD *)v31 += 2;
    WTF::String::String((WTF::String *)&v124, "' and BCP 47 language '");
    if (v32)
      *(_DWORD *)v32 += 2;
    WTF::String::String((WTF::String *)&v123, "' has score ");
    WTF::String::number(v26);
    v135 = v33;
    *(_QWORD *)&buf = v127;
    v120 = v126;
    v134 = v125;
    v132 = v124;
    v133 = v31;
    v130 = v123;
    v131 = v32;
    v129 = v122;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v120, (uint64_t *)&v135, (uint64_t *)&v134, (uint64_t *)&v133, (uint64_t *)&v132, (uint64_t *)&v131, (uint64_t *)&v130, &v128, (uint64_t *)&v129);
    if (!v128)
    {
      __break(0xC471u);
      JUMPOUT(0x195C2A824);
    }
    v35 = v122;
    v122 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v123;
    v123 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, v34);
        if (!v32)
          goto LABEL_55;
        goto LABEL_53;
      }
      *(_DWORD *)v36 -= 2;
    }
    if (!v32)
      goto LABEL_55;
LABEL_53:
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v34);
    else
      *(_DWORD *)v32 -= 2;
LABEL_55:
    v37 = v124;
    v124 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::destroy(v37, v34);
        if (!v31)
          goto LABEL_61;
        goto LABEL_59;
      }
      *(_DWORD *)v37 -= 2;
    }
    if (!v31)
      goto LABEL_61;
LABEL_59:
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v34);
    else
      *(_DWORD *)v31 -= 2;
LABEL_61:
    v38 = v125;
    v125 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::destroy(v38, v34);
        if (!v33)
          goto LABEL_67;
        goto LABEL_65;
      }
      *(_DWORD *)v38 -= 2;
    }
    if (!v33)
      goto LABEL_67;
LABEL_65:
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
LABEL_67:
    v39 = v126;
    v126 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v34);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v127;
    v127 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = qword_1ECE7C4A0;
    v42 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v42)
    {
      WTF::String::utf8();
      v43 = v120 ? (char *)v120 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v43;
      _os_log_impl(&dword_1940B8000, v41, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v42 = (uint64_t)v120;
      v120 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
          v42 = WTF::fastFree((WTF *)v42, a2);
        else
          --*(_DWORD *)v42;
      }
    }
    if (WebCore::LogMedia)
    {
      while (1)
      {
        v44 = *v20;
        if ((v44 & 1) != 0)
          break;
        v45 = __ldaxr(v20);
        if (v45 == v44)
        {
          if (!__stxr(v44 | 1, v20))
          {
            v107 = v19;
            v46 = WTF::Logger::observers((WTF::Logger *)v42);
            v47 = *(unsigned int *)(v46 + 12);
            if ((_DWORD)v47)
            {
              v48 = *(uint64_t **)v46;
              v49 = *(_QWORD *)v46 + 8 * v47;
              do
              {
                v50 = *v48;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v116);
                v137 = 0;
                WTF::String::String((WTF::String *)&v138, "'");
                v139 = 0;
                v51 = *v29;
                if (*v29)
                  *(_DWORD *)v51 += 2;
                v140 = v51;
                v141 = 0;
                WTF::String::String((WTF::String *)&v142, "' track with language '");
                v143 = 0;
                if (v31)
                  *(_DWORD *)v31 += 2;
                v144 = v31;
                v145 = 0;
                WTF::String::String((WTF::String *)&v146, "' and BCP 47 language '");
                v147 = 0;
                if (v32)
                  *(_DWORD *)v32 += 2;
                v148 = v32;
                v149 = 0;
                WTF::String::String((WTF::String *)&v150, "' has score ");
                v151 = 0;
                WTF::String::number(v26);
                v120 = 0;
                v121 = 0;
                v52 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x90);
                LODWORD(v121) = 9;
                v120 = v52;
                v53 = HIDWORD(v121);
                *((_DWORD *)v52 + 4 * HIDWORD(v121)) = buf;
                v54 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v52 + 2 * v53 + 1) = v54;
                *((_DWORD *)v52 + 4 * (v53 + 1)) = v137;
                v55 = v138;
                if (v138)
                  *(_DWORD *)v138 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 1) + 1) = v55;
                *((_DWORD *)v52 + 4 * (v53 + 2)) = v139;
                v56 = v140;
                if (v140)
                  *(_DWORD *)v140 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 2) + 1) = v56;
                *((_DWORD *)v52 + 4 * (v53 + 3)) = v141;
                v57 = v142;
                if (v142)
                  *(_DWORD *)v142 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 3) + 1) = v57;
                *((_DWORD *)v52 + 4 * (v53 + 4)) = v143;
                v58 = v144;
                if (v144)
                  *(_DWORD *)v144 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 4) + 1) = v58;
                *((_DWORD *)v52 + 4 * (v53 + 5)) = v145;
                v59 = v146;
                if (v146)
                  *(_DWORD *)v146 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 5) + 1) = v59;
                *((_DWORD *)v52 + 4 * (v53 + 6)) = v147;
                v60 = v148;
                if (v148)
                  *(_DWORD *)v148 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 6) + 1) = v60;
                *((_DWORD *)v52 + 4 * (v53 + 7)) = v149;
                v61 = v150;
                if (v150)
                  *(_DWORD *)v150 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 7) + 1) = v61;
                *((_DWORD *)v52 + 4 * (v53 + 8)) = v151;
                v62 = v152;
                if (v152)
                  *(_DWORD *)v152 += 2;
                *((_QWORD *)v52 + 2 * (v53 + 8) + 1) = v62;
                HIDWORD(v121) = v53 + 9;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v50 + 16))(v50, &WebCore::LogMedia, 0, &v120);
                v63 = v120;
                if (HIDWORD(v121))
                {
                  v64 = 16 * HIDWORD(v121);
                  v65 = (WTF::StringImpl **)((char *)v120 + 8);
                  do
                  {
                    v66 = *v65;
                    *v65 = 0;
                    if (v66)
                    {
                      if (*(_DWORD *)v66 == 2)
                        WTF::StringImpl::destroy(v66, a2);
                      else
                        *(_DWORD *)v66 -= 2;
                    }
                    v65 += 2;
                    v64 -= 16;
                  }
                  while (v64);
                  v63 = v120;
                }
                if (v63)
                {
                  v120 = 0;
                  LODWORD(v121) = 0;
                  WTF::fastFree(v63, a2);
                }
                v67 = v152;
                v152 = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                    WTF::StringImpl::destroy(v67, a2);
                  else
                    *(_DWORD *)v67 -= 2;
                }
                v68 = v150;
                v150 = 0;
                if (v68)
                {
                  if (*(_DWORD *)v68 == 2)
                    WTF::StringImpl::destroy(v68, a2);
                  else
                    *(_DWORD *)v68 -= 2;
                }
                v69 = v148;
                v148 = 0;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 2)
                    WTF::StringImpl::destroy(v69, a2);
                  else
                    *(_DWORD *)v69 -= 2;
                }
                v70 = v146;
                v146 = 0;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 2)
                    WTF::StringImpl::destroy(v70, a2);
                  else
                    *(_DWORD *)v70 -= 2;
                }
                v71 = v144;
                v144 = 0;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 2)
                    WTF::StringImpl::destroy(v71, a2);
                  else
                    *(_DWORD *)v71 -= 2;
                }
                v72 = v142;
                v142 = 0;
                if (v72)
                {
                  if (*(_DWORD *)v72 == 2)
                    WTF::StringImpl::destroy(v72, a2);
                  else
                    *(_DWORD *)v72 -= 2;
                }
                v73 = v140;
                v140 = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                    WTF::StringImpl::destroy(v73, a2);
                  else
                    *(_DWORD *)v73 -= 2;
                }
                v74 = v138;
                v138 = 0;
                if (v74)
                {
                  if (*(_DWORD *)v74 == 2)
                    WTF::StringImpl::destroy(v74, a2);
                  else
                    *(_DWORD *)v74 -= 2;
                }
                v75 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v75)
                {
                  if (*(_DWORD *)v75 == 2)
                    WTF::StringImpl::destroy(v75, a2);
                  else
                    *(_DWORD *)v75 -= 2;
                }
                ++v48;
              }
              while (v48 != (uint64_t *)v49);
            }
            v76 = __ldxr(v20);
            if (v76 == 1)
            {
              v2 = v102;
              v19 = v107;
              if (!__stlxr(0, v20))
                break;
            }
            else
            {
              __clrex();
              v2 = v102;
              v19 = v107;
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = (WTF::StringImpl **)v128;
    v128 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        if (!v32)
          goto LABEL_171;
        goto LABEL_169;
      }
      *(_DWORD *)result -= 2;
    }
LABEL_168:
    if (!v32)
      goto LABEL_171;
LABEL_169:
    if (*(_DWORD *)v32 == 2)
      result = (WTF::StringImpl **)WTF::StringImpl::destroy(v32, a2);
    else
      *(_DWORD *)v32 -= 2;
LABEL_171:
    v18 = v113;
    if (!v31)
      goto LABEL_174;
    if (*(_DWORD *)v31 == 2)
    {
      result = (WTF::StringImpl **)WTF::StringImpl::destroy(v31, a2);
      if (!(_DWORD)v26)
        goto LABEL_203;
LABEL_175:
      v77 = v117;
      if ((int)v26 <= v108 || (int)v26 <= v104)
      {
        v78 = v117;
        v77 = v115;
        if (!v19)
          goto LABEL_186;
      }
      else
      {
        if (v117)
          ++*((_DWORD *)v117 + 4);
        if (v115)
        {
          if (*((_DWORD *)v115 + 4) != 1)
          {
            --*((_DWORD *)v115 + 4);
            goto LABEL_182;
          }
          (*(void (**)(void))(*(_QWORD *)v115 + 16))();
          v78 = v117;
        }
        else
        {
LABEL_182:
          v78 = v77;
        }
        v108 = (int)v26;
        if (!v19)
        {
LABEL_186:
          v79 = (*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v78 + 176))(v78);
          v78 = v117;
          if ((v79 & 1) != 0)
          {
            v19 = v117;
            a2 = v106;
            goto LABEL_189;
          }
          v19 = 0;
          a2 = v117;
          if (!v106)
          {
LABEL_189:
            ++*((_DWORD *)v117 + 4);
            v106 = a2;
          }
        }
      }
      if ((*(unsigned int (**)(WebCore::TextTrack *, WebCore::TextTrack *))(*(_QWORD *)v78 + 152))(v78, a2))
      {
        v80 = (int)v26 <= v114;
      }
      else
      {
        v80 = 1;
      }
      if (v80)
      {
        v81 = v113;
        LODWORD(v26) = v114;
      }
      else
      {
        v81 = v117;
        if (v117)
          ++*((_DWORD *)v117 + 4);
        if (v113)
        {
          if (*((_DWORD *)v113 + 4) == 1)
            (*(void (**)(WebCore::TextTrack *))(*(_QWORD *)v113 + 16))(v113);
          else
            --*((_DWORD *)v113 + 4);
        }
      }
      goto LABEL_234;
    }
    *(_DWORD *)v31 -= 2;
LABEL_174:
    if ((_DWORD)v26)
      goto LABEL_175;
LABEL_203:
    if (*v103 | (unint64_t)v19)
    {
      if (*((_DWORD *)v112 + 8) != 1 || v19)
        goto LABEL_233;
      if (!v106)
        goto LABEL_215;
      goto LABEL_212;
    }
    result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v117 + 176))(v117);
    v82 = *((_DWORD *)v112 + 8);
    if ((_DWORD)result)
    {
      if (v82 || v101 != 1)
      {
        v19 = v117;
        if (!v117)
          goto LABEL_238;
        ++*((_DWORD *)v117 + 4);
        goto LABEL_233;
      }
LABEL_212:
      v19 = 0;
      goto LABEL_233;
    }
    v19 = 0;
    if (v82 == 1 && !v106)
    {
LABEL_215:
      if (*(_BYTE *)(v2 + 1768))
      {
        if (!v117)
        {
          v106 = 0;
          v19 = 0;
          goto LABEL_238;
        }
        v19 = 0;
        v106 = v117;
        ++*((_DWORD *)v117 + 4);
      }
      else
      {
        v19 = 0;
        v106 = 0;
      }
    }
LABEL_233:
    v77 = v115;
    v81 = v113;
    LODWORD(v26) = v114;
LABEL_234:
    result = (WTF::StringImpl **)v117;
    v117 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 2))(result);
      else
        --*((_DWORD *)result + 4);
    }
    v114 = (int)v26;
    v18 = v81;
    v115 = v77;
LABEL_238:
    ++v17;
  }
  while (v17 < *v111);
  if (v101 == 3)
  {
    v6 = v100;
    v16 = v99;
    v83 = v106;
    v84 = v115;
    goto LABEL_274;
  }
  v6 = v100;
  v16 = v99;
  v83 = v106;
  v84 = v115;
  if (v115)
  {
    v12 = (WebCore::TextTrack **)v103;
  }
  else
  {
    v84 = v19;
    v12 = (WebCore::TextTrack **)v103;
    if (v19 || (v84 = v18) != 0)
      ++*((_DWORD *)v84 + 4);
    else
      v19 = 0;
  }
LABEL_257:
  if (*((_DWORD *)v112 + 8) || v101 != 1)
  {
    if (v84)
      goto LABEL_266;
    if (v19)
      goto LABEL_263;
LABEL_252:
    v19 = 0;
    v84 = *v12;
    if (!*v12)
      goto LABEL_263;
LABEL_265:
    ++*((_DWORD *)v84 + 4);
LABEL_266:
    v85 = (WTF::StringImpl *)*((_QWORD *)v84 + 9);
    if (v85)
      *(_DWORD *)v85 += 4;
    result = *(WTF::StringImpl ***)(v2 + 1296);
    *(_QWORD *)(v2 + 1296) = v85;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        if (!v85)
          goto LABEL_274;
        goto LABEL_272;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v85)
      goto LABEL_274;
LABEL_272:
    if (*(_DWORD *)v85 == 2)
      result = (WTF::StringImpl **)WTF::StringImpl::destroy(v85, a2);
    else
      *(_DWORD *)v85 -= 2;
    goto LABEL_274;
  }
  if (v84)
    goto LABEL_266;
LABEL_263:
  if (v83)
  {
    v84 = v83;
    goto LABEL_265;
  }
  v97 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v97 += 2;
  result = *(WTF::StringImpl ***)(v2 + 1296);
  *(_QWORD *)(v2 + 1296) = v97;
  if (result)
  {
    if (*(_DWORD *)result != 2)
    {
      v83 = 0;
      v84 = 0;
      *(_DWORD *)result -= 2;
      goto LABEL_274;
    }
    result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
  }
  v83 = 0;
  v84 = 0;
LABEL_274:
  v86 = HIDWORD(v119);
  if (HIDWORD(v119))
  {
    v87 = v118;
    if (v84)
    {
      do
      {
        v88 = *(WebCore::TextTrack **)v87;
        if (!*(_QWORD *)v87 || (v89 = *((_DWORD *)v88 + 4) + 1, *((_DWORD *)v88 + 4) = v89, v88 != v84))
        {
          result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *, _QWORD))(*(_QWORD *)v88 + 120))(v88, 0);
          v89 = *((_DWORD *)v88 + 4);
        }
        v90 = v89 - 1;
        if (v90)
          *((_DWORD *)v88 + 4) = v90;
        else
          result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v88 + 16))(v88);
        v87 = (WTF *)((char *)v87 + 8);
        --v86;
      }
      while (v86);
    }
    else
    {
      do
      {
        v91 = *(WebCore::TextTrack **)v87;
        if (*(_QWORD *)v87)
        {
          ++*((_DWORD *)v91 + 4);
          result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *, _QWORD))(*(_QWORD *)v91 + 120))(v91, 0);
          if (*((_DWORD *)v91 + 4) == 1)
            result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v91 + 16))(v91);
          else
            --*((_DWORD *)v91 + 4);
        }
        v87 = (WTF *)((char *)v87 + 8);
        --v86;
      }
      while (v86);
    }
  }
  if (v84)
    result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *, uint64_t))(*(_QWORD *)v84 + 120))(v84, 2);
  if (!v18)
  {
LABEL_294:
    if (!v83)
      goto LABEL_297;
    goto LABEL_295;
  }
  if (*((_DWORD *)v18 + 4) != 1)
  {
    --*((_DWORD *)v18 + 4);
    goto LABEL_294;
  }
  result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v18 + 16))(v18);
  if (v83)
  {
LABEL_295:
    if (*((_DWORD *)v83 + 4) == 1)
      result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v83 + 16))(v83);
    else
      --*((_DWORD *)v83 + 4);
  }
LABEL_297:
  if (!v19)
    goto LABEL_300;
  if (*((_DWORD *)v19 + 4) == 1)
  {
    result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v19 + 16))(v19);
    if (v84)
      goto LABEL_301;
  }
  else
  {
    --*((_DWORD *)v19 + 4);
LABEL_300:
    if (v84)
    {
LABEL_301:
      if (*((_DWORD *)v84 + 4) == 1)
        result = (WTF::StringImpl **)(*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v84 + 16))(v84);
      else
        --*((_DWORD *)v84 + 4);
    }
  }
  v92 = v118;
  if (HIDWORD(v119))
  {
    v93 = 8 * HIDWORD(v119);
    v94 = v118;
    do
    {
      result = *(WTF::StringImpl ***)v94;
      *(_QWORD *)v94 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1)
          result = (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*result + 2))(result);
        else
          --*((_DWORD *)result + 4);
      }
      v94 = (WTF *)((char *)v94 + 8);
      v93 -= 8;
    }
    while (v93);
  }
  if (v92)
    result = (WTF::StringImpl **)WTF::fastFree(v92, a2);
  if ((v16 & 1) == 0)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::Page::~Page((uint64_t)v6);
      return (WTF::StringImpl **)WTF::fastFree(v95, v96);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::ensureMediaControls(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  void (**v3)(WebCore::RenderThemeIOS *__hidden);
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  char *v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  int v24;
  char v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v31;
  const char *v32;
  WTF *v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  void *__src;
  int v38;
  unsigned int v39;
  _BYTE v40[16];

  if (*((_BYTE *)this + 1288) == 2)
    return 1;
  {
    v3 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v31 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v31 + 40) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    v3 = &off_1E335BC30;
    *(_QWORD *)v31 = &off_1E335BC30;
  }
  ((void (*)(void **__return_ptr, uint64_t *))v3[11])(&__src, &WebCore::RenderTheme::singleton(void)::theme);
  v5 = v39;
  if (!v39)
  {
    v1 = 0;
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(_BYTE *)(v6 + 467) || *(_BYTE *)(v6 + 468))
  {
    v1 = 0;
    goto LABEL_9;
  }
  v13 = *((_QWORD *)this + 228);
  v14 = *((_QWORD *)this + 229);
  v32 = "HTMLMediaElement";
  v33 = (WTF *)17;
  v34 = (uint64_t)"ensureMediaControls";
  v35[0] = v14;
  if (*(_BYTE *)(v13 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v32);
  v15 = *((unsigned __int8 *)this + 1288);
  *((_BYTE *)this + 1288) = 1;
  if (v15 == 3)
  {
    v19 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = off_1E33C5DA0;
    *((_QWORD *)v19 + 1) = this;
    v32 = v19;
    v20 = WebCore::HTMLMediaElement::setupAndCallJS((uint64_t)this, &v32);
    (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
    if (!v20)
    {
      v1 = 0;
      LOBYTE(v15) = 3;
      goto LABEL_55;
    }
    goto LABEL_52;
  }
  if (v15)
  {
    v1 = 0;
    goto LABEL_55;
  }
  v32 = (const char *)this;
  v33 = (WTF *)v35;
  v34 = 2;
  v16 = (WTF *)__src;
  if (__src == v40)
  {
    v18 = v39;
    memcpy(v35, __src, 8 * v39);
  }
  else
  {
    __src = v40;
    v33 = v16;
    v17 = v38;
    v18 = v39;
    v38 = 2;
    LODWORD(v34) = v17;
  }
  v39 = 0;
  HIDWORD(v34) = v18;
  v21 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v21 = &off_1E33C5D78;
  *(_QWORD *)(v21 + 8) = v32;
  *(_QWORD *)(v21 + 16) = v21 + 32;
  *(_QWORD *)(v21 + 24) = 2;
  v22 = v33;
  if (v33 == (WTF *)v35)
  {
    v24 = HIDWORD(v34);
    memcpy((void *)(v21 + 32), v35, 8 * HIDWORD(v34));
  }
  else
  {
    v33 = (WTF *)v35;
    *(_QWORD *)(v21 + 16) = v22;
    v23 = v34;
    v24 = HIDWORD(v34);
    LODWORD(v34) = 2;
    *(_DWORD *)(v21 + 24) = v23;
  }
  HIDWORD(v34) = 0;
  *(_DWORD *)(v21 + 28) = v24;
  v36 = v21;
  v25 = WebCore::HTMLMediaElement::setupAndCallJS((uint64_t)this, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (HIDWORD(v34))
  {
    v26 = v33;
    v27 = 8 * HIDWORD(v34);
    do
    {
      v28 = *(WTF::StringImpl **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v4);
        else
          *(_DWORD *)v28 -= 2;
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  v29 = v33;
  if (v35 != (_QWORD *)v33 && v33 != 0)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    WTF::fastFree(v29, v4);
    if ((v25 & 1) == 0)
      goto LABEL_54;
LABEL_52:
    LOBYTE(v15) = 2;
    v1 = 1;
    goto LABEL_55;
  }
  if ((v25 & 1) != 0)
    goto LABEL_52;
LABEL_54:
  v1 = 0;
  LOBYTE(v15) = 0;
LABEL_55:
  *((_BYTE *)this + 1288) = v15;
  v5 = v39;
  if (v39)
  {
LABEL_9:
    v7 = (WTF::StringImpl **)__src;
    v8 = 8 * v5;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v4);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
LABEL_17:
  v10 = (WTF *)__src;
  if (v40 != __src && __src != 0)
  {
    __src = 0;
    v38 = 0;
    WTF::fastFree(v10, v4);
  }
  return v1;
}

uint64_t WebCore::HTMLMediaElement::layoutSizeChanged(WebCore::HTMLMediaElement *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28[3];

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33C5B98;
  v2[1] = this;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *((_DWORD *)this + 6);
  *(_QWORD *)(v3 + 8) = this;
  ++*((_QWORD *)this + 16);
  *((_DWORD *)this + 6) = v4 + 4;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = &off_1E33C5820;
  *(_QWORD *)(result + 8) = this;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v2;
  v28[0] = result;
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v8, 9, v28);
      result = v28[0];
      v28[0] = 0;
      if (!result)
        goto LABEL_8;
    }
    else
    {
      v28[0] = 0;
    }
    v9 = *(uint64_t (***)())result;
  }
  else
  {
    v28[0] = 0;
    v9 = &off_1E33C5820;
  }
  result = v9[1]();
LABEL_8:
  v10 = *(_DWORD *)((char *)this + 1265);
  if ((v10 & 0x2000000) == 0)
  {
    *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
    *(_DWORD *)((char *)this + 1265) = v10 | 0x2000000;
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 24);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            v15 = (*(_DWORD *)v14)++;
            if ((*(_QWORD *)(v14 + 1064) & 0xFFFFFFFFFFFFLL) == 0
              || *(double *)((*(_QWORD *)(v14 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
            {
              *(_QWORD *)(v14 + 1056) = 0;
              WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
              result = WebCore::TimerBase::setNextFireTime(v14 + 1032, v16 + 0.0);
              v15 = *(_DWORD *)v14 - 1;
            }
            if (v15)
            {
              *(_DWORD *)v14 = v15;
            }
            else
            {
              WebCore::Page::~Page(v14);
              result = WTF::fastFree(v24, v25);
            }
          }
        }
      }
    }
  }
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C2AE80);
    }
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C2AEA0);
    }
    v17 = *((_QWORD *)this + 200);
    if (v17)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 80) + 1264))(*(_QWORD *)(v17 + 80));
      if ((result & 1) == 0)
      {
        result = WebCore::isElementLargeEnoughForMainContent(*(_QWORD *)(*((_QWORD *)this + 200) + 80), 0);
        if ((_DWORD)result)
        {
          v18 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
          if (v18)
          {
            if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195C2AED0);
            }
            v19 = (int *)(v18 + 16);
            v20 = *(_DWORD *)(v18 + 16) + 1;
            *(_DWORD *)(v18 + 16) = v20;
            v21 = *(_WORD *)(v18 + 76);
            if ((v21 & 1) == 0)
            {
              *(_WORD *)(v18 + 76) = v21 | 1;
              v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8) + 40) + 8) + 1944);
              ++*(_DWORD *)(v22 + 16);
              result = (uint64_t)WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>(v22 + 480, (_QWORD *)v18, (uint64_t)v28);
              v23 = *(_DWORD *)(v22 + 16);
              if (!v23)
              {
                __break(0xC471u);
                JUMPOUT(0x195C2AF10);
              }
              *(_DWORD *)(v22 + 16) = v23 - 1;
              v20 = *v19;
            }
            if (!v20)
            {
              __break(0xC471u);
              JUMPOUT(0x195C2AEF0);
            }
LABEL_30:
            *v19 = v20 - 1;
            return result;
          }
          if ((MEMORY[0x4C] & 1) == 0)
          {
            *(_WORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x4C) = MEMORY[0x4C] | 1;
            v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(MEMORY[0x18] + 8) + 40) + 8) + 1944);
            v27 = *(_DWORD *)(v26 + 16);
            v19 = (int *)(v26 + 16);
            *v19 = v27 + 1;
            result = (uint64_t)WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)(v19 + 116), 0, (uint64_t)v28);
            v20 = *v19;
            if (!*v19)
            {
              __break(0xC471u);
              JUMPOUT(0x195C2AE60);
            }
            goto LABEL_30;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::setSelectedTextTrack(uint64_t this, WebCore::TextTrack *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::TextTrack **v10;
  uint64_t v11;
  unint64_t j;
  unint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Page *v20;
  uint64_t v21;
  WebCore::PageGroup *v22;
  WebCore::CaptionUserPreferencesMediaAF *v23;
  WebCore::CaptionUserPreferencesMediaAF *v24;
  _DWORD *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Page *v30;
  uint64_t v31;
  WebCore::PageGroup *v32;
  WebCore::CaptionUserPreferencesMediaAF *v33;
  WebCore::CaptionUserPreferencesMediaAF *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t i;
  unint64_t v38;
  WebCore::TextTrack *v39;
  unsigned int v40;
  unsigned int v41;
  WebCore::TrackListBase *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::Page *v46;
  uint64_t v47;
  WebCore::PageGroup *v48;
  WebCore::CaptionUserPreferencesMediaAF *v49;
  WebCore::TextTrack *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::Page *v60;
  uint64_t v61;
  WebCore::Page *v62;
  uint64_t v63;
  WTF::StringImpl *v64;

  v2 = *(_QWORD *)(this + 1352);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 24);
    if (!(*(_DWORD *)(v2 + 124) + *(_DWORD *)(v2 + 108) + *(_DWORD *)(v2 + 68)))
      goto LABEL_116;
    v4 = this;
    this = WebCore::TextTrack::captionMenuAutomaticItem((WebCore::TextTrack *)this);
    if ((WebCore::TextTrack *)this == a2)
    {
      if (*(_BYTE *)(v4 + 1337))
      {
        if (!*(_BYTE *)(v4 + 1336))
          goto LABEL_92;
      }
      else
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528);
        if (v17
          && (v18 = *(_QWORD *)(v17 + 8)) != 0
          && (v19 = *(_QWORD *)(v18 + 24)) != 0
          && (v20 = *(WebCore::Page **)(v19 + 8)) != 0)
        {
          v21 = *((_QWORD *)v20 + 66);
          if (!v21 || (v22 = *(WebCore::PageGroup **)(v21 + 8)) == 0)
          {
            v60 = v20;
            WebCore::Page::initGroup(v20);
            v61 = *((_QWORD *)v60 + 66);
            if (v61)
              v22 = *(WebCore::PageGroup **)(v61 + 8);
            else
              v22 = 0;
          }
          v23 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v22 + 5);
          if (!v23)
          {
            v24 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
            v23 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v24, v22);
            v25 = (_DWORD *)*((_QWORD *)v22 + 5);
            *((_QWORD *)v22 + 5) = v23;
            if (v25)
            {
              if (v25[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
                v23 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v22 + 5);
              }
              else
              {
                --v25[2];
              }
            }
          }
          this = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v23 + 16))(v23);
          v26 = this | 0x100;
        }
        else
        {
          v26 = 256;
        }
        *(_WORD *)(v4 + 1336) = v26;
        if (!(_BYTE)v26)
          goto LABEL_92;
      }
    }
    else
    {
      this = WebCore::TextTrack::captionMenuOffItem((WebCore::TextTrack *)this);
      if ((WebCore::TextTrack *)this != a2)
      {
        if (!a2)
          goto LABEL_116;
        if (*((_DWORD *)a2 + 10) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195C2B5E8);
        }
        v5 = *((_DWORD *)a2 + 58);
        v6 = v2 + 56;
        v7 = v2 + 96;
        v8 = v2 + 112;
        if (v5)
          v8 = 0;
        if (v5 != 1)
          v7 = v8;
        if (v5 != 2)
          v6 = v7;
        v9 = *(unsigned int *)(v6 + 12);
        if (!(_DWORD)v9)
          goto LABEL_116;
        v10 = *(WebCore::TextTrack ***)v6;
        while (*v10 != a2)
        {
          ++v10;
          if (!--v9)
            goto LABEL_116;
        }
        v36 = (*(_DWORD *)(v2 + 124) + *(_DWORD *)(v2 + 108) + *(_DWORD *)(v2 + 68));
        if ((int)v36 >= 1)
        {
          for (i = 0; i != v36; ++i)
          {
            v38 = *(unsigned int *)(v2 + 124);
            if (i >= v38)
            {
              v40 = *(_DWORD *)(v2 + 108);
              if (v40 <= (int)i - (int)v38)
              {
                v41 = i - v40 - v38;
                if (*(_DWORD *)(v2 + 68) <= v41)
                {
                  v39 = 0;
                }
                else
                {
                  v39 = *(WebCore::TextTrack **)(*(_QWORD *)(v2 + 56) + 8 * v41);
                  if (v39 && *((_DWORD *)v39 + 10) != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195C2B628);
                  }
                }
              }
              else
              {
                v39 = *(WebCore::TextTrack **)(*(_QWORD *)(v2 + 96) + 8 * (i - v38));
                if (v39 && *((_DWORD *)v39 + 10) != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195C2B608);
                }
              }
            }
            else
            {
              v39 = *(WebCore::TextTrack **)(*(_QWORD *)(v2 + 112) + 8 * i);
              if (v39 && *((_DWORD *)v39 + 10) != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x195C2B5A4);
              }
            }
            ++*((_DWORD *)v39 + 4);
            if (v39 == a2)
              this = (*(uint64_t (**)(WebCore::TextTrack *, uint64_t))(*(_QWORD *)a2 + 120))(a2, 2);
            else
              this = (*(uint64_t (**)(WebCore::TextTrack *, _QWORD))(*(_QWORD *)v39 + 120))(v39, 0);
            if (*((_DWORD *)v39 + 4) == 1)
              this = (*(uint64_t (**)(WebCore::TextTrack *))(*(_QWORD *)v39 + 16))(v39);
            else
              --*((_DWORD *)v39 + 4);
          }
        }
LABEL_92:
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528);
        if (!v43)
          goto LABEL_116;
        v44 = *(_QWORD *)(v43 + 8);
        if (!v44)
          goto LABEL_116;
        v45 = *(_QWORD *)(v44 + 24);
        if (!v45)
          goto LABEL_116;
        v46 = *(WebCore::Page **)(v45 + 8);
        if (!v46)
          goto LABEL_116;
        v47 = *((_QWORD *)v46 + 66);
        if (!v47 || (v48 = *(WebCore::PageGroup **)(v47 + 8)) == 0)
        {
          this = (uint64_t)WebCore::Page::initGroup(v46);
          v59 = *((_QWORD *)v46 + 66);
          if (v59)
            v48 = *(WebCore::PageGroup **)(v59 + 8);
          else
            v48 = 0;
        }
        v49 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v48 + 5);
        if (!v49)
        {
          v49 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
          WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v49, v48);
          this = *((_QWORD *)v48 + 5);
          *((_QWORD *)v48 + 5) = v49;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
            {
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              v49 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v48 + 5);
            }
            else
            {
              --*(_DWORD *)(this + 8);
            }
          }
        }
        v50 = (WebCore::TextTrack *)WebCore::TextTrack::captionMenuOffItem((WebCore::TextTrack *)this);
        if (v50 == a2)
        {
          v58 = 1;
          goto LABEL_115;
        }
        if ((WebCore::TextTrack *)WebCore::TextTrack::captionMenuAutomaticItem(v50) == a2)
        {
          v58 = 0;
          goto LABEL_115;
        }
        v52 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
        if (v52)
        {
          v53 = *(_DWORD *)v52;
          v54 = *((_DWORD *)v52 + 1);
          *(_DWORD *)v52 += 2;
          if (v53)
          {
            *(_DWORD *)v52 = v53;
            if (v54)
            {
LABEL_107:
              v55 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
              if (v55)
                *(_DWORD *)v55 += 2;
              v64 = v55;
              (*(void (**)(WebCore::CaptionUserPreferencesMediaAF *, WTF::StringImpl **))(*(_QWORD *)v49 + 144))(v49, &v64);
              v57 = v64;
              v64 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, v56);
                else
                  *(_DWORD *)v57 -= 2;
              }
            }
          }
          else
          {
            WTF::StringImpl::destroy(v52, v51);
            if (v54)
              goto LABEL_107;
          }
        }
        v58 = 2;
LABEL_115:
        this = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *, uint64_t))(*(_QWORD *)v49 + 24))(v49, v58);
LABEL_116:
        if (*(_DWORD *)(v2 + 24) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
        --*(_DWORD *)(v2 + 24);
        return this;
      }
      v11 = (*(_DWORD *)(v2 + 124) + *(_DWORD *)(v2 + 108) + *(_DWORD *)(v2 + 68));
      if ((int)v11 >= 1)
      {
        for (j = 0; j != v11; ++j)
        {
          v13 = *(unsigned int *)(v2 + 124);
          if (j >= v13)
          {
            v15 = *(_DWORD *)(v2 + 108);
            if (v15 <= (int)j - (int)v13)
            {
              v14 = *(_DWORD **)(*(_QWORD *)(v2 + 56) + 8 * (j - v15 - v13));
              if (v14[10] != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x195C2B584);
              }
            }
            else
            {
              v14 = *(_DWORD **)(*(_QWORD *)(v2 + 96) + 8 * (j - v13));
              if (v14[10] != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x195C2B564);
              }
            }
          }
          else
          {
            v14 = *(_DWORD **)(*(_QWORD *)(v2 + 112) + 8 * j);
            if (v14[10] != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195C2B52CLL);
            }
          }
          ++v14[4];
          this = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v14 + 120))(v14, 0);
          if (v14[4] == 1)
            this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          else
            --v14[4];
        }
      }
      if (*(_BYTE *)(v4 + 1337))
      {
        v16 = *(unsigned __int8 *)(v4 + 1336);
      }
      else
      {
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 528);
        if (v27
          && (v28 = *(_QWORD *)(v27 + 8)) != 0
          && (v29 = *(_QWORD *)(v28 + 24)) != 0
          && (v30 = *(WebCore::Page **)(v29 + 8)) != 0)
        {
          v31 = *((_QWORD *)v30 + 66);
          if (!v31 || (v32 = *(WebCore::PageGroup **)(v31 + 8)) == 0)
          {
            v62 = v30;
            WebCore::Page::initGroup(v30);
            v63 = *((_QWORD *)v62 + 66);
            if (v63)
              v32 = *(WebCore::PageGroup **)(v63 + 8);
            else
              v32 = 0;
          }
          v33 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v32 + 5);
          if (!v33)
          {
            v34 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
            v33 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v34, v32);
            v35 = (_DWORD *)*((_QWORD *)v32 + 5);
            *((_QWORD *)v32 + 5) = v33;
            if (v35)
            {
              if (v35[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
                v33 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v32 + 5);
              }
              else
              {
                --v35[2];
              }
            }
          }
          this = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v33 + 16))(v33);
          LOWORD(v16) = this | 0x100;
        }
        else
        {
          LOWORD(v16) = 256;
        }
        *(_WORD *)(v4 + 1336) = v16;
        v16 = v16;
      }
      if (v16 == 1 || *(_BYTE *)(v2 + 88))
        goto LABEL_92;
    }
    v42 = *(WebCore::TrackListBase **)(v4 + 1352);
    if (v42)
    {
      ++*((_DWORD *)v42 + 6);
      this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(v42);
      if (*((_DWORD *)v42 + 6) == 1)
        this = (*(uint64_t (**)(WebCore::TrackListBase *))(*(_QWORD *)v42 + 72))(v42);
      else
        --*((_DWORD *)v42 + 6);
    }
    else
    {
      this = (uint64_t)WebCore::TrackListBase::scheduleChangeEvent(0);
    }
    goto LABEL_92;
  }
  return this;
}

_DWORD *WebCore::HTMLMediaElement::configureTextTracks(WebCore::HTMLMediaElement *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  WTF *v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  WTF *v12;
  int v13;
  WTF *v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  WTF *v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  WTF *v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *result;
  WTF *v49;
  uint64_t v50;
  WTF *v51[2];
  __int128 v52;
  int v53;
  char v54;
  WTF *v55[2];
  __int128 v56;
  int v57;
  char v58;
  WTF *v59[2];
  __int128 v60;
  int v61;
  char v62;
  WTF *v63[2];
  __int128 v64;
  int v65;
  char v66;
  _BYTE v67[37];
  WTF *v68;

  memset(v67, 0, sizeof(v67));
  *(_OWORD *)v63 = 0u;
  v64 = 0u;
  v65 = 1;
  v66 = 0;
  *(_OWORD *)v59 = 0u;
  v60 = 0u;
  v61 = 2;
  v62 = 0;
  *(_OWORD *)v55 = 0u;
  v56 = 0u;
  v57 = 3;
  v58 = 0;
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  v53 = 4;
  v54 = 0;
  v2 = *((_QWORD *)this + 169);
  if (!v2)
  {
    v22 = 0;
    goto LABEL_76;
  }
  v4 = *(_DWORD *)(v2 + 108);
  v5 = *(_DWORD *)(v2 + 124);
  v6 = *(_DWORD *)(v2 + 68);
  if (!(v5 + v4 + v6))
    goto LABEL_58;
  v7 = 0;
  do
  {
    if (v5 <= v7)
    {
      if (v4 <= v7 - v5)
      {
        v9 = v7 - v4 - v5;
        if (v6 <= v9)
          goto LABEL_48;
        v8 = *(WTF **)(*(_QWORD *)(v2 + 56) + 8 * v9);
        if (!v8)
          goto LABEL_48;
        if (*((_DWORD *)v8 + 10) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195C2BEBCLL);
        }
      }
      else
      {
        v8 = *(WTF **)(*(_QWORD *)(v2 + 96) + 8 * (v7 - v5));
        if (!v8)
          goto LABEL_48;
        if (*((_DWORD *)v8 + 10) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195C2BE9CLL);
        }
      }
    }
    else
    {
      v8 = *(WTF **)(*(_QWORD *)(v2 + 112) + 8 * v7);
      if (!v8)
        goto LABEL_48;
      if (*((_DWORD *)v8 + 10) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195C2BE7CLL);
      }
    }
    v10 = *((_DWORD *)v8 + 4);
    *((_DWORD *)v8 + 4) = v10 + 1;
    v68 = v8;
    v11 = (WTF **)v67;
    switch(*((_DWORD *)v8 + 57))
    {
      case 0:
      case 1:
      case 5:
        break;
      case 2:
        v11 = v63;
        break;
      case 3:
        v11 = v59;
        break;
      case 4:
        v11 = v55;
        break;
      default:
        v11 = v51;
        break;
    }
    if (!v11[2] && *((_DWORD *)v8 + 56) == 2)
    {
      *((_DWORD *)v8 + 4) = v10 + 2;
      v12 = v11[2];
      v11[2] = v8;
      if (v12)
      {
        if (*((_DWORD *)v12 + 4) == 1)
        {
          (*(void (**)(WTF *))(*(_QWORD *)v12 + 16))(v12);
          v8 = v68;
        }
        else
        {
          --*((_DWORD *)v12 + 4);
        }
      }
    }
    if (!v11[3])
    {
      v13 = (*(uint64_t (**)(WTF *))(*(_QWORD *)v8 + 176))(v8);
      v8 = v68;
      if (v13)
      {
        if (v68)
          ++*((_DWORD *)v68 + 4);
        v14 = v11[3];
        v11[3] = v8;
        if (v14)
        {
          if (*((_DWORD *)v14 + 4) == 1)
          {
            (*(void (**)(WTF *))(*(_QWORD *)v14 + 16))(v14);
            v8 = v68;
          }
          else
          {
            --*((_DWORD *)v14 + 4);
          }
        }
      }
    }
    if (*((_BYTE *)v8 + 256))
    {
      v68 = 0;
LABEL_46:
      if (*((_DWORD *)v8 + 4) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v8 + 16))(v8);
      else
        --*((_DWORD *)v8 + 4);
      goto LABEL_48;
    }
    v15 = (WTF::StringImpl *)*((_QWORD *)v8 + 9);
    if (v15)
    {
      v16 = *(_DWORD *)v15;
      v17 = *((_DWORD *)v15 + 1);
      *(_DWORD *)v15 += 2;
      if (v16)
      {
        *(_DWORD *)v15 = v16;
        if (!v17)
          goto LABEL_38;
LABEL_37:
        *((_BYTE *)v11 + 36) = 1;
        goto LABEL_38;
      }
      WTF::StringImpl::destroy(v15, a2);
      if (v17)
        goto LABEL_37;
    }
LABEL_38:
    v18 = *((unsigned int *)v11 + 3);
    if ((_DWORD)v18 == *((_DWORD *)v11 + 2))
    {
      v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v11, v18 + 1, (unint64_t)&v68);
      v18 = *((unsigned int *)v11 + 3);
      v20 = *(_QWORD *)v19;
      if (*(_QWORD *)v19)
        ++*(_DWORD *)(v20 + 16);
      *((_QWORD *)*v11 + v18) = v20;
    }
    else
    {
      v21 = v68;
      if (v68)
        ++*((_DWORD *)v68 + 4);
      *((_QWORD *)*v11 + v18) = v21;
    }
    *((_DWORD *)v11 + 3) = v18 + 1;
    v8 = v68;
    v68 = 0;
    if (v8)
      goto LABEL_46;
LABEL_48:
    ++v7;
    v2 = *((_QWORD *)this + 169);
    v4 = *(_DWORD *)(v2 + 108);
    v5 = *(_DWORD *)(v2 + 124);
    v6 = *(_DWORD *)(v2 + 68);
  }
  while (v7 < v5 + v4 + v6);
  if (*(_DWORD *)&v67[12])
    WebCore::HTMLMediaElement::configureTextTrackGroup((uint64_t)this, (WebCore::TextTrack *)v67);
LABEL_58:
  if (HIDWORD(v63[1]))
    WebCore::HTMLMediaElement::configureTextTrackGroup((uint64_t)this, (WebCore::TextTrack *)v63);
  if (HIDWORD(v59[1]))
    WebCore::HTMLMediaElement::configureTextTrackGroup((uint64_t)this, (WebCore::TextTrack *)v59);
  v22 = HIDWORD(v55[1]);
  if (HIDWORD(v55[1]))
  {
    v23 = v55[0];
    v24 = 8 * HIDWORD(v55[1]);
    do
    {
      if (!*(_DWORD *)(*(_QWORD *)v23 + 224)
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v23 + 176))(*(_QWORD *)v23))
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v23 + 120))(*(_QWORD *)v23, 1);
      }
      v23 = (WTF *)((char *)v23 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  if (HIDWORD(v51[1]))
    WebCore::HTMLMediaElement::configureTextTrackGroup((uint64_t)this, (WebCore::TextTrack *)v51);
  v25 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  *(_DWORD *)((char *)this + 1265) = *(_DWORD *)((char *)this + 1265);
  *(_WORD *)((char *)this + 1269) = (v25 & 0xFFFFFFDFFFFFFFFFLL) >> 32;
  if ((v25 & 0x40000000) == 0 && WebCore::HTMLMediaElement::ensureMediaControls(this))
  {
    v26 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = off_1E33C5B70;
    *((_QWORD *)v26 + 1) = this;
    v68 = v26;
    WebCore::HTMLMediaElement::setupAndCallJS((uint64_t)this, &v68);
    (*(void (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
  }
  WebCore::HTMLMediaElement::configureTextTrackDisplay(this, 0);
  v27 = (_DWORD *)*((_QWORD *)&v52 + 1);
  *((_QWORD *)&v52 + 1) = 0;
  if (v27)
  {
    if (v27[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
    else
      --v27[4];
  }
LABEL_76:
  v28 = (_DWORD *)v52;
  *(_QWORD *)&v52 = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[4];
  }
  v29 = v51[0];
  if (HIDWORD(v51[1]))
  {
    v30 = 8 * HIDWORD(v51[1]);
    do
    {
      v31 = *(_DWORD **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (v31[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
        else
          --v31[4];
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
    v29 = v51[0];
  }
  if (v29)
  {
    v51[0] = 0;
    LODWORD(v51[1]) = 0;
    WTF::fastFree(v29, a2);
  }
  v32 = (_DWORD *)*((_QWORD *)&v56 + 1);
  *((_QWORD *)&v56 + 1) = 0;
  if (v32)
  {
    if (v32[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
    else
      --v32[4];
  }
  if ((_QWORD)v56)
  {
    if (*(_DWORD *)(v56 + 16) == 1)
      (*(void (**)(void))(*(_QWORD *)v56 + 16))();
    else
      --*(_DWORD *)(v56 + 16);
  }
  v33 = v55[0];
  if (v22)
  {
    v34 = 8 * v22;
    v35 = v55[0];
    do
    {
      v36 = *(_DWORD **)v35;
      *(_QWORD *)v35 = 0;
      if (v36)
      {
        if (v36[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
        else
          --v36[4];
      }
      v35 = (WTF *)((char *)v35 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  if (v33)
    WTF::fastFree(v33, a2);
  v37 = (_DWORD *)*((_QWORD *)&v60 + 1);
  *((_QWORD *)&v60 + 1) = 0;
  if (v37)
  {
    if (v37[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
    else
      --v37[4];
  }
  v38 = (_DWORD *)v60;
  *(_QWORD *)&v60 = 0;
  if (v38)
  {
    if (v38[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
    else
      --v38[4];
  }
  v39 = v59[0];
  if (HIDWORD(v59[1]))
  {
    v40 = 8 * HIDWORD(v59[1]);
    do
    {
      v41 = *(_DWORD **)v39;
      *(_QWORD *)v39 = 0;
      if (v41)
      {
        if (v41[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 16))(v41);
        else
          --v41[4];
      }
      v39 = (WTF *)((char *)v39 + 8);
      v40 -= 8;
    }
    while (v40);
    v39 = v59[0];
  }
  if (v39)
  {
    v59[0] = 0;
    LODWORD(v59[1]) = 0;
    WTF::fastFree(v39, a2);
  }
  v42 = (_DWORD *)*((_QWORD *)&v64 + 1);
  *((_QWORD *)&v64 + 1) = 0;
  if (v42)
  {
    if (v42[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 16))(v42);
    else
      --v42[4];
  }
  v43 = (_DWORD *)v64;
  *(_QWORD *)&v64 = 0;
  if (v43)
  {
    if (v43[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 16))(v43);
    else
      --v43[4];
  }
  v44 = v63[0];
  if (HIDWORD(v63[1]))
  {
    v45 = 8 * HIDWORD(v63[1]);
    do
    {
      v46 = *(_DWORD **)v44;
      *(_QWORD *)v44 = 0;
      if (v46)
      {
        if (v46[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
        else
          --v46[4];
      }
      v44 = (WTF *)((char *)v44 + 8);
      v45 -= 8;
    }
    while (v45);
    v44 = v63[0];
  }
  if (v44)
  {
    v63[0] = 0;
    LODWORD(v63[1]) = 0;
    WTF::fastFree(v44, a2);
  }
  v47 = *(_DWORD **)&v67[24];
  *(_QWORD *)&v67[24] = 0;
  if (v47)
  {
    if (v47[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 16))(v47);
    else
      --v47[4];
  }
  result = *(_DWORD **)&v67[16];
  *(_QWORD *)&v67[16] = 0;
  if (result)
  {
    if (result[4] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  v49 = *(WTF **)v67;
  if (*(_DWORD *)&v67[12])
  {
    v50 = 8 * *(unsigned int *)&v67[12];
    do
    {
      result = *(_DWORD **)v49;
      *(_QWORD *)v49 = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
      v49 = (WTF *)((char *)v49 + 8);
      v50 -= 8;
    }
    while (v50);
    v49 = *(WTF **)v67;
  }
  if (v49)
  {
    *(_QWORD *)v67 = 0;
    *(_DWORD *)&v67[8] = 0;
    return (_DWORD *)WTF::fastFree(v49, a2);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::sourceWasAdded(uint64_t this, WebCore::HTMLSourceElement *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WebCore::Document *v40;
  uint64_t v41;
  WebCore::MediaElementSession *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::Logger *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  __int16 v63;
  __int16 v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  WTF::Logger *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  __int128 buf;
  const char *v83;
  WTF::StringImpl *v84[3];

  v6 = this;
  v84[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(this + 1824) + 12))
  {
    v7 = WebCore::LogMedia && byte_1ECE7C490 >= 3u;
    if (v7 && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
    {
      WebCore::Element::getNonEmptyURLAttribute(a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a3, a4, (WTF::URL *)&buf, a5);
      v8 = *(_QWORD *)(v6 + 1824);
      v9 = *(_QWORD *)(v6 + 1832);
      v73 = "HTMLMediaElement";
      v74 = 17;
      v75 = "sourceWasAdded";
      v76 = v9;
      if (*(_BYTE *)(v8 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WTF::URL>((WTF::Logger::LogSiteIdentifier *)&v73);
      this = buf;
      *(_QWORD *)&buf = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528);
  if (!v10 || !*(_QWORD *)(v10 + 8))
  {
    v16 = *(_QWORD *)(v6 + 1824);
    v17 = *(_QWORD *)(v6 + 1832);
    v73 = "HTMLMediaElement";
    v74 = 17;
    v75 = "sourceWasAdded";
    v76 = v17;
    if (!*(_BYTE *)(v16 + 12))
      return this;
    if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
      return this;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v73);
    this = WTF::String::String((WTF::String *)&v79, "<source> inserted inside a document without a browsing context is not loaded");
    if (v80)
    {
      v19 = *((_DWORD *)v80 + 1);
      if (v79)
      {
LABEL_32:
        v20 = *((_DWORD *)v79 + 1);
LABEL_33:
        if ((v20 | v19) < 0 || (this = (v19 + v20), __OFADD__(v19, v20)))
        {
          v81 = 0;
          goto LABEL_180;
        }
        if (v80)
        {
          v21 = *((_DWORD *)v80 + 4);
          v22 = (v21 >> 2) & 1;
          if (v79 && (v21 & 4) != 0)
            goto LABEL_38;
        }
        else
        {
          if (v79)
          {
LABEL_38:
            v22 = (*((unsigned __int8 *)v79 + 16) >> 2) & 1;
            goto LABEL_39;
          }
          v22 = 1;
        }
LABEL_39:
        this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v22, (uint64_t)v80, (uint64_t)v79, &v81);
        if (v81)
        {
          v24 = v79;
          v79 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v80;
          v80 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v23);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = qword_1ECE7C4A0;
          v27 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v27)
          {
            WTF::String::utf8();
            v29 = v77 ? (char *)v77 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v29;
            _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v27 = (uint64_t)v77;
            v77 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 1)
                v27 = WTF::fastFree((WTF *)v27, v28);
              else
                --*(_DWORD *)v27;
            }
          }
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v31 = *v30;
              if ((v31 & 1) != 0)
                break;
              v32 = __ldaxr(v30);
              if (v32 == v31)
              {
                if (!__stxr(v31 | 1, v30))
                {
                  v47 = WTF::Logger::observers((WTF::Logger *)v27);
                  v48 = *(unsigned int *)(v47 + 12);
                  if ((_DWORD)v48)
                  {
                    v49 = *(uint64_t **)v47;
                    v50 = *(_QWORD *)v47 + 8 * v48;
                    do
                    {
                      v51 = *v49;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v73);
                      LODWORD(v83) = 0;
                      WTF::String::String((WTF::String *)v84, "<source> inserted inside a document without a browsing context is not loaded");
                      v77 = 0;
                      v78 = 0;
                      v52 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v78) = 2;
                      v77 = v52;
                      v53 = HIDWORD(v78);
                      *((_DWORD *)v52 + 4 * HIDWORD(v78)) = buf;
                      v54 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v52 + 2 * v53 + 1) = v54;
                      *((_DWORD *)v52 + 4 * (v53 + 1)) = (_DWORD)v83;
                      v55 = v84[0];
                      if (v84[0])
                        *(_DWORD *)v84[0] += 2;
                      *((_QWORD *)v52 + 2 * (v53 + 1) + 1) = v55;
                      HIDWORD(v78) = v53 + 2;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v51 + 16))(v51, &WebCore::LogMedia, 3, &v77);
                      v56 = v77;
                      if (HIDWORD(v78))
                      {
                        v57 = 16 * HIDWORD(v78);
                        v58 = (WTF::StringImpl **)((char *)v77 + 8);
                        do
                        {
                          v59 = *v58;
                          *v58 = 0;
                          if (v59)
                          {
                            if (*(_DWORD *)v59 == 2)
                              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v28);
                            else
                              *(_DWORD *)v59 -= 2;
                          }
                          v58 += 2;
                          v57 -= 16;
                        }
                        while (v57);
                        v56 = v77;
                      }
                      if (v56)
                      {
                        v77 = 0;
                        LODWORD(v78) = 0;
                        WTF::fastFree(v56, v28);
                      }
                      v60 = v84[0];
                      v84[0] = 0;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v28);
                        else
                          *(_DWORD *)v60 -= 2;
                      }
                      v61 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 2)
                          WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v28);
                        else
                          *(_DWORD *)v61 -= 2;
                      }
                      ++v49;
                    }
                    while (v49 != (uint64_t *)v50);
                  }
                  v62 = __ldxr(v30);
                  if (v62 == 1)
                  {
                    if (!__stlxr(0, v30))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          this = (uint64_t)v81;
          v81 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              return WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v28);
            else
              *(_DWORD *)this -= 2;
          }
          return this;
        }
LABEL_180:
        __break(0xC471u);
        return this;
      }
    }
    else
    {
      v19 = 0;
      if (v79)
        goto LABEL_32;
    }
    v20 = 0;
    goto LABEL_33;
  }
  v11 = *(_DWORD **)(v6 + 1152);
  if (v11)
  {
    ++v11[2];
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 88))(v11);
    if (v11[2] == 1)
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = *(_QWORD *)(v6 + 104);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(uint64_t **)(v12 + 40);
      LODWORD(v15) = *(_DWORD *)(v12 + 52);
      if (!(_DWORD)v15)
        goto LABEL_69;
    }
    else
    {
      v14 = (uint64_t *)(v12 + 32);
      LODWORD(v15) = v13 >> 5;
      if (!(_DWORD)v15)
        goto LABEL_69;
    }
    v15 = v15;
    do
    {
      v33 = *v14;
      if (*v14 == WebCore::HTMLNames::srcAttr
        || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
        && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
      {
        return this;
      }
      v14 += 2;
    }
    while (--v15);
  }
LABEL_69:
  if (!*(_DWORD *)(v6 + 900))
  {
    *((_DWORD *)a2 + 6) += 2;
    v41 = *(_QWORD *)(v6 + 1072);
    *(_QWORD *)(v6 + 1072) = a2;
    if (v41)
    {
      if (*(_DWORD *)(v41 + 24) == 2)
      {
        v63 = *(_WORD *)(v41 + 30);
        if ((v63 & 0x400) == 0)
        {
          v64 = *(_WORD *)(v41 + 28);
          if ((v64 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v41, a2);
          }
          else
          {
            if ((v64 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v41 + 160) + 16))(*(_QWORD *)(v41 + 160));
              v63 = *(_WORD *)(v41 + 30);
            }
            *(_WORD *)(v41 + 30) = v63 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 72))(v41);
          }
        }
      }
      else
      {
        *(_DWORD *)(v41 + 24) -= 2;
      }
    }
    v42 = *(WebCore::MediaElementSession **)(v6 + 1600);
    if (!v42)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v6);
      v42 = *(WebCore::MediaElementSession **)(v6 + 1600);
    }
    this = WebCore::MediaElementSession::dataLoadingPermitted(v42);
    if ((_DWORD)this)
      return (uint64_t)WebCore::HTMLMediaElement::selectMediaResource((WebCore::HTMLMediaElement *)v6);
    return this;
  }
  v34 = *(_QWORD *)(v6 + 1064);
  if (v34)
  {
    v35 = *(_DWORD *)(v34 + 24);
    *(_DWORD *)(v34 + 24) = v35 + 2;
    v36 = *(_QWORD *)(v34 + 56);
    if (v36)
    {
      do
      {
        if ((*(_WORD *)(v36 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
        {
          break;
        }
        v36 = *(_QWORD *)(v36 + 56);
      }
      while (v36);
      if (v35)
      {
        *(_DWORD *)(v34 + 24) = v35;
      }
      else
      {
        v65 = *(_WORD *)(v34 + 30);
        if ((v65 & 0x400) == 0)
        {
          v66 = *(_WORD *)(v34 + 28);
          if ((v66 & 0xF000) == 0x9000)
          {
            this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v34, a2);
          }
          else
          {
            if ((v66 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v34 + 160) + 16))(*(_QWORD *)(v34 + 160));
              v65 = *(_WORD *)(v34 + 30);
            }
            *(_WORD *)(v34 + 30) = v65 | 0x400;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
          }
        }
      }
      if ((WebCore::HTMLSourceElement *)v36 == a2)
      {
        v37 = *(_QWORD *)(v6 + 1824);
        v38 = *(WTF::StringImpl **)(v6 + 1832);
        *(_QWORD *)&buf = "HTMLMediaElement";
        *((_QWORD *)&buf + 1) = 17;
        v83 = "sourceWasAdded";
        v84[0] = v38;
        if (*(_BYTE *)(v37 + 12))
        {
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "<source> inserted immediately after current source");
        }
        *((_DWORD *)a2 + 6) += 2;
        v40 = *(WebCore::Document **)(v6 + 1072);
        *(_QWORD *)(v6 + 1072) = a2;
        if (v40)
        {
          if (*((_DWORD *)v40 + 6) != 2)
          {
            *((_DWORD *)v40 + 6) -= 2;
            return this;
          }
          v71 = *((_WORD *)v40 + 15);
          if ((v71 & 0x400) == 0)
          {
            v72 = *((_WORD *)v40 + 14);
            if ((v72 & 0xF000) != 0x9000)
            {
              if ((v72 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v40 + 20) + 16))(*((_QWORD *)v40 + 20));
                v71 = *((_WORD *)v40 + 15);
              }
              *((_WORD *)v40 + 15) = v71 | 0x400;
              v46 = *(uint64_t (**)(void))(*(_QWORD *)v40 + 72);
              return v46();
            }
            return (uint64_t)WebCore::Document::removedLastRef(v40, a2);
          }
        }
        return this;
      }
    }
    else if (v35)
    {
      *(_DWORD *)(v34 + 24) = v35;
    }
    else
    {
      v69 = *(_WORD *)(v34 + 30);
      if ((v69 & 0x400) == 0)
      {
        v70 = *(_WORD *)(v34 + 28);
        if ((v70 & 0xF000) == 0x9000)
        {
          this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v34, a2);
        }
        else
        {
          if ((v70 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v34 + 160) + 16))(*(_QWORD *)(v34 + 160));
            v69 = *(_WORD *)(v34 + 30);
          }
          *(_WORD *)(v34 + 30) = v69 | 0x400;
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
        }
      }
    }
  }
  if (!*(_QWORD *)(v6 + 1072))
  {
    WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)v6, 1uLL);
    *(_DWORD *)(v6 + 900) = 2;
    *((_DWORD *)a2 + 6) += 2;
    v44 = *(_QWORD *)(v6 + 1072);
    *(_QWORD *)(v6 + 1072) = a2;
    if (v44)
    {
      if (*(_DWORD *)(v44 + 24) == 2)
      {
        v67 = *(_WORD *)(v44 + 30);
        if ((v67 & 0x400) == 0)
        {
          v68 = *(_WORD *)(v44 + 28);
          if ((v68 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v44, v43);
          }
          else
          {
            if ((v68 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v44 + 160) + 16))(*(_QWORD *)(v44 + 160));
              v67 = *(_WORD *)(v44 + 30);
            }
            *(_WORD *)(v44 + 30) = v67 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 72))(v44);
          }
        }
      }
      else
      {
        *(_DWORD *)(v44 + 24) -= 2;
      }
    }
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v45 = off_1E33C58C0;
    v45[1] = WebCore::HTMLMediaElement::loadNextSourceChild;
    v45[2] = 0;
    v45[3] = v6;
    *(_QWORD *)&buf = v45;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v6, 9, v6 + 784, (uint64_t (***)())&buf);
    this = buf;
    *(_QWORD *)&buf = 0;
    if (this)
    {
      v46 = *(uint64_t (**)(void))(*(_QWORD *)this + 8);
      return v46();
    }
  }
  return this;
}

_QWORD *WebCore::HTMLMediaElement::sourceWasRemoved(_QWORD *this, WebCore::HTMLSourceElement *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::HTMLSourceElement *v10;
  WebCore::HTMLSourceElement *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  WebCore::Document *v27;
  _QWORD v28[4];
  WTF::StringImpl *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;

  v6 = this;
  if (*(_BYTE *)(this[228] + 12))
  {
    v7 = WebCore::LogMedia && byte_1ECE7C490 >= 3u;
    if (v7 && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
    {
      WebCore::Element::getNonEmptyURLAttribute(a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a3, a4, (WTF::URL *)&v29, a5);
      v8 = v6[228];
      v9 = v6[229];
      v28[0] = "HTMLMediaElement";
      v28[1] = 17;
      v28[2] = "sourceWasRemoved";
      v28[3] = v9;
      if (*(_BYTE *)(v8 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WTF::URL>((WTF::Logger::LogSiteIdentifier *)v28);
      this = v29;
      v29 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  v10 = (WebCore::HTMLSourceElement *)v6[133];
  v11 = (WebCore::HTMLSourceElement *)v6[134];
  if (v10 != a2)
  {
    if (v11 != a2)
      return this;
LABEL_28:
    if (v10)
    {
      *((_DWORD *)v10 + 6) += 2;
      v15 = *((_QWORD *)v10 + 7);
      if (v15)
      {
        while ((*(_WORD *)(v15 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
        {
          v15 = *(_QWORD *)(v15 + 56);
          if (!v15)
            goto LABEL_37;
        }
        *(_DWORD *)(v15 + 24) += 2;
      }
LABEL_37:
      v6[134] = v15;
      if (*((_DWORD *)a2 + 6) == 2)
      {
        v21 = *((_WORD *)a2 + 15);
        if ((v21 & 0x400) == 0)
        {
          v22 = *((_WORD *)a2 + 14);
          if ((v22 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef(a2, a2);
          }
          else
          {
            if ((v22 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)a2 + 20) + 16))(*((_QWORD *)a2 + 20));
              v21 = *((_WORD *)a2 + 15);
            }
            *((_WORD *)a2 + 15) = v21 | 0x400;
            this = (_QWORD *)(*(uint64_t (**)(WebCore::HTMLSourceElement *))(*(_QWORD *)a2 + 72))(a2);
          }
        }
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
      if (*((_DWORD *)v10 + 6) != 2)
      {
        *((_DWORD *)v10 + 6) -= 2;
        goto LABEL_41;
      }
      v23 = *((_WORD *)v10 + 15);
      if ((v23 & 0x400) == 0)
      {
        v24 = *((_WORD *)v10 + 14);
        if ((v24 & 0xF000) != 0x9000)
        {
          if ((v24 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v10 + 20) + 16))(*((_QWORD *)v10 + 20));
            v23 = *((_WORD *)v10 + 15);
          }
          *((_WORD *)v10 + 15) = v23 | 0x400;
          this = (_QWORD *)(*(uint64_t (**)(WebCore::HTMLSourceElement *))(*(_QWORD *)v10 + 72))(v10);
          goto LABEL_41;
        }
        v27 = v10;
        goto LABEL_74;
      }
    }
    else
    {
      v6[134] = 0;
      if (*((_DWORD *)a2 + 6) != 2)
      {
        *((_DWORD *)a2 + 6) -= 2;
        goto LABEL_41;
      }
      v25 = *((_WORD *)a2 + 15);
      if ((v25 & 0x400) == 0)
      {
        v26 = *((_WORD *)a2 + 14);
        if ((v26 & 0xF000) != 0x9000)
        {
          if ((v26 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)a2 + 20) + 16))(*((_QWORD *)a2 + 20));
            v25 = *((_WORD *)a2 + 15);
          }
          *((_WORD *)a2 + 15) = v25 | 0x400;
          this = (_QWORD *)(*(uint64_t (**)(WebCore::HTMLSourceElement *))(*(_QWORD *)a2 + 72))(a2);
          goto LABEL_41;
        }
        v27 = a2;
LABEL_74:
        this = WebCore::Document::removedLastRef(v27, a2);
      }
    }
LABEL_41:
    v16 = v6[228];
    v17 = v6[229];
    v29 = (WTF::StringImpl *)"HTMLMediaElement";
    v30 = 17;
    v31 = "sourceWasRemoved";
    v32 = v17;
    if (*(_BYTE *)(v16 + 12))
    {
      if (WebCore::LogMedia)
        v18 = byte_1ECE7C490 >= 3u;
      else
        v18 = 0;
      if (v18)
        return (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v29);
    }
    return this;
  }
  if (v11 == a2)
    goto LABEL_28;
  v6[133] = 0;
  if (*((_DWORD *)a2 + 6) == 2)
  {
    v19 = *((_WORD *)a2 + 15);
    if ((v19 & 0x400) == 0)
    {
      v20 = *((_WORD *)a2 + 14);
      if ((v20 & 0xF000) == 0x9000)
      {
        this = WebCore::Document::removedLastRef(a2, a2);
      }
      else
      {
        if ((v20 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)a2 + 20) + 16))(*((_QWORD *)a2 + 20));
          v19 = *((_WORD *)a2 + 15);
        }
        *((_WORD *)a2 + 15) = v19 | 0x400;
        this = (_QWORD *)(*(uint64_t (**)(WebCore::HTMLSourceElement *))(*(_QWORD *)a2 + 72))(a2);
      }
    }
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  v12 = v6[228];
  v13 = v6[229];
  v29 = (WTF::StringImpl *)"HTMLMediaElement";
  v30 = 17;
  v31 = "sourceWasRemoved";
  v32 = v13;
  if (*(_BYTE *)(v12 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      return (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [28]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v29, "m_currentSourceNode cleared");
  }
  return this;
}

uint64_t (**WebCore::HTMLMediaElement::mediaPlayerTimeChanged(WebCore::HTMLMediaElement *this))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::MediaTime *updated;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::MonotonicTime *v9;
  double v10;
  _DWORD *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  double v21;
  WTF::MediaTime *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  WebCore *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  WTF::MonotonicTime *v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const WTF::MediaTime *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  uint64_t v60;
  void *v61;
  char *v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  const WTF::MediaTime *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  NSObject *v77;
  uint64_t v78;
  void *v79;
  char *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  WTF::Logger *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::Logger *v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  _DWORD *v117;
  WebCore::MediaElementSession *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD *v125;
  uint64_t v126;
  WTF::MonotonicTime *v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  void *v136;
  WebCore::MediaController *v137;
  uint64_t (**result)();
  bmalloc::api *v139;
  void *v140;
  __int16 v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  WTF::Logger *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::Logger *v155;
  uint64_t v156;
  WTF::StringImpl **v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  int v165;
  __int16 v166;
  __int16 v167;
  WTF::MediaTime *v168;
  WTF::MediaTime *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::MediaTime *v172;
  __int128 *v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[2];
  WTF::Logger *v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  __int128 buf;
  __int128 v197;
  __int128 v198;
  int v199;
  WTF::StringImpl *v200;
  int v201;
  WTF::StringImpl *v202;
  int v203;
  WTF::StringImpl *v204[5];

  v204[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  *(_QWORD *)&buf = "HTMLMediaElement";
  *((_QWORD *)&buf + 1) = 17;
  *(_QWORD *)&v197 = "mediaPlayerTimeChanged";
  *((_QWORD *)&v197 + 1) = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  *(_QWORD *)&buf = WebCore::HTMLMediaElement::currentMediaTime(this);
  *((_QWORD *)&buf + 1) = v4;
  updated = (WTF::MediaTime *)WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)this, (const WTF::MediaTime *)&buf);
  ++*((_DWORD *)this + 287);
  v6 = (_QWORD *)WTF::MediaTime::invalidTime(updated);
  v7 = *(_QWORD *)((char *)v6 + 5);
  *((_QWORD *)this + 148) = *v6;
  *(_QWORD *)((char *)this + 1189) = v7;
  v8 = *((_QWORD *)this + 142);
  if (v8 && (*(double (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 848))(*(_QWORD *)(v8 + 72)) != 0.0)
  {
    WTF::MonotonicTime::now(v9);
    *((double *)this + 151) = v10 + 0.5;
  }
  v11 = (_DWORD *)((char *)this + 1265);
  v12 = *(_DWORD *)((char *)this + 1265);
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x4000) != 0
    && *((int *)this + 226) >= 2
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 408))(*(_QWORD *)(*((_QWORD *)this + 142) + 72)) & 1) == 0)
  {
    WebCore::HTMLMediaElement::finishSeek(this);
  }
  else
  {
    WebCore::HTMLMediaElement::scheduleTimeupdateEvent(this, 0);
  }
  v182[0] = WebCore::HTMLMediaElement::currentMediaTime(this);
  v182[1] = v13;
  v14 = *((_QWORD *)this + 144);
  if (v14)
  {
    v15 = *(uint64_t (**)(void))(*(_QWORD *)v14 + 40);
LABEL_12:
    v16 = v15();
    goto LABEL_17;
  }
  v18 = *((_QWORD *)this + 142);
  if (v18 && *((int *)this + 226) >= 1)
  {
    v15 = *(uint64_t (**)(void))(**(_QWORD **)(v18 + 72) + 336);
    goto LABEL_12;
  }
  v19 = (uint64_t *)WTF::MediaTime::invalidTime(0);
  v16 = *v19;
  v17 = v19[1];
LABEL_17:
  v180 = v16;
  v181 = v17;
  v20 = *((_QWORD *)this + 177);
  if (v20)
    v21 = (*(double (**)(_QWORD))(**(_QWORD **)(v20 + 256) + 40))(*(_QWORD *)(v20 + 256));
  else
    v21 = *((double *)this + 109);
  v22 = (WTF::MediaTime *)WTF::MediaTime::operator BOOL();
  if (!(_DWORD)v22 || (BYTE4(v181) & 0xD) != 1)
  {
    v27 = *v11 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    if (!*((_QWORD *)this + 204))
      goto LABEL_189;
    if ((*v11 & 0x20000) != 0)
      goto LABEL_244;
    v28 = *((_QWORD *)this + 142);
    if (!v28)
      goto LABEL_244;
    v29 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 72) + 1048))(*(_QWORD *)(v28 + 72));
    if (!(_DWORD)v29)
      goto LABEL_244;
    *v11 |= 0x20000u;
    v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
      v31 = WebCore::threadGlobalDataSlow(v29);
    v32 = *(_QWORD *)(v31 + 40);
    if (!v32)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
      v32 = *(_QWORD *)(v31 + 40);
    }
    v33 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v33);
    *(_DWORD *)(v33 + 16) = 1;
    *(_QWORD *)v33 = off_1E33A4B48;
    *(_QWORD *)(v33 + 8) = 0;
    *(_DWORD *)(v33 + 20) = *(_DWORD *)(v33 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v32 + 752) != 0);
    v35 = *(_DWORD **)(v32 + 752);
    if (v35)
      *v35 += 2;
    *(_QWORD *)(v33 + 24) = v35;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 40) = 0;
    *(_QWORD *)(v33 + 48) = 0;
    *(_QWORD *)(v33 + 56) = v34;
    *(_QWORD *)(v33 + 64) = 0;
    *(_QWORD *)&buf = v33;
    WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&buf);
    v36 = (_DWORD *)buf;
    *(_QWORD *)&buf = 0;
    if (v36)
    {
      if (v36[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
        if ((v12 & 0x800) == 0)
        {
LABEL_41:
          if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1800))(this) & 1) == 0)
          {
            v37 = *((_QWORD *)this + 200);
            if (!v37)
            {
              WebCore::HTMLMediaElement::initializeMediaSession(this);
              v37 = *((_QWORD *)this + 200);
            }
            v38 = (WTF::MonotonicTime *)WebCore::MediaElementSession::addBehaviorRestriction(v37, 0x2000);
            if ((*((_QWORD *)this + 63) & 0xFFFFFFFFFFFFLL) != 0)
              v38 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 472));
            *((_QWORD *)this + 62) = 0;
            WTF::MonotonicTime::now(v38);
            WebCore::TimerBase::setNextFireTime((uint64_t)this + 472, v39 + 6.0);
          }
        }
LABEL_47:
        WebCore::HTMLMediaElement::setPaused((unsigned __int8 *)this, 1);
        v40 = *v11;
        if ((v40 & 2) != 0)
        {
          v41 = v40 & 0xFFFFFFFFFFFFFFFDLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
          *v11 = v40 & 0xFFFFFFFD;
          *(_WORD *)((char *)this + 1269) = WORD2(v41);
          v42 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
          *(_DWORD *)(v42 + 24) += 2;
          WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v42);
          if (*(_DWORD *)(v42 + 24) == 2)
          {
            v166 = *(_WORD *)(v42 + 30);
            if ((v166 & 0x400) == 0)
            {
              v167 = *(_WORD *)(v42 + 28);
              if ((v167 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v42, v43);
              }
              else
              {
                if ((v167 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v42 + 160) + 16))(*(_QWORD *)(v42 + 160));
                  v166 = *(_WORD *)(v42 + 30);
                }
                *(_WORD *)(v42 + 30) = v166 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v42 + 72))(v42);
              }
            }
          }
          else
          {
            *(_DWORD *)(v42 + 24) -= 2;
          }
          WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())this);
        }
        goto LABEL_244;
      }
      --v36[4];
    }
    if ((v12 & 0x800) == 0)
      goto LABEL_41;
    goto LABEL_47;
  }
  v23 = *((_QWORD *)this + 13);
  if (!v23)
    goto LABEL_97;
  v24 = *(_DWORD *)(v23 + 4);
  if ((v24 & 1) == 0)
  {
    v25 = (uint64_t *)(v23 + 32);
    LODWORD(v26) = v24 >> 5;
    if (!(_DWORD)v26)
      goto LABEL_97;
    goto LABEL_53;
  }
  v25 = *(uint64_t **)(v23 + 40);
  LODWORD(v26) = *(_DWORD *)(v23 + 52);
  if (!(_DWORD)v26)
  {
LABEL_97:
    v66 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v22);
    v67 = WTF::MediaTime::compare((WTF::MediaTime *)v182, v66);
    if ((int)v67 <= 0 && v21 < 0.0
      || (v67 = WTF::MediaTime::compare((WTF::MediaTime *)v182, (const WTF::MediaTime *)&v180), (v67 & 0x80000000) == 0)
      && v21 > 0.0)
    {
      v68 = *((_QWORD *)this + 228);
      v69 = *((_QWORD *)this + 229);
      v176 = "HTMLMediaElement";
      v177 = 17;
      v178 = "mediaPlayerTimeChanged";
      v179 = v69;
      if (!*(_BYTE *)(v68 + 12))
        goto LABEL_195;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v176);
      WTF::String::String((WTF::String *)&v189, "current time (");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)v182);
      WTF::String::String((WTF::String *)&v187, ") is greater then duration (");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v180);
      WTF::String::String((WTF::String *)&v185, ") or <= 0, pausing");
      v183 = v189;
      v195 = v188;
      *(_QWORD *)&buf = v190;
      v193 = v186;
      v194 = v187;
      v192 = v185;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v183, (uint64_t *)&v195, (uint64_t *)&v194, (uint64_t *)&v193, (uint64_t *)&v192, &v191);
      if (v191)
      {
        v71 = v185;
        v185 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, v70);
          else
            *(_DWORD *)v71 -= 2;
        }
        v72 = v186;
        v186 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
            WTF::StringImpl::destroy(v72, v70);
          else
            *(_DWORD *)v72 -= 2;
        }
        v73 = v187;
        v187 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v70);
          else
            *(_DWORD *)v73 -= 2;
        }
        v74 = v188;
        v188 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, v70);
          else
            *(_DWORD *)v74 -= 2;
        }
        v75 = v189;
        v189 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v70);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = v190;
        v190 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v70);
          else
            *(_DWORD *)v76 -= 2;
        }
        v77 = qword_1ECE7C4A0;
        v78 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v78)
        {
          WTF::String::utf8();
          v80 = v183 ? (char *)v183 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v80;
          _os_log_impl(&dword_1940B8000, v77, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v78 = (uint64_t)v183;
          v183 = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 1)
              v78 = WTF::fastFree((WTF *)v78, v79);
            else
              --*(_DWORD *)v78;
          }
        }
        if (WebCore::LogMedia)
        {
          v81 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v82 = *v81;
            if ((v82 & 1) != 0)
              break;
            v83 = __ldaxr(v81);
            if (v83 == v82)
            {
              if (!__stxr(v82 | 1, v81))
              {
                v84 = WTF::Logger::observers((WTF::Logger *)v78);
                v85 = *(unsigned int *)(v84 + 12);
                if ((_DWORD)v85)
                {
                  v86 = *(uint64_t **)v84;
                  v174 = *(_QWORD *)v84 + 8 * v85;
                  do
                  {
                    v87 = *v86;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v176);
                    LODWORD(v197) = 0;
                    WTF::String::String((WTF::String *)((char *)&v197 + 8), "current time (");
                    LODWORD(v198) = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)v182);
                    v199 = 0;
                    WTF::String::String((WTF::String *)&v200, ") is greater then duration (");
                    v201 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v180);
                    v203 = 0;
                    WTF::String::String((WTF::String *)v204, ") or <= 0, pausing");
                    v183 = 0;
                    v184 = 0;
                    v88 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                    LODWORD(v184) = 6;
                    v183 = v88;
                    v89 = HIDWORD(v184);
                    *((_DWORD *)v88 + 4 * HIDWORD(v184)) = buf;
                    v90 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v88 + 2 * v89 + 1) = v90;
                    *((_DWORD *)v88 + 4 * (v89 + 1)) = v197;
                    v91 = *((_QWORD *)&v197 + 1);
                    if (*((_QWORD *)&v197 + 1))
                      **((_DWORD **)&v197 + 1) += 2;
                    *((_QWORD *)v88 + 2 * (v89 + 1) + 1) = v91;
                    *((_DWORD *)v88 + 4 * (v89 + 2)) = v198;
                    v92 = *((_QWORD *)&v198 + 1);
                    if (*((_QWORD *)&v198 + 1))
                      **((_DWORD **)&v198 + 1) += 2;
                    *((_QWORD *)v88 + 2 * (v89 + 2) + 1) = v92;
                    *((_DWORD *)v88 + 4 * (v89 + 3)) = v199;
                    v93 = v200;
                    if (v200)
                      *(_DWORD *)v200 += 2;
                    *((_QWORD *)v88 + 2 * (v89 + 3) + 1) = v93;
                    *((_DWORD *)v88 + 4 * (v89 + 4)) = v201;
                    v94 = v202;
                    if (v202)
                      *(_DWORD *)v202 += 2;
                    *((_QWORD *)v88 + 2 * (v89 + 4) + 1) = v94;
                    *((_DWORD *)v88 + 4 * (v89 + 5)) = v203;
                    v95 = v204[0];
                    if (v204[0])
                      *(_DWORD *)v204[0] += 2;
                    *((_QWORD *)v88 + 2 * (v89 + 5) + 1) = v95;
                    HIDWORD(v184) = v89 + 6;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v87 + 16))(v87, &WebCore::LogMedia, 0, &v183);
                    v96 = v183;
                    if (HIDWORD(v184))
                    {
                      v97 = 16 * HIDWORD(v184);
                      v98 = (WTF::StringImpl **)((char *)v183 + 8);
                      do
                      {
                        v99 = *v98;
                        *v98 = 0;
                        if (v99)
                        {
                          if (*(_DWORD *)v99 == 2)
                            WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v79);
                          else
                            *(_DWORD *)v99 -= 2;
                        }
                        v98 += 2;
                        v97 -= 16;
                      }
                      while (v97);
                      v96 = v183;
                    }
                    if (v96)
                    {
                      v183 = 0;
                      LODWORD(v184) = 0;
                      WTF::fastFree(v96, v79);
                    }
                    v100 = v204[0];
                    v204[0] = 0;
                    if (v100)
                    {
                      if (*(_DWORD *)v100 == 2)
                        WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v79);
                      else
                        *(_DWORD *)v100 -= 2;
                    }
                    v101 = v202;
                    v202 = 0;
                    if (v101)
                    {
                      if (*(_DWORD *)v101 == 2)
                        WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v79);
                      else
                        *(_DWORD *)v101 -= 2;
                    }
                    v102 = v200;
                    v200 = 0;
                    if (v102)
                    {
                      if (*(_DWORD *)v102 == 2)
                        WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v79);
                      else
                        *(_DWORD *)v102 -= 2;
                    }
                    v103 = (WTF::StringImpl *)*((_QWORD *)&v198 + 1);
                    *((_QWORD *)&v198 + 1) = 0;
                    if (v103)
                    {
                      if (*(_DWORD *)v103 == 2)
                        WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v79);
                      else
                        *(_DWORD *)v103 -= 2;
                    }
                    v104 = (WTF::StringImpl *)*((_QWORD *)&v197 + 1);
                    *((_QWORD *)&v197 + 1) = 0;
                    if (v104)
                    {
                      if (*(_DWORD *)v104 == 2)
                        WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v79);
                      else
                        *(_DWORD *)v104 -= 2;
                    }
                    v105 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v105)
                    {
                      if (*(_DWORD *)v105 == 2)
                        WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v79);
                      else
                        *(_DWORD *)v105 -= 2;
                    }
                    ++v86;
                  }
                  while (v86 != (uint64_t *)v174);
                }
                v106 = __ldxr(v81);
                if (v106 == 1)
                {
                  if (!__stlxr(0, v81))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v67 = (uint64_t)v191;
        v191 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            v67 = WTF::StringImpl::destroy((WTF::StringImpl *)v67, (WTF::StringImpl *)v79);
          else
            *(_DWORD *)v67 -= 2;
        }
LABEL_195:
        v108 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
        if (*((_QWORD *)this + 177))
          v109 = 0;
        else
          v109 = (*v11 & 0x400) == 0;
        if (v109)
        {
          v110 = WebCore::HTMLMediaElement::setPaused((unsigned __int8 *)this, 1);
          v111 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v111 || (v112 = *(_QWORD *)(v111 + 96)) == 0)
            v112 = WebCore::threadGlobalDataSlow((WebCore *)v110);
          v113 = *(_QWORD *)(v112 + 40);
          if (!v113)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v112);
            v113 = *(_QWORD *)(v112 + 40);
          }
          v114 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v114);
          *(_DWORD *)(v114 + 16) = 1;
          *(_QWORD *)v114 = off_1E33A4B48;
          *(_QWORD *)(v114 + 8) = 0;
          *(_DWORD *)(v114 + 20) = *(_DWORD *)(v114 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v113 + 1424) != 0);
          v116 = *(_DWORD **)(v113 + 1424);
          if (v116)
            *v116 += 2;
          *(_QWORD *)(v114 + 24) = v116;
          *(_QWORD *)(v114 + 32) = 0;
          *(_QWORD *)(v114 + 40) = 0;
          *(_QWORD *)(v114 + 48) = 0;
          *(_QWORD *)(v114 + 56) = v115;
          *(_QWORD *)(v114 + 64) = 0;
          *(_QWORD *)&buf = v114;
          WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&buf);
          v117 = (_DWORD *)buf;
          *(_QWORD *)&buf = 0;
          if (v117)
          {
            if (v117[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v117 + 8))(v117);
            else
              --v117[4];
          }
          v118 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
          if (!v118)
          {
            WebCore::HTMLMediaElement::initializeMediaSession(this);
            v118 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
          }
          v67 = WebCore::MediaElementSession::clientWillPausePlayback(v118);
          v108 = *v11 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
        }
        if ((v108 & 0x20000) != 0)
          goto LABEL_237;
        *(_WORD *)((char *)this + 1269) = WORD2(v108);
        *v11 = v108 | 0x20000;
        v119 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v119 || (v120 = *(_QWORD *)(v119 + 96)) == 0)
          v120 = WebCore::threadGlobalDataSlow((WebCore *)v67);
        v121 = *(_QWORD *)(v120 + 40);
        if (!v121)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v120);
          v121 = *(_QWORD *)(v120 + 40);
        }
        v122 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v122);
        *(_DWORD *)(v122 + 16) = 1;
        *(_QWORD *)v122 = off_1E33A4B48;
        *(_QWORD *)(v122 + 8) = 0;
        *(_DWORD *)(v122 + 20) = *(_DWORD *)(v122 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v121 + 752) != 0);
        v124 = *(_DWORD **)(v121 + 752);
        if (v124)
          *v124 += 2;
        *(_QWORD *)(v122 + 24) = v124;
        *(_QWORD *)(v122 + 32) = 0;
        *(_QWORD *)(v122 + 40) = 0;
        *(_QWORD *)(v122 + 48) = 0;
        *(_QWORD *)(v122 + 56) = v123;
        *(_QWORD *)(v122 + 64) = 0;
        *(_QWORD *)&buf = v122;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)this + 28, (uint64_t)this, 9, (uint64_t)this + 824, (uint64_t *)&buf);
        v125 = (_DWORD *)buf;
        *(_QWORD *)&buf = 0;
        if (v125)
        {
          if (v125[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 8))(v125);
            if ((v12 & 0x800) == 0)
            {
LABEL_225:
              if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1800))(this) & 1) == 0)
              {
                v126 = *((_QWORD *)this + 200);
                if (!v126)
                {
                  WebCore::HTMLMediaElement::initializeMediaSession(this);
                  v126 = *((_QWORD *)this + 200);
                }
                v127 = (WTF::MonotonicTime *)WebCore::MediaElementSession::addBehaviorRestriction(v126, 0x2000);
                if ((*((_QWORD *)this + 63) & 0xFFFFFFFFFFFFLL) != 0)
                  v127 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 472));
                *((_QWORD *)this + 62) = 0;
                WTF::MonotonicTime::now(v127);
                WebCore::TimerBase::setNextFireTime((uint64_t)this + 472, v128 + 6.0);
              }
            }
LABEL_231:
            LODWORD(v176) = 0;
            v129 = *((_QWORD *)this + 228);
            v130 = *((_QWORD *)this + 229);
            *(_QWORD *)&buf = "HTMLMediaElement";
            *((_QWORD *)&buf + 1) = 17;
            *(_QWORD *)&v197 = "setAutoplayEventPlaybackState";
            *((_QWORD *)&v197 + 1) = v130;
            if (*(_BYTE *)(v129 + 12))
            {
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (int *)&v176);
              v132 = (int)v176;
              *((_DWORD *)this + 323) = (_DWORD)v176;
              if (v132 == 1)
              {
                WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v131);
                WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
              }
            }
            else
            {
              *((_DWORD *)this + 323) = 0;
            }
            if (WTF::MediaTime::compare((WTF::MediaTime *)v182, (WebCore::HTMLMediaElement *)((char *)this + 1000)) == 1)WebCore::HTMLMediaElement::addPlayedRange(this, (WebCore::HTMLMediaElement *)((char *)this + 1000), (const WTF::MediaTime *)v182);
LABEL_237:
            v133 = *v11;
            if ((v133 & 2) != 0)
            {
              v134 = v133 & 0xFFFFFFFFFFFFFFFDLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
              *v11 = v133 & 0xFFFFFFFD;
              *(_WORD *)((char *)this + 1269) = WORD2(v134);
              v135 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
              *(_DWORD *)(v135 + 24) += 2;
              WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v135);
              if (*(_DWORD *)(v135 + 24) == 2)
              {
                v141 = *(_WORD *)(v135 + 30);
                if ((v141 & 0x400) == 0)
                {
                  v142 = *(_WORD *)(v135 + 28);
                  if ((v142 & 0xF000) == 0x9000)
                  {
                    WebCore::Document::removedLastRef((WebCore::Document *)v135, v136);
                  }
                  else
                  {
                    if ((v142 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v135 + 160) + 16))(*(_QWORD *)(v135 + 160));
                      v141 = *(_WORD *)(v135 + 30);
                    }
                    *(_WORD *)(v135 + 30) = v141 | 0x400;
                    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 72))(v135);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v135 + 24) -= 2;
              }
              WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())this);
            }
            v137 = (WebCore::MediaController *)*((_QWORD *)this + 177);
            if (v137)
            {
              ++*((_DWORD *)v137 + 2);
              WebCore::MediaController::updateReadyState((uint64_t)v137);
              WebCore::MediaController::updatePlaybackState((uint64_t)v137);
              if (*((_DWORD *)v137 + 2) == 1)
              {
                WebCore::MediaController::~MediaController(v137);
                bmalloc::api::isoDeallocate(v139, v140);
              }
              else
              {
                --*((_DWORD *)v137 + 2);
              }
            }
            goto LABEL_244;
          }
          --v125[4];
        }
        if ((v12 & 0x800) == 0)
          goto LABEL_225;
        goto LABEL_231;
      }
LABEL_340:
      __break(0xC471u);
      JUMPOUT(0x195C2E2D0);
    }
    v27 = *v11 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
LABEL_189:
    v107 = v27 & 0xFFFFFFFFFFFDFFFFLL;
    *v11 = v107;
    *(_WORD *)((char *)this + 1269) = WORD2(v107);
    goto LABEL_244;
  }
LABEL_53:
  v26 = v26;
  while (1)
  {
    v44 = *v25;
    if (*v25 == WebCore::HTMLNames::loopAttr
      || *(_QWORD *)(v44 + 24) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 24)
      && *(_QWORD *)(v44 + 32) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 32))
    {
      break;
    }
    v25 += 2;
    if (!--v26)
      goto LABEL_97;
  }
  if (*((_QWORD *)this + 177) || v21 <= 0.0)
    goto LABEL_97;
  v45 = *v11;
  v46 = v45 & 0xFFFFFFFFFFFDFFFFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  *v11 = v45 & 0xFFFDFFFF;
  *(_WORD *)((char *)this + 1269) = WORD2(v46);
  if ((WTF::MediaTime::compare((WTF::MediaTime *)v182, (const WTF::MediaTime *)&v180) & 0x80000000) != 0)
    goto LABEL_244;
  *(_QWORD *)&buf = WTF::MediaTime::operator+();
  *((_QWORD *)&buf + 1) = v47;
  v48 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)buf);
  v49 = (WTF::StringImpl *)WTF::MediaTime::compare((WTF::MediaTime *)&buf, v48);
  if ((_DWORD)v49 != 1)
    goto LABEL_244;
  v50 = *((_QWORD *)this + 228);
  v51 = *((_QWORD *)this + 229);
  v176 = "HTMLMediaElement";
  v177 = 17;
  v178 = "mediaPlayerTimeChanged";
  v179 = v51;
  if (*(_BYTE *)(v50 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v176);
    WTF::String::String((WTF::String *)&v189, "current time (");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)v182);
    WTF::String::String((WTF::String *)&v187, ") is greater then duration (");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v180);
    WTF::String::String((WTF::String *)&v185, "), looping");
    v183 = v189;
    v195 = v188;
    *(_QWORD *)&buf = v190;
    v193 = v186;
    v194 = v187;
    v192 = v185;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v183, (uint64_t *)&v195, (uint64_t *)&v194, (uint64_t *)&v193, (uint64_t *)&v192, &v191);
    if (!v191)
      goto LABEL_340;
    v53 = v185;
    v185 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v52);
      else
        *(_DWORD *)v53 -= 2;
    }
    v54 = v186;
    v186 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v52);
      else
        *(_DWORD *)v54 -= 2;
    }
    v55 = v187;
    v187 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v52);
      else
        *(_DWORD *)v55 -= 2;
    }
    v56 = v188;
    v188 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v52);
      else
        *(_DWORD *)v56 -= 2;
    }
    v57 = v189;
    v189 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v52);
      else
        *(_DWORD *)v57 -= 2;
    }
    v58 = v190;
    v190 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v52);
      else
        *(_DWORD *)v58 -= 2;
    }
    v59 = qword_1ECE7C4A0;
    v60 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v60)
    {
      WTF::String::utf8();
      v62 = v183 ? (char *)v183 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v62;
      _os_log_impl(&dword_1940B8000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v60 = (uint64_t)v183;
      v183 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1)
          v60 = WTF::fastFree((WTF *)v60, v61);
        else
          --*(_DWORD *)v60;
      }
    }
    if (WebCore::LogMedia)
    {
      v63 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v64 = *v63;
        if ((v64 & 1) != 0)
          break;
        v65 = __ldaxr(v63);
        if (v65 == v64)
        {
          if (!__stxr(v64 | 1, v63))
          {
            v143 = WTF::Logger::observers((WTF::Logger *)v60);
            v144 = *(unsigned int *)(v143 + 12);
            if ((_DWORD)v144)
            {
              v145 = *(uint64_t **)v143;
              v175 = *(_QWORD *)v143 + 8 * v144;
              do
              {
                v146 = *v145;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v176);
                LODWORD(v197) = 0;
                WTF::String::String((WTF::String *)((char *)&v197 + 8), "current time (");
                LODWORD(v198) = 1;
                WTF::MediaTime::toJSONString((WTF::MediaTime *)v182);
                v199 = 0;
                WTF::String::String((WTF::String *)&v200, ") is greater then duration (");
                v201 = 1;
                WTF::MediaTime::toJSONString((WTF::MediaTime *)&v180);
                v203 = 0;
                WTF::String::String((WTF::String *)v204, "), looping");
                v183 = 0;
                v184 = 0;
                v147 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                LODWORD(v184) = 6;
                v183 = v147;
                v148 = HIDWORD(v184);
                *((_DWORD *)v147 + 4 * HIDWORD(v184)) = buf;
                v149 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v147 + 2 * v148 + 1) = v149;
                *((_DWORD *)v147 + 4 * (v148 + 1)) = v197;
                v150 = *((_QWORD *)&v197 + 1);
                if (*((_QWORD *)&v197 + 1))
                  **((_DWORD **)&v197 + 1) += 2;
                *((_QWORD *)v147 + 2 * (v148 + 1) + 1) = v150;
                *((_DWORD *)v147 + 4 * (v148 + 2)) = v198;
                v151 = *((_QWORD *)&v198 + 1);
                if (*((_QWORD *)&v198 + 1))
                  **((_DWORD **)&v198 + 1) += 2;
                *((_QWORD *)v147 + 2 * (v148 + 2) + 1) = v151;
                *((_DWORD *)v147 + 4 * (v148 + 3)) = v199;
                v152 = v200;
                if (v200)
                  *(_DWORD *)v200 += 2;
                *((_QWORD *)v147 + 2 * (v148 + 3) + 1) = v152;
                *((_DWORD *)v147 + 4 * (v148 + 4)) = v201;
                v153 = v202;
                if (v202)
                  *(_DWORD *)v202 += 2;
                *((_QWORD *)v147 + 2 * (v148 + 4) + 1) = v153;
                *((_DWORD *)v147 + 4 * (v148 + 5)) = v203;
                v154 = v204[0];
                if (v204[0])
                  *(_DWORD *)v204[0] += 2;
                *((_QWORD *)v147 + 2 * (v148 + 5) + 1) = v154;
                HIDWORD(v184) = v148 + 6;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v146 + 16))(v146, &WebCore::LogMedia, 0, &v183);
                v155 = v183;
                if (HIDWORD(v184))
                {
                  v156 = 16 * HIDWORD(v184);
                  v157 = (WTF::StringImpl **)((char *)v183 + 8);
                  do
                  {
                    v158 = *v157;
                    *v157 = 0;
                    if (v158)
                    {
                      if (*(_DWORD *)v158 == 2)
                        WTF::StringImpl::destroy(v158, (WTF::StringImpl *)v61);
                      else
                        *(_DWORD *)v158 -= 2;
                    }
                    v157 += 2;
                    v156 -= 16;
                  }
                  while (v156);
                  v155 = v183;
                }
                if (v155)
                {
                  v183 = 0;
                  LODWORD(v184) = 0;
                  WTF::fastFree(v155, v61);
                }
                v159 = v204[0];
                v204[0] = 0;
                if (v159)
                {
                  if (*(_DWORD *)v159 == 2)
                    WTF::StringImpl::destroy(v159, (WTF::StringImpl *)v61);
                  else
                    *(_DWORD *)v159 -= 2;
                }
                v160 = v202;
                v202 = 0;
                if (v160)
                {
                  if (*(_DWORD *)v160 == 2)
                    WTF::StringImpl::destroy(v160, (WTF::StringImpl *)v61);
                  else
                    *(_DWORD *)v160 -= 2;
                }
                v161 = v200;
                v200 = 0;
                if (v161)
                {
                  if (*(_DWORD *)v161 == 2)
                    WTF::StringImpl::destroy(v161, (WTF::StringImpl *)v61);
                  else
                    *(_DWORD *)v161 -= 2;
                }
                v162 = (WTF::StringImpl *)*((_QWORD *)&v198 + 1);
                *((_QWORD *)&v198 + 1) = 0;
                if (v162)
                {
                  if (*(_DWORD *)v162 == 2)
                    WTF::StringImpl::destroy(v162, (WTF::StringImpl *)v61);
                  else
                    *(_DWORD *)v162 -= 2;
                }
                v163 = (WTF::StringImpl *)*((_QWORD *)&v197 + 1);
                *((_QWORD *)&v197 + 1) = 0;
                if (v163)
                {
                  if (*(_DWORD *)v163 == 2)
                    WTF::StringImpl::destroy(v163, (WTF::StringImpl *)v61);
                  else
                    *(_DWORD *)v163 -= 2;
                }
                v164 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v164)
                {
                  if (*(_DWORD *)v164 == 2)
                    WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v61);
                  else
                    *(_DWORD *)v164 -= 2;
                }
                ++v145;
              }
              while (v145 != (uint64_t *)v175);
            }
            v165 = __ldxr(v63);
            if (v165 == 1)
            {
              if (!__stlxr(0, v63))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v49 = v191;
    v191 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        v49 = (WTF::StringImpl *)WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v61);
      else
        *(_DWORD *)v49 -= 2;
    }
  }
  v168 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v49);
  v169 = v168;
  v170 = *((_QWORD *)this + 228);
  v171 = *((_QWORD *)this + 229);
  *(_QWORD *)&buf = "HTMLMediaElement";
  *((_QWORD *)&buf + 1) = 17;
  *(_QWORD *)&v197 = "seekInternal";
  *((_QWORD *)&v197 + 1) = v171;
  if (*(_BYTE *)(v170 + 12))
    v168 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v168);
  v172 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v168);
  v173 = (__int128 *)WTF::MediaTime::zeroTime(v172);
  buf = *(_OWORD *)v169;
  v197 = *(_OWORD *)v172;
  v198 = *v173;
  WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)this, (const WebCore::SeekTarget *)&buf, 0);
LABEL_244:
  result = WebCore::HTMLMediaElement::scheduleUpdatePlayState((uint64_t (**)())this);
  --*((_DWORD *)this + 287);
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::scheduleUpdatePlayState(uint64_t (**this)()))()
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t (*v4)();
  BOOL v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t (**v9)();
  __int128 v10;
  __int128 v11;

  v1 = (uint64_t)this;
  v2 = *(unsigned int **)this[89];
  if (!v2 || (v3 = atomic_load(v2), v3 == 1))
  {
    v4 = this[229];
    *(_QWORD *)&v10 = "HTMLMediaElement";
    *((_QWORD *)&v10 + 1) = 17;
    *(_QWORD *)&v11 = "scheduleUpdatePlayState";
    *((_QWORD *)&v11 + 1) = v4;
    if (*((_BYTE *)this[228] + 12))
    {
      if (WebCore::LogMedia)
        v5 = byte_1ECE7C490 >= 3u;
      else
        v5 = 0;
      if (v5)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v10, "task scheduled");
    }
    v7 = v10;
    v8 = v11;
    v6 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v6 = off_1E33C5C38;
    *(_QWORD *)(v6 + 8) = v1;
    *(_OWORD *)(v6 + 16) = v7;
    *(_OWORD *)(v6 + 32) = v8;
    v9 = (uint64_t (**)())v6;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 704, &v9);
    this = v9;
    v9 = 0;
    if (this)
      return (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerTimeChanged(WebCore::HTMLMediaElement *this))()
{
  return WebCore::HTMLMediaElement::mediaPlayerTimeChanged((WebCore::HTMLMediaElement *)((char *)this - 176));
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerVolumeChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  double v6;
  WebCore *updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 1824);
  v3 = *(_QWORD *)(this + 1832);
  v14[0] = (uint64_t)"HTMLMediaElement";
  v14[1] = 17;
  v14[2] = (uint64_t)"mediaPlayerVolumeChanged";
  v14[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  v4 = *(_DWORD *)(v1 + 1148);
  *(_DWORD *)(v1 + 1148) = v4 + 1;
  v5 = *(_QWORD *)(v1 + 1136);
  if (v5)
  {
    v6 = *(double *)(v5 + 216);
    if (v6 != *(double *)(v1 + 984))
    {
      *(double *)(v1 + 984) = v6;
      updated = (WebCore *)WebCore::HTMLMediaElement::updateVolume(v1);
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
        v9 = WebCore::threadGlobalDataSlow(updated);
      v10 = *(_QWORD *)(v9 + 40);
      if (!v10)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
        v10 = *(_QWORD *)(v9 + 40);
      }
      v11 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      *(_DWORD *)(v11 + 16) = 1;
      *(_QWORD *)v11 = off_1E33A4B48;
      *(_QWORD *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v10 + 2264) != 0);
      v13 = *(_DWORD **)(v10 + 2264);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v11 + 24) = v13;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = v12;
      *(_QWORD *)(v11 + 64) = 0;
      v14[0] = v11;
      WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v1 + 112), v1, 9, v1 + 824, v14);
      this = v14[0];
      v14[0] = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 16) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 16);
      }
      v4 = *(_DWORD *)(v1 + 1148) - 1;
    }
  }
  *(_DWORD *)(v1 + 1148) = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerVolumeChanged(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaPlayerVolumeChanged((uint64_t)this - 176);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerMuteChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v6[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 1824);
  v3 = *(_QWORD *)(this + 1832);
  v6[0] = "HTMLMediaElement";
  v6[1] = 17;
  v6[2] = "mediaPlayerMuteChanged";
  v6[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  v4 = *(_DWORD *)(v1 + 1148);
  *(_DWORD *)(v1 + 1148) = v4 + 1;
  v5 = *(_QWORD *)(v1 + 1136);
  if (v5)
  {
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 1480))(v1, *(unsigned __int8 *)(v5 + 227));
    v4 = *(_DWORD *)(v1 + 1148) - 1;
  }
  *(_DWORD *)(v1 + 1148) = v4;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerMuteChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v6[4];

  v1 = this;
  v2 = *(_QWORD *)(this + 1648);
  v3 = *(_QWORD *)(this + 1656);
  v6[0] = "HTMLMediaElement";
  v6[1] = 17;
  v6[2] = "mediaPlayerMuteChanged";
  v6[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  v4 = *(_DWORD *)(v1 + 972);
  *(_DWORD *)(v1 + 972) = v4 + 1;
  v5 = *(_QWORD *)(v1 + 960);
  if (v5)
  {
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 176) + 1480))(v1 - 176, *(unsigned __int8 *)(v5 + 227));
    v4 = *(_DWORD *)(v1 + 972) - 1;
  }
  *(_DWORD *)(v1 + 972) = v4;
  return this;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerSeeked(WebCore::HTMLMediaElement *this, const WTF::MediaTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[4];

  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v6[0] = "HTMLMediaElement";
  v6[1] = 17;
  v6[2] = "mediaPlayerSeeked";
  v6[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  result = *((_QWORD *)this + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WTF::MediaTime *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerSeeked(WebCore::HTMLMediaElement *this, const WTF::MediaTime *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[4];

  v3 = *((_QWORD *)this + 206);
  v4 = *((_QWORD *)this + 207);
  v6[0] = "HTMLMediaElement";
  v6[1] = 17;
  v6[2] = "mediaPlayerSeeked";
  v6[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  result = *((_QWORD *)this + 122);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WTF::MediaTime *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

WTF::MediaTime *WebCore::HTMLMediaElement::mediaPlayerDurationChanged(WebCore::HTMLMediaElement *this)
{
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::MediaTime *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::MediaTime *v51;
  __int128 *v52;
  uint64_t v53;
  _QWORD v54[4];
  __int128 v55;
  _QWORD v56[2];
  WTF::Logger *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  __int128 buf;
  __int128 v69;
  __int128 v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)this + 287);
  WebCore::HTMLMediaElement::durationChanged(this);
  WebCore::HTMLMediaElement::mediaPlayerCharacteristicChanged(this, v2, v3);
  v56[0] = WebCore::HTMLMediaElement::currentMediaTime(this);
  v56[1] = v4;
  v5 = *((_QWORD *)this + 144);
  if (v5)
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 40);
LABEL_3:
    v7 = v6();
    goto LABEL_8;
  }
  v9 = *((_QWORD *)this + 142);
  if (v9 && *((int *)this + 226) >= 1)
  {
    v6 = *(uint64_t (**)(void))(**(_QWORD **)(v9 + 72) + 336);
    goto LABEL_3;
  }
  v10 = (uint64_t *)WTF::MediaTime::invalidTime(0);
  v7 = *v10;
  v8 = v10[1];
LABEL_8:
  *(_QWORD *)&v55 = v7;
  *((_QWORD *)&v55 + 1) = v8;
  v11 = *((_QWORD *)this + 228);
  v12 = *((_QWORD *)this + 229);
  v54[0] = "HTMLMediaElement";
  v54[1] = 17;
  v54[2] = "mediaPlayerDurationChanged";
  v54[3] = v12;
  if (*(_BYTE *)(v11 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v54);
    WTF::String::String((WTF::String *)&v62, "duration = ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v55);
    WTF::String::String((WTF::String *)&v60, ", current time = ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)v56);
    v57 = v62;
    v67 = v61;
    *(_QWORD *)&buf = v63;
    v65 = v59;
    v66 = v60;
    result = (WTF::MediaTime *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v57, (uint64_t *)&v67, (uint64_t *)&v66, (uint64_t *)&v65, &v64);
    if (!v64)
    {
      __break(0xC471u);
      return result;
    }
    v15 = v59;
    v59 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v60;
    v60 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v61;
    v61 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v62;
    v62 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v14);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v63;
    v63 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = qword_1ECE7C4A0;
    v21 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v23 = v57 ? (char *)v57 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v21 = (uint64_t)v57;
      v57 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = WTF::fastFree((WTF *)v21, v22);
        else
          --*(_DWORD *)v21;
      }
    }
    if (WebCore::LogMedia)
    {
      v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v25 = *v24;
        if ((v25 & 1) != 0)
          break;
        v26 = __ldaxr(v24);
        if (v26 == v25)
        {
          if (!__stxr(v25 | 1, v24))
          {
            v27 = WTF::Logger::observers((WTF::Logger *)v21);
            v28 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v28)
            {
              v29 = *(uint64_t **)v27;
              v53 = *(_QWORD *)v27 + 8 * v28;
              do
              {
                v30 = *v29;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v54);
                LODWORD(v69) = 0;
                WTF::String::String((WTF::String *)((char *)&v69 + 8), "duration = ");
                LODWORD(v70) = 1;
                WTF::MediaTime::toJSONString((WTF::MediaTime *)&v55);
                v71 = 0;
                WTF::String::String((WTF::String *)&v72, ", current time = ");
                v73 = 1;
                WTF::MediaTime::toJSONString((WTF::MediaTime *)v56);
                v57 = 0;
                v58 = 0;
                v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v58) = 5;
                v57 = v31;
                v32 = HIDWORD(v58);
                *((_DWORD *)v31 + 4 * HIDWORD(v58)) = buf;
                v33 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                *((_DWORD *)v31 + 4 * (v32 + 1)) = v69;
                v34 = *((_QWORD *)&v69 + 1);
                if (*((_QWORD *)&v69 + 1))
                  **((_DWORD **)&v69 + 1) += 2;
                *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                *((_DWORD *)v31 + 4 * (v32 + 2)) = v70;
                v35 = *((_QWORD *)&v70 + 1);
                if (*((_QWORD *)&v70 + 1))
                  **((_DWORD **)&v70 + 1) += 2;
                *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                *((_DWORD *)v31 + 4 * (v32 + 3)) = v71;
                v36 = v72;
                if (v72)
                  *(_DWORD *)v72 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                *((_DWORD *)v31 + 4 * (v32 + 4)) = v73;
                v37 = v74;
                if (v74)
                  *(_DWORD *)v74 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                HIDWORD(v58) = v32 + 5;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, &WebCore::LogMedia, 0, &v57);
                v38 = v57;
                if (HIDWORD(v58))
                {
                  v39 = 16 * HIDWORD(v58);
                  v40 = (WTF::StringImpl **)((char *)v57 + 8);
                  do
                  {
                    v41 = *v40;
                    *v40 = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                    v40 += 2;
                    v39 -= 16;
                  }
                  while (v39);
                  v38 = v57;
                }
                if (v38)
                {
                  v57 = 0;
                  LODWORD(v58) = 0;
                  WTF::fastFree(v38, v22);
                }
                v42 = v74;
                v74 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v72;
                v72 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = (WTF::StringImpl *)*((_QWORD *)&v70 + 1);
                *((_QWORD *)&v70 + 1) = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = (WTF::StringImpl *)*((_QWORD *)&v69 + 1);
                *((_QWORD *)&v69 + 1) = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                ++v29;
              }
              while (v29 != (uint64_t *)v53);
            }
            v47 = __ldxr(v24);
            if (v47 == 1)
            {
              if (!__stlxr(0, v24))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v48 = v64;
    v64 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  result = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)v56, (const WTF::MediaTime *)&v55);
  if ((_DWORD)result == 1)
  {
    v49 = *((_QWORD *)this + 228);
    v50 = *((_QWORD *)this + 229);
    *(_QWORD *)&buf = "HTMLMediaElement";
    *((_QWORD *)&buf + 1) = 17;
    *(_QWORD *)&v69 = "seekInternal";
    *((_QWORD *)&v69 + 1) = v50;
    if (*(_BYTE *)(v49 + 12))
      result = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, (WTF::MediaTime *)&v55);
    v51 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(result);
    v52 = (__int128 *)WTF::MediaTime::zeroTime(v51);
    buf = v55;
    v69 = *(_OWORD *)v51;
    v70 = *v52;
    result = (WTF::MediaTime *)WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)this, (const WebCore::SeekTarget *)&buf, 0);
  }
  --*((_DWORD *)this + 287);
  return result;
}

unsigned __int8 *WebCore::HTMLMediaElement::mediaPlayerCharacteristicChanged(WebCore::HTMLMediaElement *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::HTMLMediaElement **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Page *v12;
  uint64_t v13;
  WebCore::PageGroup *v14;
  WebCore::CaptionUserPreferencesMediaAF *v15;
  WebCore::CaptionUserPreferencesMediaAF *v16;
  _DWORD *v17;
  __int16 v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  WebCore::HTMLMediaElement **v27;
  uint64_t v28;
  int v29;
  WebCore::HTMLMediaElement *v30;
  uint64_t v31;
  WebCore::HTMLMediaElement *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  WTF::MonotonicTime *v41;
  double v42;
  double v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void *v51;
  int v52;
  unsigned int *v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  WebCore::PlatformMediaSession *v59;
  unsigned __int8 *result;
  __int16 v61;
  __int16 v62;
  WebCore::Page *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;

  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v66 = (WTF::StringImpl *)"HTMLMediaElement";
  v67 = 17;
  v68 = "mediaPlayerCharacteristicChanged";
  v69 = v5;
  v6 = (WebCore::HTMLMediaElement **)*((_QWORD *)this + 200);
  if (v6)
  {
    WebCore::MediaElementSession::description(v6, &v65);
  }
  else
  {
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v7 += 2;
    v65 = v7;
  }
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::String>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v66, (uint64_t *)&v65);
  v8 = v65;
  v65 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  ++*((_DWORD *)this + 287);
  if (*((_BYTE *)this + 1337))
  {
    if (*((_BYTE *)this + 1336))
      goto LABEL_50;
LABEL_27:
    v19 = *(_QWORD *)(*((_QWORD *)this + 142) + 72);
    if (v19)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v19 + 1024))(&v66);
      v20 = v66;
    }
    else
    {
      v20 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v20 += 2;
      v66 = v20;
    }
    if (*((_BYTE *)this + 1312))
    {
      if ((WTF::equal(*((WTF **)this + 163), v20, a3) & 1) != 0)
      {
LABEL_47:
        v23 = v66;
        v66 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, a2);
          else
            *(_DWORD *)v23 -= 2;
        }
        goto LABEL_50;
      }
      v20 = v66;
    }
    if ((WTF::equal(*((WTF **)this + 162), v20, a3) & 1) == 0)
    {
      v21 = v66;
      if (*((_BYTE *)this + 1312))
      {
        if (v66)
          *(_DWORD *)v66 += 2;
        v22 = (WTF::StringImpl *)*((_QWORD *)this + 163);
        *((_QWORD *)this + 163) = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, a2);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      else
      {
        if (v66)
          *(_DWORD *)v66 += 2;
        *((_QWORD *)this + 163) = v21;
        *((_BYTE *)this + 1312) = 1;
      }
      WebCore::HTMLMediaElement::markCaptionAndSubtitleTracksAsUnconfigured((unsigned int *)this, (void *)1);
    }
    goto LABEL_47;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v9
    && (v10 = *(_QWORD *)(v9 + 8)) != 0
    && (v11 = *(_QWORD *)(v10 + 24)) != 0
    && (v12 = *(WebCore::Page **)(v11 + 8)) != 0)
  {
    v13 = *((_QWORD *)v12 + 66);
    if (!v13 || (v14 = *(WebCore::PageGroup **)(v13 + 8)) == 0)
    {
      v63 = v12;
      WebCore::Page::initGroup(v12);
      v64 = *((_QWORD *)v63 + 66);
      if (v64)
        v14 = *(WebCore::PageGroup **)(v64 + 8);
      else
        v14 = 0;
    }
    v15 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v14 + 5);
    if (!v15)
    {
      v16 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      v15 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v16, v14);
      v17 = (_DWORD *)*((_QWORD *)v14 + 5);
      *((_QWORD *)v14 + 5) = v15;
      if (v17)
      {
        if (v17[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          v15 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v14 + 5);
        }
        else
        {
          --v17[2];
        }
      }
    }
    v18 = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v15 + 16))(v15) | 0x100;
  }
  else
  {
    v18 = 256;
  }
  *((_WORD *)this + 668) = v18;
  if (!(_BYTE)v18)
    goto LABEL_27;
LABEL_50:
  v24 = *((_QWORD *)this + 177);
  if (!v24)
  {
LABEL_75:
    if (WebCore::HTMLMediaElement::couldPlayIfEnoughData(this)
      && (*((int *)this + 226) > 2 || *((int *)this + 227) >= 3))
    {
      (*(void (**)(char *))(*((_QWORD *)this + 22) + 144))((char *)this + 176);
    }
    goto LABEL_79;
  }
  if (*(_BYTE *)(v24 + 72))
    goto LABEL_79;
  v25 = *(unsigned int *)(v24 + 68);
  v26 = 0.0;
  if (!(_DWORD)v25)
  {
LABEL_74:
    if (v26 > (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1376))(this))
      goto LABEL_79;
    goto LABEL_75;
  }
  v27 = *(WebCore::HTMLMediaElement ***)(v24 + 56);
  v28 = 8 * v25;
  v29 = 1;
  while (1)
  {
    v30 = *v27;
    if (*((int *)*v27 + 226) < 3)
      break;
    v31 = *((_QWORD *)v30 + 200);
    if (!v31)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(*v27);
      v31 = *((_QWORD *)v30 + 200);
    }
    if (*(_BYTE *)(v31 + 48) == 4)
      break;
    v32 = *v27;
    if ((*(_DWORD *)((_BYTE *)*v27 + 1265) & 0x40) != 0)
    {
      if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v32 + 1384))(v32) & 1) != 0)
        break;
      v32 = *v27;
    }
    v29 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v32 + 1384))(v32);
    ++v27;
    v28 -= 8;
    if (!v28)
    {
      if ((v29 & 1) != 0)
        break;
      v33 = *((_QWORD *)this + 177);
      v34 = *(unsigned int *)(v33 + 68);
      if ((_DWORD)v34)
      {
        v26 = *(double *)(v33 + 96);
        if (v26 == -1.0)
        {
          v35 = *(uint64_t **)(v33 + 56);
          v36 = 8 * v34;
          v37 = 0.0;
          do
          {
            v38 = *v35++;
            v39 = (*(double (**)(uint64_t))(*(_QWORD *)v38 + 1376))(v38);
            if (v37 >= v39)
              v40 = v37;
            else
              v40 = v39;
            v37 = v40;
            v36 -= 8;
          }
          while (v36);
          v42 = (*(double (**)(_QWORD))(**(_QWORD **)(v33 + 256) + 24))(*(_QWORD *)(v33 + 256));
          if (v42 >= v37)
            v42 = v37;
          *(double *)(v33 + 96) = fmax(v42, 0.0);
          *(_QWORD *)(v33 + 216) = 0;
          WTF::MonotonicTime::now(v41);
          WebCore::TimerBase::setNextFireTime(v33 + 192, v43 + 0.0);
          v26 = *(double *)(v33 + 96);
        }
        if (v26 < 0.0)
          break;
      }
      goto LABEL_74;
    }
  }
LABEL_79:
  WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)this, a2);
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) == 0)
  {
    v44 = *((_QWORD *)this + 200);
    if (!v44)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v44 = *((_QWORD *)this + 200);
    }
    WebCore::MediaElementSession::playbackStateChangePermitted(v44, 0, (uint64_t)&v66);
    if (BYTE4(v66))
    {
      WebCore::DOMException::create(0x1Fu, MEMORY[0x1E0CBF738], (uint64_t *)&v66);
      WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises((uint64_t)this, (uint64_t *)&v66);
      v45 = v66;
      v66 = 0;
      if (v45)
      {
        if (*((_DWORD *)v45 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v45 + 8))(v45);
        else
          --*((_DWORD *)v45 + 2);
      }
      WebCore::HTMLMediaElement::pauseInternal(this);
      LODWORD(v65) = 1;
      v47 = *((_QWORD *)this + 228);
      v48 = *((_QWORD *)this + 229);
      v66 = (WTF::StringImpl *)"HTMLMediaElement";
      v67 = 17;
      v68 = "setAutoplayEventPlaybackState";
      v69 = v48;
      if (*(_BYTE *)(v47 + 12))
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v66, (int *)&v65);
        v49 = (int)v65;
        *((_DWORD *)this + 323) = (_DWORD)v65;
        if (v49 != 1)
          goto LABEL_91;
      }
      else
      {
        *((_DWORD *)this + 323) = 1;
      }
      WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v46);
      WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
    }
  }
LABEL_91:
  v50 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v50 + 24) += 2;
  WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v50);
  if (*(_DWORD *)(v50 + 24) == 2)
  {
    v61 = *(_WORD *)(v50 + 30);
    if ((v61 & 0x400) == 0)
    {
      v62 = *(_WORD *)(v50 + 28);
      if ((v62 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v50, v51);
      }
      else
      {
        if ((v62 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v50 + 160) + 16))(*(_QWORD *)(v50 + 160));
          v61 = *(_WORD *)(v50 + 30);
        }
        *(_WORD *)(v50 + 30) = v61 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 72))(v50);
      }
    }
  }
  else
  {
    *(_DWORD *)(v50 + 24) -= 2;
  }
  v52 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
  v53 = (unsigned int *)((char *)this + 1265);
  v54 = *(_DWORD *)((_BYTE *)this + 1265) & 0x8000000;
  if (v52)
    v54 = 0x8000000;
  v55 = v54 | *(_DWORD *)((_BYTE *)this + 1265) & 0xF7FFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v53 = v55;
  v56 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1272))(this);
  v57 = *v53 & 0x10000000;
  if (v56)
    v57 = 0x10000000;
  v58 = v57 | *v53 & 0xEFFFFFFF;
  *(_WORD *)((char *)this + 1269) = *(_WORD *)((char *)this + 1269);
  *v53 = v58;
  v59 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  if (!v59)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v59 = (WebCore::PlatformMediaSession *)*((_QWORD *)this + 200);
  }
  WebCore::PlatformMediaSession::canProduceAudioChanged(v59);
  result = WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
  --*((_DWORD *)this + 287);
  return result;
}

WTF::MediaTime *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDurationChanged(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaPlayerDurationChanged((WebCore::HTMLMediaElement *)((char *)this - 176));
}

unsigned __int8 *WebCore::HTMLMediaElement::mediaPlayerRateChanged(WebCore::HTMLMediaElement *this)
{
  WTF::MediaTime *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::MonotonicTime *v8;
  double v9;
  unsigned __int8 *result;
  _QWORD v11[4];

  ++*((_DWORD *)this + 287);
  *((double *)this + 110) = (*(double (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 456))(*(_QWORD *)(*((_QWORD *)this + 142) + 72));
  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v11[0] = "HTMLMediaElement";
  v11[1] = 17;
  v11[2] = "mediaPlayerRateChanged";
  v11[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    v2 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],double>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, "rate: ", (double *)this + 110);
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 2) != 0)
  {
    v5 = (_QWORD *)WTF::MediaTime::invalidTime(v2);
    v6 = *(_QWORD *)((char *)v5 + 5);
    *((_QWORD *)this + 148) = *v5;
    *(_QWORD *)((char *)this + 1189) = v6;
    v7 = *((_QWORD *)this + 142);
    if (v7)
    {
      if ((*(double (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 848))(*(_QWORD *)(v7 + 72)) != 0.0)
      {
        WTF::MonotonicTime::now(v8);
        *((double *)this + 151) = v9 + 0.5;
      }
    }
  }
  result = WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
  --*((_DWORD *)this + 287);
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerRateChanged(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaPlayerRateChanged((WebCore::HTMLMediaElement *)((char *)this - 176));
}

void WebCore::HTMLMediaElement::mediaPlayerPlaybackStateChanged(WebCore::HTMLMediaElement *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  WebCore::HTMLMediaElement **v6;
  uint64_t v7;
  int v8;
  WebCore::HTMLMediaElement *v9;
  uint64_t v10;
  WebCore::HTMLMediaElement *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  WTF::MonotonicTime *v20;
  double v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  unsigned __int8 v27;
  unsigned __int8 v28;

  if (!*((_QWORD *)this + 142) || (*(_DWORD *)((_BYTE *)this + 1265) & 0x40000) != 0)
    return;
  WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 142) + 72) + 480))(*(_QWORD *)(*((_QWORD *)this + 142) + 72));
  v28 = v2;
  v3 = *((_QWORD *)this + 177);
  if (!v3)
    goto LABEL_43;
  if (!*(_BYTE *)(v3 + 72))
  {
    v4 = *(unsigned int *)(v3 + 68);
    v5 = 0.0;
    if ((_DWORD)v4)
    {
      v6 = *(WebCore::HTMLMediaElement ***)(v3 + 56);
      v7 = 8 * v4;
      v8 = 1;
      while (1)
      {
        v9 = *v6;
        if (*((int *)*v6 + 226) < 3)
          goto LABEL_31;
        v10 = *((_QWORD *)v9 + 200);
        if (!v10)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(*v6);
          v10 = *((_QWORD *)v9 + 200);
        }
        if (*(_BYTE *)(v10 + 48) == 4)
          goto LABEL_31;
        v11 = *v6;
        if ((*(_DWORD *)((_BYTE *)*v6 + 1265) & 0x40) != 0)
        {
          if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v11 + 1384))(v11) & 1) != 0)
            goto LABEL_31;
          v11 = *v6;
        }
        v8 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v11 + 1384))(v11);
        ++v6;
        v7 -= 8;
        if (!v7)
        {
          if ((v8 & 1) != 0)
            goto LABEL_31;
          v12 = *((_QWORD *)this + 177);
          v13 = *(unsigned int *)(v12 + 68);
          if ((_DWORD)v13)
          {
            v5 = *(double *)(v12 + 96);
            if (v5 == -1.0)
            {
              v14 = *(uint64_t **)(v12 + 56);
              v15 = 8 * v13;
              v16 = 0.0;
              do
              {
                v17 = *v14++;
                v18 = (*(double (**)(uint64_t))(*(_QWORD *)v17 + 1376))(v17);
                if (v16 >= v18)
                  v19 = v16;
                else
                  v19 = v18;
                v16 = v19;
                v15 -= 8;
              }
              while (v15);
              v21 = (*(double (**)(_QWORD))(**(_QWORD **)(v12 + 256) + 24))(*(_QWORD *)(v12 + 256));
              if (v21 >= v16)
                v21 = v16;
              *(double *)(v12 + 96) = fmax(v21, 0.0);
              *(_QWORD *)(v12 + 216) = 0;
              WTF::MonotonicTime::now(v20);
              WebCore::TimerBase::setNextFireTime(v12 + 192, v22 + 0.0);
              v5 = *(double *)(v12 + 96);
            }
            if (v5 < 0.0)
              goto LABEL_31;
          }
          break;
        }
      }
    }
    if (v5 <= (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1376))(this))
    {
LABEL_43:
      if (WebCore::HTMLMediaElement::couldPlayIfEnoughData(this))
      {
        v23 = *((int *)this + 226) <= 2 && *((_DWORD *)this + 227) < 3;
        goto LABEL_32;
      }
    }
  }
LABEL_31:
  v23 = 1;
LABEL_32:
  v27 = v23;
  v24 = *((_QWORD *)this + 228);
  v25 = *((_QWORD *)this + 229);
  v26[0] = "HTMLMediaElement";
  v26[1] = 17;
  v26[2] = "mediaPlayerPlaybackStateChanged";
  v26[3] = v25;
  if (*(_BYTE *)(v24 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [15],BOOL,char [19],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v26, "playerPaused: ", (uint64_t)&v28, ", shouldBePaused: ");
    v2 = v28;
    v23 = v27;
  }
  if (v2 != v23)
  {
    ++*((_DWORD *)this + 287);
    if (v2)
      WebCore::HTMLMediaElement::pauseInternal(this);
    else
      WebCore::HTMLMediaElement::playInternal((uint64_t)this);
    --*((_DWORD *)this + 287);
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerPlaybackStateChanged(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::mediaPlayerPlaybackStateChanged((WebCore::HTMLMediaElement *)((char *)this - 176));
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerResourceNotSupported(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v5[0] = "HTMLMediaElement";
  v5[1] = 17;
  v5[2] = "mediaPlayerResourceNotSupported";
  v5[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  return WebCore::HTMLMediaElement::mediaLoadingFailed(this, (void *)4);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerResourceNotSupported(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 206);
  v3 = *((_QWORD *)this + 207);
  v5[0] = "HTMLMediaElement";
  v5[1] = 17;
  v5[2] = "mediaPlayerResourceNotSupported";
  v5[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  return WebCore::HTMLMediaElement::mediaLoadingFailed((WebCore::HTMLMediaElement *)((char *)this - 176), (void *)4);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerRepaint(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v5;
  _BYTE v6[20];
  __int128 v7;
  char v8;

  v1 = this;
  v2 = *(_DWORD *)(this + 1148);
  *(_DWORD *)(this + 1148) = v2 + 1;
  v3 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
        || (*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C2FAC0);
      }
      v5 = *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
      *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v5;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v7) = 0;
        v8 = 0;
        v6[0] = 0;
        v6[16] = 0;
        this = WebCore::RenderObject::issueRepaint(v3, &v7, 0, 0, (uint64_t)v6);
        v5 = *(_DWORD *)(v3 + 16);
      }
      if (v5)
      {
        *(_DWORD *)(v3 + 16) = v5 - 1;
        v2 = *(_DWORD *)(v1 + 1148) - 1;
        goto LABEL_11;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x195C2FAA0);
  }
LABEL_11:
  *(_DWORD *)(v1 + 1148) = v2;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerRepaint(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaPlayerRepaint((uint64_t)this - 176);
}

unsigned __int8 *WebCore::HTMLMediaElement::mediaPlayerSizeChanged(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  _QWORD v25[4];
  float v26;
  float v27;

  v1 = *((_QWORD *)this + 142);
  if (!v1)
    return this;
  v2 = (uint64_t)this;
  v26 = (*(float (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 288))(*(_QWORD *)(v1 + 72));
  v27 = v3;
  v5 = *(_QWORD *)(v2 + 1824);
  v6 = *(_QWORD *)(v2 + 1832);
  v25[0] = "HTMLMediaElement";
  v25[1] = 17;
  v25[2] = "mediaPlayerSizeChanged";
  v25[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v25, (WebCore::FloatSize *)&v26);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  if (v7)
    v8 = (*(_WORD *)(v7 + 3358) & 0x10) == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v9 + 2;
    v10 = ceilf(v26);
    v11 = 0x7FFFFFFFLL;
    v12 = 0x80000000;
    if (v10 > -2147500000.0)
      v12 = (int)v10;
    if (v10 < 2147500000.0)
      v11 = v12;
    v13 = ceilf(v27);
    v14 = 0x8000000000000000;
    if (v13 > -2147500000.0)
      v14 = (unint64_t)(int)v13 << 32;
    if (v13 >= 2147500000.0)
      v14 = 0x7FFFFFFF00000000;
    v25[0] = v14 | v11;
    v15 = *(_QWORD *)(v7 + 528);
    if (!v15)
      goto LABEL_24;
    v16 = *(_QWORD *)(v15 + 8);
    if (!v16)
      goto LABEL_24;
    v17 = HIDWORD(v14);
    v18 = *(_QWORD *)(v16 + 120);
    if (v18)
    {
      v19 = v11 | v17;
      if (*(_QWORD *)(v18 + 8))
        v20 = 1;
      else
        v20 = v19 == 0;
      if (!v20)
      {
LABEL_31:
        v21 = *(_QWORD *)(v16 + 24);
        if (v21)
        {
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
          {
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v22 + 48) + 16) + 1584))(*(_QWORD *)(*(_QWORD *)(v22 + 48) + 16), v25);
            v9 = *(_DWORD *)(v7 + 24) - 2;
          }
        }
      }
    }
    else if (v11 | v17)
    {
      goto LABEL_31;
    }
LABEL_24:
    if (v9)
    {
      *(_DWORD *)(v7 + 24) = v9;
    }
    else
    {
      v23 = *(_WORD *)(v7 + 30);
      if ((v23 & 0x400) == 0)
      {
        v24 = *(_WORD *)(v7 + 28);
        if ((v24 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, v4);
        }
        else
        {
          if ((v24 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v23 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v23 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
  }
  ++*(_DWORD *)(v2 + 1148);
  if (*(int *)(v2 + 904) >= 1)
    (*(void (**)(uint64_t, float *))(*(_QWORD *)v2 + 2512))(v2, &v26);
  this = WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)v2, v4);
  --*(_DWORD *)(v2 + 1148);
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerSizeChanged(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaPlayerSizeChanged((unsigned __int8 *)this - 176);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerAcceleratedCompositingEnabled(WebCore::HTMLMediaElement *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 664) >> 4) & 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerAcceleratedCompositingEnabled(WebCore::HTMLMediaElement *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 664) >> 4) & 1;
}

uint64_t (**WebCore::HTMLMediaElement::scheduleMediaEngineWasUpdated(uint64_t (**this)()))()
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t (*v4)();
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t (**v8)();
  __int128 v9;
  __int128 v10;

  v1 = (uint64_t)this;
  v2 = *(unsigned int **)this[87];
  if (!v2 || (v3 = atomic_load(v2), v3 == 1))
  {
    v4 = this[229];
    *(_QWORD *)&v9 = "HTMLMediaElement";
    *((_QWORD *)&v9 + 1) = 17;
    *(_QWORD *)&v10 = "scheduleMediaEngineWasUpdated";
    *((_QWORD *)&v10 + 1) = v4;
    if (*((_BYTE *)this[228] + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v9, "task scheduled");
    v6 = v9;
    v7 = v10;
    v5 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v5 = off_1E33C5BE8;
    *(_QWORD *)(v5 + 8) = v1;
    *(_OWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 32) = v7;
    v8 = (uint64_t (**)())v5;
    WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 688, &v8);
    this = v8;
    v8 = 0;
    if (this)
      return (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
  }
  return this;
}

uint64_t (**WebCore::HTMLMediaElement::mediaPlayerEngineUpdated(WebCore::HTMLMediaElement *this, WTF::StringImpl *a2))()
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v10;
  _QWORD v11[4];

  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v11[0] = "HTMLMediaElement";
  v11[1] = 17;
  v11[2] = "mediaPlayerEngineUpdated";
  v11[3] = v4;
  v5 = *(_QWORD *)(*((_QWORD *)this + 142) + 72);
  if (v5)
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v5 + 896))(&v10);
  else
    v10 = 0;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::String>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, (uint64_t *)&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_DWORD *)this + 290) = 0;
  v7 = *(unsigned int *)((char *)this + 1265);
  v8 = v7 & 0xFFFFFFFFFFDFFFFFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  *(_DWORD *)((char *)this + 1265) = v7 & 0xFFDFFFFF;
  *(_WORD *)((char *)this + 1269) = WORD2(v8);
  return WebCore::HTMLMediaElement::scheduleMediaEngineWasUpdated((uint64_t (**)())this);
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerEngineUpdated(WebCore::HTMLMediaElement *this, WTF::StringImpl *a2))()
{
  return WebCore::HTMLMediaElement::mediaPlayerEngineUpdated((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

WTF::Thread *WebCore::HTMLMediaElement::mediaPlayerWillInitializeMediaEngine(WTF::Thread *this)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v1 = *((_QWORD *)this + 175);
  if (v1)
  {
    v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2)
    {
      WebCore::AudioNode::ref(*(WebCore::AudioNode **)(v1 + 8));
      if (__ldaxr(v2 + 176))
      {
        __clrex();
      }
      else if (!__stxr(1u, v2 + 176))
      {
        return WebCore::AudioNode::deref((WebCore::AudioNode *)v2);
      }
      MEMORY[0x19AEA534C]();
      return WebCore::AudioNode::deref((WebCore::AudioNode *)v2);
    }
  }
  return this;
}

WTF::Thread *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerWillInitializeMediaEngine(WTF::Thread *this)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v1 = *((_QWORD *)this + 153);
  if (v1)
  {
    v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2)
    {
      WebCore::AudioNode::ref(*(WebCore::AudioNode **)(v1 + 8));
      if (__ldaxr(v2 + 176))
      {
        __clrex();
      }
      else if (!__stxr(1u, v2 + 176))
      {
        return WebCore::AudioNode::deref((WebCore::AudioNode *)v2);
      }
      MEMORY[0x19AEA534C]();
      return WebCore::AudioNode::deref((WebCore::AudioNode *)v2);
    }
  }
  return this;
}

WTF::Thread *WebCore::HTMLMediaElement::mediaPlayerDidInitializeMediaEngine(WTF::Thread *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  WTF *v19;

  v1 = *((_QWORD *)this + 175);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (uint64_t)this;
      WebCore::AudioNode::ref(*(WebCore::AudioNode **)(v1 + 8));
      v4 = *(_QWORD *)(v3 + 1136);
      if (v4)
      {
        v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 904))(*(_QWORD *)(v4 + 72));
        if (v5)
        {
          v6 = v5;
          v7 = *(_QWORD *)(v2 + 160);
          if (v7)
            goto LABEL_24;
          v7 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v7 = 1;
          *(_QWORD *)(v7 + 8) = v2 + 152;
          v9 = *(unsigned int **)(v2 + 160);
          *(_QWORD *)(v2 + 160) = v7;
          if (!v9)
            goto LABEL_24;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v9);
            WTF::fastFree((WTF *)v9, v8);
          }
          v7 = *(_QWORD *)(v2 + 160);
          if (v7)
          {
LABEL_24:
            do
              v12 = __ldaxr((unsigned int *)v7);
            while (__stlxr(v12 + 1, (unsigned int *)v7));
          }
          v19 = (WTF *)v7;
          (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v6 + 8))(v6, &v19);
          v14 = (unsigned int *)v19;
          v19 = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v13);
            }
          }
        }
      }
      v17 = (unsigned __int8 *)(v2 + 176);
      v18 = __ldxr((unsigned __int8 *)(v2 + 176));
      if (v18 == 1)
      {
        if (!__stlxr(0, v17))
          return WebCore::AudioNode::deref((WebCore::AudioNode *)v2);
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
      return WebCore::AudioNode::deref((WebCore::AudioNode *)v2);
    }
  }
  return this;
}

WTF::Thread *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerDidInitializeMediaEngine(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaPlayerDidInitializeMediaEngine((WebCore::HTMLMediaElement *)((char *)this - 176));
}

unsigned int *WebCore::HTMLMediaElement::markCaptionAndSubtitleTracksAsUnconfigured(unsigned int *this, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  __int16 v17;
  __int16 v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD v21[4];

  v2 = *((_QWORD *)this + 169);
  if (v2)
  {
    v3 = (int)a2;
    v4 = (uint64_t)this;
    v5 = *((_QWORD *)this + 228);
    v6 = *((_QWORD *)this + 229);
    v21[0] = "HTMLMediaElement";
    v21[1] = 17;
    v21[2] = "markCaptionAndSubtitleTracksAsUnconfigured";
    v21[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v21);
        v2 = *(_QWORD *)(v4 + 1352);
      }
    }
    v8 = *(_DWORD *)(v2 + 108);
    v9 = *(unsigned int *)(v2 + 124);
    v10 = *(_DWORD *)(v2 + 68);
    v11 = v9 + v8 + v10;
    if ((_DWORD)v9 + v8 + v10)
    {
      v12 = 0;
      do
      {
        if (v12 >= v9)
        {
          if (v8 <= (int)v12 - (int)v9)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * (-(int)v9 - v8 + v12));
            if (*(_DWORD *)(v13 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195C30338);
            }
          }
          else
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 8 * (v12 - v9));
            if (*(_DWORD *)(v13 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195C30318);
            }
          }
        }
        else
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v2 + 112) + 8 * v12);
          if (*(_DWORD *)(v13 + 40) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195C302ECLL);
          }
        }
        if (*(_DWORD *)(v13 + 228) <= 1u)
          *(_BYTE *)(v13 + 256) = 0;
        ++v12;
      }
      while (v11 != v12);
    }
    *(_WORD *)(v4 + 1269) |= 0x20u;
    v14 = *(uint64_t **)(v4 + 648);
    v15 = *v14;
    *v14 = 0;
    if (v15)
    {
      *(_QWORD *)(v15 + 8) = 0;
      do
      {
        v19 = __ldaxr((unsigned int *)v15);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v15));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
    if (v3)
    {
      return (unsigned int *)WebCore::HTMLMediaElement::scheduleConfigureTextTracks((uint64_t (**)())v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) += 2;
      this = WebCore::HTMLMediaElement::configureTextTracks((WebCore::HTMLMediaElement *)v4, (WTF::StringImpl *)a2);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        v17 = *(_WORD *)(v4 + 30);
        if ((v17 & 0x400) == 0)
        {
          v18 = *(_WORD *)(v4 + 28);
          if ((v18 & 0xF000) == 0x9000)
          {
            return WebCore::Document::removedLastRef((WebCore::Document *)v4, v16);
          }
          else
          {
            if ((v18 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
              v17 = *(_WORD *)(v4 + 30);
            }
            *(_WORD *)(v4 + 30) = v17 | 0x400;
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
          }
        }
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerCharacteristicChanged(WebCore::HTMLMediaElement *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return WebCore::HTMLMediaElement::mediaPlayerCharacteristicChanged((WebCore::HTMLMediaElement *)((char *)this - 176), a2, a3);
}

uint64_t WebCore::HTMLMediaElement::buffered@<X0>(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;
  int v23;
  unsigned int v24;

  v3 = *((_QWORD *)this + 142);
  if (!v3)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *a2 = result;
    return result;
  }
  v4 = *((_QWORD *)this + 144);
  if (!v4)
  {
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 592))(*(_QWORD *)(v3 + 72));
    result = WTF::fastMalloc((WTF *)0x18);
    v15 = result;
    *(_DWORD *)result = 1;
    v16 = *(unsigned int *)(v14 + 12);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = v16;
    if ((_DWORD)v16)
    {
      if (v16 >> 27)
      {
        __break(0xC471u);
        goto LABEL_22;
      }
      result = WTF::fastMalloc((WTF *)(32 * v16));
      *(_DWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v15 + 8) = result;
      v17 = *(unsigned int *)(v14 + 12);
      if ((_DWORD)v17)
      {
        v18 = *(__int128 **)v14;
        v19 = 32 * v17;
        do
        {
          v20 = *v18;
          v21 = v18[1];
          v18 += 2;
          *(_OWORD *)result = v20;
          *(_OWORD *)(result + 16) = v21;
          result += 32;
          v19 -= 32;
        }
        while (v19);
      }
    }
    *a2 = v15;
    return result;
  }
  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v4 + 48))(&v22);
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  v7 = v24;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 20) = v7;
  if ((_DWORD)v7)
  {
    if (!(v7 >> 27))
    {
      v8 = WTF::fastMalloc((WTF *)(32 * v7));
      *(_DWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v6 + 8) = v8;
      result = (uint64_t)v22;
      if (v24)
      {
        v10 = 0;
        v11 = 32 * v24;
        do
        {
          v12 = (_OWORD *)(v8 + v10);
          v13 = *(_OWORD *)(result + v10 + 16);
          *v12 = *(_OWORD *)(result + v10);
          v12[1] = v13;
          v10 += 32;
        }
        while (v11 != v10);
      }
      goto LABEL_17;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x195C304F4);
  }
  result = (uint64_t)v22;
LABEL_17:
  *a2 = v6;
  if (result)
  {
    v22 = 0;
    v23 = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::buffered@<X0>(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;
  int v23;
  unsigned int v24;

  v3 = *((_QWORD *)this + 125);
  if (!v3)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *a2 = result;
    return result;
  }
  v4 = *((_QWORD *)this + 127);
  if (!v4)
  {
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 592))(*(_QWORD *)(v3 + 72));
    result = WTF::fastMalloc((WTF *)0x18);
    v15 = result;
    *(_DWORD *)result = 1;
    v16 = *(unsigned int *)(v14 + 12);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = v16;
    if ((_DWORD)v16)
    {
      if (v16 >> 27)
      {
        __break(0xC471u);
        goto LABEL_22;
      }
      result = WTF::fastMalloc((WTF *)(32 * v16));
      *(_DWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v15 + 8) = result;
      v17 = *(unsigned int *)(v14 + 12);
      if ((_DWORD)v17)
      {
        v18 = *(__int128 **)v14;
        v19 = 32 * v17;
        do
        {
          v20 = *v18;
          v21 = v18[1];
          v18 += 2;
          *(_OWORD *)result = v20;
          *(_OWORD *)(result + 16) = v21;
          result += 32;
          v19 -= 32;
        }
        while (v19);
      }
    }
    *a2 = v15;
    return result;
  }
  (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v4 + 48))(&v22);
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  v7 = v24;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 20) = v7;
  if ((_DWORD)v7)
  {
    if (!(v7 >> 27))
    {
      v8 = WTF::fastMalloc((WTF *)(32 * v7));
      *(_DWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v6 + 8) = v8;
      result = (uint64_t)v22;
      if (v24)
      {
        v10 = 0;
        v11 = 32 * v24;
        do
        {
          v12 = (_OWORD *)(v8 + v10);
          v13 = *(_OWORD *)(result + v10 + 16);
          *v12 = *(_OWORD *)(result + v10);
          v12[1] = v13;
          v10 += 32;
        }
        while (v11 != v10);
      }
      goto LABEL_17;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x195C30670);
  }
  result = (uint64_t)v22;
LABEL_17:
  *a2 = v6;
  if (result)
  {
    v22 = 0;
    v23 = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::played@<X0>(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  WTF *v16;
  _QWORD v17[2];

  if ((*(_DWORD *)((_BYTE *)this + 1265) & 2) != 0)
  {
    v17[0] = WebCore::HTMLMediaElement::currentMediaTime(this);
    v17[1] = v4;
    if (WTF::MediaTime::compare((WTF::MediaTime *)v17, (WebCore::HTMLMediaElement *)((char *)this + 1000)) == 1)WebCore::HTMLMediaElement::addPlayedRange(this, (WebCore::HTMLMediaElement *)((char *)this + 1000), (const WTF::MediaTime *)v17);
  }
  v5 = *((_QWORD *)this + 102);
  if (!v5)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    v7 = *((_QWORD *)this + 102);
    *((_QWORD *)this + 102) = v5;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        v16 = *(WTF **)(v7 + 8);
        if (v16)
        {
          *(_QWORD *)(v7 + 8) = 0;
          *(_DWORD *)(v7 + 16) = 0;
          WTF::fastFree(v16, v6);
        }
        WTF::fastFree((WTF *)v7, v6);
        v5 = *((_QWORD *)this + 102);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v9 = result;
  *(_DWORD *)result = 1;
  v10 = *(unsigned int *)(v5 + 20);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v10;
  if (!(_DWORD)v10)
    goto LABEL_13;
  if (!(v10 >> 27))
  {
    result = WTF::fastMalloc((WTF *)(32 * v10));
    *(_DWORD *)(v9 + 16) = v10;
    *(_QWORD *)(v9 + 8) = result;
    v11 = *(unsigned int *)(v5 + 20);
    if ((_DWORD)v11)
    {
      v12 = *(__int128 **)(v5 + 8);
      v13 = 32 * v11;
      do
      {
        v14 = *v12;
        v15 = v12[1];
        v12 += 2;
        *(_OWORD *)result = v14;
        *(_OWORD *)(result + 16) = v15;
        result += 32;
        v13 -= 32;
      }
      while (v13);
    }
LABEL_13:
    *a2 = v9;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::played@<X0>(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  return WebCore::HTMLMediaElement::played((WebCore::HTMLMediaElement *)((char *)this - 136), a2);
}

_QWORD *WebCore::HTMLMediaElement::seekable@<X0>(WebCore::HTMLMediaElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *((_QWORD *)this + 144);
  if (v4)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 56))(a2);
  v6 = *((_QWORD *)this + 142);
  if (v6)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 568))(*(_QWORD *)(v6 + 72));
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v8 = result;
    *(_DWORD *)result = 1;
    v9 = *(unsigned int *)(v7 + 12);
    result[1] = 0;
    result[2] = 0;
    *((_DWORD *)result + 5) = v9;
    if (!(_DWORD)v9)
    {
LABEL_9:
      *a2 = v8;
      return result;
    }
    if (!(v9 >> 27))
    {
      result = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v9));
      *((_DWORD *)v8 + 4) = v9;
      v8[1] = result;
      v10 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v10)
      {
        v11 = *(__int128 **)v7;
        v12 = 32 * v10;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v11 += 2;
          *(_OWORD *)result = v13;
          *((_OWORD *)result + 1) = v14;
          result += 4;
          v12 -= 32;
        }
        while (v12);
      }
      goto LABEL_9;
    }
    __break(0xC471u);
  }
  else
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    result[1] = 0;
    result[2] = 0;
    *a2 = result;
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::seekable@<X0>(WebCore::HTMLMediaElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *((_QWORD *)this + 127);
  if (v4)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 56))(a2);
  v6 = *((_QWORD *)this + 125);
  if (v6)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 568))(*(_QWORD *)(v6 + 72));
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v8 = result;
    *(_DWORD *)result = 1;
    v9 = *(unsigned int *)(v7 + 12);
    result[1] = 0;
    result[2] = 0;
    *((_DWORD *)result + 5) = v9;
    if (!(_DWORD)v9)
    {
LABEL_9:
      *a2 = v8;
      return result;
    }
    if (!(v9 >> 27))
    {
      result = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v9));
      *((_DWORD *)v8 + 4) = v9;
      v8[1] = result;
      v10 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v10)
      {
        v11 = *(__int128 **)v7;
        v12 = 32 * v10;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v11 += 2;
          *(_OWORD *)result = v13;
          *((_OWORD *)result + 1) = v14;
          result += 4;
          v12 -= 32;
        }
        while (v12);
      }
      goto LABEL_9;
    }
    __break(0xC471u);
  }
  else
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    result[1] = 0;
    result[2] = 0;
    *a2 = result;
  }
  return result;
}

BOOL WebCore::HTMLMediaElement::couldPlayIfEnoughData(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;

  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) != 0)
    return 0;
  v2 = WebCore::HTMLMediaElement::endedPlayback(this);
  if ((v2 & 1) != 0)
    return 0;
  if (*((int *)this + 226) >= 1 && *((_QWORD *)this + 120))
  {
    (*(void (**)(uint64_t *__return_ptr, WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1432))(&v19, this);
    v3 = v19;
    v4 = (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1360))(this);
    v2 = WebCore::TimeRanges::contain((WebCore::TimeRanges *)v3, v4);
    v6 = v2;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v18 = *(WTF **)(v3 + 8);
        if (v18)
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 16) = 0;
          WTF::fastFree(v18, v5);
        }
        v2 = WTF::fastFree((WTF *)v3, v5);
        if (!v6)
          return 0;
        goto LABEL_9;
      }
      --*(_DWORD *)v3;
    }
    if (!(_DWORD)v2)
      return 0;
  }
LABEL_9:
  v7 = *((_QWORD *)this + 200);
  if (!v7)
  {
    v2 = (uint64_t)WebCore::HTMLMediaElement::initializeMediaSession(this);
    v7 = *((_QWORD *)this + 200);
  }
  if (*(_BYTE *)(v7 + 48) == 4)
    return 0;
  if (*((_BYTE *)this + 1697))
  {
LABEL_14:
    if (*(_BYTE *)(WebCore::PlatformMediaSessionManager::sharedManager((WebCore::PlatformMediaSessionManager *)v2) + 57))
      return 1;
    v9 = *((_QWORD *)this + 200);
    if (!v9)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v9 = *((_QWORD *)this + 200);
    }
    if (!(***(unsigned int (****)(_QWORD))(v9 + 32))(*(_QWORD *)(v9 + 32))
      || *(_BYTE *)(v9 + 48) != 2
      || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 72))(*(_QWORD *)(v9 + 32)))
    {
      return 1;
    }
    v10 = *((_QWORD *)this + 200);
    if (!v10)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v10 = *((_QWORD *)this + 200);
    }
    v11 = *(unsigned int *)(v10 + 68);
    if (!(_DWORD)v11)
      return 1;
    v12 = 0;
    v13 = *(_QWORD *)(v10 + 56);
    v14 = 2 * v11;
    v15 = (unsigned __int8 *)(v13 + 1);
    do
    {
      v16 = *v15;
      v15 += 2;
      if (!v16)
        ++v12;
      v14 -= 2;
    }
    while (v14);
    return !v12 || *(_BYTE *)(v13 + 2 * v11 - 2) != 3;
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (!*(_BYTE *)(v17 + 467)
    && !*(_BYTE *)(v17 + 468)
    && (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1456))(this) != 0.0)
  {
    v2 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this);
    if ((v2 & 1) == 0)
    {
      if (*((_QWORD *)this + 142) && *((int *)this + 226) >= 1)
      {
        v2 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
        if ((v2 & 1) != 0)
          goto LABEL_14;
      }
      else if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x8000000) != 0)
      {
        goto LABEL_14;
      }
    }
  }
  return 1;
}

unint64_t WebCore::HTMLMediaElement::canProduceAudio(WebCore::HTMLMediaElement *this)
{
  if (*((_BYTE *)this + 1697))
    return 1;
  if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 467)
    || (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1456))(this) == 0.0
    || ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) != 0)
  {
    return 0;
  }
  if (*((_QWORD *)this + 142) && *((int *)this + 226) >= 1)
    return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
  return ((unint64_t)*(unsigned int *)((char *)this + 1265) >> 27) & 1;
}

_QWORD *WebCore::HTMLMediaElement::cancelPendingTasks(_QWORD *this, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD *v52;
  unsigned int v53;
  unsigned int v54;
  _QWORD *v55;

  v2 = (uint64_t *)this[81];
  v3 = *v2;
  *v2 = 0;
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    do
    {
      v26 = __ldaxr((unsigned int *)v3);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v3));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v3);
      v28 = this;
      WTF::fastFree((WTF *)v3, a2);
      this = v28;
    }
  }
  v4 = (uint64_t *)this[83];
  v5 = *v4;
  *v4 = 0;
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    do
    {
      v29 = __ldaxr((unsigned int *)v5);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v5));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v5);
      v31 = this;
      WTF::fastFree((WTF *)v5, a2);
      this = v31;
    }
  }
  v6 = (uint64_t *)this[85];
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    do
    {
      v32 = __ldaxr((unsigned int *)v7);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)v7));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)v7);
      v34 = this;
      WTF::fastFree((WTF *)v7, a2);
      this = v34;
    }
  }
  v8 = (uint64_t *)this[87];
  v9 = *v8;
  *v8 = 0;
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    do
    {
      v35 = __ldaxr((unsigned int *)v9);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v9));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v9);
      v37 = this;
      WTF::fastFree((WTF *)v9, a2);
      this = v37;
    }
  }
  v10 = (uint64_t *)this[89];
  v11 = *v10;
  *v10 = 0;
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    do
    {
      v38 = __ldaxr((unsigned int *)v11);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)v11));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)v11);
      v40 = this;
      WTF::fastFree((WTF *)v11, a2);
      this = v40;
    }
  }
  v12 = (uint64_t *)this[91];
  v13 = *v12;
  *v12 = 0;
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    do
    {
      v41 = __ldaxr((unsigned int *)v13);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)v13));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)v13);
      v43 = this;
      WTF::fastFree((WTF *)v13, a2);
      this = v43;
    }
  }
  v14 = (uint64_t *)this[93];
  v15 = *v14;
  *v14 = 0;
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    do
    {
      v44 = __ldaxr((unsigned int *)v15);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)v15));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)v15);
      v46 = this;
      WTF::fastFree((WTF *)v15, a2);
      this = v46;
    }
  }
  v16 = (uint64_t *)this[95];
  v17 = *v16;
  *v16 = 0;
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    do
    {
      v47 = __ldaxr((unsigned int *)v17);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, (unsigned int *)v17));
    if (!v48)
    {
      atomic_store(1u, (unsigned int *)v17);
      v49 = this;
      WTF::fastFree((WTF *)v17, a2);
      this = v49;
    }
  }
  v18 = (uint64_t *)this[101];
  v19 = *v18;
  *v18 = 0;
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    do
    {
      v50 = __ldaxr((unsigned int *)v19);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, (unsigned int *)v19));
    if (!v51)
    {
      atomic_store(1u, (unsigned int *)v19);
      v52 = this;
      WTF::fastFree((WTF *)v19, a2);
      this = v52;
    }
  }
  v20 = (uint64_t *)this[106];
  v21 = *v20;
  *v20 = 0;
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    do
    {
      v53 = __ldaxr((unsigned int *)v21);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)v21));
    if (!v54)
    {
      atomic_store(1u, (unsigned int *)v21);
      v55 = this;
      WTF::fastFree((WTF *)v21, a2);
      this = v55;
    }
  }
  v22 = (unsigned int *)this[223];
  this[223] = 0;
  if (v22)
  {
    this = (_QWORD *)WebCore::MediaResourceSniffer::cancel((WebCore::MediaResourceSniffer *)v22, a2);
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v22 + 2);
      return (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  return this;
}

unsigned __int8 *WebCore::HTMLMediaElement::clearMediaPlayer(WebCore::HTMLMediaElement *this)
{
  WebCore::MediaStream *v2;
  _DWORD *v3;
  _DWORD *v4;
  WebCore *Ref;
  void *v6;
  uint64_t v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::PlatformMediaSessionManager *v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  double v40;
  uint64_t (**v41)();
  uint64_t v42;
  int v43;
  uint64_t (***v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t (**v49)();
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  bmalloc::api *v61;
  void *v62;
  __int16 v63;
  __int16 v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67[4];
  char v68;

  if (!*((_BYTE *)this + 1640))
  {
    v2 = (WebCore::MediaStream *)*((_QWORD *)this + 204);
    *((_QWORD *)this + 204) = 0;
    if (v2)
    {
      if (*((_DWORD *)v2 + 22) == 1)
      {
        WebCore::MediaStream::~MediaStream(v2);
        bmalloc::api::isoDeallocate(v61, v62);
      }
      else
      {
        --*((_DWORD *)v2 + 22);
      }
    }
  }
  v3 = (_DWORD *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v3)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 80))(v3);
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v3 + 104))(v3, 0);
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  Ref = (WebCore *)WebCore::HTMLMediaElement::forgetResourceSpecificTracks((uint64_t (**)())this);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(WebCore **)(v7 + 96)) == 0)
  {
    Ref = (WebCore *)WebCore::threadGlobalDataSlow(Ref);
    v8 = Ref;
  }
  v9 = *((_QWORD *)v8 + 5);
  if (!v9)
  {
    Ref = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *((_QWORD *)v8 + 5);
  }
  v10 = *((_QWORD *)this + 2);
  if ((v10 & 0x1000000000000) != 0 && (v56 = v10 & 0xFFFFFFFFFFFFLL, v57 = *(unsigned int *)(v56 + 28), (_DWORD)v57))
  {
    v58 = *(_QWORD **)(v56 + 16);
    v59 = *(_QWORD *)(v9 + 2464);
    v60 = 32 * v57;
    while (*v58 != v59)
    {
      v58 += 4;
      v60 -= 32;
      if (!v60)
        goto LABEL_17;
    }
  }
  else
  {
LABEL_17:
    v11 = *((_QWORD *)this + 230);
    v12 = *(_QWORD *)(v11 + 88);
    if ((!v12 || !*(_DWORD *)(v12 - 12)) && !*(_DWORD *)(v11 + 140))
      goto LABEL_31;
  }
  *((_BYTE *)this + 1648) = 0;
  v13 = *((_QWORD *)this + 200);
  if (v13)
  {
    v68 = 0;
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 32) + 248))(*(_QWORD *)(v13 + 32));
    v15 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 32) + 256))(*(_QWORD *)(v13 + 32));
    v67[0] = (uint64_t)"MediaElementSession";
    v67[1] = 20;
    v67[2] = (uint64_t)"setHasPlaybackTargetAvailabilityListeners";
    v67[3] = (uint64_t)v15;
    v16 = *(_BYTE *)(v14 + 12);
    if (v16)
    {
      if (WebCore::LogMedia)
        v17 = byte_1ECE7C490 >= 3u;
      else
        v17 = 0;
      if (v17)
      {
        v15 = (WebCore::PlatformMediaSessionManager *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v67);
        v16 = v68;
      }
      else
      {
        v16 = 0;
      }
    }
    *(_BYTE *)(v13 + 250) = v16;
    v18 = WebCore::PlatformMediaSessionManager::sharedManager(v15);
    Ref = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 192))(v18);
  }
  if (!*((_BYTE *)this + 1696))
    Ref = (WebCore *)WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent((uint64_t (**)())this, 0);
LABEL_31:
  if (*((_BYTE *)this + 1697))
    Ref = (WebCore *)WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget(this, 0);
  v19 = *(unsigned int *)((char *)this + 1265);
  if ((v19 & 4) != 0)
  {
    v20 = v19 & 0xFFFFFFFFFFFFFFFBLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    *(_DWORD *)((char *)this + 1265) = v19 & 0xFFFFFFFB;
    *(_WORD *)((char *)this + 1269) = WORD2(v20);
    v21 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v21 + 24) += 2;
    Ref = (WebCore *)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v21 + 1960, (_QWORD *)this + 20);
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      v63 = *(_WORD *)(v21 + 30);
      if ((v63 & 0x400) == 0)
      {
        v64 = *(_WORD *)(v21 + 28);
        if ((v64 & 0xF000) == 0x9000)
        {
          Ref = (WebCore *)WebCore::Document::removedLastRef((WebCore::Document *)v21, v6);
        }
        else
        {
          if ((v64 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 160) + 16))(*(_QWORD *)(v21 + 160));
            v63 = *(_WORD *)(v21 + 30);
          }
          *(_WORD *)(v21 + 30) = v63 | 0x400;
          Ref = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
        }
      }
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
  }
  v22 = *((_QWORD *)this + 142);
  if (v22)
  {
    v23 = *(unsigned __int8 **)v22;
    if (__ldaxr(*(unsigned __int8 **)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, v23))
    {
      goto LABEL_41;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_41:
    ++*((_QWORD *)v23 + 1);
    v25 = __ldxr(v23);
    if (v25 == 1)
    {
      if (!__stlxr(0, v23))
      {
LABEL_46:
        {
          v26 = qword_1EE2F8C50;
          if (qword_1EE2F8C50)
          {
            do
LABEL_53:
              v30 = __ldaxr((unsigned int *)v26);
            while (__stlxr(v30 + 1, (unsigned int *)v26));
LABEL_54:
            v31 = *(unsigned int **)(v22 + 8);
            *(_QWORD *)(v22 + 8) = v26;
            if (v31)
            {
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v6);
              }
            }
            v34 = (unsigned __int8 **)*((_QWORD *)this + 142);
            *((_QWORD *)this + 142) = 0;
            if (v34)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v34);
            Ref = (WebCore *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v22);
            goto LABEL_61;
          }
        }
        else
        {
          WebCore::nullMediaPlayerClient(void)::client = (uint64_t)&off_1E340E220;
          qword_1EE2F8C50 = 0;
        }
        v26 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = &WebCore::nullMediaPlayerClient(void)::client;
        v27 = (unsigned int *)qword_1EE2F8C50;
        qword_1EE2F8C50 = v26;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v6);
          }
          v26 = qword_1EE2F8C50;
          if (!qword_1EE2F8C50)
            goto LABEL_54;
        }
        goto LABEL_53;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_46;
  }
LABEL_61:
  v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 24);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 8);
        if (v38)
        {
          v39 = (*(_DWORD *)v38)++;
          if ((*(_QWORD *)(v38 + 1064) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v38 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v38 + 1056) = 0;
            WTF::MonotonicTime::now(Ref);
            WebCore::TimerBase::setNextFireTime(v38 + 1032, v40 + 0.0);
            v39 = *(_DWORD *)v38 - 1;
          }
          if (v39)
          {
            *(_DWORD *)v38 = v39;
          }
          else
          {
            WebCore::Page::~Page(v38);
            WTF::fastFree(v54, v55);
          }
        }
      }
    }
  }
  if ((*((_QWORD *)this + 42) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 304));
  if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 360));
  if ((*((_QWORD *)this + 77) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 584));
  WebCore::HTMLMediaElement::cancelPendingTasks(this, v6);
  *((_DWORD *)this + 264) = 0;
  if (*((_QWORD *)this + 169))
    WebCore::HTMLMediaElement::configureTextTrackDisplay(this, 0);
  v41 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v41 = (uint64_t (*)())off_1E33C5C60;
  v41[1] = (uint64_t (*)())this;
  v42 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v42 = 1;
  v43 = *((_DWORD *)this + 6);
  *(_QWORD *)(v42 + 8) = this;
  ++*((_QWORD *)this + 16);
  *((_DWORD *)this + 6) = v43 + 4;
  v44 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v44 = &off_1E33C5820;
  v44[1] = (uint64_t (**)())this;
  v44[2] = (uint64_t (**)())v42;
  v44[3] = v41;
  v67[0] = (uint64_t)v44;
  v45 = *((_QWORD *)this + 15);
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v46 - 96) + 104))(v46 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v47, 9, v67);
      v44 = (uint64_t (***)())v67[0];
      v67[0] = 0;
      if (!v44)
        goto LABEL_84;
    }
    else
    {
      v67[0] = 0;
    }
    v49 = *v44;
  }
  else
  {
    v67[0] = 0;
    v49 = &off_1E33C5820;
  }
  v49[1]();
LABEL_84:
  v50 = (uint64_t *)*((_QWORD *)this + 99);
  v51 = *v50;
  *v50 = 0;
  if (v51)
  {
    *(_QWORD *)(v51 + 8) = 0;
    do
    {
      v65 = __ldaxr((unsigned int *)v51);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, (unsigned int *)v51));
    if (!v66)
    {
      atomic_store(1u, (unsigned int *)v51);
      WTF::fastFree((WTF *)v51, v48);
    }
  }
  WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
  return WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)this, v52);
}

_QWORD *WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget(WebCore::HTMLMediaElement *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  _QWORD *v13;

  v4 = *((_QWORD *)this + 229);
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v5 = off_1E33C5C88;
  *(_QWORD *)(v5 + 8) = this;
  *(_BYTE *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = "HTMLMediaElement";
  *(_QWORD *)(v5 + 32) = 17;
  *(_QWORD *)(v5 + 40) = "setIsPlayingToWirelessTarget";
  *(_QWORD *)(v5 + 48) = v4;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *((_DWORD *)this + 6);
  *(_QWORD *)(v6 + 8) = this;
  ++*((_QWORD *)this + 16);
  *((_DWORD *)this + 6) = v7 + 4;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E33C5820;
  result[1] = this;
  result[2] = v6;
  result[3] = v5;
  v13 = result;
  v9 = *((_QWORD *)this + 15);
  if (!v9)
  {
    v13 = 0;
    v12 = &off_1E33C5820;
    return (_QWORD *)v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 9, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = (uint64_t (**)())*result;
    return (_QWORD *)v12[1]();
  }
  return result;
}

unsigned __int8 *WebCore::HTMLMediaElement::stopWithoutDestroyingMediaPlayer(WebCore::HTMLMediaElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::MonotonicTime *FireTime;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void *v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  void *v32;
  WTF *v34;
  void *v35;
  __int16 v36;
  __int16 v37;
  int v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;

  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v39 = "HTMLMediaElement";
  v40 = 17;
  v41 = "stopWithoutDestroyingMediaPlayer";
  v42 = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v39);
  }
  if (*((_DWORD *)this + 270))
    WebCore::HTMLMediaElement::exitFullscreen(this, a2);
  *((_BYTE *)this + 1085) = 1;
  FireTime = (WTF::MonotonicTime *)*((_QWORD *)this + 136);
  if (FireTime)
  {
    (*(void (**)(WTF::MonotonicTime *))(*(_QWORD *)FireTime + 16))(FireTime);
    FireTime = (WTF::MonotonicTime *)*((_QWORD *)this + 136);
    *((_QWORD *)this + 136) = 0;
    if (FireTime)
      FireTime = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)FireTime + 8))(FireTime);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_DWORD *)v10 + 1;
          *(_DWORD *)v10 = v11;
          if ((*(_QWORD *)(v10 + 1064) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v10 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v10 + 1056) = 0;
            WTF::MonotonicTime::now(FireTime);
            FireTime = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v10 + 1032, v12 + 0.0);
            v11 = *(_DWORD *)v10;
          }
          v13 = v11 - 1;
          if (v13)
          {
            *(_DWORD *)v10 = v13;
          }
          else
          {
            WebCore::Page::~Page(v10);
            FireTime = (WTF::MonotonicTime *)WTF::fastFree(v34, v35);
          }
        }
      }
    }
  }
  v14 = (_DWORD *)((char *)this + 1265);
  v15 = *(unsigned int *)((char *)this + 1265);
  v16 = v15 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if ((v15 & 0x20) != 0)
  {
    v16 = v15 & 0xFFFFFFFFFFFFFFDFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    *v14 = v15 & 0xFFFFFFDF;
    *(_WORD *)((char *)this + 1269) = WORD2(v16);
    v17 = *((_QWORD *)this + 200);
    if (v17)
    {
      *(_BYTE *)(v17 + 177) = (*(_DWORD *)(*(_QWORD *)(v17 + 80) + 1265) & 0x20) == 0;
      if ((*(_QWORD *)(v17 + 360) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v17 + 360) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v18 = v17 + 328;
        *(_QWORD *)(v17 + 352) = 0;
        WTF::MonotonicTime::now(FireTime);
        WebCore::TimerBase::setNextFireTime(v18, v19 + 0.1);
      }
      v16 = *v14 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    }
  }
  if ((v16 & 2) != 0)
  {
    *(_WORD *)((char *)this + 1269) = WORD2(v16);
    *v14 = v16 & 0xFFFFFFFD;
    v20 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v20 + 24) += 2;
    WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v20);
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      v36 = *(_WORD *)(v20 + 30);
      if ((v36 & 0x400) == 0)
      {
        v37 = *(_WORD *)(v20 + 28);
        if ((v37 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v20, v21);
        }
        else
        {
          if ((v37 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 160) + 16))(*(_QWORD *)(v20 + 160));
            v36 = *(_WORD *)(v20 + 30);
          }
          *(_WORD *)(v20 + 30) = v36 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
        }
      }
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
    WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())this);
    v16 = *v14 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  }
  *(_WORD *)((char *)this + 1269) = WORD2(v16);
  *v14 = v16 | 0x40000;
  WebCore::HTMLMediaElement::updatePlayState(this);
  v22 = (_QWORD **)*((_QWORD *)this + 200);
  if (v22)
  {
    v23 = (*(uint64_t (**)(_QWORD *))(*v22[4] + 248))(v22[4]);
    v24 = ((uint64_t (*)(_QWORD **))(*v22)[18])(v22);
    v26 = v25;
    v27 = (*(uint64_t (**)(_QWORD *))(*v22[4] + 256))(v22[4]);
    v39 = (const char *)v24;
    v40 = v26;
    v41 = "clientWillBeDOMSuspended";
    v42 = v27;
    if (*(_BYTE *)(v23 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v39);
    WebCore::PlatformMediaSession::processClientWillPausePlayback((uint64_t)v22, 1);
  }
  v38 = 0;
  v28 = *((_QWORD *)this + 228);
  v29 = *((_QWORD *)this + 229);
  v39 = "HTMLMediaElement";
  v40 = 17;
  v41 = "setAutoplayEventPlaybackState";
  v42 = v29;
  if (*(_BYTE *)(v28 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v39, &v38);
    v31 = v38;
    *((_DWORD *)this + 323) = v38;
    if (v31 == 1)
    {
      WebCore::HTMLMediaElement::dispatchPlayPauseEventsIfNeedsQuirks(this, v30);
      WebCore::HTMLMediaElement::handleAutoplayEvent(this, 0);
    }
  }
  else
  {
    *((_DWORD *)this + 323) = 0;
  }
  WebCore::HTMLMediaElement::userCancelledLoad(this);
  WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)this, v32);
  if ((*((_QWORD *)this + 42) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 304));
  if ((*((_QWORD *)this + 49) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 360));
  if ((*((_QWORD *)this + 77) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::HTMLMediaElement *)((char *)this + 584));
  return WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)this);
}

unsigned int *WebCore::HTMLMediaElement::contextDestroyed(WebCore::HTMLMediaElement *this, void *a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  unsigned int *result;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  WebCore::HTMLMediaElement::cancelPendingTasks(this, a2);
  v4 = (uint64_t *)*((_QWORD *)this + 99);
  v5 = *v4;
  *v4 = 0;
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    do
    {
      v16 = __ldaxr((unsigned int *)v5);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v5));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v5);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  v6 = (uint64_t *)*((_QWORD *)this + 104);
  v7 = *v6;
  *v6 = 0;
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    do
    {
      v18 = __ldaxr((unsigned int *)v7);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v7));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::fastFree((WTF *)v7, v3);
    }
  }
  if (*((_DWORD *)this + 216))
  {
    v8 = *((unsigned int *)this + 217);
    if ((_DWORD)v8)
    {
      v9 = (_DWORD **)*((_QWORD *)this + 107);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (v11[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
          else
            --v11[4];
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      *((_DWORD *)this + 217) = 0;
    }
    v12 = (WTF *)*((_QWORD *)this + 107);
    if (v12)
    {
      *((_QWORD *)this + 107) = 0;
      *((_DWORD *)this + 216) = 0;
      WTF::fastFree(v12, v3);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (result)
  {
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMediaElement::contextDestroyed(WebCore::HTMLMediaElement *this, void *a2)
{
  return WebCore::HTMLMediaElement::contextDestroyed((WebCore::HTMLMediaElement *)((char *)this - 112), a2);
}

unsigned int *WebCore::HTMLMediaElement::stop(WebCore::HTMLMediaElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  unsigned int *result;
  __int16 v13;
  __int16 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD v19[4];

  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v19[0] = "HTMLMediaElement";
  v19[1] = 17;
  v19[2] = "stop";
  v19[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19);
  *((_DWORD *)this + 6) += 2;
  WebCore::HTMLMediaElement::stopWithoutDestroyingMediaPlayer(this, a2);
  WebCore::HTMLMediaElement::cancelPendingTasks(this, v5);
  v7 = (uint64_t *)*((_QWORD *)this + 99);
  v8 = *v7;
  *v7 = 0;
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    do
    {
      v15 = __ldaxr((unsigned int *)v8);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v8));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree((WTF *)v8, v6);
    }
  }
  v9 = (uint64_t *)*((_QWORD *)this + 104);
  v10 = *v9;
  *v9 = 0;
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    do
    {
      v17 = __ldaxr((unsigned int *)v10);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v10));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v10);
      WTF::fastFree((WTF *)v10, v6);
    }
  }
  WebCore::HTMLMediaElement::clearMediaPlayer(this);
  result = (unsigned int *)*((_QWORD *)this + 200);
  if (result)
    result = (unsigned int *)WebCore::PlatformMediaSession::stopSession((WebCore::PlatformMediaSession *)result);
  if (*((_DWORD *)this + 6) == 2)
  {
    v13 = *((_WORD *)this + 15);
    if ((v13 & 0x400) == 0)
    {
      v14 = *((_WORD *)this + 14);
      if ((v14 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef(this, v11);
      }
      else
      {
        if ((v14 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v13 = *((_WORD *)this + 15);
        }
        *((_WORD *)this + 15) = v13 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 72))(this);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMediaElement::stop(WebCore::HTMLMediaElement *this, void *a2)
{
  return WebCore::HTMLMediaElement::stop((WebCore::HTMLMediaElement *)((char *)this - 112), a2);
}

unsigned int *WebCore::HTMLMediaElement::suspend(WebCore::HTMLMediaElement *this, void *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int *result;
  __int16 v8;
  __int16 v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD v12[4];

  v2 = (int)a2;
  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v12[0] = "HTMLMediaElement";
  v12[1] = 17;
  v12[2] = "suspend";
  v12[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  *((_DWORD *)this + 6) += 2;
  v6 = (unsigned int **)*((_QWORD *)this + 91);
  result = *v6;
  *v6 = 0;
  if (result)
  {
    *((_QWORD *)result + 1) = 0;
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  if (v2 == 2)
  {
    WebCore::HTMLMediaElement::stopWithoutDestroyingMediaPlayer(this, a2);
    WebCore::HTMLMediaElement::setBufferingPolicy((uint64_t)this, 2);
    result = (unsigned int *)*((_QWORD *)this + 200);
    if (result)
      result = (unsigned int *)WebCore::MediaElementSession::addBehaviorRestriction((uint64_t)result, 16);
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    v8 = *((_WORD *)this + 15);
    if ((v8 & 0x400) == 0)
    {
      v9 = *((_WORD *)this + 14);
      if ((v9 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef(this, a2);
      }
      else
      {
        if ((v9 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v8 = *((_WORD *)this + 15);
        }
        *((_WORD *)this + 15) = v8 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 72))(this);
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::setBufferingPolicy(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  _DWORD *v9;
  int v10;
  _QWORD v11[4];
  unsigned __int8 v12;

  v12 = a2;
  if (*(unsigned __int8 *)(result + 1264) == a2)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(result + 1824);
  v4 = *(_QWORD *)(result + 1832);
  v11[0] = "HTMLMediaElement";
  v11[1] = 17;
  v11[2] = "setBufferingPolicy";
  v11[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerBufferingPolicy>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, &v12);
    LOBYTE(a2) = v12;
  }
  *(_BYTE *)(v2 + 1264) = a2;
  v5 = *(_QWORD *)(v2 + 1136);
  if (v5)
  {
    v6 = *(unsigned __int8 **)v5;
    if (__ldaxr(*(unsigned __int8 **)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_9:
    ++*((_QWORD *)v6 + 1);
    v8 = __ldxr(v6);
    if (v8 == 1)
    {
      if (!__stlxr(0, v6))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_14:
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 72) + 232))(*(_QWORD *)(v5 + 72), v12);
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
  }
  v9 = *(_DWORD **)(v2 + 1152);
  if (v9)
  {
    v10 = v9[2];
    v9[2] = v10 + 1;
    if (v12 == 3)
    {
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 112))(v9);
      v10 = v9[2] - 1;
    }
    if (v10)
      v9[2] = v10;
    else
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMediaElement::suspend(uint64_t a1, void *a2)
{
  return WebCore::HTMLMediaElement::suspend((WebCore::HTMLMediaElement *)(a1 - 112), a2);
}

unsigned __int8 *WebCore::HTMLMediaElement::resume(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  WTF::MonotonicTime *v21;
  WTF::MonotonicTime *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  const char *v36;
  uint64_t v37;

  v1 = this;
  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v34 = (uint64_t (**)())"HTMLMediaElement";
  v35 = 17;
  v36 = "resume";
  v37 = v3;
  if (*(_BYTE *)(v2 + 12))
    this = (WebCore::HTMLMediaElement *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v34);
  v4 = (_DWORD *)((char *)v1 + 1265);
  v5 = *(unsigned int *)((char *)v1 + 1265);
  v6 = v5 | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 1269) << 32);
  if ((v5 & 0x20) == 0)
  {
    *(_WORD *)((char *)v1 + 1269) = WORD2(v6);
    *v4 = v6 | 0x20;
    v7 = *((_QWORD *)v1 + 200);
    if (v7)
    {
      *(_BYTE *)(v7 + 177) = (*(_DWORD *)(*(_QWORD *)(v7 + 80) + 1265) & 0x20) == 0;
      if ((*(_QWORD *)(v7 + 360) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v7 + 360) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v8 = v7 + 328;
        *(_QWORD *)(v7 + 352) = 0;
        WTF::MonotonicTime::now(this);
        WebCore::TimerBase::setNextFireTime(v8, v9 + 0.1);
      }
    }
  }
  v10 = *((_QWORD *)v1 + 200);
  if (v10
    && (v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 80) + 40) + 8) + 528)) != 0
    && (v12 = *(_QWORD *)(v11 + 8)) != 0
    && (v13 = *(_QWORD *)(v12 + 24)) != 0
    && (*(_BYTE *)(v10 + 88) & 0x10) != 0
    && (v14 = *(_QWORD *)(v13 + 8)) != 0
    && !*(_BYTE *)(v14 + 544))
  {
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 32) + 248))(*(_QWORD *)(v10 + 32));
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 32) + 256))(*(_QWORD *)(v10 + 32));
    v34 = (uint64_t (**)())"MediaElementSession";
    v35 = 20;
    v36 = "pageAllowsPlaybackAfterResuming";
    v37 = v33;
    if (*(_BYTE *)(v32 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v34, "returning FALSE");
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(*((_QWORD *)v1 + 5) + 8) + 1960, (_QWORD *)v1 + 20, (uint64_t)&v34);
  }
  else
  {
    v15 = *((_QWORD *)v1 + 228);
    v16 = *((_QWORD *)v1 + 229);
    v34 = (uint64_t (**)())"HTMLMediaElement";
    v35 = 17;
    v36 = "setPausedInternal";
    v37 = v16;
    v17 = *(unsigned __int8 *)(v15 + 12);
    if (v17)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v34);
      v17 = 0;
    }
    v18 = *v4;
    v19 = v18 & 0xFFFFFFFFFFFBFFFFLL | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 1269) << 32);
    *v4 = v18 & 0xFFFBFFFF | (v17 << 18);
    *(_WORD *)((char *)v1 + 1269) = WORD2(v19);
    WebCore::HTMLMediaElement::scheduleUpdatePlayState((uint64_t (**)())v1);
  }
  v21 = (WTF::MonotonicTime *)*((_QWORD *)v1 + 200);
  if (v21)
  {
    v22 = WebCore::MediaElementSession::removeBehaviorRestriction(v21, 16);
    v23 = *((_QWORD *)v1 + 200);
    if ((*(_QWORD *)(v23 + 360) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(v23 + 360) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v24 = v23 + 328;
      *(_QWORD *)(v23 + 352) = 0;
      WTF::MonotonicTime::now(v22);
      WebCore::TimerBase::setNextFireTime(v24, v25 + 0.1);
    }
  }
  v26 = *((_QWORD *)v1 + 120);
  if (v26)
  {
    if (*(_DWORD *)(v26 + 4) == 1)
    {
      v27 = (unsigned int *)**((_QWORD **)v1 + 91);
      if (!v27 || (v28 = atomic_load(v27), v28 == 1))
      {
        v29 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v29 = off_1E33C58C0;
        *(_QWORD *)(v29 + 8) = WebCore::HTMLMediaElement::prepareForLoad;
        *(_QWORD *)(v29 + 16) = 0;
        *(_QWORD *)(v29 + 24) = v1;
        v34 = (uint64_t (**)())v29;
        WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>((uint64_t)v1, 9, (uint64_t)v1 + 720, &v34);
        v30 = v34;
        v34 = 0;
        if (v30)
          (*((void (**)(uint64_t (**)()))*v30 + 1))(v30);
      }
    }
  }
  return WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)v1, v20);
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLMediaElement::resume(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::resume((WebCore::HTMLMediaElement *)((char *)this - 112));
}

BOOL WebCore::HTMLMediaElement::elementIsHidden(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1992);
  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3 && *(_QWORD *)(v2 + 56))
    return 0;
  if (*((_DWORD *)this + 270))
    return 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v6 = *(_QWORD *)(v5 + 528);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if (!*(_BYTE *)(v5 + 3437) && (*(_WORD *)(v9 + 658) & 4) != 0)
            return 0;
        }
      }
    }
  }
  v10 = *((_QWORD *)this + 142);
  return !v10 || *(_BYTE *)(v10 + 225) == 0;
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::visibilityStateChanged(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::visibilityStateChanged((WebCore::HTMLMediaElement *)((char *)this - 208));
}

WebCore::RenderVideo *WebCore::HTMLMediaElement::setRequiresTextTrackRepresentation(WebCore::RenderVideo *this, int a2)
{
  unsigned int *v2;
  unint64_t v3;
  WebCore::RenderVideo *v4;
  __int16 v5;
  unint64_t v6;
  uint64_t v7;
  WebCore::RenderVideo *v8;
  uint64_t v9;

  v2 = (unsigned int *)((char *)this + 1265);
  v3 = *(unsigned int *)((char *)this + 1265) | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  if (((((v3 & 0x40000000000) == 0) ^ a2) & 1) == 0)
  {
    v4 = this;
    v5 = 1024;
    if (!a2)
      v5 = 0;
    v6 = v3 & 0xFFFFFBFFFFFFFFFFLL;
    *v2 = v6;
    *(_WORD *)((char *)this + 1269) = WORD2(v6) | v5;
    this = (WebCore::RenderVideo *)WebCore::HTMLMediaElement::ensureMediaControls(this);
    if ((_DWORD)this)
    {
      v7 = *((_QWORD *)v4 + 202);
      v8 = *(WebCore::RenderVideo **)(v7 + 24);
      if (v8)
      {
        WebCore::MediaControlTextTrackContainerElement::updateTextTrackRepresentationIfNeeded(*(unsigned int **)(v7 + 24));
        this = WebCore::MediaControlTextTrackContainerElement::updateSizes(v8, (WTF::StringImpl *)1);
      }
      if (*((int *)v4 + 320) >= 1
        && *((int *)v4 + 321) >= 1
        && ((*v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32)) & 0x40000000000) != 0)
      {
        v9 = *(_QWORD *)(*((_QWORD *)v4 + 202) + 24);
        if (v9)
        {
          this = *(WebCore::RenderVideo **)(v9 + 144);
          if (this)
            return (WebCore::RenderVideo *)(*(uint64_t (**)(WebCore::RenderVideo *, uint64_t))(*(_QWORD *)this + 40))(this, (uint64_t)v4 + 1272);
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::HTMLMediaElement::setTextTrackRepresentation(WebCore::HTMLMediaElement *this, WebCore::TextTrackRepresentation *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  void *v8;
  __n128 v9;
  BOOL v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *result;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  _QWORD v49[2];

  v4 = *((_QWORD *)this + 142);
  if (v4)
  {
    v5 = *(unsigned __int8 **)v4;
    if (__ldaxr(*(unsigned __int8 **)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_6:
    ++*((_QWORD *)v5 + 1);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
    (*(void (**)(_QWORD, WebCore::TextTrackRepresentation *))(**(_QWORD **)(v4 + 72) + 984))(*(_QWORD *)(v4 + 72), a2);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  if (a2)
  {
    (*(void (**)(WebCore::TextTrackRepresentation *))(*(_QWORD *)a2 + 48))(a2);
    v10 = (int)v8 < 1 || SHIDWORD(v8) <= 0;
    if (v10)
    {
      v11 = *((float *)this + 278);
      v12 = *((float *)this + 279);
      v13 = floorf(v11);
      v14 = 2147500000.0;
      if (v13 < 2147500000.0)
      {
        v14 = -2147500000.0;
        v10 = v13 <= -2147500000.0;
        v15 = (float)(int)v13;
        if (!v10)
          v14 = v15;
      }
      v16 = floorf(v12);
      v17 = 2147500000.0;
      if (v16 < 2147500000.0)
      {
        v17 = -2147500000.0;
        v10 = v16 <= -2147500000.0;
        v18 = (float)(int)v16;
        if (!v10)
          v17 = v18;
      }
      v19 = v11 + *((float *)this + 280);
      v20 = v12 + *((float *)this + 281);
      v21 = ceilf(v19);
      v22 = 2147500000.0;
      if (v21 < 2147500000.0)
      {
        v22 = -2147500000.0;
        if (v21 > -2147500000.0)
          v22 = (float)(int)v21;
      }
      v23 = ceilf(v20);
      v24 = 2147500000.0;
      if (v23 < 2147500000.0)
      {
        v24 = -2147500000.0;
        if (v23 > -2147500000.0)
          v24 = (float)(int)v23;
      }
      if (v14 >= 2147500000.0)
      {
        v25 = 0x7FFFFFFFLL;
      }
      else if (v14 <= -2147500000.0)
      {
        v25 = 0x80000000;
      }
      else
      {
        v25 = (int)v14;
      }
      if (v17 >= 2147500000.0)
      {
        v26 = 0x7FFFFFFF00000000;
      }
      else if (v17 <= -2147500000.0)
      {
        v26 = 0x8000000000000000;
      }
      else
      {
        v26 = (unint64_t)(int)v17 << 32;
      }
      v27 = v22 - v14;
      v28 = v24 - v17;
      v29 = 0x7FFFFFFFLL;
      v30 = 0x80000000;
      if (v27 > -2147500000.0)
        v30 = (int)v27;
      if (v27 < 2147500000.0)
        v29 = v30;
      v31 = 0x7FFFFFFF00000000;
      v9.n128_u64[0] = 0x4F0000004F000000;
      v32 = 0x8000000000000000;
      if (v28 > -2147500000.0)
        v32 = (unint64_t)(int)v28 << 32;
      if (v28 < 2147500000.0)
        v31 = v32;
      v49[0] = v26 | v25;
      v49[1] = v31 | v29;
      (*(void (**)(WebCore::TextTrackRepresentation *, _QWORD *, __n128))(*(_QWORD *)a2 + 40))(a2, v49, v9);
    }
    v33 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v33 + 24) += 2;
    result = (unsigned int *)*((_QWORD *)this + 37);
    if (result)
      goto LABEL_83;
    result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 1;
    *((_QWORD *)result + 1) = this;
    v35 = (unsigned int *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = result;
    if (!v35)
      goto LABEL_83;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v8);
    }
    result = (unsigned int *)*((_QWORD *)this + 37);
    if (result)
    {
LABEL_83:
      do
        v38 = __ldaxr(result);
      while (__stlxr(v38 + 1, result));
    }
    v39 = *(unsigned int **)(v33 + 1888);
    *(_QWORD *)(v33 + 1888) = result;
    if (v39)
    {
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        atomic_store(1u, v39);
        result = (unsigned int *)WTF::fastFree((WTF *)v39, v8);
      }
    }
    if (*(_DWORD *)(v33 + 24) == 2)
    {
      v45 = *(_WORD *)(v33 + 30);
      if ((v45 & 0x400) == 0)
      {
        v46 = *(_WORD *)(v33 + 28);
        if ((v46 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v33, v8);
        }
        else
        {
          if ((v46 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v33 + 160) + 16))(*(_QWORD *)(v33 + 160));
            v45 = *(_WORD *)(v33 + 30);
          }
          *(_WORD *)(v33 + 30) = v45 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
        }
      }
    }
    else
    {
      *(_DWORD *)(v33 + 24) -= 2;
    }
  }
  else
  {
    v42 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v42 + 24) += 2;
    result = *(unsigned int **)(v42 + 1888);
    *(_QWORD *)(v42 + 1888) = 0;
    if (result)
    {
      do
      {
        v43 = __ldaxr(result);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, result));
      if (!v44)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
    }
    if (*(_DWORD *)(v42 + 24) == 2)
    {
      v47 = *(_WORD *)(v42 + 30);
      if ((v47 & 0x400) == 0)
      {
        v48 = *(_WORD *)(v42 + 28);
        if ((v48 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v42, a2);
        }
        else
        {
          if ((v48 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v42 + 160) + 16))(*(_QWORD *)(v42 + 160));
            v47 = *(_WORD *)(v42 + 30);
          }
          *(_WORD *)(v42 + 30) = v47 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 72))(v42);
        }
      }
    }
    else
    {
      *(_DWORD *)(v42 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLMediaElement::webkitShowPlaybackTargetPicker(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::MonotonicTime *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  WebCore::MediaElementSession *v8;
  __int16 v10;
  __int16 v11;
  _QWORD v12[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v12[0] = "HTMLMediaElement";
  v12[1] = 17;
  v12[2] = "webkitShowPlaybackTargetPicker";
  v12[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  if (WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8)))
  {
    *((_BYTE *)this + 1699) = 1;
    v4 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    if (!v4)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v4 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    }
    WebCore::MediaElementSession::removeBehaviorRestriction(v4, 43367);
    v5 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
    *(_DWORD *)(v5 + 24) += 2;
    WebCore::Document::noteUserInteractionWithMediaElement((unsigned int *)v5, v6);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v10 = *(_WORD *)(v5 + 30);
      if ((v10 & 0x400) == 0)
      {
        v11 = *(_WORD *)(v5 + 28);
        if ((v11 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, v7);
        }
        else
        {
          if ((v11 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v10 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v10 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v8 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  if (!v8)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v8 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
  }
  return WebCore::MediaElementSession::showPlaybackTargetPicker(v8);
}

uint64_t (**WebCore::HTMLMediaElement::wirelessRoutesAvailableDidChange(uint64_t (**this)()))()
{
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  WebCore::RemotePlayback *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;
  _QWORD v12[4];

  if (!*((_BYTE *)this + 1696))
  {
    v1 = (uint64_t)this;
    v2 = this[200];
    if (!v2)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)this);
      v2 = *(uint64_t (**)())(v1 + 1600);
    }
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 4) + 248))(*((_QWORD *)v2 + 4));
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 4) + 256))(*((_QWORD *)v2 + 4));
    v12[0] = "MediaElementSession";
    v12[1] = 20;
    v12[2] = "hasWirelessPlaybackTargets";
    v12[3] = v4;
    v5 = (unsigned __int8 *)v2 + 249;
    if (*(_BYTE *)(v3 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v12, "returning ");
    }
    v7 = *v5;
    v8 = *(WebCore::RemotePlayback **)(v1 + 1840);
    ++*((_DWORD *)v8 + 6);
    WebCore::RemotePlayback::availabilityChanged((uint64_t)v8, v7);
    if (*((_DWORD *)v8 + 6) == 1)
    {
      WebCore::RemotePlayback::~RemotePlayback(v8, v9);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v8 + 6);
    }
    return WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent((uint64_t (**)())v1, 1);
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::wirelessRoutesAvailableDidChange(uint64_t (**this)()))()
{
  return WebCore::HTMLMediaElement::wirelessRoutesAvailableDidChange(this - 18);
}

_QWORD *WebCore::HTMLMediaElement::mediaPlayerCurrentPlaybackTargetIsWirelessChanged(WebCore::HTMLMediaElement *this, char a2)
{
  if (!*((_QWORD *)this + 142))
    a2 = 0;
  return WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget(this, a2);
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerCurrentPlaybackTargetIsWirelessChanged(WebCore::HTMLMediaElement *this, char a2)
{
  if (!*((_QWORD *)this + 120))
    a2 = 0;
  return WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

uint64_t (**WebCore::HTMLMediaElement::setWirelessPlaybackTarget(_QWORD *a1, _QWORD *a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  uint64_t v11;
  uint64_t (**result)();
  void *v13;
  bmalloc::api *v14;
  void *v15;
  _QWORD v16[4];
  unsigned __int8 v17;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = a1[228];
  v6 = a1[229];
  v16[0] = "HTMLMediaElement";
  v16[1] = 17;
  v16[2] = "setWirelessPlaybackTarget";
  v16[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v16);
  v7 = a1[142];
  if (v7)
  {
    v8 = *(unsigned __int8 **)v7;
    if (__ldaxr(*(unsigned __int8 **)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_8:
    ++*((_QWORD *)v8 + 1);
    v10 = __ldxr(v8);
    if (v10 == 1)
    {
      if (!__stlxr(0, v8))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_13:
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 72) + 768))(*(_QWORD *)(v7 + 72), a2);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
  }
  v11 = a1[230];
  ++*(_DWORD *)(v11 + 24);
  result = WebCore::RemotePlayback::shouldPlayToRemoteTargetChanged((uint64_t (**)())v11, (void *)v17);
  if (*(_DWORD *)(v11 + 24) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback((WebCore::RemotePlayback *)v11, v13);
    return (uint64_t (**)())bmalloc::api::isoDeallocate(v14, v15);
  }
  else
  {
    --*(_DWORD *)(v11 + 24);
  }
  return result;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::setWirelessPlaybackTarget(uint64_t a1, _QWORD *a2))()
{
  return WebCore::HTMLMediaElement::setWirelessPlaybackTarget((_QWORD *)(a1 - 144), a2);
}

unsigned __int8 *WebCore::HTMLMediaElement::setShouldPlayToPlaybackTarget(unsigned __int8 *this, uint64_t a2)
{
  uint64_t v2;
  WebCore::HTMLMediaElement *v4;
  unsigned __int8 *v5;
  int v7;
  char v8;

  v2 = *((_QWORD *)this + 142);
  if (v2)
  {
    v4 = (WebCore::HTMLMediaElement *)this;
    v5 = *(unsigned __int8 **)v2;
    if (__ldaxr(*(unsigned __int8 **)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_6:
    ++*((_QWORD *)v5 + 1);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 72) + 776))(*(_QWORD *)(v2 + 72), a2);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 760))(*(_QWORD *)(v2 + 72));
    WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget(v4, v8);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLMediaElement::setShouldPlayToPlaybackTarget(unsigned __int8 *this, uint64_t a2)
{
  uint64_t v2;
  WebCore::HTMLMediaElement *v4;
  unsigned __int8 *v5;
  int v7;
  char v8;

  v2 = *((_QWORD *)this + 124);
  if (v2)
  {
    v4 = (WebCore::HTMLMediaElement *)(this - 144);
    v5 = *(unsigned __int8 **)v2;
    if (__ldaxr(*(unsigned __int8 **)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_6:
    ++*((_QWORD *)v5 + 1);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 72) + 776))(*(_QWORD *)(v2 + 72), a2);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 760))(*(_QWORD *)(v2 + 72));
    WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget(v4, v8);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return this;
}

uint64_t (**WebCore::HTMLMediaElement::playbackTargetPickerWasDismissed(WebCore::HTMLMediaElement *this))()
{
  uint64_t v1;
  uint64_t (**result)();
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = *((_QWORD *)this + 230);
  ++*(_DWORD *)(v1 + 24);
  result = WebCore::RemotePlayback::playbackTargetPickerWasDismissed((uint64_t (**)())v1);
  if (*(_DWORD *)(v1 + 24) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback((WebCore::RemotePlayback *)v1, v3);
    return (uint64_t (**)())bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --*(_DWORD *)(v1 + 24);
  }
  return result;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::playbackTargetPickerWasDismissed(WebCore::HTMLMediaElement *this))()
{
  uint64_t v1;
  uint64_t (**result)();
  void *v3;
  bmalloc::api *v4;
  void *v5;

  v1 = *((_QWORD *)this + 212);
  ++*(_DWORD *)(v1 + 24);
  result = WebCore::RemotePlayback::playbackTargetPickerWasDismissed((uint64_t (**)())v1);
  if (*(_DWORD *)(v1 + 24) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback((WebCore::RemotePlayback *)v1, v3);
    return (uint64_t (**)())bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --*(_DWORD *)(v1 + 24);
  }
  return result;
}

uint64_t (**WebCore::HTMLMediaElement::remoteHasAvailabilityCallbacksChanged(uint64_t (**this)()))()
{
  uint64_t (**v1)();
  int v2;
  uint64_t v3;
  uint64_t (*v4)();
  unint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  BOOL v11;
  uint64_t v12;
  WebCore::PlatformMediaSessionManager *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  unsigned __int8 v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  WebCore::PlatformMediaSessionManager *v25;
  BOOL v26;

  v1 = this;
  if (*((_BYTE *)this + 1696))
  {
    v2 = 0;
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (this = *(uint64_t (***)())(v3 + 96)) == 0)
    this = (uint64_t (**)())WebCore::threadGlobalDataSlow((WebCore *)this);
  v4 = this[5];
  if (!v4)
  {
    v20 = this;
    this = (uint64_t (**)())WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)this);
    v4 = v20[5];
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0)
  {
    v15 = v5 & 0xFFFFFFFFFFFFLL;
    v16 = *(unsigned int *)(v15 + 28);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD **)(v15 + 16);
      v18 = *((_QWORD *)v4 + 308);
      v19 = 32 * v16;
      while (*v17 != v18)
      {
        v17 += 4;
        v19 -= 32;
        if (!v19)
          goto LABEL_9;
      }
      goto LABEL_11;
    }
  }
LABEL_9:
  v6 = v1[230];
  v7 = *((_QWORD *)v6 + 11);
  if (v7 && *(_DWORD *)(v7 - 12))
  {
LABEL_11:
    v2 = 1;
    goto LABEL_13;
  }
  v2 = *((_DWORD *)v6 + 35) != 0;
LABEL_13:
  v21 = v2;
  if (*((unsigned __int8 *)v1 + 1648) != v2)
  {
    v8 = v1[228];
    v9 = v1[229];
    v22 = "HTMLMediaElement";
    v23 = 17;
    v24 = "remoteHasAvailabilityCallbacksChanged";
    v25 = (WebCore::PlatformMediaSessionManager *)v9;
    if (*((_BYTE *)v8 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v22, "hasListeners: ");
      v2 = v21;
    }
    *((_BYTE *)v1 + 1648) = v2;
    v10 = v1[200];
    if (!v10)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v1);
      v10 = v1[200];
      v2 = v21;
    }
    v11 = v2 != 0;
    v26 = v2 != 0;
    v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v10 + 4) + 248))(*((_QWORD *)v10 + 4));
    v13 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v10 + 4) + 256))(*((_QWORD *)v10 + 4));
    v22 = "MediaElementSession";
    v23 = 20;
    v24 = "setHasPlaybackTargetAvailabilityListeners";
    v25 = v13;
    if (*(_BYTE *)(v12 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      v13 = (WebCore::PlatformMediaSessionManager *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v22);
      v11 = v26;
    }
    *((_BYTE *)v10 + 250) = v11;
    v14 = WebCore::PlatformMediaSessionManager::sharedManager(v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 192))(v14);
    return WebCore::HTMLMediaElement::scheduleUpdateMediaState(v1);
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::dispatchEvent(WebCore::HTMLMediaElement *this, WebCore::Event *a2, WebCore::Event *a3)
{
  WebCore::HTMLMediaElement *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t StatusReg;
  uint64_t v10;
  WebCore::HTMLMediaElement *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int16 v26;
  __int16 v27;
  WTF *v28;
  void *v29;
  _QWORD v30[4];

  v4 = this;
  v5 = *((_QWORD *)this + 228);
  v6 = *((_QWORD *)this + 229);
  v30[0] = "HTMLMediaElement";
  v30[1] = 17;
  v30[2] = "dispatchEvent";
  v30[3] = v6;
  v7 = (uint64_t *)((char *)a2 + 24);
  if (*(_BYTE *)(v5 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::AtomString>((uint64_t)&WebCore::LogMedia, 4, (WTF::Logger::LogSiteIdentifier *)v30, v7);
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (v11 = *(WebCore::HTMLMediaElement **)(v10 + 96)) == 0)
  {
    this = (WebCore::HTMLMediaElement *)WebCore::threadGlobalDataSlow(this);
    v11 = this;
  }
  v12 = *((_QWORD *)v11 + 5);
  if (!v12)
  {
    this = (WebCore::HTMLMediaElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *((_QWORD *)v11 + 5);
  }
  if (*v7 == *(_QWORD *)(v12 + 752))
  {
    if (*((_BYTE *)v4 + 1699))
    {
      v13 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
      *(_DWORD *)(v13 + 24) += 2;
      WTF::MonotonicTime::now(this);
      *(_QWORD *)(v13 + 2320) = v15;
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        v26 = *(_WORD *)(v13 + 30);
        if ((v26 & 0x400) == 0)
        {
          v27 = *(_WORD *)(v13 + 28);
          if ((v27 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v13, v14);
          }
          else
          {
            if ((v27 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
              v26 = *(_WORD *)(v13 + 30);
            }
            *(_WORD *)(v13 + 30) = v26 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
          }
        }
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)v4);
  }
  result = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v4, a2, a3);
  if (!*((_BYTE *)v4 + 1084) && !*((_DWORD *)v4 + 270))
  {
    v17 = *(_QWORD *)(StatusReg + 736);
    if (!v17 || (v18 = *(_QWORD *)(v17 + 96)) == 0)
    {
      result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v18 = result;
    }
    v19 = *(_QWORD *)(v18 + 40);
    if (!v19)
    {
      result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v18);
      v19 = *(_QWORD *)(v18 + 40);
    }
    if (*v7 == *(_QWORD *)(v19 + 2368))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 528);
      if (v20 && (v21 = *(_QWORD *)(v20 + 8)) != 0 && (v22 = *(_QWORD *)(v21 + 24)) != 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          ++*(_DWORD *)v23;
      }
      else
      {
        v23 = 0;
      }
      if (*(_QWORD *)(*((_QWORD *)v4 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 16);
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v25 = off_1E33C5CB0;
        v30[0] = v25;
        (*(void (**)(uint64_t, WebCore::HTMLMediaElement *, _QWORD *))(*(_QWORD *)v24 + 1152))(v24, v4, v30);
        result = v30[0];
        v30[0] = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        if (*(_DWORD *)v23 == 1)
        {
          WebCore::Page::~Page(v23);
          return WTF::fastFree(v28, v29);
        }
        else
        {
          --*(_DWORD *)v23;
        }
      }
      else
      {
        result = 96;
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::addEventListener(WebCore::HTMLMediaElement *this, WTF::StringImpl **a2, uint64_t *a3, unsigned __int8 *a4)
{
  WebCore::HTMLMediaElement *v7;
  unint64_t StatusReg;
  uint64_t v9;
  WebCore::HTMLMediaElement *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::HTMLMediaElement *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::PlatformMediaSessionManager *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::PlatformMediaSessionManager *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  WebCore::PlatformMediaSessionManager *v39;
  char v40;

  v7 = this;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9 || (v10 = *(WebCore::HTMLMediaElement **)(v9 + 96)) == 0)
  {
    this = (WebCore::HTMLMediaElement *)WebCore::threadGlobalDataSlow(this);
    v10 = this;
  }
  v11 = *((_QWORD *)v10 + 5);
  if (!v11)
  {
    this = (WebCore::HTMLMediaElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *((_QWORD *)v10 + 5);
  }
  if (*a2 == *(WTF::StringImpl **)(v11 + 2448))
    this = (WebCore::HTMLMediaElement *)WebCore::HTMLMediaElement::updateShouldContinueAfterNeedKey((unsigned __int8 *)v7);
  v12 = *(_QWORD *)(StatusReg + 736);
  if (!v12 || (v13 = *(WebCore::HTMLMediaElement **)(v12 + 96)) == 0)
  {
    this = (WebCore::HTMLMediaElement *)WebCore::threadGlobalDataSlow(this);
    v13 = this;
  }
  v14 = *((_QWORD *)v13 + 5);
  if (!v14)
  {
    this = (WebCore::HTMLMediaElement *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *((_QWORD *)v13 + 5);
  }
  if (*a2 != *(WTF::StringImpl **)(v14 + 2464))
    return WebCore::Node::addEventListener(v7, a2, a3, a4);
  v16 = *(_QWORD *)(StatusReg + 736);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
    v17 = WebCore::threadGlobalDataSlow(this);
  v18 = *(_QWORD *)(v17 + 40);
  if (!v18)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
    v18 = *(_QWORD *)(v17 + 40);
  }
  v19 = *((_QWORD *)v7 + 2);
  if ((v19 & 0x1000000000000) != 0)
  {
    v31 = v19 & 0xFFFFFFFFFFFFLL;
    v32 = *(unsigned int *)(v31 + 28);
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD **)(v31 + 16);
      v34 = *(_QWORD *)(v18 + 2464);
      v35 = 32 * v32;
      while (*v33 != v34)
      {
        v33 += 4;
        v35 -= 32;
        if (!v35)
          goto LABEL_21;
      }
      goto LABEL_23;
    }
  }
LABEL_21:
  v20 = *((_QWORD *)v7 + 230);
  v21 = *(_QWORD *)(v20 + 88);
  if (v21 && *(_DWORD *)(v21 - 12))
  {
LABEL_23:
    v22 = 1;
    goto LABEL_25;
  }
  v22 = *(_DWORD *)(v20 + 140) != 0;
LABEL_25:
  result = WebCore::Node::addEventListener(v7, a2, a3, a4);
  if ((_DWORD)result)
  {
    if (!*((_BYTE *)v7 + 1696))
    {
      if (!v22)
      {
        *((_BYTE *)v7 + 1648) = 1;
        v23 = *((_QWORD *)v7 + 200);
        if (!v23)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(v7);
          v23 = *((_QWORD *)v7 + 200);
        }
        v24 = 1;
        WebCore::PlatformMediaSession::setActive(v23, 1);
        v25 = *((_QWORD *)v7 + 200);
        if (!v25)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(v7);
          v25 = *((_QWORD *)v7 + 200);
        }
        v40 = 1;
        v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 32) + 248))(*(_QWORD *)(v25 + 32));
        v27 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 32) + 256))(*(_QWORD *)(v25 + 32));
        v36 = "MediaElementSession";
        v37 = 20;
        v38 = "setHasPlaybackTargetAvailabilityListeners";
        v39 = v27;
        if (*(_BYTE *)(v26 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          v27 = (WebCore::PlatformMediaSessionManager *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v36);
          v24 = v40;
        }
        *(_BYTE *)(v25 + 250) = v24;
        v28 = WebCore::PlatformMediaSessionManager::sharedManager(v27);
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 192))(v28);
      }
      v29 = *((_QWORD *)v7 + 228);
      v30 = (WebCore::PlatformMediaSessionManager *)*((_QWORD *)v7 + 229);
      v36 = "HTMLMediaElement";
      v37 = 17;
      v38 = "addEventListener";
      v39 = v30;
      if (*(_BYTE *)(v29 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v36, "'webkitplaybacktargetavailabilitychanged'");
      WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent((uint64_t (**)())v7, 0);
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::removeEventListener(WebCore *a1, WTF::StringImpl **a2, WebCore::EventListener *a3, unsigned __int8 *a4)
{
  WebCore *v7;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  NSObject *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::Logger *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  size_t v86;
  _BYTE *v87;
  _BYTE *v88;
  unsigned __int128 v89;
  char v90;
  int v91;
  WebCore *v92;
  uint64_t v93;
  _QWORD v94[4];
  WTF::Logger *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  __int128 buf;
  const char *v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  uint64_t v105;

  v7 = a1;
  v105 = *MEMORY[0x1E0C80C00];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(StatusReg + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  if (*a2 == *(WTF::StringImpl **)(v11 + 2448))
    WebCore::HTMLMediaElement::updateShouldContinueAfterNeedKey((unsigned __int8 *)v7);
  v12 = (WebCore *)WebCore::Node::removeEventListener(v7, a2, a3, a4);
  v13 = v12;
  v14 = *(_QWORD *)(StatusReg + 736);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
    v15 = WebCore::threadGlobalDataSlow(v12);
  v16 = *(_QWORD *)(v15 + 40);
  if (!v16)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
    v16 = *(_QWORD *)(v15 + 40);
  }
  v17 = *(WTF::StringImpl **)(v16 + 2464);
  if (*a2 == v17)
    result = 0;
  else
    result = v13;
  if (*a2 == v17 && ((v13 ^ 1) & 1) == 0)
  {
    v19 = *(_QWORD *)(StatusReg + 736);
    if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
      v20 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v21 = *(_QWORD *)(v20 + 40);
    if (!v21)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
      v21 = *(_QWORD *)(v20 + 40);
    }
    v22 = *((_QWORD *)v7 + 2);
    if ((v22 & 0x1000000000000) != 0
      && (v79 = v22 & 0xFFFFFFFFFFFFLL, v80 = *(unsigned int *)(v79 + 28), (_DWORD)v80))
    {
      v81 = *(_QWORD **)(v79 + 16);
      v82 = *(_QWORD *)(v21 + 2464);
      v83 = 32 * v80;
      while (*v81 != v82)
      {
        v81 += 4;
        v83 -= 32;
        if (!v83)
          goto LABEL_24;
      }
      v26 = 0;
    }
    else
    {
LABEL_24:
      v23 = *((_QWORD *)v7 + 230);
      v24 = *(_QWORD *)(v23 + 88);
      v25 = v24 && *(_DWORD *)(v24 - 12) || *(_DWORD *)(v23 + 140) != 0;
      v26 = !v25;
    }
    v27 = *((_QWORD *)v7 + 228);
    v28 = *((_QWORD *)v7 + 229);
    v94[0] = "HTMLMediaElement";
    v94[1] = 17;
    v94[2] = "removeEventListener";
    v94[3] = v28;
    if (!*(_BYTE *)(v27 + 12))
      goto LABEL_119;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v94);
    WTF::String::String((WTF::String *)&v97, "removed last listener = ");
    if (v26)
      v29 = 5;
    else
      v29 = 6;
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = (WTF::StringImpl *)buf;
    v32 = v98;
    if (v98)
    {
      v33 = *((_DWORD *)v98 + 1);
      if (v97)
      {
LABEL_35:
        v34 = *((_DWORD *)v97 + 1);
        goto LABEL_36;
      }
    }
    else
    {
      v33 = 0;
      if (v97)
        goto LABEL_35;
    }
    v34 = 0;
LABEL_36:
    v93 = v29;
    if ((_QWORD)buf)
      v35 = *(_DWORD *)(buf + 4);
    else
      v35 = 0;
    if (((v35 | v34) & 0x80000000) == 0)
    {
      v36 = __OFADD__(v34, v35);
      v37 = v34 + v35;
      v38 = v36;
      if ((v33 & 0x80000000) == 0 && !v38)
      {
        v39 = (v33 + v37);
        if (!__OFADD__(v33, v37))
        {
          if (v98 && (*((_BYTE *)v98 + 16) & 4) == 0)
          {
            v40 = 0;
            goto LABEL_52;
          }
          if (v97)
          {
            v41 = *((_DWORD *)v97 + 4);
            v40 = (v41 >> 2) & 1;
            if (!(_QWORD)buf || (v41 & 4) == 0)
            {
LABEL_52:
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v40, v98, (uint64_t)v97, buf, &v99);
              if (v99)
              {
                v42 = v29;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2)
                    WTF::StringImpl::destroy(v31, v30);
                  else
                    *(_DWORD *)v31 -= 2;
                }
                goto LABEL_56;
              }
LABEL_164:
              __break(0xC471u);
              return result;
            }
LABEL_51:
            v40 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
            goto LABEL_52;
          }
          if ((_QWORD)buf)
            goto LABEL_51;
          if (!(_DWORD)v39)
          {
            v84 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            goto LABEL_162;
          }
          if ((v39 & 0x80000000) == 0)
          {
            result = WTF::tryFastCompactMalloc((WTF *)(v39 + 20));
            v84 = buf;
            if ((_QWORD)buf)
            {
              v85 = (_BYTE *)(buf + 20);
              *(_DWORD *)buf = 2;
              *(_DWORD *)(v84 + 4) = v39;
              *(_QWORD *)(v84 + 8) = v84 + 20;
              *(_DWORD *)(v84 + 16) = 4;
              if (v32)
              {
                v30 = (WTF::StringImpl *)*((_QWORD *)v32 + 1);
                v86 = *((unsigned int *)v32 + 1);
                v42 = v93;
                if ((*((_BYTE *)v32 + 16) & 4) != 0)
                {
                  if ((_DWORD)v86)
                  {
                    if ((_DWORD)v86 == 1)
                      *v85 = *(_BYTE *)v30;
                    else
                      memcpy(v85, v30, v86);
                  }
                  v99 = (WTF::StringImpl *)v84;
LABEL_56:
                  v43 = v97;
                  v97 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, v30);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v44 = v98;
                  v98 = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, v30);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  v45 = qword_1ECE7C4A0;
                  v46 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v46)
                  {
                    WTF::String::utf8();
                    v48 = v95 ? (char *)v95 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v48;
                    _os_log_impl(&dword_1940B8000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v46 = (uint64_t)v95;
                    v95 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 1)
                        v46 = WTF::fastFree((WTF *)v46, v47);
                      else
                        --*(_DWORD *)v46;
                    }
                  }
                  if (WebCore::LogMedia)
                  {
                    v49 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v50 = *v49;
                      if ((v50 & 1) != 0)
                        break;
                      v51 = __ldaxr(v49);
                      if (v51 == v50)
                      {
                        if (!__stxr(v50 | 1, v49))
                        {
                          v91 = v26;
                          v92 = v7;
                          v52 = WTF::Logger::observers((WTF::Logger *)v46);
                          v53 = *(unsigned int *)(v52 + 12);
                          if ((_DWORD)v53)
                          {
                            v54 = *(uint64_t **)v52;
                            v55 = *(_QWORD *)v52 + 8 * v53;
                            v56 = v42 - 1;
                            do
                            {
                              v57 = *v54;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v94);
                              LODWORD(v101) = 0;
                              WTF::String::String((WTF::String *)&v102, "removed last listener = ");
                              v103 = 0;
                              if (v56)
                              {
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v58 = v95;
                              }
                              else
                              {
                                v71 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                                *MEMORY[0x1E0CBEF70] += 2;
                                v58 = v71;
                              }
                              v104 = v58;
                              v95 = 0;
                              v96 = 0;
                              v59 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                              LODWORD(v96) = 3;
                              v95 = v59;
                              v60 = HIDWORD(v96);
                              *((_DWORD *)v59 + 4 * HIDWORD(v96)) = buf;
                              v61 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v59 + 2 * v60 + 1) = v61;
                              *((_DWORD *)v59 + 4 * (v60 + 1)) = (_DWORD)v101;
                              v62 = v102;
                              if (v102)
                                *(_DWORD *)v102 += 2;
                              *((_QWORD *)v59 + 2 * (v60 + 1) + 1) = v62;
                              *((_DWORD *)v59 + 4 * (v60 + 2)) = v103;
                              v63 = v104;
                              if (v104)
                                *(_DWORD *)v104 += 2;
                              *((_QWORD *)v59 + 2 * (v60 + 2) + 1) = v63;
                              HIDWORD(v96) = v60 + 3;
                              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v57 + 16))(v57, &WebCore::LogMedia, 0, &v95);
                              v64 = v95;
                              if (HIDWORD(v96))
                              {
                                v65 = 16 * HIDWORD(v96);
                                v66 = (WTF::StringImpl **)((char *)v95 + 8);
                                do
                                {
                                  v67 = *v66;
                                  *v66 = 0;
                                  if (v67)
                                  {
                                    if (*(_DWORD *)v67 == 2)
                                      WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v47);
                                    else
                                      *(_DWORD *)v67 -= 2;
                                  }
                                  v66 += 2;
                                  v65 -= 16;
                                }
                                while (v65);
                                v64 = v95;
                              }
                              if (v64)
                              {
                                v95 = 0;
                                LODWORD(v96) = 0;
                                WTF::fastFree(v64, v47);
                              }
                              v68 = v104;
                              v104 = 0;
                              if (v68)
                              {
                                if (*(_DWORD *)v68 == 2)
                                  WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v47);
                                else
                                  *(_DWORD *)v68 -= 2;
                              }
                              v69 = v102;
                              v102 = 0;
                              if (v69)
                              {
                                if (*(_DWORD *)v69 == 2)
                                  WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v47);
                                else
                                  *(_DWORD *)v69 -= 2;
                              }
                              v70 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v70)
                              {
                                if (*(_DWORD *)v70 == 2)
                                  WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v47);
                                else
                                  *(_DWORD *)v70 -= 2;
                              }
                              ++v54;
                            }
                            while (v54 != (uint64_t *)v55);
                          }
                          v72 = __ldxr(v49);
                          if (v72 == 1)
                          {
                            v7 = v92;
                            v26 = v91;
                            if (!__stlxr(0, v49))
                              break;
                          }
                          else
                          {
                            __clrex();
                            v7 = v92;
                            v26 = v91;
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  v73 = v99;
                  v99 = 0;
                  if (v73)
                  {
                    if (*(_DWORD *)v73 == 2)
                    {
                      WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v47);
                      if (v26)
                        goto LABEL_120;
                      return 1;
                    }
                    *(_DWORD *)v73 -= 2;
                  }
LABEL_119:
                  if (v26)
                  {
LABEL_120:
                    *((_BYTE *)v7 + 1648) = 0;
                    v74 = *((_QWORD *)v7 + 200);
                    if (!v74)
                    {
                      WebCore::HTMLMediaElement::initializeMediaSession(v7);
                      v74 = *((_QWORD *)v7 + 200);
                    }
                    LOBYTE(v94[0]) = 0;
                    v75 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v74 + 32) + 248))(*(_QWORD *)(v74 + 32));
                    v76 = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v74 + 32) + 256))(*(_QWORD *)(v74 + 32));
                    *(_QWORD *)&buf = "MediaElementSession";
                    *((_QWORD *)&buf + 1) = 20;
                    v101 = "setHasPlaybackTargetAvailabilityListeners";
                    v102 = v76;
                    v77 = *(_BYTE *)(v75 + 12);
                    if (v77)
                    {
                      v77 = 0;
                      if (WebCore::LogMedia)
                      {
                        if (byte_1ECE7C490 >= 3u)
                        {
                          v76 = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&buf);
                          v77 = v94[0];
                        }
                      }
                    }
                    *(_BYTE *)(v74 + 250) = v77;
                    v78 = WebCore::PlatformMediaSessionManager::sharedManager(v76);
                    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 192))(v78);
                    WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())v7);
                  }
                  return 1;
                }
                v87 = &v85[v86];
                if (v86 >= 0x10)
                {
                  v88 = &v85[v86 & 0xFFFFFFF0];
                  do
                  {
                    v89 = (unsigned __int128)vld2q_s8((const char *)v30);
                    v30 = (WTF::StringImpl *)((char *)v30 + 32);
                    *(_OWORD *)v85 = v89;
                    v85 += 16;
                  }
                  while (v85 != v88);
                  v85 = v88;
                }
                while (v85 != v87)
                {
                  v90 = *(_BYTE *)v30;
                  v30 = (WTF::StringImpl *)((char *)v30 + 2);
                  *v85++ = v90;
                }
              }
LABEL_162:
              v99 = (WTF::StringImpl *)v84;
              v42 = v93;
              goto LABEL_56;
            }
          }
        }
      }
    }
    v99 = 0;
    goto LABEL_164;
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::isFullscreen(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  int v2;
  WebCore::HTMLMediaElement *v3;
  BOOL v4;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1992);
  if (!v1)
    return *((_DWORD *)this + 270) != 0;
  v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v2 + 1;
  v3 = *(WebCore::HTMLMediaElement **)(v1 + 56);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 0;
  result = v4 || *((_DWORD *)this + 270) != 0;
  if (v2 == -1)
  {
    result = 286;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(v1 + 8) = v2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::isFullscreen(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 12) + 8) + 1992);
  if (!v1)
    return *((_DWORD *)this + 236) != 0;
  v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v2 + 1;
  v3 = *(_QWORD *)(v1 + 56);
  if (v3)
    v4 = v3 == (_QWORD)this - 136;
  else
    v4 = 0;
  result = v4 || *((_DWORD *)this + 236) != 0;
  if (v2 == -1)
  {
    result = 286;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(v1 + 8) = v2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLMediaElement::enterFullscreen(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::enterFullscreen(this, 1u);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLMediaElement::enterFullscreen(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::enterFullscreen((WebCore::HTMLMediaElement *)((char *)this - 136), 1u);
}

uint64_t WebCore::HTMLMediaElement::setFullscreenMode(WebCore::HTMLMediaElement *this, WTF::String *a2)
{
  WebCore::HTMLMediaElement *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::String *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v55;
  WTF::MonotonicTime *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  double v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD v67[4];
  WTF::Logger *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 buf;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;

  v3 = this;
  v88 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v67[0] = "HTMLMediaElement";
  v67[1] = 17;
  v67[2] = "setFullscreenMode";
  v67[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      v7 = (WTF::String *)*((unsigned int *)this + 270);
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v67);
      WTF::String::String((WTF::String *)&v73, "changed from ");
      v66 = v7;
      WTF::String::number(v7);
      WTF::String::String((WTF::String *)&v71, ", to ");
      WTF::String::number(a2);
      v68 = v73;
      v78 = v72;
      *(_QWORD *)&buf = v74;
      v76 = v70;
      v77 = v71;
      result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v68, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, &v75);
      if (!v75)
      {
        __break(0xC471u);
        return result;
      }
      v10 = v70;
      v70 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v71;
      v71 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v72;
      v72 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v73;
      v73 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v74;
      v74 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = qword_1ECE7C4A0;
      v16 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v16)
      {
        WTF::String::utf8();
        v18 = v68 ? (char *)v68 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v18;
        _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v16 = (uint64_t)v68;
        v68 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
            v16 = WTF::fastFree((WTF *)v16, v17);
          else
            --*(_DWORD *)v16;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v20 = *v19;
          if ((v20 & 1) != 0)
            break;
          v21 = __ldaxr(v19);
          if (v21 == v20)
          {
            if (!__stxr(v20 | 1, v19))
            {
              v22 = WTF::Logger::observers((WTF::Logger *)v16);
              v23 = *(unsigned int *)(v22 + 12);
              if ((_DWORD)v23)
              {
                v24 = *(uint64_t **)v22;
                v65 = *(_QWORD *)v22 + 8 * v23;
                do
                {
                  v25 = *v24;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v67);
                  v80 = 0;
                  WTF::String::String((WTF::String *)&v81, "changed from ");
                  v82 = 0;
                  WTF::String::number((WTF::String *)v66);
                  v84 = 0;
                  WTF::String::String((WTF::String *)&v85, ", to ");
                  v86 = 0;
                  WTF::String::number((WTF::String *)a2);
                  v68 = 0;
                  v69 = 0;
                  v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v69) = 5;
                  v68 = v26;
                  v27 = HIDWORD(v69);
                  *((_DWORD *)v26 + 4 * HIDWORD(v69)) = buf;
                  v28 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                  *((_DWORD *)v26 + 4 * (v27 + 1)) = v80;
                  v29 = v81;
                  if (v81)
                    *(_DWORD *)v81 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                  *((_DWORD *)v26 + 4 * (v27 + 2)) = v82;
                  v30 = v83;
                  if (v83)
                    *(_DWORD *)v83 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                  *((_DWORD *)v26 + 4 * (v27 + 3)) = v84;
                  v31 = v85;
                  if (v85)
                    *(_DWORD *)v85 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                  *((_DWORD *)v26 + 4 * (v27 + 4)) = v86;
                  v32 = v87;
                  if (v87)
                    *(_DWORD *)v87 += 2;
                  *((_QWORD *)v26 + 2 * (v27 + 4) + 1) = v32;
                  HIDWORD(v69) = v27 + 5;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogMedia, 3, &v68);
                  v33 = v68;
                  if (HIDWORD(v69))
                  {
                    v34 = 16 * HIDWORD(v69);
                    v35 = (WTF::StringImpl **)((char *)v68 + 8);
                    do
                    {
                      v36 = *v35;
                      *v35 = 0;
                      if (v36)
                      {
                        if (*(_DWORD *)v36 == 2)
                          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                        else
                          *(_DWORD *)v36 -= 2;
                      }
                      v35 += 2;
                      v34 -= 16;
                    }
                    while (v34);
                    v33 = v68;
                  }
                  if (v33)
                  {
                    v68 = 0;
                    LODWORD(v69) = 0;
                    WTF::fastFree(v33, v17);
                  }
                  v37 = v87;
                  v87 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v38 = v85;
                  v85 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v39 = v83;
                  v83 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v40 = v81;
                  v81 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  ++v24;
                }
                while (v24 != (uint64_t *)v65);
              }
              v42 = __ldxr(v19);
              if (v42 == 1)
              {
                a2 = (WTF::String *)a2;
                if (!__stlxr(0, v19))
                  break;
              }
              else
              {
                __clrex();
                a2 = (WTF::String *)a2;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      this = v75;
      v75 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::HTMLMediaElement *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  v43 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v43 || (v44 = *(_QWORD *)(v43 + 96)) == 0)
    v44 = WebCore::threadGlobalDataSlow(this);
  v45 = *(_QWORD *)(v44 + 40);
  if (!v45)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v44);
    v45 = *(_QWORD *)(v44 + 40);
  }
  v46 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v46);
  *(_DWORD *)(v46 + 16) = 1;
  *(_QWORD *)v46 = off_1E33A4B48;
  *(_QWORD *)(v46 + 8) = 0;
  *(_DWORD *)(v46 + 20) = *(_DWORD *)(v46 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v45 + 2472) != 0);
  v48 = *(_DWORD **)(v45 + 2472);
  if (v48)
    *v48 += 2;
  *(_QWORD *)(v46 + 24) = v48;
  *(_QWORD *)(v46 + 32) = 0;
  *(_QWORD *)(v46 + 40) = 0;
  *(_QWORD *)(v46 + 48) = 0;
  *(_QWORD *)(v46 + 56) = v47;
  *(_QWORD *)(v46 + 64) = 0;
  *(_QWORD *)&buf = v46;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)v3 + 28, (uint64_t)v3, 9, (uint64_t)v3 + 824, (uint64_t *)&buf);
  v49 = (_DWORD *)buf;
  *(_QWORD *)&buf = 0;
  if (v49)
  {
    if (v49[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
    else
      --v49[4];
  }
  *((_BYTE *)v3 + 1085) = (_DWORD)a2 != 2;
  if ((_DWORD)a2 != 2)
  {
    v50 = *((_QWORD *)v3 + 136);
    if (v50)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
      v51 = *((_QWORD *)v3 + 136);
      *((_QWORD *)v3 + 136) = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  v52 = *((_QWORD *)v3 + 142);
  if (v52)
  {
    v53 = *(unsigned __int8 **)v52;
    if (__ldaxr(*(unsigned __int8 **)v52))
    {
      __clrex();
    }
    else if (!__stxr(1u, v53))
    {
      goto LABEL_109;
    }
    MEMORY[0x19AEA534C](v53);
LABEL_109:
    ++*((_QWORD *)v53 + 1);
    v55 = __ldxr(v53);
    if (v55 == 1)
    {
      if (!__stlxr(0, v53))
        goto LABEL_114;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v53);
LABEL_114:
    (*(void (**)(_QWORD, WTF::String *))(**(_QWORD **)(v52 + 72) + 136))(*(_QWORD *)(v52 + 72), a2);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v52);
  }
  *((_DWORD *)v3 + 270) = (_DWORD)a2;
  WebCore::HTMLMediaElement::visibilityStateChanged(v3);
  v57 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (v57)
  {
    v58 = *(_QWORD *)(v57 + 8);
    if (v58)
    {
      v59 = *(_QWORD *)(v58 + 24);
      if (v59)
      {
        v60 = *(_QWORD *)(v59 + 8);
        if (v60)
        {
          v61 = (*(_DWORD *)v60)++;
          if ((*(_QWORD *)(v60 + 1064) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v60 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            *(_QWORD *)(v60 + 1056) = 0;
            WTF::MonotonicTime::now(v56);
            WebCore::TimerBase::setNextFireTime(v60 + 1032, v62 + 0.0);
            v61 = *(_DWORD *)v60 - 1;
          }
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::Page::~Page(v60);
            WTF::fastFree(v63, v64);
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v3 + 2704))(v3);
}

uint64_t WebCore::HTMLMediaElement::prepareForVideoFullscreenStandby(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          ++*(_DWORD *)v4;
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 1112))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16));
          if (*(_DWORD *)v4 == 1)
          {
            WebCore::Page::~Page(v4);
            return WTF::fastFree(v5, v6);
          }
          else
          {
            --*(_DWORD *)v4;
          }
        }
      }
    }
  }
  return this;
}

uint64_t (**WebCore::HTMLMediaElement::didBecomeFullscreenElement(WebCore::HTMLMediaElement *this))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v7;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v8[0] = "HTMLMediaElement";
  v8[1] = 17;
  v8[2] = "didBecomeFullscreenElement";
  v8[3] = v3;
  v7 = *((_DWORD *)this + 270);
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],unsigned int>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8, ", fullscreen mode = ", &v7);
  v4 = *(unsigned int *)((char *)this + 1265);
  v5 = (v4 | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32)) & 0xFFFFFFFCFFFFFFFFLL;
  *(_DWORD *)((char *)this + 1265) = v4;
  *(_WORD *)((char *)this + 1269) = WORD2(v5);
  return WebCore::HTMLMediaElement::scheduleUpdatePlayState((uint64_t (**)())this);
}

WebCore::HTMLMediaElement *WebCore::HTMLMediaElement::willStopBeingFullscreenElement(WebCore::HTMLMediaElement *this)
{
  int v1;

  v1 = *((_DWORD *)this + 270);
  if (v1 == 4 || v1 == 1)
    return (WebCore::HTMLMediaElement *)WebCore::HTMLMediaElement::setFullscreenMode(this, 0);
  return this;
}

uint64_t WebCore::HTMLMediaElement::didStopBeingFullscreenElement(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(unsigned int *)(this + 1265);
  v2 = (v1 | ((unint64_t)*(unsigned __int16 *)(this + 1269) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
  *(_DWORD *)(this + 1265) = v1;
  *(_WORD *)(this + 1269) = WORD2(v2);
  return this;
}

uint64_t WebCore::HTMLMediaElement::platformLayer(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 142);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 88))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

unsigned __int8 *WebCore::HTMLMediaElement::willExitFullscreen(unsigned __int8 *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v4;

  v1 = *((_QWORD *)this + 142);
  if (v1)
  {
    v2 = *(unsigned __int8 **)v1;
    if (__ldaxr(*(unsigned __int8 **)v1))
    {
      __clrex();
    }
    else if (!__stxr(1u, v2))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v2);
LABEL_6:
    ++*((_QWORD *)v2 + 1);
    v4 = __ldxr(v2);
    if (v4 == 1)
    {
      if (!__stlxr(0, v2))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_11:
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 112))(*(_QWORD *)(v1 + 72));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v1);
  }
  return this;
}

void WebCore::HTMLMediaElement::setVideoFullscreenLayer(uint64_t a1, CFTypeRef cf, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  WebCore::MediaControlTextTrackContainerElement *v14;
  uint64_t v15;
  WebCore::Node *ElementSibling;
  WebCore::Element *v17;
  _QWORD v18[4];

  v6 = *(_QWORD *)(a1 + 1824);
  v7 = *(_QWORD *)(a1 + 1832);
  v18[0] = "HTMLMediaElement";
  v18[1] = 17;
  v18[2] = "setVideoFullscreenLayer";
  v18[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v18);
  }
  if (cf)
    CFRetain(cf);
  v9 = *(const void **)(a1 + 1104);
  *(_QWORD *)(a1 + 1104) = cf;
  if (v9)
    CFRelease(v9);
  v10 = *(_QWORD *)(a1 + 1136);
  if (!v10)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
    return;
  }
  v11 = *(unsigned __int8 **)v10;
  if (__ldaxr(*(unsigned __int8 **)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_18:
  ++*((_QWORD *)v11 + 1);
  v13 = __ldxr(v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v11))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  (*(void (**)(_QWORD, CFTypeRef, _QWORD *))(**(_QWORD **)(v10 + 72) + 104))(*(_QWORD *)(v10 + 72), cf, a3);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v10);
  WebCore::Node::invalidateStyle(a1, 3u, 1);
  if ((*(_BYTE *)(a1 + 71) & 1) != 0)
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (!v15 || (*(_WORD *)(v15 + 28) & 8) == 0 || (*(_BYTE *)(v15 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(a1);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v17);
    }
  }
  if (WebCore::HTMLMediaElement::ensureMediaControls((WebCore::HTMLMediaElement *)a1))
  {
    v14 = *(WebCore::MediaControlTextTrackContainerElement **)(*(_QWORD *)(a1 + 1616) + 24);
    if (v14)
      WebCore::MediaControlTextTrackContainerElement::updateDisplay(v14);
  }
}

unsigned __int8 *WebCore::HTMLMediaElement::setVideoFullscreenFrame(unsigned __int8 *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v6;

  *(_OWORD *)(this + 1112) = *(_OWORD *)a2;
  v2 = *((_QWORD *)this + 142);
  if (v2)
  {
    v4 = *(unsigned __int8 **)v2;
    if (__ldaxr(*(unsigned __int8 **)v2))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_6:
    ++*((_QWORD *)v4 + 1);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, v4))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
    (*(void (**)(_QWORD, float, float, float, float))(**(_QWORD **)(v2 + 72) + 120))(*(_QWORD *)(v2 + 72), *(float *)a2, *((float *)a2 + 1), *((float *)a2 + 2), *((float *)a2 + 3));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::hasClosedCaptions(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v2 = *((_QWORD *)this + 142);
  if (v2 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 520))(*(_QWORD *)(v2 + 72)) & 1) != 0)
    return 1;
  v4 = *((_QWORD *)this + 169);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 108);
    v6 = *(unsigned int *)(v4 + 124);
    v7 = *(_DWORD *)(v4 + 68);
    v8 = v6 + v5 + v7;
    if ((_DWORD)v6 + v5 + v7)
    {
      v9 = 0;
      while (1)
      {
        if (v9 >= v6)
        {
          if (v5 <= (int)v9 - (int)v6)
          {
            v10 = *(_DWORD **)(*(_QWORD *)(v4 + 56) + 8 * (-(int)v6 - v5 + v9));
            if (v10[10] != 1)
            {
LABEL_18:
              __break(0xC471u);
              JUMPOUT(0x195C34E54);
            }
          }
          else
          {
            v10 = *(_DWORD **)(*(_QWORD *)(v4 + 96) + 8 * (v9 - v6));
            if (v10[10] != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195C34E74);
            }
          }
        }
        else
        {
          v10 = *(_DWORD **)(*(_QWORD *)(v4 + 112) + 8 * v9);
          if (v10[10] != 1)
            goto LABEL_18;
        }
        if (v10[59] != 3 && v10[57] < 2u)
          return 1;
        if (v8 == ++v9)
          return 0;
      }
    }
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::hasClosedCaptions(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v2 = *((_QWORD *)this + 125);
  if (v2 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 520))(*(_QWORD *)(v2 + 72)) & 1) != 0)
    return 1;
  v4 = *((_QWORD *)this + 152);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 108);
    v6 = *(unsigned int *)(v4 + 124);
    v7 = *(_DWORD *)(v4 + 68);
    v8 = v6 + v5 + v7;
    if ((_DWORD)v6 + v5 + v7)
    {
      v9 = 0;
      while (1)
      {
        if (v9 >= v6)
        {
          if (v5 <= (int)v9 - (int)v6)
          {
            v10 = *(_DWORD **)(*(_QWORD *)(v4 + 56) + 8 * (-(int)v6 - v5 + v9));
            if (v10[10] != 1)
            {
LABEL_18:
              __break(0xC471u);
              JUMPOUT(0x195C34FA8);
            }
          }
          else
          {
            v10 = *(_DWORD **)(*(_QWORD *)(v4 + 96) + 8 * (v9 - v6));
            if (v10[10] != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195C34FC8);
            }
          }
        }
        else
        {
          v10 = *(_DWORD **)(*(_QWORD *)(v4 + 112) + 8 * v9);
          if (v10[10] != 1)
            goto LABEL_18;
        }
        if (v10[59] != 3 && v10[57] < 2u)
          return 1;
        if (v8 == ++v9)
          return 0;
      }
    }
  }
  return 0;
}

unint64_t WebCore::HTMLMediaElement::closedCaptionsVisible(WebCore::HTMLMediaElement *this)
{
  return ((unint64_t)*(unsigned int *)((char *)this + 1265) >> 19) & 1;
}

unint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::closedCaptionsVisible(WebCore::HTMLMediaElement *this)
{
  return ((unint64_t)*(unsigned int *)((char *)this + 1129) >> 19) & 1;
}

uint64_t WebCore::HTMLMediaElement::updateTextTrackRepresentationImageIfNeeded(WebCore::HTMLMediaElement *this)
{
  uint64_t result;
  uint64_t v3;

  result = WebCore::HTMLMediaElement::ensureMediaControls(this);
  if ((_DWORD)result)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 202) + 24);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 181))
      {
        *(_BYTE *)(v3 + 181) = 0;
        result = *(_QWORD *)(v3 + 144);
        if (result)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 144) + 56))(*(_QWORD *)(v3 + 144), 0);
        }
      }
    }
  }
  return result;
}

void WebCore::HTMLMediaElement::setClosedCaptionsVisible(WebCore::HTMLMediaElement *this, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v12;
  WebCore::MediaControlTextTrackContainerElement *v13;
  _QWORD v14[4];
  unsigned __int8 v15;

  v15 = a2;
  v3 = *((_QWORD *)this + 228);
  v4 = *((_QWORD *)this + 229);
  v14[0] = "HTMLMediaElement";
  v14[1] = 17;
  v14[2] = "setClosedCaptionsVisible";
  v14[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  v5 = *(unsigned int *)((char *)this + 1265);
  v6 = v5 & 0xFFFFFFFFFFF7FFFFLL | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
  *(_DWORD *)((char *)this + 1265) = v5 & 0xFFF7FFFF;
  *(_WORD *)((char *)this + 1269) = WORD2(v6);
  if (*((_QWORD *)this + 142)
    && (*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1816))(this))
  {
    v7 = v15;
    v8 = *(_DWORD *)((_BYTE *)this + 1265) & 0xFFF7FFFF | ((unint64_t)*(unsigned __int16 *)((char *)this + 1269) << 32);
    *(_DWORD *)((char *)this + 1265) = *(_DWORD *)((_BYTE *)this + 1265) & 0xFFF7FFFF | (v15 << 19);
    *(_WORD *)((char *)this + 1269) = WORD2(v8);
    v9 = *((_QWORD *)this + 142);
    if (!v9)
    {
      (*(void (**)(_QWORD, BOOL))(*MEMORY[0x48] + 528))(MEMORY[0x48], v7 != 0);
LABEL_16:
      WebCore::HTMLMediaElement::markCaptionAndSubtitleTracksAsUnconfigured((unsigned int *)this, 0);
      if (WebCore::HTMLMediaElement::ensureMediaControls(this))
      {
        v13 = *(WebCore::MediaControlTextTrackContainerElement **)(*((_QWORD *)this + 202) + 24);
        if (v13)
          WebCore::MediaControlTextTrackContainerElement::updateDisplay(v13);
      }
      return;
    }
    v10 = *(unsigned __int8 **)v9;
    if (__ldaxr(*(unsigned __int8 **)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_10:
    ++*((_QWORD *)v10 + 1);
    v12 = __ldxr(v10);
    if (v12 == 1)
    {
      if (!__stlxr(0, v10))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_15:
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 72) + 528))(*(_QWORD *)(v9 + 72), v15);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
    goto LABEL_16;
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::setClosedCaptionsVisible(WebCore::HTMLMediaElement *this, unsigned __int8 a2)
{
  WebCore::HTMLMediaElement::setClosedCaptionsVisible((WebCore::HTMLMediaElement *)((char *)this - 136), a2);
}

uint64_t (**WebCore::HTMLMediaElement::mediaCanStart(uint64_t (**this)(), WebCore::Document *a2))()
{
  uint64_t (**v2)();
  uint64_t (*v3)();
  uint64_t (*v4)();
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)();
  uint64_t (*v11)();
  int v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t (*v17)();
  BOOL v18;

  v2 = this;
  v3 = this[228];
  v4 = this[229];
  v14 = "HTMLMediaElement";
  v15 = 17;
  v16 = "mediaCanStart";
  v17 = v4;
  v5 = (unsigned int *)((char *)this + 1265);
  v6 = *(unsigned __int16 *)((char *)this + 1269);
  v7 = *(unsigned int *)((char *)this + 1265);
  v18 = (*(_DWORD *)((_BYTE *)this + 1265) & 4) != 0;
  if (*((_BYTE *)v3 + 12))
  {
    this = (uint64_t (**)())WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [15],BOOL,char [19],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v14, "waiting = ", (uint64_t)&v18, ", paused = ");
    v6 = *((unsigned __int16 *)v5 + 2);
    v7 = *v5;
  }
  v8 = v7 | (v6 << 32);
  if ((v8 & 4) != 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFBLL;
    *v5 = v9;
    *((_WORD *)v5 + 2) = WORD2(v9);
    this = (uint64_t (**)())WebCore::HTMLMediaElement::selectMediaResource((WebCore::HTMLMediaElement *)v2);
    v8 = *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
  }
  if ((v8 & 0x40000) != 0)
  {
    v18 = 0;
    v10 = v2[228];
    v11 = v2[229];
    v14 = "HTMLMediaElement";
    v15 = 17;
    v16 = "setPausedInternal";
    v17 = v11;
    if (*((_BYTE *)v10 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v14);
      v12 = v18;
      v8 = *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
    }
    else
    {
      v12 = 0;
    }
    v13 = v8 & 0xFFFFFFFFFFFBFFFFLL;
    *((_WORD *)v5 + 2) = WORD2(v13);
    *v5 = v13 | (v12 << 18);
    return WebCore::HTMLMediaElement::scheduleUpdatePlayState(v2);
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::mediaCanStart(uint64_t (**this)(), WebCore::Document *a2))()
{
  return WebCore::HTMLMediaElement::mediaCanStart(this - 20, a2);
}

BOOL WebCore::HTMLMediaElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr;
}

uint64_t *WebCore::HTMLMediaElement::mediaCacheDirectory(WebCore::HTMLMediaElement *this)
{
  {
    WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory = 0;
  }
  return &WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory;
}

uint64_t *WebCore::HTMLMediaElement::clearMediaCache(WebCore *a1, double a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  result = WebCore::installedMediaEngines(a1);
  v5 = *((unsigned int *)result + 3);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*result;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, WebCore *, double))(*(_QWORD *)v8 + 56))(v8, a1, a2);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t *WebCore::HTMLMediaElement::clearMediaCacheForOrigins(WebCore *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  result = WebCore::installedMediaEngines(a1);
  v5 = *((unsigned int *)result + 3);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*result;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, WebCore *, uint64_t))(*(_QWORD *)v8 + 64))(v8, a1, a2);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::captionPreferencesChanged(WebCore::HTMLMediaElement *this)
{
  uint64_t result;
  void *v3;
  WebCore::MediaControlsHost *v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Page *v14;
  uint64_t v15;
  WebCore::PageGroup *v16;
  WebCore::CaptionUserPreferencesMediaAF *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Page *v26;
  uint64_t v27;
  WebCore::PageGroup *v28;
  WebCore::CaptionUserPreferencesMediaAF *v29;
  WebCore::CaptionUserPreferencesMediaAF *v30;
  _DWORD *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  WebCore::Page *v35;
  uint64_t v36;

  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this);
  if (!(_DWORD)result)
    return result;
  v4 = (WebCore::MediaControlsHost *)*((_QWORD *)this + 202);
  if (v4)
  {
    v5 = *(_DWORD *)v4 + 1;
    *(_DWORD *)v4 = v5;
    result = *((_QWORD *)v4 + 3);
    if (result)
    {
      result = (uint64_t)WebCore::MediaControlTextTrackContainerElement::updateSizes((WebCore::RenderVideo *)result, (WTF::StringImpl *)1);
      v5 = *(_DWORD *)v4;
    }
    v6 = v5 - 1;
    if (v6)
    {
      *(_DWORD *)v4 = v6;
    }
    else
    {
      WebCore::MediaControlsHost::~MediaControlsHost(v4, v3);
      result = WTF::fastFree(v32, v33);
    }
  }
  v7 = *((_QWORD *)this + 142);
  if (v7)
  {
    v8 = *(unsigned __int8 **)v7;
    if (__ldaxr(*(unsigned __int8 **)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_12:
    ++*((_QWORD *)v8 + 1);
    v10 = __ldxr(v8);
    if (v10 == 1)
    {
      if (!__stlxr(0, v8))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_17:
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 1000))(*(_QWORD *)(v7 + 72));
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      if (v13)
      {
        v14 = *(WebCore::Page **)(v13 + 8);
        if (v14)
        {
          v15 = *((_QWORD *)v14 + 66);
          if (!v15 || (v16 = *(WebCore::PageGroup **)(v15 + 8)) == 0)
          {
            WebCore::Page::initGroup(v14);
            v34 = *((_QWORD *)v14 + 66);
            if (v34)
              v16 = *(WebCore::PageGroup **)(v34 + 8);
            else
              v16 = 0;
          }
          v17 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v16 + 5);
          if (!v17)
          {
            v17 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
            WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v17, v16);
            v18 = (_DWORD *)*((_QWORD *)v16 + 5);
            *((_QWORD *)v16 + 5) = v17;
            if (v18)
            {
              if (v18[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
                v17 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v16 + 5);
              }
              else
              {
                --v18[2];
              }
            }
          }
          v19 = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v17 + 80))(v17);
          *((_BYTE *)this + 1768) = v19;
          if (v19)
            v20 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 712) >> 53) & 1;
          else
            LOBYTE(v20) = 0;
          *((_BYTE *)this + 1769) = v20;
          result = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v17 + 16))(v17);
          v21 = result;
          if (*((_BYTE *)this + 1337))
          {
            v22 = *((unsigned __int8 *)this + 1336);
          }
          else
          {
            v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
            if (v23
              && (v24 = *(_QWORD *)(v23 + 8)) != 0
              && (v25 = *(_QWORD *)(v24 + 24)) != 0
              && (v26 = *(WebCore::Page **)(v25 + 8)) != 0)
            {
              v27 = *((_QWORD *)v26 + 66);
              if (!v27 || (v28 = *(WebCore::PageGroup **)(v27 + 8)) == 0)
              {
                v35 = v26;
                WebCore::Page::initGroup(v26);
                v36 = *((_QWORD *)v35 + 66);
                if (v36)
                  v28 = *(WebCore::PageGroup **)(v36 + 8);
                else
                  v28 = 0;
              }
              v29 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v28 + 5);
              if (!v29)
              {
                v30 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
                v29 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v30, v28);
                v31 = (_DWORD *)*((_QWORD *)v28 + 5);
                *((_QWORD *)v28 + 5) = v29;
                if (v31)
                {
                  if (v31[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
                    v29 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v28 + 5);
                  }
                  else
                  {
                    --v31[2];
                  }
                }
              }
              result = (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v29 + 16))(v29);
              LOWORD(v22) = result | 0x100;
            }
            else
            {
              LOWORD(v22) = 256;
            }
            *((_WORD *)this + 668) = v22;
            v22 = v22;
          }
          if (v22 != v21)
          {
            *((_WORD *)this + 668) = v21 | 0x100;
            return (*(uint64_t (**)(WebCore::HTMLMediaElement *, BOOL))(*(_QWORD *)this + 1832))(this, v21 == 2);
          }
        }
      }
    }
  }
  return result;
}

BOOL WebCore::HTMLMediaElement::isVisibleInViewport(WebCore::HTMLMediaElement *this)
{
  BOOL v1;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
    || ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
      ? (v1 = (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
      : (v1 = 1),
        v1))
  {
    __break(0xC471u);
    JUMPOUT(0x195C357CCLL);
  }
  return (*(_WORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2;
}

uint64_t WebCore::HTMLMediaElement::setAudioSourceNode(uint64_t this, WebCore::MediaElementAudioSourceNode *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;

  v2 = this;
  if (a2)
  {
    if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v4 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v4 = 1;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = a2;
      *(_BYTE *)(v4 + 32) = 0;
      v5 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v5 & 0xFFFF000000000000 | v4;
      this = v5 & 0xFFFFFFFFFFFFLL;
      if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v6 = __ldaxr((unsigned int *)this);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, (unsigned int *)this));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)this);
          v29 = *(unsigned int *)(this + 28);
          if ((_DWORD)v29)
          {
            v32 = this;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(this + 16), (WTF::StringImpl *)(*(_QWORD *)(this + 16) + 32 * v29));
            this = v32;
          }
          v30 = *(WTF **)(this + 16);
          if (v30)
          {
            *(_QWORD *)(this + 16) = 0;
            *(_DWORD *)(this + 24) = 0;
            v31 = this;
            WTF::fastFree(v30, a2);
            this = v31;
          }
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
    }
    v8 = (unsigned int *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = *(_QWORD *)(v2 + 1400);
  *(_QWORD *)(v2 + 1400) = v8;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v27 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v27)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v27));
      v28 = *(WTF **)(v10 + 16);
      if (v28)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v28, a2);
      }
      this = WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *(_QWORD *)(v2 + 1136);
  if (v13)
  {
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 72) + 904))(*(_QWORD *)(v13 + 72));
    if (this)
    {
      v14 = *(_QWORD *)(v2 + 1136);
      if (v14)
        v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 72) + 904))(*(_QWORD *)(v14 + 72));
      else
        v15 = 0;
      v16 = *(_QWORD *)(v2 + 1400);
      if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0)
      {
        v18 = *(_QWORD *)(v17 + 160);
        if (v18)
          goto LABEL_46;
        v18 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = v17 + 152;
        v20 = *(unsigned int **)(v17 + 160);
        *(_QWORD *)(v17 + 160) = v18;
        if (!v20)
          goto LABEL_46;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, v19);
        }
        v18 = *(_QWORD *)(v17 + 160);
        if (v18)
        {
LABEL_46:
          do
            v23 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v23 + 1, (unsigned int *)v18));
        }
      }
      else
      {
        v18 = 0;
      }
      v33 = (WTF *)v18;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v15 + 8))(v15, &v33);
      this = (uint64_t)v33;
      v33 = 0;
      if (this)
      {
        do
        {
          v25 = __ldaxr((unsigned int *)this);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, (unsigned int *)this));
        if (!v26)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v24);
        }
      }
    }
  }
  return this;
}

WebCore::MediaController *WebCore::HTMLMediaElement::setController(WebCore::HTMLMediaElement *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MediaController *result;
  bmalloc::api *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;
  bmalloc::api *v14;
  void *v15;

  v4 = *((_QWORD *)a1 + 177);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    v5 = *(unsigned int *)(v4 + 68);
    v6 = *(_QWORD *)(v4 + 56);
    if ((_DWORD)v5)
    {
      v7 = 0;
      while (*(WebCore::HTMLMediaElement **)(v6 + 8 * v7) != a1)
      {
        if (v5 == ++v7)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v7 = -1;
    }
    memmove((void *)(v6 + 8 * v7), (const void *)(v6 + 8 * v7 + 8), 8 * v5 - (8 * v7 + 8));
    --*(_DWORD *)(v4 + 68);
    if (*(_DWORD *)(v4 + 8) == 1)
    {
      WebCore::MediaController::~MediaController((WebCore::MediaController *)v4);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*(_DWORD *)(v4 + 8);
    }
  }
  v8 = *a2;
  *a2 = 0;
  result = (WebCore::MediaController *)*((_QWORD *)a1 + 177);
  *((_QWORD *)a1 + 177) = v8;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::MediaController::~MediaController(result);
      result = (WebCore::MediaController *)bmalloc::api::isoDeallocate(v12, v13);
      v8 = *((_QWORD *)a1 + 177);
      if (!v8)
        return result;
      goto LABEL_13;
    }
    --*((_DWORD *)result + 2);
  }
  if (!v8)
    return result;
LABEL_13:
  ++*(_DWORD *)(v8 + 8);
  result = (WebCore::MediaController *)WebCore::MediaController::addMediaElement((char **)v8, a1);
  if (*(_DWORD *)(v8 + 8) == 1)
  {
    WebCore::MediaController::~MediaController((WebCore::MediaController *)v8);
    return (WebCore::MediaController *)bmalloc::api::isoDeallocate(v14, v15);
  }
  else
  {
    --*(_DWORD *)(v8 + 8);
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLMediaElement::setControllerForBindings(WTF **this, WebCore::MediaController *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  bmalloc::api *v8;
  void *v9;
  WTF::StringImpl *v10;

  v10 = 0;
  WebCore::HTMLMediaElement::setMediaGroup(this, &v10, a3);
  v6 = v10;
  v10 = 0;
  if (!v6)
  {
LABEL_4:
    if (!a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v6, v5);
  if (a2)
LABEL_5:
    ++*((_DWORD *)a2 + 2);
LABEL_6:
  v10 = a2;
  WebCore::HTMLMediaElement::setController((WebCore::HTMLMediaElement *)this, (uint64_t *)&v10);
  result = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
    {
      WebCore::MediaController::~MediaController(v10);
      return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v10 + 2);
    }
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::shouldDisableSleep(WebCore::HTMLMediaElement *this)
{
  _DWORD *v1;
  uint64_t v3;
  WebCore::PlatformMediaSessionManager *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t *v15;
  uint64_t v16;

  v1 = (_DWORD *)((char *)this + 1265);
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x20000) != 0)
    goto LABEL_19;
  v3 = *((_QWORD *)this + 142);
  if (!v3)
    return v3;
  v4 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 360))(*(_QWORD *)(v3 + 72));
  if (!(_DWORD)v4)
    goto LABEL_19;
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) == 0)
    {
      v7 = (uint64_t *)(v5 + 32);
      LODWORD(v8) = v6 >> 5;
      if (!(_DWORD)v8)
        goto LABEL_16;
LABEL_9:
      v8 = v8;
      while (1)
      {
        v9 = *v7;
        if (*v7 == WebCore::HTMLNames::loopAttr
          || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 24)
          && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 32))
        {
          goto LABEL_19;
        }
        v7 += 2;
        if (!--v8)
          goto LABEL_16;
      }
    }
    v7 = *(uint64_t **)(v5 + 40);
    LODWORD(v8) = *(_DWORD *)(v5 + 52);
    if ((_DWORD)v8)
      goto LABEL_9;
  }
LABEL_16:
  if (*((_BYTE *)this + 1697))
  {
    LOBYTE(v3) = 2;
    return v3;
  }
  if (*(_BYTE *)(WebCore::PlatformMediaSessionManager::sharedManager(v4) + 52))
  {
LABEL_19:
    LOBYTE(v3) = 0;
    return v3;
  }
  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 2544))(this) != 2)
  {
    v3 = *((_QWORD *)this + 204);
    if (!v3)
      return v3;
    if (!*(_DWORD *)(v3 + 116))
      goto LABEL_19;
    v11 = *(_QWORD *)(v3 + 104);
    v12 = *(unsigned int *)(v3 + 112);
    if ((_DWORD)v12)
    {
      v13 = 16 * v12;
      for (i = *(uint64_t **)(v3 + 104); ; i += 2)
      {
        v3 = *i;
        if (*i)
          break;
        v13 -= 16;
        if (!v13)
          return v3;
      }
    }
    else
    {
      i = *(uint64_t **)(v3 + 104);
    }
    v15 = (uint64_t *)(v11 + 16 * v12);
    if (i == v15)
      goto LABEL_19;
    while (1)
    {
      v16 = i[1];
      if (*(_BYTE *)(*(_QWORD *)(v16 + 96) + 64))
      {
        if (!*(_BYTE *)(v16 + 1206) && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16))
          break;
      }
      i += 2;
      if (i == v15)
        goto LABEL_19;
      while (1)
      {
        v3 = *i;
        if (*i)
          break;
        i += 2;
        if (i == v15)
          return v3;
      }
      LOBYTE(v3) = 0;
      if (i == v15)
        return v3;
    }
  }
  if ((*v1 & 0x800000) != 0)
    LOBYTE(v3) = 2;
  else
    LOBYTE(v3) = 1;
  return v3;
}

WTF::StringImpl *WebCore::HTMLMediaElement::mediaPlayerReferrer@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl ***a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::SecurityPolicy *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[5];

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = this;
    v6 = (unsigned int *)(v4 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192) + 8))(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192);
    v9 = (WTF::StringImpl *)((char *)v5 + 912);
    WebCore::FrameLoader::outgoingReferrerURL(*(WebCore::FrameLoader **)(v4 + 280), (uint64_t)v14);
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    WebCore::SecurityPolicy::generateReferrerHeader(v9, (WTF::StringImpl ***)v14, v8, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, a2);
    this = v14[0];
    v14[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
      else
        *(_DWORD *)this -= 2;
    }
    do
    {
      v11 = __ldaxr(v6);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v6));
    if (!v12)
    {
      atomic_store(1u, v6);
      v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v13 = off_1E31FE290;
      *((_QWORD *)v13 + 1) = v6;
      v14[0] = v13;
      WTF::ensureOnMainThread();
      this = v14[0];
      v14[0] = 0;
      if (this)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerReferrer@<X0>(WebCore::HTMLMediaElement *this@<X0>, WTF::StringImpl ***a2@<X8>)
{
  return WebCore::HTMLMediaElement::mediaPlayerReferrer((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

void WebCore::HTMLMediaElement::mediaPlayerUserAgent(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    WebCore::FrameLoader::userAgent(*(WebCore::FrameLoader **)(v3 + 280), (WebCore::HTMLMediaElement *)((char *)this + 912), a2);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerUserAgent(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    WebCore::FrameLoader::userAgent(*(WebCore::FrameLoader **)(v3 + 280), (WebCore::HTMLMediaElement *)((char *)this + 736), a2);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  else
  {
    *a2 = 0;
  }
}

WTF::StringImpl *WebCore::HTMLMediaElement::outOfBandTrackSources@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  __int16 v8;
  _DWORD **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  BOOL v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  _BOOL8 v25;
  int v26;
  char v27;
  char v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  __int16 v45;
  int v46;
  char v47;
  char __src;
  void *__srca;
  WTF::StringImpl *v50[5];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v5 = *((_QWORD *)this + 10);
  if (v5)
  {
    v6 = this;
    while (1)
    {
      v8 = *(_WORD *)(v5 + 28);
      if ((v8 & 0x10) != 0
        && (v8 & 0x110) != 0x110
        && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::trackTag + 24))
      {
        break;
      }
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        return this;
    }
    v9 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      this = WebCore::Element::getNonEmptyURLAttribute((WebCore::Element *)v5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a2, a3, (WTF::URL *)v50, a5);
      if (!v50[0])
        goto LABEL_86;
      if (*((_DWORD *)v50[0] + 1))
      {
        v11 = **(_QWORD **)(v5 + 40);
        v12 = !v11 || (*(_WORD *)(v11 + 28) & 0x80) == 0;
        v25 = !v12 && (unint64_t)(*(_BYTE *)(v11 + 193) == 0);
        if (WebCore::isAllowedToLoadMediaURL(*((WebCore **)v6 + 5), (const WebCore::HTMLMediaElement *)v50, (const WTF::URL *)v25))
        {
          v13 = *(_DWORD **)(v5 + 152);
          v14 = v13[57];
          if (v14 - 3 >= 2)
            break;
        }
      }
LABEL_83:
      this = v50[0];
      v50[0] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
        else
          *(_DWORD *)this -= 2;
      }
LABEL_86:
      v5 = *(_QWORD *)(v5 + 56);
      if (!v5)
        return this;
      while (1)
      {
        v45 = *(_WORD *)(v5 + 28);
        if ((v45 & 0x10) != 0
          && (v45 & 0x110) != 0x110
          && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::trackTag + 24))
        {
          break;
        }
        v5 = *(_QWORD *)(v5 + 56);
        if (!v5)
          return this;
      }
    }
    v15 = *(_QWORD *)(v5 + 104);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 + 4);
      v17 = v16 >> 5;
      if ((v16 & 1) != 0)
      {
        v18 = *(_QWORD *)(v15 + 40);
        v19 = *(unsigned int *)(v15 + 52);
      }
      else
      {
        v18 = v15 + 32;
        v19 = v16 >> 5;
      }
      if (v19)
      {
        v20 = (_DWORD **)(v18 + 8);
        while (1)
        {
          v21 = (uint64_t)*(v20 - 1);
          if (v21 == WebCore::HTMLNames::labelAttr
            || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 24)
            && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 32))
          {
            break;
          }
          v20 += 2;
          if (!--v19)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v20 = v9;
      }
      if ((v16 & 1) != 0)
      {
        v22 = *(_QWORD *)(v15 + 40);
        v17 = *(unsigned int *)(v15 + 52);
      }
      else
      {
        v22 = v15 + 32;
      }
      if (v17)
      {
        v23 = (_DWORD **)(v22 + 8);
        do
        {
          v24 = (uint64_t)*(v23 - 1);
          if (v24 == WebCore::HTMLNames::srclangAttr
            || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 24)
            && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::srclangAttr + 32))
          {
            goto LABEL_45;
          }
          v23 += 2;
        }
        while (--v17);
      }
    }
    else
    {
      v20 = v9;
    }
    v23 = v9;
LABEL_45:
    v26 = v13[56];
    if (v26 == 2)
      v27 = 2;
    else
      v27 = v26 == 1;
    if (v14 >= 6)
      v28 = 1;
    else
      v28 = 0x50101020100uLL >> (8 * v14);
    v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 40))(v13);
    v30 = *(_QWORD *)(v5 + 104);
    v47 = v28;
    __src = v27;
    v46 = v29;
    if (v30
      && ((v31 = *(unsigned int *)(v30 + 4), (v31 & 1) != 0)
        ? (v32 = *(uint64_t **)(v30 + 40), v33 = *(unsigned int *)(v30 + 52))
        : (v32 = (uint64_t *)(v30 + 32), v33 = v31 >> 5),
          v33))
    {
      while (1)
      {
        v34 = *v32;
        if (*v32 == WebCore::HTMLNames::defaultAttr
          || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::defaultAttr + 24)
          && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::defaultAttr + 32))
        {
          break;
        }
        v32 += 2;
        if (!--v33)
          goto LABEL_62;
      }
      v35 = 1;
    }
    else
    {
LABEL_62:
      v35 = 0;
    }
    this = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x40);
    v36 = this;
    *((_DWORD *)this + 2) = 1;
    *(_QWORD *)this = off_1E33C51E8;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 7) = 0;
    v37 = *v20;
    if (*v20)
      *v37 += 2;
    v38 = *v23;
    if (*v23)
      *v38 += 2;
    v39 = v50[0];
    if (v50[0])
      *(_DWORD *)v50[0] += 2;
    *((_QWORD *)this + 2) = v37;
    *((_QWORD *)this + 3) = v38;
    *((_QWORD *)this + 4) = v39;
    *((_BYTE *)this + 40) = __src;
    *((_BYTE *)this + 41) = v47;
    *((_BYTE *)this + 42) = 1;
    *((_DWORD *)this + 11) = v46;
    *((_BYTE *)this + 48) = v35;
    v40 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v40 == *(_DWORD *)(a4 + 8))
    {
      v41 = v40 + (v40 >> 2);
      if (v41 >= 0x10)
        v42 = v41 + 1;
      else
        v42 = 16;
      if (v42 <= v40 + 1)
        v43 = v40 + 1;
      else
        v43 = v42;
      if (v43 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      __srca = *(void **)a4;
      v44 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
      *(_DWORD *)(a4 + 8) = v43;
      *(_QWORD *)a4 = v44;
      memcpy(v44, __srca, 8 * v40);
      if (__srca)
      {
        if (v44 == __srca)
        {
          v44 = 0;
          *(_QWORD *)a4 = 0;
          *(_DWORD *)(a4 + 8) = 0;
        }
        WTF::fastFree((WTF *)__srca, v10);
      }
    }
    else
    {
      v44 = *(void **)a4;
    }
    *((_QWORD *)v44 + v40) = v36;
    *(_DWORD *)(a4 + 12) = v40 + 1;
    v9 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_83;
  }
  return this;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLMediaElement::outOfBandTrackSources@<X0>(WebCore::HTMLMediaElement *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  return WebCore::HTMLMediaElement::outOfBandTrackSources((WebCore::HTMLMediaElement *)((char *)this - 176), a2, a3, a4, a5);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerIsFullscreen(WebCore::HTMLMediaElement *this)
{
  return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1800))(this);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerIsFullscreen(WebCore::HTMLMediaElement *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 22) + 1800))((char *)this - 176);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerIsFullscreenPermitted(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v1 = *((_QWORD *)this + 200);
  if (!v1)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v1 = *((_QWORD *)this + 200);
  }
  if ((*(_BYTE *)(v1 + 88) & 4) == 0
    || WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 40)
                                                                              + 8)))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 248))(*(_QWORD *)(v1 + 32));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 256))(*(_QWORD *)(v1 + 32));
  v6[0] = "MediaElementSession";
  v6[1] = 20;
  v6[2] = "fullscreenPermitted";
  v6[3] = v5;
  if (*(_BYTE *)(v4 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v6, "returning FALSE");
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerIsFullscreenPermitted(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v1 = *((_QWORD *)this + 178);
  if (!v1)
  {
    WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)((char *)this - 176));
    v1 = *((_QWORD *)this + 178);
  }
  if ((*(_BYTE *)(v1 + 88) & 4) == 0
    || WebCore::Document::processingUserGestureForMedia(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 40)
                                                                              + 8)))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 248))(*(_QWORD *)(v1 + 32));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 256))(*(_QWORD *)(v1 + 32));
  v6[0] = "MediaElementSession";
  v6[1] = 20;
  v6[2] = "fullscreenPermitted";
  v6[3] = v5;
  if (*(_BYTE *)(v4 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v6, "returning FALSE");
  return 0;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerIsVideo(WebCore::HTMLMediaElement *this)
{
  return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerIsVideo(WebCore::HTMLMediaElement *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 22) + 1264))((char *)this - 176);
}

unint64_t WebCore::HTMLMediaElement::mediaPlayerContentBoxRect(WebCore::HTMLMediaElement *this)
{
  unint64_t result;
  BOOL v2;

  result = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)(result + 45) & 2) != 0
      || ((*(_BYTE *)(result + 52) & 7) == 3 ? (v2 = (*(_BYTE *)(result + 53) & 2) == 0) : (v2 = 1), v2))
    {
      __break(0xC471u);
      JUMPOUT(0x195C367D4);
    }
    for (; (*(_BYTE *)(result + 45) & 4) == 0; result = *(_QWORD *)(*(_QWORD *)(result + 32) + 8))
      ;
    return WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)result);
  }
  return result;
}

unint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerContentBoxRect(WebCore::HTMLMediaElement *this)
{
  unint64_t result;
  BOOL v2;

  result = *((_QWORD *)this - 14) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)(result + 45) & 2) != 0
      || ((*(_BYTE *)(result + 52) & 7) == 3 ? (v2 = (*(_BYTE *)(result + 53) & 2) == 0) : (v2 = 1), v2))
    {
      __break(0xC471u);
      JUMPOUT(0x195C36874);
    }
    for (; (*(_BYTE *)(result + 45) & 4) == 0; result = *(_QWORD *)(*(_QWORD *)(result + 32) + 8))
      ;
    return WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)result);
  }
  return result;
}

float WebCore::HTMLMediaElement::mediaPlayerContentsScale(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  result = 1.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          return *(float *)(v5 + 356) * *(float *)(v5 + 364);
      }
    }
  }
  return result;
}

float `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerContentsScale(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 528);
  result = 1.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          return *(float *)(v5 + 356) * *(float *)(v5 + 364);
      }
    }
  }
  return result;
}

BOOL WebCore::HTMLMediaElement::mediaPlayerPlatformVolumeConfigurationRequired(WebCore::HTMLMediaElement *this)
{
  return *((_BYTE *)this + 992) == 0;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerPlatformVolumeConfigurationRequired(WebCore::HTMLMediaElement *this)
{
  return *((_BYTE *)this + 816) == 0;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerIsLooping(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::loopAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerIsLooping(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this - 9);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::loopAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerCachedResourceLoader(WebCore::HTMLMediaElement *this, void *a2)
{
  WebCore::Document *v2;

  v2 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  if (*((_QWORD *)v2 + 90))
    return *((_QWORD *)v2 + 90);
  else
    return WebCore::Document::ensureCachedResourceLoader(v2, a2);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerCachedResourceLoader(WebCore::HTMLMediaElement *this, void *a2)
{
  WebCore::Document *v2;

  v2 = *(WebCore::Document **)(*((_QWORD *)this - 17) + 8);
  if (*((_QWORD *)v2 + 90))
    return *((_QWORD *)v2 + 90);
  else
    return WebCore::Document::ensureCachedResourceLoader(v2, a2);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerCreateResourceLoader@<X0>(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;

  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this))
    v4 = 18;
  else
    v4 = 1;
  v5 = WTF::fastMalloc((WTF *)0x68);
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v7 = *((_QWORD *)this + 13);
  if (!v7)
    goto LABEL_15;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) == 0)
  {
    v9 = v7 + 32;
    LODWORD(v10) = v8 >> 5;
    if ((_DWORD)v10)
      goto LABEL_7;
LABEL_15:
    v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(v7 + 40);
  LODWORD(v10) = *(_DWORD *)(v7 + 52);
  if (!(_DWORD)v10)
    goto LABEL_15;
LABEL_7:
  v10 = v10;
  v11 = (uint64_t *)(v9 + 8);
  while (1)
  {
    v12 = *(v11 - 1);
    if (v12 == WebCore::HTMLNames::crossoriginAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
    {
      break;
    }
    v11 += 2;
    if (!--v10)
    {
      v11 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_16:
  WebCore::parseCORSSettingsAttribute(v11, &v27);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E33F68F8;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = &off_1E33A18C0;
  *(_QWORD *)(v5 + 32) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 24), (WebCore::ScriptExecutionContext *)(v6 + 192));
  *(_QWORD *)v5 = off_1E33F6588;
  *(_QWORD *)(v5 + 24) = &unk_1E33F65C8;
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 40) = v13;
  v15 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v15)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
  }
  *(_QWORD *)(v5 + 48) = v15;
  v18 = v27;
  if (v27)
  {
    *(_DWORD *)v27 += 2;
    *(_QWORD *)(v5 + 56) = v18;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_BYTE *)(v5 + 96) = v4;
    v27 = 0;
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  else
  {
    *(_QWORD *)(v5 + 88) = 0;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_BYTE *)(v5 + 96) = v4;
  }
  result = *(_QWORD *)(v5 + 16);
  if (result)
    goto LABEL_39;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v5;
  v20 = *(unsigned int **)(v5 + 16);
  *(_QWORD *)(v5 + 16) = result;
  if (!v20)
    goto LABEL_39;
  do
  {
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v16);
  }
  result = *(_QWORD *)(v5 + 16);
  if (result)
  {
LABEL_39:
    do
      v23 = __ldaxr((unsigned int *)result);
    while (__stlxr(v23 + 1, (unsigned int *)result));
  }
  v24 = (unsigned int *)*((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = result;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      result = WTF::fastFree((WTF *)v24, v16);
    }
  }
  *a2 = v5;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerCreateResourceLoader@<X0>(WebCore::HTMLMediaElement *this@<X0>, uint64_t *a2@<X8>)
{
  return WebCore::HTMLMediaElement::mediaPlayerCreateResourceLoader((WebCore::HTMLMediaElement *)((char *)this - 176), a2);
}

uint64_t WebCore::HTMLMediaElement::lastMediaResourceLoaderForTesting(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 179);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

BOOL WebCore::HTMLMediaElement::mediaPlayerShouldUsePersistentCache(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && ((v5 = *(_QWORD *)(v4 + 1008), (v5 & 0x8000000000000000) == 0) || v5 == -1))
  {
    return *(_BYTE *)(v4 + 1092) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerShouldUsePersistentCache(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 528);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 24)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && ((v5 = *(_QWORD *)(v4 + 1008), (v5 & 0x8000000000000000) == 0) || v5 == -1))
  {
    return *(_BYTE *)(v4 + 1092) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t *WebCore::HTMLMediaElement::mediaPlayerMediaCacheDirectory(WebCore::HTMLMediaElement *this)
{
  {
    WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory = 0;
  }
  return &WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory;
}

uint64_t *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerMediaCacheDirectory(WebCore::HTMLMediaElement *this)
{
  {
    WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory = 0;
  }
  return &WebCore::sharedMediaCacheDirectory(void)::sharedMediaCacheDirectory;
}

unsigned __int8 *WebCore::HTMLMediaElement::setPreferredDynamicRangeMode(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  int v7;
  WebCore::Widget *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  unsigned int v12;

  v2 = *((_QWORD *)result + 142);
  if (!v2)
    return result;
  v3 = result;
  if (result[1441])
    return result;
  v5 = *(unsigned __int8 **)v2;
  if (__ldaxr(*(unsigned __int8 **)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_8:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  *(_BYTE *)(v2 + 233) = a2;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 72) + 1136))(*(_QWORD *)(v2 + 72), a2);
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0 && (v11 = *(WebCore **)(v10 + 288)) != 0)
  {
    ++*((_DWORD *)v11 + 2);
    v12 = WebCore::screenSupportsHighDynamicRange(v11, v8);
    if (*((_DWORD *)v11 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 2);
  }
  else
  {
    v12 = WebCore::screenSupportsHighDynamicRange(0, v8);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 72) + 696))(*(_QWORD *)(v2 + 72), v12 ^ 1);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
}

unsigned __int8 *WebCore::HTMLMediaElement::setOverridePreferredDynamicRangeMode(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v7;
  WebCore::Widget *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  unsigned int v12;

  *((_WORD *)result + 720) = a2 | 0x100;
  v2 = *((_QWORD *)result + 142);
  if (!v2)
    return result;
  v4 = result;
  v5 = *(unsigned __int8 **)v2;
  if (__ldaxr(*(unsigned __int8 **)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_7:
  ++*((_QWORD *)v5 + 1);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v5))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  *(_BYTE *)(v2 + 233) = a2;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 72) + 1136))(*(_QWORD *)(v2 + 72), a2);
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 528);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0 && (v11 = *(WebCore **)(v10 + 288)) != 0)
  {
    ++*((_DWORD *)v11 + 2);
    v12 = WebCore::screenSupportsHighDynamicRange(v11, v8);
    if (*((_DWORD *)v11 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 2);
  }
  else
  {
    v12 = WebCore::screenSupportsHighDynamicRange(0, v8);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 72) + 696))(*(_QWORD *)(v2 + 72), v12 ^ 1);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerPreferredAudioCharacteristics@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  uint64_t v7;
  WebCore::PageGroup *v8;
  WebCore::CaptionUserPreferencesMediaAF *v9;
  WebCore::CaptionUserPreferencesMediaAF *v10;
  _DWORD *v11;
  WebCore::Page *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 528);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(WebCore::Page **)(v5 + 8)) != 0)
  {
    v7 = *((_QWORD *)v6 + 66);
    if (!v7 || (v8 = *(WebCore::PageGroup **)(v7 + 8)) == 0)
    {
      v12 = v6;
      WebCore::Page::initGroup(v6);
      v13 = *((_QWORD *)v12 + 66);
      if (v13)
        v8 = *(WebCore::PageGroup **)(v13 + 8);
      else
        v8 = 0;
    }
    v9 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v8 + 5);
    if (!v9)
    {
      v10 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      v9 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v10, v8);
      v11 = (_DWORD *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = v9;
      if (v11)
      {
        if (v11[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
          v9 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v8 + 5);
        }
        else
        {
          --v11[2];
        }
      }
    }
    return (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v9 + 168))(v9);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerPreferredAudioCharacteristics@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  uint64_t v7;
  WebCore::PageGroup *v8;
  WebCore::CaptionUserPreferencesMediaAF *v9;
  WebCore::CaptionUserPreferencesMediaAF *v10;
  _DWORD *v11;
  WebCore::Page *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this - 136) + 8) + 528);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(WebCore::Page **)(v5 + 8)) != 0)
  {
    v7 = *((_QWORD *)v6 + 66);
    if (!v7 || (v8 = *(WebCore::PageGroup **)(v7 + 8)) == 0)
    {
      v12 = v6;
      WebCore::Page::initGroup(v6);
      v13 = *((_QWORD *)v12 + 66);
      if (v13)
        v8 = *(WebCore::PageGroup **)(v13 + 8);
      else
        v8 = 0;
    }
    v9 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v8 + 5);
    if (!v9)
    {
      v10 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      v9 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v10, v8);
      v11 = (_DWORD *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = v9;
      if (v11)
      {
        if (v11[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
          v9 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v8 + 5);
        }
        else
        {
          --v11[2];
        }
      }
    }
    return (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v9 + 168))(v9);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void WebCore::HTMLMediaElement::mediaPlayerNetworkInterfaceName(_QWORD *a1@<X8>)
{
  uint64_t v2;

  {
    v2 = *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1);
    if (*((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1))
      **((_DWORD **)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) += 2;
  }
  else
  {
    v2 = 0;
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  *a1 = v2;
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerNetworkInterfaceName(_QWORD *a1@<X8>)
{
  uint64_t v2;

  {
    v2 = *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1);
    if (*((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1))
      **((_DWORD **)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) += 2;
  }
  else
  {
    v2 = 0;
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  *a1 = v2;
}

WTF *WebCore::HTMLMediaElement::mediaPlayerGetRawCookies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *result;
  uint64_t v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          ++*(_DWORD *)v7;
          v19 = 0;
          v20 = 0;
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 888) + 40))(*(_QWORD *)(v7 + 888));
          v8 = *a3;
          *a3 = 0;
          (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v8 + 16))(v8, &v19);
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (HIDWORD(v20))
          {
            v10 = v19;
            v11 = 136 * HIDWORD(v20);
            do
            {
              WebCore::Cookie::~Cookie(v10, v9);
              v10 = (WTF *)(v12 + 136);
              v11 -= 136;
            }
            while (v11);
          }
          result = v19;
          if (v19)
          {
            v19 = 0;
            LODWORD(v20) = 0;
            result = (WTF *)WTF::fastFree(result, v9);
          }
          if (*(_DWORD *)v7 != 1)
          {
            --*(_DWORD *)v7;
            return result;
          }
          WebCore::Page::~Page(v7);
          return (WTF *)WTF::fastFree(result, v15);
        }
      }
    }
  }
  v19 = 0;
  v20 = 0;
  v14 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **, uint64_t))(*(_QWORD *)v14 + 16))(v14, &v19, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (HIDWORD(v20))
  {
    v16 = v19;
    v17 = 136 * HIDWORD(v20);
    do
    {
      WebCore::Cookie::~Cookie(v16, v15);
      v16 = (WTF *)(v18 + 136);
      v17 -= 136;
    }
    while (v17);
  }
  result = v19;
  if (v19)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

WTF *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerGetRawCookies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebCore::HTMLMediaElement::mediaPlayerGetRawCookies(a1 - 176, a2, a3);
}

_QWORD *WebCore::HTMLMediaElement::mediaPlayerEngineFailedToLoad(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v1 = this[142];
  if (v1)
  {
    v2 = this;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 552))(*(_QWORD *)(v1 + 72));
    if ((_DWORD)this == 5)
      *((_BYTE *)v2 + 1792) = 1;
    v3 = *(_QWORD *)(*(_QWORD *)(v2[5] + 8) + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            ++*(_DWORD *)v6;
            if ((*(_QWORD *)(*(_QWORD *)(v6 + 112) + 672) & 0x800000000000) == 0
              || (v7 = *(uint64_t **)(v6 + 256)) == 0)
            {
              v7 = WebCore::emptyDiagnosticLoggingClient((WebCore *)this);
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v9 = *(_QWORD *)(v2[142] + 72);
            if (v9)
            {
              (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v9 + 896))(&v15);
              v10 = *(_QWORD *)(v2[142] + 72);
              if (v10)
              {
                v8.n128_f64[0] = (double)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 208))(v10);
LABEL_15:
                (*(void (**)(uint64_t *, WTF::StringImpl **, WTF::StringImpl **, uint64_t, _QWORD, __n128))(*v7 + 16))(v7, &v16, &v15, 4, 0, v8);
                v12 = v15;
                v15 = 0;
                if (v12)
                {
                  if (*(_DWORD *)v12 == 2)
                    WTF::StringImpl::destroy(v12, v11);
                  else
                    *(_DWORD *)v12 -= 2;
                }
                this = v16;
                v16 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v11);
                  else
                    *(_DWORD *)this -= 2;
                }
                if (*(_DWORD *)v6 == 1)
                {
                  WebCore::Page::~Page(v6);
                  return (_QWORD *)WTF::fastFree(v13, v14);
                }
                else
                {
                  --*(_DWORD *)v6;
                }
                return this;
              }
            }
            else
            {
              v15 = 0;
            }
            v8.n128_u64[0] = 0;
            goto LABEL_15;
          }
        }
      }
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerEngineFailedToLoad(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaPlayerEngineFailedToLoad((_QWORD *)this - 22);
}

double WebCore::HTMLMediaElement::mediaPlayerRequestedPlaybackRate(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  WebCore::HTMLMediaElement **v6;
  uint64_t v7;
  int v8;
  WebCore::HTMLMediaElement *v9;
  uint64_t v10;
  WebCore::HTMLMediaElement *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  WTF::MonotonicTime *v20;
  double v21;
  double v22;
  uint64_t v23;
  double result;

  v2 = *((_QWORD *)this + 177);
  if (!v2)
    goto LABEL_28;
  v3 = 0.0;
  if (!*(_BYTE *)(v2 + 72))
  {
    v4 = *(unsigned int *)(v2 + 68);
    v5 = 0.0;
    if ((_DWORD)v4)
    {
      v6 = *(WebCore::HTMLMediaElement ***)(v2 + 56);
      v7 = 8 * v4;
      v8 = 1;
      while (1)
      {
        v9 = *v6;
        if (*((int *)*v6 + 226) < 3)
          return v3;
        v10 = *((_QWORD *)v9 + 200);
        if (!v10)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(*v6);
          v10 = *((_QWORD *)v9 + 200);
        }
        if (*(_BYTE *)(v10 + 48) == 4)
          return v3;
        v11 = *v6;
        if ((*(_DWORD *)((_BYTE *)*v6 + 1265) & 0x40) != 0)
        {
          if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v11 + 1384))(v11) & 1) != 0)
            return v3;
          v11 = *v6;
        }
        v8 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v11 + 1384))(v11);
        ++v6;
        v7 -= 8;
        if (!v7)
        {
          if ((v8 & 1) != 0)
            return v3;
          v12 = *((_QWORD *)this + 177);
          v13 = *(unsigned int *)(v12 + 68);
          if (!(_DWORD)v13)
          {
            v5 = 0.0;
            break;
          }
          v5 = *(double *)(v12 + 96);
          if (v5 == -1.0)
          {
            v14 = *(uint64_t **)(v12 + 56);
            v15 = 8 * v13;
            v16 = 0.0;
            do
            {
              v17 = *v14++;
              v18 = (*(double (**)(uint64_t))(*(_QWORD *)v17 + 1376))(v17);
              if (v16 >= v18)
                v19 = v16;
              else
                v19 = v18;
              v16 = v19;
              v15 -= 8;
            }
            while (v15);
            v21 = (*(double (**)(_QWORD))(**(_QWORD **)(v12 + 256) + 24))(*(_QWORD *)(v12 + 256));
            if (v21 >= v16)
              v21 = v16;
            *(double *)(v12 + 96) = fmax(v21, 0.0);
            *(_QWORD *)(v12 + 216) = 0;
            WTF::MonotonicTime::now(v20);
            WebCore::TimerBase::setNextFireTime(v12 + 192, v22 + 0.0);
            v5 = *(double *)(v12 + 96);
          }
          v3 = 0.0;
          if (v5 >= 0.0)
            break;
          return v3;
        }
      }
    }
    v3 = 0.0;
    if (v5 <= (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1376))(this))
    {
LABEL_28:
      v3 = 0.0;
      if (WebCore::HTMLMediaElement::couldPlayIfEnoughData(this)
        && (*((int *)this + 226) > 2 || *((int *)this + 227) >= 3))
      {
        v23 = *((_QWORD *)this + 177);
        if (v23)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v23 + 256) + 40))(*(_QWORD *)(v23 + 256));
          return result;
        }
        return *((double *)this + 109);
      }
    }
  }
  return v3;
}

double `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerRequestedPlaybackRate(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  WebCore::HTMLMediaElement **v7;
  uint64_t v8;
  int v9;
  WebCore::HTMLMediaElement *v10;
  uint64_t v11;
  WebCore::HTMLMediaElement *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  WTF::MonotonicTime *v21;
  double v22;
  double v23;
  uint64_t v24;
  double result;

  v2 = (WebCore::HTMLMediaElement *)((char *)this - 176);
  v3 = *((_QWORD *)this + 155);
  if (!v3)
    goto LABEL_28;
  v4 = 0.0;
  if (!*(_BYTE *)(v3 + 72))
  {
    v5 = *(unsigned int *)(v3 + 68);
    v6 = 0.0;
    if ((_DWORD)v5)
    {
      v7 = *(WebCore::HTMLMediaElement ***)(v3 + 56);
      v8 = 8 * v5;
      v9 = 1;
      while (1)
      {
        v10 = *v7;
        if (*((int *)*v7 + 226) < 3)
          return v4;
        v11 = *((_QWORD *)v10 + 200);
        if (!v11)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(*v7);
          v11 = *((_QWORD *)v10 + 200);
        }
        if (*(_BYTE *)(v11 + 48) == 4)
          return v4;
        v12 = *v7;
        if ((*(_DWORD *)((_BYTE *)*v7 + 1265) & 0x40) != 0)
        {
          if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12) & 1) != 0)
            return v4;
          v12 = *v7;
        }
        v9 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v12 + 1384))(v12);
        ++v7;
        v8 -= 8;
        if (!v8)
        {
          if ((v9 & 1) != 0)
            return v4;
          v13 = *((_QWORD *)this + 155);
          v14 = *(unsigned int *)(v13 + 68);
          if (!(_DWORD)v14)
          {
            v6 = 0.0;
            break;
          }
          v6 = *(double *)(v13 + 96);
          if (v6 == -1.0)
          {
            v15 = *(uint64_t **)(v13 + 56);
            v16 = 8 * v14;
            v17 = 0.0;
            do
            {
              v18 = *v15++;
              v19 = (*(double (**)(uint64_t))(*(_QWORD *)v18 + 1376))(v18);
              if (v17 >= v19)
                v20 = v17;
              else
                v20 = v19;
              v17 = v20;
              v16 -= 8;
            }
            while (v16);
            v22 = (*(double (**)(_QWORD))(**(_QWORD **)(v13 + 256) + 24))(*(_QWORD *)(v13 + 256));
            if (v22 >= v17)
              v22 = v17;
            *(double *)(v13 + 96) = fmax(v22, 0.0);
            *(_QWORD *)(v13 + 216) = 0;
            WTF::MonotonicTime::now(v21);
            WebCore::TimerBase::setNextFireTime(v13 + 192, v23 + 0.0);
            v6 = *(double *)(v13 + 96);
          }
          v4 = 0.0;
          if (v6 >= 0.0)
            break;
          return v4;
        }
      }
    }
    v4 = 0.0;
    if (v6 <= (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v2 + 1376))(v2))
    {
LABEL_28:
      v4 = 0.0;
      if (WebCore::HTMLMediaElement::couldPlayIfEnoughData(v2)
        && (*((int *)this + 182) > 2 || *((int *)this + 183) >= 3))
      {
        v24 = *((_QWORD *)this + 155);
        if (v24)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 256) + 40))(*(_QWORD *)(v24 + 256));
          return result;
        }
        return *((double *)this + 87);
      }
    }
  }
  return v4;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaContentTypesRequiringHardwareSupport(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 80;
}

BOOL WebCore::HTMLMediaElement::mediaPlayerShouldCheckHardwareSupport(WebCore::HTMLMediaElement *this)
{
  int v2;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 664) & 0x10000) == 0)
    return 1;
  v2 = *((_DWORD *)this + 264);
  return (v2 != 2 || !*((_QWORD *)this + 133) || *((_QWORD *)this + 134)) && v2 != 1;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerShouldCheckHardwareSupport(WebCore::HTMLMediaElement *this)
{
  int v2;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 664) & 0x10000) == 0)
    return 1;
  v2 = *((_DWORD *)this + 220);
  return (v2 != 2 || !*((_QWORD *)this + 111) || *((_QWORD *)this + 112)) && v2 != 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::allowedMediaContainerTypes(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 96;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::allowedMediaCodecTypes(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 120;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::allowedMediaVideoCodecIDs(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 144;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::allowedMediaAudioCodecIDs(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 168;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::allowedMediaCaptionFormatTypes(WebCore::HTMLMediaElement *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 192;
}

uint64_t (**WebCore::HTMLMediaElement::mediaPlayerBufferedTimeRangesChanged(uint64_t (**this)()))()
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t (*v4)();
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t (**v14)();
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];

  if (!this[169])
    return this;
  v1 = (uint64_t)this;
  if (*((int *)this + 226) < 4)
    return this;
  v2 = *(unsigned int **)this[97];
  if (v2)
  {
    v3 = atomic_load(v2);
    if (v3 != 1)
      return this;
  }
  v4 = this[144];
  if (v4)
  {
    v5 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 40);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 1136);
    if (!v6 || *(int *)(v1 + 904) < 1)
    {
      v8 = WTF::MediaTime::invalidTime(0);
      this = *(uint64_t (***)())v8;
      v7 = *(_QWORD *)(v8 + 8);
      goto LABEL_12;
    }
    v5 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 72) + 336);
  }
  this = (uint64_t (**)())v5();
LABEL_12:
  v17[0] = this;
  v17[1] = v7;
  if ((v7 & 0x100000000) != 0)
  {
    this = (uint64_t (**)())WTF::MediaTime::toDouble((WTF::MediaTime *)v17);
    if (v9 >= 60.0)
    {
      v10 = *(_QWORD *)(v1 + 1832);
      *(_QWORD *)&v15 = "HTMLMediaElement";
      *((_QWORD *)&v15 + 1) = 17;
      *(_QWORD *)&v16 = "mediaPlayerBufferedTimeRangesChanged";
      *((_QWORD *)&v16 + 1) = v10;
      if (*(_BYTE *)(*(_QWORD *)(v1 + 1824) + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15, "task scheduled");
      v12 = v15;
      v13 = v16;
      v11 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v11 = off_1E33C5D28;
      *(_QWORD *)(v11 + 8) = v1;
      *(_OWORD *)(v11 + 16) = v12;
      *(_OWORD *)(v11 + 32) = v13;
      v14 = (uint64_t (**)())v11;
      WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v1, 9, v1 + 768, &v14);
      this = v14;
      v14 = 0;
      if (this)
        return (uint64_t (**)())(*((uint64_t (**)(uint64_t (**)()))*this + 1))(this);
    }
  }
  return this;
}

uint64_t (**`non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerBufferedTimeRangesChanged(uint64_t (**this)()))()
{
  return WebCore::HTMLMediaElement::mediaPlayerBufferedTimeRangesChanged(this - 22);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerPrefersSandboxedParsing(WebCore::HTMLMediaElement *this)
{
  return HIBYTE(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 712)) & 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerPrefersSandboxedParsing(WebCore::HTMLMediaElement *this)
{
  return HIBYTE(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 680) + 712)) & 1;
}

WTF::MonotonicTime *WebCore::HTMLMediaElement::updateRateChangeRestrictions(WebCore::HTMLMediaElement *this)
{
  WTF::MonotonicTime *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  WTF::MonotonicTime **v12;
  WTF::MonotonicTime *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  WTF::MonotonicTime *v20;
  _BOOL4 v21;

  result = *(WTF::MonotonicTime **)(*((_QWORD *)this + 5) + 8);
  v3 = *((_QWORD *)result + 66);
  if ((!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 120)) == 0 || !*(_QWORD *)(v5 + 8))
    && (*((_WORD *)result + 1679) & 0x10) != 0)
  {
    return result;
  }
  v6 = WebCore::Document::topDocument((uint64_t)result);
  v7 = *(_QWORD *)(v6 + 528);
  if (!v7)
    goto LABEL_18;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_18;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 280) + 88);
  if (!v9 || *(_QWORD *)(v8 + 296) != v6)
    goto LABEL_18;
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 1;
  v11 = *(unsigned __int8 *)(v9 + 3520);
  if (v10)
  {
    *(_DWORD *)(v9 + 24) = v10;
    if (v11)
      goto LABEL_12;
LABEL_18:
    v12 = (WTF::MonotonicTime **)((char *)this + 1600);
    v13 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    v14 = v13 == 0;
    if ((*(_QWORD *)(*(_QWORD *)(v6 + 680) + 688) & 0x200000000000) != 0)
      goto LABEL_13;
    goto LABEL_19;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  if (!v11)
    goto LABEL_18;
LABEL_12:
  v12 = (WTF::MonotonicTime **)((char *)this + 1600);
  v13 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
  v14 = v13 == 0;
  if (v11 == 3)
  {
LABEL_13:
    if (v14)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v13 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
    }
    WebCore::MediaElementSession::addBehaviorRestriction((uint64_t)v13, 2);
    goto LABEL_22;
  }
LABEL_19:
  if (v14)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v13 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
  }
  WebCore::MediaElementSession::removeBehaviorRestriction(v13, 2);
LABEL_22:
  v15 = *(_QWORD *)(v6 + 528);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v16 + 280) + 88);
      if (v17)
      {
        if (*(_QWORD *)(v16 + 296) == v6)
        {
          v18 = *(_DWORD *)(v17 + 24);
          *(_DWORD *)(v17 + 24) = v18 + 1;
          v19 = *(unsigned __int8 *)(v17 + 3520);
          if (v18)
          {
            *(_DWORD *)(v17 + 24) = v18;
            if (v19)
              goto LABEL_28;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
            if (v19)
            {
LABEL_28:
              v20 = *v12;
              v21 = *v12 == 0;
              if ((v19 & 0xFE) == 2)
              {
LABEL_29:
                if (v21)
                {
                  WebCore::HTMLMediaElement::initializeMediaSession(this);
                  v20 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
                }
                return (WTF::MonotonicTime *)WebCore::MediaElementSession::addBehaviorRestriction((uint64_t)v20, 32);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
  }
  v20 = *v12;
  v21 = *v12 == 0;
  if ((*(_QWORD *)(*(_QWORD *)(v6 + 680) + 688) & 0x100000000000) != 0)
    goto LABEL_29;
LABEL_34:
  if (v21)
  {
    WebCore::HTMLMediaElement::initializeMediaSession(this);
    v20 = (WTF::MonotonicTime *)*((_QWORD *)this + 200);
  }
  return WebCore::MediaElementSession::removeBehaviorRestriction(v20, 32);
}

uint64_t WebCore::HTMLMediaElement::getVideoPlaybackQuality@<X0>(WebCore::HTMLMediaElement *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::LocalDOMWindow *v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  const float *v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  int32x2_t v16;
  int v17;
  double v18;
  int v19;
  char v20;

  v4 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 696);
  v5 = 0.0;
  v6 = 0.0;
  if (v4)
  {
    ++*((_DWORD *)v4 + 6);
    v7 = (double *)WebCore::LocalDOMWindow::performance(v4);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
    v6 = *(double *)&WebCore::timePrecision * floor((v8 - v7[21]) / *(double *)&WebCore::timePrecision) * 1000.0;
  }
  v9 = (const float *)((char *)this + 1160);
  v10 = (int32x2_t)vld1_dup_f32(v9);
  v11 = *((_QWORD *)this + 142);
  if (v11
    && (v12 = *(_QWORD *)(v11 + 72)) != 0
    && ((*(void (**)(int32x2_t *__return_ptr))(*(_QWORD *)v12 + 1056))(&v16), v20))
  {
    v10 = vadd_s32(v16, v10);
    v13 = v17;
    v5 = v18 + 0.0;
    v14 = v19;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)result = 1;
  *(double *)(result + 8) = v6;
  *(int32x2_t *)(result + 16) = v10;
  *(_DWORD *)(result + 24) = v13;
  *(_DWORD *)(result + 28) = v14;
  *(double *)(result + 32) = v5;
  *a2 = result;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
      return (*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v4 + 72))(v4);
    else
      --*((_DWORD *)v4 + 6);
  }
  return result;
}

uint64_t WebCore::HTMLMediaElement::setMediaControlsDependOnPageScaleFactor(uint64_t this, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unsigned __int8 v16;

  v2 = this;
  v16 = a2;
  v3 = *(_QWORD *)(this + 1824);
  v4 = *(_QWORD *)(this + 1832);
  v12 = "HTMLMediaElement";
  v13 = 17;
  v14 = "setMediaControlsDependOnPageScaleFactor";
  v15 = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v12);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 680);
  if ((*(_QWORD *)(v6 + 688) & 0x80) != 0
    || (*(_QWORD *)(v6 + 664) & 0x200000000) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::audioTag + 24))
  {
    v7 = *(_QWORD *)(v2 + 1824);
    v8 = *(_QWORD *)(v2 + 1832);
    v12 = "HTMLMediaElement";
    v13 = 17;
    v14 = "setMediaControlsDependOnPageScaleFactor";
    v15 = v8;
    if (*(_BYTE *)(v7 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v12, "forced to false by Settings value");
    v9 = *(unsigned int *)(v2 + 1265);
    v10 = v9 & 0xFFFFFFFFDFFFFFFFLL | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32);
    *(_DWORD *)(v2 + 1265) = v9 & 0xDFFFFFFF;
    *(_WORD *)(v2 + 1269) = WORD2(v10);
  }
  else
  {
    v11 = *(_DWORD *)(v2 + 1265) & 0xDFFFFFFF | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32) | ((unint64_t)v16 << 29);
    *(_DWORD *)(v2 + 1265) = *(_DWORD *)(v2 + 1265) & 0xDFFFFFFF | (v16 << 29);
    *(_WORD *)(v2 + 1269) = WORD2(v11);
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::pageScaleFactorChanged(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t v9;

  if ((*(_DWORD *)(this + 1265) & 0x20000000) != 0)
  {
    v1 = this;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E33C5DC8;
    v2[1] = v1;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    v4 = *(_DWORD *)(v1 + 24);
    *(_QWORD *)(v3 + 8) = v1;
    ++*(_QWORD *)(v1 + 128);
    *(_DWORD *)(v1 + 24) = v4 + 4;
    this = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)this = &off_1E33C5820;
    *(_QWORD *)(this + 8) = v1;
    *(_QWORD *)(this + 16) = v3;
    *(_QWORD *)(this + 24) = v2;
    v9 = this;
    v5 = *(_QWORD *)(v1 + 120);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 104))(v6 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v7, 9, &v9);
        this = v9;
        v9 = 0;
        if (!this)
          return this;
      }
      else
      {
        v9 = 0;
      }
      v8 = *(uint64_t (***)())this;
    }
    else
    {
      v9 = 0;
      v8 = &off_1E33C5820;
    }
    return v8[1]();
  }
  return this;
}

uint64_t WebCore::HTMLMediaElement::getCurrentMediaControlsStatus@<X0>(WebCore::HTMLMediaElement *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v6;

  WebCore::HTMLMediaElement::ensureMediaControls(this);
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E33C5DF0;
  v4[1] = this;
  v4[2] = a2;
  v6 = v4;
  WebCore::HTMLMediaElement::setupAndCallJS((uint64_t)this, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebCore::HTMLMediaElement::setMediaControlsMaximumRightContainerButtonCountOverride(WebCore::HTMLMediaElement *this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = a2 | 0xFFFE000000000000;
  if ((a2 & 0x80000000) != 0)
    v3 = COERCE__INT64((double)a2) + 0x2000000000000;
  if (HIDWORD(a2))
    v4 = COERCE__INT64((double)a2) + 0x2000000000000;
  else
    v4 = v3;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v5 = off_1E33C5D50;
  v5[1] = this;
  v5[2] = "maximumRightContainerButtonCountOverride";
  v5[3] = 41;
  v5[4] = v4;
  v7 = v5;
  WebCore::HTMLMediaElement::setupAndCallJS((uint64_t)this, &v7);
  return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
}

uint64_t WebCore::HTMLMediaElement::setMediaControlsHidePlaybackRates(WebCore::HTMLMediaElement *this, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  if (a2)
    v3 = 7;
  else
    v3 = 6;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v4 = off_1E33C5D50;
  v4[1] = this;
  v4[2] = "hidePlaybackRates";
  v4[3] = 18;
  v4[4] = v3;
  v6 = v4;
  WebCore::HTMLMediaElement::setupAndCallJS((uint64_t)this, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebCore::HTMLMediaElement::mediaType(WebCore::HTMLMediaElement *this)
{
  uint64_t v3;

  if (!*((_QWORD *)this + 142) || *((int *)this + 226) < 1)
    return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 2552))(this);
  if (!(*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1272))(this))
    return 3;
  if (*((_BYTE *)this + 1697))
    return 2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (!*(_BYTE *)(v3 + 467)
    && !*(_BYTE *)(v3 + 468)
    && (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1456))(this) != 0.0
    && ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) == 0)
  {
    if (*((_QWORD *)this + 142) && *((int *)this + 226) >= 1)
    {
      if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this) & 1) != 0)
        return 2;
    }
    else if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x8000000) != 0)
    {
      return 2;
    }
  }
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaType(WebCore::HTMLMediaElement *this)
{
  char *v1;
  uint64_t v4;

  v1 = (char *)this - 144;
  if (!*((_QWORD *)this + 124) || *((int *)this + 190) < 1)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 2552))((char *)this - 144);
  if (!(*(unsigned int (**)(char *))(*(_QWORD *)v1 + 1272))((char *)this - 144))
    return 3;
  if (*((_BYTE *)this + 1553))
    return 2;
  v4 = *(_QWORD *)(*((_QWORD *)this - 13) + 8);
  if (!*(_BYTE *)(v4 + 467)
    && !*(_BYTE *)(v4 + 468)
    && (*(double (**)(char *))(*(_QWORD *)v1 + 1456))(v1) != 0.0
    && ((*(uint64_t (**)(char *))(*(_QWORD *)v1 + 1472))(v1) & 1) == 0)
  {
    if (*((_QWORD *)this + 124) && *((int *)this + 190) >= 1)
    {
      if (((*(uint64_t (**)(char *))(*(_QWORD *)v1 + 1280))(v1) & 1) != 0)
        return 2;
    }
    else if ((*(_DWORD *)((_BYTE *)this + 1121) & 0x8000000) != 0)
    {
      return 2;
    }
  }
  return 1;
}

uint64_t WebCore::HTMLMediaElement::presentationType(WebCore::HTMLMediaElement *this)
{
  if (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this))
      return 1;
    else
      return 2;
  }
  else
  {
    return 3;
  }
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::presentationType(WebCore::HTMLMediaElement *this)
{
  if (*(_QWORD *)(*((_QWORD *)this - 6) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    if ((*(unsigned int (**)(char *))(*((_QWORD *)this - 18) + 1472))((char *)this - 144))
      return 1;
    else
      return 2;
  }
  else
  {
    return 3;
  }
}

uint64_t WebCore::HTMLMediaElement::displayType(WebCore::HTMLMediaElement *this)
{
  int v1;

  v1 = *((_DWORD *)this + 270);
  if (v1 == 1)
    return 1;
  else
    return v1 & 2;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::displayType(WebCore::HTMLMediaElement *this)
{
  int v1;

  v1 = *((_DWORD *)this + 234);
  if (v1 == 1)
    return 1;
  else
    return v1 & 2;
}

unint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::canProduceAudio(WebCore::HTMLMediaElement *this)
{
  char *v3;

  if (*((_BYTE *)this + 1553))
    return 1;
  if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this - 13) + 8) + 467))
    return 0;
  v3 = (char *)this - 144;
  if ((*(double (**)(char *))(*((_QWORD *)this - 18) + 1456))((char *)this - 144) == 0.0
    || ((*(uint64_t (**)(char *))(*(_QWORD *)v3 + 1472))((char *)this - 144) & 1) != 0)
  {
    return 0;
  }
  if (*((_QWORD *)this + 124) && *((int *)this + 190) >= 1)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 1280))((char *)this - 144);
  return ((unint64_t)*(unsigned int *)((char *)this + 1121) >> 27) & 1;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::isSuspended(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this - 13) + 8);
  return *(_BYTE *)(v1 + 467) || *(_BYTE *)(v1 + 468) != 0;
}

void WebCore::HTMLMediaElement::suspendPlayback(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v4[0] = "HTMLMediaElement";
  v4[1] = 17;
  v4[2] = "suspendPlayback";
  v4[3] = v3;
  (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v4, "paused = ");
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this) & 1) == 0)
    WebCore::HTMLMediaElement::pauseInternal(this);
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::suspendPlayback(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::HTMLMediaElement *v3;
  _QWORD v4[4];

  v1 = *((_QWORD *)this + 210);
  v2 = *((_QWORD *)this + 211);
  v4[0] = "HTMLMediaElement";
  v4[1] = 17;
  v4[2] = "suspendPlayback";
  v4[3] = v2;
  v3 = (WebCore::HTMLMediaElement *)((char *)this - 144);
  (*(void (**)(char *))(*((_QWORD *)this - 18) + 1384))((char *)this - 144);
  if (*(_BYTE *)(v1 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v4, "paused = ");
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v3 + 1384))(v3) & 1) == 0)
    WebCore::HTMLMediaElement::pauseInternal(v3);
}

void WebCore::HTMLMediaElement::resumeAutoplaying(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 228);
  v3 = *((_QWORD *)this + 229);
  v5[0] = "HTMLMediaElement";
  v5[1] = 17;
  v5[2] = "resumeAutoplaying";
  v5[3] = v3;
  (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5, "paused = ");
  *(_DWORD *)((char *)this + 1265) |= 0x40u;
  WebCore::HTMLMediaElement::canTransitionFromAutoplayToPlay(this, v4, (int *)v5);
  if (!BYTE4(v5[0]))
    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1440))(this);
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::resumeAutoplaying(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::HTMLMediaElement *v4;
  void *v5;
  _QWORD v6[4];

  v2 = *((_QWORD *)this + 210);
  v3 = *((_QWORD *)this + 211);
  v6[0] = "HTMLMediaElement";
  v6[1] = 17;
  v6[2] = "resumeAutoplaying";
  v6[3] = v3;
  v4 = (WebCore::HTMLMediaElement *)((char *)this - 144);
  (*(void (**)(char *))(*((_QWORD *)this - 18) + 1384))((char *)this - 144);
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6, "paused = ");
  *(_DWORD *)((char *)this + 1121) |= 0x40u;
  WebCore::HTMLMediaElement::canTransitionFromAutoplayToPlay(v4, v5, (int *)v6);
  if (!BYTE4(v6[0]))
    (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v4 + 1440))(v4);
}

uint64_t WebCore::HTMLMediaElement::mayResumePlayback(WebCore::HTMLMediaElement *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  double v9;
  BOOL v10;
  _QWORD v11[4];

  v4 = *((_QWORD *)this + 228);
  v5 = *((_QWORD *)this + 229);
  v11[0] = "HTMLMediaElement";
  v11[1] = 17;
  v11[2] = "mayResumePlayback";
  v11[3] = v5;
  (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, "paused = ");
  if (!*((_QWORD *)this + 204)
    || (v6 = *((_QWORD *)this + 142)) == 0
    || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 1048))(*(_QWORD *)(v6 + 72)),
        (result & 1) == 0))
  {
    result = WebCore::HTMLMediaElement::endedPlayback(this);
    if (!(_DWORD)result
      || ((v8 = *((_QWORD *)this + 177)) == 0
        ? (v9 = *((double *)this + 109))
        : (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 256) + 40))(*(_QWORD *)(v8 + 256))),
          v9 <= 0.0))
    {
      result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1384))(this);
      if ((_DWORD)result)
        v10 = a2 == 0;
      else
        v10 = 1;
      if (!v10)
        return (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1440))(this);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mayResumePlayback(WebCore::HTMLMediaElement *this, int a2)
{
  return WebCore::HTMLMediaElement::mayResumePlayback((WebCore::HTMLMediaElement *)((char *)this - 144), a2);
}

_QWORD *WebCore::HTMLMediaElement::mediaSessionTitle@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v3 = *(_QWORD *)(*(_QWORD *)(this[5] + 8) + 528);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (v5 = *(_QWORD *)(v4 + 24)) == 0
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (v7 = this, v8 = *(_QWORD *)(v6 + 1008), v8 < 0) && v8 != -1)
  {
    v26 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v26 += 2;
    *a2 = v26;
    return this;
  }
  v9 = this[13];
  if (!v9)
    goto LABEL_17;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_9;
LABEL_17:
    v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_17;
LABEL_9:
  v12 = v12;
  v13 = (WTF::StringImpl **)(v11 + 8);
  while (1)
  {
    v14 = (uint64_t)*(v13 - 1);
    if (v14 == WebCore::HTMLNames::titleAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_18:
  v15 = *v13;
  if (v15)
    *(_DWORD *)v15 += 2;
  v27 = v15;
  WTF::String::trim();
  WTF::String::simplifyWhiteSpace();
  v17 = v28;
  v28 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  this = v27;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      this = (_QWORD *)WTF::StringImpl::destroy(v27, v16);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!*a2 || !*((_DWORD *)*a2 + 1))
  {
    WTF::String::trim();
    WTF::String::simplifyWhiteSpace();
    v19 = v28;
    v28 = 0;
    v20 = *a2;
    *a2 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v18);
        v25 = v28;
        v28 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v20 -= 2;
        v28 = 0;
      }
    }
    this = 0;
    if (!*a2 || !*((_DWORD *)*a2 + 1))
    {
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v28, (const WTF::URL *)(v7 + 114));
      this = v28;
      if (v28)
      {
        if (!*((_DWORD *)v28 + 1))
        {
          v28 = 0;
LABEL_40:
          if (*(_DWORD *)this == 2)
            return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
          *(_DWORD *)this -= 2;
          return this;
        }
        v22 = MEMORY[0x19AEA53F4](v28);
        this = v28;
        if ((v22 & 1) == 0)
        {
          if (v28)
            *(_DWORD *)v28 += 2;
          v23 = *a2;
          *a2 = (WTF::StringImpl *)this;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::destroy(v23, v21);
              this = v28;
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
        }
        v28 = 0;
        if (this)
          goto LABEL_40;
      }
    }
  }
  return this;
}

void WebCore::HTMLMediaElement::didReceiveRemoteControlCommand(WebCore::HTMLMediaElement *a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unsigned __int8 v21;
  __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21 = a2;
  v5 = *((_QWORD *)a1 + 228);
  v6 = *((_QWORD *)a1 + 229);
  v17 = "HTMLMediaElement";
  v18 = 17;
  v19 = "didReceiveRemoteControlCommand";
  v20 = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::PlatformMediaSessionRemoteControlCommandType>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v17, &v21);
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  LOBYTE(v22) = 0;
  v23 = 0;
  v8 = WebCore::UserGestureIndicator::UserGestureIndicator(&v16, 257, v7, 1, 0, &v22, 1);
  switch(v21)
  {
    case 1u:
      v9 = *(_QWORD *)a1;
      goto LABEL_8;
    case 2u:
    case 3u:
      v9 = *(_QWORD *)a1;
      goto LABEL_9;
    case 4u:
      v10 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a1 + 1520))(a1);
      v9 = *(_QWORD *)a1;
      if (v10)
LABEL_8:
        (*(void (**)(WebCore::HTMLMediaElement *))(v9 + 1440))(a1);
      else
LABEL_9:
        (*(void (**)(WebCore::HTMLMediaElement *))(v9 + 1448))(a1);
      goto LABEL_29;
    case 5u:
      (*(void (**)(WebCore::HTMLMediaElement *, _QWORD))(*(_QWORD *)a1 + 1504))(a1, 0);
      goto LABEL_29;
    case 6u:
    case 8u:
      (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a1 + 1512))(a1);
      goto LABEL_29;
    case 7u:
      (*(void (**)(WebCore::HTMLMediaElement *, uint64_t))(*(_QWORD *)a1 + 1504))(a1, 1);
      goto LABEL_29;
    case 9u:
      if (!*(_BYTE *)(a3 + 8))
        goto LABEL_29;
      v11 = *(double *)a3;
LABEL_26:
      v17 = (const char *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v8, v11);
      v18 = v15;
      WebCore::HTMLMediaElement::fastSeek(a1, (const WTF::MediaTime *)&v17);
LABEL_29:
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v16);
      return;
    case 0xAu:
      if (*(_BYTE *)(a3 + 8))
        v12 = *(double *)a3;
      else
        v12 = 15.0;
      v13 = v12 + (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a1 + 1360))(a1);
      v11 = (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a1 + 1376))(a1);
      if (v11 >= v13)
        v11 = v13;
      goto LABEL_26;
    case 0xBu:
      if (*(_BYTE *)(a3 + 8))
        v14 = *(double *)a3;
      else
        v14 = 15.0;
      v11 = (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a1 + 1360))(a1) - v14;
      if (v11 < 0.0)
        v11 = 0.0;
      goto LABEL_26;
    case 0xEu:
      (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a1 + 1488))(a1);
      goto LABEL_29;
    case 0xFu:
      (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)a1 + 1496))(a1);
      goto LABEL_29;
    default:
      goto LABEL_29;
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::didReceiveRemoteControlCommand(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  WebCore::HTMLMediaElement::didReceiveRemoteControlCommand((WebCore::HTMLMediaElement *)(a1 - 144), a2, a3);
}

uint64_t WebCore::HTMLMediaElement::supportsSeeking(WebCore::HTMLMediaElement *this)
{
  WebCore::Document *v1;
  WebCore::Quirks *v2;

  v1 = *(WebCore::Document **)(*((_QWORD *)this + 5) + 8);
  v2 = (WebCore::Quirks *)*((_QWORD *)v1 + 86);
  if (!v2)
    v2 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v1);
  return WebCore::Quirks::needsSeekingSupportDisabled(v2) ^ 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::supportsSeeking(WebCore::HTMLMediaElement *this)
{
  WebCore::Document *v1;
  WebCore::Quirks *v2;

  v1 = *(WebCore::Document **)(*((_QWORD *)this - 13) + 8);
  v2 = (WebCore::Quirks *)*((_QWORD *)v1 + 86);
  if (!v2)
    v2 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v1);
  return WebCore::Quirks::needsSeekingSupportDisabled(v2) ^ 1;
}

uint64_t WebCore::HTMLMediaElement::shouldOverrideBackgroundPlaybackRestriction(_QWORD *a1, int a2)
{
  WebCore::PlatformMediaSessionManager *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::PlatformMediaSessionManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  if (a2 == 4)
  {
    if (((*(uint64_t (**)(_QWORD *))(*a1 + 1784))(a1) & 1) == 0)
    {
      v6 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD *))(*a1 + 1792))(a1);
      if (!(_DWORD)v6)
      {
        if (*(_BYTE *)(WebCore::PlatformMediaSessionManager::sharedManager(v6) + 53))
        {
          v11 = a1[228];
          v12 = a1[229];
          v18 = "HTMLMediaElement";
          v19 = 17;
          v20 = "shouldOverrideBackgroundPlaybackRestriction";
          v21 = v12;
          if (!*(_BYTE *)(v11 + 12))
            return 1;
          if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
            return 1;
LABEL_27:
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v18, "returning true because isPlayingToAutomotiveHeadUnit() is true");
          return 1;
        }
        goto LABEL_33;
      }
    }
LABEL_12:
    v7 = a1[228];
    v8 = a1[229];
    v18 = "HTMLMediaElement";
    v19 = 17;
    v20 = "shouldOverrideBackgroundPlaybackRestriction";
    v21 = v8;
    if (*(_BYTE *)(v7 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [59]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v18, "returning true because isPlayingToExternalTarget() is true");
    }
    return 1;
  }
  if (a2 != 2)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 1784))(a1) & 1) != 0)
    goto LABEL_12;
  v3 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(_QWORD *))(*a1 + 1792))(a1);
  if ((_DWORD)v3)
    goto LABEL_12;
  if (*(_BYTE *)(WebCore::PlatformMediaSessionManager::sharedManager(v3) + 53))
  {
    v4 = a1[228];
    v5 = a1[229];
    v18 = "HTMLMediaElement";
    v19 = 17;
    v20 = "shouldOverrideBackgroundPlaybackRestriction";
    v21 = v5;
    if (!*(_BYTE *)(v4 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
      return 1;
    goto LABEL_27;
  }
  if (*((_DWORD *)a1 + 270) == 2)
  {
    v14 = a1[228];
    v15 = a1[229];
    v18 = "HTMLMediaElement";
    v19 = 17;
    v20 = "shouldOverrideBackgroundPlaybackRestriction";
    v21 = v15;
    if (*(_BYTE *)(v14 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v18, "returning true, in PiP");
    return 1;
  }
LABEL_33:
  if (*((_BYTE *)a1 + 1544)
    && !*((_DWORD *)a1 + 384)
    && ((*(uint64_t (**)(_QWORD *))(*a1 + 1848))(a1) & 1) != 0
    && (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 3265) & 8) != 0)
  {
    v16 = a1[228];
    v17 = a1[229];
    v18 = "HTMLMediaElement";
    v19 = 17;
    v20 = "shouldOverrideBackgroundPlaybackRestriction";
    v21 = v17;
    if (*(_BYTE *)(v16 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v18, "returning true because playing an audio MediaStreamTrack");
    return 1;
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::shouldOverrideBackgroundPlaybackRestriction(uint64_t a1, int a2)
{
  return WebCore::HTMLMediaElement::shouldOverrideBackgroundPlaybackRestriction((_QWORD *)(a1 - 144), a2);
}

unsigned __int8 *`non-virtual thunk to'WebCore::HTMLMediaElement::processIsSuspendedChanged(WTF **this)
{
  return WebCore::HTMLMediaElement::updateSleepDisabling(this - 18);
}

BOOL WebCore::HTMLMediaElement::shouldOverridePauseDuringRouteChange(WebCore::HTMLMediaElement *this)
{
  return *((_BYTE *)this + 1544) && *((_DWORD *)this + 384) == 0;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::shouldOverridePauseDuringRouteChange(WebCore::HTMLMediaElement *this)
{
  return *((_BYTE *)this + 1400) && *((_DWORD *)this + 348) == 0;
}

unsigned __int8 *WebCore::HTMLMediaElement::requestHostingContextID(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 1136);
  if (!v3)
    return (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, 0);
  v4 = *(unsigned __int8 **)v3;
  if (__ldaxr(*(unsigned __int8 **)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*((_QWORD *)v4 + 1);
  v6 = __ldxr(v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  v7 = *a2;
  *a2 = 0;
  v10 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v3 + 72) + 152))(*(_QWORD *)(v3 + 72), &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
}

uint64_t WebCore::HTMLMediaElement::layerHostingContextID(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 142);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 160))(*(_QWORD *)(v1 + 72));
  else
    return 0;
}

float WebCore::HTMLMediaElement::naturalSize(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  float result;

  v1 = *((_QWORD *)this + 142);
  if (!v1)
    return 0.0;
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 288))(*(_QWORD *)(v1 + 72));
  return result;
}

float WebCore::HTMLMediaElement::videoLayerSize(WebCore::HTMLMediaElement *this)
{
  return *((float *)this + 443);
}

uint64_t WebCore::HTMLMediaElement::mediaState(WebCore::HTMLMediaElement *this)
{
  int v2;
  int v3;
  unsigned int v4;
  WebCore::MediaElementSession *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1264))(this))
    v2 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1272))(this);
  else
    v2 = 0;
  v3 = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this);
  if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1784))(this) & 1) != 0
    || (*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1792))(this))
  {
    v4 = 4;
  }
  else
  {
    v4 = 0;
  }
  if (*((_BYTE *)this + 1648))
  {
    v5 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    if (!v5)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(this);
      v5 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
    }
    if (WebCore::MediaElementSession::wirelessVideoPlaybackDisabled(v5))
      v6 = 512;
    else
      v6 = 520;
    v4 |= v6;
  }
  v7 = *((_QWORD *)this + 200);
  if (v7)
    LOBYTE(v7) = *(_BYTE *)(v7 + 89) & 1;
  if (*((int *)this + 226) >= 1 && (v7 & 1) == 0 && !*((_BYTE *)this + 1649))
    v4 |= 0x10u;
  if (v2 | v3)
    v8 = v4 | 0x400;
  else
    v8 = v4;
  if (v2)
  {
    if (WebCore::HTMLMediaElement::endedPlayback(this))
      v8 = v8 | 0x20;
    else
      v8 = v8;
  }
  v9 = *((_QWORD *)this + 144);
  if (v9)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9))
      v8 = v8 | 0x8000000;
    else
      v8 = v8;
  }
  if ((*(_DWORD *)((_BYTE *)this + 1265) & 2) != 0)
  {
    if (*((_BYTE *)this + 1697))
    {
LABEL_34:
      LODWORD(v8) = v8 | 1;
      goto LABEL_37;
    }
    v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (*(_BYTE *)(v10 + 467)
      || *(_BYTE *)(v10 + 468)
      || (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1456))(this) == 0.0
      || ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) != 0)
    {
      goto LABEL_37;
    }
    if (*((_QWORD *)this + 142) && *((int *)this + 226) >= 1)
    {
      if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this) & 1) != 0)
        goto LABEL_34;
    }
    else if ((*(_DWORD *)((_BYTE *)this + 1265) & 0x8000000) != 0)
    {
      goto LABEL_34;
    }
LABEL_37:
    if (v2)
      return v8 | 2;
    else
      return v8;
  }
  return v8;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaState(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaState((WebCore::HTMLMediaElement *)((char *)this - 192));
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::visibilityAdjustmentStateDidChange(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::visibilityAdjustmentStateDidChange((WebCore::HTMLMediaElement *)((char *)this - 192));
}

void WebCore::HTMLMediaElement::pageMutedStateDidChange(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return;
  ++*(_DWORD *)v4;
  v6 = *((_QWORD *)this + 142);
  if (v6)
  {
    v7 = *(unsigned __int8 **)v6;
    if (__ldaxr(*(unsigned __int8 **)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_10:
    ++*((_QWORD *)v7 + 1);
    v9 = __ldxr(v7);
    if (v9 == 1)
    {
      if (!__stlxr(0, v7))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_15:
    if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) == 0)
    {
      v10 = *((_QWORD *)this + 177);
      if (!v10 || !*(_BYTE *)(v10 + 104))
      {
        v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
        if (!v11)
          goto LABEL_24;
        v12 = *(_QWORD *)(v11 + 8);
        if (!v12)
          goto LABEL_24;
        v13 = *(_QWORD *)(v12 + 24);
        if (!v13)
          goto LABEL_24;
        v14 = *(_QWORD *)(v13 + 8);
        if (!v14)
          goto LABEL_24;
        v15 = (*(_DWORD *)v14)++;
        v16 = *(_BYTE *)(v14 + 352);
        if (v15)
        {
          *(_DWORD *)v14 = v15;
          if ((v16 & 1) == 0)
          {
LABEL_24:
            v17 = (*(unsigned __int16 *)((char *)this + 1269) >> 9) & 1;
LABEL_27:
            *(_BYTE *)(v6 + 227) = v17;
            (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 512))(*(_QWORD *)(v6 + 72));
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
            goto LABEL_28;
          }
        }
        else
        {
          WebCore::Page::~Page(v14);
          WTF::fastFree(v18, v19);
          if ((v16 & 1) == 0)
            goto LABEL_24;
        }
      }
    }
    LOBYTE(v17) = 1;
    goto LABEL_27;
  }
LABEL_28:
  if ((*(unsigned int (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1280))(this)
    && ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1472))(this) & 1) == 0
    && (*(_BYTE *)(v4 + 352) & 1) != 0)
  {
    WebCore::HTMLMediaElement::userDidInterfereWithAutoplay(this);
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v20, v21);
  }
  else
  {
    --*(_DWORD *)v4;
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::pageMutedStateDidChange(WebCore::HTMLMediaElement *this)
{
  WebCore::HTMLMediaElement::pageMutedStateDidChange((WebCore::HTMLMediaElement *)((char *)this - 192));
}

uint64_t WebCore::HTMLMediaElement::doesHaveAttribute(WebCore::HTMLMediaElement *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF *v17;
  void *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;

  v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v19, MEMORY[0x1E0CBF2F8], a2, MEMORY[0x1E0CBF2F8]);
  v7 = *((_QWORD *)this + 13);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 40);
      LODWORD(v10) = *(_DWORD *)(v7 + 52);
      if (!(_DWORD)v10)
        goto LABEL_12;
    }
    else
    {
      v9 = v7 + 32;
      LODWORD(v10) = v8 >> 5;
      if (!(_DWORD)v10)
        goto LABEL_12;
    }
    v10 = v10;
    v5 = (WTF::StringImpl **)(v9 + 8);
    while (1)
    {
      v11 = *(v5 - 1);
      if (v11 == v19 || *((_QWORD *)v11 + 3) == *((_QWORD *)v19 + 3) && *((_QWORD *)v11 + 4) == *((_QWORD *)v19 + 4))
        break;
      v5 += 2;
      if (!--v10)
      {
        v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
LABEL_12:
  v12 = *v5;
  if (*v5
    && (v19 != (WebCore::QualifiedName::QualifiedNameImpl *)WebCore::HTMLNames::x_itunes_inherit_uri_query_componentAttr
     || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 672) & 0x1000000000000000) != 0))
  {
    if (a3)
    {
      *(_DWORD *)v12 += 2;
      v14 = *a3;
      *a3 = v12;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v6);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  v15 = (WTF::StringImpl **)v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v15);
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  return v13;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::doesHaveAttribute(WebCore::HTMLMediaElement *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  return WebCore::HTMLMediaElement::doesHaveAttribute((WebCore::HTMLMediaElement *)((char *)this - 176), a2, a3);
}

void WebCore::HTMLMediaElement::allowsMediaDocumentInlinePlaybackChanged(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  WebCore::HTMLMediaElement **v5;
  uint64_t v6;
  int v7;
  WebCore::HTMLMediaElement *v8;
  uint64_t v9;
  WebCore::HTMLMediaElement *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  WTF::MonotonicTime *v19;
  double v20;
  double v21;
  WebCore::MediaElementSession *v22;

  v2 = *((_QWORD *)this + 177);
  if (!v2)
  {
LABEL_26:
    if (WebCore::HTMLMediaElement::couldPlayIfEnoughData(this)
      && (*((int *)this + 226) > 2 || *((int *)this + 227) >= 3))
    {
      v22 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
      if (!v22)
      {
        WebCore::HTMLMediaElement::initializeMediaSession(this);
        v22 = (WebCore::MediaElementSession *)*((_QWORD *)this + 200);
      }
      if (WebCore::MediaElementSession::requiresFullscreenForVideoPlayback(v22))
      {
        if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1800))(this) & 1) == 0)
          (*(void (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1808))(this);
      }
    }
    return;
  }
  if (*(_BYTE *)(v2 + 72))
    return;
  v3 = *(unsigned int *)(v2 + 68);
  v4 = 0.0;
  if (!(_DWORD)v3)
  {
LABEL_25:
    if (v4 > (*(double (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1376))(this))
      return;
    goto LABEL_26;
  }
  v5 = *(WebCore::HTMLMediaElement ***)(v2 + 56);
  v6 = 8 * v3;
  v7 = 1;
  while (1)
  {
    v8 = *v5;
    if (*((int *)*v5 + 226) < 3)
      break;
    v9 = *((_QWORD *)v8 + 200);
    if (!v9)
    {
      WebCore::HTMLMediaElement::initializeMediaSession(*v5);
      v9 = *((_QWORD *)v8 + 200);
    }
    if (*(_BYTE *)(v9 + 48) == 4)
      break;
    v10 = *v5;
    if ((*(_DWORD *)((_BYTE *)*v5 + 1265) & 0x40) != 0)
    {
      if (((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v10 + 1384))(v10) & 1) != 0)
        return;
      v10 = *v5;
    }
    v7 &= (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v10 + 1384))(v10);
    ++v5;
    v6 -= 8;
    if (!v6)
    {
      if ((v7 & 1) != 0)
        return;
      v11 = *((_QWORD *)this + 177);
      v12 = *(unsigned int *)(v11 + 68);
      if ((_DWORD)v12)
      {
        v4 = *(double *)(v11 + 96);
        if (v4 == -1.0)
        {
          v13 = *(uint64_t **)(v11 + 56);
          v14 = 8 * v12;
          v15 = 0.0;
          do
          {
            v16 = *v13++;
            v17 = (*(double (**)(uint64_t))(*(_QWORD *)v16 + 1376))(v16);
            if (v15 >= v17)
              v18 = v15;
            else
              v18 = v17;
            v15 = v18;
            v14 -= 8;
          }
          while (v14);
          v20 = (*(double (**)(_QWORD))(**(_QWORD **)(v11 + 256) + 24))(*(_QWORD *)(v11 + 256));
          if (v20 >= v15)
            v20 = v15;
          *(double *)(v11 + 96) = fmax(v20, 0.0);
          *(_QWORD *)(v11 + 216) = 0;
          WTF::MonotonicTime::now(v19);
          WebCore::TimerBase::setNextFireTime(v11 + 192, v21 + 0.0);
          v4 = *(double *)(v11 + 96);
        }
        if (v4 < 0.0)
          return;
      }
      goto LABEL_25;
    }
  }
}

_QWORD *WebCore::HTMLMediaElement::isVisibleInViewportChanged(WebCore::HTMLMediaElement *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  _QWORD *v16;

  v2 = *((_QWORD *)this + 142);
  if (!v2)
    goto LABEL_21;
  v3 = *(unsigned __int8 **)v2;
  if (__ldaxr(*(unsigned __int8 **)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  ++*((_QWORD *)v3 + 1);
  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C39E98);
    }
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C39EB8);
    }
    v7 = (*(_WORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2;
  }
  else
  {
    v7 = 0;
  }
  if (*(unsigned __int8 *)(v2 + 226) != v7)
  {
    *(_BYTE *)(v2 + 226) = v7;
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 72) + 328))(*(_QWORD *)(v2 + 72));
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
LABEL_21:
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E33C5E40;
  v8[1] = this;
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  v10 = *((_DWORD *)this + 6);
  *(_QWORD *)(v9 + 8) = this;
  ++*((_QWORD *)this + 16);
  *((_DWORD *)this + 6) = v10 + 4;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E33C5820;
  result[1] = this;
  result[2] = v9;
  result[3] = v8;
  v16 = result;
  v12 = *((_QWORD *)this + 15);
  if (!v12)
  {
    v16 = 0;
    v15 = &off_1E33C5820;
    return (_QWORD *)v15[1]();
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
  {
    v16 = 0;
    goto LABEL_26;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 104))(v13 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v14, 9, (uint64_t *)&v16);
  result = v16;
  v16 = 0;
  if (result)
  {
LABEL_26:
    v15 = (uint64_t (**)())*result;
    return (_QWORD *)v15[1]();
  }
  return result;
}

BOOL WebCore::HTMLMediaElement::shouldOverrideBackgroundLoadingRestriction(WebCore::HTMLMediaElement *this)
{
  return ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1784))(this) & 1) != 0
      || ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)this + 1792))(this) & 1) != 0
      || *((_DWORD *)this + 270) == 2;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::shouldOverrideBackgroundLoadingRestriction(WebCore::HTMLMediaElement *this)
{
  char *v2;

  v2 = (char *)this - 144;
  return ((*(uint64_t (**)(char *))(*((_QWORD *)this - 18) + 1784))((char *)this - 144) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(_QWORD *)v2 + 1792))(v2) & 1) != 0
      || *((_DWORD *)this + 234) == 2;
}

char *`non-virtual thunk to'WebCore::HTMLMediaElement::logChannel(WebCore::HTMLMediaElement *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::HTMLMediaElement::bufferingPolicy(WebCore::HTMLMediaElement *this)
{
  return *((unsigned __int8 *)this + 1264);
}

uint64_t WebCore::HTMLMediaElement::mediaSessionDuration(WebCore::HTMLMediaElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_13;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      goto LABEL_13;
LABEL_6:
    v4 = v4;
    while (1)
    {
      v5 = *v3;
      if (*v3 == WebCore::HTMLNames::loopAttr
        || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 24)
        && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::loopAttr + 32))
      {
        break;
      }
      v3 += 2;
      if (!--v4)
        goto LABEL_13;
    }
    v6 = WTF::MediaTime::positiveInfiniteTime(this);
    return *(_QWORD *)v6;
  }
  v3 = *(uint64_t **)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if ((_DWORD)v4)
    goto LABEL_6;
LABEL_13:
  v7 = *((_QWORD *)this + 144);
  if (v7)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 40))(*((_QWORD *)this + 144));
  v9 = *((_QWORD *)this + 142);
  if (v9 && *((int *)this + 226) >= 1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 72) + 336))(*(_QWORD *)(v9 + 72));
  v6 = WTF::MediaTime::invalidTime(this);
  return *(_QWORD *)v6;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaSessionDuration(WebCore::HTMLMediaElement *this)
{
  return WebCore::HTMLMediaElement::mediaSessionDuration((WebCore::HTMLMediaElement *)((char *)this - 144));
}

BOOL WebCore::HTMLMediaElement::hasMediaStreamSource(WebCore::HTMLMediaElement *this)
{
  return *((_BYTE *)this + 1544) && *((_DWORD *)this + 384) == 0;
}

BOOL `non-virtual thunk to'WebCore::HTMLMediaElement::hasMediaStreamSource(WebCore::HTMLMediaElement *this)
{
  return *((_BYTE *)this + 1400) && *((_DWORD *)this + 348) == 0;
}

void WebCore::HTMLMediaElement::documentSecurityOrigin(WebCore::HTMLMediaElement *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192), a2);
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v5 = *(unsigned int *)(v4 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_6[v5])(&v6, a3, v4 + 8);
    *(_DWORD *)(a3 + 24) = v5;
  }
}

void `non-virtual thunk to'WebCore::HTMLMediaElement::documentSecurityOrigin(WebCore::HTMLMediaElement *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this - 17) + 8) + 192), a2);
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v5 = *(unsigned int *)(v4 + 32);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_6[v5])(&v6, a3, v4 + 8);
    *(_DWORD *)(a3 + 24) = v5;
  }
}

unsigned __int8 *WebCore::HTMLMediaElement::updateMediaPlayer(WebCore::HTMLMediaElement *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  int v14;
  WebCore::Quirks *v15;
  _BOOL4 ShouldMaintainAspectRatioQuirk;
  _QWORD v18[4];
  uint64_t v19;

  v5 = *((_QWORD *)a1 + 228);
  v6 = *((_QWORD *)a1 + 229);
  v18[0] = "HTMLMediaElement";
  v18[1] = 17;
  v18[2] = "updateMediaPlayer";
  v18[3] = v6;
  v19 = a2;
  if (*(_BYTE *)(v5 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v18);
  }
  v8 = *((_QWORD *)a1 + 142);
  if (v8)
  {
    v9 = *(unsigned __int8 **)v8;
    if (__ldaxr(*(unsigned __int8 **)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_13:
    ++*((_QWORD *)v9 + 1);
    v11 = __ldxr(v9);
    if (v11 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
LABEL_18:
  if (*(_DWORD *)(v8 + 200) != (_DWORD)v19 || *(_DWORD *)(v8 + 204) != HIDWORD(v19))
  {
    *(_QWORD *)(v8 + 200) = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 72) + 640))(*(_QWORD *)(v8 + 72), &v19);
  }
  WebCore::HTMLMediaElement::visibilityStateChanged(a1);
  if ((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C3A370);
    }
    if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C3A390);
    }
    v14 = (*(_WORD *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x4C) & 6) == 2;
  }
  else
  {
    v14 = 0;
  }
  if (*(unsigned __int8 *)(v8 + 226) != v14)
  {
    *(_BYTE *)(v8 + 226) = v14;
    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 72) + 328))(*(_QWORD *)(v8 + 72));
  }
  v15 = *(WebCore::Quirks **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 688);
  if (!v15)
    v15 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8));
  ShouldMaintainAspectRatioQuirk = WebCore::Quirks::needsVideoShouldMaintainAspectRatioQuirk(v15);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 72) + 800))(*(_QWORD *)(v8 + 72), ShouldMaintainAspectRatioQuirk | a3);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
}

uint64_t WebCore::HTMLMediaElement::mediaPlayerQueueTaskOnEventLoop(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  int v7;
  __int16 v8;
  __int16 v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = WebCore::Document::eventLoop((WebCore::Document *)v3, a2);
  ++*(_DWORD *)(v4 + 8);
  result = (uint64_t)WebCore::EventLoopTaskGroup::queueTask(v4, 9, (uint64_t *)a2);
  v7 = *(_DWORD *)(v4 + 8);
  if (v7)
  {
    *(_DWORD *)(v4 + 8) = v7 - 1;
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v8 = *(_WORD *)(v3 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v3 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          return (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v3, v6);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v8 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v8 | 0x400;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLMediaElement::mediaPlayerQueueTaskOnEventLoop(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  int v7;
  __int16 v8;
  __int16 v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 - 136) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = WebCore::Document::eventLoop((WebCore::Document *)v3, a2);
  ++*(_DWORD *)(v4 + 8);
  result = (uint64_t)WebCore::EventLoopTaskGroup::queueTask(v4, 9, (uint64_t *)a2);
  v7 = *(_DWORD *)(v4 + 8);
  if (v7)
  {
    *(_DWORD *)(v4 + 8) = v7 - 1;
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v8 = *(_WORD *)(v3 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v3 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          return (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v3, v6);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v8 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v8 | 0x400;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

void WebCore::HTMLMediaElement::localizedSourceType(WebCore::HTMLMediaElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const __CFString *v5;
  uint64_t (*v6)();
  uint64_t v7;

  if (*((_BYTE *)this + 1544) && !*((_DWORD *)this + 384))
  {
    v5 = CFSTR("MediaStream (Media Element Source Type)");
    goto LABEL_13;
  }
  v4 = *((_QWORD *)this + 144);
  if (v4)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4) & 1) != 0)
    {
      v5 = CFSTR("ManagedMediaSource (Media Element Source Type)");
LABEL_13:
      WebCore::localizedString(v5, (uint64_t)a2);
      return;
    }
    if (*((_QWORD *)this + 144))
      v6 = WTF::RefPtr<WebCore::MediaSourceInterfaceProxy,WTF::RawPtrTraits<WebCore::MediaSourceInterfaceProxy>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceInterfaceProxy>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  if (v6)
  {
    v5 = CFSTR("MediaSource (Media Element Source Type)");
    goto LABEL_13;
  }
  v7 = *((_QWORD *)this + 142);
  if (v7)
  {
    switch((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 824))(*(_QWORD *)(v7 + 72)))
    {
      case 1u:
        v5 = CFSTR("File (Media Element Source Type)");
        goto LABEL_13;
      case 2u:
        v5 = CFSTR("LiveStream (Media Element Source Type)");
        goto LABEL_13;
      case 3u:
        v5 = CFSTR("StoredStream (Media Element Source Type)");
        goto LABEL_13;
      case 4u:
        v5 = CFSTR("HLS (Media Element Source Type)");
        goto LABEL_13;
      default:
        break;
    }
  }
  *a2 = 0;
}

WTF::MonotonicTime *WebCore::HTMLMediaElement::isActiveNowPlayingSessionChanged(WTF::MonotonicTime *this, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  __int16 v9;
  __int16 v10;
  WTF *v11;
  void *v12;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  v4 = *(_QWORD *)(v2 + 528);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 24)) != 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      ++*(_DWORD *)v7;
    if (v3)
      goto LABEL_7;
  }
  else
  {
    v7 = 0;
    if (v3)
    {
LABEL_7:
      *(_DWORD *)(v2 + 24) = v3;
      goto LABEL_8;
    }
  }
  v9 = *(_WORD *)(v2 + 30);
  if ((v9 & 0x400) == 0)
  {
    v10 = *(_WORD *)(v2 + 28);
    if ((v10 & 0xF000) == 0x9000)
    {
      this = (WTF::MonotonicTime *)WebCore::Document::removedLastRef((WebCore::Document *)v2, a2);
    }
    else
    {
      if ((v10 & 0x20) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
        v9 = *(_WORD *)(v2 + 30);
      }
      *(_WORD *)(v2 + 30) = v9 | 0x400;
      this = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    }
  }
LABEL_8:
  if (v7)
  {
    if ((*(_QWORD *)(v7 + 1904) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(v7 + 1904) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *(_QWORD *)(v7 + 1896) = 0;
      WTF::MonotonicTime::now(this);
      this = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v7 + 1872, v8 + 0.0);
    }
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::Page::~Page(v7);
      return (WTF::MonotonicTime *)WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return this;
}

WTF::MonotonicTime *`non-virtual thunk to'WebCore::HTMLMediaElement::isActiveNowPlayingSessionChanged(WebCore::HTMLMediaElement *this, void *a2)
{
  return WebCore::HTMLMediaElement::isActiveNowPlayingSessionChanged((WebCore::HTMLMediaElement *)((char *)this - 144), a2);
}

uint64_t WebCore::HTMLMenuElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C5218;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLMetaElement::mediaAttributeMatches(WebCore::HTMLMetaElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomString *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WebCore::CSSTokenizer *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  void *v22;
  WTF *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v31;
  char v32;
  const WebCore::CSSParserToken **v33;
  unsigned int *v34;
  void *v35;
  WTF *v36;
  unsigned int v37;
  unsigned int v38;
  const WebCore::MQ::MediaQuery *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  const WebCore::CSSParserToken **v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  const WebCore::CSSParserToken *v58;
  uint64_t v59;
  const WebCore::CSSParserToken **v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  _BYTE v65[3];
  WTF::StringImpl *v66;
  uint64_t v67;

  v1 = (uint64_t)this;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*((_BYTE *)this + 128))
    goto LABEL_31;
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 + 4);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 40);
      LODWORD(v6) = *(_DWORD *)(v3 + 52);
      if ((_DWORD)v6)
      {
LABEL_5:
        v6 = v6;
        v7 = (WTF::AtomString *)(v5 + 8);
        while (1)
        {
          v8 = *((_QWORD *)v7 - 1);
          if (v8 == WebCore::HTMLNames::mediaAttr
            || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 24)
            && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::mediaAttr + 32))
          {
            goto LABEL_14;
          }
          v7 = (WTF::AtomString *)((char *)v7 + 16);
          if (!--v6)
          {
            v7 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v5 = v3 + 32;
      LODWORD(v6) = v4 >> 5;
      if ((_DWORD)v6)
        goto LABEL_5;
    }
  }
  v7 = (WTF::AtomString *)MEMORY[0x1E0CBF2F8];
LABEL_14:
  WTF::AtomString::convertToASCIILowercase(v7);
  v9 = *(_QWORD *)(v2 + 528);
  if (v9)
  {
    v9 = *(_QWORD *)(v9 + 8);
    if (v9)
    {
      v9 = *(_QWORD *)(v9 + 24);
      if (v9)
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (v9)
          LOBYTE(v9) = *(_BYTE *)(v9 + 450) != 0;
      }
    }
  }
  v65[0] = v9;
  v65[1] = (*(_DWORD *)(*(_QWORD *)(v2 + 680) + 672) & 0x8000000) != 0;
  v65[2] = 0;
  WebCore::CSSTokenizer::tryCreate((unsigned int **)&v66, &v67);
  v11 = (WebCore::CSSTokenizer *)v67;
  if (v67)
  {
    v12 = *(_QWORD *)(v67 + 48) + 24 * *(unsigned int *)(v67 + 60);
    v58 = *(const WebCore::CSSParserToken **)(v67 + 48);
    v59 = v12;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(&v58, (WebCore::CSSParserTokenRange *)v65, (uint64_t)&v52);
    WebCore::CSSTokenizer::~CSSTokenizer(v11, v13);
    WTF::fastFree(v14, v15);
  }
  else
  {
    v52 = 0;
    v53 = 0;
  }
  if (*(_BYTE *)(v1 + 128))
  {
    v16 = *(_DWORD *)(v1 + 124);
    if (v16)
      WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v1 + 112), (WTF::StringImpl *)(*(_QWORD *)(v1 + 112) + 56 * v16));
    v17 = *(WTF **)(v1 + 112);
    if (v17)
    {
      *(_QWORD *)(v1 + 112) = 0;
      *(_DWORD *)(v1 + 120) = 0;
      WTF::fastFree(v17, v10);
    }
    *(_QWORD *)(v1 + 112) = v52;
    v18 = v53;
    v52 = 0;
    v53 = 0;
    *(_QWORD *)(v1 + 120) = v18;
  }
  else
  {
    *(_QWORD *)(v1 + 112) = v52;
    v19 = v53;
    v52 = 0;
    v53 = 0;
    *(_QWORD *)(v1 + 120) = v19;
    *(_BYTE *)(v1 + 128) = 1;
  }
  WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v10);
  v21 = v66;
  v66 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
LABEL_31:
  LOBYTE(v58) = 0;
  v64 = 0;
  if (*(_QWORD *)(v2 + 1944) && !*(_BYTE *)(v2 + 3405))
  {
    WebCore::Style::resolveForDocument((WebCore::Style *)v2, (uint64_t)&v52);
    if (v64)
    {
      WebCore::RenderStyle::operator=(&v58, (WTF::StringImpl *)&v52);
    }
    else
    {
      LODWORD(v58) = 0;
      v23 = v53;
      v53 = 0;
      v59 = (uint64_t)v23;
      v60 = v54;
      v24 = v55;
      v55 = 0u;
      v61 = v24;
      v62 = v56;
      v25 = v57;
      v57 = 0u;
      v63 = v25;
      v64 = 1;
    }
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v52, v22);
  }
  v26 = *(_QWORD *)(v2 + 528);
  if (v26 && (v27 = *(_QWORD *)(v26 + 8)) != 0 && (v28 = *(_QWORD *)(v27 + 288)) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v28 + 328) + 280)
                                                                         + 16)
                                                           + 896))(&v52);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v48 = *(_QWORD *)(*(_QWORD *)(v28 + 328) + 24);
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 8);
        if (v49)
        {
          v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 80) + 8) + 200);
          if (v50)
          {
            v31 = *(WTF::StringImpl **)(v50 + 136);
            if (v31)
            {
              if (*((_DWORD *)v31 + 1))
              {
                *(_DWORD *)v31 += 2;
                v51 = v52;
                v52 = v31;
                if (!v51)
                  goto LABEL_44;
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, v29);
                else
                  *(_DWORD *)v51 -= 2;
              }
            }
          }
        }
      }
    }
    v31 = v52;
    if (v52)
    {
LABEL_44:
      v32 = 0;
      if (v64)
        v33 = &v58;
      else
        v33 = 0;
      *(_DWORD *)v31 += 2;
      goto LABEL_53;
    }
    v31 = *(WTF::StringImpl **)(v28 + 1040);
    if (v31)
    {
      *(_DWORD *)v31 += 2;
      goto LABEL_44;
    }
  }
  else
  {
    v31 = 0;
  }
  if (v64)
    v33 = &v58;
  else
    v33 = 0;
  v32 = 1;
LABEL_53:
  v52 = v31;
  v34 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
  v36 = (WTF *)v34;
  if (v34)
  {
    do
      v37 = __ldaxr(v34);
    while (__stlxr(v37 + 1, v34));
  }
  v53 = (WTF *)v34;
  v54 = v33;
  LOBYTE(v55) = 2;
  if (*(_BYTE *)(v1 + 128))
  {
    v38 = *(_DWORD *)(v1 + 124);
    if (v38)
    {
      v39 = *(const WebCore::MQ::MediaQuery **)(v1 + 112);
      v40 = 56 * v38 - 56;
      do
      {
        v1 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&v52, v39);
        if ((v1 & 1) != 0)
          break;
        v39 = (const WebCore::MQ::MediaQuery *)((char *)v39 + 56);
        v41 = v40;
        v40 -= 56;
      }
      while (v41);
      v36 = v53;
    }
    else
    {
      v1 = 1;
    }
    v53 = 0;
    if (!v36)
      goto LABEL_64;
    do
    {
      v42 = __ldaxr((unsigned int *)v36);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, (unsigned int *)v36));
    if (v43)
      goto LABEL_64;
  }
  else
  {
    __break(1u);
  }
  atomic_store(1u, (unsigned int *)v36);
  v46 = *((unsigned int *)v36 + 7);
  if ((_DWORD)v46)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v36 + 2), (WTF::StringImpl *)(*((_QWORD *)v36 + 2) + 32 * v46));
  v47 = (WTF *)*((_QWORD *)v36 + 2);
  if (v47)
  {
    *((_QWORD *)v36 + 2) = 0;
    *((_DWORD *)v36 + 6) = 0;
    WTF::fastFree(v47, v35);
  }
  WTF::fastFree(v36, v35);
LABEL_64:
  v44 = v52;
  v52 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v35);
      if ((v32 & 1) != 0)
        goto LABEL_70;
      goto LABEL_68;
    }
    *(_DWORD *)v44 -= 2;
  }
  if ((v32 & 1) != 0)
    goto LABEL_70;
LABEL_68:
  if (*(_DWORD *)v31 == 2)
    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v35);
  else
    *(_DWORD *)v31 -= 2;
LABEL_70:
  if (v64)
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v58, v35);
  return v1;
}

unint64_t *WebCore::HTMLMetaElement::contentColor(WebCore::HTMLMetaElement *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  unint64_t *v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;

  v7 = (unint64_t *)((char *)this + 136);
  if (*((_BYTE *)this + 144))
    return v7;
  v9 = *((_QWORD *)this + 13);
  if (!v9)
    goto LABEL_13;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_5;
LABEL_13:
    v13 = (unsigned int **)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_13;
LABEL_5:
  v12 = v12;
  v13 = (unsigned int **)(v11 + 8);
  while (1)
  {
    v14 = (uint64_t)*(v13 - 1);
    if (v14 == WebCore::HTMLNames::contentAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (unsigned int **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_14:
  WebCore::CSSParser::parseColorWithoutContext(v13, 0, (uint64_t *)&v25, a2, a3, a4, a5, a6, a7);
  if (!*((_BYTE *)this + 144))
  {
LABEL_22:
    *((_QWORD *)this + 17) = v25;
    *((_BYTE *)this + 144) = 1;
    return v7;
  }
  v16 = *v7;
  if ((*v7 & 0x8000000000000) != 0)
  {
    if ((v25 & 0x8000000000000) == 0)
      goto LABEL_18;
    v27 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
    v26 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
    v21 = WebCore::operator==<float,4ul>((float *)&v27, (float *)&v26);
    v16 = *v7;
    if (!v21 || HIBYTE(v16) != HIBYTE(v25) || BYTE6(v16) != BYTE6(v25))
      goto LABEL_18;
    v16 = v25;
  }
  else if (v16 != v25 || (v25 & 0x8000000000000) != 0)
  {
LABEL_18:
    if ((v16 & 0x8000000000000) != 0)
    {
      v18 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v15);
      }
    }
    *v7 = v25;
    goto LABEL_20;
  }
  if ((v16 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v15);
    }
  }
LABEL_20:
  if (!*((_BYTE *)this + 144))
  {
    __break(1u);
    goto LABEL_22;
  }
  return v7;
}

uint64_t *WebCore::HTMLMetaElement::removedFromAncestor(WebCore::HTMLMetaElement *a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v6;
  uint64_t *result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2;
  result = WebCore::HTMLElement::removedFromAncestor((uint64_t)a1, a2, a3, a4, a5);
  if ((v6 & 1) == 0)
    return result;
  v15 = *((_QWORD *)a1 + 13);
  if (v15 && (v16 = *(_DWORD *)(v15 + 4), (v16 & 2) != 0))
  {
    if ((v16 & 1) != 0)
    {
      v23 = *(uint64_t **)(v15 + 40);
      LODWORD(v24) = *(_DWORD *)(v15 + 52);
    }
    else
    {
      v23 = (uint64_t *)(v15 + 32);
      LODWORD(v24) = v16 >> 5;
    }
    if ((_DWORD)v24)
    {
      v24 = v24;
      while (1)
      {
        v25 = *v23;
        if (*v23 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v23 += 2;
        if (!--v24)
          goto LABEL_33;
      }
    }
    else
    {
LABEL_33:
      v23 = 0;
    }
    v17 = v23 + 1;
  }
  else
  {
    v17 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v18 = *v17;
  if (*v17 && *(_DWORD *)(v18 + 4) == 11)
  {
    v21 = *(_QWORD *)(v18 + 8);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v21 & 0xDF) == 0x54
        && (*(_BYTE *)(v21 + 1) & 0xDF) == 0x48
        && (*(_BYTE *)(v21 + 2) & 0xDF) == 0x45
        && (*(_BYTE *)(v21 + 3) & 0xDF) == 0x4D
        && (*(_BYTE *)(v21 + 4) & 0xDF) == 0x45
        && (*(_BYTE *)(v21 + 5) & 0xDF) == 0xD
        && (*(_BYTE *)(v21 + 6) & 0xDF) == 0x43
        && (*(_BYTE *)(v21 + 7) & 0xDF) == 0x4F
        && (*(_BYTE *)(v21 + 8) & 0xDF) == 0x4C
        && (*(_BYTE *)(v21 + 9) & 0xDF) == 0x4F)
      {
        v22 = *(unsigned __int8 *)(v21 + 10);
        goto LABEL_24;
      }
    }
    else if ((*(_WORD *)v21 & 0xFFDF) == 0x54
           && (*(_WORD *)(v21 + 2) & 0xFFDF) == 0x48
           && (*(_WORD *)(v21 + 4) & 0xFFDF) == 0x45
           && (*(_WORD *)(v21 + 6) & 0xFFDF) == 0x4D
           && (*(_WORD *)(v21 + 8) & 0xFFDF) == 0x45
           && (*(_WORD *)(v21 + 10) & 0xFFDF) == 0xD
           && (*(_WORD *)(v21 + 12) & 0xFFDF) == 0x43
           && (*(_WORD *)(v21 + 14) & 0xFFDF) == 0x4F
           && (*(_WORD *)(v21 + 16) & 0xFFDF) == 0x4C
           && (*(_WORD *)(v21 + 18) & 0xFFDF) == 0x4F)
    {
      v22 = *(unsigned __int16 *)(v21 + 20);
LABEL_24:
      if ((v22 & 0xFFFFFFDF) == 0x52)
        return WebCore::Document::metaElementThemeColorChanged(*(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8), a1, v9, v10, v11, v12, v13, v14);
    }
  }
  if (v15 && (v19 = *(_DWORD *)(v15 + 4), (v19 & 2) != 0))
  {
    if ((v19 & 1) != 0)
    {
      v26 = *(_QWORD **)(v15 + 40);
      LODWORD(v27) = *(_DWORD *)(v15 + 52);
    }
    else
    {
      v26 = (_QWORD *)(v15 + 32);
      LODWORD(v27) = v19 >> 5;
    }
    if ((_DWORD)v27)
    {
      v27 = v27;
      while (1)
      {
        v28 = *v26;
        if (*v26 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v26 += 2;
        if (!--v27)
          goto LABEL_42;
      }
    }
    else
    {
LABEL_42:
      v26 = 0;
    }
    v20 = v26 + 1;
  }
  else
  {
    v20 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
  }
  result = (uint64_t *)WebCore::isNameColorScheme(*v20);
  if ((_DWORD)result)
    return (uint64_t *)WebCore::Document::metaElementColorSchemeChanged(*(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8));
  return result;
}

void WebCore::HTMLMarqueeElement::~HTMLMarqueeElement(WebCore::HTMLMarqueeElement *this, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  int v7;
  void *v8;

  *((_QWORD *)this + 14) = &off_1E33A0540;
  v3 = (WebCore::HTMLMarqueeElement *)((char *)this + 112);
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
      v7 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v7 == 1 || v7 == 2)
          ++*(_DWORD *)(v5 + 216);
      }
      else
      {
        *(_DWORD *)(v5 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(v6, v3);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)v6, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(v3, a2);
  WebCore::Element::~Element((uint64_t)this);
}

{
  WebCore::ActiveDOMObject *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  int v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  *((_QWORD *)this + 14) = &off_1E33A0540;
  v3 = (WebCore::HTMLMarqueeElement *)((char *)this + 112);
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
      v7 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v7 == 1 || v7 == 2)
          ++*(_DWORD *)(v5 + 216);
      }
      else
      {
        *(_DWORD *)(v5 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(v6, v3);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)v6, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(v3, a2);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v9, v10);
}

uint64_t WebCore::HTMLMarqueeElement::ref(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLMarqueeElement::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (this[6] == 2)
  {
    v3 = *((_WORD *)this + 15);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this + 14);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)this, a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
          v3 = *((_WORD *)v2 + 15);
        }
        *((_WORD *)v2 + 15) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

void `non-virtual thunk to'WebCore::HTMLMarqueeElement::~HTMLMarqueeElement(WebCore::HTMLMarqueeElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::ScriptExecutionContext *v5;
  int v6;
  void *v7;

  *(_QWORD *)this = &off_1E33A0540;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = (WebCore::ScriptExecutionContext *)(v4 - 96);
      v6 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v6 == 1 || v6 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(v5, this);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)v5, v7);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WebCore::Element::~Element((uint64_t)this - 112);
}

{
  uint64_t v3;
  uint64_t v4;
  WebCore::ScriptExecutionContext *v5;
  int v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E33A0540;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = (WebCore::ScriptExecutionContext *)(v4 - 96);
      v6 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v6 == 1 || v6 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject(v5, this);
      WebCore::ScriptExecutionContext::derefAllowingPartiallyDestroyed((unsigned int *)v5, v7);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WebCore::Element::~Element((uint64_t)this - 112);
  bmalloc::api::isoDeallocate(v8, v9);
}

uint64_t `non-virtual thunk to'WebCore::HTMLMarqueeElement::ref(uint64_t this)
{
  *(_DWORD *)(this - 88) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLMarqueeElement::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  __int16 v3;
  __int16 v4;

  v2 = this;
  if (*(this - 22) == 2)
  {
    v3 = *((_WORD *)this - 41);
    if ((v3 & 0x400) == 0)
    {
      v4 = *((_WORD *)this - 42);
      if ((v4 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)(this - 28), a2);
      }
      else
      {
        if ((v4 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
          v3 = *((_WORD *)v2 - 41);
        }
        *((_WORD *)v2 - 41) = v3 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*((_QWORD *)v2 - 14) + 72))(v2 - 28);
      }
    }
  }
  else
  {
    *(this - 22) -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLMaybeFormAssociatedCustomElement::isMaybeFormAssociatedCustomElement(WebCore::HTMLMaybeFormAssociatedCustomElement *this)
{
  return 1;
}

void WebCore::HTMLMetaElement::~HTMLMetaElement(WebCore::HTMLMetaElement *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*((_BYTE *)this + 144))
  {
    v3 = *((_QWORD *)this + 17);
    if ((v3 & 0x8000000000000) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  if (*((_BYTE *)this + 128))
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, a2);
  WebCore::Element::~Element((uint64_t)this);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (*((_BYTE *)this + 144))
  {
    v3 = *((_QWORD *)this + 17);
    if ((v3 & 0x8000000000000) != 0)
    {
      v6 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  if (*((_BYTE *)this + 128))
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, a2);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::HTMLLegendElement::~HTMLLegendElement(WebCore::HTMLLegendElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

double std::make_unique[abi:sn180100]<WebCore::DOMTokenList,WebCore::HTMLLinkElement &,WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits> &,WebCore::HTMLLinkElement::relList(void)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33C4BD8;
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = &WebCore::HTMLNames::relAttr;
  *(_WORD *)(v4 + 16) = 256;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v4 + 32) = 1;
  *(_QWORD *)(v4 + 48) = v5;
  *a1 = v4;
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::HTMLLinkElement::relList(void)::$_0,BOOL,WebCore::Document &,WTF::StringView>::call(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  return WebCore::LinkRelAttribute::isSupported(a2, a3, a4);
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerAcceleratedCompositingEnabled(WebCore::MediaPlayerClient *this)
{
  return 0;
}

void WebCore::MediaPlayerClient::mediaPlayerMediaKeysStorageDirectory(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::MediaPlayerClient::mediaPlayerReferrer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::MediaPlayerClient::mediaPlayerUserAgent(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerIsFullscreen(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerIsFullscreenPermitted(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerIsVideo(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerContentBoxRect(WebCore::MediaPlayerClient *this)
{
  return 0;
}

float WebCore::MediaPlayerClient::mediaPlayerContentsScale(WebCore::MediaPlayerClient *this)
{
  return 1.0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerPlatformVolumeConfigurationRequired(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerIsLooping(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerCachedResourceLoader(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::doesHaveAttribute()
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerShouldUsePersistentCache(WebCore::MediaPlayerClient *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerMediaCacheDirectory(WebCore::MediaPlayerClient *this)
{
  return MEMORY[0x1E0CBF738];
}

void WebCore::MediaPlayerClient::outOfBandTrackSources(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::MediaPlayerClient::mediaPlayerNetworkInterfaceName(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

WTF *WebCore::MediaPlayerClient::mediaPlayerGetRawCookies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *result;
  WTF *v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (HIDWORD(v10))
  {
    v5 = v9;
    v6 = 136 * HIDWORD(v10);
    do
    {
      WebCore::Cookie::~Cookie(v5, v4);
      v5 = (WTF *)(v7 + 136);
      v6 -= 136;
    }
    while (v6);
  }
  result = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

void WebCore::MediaPlayerClient::mediaPlayerSourceApplicationIdentifier(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::MediaPlayerClient::mediaPlayerElementId(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

double WebCore::MediaPlayerClient::mediaPlayerRequestedPlaybackRate(WebCore::MediaPlayerClient *this)
{
  return 0.0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerFullscreenMode(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerIsVideoFullscreenStandby(WebCore::MediaPlayerClient *this)
{
  return 0;
}

void WebCore::MediaPlayerClient::mediaPlayerPreferredAudioCharacteristics(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerShouldDisableSleep(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerShouldCheckHardwareSupport(WebCore::MediaPlayerClient *this)
{
  return 0;
}

double WebCore::MediaPlayerClient::documentSecurityOrigin@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void WebCore::MediaPlayerClient::audioOutputDeviceId(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::MediaPlayerClient::audioOutputDeviceIdOverride(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerQueueTaskOnEventLoop()
{
  return WTF::callOnMainThread();
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerPrefersSandboxedParsing(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerShouldDisableHDR(WebCore::MediaPlayerClient *this)
{
  return 0;
}

float WebCore::MediaPlayerClient::mediaPlayerVideoLayerSize(WebCore::MediaPlayerClient *this)
{
  return 0.0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerClientIdentifier(WebCore::MediaPlayerClient *this)
{
  return -1;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerLogIdentifier(WebCore::MediaPlayerClient *this)
{
  return 0;
}

void WebCore::AudioTrackClient::~AudioTrackClient(WebCore::AudioTrackClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::TextTrackClient::~TextTrackClient(WebCore::TextTrackClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::VideoTrackClient::~VideoTrackClient(WebCore::VideoTrackClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t *std::unique_ptr<WebCore::HTMLMediaElement::CueData>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *i;
  WTF *v8;

  v2 = *result;
  *result = (uint64_t)a2;
  if (v2)
  {
    v3 = *(WTF **)(v2 + 8);
    if (v3)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      do
      {
        v5 = v4;
        v4 = *(WTF **)v4;
      }
      while (v4);
      v6 = (WTF *)*((_QWORD *)v5 + 2);
      if (v6)
      {
        do
        {
          if (*(WTF **)v6 == v5)
          {
            for (i = (WTF *)*((_QWORD *)v6 + 1); i; i = *(WTF **)i)
              v6 = i;
          }
          v8 = v6;
          WTF::fastFree(v5, a2);
          v6 = (WTF *)*((_QWORD *)v8 + 2);
          v5 = v8;
        }
        while (v6);
      }
      else
      {
        v8 = v5;
      }
      WTF::fastFree(v8, a2);
      *(_QWORD *)v2 = 0;
    }
    return (uint64_t *)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*,false>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  _QWORD *v7;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int **v14;
  void *v15;
  unsigned int *v16;
  char v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  __n128 v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned int *v36;
  char v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  __int128 v46;
  unsigned int **v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  unsigned int *v62;
  unint64_t v63;
  int v64;
  unsigned int **v65;
  unsigned int *v66;
  char v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  __int128 v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  __int128 v76;
  unsigned int **v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  __int128 v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  __int128 v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  void *v91;
  unsigned int *v92;
  char v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  __int128 v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  __int128 v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  unsigned int *v107;
  uint64_t v108;
  _QWORD *i;
  _QWORD *v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int **v114;
  _OWORD *v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  char v121;
  unsigned int v122;
  unsigned int v123;
  __int128 v124;
  int64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  char v132;
  unsigned int *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  __int128 v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  __int128 v164;
  __int128 *v165;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  __int128 v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  _QWORD *v175;
  __int128 v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  __int128 v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  __int128 v191;
  _OWORD *v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int *v197;
  char v198;
  unsigned int v199;
  unsigned int v200;
  BOOL v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int v214;
  __int128 v215;
  _OWORD *v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int *v221;
  __int128 v222;
  unsigned int v223;
  unsigned int v224;
  __int128 v225;
  uint64_t v227;
  int64_t v228;
  unsigned int *v229;
  int64_t v230;
  _BYTE v231[24];
  char v232;
  __int128 v233;
  char v234;

  v7 = a2;
LABEL_2:
  v9 = v7 - 4;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)v7 - v10;
    v12 = v11 >> 5;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((uint64_t)v9, a1))
        {
          v92 = *(unsigned int **)a1;
          *(_QWORD *)a1 = 0;
          v93 = *(_BYTE *)(a1 + 24);
          *(_OWORD *)v231 = *(_OWORD *)(a1 + 8);
          v231[16] = v93;
          v94 = *v9;
          *v9 = 0;
          v95 = *(unsigned int **)a1;
          *(_QWORD *)a1 = v94;
          if (v95)
          {
            do
            {
              v96 = __ldaxr(v95);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, v95));
            if (!v97)
            {
              atomic_store(1u, v95);
              WTF::fastFree((WTF *)v95, v91);
            }
          }
          v98 = *(_OWORD *)(v7 - 3);
          *(_BYTE *)(a1 + 24) = *((_BYTE *)v7 - 8);
          *(_OWORD *)(a1 + 8) = v98;
          v99 = (unsigned int *)*(v7 - 4);
          *(v7 - 4) = v92;
          if (v99)
          {
            do
            {
              v100 = __ldaxr(v99);
              v101 = v100 - 1;
            }
            while (__stlxr(v101, v99));
            if (!v101)
            {
              atomic_store(1u, v99);
              WTF::fastFree((WTF *)v99, v91);
            }
          }
          v102 = *(_OWORD *)v231;
          *((_BYTE *)v7 - 8) = v231[16];
          *(_OWORD *)(v7 - 3) = v102;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a1 + 32, (uint64_t)v9, a3);
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a1 + 32, a1 + 64, (uint64_t)v9, a3);
        return;
      case 5:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)v9, a3);
        return;
      default:
        if (v11 > 767)
        {
          if (!a4)
          {
            if ((_QWORD *)a1 != v7)
            {
              v230 = (unint64_t)(v12 - 2) >> 1;
              v125 = v230;
              do
              {
                v126 = v125;
                if (v230 >= v125)
                {
                  v127 = (2 * v125) | 1;
                  v128 = a1 + 32 * v127;
                  v129 = 2 * v125 + 2;
                  v228 = v125;
                  if (v129 < v12)
                  {
                    v130 = (*a3)(a1 + 32 * v127, v128 + 32);
                    v126 = v228;
                    if (v130)
                    {
                      v128 += 32;
                      v127 = v129;
                    }
                  }
                  v131 = a1 + 32 * v126;
                  v132 = (*a3)(v128, v131);
                  v126 = v228;
                  if ((v132 & 1) == 0)
                  {
                    v133 = *(unsigned int **)v131;
                    *(_QWORD *)v131 = 0;
                    *(_QWORD *)v231 = v133;
                    v134 = a1 + 32 * v228;
                    v135 = *(_OWORD *)(v134 + 8);
                    v232 = *(_BYTE *)(v134 + 24);
                    *(_OWORD *)&v231[8] = v135;
                    do
                    {
                      v136 = v128;
                      v137 = *(_QWORD *)v128;
                      *(_QWORD *)v128 = 0;
                      v138 = *(unsigned int **)v131;
                      *(_QWORD *)v131 = v137;
                      if (v138)
                      {
                        do
                        {
                          v139 = __ldaxr(v138);
                          v140 = v139 - 1;
                        }
                        while (__stlxr(v140, v138));
                        if (!v140)
                        {
                          atomic_store(1u, v138);
                          WTF::fastFree((WTF *)v138, a2);
                        }
                      }
                      v141 = *(_OWORD *)(v128 + 8);
                      *(_BYTE *)(v131 + 24) = *(_BYTE *)(v128 + 24);
                      *(_OWORD *)(v131 + 8) = v141;
                      if (v230 < v127)
                        break;
                      v142 = (2 * v127) | 1;
                      v128 = a1 + 32 * v142;
                      v143 = 2 * v127 + 2;
                      if (v143 < v12 && (*a3)(a1 + 32 * v142, v128 + 32))
                      {
                        v128 += 32;
                        v142 = v143;
                      }
                      v131 = v136;
                      v127 = v142;
                    }
                    while (!(*a3)(v128, (uint64_t)v231));
                    v144 = *(_QWORD *)v231;
                    *(_QWORD *)v231 = 0;
                    v145 = *(unsigned int **)v136;
                    *(_QWORD *)v136 = v144;
                    if (v145)
                    {
                      do
                      {
                        v146 = __ldaxr(v145);
                        v147 = v146 - 1;
                      }
                      while (__stlxr(v147, v145));
                      if (!v147)
                      {
                        atomic_store(1u, v145);
                        WTF::fastFree((WTF *)v145, a2);
                      }
                    }
                    v148 = *(_OWORD *)&v231[8];
                    *(_BYTE *)(v136 + 24) = v232;
                    *(_OWORD *)(v136 + 8) = v148;
                    v149 = *(unsigned int **)v231;
                    *(_QWORD *)v231 = 0;
                    if (v149)
                    {
                      do
                      {
                        v150 = __ldaxr(v149);
                        v151 = v150 - 1;
                      }
                      while (__stlxr(v151, v149));
                      if (!v151)
                      {
                        atomic_store(1u, v149);
                        WTF::fastFree((WTF *)v149, a2);
                      }
                    }
                    v126 = v228;
                  }
                }
                v125 = v126 - 1;
              }
              while (v126);
              v152 = (unint64_t)v11 >> 5;
              while (v152 > 0)
              {
                if (v152 != 1)
                {
                  v153 = v7;
                  v154 = 0;
                  v229 = *(unsigned int **)a1;
                  *(_QWORD *)a1 = 0;
                  v155 = *(_BYTE *)(a1 + 24);
                  v233 = *(_OWORD *)(a1 + 8);
                  v234 = v155;
                  v156 = a1;
                  do
                  {
                    v157 = v156;
                    v156 += 32 * v154 + 32;
                    v158 = 2 * v154;
                    v154 = (2 * v154) | 1;
                    v159 = v158 + 2;
                    if (v158 + 2 < v152 && (*a3)(v156, v156 + 32))
                    {
                      v156 += 32;
                      v154 = v159;
                    }
                    v160 = *(unsigned int **)v156;
                    *(_QWORD *)v156 = 0;
                    v161 = *(unsigned int **)v157;
                    *(_QWORD *)v157 = v160;
                    if (v161)
                    {
                      do
                      {
                        v162 = __ldaxr(v161);
                        v163 = v162 - 1;
                      }
                      while (__stlxr(v163, v161));
                      if (!v163)
                      {
                        atomic_store(1u, v161);
                        WTF::fastFree((WTF *)v161, a2);
                      }
                    }
                    v164 = *(_OWORD *)(v156 + 8);
                    *(_BYTE *)(v157 + 24) = *(_BYTE *)(v156 + 24);
                    *(_OWORD *)(v157 + 8) = v164;
                  }
                  while (v154 <= (uint64_t)((unint64_t)(v152 - 2) >> 1));
                  v165 = (__int128 *)(v156 + 8);
                  v7 -= 4;
                  if ((_QWORD *)v156 == v153 - 4)
                  {
                    v188 = *(unsigned int **)v156;
                    v168 = v152 - 1;
                    *(_QWORD *)v156 = v229;
                    if (v188)
                    {
                      do
                      {
                        v189 = __ldaxr(v188);
                        v190 = v189 - 1;
                      }
                      while (__stlxr(v190, v188));
                      if (!v190)
                      {
                        atomic_store(1u, v188);
                        WTF::fastFree((WTF *)v188, a2);
                      }
                    }
                    v191 = v233;
                    *(_BYTE *)(v156 + 24) = v234;
                    *v165 = v191;
                  }
                  else
                  {
                    v166 = *v7;
                    *v7 = 0;
                    v167 = *(unsigned int **)v156;
                    *(_QWORD *)v156 = v166;
                    v168 = v152 - 1;
                    if (v167)
                    {
                      do
                      {
                        v169 = __ldaxr(v167);
                        v170 = v169 - 1;
                      }
                      while (__stlxr(v170, v167));
                      if (!v170)
                      {
                        atomic_store(1u, v167);
                        WTF::fastFree((WTF *)v167, a2);
                      }
                    }
                    v171 = *(_OWORD *)(v153 - 3);
                    *(_BYTE *)(v156 + 24) = *((_BYTE *)v153 - 8);
                    *v165 = v171;
                    v172 = (unsigned int *)*(v153 - 4);
                    *(v153 - 4) = v229;
                    if (v172)
                    {
                      do
                      {
                        v173 = __ldaxr(v172);
                        v174 = v173 - 1;
                      }
                      while (__stlxr(v174, v172));
                      if (!v174)
                      {
                        atomic_store(1u, v172);
                        WTF::fastFree((WTF *)v172, a2);
                      }
                    }
                    v175 = v153 - 3;
                    v176 = v233;
                    *((_BYTE *)v175 + 16) = v234;
                    *(_OWORD *)v175 = v176;
                    v177 = v156 + 32 - a1;
                    if (v177 >= 33)
                    {
                      v178 = (((unint64_t)v177 >> 5) - 2) >> 1;
                      v179 = a1 + 32 * v178;
                      if ((*a3)(v179, v156))
                      {
                        v180 = *(unsigned int **)v156;
                        *(_QWORD *)v156 = 0;
                        *(_QWORD *)v231 = v180;
                        v181 = *v165;
                        v232 = *(_BYTE *)(v156 + 24);
                        *(_OWORD *)&v231[8] = v181;
                        do
                        {
                          v182 = v179;
                          v183 = *(_QWORD *)v179;
                          *(_QWORD *)v179 = 0;
                          v184 = *(unsigned int **)v156;
                          *(_QWORD *)v156 = v183;
                          if (v184)
                          {
                            do
                            {
                              v185 = __ldaxr(v184);
                              v186 = v185 - 1;
                            }
                            while (__stlxr(v186, v184));
                            if (!v186)
                            {
                              atomic_store(1u, v184);
                              WTF::fastFree((WTF *)v184, a2);
                            }
                          }
                          v187 = *(_OWORD *)(v179 + 8);
                          *(_BYTE *)(v156 + 24) = *(_BYTE *)(v179 + 24);
                          *(_OWORD *)(v156 + 8) = v187;
                          if (!v178)
                            break;
                          v178 = (v178 - 1) >> 1;
                          v179 = a1 + 32 * v178;
                          v156 = v182;
                        }
                        while (((*a3)(v179, (uint64_t)v231) & 1) != 0);
                        v192 = (_OWORD *)(v182 + 8);
                        v193 = *(_QWORD *)v231;
                        *(_QWORD *)v231 = 0;
                        v194 = *(unsigned int **)v182;
                        *(_QWORD *)v182 = v193;
                        if (v194)
                        {
                          do
                          {
                            v195 = __ldaxr(v194);
                            v196 = v195 - 1;
                          }
                          while (__stlxr(v196, v194));
                          if (!v196)
                          {
                            atomic_store(1u, v194);
                            WTF::fastFree((WTF *)v194, a2);
                          }
                          v197 = *(unsigned int **)v231;
                          v198 = v232;
                          *v192 = *(_OWORD *)&v231[8];
                          *(_BYTE *)(v182 + 24) = v198;
                          *(_QWORD *)v231 = 0;
                          if (v197)
                          {
                            do
                            {
                              v199 = __ldaxr(v197);
                              v200 = v199 - 1;
                            }
                            while (__stlxr(v200, v197));
                            if (!v200)
                            {
                              atomic_store(1u, v197);
                              WTF::fastFree((WTF *)v197, a2);
                            }
                          }
                        }
                        else
                        {
                          v202 = *(_OWORD *)&v231[8];
                          *(_BYTE *)(v182 + 24) = v232;
                          *v192 = v202;
                        }
                      }
                    }
                  }
                  v201 = (unint64_t)v152 > 2;
                  v152 = v168;
                  if (v201)
                    continue;
                }
                return;
              }
              goto LABEL_244;
            }
            return;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = (unsigned int **)(a1 + 32 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 <= 0x1000)
          {
            v27 = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>((uint64_t)v14, a1, (uint64_t)v9, a3);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, (uint64_t)v14, (uint64_t)v9, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1 + 32, (uint64_t)(v14 - 4), (uint64_t)(v7 - 8), a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1 + 64, a1 + 32 + 32 * v13, (uint64_t)(v7 - 12), a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>((uint64_t)(v14 - 4), (uint64_t)v14, a1 + 32 + 32 * v13, a3);
            v16 = *(unsigned int **)a1;
            *(_QWORD *)a1 = 0;
            v17 = *(_BYTE *)(a1 + 24);
            *(_OWORD *)v231 = *(_OWORD *)(a1 + 8);
            v231[16] = v17;
            v18 = *v14;
            *v14 = 0;
            v19 = *(unsigned int **)a1;
            *(_QWORD *)a1 = v18;
            if (v19)
            {
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                atomic_store(1u, v19);
                WTF::fastFree((WTF *)v19, v15);
              }
            }
            v22 = a1 + 32 * v13;
            v23 = *(_OWORD *)(v22 + 8);
            *(_BYTE *)(a1 + 24) = *(_BYTE *)(v22 + 24);
            *(_OWORD *)(a1 + 8) = v23;
            v24 = *v14;
            *v14 = v16;
            if (v24)
            {
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
              {
                atomic_store(1u, v24);
                WTF::fastFree((WTF *)v24, v15);
              }
            }
            v27 = *(__n128 *)v231;
            *(_BYTE *)(v22 + 24) = v231[16];
            *(__n128 *)(v22 + 8) = v27;
          }
          --a4;
          if ((a5 & 1) == 0 && (((uint64_t (*)(uint64_t, uint64_t, __n128))*a3)(a1 - 32, a1, v27) & 1) == 0)
          {
            v62 = *(unsigned int **)a1;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)v231 = v62;
            LOBYTE(v62) = *(_BYTE *)(a1 + 24);
            *(_OWORD *)&v231[8] = *(_OWORD *)(a1 + 8);
            v232 = (char)v62;
            if (((*a3)((uint64_t)v231, (uint64_t)v9) & 1) != 0)
            {
              v10 = a1;
              while (1)
              {
                v10 += 32;
                if ((_QWORD *)v10 == v7)
                  break;
                if (((*a3)((uint64_t)v231, v10) & 1) != 0)
                  goto LABEL_71;
              }
            }
            else
            {
              v63 = a1 + 32;
              do
              {
                v10 = v63;
                if (v63 >= (unint64_t)v7)
                  break;
                v64 = (*a3)((uint64_t)v231, v63);
                v63 = v10 + 32;
              }
              while (!v64);
LABEL_71:
              v65 = (unsigned int **)v7;
              if (v10 >= (unint64_t)v7)
              {
LABEL_75:
                if (v10 >= (unint64_t)v65)
                {
                  v77 = (unsigned int **)(v10 - 32);
                  if (v10 - 32 != a1)
                  {
                    v78 = *v77;
                    *v77 = 0;
                    v79 = *(unsigned int **)a1;
                    *(_QWORD *)a1 = v78;
                    if (v79)
                    {
                      do
                      {
                        v80 = __ldaxr(v79);
                        v81 = v80 - 1;
                      }
                      while (__stlxr(v81, v79));
                      if (!v81)
                      {
                        atomic_store(1u, v79);
                        WTF::fastFree((WTF *)v79, a2);
                      }
                    }
                    v82 = *(_OWORD *)(v10 - 24);
                    *(_BYTE *)(a1 + 24) = *(_BYTE *)(v10 - 8);
                    *(_OWORD *)(a1 + 8) = v82;
                  }
                  v83 = *(unsigned int **)v231;
                  *(_QWORD *)v231 = 0;
                  v84 = *v77;
                  *v77 = v83;
                  if (v84)
                  {
                    do
                    {
                      v85 = __ldaxr(v84);
                      v86 = v85 - 1;
                    }
                    while (__stlxr(v86, v84));
                    if (!v86)
                    {
                      atomic_store(1u, v84);
                      WTF::fastFree((WTF *)v84, a2);
                    }
                  }
                  v87 = *(_OWORD *)&v231[8];
                  *(_BYTE *)(v10 - 8) = v232;
                  *(_OWORD *)(v10 - 24) = v87;
                  v88 = *(unsigned int **)v231;
                  *(_QWORD *)v231 = 0;
                  if (v88)
                  {
                    do
                    {
                      v89 = __ldaxr(v88);
                      v90 = v89 - 1;
                    }
                    while (__stlxr(v90, v88));
                    if (!v90)
                    {
                      atomic_store(1u, v88);
                      WTF::fastFree((WTF *)v88, a2);
                    }
                  }
                  goto LABEL_104;
                }
                v66 = *(unsigned int **)v10;
                *(_QWORD *)v10 = 0;
                v67 = *(_BYTE *)(v10 + 24);
                v233 = *(_OWORD *)(v10 + 8);
                v234 = v67;
                v68 = *v65;
                *v65 = 0;
                v69 = *(unsigned int **)v10;
                *(_QWORD *)v10 = v68;
                if (v69)
                {
                  do
                  {
                    v70 = __ldaxr(v69);
                    v71 = v70 - 1;
                  }
                  while (__stlxr(v71, v69));
                  if (!v71)
                  {
                    atomic_store(1u, v69);
                    WTF::fastFree((WTF *)v69, a2);
                  }
                }
                v72 = *(_OWORD *)(v65 + 1);
                *(_BYTE *)(v10 + 24) = *((_BYTE *)v65 + 24);
                *(_OWORD *)(v10 + 8) = v72;
                v73 = *v65;
                *v65 = v66;
                if (v73)
                {
                  do
                  {
                    v74 = __ldaxr(v73);
                    v75 = v74 - 1;
                  }
                  while (__stlxr(v75, v73));
                  if (!v75)
                  {
                    atomic_store(1u, v73);
                    WTF::fastFree((WTF *)v73, a2);
                  }
                }
                v76 = v233;
                *((_BYTE *)v65 + 24) = v234;
                *(_OWORD *)(v65 + 1) = v76;
                while (1)
                {
                  v10 += 32;
                  if ((_QWORD *)v10 == v7)
                    break;
                  if ((*a3)((uint64_t)v231, v10))
                  {
                    while (v65 != (unsigned int **)a1)
                    {
                      v65 -= 4;
                      if (((*a3)((uint64_t)v231, (uint64_t)v65) & 1) == 0)
                        goto LABEL_75;
                    }
                    break;
                  }
                }
              }
              else
              {
                v65 = (unsigned int **)v7;
                while (v65 != (unsigned int **)a1)
                {
                  v65 -= 4;
                  if (((*a3)((uint64_t)v231, (uint64_t)v65) & 1) == 0)
                    goto LABEL_75;
                }
              }
            }
LABEL_244:
            __break(1u);
            return;
          }
          v227 = a4;
          v28 = v9;
          v29 = 0;
          v30 = *(unsigned int **)a1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)v231 = v30;
          LOBYTE(v30) = *(_BYTE *)(a1 + 24);
          *(_OWORD *)&v231[8] = *(_OWORD *)(a1 + 8);
          v232 = (char)v30;
          do
          {
            v31 = a1 + v29 + 32;
            if ((_QWORD *)v31 == v7)
              goto LABEL_244;
            v29 += 32;
          }
          while (((*a3)(v31, (uint64_t)v231) & 1) != 0);
          v33 = a1 + v29;
          v34 = v7;
          if (v29 != 32)
          {
            while (v34 != (_QWORD *)a1)
            {
              v34 -= 4;
              if ((*a3)((uint64_t)v34, (uint64_t)v231))
                goto LABEL_29;
            }
            goto LABEL_244;
          }
          v34 = v7;
          do
          {
            if (v33 >= (unint64_t)v34)
              break;
            v34 -= 4;
          }
          while (((*a3)((uint64_t)v34, (uint64_t)v231) & 1) == 0);
LABEL_29:
          v10 = a1 + v29;
          if (v33 < (unint64_t)v34)
          {
            v35 = (unint64_t)v34;
            do
            {
              v36 = *(unsigned int **)v10;
              *(_QWORD *)v10 = 0;
              v37 = *(_BYTE *)(v10 + 24);
              v233 = *(_OWORD *)(v10 + 8);
              v234 = v37;
              v38 = *(unsigned int **)v35;
              *(_QWORD *)v35 = 0;
              v39 = *(unsigned int **)v10;
              *(_QWORD *)v10 = v38;
              if (v39)
              {
                do
                {
                  v40 = __ldaxr(v39);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v39));
                if (!v41)
                {
                  atomic_store(1u, v39);
                  WTF::fastFree((WTF *)v39, v32);
                }
              }
              v42 = *(_OWORD *)(v35 + 8);
              *(_BYTE *)(v10 + 24) = *(_BYTE *)(v35 + 24);
              *(_OWORD *)(v10 + 8) = v42;
              v43 = *(unsigned int **)v35;
              *(_QWORD *)v35 = v36;
              if (v43)
              {
                do
                {
                  v44 = __ldaxr(v43);
                  v45 = v44 - 1;
                }
                while (__stlxr(v45, v43));
                if (!v45)
                {
                  atomic_store(1u, v43);
                  WTF::fastFree((WTF *)v43, v32);
                }
              }
              v46 = v233;
              *(_BYTE *)(v35 + 24) = v234;
              *(_OWORD *)(v35 + 8) = v46;
              do
              {
                v10 += 32;
                if ((_QWORD *)v10 == v7)
                  goto LABEL_244;
              }
              while (((*a3)(v10, (uint64_t)v231) & 1) != 0);
              do
              {
                if (v35 == a1)
                  goto LABEL_244;
                v35 -= 32;
              }
              while (!(*a3)(v35, (uint64_t)v231));
            }
            while (v10 < v35);
          }
          v47 = (unsigned int **)(v10 - 32);
          if (v10 - 32 != a1)
          {
            v48 = *v47;
            *v47 = 0;
            v49 = *(unsigned int **)a1;
            *(_QWORD *)a1 = v48;
            if (v49)
            {
              do
              {
                v50 = __ldaxr(v49);
                v51 = v50 - 1;
              }
              while (__stlxr(v51, v49));
              if (!v51)
              {
                atomic_store(1u, v49);
                WTF::fastFree((WTF *)v49, v32);
              }
            }
            v52 = *(_OWORD *)(v10 - 24);
            *(_BYTE *)(a1 + 24) = *(_BYTE *)(v10 - 8);
            *(_OWORD *)(a1 + 8) = v52;
          }
          v53 = *(unsigned int **)v231;
          *(_QWORD *)v231 = 0;
          v54 = *v47;
          *v47 = v53;
          v9 = v28;
          a4 = v227;
          if (v54)
          {
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v54);
              WTF::fastFree((WTF *)v54, v32);
            }
          }
          v57 = *(_OWORD *)&v231[8];
          *(_BYTE *)(v10 - 8) = v232;
          *(_OWORD *)(v10 - 24) = v57;
          v58 = *(unsigned int **)v231;
          *(_QWORD *)v231 = 0;
          if (v58)
          {
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v58);
              WTF::fastFree((WTF *)v58, v32);
            }
          }
          if (v33 < (unint64_t)v34)
            goto LABEL_62;
          v61 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, v10 - 32, a3);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(v10, (uint64_t)v7, a3))
          {
            if ((v61 & 1) != 0)
              continue;
LABEL_62:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*,false>(a1, v10 - 32, a3, v227, a5 & 1);
LABEL_104:
            a5 = 0;
            continue;
          }
          v7 = (_QWORD *)(v10 - 32);
          if ((v61 & 1) != 0)
            return;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if ((_QWORD *)a1 != v7)
          {
            v103 = (_QWORD *)(a1 + 32);
            if ((_QWORD *)(a1 + 32) != v7)
            {
              v104 = (_QWORD *)a1;
              do
              {
                v105 = v103;
                if ((*a3)((uint64_t)v103, (uint64_t)v104))
                {
                  v107 = 0;
                  v108 = *v105;
                  *v105 = 0;
                  *(_QWORD *)v231 = v108;
                  *(_OWORD *)&v231[8] = *(_OWORD *)(v104 + 5);
                  v232 = *((_BYTE *)v104 + 56);
                  for (i = v105; ; i = v110)
                  {
                    v110 = v104;
                    v111 = *v104;
                    *v104 = 0;
                    *i = v111;
                    if (v107)
                    {
                      do
                      {
                        v112 = __ldaxr(v107);
                        v113 = v112 - 1;
                      }
                      while (__stlxr(v113, v107));
                      if (!v113)
                      {
                        atomic_store(1u, v107);
                        WTF::fastFree((WTF *)v107, v106);
                      }
                    }
                    *(_OWORD *)(i + 1) = *(_OWORD *)(v104 + 1);
                    *((_BYTE *)i + 24) = *((_BYTE *)v104 + 24);
                    if (v104 == (_QWORD *)a1)
                    {
                      v114 = (unsigned int **)a1;
                      goto LABEL_136;
                    }
                    v104 -= 4;
                    if (((*a3)((uint64_t)v231, (uint64_t)(v110 - 4)) & 1) == 0)
                      break;
                    v107 = (unsigned int *)*v110;
                  }
                  v114 = (unsigned int **)v110;
LABEL_136:
                  v115 = v110 + 1;
                  v116 = *(unsigned int **)v231;
                  *(_QWORD *)v231 = 0;
                  v117 = *v114;
                  *v114 = v116;
                  if (v117)
                  {
                    do
                    {
                      v118 = __ldaxr(v117);
                      v119 = v118 - 1;
                    }
                    while (__stlxr(v119, v117));
                    if (!v119)
                    {
                      atomic_store(1u, v117);
                      WTF::fastFree((WTF *)v117, v106);
                    }
                    v120 = *(unsigned int **)v231;
                    v121 = v232;
                    *v115 = *(_OWORD *)&v231[8];
                    *((_BYTE *)v110 + 24) = v121;
                    *(_QWORD *)v231 = 0;
                    if (v120)
                    {
                      do
                      {
                        v122 = __ldaxr(v120);
                        v123 = v122 - 1;
                      }
                      while (__stlxr(v123, v120));
                      if (!v123)
                      {
                        atomic_store(1u, v120);
                        WTF::fastFree((WTF *)v120, v106);
                      }
                    }
                  }
                  else
                  {
                    v124 = *(_OWORD *)&v231[8];
                    *((_BYTE *)v110 + 24) = v232;
                    *v115 = v124;
                  }
                }
                v103 = v105 + 4;
                v104 = v105;
              }
              while (v105 + 4 != v7);
            }
          }
        }
        else if ((_QWORD *)a1 != v7)
        {
          v203 = a1 + 32;
          if ((_QWORD *)(a1 + 32) != v7)
          {
            v204 = 0;
            v205 = 1;
            v206 = a1;
            while (1)
            {
              v207 = v205;
              if ((*a3)(v203, v206))
                break;
LABEL_241:
              v206 = a1 + 32 * v207;
              v205 = v207 + 1;
              v203 = a1 + 32 * (v207 + 1);
              v204 = v207;
              if ((_QWORD *)v203 == v7)
                return;
            }
            v209 = 0;
            v210 = *(_QWORD *)v203;
            *(_QWORD *)v203 = 0;
            *(_QWORD *)v231 = v210;
            *(_OWORD *)&v231[8] = *(_OWORD *)(v206 + 40);
            v232 = *(_BYTE *)(v206 + 56);
            while (1)
            {
              v211 = a1 + 32 * v204;
              v212 = *(unsigned int **)v211;
              *(_QWORD *)v211 = 0;
              *(_QWORD *)v203 = v212;
              if (v209)
              {
                do
                {
                  v213 = __ldaxr(v209);
                  v214 = v213 - 1;
                }
                while (__stlxr(v214, v209));
                if (!v214)
                {
                  atomic_store(1u, v209);
                  WTF::fastFree((WTF *)v209, v208);
                }
              }
              v215 = *(_OWORD *)(v211 + 8);
              *(_BYTE *)(v203 + 24) = *(_BYTE *)(v211 + 24);
              *(_OWORD *)(v203 + 8) = v215;
              if (v204 == -1)
                goto LABEL_244;
              --v204;
              if (((*a3)((uint64_t)v231, a1 + 32 * v204) & 1) == 0)
              {
                v216 = (_OWORD *)(v211 + 8);
                v217 = *(_QWORD *)v231;
                *(_QWORD *)v231 = 0;
                v218 = *(unsigned int **)v211;
                *(_QWORD *)v211 = v217;
                if (v218)
                {
                  do
                  {
                    v219 = __ldaxr(v218);
                    v220 = v219 - 1;
                  }
                  while (__stlxr(v220, v218));
                  if (!v220)
                  {
                    atomic_store(1u, v218);
                    WTF::fastFree((WTF *)v218, v208);
                  }
                  v221 = *(unsigned int **)v231;
                  v222 = *(_OWORD *)&v231[8];
                  *(_BYTE *)(v211 + 24) = v232;
                  *v216 = v222;
                  *(_QWORD *)v231 = 0;
                  if (v221)
                  {
                    do
                    {
                      v223 = __ldaxr(v221);
                      v224 = v223 - 1;
                    }
                    while (__stlxr(v224, v221));
                    if (!v224)
                    {
                      atomic_store(1u, v221);
                      WTF::fastFree((WTF *)v221, v208);
                    }
                  }
                }
                else
                {
                  v225 = *(_OWORD *)&v231[8];
                  *(_BYTE *)(v211 + 24) = v232;
                  *v216 = v225;
                }
                goto LABEL_241;
              }
              v209 = *(unsigned int **)v211;
              v203 = v211;
            }
          }
        }
        return;
    }
  }
}

__n128 std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8;
  int v9;
  void *v10;
  __n128 result;
  __n128 *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  __n128 v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  __n128 *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  __n128 v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  __n128 v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  __n128 *v48;
  __n128 v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  void *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  __n128 v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  __n128 v65;
  __int128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;

  v8 = (*a4)(a2, a1);
  v9 = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v12 = (__n128 *)(a1 + 8);
    if (v9)
    {
      v13 = *(unsigned int **)a1;
      *(_QWORD *)a1 = 0;
      v65 = *v12;
      v70 = *(_BYTE *)(a1 + 24);
      v14 = *(unsigned int **)a3;
      *(_QWORD *)a3 = 0;
      v15 = *(unsigned int **)a1;
      *(_QWORD *)a1 = v14;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v10);
        }
      }
      v18 = *(__n128 *)(a3 + 8);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a3 + 24);
      *v12 = v18;
      v19 = *(unsigned int **)a3;
      *(_QWORD *)a3 = v13;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v10);
        }
      }
      result = v65;
      *(__n128 *)(a3 + 8) = v65;
      *(_BYTE *)(a3 + 24) = v70;
    }
    else
    {
      v43 = *(unsigned int **)a1;
      *(_QWORD *)a1 = 0;
      v68 = *v12;
      v73 = *(_BYTE *)(a1 + 24);
      v44 = *(unsigned int **)a2;
      *(_QWORD *)a2 = 0;
      v45 = *(unsigned int **)a1;
      *(_QWORD *)a1 = v44;
      if (v45)
      {
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v45);
          v63 = v43;
          WTF::fastFree((WTF *)v45, v10);
          v43 = v63;
        }
      }
      v48 = (__n128 *)(a2 + 8);
      v49 = *(__n128 *)(a2 + 8);
      v12[1].n128_u8[0] = *(_BYTE *)(a2 + 24);
      *v12 = v49;
      v50 = *(unsigned int **)a2;
      *(_QWORD *)a2 = v43;
      if (v50)
      {
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v50);
          WTF::fastFree((WTF *)v50, v10);
        }
      }
      *v48 = v68;
      *(_BYTE *)(a2 + 24) = v73;
      if ((*a4)(a3, a2))
      {
        v54 = *(unsigned int **)a2;
        *(_QWORD *)a2 = 0;
        v69 = *v48;
        v74 = *(_BYTE *)(a2 + 24);
        v55 = *(unsigned int **)a3;
        *(_QWORD *)a3 = 0;
        v56 = *(unsigned int **)a2;
        *(_QWORD *)a2 = v55;
        if (v56)
        {
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            atomic_store(1u, v56);
            WTF::fastFree((WTF *)v56, v53);
          }
        }
        v59 = *(__n128 *)(a3 + 8);
        *(_BYTE *)(a2 + 24) = *(_BYTE *)(a3 + 24);
        *v48 = v59;
        v60 = *(unsigned int **)a3;
        *(_QWORD *)a3 = v54;
        if (v60)
        {
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
          {
            atomic_store(1u, v60);
            WTF::fastFree((WTF *)v60, v53);
          }
        }
        result = v69;
        *(__n128 *)(a3 + 8) = v69;
        *(_BYTE *)(a3 + 24) = v74;
      }
    }
  }
  else if (v9)
  {
    v22 = *(unsigned int **)a2;
    *(_QWORD *)a2 = 0;
    v23 = (__n128 *)(a2 + 8);
    v66 = *(_OWORD *)(a2 + 8);
    v71 = *(_BYTE *)(a2 + 24);
    v24 = *(unsigned int **)a3;
    *(_QWORD *)a3 = 0;
    v25 = *(unsigned int **)a2;
    *(_QWORD *)a2 = v24;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        v64 = v22;
        WTF::fastFree((WTF *)v25, v10);
        v22 = v64;
      }
    }
    v28 = a3 + 8;
    v29 = *(__n128 *)(a3 + 8);
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a3 + 24);
    *v23 = v29;
    v30 = *(unsigned int **)a3;
    *(_QWORD *)a3 = v22;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v10);
        v28 = a3 + 8;
      }
    }
    *(_OWORD *)v28 = v66;
    *(_BYTE *)(v28 + 16) = v71;
    if ((*a4)(a2, a1))
    {
      v34 = *(unsigned int **)a1;
      *(_QWORD *)a1 = 0;
      v67 = *(__n128 *)(a1 + 8);
      v72 = *(_BYTE *)(a1 + 24);
      v35 = *(unsigned int **)a2;
      *(_QWORD *)a2 = 0;
      v36 = *(unsigned int **)a1;
      *(_QWORD *)a1 = v35;
      if (v36)
      {
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v33);
        }
      }
      v39 = *v23;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(__n128 *)(a1 + 8) = v39;
      v40 = *(unsigned int **)a2;
      *(_QWORD *)a2 = v34;
      if (v40)
      {
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          atomic_store(1u, v40);
          WTF::fastFree((WTF *)v40, v33);
        }
      }
      result = v67;
      *v23 = v67;
      *(_BYTE *)(a2 + 24) = v72;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _BOOL8 v6;
  uint64_t *v7;
  void *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v39[24];
  char v40;

  v6 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      v7 = (uint64_t *)(a2 - 32);
      if ((*a3)(a2 - 32, a1))
      {
        v9 = *(unsigned int **)a1;
        *(_QWORD *)a1 = 0;
        *(_OWORD *)v39 = *(_OWORD *)(a1 + 8);
        v39[16] = *(_BYTE *)(a1 + 24);
        v10 = *v7;
        *v7 = 0;
        v11 = *(unsigned int **)a1;
        *(_QWORD *)a1 = v10;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            WTF::fastFree((WTF *)v11, v8);
          }
        }
        v14 = *(_OWORD *)(a2 - 24);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = v14;
        v15 = *(unsigned int **)(a2 - 32);
        *(_QWORD *)(a2 - 32) = v9;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v8);
          }
        }
        *(_OWORD *)(a2 - 24) = *(_OWORD *)v39;
        *(_BYTE *)(a2 - 8) = v39[16];
        return 1;
      }
      break;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a1 + 32, a2 - 32, a3);
      break;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      break;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32, a3);
      break;
    default:
      v18 = a1 + 64;
      v19 = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a1 + 32, a1 + 64, a3);
      v20 = a1 + 96;
      v6 = 1;
      if (a1 + 96 != a2)
      {
        v21 = 0;
        while (1)
        {
          if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v20, v18, v19))
          {
            v23 = 0;
            v24 = *(_QWORD *)v20;
            *(_QWORD *)v20 = 0;
            *(_QWORD *)v39 = v24;
            *(_OWORD *)&v39[8] = *(_OWORD *)(v20 + 8);
            v40 = *(_BYTE *)(v20 + 24);
            for (i = v20; ; i = v26)
            {
              v26 = v18;
              v27 = *(_QWORD *)v18;
              *(_QWORD *)v18 = 0;
              *(_QWORD *)i = v27;
              if (v23)
              {
                do
                {
                  v28 = __ldaxr(v23);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, v23));
                if (!v29)
                {
                  atomic_store(1u, v23);
                  WTF::fastFree((WTF *)v23, v22);
                }
              }
              *(_OWORD *)(i + 8) = *(_OWORD *)(v18 + 8);
              *(_BYTE *)(i + 24) = *(_BYTE *)(v18 + 24);
              if (v18 == a1)
              {
                v30 = (unsigned int **)a1;
                goto LABEL_26;
              }
              v18 -= 32;
              if (((*a3)((uint64_t)v39, v26 - 32) & 1) == 0)
                break;
              v23 = *(unsigned int **)v26;
            }
            v30 = (unsigned int **)v26;
LABEL_26:
            v31 = *(unsigned int **)v39;
            *(_QWORD *)v39 = 0;
            v32 = *v30;
            *v30 = v31;
            if (v32)
            {
              do
              {
                v33 = __ldaxr(v32);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, v32));
              if (!v34)
              {
                atomic_store(1u, v32);
                WTF::fastFree((WTF *)v32, v22);
              }
            }
            v19 = *(__n128 *)&v39[8];
            *(_BYTE *)(v26 + 24) = v40;
            *(__n128 *)(v26 + 8) = v19;
            v35 = *(unsigned int **)v39;
            *(_QWORD *)v39 = 0;
            if (v35)
            {
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                atomic_store(1u, v35);
                WTF::fastFree((WTF *)v35, v22);
              }
            }
            if (++v21 == 8)
              break;
          }
          v18 = v20;
          v20 += 32;
          if (v20 == a2)
            return 1;
        }
        v6 = v20 + 32 == a2;
      }
      break;
  }
  return v6;
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  __n128 v10;
  void *v11;
  __n128 result;
  unsigned int *v13;
  __n128 *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __n128 v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *v24;
  __n128 *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  __n128 v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  __n128 v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  __n128 v45;
  __n128 v46;
  char v47;
  char v48;
  char v49;

  v10 = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a2, a3, a5);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a5)(a4, a3, v10))
  {
    v13 = *(unsigned int **)a3;
    *(_QWORD *)a3 = 0;
    v14 = (__n128 *)(a3 + 8);
    v44 = *(_OWORD *)(a3 + 8);
    v47 = *(_BYTE *)(a3 + 24);
    v15 = *(unsigned int **)a4;
    *(_QWORD *)a4 = 0;
    v16 = *(unsigned int **)a3;
    *(_QWORD *)a3 = v15;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v11);
      }
    }
    v19 = *(__n128 *)(a4 + 8);
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(a4 + 24);
    *v14 = v19;
    v20 = *(unsigned int **)a4;
    *(_QWORD *)a4 = v13;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v11);
      }
    }
    *(_OWORD *)(a4 + 8) = v44;
    *(_BYTE *)(a4 + 24) = v47;
    if ((*a5)(a3, a2))
    {
      v24 = *(unsigned int **)a2;
      *(_QWORD *)a2 = 0;
      v25 = (__n128 *)(a2 + 8);
      v45 = *(__n128 *)(a2 + 8);
      v48 = *(_BYTE *)(a2 + 24);
      v26 = *(unsigned int **)a3;
      *(_QWORD *)a3 = 0;
      v27 = *(unsigned int **)a2;
      *(_QWORD *)a2 = v26;
      if (v27)
      {
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v23);
        }
      }
      v30 = *v14;
      *(_BYTE *)(a2 + 24) = *(_BYTE *)(a3 + 24);
      *v25 = v30;
      v31 = *(unsigned int **)a3;
      *(_QWORD *)a3 = v24;
      if (v31)
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v23);
        }
      }
      *v14 = v45;
      *(_BYTE *)(a3 + 24) = v48;
      if ((*a5)(a2, a1))
      {
        v35 = *(unsigned int **)a1;
        *(_QWORD *)a1 = 0;
        v46 = *(__n128 *)(a1 + 8);
        v49 = *(_BYTE *)(a1 + 24);
        v36 = *(unsigned int **)a2;
        *(_QWORD *)a2 = 0;
        v37 = *(unsigned int **)a1;
        *(_QWORD *)a1 = v36;
        if (v37)
        {
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            atomic_store(1u, v37);
            WTF::fastFree((WTF *)v37, v34);
          }
        }
        v40 = *v25;
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(__n128 *)(a1 + 8) = v40;
        v41 = *(unsigned int **)a2;
        *(_QWORD *)a2 = v35;
        if (v41)
        {
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            atomic_store(1u, v41);
            WTF::fastFree((WTF *)v41, v34);
          }
        }
        result = v46;
        *v25 = v46;
        *(_BYTE *)(a2 + 24) = v49;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  __n128 v12;
  void *v13;
  __n128 result;
  unsigned int *v15;
  __n128 *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  __n128 v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  unsigned int *v26;
  __n128 *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  __n128 v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  void *v36;
  unsigned int *v37;
  __n128 *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  __n128 v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  __n128 v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  char v61;
  char v62;
  char v63;
  char v64;

  v12 = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::MediaElementSessionInfo const&,WebCore::MediaElementSessionInfo const&),WebCore::MediaElementSessionInfo*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v15 = *(unsigned int **)a4;
    *(_QWORD *)a4 = 0;
    v16 = (__n128 *)(a4 + 8);
    v57 = *(_OWORD *)(a4 + 8);
    v61 = *(_BYTE *)(a4 + 24);
    v17 = *(unsigned int **)a5;
    *(_QWORD *)a5 = 0;
    v18 = *(unsigned int **)a4;
    *(_QWORD *)a4 = v17;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v13);
      }
    }
    v21 = *(__n128 *)(a5 + 8);
    *(_BYTE *)(a4 + 24) = *(_BYTE *)(a5 + 24);
    *v16 = v21;
    v22 = *(unsigned int **)a5;
    *(_QWORD *)a5 = v15;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v13);
      }
    }
    *(_OWORD *)(a5 + 8) = v57;
    *(_BYTE *)(a5 + 24) = v61;
    if ((*a6)(a4, a3))
    {
      v26 = *(unsigned int **)a3;
      *(_QWORD *)a3 = 0;
      v27 = (__n128 *)(a3 + 8);
      v58 = *(__n128 *)(a3 + 8);
      v62 = *(_BYTE *)(a3 + 24);
      v28 = *(unsigned int **)a4;
      *(_QWORD *)a4 = 0;
      v29 = *(unsigned int **)a3;
      *(_QWORD *)a3 = v28;
      if (v29)
      {
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, v25);
        }
      }
      v32 = *v16;
      *(_BYTE *)(a3 + 24) = *(_BYTE *)(a4 + 24);
      *v27 = v32;
      v33 = *(unsigned int **)a4;
      *(_QWORD *)a4 = v26;
      if (v33)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v25);
        }
      }
      *v16 = v58;
      *(_BYTE *)(a4 + 24) = v62;
      if ((*a6)(a3, a2))
      {
        v37 = *(unsigned int **)a2;
        *(_QWORD *)a2 = 0;
        v38 = (__n128 *)(a2 + 8);
        v59 = *(__n128 *)(a2 + 8);
        v63 = *(_BYTE *)(a2 + 24);
        v39 = *(unsigned int **)a3;
        *(_QWORD *)a3 = 0;
        v40 = *(unsigned int **)a2;
        *(_QWORD *)a2 = v39;
        if (v40)
        {
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, v40);
            WTF::fastFree((WTF *)v40, v36);
          }
        }
        v43 = *v27;
        *(_BYTE *)(a2 + 24) = *(_BYTE *)(a3 + 24);
        *v38 = v43;
        v44 = *(unsigned int **)a3;
        *(_QWORD *)a3 = v37;
        if (v44)
        {
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, v44);
            WTF::fastFree((WTF *)v44, v36);
          }
        }
        *v27 = v59;
        *(_BYTE *)(a3 + 24) = v63;
        if ((*a6)(a2, a1))
        {
          v48 = *(unsigned int **)a1;
          *(_QWORD *)a1 = 0;
          v60 = *(__n128 *)(a1 + 8);
          v64 = *(_BYTE *)(a1 + 24);
          v49 = *(unsigned int **)a2;
          *(_QWORD *)a2 = 0;
          v50 = *(unsigned int **)a1;
          *(_QWORD *)a1 = v49;
          if (v50)
          {
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              atomic_store(1u, v50);
              WTF::fastFree((WTF *)v50, v47);
            }
          }
          v53 = *v38;
          *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
          *(__n128 *)(a1 + 8) = v53;
          v54 = *(unsigned int **)a2;
          *(_QWORD *)a2 = v48;
          if (v54)
          {
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v54);
              WTF::fastFree((WTF *)v54, v47);
            }
          }
          result = v60;
          *v38 = v60;
          *(_BYTE *)(a2 + 24) = v64;
        }
      }
    }
  }
  return result;
}

WebCore::MediaStream *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS17_EEEDcSZ_DpT0_(WebCore::MediaStream *result, WebCore::MediaStream **a2, WebCore::MediaStream **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::MediaStream *v6;
  WebCore::MediaStream *v7;
  bmalloc::api *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WebCore::MediaStream *)((uint64_t (*)(char *, uint64_t))off_1E33C50B8[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*((_DWORD *)result + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(result);
      return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)result + 22);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS17_EEEDcSZ_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33C50B8[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS17_EEEDcSZ_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33C50B8[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11MediaStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11MediaSourceENSC_ISH_EENSE_ISH_EEEENS9_INSA_17MediaSourceHandleENSC_ISL_EENSE_ISL_EEEENS9_INSA_4BlobENSC_ISP_EENSE_ISP_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSG_SK_SO_SS_EEEOS17_EEEDcSZ_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33C50B8[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11ContentTypeENS8_18PlatformMediaErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*,false>(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(__int128 *, __int128 *);
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 *v87;
  uint64_t v88;
  char v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 *v148;
  uint64_t v149;
  char v150;
  int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char v189;
  int v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  unint64_t v237;
  __int128 *v238;
  unint64_t v239;
  __int128 *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  BOOL v257;
  char v258;
  int v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 *v269;
  __int128 *v270;
  __n128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  BOOL v291;
  uint64_t v292;
  uint64_t v293;
  __int128 *v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 *v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v330;
  char v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  __int128 *v348;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;

uint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> *,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(__int128 *, uint64_t))
{
  __int128 v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v6 = a1[1];
  v27 = *a1;
  v28 = v6;
  v29 = a1[2];
  v30 = *((_QWORD *)a1 + 6);
  result = (*a3)(&v27, a2 - 56);
  if ((result & 1) != 0)
  {
    v8 = (unint64_t)a1;
    while (1)
    {
      v8 += 56;
      if (v8 == a2)
        goto LABEL_23;
      result = (*a3)(&v27, v8);
      if ((result & 1) != 0)
        goto LABEL_9;
    }
  }
  v9 = (unint64_t)a1 + 56;
  do
  {
    v8 = v9;
    if (v9 >= a2)
      break;
    result = (*a3)(&v27, v9);
    v9 = v8 + 56;
  }
  while (!(_DWORD)result);
LABEL_9:
  v10 = a2;
  if (v8 < a2)
  {
    v10 = a2;
    while ((__int128 *)v10 != a1)
    {
      v10 -= 56;
      result = (*a3)(&v27, v10);
      if ((result & 1) == 0)
        goto LABEL_19;
    }
    goto LABEL_23;
  }
LABEL_19:
  if (v8 < v10)
  {
    v11 = *(_OWORD *)v8;
    v12 = *(_OWORD *)(v8 + 16);
    v13 = *(_OWORD *)(v8 + 32);
    v34 = *(_QWORD *)(v8 + 48);
    v32 = v12;
    v33 = v13;
    v31 = v11;
    v14 = *(_OWORD *)v10;
    v15 = *(_OWORD *)(v10 + 16);
    v16 = *(_OWORD *)(v10 + 32);
    *(_QWORD *)(v8 + 48) = *(_QWORD *)(v10 + 48);
    *(_OWORD *)(v8 + 16) = v15;
    *(_OWORD *)(v8 + 32) = v16;
    *(_OWORD *)v8 = v14;
    v17 = v31;
    v18 = v32;
    v19 = v33;
    *(_QWORD *)(v10 + 48) = v34;
    *(_OWORD *)(v10 + 16) = v18;
    *(_OWORD *)(v10 + 32) = v19;
    *(_OWORD *)v10 = v17;
    while (1)
    {
      v8 += 56;
      if (v8 == a2)
        break;
      result = (*a3)(&v27, v8);
      if ((_DWORD)result)
      {
        while ((__int128 *)v10 != a1)
        {
          v10 -= 56;
          result = (*a3)(&v27, v10);
          if ((result & 1) == 0)
            goto LABEL_19;
        }
        break;
      }
    }
LABEL_23:
    __break(1u);
    return result;
  }
  v20 = (__int128 *)(v8 - 56);
  if ((__int128 *)(v8 - 56) != a1)
  {
    v21 = *v20;
    v22 = *(_OWORD *)(v8 - 40);
    v23 = *(_OWORD *)(v8 - 24);
    *((_QWORD *)a1 + 6) = *(_QWORD *)(v8 - 8);
    a1[1] = v22;
    a1[2] = v23;
    *a1 = v21;
  }
  v24 = v27;
  v25 = v28;
  v26 = v29;
  *(_QWORD *)(v8 - 8) = v30;
  *(_OWORD *)(v8 - 40) = v25;
  *(_OWORD *)(v8 - 24) = v26;
  *v20 = v24;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __n128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 *v49;
  char v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v6 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = (__int128 *)(a2 - 56);
      if (!(*a3)((__int128 *)(a2 - 56), (__int128 *)a1))
        return 1;
      v9 = *(_QWORD *)(a1 + 48);
      v11 = *(_OWORD *)(a1 + 16);
      v10 = *(_OWORD *)(a1 + 32);
      v12 = *(_OWORD *)a1;
      v14 = *(_OWORD *)(a2 - 40);
      v13 = *(_OWORD *)(a2 - 24);
      v15 = *v8;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = v13;
      *(_OWORD *)a1 = v15;
      *v8 = v12;
      *(_OWORD *)(a2 - 40) = v11;
      *(_OWORD *)(a2 - 24) = v10;
      result = 1;
      *(_QWORD *)(a2 - 8) = v9;
      return result;
    case 3:
      v16 = a1 + 56;
      v17 = a2 - 56;
      v18 = (*a3)((__int128 *)(a1 + 56), (__int128 *)a1);
      v19 = (*a3)((__int128 *)v17, (__int128 *)(a1 + 56));
      if ((v18 & 1) == 0)
      {
        if (!v19)
          return 1;
        v57 = *(_QWORD *)(a1 + 104);
        v59 = *(_OWORD *)(a1 + 72);
        v58 = *(_OWORD *)(a1 + 88);
        v60 = *(_OWORD *)v16;
        v62 = *(_OWORD *)(v17 + 16);
        v61 = *(_OWORD *)(v17 + 32);
        v63 = *(_OWORD *)v17;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(v17 + 48);
        *(_OWORD *)(a1 + 72) = v62;
        *(_OWORD *)(a1 + 88) = v61;
        *(_OWORD *)v16 = v63;
        *(_OWORD *)v17 = v60;
        *(_OWORD *)(v17 + 16) = v59;
        *(_OWORD *)(v17 + 32) = v58;
        *(_QWORD *)(v17 + 48) = v57;
        goto LABEL_17;
      }
      if (v19)
      {
        v20 = *(_QWORD *)(a1 + 48);
        v22 = *(_OWORD *)(a1 + 16);
        v21 = *(_OWORD *)(a1 + 32);
        v23 = *(_OWORD *)a1;
        v25 = *(_OWORD *)(v17 + 16);
        v24 = *(_OWORD *)(v17 + 32);
        v26 = *(_OWORD *)v17;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(v17 + 48);
        *(_OWORD *)(a1 + 16) = v25;
        *(_OWORD *)(a1 + 32) = v24;
        *(_OWORD *)a1 = v26;
      }
      else
      {
        v79 = *(_QWORD *)(a1 + 48);
        v81 = *(_OWORD *)(a1 + 16);
        v80 = *(_OWORD *)(a1 + 32);
        v82 = *(_OWORD *)a1;
        v83 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *(_OWORD *)v16;
        *(_OWORD *)(a1 + 16) = v83;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
        *(_OWORD *)v16 = v82;
        *(_OWORD *)(a1 + 72) = v81;
        *(_OWORD *)(a1 + 88) = v80;
        *(_QWORD *)(a1 + 104) = v79;
        if (!(*a3)((__int128 *)v17, (__int128 *)(a1 + 56)))
          return 1;
        v20 = *(_QWORD *)(a1 + 104);
        v22 = *(_OWORD *)(a1 + 72);
        v21 = *(_OWORD *)(a1 + 88);
        v23 = *(_OWORD *)v16;
        v85 = *(_OWORD *)(v17 + 16);
        v84 = *(_OWORD *)(v17 + 32);
        v86 = *(_OWORD *)v17;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(v17 + 48);
        *(_OWORD *)(a1 + 72) = v85;
        *(_OWORD *)(a1 + 88) = v84;
        *(_OWORD *)v16 = v86;
      }
      *(_OWORD *)v17 = v23;
      *(_OWORD *)(v17 + 16) = v22;
      *(_OWORD *)(v17 + 32) = v21;
      result = 1;
      *(_QWORD *)(v17 + 48) = v20;
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a2 - 56), a3);
      return 1;
    case 5:
      v16 = a1 + 56;
      v27 = (__int128 *)(a1 + 112);
      v28 = (__int128 *)(a1 + 168);
      v29 = (__int128 *)(a2 - 56);
      v30 = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a1 + 168), a3);
      if (!((unsigned int (*)(__int128 *, uint64_t, __n128))*a3)(v29, a1 + 168, v30))
        return 1;
      v31 = *(_QWORD *)(a1 + 216);
      v33 = *(_OWORD *)(a1 + 184);
      v32 = *(_OWORD *)(a1 + 200);
      v34 = *v28;
      v36 = v29[1];
      v35 = v29[2];
      v37 = *v29;
      *(_QWORD *)(a1 + 216) = *((_QWORD *)v29 + 6);
      *(_OWORD *)(a1 + 184) = v36;
      *(_OWORD *)(a1 + 200) = v35;
      *v28 = v37;
      *v29 = v34;
      v29[1] = v33;
      v29[2] = v32;
      *((_QWORD *)v29 + 6) = v31;
      if (!(*a3)((__int128 *)(a1 + 168), (__int128 *)(a1 + 112)))
        return 1;
      v38 = *(_QWORD *)(a1 + 160);
      v40 = *(_OWORD *)(a1 + 128);
      v39 = *(_OWORD *)(a1 + 144);
      v41 = *v27;
      v42 = *(_OWORD *)(a1 + 184);
      *v27 = *v28;
      *(_OWORD *)(a1 + 128) = v42;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
      *v28 = v41;
      *(_OWORD *)(a1 + 184) = v40;
      *(_OWORD *)(a1 + 200) = v39;
      *(_QWORD *)(a1 + 216) = v38;
      if (!(*a3)((__int128 *)(a1 + 112), (__int128 *)(a1 + 56)))
        return 1;
      v43 = *(_QWORD *)(a1 + 104);
      v45 = *(_OWORD *)(a1 + 72);
      v44 = *(_OWORD *)(a1 + 88);
      v46 = *(_OWORD *)v16;
      v47 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)v16 = *v27;
      *(_OWORD *)(a1 + 72) = v47;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
      *v27 = v46;
      *(_OWORD *)(a1 + 128) = v45;
      *(_OWORD *)(a1 + 144) = v44;
      *(_QWORD *)(a1 + 160) = v43;
LABEL_17:
      if (!(*a3)((__int128 *)v16, (__int128 *)a1))
        return 1;
      v64 = *(_QWORD *)(a1 + 48);
      v66 = *(_OWORD *)(a1 + 16);
      v65 = *(_OWORD *)(a1 + 32);
      v67 = *(_OWORD *)a1;
      v68 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v16;
      *(_OWORD *)(a1 + 16) = v68;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(v16 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(v16 + 48);
      *(_OWORD *)v16 = v67;
      *(_OWORD *)(v16 + 16) = v66;
      *(_OWORD *)(v16 + 32) = v65;
      result = 1;
      *(_QWORD *)(v16 + 48) = v64;
      return result;
    default:
      v48 = (__int128 *)(a1 + 112);
      v49 = (__int128 *)(a1 + 56);
      v50 = (*a3)((__int128 *)(a1 + 56), (__int128 *)a1);
      v51 = (*a3)((__int128 *)(a1 + 112), (__int128 *)(a1 + 56));
      if ((v50 & 1) != 0)
      {
        if (v51)
        {
          v52 = *(_QWORD *)(a1 + 48);
          v54 = *(_OWORD *)(a1 + 16);
          v53 = *(_OWORD *)(a1 + 32);
          v55 = *(_OWORD *)a1;
          v56 = *(_OWORD *)(a1 + 128);
          *(_OWORD *)a1 = *v48;
          *(_OWORD *)(a1 + 16) = v56;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 160);
        }
        else
        {
          v87 = *(_QWORD *)(a1 + 48);
          v89 = *(_OWORD *)(a1 + 16);
          v88 = *(_OWORD *)(a1 + 32);
          v90 = *(_OWORD *)a1;
          v91 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)a1 = *v49;
          *(_OWORD *)(a1 + 16) = v91;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
          *v49 = v90;
          *(_OWORD *)(a1 + 72) = v89;
          *(_OWORD *)(a1 + 88) = v88;
          *(_QWORD *)(a1 + 104) = v87;
          if (!(*a3)((__int128 *)(a1 + 112), (__int128 *)(a1 + 56)))
            goto LABEL_28;
          v52 = *(_QWORD *)(a1 + 104);
          v54 = *(_OWORD *)(a1 + 72);
          v53 = *(_OWORD *)(a1 + 88);
          v55 = *v49;
          v92 = *(_OWORD *)(a1 + 128);
          *v49 = *v48;
          *(_OWORD *)(a1 + 72) = v92;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
        }
        *v48 = v55;
        *(_OWORD *)(a1 + 128) = v54;
        *(_OWORD *)(a1 + 144) = v53;
        *(_QWORD *)(a1 + 160) = v52;
      }
      else if (v51)
      {
        v69 = *(_QWORD *)(a1 + 104);
        v71 = *(_OWORD *)(a1 + 72);
        v70 = *(_OWORD *)(a1 + 88);
        v72 = *v49;
        v73 = *(_OWORD *)(a1 + 128);
        *v49 = *v48;
        *(_OWORD *)(a1 + 72) = v73;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
        *v48 = v72;
        *(_OWORD *)(a1 + 128) = v71;
        *(_OWORD *)(a1 + 144) = v70;
        *(_QWORD *)(a1 + 160) = v69;
        if ((*a3)((__int128 *)(a1 + 56), (__int128 *)a1))
        {
          v74 = *(_QWORD *)(a1 + 48);
          v76 = *(_OWORD *)(a1 + 16);
          v75 = *(_OWORD *)(a1 + 32);
          v77 = *(_OWORD *)a1;
          v78 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)a1 = *v49;
          *(_OWORD *)(a1 + 16) = v78;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
          *v49 = v77;
          *(_OWORD *)(a1 + 72) = v76;
          *(_OWORD *)(a1 + 88) = v75;
          *(_QWORD *)(a1 + 104) = v74;
        }
      }
LABEL_28:
      v93 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v94 = 0;
      v95 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v93, v48))
    {
      v96 = *(_OWORD *)(v93 + 16);
      v102 = *(_OWORD *)v93;
      v103 = v96;
      v104 = *(_OWORD *)(v93 + 32);
      v105 = *(_QWORD *)(v93 + 48);
      v97 = v94;
      while (1)
      {
        v98 = a1 + v97;
        v99 = *(_OWORD *)(a1 + v97 + 128);
        *(_OWORD *)(v98 + 168) = *(_OWORD *)(a1 + v97 + 112);
        *(_OWORD *)(v98 + 184) = v99;
        *(_OWORD *)(v98 + 200) = *(_OWORD *)(a1 + v97 + 144);
        *(_QWORD *)(v98 + 216) = *(_QWORD *)(a1 + v97 + 160);
        if (v97 == -112)
          break;
        v97 -= 56;
        if (((*a3)(&v102, (__int128 *)(v98 + 56)) & 1) == 0)
        {
          v100 = a1 + v97 + 168;
          goto LABEL_36;
        }
      }
      v100 = a1;
LABEL_36:
      v101 = v103;
      *(_OWORD *)v100 = v102;
      *(_OWORD *)(v100 + 16) = v101;
      *(_OWORD *)(v100 + 32) = v104;
      *(_QWORD *)(v100 + 48) = v105;
      if (++v95 == 8)
        return v93 + 56 == a2;
    }
    v48 = (__int128 *)v93;
    v94 += 56;
    v93 += 56;
    if (v93 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  char v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __n128 result;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v12 = *((_QWORD *)a1 + 6);
      v14 = a1[1];
      v13 = a1[2];
      v15 = *a1;
      v17 = a3[1];
      v16 = a3[2];
      v18 = *a3;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a3 + 6);
      a1[1] = v17;
      a1[2] = v16;
      *a1 = v18;
LABEL_9:
      *a3 = v15;
      a3[1] = v14;
      a3[2] = v13;
      *((_QWORD *)a3 + 6) = v12;
      goto LABEL_10;
    }
    v33 = *((_QWORD *)a1 + 6);
    v35 = a1[1];
    v34 = a1[2];
    v36 = *a1;
    v38 = a2[1];
    v37 = a2[2];
    v39 = *a2;
    *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
    a1[1] = v38;
    a1[2] = v37;
    *a1 = v39;
    *a2 = v36;
    a2[1] = v35;
    a2[2] = v34;
    *((_QWORD *)a2 + 6) = v33;
    if ((*a5)(a3, a2))
    {
      v12 = *((_QWORD *)a2 + 6);
      v14 = a2[1];
      v13 = a2[2];
      v15 = *a2;
      v41 = a3[1];
      v40 = a3[2];
      v42 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v41;
      a2[2] = v40;
      *a2 = v42;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v19 = *((_QWORD *)a2 + 6);
    v21 = a2[1];
    v20 = a2[2];
    v22 = *a2;
    v24 = a3[1];
    v23 = a3[2];
    v25 = *a3;
    *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
    a2[1] = v24;
    a2[2] = v23;
    *a2 = v25;
    *a3 = v22;
    a3[1] = v21;
    a3[2] = v20;
    *((_QWORD *)a3 + 6) = v19;
    if ((*a5)(a2, a1))
    {
      v26 = *((_QWORD *)a1 + 6);
      v28 = a1[1];
      v27 = a1[2];
      v29 = *a1;
      v31 = a2[1];
      v30 = a2[2];
      v32 = *a2;
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[1] = v31;
      a1[2] = v30;
      *a1 = v32;
      *a2 = v29;
      a2[1] = v28;
      a2[2] = v27;
      *((_QWORD *)a2 + 6) = v26;
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    v44 = *((_QWORD *)a3 + 6);
    v46 = a3[1];
    v45 = a3[2];
    v47 = *a3;
    v49 = a4[1];
    v48 = a4[2];
    v50 = *a4;
    *((_QWORD *)a3 + 6) = *((_QWORD *)a4 + 6);
    a3[1] = v49;
    a3[2] = v48;
    *a3 = v50;
    *a4 = v47;
    a4[1] = v46;
    a4[2] = v45;
    *((_QWORD *)a4 + 6) = v44;
    if ((*a5)(a3, a2))
    {
      v51 = *((_QWORD *)a2 + 6);
      v53 = a2[1];
      v52 = a2[2];
      v54 = *a2;
      v56 = a3[1];
      v55 = a3[2];
      v57 = *a3;
      *((_QWORD *)a2 + 6) = *((_QWORD *)a3 + 6);
      a2[1] = v56;
      a2[2] = v55;
      *a2 = v57;
      *a3 = v54;
      a3[1] = v53;
      a3[2] = v52;
      *((_QWORD *)a3 + 6) = v51;
      if ((*a5)(a2, a1))
      {
        v58 = *((_QWORD *)a1 + 6);
        v59 = a1[1];
        result = (__n128)a1[2];
        v60 = *a1;
        v62 = a2[1];
        v61 = a2[2];
        v63 = *a2;
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        a1[1] = v62;
        a1[2] = v61;
        *a1 = v63;
        *a2 = v60;
        a2[1] = v59;
        a2[2] = (__int128)result;
        *((_QWORD *)a2 + 6) = v58;
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>(uint64_t a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(uint64_t, char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  BOOL v24;
  __int128 *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 *v67;
  BOOL v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v84;
  __int128 *v85;
  __int128 *v86;
  __int128 *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  if ((__int128 *)a1 != a2)
  {
    v96 = v4;
    v97 = v5;
    v85 = a3;
    v87 = a2;
    v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - a1) >> 3);
    v84 = (uint64_t)a2 - a1;
    if ((uint64_t)a2 - a1 >= 57 && (unint64_t)v84 >= 0x70)
    {
      v9 = (unint64_t)(v8 - 2) >> 1;
      v10 = v9;
      do
      {
        if (v9 >= v10)
        {
          v11 = (2 * v10) | 1;
          v12 = (__int128 *)(a1 + 56 * v11);
          if (2 * v10 + 2 < v8 && (*a4)(a1 + 56 * v11, (char *)v12 + 56))
          {
            v12 = (__int128 *)((char *)v12 + 56);
            v11 = 2 * v10 + 2;
          }
          v13 = (__int128 *)(a1 + 56 * v10);
          if ((((uint64_t (*)(__int128 *, __int128 *))*a4)(v12, v13) & 1) == 0)
          {
            v14 = v13[1];
            v92 = *v13;
            v93 = v14;
            v94 = v13[2];
            v95 = *((_QWORD *)v13 + 6);
            do
            {
              v15 = v12;
              v16 = *v12;
              v17 = v12[1];
              v18 = v12[2];
              *((_QWORD *)v13 + 6) = *((_QWORD *)v12 + 6);
              v13[1] = v17;
              v13[2] = v18;
              *v13 = v16;
              if (v9 < v11)
                break;
              v19 = (2 * v11) | 1;
              v12 = (__int128 *)(a1 + 56 * v19);
              v20 = 2 * v11 + 2;
              if (v20 < v8 && (*a4)(a1 + 56 * v19, (char *)v12 + 56))
              {
                v12 = (__int128 *)((char *)v12 + 56);
                v19 = v20;
              }
              v13 = v15;
              v11 = v19;
            }
            while (!(*a4)((uint64_t)v12, (char *)&v92));
            v21 = v92;
            v22 = v93;
            v23 = v94;
            *((_QWORD *)v15 + 6) = v95;
            v15[1] = v22;
            v15[2] = v23;
            *v15 = v21;
          }
        }
        v24 = v10-- <= 0;
      }
      while (!v24);
    }
    v25 = v85;
    a3 = v87;
    v26 = v84;
    if (v87 != v85)
    {
      if (v84 >= 112)
      {
        v35 = a1 + 56;
        v36 = v87;
        do
        {
          if (((unsigned int (*)(__int128 *, uint64_t, __int128 *))*a4)(v36, a1, a3))
          {
            v37 = *((_QWORD *)v36 + 6);
            v39 = v36[1];
            v38 = v36[2];
            v40 = *v36;
            v42 = *(_OWORD *)(a1 + 16);
            v41 = *(_OWORD *)(a1 + 32);
            v43 = *(_OWORD *)a1;
            *((_QWORD *)v36 + 6) = *(_QWORD *)(a1 + 48);
            v36[1] = v42;
            v36[2] = v41;
            *v36 = v43;
            *(_OWORD *)a1 = v40;
            *(_OWORD *)(a1 + 16) = v39;
            *(_OWORD *)(a1 + 32) = v38;
            *(_QWORD *)(a1 + 48) = v37;
            if ((unint64_t)v8 < 3)
            {
              v45 = v35;
              v46 = 1;
            }
            else
            {
              v44 = (*a4)(v35, (char *)(a1 + 112));
              v45 = v44 ? a1 + 112 : v35;
              v46 = v44 ? 2 : 1;
            }
            if ((((uint64_t (*)(uint64_t, uint64_t))*a4)(v45, a1) & 1) == 0)
            {
              v47 = *(_OWORD *)(a1 + 16);
              v92 = *(_OWORD *)a1;
              v93 = v47;
              v94 = *(_OWORD *)(a1 + 32);
              v95 = *(_QWORD *)(a1 + 48);
              v48 = a1;
              do
              {
                v49 = v45;
                v50 = *(_OWORD *)v45;
                v51 = *(_OWORD *)(v45 + 16);
                v52 = *(_OWORD *)(v45 + 32);
                *(_QWORD *)(v48 + 48) = *(_QWORD *)(v45 + 48);
                *(_OWORD *)(v48 + 16) = v51;
                *(_OWORD *)(v48 + 32) = v52;
                *(_OWORD *)v48 = v50;
                if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v46)
                  break;
                v53 = (2 * v46) | 1;
                v45 = a1 + 56 * v53;
                if (2 * v46 + 2 < v8 && (*a4)(a1 + 56 * v53, (char *)(v45 + 56)))
                {
                  v45 += 56;
                  v53 = 2 * v46 + 2;
                }
                v54 = (*a4)(v45, (char *)&v92);
                v48 = v49;
                v46 = v53;
              }
              while (!v54);
              v55 = v92;
              v56 = v93;
              v57 = v94;
              *(_QWORD *)(v49 + 48) = v95;
              *(_OWORD *)(v49 + 16) = v56;
              *(_OWORD *)(v49 + 32) = v57;
              *(_OWORD *)v49 = v55;
              v25 = v85;
              v35 = a1 + 56;
            }
          }
          v36 = (__int128 *)((char *)v36 + 56);
        }
        while (v36 != v25);
        a3 = v25;
        v26 = v84;
      }
      else
      {
        v27 = v87;
        do
        {
          if (((unsigned int (*)(__int128 *, uint64_t, __int128 *))*a4)(v27, a1, a3))
          {
            v28 = *((_QWORD *)v27 + 6);
            v30 = v27[1];
            v29 = v27[2];
            v31 = *v27;
            v33 = *(_OWORD *)(a1 + 16);
            v32 = *(_OWORD *)(a1 + 32);
            v34 = *(_OWORD *)a1;
            *((_QWORD *)v27 + 6) = *(_QWORD *)(a1 + 48);
            v27[1] = v33;
            v27[2] = v32;
            *v27 = v34;
            *(_OWORD *)a1 = v31;
            *(_OWORD *)(a1 + 16) = v30;
            *(_OWORD *)(a1 + 32) = v29;
            *(_QWORD *)(a1 + 48) = v28;
          }
          v27 = (__int128 *)((char *)v27 + 56);
        }
        while (v27 != v85);
        a3 = v85;
      }
    }
    if (v26 >= 57)
    {
      v86 = a3;
      v58 = v26 / 0x38uLL;
      do
      {
        v59 = 0;
        v88 = *(_OWORD *)a1;
        v89 = *(_OWORD *)(a1 + 16);
        v90 = *(_OWORD *)(a1 + 32);
        v91 = *(_QWORD *)(a1 + 48);
        v60 = a1;
        do
        {
          v61 = v60 + 56 * v59 + 56;
          v62 = (2 * v59) | 1;
          v63 = 2 * v59 + 2;
          if (v63 < v58 && (*a4)(v60 + 56 * v59 + 56, (char *)(v60 + 56 * v59 + 112)))
          {
            v61 += 56;
            v62 = v63;
          }
          v64 = *(_OWORD *)v61;
          v65 = *(_OWORD *)(v61 + 16);
          v66 = *(_OWORD *)(v61 + 32);
          *(_QWORD *)(v60 + 48) = *(_QWORD *)(v61 + 48);
          *(_OWORD *)(v60 + 16) = v65;
          *(_OWORD *)(v60 + 32) = v66;
          *(_OWORD *)v60 = v64;
          v60 = v61;
          v59 = v62;
        }
        while (v62 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
        v67 = (__int128 *)((char *)v87 - 56);
        v68 = v61 == (_QWORD)v87 - 56;
        v87 = (__int128 *)((char *)v87 - 56);
        if (v68)
        {
          *(_QWORD *)(v61 + 48) = v91;
          *(_OWORD *)(v61 + 16) = v89;
          *(_OWORD *)(v61 + 32) = v90;
          *(_OWORD *)v61 = v88;
        }
        else
        {
          v69 = *v67;
          v70 = v67[1];
          v71 = v67[2];
          *(_QWORD *)(v61 + 48) = *((_QWORD *)v67 + 6);
          *(_OWORD *)(v61 + 16) = v70;
          *(_OWORD *)(v61 + 32) = v71;
          *(_OWORD *)v61 = v69;
          *v67 = v88;
          v67[1] = v89;
          v67[2] = v90;
          *((_QWORD *)v67 + 6) = v91;
          v72 = v61 - a1 + 56;
          if (v72 >= 57)
          {
            v73 = (v72 / 0x38uLL - 2) >> 1;
            v74 = a1 + 56 * v73;
            if ((*a4)(v74, (char *)v61))
            {
              v75 = *(_OWORD *)v61;
              v76 = *(_OWORD *)(v61 + 16);
              v77 = *(_OWORD *)(v61 + 32);
              v95 = *(_QWORD *)(v61 + 48);
              v93 = v76;
              v94 = v77;
              v92 = v75;
              do
              {
                v78 = v74;
                v79 = *(_OWORD *)v74;
                v80 = *(_OWORD *)(v74 + 16);
                v81 = *(_OWORD *)(v74 + 32);
                *(_QWORD *)(v61 + 48) = *(_QWORD *)(v74 + 48);
                *(_OWORD *)(v61 + 16) = v80;
                *(_OWORD *)(v61 + 32) = v81;
                *(_OWORD *)v61 = v79;
                if (!v73)
                  break;
                v73 = (v73 - 1) >> 1;
                v74 = a1 + 56 * v73;
                v61 = v78;
              }
              while ((((uint64_t (*)(uint64_t, __int128 *))*a4)(v74, &v92) & 1) != 0);
              v82 = v93;
              *(_OWORD *)v78 = v92;
              *(_OWORD *)(v78 + 16) = v82;
              *(_OWORD *)(v78 + 32) = v94;
              *(_QWORD *)(v78 + 48) = v95;
            }
          }
        }
        v24 = v58-- <= 2;
      }
      while (!v24);
      return v86;
    }
  }
  return a3;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*,false>(uint64_t a1, uint64_t *a2, unsigned int (**a3)(uint64_t *, uint64_t), uint64_t *a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unsigned int (*v14)(uint64_t *, uint64_t);
  char v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t *v45;
  char v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t *v72;
  char v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  BOOL v130;
  _DWORD *v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  uint64_t v155;
  _OWORD *v156;
  _OWORD *v157;
  _DWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  _DWORD *v167;
  _DWORD *v168;
  _DWORD *v169;
  int64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD *v185;
  _DWORD *v186;
  int64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _DWORD *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  _DWORD *v207;
  uint64_t v208;
  _DWORD *v209;
  _DWORD *v210;
  int v211;
  uint64_t v212;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _DWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _DWORD *v227;
  BOOL v228;
  _QWORD *v229;
  char v230;
  uint64_t v231;
  _DWORD *v232;
  _DWORD *v233;
  int v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v247;
  int64_t v248;
  uint64_t v249;
  uint64_t *v250;
  __int128 v251;
  _DWORD *v252;
  __int128 v253;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(uint64_t a1, _QWORD *a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  unint64_t v6;
  _BOOL8 result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  char v44;
  _QWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  __int128 v49;
  _DWORD *v50;

  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 3;
      if ((*a3)((uint64_t)(a2 - 3), a1))
      {
        v49 = *(_OWORD *)a1;
        v9 = *(_QWORD *)((char *)a2 - 19);
        *(_QWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 5) = v9;
        *(_QWORD *)((char *)a2 - 19) = *(_QWORD *)((char *)&v49 + 5);
        *v8 = v49;
        v10 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3uLL:
      v11 = (_QWORD *)(a1 + 24);
      v12 = a2 - 3;
      v13 = (*a3)(a1 + 24, a1);
      v14 = (*a3)((uint64_t)(a2 - 3), a1 + 24);
      if ((v13 & 1) != 0)
      {
        if (v14)
        {
          v15 = (uint64_t *)(a1 + 16);
          v49 = *(_OWORD *)a1;
          v16 = *(_QWORD *)((char *)a2 - 19);
          *(_QWORD *)a1 = *v12;
          *(_QWORD *)(a1 + 5) = v16;
          *(_QWORD *)((char *)a2 - 19) = *(_QWORD *)((char *)&v49 + 5);
          *v12 = v49;
          v17 = a2 - 1;
        }
        else
        {
          v49 = *(_OWORD *)a1;
          *(_QWORD *)a1 = *v11;
          *(_QWORD *)(a1 + 5) = *(_QWORD *)(a1 + 29);
          *v11 = v49;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)((char *)&v49 + 5);
          v28 = *(_QWORD *)(a1 + 40);
          v27 = (uint64_t *)(a1 + 40);
          v29 = *(v27 - 3);
          *(v27 - 3) = v28;
          *v27 = v29;
          if (!(*a3)((uint64_t)(a2 - 3), (uint64_t)v11))
            return 1;
          v49 = *(_OWORD *)v11;
          v30 = *(_QWORD *)((char *)a2 - 19);
          *v11 = *v12;
          *(_QWORD *)((char *)v11 + 5) = v30;
          *(_QWORD *)((char *)a2 - 19) = *(_QWORD *)((char *)&v49 + 5);
          *v12 = v49;
          v17 = a2 - 1;
          v15 = v27;
        }
        goto LABEL_20;
      }
      if (v14)
      {
        v49 = *(_OWORD *)v11;
        v23 = *(_QWORD *)((char *)a2 - 19);
        *v11 = *v12;
        *(_QWORD *)(a1 + 29) = v23;
        *(_QWORD *)((char *)a2 - 19) = *(_QWORD *)((char *)&v49 + 5);
        *v12 = v49;
        v17 = (uint64_t *)(a1 + 40);
        v24 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = *(a2 - 1);
        *(a2 - 1) = v24;
        if ((*a3)(a1 + 24, a1))
        {
          v49 = *(_OWORD *)a1;
          *(_QWORD *)a1 = *v11;
          *(_QWORD *)(a1 + 5) = *(_QWORD *)(a1 + 29);
          *v11 = v49;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)((char *)&v49 + 5);
          v15 = (uint64_t *)(a1 + 16);
LABEL_20:
          v31 = *v15;
          *v15 = *v17;
          *v17 = v31;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(a1, (_QWORD *)(a1 + 24), (_QWORD *)(a1 + 48), a2 - 3, (uint64_t (**)(_QWORD *, uint64_t))a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(a1, (_QWORD *)(a1 + 24), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 72), a2 - 3, (unsigned int (**)(_QWORD *, uint64_t))a3);
      return 1;
    default:
      v18 = (_QWORD *)(a1 + 48);
      v19 = (_QWORD *)(a1 + 24);
      v20 = (*a3)(a1 + 24, a1);
      v21 = (*a3)(a1 + 48, a1 + 24);
      if ((v20 & 1) != 0)
      {
        if (v21)
        {
          v22 = (uint64_t *)(a1 + 16);
          v49 = *(_OWORD *)a1;
          *(_QWORD *)a1 = *v18;
          *(_QWORD *)(a1 + 5) = *(_QWORD *)(a1 + 53);
        }
        else
        {
          v49 = *(_OWORD *)a1;
          *(_QWORD *)a1 = *v19;
          *(_QWORD *)(a1 + 5) = *(_QWORD *)(a1 + 29);
          *v19 = v49;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)((char *)&v49 + 5);
          v22 = (uint64_t *)(a1 + 40);
          v32 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v32;
          if (!(*a3)(a1 + 48, a1 + 24))
            goto LABEL_25;
          v49 = *(_OWORD *)v19;
          *v19 = *v18;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)(a1 + 53);
        }
        *v18 = v49;
        *(_QWORD *)(a1 + 53) = *(_QWORD *)((char *)&v49 + 5);
        v26 = (uint64_t *)(a1 + 64);
        goto LABEL_24;
      }
      if (v21)
      {
        v49 = *(_OWORD *)v19;
        *v19 = *v18;
        *(_QWORD *)(a1 + 29) = *(_QWORD *)(a1 + 53);
        *v18 = v49;
        *(_QWORD *)(a1 + 53) = *(_QWORD *)((char *)&v49 + 5);
        v26 = (uint64_t *)(a1 + 40);
        v25 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v25;
        if ((*a3)(a1 + 24, a1))
        {
          v49 = *(_OWORD *)a1;
          *(_QWORD *)a1 = *v19;
          *(_QWORD *)(a1 + 5) = *(_QWORD *)(a1 + 29);
          *v19 = v49;
          *(_QWORD *)(a1 + 29) = *(_QWORD *)((char *)&v49 + 5);
          v22 = (uint64_t *)(a1 + 16);
LABEL_24:
          v33 = *v22;
          *v22 = *v26;
          *v26 = v33;
        }
      }
LABEL_25:
      v34 = (_QWORD *)(a1 + 72);
      if ((_QWORD *)(a1 + 72) == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      while (1)
      {
        if ((*a3)((uint64_t)v34, (uint64_t)v18))
        {
          v49 = *(_OWORD *)v34;
          v37 = (_DWORD *)v34[2];
          v34[2] = 0;
          v50 = v37;
          v38 = v35;
          while (1)
          {
            v39 = (_QWORD *)(a1 + v38);
            v40 = *(_QWORD *)(a1 + v38 + 48);
            v41 = *(_QWORD *)(a1 + v38 + 53);
            v42 = *(_QWORD *)(a1 + v38 + 64);
            v39[8] = 0;
            v39[9] = v40;
            *(_QWORD *)((char *)v39 + 77) = v41;
            v43 = *(_DWORD **)(a1 + v38 + 88);
            v39[11] = v42;
            if (v43)
            {
              if (v43[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 72))(v43);
              else
                --v43[6];
            }
            if (v38 == -48)
              break;
            v44 = (*a3)((uint64_t)&v49, a1 + v38 + 24);
            v38 -= 24;
            if ((v44 & 1) == 0)
            {
              v45 = (_QWORD *)(a1 + v38 + 72);
              goto LABEL_37;
            }
          }
          v45 = (_QWORD *)a1;
LABEL_37:
          *v45 = v49;
          *(_QWORD *)((char *)v45 + 5) = *(_QWORD *)((char *)&v49 + 5);
          v46 = v50;
          v50 = 0;
          v47 = (_DWORD *)v45[2];
          v45[2] = v46;
          if (v47)
          {
            if (v47[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 72))(v47);
            else
              --v47[6];
          }
          v48 = v50;
          v50 = 0;
          if (v48)
          {
            if (v48[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 72))(v48);
            else
              --v48[6];
          }
          if (++v36 == 8)
            return v34 + 3 == a2;
        }
        v18 = v34;
        v35 += 24;
        v34 += 3;
        if (v34 == a2)
          return 1;
      }
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD *, uint64_t))
{
  char v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __int128 v30;
  __n128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, (uint64_t)a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v12 = (uint64_t *)(a1 + 16);
      v29 = *(__n128 *)a1;
      v13 = *(_QWORD *)((char *)a3 + 5);
      *(_QWORD *)a1 = *a3;
      *(_QWORD *)(a1 + 5) = v13;
LABEL_9:
      *(_QWORD *)((char *)a3 + 5) = *(unint64_t *)((char *)v29.n128_u64 + 5);
      *a3 = v29.n128_u64[0];
      v16 = a3 + 2;
      goto LABEL_10;
    }
    v32 = *(__n128 *)a1;
    v18 = *(_QWORD *)((char *)a2 + 5);
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 5) = v18;
    *(_QWORD *)((char *)a2 + 5) = *(unint64_t *)((char *)v32.n128_u64 + 5);
    *a2 = v32.n128_u64[0];
    v12 = a2 + 2;
    v19 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2[2];
    a2[2] = v19;
    if ((*a5)(a3, (uint64_t)a2))
    {
      v29 = *(__n128 *)a2;
      v20 = *(_QWORD *)((char *)a3 + 5);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v20;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v30 = *(_OWORD *)a2;
    v14 = *(_QWORD *)((char *)a3 + 5);
    *a2 = *a3;
    *(_QWORD *)((char *)a2 + 5) = v14;
    *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v30 + 5);
    *a3 = v30;
    v16 = a2 + 2;
    v15 = a2[2];
    a2[2] = a3[2];
    a3[2] = v15;
    if ((*a5)(a2, a1))
    {
      v31 = *(__n128 *)a1;
      v17 = *(_QWORD *)((char *)a2 + 5);
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 5) = v17;
      *(_QWORD *)((char *)a2 + 5) = *(unint64_t *)((char *)v31.n128_u64 + 5);
      *a2 = v31.n128_u64[0];
      v12 = (uint64_t *)(a1 + 16);
LABEL_10:
      v21 = *v12;
      *v12 = *v16;
      *v16 = v21;
    }
  }
  if ((*a5)(a4, (uint64_t)a3))
  {
    v33 = *(_OWORD *)a3;
    v23 = *(_QWORD *)((char *)a4 + 5);
    *a3 = *a4;
    *(_QWORD *)((char *)a3 + 5) = v23;
    *(_QWORD *)((char *)a4 + 5) = *(_QWORD *)((char *)&v33 + 5);
    *a4 = v33;
    v24 = a3[2];
    a3[2] = a4[2];
    a4[2] = v24;
    if ((*a5)(a3, (uint64_t)a2))
    {
      v34 = *(_OWORD *)a2;
      v25 = *(_QWORD *)((char *)a3 + 5);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v25;
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v34 + 5);
      *a3 = v34;
      v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      if ((*a5)(a2, a1))
      {
        result = *(__n128 *)a1;
        v35 = *(__n128 *)a1;
        v27 = *(_QWORD *)((char *)a2 + 5);
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 5) = v27;
        *(_QWORD *)((char *)a2 + 5) = *(unint64_t *)((char *)v35.n128_u64 + 5);
        *a2 = v35.n128_u64[0];
        v28 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = a2[2];
        a2[2] = v28;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int (**a6)(_QWORD *, uint64_t))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;

  v12 = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(a1, a2, a3, a4, (uint64_t (**)(_QWORD *, uint64_t))a6);
  if (((unsigned int (*)(_QWORD *, _QWORD *, __n128))*a6)(a5, a4, v12))
  {
    v22 = *(_OWORD *)a4;
    v14 = *(_QWORD *)((char *)a5 + 5);
    *a4 = *a5;
    *(_QWORD *)((char *)a4 + 5) = v14;
    *(_QWORD *)((char *)a5 + 5) = *(_QWORD *)((char *)&v22 + 5);
    *a5 = v22;
    v15 = a4[2];
    a4[2] = a5[2];
    a5[2] = v15;
    if ((*a6)(a4, (uint64_t)a3))
    {
      v23 = *(_OWORD *)a3;
      v16 = *(_QWORD *)((char *)a4 + 5);
      *a3 = *a4;
      *(_QWORD *)((char *)a3 + 5) = v16;
      *(_QWORD *)((char *)a4 + 5) = *(_QWORD *)((char *)&v23 + 5);
      *a4 = v23;
      v17 = a3[2];
      a3[2] = a4[2];
      a4[2] = v17;
      if ((*a6)(a3, (uint64_t)a2))
      {
        v24 = *(_OWORD *)a2;
        v18 = *(_QWORD *)((char *)a3 + 5);
        *a2 = *a3;
        *(_QWORD *)((char *)a2 + 5) = v18;
        *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v24 + 5);
        *a3 = v24;
        v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        if ((*a6)(a2, a1))
        {
          result = *(__n128 *)a1;
          v25 = *(__n128 *)a1;
          v20 = *(_QWORD *)((char *)a2 + 5);
          *(_QWORD *)a1 = *a2;
          *(_QWORD *)(a1 + 5) = v20;
          *(_QWORD *)((char *)a2 + 5) = *(unint64_t *)((char *)v25.n128_u64 + 5);
          *a2 = v25.n128_u64[0];
          v21 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = a2[2];
          a2[2] = v21;
        }
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, int a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t (*v17)(uint64_t *, uint64_t *);
  char v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  BOOL v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v67 = a2 - 3;
  v68 = a2 - 2;
  v10 = (uint64_t)v8;
LABEL_3:
  v11 = 1 - a4;
  v66 = a5;
  while (2)
  {
    v8 = (uint64_t *)v10;
    v12 = (uint64_t)a2 - v10;
    v13 = ((uint64_t)a2 - v10) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 1, (uint64_t *)v10);
        if ((_DWORD)result)
        {
          v55 = *(_QWORD *)v10;
          goto LABEL_71;
        }
        return result;
      case 3uLL:
        v56 = (uint64_t *)(v10 + 8);
        v57 = (*a3)((uint64_t *)(v10 + 8), (uint64_t *)v10);
        result = (*a3)(v9, (uint64_t *)(v10 + 8));
        if ((v57 & 1) != 0)
        {
          v55 = *(_QWORD *)v10;
          if ((_DWORD)result)
          {
LABEL_71:
            *(_QWORD *)v10 = *v9;
LABEL_72:
            *v9 = v55;
            return result;
          }
          *(_QWORD *)v10 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = v55;
          result = (*a3)(v9, (uint64_t *)(v10 + 8));
          if ((_DWORD)result)
          {
            v55 = *v56;
            *v56 = *v9;
            goto LABEL_72;
          }
        }
        else if ((_DWORD)result)
        {
          v65 = *(_QWORD *)(v10 + 8);
          *(_QWORD *)(v10 + 8) = *v9;
          *v9 = v65;
          goto LABEL_88;
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t *)v10, (uint64_t *)(v10 + 8), (uint64_t *)(v10 + 16), a2 - 1, a3);
      case 5uLL:
        v56 = (uint64_t *)(v10 + 8);
        v58 = (uint64_t *)(v10 + 24);
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>((uint64_t *)v10, (uint64_t *)(v10 + 8), (uint64_t *)(v10 + 16), (uint64_t *)(v10 + 24), a3);
        result = (*a3)(v9, (uint64_t *)(v10 + 24));
        if ((_DWORD)result)
        {
          v59 = *v58;
          *v58 = *v9;
          *v9 = v59;
          result = (*a3)((uint64_t *)(v10 + 24), (uint64_t *)(v10 + 16));
          if ((_DWORD)result)
          {
            *(int8x16_t *)(v10 + 16) = vextq_s8(*(int8x16_t *)(v10 + 16), *(int8x16_t *)(v10 + 16), 8uLL);
            result = (*a3)((uint64_t *)(v10 + 16), (uint64_t *)(v10 + 8));
            if ((_DWORD)result)
            {
              *(int8x16_t *)(v10 + 8) = vextq_s8(*(int8x16_t *)(v10 + 8), *(int8x16_t *)(v10 + 8), 8uLL);
LABEL_88:
              result = (*a3)(v56, (uint64_t *)v10);
              if ((_DWORD)result)
                *(int8x16_t *)v10 = vextq_s8(*(int8x16_t *)v10, *(int8x16_t *)v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>((_DWORD *)v10, a2, (uint64_t (**)(_QWORD *, uint64_t))a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>((_DWORD *)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
        }
        v14 = v11;
        if (v11 != 1)
        {
          v15 = v13 >> 1;
          v16 = (uint64_t *)(v10 + 8 * (v13 >> 1));
          v17 = *a3;
          if ((unint64_t)v12 >= 0x401)
          {
            v18 = v17(&v8[v13 >> 1], v8);
            v19 = (*a3)(a2 - 1, v16);
            if ((v18 & 1) != 0)
            {
              v20 = *v8;
              if (v19)
              {
                *v8 = *v9;
              }
              else
              {
                *v8 = *v16;
                *v16 = v20;
                if (!(*a3)(a2 - 1, v16))
                  goto LABEL_24;
                v20 = *v16;
                *v16 = *v9;
              }
              *v9 = v20;
            }
            else if (v19)
            {
              v24 = *v16;
              *v16 = *v9;
              *v9 = v24;
              if ((*a3)(v16, v8))
              {
                v25 = *v8;
                *v8 = *v16;
                *v16 = v25;
              }
            }
LABEL_24:
            v28 = v8 + 1;
            v29 = &v8[v15 - 1];
            v30 = (*a3)(v29, v8 + 1);
            v31 = (*a3)(v68, v29);
            if ((v30 & 1) != 0)
            {
              v32 = *v28;
              if (v31)
              {
                v33 = a2 - 2;
                *v28 = *v68;
              }
              else
              {
                *v28 = *v29;
                *v29 = v32;
                if (!(*a3)(v68, &v8[v15 - 1]))
                  goto LABEL_38;
                v32 = *v29;
                v33 = a2 - 2;
                *v29 = *v68;
              }
              *v33 = v32;
            }
            else if (v31)
            {
              v34 = *v29;
              *v29 = *v68;
              *v68 = v34;
              if ((*a3)(&v8[v15 - 1], v8 + 1))
              {
                v35 = *v28;
                *v28 = *v29;
                *v29 = v35;
              }
            }
LABEL_38:
            v36 = v8 + 2;
            v37 = &v8[v15 + 1];
            v38 = (*a3)(v37, v8 + 2);
            v39 = (*a3)(v67, v37);
            if ((v38 & 1) != 0)
            {
              v40 = *v36;
              if (v39)
              {
                v41 = a2 - 3;
                *v36 = *v67;
              }
              else
              {
                *v36 = *v37;
                *v37 = v40;
                if (!(*a3)(v67, v37))
                  goto LABEL_47;
                v40 = *v37;
                v41 = a2 - 3;
                *v37 = *v67;
              }
              *v41 = v40;
            }
            else if (v39)
            {
              v42 = *v37;
              *v37 = *v67;
              *v67 = v42;
              if ((*a3)(v37, v8 + 2))
              {
                v43 = *v36;
                *v36 = *v37;
                *v37 = v43;
              }
            }
LABEL_47:
            v44 = (*a3)(v16, v29);
            v45 = (*a3)(v37, v16);
            if ((v44 & 1) != 0)
            {
              v46 = *v29;
              if (v45)
              {
                *v29 = *v37;
                *v37 = v46;
                v47 = *v16;
                goto LABEL_56;
              }
              *v29 = *v16;
              *v16 = v46;
              v50 = (*a3)(v37, v16);
              v47 = *v16;
              if (v50)
              {
                v49 = *v37;
                *v16 = *v37;
                *v37 = v47;
                goto LABEL_55;
              }
            }
            else
            {
              v47 = *v16;
              if (v45)
              {
                *v16 = *v37;
                *v37 = v47;
                v48 = (*a3)(v16, v29);
                v47 = *v16;
                if (v48)
                {
                  v49 = *v29;
                  *v29 = v47;
                  *v16 = v49;
LABEL_55:
                  v47 = v49;
                }
              }
            }
LABEL_56:
            a5 = v66;
            v51 = *v8;
            *v8 = v47;
            *v16 = v51;
            if ((v66 & 1) != 0)
              goto LABEL_58;
            goto LABEL_57;
          }
          v21 = v17(v8, &v8[v13 >> 1]);
          v22 = (*a3)(a2 - 1, v8);
          if ((v21 & 1) != 0)
          {
            v23 = *v16;
            if (v22)
            {
              *v16 = *v9;
              goto LABEL_32;
            }
            *v16 = *v8;
            *v8 = v23;
            if ((*a3)(a2 - 1, v8))
            {
              v23 = *v8;
              *v8 = *v9;
LABEL_32:
              *v9 = v23;
            }
LABEL_33:
            if ((a5 & 1) != 0)
              goto LABEL_58;
            goto LABEL_57;
          }
          if (!v22)
            goto LABEL_33;
          v26 = *v8;
          *v8 = *v9;
          *v9 = v26;
          if (!(*a3)(v8, v16))
            goto LABEL_33;
          v27 = *v16;
          *v16 = *v8;
          *v8 = v27;
          if ((a5 & 1) != 0)
            goto LABEL_58;
LABEL_57:
          if (((*a3)(v8 - 1, v8) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&)>(v8, a2, (uint64_t (**)(_DWORD **, uint64_t *))a3);
            v10 = result;
            goto LABEL_63;
          }
LABEL_58:
          v52 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&)>(v8, a2, (uint64_t *)a3);
          if ((v53 & 1) == 0)
            goto LABEL_61;
          v54 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(v8, v52, a3);
          v10 = (uint64_t)(v52 + 1);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(v52 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v54)
              continue;
LABEL_61:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*,false>(v8, v52, a3, -v14, a5 & 1);
            v10 = (uint64_t)(v52 + 1);
LABEL_63:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v52;
          if (v54)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v10 != a2)
        {
          v60 = (v13 - 2) >> 1;
          v61 = v60 + 1;
          v62 = (_QWORD *)(v10 + 8 * v60);
          do
          {
            std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(v10, (unsigned int (**)(_QWORD, _QWORD))a3, ((uint64_t)a2 - v10) >> 3, v62--);
            --v61;
          }
          while (v61);
          v63 = (unint64_t)v12 >> 3;
          do
            result = (uint64_t)std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>((_DWORD *)v10, (uint64_t)a2--, (unsigned int (**)(_QWORD *, uint64_t))a3, v63);
          while (v63-- > 2);
        }
        return result;
    }
  }
}

_DWORD *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(_DWORD *result, _DWORD *a2, uint64_t (**a3)(_QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  _QWORD v19[11];

  if (result == a2)
    return result;
  v19[9] = v3;
  v19[10] = v4;
  v6 = (_DWORD **)result;
  v7 = result + 2;
  if (result + 2 == a2)
    return result;
  v9 = 0;
  v10 = result;
  do
  {
    v11 = v10;
    v10 = v7;
    result = (_DWORD *)(*a3)(v7, (uint64_t)v11);
    if (!(_DWORD)result)
      goto LABEL_20;
    v12 = 0;
    v13 = *v10;
    *v10 = 0;
    v19[0] = v13;
    for (i = v9; ; i -= 8)
    {
      v15 = (_DWORD **)((char *)v6 + i);
      v16 = *(uint64_t *)((char *)v6 + i);
      *v15 = 0;
      v15[1] = v16;
      if (!v12)
        goto LABEL_9;
      if (v12[4] == 1)
        break;
      --v12[4];
LABEL_9:
      if (!i)
        goto LABEL_13;
LABEL_10:
      v17 = (_DWORD **)((char *)v6 + i);
      if (((*a3)(v19, (uint64_t)v6 + i - 8) & 1) == 0)
        goto LABEL_14;
      v12 = (_DWORD *)*v15;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    if (i)
      goto LABEL_10;
LABEL_13:
    v17 = v6;
LABEL_14:
    v18 = (_DWORD *)v19[0];
    v19[0] = 0;
    result = *v17;
    *v17 = v18;
    if (result)
    {
      if (result[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[4];
      result = (_DWORD *)v19[0];
      v19[0] = 0;
      if (result)
      {
        if (result[4] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
    }
LABEL_20:
    v7 = v10 + 1;
    v9 += 8;
  }
  while (v10 + 1 != (_QWORD *)a2);
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(_DWORD *result, _DWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *i;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;

  if (result == a2)
    return result;
  v4 = result;
  v5 = result + 2;
  if (result + 2 == a2)
    return result;
  v7 = 0;
  v8 = result - 2;
  v9 = -1;
  v10 = 1;
  do
  {
    v11 = &v4[2 * v7];
    v7 = v10;
    result = (_DWORD *)(*a3)(v5, v11);
    if (!(_DWORD)result)
      goto LABEL_17;
    result = 0;
    v12 = (_DWORD *)*v5;
    *v5 = 0;
    v18 = v12;
    v13 = v9;
    for (i = v8; ; i -= 2)
    {
      v15 = *((_QWORD *)i + 1);
      *((_QWORD *)i + 1) = 0;
      *((_QWORD *)i + 2) = v15;
      if (!result)
        goto LABEL_9;
      if (result[4] != 1)
      {
        --result[4];
LABEL_9:
        if (!v13)
          goto LABEL_23;
        goto LABEL_10;
      }
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      if (!v13)
      {
LABEL_23:
        __break(1u);
        return result;
      }
LABEL_10:
      if (((*a3)(&v18, i) & 1) == 0)
        break;
      result = (_DWORD *)*((_QWORD *)i + 1);
      ++v13;
    }
    v16 = v18;
    v18 = 0;
    result = (_DWORD *)*((_QWORD *)i + 1);
    *((_QWORD *)i + 1) = v16;
    if (!result)
      goto LABEL_17;
    v17 = result[4] - 1;
    if (result[4] != 1)
      goto LABEL_16;
    (*(void (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    result = v18;
    v18 = 0;
    if (result)
    {
      v17 = result[4] - 1;
      if (result[4] != 1)
      {
LABEL_16:
        result[4] = v17;
        goto LABEL_17;
      }
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    }
LABEL_17:
    v10 = v7 + 1;
    v5 = &v4[2 * v7 + 2];
    v8 += 2;
    --v9;
  }
  while (v5 != (_QWORD *)a2);
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(_DWORD **, uint64_t *))
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v18;

  v6 = (_DWORD *)*a1;
  *a1 = 0;
  v18 = v6;
  v7 = (*a3)(&v18, a2 - 1);
  if ((v7 & 1) != 0)
  {
    v8 = a1;
    while (1)
    {
      if (++v8 == a2)
        goto LABEL_31;
      v7 = (*a3)(&v18, v8);
      if ((v7 & 1) != 0)
        goto LABEL_9;
    }
  }
  v9 = a1 + 1;
  do
  {
    v8 = v9;
    if (v9 >= a2)
      break;
    v7 = (*a3)(&v18, v9);
    v9 = v8 + 1;
  }
  while (!(_DWORD)v7);
LABEL_9:
  v10 = a2;
  if (v8 < a2)
  {
    v10 = a2;
    while (v10 != a1)
    {
      v7 = (*a3)(&v18, --v10);
      if ((v7 & 1) == 0)
        goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_19:
  if (v8 < v10)
  {
    v11 = *v8;
    *v8 = *v10;
    *v10 = v11;
    while (++v8 != a2)
    {
      v7 = (*a3)(&v18, v8);
      if ((_DWORD)v7)
      {
        while (v10 != a1)
        {
          v7 = (*a3)(&v18, --v10);
          if ((v7 & 1) == 0)
            goto LABEL_19;
        }
        break;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    goto LABEL_27;
  }
  v12 = v8 - 1;
  if (v8 - 1 != a1)
  {
    v13 = *v12;
    *v12 = 0;
    v14 = (_DWORD *)*a1;
    *a1 = v13;
    if (v14)
    {
      if (v14[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[4];
    }
  }
  v15 = v18;
  v18 = 0;
  v7 = *v12;
  *v12 = (uint64_t)v15;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 16) != 1)
    {
      --*(_DWORD *)(v7 + 16);
      goto LABEL_27;
    }
    goto LABEL_32;
  }
LABEL_27:
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (v16[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
    else
      --v16[4];
  }
  return v8;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> *,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&)>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, _QWORD);
  _DWORD *v15;
  uint64_t (*v16)(_QWORD, _QWORD);
  _DWORD *v17;
  _DWORD *v19;

  v6 = 0;
  v7 = (_DWORD *)*a1;
  *a1 = 0;
  v19 = v7;
  do
  {
    v8 = (uint64_t)&a1[v6 + 1];
    if ((uint64_t *)v8 == a2)
      goto LABEL_33;
    v8 = ((uint64_t (*)(uint64_t, _DWORD **))*a3)(v8, &v19);
    ++v6;
  }
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  if (v6 != 1)
  {
    v10 = a2;
    while (v10 != a1)
    {
      v8 = ((uint64_t (*)(uint64_t *, _DWORD **))*a3)(--v10, &v19);
      if ((_DWORD)v8)
        goto LABEL_12;
    }
    goto LABEL_33;
  }
  v10 = a2;
  do
  {
    if (v9 >= v10)
      break;
    v8 = ((uint64_t (*)(uint64_t *, _DWORD **))*a3)(--v10, &v19);
  }
  while ((v8 & 1) == 0);
LABEL_12:
  if (v9 < v10)
  {
    v11 = v9;
    v12 = v10;
LABEL_14:
    v13 = *v11;
    *v11 = *v12;
    *v12 = v13;
    while (++v11 != a2)
    {
      v8 = ((uint64_t (*)(uint64_t *, _DWORD **))*a3)(v11, &v19);
      if ((v8 & 1) == 0)
      {
        while (v12 != a1)
        {
          v8 = ((uint64_t (*)(uint64_t *, _DWORD **))*a3)(--v12, &v19);
          if ((_DWORD)v8)
          {
            if (v11 < v12)
              goto LABEL_14;
            a3 = v11 - 1;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_33:
    __break(1u);
LABEL_34:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    goto LABEL_29;
  }
  a3 = v9 - 1;
LABEL_22:
  if (a3 != a1)
  {
    v14 = (uint64_t (*)(_QWORD, _QWORD))*a3;
    *a3 = 0;
    v15 = (_DWORD *)*a1;
    *a1 = (uint64_t)v14;
    if (v15)
    {
      if (v15[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
      else
        --v15[4];
    }
  }
  v16 = (uint64_t (*)(_QWORD, _QWORD))v19;
  v19 = 0;
  v8 = *a3;
  *a3 = (uint64_t)v16;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 16) != 1)
    {
      --*(_DWORD *)(v8 + 16);
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_29:
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (v17[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
    else
      --v17[4];
  }
  return a3;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      v10 = a1 + 1;
      v11 = a2 - 1;
      v12 = (*a3)(a1 + 1, a1);
      v13 = (*a3)(v11, a1 + 1);
      if ((v12 & 1) != 0)
      {
        v14 = *a1;
        if (v13)
        {
          *a1 = *v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v14;
          if (!(*a3)(v11, a1 + 1))
            return 1;
          v14 = *v10;
          *v10 = *v11;
        }
        *v11 = v14;
      }
      else if (v13)
      {
        v22 = a1[1];
        a1[1] = *v11;
        *v11 = v22;
LABEL_17:
        if ((*a3)(v10, a1))
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v10 = a1 + 1;
      v15 = a1 + 3;
      v16 = a2 - 1;
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!(*a3)(v16, a1 + 3))
        return 1;
      v17 = *v15;
      *v15 = *v16;
      *v16 = v17;
      if (!(*a3)(a1 + 3, a1 + 2))
        return 1;
      *((int8x16_t *)a1 + 1) = vextq_s8(*((int8x16_t *)a1 + 1), *((int8x16_t *)a1 + 1), 8uLL);
      if (!(*a3)(a1 + 2, a1 + 1))
        return 1;
      *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
      goto LABEL_17;
    default:
      v18 = a1 + 2;
      v19 = (*a3)(a1 + 1, a1);
      v20 = (*a3)(a1 + 2, a1 + 1);
      if ((v19 & 1) != 0)
      {
        v21 = *a1;
        if (v20)
        {
          *a1 = a1[2];
          a1[2] = v21;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v21;
          if ((*a3)(a1 + 2, a1 + 1))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v20)
      {
        *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        if ((*a3)(a1 + 1, a1))
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v23 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v23, v18))
    {
      v26 = 0;
      v27 = *v23;
      *v23 = 0;
      v35 = (_DWORD *)v27;
      for (i = v24; ; i -= 8)
      {
        v29 = (uint64_t)a1 + i;
        v30 = *(uint64_t *)((char *)a1 + i + 16);
        *(_QWORD *)(v29 + 16) = 0;
        *(_QWORD *)(v29 + 24) = v30;
        if (v26)
        {
          if (v26[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
          else
            --v26[4];
        }
        if (i == -16)
        {
          v31 = a1;
          goto LABEL_40;
        }
        if (((*a3)((uint64_t *)&v35, (uint64_t *)((char *)a1 + i + 8)) & 1) == 0)
          break;
        v26 = *(_DWORD **)(v29 + 16);
      }
      v31 = (uint64_t *)((char *)a1 + i + 16);
LABEL_40:
      v32 = v35;
      v35 = 0;
      v33 = (_DWORD *)*v31;
      *v31 = (uint64_t)v32;
      if (v33)
      {
        if (v33[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
        else
          --v33[4];
      }
      v34 = v35;
      v35 = 0;
      if (v34)
      {
        if (v34[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
        else
          --v34[4];
      }
      if (++v25 == 8)
        return v23 + 1 == a2;
    }
    v18 = v23;
    v24 += 8;
    if (++v23 == a2)
      return 1;
  }
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD **v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _QWORD v24[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v24[11] = v4;
    v24[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (_QWORD *)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v16 = (_DWORD *)*v7;
        *v7 = 0;
        v24[0] = v16;
        do
        {
          v17 = (_DWORD **)v14;
          v18 = (_DWORD *)*v14;
          *v14 = 0;
          v19 = (_DWORD *)*v7;
          *v7 = v18;
          if (v19)
          {
            if (v19[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
            else
              --v19[4];
          }
          if (v9 < v13)
            break;
          v20 = (2 * v13) | 1;
          v14 = (_QWORD *)(v8 + 8 * v20);
          v21 = 2 * v13 + 2;
          if (v21 < a3 && (*a2)(v8 + 8 * v20, v14 + 1))
          {
            ++v14;
            v20 = v21;
          }
          v7 = v17;
          v13 = v20;
        }
        while (!(*a2)(v14, v24));
        v22 = (_DWORD *)v24[0];
        v24[0] = 0;
        v23 = *v17;
        *v17 = v22;
        if (v23)
        {
          if (v23[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
          else
            --v23[4];
        }
        result = v24[0];
        v24[0] = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
      }
    }
  }
  return result;
}

_DWORD *std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(_DWORD *result, uint64_t a2, unsigned int (**a3)(_QWORD *, uint64_t), uint64_t a4)
{
  _DWORD *v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  _DWORD **v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;

  if (a4 <= 0)
  {
    __break(1u);
  }
  else if (a4 != 1)
  {
    v7 = result;
    v8 = 0;
    v21 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    v9 = (unint64_t)(a4 - 2) >> 1;
    v10 = result;
    do
    {
      v11 = (_DWORD **)v10;
      v10 += v8 + 1;
      v12 = 2 * v8;
      v8 = (2 * v8) | 1;
      v13 = v12 + 2;
      if (v12 + 2 < a4 && (*a3)(v10, (uint64_t)(v10 + 1)))
      {
        ++v10;
        v8 = v13;
      }
      v14 = (_DWORD *)*v10;
      *v10 = 0;
      v15 = *v11;
      *v11 = v14;
      if (v15)
      {
        if (v15[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        else
          --v15[4];
      }
    }
    while (v8 <= v9);
    v16 = (_QWORD *)(a2 - 8);
    if (v10 == (_QWORD *)(a2 - 8))
    {
      result = (_DWORD *)*v10;
      *v10 = v21;
      if (result)
      {
        if (result[4] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
    }
    else
    {
      v17 = (_DWORD *)*v16;
      *v16 = 0;
      v18 = (_DWORD *)*v10;
      *v10 = v17;
      if (v18)
      {
        if (v18[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        else
          --v18[4];
      }
      v19 = (uint64_t)(v10 + 1);
      v20 = (_DWORD *)*v16;
      *v16 = v21;
      if (v20)
      {
        if (v20[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
        else
          --v20[4];
      }
      return std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(v7, v19, (uint64_t (**)(_QWORD *, uint64_t))a3, (v19 - (uint64_t)v7) >> 3);
    }
  }
  return result;
}

_DWORD *std::__sift_up[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> const&),WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>*>(_DWORD *result, uint64_t a2, uint64_t (**a3)(_QWORD *, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  _DWORD **v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  _QWORD v18[9];

  v6 = a4 - 2;
  if (a4 < 2)
    return result;
  v18[7] = v4;
  v18[8] = v5;
  v8 = result;
  v9 = v6 >> 1;
  v10 = &result[2 * (v6 >> 1)];
  v11 = (_QWORD *)(a2 - 8);
  result = (_DWORD *)(*a3)(v10, a2 - 8);
  if (!(_DWORD)result)
    return result;
  v12 = (_DWORD *)*v11;
  *v11 = 0;
  v18[0] = v12;
  do
  {
    v13 = (_DWORD **)v10;
    v14 = (_DWORD *)*v10;
    *v10 = 0;
    v15 = (_DWORD *)*v11;
    *v11 = v14;
    if (!v15)
      goto LABEL_7;
    if (v15[4] != 1)
    {
      --v15[4];
LABEL_7:
      if (!v9)
        break;
      goto LABEL_8;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
    if (!v9)
      break;
LABEL_8:
    v9 = (v9 - 1) >> 1;
    v10 = &v8[2 * v9];
    v11 = v13;
  }
  while (((*a3)(v10, (uint64_t)v18) & 1) != 0);
  v16 = (_DWORD *)v18[0];
  v18[0] = 0;
  result = *v13;
  *v13 = v16;
  if (result)
  {
    v17 = result[4] - 1;
    if (result[4] != 1)
      goto LABEL_13;
    (*(void (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    result = (_DWORD *)v18[0];
    v18[0] = 0;
    if (result)
    {
      v17 = result[4] - 1;
      if (result[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
LABEL_13:
        result[4] = v17;
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore11ContentTypeENS3_18PlatformMediaErrorELj0EE11whenSettledIZNS3_16HTMLMediaElement15setNetworkStateENS3_23MediaPlayerNetworkStateEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 **v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E33C5138;
  v3 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned __int8 **)a1[8];
  a1[8] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore11ContentTypeENS3_18PlatformMediaErrorELj0EE11whenSettledIZNS3_16HTMLMediaElement15setNetworkStateENS3_23MediaPlayerNetworkStateEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 **v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E33C5138;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned __int8 **)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore11ContentTypeENS3_18PlatformMediaErrorELj0EE11whenSettledIZNS3_16HTMLMediaElement15setNetworkStateENS3_23MediaPlayerNetworkStateEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EE4callESO_(unsigned int *result, _DWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  WebCore::HTMLMediaElement *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  unsigned __int8 **v15;
  WTF::StringImpl *v16;
  BOOL v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t i;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v5 = *((_QWORD *)result + 2);
  *(_DWORD *)(v4 + 24) += 2;
  v7 = a2[4];
  if (v7)
  {
    if (v7 == 1)
    {
      if (*(_BYTE *)a2 == 7)
        goto LABEL_14;
      v8 = (WebCore::HTMLMediaElement *)v5;
      v9 = 5;
      goto LABEL_13;
    }
LABEL_43:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(v26);
  }
  v10 = result;
  v11 = *((_QWORD *)result + 8);
  v12 = *(_QWORD *)(v11 + 88);
  if (v12)
  {
    *(_QWORD *)(v11 + 88) = 0;
    v19 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v21 = *(unsigned int **)(v12 + 8 * i);
        if (v21 != (unsigned int *)-1)
        {
          *(_QWORD *)(v12 + 8 * i) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
    v13 = *(_QWORD *)(v11 + 88);
    *(_DWORD *)(v11 + 96) = 0;
    if (v13)
    {
      LODWORD(v13) = *(_DWORD *)(v13 - 12);
      if (v13 > 0x7FFFFFFE)
        LODWORD(v13) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v13) = 0;
    *(_DWORD *)(v11 + 96) = 0;
  }
  *(_DWORD *)(v11 + 100) = 2 * v13;
  if (a2[4])
    goto LABEL_43;
  v14 = *(const WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2 || !*((_DWORD *)v14 + 1) || (WTF::equal(*((WTF **)v10 + 9), v14, a3) & 1) != 0)
    goto LABEL_12;
  if (a2[4])
    goto LABEL_43;
  v15 = (unsigned __int8 **)*((_QWORD *)v10 + 8);
  v27 = 0;
  v17 = WebCore::MediaPlayer::load(v15, (const WTF::URL *)(v10 + 6), (unsigned __int8 **)a2, (const WTF::String *)&v27, *(_BYTE *)(v5 + 1688));
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
      goto LABEL_22;
    }
    WTF::StringImpl::destroy(v18, v16);
    if (v17)
      goto LABEL_23;
LABEL_12:
    v8 = (WebCore::HTMLMediaElement *)v5;
    v9 = 4;
LABEL_13:
    result = (unsigned int *)WebCore::HTMLMediaElement::mediaLoadingFailed(v8, (void *)v9);
    goto LABEL_14;
  }
LABEL_22:
  if (!v17)
    goto LABEL_12;
LABEL_23:
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 176) + 144))(v5 + 176);
LABEL_14:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v24 = *(_WORD *)(v4 + 30);
    if ((v24 & 0x400) == 0)
    {
      v25 = *(_WORD *)(v4 + 28);
      if ((v25 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
      }
      else
      {
        if ((v25 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v24 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v24 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

_QWORD *WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E33C5160;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E33C5190;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E33C5160;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E33C5190;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 16);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v81);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>>::toString(a2, &v101);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore16TrackPrivateBase13willBeRemovedEvEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callES8_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

void WebCore::PlatformTextTrack::~PlatformTextTrack(WebCore::PlatformTextTrack *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E33C51E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E33C51E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::HTMLMenuElement::~HTMLMenuElement(WebCore::HTMLMenuElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(_DWORD *)(result + 12);
      if (v4)
        WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 56 * v4));
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v5 = *a2;
      *a2 = 0;
      *(_QWORD *)v3 = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v5;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v6;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t *WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask::~DispatchTask(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v8)
      {
        v11 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
        v4 = v11;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v10 = v4;
        WTF::fastFree(v9, a2);
        v4 = v10;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t *WTF::Vector<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x195C44728);
    }
    v6 = result;
    v7 = (WTF *)*result;
    v8 = *((unsigned int *)result + 3);
    result = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v5));
    *((_DWORD *)v6 + 2) = v5;
    *v6 = (uint64_t)result;
    if ((_DWORD)v8)
    {
      v10 = result;
      result = (uint64_t *)v7;
      do
      {
        v11 = *result;
        *result = 0;
        *v10 = v11;
        v12 = result[1];
        result[1] = 0;
        v10[1] = v12;
        result = WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask::~DispatchTask(result, v9)+ 2;
        v10 += 2;
      }
      while (result != (uint64_t *)((char *)v7 + 16 * v8));
    }
    if (v7)
    {
      if ((WTF *)*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (uint64_t *)WTF::fastFree(v7, v9);
    }
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  if ((WTF::StringImpl *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = (WTF::StringImpl *)v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)result);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)result));
        if (!v6)
        {
          atomic_store(1u, (unsigned int *)result);
          v7 = *(unsigned int *)(result + 28);
          if ((_DWORD)v7)
          {
            v10 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v7));
            result = v10;
          }
          v8 = *(WTF **)(result + 16);
          if (v8)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v9 = result;
            WTF::fastFree(v8, a2);
            result = v9;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
      }
      v3 += 2;
    }
    while (v3 != (uint64_t *)a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLLinkElement::addSubresourceAttributeURLs(WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>> &)::$_0,BOOL,WebCore::CachedResource const&>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v7[24];

  v3 = *(uint64_t **)(a1 + 8);
  v4 = a2 + 160;
  if ((*(_BYTE *)(a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 160));
    *(_BYTE *)(a2 + 344) |= 1u;
  }
  WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(v3, v4, a3, (uint64_t)v7);
  return 0;
}

char *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  _WORD *v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  _WORD *v37;
  char *v38;
  int8x16_t *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  char *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  int8x16_t v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  __int16 v64;
  unsigned __int128 *v65;
  unsigned __int128 *v66;
  unsigned __int128 v67;
  unsigned __int128 *v68;
  unsigned __int128 *v69;
  unsigned __int128 v70;
  char *v71;
  char *v72;
  unsigned __int128 v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;

  v10 = result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = (char *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v11 = v77;
        if (v77)
        {
          v12 = (_BYTE *)(v77 + 20);
          *(_DWORD *)v77 = 2;
          *(_DWORD *)(v77 + 4) = a2;
          *(_QWORD *)(v77 + 8) = v77 + 20;
          *(_DWORD *)(v77 + 16) = 4;
          if (a4)
          {
            v13 = *(_BYTE **)(a4 + 8);
            v14 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *v12 = *v13;
                else
                  memcpy((void *)(v77 + 20), v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v65 = (unsigned __int128 *)(v77 + 20);
              }
              else
              {
                v65 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v66 = (unsigned __int128 *)(v77 + 20);
                do
                {
                  v67 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v66++ = v67;
                }
                while (v66 != v65);
              }
              while (v65 != (unsigned __int128 *)&v12[v14])
              {
                v75 = *v13;
                v13 += 2;
                *(_BYTE *)v65 = v75;
                v65 = (unsigned __int128 *)((char *)v65 + 1);
              }
            }
            v15 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v15 = 0;
          }
          v12[v15] = 32;
          v16 = &v12[v15 + 1];
          if (a5)
          {
            v17 = *(_BYTE **)(a5 + 8);
            v18 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v18)
              {
                if ((_DWORD)v18 == 1)
                  *v16 = *v17;
                else
                  memcpy(v16, v17, v18);
              }
            }
            else
            {
              if (v18 < 0x10)
              {
                v68 = (unsigned __int128 *)&v12[v15 + 1];
              }
              else
              {
                v68 = (unsigned __int128 *)&v16[v18 & 0xFFFFFFF0];
                v69 = (unsigned __int128 *)&v12[v15 + 1];
                do
                {
                  v70 = (unsigned __int128)vld2q_s8(v17);
                  v17 += 32;
                  *v69++ = v70;
                }
                while (v69 != v68);
              }
              while (v68 != (unsigned __int128 *)&v16[v18])
              {
                v76 = *v17;
                v17 += 2;
                *(_BYTE *)v68 = v76;
                v68 = (unsigned __int128 *)((char *)v68 + 1);
              }
            }
            v19 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v19 = 0;
          }
          v16[v19] = 32;
          result = &v16[v19 + 1];
          if (a6)
          {
            v20 = *(const char **)(a6 + 8);
            v21 = *(unsigned int *)(a6 + 4);
            if ((*(_BYTE *)(a6 + 16) & 4) != 0)
            {
              if ((_DWORD)v21)
              {
                if ((_DWORD)v21 == 1)
                {
                  *result = *v20;
                  goto LABEL_70;
                }
                goto LABEL_21;
              }
            }
            else
            {
              v71 = &result[v21];
              if (v21 >= 0x10)
              {
                v72 = &result[v21 & 0xFFFFFFF0];
                do
                {
                  v73 = (unsigned __int128)vld2q_s8(v20);
                  v20 += 32;
                  *(_OWORD *)result = v73;
                  result += 16;
                }
                while (result != v72);
                result = v72;
              }
              while (result != v71)
              {
                v74 = *v20;
                v20 += 2;
                *result++ = v74;
              }
            }
          }
        }
        goto LABEL_70;
      }
LABEL_74:
      v11 = 0;
      goto LABEL_70;
    }
LABEL_73:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_70;
  }
  if (!a2)
    goto LABEL_73;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_74;
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v11 = v77;
  if (v77)
  {
    v22 = (_WORD *)(v77 + 20);
    *(_DWORD *)v77 = 2;
    *(_DWORD *)(v77 + 4) = a2;
    *(_QWORD *)(v77 + 8) = v77 + 20;
    *(_DWORD *)(v77 + 16) = 0;
    if (a4)
    {
      v23 = *(int8x16_t **)(a4 + 8);
      v24 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v25 = (char *)&v22[v24];
        if (v24 >= 0x40)
        {
          v26 = (char *)&v22[v24 & 0xFFFFFFC0];
          v28 = 0uLL;
          v29 = (char *)(v77 + 20);
          do
          {
            v78.val[0] = *v23;
            v30 = v23[1];
            v81.val[0] = v23[2];
            v31 = v23[3];
            v23 += 4;
            v32 = v31;
            v81.val[1] = 0uLL;
            v84.val[0] = v30;
            v78.val[1] = 0uLL;
            v33 = v29;
            vst2q_s8(v33, v78);
            v33 += 32;
            v84.val[1] = 0uLL;
            vst2q_s8(v33, v84);
            v34 = v29 + 64;
            vst2q_s8(v34, v81);
            v35 = v29 + 96;
            vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
            v29 += 128;
          }
          while (v29 != v26);
        }
        else
        {
          v26 = (char *)(v77 + 20);
        }
        while (v26 != v25)
        {
          v36 = v23->u8[0];
          v23 = (int8x16_t *)((char *)v23 + 1);
          *(_WORD *)v26 = v36;
          v26 += 2;
        }
      }
      else if ((_DWORD)v24 == 1)
      {
        *v22 = v23->i16[0];
      }
      else if ((_DWORD)v24)
      {
        memcpy((void *)(v77 + 20), v23, 2 * v24);
      }
      v27 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v27 = 0;
    }
    v37 = &v22[v27];
    *v37 = 32;
    v38 = (char *)(v37 + 1);
    if (a5)
    {
      v39 = *(int8x16_t **)(a5 + 8);
      v40 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        v41 = &v38[2 * v40];
        if (v40 >= 0x40)
        {
          v42 = &v38[2 * (v40 & 0xFFFFFFC0)];
          v44 = 0uLL;
          v45 = v38;
          do
          {
            v79.val[0] = *v39;
            v46 = v39[1];
            v82.val[0] = v39[2];
            v47 = v39[3];
            v39 += 4;
            v48 = v47;
            v82.val[1] = 0uLL;
            v85.val[0] = v46;
            v79.val[1] = 0uLL;
            v49 = v45;
            vst2q_s8(v49, v79);
            v49 += 32;
            v85.val[1] = 0uLL;
            vst2q_s8(v49, v85);
            v50 = v45 + 64;
            vst2q_s8(v50, v82);
            v51 = v45 + 96;
            vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
            v45 += 128;
          }
          while (v45 != v42);
        }
        else
        {
          v42 = v38;
        }
        while (v42 != v41)
        {
          v52 = v39->u8[0];
          v39 = (int8x16_t *)((char *)v39 + 1);
          *(_WORD *)v42 = v52;
          v42 += 2;
        }
      }
      else if ((_DWORD)v40 == 1)
      {
        *(_WORD *)v38 = v39->i16[0];
      }
      else if ((_DWORD)v40)
      {
        memcpy(v38, v39, 2 * v40);
      }
      v43 = *(unsigned int *)(a5 + 4);
    }
    else
    {
      v43 = 0;
    }
    v53 = &v38[2 * v43];
    *(_WORD *)v53 = 32;
    result = v53 + 2;
    if (a6)
    {
      v20 = *(const char **)(a6 + 8);
      v54 = *(unsigned int *)(a6 + 4);
      if ((*(_BYTE *)(a6 + 16) & 4) == 0)
      {
        if ((_DWORD)v54 == 1)
        {
          *(_WORD *)result = *(_WORD *)v20;
          goto LABEL_70;
        }
        if (!(_DWORD)v54)
          goto LABEL_70;
        v21 = 2 * v54;
LABEL_21:
        result = (char *)memcpy(result, v20, v21);
        goto LABEL_70;
      }
      v55 = &result[2 * v54];
      if (v54 >= 0x40)
      {
        v56 = &result[2 * (v54 & 0xFFFFFFC0)];
        v57 = 0uLL;
        do
        {
          v80.val[0] = *(int8x16_t *)v20;
          v58 = *((int8x16_t *)v20 + 1);
          v83.val[0] = (int8x16_t)*((_OWORD *)v20 + 2);
          v59 = *((_OWORD *)v20 + 3);
          v20 += 64;
          v60 = v59;
          v83.val[1] = 0uLL;
          v86.val[0] = v58;
          v80.val[1] = 0uLL;
          v61 = result;
          vst2q_s8(v61, v80);
          v61 += 32;
          v86.val[1] = 0uLL;
          vst2q_s8(v61, v86);
          v62 = result + 64;
          vst2q_s8(v62, v83);
          v63 = result + 96;
          vst2q_s8(v63, *(int8x16x2_t *)(&v57 - 1));
          result += 128;
        }
        while (result != v56);
        result = v56;
      }
      while (result != v55)
      {
        v64 = *(unsigned __int8 *)v20++;
        *(_WORD *)result = v64;
        result += 2;
      }
    }
  }
LABEL_70:
  *(_QWORD *)v10 = v11;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::HTMLMediaElement::*&)(void),WebCore::HTMLMediaElement*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::HTMLMediaElement(WebCore::QualifiedName const&,WebCore::Document &,BOOL)::$_0,WebCore::WebCoreOpaqueRoot>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v1 + 22) & 8) == 0)
  {
    while (1)
    {
      result = v1;
      if ((*(_WORD *)(v1 + 28) & 0x80) != 0)
      {
        v4 = *(_QWORD *)(v1 + 200);
        if (!v4)
          return result;
        v3 = (uint64_t *)(v4 + 8);
      }
      else
      {
        v3 = (uint64_t *)(v1 + 32);
      }
      v1 = *v3;
      if (!v1)
        return result;
    }
  }
  return *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  unsigned int **v8;
  unsigned int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v2 = WebCore::HTMLMediaElement::allMediaElements(void)::elements;
  if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
  {
    v3 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 4);
    v4 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  WebCore::HTMLMediaElement::allMediaElements(void)::elements = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (unsigned int **)(v2 + 8 * i);
      v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (WebCore::HTMLMediaElement::allMediaElements(void)::elements)
            v10 = *(_DWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements - 8);
          else
            v10 = 0;
          v11 = ~(*((_QWORD *)v9 + 1) << 32) + *((_QWORD *)v9 + 1);
          v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
          v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
          v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
          v15 = 1;
          do
          {
            v16 = v14;
            v17 = *(_QWORD *)(WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v14);
            v14 = (v14 + v15++) & v10;
          }
          while (v17);
          v18 = (unsigned int **)(WebCore::HTMLMediaElement::allMediaElements(void)::elements + 8 * v16);
          *v18 = 0;
          v19 = *v8;
          *v8 = 0;
          *v18 = v19;
          v20 = *v8;
          *v8 = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              WTF::fastFree((WTF *)v20, v6);
            }
          }
        }
        else
        {
          *v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

BOOL WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::bestMediaElementForRemoteControls(WebCore::PlatformMediaSession::PlaybackControlsPurpose,WebCore::Document const*)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;

  v4 = (***(uint64_t (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32));
  if ((v4 & 0xFFFFFFFD) == 1 || v4 == 2)
    v6 = a2;
  else
    v6 = 0;
  if ((v4 - 1) > 2)
    return 0;
  v7 = **(_QWORD **)(a1 + 8);
  return !v7 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 80) + 40) + 8) == v7;
}

unint64_t WTF::Vector<WebCore::MediaElementSessionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::MediaElementSessionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::MediaElementSessionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::MediaElementSessionInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  WTF *v11;
  unsigned int *v12;
  __int128 v13;
  unsigned int v14;
  unsigned int v15;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = v7;
        do
        {
          v12 = *(unsigned int **)v11;
          *(_QWORD *)v11 = 0;
          *(_QWORD *)v10 = v12;
          v13 = *(_OWORD *)((char *)v11 + 8);
          *((_BYTE *)v10 + 24) = *((_BYTE *)v11 + 24);
          *(_OWORD *)(v10 + 2) = v13;
          result = *(unsigned int **)v11;
          *(_QWORD *)v11 = 0;
          if (result)
          {
            do
            {
              v14 = __ldaxr(result);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, result));
            if (!v15)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
            }
          }
          v10 += 8;
          v11 = (WTF *)((char *)v11 + 32);
        }
        while (v11 != (WTF *)((char *)v7 + 32 * v8));
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::pauseAfterDetachedTask(void)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::call(uint64_t a1, JSC::JSGlobalObject *a2, WebCore *a3, WebCore::HTMLMediaElement *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  _OWORD v23[4];
  uint64_t v24;
  char *v25;
  int v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v5 = *((_QWORD *)a2 + 7);
  v6 = WebCore::controllerJSValue(a3, a2, *(WebCore::JSDOMGlobalObject **)(a1 + 8), a4);
  v29 = v6;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  if ((v6 & 0xFFFE000000000002) != 0)
  {
    v7 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v29, a3);
  }
  else
  {
    if (*(unsigned __int8 *)(v6 + 5) > 0x16u)
      goto LABEL_7;
    v7 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v6, a3);
  }
  v6 = v7;
LABEL_7:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get((JSC::Structure *)v6, a3, (unint64_t)v20);
  v28 = v9;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v8);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*(_QWORD *)(v5 + 16) || (v9 & 0xFFFFFFFFFFFFFFF7) == 2)
    return 0;
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    v11 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v28, a3);
  }
  else
  {
    if (*(unsigned __int8 *)(v9 + 5) > 0x16u)
      goto LABEL_20;
    v11 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v9, a3);
  }
  v9 = v11;
LABEL_20:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  if (*(_BYTE *)(v9 + 5) == 26)
    JSC::JSFunction::getCallData((JSC::JSFunction *)v9, (JSCell *)v8);
  else
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v27, v9);
  if (!LOBYTE(v27[0]))
    return 0;
  v21 = 0x800000000;
  v22 = (WTF *)((char *)v23 + 8);
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  v25 = (char *)v23 + 8;
  v26 = 0;
  v12 = JSC::call();
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
  }
  if (v12 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)v12 == 0;
    return !v15;
  }
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
  if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v13 <= 0.0)
      return v13 < 0.0;
    return 1;
  }
  if ((v12 & 0xFFFE000000000002) != 0)
    return v12 == 7;
  v16 = *(unsigned __int8 *)(v12 + 5);
  if (v16 == 3)
  {
    v19 = *(_DWORD *)(v12 + 8);
LABEL_49:
    v15 = v19 == 0;
    return !v15;
  }
  if (v16 == 2)
  {
    v17 = *(_QWORD *)(v12 + 8);
    if ((v17 & 1) != 0)
      v18 = (int *)(v12 + 16);
    else
      v18 = (int *)(v17 + 4);
    v19 = *v18;
    goto LABEL_49;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) == 0)
    return 1;
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == (_QWORD)a3;
  return !v15;
}

uint64_t WebCore::controllerJSValue(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::HTMLMediaElement *a4)
{
  uint64_t v5;
  uint64_t v6;
  JSC::Structure *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v5 = *((_QWORD *)a2 + 7);
  v6 = WebCore::toJS(this, a2, a3, a4);
  if ((v6 & 0xFFFE000000000002) != 0)
    return 2;
  v7 = (JSC::Structure *)v6;
  if (*(unsigned __int8 *)(v6 + 5) < 0x17u)
    return 2;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v7, this, (unint64_t)v14);
  v10 = v8;
  if (!*(_DWORD *)(v5 + 80))
  {
    if ((v8 & 0xFFFE000000000002) != 0)
    {
LABEL_19:
      v12 = 2;
      goto LABEL_12;
    }
LABEL_5:
    if (*(unsigned __int8 *)(v10 + 5) >= 0x17u)
    {
      v11 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41456) + 19544);
      if (v11)
        *(_DWORD *)v11 += 2;
      v12 = JSC::JSObject::get((JSC::Structure *)v10, this, (unint64_t)v11);
      if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
        v12 = 2;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      goto LABEL_12;
    }
    goto LABEL_19;
  }
  v12 = 2;
  if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) == 0 && (v10 & 0xFFFE000000000002) == 0)
    goto LABEL_5;
LABEL_12:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *a1 = &off_1E33C5820;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 128);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v10 = *(_WORD *)(v7 + 30);
        if ((v10 & 0x400) == 0)
        {
          v11 = *(_WORD *)(v7 + 28);
          if ((v11 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
          }
          else
          {
            if ((v11 & 0x20) != 0)
            {
              v12 = v7;
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v7 = v12;
              v10 = *(_WORD *)(v12 + 30);
            }
            *(_WORD *)(v7 + 30) = v10 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v8 = *(_WORD *)(v5 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v5 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v8 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v8 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E33C5820;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 128);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v10 = *(_WORD *)(v7 + 30);
        if ((v10 & 0x400) == 0)
        {
          v11 = *(_WORD *)(v7 + 28);
          if ((v11 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
          }
          else
          {
            if ((v11 & 0x20) != 0)
            {
              v12 = v7;
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v7 = v12;
              v10 = *(_WORD *)(v12 + 30);
            }
            *(_WORD *)(v7 + 30) = v10 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v8 = *(_WORD *)(v5 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v5 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v8 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v8 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

void WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::removedFromAncestor(WebCore::Node::RemovalType,WebCore::ContainerNode &)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  WTF::RunLoop *v11;
  WTF::RunLoop *v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 120);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 180) && (*(_DWORD *)(v2 + 1265) & 0x20) == 0)
      {
        v5 = *(_DWORD *)(v2 + 1080);
        if (v5 != 2)
        {
          if (*(int *)(v2 + 900) >= 1 && !*(_BYTE *)(v2 + 1730))
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v2 + 1448))(*(_QWORD *)(a1 + 8));
            v5 = *(_DWORD *)(v2 + 1080);
          }
          if (v5 == 1)
            WebCore::HTMLMediaElement::exitFullscreen((WebCore::HTMLMediaElement *)v2, a2);
        }
        if (*(unsigned __int8 *)(v2 + 1288) - 1 <= 1)
        {
          v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v6 = off_1E33C57F8;
          v6[1] = v2;
          v16 = (uint64_t)v6;
          v7 = WebCore::HTMLMediaElement::setupAndCallJS(v2, &v16);
          (*(void (**)(_QWORD *))(*v6 + 8))(v6);
          if ((v7 & 1) != 0)
            v8 = 3;
          else
            v8 = *(_BYTE *)(v2 + 1288);
          *(_BYTE *)(v2 + 1288) = v8;
        }
        v9 = *(_QWORD *)(v2 + 1136);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 72);
          if (v10)
          {
            v11 = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1032))(v10);
            if ((unint64_t)v11 > *(_QWORD *)(v2 + 1608))
            {
              v12 = v11;
              v13 = WebCore::g_commonVMOrNull;
              if (WebCore::g_commonVMOrNull)
              {
LABEL_27:
                MEMORY[0x19AEA3294](&v16, v13);
                v15 = (unint64_t)v12 - *(_QWORD *)(v2 + 1608);
                *(_QWORD *)(v2 + 1608) = v12;
                if (v15 >= 0x101)
                  JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v13 + 192));
                MEMORY[0x19AEA32A0](&v16);
                return;
              }
              WTF::RunLoop::webIfExists(v11);
              JSC::VM::create();
              v13 = v16;
              WebCore::g_commonVMOrNull = v16;
              if (__ldaxr((unsigned int *)(v16 + 1096)))
              {
                __clrex();
              }
              else if (!__stlxr(4u, (unsigned int *)(v16 + 1096)))
              {
LABEL_24:
                if (webThreadStarted == 1)
                  *(_BYTE *)(*(_QWORD *)(v13 + 112) + 5) = 1;
                WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v13 + 584));
                WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v13, 0);
                goto LABEL_27;
              }
              JSC::Heap::acquireAccessSlow((JSC::Heap *)(v13 + 192));
              goto LABEL_24;
            }
          }
        }
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::didDetachRenderers(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 2704))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E33C5898;
  WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1}::~Function(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E33C5898;
  WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1}::~Function(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;

  result = *(_QWORD *)(a1 + 24);
  if (result && *(_QWORD *)(result + 8))
  {
    *(_QWORD *)(a1 + 24) = 0;
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      WTF::fastFree((WTF *)result, a2);
    }
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  }
  return result;
}

uint64_t *WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(WebCore::HTMLMediaElement &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Function<void ()(void)> &&)::{lambda(void)#1}::~Function(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;

  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v10 = *((_QWORD *)v7 + 1);
      --*(_QWORD *)(v10 + 128);
      *((_QWORD *)v7 + 1) = 0;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        v13 = *(_WORD *)(v10 + 30);
        if ((v13 & 0x400) == 0)
        {
          v14 = *(_WORD *)(v10 + 28);
          if ((v14 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v10, a2);
          }
          else
          {
            if ((v14 & 0x20) != 0)
            {
              v15 = v10;
              (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 160) + 16))(*(_QWORD *)(v10 + 160));
              v10 = v15;
              v13 = *(_WORD *)(v15 + 30);
            }
            *(_WORD *)(v10 + 30) = v13 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
          }
        }
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *a1;
  *a1 = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v11 = *(_WORD *)(v8 + 30);
      if ((v11 & 0x400) == 0)
      {
        v12 = *(_WORD *)(v8 + 28);
        if ((v12 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
        }
        else
        {
          if ((v12 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v11 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v11 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::HTMLMediaElement::*)(void),WebCore::HTMLMediaElement*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleResolvePendingPlayPromises(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  *(_QWORD *)a1 = &off_1E33C58E8;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 16);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleResolvePendingPlayPromises(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  *(_QWORD *)this = &off_1E33C58E8;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleResolvePendingPlayPromises(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE v10[8];

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 120);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 180))
      {
        v3 = *(unsigned int *)(result + 28);
        if ((_DWORD)v3)
        {
          v4 = *(uint64_t **)(result + 16);
          v5 = 8 * v3;
          do
          {
            v6 = *v4;
            v7 = *(_QWORD *)(*v4 + 24);
            if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
            {
              v8 = *(_QWORD *)(v6 + 32);
              if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
                v9 = 0;
              else
                v9 = *(uint64_t **)v8;
              JSC::JSLockHolder::JSLockHolder();
              WebCore::DeferredPromise::callFunction(v6, v9, 0, (objc_class *)0xA);
              result = MEMORY[0x19AEA32A0](v10);
            }
            ++v4;
            v5 -= 8;
          }
          while (v5);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises(WTF::Ref<WebCore::DOMException,WTF::RawPtrTraits<WebCore::DOMException>,WTF::DefaultRefDerefTraits<WebCore::DOMException>> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_1E33C5910;
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 24);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises(WTF::Ref<WebCore::DOMException,WTF::RawPtrTraits<WebCore::DOMException>,WTF::DefaultRefDerefTraits<WebCore::DOMException>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E33C5910;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleRejectPendingPlayPromises(WTF::Ref<WebCore::DOMException,WTF::RawPtrTraits<WebCore::DOMException>,WTF::DefaultRefDerefTraits<WebCore::DOMException>> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 120);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 180))
      {
        v3 = result;
        v4 = *(unsigned int *)(result + 36);
        if ((_DWORD)v4)
        {
          v5 = *(uint64_t **)(result + 24);
          v6 = 8 * v4;
          do
          {
            v7 = *v5++;
            result = WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::DOMException>>(v7, *(_DWORD **)(v3 + 16));
            v6 -= 8;
          }
          while (v6);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::DOMException>>(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::DOMException>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 1, v8);
      return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleNotifyAboutPlaying(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  *(_QWORD *)a1 = &off_1E33C5938;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD ***)(a1 + 16);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleNotifyAboutPlaying(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  *(_QWORD *)this = &off_1E33C5938;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleNotifyAboutPlaying(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  WTF *v28;
  void *v29;
  __int16 v30;
  __int16 v31;
  _QWORD v32[2];

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 120);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
      {
        v4 = result;
        *(_DWORD *)(v1 + 24) += 2;
        v32[0] = WebCore::HTMLMediaElement::currentMediaTime((WebCore::HTMLMediaElement *)v1);
        v32[1] = v5;
        v6 = (WebCore *)WTF::MediaTime::toDouble((WTF::MediaTime *)v32);
        *(_QWORD *)(v1 + 1024) = v7;
        *(_DWORD *)(v1 + 1265) |= 0x4000000u;
        v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
          v9 = WebCore::threadGlobalDataSlow(v6);
        v10 = *(_QWORD *)(v9 + 40);
        if (!v10)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
          v10 = *(_QWORD *)(v9 + 40);
        }
        v11 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
        *(_DWORD *)(v11 + 16) = 1;
        *(_QWORD *)v11 = off_1E33A4B48;
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v10 + 1472) != 0);
        v13 = *(_DWORD **)(v10 + 1472);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v11 + 24) = v13;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = v12;
        *(_QWORD *)(v11 + 64) = 0;
        result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 48))(v1, v11);
        if (*(_DWORD *)(v11 + 16) == 1)
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        else
          --*(_DWORD *)(v11 + 16);
        v15 = v4[7];
        if ((_DWORD)v15)
        {
          v16 = (uint64_t *)*((_QWORD *)v4 + 2);
          v17 = 8 * v15;
          do
          {
            v18 = *v16;
            v19 = *(_QWORD *)(*v16 + 24);
            if (v19 && *(_QWORD *)v19 && (*(_BYTE *)(v19 + 8) & 3) == 0)
            {
              v20 = *(_QWORD *)(v18 + 32);
              if (!v20 || (*(_BYTE *)(v20 + 8) & 3) != 0)
                v21 = 0;
              else
                v21 = *(uint64_t **)v20;
              JSC::JSLockHolder::JSLockHolder();
              WebCore::DeferredPromise::callFunction(v18, v21, 0, (objc_class *)0xA);
              result = (unsigned int *)MEMORY[0x19AEA32A0](v32);
            }
            ++v16;
            v17 -= 8;
          }
          while (v17);
        }
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
          {
            v24 = *(_QWORD *)(v23 + 24);
            if (v24)
            {
              v25 = *(_QWORD *)(v24 + 8);
              if (v25)
              {
                v26 = (*(_DWORD *)v25)++;
                if ((*(_QWORD *)(v25 + 1064) & 0xFFFFFFFFFFFFLL) == 0
                  || *(double *)((*(_QWORD *)(v25 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                {
                  *(_QWORD *)(v25 + 1056) = 0;
                  WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
                  result = (unsigned int *)WebCore::TimerBase::setNextFireTime(v25 + 1032, v27 + 0.0);
                  v26 = *(_DWORD *)v25 - 1;
                }
                if (v26)
                {
                  *(_DWORD *)v25 = v26;
                }
                else
                {
                  WebCore::Page::~Page(v25);
                  result = (unsigned int *)WTF::fastFree(v28, v29);
                }
              }
            }
          }
        }
        if (*(_DWORD *)(v1 + 24) == 2)
        {
          v30 = *(_WORD *)(v1 + 30);
          if ((v30 & 0x400) == 0)
          {
            v31 = *(_WORD *)(v1 + 28);
            if ((v31 & 0xF000) == 0x9000)
            {
              return WebCore::Document::removedLastRef((WebCore::Document *)v1, v14);
            }
            else
            {
              if ((v31 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
                v30 = *(_WORD *)(v1 + 30);
              }
              *(_WORD *)(v1 + 30) = v30 | 0x400;
              return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
            }
          }
        }
        else
        {
          *(_DWORD *)(v1 + 24) -= 2;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::mediaPlayerReloadAndResumePlaybackIfNeeded(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;
  unsigned __int8 *v6;
  WTF::MediaTime *v7;
  WTF::MediaTime *v8;
  WTF::MediaTime *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD v14[3];

  v1 = *(_QWORD *)(*((_QWORD *)result + 1) + 1136);
  if (!v1)
    return result;
  v2 = result;
  v3 = *(unsigned __int8 **)v1;
  if (__ldaxr(*(unsigned __int8 **)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  ++*((_QWORD *)v3 + 1);
  v5 = __ldxr(v3);
  if (v5 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_11:
  v6 = v2 + 16;
  v7 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 560))(*(_QWORD *)(v1 + 72));
  if ((_DWORD)v7)
  {
    v14[0] = *(_OWORD *)v6;
    v8 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v7);
    v14[1] = *(_OWORD *)v8;
    v9 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v8);
    v14[2] = *(_OWORD *)v9;
    v10 = *(_QWORD *)(v1 + 72);
    v11 = WTF::MediaTime::invalidTime(v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 384))(v10, v11);
    (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v1 + 72) + 400))(*(_QWORD *)(v1 + 72), v14);
  }
  else
  {
    v12 = (_QWORD *)(v1 + 176);
    if (*(_BYTE *)(v1 + 192))
    {
      v13 = *(_QWORD *)v6;
      *(_QWORD *)(v1 + 181) = *(_QWORD *)(v6 + 5);
      *v12 = v13;
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)v6;
      *(_BYTE *)(v1 + 192) = 1;
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12]>(WTF::Logger::LogSiteIdentifier *a1, const char *a2)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint8_t buf[4];
  _BYTE v41[12];
  int v42;
  WTF::StringImpl *v43[3];

  v43[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  result = WTF::String::String((WTF::String *)&v37, a2);
  if (!v38)
  {
    v5 = 0;
    if (v37)
      goto LABEL_3;
LABEL_71:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = *((_DWORD *)v38 + 1);
  if (!v37)
    goto LABEL_71;
LABEL_3:
  v6 = *((_DWORD *)v37 + 1);
LABEL_4:
  if ((v6 | v5) < 0 || (result = (v5 + v6), __OFADD__(v5, v6)))
  {
    v39 = 0;
    goto LABEL_75;
  }
  if (v38)
  {
    v7 = *((_DWORD *)v38 + 4);
    v8 = (v7 >> 2) & 1;
    if (v37 && (v7 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v37)
    {
LABEL_9:
      v8 = (*((unsigned __int8 *)v37 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v8 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (uint64_t)v38, (uint64_t)v37, &v39);
  if (!v39)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v10 = v37;
  v37 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v38;
  v38 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7C4A0;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v35 ? (char *)v35 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v41 = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = (uint64_t)v35;
    v35 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogMedia)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v42 = 0;
              WTF::String::String((WTF::String *)v43, a2);
              v35 = 0;
              v36 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v36) = 2;
              v35 = v24;
              v25 = HIDWORD(v36);
              *((_DWORD *)v24 + 4 * HIDWORD(v36)) = *(_DWORD *)buf;
              v26 = *(_QWORD *)&v41[4];
              if (*(_QWORD *)&v41[4])
                **(_DWORD **)&v41[4] += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v42;
              v27 = v43[0];
              if (v43[0])
                *(_DWORD *)v43[0] += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v36) = v25 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogMedia, 0, &v35);
              v28 = v35;
              if (HIDWORD(v36))
              {
                v29 = 16 * HIDWORD(v36);
                v30 = (WTF::StringImpl **)((char *)v35 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v35;
              }
              if (v28)
              {
                v35 = 0;
                LODWORD(v36) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v43[0];
              v43[0] = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = *(WTF::StringImpl **)&v41[4];
              *(_QWORD *)&v41[4] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::selectMediaResource(void)::$_0,void>::call(WTF::StringImpl *result, void *a2)
{
  uint64_t v2;
  WTF::Logger::LogSiteIdentifier *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  WTF::String *v29;
  __n128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  char v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;

  v2 = *((_QWORD *)result + 1);
  v3 = (WTF::StringImpl *)((char *)result + 16);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
    result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 0, v3, "lambda(), task fired");
  v4 = (WTF::StringImpl **)(v2 + 1368);
  if (*(_DWORD *)(v2 + 1376))
  {
    v5 = *(unsigned int *)(v2 + 1380);
    if ((_DWORD)v5)
    {
      v6 = *v4;
      v7 = 8 * v5;
      do
      {
        v8 = *(_DWORD **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          if (v8[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
          else
            --v8[4];
        }
        v6 = (WTF::StringImpl *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
      *(_DWORD *)(v2 + 1380) = 0;
    }
    result = *v4;
    if (*v4)
    {
      *(_QWORD *)(v2 + 1368) = 0;
      *(_DWORD *)(v2 + 1376) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(result, a2);
    }
  }
  v9 = *(_QWORD *)(v2 + 1352);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 24) + 1;
    *(_DWORD *)(v9 + 24) = v10;
    v11 = *(_DWORD *)(v9 + 108);
    v12 = *(_DWORD *)(v9 + 124);
    v13 = *(_DWORD *)(v9 + 68);
    if (v12 + v11 + v13)
    {
      v14 = 0;
      while (v14 >= v12)
      {
        if (v11 > v14 - v12)
        {
          result = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 96) + 8 * (v14 - v12));
          if (!result)
            goto LABEL_29;
          if (*((_DWORD *)result + 10) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195C47478);
          }
          goto LABEL_28;
        }
        v15 = v14 - v11 - v12;
        if (v13 > v15)
        {
          result = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 56) + 8 * v15);
          if (!result)
            goto LABEL_29;
          if (*((_DWORD *)result + 10) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195C474B0);
          }
          goto LABEL_28;
        }
        result = 0;
LABEL_29:
        v60 = result;
        if (*((_DWORD *)result + 56))
        {
          v16 = *(unsigned int *)(v2 + 1380);
          if ((_DWORD)v16 == *(_DWORD *)(v2 + 1376))
          {
            v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v2 + 1368), v16 + 1, (unint64_t)&v60);
            v16 = *(unsigned int *)(v2 + 1380);
            v18 = *(_QWORD *)(v2 + 1368);
            v19 = *(_QWORD *)v17;
            if (*(_QWORD *)v17)
              ++*(_DWORD *)(v19 + 16);
            *(_QWORD *)(v18 + 8 * v16) = v19;
          }
          else
          {
            v20 = *v4;
            ++*((_DWORD *)result + 4);
            *((_QWORD *)v20 + v16) = result;
          }
          *(_DWORD *)(v2 + 1380) = v16 + 1;
          result = v60;
          v60 = 0;
          if (!result)
            goto LABEL_39;
        }
        else
        {
          v60 = 0;
        }
        if (*((_DWORD *)result + 4) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 4);
LABEL_39:
        ++v14;
        v11 = *(_DWORD *)(v9 + 108);
        v12 = *(_DWORD *)(v9 + 124);
        v13 = *(_DWORD *)(v9 + 68);
        if (v14 >= v12 + v11 + v13)
        {
          v10 = *(_DWORD *)(v9 + 24);
          goto LABEL_43;
        }
      }
      result = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 112) + 8 * v14);
      if (!result)
        goto LABEL_29;
      if (*((_DWORD *)result + 10) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195C47448);
      }
LABEL_28:
      ++*((_DWORD *)result + 4);
      goto LABEL_29;
    }
LABEL_43:
    if (v10 == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
    else
      *(_DWORD *)(v9 + 24) = v10 - 1;
  }
  if (*(_BYTE *)(v2 + 1544))
  {
    v21 = 1;
    goto LABEL_47;
  }
  v40 = *(_QWORD *)(v2 + 104);
  if (!v40)
    goto LABEL_97;
  v41 = *(_DWORD *)(v40 + 4);
  if ((v41 & 1) != 0)
  {
    v42 = *(uint64_t **)(v40 + 40);
    LODWORD(v43) = *(_DWORD *)(v40 + 52);
    if ((_DWORD)v43)
      goto LABEL_89;
LABEL_97:
    v45 = *(_QWORD *)(v2 + 80);
    if (!v45)
    {
LABEL_101:
      *(_DWORD *)(v2 + 1056) = 0;
      result = (WTF::StringImpl *)WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)v2, 0);
      *(_DWORD *)(v2 + 900) = 0;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
        return (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, v3, "nothing to load");
      return result;
    }
    while ((*(_WORD *)(v45 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v45 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
    {
      v45 = *(_QWORD *)(v45 + 56);
      if (!v45)
        goto LABEL_101;
    }
    *(_DWORD *)(v45 + 24) += 2;
    v46 = *(_QWORD *)(v2 + 1072);
    *(_QWORD *)(v2 + 1072) = v45;
    if (v46)
    {
      if (*(_DWORD *)(v46 + 24) == 2)
      {
        v52 = *(_WORD *)(v46 + 30);
        if ((v52 & 0x400) == 0)
        {
          v53 = *(_WORD *)(v46 + 28);
          if ((v53 & 0xF000) == 0x9000)
          {
            result = (WTF::StringImpl *)WebCore::Document::removedLastRef((WebCore::Document *)v46, a2);
          }
          else
          {
            if ((v53 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v46 + 160) + 16))(*(_QWORD *)(v46 + 160));
              v52 = *(_WORD *)(v46 + 30);
            }
            *(_WORD *)(v46 + 30) = v52 | 0x400;
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 72))(v46);
          }
        }
      }
      else
      {
        *(_DWORD *)(v46 + 24) -= 2;
      }
    }
    v47 = *(_QWORD *)(v2 + 1064);
    *(_QWORD *)(v2 + 1064) = 0;
    if (v47)
    {
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        v54 = *(_WORD *)(v47 + 30);
        if ((v54 & 0x400) == 0)
        {
          v55 = *(_WORD *)(v47 + 28);
          if ((v55 & 0xF000) == 0x9000)
          {
            result = (WTF::StringImpl *)WebCore::Document::removedLastRef((WebCore::Document *)v47, a2);
          }
          else
          {
            if ((v55 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v47 + 160) + 16))(*(_QWORD *)(v47 + 160));
              v54 = *(_WORD *)(v47 + 30);
            }
            *(_WORD *)(v47 + 30) = v54 | 0x400;
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47);
          }
        }
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
    }
    v21 = 3;
    goto LABEL_47;
  }
  v42 = (uint64_t *)(v40 + 32);
  LODWORD(v43) = v41 >> 5;
  if (!(_DWORD)v43)
    goto LABEL_97;
LABEL_89:
  v43 = v43;
  while (1)
  {
    v44 = *v42;
    if (*v42 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v44 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v44 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    v42 += 2;
    if (!--v43)
      goto LABEL_97;
  }
  if (!*(_QWORD *)(v2 + 1136))
  {
    if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
      return (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 1u, v3, "has srcAttr but m_player is not created");
    return result;
  }
  v21 = 2;
LABEL_47:
  *(_DWORD *)(v2 + 900) = 2;
  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
    v23 = WebCore::threadGlobalDataSlow(result);
  v24 = *(_QWORD *)(v23 + 40);
  if (!v24)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v23);
    v24 = *(_QWORD *)(v23 + 40);
  }
  v25 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v25);
  *(_DWORD *)(v25 + 16) = 1;
  *(_QWORD *)v25 = off_1E33A4B48;
  *(_QWORD *)(v25 + 8) = 0;
  *(_DWORD *)(v25 + 20) = *(_DWORD *)(v25 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v24 + 1160) != 0);
  v27 = *(_DWORD **)(v24 + 1160);
  if (v27)
    *v27 += 2;
  *(_QWORD *)(v25 + 24) = v27;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = v26;
  *(_QWORD *)(v25 + 64) = 0;
  v60 = (WTF::StringImpl *)v25;
  WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v2 + 112), v2, 9, v2 + 824, (uint64_t *)&v60);
  v31 = v60;
  v60 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 4) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
    else
      --*((_DWORD *)v31 + 4);
  }
  if (v21 != 2)
  {
    if (v21 != 1)
      return WebCore::HTMLMediaElement::loadNextSourceChild((WebCore::HTMLMediaElement *)v2, v30);
    *(_DWORD *)(v2 + 1056) = 1;
    v60 = 0;
    WTF::URL::invalidate((WTF::URL *)&v60);
    v33 = v60;
    if (v60)
      *(_DWORD *)v60 += 2;
    v34 = *(WTF::StringImpl **)(v2 + 912);
    *(_QWORD *)(v2 + 912) = v33;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    *(_OWORD *)(v2 + 920) = v61;
    *(_OWORD *)(v2 + 936) = v62;
    if (WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      JUMPOUT(0x195C47510);
    }
    *(_QWORD *)(v2 + 952) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    v36 = v60;
    v60 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (*(_BYTE *)(v2 + 1544))
    {
      v60 = (WTF::StringImpl *)v2;
      *(_QWORD *)&v61 = v2;
      *((_QWORD *)&v61 + 1) = v2;
      *(_QWORD *)&v62 = v3;
      *((_QWORD *)&v62 + 1) = v2;
      v37 = *(unsigned int *)(v2 + 1536);
      if ((_DWORD)v37 != -1)
      {
        v58 = (WTF::StringImpl *)&v60;
        ((void (*)(WTF::StringImpl **, uint64_t))off_1E33C59A0[v37])(&v58, v2 + 1528);
        v58 = 0;
        v59 = 0;
        v60 = 0;
        WTF::URL::invalidate((WTF::URL *)&v60);
        v57 = 0;
        WebCore::HTMLMediaElement::loadResource((WTF::StringImpl **)v2, (const WTF::URL *)&v60, (const WebCore::ContentType *)&v58, (const WTF::String *)&v57);
        v39 = v60;
        v60 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
        if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27]>((uint64_t)&WebCore::LogMedia, 0, v3, "using 'srcObject' property");
        result = v58;
        v58 = 0;
        if (!result)
          return result;
LABEL_85:
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
        *(_DWORD *)result -= 2;
        return result;
      }
    }
    else
    {
      std::__throw_bad_optional_access[abi:sn180100]();
    }
    v56 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>> &>(v56);
  }
  *(_DWORD *)(v2 + 1056) = 1;
  WebCore::Element::getNonEmptyURLAttribute((WebCore::Element *)v2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, v28, v29, (WTF::URL *)&v60, v30);
  if (v60 && *((_DWORD *)v60 + 1))
  {
    if ((WebCore::HTMLMediaElement::isSafeToLoadURL((_QWORD *)v2, (WTF::URL *)&v60, 1, 1) & 1) != 0)
    {
      v49 = v60;
      if (v60)
        *(_DWORD *)v60 += 2;
      v50 = *(WTF::StringImpl **)(v2 + 912);
      *(_QWORD *)(v2 + 912) = v49;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v48);
        else
          *(_DWORD *)v50 -= 2;
      }
      *(_OWORD *)(v2 + 920) = v61;
      *(_OWORD *)(v2 + 936) = v62;
      if (WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
      {
        __break(0xC471u);
        JUMPOUT(0x195C47530);
      }
      *(_QWORD *)(v2 + 952) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      v57 = 0;
      v58 = 0;
      v59 = 0;
      WebCore::HTMLMediaElement::loadResource((WTF::StringImpl **)v2, (const WTF::URL *)&v60, (const WebCore::ContentType *)&v58, (const WTF::String *)&v57);
      if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, v3, "using 'src' attribute url");
      v51 = v58;
      v58 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v38);
        else
          *(_DWORD *)v51 -= 2;
      }
    }
    else
    {
      WebCore::HTMLMediaElement::mediaLoadingFailed((WebCore::HTMLMediaElement *)v2, (void *)4);
    }
  }
  else
  {
    WebCore::HTMLMediaElement::mediaLoadingFailed((WebCore::HTMLMediaElement *)v2, (void *)4);
    if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12]>(v3, "empty 'src'");
  }
  result = v60;
  v60 = 0;
  if (result)
    goto LABEL_85;
  return result;
}

WebCore::MediaStream *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>> &>(uint64_t **a1, WebCore::MediaStream **a2)
{
  WebCore::MediaStream *v2;
  uint64_t v3;
  WebCore::MediaStream *result;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v2 = *a2;
  v3 = **a1;
  if (*a2)
    *((_DWORD *)v2 + 22) += 2;
  result = *(WebCore::MediaStream **)(v3 + 1632);
  *(_QWORD *)(v3 + 1632) = v2;
  if (result)
  {
    if (*((_DWORD *)result + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(result);
      result = (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v5, v6);
      if (!v2)
        return result;
      goto LABEL_7;
    }
    --*((_DWORD *)result + 22);
  }
  if (!v2)
    return result;
LABEL_7:
  if (*((_DWORD *)v2 + 22) == 1)
  {
    WebCore::MediaStream::~MediaStream(v2);
    return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v7, v8);
  }
  else
  {
    --*((_DWORD *)v2 + 22);
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*a2)
    ++*(_DWORD *)(v2 + 24);
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E335DF30;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v2;
  result = *(_DWORD **)(v3 + 1152);
  *(_QWORD *)(v3 + 1152) = v4;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>> &>(_DWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(_DWORD *);
  int v13;

  v2 = *(_QWORD *)result;
  v3 = (_DWORD *)*a2;
  if (*a2)
    ++v3[2];
  v4 = *(_QWORD *)(v2 + 16);
  if (!*((_BYTE *)v3 + 12))
  {
    v5 = atomic_load((unsigned __int8 *)(*((_QWORD *)v3 + 2) + 24));
    if ((v5 & 1) == 0)
    {
      v6 = WTF::fastMalloc((WTF *)0x28);
      v7 = v6;
      *(_DWORD *)(v6 + 8) = 1;
      *(_QWORD *)v6 = off_1E335DFB8;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = v3;
      v8 = *((_QWORD *)v3 + 2);
      v9 = *(_QWORD *)(v8 + 32);
      if (!v9)
      {
        *(_QWORD *)(v6 + 32) = 0;
        goto LABEL_25;
      }
      v10 = *(_QWORD *)(v8 + 40);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v9);
LABEL_17:
      if (*(_QWORD *)(v9 + 24))
        ++*(_QWORD *)(v9 + 8);
      else
        v10 = 0;
      *(_QWORD *)(v7 + 32) = v10;
      v13 = __ldxr((unsigned __int8 *)v9);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
LABEL_25:
          result = *(_DWORD **)(v4 + 1152);
          *(_QWORD *)(v4 + 1152) = v7;
          if (result)
          {
            if (result[2] != 1)
            {
              --result[2];
              return result;
            }
            v12 = *(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8);
            return (_DWORD *)v12(result);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_25;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v4 + 1824) + 12))
    result = (_DWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [72]>((uint64_t)&WebCore::LogMedia, 0, *(WTF::Logger::LogSiteIdentifier **)(v2 + 24), "Attempting to use a detached or a previously attached MediaSourceHandle");
  if (v3[2] == 1)
  {
    v12 = *(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8);
    result = v3;
    return (_DWORD *)v12(result);
  }
  --v3[2];
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>)#1},WebCore::HTMLMediaElement::selectMediaResource(void)::$_0::operator() const(void)::{lambda(WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>> &>(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *result;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (*a2)
    v2[4] += 2;
  result = *(_DWORD **)(v3 + 1448);
  *(_QWORD *)(v3 + 1448) = v2;
  if (result)
  {
    if (result[4] == 1)
    {
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      if (!v2)
        return result;
      goto LABEL_7;
    }
    --result[4];
  }
  if (!v2)
    return result;
LABEL_7:
  if (v2[4] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[4];
  return result;
}

uint64_t WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::searchForOverlapsFrom<WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::OverlapsSearchAdapter>(uint64_t result, const WTF::MediaTime **a2)
{
  uint64_t v3;
  uint64_t v4;
  const WTF::MediaTime *v5;
  const WTF::MediaTime *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (result)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)v3;
      if (*(_QWORD *)v3 && WTF::MediaTime::compare((WTF::MediaTime *)(v4 + 72), a2[1]) != -1)
        WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::searchForOverlapsFrom<WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::OverlapsSearchAdapter>(v4, a2);
      v5 = a2[1];
      if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 48), v5) != -1
        && WTF::MediaTime::compare((const WTF::MediaTime *)((char *)v5 + 16), (const WTF::MediaTime *)(v3 + 32)) != -1)
      {
        v6 = *a2;
        v7 = *((unsigned int *)*a2 + 3);
        if ((_DWORD)v7 == *((_DWORD *)*a2 + 2))
        {
          v8 = WTF::Vector<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)*a2, v7 + 1, v3 + 32);
          v9 = *(_QWORD *)v6 + 56 * *((unsigned int *)v6 + 3);
          v10 = *(_OWORD *)v8;
          v11 = *((_OWORD *)v8 + 1);
          v12 = *((_OWORD *)v8 + 2);
          v13 = *((_QWORD *)v8 + 6);
        }
        else
        {
          v9 = *(_QWORD *)v6 + 56 * v7;
          v10 = *(_OWORD *)(v3 + 32);
          v11 = *(_OWORD *)(v3 + 48);
          v12 = *(_OWORD *)(v3 + 64);
          v13 = *(_QWORD *)(v3 + 80);
        }
        *(_QWORD *)(v9 + 48) = v13;
        *(_OWORD *)(v9 + 16) = v11;
        *(_OWORD *)(v9 + 32) = v12;
        *(_OWORD *)v9 = v10;
        ++*((_DWORD *)v6 + 3);
      }
      result = WTF::MediaTime::compare((const WTF::MediaTime *)((char *)a2[1] + 16), (const WTF::MediaTime *)(v3 + 32));
      if ((_DWORD)result == -1)
        break;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

char *WTF::Vector<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  WTF *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 56 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v18 = *(WTF **)a1;
        return (char *)v18 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0x4924925)
      {
        v10 = 56 * v9;
        v11 = WTF::fastMalloc((WTF *)(56 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10 / 0x38;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          v15 = *(_OWORD *)((char *)v5 + v13);
          v16 = *(_OWORD *)((char *)v5 + v13 + 16);
          v17 = *(_OWORD *)((char *)v5 + v13 + 32);
          *(_QWORD *)(v14 + 48) = *(_QWORD *)((char *)v5 + v13 + 48);
          *(_OWORD *)(v14 + 16) = v16;
          *(_OWORD *)(v14 + 32) = v17;
          *(_OWORD *)v14 = v15;
          v13 += 56;
        }
        while (56 * v6 != v13);
        v18 = *(WTF **)a1;
        if (v5)
        {
          if (v18 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v18 = *(WTF **)a1;
        }
        return (char *)v18 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x195C47B68);
    }
  }
  v19 = *(unsigned int *)(a1 + 8);
  v20 = v19 + (v19 >> 2);
  if (v20 >= 0x10)
    v21 = v20 + 1;
  else
    v21 = 16;
  if (v21 <= a2)
    v21 = a2;
  if (v21 > v19)
  {
    if (v21 >= 0x4924925)
      goto LABEL_33;
    v22 = *(unsigned int *)(a1 + 12);
    v23 = 56 * v21;
    v24 = WTF::fastMalloc((WTF *)(56 * v21));
    *(_DWORD *)(a1 + 8) = v23 / 0x38;
    *(_QWORD *)a1 = v24;
    if ((_DWORD)v22)
    {
      v26 = 56 * v22;
      v27 = v5;
      do
      {
        v28 = *(_OWORD *)v27;
        v29 = *((_OWORD *)v27 + 1);
        v30 = *((_OWORD *)v27 + 2);
        *(_QWORD *)(v24 + 48) = *((_QWORD *)v27 + 6);
        *(_OWORD *)(v24 + 16) = v29;
        *(_OWORD *)(v24 + 32) = v30;
        *(_OWORD *)v24 = v28;
        v24 += 56;
        v27 = (WTF *)((char *)v27 + 56);
        v26 -= 56;
      }
      while (v26);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v25);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::smallestNodeGreaterThanFrom(WTF::MediaTime *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 0;
  v2 = a2;
  while (1)
  {
    v4 = WTF::MediaTime::compare(a1, (const WTF::MediaTime *)(v2 + 32));
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 == -1)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v5)
      return 0;
  }
  result = WebCore::PODIntervalTree<WTF::MediaTime,WebCore::TextTrackCue *>::smallestNodeGreaterThanFrom(a1, v5);
  if (!result)
    return v2;
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::MediaTime *a5)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  char *v47;
  WTF::MediaTime *v48;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint8_t buf[4];
  _BYTE v57[12];
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v47 = (char *)a4;
  WTF::String::String((WTF::String *)&v53, a4);
  v48 = a5;
  result = WTF::MediaTime::toJSONString(a5);
  if (v54)
  {
    v10 = *((_DWORD *)v54 + 1);
    if (v53)
      goto LABEL_3;
LABEL_91:
    v11 = 0;
    if (v52)
      goto LABEL_4;
LABEL_92:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!v53)
    goto LABEL_91;
LABEL_3:
  v11 = *((_DWORD *)v53 + 1);
  if (!v52)
    goto LABEL_92;
LABEL_4:
  v12 = *((_DWORD *)v52 + 1);
LABEL_5:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0 || (v15 & 1) != 0 || (result = (v10 + v14), __OFADD__(v10, v14))))
  {
    v55 = 0;
    goto LABEL_96;
  }
  if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_19;
  }
  if (v53)
  {
    v17 = *((_DWORD *)v53 + 4);
    v16 = (v17 >> 2) & 1;
    if (v52 && (v17 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v52)
    {
LABEL_18:
      v16 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v16 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v54, (uint64_t)v53, (uint64_t)v52, &v55);
  if (!v55)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v19 = v52;
  v52 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v53;
  v53 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v54;
  v54 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v50 ? (char *)v50 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v57 = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = (uint64_t)v50;
    v50 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v33 = *v31;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v58 = 0;
              WTF::String::String((WTF::String *)&v59, v47);
              v60 = 1;
              WTF::MediaTime::toJSONString(v48);
              v50 = 0;
              v51 = 0;
              v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v51) = 3;
              v50 = v34;
              v35 = HIDWORD(v51);
              *((_DWORD *)v34 + 4 * HIDWORD(v51)) = *(_DWORD *)buf;
              v36 = *(_QWORD *)&v57[4];
              if (*(_QWORD *)&v57[4])
                **(_DWORD **)&v57[4] += 2;
              *((_QWORD *)v34 + 2 * v35 + 1) = v36;
              *((_DWORD *)v34 + 4 * (v35 + 1)) = v58;
              v37 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
              *((_DWORD *)v34 + 4 * (v35 + 2)) = v60;
              v38 = v61;
              if (v61)
                *(_DWORD *)v61 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
              HIDWORD(v51) = v35 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v50);
              v39 = v50;
              if (HIDWORD(v51))
              {
                v40 = 16 * HIDWORD(v51);
                v41 = (WTF::StringImpl **)((char *)v50 + 8);
                do
                {
                  v42 = *v41;
                  *v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  v41 += 2;
                  v40 -= 16;
                }
                while (v40);
                v39 = v50;
              }
              if (v39)
              {
                v50 = 0;
                LODWORD(v51) = 0;
                WTF::fastFree(v39, v24);
              }
              v43 = v61;
              v61 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v59;
              v59 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = *(WTF::StringImpl **)&v57[4];
              *(_QWORD *)&v57[4] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v46 = __ldxr(v26);
          if (v46 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::updateActiveTextTrackCues(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33C59D0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::updateActiveTextTrackCues(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33C59D0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::updateActiveTextTrackCues(WTF::MediaTime const&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::HTMLMediaElement *v4;
  uint64_t v5;
  WTF::Logger::LogSiteIdentifier *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  void *v46;
  __int16 v47;
  __int16 v48;
  _QWORD v49[2];
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint8_t buf[4];
  _BYTE v57[12];
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return result;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v3 = result;
  v4 = *(WebCore::HTMLMediaElement **)(result + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v49[0] = WebCore::HTMLMediaElement::currentMediaTime(v4);
  v49[1] = v5;
  if (*(_BYTE *)(*((_QWORD *)v4 + 228) + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      v7 = (WTF::Logger::LogSiteIdentifier *)(v3 + 24);
      WTF::Logger::LogSiteIdentifier::toString(v7);
      WTF::String::String((WTF::String *)&v53, "lambda(), currentMediaTime: ");
      result = WTF::MediaTime::toJSONString((WTF::MediaTime *)v49);
      if (v54)
      {
        v8 = *((_DWORD *)v54 + 1);
        if (v53)
          goto LABEL_12;
      }
      else
      {
        v8 = 0;
        if (v53)
        {
LABEL_12:
          v9 = *((_DWORD *)v53 + 1);
          if (v52)
          {
LABEL_13:
            v10 = *((_DWORD *)v52 + 1);
LABEL_14:
            if ((v10 | v9) < 0
              || ((v11 = __OFADD__(v9, v10), v12 = v9 + v10, !v11) ? (v13 = 0) : (v13 = 1),
                  v8 < 0 || (v13 & 1) != 0 || (result = (v8 + v12), __OFADD__(v8, v12))))
            {
              v55 = 0;
              goto LABEL_112;
            }
            if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
            {
              v14 = 0;
              goto LABEL_28;
            }
            if (v53)
            {
              v15 = *((_DWORD *)v53 + 4);
              v14 = (v15 >> 2) & 1;
              if (v52 && (v15 & 4) != 0)
                goto LABEL_27;
            }
            else
            {
              if (v52)
              {
LABEL_27:
                v14 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
                goto LABEL_28;
              }
              v14 = 1;
            }
LABEL_28:
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v54, (uint64_t)v53, (uint64_t)v52, &v55);
            if (v55)
            {
              v17 = v52;
              v52 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v16);
                else
                  *(_DWORD *)v17 -= 2;
              }
              v18 = v53;
              v53 = 0;
              if (v18)
              {
                if (*(_DWORD *)v18 == 2)
                  WTF::StringImpl::destroy(v18, v16);
                else
                  *(_DWORD *)v18 -= 2;
              }
              v19 = v54;
              v54 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                  WTF::StringImpl::destroy(v19, v16);
                else
                  *(_DWORD *)v19 -= 2;
              }
              v20 = qword_1ECE7C4A0;
              v21 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v21)
              {
                WTF::String::utf8();
                v23 = v50 ? (char *)v50 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)v57 = v23;
                _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v21 = (uint64_t)v50;
                v50 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 1)
                    v21 = WTF::fastFree((WTF *)v21, v22);
                  else
                    --*(_DWORD *)v21;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              {
                v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v25 = *v24;
                  if ((v25 & 1) != 0)
                    break;
                  v26 = __ldaxr(v24);
                  if (v26 == v25)
                  {
                    if (!__stxr(v25 | 1, v24))
                    {
                      v27 = WTF::Logger::observers((WTF::Logger *)v21);
                      v28 = *(unsigned int *)(v27 + 12);
                      if ((_DWORD)v28)
                      {
                        v29 = *(uint64_t **)v27;
                        v30 = *(_QWORD *)v27 + 8 * v28;
                        do
                        {
                          v31 = *v29;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString(v7);
                          v58 = 0;
                          WTF::String::String((WTF::String *)&v59, "lambda(), currentMediaTime: ");
                          v60 = 1;
                          WTF::MediaTime::toJSONString((WTF::MediaTime *)v49);
                          v50 = 0;
                          v51 = 0;
                          v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v51) = 3;
                          v50 = v32;
                          v33 = HIDWORD(v51);
                          *((_DWORD *)v32 + 4 * HIDWORD(v51)) = *(_DWORD *)buf;
                          v34 = *(_QWORD *)&v57[4];
                          if (*(_QWORD *)&v57[4])
                            **(_DWORD **)&v57[4] += 2;
                          *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                          *((_DWORD *)v32 + 4 * (v33 + 1)) = v58;
                          v35 = v59;
                          if (v59)
                            *(_DWORD *)v59 += 2;
                          *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                          *((_DWORD *)v32 + 4 * (v33 + 2)) = v60;
                          v36 = v61;
                          if (v61)
                            *(_DWORD *)v61 += 2;
                          *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                          HIDWORD(v51) = v33 + 3;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, &WebCore::LogMedia, 3, &v50);
                          v37 = v50;
                          if (HIDWORD(v51))
                          {
                            v38 = 16 * HIDWORD(v51);
                            v39 = (WTF::StringImpl **)((char *)v50 + 8);
                            do
                            {
                              v40 = *v39;
                              *v39 = 0;
                              if (v40)
                              {
                                if (*(_DWORD *)v40 == 2)
                                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                                else
                                  *(_DWORD *)v40 -= 2;
                              }
                              v39 += 2;
                              v38 -= 16;
                            }
                            while (v38);
                            v37 = v50;
                          }
                          if (v37)
                          {
                            v50 = 0;
                            LODWORD(v51) = 0;
                            WTF::fastFree(v37, v22);
                          }
                          v41 = v61;
                          v61 = 0;
                          if (v41)
                          {
                            if (*(_DWORD *)v41 == 2)
                              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                            else
                              *(_DWORD *)v41 -= 2;
                          }
                          v42 = v59;
                          v59 = 0;
                          if (v42)
                          {
                            if (*(_DWORD *)v42 == 2)
                              WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                            else
                              *(_DWORD *)v42 -= 2;
                          }
                          v43 = *(WTF::StringImpl **)&v57[4];
                          *(_QWORD *)&v57[4] = 0;
                          if (v43)
                          {
                            if (*(_DWORD *)v43 == 2)
                              WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                            else
                              *(_DWORD *)v43 -= 2;
                          }
                          ++v29;
                        }
                        while (v29 != (uint64_t *)v30);
                      }
                      v44 = __ldxr(MEMORY[0x1E0CBF890]);
                      if (v44 == 1)
                      {
                        if (!__stlxr(0, MEMORY[0x1E0CBF890]))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v45 = v55;
              v55 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v45 -= 2;
              }
              goto LABEL_93;
            }
LABEL_112:
            __break(0xC471u);
            return result;
          }
LABEL_107:
          v10 = 0;
          goto LABEL_14;
        }
      }
      v9 = 0;
      if (v52)
        goto LABEL_13;
      goto LABEL_107;
    }
  }
LABEL_93:
  result = WebCore::HTMLMediaElement::updateActiveTextTrackCues((uint64_t)v4, (const WTF::MediaTime *)v49);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v47 = *(_WORD *)(v2 + 30);
    if ((v47 & 0x400) == 0)
    {
      v48 = *(_WORD *)(v2 + 28);
      if ((v48 & 0xF000) == 0x9000)
      {
        return (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v2, v46);
      }
      else
      {
        if ((v48 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v47 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v47 | 0x400;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = result[3];
      v8 = 24 * v4;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v4));
      v5[2] = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
      if (v7)
      {
        v10 = result;
        v11 = (WTF *)((char *)v6 + 24 * v7);
        v12 = v6;
        do
        {
          *(_OWORD *)v10 = *(_OWORD *)v12;
          v13 = *((_QWORD *)v12 + 2);
          *((_QWORD *)v12 + 2) = 0;
          *((_QWORD *)v10 + 2) = v13;
          result = (unsigned int *)*((_QWORD *)v12 + 2);
          *((_QWORD *)v12 + 2) = 0;
          if (result)
          {
            if (result[6] == 1)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
            else
              --result[6];
          }
          v12 = (WTF *)((char *)v12 + 24);
          v10 += 6;
        }
        while (v12 != v11);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          v5[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrackCue>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, uint64_t a4)
{
  WTF::JSONImpl::Object *v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::JSONImpl::Object *v28;
  WTF::Logger *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __int128 buf;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v7 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::JSONImpl::Object::create(v7);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 264))(a4, buf);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  if (!v45)
  {
    v9 = 0;
    if (v44)
      goto LABEL_6;
LABEL_80:
    v10 = 0;
    goto LABEL_7;
  }
  v9 = *((_DWORD *)v45 + 1);
  if (!v44)
    goto LABEL_80;
LABEL_6:
  v10 = *((_DWORD *)v44 + 1);
LABEL_7:
  if ((v10 | v9) < 0 || (result = (v9 + v10), __OFADD__(v9, v10)))
  {
    v46 = 0;
    goto LABEL_84;
  }
  if (v45)
  {
    v11 = *((_DWORD *)v45 + 4);
    v12 = (v11 >> 2) & 1;
    if (v44 && (v11 & 4) != 0)
      goto LABEL_12;
  }
  else
  {
    if (v44)
    {
LABEL_12:
      v12 = (*((unsigned __int8 *)v44 + 16) >> 2) & 1;
      goto LABEL_13;
    }
    v12 = 1;
  }
LABEL_13:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v45, (uint64_t)v44, &v46);
  if (!v46)
  {
LABEL_84:
    __break(0xC471u);
    return result;
  }
  v14 = v44;
  v44 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v45;
  v45 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              v28 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString(this);
              v48 = 1;
              WTF::JSONImpl::Object::create(v28);
              (*(void (**)(uint64_t, WTF::Logger *))(*(_QWORD *)a4 + 264))(a4, v42);
              WTF::JSONImpl::Value::toJSONString(v42);
              v29 = v42;
              v42 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v29;
              }
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v48;
              v33 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v49;
              v49 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::speakCueText(WebCore::TextTrackCue &)::$_0,void,WebCore::TextTrackCue const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33C59F8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::speakCueText(WebCore::TextTrackCue &)::$_0,void,WebCore::TextTrackCue const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33C59F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::speakCueText(WebCore::TextTrackCue &)::$_0,void,WebCore::TextTrackCue const&>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  __int16 v4;
  __int16 v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      WebCore::HTMLMediaElement::setSpeechSynthesisState((WebCore::HTMLMediaElement *)v2, 0);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        v4 = *(_WORD *)(v2 + 30);
        if ((v4 & 0x400) == 0)
        {
          v5 = *(_WORD *)(v2 + 28);
          if ((v5 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v2, v3);
          }
          else
          {
            if ((v5 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
              v4 = *(_WORD *)(v2 + 30);
            }
            *(_WORD *)(v2 + 30) = v4 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
          }
        }
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::endIgnoringTrackDisplayUpdateRequests(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(result + 8);
  if (!*(_DWORD *)(v1 + 1392) && (*(_DWORD *)(v1 + 1265) & 0x20) != 0)
  {
    v3[0] = WebCore::HTMLMediaElement::currentMediaTime(*(WebCore::HTMLMediaElement **)(result + 8));
    v3[1] = v2;
    return WebCore::HTMLMediaElement::updateActiveTextTrackCues(v1, (const WTF::MediaTime *)v3);
  }
  return result;
}

_QWORD *WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::treeSearch(_QWORD *a1, WTF::MediaTime *a2)
{
  _QWORD *v2;
  const WTF::MediaTime *v4;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v4 = (WTF::MediaTime *)((char *)a2 + 16);
    do
    {
      if (!WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 4), a2)
        && !WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 6), v4)
        && v2[8] == *((_QWORD *)a2 + 4))
      {
        break;
      }
      if (WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v2 + 4)) != -1
        && (WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 4), a2) == -1
         || WTF::MediaTime::compare(v4, (const WTF::MediaTime *)(v2 + 6)) != -1
         && (WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 6), v4) == -1 || *((_QWORD *)a2 + 4) >= v2[8])))
      {
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::insertNode(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t **v5;
  WTF::MediaTime *v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = a2;
  v4 = *a1;
  if (*a1)
  {
    do
    {
      v5 = (uint64_t **)v4;
      v6 = (WTF::MediaTime *)(v4 + 4);
      v7 = WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 4), (const WTF::MediaTime *)(v4 + 4));
      v8 = v5;
      if (v7 != -1)
      {
        if (WTF::MediaTime::compare(v6, (const WTF::MediaTime *)(v2 + 4)) == -1
          || (v9 = WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 6), (const WTF::MediaTime *)(v5 + 6)),
              v8 = v5,
              v9 != -1)
          && (WTF::MediaTime::compare((WTF::MediaTime *)(v5 + 6), (const WTF::MediaTime *)(v2 + 6)) == -1
           || (v8 = v5, v2[8] >= (unint64_t)v5[8])))
        {
          v8 = v5 + 1;
        }
      }
      v4 = *v8;
    }
    while (v4);
    v2[2] = (uint64_t)v5;
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 4), v6) != -1
      && (WTF::MediaTime::compare(v6, (const WTF::MediaTime *)(v2 + 4)) == -1
       || WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 6), (const WTF::MediaTime *)(v5 + 6)) != -1
       && (WTF::MediaTime::compare((WTF::MediaTime *)(v5 + 6), (const WTF::MediaTime *)(v2 + 6)) == -1
        || v2[8] >= (unint64_t)v5[8])))
    {
      ++v5;
    }
  }
  else
  {
    a2[2] = 0;
    v5 = a1;
  }
  *v5 = v2;
  *((_DWORD *)v2 + 6) = 0;
  v10 = v2 + 6;
  v11 = *v2;
  if (*v2)
  {
    v12 = (uint64_t *)(v11 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 6), (const WTF::MediaTime *)(v11 + 72)) == -1)
      v10 = v12;
  }
  v13 = v2[1];
  if (v13)
  {
    v14 = (uint64_t *)(v13 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)v10, (const WTF::MediaTime *)(v13 + 72)) == -1)
      v10 = v14;
  }
  result = WTF::MediaTime::compare((WTF::MediaTime *)v10, (const WTF::MediaTime *)(v2 + 9));
  if ((_DWORD)result)
  {
    v16 = *v10;
    *(uint64_t *)((char *)v2 + 77) = *(uint64_t *)((char *)v10 + 5);
    v2[9] = v16;
  }
  v18 = v2 + 2;
  v17 = v2[2];
  if (*a1 != v2)
  {
    v19 = (_DWORD *)(v17 + 24);
    if (!*(_DWORD *)(v17 + 24))
    {
      while (1)
      {
        v20 = *(_QWORD *)(v17 + 16);
        v21 = *(_QWORD *)v20;
        if (v17 == *(_QWORD *)v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21 && !*(_DWORD *)(v21 + 24))
          {
LABEL_35:
            *v19 = 1;
            *(_DWORD *)(v21 + 24) = 1;
            *(_DWORD *)(v20 + 24) = 0;
            v25 = v17 + 48;
            v24 = *(_QWORD *)v17;
            if (*(_QWORD *)v17)
            {
              v26 = v24 + 72;
              if (WTF::MediaTime::compare((WTF::MediaTime *)(v17 + 48), (const WTF::MediaTime *)(v24 + 72)) == -1)v25 = v26;
            }
            v27 = *(_QWORD *)(v17 + 8);
            if (v27)
            {
              v28 = v27 + 72;
              if (WTF::MediaTime::compare((WTF::MediaTime *)v25, (const WTF::MediaTime *)(v27 + 72)) == -1)
                v25 = v28;
            }
            v29 = v17 + 72;
            if (WTF::MediaTime::compare((WTF::MediaTime *)v25, (const WTF::MediaTime *)v29))
            {
              v30 = *(_QWORD *)v25;
              *(_QWORD *)(v29 + 5) = *(_QWORD *)(v25 + 5);
              *(_QWORD *)v29 = v30;
            }
            v31 = *(uint64_t **)(*v18 + 16);
            v33 = v31 + 6;
            v32 = *v31;
            if (*v31)
            {
              v34 = (_QWORD *)(v32 + 72);
              if (WTF::MediaTime::compare((WTF::MediaTime *)v33, (const WTF::MediaTime *)(v32 + 72)) == -1)
                v33 = v34;
            }
            v35 = v31[1];
            if (v35)
            {
              v36 = (_QWORD *)(v35 + 72);
              if (WTF::MediaTime::compare((WTF::MediaTime *)v33, (const WTF::MediaTime *)(v35 + 72)) == -1)
                v33 = v36;
            }
            result = WTF::MediaTime::compare((WTF::MediaTime *)v33, (const WTF::MediaTime *)(v31 + 9));
            if ((_DWORD)result)
            {
              v37 = *v33;
              *(uint64_t *)((char *)v31 + 77) = *(_QWORD *)((char *)v33 + 5);
              v31[9] = v37;
            }
            v2 = v31;
            goto LABEL_57;
          }
          if (v2 == *(uint64_t **)(v17 + 8))
          {
            WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::leftRotate(a1, (uint64_t *)v17);
            v23 = *(_QWORD *)(v17 + 16);
            v20 = *(_QWORD *)(v23 + 16);
            v2 = (uint64_t *)v17;
          }
          else
          {
            v23 = v17;
          }
          *(_DWORD *)(v23 + 24) = 1;
          *(_DWORD *)(v20 + 24) = 0;
          result = (uint64_t)WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::rightRotate(a1, (uint64_t *)v20);
        }
        else
        {
          if (v21 && !*(_DWORD *)(v21 + 24))
            goto LABEL_35;
          if (v2 == *(uint64_t **)v17)
          {
            WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::rightRotate(a1, (uint64_t *)v17);
            v22 = *(_QWORD *)(v17 + 16);
            v20 = *(_QWORD *)(v22 + 16);
            v2 = (uint64_t *)v17;
          }
          else
          {
            v22 = v17;
          }
          *(_DWORD *)(v22 + 24) = 1;
          *(_DWORD *)(v20 + 24) = 0;
          result = (uint64_t)WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::leftRotate(a1, (uint64_t *)v20);
        }
        v31 = (uint64_t *)result;
LABEL_57:
        v38 = v31[2];
        if (v2 == *a1)
          goto LABEL_61;
        v18 = v2 + 2;
        v17 = v2[2];
        v19 = (_DWORD *)(v17 + 24);
        if (*(_DWORD *)(v17 + 24))
        {
          v2 = *a1;
          goto LABEL_61;
        }
      }
    }
    goto LABEL_62;
  }
  v38 = v2[2];
LABEL_61:
  v17 = v38;
  if (v38)
  {
    do
    {
LABEL_62:
      v40 = v17 + 48;
      v39 = *(_QWORD *)v17;
      if (*(_QWORD *)v17)
      {
        v41 = v39 + 72;
        if (WTF::MediaTime::compare((WTF::MediaTime *)(v17 + 48), (const WTF::MediaTime *)(v39 + 72)) == -1)
          v40 = v41;
      }
      v42 = *(_QWORD *)(v17 + 8);
      if (v42)
      {
        v43 = v42 + 72;
        if (WTF::MediaTime::compare((WTF::MediaTime *)v40, (const WTF::MediaTime *)(v42 + 72)) == -1)
          v40 = v43;
      }
      result = WTF::MediaTime::compare((WTF::MediaTime *)v40, (const WTF::MediaTime *)(v17 + 72));
      if (!(_DWORD)result)
        break;
      v44 = *(_QWORD *)v40;
      *(_QWORD *)(v17 + 77) = *(_QWORD *)(v40 + 5);
      *(_QWORD *)(v17 + 72) = v44;
      v17 = *(_QWORD *)(v17 + 16);
    }
    while (v17);
    v2 = *a1;
  }
  *((_DWORD *)v2 + 6) = 1;
  return result;
}

uint64_t *WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::leftRotate(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = (uint64_t *)a2[1];
  v4 = *v3;
  a2[1] = *v3;
  if (v4)
    *(_QWORD *)(v4 + 16) = a2;
  v3[2] = a2[2];
  v5 = (uint64_t **)a2[2];
  if (v5)
  {
    if (*v5 == a2)
      a1 = (uint64_t **)a2[2];
    else
      a1 = v5 + 1;
  }
  *a1 = v3;
  *v3 = (uint64_t)a2;
  a2[2] = (uint64_t)v3;
  v6 = a2 + 6;
  v7 = *a2;
  if (*a2)
  {
    v8 = (_QWORD *)(v7 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)(a2 + 6), (const WTF::MediaTime *)(v7 + 72)) == -1)
      v6 = v8;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = (_QWORD *)(v9 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)v6, (const WTF::MediaTime *)(v9 + 72)) == -1)
      v6 = v10;
  }
  v11 = a2 + 9;
  if (WTF::MediaTime::compare((WTF::MediaTime *)v6, (const WTF::MediaTime *)v11))
  {
    v12 = *v6;
    *(_QWORD *)((char *)v11 + 5) = *(_QWORD *)((char *)v6 + 5);
    *v11 = v12;
  }
  v14 = v3 + 6;
  v13 = *v3;
  if (*v3)
  {
    v15 = (_QWORD *)(v13 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 6), (const WTF::MediaTime *)(v13 + 72)) == -1)
      v14 = v15;
  }
  v16 = v3[1];
  if (v16)
  {
    v17 = (_QWORD *)(v16 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)v14, (const WTF::MediaTime *)(v16 + 72)) == -1)
      v14 = v17;
  }
  if (WTF::MediaTime::compare((WTF::MediaTime *)v14, (const WTF::MediaTime *)(v3 + 9)))
  {
    v18 = *v14;
    *(uint64_t *)((char *)v3 + 77) = *(_QWORD *)((char *)v14 + 5);
    v3[9] = v18;
  }
  return v3;
}

uint64_t *WebCore::PODRedBlackTree<WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>,WebCore::PODIntervalNodeUpdater>::rightRotate(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = (uint64_t *)*a2;
  v4 = *(uint64_t **)(*a2 + 8);
  *a2 = (uint64_t)v4;
  if (v4)
    v4[2] = (uint64_t)a2;
  v3[2] = a2[2];
  v5 = (uint64_t **)a2[2];
  if (v5)
  {
    if (*v5 == a2)
    {
      *v5 = v3;
      v4 = (uint64_t *)*a2;
    }
    else
    {
      v5[1] = v3;
    }
  }
  else
  {
    *a1 = v3;
  }
  v3[1] = (uint64_t)a2;
  a2[2] = (uint64_t)v3;
  v6 = a2 + 6;
  if (v4)
  {
    v7 = v4 + 9;
    if (WTF::MediaTime::compare((WTF::MediaTime *)(a2 + 6), (const WTF::MediaTime *)(v4 + 9)) == -1)
      v6 = v7;
  }
  v8 = a2[1];
  if (v8)
  {
    v9 = (_QWORD *)(v8 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)v6, (const WTF::MediaTime *)(v8 + 72)) == -1)
      v6 = v9;
  }
  v10 = a2 + 9;
  if (WTF::MediaTime::compare((WTF::MediaTime *)v6, (const WTF::MediaTime *)v10))
  {
    v11 = *v6;
    *(_QWORD *)((char *)v10 + 5) = *(_QWORD *)((char *)v6 + 5);
    *v10 = v11;
  }
  v13 = v3 + 6;
  v12 = *v3;
  if (*v3)
  {
    v14 = (_QWORD *)(v12 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 6), (const WTF::MediaTime *)(v12 + 72)) == -1)
      v13 = v14;
  }
  v15 = v3[1];
  if (v15)
  {
    v16 = (_QWORD *)(v15 + 72);
    if (WTF::MediaTime::compare((WTF::MediaTime *)v13, (const WTF::MediaTime *)(v15 + 72)) == -1)
      v13 = v16;
  }
  if (WTF::MediaTime::compare((WTF::MediaTime *)v13, (const WTF::MediaTime *)(v3 + 9)))
  {
    v17 = *v13;
    *(uint64_t *)((char *)v3 + 77) = *(_QWORD *)((char *)v13 + 5);
    v3[9] = v17;
  }
  return v3;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::URL,char [46]>(WTF::Logger::LogSiteIdentifier *a1, const char *a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint8_t buf[4];
  _BYTE v49[12];
  int v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53[3];

  v53[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = WTF::String::String((WTF::String *)&v44, a2);
  if (v46)
  {
    v5 = *((_DWORD *)v46 + 1);
    if (v45)
      goto LABEL_3;
LABEL_91:
    v6 = 0;
    if (v44)
      goto LABEL_4;
LABEL_92:
    v7 = 0;
    goto LABEL_5;
  }
  v5 = 0;
  if (!v45)
    goto LABEL_91;
LABEL_3:
  v6 = *((_DWORD *)v45 + 1);
  if (!v44)
    goto LABEL_92;
LABEL_4:
  v7 = *((_DWORD *)v44 + 1);
LABEL_5:
  if ((v7 | v6) < 0
    || ((v8 = __OFADD__(v6, v7), v9 = v6 + v7, !v8) ? (v10 = 0) : (v10 = 1),
        v5 < 0 || (v10 & 1) != 0 || (result = (v5 + v9), __OFADD__(v5, v9))))
  {
    v47 = 0;
    goto LABEL_96;
  }
  if (v46 && (*((_BYTE *)v46 + 16) & 4) == 0)
  {
    v11 = 0;
    goto LABEL_19;
  }
  if (v45)
  {
    v12 = *((_DWORD *)v45 + 4);
    v11 = (v12 >> 2) & 1;
    if (v44 && (v12 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v44)
    {
LABEL_18:
      v11 = (*((unsigned __int8 *)v44 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v11 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, v46, (uint64_t)v45, (uint64_t)v44, &v47);
  if (!v47)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v14 = v44;
  v44 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v45;
  v45 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v46;
  v46 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = qword_1ECE7C4A0;
  v18 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v42 ? (char *)v42 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v49 = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v18 = (uint64_t)v42;
    v42 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v50 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v52 = 0;
              WTF::String::String((WTF::String *)v53, a2);
              v42 = 0;
              v43 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v43) = 3;
              v42 = v29;
              v30 = HIDWORD(v43);
              *((_DWORD *)v29 + 4 * HIDWORD(v43)) = *(_DWORD *)buf;
              v31 = *(_QWORD *)&v49[4];
              if (*(_QWORD *)&v49[4])
                **(_DWORD **)&v49[4] += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v50;
              v32 = v51;
              if (v51)
                *(_DWORD *)v51 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              *((_DWORD *)v29 + 4 * (v30 + 2)) = v52;
              v33 = v53[0];
              if (v53[0])
                *(_DWORD *)v53[0] += 2;
              *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
              HIDWORD(v43) = v30 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, 1, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v19);
              }
              v38 = v53[0];
              v53[0] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v51;
              v51 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = *(WTF::StringImpl **)&v49[4];
              *(_QWORD *)&v49[4] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v41 = __ldxr(v21);
          if (v41 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  BOOL v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v20;
  int v21;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  char v34;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E33C6038;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v32[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v32);
      v13 = v32[0];
      v32[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v32[0] = v5;
    v14 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
    if (*v14)
      v15 = v14[16] >= 4u;
    else
      v15 = 0;
    if (v15)
      WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v14, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v32, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return;
  }
  v16 = *a3;
  v17 = __ldxr(*a3);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v16))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  v18 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v20 = *(_DWORD *)(a2 + 80);
  v21 = __ldxr(v18);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v18))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v20 != 2)
  {
    if (__ldaxr(v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 80) != 1)
      goto LABEL_65;
    LOBYTE(v32[0]) = 0;
    v33 = -1;
    v25 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v25 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E33C5A38[v25])(&v34, v32, a2 + 56);
      v33 = v25;
    }
    v26 = __ldxr(v18);
    if (v26 == 1)
    {
      if (!__stlxr(0, v18))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
        if (v33 != -1)
          ((void (*)(char *, _QWORD *))off_1E33C5118[v33])(&v34, v32);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
LABEL_65:
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11ContentTypeENS8_18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(v28, v29, v30);
    return;
  }
  v31 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v18);
  if (v24 == 1)
  {
    if (!__stlxr(0, v18))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v31 + 16))(v32, v31);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
  if (v33 != -1)
    ((void (*)(char *, _QWORD *))off_1E33C5118[v33])(&v34, v32);
  v33 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_60:
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, *a3))
  {
    return;
  }
  MEMORY[0x19AEA534C]();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11ContentTypeENS8_18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore11ContentTypeENS8_18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E33C6038;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33C6038;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::ContentType,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];
  int v20;
  char v21;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v19[0] = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v19, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v19, v15);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
      if (v20 != -1)
        ((void (*)(char *, _QWORD *))off_1E33C5118[v20])(&v21, v19);
      v20 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x195C4A2F0);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 80) != 1)
    goto LABEL_46;
  LOBYTE(v19[0]) = 0;
  v20 = -1;
  v17 = *(unsigned int *)(v10 + 72);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E33C5A38[v17])(&v21, v19, v10 + 56);
    v20 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v19);
  if (v20 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E33C5118[v20])(&v21, v19);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::mediaPlayerReadyStateChanged(void)::$_0,void>::call(uint64_t a1)
{
  WebCore::HTMLMediaElement::mediaPlayerReadyStateChanged(*(WebCore::HTMLMediaElement **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setMediaKeys(WebCore::MediaKeys *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WebCore::MediaKeys *v4;
  WTF *v6;
  void *v7;

  *a1 = &off_1E33C5A80;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::MediaKeys *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 4) == 1)
    {
      WebCore::MediaKeys::~MediaKeys(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setMediaKeys(WebCore::MediaKeys *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WebCore::MediaKeys *v4;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &off_1E33C5A80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::MediaKeys *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 4) == 1)
    {
      WebCore::MediaKeys::~MediaKeys(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setMediaKeys(WebCore::MediaKeys *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  _DWORD *v17;
  uint64_t (**v18)();
  uint64_t v19;
  int v20;
  uint64_t (***v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  WTF *v30;
  void *v31;
  uint64_t v32[3];

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 120);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || *(_BYTE *)(v4 + 180))
    return result;
  v5 = result;
  v6 = *(_QWORD *)(v2 + 1584);
  if (v6)
  {
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v6 + 72, (_QWORD *)(v2 + 272));
    v7 = *(_QWORD *)(v2 + 1136);
    if (v7)
    {
      v8 = *(unsigned __int8 **)v7;
      if (__ldaxr(*(unsigned __int8 **)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, v8))
      {
        goto LABEL_10;
      }
      MEMORY[0x19AEA534C](v8);
LABEL_10:
      ++*((_QWORD *)v8 + 1);
      v10 = __ldxr(v8);
      if (v10 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_15:
      v11 = *(_DWORD **)(*(_QWORD *)(v2 + 1584) + 48);
      ++v11[2];
      (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(v7 + 72) + 952))(*(_QWORD *)(v7 + 72), v11);
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
    }
  }
  v12 = *(_QWORD *)(v5 + 16);
  if (v12)
  {
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v12 + 72, (_QWORD *)(v2 + 272), (uint64_t)v32);
    v13 = *(_QWORD *)(v2 + 1136);
    if (!v13)
      goto LABEL_32;
    v14 = *(unsigned __int8 **)v13;
    if (__ldaxr(*(unsigned __int8 **)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v14);
LABEL_24:
    ++*((_QWORD *)v14 + 1);
    v16 = __ldxr(v14);
    if (v16 == 1)
    {
      if (!__stlxr(0, v14))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_29:
    v17 = *(_DWORD **)(*(_QWORD *)(v5 + 16) + 48);
    ++v17[2];
    (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(v13 + 72) + 944))(*(_QWORD *)(v13 + 72), v17);
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v13);
LABEL_32:
    v18 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v18 = (uint64_t (*)())off_1E33C5AA8;
    v18[1] = (uint64_t (*)())v2;
    v19 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    v20 = *(_DWORD *)(v2 + 24);
    *(_QWORD *)(v19 + 8) = v2;
    ++*(_QWORD *)(v2 + 128);
    *(_DWORD *)(v2 + 24) = v20 + 4;
    v21 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v21 = &off_1E33C5820;
    v21[1] = (uint64_t (**)())v2;
    v21[2] = (uint64_t (**)())v19;
    v21[3] = v18;
    v32[0] = (uint64_t)v21;
    v22 = *(_QWORD *)(v2 + 120);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 - 96) + 104))(v23 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v24, 9, v32);
        v21 = (uint64_t (***)())v32[0];
        v32[0] = 0;
        if (!v21)
          goto LABEL_39;
      }
      else
      {
        v32[0] = 0;
      }
      v25 = *v21;
    }
    else
    {
      v32[0] = 0;
      v25 = &off_1E33C5820;
    }
    v25[1]();
LABEL_39:
    v12 = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)(v5 + 16) = 0;
  result = *(_QWORD *)(v2 + 1584);
  *(_QWORD *)(v2 + 1584) = v12;
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1)
    {
      WebCore::MediaKeys::~MediaKeys((WebCore::MediaKeys *)result, a2);
      result = WTF::fastFree(v30, v31);
    }
    else
    {
      --*(_DWORD *)(result + 16);
    }
  }
  *(_BYTE *)(v2 + 1592) = 0;
  v26 = *(_QWORD *)(v5 + 24);
  v27 = *(_QWORD *)(v26 + 24);
  if (v27 && *(_QWORD *)v27 && (*(_BYTE *)(v27 + 8) & 3) == 0)
  {
    v28 = *(_QWORD *)(v26 + 32);
    if (!v28 || (*(_BYTE *)(v28 + 8) & 3) != 0)
      v29 = 0;
    else
      v29 = *(uint64_t **)v28;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v26, v29, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v32);
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setMediaKeys(WebCore::MediaKeys *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v2;
  uint64_t v3;

  result = *(unsigned __int8 **)(a1 + 8);
  v2 = *((_QWORD *)result + 15);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
      {
        if (result[1593])
          return WebCore::HTMLMediaElement::attemptToDecrypt(result);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::progressEventTimerFired(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33C5AD0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::progressEventTimerFired(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33C5AD0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::progressEventTimerFired(void)::$_0,void,BOOL>::call(unsigned int *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  void *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  __int16 v26;
  __int16 v27;
  _DWORD *v28;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *((_QWORD *)result + 1);
      *(_DWORD *)(v3 + 24) += 2;
      result = (unsigned int *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      v8 = v7;
      if (a2)
      {
        v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
          v10 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v11 = *(_QWORD *)(v10 + 40);
        if (!v11)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
          v11 = *(_QWORD *)(v10 + 40);
        }
        v12 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
        *(_DWORD *)(v12 + 16) = 1;
        *(_QWORD *)v12 = off_1E33A4B48;
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v11 + 1584) != 0);
        v14 = *(_DWORD **)(v11 + 1584);
        if (v14)
          *v14 += 2;
        *(_QWORD *)(v12 + 24) = v14;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        *(_QWORD *)(v12 + 48) = 0;
        *(_QWORD *)(v12 + 56) = v13;
        *(_QWORD *)(v12 + 64) = 0;
        v28 = (_DWORD *)v12;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v5 + 112), v5, 9, v5 + 824, (uint64_t *)&v28);
        v16 = v28;
        v28 = 0;
        if (v16)
        {
          if (v16[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[4];
        }
        *(double *)(v5 + 1016) = v8;
        v17 = *(unsigned int *)(v5 + 1265);
        if ((v17 & 0x10000) != 0)
        {
          v18 = v17 & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)*(unsigned __int16 *)(v5 + 1269) << 32);
          *(_DWORD *)(v5 + 1265) = v17 & 0xFFFEFFFF;
          *(_WORD *)(v5 + 1269) = WORD2(v18);
          WebCore::HTMLMediaElement::updateStalledState((WebCore::HTMLMediaElement *)v5);
        }
        result = (unsigned int *)WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)v5, v15);
      }
      else if (v7 - *(double *)(v5 + 1016) > 3.0 && (*(_DWORD *)(v5 + 1265) & 0x10000) == 0)
      {
        v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
          v20 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v21 = *(_QWORD *)(v20 + 40);
        if (!v21)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
          v21 = *(_QWORD *)(v20 + 40);
        }
        v22 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
        *(_DWORD *)(v22 + 16) = 1;
        *(_QWORD *)v22 = off_1E33A4B48;
        *(_QWORD *)(v22 + 8) = 0;
        *(_DWORD *)(v22 + 20) = *(_DWORD *)(v22 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v21 + 1952) != 0);
        v24 = *(_DWORD **)(v21 + 1952);
        if (v24)
          *v24 += 2;
        *(_QWORD *)(v22 + 24) = v24;
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v22 + 56) = v23;
        *(_QWORD *)(v22 + 64) = 0;
        v28 = (_DWORD *)v22;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v5 + 112), v5, 9, v5 + 824, (uint64_t *)&v28);
        v25 = v28;
        v28 = 0;
        if (v25)
        {
          if (v25[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
          else
            --v25[4];
        }
        *(_DWORD *)(v5 + 1265) |= 0x10000u;
        WebCore::HTMLMediaElement::updateStalledState((WebCore::HTMLMediaElement *)v5);
        result = WebCore::HTMLMediaElement::setShouldDelayLoadEvent((unsigned int *)v5, 0);
      }
      if (*(_DWORD *)(v3 + 24) == 2)
      {
        v26 = *(_WORD *)(v3 + 30);
        if ((v26 & 0x400) == 0)
        {
          v27 = *(_WORD *)(v3 + 28);
          if ((v27 & 0xF000) == 0x9000)
          {
            return WebCore::Document::removedLastRef((WebCore::Document *)v3, v6);
          }
          else
          {
            if ((v27 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
              v26 = *(_WORD *)(v3 + 30);
            }
            *(_WORD *)(v3 + 30) = v26 | 0x400;
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
          }
        }
      }
      else
      {
        *(_DWORD *)(v3 + 24) -= 2;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setAudioOutputDevice(WTF::String &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  __int16 v7;
  __int16 v8;

  *a1 = &off_1E33C5AF8;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v7 = *(_WORD *)(v5 + 30);
      if ((v7 & 0x400) == 0)
      {
        v8 = *(_WORD *)(v5 + 28);
        if ((v8 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
        }
        else
        {
          if ((v8 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v7 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v7 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setAudioOutputDevice(WTF::String &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  __int16 v7;
  __int16 v8;

  *(_QWORD *)this = &off_1E33C5AF8;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v7 = *(_WORD *)(v5 + 30);
      if ((v7 & 0x400) == 0)
      {
        v8 = *(_WORD *)(v5 + 28);
        if ((v8 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
        }
        else
        {
          if ((v8 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v7 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v7 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setAudioOutputDevice(WTF::String &&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void>::call(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE v10[8];

  v3 = a1[1];
  v4 = a1[3];
  a1[3] = 0;
  result = *(WTF::StringImpl **)(v3 + 1712);
  *(_QWORD *)(v3 + 1712) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = a1[4];
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
  {
    v8 = *(_QWORD *)(v6 + 32);
    if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
      v9 = 0;
    else
      v9 = *(uint64_t **)v8;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v6, v9, 0, (objc_class *)0xA);
    return (WTF::StringImpl *)MEMORY[0x19AEA32A0](v10);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::finishSeek(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(result + 8);
  if (!*(_DWORD *)(v1 + 1392) && (*(_DWORD *)(v1 + 1265) & 0x20) != 0)
  {
    v3[0] = WebCore::HTMLMediaElement::currentMediaTime(*(WebCore::HTMLMediaElement **)(result + 8));
    v3[1] = v2;
    return WebCore::HTMLMediaElement::updateActiveTextTrackCues(v1, (const WTF::MediaTime *)v3);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::AtomString>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *this, uint64_t *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 buf;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString(this);
  v10 = *a4;
  if (*a4)
    *(_DWORD *)v10 += 2;
  if (v44)
  {
    v11 = *((_DWORD *)v44 + 1);
    if (v10)
    {
LABEL_5:
      v12 = *(_DWORD *)(v10 + 4);
      goto LABEL_6;
    }
  }
  else
  {
    v11 = 0;
    if (v10)
      goto LABEL_5;
  }
  v12 = 0;
LABEL_6:
  if ((v12 | v11) < 0)
    goto LABEL_84;
  v13 = (v11 + v12);
  if (__OFADD__(v11, v12))
    goto LABEL_84;
  if (v44)
  {
    v14 = *((_DWORD *)v44 + 4);
    v15 = (v14 >> 2) & 1;
    if (!v10 || (v14 & 4) == 0)
    {
LABEL_12:
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, v15, (uint64_t)v44, v10, &v45);
      if (v45)
      {
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        goto LABEL_16;
      }
LABEL_85:
      __break(0xC471u);
      return result;
    }
LABEL_11:
    v15 = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
    goto LABEL_12;
  }
  if (v10)
    goto LABEL_11;
  if (!(_DWORD)v13)
  {
    v41 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_82;
  }
  if ((v13 & 0x80000000) != 0
    || (result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v13 + 20)), (v41 = buf) == 0))
  {
LABEL_84:
    v45 = 0;
    goto LABEL_85;
  }
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v41 + 4) = v13;
  *(_QWORD *)(v41 + 8) = v41 + 20;
  *(_DWORD *)(v41 + 16) = 4;
LABEL_82:
  v45 = (WTF::StringImpl *)v41;
LABEL_16:
  v16 = v44;
  v44 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(NSObject **)(a1 + 32);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v42 ? (char *)v42 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v18 = (uint64_t)v42;
    v42 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v47 = 0;
              v29 = (WTF::StringImpl *)*a4;
              if (*a4)
                *(_DWORD *)v29 += 2;
              v48 = v29;
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v47;
              v33 = v48;
              if (v48)
                *(_DWORD *)v48 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v19);
              }
              v38 = v48;
              v48 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v40 = __ldxr(v21);
          if (v40 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setVolume(double)::$_0,void>::call(uint64_t a1)
{
  double result;

  result = *(double *)(a1 + 16);
  *(double *)(*(_QWORD *)(a1 + 8) + 984) = result;
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  size_t v48;
  _BYTE *v49;
  _BYTE *v50;
  unsigned __int128 v51;
  char v52;
  WTF::Logger *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  __int128 buf;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v57, a4);
  result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = (WTF::StringImpl *)buf;
  v9 = v58;
  if (v58)
  {
    v10 = *((_DWORD *)v58 + 1);
    if (v57)
      goto LABEL_3;
LABEL_91:
    v11 = 0;
    if ((_QWORD)buf)
      goto LABEL_4;
LABEL_92:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!v57)
    goto LABEL_91;
LABEL_3:
  v11 = *((_DWORD *)v57 + 1);
  if (!(_QWORD)buf)
    goto LABEL_92;
LABEL_4:
  v12 = *(_DWORD *)(buf + 4);
LABEL_5:
  if ((v12 | v11) < 0)
    goto LABEL_112;
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  v15 = v13;
  if (v10 < 0)
    goto LABEL_112;
  if (v15)
    goto LABEL_112;
  v16 = (v10 + v14);
  if (__OFADD__(v10, v14))
    goto LABEL_112;
  if (v58 && (*((_BYTE *)v58 + 16) & 4) == 0)
  {
    v17 = 0;
    goto LABEL_19;
  }
  if (v57)
  {
    v18 = *((_DWORD *)v57 + 4);
    v17 = (v18 >> 2) & 1;
    if (!(_QWORD)buf || (v18 & 4) == 0)
    {
LABEL_19:
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v17, v58, (uint64_t)v57, buf, &v59);
      if (v59)
      {
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
        goto LABEL_23;
      }
LABEL_113:
      __break(0xC471u);
      return result;
    }
LABEL_18:
    v17 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
    goto LABEL_19;
  }
  if ((_QWORD)buf)
    goto LABEL_18;
  if ((_DWORD)v16)
  {
    if ((v16 & 0x80000000) == 0)
    {
      result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
      v46 = buf;
      if ((_QWORD)buf)
      {
        v47 = (_BYTE *)(buf + 20);
        *(_DWORD *)buf = 2;
        *(_DWORD *)(v46 + 4) = v16;
        *(_QWORD *)(v46 + 8) = v46 + 20;
        *(_DWORD *)(v46 + 16) = 4;
        if (v9)
        {
          v7 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          v48 = *((unsigned int *)v9 + 1);
          if ((*((_BYTE *)v9 + 16) & 4) != 0)
          {
            if ((_DWORD)v48)
            {
              if ((_DWORD)v48 == 1)
                *v47 = *(_BYTE *)v7;
              else
                memcpy(v47, v7, v48);
            }
          }
          else
          {
            v49 = &v47[v48];
            if (v48 >= 0x10)
            {
              v50 = &v47[v48 & 0xFFFFFFF0];
              do
              {
                v51 = (unsigned __int128)vld2q_s8((const char *)v7);
                v7 = (WTF::StringImpl *)((char *)v7 + 32);
                *(_OWORD *)v47 = v51;
                v47 += 16;
              }
              while (v47 != v50);
              v47 = v50;
            }
            while (v47 != v49)
            {
              v52 = *(_BYTE *)v7;
              v7 = (WTF::StringImpl *)((char *)v7 + 2);
              *v47++ = v52;
            }
          }
        }
        goto LABEL_102;
      }
    }
LABEL_112:
    v59 = 0;
    goto LABEL_113;
  }
  v46 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_102:
  v59 = (WTF::StringImpl *)v46;
LABEL_23:
  v19 = v57;
  v57 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v7);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v58;
  v58 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v7);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v55 ? (char *)v55 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v55;
    v55 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v61 = 0;
              WTF::String::String((WTF::String *)&v62, a4);
              v63 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v64 = v55;
              v55 = 0;
              v56 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v56) = 3;
              v55 = v33;
              v34 = HIDWORD(v56);
              *((_DWORD *)v33 + 4 * HIDWORD(v56)) = buf;
              v35 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v61;
              v36 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v63;
              v37 = v64;
              if (v64)
                *(_DWORD *)v64 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v56) = v34 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, a1, a2, &v55);
              v38 = v55;
              if (HIDWORD(v56))
              {
                v39 = 16 * HIDWORD(v56);
                v40 = (WTF::StringImpl **)((char *)v55 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v55;
              }
              if (v38)
              {
                v55 = 0;
                LODWORD(v56) = 0;
                WTF::fastFree(v38, v23);
              }
              v42 = v64;
              v64 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v62;
              v62 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v45 = __ldxr(v25);
          if (v45 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v59;
  v59 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::updateCaptionContainer(void)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::call(uint64_t a1, JSC::JSGlobalObject *a2, WebCore *this, WebCore::HTMLMediaElement *a4)
{
  uint64_t v5;
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  char hasExceptionsAfterHandlingTraps;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  _QWORD v27[3];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v7 = WebCore::controllerJSValue(this, a2, (WebCore::JSDOMGlobalObject *)v5, a4);
  v8 = v7;
  if (*((_DWORD *)v6 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || (v8 & 0xFFFE000000000002) != 0)
      return result;
  }
  else if ((v7 & 0xFFFE000000000002) != 0)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(v8 + 5) < 0x17u)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get((JSC::Structure *)v8, this, (unint64_t)v22);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v9);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (!*((_DWORD *)v6 + 20))
  {
    if ((v10 & 0xFFFE000000000002) == 0)
      goto LABEL_9;
    return 0;
  }
  v17 = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
  result = 0;
  if ((v17 & 1) != 0 || (v10 & 0xFFFE000000000002) != 0)
    return result;
LABEL_9:
  v11 = *(unsigned __int8 *)(v10 + 5);
  if (v11 < 0x17)
    return 0;
  if (v11 == 26)
    JSC::JSFunction::getCallData((JSC::JSFunction *)v10, (JSCell *)v9);
  else
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v27, v10);
  if (!LOBYTE(v27[0]))
    return 0;
  LOBYTE(v22) = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v20 = (uint64_t *)v25 + 1;
  v21 = 0;
  JSC::call();
  if (*((_DWORD *)v6 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    *(_DWORD *)(v5 + 1265) |= 0x40000000u;
    result = 1;
  }
  v14 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v20 = &v23;
    v18 = result;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v14, v19);
    result = v18;
  }
  if (v24 != (WTF *)((char *)v25 + 8))
  {
    if (v24)
    {
      v15 = result;
      WTF::fastFree(v24, v12);
      return v15;
    }
  }
  return result;
}

WebCore *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::layoutSizeChanged(void)::$_0,void>::call(WebCore *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::MediaControlsHost *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Event *v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  _DWORD *v16;
  WTF *v17;
  void *v18;
  __int16 v19;
  __int16 v20;

  v2 = (_QWORD *)*((_QWORD *)result + 1);
  v3 = v2[15];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 180))
      {
        if ((v2[9] & 0xFFFFFFFFFFFFLL) != 0)
        {
          v7 = *(_QWORD *)((v2[9] & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v7)
          {
            *(_DWORD *)(v7 + 24) += 2;
            v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
              v9 = WebCore::threadGlobalDataSlow(result);
            v10 = *(_QWORD *)(v9 + 40);
            if (!v10)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
              v10 = *(_QWORD *)(v9 + 40);
            }
            v11 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
            *(_QWORD *)v11 = off_1E33A4B48;
            *(_QWORD *)(v11 + 8) = 0;
            v14 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200;
            v15 = *(_QWORD *)(v10 + 1696) != 0;
            *(_DWORD *)(v11 + 16) = 1;
            *(_DWORD *)(v11 + 20) = v14 | v15;
            v16 = *(_DWORD **)(v10 + 1696);
            if (v16)
              *v16 += 2;
            *(_QWORD *)(v11 + 24) = v16;
            *(_QWORD *)(v11 + 32) = 0;
            *(_QWORD *)(v11 + 40) = 0;
            *(_QWORD *)(v11 + 48) = 0;
            *(_QWORD *)(v11 + 56) = v13;
            *(_QWORD *)(v11 + 64) = 0;
            result = (WebCore *)WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v7, (WebCore::Node *)v11, v12);
            if (*(_DWORD *)(v11 + 16) == 1)
              result = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            else
              --*(_DWORD *)(v11 + 16);
            if (*(_DWORD *)(v7 + 24) == 2)
            {
              v19 = *(_WORD *)(v7 + 30);
              if ((v19 & 0x400) == 0)
              {
                v20 = *(_WORD *)(v7 + 28);
                if ((v20 & 0xF000) == 0x9000)
                {
                  result = (WebCore *)WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
                }
                else
                {
                  if ((v20 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
                    v19 = *(_WORD *)(v7 + 30);
                  }
                  *(_WORD *)(v7 + 30) = v19 | 0x400;
                  result = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
                }
              }
            }
            else
            {
              *(_DWORD *)(v7 + 24) -= 2;
            }
          }
        }
        v5 = (WebCore::MediaControlsHost *)v2[202];
        if (v5)
        {
          v6 = (*(_DWORD *)v5)++;
          result = (WebCore *)*((_QWORD *)v5 + 3);
          if (result)
          {
            result = WebCore::MediaControlTextTrackContainerElement::updateSizes(result, 0);
            v6 = *(_DWORD *)v5 - 1;
          }
          if (v6)
          {
            *(_DWORD *)v5 = v6;
          }
          else
          {
            WebCore::MediaControlsHost::~MediaControlsHost(v5, a2);
            return (WebCore *)WTF::fastFree(v17, v18);
          }
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleConfigureTextTracks(void)::$_0,void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int *result;
  void *v4;
  __int16 v5;
  __int16 v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 16), "lambda(), task fired");
  *(_DWORD *)(v2 + 24) += 2;
  result = WebCore::HTMLMediaElement::configureTextTracks((WebCore::HTMLMediaElement *)v2, a2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v5 = *(_WORD *)(v2 + 30);
    if ((v5 & 0x400) == 0)
    {
      v6 = *(_WORD *)(v2 + 28);
      if ((v6 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v2, v4);
      }
      else
      {
        if ((v6 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v5 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v5 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WTF::URL>(WTF::Logger::LogSiteIdentifier *a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  char v8;
  int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint8_t buf[4];
  _BYTE v47[12];
  int v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v43, "'src' is ");
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v44)
  {
    v3 = *((_DWORD *)v44 + 1);
    if (v43)
      goto LABEL_3;
LABEL_91:
    v4 = 0;
    if (v42)
      goto LABEL_4;
LABEL_92:
    v5 = 0;
    goto LABEL_5;
  }
  v3 = 0;
  if (!v43)
    goto LABEL_91;
LABEL_3:
  v4 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_92;
LABEL_4:
  v5 = *((_DWORD *)v42 + 1);
LABEL_5:
  if ((v5 | v4) < 0
    || ((v6 = __OFADD__(v4, v5), v7 = v4 + v5, !v6) ? (v8 = 0) : (v8 = 1),
        v3 < 0 || (v8 & 1) != 0 || (result = (v3 + v7), __OFADD__(v3, v7))))
  {
    v45 = 0;
    goto LABEL_96;
  }
  if (v44 && (*((_BYTE *)v44 + 16) & 4) == 0)
  {
    v9 = 0;
    goto LABEL_19;
  }
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v9 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v42)
    {
LABEL_18:
      v9 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v9 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, v44, (uint64_t)v43, (uint64_t)v42, &v45);
  if (!v45)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v12 = v42;
  v42 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v43;
  v43 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v44;
  v44 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = qword_1ECE7C4A0;
  v16 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v47 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v48 = 0;
              WTF::String::String((WTF::String *)&v49, "'src' is ");
              v50 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v40 = 0;
              v41 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v41) = 3;
              v40 = v27;
              v28 = HIDWORD(v41);
              *((_DWORD *)v27 + 4 * HIDWORD(v41)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v47[4];
              if (*(_QWORD *)&v47[4])
                **(_DWORD **)&v47[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v48;
              v30 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              *((_DWORD *)v27 + 4 * (v28 + 2)) = v50;
              v31 = v51;
              if (v51)
                *(_DWORD *)v51 += 2;
              *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
              HIDWORD(v41) = v28 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogMedia, 3, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v51;
              v51 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = v49;
              v49 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = *(WTF::StringImpl **)&v47[4];
              *(_QWORD *)&v47[4] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v38 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v39 = __ldxr(v19);
          if (v39 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [7],double>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, double *a5)
{
  WTF::String *v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::String *v35;
  double v36;
  WTF::Logger *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  char *v50;
  double *v51;
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint8_t buf[4];
  _BYTE v60[12];
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v50 = (char *)a4;
  v9 = (WTF::String *)WTF::String::String((WTF::String *)&v56, a4);
  v51 = a5;
  result = WTF::String::number(v9, *a5);
  if (v57)
  {
    v11 = *((_DWORD *)v57 + 1);
    if (v56)
      goto LABEL_3;
LABEL_91:
    v12 = 0;
    if (v55)
      goto LABEL_4;
LABEL_92:
    v13 = 0;
    goto LABEL_5;
  }
  v11 = 0;
  if (!v56)
    goto LABEL_91;
LABEL_3:
  v12 = *((_DWORD *)v56 + 1);
  if (!v55)
    goto LABEL_92;
LABEL_4:
  v13 = *((_DWORD *)v55 + 1);
LABEL_5:
  if ((v13 | v12) < 0
    || ((v14 = __OFADD__(v12, v13), v15 = v12 + v13, !v14) ? (v16 = 0) : (v16 = 1),
        v11 < 0 || (v16 & 1) != 0 || (result = (v11 + v15), __OFADD__(v11, v15))))
  {
    v58 = 0;
    goto LABEL_96;
  }
  if (v57 && (*((_BYTE *)v57 + 16) & 4) == 0)
  {
    v17 = 0;
    goto LABEL_19;
  }
  if (v56)
  {
    v18 = *((_DWORD *)v56 + 4);
    v17 = (v18 >> 2) & 1;
    if (v55 && (v18 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v55)
    {
LABEL_18:
      v17 = (*((unsigned __int8 *)v55 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v17 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v17, v57, (uint64_t)v56, (uint64_t)v55, &v58);
  if (!v58)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v20 = v55;
  v55 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v56;
  v56 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v57;
  v57 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(NSObject **)(a1 + 32);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v24)
  {
    WTF::String::utf8();
    v26 = v53 ? (char *)v53 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v60 = v26;
    _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v24 = (uint64_t)v53;
    v53 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        v24 = WTF::fastFree((WTF *)v24, v25);
      else
        --*(_DWORD *)v24;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v28 = *v27;
      if ((v28 & 1) != 0)
        break;
      v29 = __ldaxr(v27);
      if (v29 == v28)
      {
        if (!__stxr(v28 | 1, v27))
        {
          v30 = WTF::Logger::observers((WTF::Logger *)v24);
          v31 = *(unsigned int *)(v30 + 12);
          if ((_DWORD)v31)
          {
            v32 = *(uint64_t **)v30;
            v33 = *(_QWORD *)v30 + 8 * v31;
            do
            {
              v34 = *v32;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v61 = 0;
              v35 = (WTF::String *)WTF::String::String((WTF::String *)&v62, v50);
              v36 = *v51;
              v63 = 0;
              WTF::String::number(v35, v36);
              v53 = 0;
              v54 = 0;
              v37 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v54) = 3;
              v53 = v37;
              v38 = HIDWORD(v54);
              *((_DWORD *)v37 + 4 * HIDWORD(v54)) = *(_DWORD *)buf;
              v39 = *(_QWORD *)&v60[4];
              if (*(_QWORD *)&v60[4])
                **(_DWORD **)&v60[4] += 2;
              *((_QWORD *)v37 + 2 * v38 + 1) = v39;
              *((_DWORD *)v37 + 4 * (v38 + 1)) = v61;
              v40 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 1) + 1) = v40;
              *((_DWORD *)v37 + 4 * (v38 + 2)) = v63;
              v41 = v64;
              if (v64)
                *(_DWORD *)v64 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 2) + 1) = v41;
              HIDWORD(v54) = v38 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, a1, a2, &v53);
              v42 = v53;
              if (HIDWORD(v54))
              {
                v43 = 16 * HIDWORD(v54);
                v44 = (WTF::StringImpl **)((char *)v53 + 8);
                do
                {
                  v45 = *v44;
                  *v44 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  v44 += 2;
                  v43 -= 16;
                }
                while (v43);
                v42 = v53;
              }
              if (v42)
              {
                v53 = 0;
                LODWORD(v54) = 0;
                WTF::fastFree(v42, v25);
              }
              v46 = v64;
              v64 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = v62;
              v62 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = *(WTF::StringImpl **)&v60[4];
              *(_QWORD *)&v60[4] = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v48 -= 2;
              }
              ++v32;
            }
            while (v32 != (uint64_t *)v33);
          }
          v49 = __ldxr(v27);
          if (v49 == 1)
          {
            if (!__stlxr(0, v27))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [15],BOOL,char [19],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6)
{
  const char *v8;
  const char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  char *v50;
  WTF::Logger *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 buf;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v50 = (char *)a4;
  WTF::String::String((WTF::String *)&v56, a4);
  v8 = "true";
  v9 = "false";
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v55, a6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  v61 = v10;
  *(_QWORD *)&buf = v57;
  v53 = v56;
  v59 = v11;
  v60 = v55;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v53, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, &v58);
  if (!v58)
  {
    __break(0xC471u);
    return result;
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v13);
    else
      *(_DWORD *)v11 -= 2;
  }
  v14 = v55;
  v55 = 0;
  if (!v14)
  {
LABEL_8:
    if (v10)
      goto LABEL_9;
    goto LABEL_11;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (v10)
  {
LABEL_9:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v13);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_11:
  v15 = v56;
  v56 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v57;
  v57 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(NSObject **)(a1 + 32);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v53 ? (char *)v53 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v18 = (uint64_t)v53;
    v53 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v48 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v27 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v63 = 0;
              WTF::String::String((WTF::String *)&v64, v50);
              v65 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v66 = v53;
              v67 = 0;
              WTF::String::String((WTF::String *)&v68, a6);
              v69 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v70 = v53;
              v53 = 0;
              v54 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
              LODWORD(v54) = 5;
              v53 = v28;
              v29 = HIDWORD(v54);
              *((_DWORD *)v28 + 4 * HIDWORD(v54)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v63;
              v31 = v64;
              if (v64)
                *(_DWORD *)v64 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              *((_DWORD *)v28 + 4 * (v29 + 2)) = v65;
              v32 = v66;
              if (v66)
                *(_DWORD *)v66 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 2) + 1) = v32;
              *((_DWORD *)v28 + 4 * (v29 + 3)) = v67;
              v33 = v68;
              if (v68)
                *(_DWORD *)v68 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 3) + 1) = v33;
              *((_DWORD *)v28 + 4 * (v29 + 4)) = v69;
              v34 = v70;
              if (v70)
                *(_DWORD *)v70 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 4) + 1) = v34;
              HIDWORD(v54) = v29 + 5;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v53);
              v35 = v53;
              if (HIDWORD(v54))
              {
                v36 = v9;
                v37 = a1;
                v38 = v8;
                v39 = 16 * HIDWORD(v54);
                v40 = (WTF::StringImpl **)((char *)v53 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v35 = v53;
                v8 = v38;
                a1 = v37;
                v9 = v36;
              }
              if (v35)
              {
                v53 = 0;
                LODWORD(v54) = 0;
                WTF::fastFree(v35, v19);
              }
              v42 = v70;
              v70 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v68;
              v68 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v66;
              v66 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v64;
              v64 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v48);
          }
          v47 = __ldxr(v21);
          if (v47 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleMediaEngineWasUpdated(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WebCore::MediaElementSession *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  __int16 v32;
  __int16 v33;
  _QWORD v34[4];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 1824) + 12);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 1824) + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 16), "lambda(), task fired");
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 1824) + 12);
  }
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(_QWORD *)(v2 + 1832);
  v34[0] = "HTMLMediaElement";
  v34[1] = 17;
  v34[2] = "mediaEngineWasUpdated";
  v34[3] = v4;
  if (v3)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v34);
  ++*(_DWORD *)(v2 + 1148);
  WebCore::HTMLMediaElement::updateRenderer((unsigned __int8 *)v2, a2);
  --*(_DWORD *)(v2 + 1148);
  v5 = *(WebCore::MediaElementSession **)(v2 + 1600);
  if (!v5)
  {
    WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v2);
    v5 = *(WebCore::MediaElementSession **)(v2 + 1600);
  }
  WebCore::MediaElementSession::mediaEngineUpdated(v5);
  v6 = *(_QWORD *)(v2 + 1136);
  if (!v6)
    goto LABEL_45;
  v7 = *(unsigned __int8 **)v6;
  if (__ldaxr(*(unsigned __int8 **)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_12:
  ++*((_QWORD *)v7 + 1);
  v9 = __ldxr(v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v7))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v10 = *(_QWORD *)(v2 + 1584);
  if (v10)
  {
    v11 = *(_DWORD **)(v10 + 48);
    ++v11[2];
    (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(v6 + 72) + 944))(*(_QWORD *)(v6 + 72), v11);
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
  v12 = *(_QWORD *)(v2 + 1136);
  if (!v12)
    goto LABEL_45;
  v13 = *(unsigned __int8 **)v12;
  if (__ldaxr(*(unsigned __int8 **)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_25:
  ++*((_QWORD *)v13 + 1);
  v15 = __ldxr(v13);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v13))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  v16 = *(_QWORD *)(v2 + 1576);
  if (v16)
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v12 + 72) + 920))(*(_QWORD *)(v12 + 72), *(_QWORD *)(v16 + 48));
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v12);
  v17 = *(_QWORD *)(v2 + 1136);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (__ldaxr(*(unsigned __int8 **)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_37;
    }
    MEMORY[0x19AEA534C](v18);
LABEL_37:
    ++*((_QWORD *)v18 + 1);
    v20 = __ldxr(v18);
    if (v20 == 1)
    {
      if (!__stlxr(0, v18))
        goto LABEL_42;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_42:
    (*(void (**)(_QWORD, float, float, float, float))(**(_QWORD **)(v17 + 72) + 120))(*(_QWORD *)(v17 + 72), *(float *)(v2 + 1112), *(float *)(v2 + 1116), *(float *)(v2 + 1120), *(float *)(v2 + 1124));
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v17 + 72) + 128))(*(_QWORD *)(v17 + 72), *(unsigned __int8 *)(v2 + 1128));
    v21 = *(_QWORD *)(v2 + 1104);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E33C5C10;
    v34[0] = v22;
    (*(void (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(v17 + 72) + 104))(*(_QWORD *)(v17 + 72), v21, v34);
    v23 = v34[0];
    v34[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v17);
  }
LABEL_45:
  WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())v2);
  result = (unsigned int *)WebCore::HTMLMediaElement::updateShouldContinueAfterNeedKey((unsigned __int8 *)v2);
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 528);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 8);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          ++*(_DWORD *)v29;
          result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v29 + 48)
                                                                                            + 16)
                                                                              + 1144))(*(_QWORD *)(*(_QWORD *)(v29 + 48) + 16), v2);
          if (*(_DWORD *)v29 == 1)
          {
            WebCore::Page::~Page(v29);
            result = (unsigned int *)WTF::fastFree(v30, v31);
          }
          else
          {
            --*(_DWORD *)v29;
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    v32 = *(_WORD *)(v2 + 30);
    if ((v32 & 0x400) == 0)
    {
      v33 = *(_WORD *)(v2 + 28);
      if ((v33 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v2, v25);
      }
      else
      {
        if ((v33 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v32 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v32 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleUpdatePlayState(void)::$_0,void>::call(uint64_t a1)
{
  WebCore::HTMLMediaElement *v1;
  BOOL v2;

  v1 = *(WebCore::HTMLMediaElement **)(a1 + 8);
  if (*(_BYTE *)(*((_QWORD *)v1 + 228) + 12))
  {
    if (WebCore::LogMedia)
      v2 = byte_1ECE7C490 >= 3u;
    else
      v2 = 0;
    if (v2)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)(a1 + 16), "lambda(), task fired");
  }
  WebCore::HTMLMediaElement::updatePlayState(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::clearMediaPlayer(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  WebCore::PlatformMediaSession *v2;
  _DWORD *v3;
  WebCore::NavigatorMediaSession *v4;
  WebCore::Navigator *v5;
  WebCore::NavigatorMediaSession *v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(WebCore::PlatformMediaSession **)(v1 + 1600);
  if (v2)
  {
    v3 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 10) + 40) + 8) + 696);
    if (v3)
    {
      WebCore::LocalDOMWindow::protectedNavigator(v3, &v6);
      v4 = v6;
      WebCore::NavigatorMediaSession::mediaSession(v6, v5);
      if (*((_DWORD *)v4 + 4) == 1)
        (*(void (**)(WebCore::NavigatorMediaSession *))(*(_QWORD *)v4 + 16))(v4);
      else
        --*((_DWORD *)v4 + 4);
    }
    WebCore::PlatformMediaSession::clientCharacteristicsChanged(v2, 0);
    return WebCore::PlatformMediaSession::canProduceAudioChanged(*(WebCore::PlatformMediaSession **)(v1 + 1600));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setIsPlayingToWirelessTarget(BOOL)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RemotePlayback *v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  WebCore::PlatformMediaSession *v10;
  unsigned __int8 *updated;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  _DWORD *v22;
  bmalloc::api *v23;
  void *v24;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 120);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
      {
        v4 = result;
        if (*(_BYTE *)(result + 16) && (v5 = *(_QWORD *)(v1 + 1136)) != 0)
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 760))(*(_QWORD *)(v5 + 72));
        else
          result = 0;
        if (*(unsigned __int8 *)(v1 + 1697) != (_DWORD)result)
        {
          *(_BYTE *)(v1 + 1697) = result;
          v6 = *(WebCore::RemotePlayback **)(v1 + 1840);
          ++*((_DWORD *)v6 + 6);
          if ((_DWORD)result)
            v7 = 1;
          else
            v7 = 2;
          WebCore::RemotePlayback::setState((uint64_t)v6, (WTF::String *)v7);
          if (*((_DWORD *)v6 + 6) == 1)
          {
            WebCore::RemotePlayback::~RemotePlayback(v6, v8);
            bmalloc::api::isoDeallocate(v23, v24);
          }
          else
          {
            --*((_DWORD *)v6 + 6);
          }
          if (*(_BYTE *)(*(_QWORD *)(v1 + 1824) + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)(v4 + 24));
          WebCore::HTMLMediaElement::configureMediaControls((WebCore::HTMLMediaElement *)v1);
          v9 = *(WTF::StringImpl **)(v1 + 1600);
          if (!v9)
          {
            WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v1);
            v9 = *(WTF::StringImpl **)(v1 + 1600);
          }
          WebCore::PlatformMediaSession::isPlayingToWirelessPlaybackTargetChanged(v9, *(unsigned __int8 *)(v1 + 1697));
          v10 = *(WebCore::PlatformMediaSession **)(v1 + 1600);
          if (!v10)
          {
            WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v1);
            v10 = *(WebCore::PlatformMediaSession **)(v1 + 1600);
          }
          WebCore::PlatformMediaSession::canProduceAudioChanged(v10);
          WebCore::HTMLMediaElement::scheduleUpdateMediaState((uint64_t (**)())v1);
          updated = WebCore::HTMLMediaElement::updateSleepDisabling((WTF **)v1);
          *(_BYTE *)(v1 + 1649) = 0;
          *(_QWORD *)(v1 + 608) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)updated);
          result = WebCore::TimerBase::setNextFireTime(v1 + 584, v12 + 0.5);
          v13 = *(_QWORD *)(v1 + 120);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
            {
              if (!*(_BYTE *)(v14 + 180))
              {
                v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
                  v16 = WebCore::threadGlobalDataSlow((WebCore *)result);
                v17 = *(_QWORD *)(v16 + 40);
                if (!v17)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
                  v17 = *(_QWORD *)(v16 + 40);
                }
                v18 = bmalloc::api::isoAllocate();
                WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
                *(_QWORD *)v18 = off_1E33A4B48;
                *(_QWORD *)(v18 + 8) = 0;
                v20 = *(_DWORD *)(v18 + 20) & 0xFFC00000 | 0x1E8204;
                v21 = *(_QWORD *)(v17 + 2360) != 0;
                *(_DWORD *)(v18 + 16) = 1;
                *(_DWORD *)(v18 + 20) = v20 | v21;
                v22 = *(_DWORD **)(v17 + 2360);
                if (v22)
                  *v22 += 2;
                *(_QWORD *)(v18 + 24) = v22;
                *(_QWORD *)(v18 + 32) = 0;
                *(_QWORD *)(v18 + 40) = 0;
                *(_QWORD *)(v18 + 48) = 0;
                *(_QWORD *)(v18 + 56) = v19;
                *(_QWORD *)(v18 + 64) = 0;
                result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 48))(v1, v18);
                if (*(_DWORD *)(v18 + 16) == 1)
                  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
                else
                  --*(_DWORD *)(v18 + 16);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::enterFullscreen(unsigned int)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::String *v48;
  WTF::StringImpl *v49;
  WTF::Logger *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::Logger *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  WTF::String *v76;
  WTF::Logger *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::Logger *v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  WTF::StringImpl *v97;
  WTF::String *v98;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  WebCore::Quirks *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::Logger *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  __int128 buf;
  int v128;
  WTF::StringImpl *v129;
  int v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::StringImpl *v135;
  int v136;
  WTF::StringImpl *v137;
  int v138;
  WTF::StringImpl *v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3 || *(_BYTE *)(v3 + 180))
    return result;
  v4 = result;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v6 = *(_QWORD *)(v5 + 528);
  if ((!v6
     || (v7 = *(_QWORD *)(v6 + 8)) == 0
     || (v8 = *(_QWORD *)(v7 + 24)) == 0
     || (v9 = *(_QWORD *)(v8 + 8)) == 0
     || *(_BYTE *)(v5 + 3437)
     || (*(_WORD *)(v9 + 658) & 4) == 0)
    && *(_DWORD *)(result + 16) != 2)
  {
    if (*(_BYTE *)(*(_QWORD *)(v1 + 1824) + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)(result + 24), " returning because document is hidden");
    goto LABEL_204;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
LABEL_204:
    v95 = *(unsigned int *)(v1 + 1265);
    v96 = (v95 | ((unint64_t)*(unsigned __int16 *)(v1 + 1269) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
    *(_DWORD *)(v1 + 1265) = v95;
    *(_WORD *)(v1 + 1269) = WORD2(v96);
    return result;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 8) + 48) + 16);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 1096))(v10, *(unsigned int *)(result + 16));
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 1088))(v10, *(unsigned int *)(v4 + 16));
  v12 = *(_QWORD *)(v1 + 1824);
  if (v11)
    v13 = (_DWORD)result == 0;
  else
    v13 = 1;
  if (v13)
  {
    if (*(_BYTE *)(v12 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v4 + 24));
      WTF::String::String((WTF::String *)&v119, "Could not enter fullscreen mode ");
      WTF::String::number((WTF::String *)*(unsigned int *)(v4 + 16));
      WTF::String::String((WTF::String *)&v117, ", support = ");
      if (v11)
        v14 = 5;
      else
        v14 = 6;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = (WTF::StringImpl *)buf;
      WTF::String::String((WTF::String *)&v116, ", canEnter = ");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = (WTF::StringImpl *)buf;
      v114 = v119;
      v126 = v118;
      *(_QWORD *)&buf = v120;
      v124 = v15;
      v125 = v117;
      v122 = v16;
      v123 = v116;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v114, (uint64_t *)&v126, (uint64_t *)&v125, (uint64_t *)&v124, (uint64_t *)&v123, (uint64_t *)&v122, &v121);
      if (!v121)
        goto LABEL_260;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v17);
        else
          *(_DWORD *)v16 -= 2;
      }
      v18 = v116;
      v116 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v17);
          if (v15)
          {
LABEL_29:
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v17);
            else
              *(_DWORD *)v15 -= 2;
          }
LABEL_31:
          v19 = v117;
          v117 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v17);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v118;
          v118 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v17);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = v119;
          v119 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v17);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v120;
          v120 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v17);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = qword_1ECE7C4A0;
          v24 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v24)
          {
            WTF::String::utf8();
            v26 = v114 ? (char *)v114 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v26;
            _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v24 = (uint64_t)v114;
            v114 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 1)
                v24 = WTF::fastFree((WTF *)v24, v25);
              else
                --*(_DWORD *)v24;
            }
          }
          if (WebCore::LogMedia)
          {
            v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v28 = *v27;
              if ((v28 & 1) != 0)
                break;
              v29 = __ldaxr(v27);
              if (v29 == v28)
              {
                if (!__stxr(v28 | 1, v27))
                {
                  v43 = WTF::Logger::observers((WTF::Logger *)v24);
                  v44 = *(unsigned int *)(v43 + 12);
                  if ((_DWORD)v44)
                  {
                    v45 = *(uint64_t **)v43;
                    v112 = *(_QWORD *)v43 + 8 * v44;
                    v46 = v14 - 1;
                    do
                    {
                      v47 = *v45;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v4 + 24));
                      v128 = 0;
                      WTF::String::String((WTF::String *)&v129, "Could not enter fullscreen mode ");
                      v48 = (WTF::String *)*(unsigned int *)(v4 + 16);
                      v130 = 0;
                      WTF::String::number(v48);
                      v132 = 0;
                      WTF::String::String((WTF::String *)&v133, ", support = ");
                      v134 = 0;
                      if (v46)
                      {
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v49 = v114;
                      }
                      else
                      {
                        v71 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                        *MEMORY[0x1E0CBEF70] += 2;
                        v49 = v71;
                      }
                      v135 = v49;
                      v136 = 0;
                      WTF::String::String((WTF::String *)&v137, ", canEnter = ");
                      v138 = 0;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v139 = v114;
                      v114 = 0;
                      v115 = 0;
                      v50 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                      LODWORD(v115) = 7;
                      v114 = v50;
                      v51 = HIDWORD(v115);
                      *((_DWORD *)v50 + 4 * HIDWORD(v115)) = buf;
                      v52 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v50 + 2 * v51 + 1) = v52;
                      *((_DWORD *)v50 + 4 * (v51 + 1)) = v128;
                      v53 = v129;
                      if (v129)
                        *(_DWORD *)v129 += 2;
                      *((_QWORD *)v50 + 2 * (v51 + 1) + 1) = v53;
                      *((_DWORD *)v50 + 4 * (v51 + 2)) = v130;
                      v54 = v131;
                      if (v131)
                        *(_DWORD *)v131 += 2;
                      *((_QWORD *)v50 + 2 * (v51 + 2) + 1) = v54;
                      *((_DWORD *)v50 + 4 * (v51 + 3)) = v132;
                      v55 = v133;
                      if (v133)
                        *(_DWORD *)v133 += 2;
                      *((_QWORD *)v50 + 2 * (v51 + 3) + 1) = v55;
                      *((_DWORD *)v50 + 4 * (v51 + 4)) = v134;
                      v56 = v135;
                      if (v135)
                        *(_DWORD *)v135 += 2;
                      *((_QWORD *)v50 + 2 * (v51 + 4) + 1) = v56;
                      *((_DWORD *)v50 + 4 * (v51 + 5)) = v136;
                      v57 = v137;
                      if (v137)
                        *(_DWORD *)v137 += 2;
                      *((_QWORD *)v50 + 2 * (v51 + 5) + 1) = v57;
                      *((_DWORD *)v50 + 4 * (v51 + 6)) = v138;
                      v58 = v139;
                      if (v139)
                        *(_DWORD *)v139 += 2;
                      *((_QWORD *)v50 + 2 * (v51 + 6) + 1) = v58;
                      HIDWORD(v115) = v51 + 7;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v47 + 16))(v47, &WebCore::LogMedia, 0, &v114);
                      v59 = v114;
                      if (HIDWORD(v115))
                      {
                        v60 = v14;
                        v61 = 16 * HIDWORD(v115);
                        v62 = (WTF::StringImpl **)((char *)v114 + 8);
                        do
                        {
                          v63 = *v62;
                          *v62 = 0;
                          if (v63)
                          {
                            if (*(_DWORD *)v63 == 2)
                              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v25);
                            else
                              *(_DWORD *)v63 -= 2;
                          }
                          v62 += 2;
                          v61 -= 16;
                        }
                        while (v61);
                        v59 = v114;
                        v14 = v60;
                      }
                      if (v59)
                      {
                        v114 = 0;
                        LODWORD(v115) = 0;
                        WTF::fastFree(v59, v25);
                      }
                      v64 = v139;
                      v139 = 0;
                      if (v64)
                      {
                        if (*(_DWORD *)v64 == 2)
                          WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v64 -= 2;
                      }
                      v65 = v137;
                      v137 = 0;
                      if (v65)
                      {
                        if (*(_DWORD *)v65 == 2)
                          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v65 -= 2;
                      }
                      v66 = v135;
                      v135 = 0;
                      if (v66)
                      {
                        if (*(_DWORD *)v66 == 2)
                          WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v66 -= 2;
                      }
                      v67 = v133;
                      v133 = 0;
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2)
                          WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v67 -= 2;
                      }
                      v68 = v131;
                      v131 = 0;
                      if (v68)
                      {
                        if (*(_DWORD *)v68 == 2)
                          WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v68 -= 2;
                      }
                      v69 = v129;
                      v129 = 0;
                      if (v69)
                      {
                        if (*(_DWORD *)v69 == 2)
                          WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v69 -= 2;
                      }
                      v70 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v70)
                      {
                        if (*(_DWORD *)v70 == 2)
                          WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v70 -= 2;
                      }
                      ++v45;
                    }
                    while (v45 != (uint64_t *)v112);
                  }
                  v93 = __ldxr(v27);
                  if (v93 == 1)
                  {
                    if (!__stlxr(0, v27))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = (uint64_t)v121;
          v121 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v25);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_204;
        }
        *(_DWORD *)v18 -= 2;
      }
      if (v15)
        goto LABEL_29;
      goto LABEL_31;
    }
    goto LABEL_204;
  }
  if (!*(_BYTE *)(v12 + 12))
    goto LABEL_211;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v4 + 24));
  WTF::String::String((WTF::String *)&v121, "Entering fullscreen mode ");
  WTF::String::number((WTF::String *)*(unsigned int *)(v4 + 16));
  WTF::String::String((WTF::String *)&v119, ", m_videoFullscreenStandby = ");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30 = (WTF::StringImpl *)buf;
  v114 = v121;
  v126 = v120;
  *(_QWORD *)&buf = v122;
  v124 = v30;
  v125 = v119;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v114, (uint64_t *)&v126, (uint64_t *)&v125, (uint64_t *)&v124, &v123);
  if (!v123)
  {
LABEL_260:
    __break(0xC471u);
    JUMPOUT(0x195C4E770);
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  v32 = v119;
  v119 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v120;
  v120 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v31);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v121;
  v121 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v31);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v122;
  v122 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v31);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = qword_1ECE7C4A0;
  v37 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v37)
  {
    WTF::String::utf8();
    v39 = v114 ? (char *)v114 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v39;
    _os_log_impl(&dword_1940B8000, v36, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v37 = (uint64_t)v114;
    v114 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1)
        v37 = WTF::fastFree((WTF *)v37, v38);
      else
        --*(_DWORD *)v37;
    }
  }
  if (WebCore::LogMedia)
  {
    v40 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v41 = *v40;
      if ((v41 & 1) != 0)
        break;
      v42 = __ldaxr(v40);
      if (v42 == v41)
      {
        if (!__stxr(v41 | 1, v40))
        {
          v72 = WTF::Logger::observers((WTF::Logger *)v37);
          v73 = *(unsigned int *)(v72 + 12);
          if ((_DWORD)v73)
          {
            v74 = *(uint64_t **)v72;
            v113 = *(_QWORD *)v72 + 8 * v73;
            do
            {
              v75 = *v74;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v4 + 24));
              v128 = 0;
              WTF::String::String((WTF::String *)&v129, "Entering fullscreen mode ");
              v76 = (WTF::String *)*(unsigned int *)(v4 + 16);
              v130 = 0;
              WTF::String::number(v76);
              v132 = 0;
              WTF::String::String((WTF::String *)&v133, ", m_videoFullscreenStandby = ");
              v134 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v135 = v114;
              v114 = 0;
              v115 = 0;
              v77 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
              LODWORD(v115) = 5;
              v114 = v77;
              v78 = HIDWORD(v115);
              *((_DWORD *)v77 + 4 * HIDWORD(v115)) = buf;
              v79 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v77 + 2 * v78 + 1) = v79;
              *((_DWORD *)v77 + 4 * (v78 + 1)) = v128;
              v80 = v129;
              if (v129)
                *(_DWORD *)v129 += 2;
              *((_QWORD *)v77 + 2 * (v78 + 1) + 1) = v80;
              *((_DWORD *)v77 + 4 * (v78 + 2)) = v130;
              v81 = v131;
              if (v131)
                *(_DWORD *)v131 += 2;
              *((_QWORD *)v77 + 2 * (v78 + 2) + 1) = v81;
              *((_DWORD *)v77 + 4 * (v78 + 3)) = v132;
              v82 = v133;
              if (v133)
                *(_DWORD *)v133 += 2;
              *((_QWORD *)v77 + 2 * (v78 + 3) + 1) = v82;
              *((_DWORD *)v77 + 4 * (v78 + 4)) = v134;
              v83 = v135;
              if (v135)
                *(_DWORD *)v135 += 2;
              *((_QWORD *)v77 + 2 * (v78 + 4) + 1) = v83;
              HIDWORD(v115) = v78 + 5;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v75 + 16))(v75, &WebCore::LogMedia, 0, &v114);
              v84 = v114;
              if (HIDWORD(v115))
              {
                v85 = 16 * HIDWORD(v115);
                v86 = (WTF::StringImpl **)((char *)v114 + 8);
                do
                {
                  v87 = *v86;
                  *v86 = 0;
                  if (v87)
                  {
                    if (*(_DWORD *)v87 == 2)
                      WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v38);
                    else
                      *(_DWORD *)v87 -= 2;
                  }
                  v86 += 2;
                  v85 -= 16;
                }
                while (v85);
                v84 = v114;
              }
              if (v84)
              {
                v114 = 0;
                LODWORD(v115) = 0;
                WTF::fastFree(v84, v38);
              }
              v88 = v135;
              v135 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v88 -= 2;
              }
              v89 = v133;
              v133 = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                  WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v89 -= 2;
              }
              v90 = v131;
              v131 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v90 -= 2;
              }
              v91 = v129;
              v129 = 0;
              if (v91)
              {
                if (*(_DWORD *)v91 == 2)
                  WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v91 -= 2;
              }
              v92 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v92)
              {
                if (*(_DWORD *)v92 == 2)
                  WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v38);
                else
                  *(_DWORD *)v92 -= 2;
              }
              ++v74;
            }
            while (v74 != (uint64_t *)v113);
          }
          v94 = __ldxr(v40);
          if (v94 == 1)
          {
            if (!__stlxr(0, v40))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v97 = v123;
  v123 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v38);
    else
      *(_DWORD *)v97 -= 2;
  }
LABEL_211:
  *(_BYTE *)(v1 + 1096) = 0;
  v98 = (WTF::String *)*(unsigned int *)(v4 + 16);
  if ((_DWORD)v98 == 4 || (_DWORD)v98 == 1)
  {
    *(_WORD *)(v1 + 1269) |= 1u;
    v98 = (WTF::String *)*(unsigned int *)(v4 + 16);
  }
  v100 = *(_DWORD *)(v1 + 1080);
  WebCore::HTMLMediaElement::setFullscreenMode((WebCore::HTMLMediaElement *)v1, v98);
  WebCore::HTMLMediaElement::configureMediaControls((WebCore::HTMLMediaElement *)v1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 1120))(v10, v1, *(unsigned int *)(v1 + 1080), *(unsigned __int8 *)(v1 + 1084));
  if (!*(_BYTE *)(v1 + 1084))
  {
    v101 = *(_DWORD *)(v4 + 16);
    if (v101 == 4 || v101 == 1)
    {
      v102 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v102 || (v103 = *(_QWORD *)(v102 + 96)) == 0)
        v103 = WebCore::threadGlobalDataSlow((WebCore *)result);
      v104 = *(_QWORD *)(v103 + 40);
      if (!v104)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v103);
        v104 = *(_QWORD *)(v103 + 40);
      }
      v105 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v105);
      *(_DWORD *)(v105 + 16) = 1;
      *(_QWORD *)v105 = off_1E33A4B48;
      *(_QWORD *)(v105 + 8) = 0;
      *(_DWORD *)(v105 + 20) = *(_DWORD *)(v105 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v104 + 2352) != 0);
      v107 = *(_DWORD **)(v104 + 2352);
      if (!v107)
        goto LABEL_227;
      goto LABEL_226;
    }
    if (v100 == 4 || v100 == 1)
    {
      v108 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 688);
      if (!v108)
        v108 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v1 + 40) + 8));
      result = WebCore::Quirks::shouldDisableEndFullscreenEventWhenEnteringPictureInPictureFromFullscreenQuirk(v108);
      if ((result & 1) == 0)
      {
        v109 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v109 || (v110 = *(_QWORD *)(v109 + 96)) == 0)
          v110 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v111 = *(_QWORD *)(v110 + 40);
        if (!v111)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v110);
          v111 = *(_QWORD *)(v110 + 40);
        }
        v105 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v105);
        *(_DWORD *)(v105 + 16) = 1;
        *(_QWORD *)v105 = off_1E33A4B48;
        *(_QWORD *)(v105 + 8) = 0;
        *(_DWORD *)(v105 + 20) = *(_DWORD *)(v105 + 20) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v111 + 2368) != 0);
        v107 = *(_DWORD **)(v111 + 2368);
        if (!v107)
          goto LABEL_227;
LABEL_226:
        *v107 += 2;
LABEL_227:
        *(_QWORD *)(v105 + 24) = v107;
        *(_QWORD *)(v105 + 32) = 0;
        *(_QWORD *)(v105 + 40) = 0;
        *(_QWORD *)(v105 + 48) = 0;
        *(_QWORD *)(v105 + 56) = v106;
        *(_QWORD *)(v105 + 64) = 0;
        *(_QWORD *)&buf = v105;
        WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal((unsigned int *)(v1 + 112), v1, 9, v1 + 824, (uint64_t *)&buf);
        result = buf;
        *(_QWORD *)&buf = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          else
            --*(_DWORD *)(result + 16);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],unsigned int>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, unsigned int *a5)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::String *v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  char *v48;
  unsigned int *v49;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint8_t buf[4];
  _BYTE v58[12];
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v48 = (char *)a4;
  WTF::String::String((WTF::String *)&v54, a4);
  v49 = a5;
  result = WTF::String::number((WTF::String *)*a5);
  if (v55)
  {
    v10 = *((_DWORD *)v55 + 1);
    if (v54)
      goto LABEL_3;
LABEL_91:
    v11 = 0;
    if (v53)
      goto LABEL_4;
LABEL_92:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!v54)
    goto LABEL_91;
LABEL_3:
  v11 = *((_DWORD *)v54 + 1);
  if (!v53)
    goto LABEL_92;
LABEL_4:
  v12 = *((_DWORD *)v53 + 1);
LABEL_5:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0 || (v15 & 1) != 0 || (result = (v10 + v14), __OFADD__(v10, v14))))
  {
    v56 = 0;
    goto LABEL_96;
  }
  if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_19;
  }
  if (v54)
  {
    v17 = *((_DWORD *)v54 + 4);
    v16 = (v17 >> 2) & 1;
    if (v53 && (v17 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v53)
    {
LABEL_18:
      v16 = (*((unsigned __int8 *)v53 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v16 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v55, (uint64_t)v54, (uint64_t)v53, &v56);
  if (!v56)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v54;
  v54 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v55;
  v55 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v51 ? (char *)v51 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v58 = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = (uint64_t)v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v33 = *v31;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v59 = 0;
              WTF::String::String((WTF::String *)&v60, v48);
              v34 = (WTF::String *)*v49;
              v61 = 0;
              WTF::String::number(v34);
              v51 = 0;
              v52 = 0;
              v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v52) = 3;
              v51 = v35;
              v36 = HIDWORD(v52);
              *((_DWORD *)v35 + 4 * HIDWORD(v52)) = *(_DWORD *)buf;
              v37 = *(_QWORD *)&v58[4];
              if (*(_QWORD *)&v58[4])
                **(_DWORD **)&v58[4] += 2;
              *((_QWORD *)v35 + 2 * v36 + 1) = v37;
              *((_DWORD *)v35 + 4 * (v36 + 1)) = v59;
              v38 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
              *((_DWORD *)v35 + 4 * (v36 + 2)) = v61;
              v39 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
              HIDWORD(v52) = v36 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v51);
              v40 = v51;
              if (HIDWORD(v52))
              {
                v41 = 16 * HIDWORD(v52);
                v42 = (WTF::StringImpl **)((char *)v51 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v40 = v51;
              }
              if (v40)
              {
                v51 = 0;
                LODWORD(v52) = 0;
                WTF::fastFree(v40, v24);
              }
              v44 = v62;
              v62 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v60;
              v60 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = *(WTF::StringImpl **)&v58[4];
              *(_QWORD *)&v58[4] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v47 = __ldxr(v26);
          if (v47 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v56;
  v56 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setMediaGroup(WTF::String const&)::$_0,void,WebCore::HTMLMediaElement&>::call(uint64_t result, WTF **a2, const WTF::StringImpl *a3)
{
  WebCore::HTMLMediaElement *v3;
  WebCore::MediaController *v5;
  bmalloc::api *v6;
  void *v7;
  WebCore::MediaController *v8;

  v3 = *(WebCore::HTMLMediaElement **)(result + 8);
  if (v3 != (WebCore::HTMLMediaElement *)a2 && !*((_QWORD *)v3 + 177))
  {
    result = WTF::equal(a2[176], **(const WTF::StringImpl ***)(result + 16), a3);
    if ((_DWORD)result)
    {
      v5 = a2[177];
      if (v5)
        ++*((_DWORD *)v5 + 2);
      v8 = v5;
      WebCore::HTMLMediaElement::setController(v3, (uint64_t *)&v8);
      result = (uint64_t)v8;
      if (v8)
      {
        if (*((_DWORD *)v8 + 2) == 1)
        {
          WebCore::MediaController::~MediaController(v8);
          return bmalloc::api::isoDeallocate(v6, v7);
        }
        else
        {
          --*((_DWORD *)v8 + 2);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::mediaPlayerBufferedTimeRangesChanged(void)::$_0,void>::call(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  WTF *v22;
  int v23;
  int v24;

  v1 = (_QWORD *)result[1];
  if (*(_BYTE *)(v1[228] + 12))
    result = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)(result + 2), "lambda(), task fired");
  if (v1[142])
  {
    v2 = v1[169];
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 108);
      v4 = *(_DWORD *)(v2 + 124);
      v5 = *(_DWORD *)(v2 + 68);
      if (v4 + v3 + v5)
      {
        v6 = 0;
        do
        {
          if (v6 >= v4)
          {
            v8 = v6 - v4;
            v9 = v8 >= v3;
            v10 = v8 - v3;
            if (v9)
            {
              if (v5 <= v10)
              {
                v7 = 0;
              }
              else
              {
                v7 = *(_DWORD **)(*(_QWORD *)(v2 + 56) + 8 * v10);
                if (v7 && v7[10] != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195C4EF68);
                }
              }
            }
            else
            {
              v7 = *(_DWORD **)(*(_QWORD *)(v2 + 96) + 8 * v8);
              if (v7 && v7[10] != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x195C4EF48);
              }
            }
          }
          else
          {
            v7 = *(_DWORD **)(*(_QWORD *)(v2 + 112) + 8 * v6);
            if (v7 && v7[10] != 1)
            {
LABEL_37:
              __break(0xC471u);
              JUMPOUT(0x195C4EF28);
            }
          }
          ++v7[4];
          result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 216))(v7);
          if ((_DWORD)result)
          {
            v11 = v1[144];
            if (v11)
            {
              (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v11 + 48))(&v22);
            }
            else
            {
              v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1[142] + 72) + 592))(*(_QWORD *)(v1[142] + 72));
              v14 = *(unsigned int *)(v13 + 12);
              v22 = 0;
              v23 = 0;
              v24 = v14;
              if ((_DWORD)v14)
              {
                if (v14 >> 27)
                  goto LABEL_37;
                v15 = v13;
                v16 = (WTF *)WTF::fastMalloc((WTF *)(32 * v14));
                v23 = v14;
                v22 = v16;
                v17 = *(unsigned int *)(v15 + 12);
                if ((_DWORD)v17)
                {
                  v18 = *(__int128 **)v15;
                  v19 = 32 * v17;
                  do
                  {
                    v20 = *v18;
                    v21 = v18[1];
                    v18 += 2;
                    *(_OWORD *)v16 = v20;
                    *((_OWORD *)v16 + 1) = v21;
                    v16 = (WTF *)((char *)v16 + 32);
                    v19 -= 32;
                  }
                  while (v19);
                }
              }
            }
            (*(void (**)(_DWORD *, WTF **))(*(_QWORD *)v7 + 224))(v7, &v22);
            result = v22;
            if (v22)
            {
              v22 = 0;
              v23 = 0;
              result = (_QWORD *)WTF::fastFree((WTF *)result, v12);
            }
          }
          if (v7[4] == 1)
            result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
          else
            --v7[4];
          ++v6;
          v2 = v1[169];
          v3 = *(_DWORD *)(v2 + 108);
          v4 = *(_DWORD *)(v2 + 124);
          v5 = *(_DWORD *)(v2 + 68);
        }
        while (v6 < v4 + v3 + v5);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setControllerJSProperty(WTF::ASCIILiteral,JSC::JSValue)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::call(uint64_t a1, JSC::JSGlobalObject *a2, WebCore *this, WebCore::HTMLMediaElement *a4)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  void (*v10)(_DWORD *, WebCore *, WTF::StringImpl *, _QWORD, _QWORD *);
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD v14[2];
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;

  v6 = *((_QWORD *)a2 + 7);
  v7 = WebCore::controllerJSValue(this, a2, *(WebCore::JSDOMGlobalObject **)(a1 + 8), a4);
  v18 = v7;
  if (v7 == 2)
    return 0;
  v8 = (_DWORD *)v7;
  v14[0] = 0;
  v14[1] = v7;
  v15 = -1;
  v16 = 0x1000000;
  v17 = 0;
  if ((v7 & 0xFFFE000000000002) != 0)
  {
    v9 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v18, this);
    goto LABEL_6;
  }
  if (*(unsigned __int8 *)(v7 + 5) <= 0x16u)
  {
    v9 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v7, this);
LABEL_6:
    v8 = (_DWORD *)v9;
    if (v9)
      goto LABEL_7;
    return 0;
  }
LABEL_7:
  v10 = *(void (**)(_DWORD *, WebCore *, WTF::StringImpl *, _QWORD, _QWORD *))(16
                                                                                        * *(unsigned int *)(16 * (*v8 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0x48);
  if (*(_QWORD *)(a1 + 24) == 2)
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v6 + 41968));
  else
    WTF::AtomStringImpl::addLiteral();
  v11 = v19;
  v10(v8, this, v19, *(_QWORD *)(a1 + 32), v14);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::ensureMediaControls(void)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;

  *(_QWORD *)a1 = &off_1E33C5D78;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)(a1 + 16);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 16);
  if ((WTF *)(a1 + 32) != v7 && v7 != 0)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::ensureMediaControls(void)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;

  *(_QWORD *)this = &off_1E33C5D78;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if ((WTF *)((char *)this + 32) != v7 && v7 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::ensureMediaControls(void)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::call(uint64_t a1, uint64_t a2, JSC::JSGlobalObject *a3, uint64_t a4, WebCore::DOMWrapperWorld *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebCore::HTMLElement *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  WebCore::MediaControlsHost *v30;
  WTF::StringImpl *v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  WebCore::Document *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  objc_class *Wrapper;
  WTF *v41;
  void *v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  JSValue v55;
  int v56;
  int v57;
  JSC::JSFunction *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *isa;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  double v71;
  uint64_t v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  JSValue v85;
  JSValue v86;
  uint64_t *v87;
  _QWORD *v89;
  int32x2_t v90[3];
  _DWORD *v91;
  uint64_t v92;
  WTF *v93;
  _OWORD v94[4];
  uint64_t v95;
  JSValue v96;
  JSC::JSFunction *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  int v100;
  int v101;
  uint64_t v102;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v9)
  {
    v12 = *(_DWORD ***)(a1 + 16);
    v13 = 8 * v9;
    do
    {
      if (*v12 && (*v12)[1])
      {
        v98 = 0;
        WTF::URL::invalidate((WTF::URL *)&v98);
        v90[0] = 0;
        WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v91, v12, 0, &v98, v90);
        WebCore::ScriptController::evaluateInWorldIgnoringException(a4, (uint64_t)&v91, a5);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v94 + 1, v14);
        v16 = (_DWORD *)v92;
        v92 = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        v17 = v91;
        v91 = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        v18 = v98;
        v98 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v15);
          else
            *(_DWORD *)v18 -= 2;
        }
        if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
          return 0;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  WTF::AtomStringImpl::addLiteral();
  v19 = (WTF::StringImpl *)v91;
  v97 = (JSC::JSFunction *)JSC::JSObject::get((JSC::Structure *)a2, a3, (unint64_t)v91);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (((unint64_t)v97 & 0xFFFFFFFFFFFFFFF7) == 2)
    return 0;
  if (!*(_QWORD *)(v7 + 1616))
  {
    v24 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = 0;
    v25 = *(_QWORD *)(v7 + 296);
    if (v25)
      goto LABEL_165;
    v25 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *(_QWORD *)(v25 + 8) = v7;
    v26 = *(unsigned int **)(v7 + 296);
    *(_QWORD *)(v7 + 296) = v25;
    if (!v26)
      goto LABEL_165;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v23);
    }
    v25 = *(_QWORD *)(v7 + 296);
    if (v25)
    {
LABEL_165:
      do
        v29 = __ldaxr((unsigned int *)v25);
      while (__stlxr(v29 + 1, (unsigned int *)v25));
    }
    *(_QWORD *)(v24 + 16) = v25;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    v30 = *(WebCore::MediaControlsHost **)(v7 + 1616);
    *(_QWORD *)(v7 + 1616) = v24;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        WebCore::MediaControlsHost::~MediaControlsHost(v30, v23);
        WTF::fastFree(v43, v44);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
  }
  v96.super.isa = (Class)WebCore::toJS(a3, (JSC::JSGlobalObject *)a2, (WebCore::JSDOMGlobalObject *)v7, v21);
  v31 = *(WTF::StringImpl **)(v7 + 1616);
  if (v31)
    ++*(_DWORD *)v31;
  v33 = WebCore::wrap<WebCore::MediaControlsHost>((uint64_t)a3, a2, v31);
  if (*(_DWORD *)v31 == 1)
  {
    WebCore::MediaControlsHost::~MediaControlsHost(v31, v32);
    WTF::fastFree(v41, v42);
  }
  else
  {
    --*(_DWORD *)v31;
  }
  LOBYTE(v91) = 0;
  v92 = 0x800000000;
  v93 = (WTF *)((char *)v94 + 8);
  memset(v94, 0, sizeof(v94));
  v95 = 0;
  v34 = WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v7);
  v37 = v34;
  v38 = *(_DWORD *)(v34 + 24);
  *(_DWORD *)(v34 + 24) = v38 + 2;
  if (*(_BYTE *)(a2 + 3328))
  {
    v39 = *(_QWORD *)(v34 + 8);
    if (v39)
    {
LABEL_44:
      if ((*(_BYTE *)(v39 + 8) & 3) == 0)
      {
        Wrapper = *(objc_class **)v39;
        if (*(_QWORD *)v39)
          goto LABEL_59;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
    if (v45)
    {
      v46 = *(_DWORD *)(v45 - 8);
      v47 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
      v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
      v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
      v50 = v46 & ((v49 >> 31) ^ v49);
      v51 = *(_QWORD *)(v45 + 16 * v50);
      if (v51 == v34)
      {
LABEL_55:
        v39 = *(_QWORD *)(v45 + 16 * v50 + 8);
        if (v39)
          goto LABEL_44;
      }
      else
      {
        v52 = 1;
        while (v51)
        {
          v50 = ((_DWORD)v50 + v52) & v46;
          v51 = *(_QWORD *)(v45 + 16 * v50);
          ++v52;
          if (v51 == v34)
            goto LABEL_55;
        }
      }
    }
  }
  *(_DWORD *)(v34 + 24) = v38 + 4;
  v98 = (WTF::StringImpl *)v34;
  Wrapper = (objc_class *)WebCore::createWrapper((WebCore::DOMWrapperWorld **)a3, (JSC::VM *)a2, (WebCore::JSDOMGlobalObject *)&v98, v36);
  v53 = v98;
  v98 = 0;
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      v83 = *((_WORD *)v53 + 15);
      if ((v83 & 0x400) == 0)
      {
        v84 = *((_WORD *)v53 + 14);
        if ((v84 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v53, v35);
        }
        else
        {
          if ((v84 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v53 + 20) + 16))(*((_QWORD *)v53 + 20));
            v83 = *((_WORD *)v53 + 15);
          }
          *((_WORD *)v53 + 15) = v83 | 0x400;
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v53 + 72))(v53);
        }
      }
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
LABEL_59:
  v54 = v92;
  if ((_DWORD)v92 == HIDWORD(v92) || v93 != (WTF *)((char *)v94 + 8) && v93)
  {
    v85.super.isa = Wrapper;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v92, v85) == 1)
      LOBYTE(v91) = 1;
  }
  else
  {
    *((_QWORD *)v93 + v92) = Wrapper;
    LODWORD(v92) = v54 + 1;
  }
  if (*(_DWORD *)(v37 + 24) == 2)
  {
    v81 = *(_WORD *)(v37 + 30);
    if ((v81 & 0x400) == 0)
    {
      v82 = *(_WORD *)(v37 + 28);
      if ((v82 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v37, v35);
      }
      else
      {
        if ((v82 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v37 + 160) + 16))(*(_QWORD *)(v37 + 160));
          v81 = *(_WORD *)(v37 + 30);
        }
        *(_WORD *)(v37 + 30) = v81 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 72))(v37);
      }
    }
  }
  else
  {
    *(_DWORD *)(v37 + 24) -= 2;
  }
  v55.super.isa = v96.super.isa;
  v56 = v92;
  if ((_DWORD)v92 == HIDWORD(v92) || v93 != (WTF *)((char *)v94 + 8) && v93)
  {
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v92, v55) == 1)
      LOBYTE(v91) = 1;
  }
  else
  {
    *((JSValue *)v93 + v92) = v96;
    LODWORD(v92) = v56 + 1;
  }
  v57 = v92;
  if ((_DWORD)v92 == HIDWORD(v92) || v93 != (WTF *)((char *)v94 + 8) && v93)
  {
    v86.super.isa = (Class)v33;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v92, v86) == 1)
      LOBYTE(v91) = 1;
  }
  else
  {
    *((_QWORD *)v93 + v92) = v33;
    LODWORD(v92) = v57 + 1;
  }
  v58 = v97;
  if (((unint64_t)v97 & 0xFFFE000000000002) != 0)
  {
    v59 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v97, a3);
  }
  else
  {
    if (*((unsigned __int8 *)v97 + 5) > 0x16u)
      goto LABEL_75;
    v59 = JSC::JSCell::toObjectSlow(v97, a3);
  }
  v58 = (JSC::JSFunction *)v59;
LABEL_75:
  if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
    goto LABEL_151;
  if (*((_BYTE *)v58 + 5) == 26)
    JSC::JSFunction::getCallData(v58, (JSCell *)v55.super.isa);
  else
    (*(void (**)(int32x2_t *__return_ptr, JSC::JSFunction *))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v58 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0x38))(v90, v58);
  if (!v90[0].i8[0])
    goto LABEL_151;
  v98 = v93;
  LODWORD(v99) = v92;
  v60 = JSC::call();
  v61 = v60;
  if (*(_DWORD *)(v8 + 80))
  {
    v22 = 0;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0 || (v61 & 0xFFFE000000000002) != 0)
      goto LABEL_152;
  }
  else if ((v60 & 0xFFFE000000000002) != 0)
  {
    goto LABEL_151;
  }
  if (*(unsigned __int8 *)(v61 + 5) >= 0x17u)
  {
    isa = (unsigned __int8 *)v96.super.isa;
    if (((unint64_t)v96.super.isa & 0xFFFE000000000002) != 0)
    {
      v63 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v96, a3);
    }
    else
    {
      if (*((unsigned __int8 *)v96.super.isa + 5) > 0x16u)
      {
LABEL_87:
        if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
          goto LABEL_151;
        WTF::AtomStringImpl::addLiteral();
        v64 = v98;
        v98 = 0;
        v99 = (unint64_t)isa;
        v100 = -1;
        v101 = 0x1000000;
        v102 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(isa, (JSC::VM *)v8, (unint64_t)v64, v33, 14, (uint64_t)&v98);
        if ((v33 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v33 + 5) < 0x17u)
        {
          v22 = 0;
          goto LABEL_117;
        }
        v65 = *(WTF::StringImpl **)(*(_QWORD *)(v8 + 41456) + 19544);
        if (v65)
          *(_DWORD *)v65 += 2;
        v98 = 0;
        v99 = v33;
        v100 = -1;
        v101 = 0x1000000;
        v102 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v33, (JSC::VM *)v8, (unint64_t)v65, v61, 14, (uint64_t)&v98);
        if ((*(_DWORD *)(v7 + 1265) & 0x20000000) != 0)
        {
          v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528);
          if (v66)
          {
            v67 = *(_QWORD *)(v66 + 8);
            if (v67)
            {
              v68 = *(_QWORD *)(v67 + 24);
              if (v68)
              {
                v69 = *(_QWORD *)(v68 + 8);
                if (v69)
                {
                  v70 = *(float *)(v69 + 356);
                  v71 = v70;
                  if (COERCE__INT64(fabs(v70)) <= 0x7FEFFFFFFFFFFFFFLL
                    && (v72 = (int)v70, (double)(int)v72 == v71)
                    && ((_DWORD)v72 || (LODWORD(v70) & 0x80000000) == 0))
                  {
                    v73 = v72 | 0xFFFE000000000000;
                  }
                  else
                  {
                    v73 = *(_QWORD *)&v71 + 0x2000000000000;
                  }
                  v74 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
                  *(_QWORD *)v74 = off_1E33C5D50;
                  *((_QWORD *)v74 + 1) = v7;
                  *((_QWORD *)v74 + 2) = "pageScaleFactor";
                  *((_QWORD *)v74 + 3) = 16;
                  *((_QWORD *)v74 + 4) = v73;
                  v98 = v74;
                  WebCore::HTMLMediaElement::setupAndCallJS(v7, &v98);
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v74 + 8))(v74);
                }
              }
            }
          }
        }
        if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
          goto LABEL_161;
        v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528);
        if (v75)
        {
          v76 = *(_QWORD *)(v75 + 8);
          if (v76)
          {
            v77 = *(_QWORD *)(v76 + 24);
            if (v77)
            {
              v78 = *(_QWORD *)(v77 + 8);
              if (v78)
              {
                if (*(_BYTE *)(v78 + 1132))
                  v79 = 6;
                else
                  v79 = 7;
                v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
                *(_QWORD *)v80 = off_1E33C5D50;
                *((_QWORD *)v80 + 1) = v7;
                *((_QWORD *)v80 + 2) = "usesLTRUserInterfaceLayoutDirection";
                *((_QWORD *)v80 + 3) = 36;
                *((_QWORD *)v80 + 4) = v79;
                v98 = v80;
                WebCore::HTMLMediaElement::setupAndCallJS(v7, &v98);
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v80 + 8))(v80);
              }
            }
          }
        }
        if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        {
LABEL_161:
          v22 = 0;
          if (!v65)
            goto LABEL_117;
        }
        else
        {
          v22 = 1;
          if (!v65)
            goto LABEL_117;
        }
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v55.super.isa);
        else
          *(_DWORD *)v65 -= 2;
LABEL_117:
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v55.super.isa);
          else
            *(_DWORD *)v64 -= 2;
        }
        goto LABEL_152;
      }
      v63 = JSC::JSCell::toObjectSlow(v96.super.isa, a3);
    }
    isa = (unsigned __int8 *)v63;
    goto LABEL_87;
  }
LABEL_151:
  v22 = 0;
LABEL_152:
  v87 = *(uint64_t **)&v94[0];
  if (*(_QWORD *)&v94[0])
  {
    v98 = (WTF::StringImpl *)&v92;
    v89 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v94[0], (uint64_t *)&v98);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v87, v89);
  }
  if (v93 != (WTF *)((char *)v94 + 8) && v93)
    WTF::fastFree(v93, v55.super.isa);
  return v22;
}

BOOL WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::ensureMediaControls(void)::$_1,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::call(uint64_t a1, uint64_t a2, WebCore *this, WebCore::HTMLMediaElement *a4)
{
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::HTMLElement *v11;
  uint64_t v12;
  _BOOL8 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  WebCore::MediaControlsHost *v22;
  objc_class *v23;
  WTF::StringImpl *v24;
  void *v25;
  objc_class *v26;
  uint64_t v27;
  JSCell *v28;
  WebCore::Document *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  objc_class *Wrapper;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WebCore::Document *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  double v52;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  JSValue v57;
  JSValue v58;
  JSValue v59;
  uint64_t *v60;
  _QWORD *v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  int *v66;
  int v67;
  WebCore::Document *v68[3];
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF *v71;
  _OWORD v72[4];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v6 = *(WebCore::JSDOMGlobalObject **)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = WebCore::controllerJSValue(this, (JSC::JSGlobalObject *)a2, v6, a4);
  v75 = v8;
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  if ((v8 & 0xFFFE000000000002) != 0)
  {
    v9 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v75, this);
  }
  else
  {
    if (*(unsigned __int8 *)(v8 + 5) > 0x16u)
      goto LABEL_7;
    v9 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, this);
  }
  v8 = v9;
LABEL_7:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::JSObject::get((JSC::Structure *)v8, this, (unint64_t)v69);
  v74 = v12;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v10);
    else
      *(_DWORD *)v69 -= 2;
  }
  if (*(_QWORD *)(v7 + 16) || (v12 & 0xFFFFFFFFFFFFFFF7) == 2)
    return 0;
  if (!*((_QWORD *)v6 + 202))
  {
    v16 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    v17 = *((_QWORD *)v6 + 37);
    if (v17)
      goto LABEL_129;
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = v6;
    v18 = (unsigned int *)*((_QWORD *)v6 + 37);
    *((_QWORD *)v6 + 37) = v17;
    if (!v18)
      goto LABEL_129;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v15);
    }
    v17 = *((_QWORD *)v6 + 37);
    if (v17)
    {
LABEL_129:
      do
        v21 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v21 + 1, (unsigned int *)v17));
    }
    *(_QWORD *)(v16 + 16) = v17;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    v22 = (WebCore::MediaControlsHost *)*((_QWORD *)v6 + 202);
    *((_QWORD *)v6 + 202) = v16;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WebCore::MediaControlsHost::~MediaControlsHost(v22, v15);
        WTF::fastFree(v36, v37);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  v23 = (objc_class *)WebCore::toJS(this, (JSC::JSGlobalObject *)a2, v6, v11);
  v24 = (WTF::StringImpl *)*((_QWORD *)v6 + 202);
  if (v24)
    ++*(_DWORD *)v24;
  v26 = (objc_class *)WebCore::wrap<WebCore::MediaControlsHost>((uint64_t)this, a2, v24);
  if (*(_DWORD *)v24 == 1)
  {
    WebCore::MediaControlsHost::~MediaControlsHost(v24, v25);
    WTF::fastFree(v34, v35);
  }
  else
  {
    --*(_DWORD *)v24;
  }
  LOBYTE(v69) = 0;
  v70 = 0x800000000;
  v71 = (WTF *)((char *)v72 + 8);
  memset(v72, 0, sizeof(v72));
  v73 = 0;
  v27 = WebCore::Element::ensureUserAgentShadowRoot(v6);
  v30 = v27;
  v31 = *(_DWORD *)(v27 + 24);
  *(_DWORD *)(v27 + 24) = v31 + 2;
  if (*(_BYTE *)(a2 + 3328))
  {
    v32 = *(_QWORD *)(v27 + 8);
    if (v32)
    {
LABEL_34:
      if ((*(_BYTE *)(v32 + 8) & 3) == 0)
      {
        Wrapper = *(objc_class **)v32;
        if (*(_QWORD *)v32)
          goto LABEL_53;
      }
    }
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
    if (v38)
    {
      v39 = *(_DWORD *)(v38 - 8);
      v40 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
      v43 = v39 & ((v42 >> 31) ^ v42);
      v44 = *(_QWORD *)(v38 + 16 * v43);
      if (v44 == v27)
      {
LABEL_49:
        v32 = *(_QWORD *)(v38 + 16 * v43 + 8);
        if (v32)
          goto LABEL_34;
      }
      else
      {
        v45 = 1;
        while (v44)
        {
          v43 = ((_DWORD)v43 + v45) & v39;
          v44 = *(_QWORD *)(v38 + 16 * v43);
          ++v45;
          if (v44 == v27)
            goto LABEL_49;
        }
      }
    }
  }
  *(_DWORD *)(v27 + 24) = v31 + 4;
  v68[0] = (WebCore::Document *)v27;
  Wrapper = (objc_class *)WebCore::createWrapper((WebCore::DOMWrapperWorld **)this, (JSC::VM *)a2, (WebCore::JSDOMGlobalObject *)v68, v29);
  v46 = v68[0];
  v68[0] = 0;
  if (v46)
  {
    if (*((_DWORD *)v46 + 6) == 2)
    {
      v55 = *((_WORD *)v46 + 15);
      if ((v55 & 0x400) == 0)
      {
        v56 = *((_WORD *)v46 + 14);
        if ((v56 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef(v46, v28);
        }
        else
        {
          if ((v56 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v46 + 20) + 16))(*((_QWORD *)v46 + 20));
            v55 = *((_WORD *)v46 + 15);
          }
          *((_WORD *)v46 + 15) = v55 | 0x400;
          (*(void (**)(WebCore::Document *))(*(_QWORD *)v46 + 72))(v46);
        }
      }
    }
    else
    {
      *((_DWORD *)v46 + 6) -= 2;
    }
  }
LABEL_53:
  v47 = v70;
  if ((_DWORD)v70 == HIDWORD(v70) || v71 != (WTF *)((char *)v72 + 8) && v71)
  {
    v57.super.isa = Wrapper;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v70, v57) == 1)
      LOBYTE(v69) = 1;
  }
  else
  {
    *((_QWORD *)v71 + v70) = Wrapper;
    LODWORD(v70) = v47 + 1;
  }
  if (*(_DWORD *)(v30 + 24) == 2)
  {
    v53 = *(_WORD *)(v30 + 30);
    if ((v53 & 0x400) == 0)
    {
      v54 = *(_WORD *)(v30 + 28);
      if ((v54 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v30, v28);
      }
      else
      {
        if ((v54 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v30 + 160) + 16))(*(_QWORD *)(v30 + 160));
          v53 = *(_WORD *)(v30 + 30);
        }
        *(_WORD *)(v30 + 30) = v53 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
      }
    }
  }
  else
  {
    *(_DWORD *)(v30 + 24) -= 2;
  }
  v48 = v70;
  if ((_DWORD)v70 == HIDWORD(v70) || v71 != (WTF *)((char *)v72 + 8) && v71)
  {
    v58.super.isa = v23;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v70, v58) == 1)
      LOBYTE(v69) = 1;
  }
  else
  {
    *((_QWORD *)v71 + v70) = v23;
    LODWORD(v70) = v48 + 1;
  }
  v49 = v70;
  if ((_DWORD)v70 == HIDWORD(v70) || v71 != (WTF *)((char *)v72 + 8) && v71)
  {
    v59.super.isa = v26;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v70, v59) == 1)
      LOBYTE(v69) = 1;
  }
  else
  {
    *((_QWORD *)v71 + v70) = v26;
    LODWORD(v70) = v49 + 1;
  }
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v50 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v74, this);
  }
  else
  {
    if (*(unsigned __int8 *)(v12 + 5) > 0x16u)
      goto LABEL_69;
    v50 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v12, this);
  }
  v12 = v50;
LABEL_69:
  if (*(_DWORD *)(v7 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
    goto LABEL_103;
  if (*(_BYTE *)(v12 + 5) == 26)
    JSC::JSFunction::getCallData((JSC::JSFunction *)v12, v28);
  else
    (*(void (**)(WebCore::Document **__return_ptr, uint64_t))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0x38))(v68, v12);
  if (!LOBYTE(v68[0])
    || (v51 = JSC::call(), *(_DWORD *)(v7 + 80)) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v7) & 1) != 0)
  {
LABEL_103:
    v14 = 0;
    goto LABEL_104;
  }
  if (v51 >= 0xFFFE000000000000)
  {
    v63 = (_DWORD)v51 == 0;
    goto LABEL_124;
  }
  *(_QWORD *)&v52 = v51 - 0x2000000000000;
  if (v51 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v52 <= 0.0)
    {
      v14 = v52 < 0.0;
      goto LABEL_104;
    }
    goto LABEL_122;
  }
  if ((v51 & 0xFFFE000000000002) == 0)
  {
    v64 = *(unsigned __int8 *)(v51 + 5);
    if (v64 == 3)
    {
      v67 = *(_DWORD *)(v51 + 8);
LABEL_120:
      v63 = v67 == 0;
      goto LABEL_124;
    }
    if (v64 == 2)
    {
      v65 = *(_QWORD *)(v51 + 8);
      if ((v65 & 1) != 0)
        v66 = (int *)(v51 + 16);
      else
        v66 = (int *)(v65 + 4);
      v67 = *v66;
      goto LABEL_120;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v63 = *(_QWORD *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_124:
      v14 = !v63;
      goto LABEL_104;
    }
LABEL_122:
    v14 = 1;
    goto LABEL_104;
  }
  v14 = v51 == 7;
LABEL_104:
  v60 = *(uint64_t **)&v72[0];
  if (*(_QWORD *)&v72[0])
  {
    v68[0] = (WebCore::Document *)&v70;
    v62 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v72[0], (uint64_t *)v68);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v60, v62);
  }
  if (v71 != (WTF *)((char *)v72 + 8) && v71)
    WTF::fastFree(v71, v28);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::pageScaleFactorChanged(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(float *)(v5 + 356);
          v7 = v6;
          if (COERCE__INT64(fabs(v6)) <= 0x7FEFFFFFFFFFFFFFLL
            && (v8 = (int)v6, (double)(int)v8 == v7)
            && ((_DWORD)v8 || (LODWORD(v6) & 0x80000000) == 0))
          {
            v9 = v8 | 0xFFFE000000000000;
          }
          else
          {
            v9 = *(_QWORD *)&v7 + 0x2000000000000;
          }
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          *v10 = off_1E33C5D50;
          v10[1] = v1;
          v10[2] = "pageScaleFactor";
          v10[3] = 16;
          v10[4] = v9;
          v11 = v10;
          WebCore::HTMLMediaElement::setupAndCallJS(v1, &v11);
          return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::getCurrentMediaControlsStatus(void)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::call(uint64_t a1, JSC::JSGlobalObject *a2, WebCore *this, WebCore::HTMLMediaElement *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF *v27;
  _OWORD v28[4];
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v6 = *((_QWORD *)a2 + 7);
  v7 = WebCore::controllerJSValue(this, a2, *(WebCore::JSDOMGlobalObject **)(a1 + 8), a4);
  v32 = v7;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  if ((v7 & 0xFFFE000000000002) != 0)
  {
    v8 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v32, this);
  }
  else
  {
    if (*(unsigned __int8 *)(v7 + 5) > 0x16u)
      goto LABEL_7;
    v8 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v7, this);
  }
  v7 = v8;
LABEL_7:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get((JSC::Structure *)v7, this, (unint64_t)v25);
  v31 = v10;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v9);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (*(_QWORD *)(v6 + 16) || (v10 & 0xFFFFFFFFFFFFFFF7) == 2)
    return 0;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    v12 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v31, this);
  }
  else
  {
    if (*(unsigned __int8 *)(v10 + 5) > 0x16u)
      goto LABEL_20;
    v12 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, this);
  }
  v10 = v12;
LABEL_20:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  if (*(_BYTE *)(v10 + 5) == 26)
    JSC::JSFunction::getCallData((JSC::JSFunction *)v10, (JSCell *)v9);
  else
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v30, v10);
  LOBYTE(v25) = 0;
  v26 = 0x800000000;
  v27 = (WTF *)((char *)v28 + 8);
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  if (!LOBYTE(v30[0]))
    return 0;
  v23 = (WTF::StringImpl *)((char *)v28 + 8);
  v24 = 0;
  v14 = JSC::call();
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
  {
    v19 = 0;
  }
  else
  {
    if ((v14 & 0xFFFE000000000002) != 0)
    {
      v15 = 0;
    }
    else
    {
      JSC::JSCell::getString((JSC::JSCell *)v14, this);
      v15 = v23;
    }
    v16 = *(WTF::StringImpl ***)(a1 + 16);
    v23 = 0;
    v17 = *v16;
    *v16 = v15;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v23;
    v23 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = 1;
  }
  v20 = *(uint64_t **)&v28[0];
  if (*(_QWORD *)&v28[0])
  {
    v23 = (WTF::StringImpl *)&v26;
    v22 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v28[0], (uint64_t *)&v23);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v22);
  }
  if (v27 != (WTF *)((char *)v28 + 8) && v27)
    WTF::fastFree(v27, v13);
  return v19;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::PlatformMediaSessionRemoteControlCommandType>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned __int8 *a4)
{
  uint64_t result;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  _BYTE v46[12];
  int v47;
  WTF::StringImpl *v48[3];

  v48[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WebCore::convertEnumerationToString(*a4, &v42);
  v8 = (WTF::StringImpl *)v42;
  if (!v43)
  {
    v9 = 0;
    if (v42)
      goto LABEL_3;
LABEL_72:
    v10 = 0;
    goto LABEL_4;
  }
  v9 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_3:
  v10 = *(_DWORD *)(v42 + 4);
LABEL_4:
  if ((v10 | v9) < 0 || (result = (v9 + v10), __OFADD__(v9, v10)))
  {
    v44 = 0;
    goto LABEL_76;
  }
  if (v43)
  {
    v11 = *((_DWORD *)v43 + 4);
    v12 = (v11 >> 2) & 1;
    if (v42 && (v11 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v42)
    {
LABEL_9:
      v12 = (*(unsigned __int8 *)(v42 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v12 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v43, v42, &v44);
  if (!v44)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v42 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v13);
    else
      *(_DWORD *)v8 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v46 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v27 = *a4;
              v47 = 0;
              WebCore::convertEnumerationToString(v27, v48);
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = *(_DWORD *)buf;
              v30 = *(_QWORD *)&v46[4];
              if (*(_QWORD *)&v46[4])
                **(_DWORD **)&v46[4] += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v47;
              v31 = v48[0];
              if (v48[0])
                *(_DWORD *)v48[0] += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v48[0];
              v48[0] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = *(WTF::StringImpl **)&v46[4];
              *(_QWORD *)&v46[4] = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleUpdateMediaState(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int16 v7;
  __int16 v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v1 + 1824) + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)(a1 + 16), "lambda(), task fired");
  }
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1848))(v1);
  if (*(_DWORD *)(v1 + 1644) != (_DWORD)result)
  {
    *(_DWORD *)(v1 + 1644) = (_DWORD)result;
    v4 = *(_QWORD *)(v1 + 1600);
    if (!v4)
    {
      WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v1);
      v4 = *(_QWORD *)(v1 + 1600);
      LODWORD(result) = *(_DWORD *)(v1 + 1644);
    }
    WebCore::Document::playbackTargetPickerClientStateDidChange(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 40) + 8), v4, result);
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
    *(_DWORD *)(v5 + 24) += 2;
    result = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)v5);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      v7 = *(_WORD *)(v5 + 30);
      if ((v7 & 0x400) == 0)
      {
        v8 = *(_WORD *)(v5 + 28);
        if ((v8 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v5, v6);
        }
        else
        {
          if ((v8 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
            v7 = *(_WORD *)(v5 + 30);
          }
          *(_WORD *)(v5 + 30) = v7 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        }
      }
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::HTMLMediaElement::AutoplayEventPlaybackState>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *this, int *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int128 buf;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString(this);
  v10 = *a4;
  if ((byte_1EE337C0A & 1) == 0)
  {
    dword_1ECE7B9B0 += 2;
    qword_1EE337C20[6] = &dword_1ECE7B9B0;
    dword_1ECE7B9D0 += 2;
    qword_1EE337C20[7] = &dword_1ECE7B9D0;
    dword_1ECE7B9F0 += 2;
    qword_1EE337C20[8] = &dword_1ECE7B9F0;
    dword_1ECE7BA10 += 2;
    qword_1EE337C20[9] = &dword_1ECE7BA10;
    byte_1EE337C0A = 1;
  }
  v11 = *(_QWORD *)&_MergedGlobals_1512[8 * v10 + 72];
  if (v11)
    *(_DWORD *)v11 += 2;
  if (v46)
  {
    v12 = *((_DWORD *)v46 + 1);
    if (v11)
    {
LABEL_7:
      v13 = *(_DWORD *)(v11 + 4);
      goto LABEL_8;
    }
  }
  else
  {
    v12 = 0;
    if (v11)
      goto LABEL_7;
  }
  v13 = 0;
LABEL_8:
  if ((v13 | v12) < 0)
    goto LABEL_90;
  v14 = (v12 + v13);
  if (__OFADD__(v12, v13))
    goto LABEL_90;
  if (v46)
  {
    v15 = *((_DWORD *)v46 + 4);
    if (v11)
      v16 = (*((_DWORD *)v46 + 4) & 4) == 0;
    else
      v16 = 1;
    if (v16)
    {
LABEL_16:
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14, (v15 >> 2) & 1, (uint64_t)v46, v11, &v47);
      if (v47)
      {
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
        goto LABEL_20;
      }
LABEL_91:
      __break(0xC471u);
      return result;
    }
LABEL_15:
    v15 = *(unsigned __int8 *)(v11 + 16);
    goto LABEL_16;
  }
  if (v11)
    goto LABEL_15;
  if (!(_DWORD)v14)
  {
    v43 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_88;
  }
  if ((v14 & 0x80000000) != 0
    || (result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v14 + 20)), (v43 = buf) == 0))
  {
LABEL_90:
    v47 = 0;
    goto LABEL_91;
  }
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v43 + 4) = v14;
  *(_QWORD *)(v43 + 8) = v43 + 20;
  *(_DWORD *)(v43 + 16) = 4;
LABEL_88:
  v47 = (WTF::StringImpl *)v43;
LABEL_20:
  v17 = v46;
  v46 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v9);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(NSObject **)(a1 + 32);
  v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v19)
  {
    WTF::String::utf8();
    v21 = v44 ? (char *)v44 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v21;
    _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v19 = (uint64_t)v44;
    v44 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        v19 = WTF::fastFree((WTF *)v19, v20);
      else
        --*(_DWORD *)v19;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v23 = *v22;
      if ((v23 & 1) != 0)
        break;
      v24 = __ldaxr(v22);
      if (v24 == v23)
      {
        if (!__stxr(v23 | 1, v22))
        {
          v25 = WTF::Logger::observers((WTF::Logger *)v19);
          v26 = *(unsigned int *)(v25 + 12);
          if ((_DWORD)v26)
          {
            v27 = *(uint64_t **)v25;
            v28 = *(_QWORD *)v25 + 8 * v26;
            do
            {
              v29 = *v27;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v30 = *a4;
              v49 = 0;
              if ((byte_1EE337C0A & 1) == 0)
              {
                dword_1ECE7B9B0 += 2;
                qword_1EE337C20[6] = &dword_1ECE7B9B0;
                dword_1ECE7B9D0 += 2;
                qword_1EE337C20[7] = &dword_1ECE7B9D0;
                dword_1ECE7B9F0 += 2;
                qword_1EE337C20[8] = &dword_1ECE7B9F0;
                dword_1ECE7BA10 += 2;
                qword_1EE337C20[9] = &dword_1ECE7BA10;
                byte_1EE337C0A = 1;
              }
              v31 = *(WTF::StringImpl **)&_MergedGlobals_1512[8 * v30 + 72];
              if (v31)
                *(_DWORD *)v31 += 2;
              v50 = v31;
              v44 = 0;
              v45 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v45) = 2;
              v44 = v32;
              v33 = HIDWORD(v45);
              *((_DWORD *)v32 + 4 * HIDWORD(v45)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v49;
              v35 = v50;
              if (v50)
                *(_DWORD *)v50 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              HIDWORD(v45) = v33 + 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v44);
              v36 = v44;
              if (HIDWORD(v45))
              {
                v37 = 16 * HIDWORD(v45);
                v38 = (WTF::StringImpl **)((char *)v44 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v36 = v44;
              }
              if (v36)
              {
                v44 = 0;
                LODWORD(v45) = 0;
                WTF::fastFree(v36, v20);
              }
              v40 = v50;
              v50 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v20);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v28);
          }
          v42 = __ldxr(v22);
          if (v42 == 1)
          {
            if (!__stlxr(0, v22))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::isVisibleInViewportChanged(void)::$_0,void>::call(WTF::MonotonicTime *result)
{
  WebCore::HTMLMediaElement *v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::MediaElementSession *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  double v11;
  WTF *v12;
  void *v13;

  v1 = (WebCore::HTMLMediaElement *)*((_QWORD *)result + 1);
  v2 = *((_QWORD *)v1 + 15);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
      {
        v4 = (WebCore::MediaElementSession *)*((_QWORD *)v1 + 200);
        if (!v4)
        {
          WebCore::HTMLMediaElement::initializeMediaSession(v1);
          v4 = (WebCore::MediaElementSession *)*((_QWORD *)v1 + 200);
        }
        WebCore::MediaElementSession::isVisibleInViewportChanged(v4);
        result = WebCore::HTMLMediaElement::updateShouldAutoplay(v1, v5);
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 5) + 8) + 528);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 24);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 8);
              if (v9)
              {
                v10 = (*(_DWORD *)v9)++;
                if ((*(_QWORD *)(v9 + 1064) & 0xFFFFFFFFFFFFLL) == 0
                  || *(double *)((*(_QWORD *)(v9 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                {
                  *(_QWORD *)(v9 + 1056) = 0;
                  WTF::MonotonicTime::now(result);
                  result = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v9 + 1032, v11 + 0.0);
                  v10 = *(_DWORD *)v9 - 1;
                }
                if (v10)
                {
                  *(_DWORD *)v9 = v10;
                }
                else
                {
                  WebCore::Page::~Page(v9);
                  return (WTF::MonotonicTime *)WTF::fastFree(v12, v13);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::scheduleUpdateShouldAutoplay(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebCore::HTMLMediaElement::updateShouldAutoplay(*(WTF::StringImpl **)(a1 + 8), a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::playbackControlsManagerBehaviorRestrictionsTimerFired(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  WTF *v9;
  void *v10;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(unsigned __int8 **)(v1 + 1600);
  if (!result)
  {
    WebCore::HTMLMediaElement::initializeMediaSession((WebCore::HTMLMediaElement *)v1);
    result = *(unsigned __int8 **)(v1 + 1600);
  }
  if ((*(_DWORD *)(v1 + 1265) & 2) == 0 && result[48] - 1 >= 2)
  {
    result = (unsigned __int8 *)WebCore::MediaElementSession::addBehaviorRestriction((uint64_t)result, 0x4000);
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            v7 = (*(_DWORD *)v6)++;
            if ((*(_QWORD *)(v6 + 1064) & 0xFFFFFFFFFFFFLL) == 0
              || *(double *)((*(_QWORD *)(v6 + 1064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
            {
              *(_QWORD *)(v6 + 1056) = 0;
              WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
              result = (unsigned __int8 *)WebCore::TimerBase::setNextFireTime(v6 + 1032, v8 + 0.0);
              v7 = *(_DWORD *)v6 - 1;
            }
            if (v7)
            {
              *(_DWORD *)v6 = v7;
            }
            else
            {
              WebCore::Page::~Page(v6);
              return (unsigned __int8 *)WTF::fastFree(v9, v10);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::HTMLMediaElement::setShowingStats(BOOL)::$_0,BOOL,WebCore::JSDOMGlobalObject &,JSC::JSGlobalObject &,WebCore::ScriptController &,WebCore::DOMWrapperWorld &>::call(uint64_t a1, JSC::JSGlobalObject *a2, WebCore *this, WebCore::HTMLMediaElement *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  double v16;
  _BOOL8 v17;
  uint64_t *v18;
  _QWORD *v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  _OWORD v31[4];
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v6 = *((_QWORD *)a2 + 7);
  v7 = WebCore::controllerJSValue(this, a2, *(WebCore::JSDOMGlobalObject **)(a1 + 8), a4);
  v35 = v7;
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  if ((v7 & 0xFFFE000000000002) != 0)
  {
    v8 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v35, this);
  }
  else
  {
    if (*(unsigned __int8 *)(v7 + 5) > 0x16u)
      goto LABEL_7;
    v8 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v7, this);
  }
  v7 = v8;
LABEL_7:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get((JSC::Structure *)v7, this, (unint64_t)v28);
  v34 = v10;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v9);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (*(_QWORD *)(v6 + 16) || (v10 & 0xFFFFFFFFFFFFFFF7) == 2)
    return 0;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    v12 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v34, this);
  }
  else
  {
    if (*(unsigned __int8 *)(v10 + 5) > 0x16u)
      goto LABEL_20;
    v12 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, this);
  }
  v10 = v12;
LABEL_20:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  if (*(_BYTE *)(v10 + 5) == 26)
    JSC::JSFunction::getCallData((JSC::JSFunction *)v10, (JSCell *)v9);
  else
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v33, v10);
  if (!LOBYTE(v33[0]))
    return 0;
  LOBYTE(v28) = 0;
  v30 = (WTF *)((char *)v31 + 8);
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  v13 = 6;
  if (*(_BYTE *)(a1 + 16))
    v13 = 7;
  *((_QWORD *)&v31[0] + 1) = v13;
  v29 = 0x800000001;
  v26 = (uint64_t *)v31 + 1;
  v27 = 1;
  v15 = JSC::call();
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
  {
    v17 = 0;
    goto LABEL_31;
  }
  if (v15 >= 0xFFFE000000000000)
  {
    v21 = (_DWORD)v15 == 0;
    goto LABEL_61;
  }
  *(_QWORD *)&v16 = v15 - 0x2000000000000;
  if (v15 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v16 <= 0.0)
    {
      v17 = v16 < 0.0;
      goto LABEL_31;
    }
    goto LABEL_59;
  }
  if ((v15 & 0xFFFE000000000002) == 0)
  {
    v22 = *(unsigned __int8 *)(v15 + 5);
    if (v22 == 3)
    {
      v25 = *(_DWORD *)(v15 + 8);
LABEL_57:
      v21 = v25 == 0;
      goto LABEL_61;
    }
    if (v22 == 2)
    {
      v23 = *(_QWORD *)(v15 + 8);
      if ((v23 & 1) != 0)
        v24 = (int *)(v15 + 16);
      else
        v24 = (int *)(v23 + 4);
      v25 = *v24;
      goto LABEL_57;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xA) & 1) != 0)
    {
      v21 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_61:
      v17 = !v21;
      goto LABEL_31;
    }
LABEL_59:
    v17 = 1;
    goto LABEL_31;
  }
  v17 = v15 == 7;
LABEL_31:
  v18 = *(uint64_t **)&v31[0];
  if (*(_QWORD *)&v31[0])
  {
    v26 = &v29;
    v20 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v31[0], (uint64_t *)&v26);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v18, v20);
  }
  if (v30 != (WTF *)((char *)v31 + 8) && v30)
    WTF::fastFree(v30, v14);
  return v17;
}

void WebCore::HTMLMeterElement::~HTMLMeterElement(WebCore::HTMLMeterElement *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::HTMLMeterElement::create@<X0>(WebCore::HTMLMeterElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  _DWORD *v8;

  v7 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v8 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v8;
  *(_QWORD *)v7 = off_1E33C6060;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 96) = v8;
  *a3 = v7;
  return WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v7);
}

void WebCore::HTMLMeterElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *a2@<X1>, uint64_t *a3@<X8>)
{
  void (**v6)(WebCore::RenderThemeIOS *__hidden);
  const WebCore::Element *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  {
    v6 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v10 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    v6 = &off_1E335BC30;
    *(_QWORD *)v10 = &off_1E335BC30;
  }
  if ((((uint64_t (*)(uint64_t *, _QWORD))v6[45])(&WebCore::RenderTheme::singleton(void)::theme, (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 148) >> 14) & 0x7F) & 1) != 0)
  {
    v8 = bmalloc::api::isoAllocate();
    v9 = (_QWORD *)WebCore::RenderBlockFlow::RenderBlockFlow(v8, 23, (uint64_t)a1, a2, 0);
    *v9 = off_1E342BD88;
    *a3 = (uint64_t)v9;
  }
  else
  {
    WebCore::RenderElement::createFor(a1, a2, 0, v7, a3);
  }
}

uint64_t WebCore::HTMLMeterElement::childShouldCreateRenderer(WebCore::HTMLMeterElement *this, const WebCore::Node *a2)
{
  uint64_t result;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 23)
      return 0;
  }
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return 0;
  return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
}

void WebCore::HTMLMeterElement::attributeChanged(WebCore::HTMLMeterElement *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  unsigned int v6;
  BOOL v7;

  v6 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v6 <= 0x2F5)
  {
    v7 = v6 - 559 > 0x1A || ((1 << (v6 - 47)) & 0x4080001) == 0;
    if (v7 && v6 != 506)
      goto LABEL_12;
LABEL_11:
    WebCore::HTMLMeterElement::didElementStateChange(a1);
    return;
  }
  if (v6 == 899 || v6 == 758)
    goto LABEL_11;
LABEL_12:
  WebCore::HTMLElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, a6);
}

uint64_t WebCore::HTMLMeterElement::didElementStateChange(WebCore::HTMLMeterElement *this)
{
  WebCore::StyledElement *v2;
  double v3;
  WebCore::Element *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __n128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  char *v17;
  __n128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __n128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  __int128 v39;
  char v40;
  WTF::StringImpl *v41;

  v2 = (WebCore::StyledElement *)*((_QWORD *)this + 14);
  v3 = WebCore::HTMLMeterElement::valueRatio(this);
  WebCore::StyledElement::setInlineStyleProperty(v2, (WTF::StringImpl *)0x18A, 3, 0, v3 * 100.0);
  v4 = (WebCore::Element *)*((_QWORD *)this + 14);
  WebCore::HTMLMeterElement::low(this);
  v6 = v5;
  WebCore::HTMLMeterElement::high(this);
  v8 = v7;
  WebCore::HTMLMeterElement::value(this);
  v10 = v9;
  WebCore::HTMLMeterElement::optimum(this);
  if (v11 < v6)
  {
    if (v10 > v6)
    {
      if (v10 <= v8)
      {
LABEL_28:
        WTF::AtomStringImpl::add();
        WebCore::Element::setAttribute(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, &v41, 0, &v36, v22);
        if (v38)
        {
          v24 = v37;
          v37 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        v25 = v41;
        v41 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v23);
          else
            *(_DWORD *)v25 -= 2;
        }
        v16 = &WebCore::UserAgentParts::webkitMeterSuboptimumValue(void)::webkitMeterSuboptimumValue;
          goto LABEL_36;
        WTF::AtomStringImpl::add();
        v16 = &WebCore::UserAgentParts::webkitMeterSuboptimumValue(void)::webkitMeterSuboptimumValue;
        WebCore::UserAgentParts::webkitMeterSuboptimumValue(void)::webkitMeterSuboptimumValue = (uint64_t)v41;
LABEL_63:
        *v17 = 1;
        goto LABEL_36;
      }
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    if (v6 > v10 || v10 > v8)
      goto LABEL_28;
    goto LABEL_19;
  }
  if (v8 <= v10)
  {
LABEL_19:
    WTF::AtomStringImpl::add();
    WebCore::Element::setAttribute(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, &v41, 0, &v39, v18);
    if (v40)
    {
      v20 = (WTF::StringImpl *)*((_QWORD *)&v39 + 1);
      *((_QWORD *)&v39 + 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    v21 = v41;
    v41 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v16 = &WebCore::UserAgentParts::webkitMeterOptimumValue(void)::webkitMeterOptimumValue;
    {
      WTF::AtomStringImpl::add();
      v16 = &WebCore::UserAgentParts::webkitMeterOptimumValue(void)::webkitMeterOptimumValue;
      WebCore::UserAgentParts::webkitMeterOptimumValue(void)::webkitMeterOptimumValue = (uint64_t)v41;
      goto LABEL_63;
    }
    goto LABEL_36;
  }
  if (v6 <= v10)
    goto LABEL_28;
LABEL_8:
  WTF::AtomStringImpl::add();
  WebCore::Element::setAttribute(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, &v41, 0, &v33, v12);
  if (v35)
  {
    v14 = v34;
    v34 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v15 = v41;
  v41 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = &WebCore::UserAgentParts::webkitMeterEvenLessGoodValue(void)::webkitMeterEvenLessGoodValue;
  {
    WTF::AtomStringImpl::add();
    v16 = &WebCore::UserAgentParts::webkitMeterEvenLessGoodValue(void)::webkitMeterEvenLessGoodValue;
    WebCore::UserAgentParts::webkitMeterEvenLessGoodValue(void)::webkitMeterEvenLessGoodValue = (uint64_t)v41;
    goto LABEL_63;
  }
LABEL_36:
  v26 = *((_QWORD *)v4 + 13);
  if (!v26)
    goto LABEL_48;
  v27 = *(_DWORD *)(v26 + 4);
  if ((v27 & 1) != 0)
  {
    v28 = *(uint64_t **)(v26 + 40);
    v29 = *(_DWORD *)(v26 + 52);
    if (v29)
      goto LABEL_41;
LABEL_48:
    v30 = 0xFFFFFFFFLL;
    goto LABEL_49;
  }
  v28 = (uint64_t *)(v26 + 32);
  v29 = v27 >> 5;
  if (!v29)
    goto LABEL_48;
LABEL_41:
  v30 = 0;
  while (1)
  {
    v31 = *v28;
    if (*v28 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v30;
    v28 += 2;
    if (v29 == v30)
      goto LABEL_48;
  }
LABEL_49:
  WebCore::Element::setAttributeInternal(v4, v30, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)v16, 0);
  result = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C51E0CLL);
    }
    if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 23
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v39) = 0;
      v40 = 0;
      LOBYTE(v36) = 0;
      v38 = 0;
      return WebCore::RenderObject::issueRepaint(result, &v39, 0, 0, (uint64_t)&v36);
    }
  }
  return result;
}

double WebCore::HTMLMeterElement::min(WebCore::HTMLMeterElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v16;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v7 = *v5;
  result = 0.0;
  if (*v5)
  {
    v9 = *(unsigned __int8 **)(v7 + 8);
    v10 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v10)
      {
        for (i = *(_QWORD *)(v7 + 8); ; ++i)
        {
          v13 = *v9++;
          v12 = v13;
          v14 = (1 << v13) & 0x100003600;
          if (v13 > 0x20 || v14 == 0)
            break;
          if (!--v10)
            return result;
        }
        v16 = v12 > 0x2E || ((1 << v12) & 0x680000000000) == 0;
        if (!v16 || v12 - 48 <= 9)
        {
          WTF::parseDouble();
          if (result == 0.0)
            return 0.0;
        }
      }
    }
    else
    {
      return WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v9, v10, v10);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLMeterElement::setMin(WebCore::HTMLMeterElement *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::AtomString::number(this, a2);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::minAttr, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLMeterElement::max(WebCore::HTMLMeterElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t i;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  BOOL v48;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if (v3 >> 5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::maxAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4);
    v11 = (unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0x100000000;
  }
  if (!v2)
    goto LABEL_26;
  v12 = *(_DWORD *)(v2 + 4);
  if ((v12 & 1) == 0)
  {
    v13 = v2 + 32;
    v14 = v12 >> 5;
    if (v12 >> 5)
      goto LABEL_18;
LABEL_26:
    v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_27;
  }
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_DWORD *)(v2 + 52);
  if (!v14)
    goto LABEL_26;
LABEL_18:
  v15 = v14;
  v16 = (uint64_t *)(v13 + 8);
  while (1)
  {
    v17 = *(v16 - 1);
    if (v17 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v15)
    {
      v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_27:
  v18 = *v16;
  if (*v16)
  {
    v19 = *(unsigned __int8 **)(v18 + 8);
    v20 = *(unsigned int *)(v18 + 4);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v18 + 8);
        while (1)
        {
          v23 = *v19++;
          v22 = v23;
          v24 = (1 << v23) & 0x100003600;
          if (v23 > 0x20 || v24 == 0)
            break;
          ++v21;
          if (!--v20)
            goto LABEL_44;
        }
        v26 = v22 > 0x2E || ((1 << v22) & 0x680000000000) == 0;
        if (!v26 || v22 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v19, v20, v20);
    }
  }
LABEL_44:
  if ((v11 & 0x100000000) != 0)
  {
    v27 = 0;
    if (v10)
    {
      while (1)
      {
        v28 = *(unsigned __int8 *)(v9 + v27);
        v29 = v28 > 0x20;
        v30 = (1 << v28) & 0x100003600;
        if (v29 || v30 == 0)
          break;
        if (v10 == ++v27)
          goto LABEL_60;
      }
    }
    if (v10 != v27)
    {
      v32 = *(unsigned __int8 *)(v9 + v27);
      v33 = v32 > 0x2E || ((1 << v32) & 0x680000000000) == 0;
      if (!v33 || v32 - 48 <= 9)
        WTF::parseDouble();
    }
  }
  else
  {
    WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>(v9, v10, v10);
  }
LABEL_60:
  v34 = *((_QWORD *)this + 13);
  if (!v34)
    goto LABEL_71;
  v35 = *(_DWORD *)(v34 + 4);
  if ((v35 & 1) == 0)
  {
    v36 = v34 + 32;
    LODWORD(v37) = v35 >> 5;
    if ((_DWORD)v37)
      goto LABEL_63;
LABEL_71:
    v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_72;
  }
  v36 = *(_QWORD *)(v34 + 40);
  LODWORD(v37) = *(_DWORD *)(v34 + 52);
  if (!(_DWORD)v37)
    goto LABEL_71;
LABEL_63:
  v37 = v37;
  v38 = (uint64_t *)(v36 + 8);
  while (1)
  {
    v39 = *(v38 - 1);
    if (v39 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v38 += 2;
    if (!--v37)
    {
      v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_72:
  v40 = *v38;
  if (*v38)
  {
    v41 = *(unsigned __int8 **)(v40 + 8);
    v42 = *(unsigned int *)(v40 + 4);
    if ((*(_BYTE *)(v40 + 16) & 4) != 0)
    {
      if ((_DWORD)v42)
      {
        for (i = *(_QWORD *)(v40 + 8); ; ++i)
        {
          v45 = *v41++;
          v44 = v45;
          v46 = (1 << v45) & 0x100003600;
          if (v45 > 0x20 || v46 == 0)
            break;
          if (!--v42)
            return;
        }
        v48 = v44 > 0x2E || ((1 << v44) & 0x680000000000) == 0;
        if (!v48 || v44 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v41, v42, v42);
    }
  }
}

WTF::StringImpl *WebCore::HTMLMeterElement::setMax(WebCore::HTMLMeterElement *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::AtomString::number(this, a2);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::maxAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
    {
      break;
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::maxAttr, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLMeterElement::value(WebCore::HTMLMeterElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v31;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (*v6)
  {
    v9 = *(unsigned __int8 **)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v8 + 8);
        while (1)
        {
          v13 = *v9++;
          v12 = v13;
          v14 = (1 << v13) & 0x100003600;
          if (v13 > 0x20 || v14 == 0)
            break;
          ++v11;
          if (!--v10)
            goto LABEL_30;
        }
        v16 = v12 > 0x2E || ((1 << v12) & 0x680000000000) == 0;
        if (!v16 || v12 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v9, v10, v10);
    }
  }
LABEL_30:
  v17 = *((_QWORD *)this + 13);
  if (!v17)
    goto LABEL_41;
  v18 = *(_DWORD *)(v17 + 4);
  if ((v18 & 1) == 0)
  {
    v19 = v17 + 32;
    LODWORD(v20) = v18 >> 5;
    if ((_DWORD)v20)
      goto LABEL_33;
LABEL_41:
    v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_42;
  }
  v19 = *(_QWORD *)(v17 + 40);
  LODWORD(v20) = *(_DWORD *)(v17 + 52);
  if (!(_DWORD)v20)
    goto LABEL_41;
LABEL_33:
  v20 = v20;
  v21 = (uint64_t *)(v19 + 8);
  while (1)
  {
    v22 = *(v21 - 1);
    if (v22 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v21 += 2;
    if (!--v20)
    {
      v21 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_42:
  v23 = *v21;
  if (*v21)
  {
    v24 = *(unsigned __int8 **)(v23 + 8);
    v25 = *(unsigned int *)(v23 + 4);
    if ((*(_BYTE *)(v23 + 16) & 4) != 0)
    {
      if ((_DWORD)v25)
      {
        v26 = *(_QWORD *)(v23 + 8);
        while (1)
        {
          v28 = *v24++;
          v27 = v28;
          v29 = (1 << v28) & 0x100003600;
          if (v28 > 0x20 || v29 == 0)
            break;
          ++v26;
          if (!--v25)
            goto LABEL_59;
        }
        v31 = v27 > 0x2E || ((1 << v27) & 0x680000000000) == 0;
        if (!v31 || v27 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v24, v25, v25);
    }
  }
LABEL_59:
  WebCore::HTMLMeterElement::max(this);
}

WTF::StringImpl *WebCore::HTMLMeterElement::setValue(WebCore::HTMLMeterElement *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::AtomString::number(this, a2);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLMeterElement::low(WebCore::HTMLMeterElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  BOOL v48;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if (v3 >> 5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::lowAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::lowAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::lowAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4);
    v11 = (unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0x100000000;
  }
  if (!v2)
    goto LABEL_26;
  v12 = *(_DWORD *)(v2 + 4);
  if ((v12 & 1) == 0)
  {
    v13 = v2 + 32;
    v14 = v12 >> 5;
    if (v12 >> 5)
      goto LABEL_18;
LABEL_26:
    v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_27;
  }
  v13 = *(_QWORD *)(v2 + 40);
  v14 = *(_DWORD *)(v2 + 52);
  if (!v14)
    goto LABEL_26;
LABEL_18:
  v15 = v14;
  v16 = (uint64_t *)(v13 + 8);
  while (1)
  {
    v17 = *(v16 - 1);
    if (v17 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v15)
    {
      v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_27:
  v18 = *v16;
  if (*v16)
  {
    v19 = *(unsigned __int8 **)(v18 + 8);
    v20 = *(unsigned int *)(v18 + 4);
    if ((*(_BYTE *)(v18 + 16) & 4) == 0)
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v19, v20, v20);
      if ((v11 & 0x100000000) != 0)
        goto LABEL_45;
LABEL_92:
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>(v9, v10, v10);
      goto LABEL_60;
    }
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(v18 + 8);
      while (1)
      {
        v23 = *v19++;
        v22 = v23;
        v24 = (1 << v23) & 0x100003600;
        if (v23 > 0x20 || v24 == 0)
          break;
        ++v21;
        if (!--v20)
          goto LABEL_44;
      }
      v26 = v22 > 0x2E || ((1 << v22) & 0x680000000000) == 0;
      if (!v26 || v22 - 48 <= 9)
        WTF::parseDouble();
    }
  }
LABEL_44:
  if ((v11 & 0x100000000) == 0)
    goto LABEL_92;
LABEL_45:
  v27 = 0;
  if (v10)
  {
    while (1)
    {
      v28 = *(unsigned __int8 *)(v9 + v27);
      v29 = v28 > 0x20;
      v30 = (1 << v28) & 0x100003600;
      if (v29 || v30 == 0)
        break;
      if (v10 == ++v27)
        goto LABEL_60;
    }
  }
  if (v10 != v27)
  {
    v32 = *(unsigned __int8 *)(v9 + v27);
    v33 = v32 > 0x2E || ((1 << v32) & 0x680000000000) == 0;
    if (!v33 || v32 - 48 <= 9)
      WTF::parseDouble();
  }
LABEL_60:
  v34 = *((_QWORD *)this + 13);
  if (!v34)
    goto LABEL_71;
  v35 = *(_DWORD *)(v34 + 4);
  if ((v35 & 1) == 0)
  {
    v36 = v34 + 32;
    LODWORD(v37) = v35 >> 5;
    if ((_DWORD)v37)
      goto LABEL_63;
LABEL_71:
    v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_72;
  }
  v36 = *(_QWORD *)(v34 + 40);
  LODWORD(v37) = *(_DWORD *)(v34 + 52);
  if (!(_DWORD)v37)
    goto LABEL_71;
LABEL_63:
  v37 = v37;
  v38 = (uint64_t *)(v36 + 8);
  while (1)
  {
    v39 = *(v38 - 1);
    if (v39 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v38 += 2;
    if (!--v37)
    {
      v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_72:
  v40 = *v38;
  if (*v38)
  {
    v41 = *(unsigned __int8 **)(v40 + 8);
    v42 = *(unsigned int *)(v40 + 4);
    if ((*(_BYTE *)(v40 + 16) & 4) != 0)
    {
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD *)(v40 + 8);
        while (1)
        {
          v45 = *v41++;
          v44 = v45;
          v46 = (1 << v45) & 0x100003600;
          if (v45 > 0x20 || v46 == 0)
            break;
          ++v43;
          if (!--v42)
            goto LABEL_89;
        }
        v48 = v44 > 0x2E || ((1 << v44) & 0x680000000000) == 0;
        if (!v48 || v44 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v41, v42, v42);
    }
  }
LABEL_89:
  WebCore::HTMLMeterElement::max(this);
}

WTF::StringImpl *WebCore::HTMLMeterElement::setLow(WebCore::HTMLMeterElement *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::AtomString::number(this, a2);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::lowAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::lowAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::lowAttr + 32))
    {
      break;
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::lowAttr, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLMeterElement::high(WebCore::HTMLMeterElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v17;
  BOOL v18;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::highAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::highAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::highAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(unsigned int *)(v8 + 4);
    WebCore::HTMLMeterElement::max(this);
    if ((v9 & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        v12 = 0;
        while (1)
        {
          v13 = *(unsigned __int8 *)(v10 + v12);
          v14 = v13 > 0x20;
          v15 = (1 << v13) & 0x100003600;
          if (v14 || v15 == 0)
            break;
          if (v11 == ++v12)
            goto LABEL_34;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      if (v11 != v12)
      {
        v17 = *(unsigned __int8 *)(v10 + v12);
        v18 = v17 > 0x2E || ((1 << v17) & 0x680000000000) == 0;
        if (!v18 || v17 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>(v10, v11, v11);
    }
  }
  else
  {
    WebCore::HTMLMeterElement::max(this);
  }
LABEL_34:
  WebCore::HTMLMeterElement::low(this);
  WebCore::HTMLMeterElement::max(this);
}

WTF::StringImpl *WebCore::HTMLMeterElement::setHigh(WebCore::HTMLMeterElement *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::AtomString::number(this, a2);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::highAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::highAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::highAttr + 32))
    {
      break;
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::highAttr, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLMeterElement::optimum(WebCore::HTMLMeterElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  BOOL v48;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::optimumAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::optimumAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::optimumAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4);
    v11 = (unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0x100000000;
  }
  WebCore::HTMLMeterElement::max(this);
  v12 = *((_QWORD *)this + 13);
  if (!v12)
    goto LABEL_26;
  v13 = *(_DWORD *)(v12 + 4);
  if ((v13 & 1) == 0)
  {
    v14 = v12 + 32;
    LODWORD(v15) = v13 >> 5;
    if ((_DWORD)v15)
      goto LABEL_18;
LABEL_26:
    v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_27;
  }
  v14 = *(_QWORD *)(v12 + 40);
  LODWORD(v15) = *(_DWORD *)(v12 + 52);
  if (!(_DWORD)v15)
    goto LABEL_26;
LABEL_18:
  v15 = v15;
  v16 = (uint64_t *)(v14 + 8);
  while (1)
  {
    v17 = *(v16 - 1);
    if (v17 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v16 += 2;
    if (!--v15)
    {
      v16 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_27:
  v18 = *v16;
  if (*v16)
  {
    v19 = *(unsigned __int8 **)(v18 + 8);
    v20 = *(unsigned int *)(v18 + 4);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v18 + 8);
        while (1)
        {
          v23 = *v19++;
          v22 = v23;
          v24 = (1 << v23) & 0x100003600;
          if (v23 > 0x20 || v24 == 0)
            break;
          ++v21;
          if (!--v20)
            goto LABEL_44;
        }
        v26 = v22 > 0x2E || ((1 << v22) & 0x680000000000) == 0;
        if (!v26 || v22 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v19, v20, v20);
    }
  }
LABEL_44:
  if ((v11 & 0x100000000) != 0)
  {
    v27 = 0;
    if (v10)
    {
      while (1)
      {
        v28 = *(unsigned __int8 *)(v9 + v27);
        v29 = v28 > 0x20;
        v30 = (1 << v28) & 0x100003600;
        if (v29 || v30 == 0)
          break;
        if (v10 == ++v27)
          goto LABEL_60;
      }
    }
    if (v10 != v27)
    {
      v32 = *(unsigned __int8 *)(v9 + v27);
      v33 = v32 > 0x2E || ((1 << v32) & 0x680000000000) == 0;
      if (!v33 || v32 - 48 <= 9)
        WTF::parseDouble();
    }
  }
  else
  {
    WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>(v9, v10, v10);
  }
LABEL_60:
  v34 = *((_QWORD *)this + 13);
  if (!v34)
    goto LABEL_71;
  v35 = *(_DWORD *)(v34 + 4);
  if ((v35 & 1) == 0)
  {
    v36 = v34 + 32;
    LODWORD(v37) = v35 >> 5;
    if ((_DWORD)v37)
      goto LABEL_63;
LABEL_71:
    v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_72;
  }
  v36 = *(_QWORD *)(v34 + 40);
  LODWORD(v37) = *(_DWORD *)(v34 + 52);
  if (!(_DWORD)v37)
    goto LABEL_71;
LABEL_63:
  v37 = v37;
  v38 = (uint64_t *)(v36 + 8);
  while (1)
  {
    v39 = *(v38 - 1);
    if (v39 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v38 += 2;
    if (!--v37)
    {
      v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_72:
  v40 = *v38;
  if (*v38)
  {
    v41 = *(unsigned __int8 **)(v40 + 8);
    v42 = *(unsigned int *)(v40 + 4);
    if ((*(_BYTE *)(v40 + 16) & 4) != 0)
    {
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD *)(v40 + 8);
        while (1)
        {
          v45 = *v41++;
          v44 = v45;
          v46 = (1 << v45) & 0x100003600;
          if (v45 > 0x20 || v46 == 0)
            break;
          ++v43;
          if (!--v42)
            goto LABEL_89;
        }
        v48 = v44 > 0x2E || ((1 << v44) & 0x680000000000) == 0;
        if (!v48 || v44 - 48 <= 9)
          WTF::parseDouble();
      }
    }
    else
    {
      WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v41, v42, v42);
    }
  }
LABEL_89:
  WebCore::HTMLMeterElement::max(this);
}

WTF::StringImpl *WebCore::HTMLMeterElement::setOptimum(WebCore::HTMLMeterElement *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::AtomString::number(this, a2);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      goto LABEL_14;
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::optimumAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::optimumAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::optimumAttr + 32))
    {
      break;
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
LABEL_14:
  WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::optimumAttr, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WebCore::HTMLMeterElement::valueRatio(WebCore::HTMLMeterElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  v9 = 0.0;
  v10 = 0.0;
  if (*v6)
  {
    v11 = *(unsigned __int8 **)(v8 + 8);
    v12 = *(unsigned int *)(v8 + 4);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v8 + 8);
        while (1)
        {
          v15 = *v11++;
          v14 = v15;
          v16 = (1 << v15) & 0x100003600;
          if (v15 > 0x20 || v16 == 0)
            break;
          ++v13;
          if (!--v12)
          {
            v10 = 0.0;
            goto LABEL_33;
          }
        }
        v10 = 0.0;
        v18 = v14 > 0x2E || ((1 << v14) & 0x680000000000) == 0;
        if (!v18 || v14 - 48 <= 9)
        {
          WTF::parseDouble();
          if (v19 == 0.0)
            v10 = 0.0;
          else
            v10 = v19;
        }
      }
    }
    else
    {
      v10 = WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v11, v12, v12);
    }
  }
LABEL_33:
  WebCore::HTMLMeterElement::max(this);
  v21 = v20;
  WebCore::HTMLMeterElement::value(this);
  if (v21 > v10)
    return (v22 - v10) / (v21 - v10);
  return v9;
}

unsigned int *WebCore::HTMLMeterElement::didAddUserAgentShadowRoot(WebCore::HTMLMeterElement *this, WebCore::ShadowRoot *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unsigned int *result;
  void *v70;
  _BYTE v71[8];
  WTF::StringImpl *v72;
  char v73;
  _BYTE v74[8];
  WTF::StringImpl *v75;
  char v76;
  _BYTE v77[8];
  WTF::StringImpl *v78;
  char v79;
  WTF::StringImpl *v80;
  _BYTE v81[8];
  WTF::StringImpl *v82;
  char v83;
  WTF::StringImpl *v84;

  if ((_MergedGlobals_188 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    qword_1ECE83570 = (uint64_t)v84;
    _MergedGlobals_188 = 1;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::styleTag;
  if (WebCore::HTMLNames::styleTag)
    ++*(_DWORD *)WebCore::HTMLNames::styleTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33CD4C8;
  *(_WORD *)(v5 + 112) = 0;
  *(_DWORD *)(v5 + 116) = 0;
  *(_DWORD *)(v5 + 120) = 0;
  *(_OWORD *)(v5 + 128) = 0uLL;
  *(_OWORD *)(v5 + 144) = 0uLL;
  *(_BYTE *)(v5 + 160) = 0;
  v8 = (WTF::StringImpl *)qword_1ECE83570;
  if (qword_1ECE83570)
    *(_DWORD *)qword_1ECE83570 += 2;
  v84 = v8;
  WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v5, (uint64_t)&v84);
  v10 = v84;
  v84 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v6, (uint64_t)v81);
  if (v83)
  {
    v12 = v82;
    v82 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v14 = bmalloc::api::isoAllocate();
  v15 = v14;
  *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v14 + 24) = 0x101C00000002;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = v13 + 96;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  ++*(_DWORD *)(v13 + 3324);
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  v16 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v14 + 96) = v16;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)v14 = off_1E33B9CC0;
  WTF::AtomStringImpl::add();
  v80 = v84;
  v17 = *(_QWORD *)(v15 + 104);
  if (!v17)
    goto LABEL_28;
  v18 = *(_DWORD *)(v17 + 4);
  if ((v18 & 1) != 0)
  {
    v19 = *(uint64_t **)(v17 + 40);
    v20 = *(_DWORD *)(v17 + 52);
    if (!v20)
    {
LABEL_28:
      v21 = 0xFFFFFFFFLL;
      goto LABEL_29;
    }
  }
  else
  {
    v19 = (uint64_t *)(v17 + 32);
    v20 = v18 >> 5;
    if (!v20)
      goto LABEL_28;
  }
  v21 = 0;
  while (1)
  {
    v22 = *v19;
    if (*v19 == WebCore::HTMLNames::idAttr
      || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
      && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
    {
      break;
    }
    ++v21;
    v19 += 2;
    if (v20 == v21)
      goto LABEL_28;
  }
LABEL_29:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v15, v21, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &v80, 0);
  v24 = v80;
  v80 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitMeterInnerElement(void)::webkitMeterInnerElement = (uint64_t)v84;
  }
  v25 = *(_QWORD *)(v15 + 104);
  if (!v25)
    goto LABEL_46;
  v26 = *(_DWORD *)(v25 + 4);
  if ((v26 & 1) != 0)
  {
    v27 = *(uint64_t **)(v25 + 40);
    v28 = *(_DWORD *)(v25 + 52);
    if (!v28)
    {
LABEL_46:
      v29 = 0xFFFFFFFFLL;
      goto LABEL_47;
    }
  }
  else
  {
    v27 = (uint64_t *)(v25 + 32);
    v28 = v26 >> 5;
    if (!v28)
      goto LABEL_46;
  }
  v29 = 0;
  while (1)
  {
    v30 = *v27;
    if (*v27 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v29;
    v27 += 2;
    if (v28 == v29)
      goto LABEL_46;
  }
LABEL_47:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v15, v29, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMeterInnerElement(void)::webkitMeterInnerElement, 0);
  WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v15, (uint64_t)v77);
  if (v79)
  {
    v32 = v78;
    v78 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  v33 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v34 = bmalloc::api::isoAllocate();
  v35 = v34;
  *(_OWORD *)(v34 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v34 + 24) = 0x101C00000002;
  *(_QWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 40) = v33 + 96;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)(v34 + 64) = 0u;
  ++*(_DWORD *)(v33 + 3324);
  *(_QWORD *)(v34 + 80) = 0;
  *(_QWORD *)(v34 + 88) = 0;
  v36 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v34 + 96) = v36;
  *(_QWORD *)(v34 + 104) = 0;
  *(_QWORD *)v34 = off_1E33B9CC0;
  WTF::AtomStringImpl::add();
  v80 = v84;
  v37 = *(_QWORD *)(v35 + 104);
  if (!v37)
    goto LABEL_65;
  v38 = *(_DWORD *)(v37 + 4);
  if ((v38 & 1) != 0)
  {
    v39 = *(uint64_t **)(v37 + 40);
    v40 = *(_DWORD *)(v37 + 52);
    if (!v40)
    {
LABEL_65:
      v41 = 0xFFFFFFFFLL;
      goto LABEL_66;
    }
  }
  else
  {
    v39 = (uint64_t *)(v37 + 32);
    v40 = v38 >> 5;
    if (!v40)
      goto LABEL_65;
  }
  v41 = 0;
  while (1)
  {
    v42 = *v39;
    if (*v39 == WebCore::HTMLNames::idAttr
      || *(_QWORD *)(v42 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
      && *(_QWORD *)(v42 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
    {
      break;
    }
    ++v41;
    v39 += 2;
    if (v40 == v41)
      goto LABEL_65;
  }
LABEL_66:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v35, v41, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &v80, 0);
  v44 = v80;
  v80 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitMeterBar(void)::webkitMeterBar = (uint64_t)v84;
  }
  v45 = *(_QWORD *)(v35 + 104);
  if (!v45)
    goto LABEL_83;
  v46 = *(_DWORD *)(v45 + 4);
  if ((v46 & 1) != 0)
  {
    v47 = *(uint64_t **)(v45 + 40);
    v48 = *(_DWORD *)(v45 + 52);
    if (!v48)
    {
LABEL_83:
      v49 = 0xFFFFFFFFLL;
      goto LABEL_84;
    }
  }
  else
  {
    v47 = (uint64_t *)(v45 + 32);
    v48 = v46 >> 5;
    if (!v48)
      goto LABEL_83;
  }
  v49 = 0;
  while (1)
  {
    v50 = *v47;
    if (*v47 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v50 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v50 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v49;
    v47 += 2;
    if (v48 == v49)
      goto LABEL_83;
  }
LABEL_84:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v35, v49, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMeterBar(void)::webkitMeterBar, 0);
  WebCore::ContainerNode::appendChild(v15, (WebCore::Node *)v35, (uint64_t)v74);
  if (v76)
  {
    v52 = v75;
    v75 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v51);
      else
        *(_DWORD *)v52 -= 2;
    }
  }
  v53 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v54 = bmalloc::api::isoAllocate();
  v56 = (WTF::StringImpl *)v54;
  *(_OWORD *)(v54 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v54 + 24) = 0x101C00000002;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = v53 + 96;
  *(_OWORD *)(v54 + 48) = 0u;
  *(_OWORD *)(v54 + 64) = 0u;
  ++*(_DWORD *)(v53 + 3324);
  *(_QWORD *)(v54 + 80) = 0;
  *(_QWORD *)(v54 + 88) = 0;
  v57 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v54 + 96) = v57;
  *(_QWORD *)(v54 + 104) = 0;
  *(_QWORD *)v54 = off_1E33B9CC0;
  v58 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v56;
  if (v58)
  {
    if (*(_DWORD *)(v58 + 24) == 2)
    {
      if ((*(_WORD *)(v58 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v58, v55);
        v56 = (WTF::StringImpl *)*((_QWORD *)this + 14);
      }
    }
    else
    {
      *(_DWORD *)(v58 + 24) -= 2;
    }
  }
  WTF::AtomStringImpl::add();
  v59 = *((_QWORD *)v56 + 13);
  if (!v59)
    goto LABEL_105;
  v60 = *(_DWORD *)(v59 + 4);
  if ((v60 & 1) != 0)
  {
    v61 = *(uint64_t **)(v59 + 40);
    v62 = *(_DWORD *)(v59 + 52);
    if (!v62)
    {
LABEL_105:
      v63 = 0xFFFFFFFFLL;
      goto LABEL_106;
    }
  }
  else
  {
    v61 = (uint64_t *)(v59 + 32);
    v62 = v60 >> 5;
    if (!v62)
      goto LABEL_105;
  }
  v63 = 0;
  while (1)
  {
    v64 = *v61;
    if (*v61 == WebCore::HTMLNames::idAttr
      || *(_QWORD *)(v64 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
      && *(_QWORD *)(v64 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
    {
      break;
    }
    ++v63;
    v61 += 2;
    if (v62 == v63)
      goto LABEL_105;
  }
LABEL_106:
  WebCore::Element::setAttributeInternal(v56, v63, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, &v84, 0);
  v66 = v84;
  v84 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v65);
    else
      *(_DWORD *)v66 -= 2;
  }
  WebCore::ContainerNode::appendChild(v35, *((WebCore::Node **)this + 14), (uint64_t)v71);
  if (v73)
  {
    v68 = v72;
    v72 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v67);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  result = (unsigned int *)WebCore::HTMLMeterElement::didElementStateChange(this);
  if (*(_DWORD *)(v35 + 24) == 2)
  {
    if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v35, v70);
  }
  else
  {
    *(_DWORD *)(v35 + 24) -= 2;
  }
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v15, v70);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v70);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLModElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C6B78;
  *a3 = result;
  return result;
}

BOOL WebCore::HTMLModElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::citeAttr;
}

void WebCore::HTMLNameCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(WebCore::HTMLCollection *a1)
{
  uint64_t v1;
  uint64_t **v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  _QWORD *v11;
  WebCore::HTMLCollection *v12;

  *(_QWORD *)a1 = off_1E33C6550;
  v1 = *((_QWORD *)a1 + 3);
  if ((*(_WORD *)(v1 + 28) & 0xF000) != 0x9000)
  {
    __break(0xC471u);
    JUMPOUT(0x195C542B8);
  }
  v3 = (uint64_t **)(*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL);
  if (v3)
    v4 = *v3;
  else
    v4 = 0;
  WebCore::NodeListsNodeData::removeCachedCollection(v4, a1, (WTF::StringImpl **)a1 + 11);
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 11);
  *((_QWORD *)a1 + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)a1 = off_1E33C8168;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8);
    v8 = v7 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v8 + 1768);
    if ((*((_BYTE *)a1 + 22) & 2) != 0)
    {
      v10 = (uint64_t *)(v7 + 1760);
      v12 = a1;
      v11 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v7 + 1760), (uint64_t *)&v12);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v10, v11);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, v5);
  WebCore::HTMLCollection::~HTMLCollection(a1, v9);
}

uint64_t WebCore::HTMLNameCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(WebCore::HTMLCollection *a1)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLNameCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(a1);
  return bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLNameCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(WebCore::HTMLCollection *a1)
{
  uint64_t v1;
  uint64_t **v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  _QWORD *v11;
  WebCore::HTMLCollection *v12;

  *(_QWORD *)a1 = off_1E33C65B8;
  v1 = *((_QWORD *)a1 + 3);
  if ((*(_WORD *)(v1 + 28) & 0xF000) != 0x9000)
  {
    __break(0xC471u);
    JUMPOUT(0x195C54404);
  }
  v3 = (uint64_t **)(*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL);
  if (v3)
    v4 = *v3;
  else
    v4 = 0;
  WebCore::NodeListsNodeData::removeCachedCollection(v4, a1, (WTF::StringImpl **)a1 + 11);
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 11);
  *((_QWORD *)a1 + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)a1 = off_1E33C81D0;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8);
    v8 = v7 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v8 + 1768);
    if ((*((_BYTE *)a1 + 22) & 2) != 0)
    {
      v10 = (uint64_t *)(v7 + 1760);
      v12 = a1;
      v11 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v7 + 1760), (uint64_t *)&v12);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v10, v11);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, v5);
  WebCore::HTMLCollection::~HTMLCollection(a1, v9);
}

uint64_t WebCore::HTMLNameCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(WebCore::HTMLCollection *a1)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLNameCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::~HTMLNameCollection(a1);
  return bmalloc::api::isoDeallocate(v1, v2);
}

BOOL WebCore::WindowNameCollection::elementMatches(uint64_t a1, _QWORD *a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_WORD *)(a1 + 28);
  if ((v2 & 0x10) == 0 || (v2 & 0x110) == 0x110)
  {
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
    goto LABEL_4;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
  if (v3 != *(_QWORD *)(WebCore::HTMLNames::embedTag + 24))
  {
LABEL_4:
    if (v3 != *(_QWORD *)(WebCore::HTMLNames::formTag + 24)
      && v3 != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
      && v3 != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      goto LABEL_11;
    }
  }
  v4 = *(_QWORD *)(a1 + 104);
  if (v4 && (v5 = *(_DWORD *)(v4 + 4), (v5 & 2) != 0))
  {
    if ((v5 & 1) != 0)
    {
      v14 = *(uint64_t **)(v4 + 40);
      LODWORD(v15) = *(_DWORD *)(v4 + 52);
    }
    else
    {
      v14 = (uint64_t *)(v4 + 32);
      LODWORD(v15) = v5 >> 5;
    }
    if ((_DWORD)v15)
    {
      v15 = v15;
      while (1)
      {
        v16 = *v14;
        if (*v14 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v14 += 2;
        if (!--v15)
          goto LABEL_40;
      }
    }
    else
    {
LABEL_40:
      v14 = 0;
    }
    v6 = v14 + 1;
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  if (*v6 == *a2)
    return 1;
LABEL_11:
  v7 = *(_QWORD *)(a1 + 104);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v10 = *(_DWORD *)(v7 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(uint64_t **)(v7 + 40);
      LODWORD(v12) = *(_DWORD *)(v7 + 52);
    }
    else
    {
      v11 = (uint64_t *)(v7 + 32);
      LODWORD(v12) = v10 >> 5;
    }
    if ((_DWORD)v12)
    {
      v12 = v12;
      while (1)
      {
        v13 = *v11;
        if (*v11 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v12)
          goto LABEL_27;
      }
    }
    else
    {
LABEL_27:
      v11 = 0;
    }
    v8 = v11 + 1;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  return *v8 == *a2;
}

BOOL WebCore::DocumentNameCollection::elementMatchesIfNameAttributeMatch(WebCore::DocumentNameCollection *this, const WebCore::Element *a2)
{
  int v2;
  uint64_t v3;

  v2 = *((unsigned __int16 *)this + 14);
  if ((v2 & 0x10) == 0)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  return v3 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) && *((_BYTE *)this + 288)
      || (~v2 & 0x110) != 0 && v3 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24)
      || v3 == *(_QWORD *)(WebCore::HTMLNames::formTag + 24)
      || v3 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
      || v3 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24);
}

BOOL WebCore::DocumentNameCollection::elementMatches(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(unsigned __int16 *)(a1 + 28);
  if ((v2 & 0x10) == 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
  v4 = *(_QWORD *)(WebCore::HTMLNames::objectTag + 24);
  if (v3 == v4 && *(_BYTE *)(a1 + 288)
    || (~v2 & 0x110) != 0 && v3 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24)
    || v3 == *(_QWORD *)(WebCore::HTMLNames::formTag + 24)
    || v3 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24)
    || v3 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    v5 = *(_QWORD *)(a1 + 104);
    if (v5 && (v6 = *(_DWORD *)(v5 + 4), (v6 & 2) != 0))
    {
      if ((v6 & 1) != 0)
      {
        v9 = *(uint64_t **)(v5 + 40);
        LODWORD(v10) = *(_DWORD *)(v5 + 52);
      }
      else
      {
        v9 = (uint64_t *)(v5 + 32);
        LODWORD(v10) = v6 >> 5;
      }
      if ((_DWORD)v10)
      {
        v10 = v10;
        while (1)
        {
          v11 = *v9;
          if (*v9 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            break;
          }
          v9 += 2;
          if (!--v10)
            goto LABEL_27;
        }
      }
      else
      {
LABEL_27:
        v9 = 0;
      }
      v7 = v9 + 1;
    }
    else
    {
      v7 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    if (*v7 == *a2)
      return 1;
  }
  if (v3 != v4 || !*(_BYTE *)(a1 + 288))
  {
    if (v3 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v12 = *(_QWORD *)(a1 + 104);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 4);
        if ((v13 & 2) != 0)
        {
          v14 = (v13 & 1) != 0 ? *(uint64_t **)(v12 + 40) : (uint64_t *)(v12 + 32);
          v16 = *v14;
          if (*v14 == WebCore::HTMLNames::nameAttr)
          {
            v17 = 0;
          }
          else
          {
            v17 = 0;
            v18 = v14 + 2;
            do
            {
              if (*(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
              {
                break;
              }
              ++v17;
              v19 = *v18;
              v18 += 2;
              v16 = v19;
            }
            while (v19 != WebCore::HTMLNames::nameAttr);
          }
          v20 = v14[2 * v17 + 1];
          if (v20)
          {
            if (*(_DWORD *)(v20 + 4))
              goto LABEL_37;
          }
        }
      }
    }
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 104);
LABEL_37:
  if (v12 && *(_QWORD *)(v12 + 24))
  {
    v21 = *(_DWORD *)(v12 + 4);
    if ((v21 & 1) != 0)
    {
      v22 = *(uint64_t **)(v12 + 40);
      LODWORD(v23) = *(_DWORD *)(v12 + 52);
    }
    else
    {
      v22 = (uint64_t *)(v12 + 32);
      LODWORD(v23) = v21 >> 5;
    }
    if ((_DWORD)v23)
    {
      v23 = v23;
      while (1)
      {
        v24 = *v22;
        if (*v22 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v22 += 2;
        if (!--v23)
          goto LABEL_64;
      }
    }
    else
    {
LABEL_64:
      v22 = 0;
    }
    v15 = v22 + 1;
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  }
  return *v15 == *a2;
}

WTF::StringImpl *WebCore::HTMLOListElement::collectPresentationalHintsForAttribute(WebCore::HTMLOListElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  int *v9;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::typeAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "a", 1))
  {
    v7 = 0x10C8u;
  }
  else if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "A", 1))
  {
    v7 = 0x10D0u;
  }
  else if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "i", 1))
  {
    v7 = 0x10BCu;
  }
  else if (MEMORY[0x19AEA53F4](*(_QWORD *)a3, "I", 1))
  {
    v7 = 0x10C0u;
  }
  else
  {
    result = (WTF::StringImpl *)MEMORY[0x19AEA53F4](*(_QWORD *)a3, "1", 1);
    if (!(_DWORD)result)
      return result;
    v7 = 0x105Cu;
  }
  WebCore::staticCSSValuePool[v7] += 2;
  v9 = &WebCore::staticCSSValuePool[v7];
  WebCore::MutableStyleProperties::setProperty(a4, 157, &v9, 0);
  result = (WTF::StringImpl *)v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLOListElement::setStartForBindings(WebCore::HTMLOListElement *this, WTF::AtomString *a2)
{
  return WebCore::Element::setIntegralAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::startAttr, a2);
}

uint64_t WebCore::HTMLOListElement::itemCount(WebCore::HTMLOListElement *this, uint64_t a2, const WebCore::Element *a3)
{
  uint64_t v4;
  uint64_t ListItemHelper;
  const WebCore::Element *v6;
  const WebCore::Element *v7;
  uint64_t result;

  if (*((_BYTE *)this + 124))
    return *((unsigned int *)this + 30);
  ListItemHelper = WebCore::nextListItemHelper(this, this, a3);
  v4 = 0;
  if (!ListItemHelper)
  {
LABEL_6:
    *((_DWORD *)this + 30) = v4;
    *((_BYTE *)this + 124) = 1;
    return v4;
  }
  while (1)
  {
    v7 = *(const WebCore::Element **)(*(_QWORD *)(ListItemHelper + 24) + 8);
    if ((*((_WORD *)v7 + 14) & 8) == 0)
      break;
    v4 = (v4 + 1);
    ListItemHelper = WebCore::nextListItemHelper(this, v7, v6);
    if (!ListItemHelper)
      goto LABEL_6;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::HTMLObjectElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unsigned int *result;
  unsigned int v10;

  v8 = bmalloc::api::isoAllocate();
  WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement(v8, a1, a2);
  result = 0;
  *(_QWORD *)(v8 + 248) = off_1E33B3CE0;
  *(_QWORD *)(v8 + 256) = 0;
  if (a3)
  {
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
    if (result)
    {
      do
        v10 = __ldaxr(result);
      while (__stlxr(v10 + 1, result));
    }
  }
  *(_QWORD *)(v8 + 272) = 0;
  *(_QWORD *)(v8 + 280) = 0;
  *(_QWORD *)(v8 + 264) = result;
  *(_QWORD *)v8 = off_1E33C7558;
  *(_QWORD *)(v8 + 248) = &unk_1E33C7AC8;
  *(_WORD *)(v8 + 288) = 1;
  *a4 = v8;
  return result;
}

void WebCore::HTMLObjectElement::~HTMLObjectElement(WebCore::HTMLObjectElement *this, void *a2)
{
  WebCore::FormListedElement *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WebCore::FormListedElement *v7;
  uint64_t v8;

  v3 = (WebCore::HTMLObjectElement *)((char *)this + 248);
  v8 = 0;
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v7 = v3;
      (*(void (**)(WebCore::FormListedElement *, uint64_t *))(*(_QWORD *)v3 + 80))(v3, &v8);
      v3 = v7;
      v6 = v8;
      v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
            v3 = v7;
          }
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
    }
  }
  WebCore::FormListedElement::~FormListedElement(v3, (WTF::StringImpl *)a2);
  WebCore::HTMLPlugInImageElement::~HTMLPlugInImageElement(this, v5);
}

{
  WebCore::FormListedElement *v3;
  uint64_t v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t v8;
  WebCore::FormListedElement *v9;
  uint64_t v10;

  v3 = (WebCore::HTMLObjectElement *)((char *)this + 248);
  v10 = 0;
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v9 = v3;
      (*(void (**)(WebCore::FormListedElement *, uint64_t *))(*(_QWORD *)v3 + 80))(v3, &v10);
      v3 = v9;
      v8 = v10;
      v10 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
            v3 = v9;
          }
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
    }
  }
  WebCore::FormListedElement::~FormListedElement(v3, (WTF::StringImpl *)a2);
  WebCore::HTMLPlugInImageElement::~HTMLPlugInImageElement(this, v5);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::HTMLObjectElement::~HTMLObjectElement(WebCore::HTMLObjectElement *this, void *a2)
{
  uint64_t v2;
  WebCore::HTMLPlugInImageElement *v3;
  void *v4;
  uint64_t v5;
  WebCore::HTMLObjectElement *v6;
  uint64_t v7;

  v7 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v6 = this;
      (*(void (**)(WebCore::HTMLObjectElement *, uint64_t *))(*(_QWORD *)this + 80))(this, &v7);
      this = v6;
      v5 = v7;
      v7 = 0;
      if (v5)
      {
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
            this = v6;
          }
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
      }
    }
  }
  v3 = (WebCore::HTMLObjectElement *)((char *)this - 248);
  WebCore::FormListedElement::~FormListedElement(this, (WTF::StringImpl *)a2);
  WebCore::HTMLPlugInImageElement::~HTMLPlugInImageElement(v3, v4);
}

{
  uint64_t v2;
  WebCore::HTMLPlugInImageElement *v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;
  uint64_t v7;
  WebCore::HTMLObjectElement *v8;
  uint64_t v9;

  v9 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v8 = this;
      (*(void (**)(WebCore::HTMLObjectElement *, uint64_t *))(*(_QWORD *)this + 80))(this, &v9);
      this = v8;
      v7 = v9;
      v9 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
            this = v8;
          }
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
    }
  }
  v3 = (WebCore::HTMLObjectElement *)((char *)this - 248);
  WebCore::FormListedElement::~FormListedElement(this, (WTF::StringImpl *)a2);
  WebCore::HTMLPlugInImageElement::~HTMLPlugInImageElement(v3, v4);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::HTMLObjectElement::defaultTabIndex(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLObjectElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::borderAttr)
    return 1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x38F)
  {
    v5 = v2 - 912;
    v6 = v5 > 0x25;
    v7 = 1 << v5;
    v8 = 0x2800000401;
LABEL_10:
    v9 = v7 & v8;
    if (v6 || v9 == 0)
      return 0;
    return result;
  }
  v4 = v2 - 504 > 7 || ((1 << (v2 + 8)) & 0x83) == 0;
  if (v4 && v2 != 286)
  {
    v11 = v2 - 411;
    v6 = v11 > 0x20;
    v7 = 1 << v11;
    v8 = 0x100200001;
    goto LABEL_10;
  }
  return result;
}

void WebCore::HTMLObjectElement::collectPresentationalHintsForAttribute(WebCore::HTMLObjectElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  if (*(_QWORD *)a2 == WebCore::HTMLNames::borderAttr)
    WebCore::HTMLElement::applyBorderAttributeToStyle(this, a3, a4);
  else
    WebCore::HTMLPlugInElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
}

void WebCore::HTMLObjectElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  WTF::StringImpl *v9;
  double v10;
  double v11;
  float v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v13 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v13)
  {
    case 392:
      goto LABEL_55;
    case 421:
      WTF::String::trim();
      v23 = v36;
      v36 = 0;
      v24 = *(WTF::StringImpl **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v23;
      if (!v24)
        goto LABEL_21;
      v25 = *(_DWORD *)v24 - 2;
      if (*(_DWORD *)v24 != 2)
        goto LABEL_20;
      WTF::StringImpl::destroy(v24, v9);
      v24 = v36;
      v36 = 0;
      if (v24)
      {
        v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 != 2)
        {
LABEL_20:
          *(_DWORD *)v24 = v25;
          goto LABEL_21;
        }
        WTF::StringImpl::destroy(v24, v9);
      }
LABEL_21:
      v26 = *(_QWORD *)(a1 + 104);
      if (!v26)
        goto LABEL_49;
      v27 = *(_DWORD *)(v26 + 4);
      if ((v27 & 1) != 0)
      {
        v28 = *(uint64_t **)(v26 + 40);
        LODWORD(v29) = *(_DWORD *)(v26 + 52);
        if (!(_DWORD)v29)
          goto LABEL_49;
      }
      else
      {
        v28 = (uint64_t *)(v26 + 32);
        LODWORD(v29) = v27 >> 5;
        if (!(_DWORD)v29)
        {
LABEL_49:
          if (!*(_BYTE *)(a1 + 240))
          {
            *(_BYTE *)(a1 + 240) = 1;
            if ((*(_BYTE *)(a1 + 22) & 8) != 0)
            {
              v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
              if (*(_QWORD *)(v33 + 1944))
              {
                if (!*(_BYTE *)(v33 + 3405))
                  WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(a1, v9);
              }
            }
            WebCore::Element::invalidateStyle((WebCore::Node *)a1);
          }
          goto LABEL_55;
        }
      }
      v29 = v29;
      while (1)
      {
        v31 = *v28;
        if (*v28 == WebCore::HTMLNames::classidAttr
          || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::classidAttr + 24)
          && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::classidAttr + 32))
        {
          break;
        }
        v28 += 2;
        if (!--v29)
          goto LABEL_49;
      }
      if (!*(_BYTE *)(a1 + 240))
      {
        *(_BYTE *)(a1 + 240) = 1;
        if ((*(_BYTE *)(a1 + 22) & 8) != 0)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          if (*(_QWORD *)(v32 + 1944))
          {
            if (!*(_BYTE *)(v32 + 3405))
              WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(a1, v9);
          }
        }
        WebCore::Element::invalidateStyle((WebCore::Node *)a1);
      }
      goto LABEL_48;
    case 952:
      if (*a4 && (v14 = WTF::StringImpl::find((uint64_t)*a4, 0x3Bu, 0, v10, v11, v12), (v15 = *a4) != 0))
      {
        if (*((_DWORD *)v15 + 1) > v14)
        {
          WTF::StringImpl::substring(v15);
        }
        else
        {
          *(_DWORD *)v15 += 2;
          v35 = v15;
        }
      }
      else
      {
        v35 = 0;
      }
      WTF::String::convertToASCIILowercase((WTF::String *)&v35);
      v16 = v36;
      v36 = 0;
      v17 = *(WTF::StringImpl **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::destroy(v17, v9);
          v34 = v36;
          v36 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v9);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v17 -= 2;
          v36 = 0;
        }
      }
      v18 = v35;
      v35 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v9);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *(_QWORD *)(a1 + 104);
      if (!v19)
        goto LABEL_55;
      v20 = *(_DWORD *)(v19 + 4);
      if ((v20 & 1) == 0)
      {
        v21 = (uint64_t *)(v19 + 32);
        LODWORD(v22) = v20 >> 5;
        if (!(_DWORD)v22)
          goto LABEL_55;
        goto LABEL_28;
      }
      v21 = *(uint64_t **)(v19 + 40);
      LODWORD(v22) = *(_DWORD *)(v19 + 52);
      if ((_DWORD)v22)
      {
LABEL_28:
        v22 = v22;
        while (1)
        {
          v30 = *v21;
          if (*v21 == WebCore::HTMLNames::classidAttr
            || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::classidAttr + 24)
            && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::classidAttr + 32))
          {
            break;
          }
          v21 += 2;
          if (!--v22)
            goto LABEL_55;
        }
LABEL_48:
        *(_BYTE *)(a1 + 224) = 1;
        *(_BYTE *)(a1 + 289) = 0;
        return;
      }
LABEL_55:
      *(_BYTE *)(a1 + 224) = 1;
      *(_BYTE *)(a1 + 289) = 0;
      if ((*(_BYTE *)(a1 + 22) & 8) != 0 && (*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
        }
        else
        {
          WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(a1, v9);
          WebCore::Node::invalidateStyle(a1, 4u, 2);
        }
      }
      return;
  }
  if (*(_QWORD *)a2 == WebCore::HTMLNames::formAttr)
    WebCore::FormListedElement::parseFormAttribute((WebCore::FormListedElement *)(a1 + 248), (const WTF::AtomString *)a4);
}

uint64_t WebCore::HTMLObjectElement::hasFallbackContent(WebCore::HTMLObjectElement *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    return 0;
  *(_DWORD *)(v2 + 24) += 2;
  while (1)
  {
    v3 = v2;
    v4 = *(_WORD *)(v2 + 28);
    if ((v4 & 2) != 0)
      break;
    if ((v4 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::paramTag + 24))
      goto LABEL_36;
LABEL_9:
    v2 = *(_QWORD *)(v2 + 56);
    if (v2)
      *(_DWORD *)(v2 + 24) += 2;
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
    if (!v2)
      return 0;
  }
  v5 = *(_WORD *)(v2 + 30);
  if ((v5 & 0x100) != 0)
  {
    if ((v5 & 0x80) == 0)
      goto LABEL_36;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v2 + 80);
  if (!v6)
    goto LABEL_33;
  v7 = *(unsigned __int8 **)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 4);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if ((_DWORD)v8)
    {
      while (1)
      {
        v9 = *v7;
        v10 = v9 > 0x20;
        v11 = (1 << v9) & 0x100003600;
        if (v10 || v11 == 0)
          goto LABEL_35;
        ++v7;
        if (!--v8)
          goto LABEL_33;
      }
    }
    goto LABEL_33;
  }
  if (!(_DWORD)v8)
  {
LABEL_33:
    *(_WORD *)(v2 + 30) = v5 | 0x180;
    goto LABEL_9;
  }
  v13 = 2 * v8;
  while (1)
  {
    v14 = *(unsigned __int16 *)v7;
    v10 = v14 > 0x20;
    v15 = (1 << v14) & 0x100003600;
    if (v10 || v15 == 0)
      break;
    v7 += 2;
    v13 -= 2;
    if (!v13)
      goto LABEL_33;
  }
LABEL_35:
  *(_WORD *)(v2 + 30) = v5 & 0xFE7F | 0x100;
LABEL_36:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return 1;
}

uint64_t WebCore::HTMLObjectElement::updateWidget(uint64_t this, WebCore::HTMLFrameOwnerElement *a2)
{
  uint64_t v2;
  char v3;
  unsigned __int8 *v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  _DWORD *v18;
  _DWORD *v19;
  _QWORD *v20;
  WTF *v21;
  _DWORD *v22;
  WTF *v23;
  _DWORD *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char canLoadURL;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79[5];

  v2 = this;
  if ((*(_WORD *)(this + 30) & 2) != 0
    || (v3 = (char)a2,
        this = WebCore::SubframeLoadingDisabler::canLoadFrame((WebCore::SubframeLoadingDisabler *)this, a2),
        (this & 1) == 0))
  {
    *(_BYTE *)(v2 + 224) = 0;
    return this;
  }
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v8 = *(_QWORD *)(v2 + 104);
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 4) & 8) != 0)
      this = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v2, v4, v7, v5, v6);
    if ((*(_WORD *)(v2 + 28) & 0x20) != 0)
      this = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v2);
    v9 = *(_QWORD *)(v2 + 104);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if ((v10 & 1) != 0)
      {
        v12 = *(_DWORD *)(v9 + 52);
        if (!v12)
          goto LABEL_74;
        v11 = *(_QWORD *)(v9 + 40);
      }
      else
      {
        if (v10 < 0x20)
          goto LABEL_74;
        v11 = v9 + 32;
        v12 = v10 >> 5;
      }
      LODWORD(v13) = 0;
      v14 = 0;
      do
      {
        v15 = (_QWORD *)(*(_QWORD *)(v11 + 16 * v14) + 24);
        v16 = HIDWORD(v76);
        if (HIDWORD(v76) == (_DWORD)v76)
        {
          this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, HIDWORD(v76) + 1, (unint64_t)v15);
          v16 = HIDWORD(v76);
          v13 = v75;
          v19 = *(_DWORD **)this;
          if (*(_QWORD *)this)
            *v19 += 2;
          *((_QWORD *)v13 + v16) = v19;
          LODWORD(v13) = HIDWORD(v74);
        }
        else
        {
          v17 = v75;
          v18 = (_DWORD *)*v15;
          if (*v15)
            *v18 += 2;
          *((_QWORD *)v17 + v16) = v18;
        }
        HIDWORD(v76) = v16 + 1;
        v20 = (_QWORD *)(v11 + 16 * v14 + 8);
        if ((_DWORD)v13 == (_DWORD)v74)
        {
          this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v73, v13 + 1, (unint64_t)v20);
          v13 = (WTF *)HIDWORD(v74);
          v23 = v73;
          v24 = *(_DWORD **)this;
          if (*(_QWORD *)this)
            *v24 += 2;
          *((_QWORD *)v23 + (_QWORD)v13) = v24;
        }
        else
        {
          v21 = v73;
          v22 = (_DWORD *)*v20;
          if (*v20)
            *v22 += 2;
          *((_QWORD *)v21 + v13) = v22;
        }
        LODWORD(v13) = (_DWORD)v13 + 1;
        HIDWORD(v74) = (_DWORD)v13;
        v25 = v14 + 1;
        v14 = (v14 + 1);
      }
      while (v12 != v25);
      v26 = HIDWORD(v76);
      v78 = 0;
      if (HIDWORD(v76))
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (1)
        {
          v30 = *((_QWORD *)v75 + v27);
          if (v30)
          {
            v31 = *(_DWORD *)(v30 + 4);
            if (v31 == 3)
            {
              v35 = *(_QWORD *)(v30 + 8);
              if ((*(_BYTE *)(v30 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v35 & 0xDF) == 0x53 && (*(_BYTE *)(v35 + 1) & 0xDF) == 0x52)
                {
                  v36 = *(unsigned __int8 *)(v35 + 2);
                  goto LABEL_55;
                }
              }
              else if ((*(_WORD *)v35 & 0xFFDF) == 0x53 && (*(_WORD *)(v35 + 2) & 0xFFDF) == 0x52)
              {
                v36 = *(unsigned __int16 *)(v35 + 4);
LABEL_55:
                if ((v36 & 0xFFFFFFDF) == 0x43)
                  v28 = 1;
              }
            }
            else if (v31 == 4)
            {
              v32 = *(_QWORD *)(v30 + 8);
              if ((*(_BYTE *)(v30 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v32 & 0xDF) == 0x44
                  && (*(_BYTE *)(v32 + 1) & 0xDF) == 0x41
                  && (*(_BYTE *)(v32 + 2) & 0xDF) == 0x54)
                {
                  v33 = *(unsigned __int8 *)(v32 + 3);
                  goto LABEL_43;
                }
              }
              else if ((*(_WORD *)v32 & 0xFFDF) == 0x44
                     && (*(_WORD *)(v32 + 2) & 0xFFDF) == 0x41
                     && (*(_WORD *)(v32 + 4) & 0xFFDF) == 0x54)
              {
                v33 = *(unsigned __int16 *)(v32 + 6);
LABEL_43:
                if ((v33 & 0xFFFFFFDF) == 0x41)
                {
                  if (v27 >= HIDWORD(v74))
                  {
                    __break(0xC471u);
                    return this;
                  }
                  v34 = (WTF::StringImpl *)*((_QWORD *)v73 + v27);
                  if (v34)
                    *(_DWORD *)v34 += 2;
                  v78 = v34;
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 2)
                    {
                      this = WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v4);
                      v26 = HIDWORD(v76);
                    }
                    else
                    {
                      *(_DWORD *)v29 -= 2;
                    }
                  }
                  v29 = v34;
                }
              }
            }
          }
          if (++v27 >= v26)
          {
            if ((v28 & 1) == 0)
            {
              if (!v29)
                break;
              WTF::AtomStringImpl::add();
              v77 = v79[0];
              v37 = HIDWORD(v76);
              if (HIDWORD(v76) == (_DWORD)v76)
              {
                v62 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, HIDWORD(v76) + 1, (unint64_t)&v77);
                v64 = HIDWORD(v76);
                v65 = v75;
                v66 = *v62;
                *v62 = 0;
                *((_QWORD *)v65 + v64) = v66;
                v67 = v77;
                HIDWORD(v76) = v64 + 1;
                v77 = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                    WTF::StringImpl::destroy(v67, v63);
                  else
                    *(_DWORD *)v67 -= 2;
                }
              }
              else
              {
                *((WTF::StringImpl **)v75 + HIDWORD(v76)) = v79[0];
                HIDWORD(v76) = v37 + 1;
              }
              v38 = HIDWORD(v74);
              if (HIDWORD(v74) != (_DWORD)v74)
              {
                *((_QWORD *)v73 + HIDWORD(v74)) = v29;
                HIDWORD(v74) = v38 + 1;
                break;
              }
              v68 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v73, HIDWORD(v74) + 1, (unint64_t)&v78);
              v69 = HIDWORD(v74);
              v70 = HIDWORD(v74) + 1;
              v71 = v73;
              v72 = *v68;
              *v68 = 0;
              *((_QWORD *)v71 + v69) = v72;
              HIDWORD(v74) = v70;
              v29 = v78;
            }
            v78 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v4);
              else
                *(_DWORD *)v29 -= 2;
            }
            break;
          }
        }
      }
    }
  }
LABEL_74:
  v39 = *(WTF::StringImpl **)(v2 + 216);
  if (v39)
    *(_DWORD *)v39 += 2;
  v78 = v39;
  WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8), &v78, *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 848, 0, (WTF::URL *)v79);
  canLoadURL = WebCore::HTMLPlugInImageElement::canLoadURL((WebCore::HTMLPlugInImageElement *)v2, (const WTF::URL *)v79);
  v42 = v79[0];
  v79[0] = 0;
  if (!v42)
  {
LABEL_79:
    if ((canLoadURL & 1) != 0)
      goto LABEL_80;
    goto LABEL_112;
  }
  if (*(_DWORD *)v42 != 2)
  {
    *(_DWORD *)v42 -= 2;
    goto LABEL_79;
  }
  WTF::StringImpl::destroy(v42, v40);
  if ((canLoadURL & 1) != 0)
  {
LABEL_80:
    v43 = *(WTF::StringImpl **)(v2 + 208);
    if (v43)
      *(_DWORD *)v43 += 2;
    v77 = v43;
    if ((v3 & 1) == 0
      && WebCore::HTMLPlugInImageElement::wouldLoadAsPlugIn((WebCore::HTMLPlugInImageElement *)v2, (const WTF::String *)&v78, (const WTF::String *)&v77))
    {
      goto LABEL_108;
    }
    *(_BYTE *)(v2 + 224) = 0;
    *(_DWORD *)(v2 + 24) += 2;
    v44 = *(_QWORD *)(v2 + 104);
    if (v44)
    {
      v45 = *(_DWORD *)(v44 + 4);
      if ((v45 & 1) != 0)
      {
        v46 = *(_QWORD *)(v44 + 40);
        LODWORD(v47) = *(_DWORD *)(v44 + 52);
        if ((_DWORD)v47)
        {
LABEL_87:
          v47 = v47;
          v48 = (uint64_t *)(v46 + 8);
          while (1)
          {
            v49 = *(v48 - 1);
            if (v49 == WebCore::HTMLNames::classidAttr
              || *(_QWORD *)(v49 + 24) == *(_QWORD *)(WebCore::HTMLNames::classidAttr + 24)
              && *(_QWORD *)(v49 + 32) == *(_QWORD *)(WebCore::HTMLNames::classidAttr + 32))
            {
              break;
            }
            v48 += 2;
            if (!--v47)
            {
              v48 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_96:
          v50 = *v48;
          if (v50 && *(_DWORD *)(v50 + 4))
            goto LABEL_104;
          WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(v2 + 40) + 8), &v78, *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 848, 0, (WTF::URL *)v79);
          v51 = WebCore::HTMLPlugInImageElement::canLoadURL((WebCore::HTMLPlugInImageElement *)v2, (const WTF::URL *)v79);
          v52 = v79[0];
          v79[0] = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::destroy(v52, v40);
              if (!v51)
                goto LABEL_104;
              goto LABEL_101;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v51)
            goto LABEL_104;
LABEL_101:
          if ((WebCore::HTMLPlugInImageElement::requestObject(v2, &v78, &v77, (uint64_t)&v75, (uint64_t)&v73) & 1) != 0)
          {
LABEL_106:
            if (*(_DWORD *)(v2 + 24) == 2)
            {
              if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v2, v40);
            }
            else
            {
              *(_DWORD *)(v2 + 24) -= 2;
            }
LABEL_108:
            v53 = v77;
            v77 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v40);
              else
                *(_DWORD *)v53 -= 2;
            }
            goto LABEL_113;
          }
LABEL_104:
          if (WebCore::HTMLObjectElement::hasFallbackContent((WebCore::HTMLObjectElement *)v2, v40))
            WebCore::HTMLObjectElement::renderFallbackContent(v2, v40);
          goto LABEL_106;
        }
      }
      else
      {
        v46 = v44 + 32;
        LODWORD(v47) = v45 >> 5;
        if ((_DWORD)v47)
          goto LABEL_87;
      }
    }
    v48 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_96;
  }
LABEL_112:
  *(_BYTE *)(v2 + 224) = 0;
LABEL_113:
  v54 = v78;
  v78 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v40);
    else
      *(_DWORD *)v54 -= 2;
  }
  if (HIDWORD(v74))
  {
    v56 = v73;
    v57 = 8 * HIDWORD(v74);
    do
    {
      v58 = *(WTF::StringImpl **)v56;
      *(_QWORD *)v56 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v40);
        else
          *(_DWORD *)v58 -= 2;
      }
      v56 = (WTF *)((char *)v56 + 8);
      v57 -= 8;
    }
    while (v57);
  }
  v55 = v73;
  if (v73)
  {
    v73 = 0;
    LODWORD(v74) = 0;
    WTF::fastFree(v55, v40);
  }
  if (HIDWORD(v76))
  {
    v59 = v75;
    v60 = 8 * HIDWORD(v76);
    do
    {
      v61 = *(WTF::StringImpl **)v59;
      *(_QWORD *)v59 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v40);
        else
          *(_DWORD *)v61 -= 2;
      }
      v59 = (WTF *)((char *)v59 + 8);
      v60 -= 8;
    }
    while (v60);
  }
  this = (uint64_t)v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    return WTF::fastFree((WTF *)this, v40);
  }
  return this;
}

uint64_t WebCore::HTMLObjectElement::renderFallbackContent(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::ImageLoader *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  void *v11;
  char v12;
  char **v13;
  char *v14;

  if (!*(_BYTE *)(this + 289))
  {
    v2 = this;
    if ((*(_BYTE *)(this + 22) & 8) != 0)
    {
      WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(this, a2);
      this = WebCore::Node::invalidateStyle(v2, 4u, 2);
      v3 = *(WebCore::ImageLoader **)(v2 + 232);
      if (!v3)
        goto LABEL_17;
      v4 = *((_QWORD *)v3 + 3);
      if (!v4)
        goto LABEL_17;
      v5 = *(_QWORD *)(v4 + 8);
      if (!v5 || (*(_WORD *)(v5 + 557) & 0xE0) == 0x60)
        goto LABEL_17;
      v6 = *(uint64_t **)(v5 + 400);
      if (!v6)
      {
        v7 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v7 != -1)
        {
          v14 = &v12;
          v13 = &v14;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v6 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v6, 1);
      v9 = (_DWORD *)v6[5];
      if (v9)
        *v9 += 2;
      v10 = *(WTF::StringImpl **)(v2 + 208);
      *(_QWORD *)(v2 + 208) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      this = WebCore::HTMLPlugInImageElement::isImageType((WebCore::HTMLPlugInImageElement *)v2);
      if ((this & 1) == 0)
      {
        WebCore::ImageLoader::clearImageWithoutConsideringPendingLoadEvent(v3, v11);
        return WebCore::ImageLoader::updatedHasPendingEvent((uint64_t)v3);
      }
      else
      {
LABEL_17:
        *(_BYTE *)(v2 + 289) = 1;
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLObjectElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  char v5;

  v3 = a2;
  v5 = a2;
  WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((v3 & 1) != 0)
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3320);
  WebCore::FormListedElement::elementInsertedIntoAncestor((WebCore::FormListedElement *)(a1 + 248), a1, v5);
  return v3 & 1;
}

unsigned int *WebCore::HTMLObjectElement::didFinishInsertingNode(WebCore::HTMLObjectElement *this)
{
  return WebCore::FormListedElement::resetFormOwner((WebCore::HTMLObjectElement *)((char *)this + 248));
}

unsigned int *WebCore::HTMLObjectElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  char v7;

  v5 = a2;
  v7 = a2;
  WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
    --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3320);
  return WebCore::FormListedElement::elementRemovedFromAncestor((WebCore::FormListedElement *)(a1 + 248), a1, v7);
}

unsigned int *WebCore::HTMLObjectElement::childrenChanged(WebCore::HTMLPlugInImageElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WebCore::QualifiedName::QualifiedNameImpl **v2;
  WebCore::HTMLPlugInImageElement *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int64x2_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  int v46;
  uint64_t v47;
  uint64_t v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  unsigned int v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  unsigned int *result;
  void *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  WebCore::TreeScopeOrderedMap *v61;
  const WTF::AtomString *v62;
  WebCore::TreeScopeOrderedMap *v63;
  const WTF::AtomString *v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WebCore::Node *ElementSibling;
  WebCore::Element *v74;
  uint64_t *HTMLTags;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  _BYTE v80[24];

  v2 = a2;
  v3 = this;
  v4 = *((_QWORD *)this + 10);
  v5 = 1;
  if (!v4)
    goto LABEL_68;
  *(_DWORD *)(v4 + 24) += 2;
  v6 = &qword_1ECE83000;
  v7 = &qword_1ECE83000;
  while (1)
  {
    v8 = v4;
    v9 = *(_WORD *)(v4 + 28);
    if ((v9 & 8) == 0)
      break;
    if (*((_BYTE *)v6 + 1385) == 1)
    {
      if (!v7[175])
        goto LABEL_11;
    }
    else
    {
      HTMLTags = WebCore::HTMLNames::getHTMLTags(this);
      this = (WebCore::HTMLPlugInImageElement *)WTF::fastMalloc((WTF *)0x800);
      v22 = (uint64_t)this;
      v23 = (_DWORD *)WebCore::nullName;
      if (WebCore::nullName)
      {
        v24 = 0;
        v25 = *(_DWORD *)WebCore::nullName;
        v26 = vdupq_n_s64(WebCore::nullName);
        do
        {
          *(int64x2_t *)((char *)this + v24) = v26;
          v24 += 16;
        }
        while (v24 != 2048);
        *v23 = v25 + 256;
      }
      else
      {
        bzero(this, 0x800uLL);
      }
      v27 = 0;
      v76 = v22;
      v77 = 256;
      v28 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
      v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      v78 = (v30 >> 31) ^ v30;
      v79 = 0;
      v31 = WebCore::HTMLNames::bgsoundTag;
      v32 = WebCore::HTMLNames::detailsTag;
      v33 = WebCore::HTMLNames::figcaptionTag;
      v34 = WebCore::HTMLNames::figureTag;
      v35 = WebCore::HTMLNames::paramTag;
      v36 = WebCore::HTMLNames::summaryTag;
      v37 = WebCore::HTMLNames::trackTag;
      v38 = HTMLTags;
      do
      {
        a2 = (WebCore::QualifiedName::QualifiedNameImpl **)v38[v27];
        v39 = *a2;
        if (*a2 != (WebCore::QualifiedName::QualifiedNameImpl *)v31
          && v39 != (WebCore::QualifiedName::QualifiedNameImpl *)v32
          && v39 != (WebCore::QualifiedName::QualifiedNameImpl *)v33
          && v39 != (WebCore::QualifiedName::QualifiedNameImpl *)v34
          && v39 != (WebCore::QualifiedName::QualifiedNameImpl *)v35
          && v39 != (WebCore::QualifiedName::QualifiedNameImpl *)v36
          && v39 != (WebCore::QualifiedName::QualifiedNameImpl *)v37)
        {
          this = (WebCore::HTMLPlugInImageElement *)WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&v76, a2, (uint64_t)v80);
          v38 = HTMLTags;
          v31 = WebCore::HTMLNames::bgsoundTag;
          v32 = WebCore::HTMLNames::detailsTag;
          v33 = WebCore::HTMLNames::figcaptionTag;
          v34 = WebCore::HTMLNames::figureTag;
          v35 = WebCore::HTMLNames::paramTag;
          v36 = WebCore::HTMLNames::summaryTag;
          v37 = WebCore::HTMLNames::trackTag;
        }
        ++v27;
      }
      while (v27 != 146);
      qword_1ECE83578 = v76;
      unk_1ECE83580 = v77;
      unk_1ECE83588 = v78;
      byte_1ECE8358C = v79;
      byte_1ECE83569 = 1;
      v6 = &qword_1ECE83000;
      v7 = &qword_1ECE83000;
      if (!v76)
        goto LABEL_11;
    }
    this = (WebCore::HTMLPlugInImageElement *)WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(&qword_1ECE83578, (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 96));
    if (this)
      goto LABEL_66;
LABEL_11:
    v4 = *(_QWORD *)(v4 + 56);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        this = (WebCore::HTMLPlugInImageElement *)WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
    if (!v4)
    {
      v5 = 1;
      goto LABEL_68;
    }
  }
  if ((v9 & 2) == 0)
    goto LABEL_66;
  v10 = *(_WORD *)(v4 + 30);
  if ((v10 & 0x100) != 0)
  {
    if ((v10 & 0x80) == 0)
      goto LABEL_66;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v4 + 80);
  if (!v11)
    goto LABEL_35;
  v12 = *(unsigned __int8 **)(v11 + 8);
  v13 = *(unsigned int *)(v11 + 4);
  if ((*(_BYTE *)(v11 + 16) & 4) != 0)
  {
    if ((_DWORD)v13)
    {
      while (1)
      {
        v14 = *v12;
        v15 = v14 > 0x20;
        v16 = (1 << v14) & 0x100003600;
        if (v15 || v16 == 0)
          goto LABEL_65;
        ++v12;
        if (!--v13)
          goto LABEL_35;
      }
    }
    goto LABEL_35;
  }
  if (!(_DWORD)v13)
  {
LABEL_35:
    *(_WORD *)(v4 + 30) = v10 | 0x180;
    goto LABEL_11;
  }
  v18 = 2 * v13;
  while (1)
  {
    v19 = *(unsigned __int16 *)v12;
    v15 = v19 > 0x20;
    v20 = (1 << v19) & 0x100003600;
    if (v15 || v20 == 0)
      break;
    v12 += 2;
    v18 -= 2;
    if (!v18)
      goto LABEL_35;
  }
LABEL_65:
  *(_WORD *)(v4 + 30) = v10 & 0xFE7F | 0x100;
LABEL_66:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    v5 = 0;
  }
  else
  {
    v5 = 0;
    *(_DWORD *)(v4 + 24) -= 2;
  }
LABEL_68:
  v46 = *((unsigned __int8 *)v3 + 288);
  *((_BYTE *)v3 + 288) = v5;
  if (v46 != v5 && (*((_QWORD *)v3 + 2) & 0x18000000000000) == 0x8000000000000)
  {
    v47 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
    if (v47 && (*(_WORD *)(v47 + 3358) & 1) != 0)
    {
      *(_DWORD *)(v47 + 24) += 2;
      v49 = *((_QWORD *)v3 + 13);
      if (v49 && *(_QWORD *)(v49 + 24))
      {
        v65 = *(_DWORD *)(v49 + 4);
        if ((v65 & 1) != 0)
        {
          v66 = *(_QWORD **)(v49 + 40);
          LODWORD(v67) = *(_DWORD *)(v49 + 52);
        }
        else
        {
          v66 = (_QWORD *)(v49 + 32);
          LODWORD(v67) = v65 >> 5;
        }
        if ((_DWORD)v67)
        {
          v67 = v67;
          while (1)
          {
            v68 = *v66;
            if (*v66 == WebCore::HTMLNames::idAttr
              || *(_QWORD *)(v68 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
              && *(_QWORD *)(v68 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
            {
              break;
            }
            v66 += 2;
            if (!--v67)
              goto LABEL_127;
          }
        }
        else
        {
LABEL_127:
          v66 = 0;
        }
        v50 = (WTF::StringImpl **)(v66 + 1);
      }
      else
      {
        v50 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      if (*v50 && *((_DWORD *)*v50 + 1))
      {
        v61 = (WebCore::TreeScopeOrderedMap *)(v47 + 3512);
        if (v5)
        {
          WebCore::TreeScopeOrderedMap::add(v61, v50, (const WebCore::TreeScope **)v3, (const WebCore::TreeScope *)(v47 + 96));
          WebCore::addImpureProperty((WebCore *)v50, v62);
        }
        else
        {
          WebCore::TreeScopeOrderedMap::remove(v61, (const WTF::AtomString *)v50, v3);
        }
      }
      v51 = *((_QWORD *)v3 + 13);
      if (v51 && (v52 = *(_DWORD *)(v51 + 4), (v52 & 2) != 0))
      {
        if ((v52 & 1) != 0)
        {
          v69 = *(_QWORD **)(v51 + 40);
          LODWORD(v70) = *(_DWORD *)(v51 + 52);
        }
        else
        {
          v69 = (_QWORD *)(v51 + 32);
          LODWORD(v70) = v52 >> 5;
        }
        if ((_DWORD)v70)
        {
          v70 = v70;
          while (1)
          {
            v71 = *v69;
            if (*v69 == WebCore::HTMLNames::nameAttr
              || *(_QWORD *)(v71 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
              && *(_QWORD *)(v71 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
            {
              break;
            }
            v69 += 2;
            if (!--v70)
              goto LABEL_141;
          }
        }
        else
        {
LABEL_141:
          v69 = 0;
        }
        v53 = (WTF::StringImpl **)(v69 + 1);
      }
      else
      {
        v53 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      v54 = *v53;
      if (*v53 && *((_DWORD *)v54 + 1) && *v50 != v54)
      {
        v63 = (WebCore::TreeScopeOrderedMap *)(v47 + 3512);
        if (*((_BYTE *)v3 + 288))
        {
          WebCore::TreeScopeOrderedMap::add(v63, v53, (const WebCore::TreeScope **)v3, (const WebCore::TreeScope *)(v47 + 96));
          WebCore::addImpureProperty((WebCore *)v53, v64);
        }
        else
        {
          WebCore::TreeScopeOrderedMap::remove(v63, (const WTF::AtomString *)v53, v3);
        }
      }
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v47, a2);
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
    }
  }
  if ((*((_BYTE *)v3 + 22) & 8) != 0 && !*((_BYTE *)v3 + 289))
  {
    *((_BYTE *)v3 + 224) = 1;
    WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution((uint64_t)v3, (WTF::StringImpl *)a2);
    WebCore::Node::invalidateStyle((uint64_t)v3, 4u, 0);
    if ((*((_BYTE *)v3 + 71) & 1) != 0)
    {
      v72 = *((_QWORD *)v3 + 4);
      if (!v72 || (*(_WORD *)(v72 + 28) & 8) == 0 || (*(_BYTE *)(v72 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)v3);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v74);
      }
    }
  }
  result = (unsigned int *)WebCore::ContainerNode::childrenChanged((uint64_t)v3, v2);
  if ((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v57 = *(_QWORD *)((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v57)
    {
      v58 = *(_DWORD *)(v57 + 24);
      *(_DWORD *)(v57 + 24) = v58 + 2;
      v59 = *(unsigned __int8 *)v2;
      if ((v59 - 2) < 3)
      {
        result = *(unsigned int **)(v57 + 224);
        if (result)
        {
          v60 = 14;
LABEL_144:
          result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v60))();
          v58 = *(_DWORD *)(v57 + 24) - 2;
        }
      }
      else if (v59 == 8 || v59 == 5)
      {
        result = *(unsigned int **)(v57 + 224);
        if (result)
        {
          v60 = 13;
          goto LABEL_144;
        }
      }
      if (v58)
      {
        *(_DWORD *)(v57 + 24) = v58;
      }
      else if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
      {
        result = WebCore::Node::removedLastRef((WebCore::Node *)v57, v56);
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 3446))
    return WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)v3, (uint64_t)v2[2], *(unsigned __int8 *)v2);
  return result;
}

BOOL WebCore::HTMLObjectElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::dataAttr || *a2 == WebCore::HTMLNames::codebaseAttr;
}

uint64_t WebCore::HTMLObjectElement::imageSourceURL(WebCore::HTMLObjectElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return MEMORY[0x1E0CBF2F8];
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
    return MEMORY[0x1E0CBF2F8];
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    return MEMORY[0x1E0CBF2F8];
LABEL_4:
  v4 = v4;
  for (result = v3 + 8; ; result += 16)
  {
    v6 = *(_QWORD *)(result - 8);
    if (v6 == WebCore::HTMLNames::dataAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::dataAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::dataAttr + 32))
    {
      break;
    }
    if (!--v4)
      return MEMORY[0x1E0CBF2F8];
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLObjectElement::addSubresourceAttributeURLs(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];
  _BYTE v14[24];

  WebCore::StyledElement::addSubresourceAttributeURLs(a1, (uint64_t)a2);
  v4 = a1[13];
  if (!v4)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 1) == 0)
  {
    v6 = v4 + 32;
    LODWORD(v7) = v5 >> 5;
    if ((_DWORD)v7)
      goto LABEL_4;
LABEL_12:
    v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 40);
  LODWORD(v7) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_4:
  v7 = v7;
  v8 = (_QWORD *)(v6 + 8);
  while (1)
  {
    v9 = *(v8 - 1);
    if (v9 == WebCore::HTMLNames::dataAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::dataAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::dataAttr + 32))
    {
      break;
    }
    v8 += 2;
    if (!--v7)
    {
      v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  result = WebCore::Document::completeURL(*(WebCore::Document **)(a1[5] + 8), v8, *(_QWORD *)(a1[5] + 8) + 848, 0, (WTF::URL *)v13);
  if (v13[0])
  {
    WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a2, (uint64_t)v13, v11, (uint64_t)v14);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::HTMLObjectElement::didMoveToNewDocument(WebCore::HTMLObjectElement *this, WebCore::Document *a2, WebCore::Document *a3)
{
  WebCore::FormListedElement *v6;
  uint64_t v7;
  WTF::String *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (WebCore::HTMLObjectElement *)((char *)this + 248);
  v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 31) + 16))((char *)this + 248);
  v9 = *(_QWORD *)(v7 + 104);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 4);
    if ((v10 & 1) != 0)
    {
      v11 = *(uint64_t **)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 52);
      if (!(_DWORD)v12)
        return WebCore::HTMLPlugInImageElement::didMoveToNewDocument(this, a2, a3, v8);
    }
    else
    {
      v11 = (uint64_t *)(v9 + 32);
      LODWORD(v12) = v10 >> 5;
      if (!(_DWORD)v12)
        return WebCore::HTMLPlugInImageElement::didMoveToNewDocument(this, a2, a3, v8);
    }
    v12 = v12;
    while (1)
    {
      v13 = *v11;
      if (*v11 == WebCore::HTMLNames::formAttr
        || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
        && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
      {
        break;
      }
      v11 += 2;
      if (!--v12)
        return WebCore::HTMLPlugInImageElement::didMoveToNewDocument(this, a2, a3, v8);
    }
    if ((*(_BYTE *)(v7 + 22) & 8) != 0)
      WebCore::FormListedElement::resetFormAttributeTargetObserver(v6);
  }
  return WebCore::HTMLPlugInImageElement::didMoveToNewDocument(this, a2, a3, v8);
}

BOOL WebCore::HTMLObjectElement::canContainRangeEndPoint(WebCore::HTMLObjectElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;

  if (!*((_BYTE *)this + 289))
    return 0;
  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_14;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_5;
LABEL_14:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_14;
LABEL_5:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v8 = *v5;
  if (*v5 && *(_DWORD *)(v8 + 4) == 3)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v10 & 0xDF) == 0x49 && (*(_BYTE *)(v10 + 1) & 0xDF) == 0x4D)
      {
        v11 = *(unsigned __int8 *)(v10 + 2);
LABEL_23:
        v9 = (v11 & 0xFFFFFFDF) == 71;
        return !v9;
      }
    }
    else if ((*(_WORD *)v10 & 0xFFDF) == 0x49 && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x4D)
    {
      v11 = *(unsigned __int16 *)(v10 + 4);
      goto LABEL_23;
    }
  }
  v9 = 0;
  return !v9;
}

uint64_t WebCore::HTMLOptGroupElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C7BF0;
  *(_BYTE *)(result + 112) = 0;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLOptGroupElement::isDisabledFormControl(WebCore::HTMLOptGroupElement *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t WebCore::HTMLOptGroupElement::isFocusable(WebCore::HTMLOptGroupElement *this, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t isFocusable;

  v2 = *((_QWORD *)this + 4);
  if (v2
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    v3 = *(_DWORD *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v3 + 2;
    if (*(_BYTE *)(v2 + 297))
    {
      isFocusable = WebCore::Element::isFocusable(this);
      v3 = *(_DWORD *)(v2 + 24) - 2;
      if (*(_DWORD *)(v2 + 24) != 2)
      {
LABEL_6:
        *(_DWORD *)(v2 + 24) = v3;
        return isFocusable;
      }
    }
    else
    {
      isFocusable = 0;
      if (v3)
        goto LABEL_6;
    }
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    return isFocusable;
  }
  return WebCore::Element::isFocusable(this);
}

uint64_t WebCore::HTMLOptGroupElement::ownerSelectElement(WebCore::HTMLOptGroupElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (!v1 || (*(_WORD *)(v1 + 28) & 0x10) == 0)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    return *((_QWORD *)this + 4);
  return 0;
}

unsigned int *WebCore::HTMLOptGroupElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *result;
  void *v8;
  unsigned int *v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;

  if (a2[33] == 2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      {
        *(_DWORD *)(v4 + 24) += 2;
        WebCore::HTMLSelectElement::optionToSelectFromChildChangeScope((unsigned int *)v4, a2, a1, &v20);
        v5 = *(_QWORD *)(a1 + 32);
        if (v5
          && (*(_WORD *)(v5 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
        {
          *(_DWORD *)(v5 + 24) += 2;
          WebCore::HTMLSelectElement::setRecalcListItems((WebCore::HTMLSelectElement *)v5);
          WebCore::ValidatedFormListedElement::updateValidity(v5 + 112);
          if (*(_DWORD *)(v5 + 24) == 2)
          {
            if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
          }
          else
          {
            *(_DWORD *)(v5 + 24) -= 2;
          }
        }
        result = (unsigned int *)WebCore::ContainerNode::childrenChanged(a1, a2);
        if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_11;
        result = *(unsigned int **)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (!result)
          goto LABEL_11;
        v15 = result[6];
        result[6] = v15 + 2;
        v16 = *a2;
        if ((v16 - 2) < 3)
        {
          v17 = (_QWORD *)*((_QWORD *)result + 28);
          if (!v17)
            goto LABEL_35;
          v18 = result;
          v19 = 14;
        }
        else
        {
          if (v16 != 8 && v16 != 5 || (v17 = (_QWORD *)*((_QWORD *)result + 28)) == 0)
          {
LABEL_35:
            if (v15)
            {
              result[6] = v15;
            }
            else if ((*((_WORD *)result + 15) & 0x400) == 0)
            {
              result = WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
            }
LABEL_11:
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3446))
              result = WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)a1, *((_QWORD *)a2 + 2), *a2);
            v9 = v20;
            v20 = 0;
            if (v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
              result = v20;
              v20 = 0;
              if (result)
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            }
            if (*(_DWORD *)(v4 + 24) == 2)
            {
              if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)v4, v8);
            }
            else
            {
              *(_DWORD *)(v4 + 24) -= 2;
            }
            return result;
          }
          v18 = result;
          v19 = 13;
        }
        (*(void (**)(_QWORD *, unsigned int *))(*v17 + 8 * v19))(v17, v18);
        result = v18;
        v15 = v18[6] - 2;
        goto LABEL_35;
      }
    }
  }
  result = (unsigned int *)WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v11 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v11 + 24) = v12 + 2;
      v13 = *a2;
      if ((v13 - 2) < 3)
      {
        result = *(unsigned int **)(v11 + 224);
        if (!result)
          goto LABEL_27;
        v14 = 14;
      }
      else
      {
        if (v13 != 8 && v13 != 5 || (result = *(unsigned int **)(v11 + 224)) == 0)
        {
LABEL_27:
          if (v12)
          {
            *(_DWORD *)(v11 + 24) = v12;
          }
          else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          {
            result = WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
          }
          goto LABEL_19;
        }
        v14 = 13;
      }
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
      v12 = *(_DWORD *)(v11 + 24) - 2;
      goto LABEL_27;
    }
  }
LABEL_19:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3446))
    return WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)a1, *((_QWORD *)a2 + 2), *a2);
  return result;
}

void WebCore::HTMLOptGroupElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  BOOL v41;
  BOOL v42;
  void *v43;
  __int128 v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;

  WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  v10 = *(_QWORD *)(a1 + 32);
  if (v10
    && (*(_WORD *)(v10 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::HTMLSelectElement::setRecalcListItems((WebCore::HTMLSelectElement *)v10);
    WebCore::ValidatedFormListedElement::updateValidity(v10 + 112);
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if (*(_QWORD *)a2 != WebCore::HTMLNames::disabledAttr)
    return;
  v11 = *a4 != 0;
  if (*(unsigned __int8 *)(a1 + 112) == v11)
    return;
  if ((*(_BYTE *)(a1 + 22) & 8) == 0)
    goto LABEL_29;
  v12 = *(uint64_t **)(a1 + 40);
  v13 = v12[1];
  if (!*(_QWORD *)(v13 + 1944) || *(_BYTE *)(v13 + 3405))
    goto LABEL_29;
  if ((*(_BYTE *)(a1 + 70) & 4) != 0)
  {
    v17 = *v12;
    v18 = (*(_WORD *)(v17 + 28) & 0x80) == 0 || v17 == 0;
    v19 = v17 + 216;
    if (v18)
      v19 = v13 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v19 + 236))
      goto LABEL_29;
  }
  v14 = *(_QWORD *)(v13 + 1272);
  if (v14 && (*(_BYTE *)(v14 + 70) & 4) != 0)
  {
LABEL_29:
    LOBYTE(v49) = 0;
    v51 = 0;
    v52 = 0;
    v50 = a1;
  }
  else
  {
    if (!*(_BYTE *)(v13 + 3362)
      && ((v15 = *(unsigned __int8 *)(v13 + 3390), *(_BYTE *)(v13 + 3390))
       || (*(_BYTE *)(v13 + 70) & 8) != 0
       || *(_QWORD *)(v13 + 1560)
       || (v16 = *(_QWORD *)(v13 + 1328), *(_BYTE *)(v16 + 233))
       || *(_BYTE *)(v16 + 234)))
    {
      v20 = *(unsigned __int8 *)(v13 + 3391);
      if (v15)
        v21 = v20 == 0;
      else
        v21 = 0;
      v22 = !v21;
      LOBYTE(v49) = v22;
      v51 = 0;
      v52 = 0;
      v50 = a1;
      if (v21)
        goto LABEL_38;
    }
    else
    {
      LOBYTE(v49) = 1;
      v51 = 0;
      v52 = 0;
      v50 = a1;
    }
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v49, (WTF::StringImpl *)0x16, v11, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v49, (WTF::StringImpl *)0x19, v11 ^ 1, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v50, &v51);
  }
LABEL_38:
  v47 = 0;
  v48 = 0;
  v23 = *(_QWORD *)(a1 + 80);
  if (!v23)
    goto LABEL_108;
  while (1)
  {
    v24 = v23;
    v25 = *(_WORD *)(v23 + 28);
    if ((v25 & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      break;
    }
    if ((v25 & 4) != 0)
    {
      v23 = *(_QWORD *)(v24 + 80);
      if (v23)
        continue;
    }
    if (v24 == a1)
      goto LABEL_108;
    while (1)
    {
      v23 = *(_QWORD *)(v24 + 56);
      if (v23)
        break;
      v24 = *(_QWORD *)(v24 + 32);
      if (v24)
        v26 = v24 == a1;
      else
        v26 = 1;
      if (v26)
        goto LABEL_108;
    }
  }
  while (1)
  {
    if ((*(_BYTE *)(v24 + 22) & 8) == 0)
      goto LABEL_70;
    v27 = *(uint64_t **)(v24 + 40);
    v28 = v27[1];
    if (!*(_QWORD *)(v28 + 1944) || *(_BYTE *)(v28 + 3405))
      goto LABEL_70;
    if ((*(_BYTE *)(v24 + 70) & 4) != 0)
    {
      v32 = *v27;
      v33 = (*(_WORD *)(v32 + 28) & 0x80) == 0 || v32 == 0;
      v34 = v32 + 216;
      if (v33)
        v34 = v28 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v34 + 236))
        goto LABEL_70;
    }
    v29 = *(_QWORD *)(v28 + 1272);
    if (v29)
    {
      if ((*(_BYTE *)(v29 + 70) & 4) != 0)
      {
LABEL_70:
        LOBYTE(v44) = 0;
        *((_QWORD *)&v44 + 1) = v24;
        v45 = 0;
        v46 = 0;
        goto LABEL_79;
      }
    }
    if (*(_BYTE *)(v28 + 3362)
      || (v30 = *(unsigned __int8 *)(v28 + 3390), !*(_BYTE *)(v28 + 3390))
      && (*(_BYTE *)(v28 + 70) & 8) == 0
      && !*(_QWORD *)(v28 + 1560)
      && (v31 = *(_QWORD *)(v28 + 1328), !*(_BYTE *)(v31 + 233))
      && !*(_BYTE *)(v31 + 234))
    {
      LOBYTE(v44) = 1;
      *((_QWORD *)&v44 + 1) = v24;
      v45 = 0;
      v46 = 0;
LABEL_78:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v44, (WTF::StringImpl *)0x16, v11, 0);
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v44, (WTF::StringImpl *)0x19, v11 ^ 1, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v44 + 1), &v45);
      goto LABEL_79;
    }
    v35 = *(unsigned __int8 *)(v28 + 3391);
    if (v30)
      v36 = v35 == 0;
    else
      v36 = 0;
    v37 = !v36;
    LOBYTE(v44) = v37;
    *((_QWORD *)&v44 + 1) = v24;
    v45 = 0;
    v46 = 0;
    if (!v36)
      goto LABEL_78;
LABEL_79:
    if (HIDWORD(v48) == (_DWORD)v48)
    {
      WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::PseudoClassChangeInvalidation>((uint64_t)&v47, (unint64_t)&v44);
    }
    else
    {
      v38 = v47 + 32 * HIDWORD(v48);
      *(_OWORD *)v38 = v44;
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable((uint64_t *)(v38 + 16), &v45);
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::HashTable((uint64_t *)(v38 + 24), &v46);
      ++HIDWORD(v48);
    }
    if ((_BYTE)v44)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((uint64_t *)&v44 + 1), &v46);
    if (v46)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v46, v9);
    if (v45)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v45, v9);
    v39 = *(_QWORD *)(v24 + 80);
    if (!v39)
      break;
LABEL_89:
    while (1)
    {
      v24 = v39;
      v40 = *(_WORD *)(v39 + 28);
      if ((v40 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        break;
      }
      if ((v40 & 4) != 0)
      {
        v39 = *(_QWORD *)(v24 + 80);
        if (v39)
          continue;
      }
      if (v24 == a1)
        goto LABEL_108;
      while (1)
      {
        v39 = *(_QWORD *)(v24 + 56);
        if (v39)
          break;
        v24 = *(_QWORD *)(v24 + 32);
        if (v24)
          v41 = v24 == a1;
        else
          v41 = 1;
        if (v41)
          goto LABEL_108;
      }
    }
  }
  if (v24 != a1)
  {
    do
    {
      v39 = *(_QWORD *)(v24 + 56);
      if (v39)
        goto LABEL_89;
      v24 = *(_QWORD *)(v24 + 32);
      if (v24)
        v42 = v24 == a1;
      else
        v42 = 1;
    }
    while (!v42);
  }
LABEL_108:
  *(_BYTE *)(a1 + 112) = v11;
  WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v9);
  if ((_BYTE)v49)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v50, &v52);
  if (v52)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v52, v43);
  if (v51)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v51, v43);
}

WTF::StringImpl *WebCore::HTMLOptGroupElement::groupLabelText@<X0>(WebCore::HTMLOptGroupElement *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  BOOL v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24[2];

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (WTF::StringImpl **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::labelAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1744);
  if (v9)
  {
    v11 = *(WTF::StringImpl **)(v9 + 16);
    v10 = *(WTF::StringImpl **)(v9 + 24);
    v24[0] = v11;
    v24[1] = v10;
    if (v10)
      v12 = PAL::nonBackslashEncodings == 0;
    else
      v12 = 1;
    if (!v12 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v24);
    if (*v7)
      WTF::StringImpl::replace();
    else
      *a2 = 0;
  }
  else
  {
    v13 = *v7;
    if (*v7)
      *(_DWORD *)v13 += 2;
    *a2 = v13;
  }
  WTF::String::trim();
  v15 = v24[0];
  v24[0] = 0;
  v16 = *a2;
  *a2 = v15;
  if (v16)
  {
    v17 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 != 2)
    {
LABEL_27:
      *(_DWORD *)v16 = v17;
      goto LABEL_28;
    }
    WTF::StringImpl::destroy(v16, v14);
    v16 = v24[0];
    v24[0] = 0;
    if (v16)
    {
      v17 = *(_DWORD *)v16 - 2;
      if (*(_DWORD *)v16 != 2)
        goto LABEL_27;
      WTF::StringImpl::destroy(v16, v22);
    }
  }
LABEL_28:
  WTF::String::simplifyWhiteSpace();
  v19 = v24[0];
  v24[0] = 0;
  result = *a2;
  *a2 = v19;
  if (!result)
    return result;
  v21 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result != 2)
    goto LABEL_30;
  WTF::StringImpl::destroy(result, v18);
  result = v24[0];
  v24[0] = 0;
  if (result)
  {
    v21 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
LABEL_30:
    *(_DWORD *)result = v21;
  }
  return result;
}

uint64_t WebCore::HTMLOptGroupElement::accessKeyAction(WebCore::HTMLOptGroupElement *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (!v1
    || (*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    return 0;
  }
  *(_DWORD *)(v1 + 24) += 2;
  if ((*(_BYTE *)(v1 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused((WebCore::Element *)v1))
    v3 = 0;
  else
    v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 592))(v1, 0);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v3;
}

void WebCore::HTMLOptionElement::createForLegacyFactoryFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[8];
  uint64_t v33;
  char v34;

  v12 = bmalloc::api::isoAllocate();
  v13 = v12;
  *(_OWORD *)(v12 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v12 + 24) = 0x141C00000002;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = a1 + 96;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  v14 = WebCore::HTMLNames::optionTag;
  if (WebCore::HTMLNames::optionTag)
    ++*(_DWORD *)WebCore::HTMLNames::optionTag;
  *(_QWORD *)(v12 + 96) = v14;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)v12 = off_1E33C6620;
  *(_WORD *)(v12 + 112) = 0;
  *(_BYTE *)(v12 + 114) = 0;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    goto LABEL_4;
  v19 = bmalloc::api::isoAllocate();
  v20 = v19;
  *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v19 + 24) = 0x300300000002;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = a1 + 96;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  v21 = *(_DWORD **)a2;
  if (*(_QWORD *)a2 || (v21 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v21 += 2;
  *(_QWORD *)(v19 + 80) = v21;
  *(_QWORD *)v19 = off_1E33A8078;
  WebCore::ContainerNode::appendChild(v13, (WebCore::Node *)v19, (uint64_t)v32);
  if (*(_DWORD *)(v20 + 24) == 2)
  {
    if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v20, v22);
  }
  else
  {
    *(_DWORD *)(v20 + 24) -= 2;
  }
  if (!v34)
  {
LABEL_4:
    if (!*a3)
      goto LABEL_28;
    v15 = *(_QWORD *)(v13 + 104);
    if (!v15)
      goto LABEL_26;
    v16 = *(_DWORD *)(v15 + 4);
    if ((v16 & 1) != 0)
    {
      v17 = *(uint64_t **)(v15 + 40);
      v18 = *(_DWORD *)(v15 + 52);
      if (!v18)
      {
LABEL_26:
        v24 = 0xFFFFFFFFLL;
LABEL_27:
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v13, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, a3, 0);
LABEL_28:
        if (!a4)
        {
LABEL_43:
          WebCore::HTMLOptionElement::setSelected((WebCore::HTMLOptionElement *)v13, a5);
          *(_QWORD *)a6 = v13;
          *(_DWORD *)(a6 + 16) = 0;
          return;
        }
        v26 = *(_QWORD *)(v13 + 104);
        if (!v26)
          goto LABEL_41;
        v27 = *(_DWORD *)(v26 + 4);
        if ((v27 & 1) != 0)
        {
          v28 = *(uint64_t **)(v26 + 40);
          v29 = *(_DWORD *)(v26 + 52);
          if (!v29)
          {
LABEL_41:
            v30 = 0xFFFFFFFFLL;
LABEL_42:
            WebCore::Element::setAttributeInternal((WTF::StringImpl *)v13, v30, (WebCore::TreeScope *)&WebCore::HTMLNames::selectedAttr, MEMORY[0x1E0CBF3B8], 0);
            goto LABEL_43;
          }
        }
        else
        {
          v28 = (uint64_t *)(v26 + 32);
          v29 = v27 >> 5;
          if (!v29)
            goto LABEL_41;
        }
        v30 = 0;
        while (1)
        {
          v31 = *v28;
          if (*v28 == WebCore::HTMLNames::selectedAttr
            || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::selectedAttr + 24)
            && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::selectedAttr + 32))
          {
            goto LABEL_42;
          }
          ++v30;
          v28 += 2;
          if (v29 == v30)
            goto LABEL_41;
        }
      }
    }
    else
    {
      v17 = (uint64_t *)(v15 + 32);
      v18 = v16 >> 5;
      if (!v18)
        goto LABEL_26;
    }
    v24 = 0;
    while (1)
    {
      v25 = *v17;
      if (*v17 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        goto LABEL_27;
      }
      ++v24;
      v17 += 2;
      if (v18 == v24)
        goto LABEL_26;
    }
  }
  v23 = v33;
  *(_BYTE *)a6 = v32[0];
  *(_QWORD *)(a6 + 8) = v23;
  *(_DWORD *)(a6 + 16) = 1;
  if (*(_DWORD *)(v13 + 24) == 2)
  {
    if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v13, v22);
  }
  else
  {
    *(_DWORD *)(v13 + 24) -= 2;
  }
}

WTF::StringImpl *WebCore::HTMLOptionElement::setValue(WebCore::HTMLOptionElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

void WebCore::HTMLOptionElement::setSelected(WebCore::HTMLOptionElement *this, void *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned __int8 *)this + 113) != (_DWORD)a2)
  {
    v2 = (int)a2;
    WebCore::HTMLOptionElement::setSelectedState((uint64_t)this, a2, 1);
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      if ((~*(unsigned __int16 *)(v4 + 28) & 0x18) == 0)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
        v6 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
        if (v5 == v6
          || v5 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
          && (v4 = *(_QWORD *)(v4 + 32)) != 0
          && (*(_WORD *)(v4 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == v6)
        {
          *(_DWORD *)(v4 + 24) += 2;
          WebCore::HTMLSelectElement::optionSelectionStateChanged((WebCore::HTMLSelectElement *)v4, this, v2);
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v4, v7);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
        }
      }
    }
  }
}

uint64_t WebCore::HTMLOptionElement::isFocusable(WebCore::HTMLOptionElement *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t isFocusable;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return WebCore::Element::isFocusable(this);
  if ((~*(unsigned __int16 *)(v2 + 28) & 0x18) != 0)
    return WebCore::Element::isFocusable(this);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
  v5 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
  if (v4 != v5)
  {
    if (v4 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      return WebCore::Element::isFocusable(this);
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2 || (*(_WORD *)(v2 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != v5)
      return WebCore::Element::isFocusable(this);
  }
  v6 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v6 + 2;
  if (!*(_BYTE *)(v2 + 297))
  {
    isFocusable = 0;
    if (v6)
      goto LABEL_11;
LABEL_14:
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
    return isFocusable;
  }
  isFocusable = WebCore::Element::isFocusable(this);
  v6 = *(_DWORD *)(v2 + 24) - 2;
  if (*(_DWORD *)(v2 + 24) == 2)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(v2 + 24) = v6;
  return isFocusable;
}

uint64_t WebCore::HTMLOptionElement::ownerSelectElement(WebCore::HTMLOptionElement *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  result = *((_QWORD *)this + 4);
  if (result)
  {
    if ((~*(unsigned __int16 *)(result + 28) & 0x18) != 0)
      return 0;
    v2 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
    v3 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
    if (v2 != v3)
    {
      if (v2 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
        return 0;
      v4 = *(_QWORD *)(result + 32);
      if (!v4 || (*(_WORD *)(v4 + 28) & 0x10) == 0)
        return 0;
      if (*(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == v3)
        return *(_QWORD *)(result + 32);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::HTMLOptionElement::matchesDefaultPseudoClass(WebCore::HTMLOptionElement *this)
{
  return *((unsigned __int8 *)this + 114);
}

uint64_t WebCore::HTMLOptionElement::text(WebCore::HTMLOptionElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[2];

  WebCore::HTMLOptionElement::collectOptionInnerText(this, a2, &v12);
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1744);
  if (v3)
  {
    v5 = *(WTF::StringImpl **)(v3 + 16);
    v4 = *(WTF::StringImpl **)(v3 + 24);
    v13[0] = v5;
    v13[1] = v4;
    if (v4)
      v6 = PAL::nonBackslashEncodings == 0;
    else
      v6 = 1;
    if (!v6 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, (const char **)v13);
    v7 = v12;
    if (v12)
      WTF::StringImpl::replace();
    else
      v11 = 0;
  }
  else
  {
    v7 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    v11 = v7;
  }
  WTF::String::trim();
  WTF::String::simplifyWhiteSpace();
  v9 = v13[0];
  v13[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = (uint64_t)v11;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      result = WTF::StringImpl::destroy(v11, v8);
      if (!v7)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v7)
    return result;
LABEL_20:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v8);
  *(_DWORD *)v7 -= 2;
  return result;
}

WTF::StringImpl *WebCore::HTMLOptionElement::collectOptionInnerText@<X0>(WebCore::HTMLOptionElement *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore *v4;
  uint64_t v6;
  BOOL v7;
  WTF::StringImpl *v8;
  WebCore *v9;
  __int16 v10;
  BOOL v11;
  WebCore::HTMLOptionElement *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  BOOL isScriptElement;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  WebCore *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  char v24;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  v4 = (WebCore *)*((_QWORD *)this + 10);
  if (!v4)
  {
LABEL_45:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v21);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v21);
    result = v21;
    if (v21)
      goto LABEL_46;
    goto LABEL_47;
  }
  *((_DWORD *)v4 + 6) += 2;
  v20 = v4;
  do
  {
    if ((*((_WORD *)v4 + 14) & 2) != 0)
    {
      v6 = *((_QWORD *)v4 + 10);
      if (v23)
        v7 = 0;
      else
        v7 = v22 == 0;
      if (v7)
      {
        if (v6)
          *(_DWORD *)v6 += 2;
        v8 = v21;
        v21 = (WTF::StringImpl *)v6;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            WTF::StringImpl::destroy(v8, a2);
            v6 = *((_QWORD *)v4 + 10);
          }
          else
          {
            *(_DWORD *)v8 -= 2;
          }
        }
        if (v6)
          LODWORD(v6) = *(_DWORD *)(v6 + 4);
        v23 = v6;
      }
      else if (v6 && (*(_BYTE *)(v6 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        WTF::StringBuilder::append();
      }
    }
    v9 = v20;
    v10 = *((_WORD *)v20 + 14);
    if (v20)
      v11 = (v10 & 8) == 0;
    else
      v11 = 1;
    if (!v11)
    {
      isScriptElement = WebCore::isScriptElement(v20, a2);
      v17 = isScriptElement;
      v9 = v20;
      if (v17)
      {
        if (v20 == this)
        {
LABEL_70:
          v18 = 0;
        }
        else
        {
          while (1)
          {
            v18 = *((_QWORD *)v9 + 7);
            if (v18)
              break;
            v9 = (WebCore *)*((_QWORD *)v9 + 4);
            if (v9)
              v19 = v9 == this;
            else
              v19 = 1;
            if (v19)
              goto LABEL_70;
          }
        }
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v20, v18);
        goto LABEL_31;
      }
      v10 = *((_WORD *)v20 + 14);
    }
    if ((v10 & 4) != 0)
    {
      v4 = (WebCore *)*((_QWORD *)v9 + 10);
      if (v4)
        goto LABEL_27;
    }
    if (v9 != this)
    {
      v4 = (WebCore *)*((_QWORD *)v9 + 7);
      if (v4)
      {
LABEL_27:
        *((_DWORD *)v4 + 6) += 2;
      }
      else
      {
        v12 = v9;
        while (1)
        {
          v12 = (WebCore::HTMLOptionElement *)*((_QWORD *)v12 + 4);
          if (!v12 || v12 == this)
            break;
          v4 = (WebCore *)*((_QWORD *)v12 + 7);
          if (v4)
            goto LABEL_27;
        }
        v4 = 0;
      }
      v20 = v4;
      if (!v9)
        continue;
      goto LABEL_29;
    }
    v20 = 0;
LABEL_29:
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, a2);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
LABEL_31:
    v4 = v20;
  }
  while (v4);
  result = v21;
  if (!v21)
    goto LABEL_45;
LABEL_46:
  *(_DWORD *)result += 2;
LABEL_47:
  *a3 = result;
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, a2);
      result = v21;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLOptionElement::setText(WebCore::ContainerNode *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  *((_DWORD *)a1 + 6) += 2;
  v4 = *((_QWORD *)a1 + 4);
  if (!v4)
    goto LABEL_26;
  if ((~*(unsigned __int16 *)(v4 + 28) & 0x18) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24);
    v10 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
    if (v9 == v10)
      goto LABEL_18;
    if (v9 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      goto LABEL_3;
    v4 = *(_QWORD *)(v4 + 32);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != v10)
        goto LABEL_3;
LABEL_18:
      *(_DWORD *)(v4 + 24) += 2;
      if (*(_BYTE *)(v4 + 297))
      {
        v5 = 0;
        v7 = 0;
        v6 = 0xFFFFFFFFLL;
      }
      else
      {
        v6 = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)v4);
        v7 = 0;
        v5 = 1;
      }
      goto LABEL_5;
    }
LABEL_26:
    v5 = 0;
    goto LABEL_4;
  }
LABEL_3:
  v5 = 0;
  v4 = 0;
LABEL_4:
  v6 = 0xFFFFFFFFLL;
  v7 = 1;
LABEL_5:
  v8 = *((unsigned __int16 *)a1 + 14) >> 12;
  if (v8 == 1)
    goto LABEL_6;
  if (v8 > 0xB)
    goto LABEL_7;
  if (v8 == 11)
  {
LABEL_6:
    WebCore::ContainerNode::stringReplaceAll(a1, (uint64_t)a2);
LABEL_7:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_8;
  }
  if (((1 << v8) & 0x19C) == 0)
    goto LABEL_7;
  (*(void (**)(uint64_t *__return_ptr, WebCore::ContainerNode *, WTF::StringImpl *))(*(_QWORD *)a1 + 120))(&v12, a1, a2);
  if ((_BYTE)v14)
  {
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
LABEL_8:
  if (v5 && WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)v4) != (_DWORD)v6)
    WebCore::HTMLSelectElement::selectOption((WebCore::HTMLSelectElement *)v4, (void *)v6, 1);
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  if (*((_DWORD *)a1 + 6) == 2)
  {
    if ((*((_WORD *)a1 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a1, a2);
  }
  else
  {
    *((_DWORD *)a1 + 6) -= 2;
  }
}

uint64_t WebCore::HTMLOptionElement::accessKeyAction(WebCore::HTMLOptionElement *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  if ((~*(unsigned __int16 *)(v1 + 28) & 0x18) != 0)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
  v4 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
  if (v3 != v4)
  {
    if (v3 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      return 0;
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1 || (*(_WORD *)(v1 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != v4)
      return 0;
  }
  *(_DWORD *)(v1 + 24) += 2;
  v5 = (void *)WebCore::HTMLOptionElement::index(this);
  WebCore::HTMLSelectElement::accessKeySetSelectedIndex((WebCore::HTMLSelectElement *)v1, v5);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v6);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return 1;
}

uint64_t WebCore::HTMLOptionElement::index(WebCore::HTMLOptionElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  WebCore::HTMLOptionElement *v12;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  if ((~*(unsigned __int16 *)(v1 + 28) & 0x18) != 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
  v6 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
  if (v5 != v6)
  {
    if (v5 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      return 0;
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1 || (*(_WORD *)(v1 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != v6)
      return 0;
  }
  *(_DWORD *)(v1 + 24) += 2;
  v7 = WebCore::HTMLSelectElement::listItems((WebCore::HTMLSelectElement *)v1);
  v9 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v9)
  {
    v2 = 0;
    v10 = *(_QWORD *)v7;
    for (i = 8 * v9; i; i -= 8)
    {
      if (*(_QWORD *)v10)
      {
        v12 = *(WebCore::HTMLOptionElement **)(*(_QWORD *)v10 + 8);
        if (*(_QWORD *)(*((_QWORD *)v12 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
          goto LABEL_10;
      }
      else if (*(_QWORD *)(MEMORY[0x60] + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        v12 = 0;
LABEL_10:
        if (v12 == this)
          goto LABEL_14;
        v2 = (v2 + 1);
      }
      v10 += 8;
    }
  }
  v2 = 0;
LABEL_14:
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v8);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v2;
}

uint64_t WebCore::HTMLOptionElement::form(WebCore::HTMLOptionElement *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  if ((~*(unsigned __int16 *)(v2 + 28) & 0x18) != 0)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24);
  v5 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
  if (v4 != v5)
  {
    if (v4 != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      return 0;
    v2 = *(_QWORD *)(v2 + 32);
    if (!v2 || (*(_WORD *)(v2 + 28) & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != v5)
      return 0;
  }
  v6 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v6 + 2;
  v7 = *(_QWORD *)(v2 + 120);
  if (v7)
  {
    v3 = *(_QWORD *)(v7 + 8);
    if (v6)
      goto LABEL_11;
  }
  else
  {
    v3 = 0;
    if (v6)
    {
LABEL_11:
      *(_DWORD *)(v2 + 24) = v6;
      return v3;
    }
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  return v3;
}

void WebCore::HTMLOptionElement::attributeChanged(WebCore::HTMLOptionElement *this, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  int v7;
  uint64_t v8;
  __int16 v9;
  WTF::StringImpl *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BOOL8 v21;
  int v22;
  BOOL v23;
  char v24;
  int v25;
  void *v26;
  uint64_t v27;
  WebCore::HTMLSelectElement *v28;
  WebCore::Node *v29;
  void *v30;
  unsigned __int8 v31[4];
  uint64_t v32;
  WebCore::HTMLOptionElement *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;

  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  switch(v7)
  {
    case 899:
      v8 = *((_QWORD *)this + 4);
      if (v8)
      {
        v9 = *(_WORD *)(v8 + 28);
        if ((v9 & 8) != 0)
        {
          while ((v9 & 0x10) == 0
               || (v9 & 0x110) == 0x110
               || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::datalistTag + 24))
          {
            v8 = *(_QWORD *)(v8 + 32);
            if (v8)
            {
              v9 = *(_WORD *)(v8 + 28);
              if ((v9 & 8) != 0)
                continue;
            }
            return;
          }
          do
          {
            WebCore::HTMLDataListElement::optionElementChildrenChanged(v8);
            v8 = WebCore::findElementAncestorOfType<WebCore::HTMLDataListElement>(*(_QWORD *)(v8 + 32));
          }
          while (v8);
        }
      }
      return;
    case 824:
      v12 = *a4;
      if ((*((_BYTE *)this + 22) & 8) == 0)
        goto LABEL_31;
      v13 = (uint64_t *)*((_QWORD *)this + 5);
      v14 = v13[1];
      if (!*(_QWORD *)(v14 + 1944) || *(_BYTE *)(v14 + 3405))
        goto LABEL_31;
      if ((*((_BYTE *)this + 70) & 4) != 0)
      {
        v18 = *v13;
        v19 = (*(_WORD *)(v18 + 28) & 0x80) == 0 || v18 == 0;
        v20 = v18 + 216;
        if (v19)
          v20 = v14 + 1328;
        if (!*(_BYTE *)(*(_QWORD *)v20 + 236))
          goto LABEL_31;
      }
      v15 = *(_QWORD *)(v14 + 1272);
      if (v15 && (*(_BYTE *)(v15 + 70) & 4) != 0)
      {
LABEL_31:
        LOBYTE(v32) = 0;
        v34 = 0;
        v35 = 0;
        v33 = this;
      }
      else
      {
        if (!*(_BYTE *)(v14 + 3362)
          && ((v16 = *(unsigned __int8 *)(v14 + 3390), *(_BYTE *)(v14 + 3390))
           || (*(_BYTE *)(v14 + 70) & 8) != 0
           || *(_QWORD *)(v14 + 1560)
           || (v17 = *(_QWORD *)(v14 + 1328), *(_BYTE *)(v17 + 233))
           || *(_BYTE *)(v17 + 234)))
        {
          v22 = *(unsigned __int8 *)(v14 + 3391);
          if (v16)
            v23 = v22 == 0;
          else
            v23 = 0;
          v24 = !v23;
          LOBYTE(v32) = v24;
          v34 = 0;
          v35 = 0;
          v33 = this;
          if (v23)
            goto LABEL_32;
        }
        else
        {
          LOBYTE(v32) = 1;
          v34 = 0;
          v35 = 0;
          v33 = this;
        }
        WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v32, (WTF::StringImpl *)0x13, v12 != 0, 0);
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v33, &v34);
        v12 = *a4;
      }
LABEL_32:
      v21 = v12 != 0;
      *((_BYTE *)this + 114) = v21;
      if ((v12 != 0) == (*(_QWORD *)a3 == 0))
        WebCore::HTMLOptionElement::setSelected(this, (void *)v21);
      if ((_BYTE)v32)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v33, &v35);
      if (v35)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v35, (void *)v21);
      if (v34)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v34, (void *)v21);
      return;
    case 542:
      v28 = (WebCore::HTMLSelectElement *)WebCore::HTMLOptionElement::ownerSelectElement(this);
      if (v28)
      {
        v29 = v28;
        *((_DWORD *)v28 + 6) += 2;
        WebCore::HTMLSelectElement::optionElementChildrenChanged(v28);
        if (*((_DWORD *)v29 + 6) == 2)
        {
          if ((*((_WORD *)v29 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v29, v30);
        }
        else
        {
          *((_DWORD *)v29 + 6) -= 2;
        }
      }
      break;
    case 435:
      v25 = *a4 != 0;
      if (*((unsigned __int8 *)this + 112) != v25)
      {
        v31[0] = 22;
        v31[1] = v25;
        v31[2] = 25;
        v31[3] = v25 ^ 1;
        WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((uint64_t)&v32, (uint64_t)this, v31, 2);
        *((_BYTE *)this + 112) = v25;
        v27 = *((_QWORD *)this + 8);
        if ((v27 & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((v27 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            return;
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((v27 & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) != 0)
            WebCore::RenderObject::repaint(v27 & 0xFFFFFFFFFFFFLL, 0);
        }
        WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)&v32, v26);
      }
      break;
    default:
      WebCore::HTMLElement::attributeChanged((uint64_t)this, a2, a3, a4, a5, a6);
      return;
  }
}

WTF::StringImpl *WebCore::HTMLOptionElement::value@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = *((_QWORD *)this + 13);
  if (v4
    && ((v5 = *(_DWORD *)(v4 + 4), (v5 & 1) != 0)
      ? (v6 = *(_QWORD *)(v4 + 40), LODWORD(v7) = *(_DWORD *)(v4 + 52))
      : (v6 = v4 + 32, LODWORD(v7) = v5 >> 5),
        (_DWORD)v7))
  {
    v7 = v7;
    v8 = (_DWORD **)(v6 + 8);
    while (1)
    {
      v9 = (uint64_t)*(v8 - 1);
      if (v9 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      v8 += 2;
      if (!--v7)
      {
        v8 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v8 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v10 = *v8;
  if (v10)
  {
    *v10 += 2;
    *a3 = v10;
  }
  else
  {
    WebCore::HTMLOptionElement::collectOptionInnerText(this, a2, &v13);
    WTF::String::trim();
    WTF::String::simplifyWhiteSpace();
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    this = v13;
    v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WebCore::HTMLOptionElement::selected(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if ((~*(unsigned __int16 *)(v3 + 28) & 0x18) == 0)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
      v6 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
      if (v5 == v6
        || v5 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
        && (v3 = *(_QWORD *)(v3 + 32)) != 0
        && (*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == v6)
      {
        v7 = *(_DWORD *)(v3 + 24);
        *(_DWORD *)(v3 + 24) = v7 + 2;
        if (*(_BYTE *)(v3 + 300))
        {
          WebCore::HTMLSelectElement::recalcListItems(v3, (void *)1, a2);
          v7 = *(_DWORD *)(v3 + 24) - 2;
        }
        if (v7)
        {
          *(_DWORD *)(v3 + 24) = v7;
        }
        else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
      }
    }
  }
  return *(unsigned __int8 *)(a1 + 113);
}

uint64_t WebCore::HTMLOptionElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  __int16 v5;
  WTF *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && (v5 = *(_WORD *)(v4 + 28), (v5 & 8) != 0))
  {
    while ((v5 & 0x10) == 0
         || (v5 & 0x110) == 0x110
         || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::datalistTag + 24))
    {
      v4 = *(_QWORD *)(v4 + 32);
      if (v4)
      {
        v5 = *(_WORD *)(v4 + 28);
        if ((v5 & 8) != 0)
          continue;
      }
      goto LABEL_3;
    }
    do
    {
      v17 = HIDWORD(v24);
      if (HIDWORD(v24) == (_DWORD)v24)
      {
        WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement&>((uint64_t)&v23, v4);
      }
      else
      {
        v18 = v23;
        *(_DWORD *)(v4 + 24) += 2;
        *((_QWORD *)v18 + v17) = v4;
        HIDWORD(v24) = v17 + 1;
      }
      v4 = WebCore::findElementAncestorOfType<WebCore::HTMLDataListElement>(*(_QWORD *)(v4 + 32));
    }
    while (v4);
    v6 = v23;
    if (HIDWORD(v24))
    {
      v19 = 0;
      v20 = 8 * HIDWORD(v24);
      do
      {
        WebCore::HTMLDataListElement::optionElementChildrenChanged(*(_QWORD *)((char *)v6 + v19));
        v19 += 8;
      }
      while (v20 != v19);
    }
  }
  else
  {
LABEL_3:
    v6 = 0;
  }
  if (a2[32] != 2)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      if ((~*(unsigned __int16 *)(v7 + 28) & 0x18) == 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
        v11 = *(_QWORD *)(WebCore::HTMLNames::selectTag + 24);
        if (v10 == v11
          || v10 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
          && (v7 = *(_QWORD *)(v7 + 32)) != 0
          && (*(_WORD *)(v7 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == v11)
        {
          *(_DWORD *)(v7 + 24) += 2;
          WebCore::HTMLSelectElement::optionElementChildrenChanged((WebCore::HTMLSelectElement *)v7);
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7, v12);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
        }
      }
    }
  }
  result = WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v13 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 + 24);
      *(_DWORD *)(v13 + 24) = v14 + 2;
      v15 = *a2;
      if ((v15 - 2) < 3)
      {
        result = *(_QWORD *)(v13 + 224);
        if (!result)
          goto LABEL_33;
        v16 = 14;
      }
      else
      {
        if (v15 != 8 && v15 != 5 || (result = *(_QWORD *)(v13 + 224)) == 0)
        {
LABEL_33:
          if (v14)
          {
            *(_DWORD *)(v13 + 24) = v14;
          }
          else if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          {
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v9);
          }
          goto LABEL_8;
        }
        v16 = 13;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v16))();
      v14 = *(_DWORD *)(v13 + 24) - 2;
      goto LABEL_33;
    }
  }
LABEL_8:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3446))
    result = (uint64_t)WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)a1, *((_QWORD *)a2 + 2), *a2);
  if (HIDWORD(v24))
  {
    v21 = 8 * HIDWORD(v24);
    v22 = (uint64_t *)v6;
    do
    {
      result = *v22;
      *v22 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      ++v22;
      v21 -= 8;
    }
    while (v21);
  }
  if (v6)
    return WTF::fastFree(v6, v9);
  return result;
}

WTF::StringImpl *WebCore::HTMLOptionElement::label(WebCore::HTMLOptionElement *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 13);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (WTF::StringImpl **)(v4 + 8);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 1);
      if (v7 == WebCore::HTMLNames::labelAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    v13 = v8;
    WTF::String::trim();
    result = v13;
    v13 = 0;
LABEL_12:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    *(_DWORD *)result -= 2;
    return result;
  }
  WebCore::HTMLOptionElement::collectOptionInnerText(this, a2, &v12);
  WTF::String::trim();
  WTF::String::simplifyWhiteSpace();
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
    goto LABEL_12;
  return result;
}

WTF::StringImpl *WebCore::HTMLOptionElement::displayLabel(WebCore::HTMLOptionElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3384) != 2)
    return WebCore::HTMLOptionElement::label(this, a2);
  WebCore::HTMLOptionElement::collectOptionInnerText(this, a2, &v5);
  WTF::String::trim();
  WTF::String::simplifyWhiteSpace();
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLOptionElement::setLabel(WebCore::HTMLOptionElement *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (!v3)
    goto LABEL_13;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) != 0)
  {
    v5 = *(uint64_t **)(v3 + 40);
    v6 = *(_DWORD *)(v3 + 52);
    if (!v6)
    {
LABEL_13:
      v7 = 0xFFFFFFFFLL;
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::labelAttr, a2, 0);
    }
  }
  else
  {
    v5 = (uint64_t *)(v3 + 32);
    v6 = v4 >> 5;
    if (!v6)
      goto LABEL_13;
  }
  v7 = 0;
  while (1)
  {
    v8 = *v5;
    if (*v5 == WebCore::HTMLNames::labelAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::labelAttr + 32))
    {
      return WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::labelAttr, a2, 0);
    }
    ++v7;
    v5 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
}

uint64_t WebCore::HTMLOptionElement::willResetComputedStyle(WebCore::HTMLOptionElement *this)
{
  uint64_t result;

  result = WebCore::HTMLOptionElement::ownerSelectElement(this);
  if (result)
  {
    result = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL;
    if (result)
    {
      if ((*(_BYTE *)(result + 45) & 2) != 0)
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        return WebCore::RenderObject::repaint(result, 0);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLOptionElement::textIndentedToRespectGroupLabel@<X0>(WebCore::HTMLOptionElement *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
    return WebCore::HTMLOptionElement::displayLabel(this, a2);
  *(_DWORD *)(v4 + 24) += 2;
  if ((*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
  {
    WebCore::HTMLOptionElement::displayLabel(this, a2);
    WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"    ", 5, (uint64_t *)&v7, a3);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    result = WebCore::HTMLOptionElement::displayLabel(this, a2);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::HTMLOptionElement::isDisabledFormControl(WebCore::HTMLOptionElement *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 112))
    return 1;
  v1 = *((_QWORD *)this + 4);
  return v1
      && (*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
      && *(_BYTE *)(v1 + 112) != 0;
}

void *WebCore::HTMLOptionsCollection::bisoHeap(WebCore::HTMLOptionsCollection *this)
{
  return &WebCore::HTMLOptionsCollection::bisoHeap(void)::heap;
}

uint64_t WebCore::HTMLOptionsCollection::operator new(uint64_t this)
{
  if (this == 88)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::HTMLOptionsCollection::create@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = bmalloc::api::isoAllocate();
  v5 = WebCore::HTMLCollection::HTMLCollection(v4, a1, 0x10u);
  *(_QWORD *)(v5 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_BYTE *)(v5 + 80) &= 0xFCu;
  *(_QWORD *)v5 = off_1E33C6B10;
  *a2 = v5;
  return result;
}

unsigned int *WebCore::HTMLOptionsCollection::add@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;

  v7 = WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(*(_QWORD *)(a1 + 24));
  return WebCore::HTMLSelectElement::add(v7, a2, a3, a4);
}

uint64_t WebCore::HTMLOptionsCollection::remove(WebCore::HTMLOptionsCollection *this, int a2)
{
  WebCore::HTMLSelectElement *v3;

  v3 = (WebCore::HTMLSelectElement *)WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(*((_QWORD *)this + 3));
  return WebCore::HTMLSelectElement::remove(v3, a2);
}

uint64_t WebCore::HTMLOptionsCollection::selectedIndex(WebCore::HTMLOptionsCollection *this)
{
  WebCore::HTMLSelectElement *v1;

  v1 = (WebCore::HTMLSelectElement *)WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(*((_QWORD *)this + 3));
  return WebCore::HTMLSelectElement::selectedIndex(v1);
}

void WebCore::HTMLOptionsCollection::setSelectedIndex(WebCore::HTMLOptionsCollection *this, void *a2)
{
  WebCore::HTMLSelectElement *v3;

  v3 = (WebCore::HTMLSelectElement *)WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(*((_QWORD *)this + 3));
  WebCore::HTMLSelectElement::selectOption(v3, a2, 1);
}

uint64_t WebCore::HTMLOptionsCollection::length(WebCore::HTMLOptionsCollection *this)
{
  return WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeCount((uint64_t)this + 40, this);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::length(WebCore::HTMLCollection *a1)
{
  return WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeCount((uint64_t)a1 + 40, a1);
}

_BYTE *WebCore::HTMLOptionsCollection::setLength@<X0>(WebCore::HTMLOptionsCollection *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v5;

  v5 = (_BYTE *)WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(*((_QWORD *)this + 3));
  return WebCore::HTMLSelectElement::setLength(v5, a2, a3);
}

uint64_t WebCore::HTMLOptionsCollection::item(WebCore::HTMLOptionsCollection *this, unsigned int a2)
{
  uint64_t result;

  result = WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt((uint64_t)this + 40, this, a2);
  if (result
    && ((*(_WORD *)(result + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)))
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::downcast<WebCore::HTMLOptionElement,WebCore::Element>(uint64_t result)
{
  if (result
    && ((*(_WORD *)(result + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)))
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::item(WebCore::HTMLOptionsCollection *this, unsigned int a2)
{
  return WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt((uint64_t)this + 40, this, a2);
}

uint64_t WebCore::HTMLOptionsCollection::namedItem(WebCore::HTMLOptionsCollection *this, const WTF::AtomString *a2)
{
  uint64_t v2;

  v2 = WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::namedItem((uint64_t)this, (uint64_t *)a2);
  return WTF::downcast<WebCore::HTMLOptionElement,WebCore::Element>(v2);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, uint64_t *a2)
{
  WebCore::Node *v2;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  WebCore::Node *v10;
  _BOOL4 v11;
  void *v12;
  WebCore::Node *v13;
  int v14;
  void *v15;
  uint64_t v16;
  WebCore::Node *v17;
  WebCore *v18;
  uint64_t v19;
  WebCore::Node *v20;
  WebCore::Node *v21;

  if (*a2 && *(_DWORD *)(*a2 + 4))
  {
    if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v19 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v19 + 22) & 0x18) != 0))
      v6 = *(uint64_t **)(v19 + 40);
    else
      v6 = (uint64_t *)(a1 + 24);
    v7 = *v6;
    if ((*(_BYTE *)(*v6 + 22) & 0x18) == 0)
      return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
    v21 = 0;
    v8 = *(unsigned int **)(v7 + 40);
    if (WebCore::TreeScope::hasElementWithId((uint64_t)v8, (uint64_t)a2))
    {
      if (!WebCore::TreeScope::containsMultipleElementsWithId((uint64_t)v8, a2))
      {
        WebCore::TreeScope::getElementById(v8, (const WTF::AtomString *)a2, (uint64_t *)&v20);
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v21, (uint64_t *)&v20);
        v10 = v20;
        v20 = 0;
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10, v9);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
      }
    }
    else
    {
      if (!WebCore::TreeScope::hasElementWithName((uint64_t)v8, (uint64_t)a2))
      {
        v13 = 0;
        v14 = 0;
        goto LABEL_27;
      }
      if (!WebCore::TreeScope::containsMultipleElementsWithName((uint64_t)v8, a2))
      {
        WebCore::TreeScope::getElementByName(v8, (const WTF::AtomString *)a2, (uint64_t *)&v20);
        v16 = *WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v21, (uint64_t *)&v20);
        v17 = v20;
        v20 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17, v15);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
        if (v16)
        {
          v18 = (WebCore *)*((unsigned __int16 *)v21 + 14);
          if ((v18 & 0x10) == 0
            || (*(_WORD *)(a1 + 21) & 0x1F) == 7
            && !WebCore::nameShouldBeVisibleInDocumentAll(v18, *((WebCore::Element **)v21 + 12)))
          {
            WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v21, 0);
          }
        }
      }
    }
    if (!v21)
      return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
    v11 = WebCore::HTMLOptionsCollection::elementMatches((WebCore::HTMLOptionsCollection *)a1, v21);
    v13 = v21;
    if (v11
      && (WebCore::Node::isDescendantOf((const WebCore::Node ***)v21, (const WebCore::Node ***)v7) & 1) != 0)
    {
      v14 = 0;
      v2 = v13;
LABEL_28:
      v21 = 0;
      if (!v13)
        goto LABEL_45;
      if (*((_DWORD *)v13 + 6) != 2)
      {
        *((_DWORD *)v13 + 6) -= 2;
        if ((v14 & 1) == 0)
          return (uint64_t)v2;
        return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
      }
      if ((*((_WORD *)v13 + 15) & 0x400) != 0)
      {
LABEL_45:
        if (!v14)
          return (uint64_t)v2;
      }
      else
      {
        WebCore::Node::removedLastRef(v13, v12);
        if ((v14 & 1) == 0)
          return (uint64_t)v2;
      }
      return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
    }
    v14 = 1;
LABEL_27:
    v2 = 0;
    goto LABEL_28;
  }
  return 0;
}

uint64_t WebCore::HTMLMeterElement::canContainRangeEndPoint(WebCore::HTMLMeterElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLMeterElement::isLabelable(WebCore::HTMLMeterElement *this)
{
  return 1;
}

void WebCore::HTMLModElement::~HTMLModElement(WebCore::HTMLModElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::HTMLOListElement::~HTMLOListElement(WebCore::HTMLOListElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLObjectElement::asFormListedElement(WebCore::HTMLObjectElement *this)
{
  return (uint64_t)this + 248;
}

uint64_t WebCore::HTMLObjectElement::asValidatedFormListedElement(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLObjectElement::isFormListedElement(WebCore::HTMLObjectElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLObjectElement::isValidatedFormListedElement(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLObjectElement::isFormControlElement(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLObjectElement::asFormAssociatedElement(WebCore::HTMLObjectElement *this)
{
  return (uint64_t)this + 248;
}

uint64_t WebCore::HTMLObjectElement::useFallbackContent(WebCore::HTMLObjectElement *this)
{
  return *((unsigned __int8 *)this + 289);
}

uint64_t WebCore::HTMLObjectElement::willValidate(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t WebCore::HTMLObjectElement::refFormAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLObjectElement::derefFormAssociatedElement(unsigned int *this, void *a2)
{
  if (this[6] == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t WebCore::HTMLObjectElement::isEnumeratable(WebCore::HTMLObjectElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::asHTMLElement(WebCore::HTMLObjectElement *this)
{
  return (uint64_t)this - 248;
}

{
  return (uint64_t)this - 248;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::isFormListedElement(WebCore::HTMLObjectElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::refFormAssociatedElement(uint64_t this)
{
  *(_DWORD *)(this - 224) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLObjectElement::derefFormAssociatedElement(unsigned int *this, void *a2)
{
  if (*(this - 56) == 2)
  {
    if ((*((_WORD *)this - 109) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(this - 62), a2);
  }
  else
  {
    *(this - 56) -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::isValidatedFormListedElement(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::isFormControlElement(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::isEnumeratable(WebCore::HTMLObjectElement *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::asValidatedFormListedElement(WebCore::HTMLObjectElement *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::HTMLObjectElement::willValidate(WebCore::HTMLObjectElement *this)
{
  return 0;
}

void WebCore::HTMLOptGroupElement::~HTMLOptGroupElement(WebCore::HTMLOptGroupElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLOptGroupElement::rendererIsNeeded(WebCore::HTMLOptGroupElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::HTMLOptionElement::rendererIsNeeded(WebCore::HTMLOptionElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

void WebCore::HTMLOptionsCollection::~HTMLOptionsCollection(WebCore::HTMLOptionsCollection *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::memoryCost(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 72);
  v3 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](a1 + 20);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  v5 = *(uint64_t **)(a1 + 32);
  if (v5)
  {
    v9 = *v5;
    if (*v5)
      LODWORD(v9) = *(_DWORD *)(v9 - 12);
    v10 = v5[1];
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
    v6 = 8 * (*((unsigned int *)v5 + 7) + (unint64_t)(v10 + v9));
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr(v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, v3))
      return v6 + 8 * v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return v6 + 8 * v2;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add@<X0>(uint64_t a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  WebCore::QualifiedName::QualifiedNameImpl *v11;
  int v12;
  unsigned int v13;
  int v14;
  int *v15;
  WTF::StringImpl **v16;
  unsigned int i;
  uint64_t v18;
  WebCore::QualifiedName::QualifiedNameImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WebCore::QualifiedName::QualifiedNameImpl *v23;
  uint64_t result;
  unsigned int v25;
  int *v27;
  WTF *v28;
  void *v29;
  int *v30;
  uint64_t v31;
  int *v33;
  WebCore::QualifiedName::QualifiedNameImpl *v34;
  WebCore::QualifiedName::QualifiedNameImpl *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  int v38;
  WTF::StringImpl **v39;
  WebCore::QualifiedName::QualifiedNameImpl *v40;
  int *v41;
  WTF *v42;
  void *v43;
  int *v44;
  char v45;
  uint64_t v46;
  int *v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  void *v51;
  int v52;
  uint64_t v53;
  int v54;

  v4 = a1;
  v7 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  if (20 * v6 >= 19 * (unint64_t)v7 || (v7 <= 2 * (int)v6 ? (v8 = *(_BYTE *)(a1 + 20) == 0) : (v8 = 1), !v8))
  {
    if (v7)
      v9 = 2 * v7;
    else
      v9 = 8;
    WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a1, v9);
    v4 = a1;
    v7 = *(_DWORD *)(a1 + 8);
  }
  v10 = *(_DWORD *)(v4 + 16);
  v11 = *a2;
  v12 = *((_DWORD *)*a2 + 1);
  v54 = v10;
  if (!v12)
  {
    v52 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(v11);
    v10 = v54;
    v4 = a1;
    v12 = v52;
    *((_DWORD *)v11 + 1) = v52;
  }
  v13 = v7 - 1;
  v14 = v12 ^ v10;
  v15 = &webThreadDelegateMessageScopeCount;
  v16 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v53 = a3;
    for (i = 0; ; ++i)
    {
      LODWORD(v18) = v14 & v13;
      v19 = (WebCore::QualifiedName::QualifiedNameImpl **)(*(_QWORD *)v4 + 8 * (v14 & v13));
      if (v16)
      {
        v20 = (*(_DWORD *)v16)++;
        v21 = (WTF::StringImpl **)*v19;
        if (v20)
        {
          *(_DWORD *)v16 = v20;
          v22 = v16;
        }
        else
        {
          v27 = v15;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          WTF::fastFree(v28, v29);
          v15 = v27;
          v10 = v54;
          v4 = a1;
          v22 = (WTF::StringImpl **)*((_QWORD *)v27 + 254);
        }
      }
      else
      {
        v22 = 0;
        v21 = (WTF::StringImpl **)*v19;
      }
      if (v21 == v16)
        break;
      v23 = *v19;
      result = *((unsigned int *)*v19 + 1);
      if (!(_DWORD)result)
      {
        v30 = v15;
        result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*v19);
        v15 = v30;
        v10 = v54;
        v4 = a1;
        *((_DWORD *)v23 + 1) = result;
      }
      v25 = (v18 + v7 - ((result ^ v10) & v13)) & v13;
      if (i > v25)
        goto LABEL_46;
      if ((_DWORD)result == v12 && v23 == *a2)
        goto LABEL_69;
      v14 = v18 + 1;
      v16 = v22;
    }
LABEL_38:
    if (i >= 0x80)
      *(_BYTE *)(v4 + 20) = 1;
    a3 = v53;
  }
  else
  {
    v31 = *(_QWORD *)v4;
    LODWORD(v18) = v14 & v13;
    v19 = (WebCore::QualifiedName::QualifiedNameImpl **)(*(_QWORD *)v4 + 8 * (v14 & v13));
    v23 = *v19;
    if (*v19)
    {
      v53 = a3;
      i = 0;
      while (1)
      {
        result = *((unsigned int *)v23 + 1);
        if (!(_DWORD)result)
        {
          v33 = v15;
          result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(v23);
          v15 = v33;
          v10 = v54;
          v4 = a1;
          *((_DWORD *)v23 + 1) = result;
        }
        v25 = (v18 + v7 - ((result ^ v10) & v13)) & v13;
        if (i > v25)
          break;
        if ((_DWORD)result == v12 && v23 == *a2)
        {
LABEL_69:
          v45 = 0;
          a3 = v53;
          goto LABEL_70;
        }
        ++i;
        LODWORD(v18) = (v18 + 1) & v13;
        v19 = (WebCore::QualifiedName::QualifiedNameImpl **)(v31 + 8 * v18);
        v23 = *v19;
        if (!*v19)
          goto LABEL_38;
      }
LABEL_46:
      if (i >= 0x80)
        *(_BYTE *)(v4 + 20) = 1;
      *v19 = 0;
      result = *((_QWORD *)v15 + 254);
      if (result)
        ++*(_DWORD *)result;
      *v19 = (WebCore::QualifiedName::QualifiedNameImpl *)result;
      v35 = *a2;
      if (*a2)
        ++*(_DWORD *)v35;
      *v19 = v35;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          v47 = v15;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
          result = WTF::fastFree(v48, v49);
          v15 = v47;
          v10 = v54;
          v4 = a1;
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      while (1)
      {
        v18 = ((_DWORD)v18 + 1) & v13;
        v36 = *(_QWORD *)v4;
        v37 = (WTF::StringImpl **)*((_QWORD *)v15 + 254);
        if (v37)
        {
          v38 = (*(_DWORD *)v37)++;
          v39 = *(WTF::StringImpl ***)(v36 + 8 * v18);
          if (v38)
          {
            *(_DWORD *)v37 = v38;
          }
          else
          {
            v41 = v15;
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v37);
            result = WTF::fastFree(v42, v43);
            v15 = v41;
            v10 = v54;
            v4 = a1;
          }
        }
        else
        {
          v39 = *(WTF::StringImpl ***)(v36 + 8 * v18);
        }
        v40 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v36 + 8 * v18);
        if (v39 == v37)
          break;
        result = *((unsigned int *)v40 + 1);
        if (!(_DWORD)result)
        {
          v44 = v15;
          result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*(WebCore::QualifiedName::QualifiedNameImpl **)(v36 + 8 * v18));
          v15 = v44;
          v10 = v54;
          v4 = a1;
          *((_DWORD *)v40 + 1) = result;
        }
        if (++v25 > (((_DWORD)v18 + v7 - ((result ^ v10) & v13)) & v13))
        {
          *(_QWORD *)(v36 + 8 * v18) = v23;
          v23 = v40;
          v25 = (v18 + v7 - ((result ^ v10) & v13)) & v13;
        }
      }
      *(_QWORD *)(v36 + 8 * v18) = v23;
      if (!v40)
      {
        a3 = v53;
        goto LABEL_68;
      }
      a3 = v53;
      if (*(_DWORD *)v40 != 1)
      {
        --*(_DWORD *)v40;
        goto LABEL_68;
      }
      result = (uint64_t)v40;
      goto LABEL_73;
    }
  }
  v34 = *a2;
  if (*a2)
    ++*(_DWORD *)v34;
  result = (uint64_t)*v19;
  *v19 = v34;
  if (!result)
    goto LABEL_68;
  if (*(_DWORD *)result == 1)
  {
LABEL_73:
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
    result = WTF::fastFree(v50, v51);
    v4 = a1;
    goto LABEL_68;
  }
  --*(_DWORD *)result;
LABEL_68:
  ++*(_DWORD *)(v4 + 12);
  v45 = 1;
LABEL_70:
  v46 = *(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 8);
  *(_QWORD *)a3 = v19;
  *(_QWORD *)(a3 + 8) = v46;
  *(_BYTE *)(a3 + 16) = v45;
  return result;
}

void WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::QualifiedName::QualifiedNameImpl **v17;
  WTF::StringImpl **v18;
  int v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  WebCore::QualifiedName::QualifiedNameImpl *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = (WTF *)(8 * a2);
  v7 = (_QWORD *)WTF::fastMalloc(v6);
  v9 = v7;
  if (a2)
  {
    v10 = a2;
    v11 = (_DWORD *)WebCore::nullName;
    if (WebCore::nullName)
    {
      v12 = *(_DWORD *)WebCore::nullName;
      v13 = v7;
      do
      {
        *v13++ = v11;
        --v10;
      }
      while (v10);
      *v11 = v12 + a2;
    }
    else
    {
      bzero(v7, (size_t)v6);
      do
        --v10;
      while (v10);
    }
  }
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = a2;
  v14 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v16 >> 31) ^ v16;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v17 = (WebCore::QualifiedName::QualifiedNameImpl **)v5;
    do
    {
      v18 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
        v19 = (*(_DWORD *)WebCore::nullName)++;
        v20 = *v17;
        if (v19)
        {
          *(_DWORD *)v18 = v19;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
          WTF::fastFree(v22, v23);
        }
      }
      else
      {
        v20 = *v17;
      }
      if (v20 != (WebCore::QualifiedName::QualifiedNameImpl *)v18)
        WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, v17);
      v21 = *v17;
      *v17 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v21);
          WTF::fastFree(v24, v25);
        }
        else
        {
          --*(_DWORD *)v21;
        }
      }
      ++v17;
      --v4;
    }
    while (v4);
    goto LABEL_22;
  }
  if (v5)
LABEL_22:
    WTF::fastFree(v5, v8);
}

WTF::StringImpl **WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  int v4;
  int v5;
  WebCore::QualifiedName::QualifiedNameImpl *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  int v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  WebCore::QualifiedName::QualifiedNameImpl *v21;
  WebCore::QualifiedName::QualifiedNameImpl *v22;
  WTF::StringImpl **v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WebCore::QualifiedName::QualifiedNameImpl *v30;
  WTF::StringImpl **result;
  WTF *v32;
  void *v33;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 4);
  v6 = *a2;
  v7 = *((_DWORD *)*a2 + 1);
  if (!v7)
  {
    v7 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v6 + 1) = v7;
  }
  v8 = 0;
  v9 = v4 - 1;
  v10 = v7 ^ v5;
  v11 = &webThreadDelegateMessageScopeCount;
  while (1)
  {
    v12 = v10 & v9;
    v13 = *a1;
    v14 = (WTF::StringImpl **)*((_QWORD *)v11 + 254);
    if (v14)
    {
      v15 = (*(_DWORD *)v14)++;
      v16 = *(WTF::StringImpl ***)(v13 + 8 * v12);
      if (v15)
      {
        *(_DWORD *)v14 = v15;
      }
      else
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v14);
        WTF::fastFree(v24, v25);
        v11 = &webThreadDelegateMessageScopeCount;
      }
    }
    else
    {
      v16 = *(WTF::StringImpl ***)(v13 + 8 * v12);
    }
    if (v16 == v14)
      break;
    v17 = *(_QWORD *)(v13 + 8 * v12);
    v18 = *(_DWORD *)(v17 + 4);
    if (!v18)
    {
      v18 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*(WebCore::QualifiedName::QualifiedNameImpl **)(v13 + 8 * v12));
      v11 = &webThreadDelegateMessageScopeCount;
      *(_DWORD *)(v17 + 4) = v18;
    }
    v19 = (v12 + v4 - ((v18 ^ v5) & v9)) & v9;
    if (v8 > v19)
    {
      v20 = *a2;
      *a2 = 0;
      v21 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v13 + 8 * v12);
      *(_QWORD *)(v13 + 8 * v12) = 0;
      v22 = *a2;
      *a2 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v22);
          WTF::fastFree(v26, v27);
          v11 = &webThreadDelegateMessageScopeCount;
        }
        else
        {
          --*(_DWORD *)v22;
        }
      }
      v23 = *(WTF::StringImpl ***)(v13 + 8 * v12);
      *(_QWORD *)(v13 + 8 * v12) = v20;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v23);
          WTF::fastFree(v28, v29);
          v11 = &webThreadDelegateMessageScopeCount;
        }
        else
        {
          --*(_DWORD *)v23;
        }
      }
      v8 = v19;
    }
    v10 = v12 + 1;
    ++v8;
  }
  v30 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl ***)(v13 + 8 * v12);
  *(_QWORD *)(v13 + 8 * v12) = v30;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v32, v33);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebCore::QualifiedName::QualifiedNameImpl **WTF::RobinHoodHashTable<WebCore::QualifiedName,WebCore::QualifiedName,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::QualifiedName>,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  WebCore::QualifiedName::QualifiedNameImpl *v7;
  int v8;
  unsigned int v9;
  int v10;
  int *v11;
  WTF::StringImpl **v12;
  unsigned int v13;
  int v14;
  WebCore::QualifiedName::QualifiedNameImpl **v15;
  int v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  int v20;
  int *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;

  v2 = *a1;
  if (*a1)
  {
    v5 = *((unsigned int *)a1 + 2);
    v6 = *((unsigned int *)a1 + 4);
    v7 = *a2;
    v8 = *((_DWORD *)*a2 + 1);
    if (!v8)
    {
      v34 = *((unsigned int *)a1 + 2);
      v35 = *((unsigned int *)a1 + 4);
      v36 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
      v6 = v35;
      v5 = v34;
      v8 = v36;
      *((_DWORD *)v7 + 1) = v36;
    }
    v9 = v5 - 1;
    v10 = v8 ^ v6;
    v11 = &webThreadDelegateMessageScopeCount;
    v12 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v13 = 0;
      v38 = v5;
      while (1)
      {
        v14 = v10 & v9;
        v15 = (WebCore::QualifiedName::QualifiedNameImpl **)(v2 + 8 * (v10 & v9));
        if (v12)
        {
          v16 = (*(_DWORD *)v12)++;
          v17 = (WTF::StringImpl **)*v15;
          if (v16)
          {
            *(_DWORD *)v12 = v16;
            v18 = v12;
          }
          else
          {
            v37 = v6;
            v22 = v11;
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
            WTF::fastFree(v23, v24);
            v11 = v22;
            v6 = v37;
            LODWORD(v5) = v38;
            v18 = (WTF::StringImpl **)*((_QWORD *)v22 + 254);
          }
        }
        else
        {
          v18 = 0;
          v17 = (WTF::StringImpl **)*v15;
        }
        if (v17 == v12)
          break;
        v19 = *v15;
        v20 = *((_DWORD *)*v15 + 1);
        if (!v20)
        {
          v25 = v6;
          v20 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*v15);
          v11 = &webThreadDelegateMessageScopeCount;
          v6 = v25;
          LODWORD(v5) = v38;
          *((_DWORD *)v19 + 1) = v20;
        }
        if (v13 > ((v14 + (_DWORD)v5 - ((v20 ^ v6) & v9)) & v9))
          break;
        if (v20 == v8 && v19 == *a2)
          return v15;
        v10 = v14 + 1;
        ++v13;
        v2 = *a1;
        v12 = v18;
      }
    }
    else
    {
      v26 = v10 & v9;
      v15 = (WebCore::QualifiedName::QualifiedNameImpl **)(v2 + 8 * (v10 & v9));
      v27 = *v15;
      if (*v15)
      {
        v28 = -1;
        do
        {
          v29 = *((_DWORD *)v27 + 1);
          if (!v29)
          {
            v31 = v5;
            v32 = v6;
            v29 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(v27);
            v6 = v32;
            v5 = v31;
            *((_DWORD *)v27 + 1) = v29;
          }
          if (++v28 > ((v26 + (_DWORD)v5 - ((v29 ^ v6) & v9)) & v9))
            break;
          if (v29 == v8 && v27 == *a2)
            return v15;
          v26 = (v26 + 1) & v9;
          v15 = (WebCore::QualifiedName::QualifiedNameImpl **)(v2 + 8 * v26);
          v27 = *v15;
        }
        while (*v15);
      }
    }
  }
  return 0;
}

WebCore::Style::RuleSet *WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(WebCore::Style::RuleSet *result, void *a2)
{
  WebCore::Style::RuleSet **v3;
  WTF *v4;
  void *v5;

  if (result != a2)
  {
    v3 = (WebCore::Style::RuleSet **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(result, a2);
          result = (WebCore::Style::RuleSet *)WTF::fastFree(v4, v5);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(uint64_t result)
{
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(WebCore::HTMLCollection *a1, void *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E33C80E0;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8), a1);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(a1, v3);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(WebCore::HTMLCollection *a1, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(a1, a2);
  return bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CachedHTMLCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33C8168;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::WindowNameCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33C8168;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::CachedHTMLCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33C81D0;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::DocumentNameCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33C81D0;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::findElementAncestorOfType<WebCore::HTMLDataListElement>(uint64_t result)
{
  __int16 v1;

  if (result)
  {
    v1 = *(_WORD *)(result + 28);
    if ((v1 & 8) != 0)
    {
      while ((v1 & 0x10) == 0
           || (v1 & 0x110) == 0x110
           || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::datalistTag + 24))
      {
        result = *(_QWORD *)(result + 32);
        if (!result)
          break;
        v1 = *(_WORD *)(result + 28);
        if ((v1 & 8) == 0)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeCount(uint64_t a1, WebCore::HTMLCollection *a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return *(unsigned int *)(a1 + 20);
  if ((*(_BYTE *)(a1 + 40) & 2) == 0 && !*(_QWORD *)(a1 + 8))
    WebCore::Document::registerCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 40) + 8), a2);
  result = WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(a1, a2);
  *(_DWORD *)(a1 + 20) = result;
  *(_BYTE *)(a1 + 40) |= 1u;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(uint64_t a1, WebCore::HTMLOptionsCollection *a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;

  v14 = WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionBegin((uint64_t)a2);
  v15 = v4;
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(a1 + 32);
  do
  {
    v6 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 32))
    {
      WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(a1 + 24, v4);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      *(_QWORD *)(v7 + 8 * v6) = v8;
      ++*(_DWORD *)(a1 + 36);
    }
    v13 = 0;
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLOptionsCollection>(a2, &v14, 1u, &v13);
    v4 = v15;
  }
  while (v15);
  v10 = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 40) |= 2u;
  v11 = v10 - v5;
  if (v11)
    WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8 * v11));
  return *(unsigned int *)(a1 + 36);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionBegin(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v3 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v3 + 22) & 0x18) != 0))
    v1 = *(uint64_t **)(v3 + 40);
  else
    v1 = (uint64_t *)(a1 + 24);
  return WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::HTMLOptionsCollection>((WebCore::HTMLOptionsCollection *)a1, *v1);
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::begin<WebCore::HTMLOptionsCollection>(WebCore::HTMLOptionsCollection *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3)
  {
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        return v2;
    }
    v6 = v2;
    v7 = v3;
    do
    {
      if (WebCore::HTMLOptionsCollection::elementMatches(this, (WebCore::Element *)v3))
        break;
      WebCore::ElementDescendantIterator<WebCore::Element>::operator++(&v6);
      v3 = v7;
    }
    while (v7);
    return v6;
  }
  return v2;
}

BOOL WebCore::HTMLOptionsCollection::elementMatches(WebCore::HTMLOptionsCollection *this, WebCore::Element *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;

  if ((*((_WORD *)a2 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return 0;
  }
  v4 = *((_QWORD *)a2 + 4);
  if (v4 == WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(*((_QWORD *)this + 3)))
    return 1;
  result = 0;
  v6 = *((_QWORD *)a2 + 4);
  if (v6 && (*(_WORD *)(v6 + 28) & 0x10) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
    {
      v7 = *(_QWORD *)(v6 + 32);
      return v7 == WTF::downcast<WebCore::HTMLSelectElement,WebCore::ContainerNode>(*((_QWORD *)this + 3));
    }
    return 0;
  }
  return result;
}

WebCore::HTMLOptionsCollection *WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLOptionsCollection>(WebCore::HTMLOptionsCollection *result, _QWORD *a2, unsigned int a3, unsigned int *a4)
{
  WebCore::HTMLOptionsCollection *v7;
  WebCore::Element *v8;
  unsigned int v9;

  *a4 = 0;
  if (a3)
  {
    v7 = result;
    while (1)
    {
      result = (WebCore::HTMLOptionsCollection *)WebCore::ElementDescendantIterator<WebCore::Element>::operator++(a2);
      v8 = (WebCore::Element *)a2[1];
      if (!v8)
        break;
      result = (WebCore::HTMLOptionsCollection *)WebCore::HTMLOptionsCollection::elementMatches(v7, v8);
      if ((_DWORD)result)
      {
        v9 = *a4 + 1;
        *a4 = v9;
        if (v9 >= a3)
          break;
      }
    }
  }
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(uint64_t result, WebCore::HTMLOptionsCollection *this, unsigned int a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v5 = result;
  v6 = *(_BYTE *)(result + 40);
  if ((v6 & 1) != 0 && *(_DWORD *)(result + 20) <= a3)
    return 0;
  if ((*(_BYTE *)(result + 40) & 2) != 0)
  {
    if (*(_DWORD *)(result + 36) <= a3)
    {
      __break(0xC471u);
      return result;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a3);
    if (v7)
      return *(_QWORD *)(v7 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 8);
  if (result)
  {
    v8 = *(_DWORD *)(v5 + 16);
    if (v8 < a3)
      return WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo((uint64_t *)v5, this, a3);
    if (v8 > a3)
      return WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo((uint64_t *)v5, this, a3);
    return result;
  }
  if ((v6 & 1) == 0)
  {
    WebCore::Document::registerCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
    goto LABEL_14;
  }
  if (*(_DWORD *)(v5 + 20) - a3 >= a3)
  {
LABEL_14:
    v10 = WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionBegin((uint64_t)this);
    result = v9;
    *(_QWORD *)v5 = v10;
    *(_QWORD *)(v5 + 8) = v9;
    *(_DWORD *)(v5 + 16) = 0;
    if (a3)
    {
      if (v9)
      {
        WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLOptionsCollection>(this, (_QWORD *)v5, a3, (unsigned int *)(v5 + 16));
        result = *(_QWORD *)(v5 + 8);
        if (result)
          return result;
        v11 = *(_DWORD *)(v5 + 16) + 1;
LABEL_26:
        result = 0;
        *(_DWORD *)(v5 + 20) = v11;
        *(_BYTE *)(v5 + 40) |= 1u;
        return result;
      }
    }
    else if (v9)
    {
      return result;
    }
    v11 = 0;
    goto LABEL_26;
  }
  v12 = WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionLast((uint64_t)this);
  result = v13;
  *(_QWORD *)v5 = v12;
  *(_QWORD *)(v5 + 8) = v13;
  v14 = *(_DWORD *)(v5 + 20);
  if (v14 - 1 > a3)
  {
    WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward((_BOOL8)this, (uint64_t *)v5, v14 + ~a3);
    result = *(_QWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 16) = a3;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo(uint64_t *a1, WebCore::HTMLOptionsCollection *this, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22[6];
  WebCore::HTMLOptionsCollection *v23;

  if ((a1[5] & 1) == 0)
  {
    if ((a1[5] & 2) == 0 && !a1[1])
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
      v7 = v6 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v7 + 1768);
      if ((*((_BYTE *)this + 22) & 2) != 0)
      {
        v23 = this;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v6 + 1760), (uint64_t *)&v23, (uint64_t)v22);
      }
    }
    goto LABEL_34;
  }
  if (*((_DWORD *)a1 + 5) - a3 >= a3 - *((_DWORD *)a1 + 4))
  {
LABEL_34:
    v22[0] = 0;
    WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLOptionsCollection>(this, a1, a3 - *((_DWORD *)a1 + 4), v22);
    v20 = v22[0] + *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v20;
    result = a1[1];
    if (!result)
    {
      *((_DWORD *)a1 + 5) = v20 + 1;
      *((_BYTE *)a1 + 40) |= 1u;
    }
    return result;
  }
  if ((*(_WORD *)((_BYTE *)this + 21) & 0x200) != 0
    && (v21 = *((_QWORD *)this + 3), (*(_BYTE *)(v21 + 22) & 0x18) != 0))
  {
    v8 = *(uint64_t **)(v21 + 40);
  }
  else
  {
    v8 = (uint64_t *)((char *)this + 24);
  }
  v9 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLOptionsCollection>(this, *v8);
  result = v10;
  *a1 = v9;
  a1[1] = v10;
  v12 = *((_DWORD *)a1 + 5);
  if (v12 - 1 > a3)
  {
    v13 = v12 + ~a3;
    if (v13)
    {
      while (1)
      {
        v14 = *a1;
        v15 = a1[1];
        v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v16)
          break;
        if ((*(_WORD *)((*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          do
          {
            v19 = *(_QWORD *)(v16 + 88);
            if (!v19)
              break;
            v16 = *(_QWORD *)(v16 + 88);
          }
          while ((*(_WORD *)(v19 + 28) & 4) != 0);
        }
LABEL_16:
        while ((*(_WORD *)(v16 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v16 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v18 = *(_QWORD *)(v16 + 88);
                if (!v18)
                  break;
                v16 = *(_QWORD *)(v16 + 88);
              }
              while ((*(_WORD *)(v18 + 28) & 4) != 0);
            }
            else
            {
              v16 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v16 = *(_QWORD *)(v16 + 32);
            if (v16 == v14)
              goto LABEL_36;
          }
          if (!v16)
            goto LABEL_36;
        }
        a1[1] = v16;
        if (WebCore::HTMLOptionsCollection::elementMatches(this, (WebCore::Element *)v16) && !--v13)
        {
          result = a1[1];
          goto LABEL_37;
        }
      }
      v16 = *(_QWORD *)(v15 + 32);
      if (v16 != v14 && v16 != 0)
        goto LABEL_16;
LABEL_36:
      result = 0;
      a1[1] = 0;
    }
  }
LABEL_37:
  *((_DWORD *)a1 + 4) = a3;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::HTMLOptionsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo(uint64_t *a1, WebCore::HTMLOptionsCollection *this, unsigned int a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = (unsigned int *)(a1 + 2);
  v7 = *((_DWORD *)a1 + 4) - a3;
  if (v7 <= a3)
  {
    if (v7)
    {
      while (1)
      {
        v9 = *a1;
        v10 = a1[1];
        v11 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v11)
          break;
        if ((*(_WORD *)((*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          do
          {
            v14 = *(_QWORD *)(v11 + 88);
            if (!v14)
              break;
            v11 = *(_QWORD *)(v11 + 88);
          }
          while ((*(_WORD *)(v14 + 28) & 4) != 0);
        }
LABEL_10:
        while ((*(_WORD *)(v11 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v11 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v13 = *(_QWORD *)(v11 + 88);
                if (!v13)
                  break;
                v11 = *(_QWORD *)(v11 + 88);
              }
              while ((*(_WORD *)(v13 + 28) & 4) != 0);
            }
            else
            {
              v11 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v11 = *(_QWORD *)(v11 + 32);
            if (v11 == v9)
              goto LABEL_28;
          }
          if (!v11)
            goto LABEL_28;
        }
        a1[1] = v11;
        if (WebCore::HTMLOptionsCollection::elementMatches(this, (WebCore::Element *)v11) && !--v7)
          goto LABEL_29;
      }
      v11 = *(_QWORD *)(v10 + 32);
      if (v11 != v9 && v11 != 0)
        goto LABEL_10;
LABEL_28:
      a1[1] = 0;
    }
LABEL_29:
    *v6 = a3;
  }
  else
  {
    *a1 = WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionBegin((uint64_t)this);
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = 0;
    if (a3)
      WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLOptionsCollection>(this, a1, a3, v6);
  }
  return a1[1];
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionLast(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v3 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v3 + 22) & 0x18) != 0))
    v1 = *(uint64_t **)(v3 + 40);
  else
    v1 = (uint64_t *)(a1 + 24);
  return WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLOptionsCollection>((WebCore::HTMLOptionsCollection *)a1, *v1);
}

BOOL WebCore::CachedHTMLCollection<WebCore::HTMLOptionsCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward(_BOOL8 this, uint64_t *a2, int a3)
{
  int v3;
  WebCore::HTMLOptionsCollection *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (a3)
  {
    v3 = a3;
    v5 = (WebCore::HTMLOptionsCollection *)this;
    while (1)
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v8)
        break;
      if ((*(_WORD *)((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v11 = *(_QWORD *)(v8 + 88);
          if (!v11)
            break;
          v8 = *(_QWORD *)(v8 + 88);
        }
        while ((*(_WORD *)(v11 + 28) & 4) != 0);
      }
LABEL_8:
      while ((*(_WORD *)(v8 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v10 = *(_QWORD *)(v8 + 88);
              if (!v10)
                break;
              v8 = *(_QWORD *)(v8 + 88);
            }
            while ((*(_WORD *)(v10 + 28) & 4) != 0);
          }
          else
          {
            v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v8 = *(_QWORD *)(v8 + 32);
          if (v8 == v6)
            goto LABEL_26;
        }
        if (!v8)
          goto LABEL_26;
      }
      a2[1] = v8;
      this = WebCore::HTMLOptionsCollection::elementMatches(v5, (WebCore::Element *)v8);
      if (this && !--v3)
        return this;
    }
    v8 = *(_QWORD *)(v7 + 32);
    if (v8 != v6 && v8 != 0)
      goto LABEL_8;
LABEL_26:
    a2[1] = 0;
  }
  return this;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::HTMLOptionsCollection>(WebCore::HTMLOptionsCollection *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v5 = *(_QWORD *)(v3 + 88);
        if (!v5)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v5 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v6 = *(_QWORD *)(v3 + 88);
            if (!v6)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v6 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a2)
          return a2;
      }
      if (!v3)
        return a2;
    }
    if (!WebCore::HTMLOptionsCollection::elementMatches(this, (WebCore::Element *)v3))
    {
      while ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (!v10)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v10 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_24:
        while ((*(_WORD *)(v3 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v9 = *(_QWORD *)(v3 + 88);
                if (!v9)
                  break;
                v3 = *(_QWORD *)(v3 + 88);
              }
              while ((*(_WORD *)(v9 + 28) & 4) != 0);
            }
            else
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v3 = *(_QWORD *)(v3 + 32);
            if (v3 == a2)
              return a2;
          }
          if (!v3)
            return a2;
        }
        if (WebCore::HTMLOptionsCollection::elementMatches(this, (WebCore::Element *)v3))
          return a2;
      }
      v3 = *(_QWORD *)(v3 + 32);
      if (v3 != a2 && v3 != 0)
        goto LABEL_24;
    }
  }
  return a2;
}

uint64_t WebCore::HTMLOutputElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x1C1C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v9 = *a1;
  if (*a1)
    ++*v9;
  v10 = 0;
  *(_QWORD *)(result + 96) = v9;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33BC680;
  *(_QWORD *)(result + 112) = off_1E33B3CE0;
  *(_QWORD *)(result + 120) = 0;
  if (a3)
  {
    v11 = result;
    v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
    v10 = v12;
    if (v12)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    result = v11;
  }
  *(_QWORD *)(result + 128) = v10;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_WORD *)(result + 160) = 3;
  *(_BYTE *)(result + 162) = *(_BYTE *)(result + 162) & 0xFC | 2;
  *(_DWORD *)(result + 164) = 0;
  *(_BYTE *)(result + 168) &= 0xF8u;
  *(_QWORD *)result = off_1E33C9700;
  *(_QWORD *)(result + 112) = &unk_1E33C9C88;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *a4 = result;
  return result;
}

uint64_t *WebCore::HTMLOutputElement::formControlType(WebCore::HTMLOutputElement *this)
{
  uint64_t v2;

  if ((_MergedGlobals_189 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83598 = v2;
    _MergedGlobals_189 = 1;
  }
  return &qword_1ECE83598;
}

uint64_t *`non-virtual thunk to'WebCore::HTMLOutputElement::formControlType(WebCore::HTMLOutputElement *this)
{
  uint64_t v2;

  if ((_MergedGlobals_189 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1ECE83598 = v2;
    _MergedGlobals_189 = 1;
  }
  return &qword_1ECE83598;
}

uint64_t WebCore::HTMLOutputElement::supportsFocus(WebCore::HTMLOutputElement *this)
{
  uint64_t result;
  int v3;

  if (((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
    return 1;
  v3 = WebCore::Node::computeEditability((uint64_t)this, 0, 1);
  result = 0;
  if (v3)
  {
    result = *((_QWORD *)this + 4);
    if (result)
      return WebCore::Node::computeEditability(result, 0, 1) == 0;
  }
  return result;
}

void WebCore::HTMLOutputElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v6;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::forAttr)
  {
    v6 = *(_QWORD *)(a1 + 184);
    if (v6)
    {
      if (!*(_BYTE *)(v6 + 16))
        *(_BYTE *)(v6 + 17) = 1;
    }
  }
  WebCore::HTMLFormControlElement::attributeChanged(a1, a2, a3, a4, a5, a6);
}

WTF::StringImpl *WebCore::HTMLOutputElement::reset(WebCore::HTMLOutputElement *this)
{
  WTF::StringBuilder *v2;
  __n128 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent((unsigned __int8 *)this + 112, 0);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v8 = v4;
  }
  else
  {
    WebCore::Node::textContent(this, 0, v2, &v8, v3);
  }
  WebCore::ContainerNode::stringReplaceAll(this, (uint64_t)&v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLOutputElement::reset(WebCore::HTMLOutputElement *this)
{
  return WebCore::HTMLOutputElement::reset((WebCore::HTMLOutputElement *)((char *)this - 112));
}

uint64_t WebCore::HTMLOutputElement::htmlFor(WebCore::HTMLOutputElement *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;

  result = *((_QWORD *)this + 23);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)result = this;
    *(_QWORD *)(result + 8) = &WebCore::HTMLNames::forAttr;
    *(_WORD *)(result + 16) = 256;
    *(_QWORD *)(result + 24) = result + 40;
    *(_QWORD *)(result + 32) = 1;
    *(_QWORD *)(result + 48) = 0;
    v4 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = result;
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v6)
      {
        v7 = *(WTF::StringImpl ***)(v4 + 24);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v3);
            else
              *(_DWORD *)v9 -= 2;
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v10 = *(WTF **)(v4 + 24);
      if ((WTF *)(v4 + 40) != v10 && v10 != 0)
      {
        *(_QWORD *)(v4 + 24) = 0;
        *(_DWORD *)(v4 + 32) = 0;
        WTF::fastFree(v10, v3);
      }
      WTF::fastFree((WTF *)v4, v3);
      return *((_QWORD *)this + 23);
    }
  }
  return result;
}

uint64_t WebCore::HTMLParagraphElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C9E10;
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::HTMLParagraphElement::collectPresentationalHintsForAttribute(WebCore::HTMLParagraphElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  int *v18;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::alignAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  v5 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
  v6 = *(_DWORD *)(v5 + 4);
  if (v6 == 6)
  {
    v10 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *(_BYTE *)v10 & 0xDF;
      if (v11 == 77)
      {
        if ((*(_BYTE *)(v10 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x44
          || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x4C)
        {
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
        }
        v12 = *(unsigned __int8 *)(v10 + 5);
LABEL_23:
        if ((v12 & 0xFFFFFFDF) != 0x45)
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
        goto LABEL_24;
      }
      if (v11 != 67
        || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x4E
        || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x45)
      {
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
      }
      v16 = *(unsigned __int8 *)(v10 + 5);
    }
    else
    {
      v17 = *(_WORD *)v10 & 0xFFDF;
      if (v17 == 77)
      {
        if ((*(_WORD *)(v10 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x44
          || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x4C)
        {
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
        }
        v12 = *(unsigned __int16 *)(v10 + 10);
        goto LABEL_23;
      }
      if (v17 != 67
        || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v10 + 8) & 0xFFDF) != 0x45)
      {
        return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
      }
      v16 = *(unsigned __int16 *)(v10 + 10);
    }
    if ((v16 & 0xFFFFFFDF) != 0x52)
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
LABEL_24:
    v9 = 0x1030u;
    goto LABEL_32;
  }
  if (v6 != 4)
  {
    if (v6 == 5)
    {
      v7 = *(_QWORD *)(v5 + 8);
      if ((*(_BYTE *)(v5 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v7 & 0xDF) != 0x52
          || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x47
          || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x48)
        {
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
        }
        v8 = *(unsigned __int8 *)(v7 + 4);
      }
      else
      {
        if ((*(_WORD *)v7 & 0xFFDF) != 0x52
          || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x47
          || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x48)
        {
          return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
        }
        v8 = *(unsigned __int16 *)(v7 + 8);
      }
      if ((v8 & 0xFFFFFFDF) == 0x54)
      {
        v9 = 0x102Cu;
        goto LABEL_32;
      }
    }
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
  }
  v13 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v13 & 0xDF) != 0x4C || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x46)
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
    v14 = *(unsigned __int8 *)(v13 + 3);
  }
  else
  {
    if ((*(_WORD *)v13 & 0xFFDF) != 0x4C
      || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x46)
    {
      return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
    }
    v14 = *(unsigned __int16 *)(v13 + 6);
  }
  if ((v14 & 0xFFFFFFDF) != 0x54)
    return WebCore::StyledElement::addPropertyToPresentationalHintStyle((uint64_t)this, (uint64_t)a4, 249, (uint64_t)a3);
  v9 = 0x1028u;
LABEL_32:
  WebCore::staticCSSValuePool[v9] += 2;
  v18 = &WebCore::staticCSSValuePool[v9];
  WebCore::MutableStyleProperties::setProperty(a4, 249, &v18, 0);
  result = (WTF::StringImpl *)v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLParamElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CA7F0;
  *a3 = result;
  return result;
}

void WebCore::HTMLPictureElement::~HTMLPictureElement(WebCore::HTMLPictureElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLPictureElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33C82A8;
  *a3 = result;
  return result;
}

WebCore::Node *WebCore::HTMLPictureElement::sourceDimensionAttributesChanged(WebCore::Node *this, const WebCore::HTMLSourceElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const WebCore::HTMLSourceElement *v6;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    while ((*(_WORD *)(v2 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        return this;
    }
    while (1)
    {
      v5 = *(_QWORD *)(v2 + 280);
      if (v5 && *(const WebCore::HTMLSourceElement **)(v5 + 8) == a2)
      {
        v6 = a2;
        v3 = *(_QWORD *)(v2 + 104);
        if (!v3 || (v4 = *(_DWORD *)(v3 + 4), (v4 & 1) == 0))
        {
          WebCore::Element::createUniqueElementData((WebCore::Element *)v2);
          v3 = *(_QWORD *)(v2 + 104);
          v4 = *(_DWORD *)(v3 + 4);
        }
        *(_DWORD *)(v3 + 4) = v4 | 4;
        this = WebCore::Element::invalidateStyle((WebCore::Node *)v2);
        a2 = v6;
      }
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        break;
      while ((*(_WORD *)(v2 + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      {
        v2 = *(_QWORD *)(v2 + 56);
        if (!v2)
          return this;
      }
    }
  }
  return this;
}

BOOL WebCore::HTMLPictureElement::isSystemPreviewImage(WebCore::HTMLPictureElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680);
  return ((*(unsigned int *)(v1 + 720) | (unint64_t)((uint64_t)*(char *)(v1 + 724) << 32)) & 0x8000000000000000) != 0
      && (v2 = *((_QWORD *)this + 4)) != 0
      && (~*(unsigned __int16 *)(v2 + 28) & 0x18) == 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24)
      && WebCore::HTMLAnchorElement::isSystemPreviewLink((WebCore::HTMLAnchorElement *)v2);
}

unsigned int *WebCore::HTMLPlugInElement::swapRendererTimerFired(unsigned int *this)
{
  uint64_t v1;
  void *v2;
  __int16 v3;
  __int16 v4;

  v1 = (uint64_t)this;
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
    || !*(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
  {
    this[6] += 2;
    this = (unsigned int *)WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)this);
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      v3 = *(_WORD *)(v1 + 30);
      if ((v3 & 0x400) == 0)
      {
        v4 = *(_WORD *)(v1 + 28);
        if ((v4 & 0xF000) == 0x9000)
        {
          return WebCore::Document::removedLastRef((WebCore::Document *)v1, v2);
        }
        else
        {
          if ((v4 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
            v3 = *(_WORD *)(v1 + 30);
          }
          *(_WORD *)(v1 + 30) = v3 | 0x400;
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
        }
      }
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::HTMLPlugInElement::willRespondToMouseClickEventsWithEditability(_QWORD *a1)
{
  uint64_t result;

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1) & 1) != 0 || (a1[8] & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3)
      return (*(unsigned __int8 *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::HTMLPlugInElement::willDetachRenderers(WebCore::HTMLPlugInElement *this, void *a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  __int16 v13;
  _QWORD *v14;
  uint64_t v15;

  result = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    else
      --result[2];
  }
  if (*((_BYTE *)this + 200))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(v5 + 640);
        v9 = *(_QWORD *)(v8 + 200);
        *(_QWORD *)(v8 + 200) = 0;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            v12 = *(_WORD *)(v9 + 30);
            if ((v12 & 0x400) == 0)
            {
              v13 = *(_WORD *)(v9 + 28);
              if ((v13 & 0xF000) == 0x9000)
              {
                result = WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
              }
              else
              {
                if ((v13 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
                  v12 = *(_WORD *)(v9 + 30);
                }
                *(_WORD *)(v9 + 30) = v12 | 0x400;
                result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
              }
            }
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
        *(_BYTE *)(v8 + 194) = 0;
        *(_BYTE *)(v8 + 190) = 0;
        do
        {
          v10 = __ldaxr(v6);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v6));
        if (!v11)
        {
          atomic_store(1u, v6);
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v14 = off_1E31FE290;
          v14[1] = v6;
          v15 = (uint64_t)v14;
          WTF::ensureOnMainThread();
          result = (unsigned int *)v15;
          if (v15)
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
      }
    }
    *((_BYTE *)this + 200) = 0;
  }
  return result;
}

uint64_t WebCore::HTMLPlugInElement::bindingsInstance(WebCore::HTMLPlugInElement *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WebCore::Widget *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v4 = (unsigned int *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (!*((_QWORD *)this + 16))
  {
    v10 = (*(uint64_t (**)(WebCore::HTMLPlugInElement *))(*(_QWORD *)this + 1312))(this);
    if (v10)
    {
      v11 = *(WebCore::Widget **)(v10 + 232);
      if (v11)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 88))(*(_QWORD *)(v10 + 232)))
        {
          ++*((_DWORD *)v11 + 2);
          WebCore::ScriptController::createScriptInstanceForWidget(*(_DWORD **)(v2 + 304), v11, &v17);
          v12 = v17;
          v17 = 0;
          v13 = (_DWORD *)*((_QWORD *)this + 16);
          *((_QWORD *)this + 16) = v12;
          if (!v13)
            goto LABEL_16;
          v14 = v13[2] - 1;
          if (v13[2] != 1)
            goto LABEL_15;
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 96))(v13);
          v13 = v17;
          v17 = 0;
          if (v13)
          {
            v14 = v13[2] - 1;
            if (v13[2] != 1)
            {
LABEL_15:
              v13[2] = v14;
              goto LABEL_16;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 96))(v13);
          }
LABEL_16:
          if (*((_DWORD *)v11 + 2) == 1)
            (*(void (**)(WebCore::Widget *))(*(_QWORD *)v11 + 8))(v11);
          else
            --*((_DWORD *)v11 + 2);
        }
      }
    }
  }
  v6 = *((_QWORD *)this + 16);
  do
  {
    v7 = __ldaxr(v4);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v4));
  if (!v8)
  {
    atomic_store(1u, v4);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v4;
    v17 = v15;
    WTF::ensureOnMainThread();
    v16 = v17;
    v17 = 0;
    if (v16)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
  }
  return v6;
}

uint64_t WebCore::HTMLPlugInElement::pluginWidget(WebCore::HTMLFrameOwnerElement *a1, int a2)
{
  uint64_t result;
  uint64_t v3;

  if (a2 == 1)
  {
    result = (*(uint64_t (**)(WebCore::HTMLFrameOwnerElement *))(*(_QWORD *)a1 + 1312))(a1);
    if (!result)
      return result;
  }
  else
  {
    result = WebCore::HTMLFrameOwnerElement::renderWidget(a1);
    if (!result)
      return result;
  }
  v3 = *(_QWORD *)(result + 232);
  if (!v3)
    return 0;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v3 + 88))(*(_QWORD *)(result + 232)))
    return v3;
  return 0;
}

uint64_t WebCore::HTMLPlugInElement::renderWidgetLoadingPlugin(WebCore::HTMLPlugInElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v3 = *(_QWORD *)(v2 + 528);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v5 = 0;
    goto LABEL_14;
  }
  v5 = *(_QWORD *)(v4 + 288);
  if (!v5)
  {
LABEL_14:
    v8 = 1;
LABEL_15:
    WebCore::Document::updateLayout(v2, 3u, 0);
    v6 = WebCore::HTMLFrameOwnerElement::renderWidget(this);
    if ((v8 & 1) != 0)
      return v6;
    goto LABEL_8;
  }
  ++*(_DWORD *)(v5 + 8);
  if (!*(_BYTE *)(v5 + 1389) && !*(_BYTE *)(v5 + 480) && !*(_BYTE *)(v5 + 1374))
  {
    v8 = 0;
    goto LABEL_15;
  }
  v6 = WebCore::HTMLFrameOwnerElement::renderWidget(this);
LABEL_8:
  if (*(_DWORD *)(v5 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 8);
  return v6;
}

uint64_t WebCore::HTMLPlugInElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x38F)
  {
    v5 = v2 - 912;
    v6 = v5 > 0x25;
    v7 = 1 << v5;
    v8 = 0x2800000401;
LABEL_8:
    v9 = v7 & v8;
    if (v6 || v9 == 0)
      return 0;
    return result;
  }
  v4 = v2 - 504 > 7 || ((1 << (v2 + 8)) & 0x83) == 0;
  if (v4 && v2 != 286)
  {
    v11 = v2 - 411;
    v6 = v11 > 0x20;
    v7 = 1 << v11;
    v8 = 0x100200001;
    goto LABEL_8;
  }
  return result;
}

void WebCore::HTMLPlugInElement::collectPresentationalHintsForAttribute(WebCore::HTMLPlugInElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WebCore::HTMLPlugInElement *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  WebCore::MutableStyleProperties *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  uint64_t v21;

  v6 = this;
  v7 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v7 <= 0x1FE)
  {
    if (v7 == 286)
    {
      WebCore::HTMLElement::applyAlignmentAttributeToStyle(this, a3, a4);
      return;
    }
    if (v7 == 504)
    {
      v13 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        v9 = *(unsigned __int16 **)(v13 + 8);
        v10 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v9 = 0;
        v10 = 0x100000000;
      }
      v11 = a4;
      v12 = 393;
      goto LABEL_23;
    }
  }
  else
  {
    switch(v7)
    {
      case 0x1FFu:
        v14 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v15 = *(unsigned __int16 **)(v14 + 8);
          v16 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v15 = 0;
          v16 = 0x100000000;
        }
        WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 405, v15, v16, 1);
        v17 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v9 = *(unsigned __int16 **)(v17 + 8);
          v10 = *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v10 = 0x100000000;
        }
        this = v6;
        v11 = a4;
        v12 = 406;
        goto LABEL_23;
      case 0x390u:
        v18 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v19 = *(unsigned __int16 **)(v18 + 8);
          v20 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v19 = 0;
          v20 = 0x100000000;
        }
        WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 407, v19, v20, 1);
        v21 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v9 = *(unsigned __int16 **)(v21 + 8);
          v10 = *(unsigned int *)(v21 + 4) | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v10 = 0x100000000;
        }
        this = v6;
        v11 = a4;
        v12 = 402;
        goto LABEL_23;
      case 0x39Au:
        v8 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v9 = *(unsigned __int16 **)(v8 + 8);
          v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v9 = 0;
          v10 = 0x100000000;
        }
        v11 = a4;
        v12 = 450;
LABEL_23:
        WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, v11, v12, v9, v10, 1);
        return;
    }
  }
  WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
}

uint64_t WebCore::HTMLPlugInElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  char v3;
  uint64_t result;

  v3 = a2;
  result = WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
  if ((v3 & 1) != 0)
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3320);
  return result;
}

uint64_t *WebCore::HTMLPlugInElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  char v5;
  uint64_t *result;

  v5 = a2;
  result = WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
  if ((v5 & 1) != 0)
    --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3320);
  return result;
}

void WebCore::HTMLPlugInElement::defaultEventHandler(WebCore::HTMLPlugInElement *this, WebCore::Event *a2)
{
  uint64_t v2;
  int v3;
  int v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_25;
  v3 = (*(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
    v3 = 0;
  if (v3 == 1)
  {
    v6 = *(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E);
    if (v6 == 7)
      v7 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    else
      v7 = 0;
    if (v7)
    {
      ++*(_DWORD *)(v7 + 16);
      if (v6 != 7)
        goto LABEL_13;
    }
    else if (v6 != 7)
    {
      goto LABEL_15;
    }
    if (*(_BYTE *)(v2 + 256))
      WebCore::RenderEmbeddedObject::handleUnavailablePluginIndicatorEvent((WebCore::RenderEmbeddedObject *)v2, a2);
LABEL_13:
    v8 = *(_DWORD *)(v7 + 16);
    if (v8)
    {
      *(_DWORD *)(v7 + 16) = v8 - 1;
LABEL_15:
      v9 = *(_DWORD **)(v2 + 232);
      if (v9)
      {
        ++v9[2];
        (*(void (**)(_DWORD *, WebCore::Event *))(*(_QWORD *)v9 + 120))(v9, a2);
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
        WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
      return;
    }
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x195C5C608);
  }
}

uint64_t WebCore::HTMLPlugInElement::isKeyboardFocusable(WebCore::HTMLPlugInElement *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 14);
  if (v2 && *(_QWORD *)(v2 + 8))
    return WebCore::Element::isKeyboardFocusable(this, a2);
  else
    return 0;
}

uint64_t WebCore::HTMLPlugInElement::isPluginElement(WebCore::HTMLPlugInElement *this)
{
  return 1;
}

uint64_t WebCore::HTMLPlugInElement::supportsFocus(WebCore::HTMLPlugInElement *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  if (((*((_QWORD *)this + 9) >> 58) & 3) - 1 < 3)
    return 1;
  if (WebCore::Node::computeEditability((uint64_t)this, 0, 1))
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v1 = 1;
      if (!WebCore::Node::computeEditability(v4, 0, 1))
        return v1;
    }
  }
  if (((*(uint64_t (**)(WebCore::HTMLPlugInElement *))(*(_QWORD *)this + 1296))(this) & 1) != 0
    || (*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    return 0;
  }
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 7)
      return *(unsigned __int8 *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x100) == 0;
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

double WebCore::HTMLPlugInElement::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  double result;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v7 = *(_QWORD *)(a1 + 192);
  if (v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 192) + 32))(*(_QWORD *)(a1 + 192), a1, a2, a3);
  }
  else
  {
    v10 = bmalloc::api::isoAllocate();
    v11 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v10, 7, a1, a2, 12, 1027);
    *(_OWORD *)(v11 + 184) = 0u;
    *(_OWORD *)(v11 + 168) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_QWORD *)&result = 0x258000004B00;
    *(_QWORD *)(v11 + 200) = 0x258000004B00;
    v12 = *(_DWORD *)(v11 + 20);
    *(_DWORD *)(v11 + 224) = 1;
    *(_QWORD *)(v11 + 240) = 0;
    *(_QWORD *)(v11 + 248) = 0;
    *(_QWORD *)(v11 + 232) = 0;
    *(_DWORD *)(v11 + 20) = v12 | 3;
    *(_QWORD *)v11 = off_1E3422EF8;
    *(_QWORD *)(v11 + 208) = 0;
    *(_QWORD *)(v11 + 216) = &unk_1E34235B8;
    *(_BYTE *)(v11 + 256) = 0;
    *(_DWORD *)(v11 + 260) = 0;
    *(_QWORD *)(v11 + 272) = 0;
    *(_WORD *)(v11 + 280) = 0;
    *(_QWORD *)(v11 + 288) = 0;
    *a4 = v11;
  }
  return result;
}

uint64_t WebCore::HTMLPlugInElement::didAddUserAgentShadowRoot(WebCore::HTMLPlugInElement *this, WebCore::ShadowRoot *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::MonotonicTime *v7;
  double v8;

  result = *((_QWORD *)this + 24);
  if (result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          if (*(_QWORD *)(v6 + 8) && *((_DWORD *)this + 51) == 1)
          {
            (*(void (**)(uint64_t, WebCore::ShadowRoot *))(*(_QWORD *)result + 16))(result, a2);
            if (*((_DWORD *)this + 51) != 2)
            {
              *((_DWORD *)this + 51) = 2;
              if ((*((_QWORD *)this + 21) & 0xFFFFFFFFFFFFLL) != 0)
              {
                v7 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::HTMLPlugInElement *)((char *)this + 136));
                if (*((_DWORD *)this + 51) == 1)
                {
                  *((_QWORD *)this + 20) = 0;
                  WTF::MonotonicTime::now(v7);
                  WebCore::TimerBase::setNextFireTime((uint64_t)this + 136, v8 + 0.0);
                }
              }
            }
            return WebCore::Node::invalidateStyle((uint64_t)this, 4u, 2);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLPlugInElement::requestObject(uint64_t a1, _QWORD *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WebCore *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::MonotonicTime *v35;
  int v36;
  double v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *PathComponent;
  __int128 v46;
  __int128 v47;

  if (*(_QWORD *)(a1 + 192))
    return 1;
  v40 = 0;
  WTF::URL::invalidate((WTF::URL *)&v40);
  if (*a2 && *(_DWORD *)(*a2 + 4))
  {
    WebCore::Document::completeURL(*(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8), a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 848, 0, (WTF::URL *)&PathComponent);
    v18 = PathComponent;
    PathComponent = 0;
    v19 = v40;
    v40 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v11);
        v20 = PathComponent;
      }
      else
      {
        v20 = 0;
        *(_DWORD *)v19 -= 2;
      }
    }
    else
    {
      v20 = 0;
    }
    v41 = v46;
    LODWORD(v46) = v46 & 0xFFFFFFFE;
    v42 = v47;
    PathComponent = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v11);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if ((byte_1ECE83591 & 1) == 0)
    goto LABEL_70;
  while (1)
  {
    if ((byte_1ECE83592 & 1) == 0)
    {
      byte_1ECE83592 = 1;
      PathComponent = (WTF::StringImpl *)WebCore::YouTubePluginReplacement::create;
      *(_QWORD *)&v46 = WebCore::YouTubePluginReplacement::supportsMIMEType;
      *((_QWORD *)&v46 + 1) = WebCore::YouTubePluginReplacement::supportsFileExtension;
      *(_QWORD *)&v47 = WebCore::YouTubePluginReplacement::supportsURL;
      *((_QWORD *)&v47 + 1) = WebCore::YouTubePluginReplacement::isEnabledBySettings;
      WebCore::registrar((uint64_t)&PathComponent);
    }
    if (!dword_1ECE835AC)
      goto LABEL_92;
    PathComponent = (WTF::StringImpl *)WTF::URL::lastPathComponent((WTF::URL *)&v40);
    *(_QWORD *)&v46 = v12;
    v13 = WTF::StringView::reverseFind((uint64_t)&PathComponent, 0x2Eu, 0xFFFFFFFF);
    if (v13 == -1)
      break;
    v14 = (v13 + 1);
    if (v46 <= v14)
    {
      v15 = 0x100000000;
      v16 = (WebCore *)"";
      goto LABEL_12;
    }
    if ((_DWORD)v13 == -1)
    {
      v16 = PathComponent;
      v15 = v46;
LABEL_12:
      v17 = v15 & 0xFFFFFFFFFFLL;
      goto LABEL_21;
    }
    v15 = (v46 - v14);
    v26 = v46 - (unint64_t)v14;
    if (BYTE4(v46))
    {
      if (v26 >= v15)
      {
        v16 = (WTF::StringImpl *)((char *)PathComponent + v14);
        v15 |= 0x100000000uLL;
        goto LABEL_12;
      }
    }
    else if (v26 >= v15)
    {
      v16 = (WTF::StringImpl *)((char *)PathComponent + 2 * v14);
      goto LABEL_12;
    }
    __break(1u);
LABEL_70:
    *(_QWORD *)&dword_1ECE835A8 = 0;
    qword_1ECE835A0 = 0;
    byte_1ECE83591 = 1;
  }
  v16 = 0;
  v17 = 0x100000000;
LABEL_21:
  v21 = *a3;
  if (!v21)
  {
    v44 = 0;
LABEL_40:
    if (WTF::URL::protocolIs())
    {
      WTF::mimeTypeFromDataURL();
      v27 = v43;
      v43 = 0;
      v44 = v27;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v11);
          v32 = v43;
          v43 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v11);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v21 -= 2;
        }
      }
      v21 = v27;
    }
    if (v21)
    {
      v33 = *((_DWORD *)v21 + 1);
      if (v33 || !(_DWORD)v17)
        goto LABEL_75;
    }
    else if (!(_DWORD)v17)
    {
      goto LABEL_53;
    }
    if (dword_1ECE835AC)
    {
      v28 = qword_1ECE835A0;
      v29 = 8 * dword_1ECE835AC;
      while (1)
      {
        v25 = *(_QWORD *)v28;
        if ((*(unsigned int (**)(WebCore *, unint64_t))(*(_QWORD *)v28 + 16))(v16, v17))
        {
          if (((*(uint64_t (**)(WTF::StringImpl **))(v25 + 24))(&v40) & 1) != 0)
            break;
        }
        v28 += 8;
        v29 -= 8;
        if (!v29)
          goto LABEL_52;
      }
LABEL_78:
      v44 = 0;
      if (!v21)
        goto LABEL_81;
      goto LABEL_79;
    }
LABEL_52:
    if (!v21)
    {
LABEL_53:
      v30 = 1;
      if ((_DWORD)v17)
        goto LABEL_54;
      goto LABEL_77;
    }
    v33 = *((_DWORD *)v21 + 1);
LABEL_75:
    if (v33)
      goto LABEL_23;
    v30 = 0;
    if ((_DWORD)v17)
    {
LABEL_54:
      WebCore::MIMETypeRegistry::mediaMIMETypeForExtension(v16, v17, &v43);
      v22 = v43;
      v43 = 0;
      v44 = v22;
      if ((v30 & 1) == 0)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v11);
          v31 = v43;
          v43 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v11);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v21 -= 2;
        }
      }
      if (!v22)
        goto LABEL_92;
      if (!*((_DWORD *)v22 + 1))
        goto LABEL_59;
      goto LABEL_24;
    }
LABEL_77:
    v25 = 0;
    goto LABEL_78;
  }
  *(_DWORD *)v21 += 2;
  v44 = v21;
  if (!*((_DWORD *)v21 + 1))
    goto LABEL_40;
LABEL_23:
  v22 = v21;
LABEL_24:
  if (dword_1ECE835AC)
  {
    v23 = qword_1ECE835A0;
    v24 = 8 * dword_1ECE835AC;
    while (1)
    {
      v25 = *(_QWORD *)v23;
      if ((*(unsigned int (**)(WTF::StringImpl **))(*(_QWORD *)v23 + 8))(&v44))
      {
        if (((*(uint64_t (**)(WTF::StringImpl **))(v25 + 24))(&v40) & 1) != 0)
          break;
      }
      v23 += 8;
      v24 -= 8;
      if (!v24)
      {
        v25 = 0;
        break;
      }
    }
    v21 = v44;
    goto LABEL_78;
  }
LABEL_59:
  v25 = 0;
  v44 = 0;
  v21 = v22;
LABEL_79:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::destroy(v21, v11);
    if (!v25)
      goto LABEL_92;
    goto LABEL_82;
  }
  *(_DWORD *)v21 -= 2;
LABEL_81:
  if (!v25)
  {
LABEL_92:
    v5 = 0;
    goto LABEL_93;
  }
LABEL_82:
  if (!(*(unsigned int (**)(_QWORD))(v25 + 32))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680)))
    goto LABEL_92;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))v25)(&PathComponent, a1, a4, a5);
  v34 = PathComponent;
  PathComponent = 0;
  v35 = *(WTF::MonotonicTime **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v34;
  if (v35)
  {
    v36 = *((_DWORD *)v35 + 2) - 1;
    if (*((_DWORD *)v35 + 2) == 1)
    {
      (*(void (**)(WTF::MonotonicTime *))(*(_QWORD *)v35 + 8))(v35);
      v35 = PathComponent;
      PathComponent = 0;
      if (!v35)
        goto LABEL_86;
      v36 = *((_DWORD *)v35 + 2) - 1;
      if (*((_DWORD *)v35 + 2) == 1)
      {
        v35 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v35 + 8))(v35);
        goto LABEL_86;
      }
    }
    *((_DWORD *)v35 + 2) = v36;
  }
LABEL_86:
  v5 = 1;
  if (*(_DWORD *)(a1 + 204) != 1)
  {
    *(_DWORD *)(a1 + 204) = 1;
    if ((*(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFLL) == 0
      || (v35 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 136)),
          *(_DWORD *)(a1 + 204) == 1))
    {
      *(_QWORD *)(a1 + 160) = 0;
      WTF::MonotonicTime::now(v35);
      WebCore::TimerBase::setNextFireTime(a1 + 136, v37 + 0.0);
    }
    v5 = 1;
  }
LABEL_93:
  v38 = v40;
  v40 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v11);
    else
      *(_DWORD *)v38 -= 2;
  }
  return v5;
}

BOOL WebCore::HTMLPlugInElement::setReplacement(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _BOOL8 isReplacementObscured;
  _BOOL8 v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v14;
  __int16 v15;
  _BYTE v16[20];
  __int128 v17;
  char v18;

  *(_DWORD *)(a1 + 24) += 2;
  v3 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    goto LABEL_21;
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_36;
  }
  if (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 7)
  {
    v4 = *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
    *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v4;
    if ((_DWORD)a2 == 4)
    {
      v5 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::Document::addConsoleMessage(v5, 1, 1, (WTF::StringImpl **)&v17, 0);
      v7 = (WTF::StringImpl *)v17;
      *(_QWORD *)&v17 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      v4 = *(_DWORD *)(v3 + 16);
    }
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5D0C0);
    }
    *(_DWORD *)(v3 + 16) = v4 - 1;
    isReplacementObscured = WebCore::HTMLPlugInElement::isReplacementObscured((WebCore::HTMLPlugInElement *)a1);
    v9 = isReplacementObscured;
    v10 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195C5D0E0);
      }
      if (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 7)
      {
        v11 = *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
        *(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v11;
        if (isReplacementObscured)
          v12 = 1;
        else
          v12 = 2;
        if (*(_DWORD *)(v10 + 260) != v12)
        {
          *(_DWORD *)(v10 + 260) = v12;
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v17) = 0;
            v18 = 0;
            v16[0] = 0;
            v16[16] = 0;
            WebCore::RenderObject::issueRepaint(v10, &v17, 0, 0, (uint64_t)v16);
            v11 = *(_DWORD *)(v10 + 16);
          }
        }
        if (v11)
        {
          *(_DWORD *)(v10 + 16) = v11 - 1;
          goto LABEL_22;
        }
        __break(0xC471u);
LABEL_36:
        JUMPOUT(0x195C5D0A0);
      }
    }
  }
  else
  {
LABEL_21:
    v9 = 0;
  }
LABEL_22:
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    v14 = *(_WORD *)(a1 + 30);
    if ((v14 & 0x400) == 0)
    {
      v15 = *(_WORD *)(a1 + 28);
      if ((v15 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)a1, a2);
      }
      else
      {
        if ((v15 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
          v14 = *(_WORD *)(a1 + 30);
        }
        *(_WORD *)(a1 + 30) = v14 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) -= 2;
  }
  return v9;
}

BOOL WebCore::HTMLPlugInElement::isReplacementObscured(WebCore::HTMLPlugInElement *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  _BOOL8 v15;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  int8x8_t v21;
  unint64_t ReplacementTextGeometry;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Widget *v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  __int16 v95;
  _OWORD v96[4];
  __int16 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  uint64_t v102;
  int8x8_t v103[3];

  v3 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)this + 5) + 8));
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || (v6 = *(_DWORD **)(v5 + 288)) == 0)
  {
    v15 = 0;
    goto LABEL_21;
  }
  ++v6[2];
  WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v6, 0);
  if (!*(_QWORD *)(v3 + 1944))
    goto LABEL_18;
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v8 = *(_QWORD *)(v7 + 528);
  if (!v8)
    goto LABEL_18;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_18;
  if (!*(_QWORD *)(v9 + 288))
    goto LABEL_18;
  if (WebCore::Document::topDocument(v7) != v3)
    goto LABEL_18;
  v10 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v10)
    goto LABEL_18;
  v11 = *(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D);
  if ((v11 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195C5D950);
  }
  if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 7)
  {
LABEL_18:
    v15 = 0;
    goto LABEL_19;
  }
  v12 = *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) + 1;
  *(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10) = v12;
  v13 = v10;
  if ((v11 & 0x10) != 0)
  {
LABEL_28:
    if ((*(_BYTE *)(v13 + 21) & 0x80) != 0)
    {
      v18 = *(_QWORD *)(v13 + 144);
      if (v18)
      {
        v19 = 1.0;
        while (1)
        {
          v19 = v19 * *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 88) + 32) + 4);
          if (v19 < 0.1)
            break;
          v18 = *(_QWORD *)(v18 + 40);
          if (!v18)
            goto LABEL_33;
        }
        v15 = 1;
        if (v12)
          goto LABEL_102;
        goto LABEL_118;
      }
    }
    else
    {
      while (1)
      {
        v17 = *(_QWORD *)(v13 + 32);
        if (!v17)
          break;
        v13 = *(_QWORD *)(v17 + 8);
        if (!v13)
          break;
        if ((*(_BYTE *)(v13 + 45) & 0x10) != 0)
          goto LABEL_28;
      }
    }
  }
  else
  {
    for (i = *(_QWORD *)(v10 + 32); i; i = *(_QWORD *)(v13 + 32))
    {
      v13 = *(_QWORD *)(i + 8);
      if (!v13)
        break;
      if ((*(_BYTE *)(v13 + 45) & 0x10) != 0)
        goto LABEL_28;
    }
  }
LABEL_33:
  v15 = 1;
  v20 = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)v10, 1, 0);
  v21 = (int8x8_t)vcgt_s32((int32x2_t)v20, (int32x2_t)0xFE000000FE000000);
  v103[0] = vorr_s8((int8x8_t)(*(_QWORD *)&v21 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v20), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v20, 6uLL)), v21));
  ReplacementTextGeometry = WebCore::RenderEmbeddedObject::getReplacementTextGeometry((WebCore::RenderEmbeddedObject *)v10, (const WebCore::LayoutPoint *)v103);
  if ((int)v2 >= 1 && SHIDWORD(v2) >= 1)
  {
    v23 = ReplacementTextGeometry;
    v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0)
      v26 = *(WebCore::Widget **)(v25 + 288);
    else
      v26 = 0;
    if ((int)v23 >= 0)
      v27 = v23;
    else
      v27 = v23 + 63;
    v28 = v23 - (v27 & 0xFFFFFFC0);
    if (v23 >= 0)
      v29 = HIDWORD(v23);
    else
      v29 = HIDWORD(v23) + 63;
    v30 = HIDWORD(v23) - (v29 & 0xFFFFFFC0);
    v31 = v28 + (_DWORD)v2;
    if (__OFADD__(v28, (_DWORD)v2))
      v31 = (v28 >> 31) + 0x7FFFFFFF;
    v32 = v27 >> 6;
    v33 = v29 >> 6;
    v34 = v30 + HIDWORD(v2);
    if (__OFADD__(v30, HIDWORD(v2)))
      v34 = (v30 >> 31) + 0x7FFFFFFF;
    v35 = v30 + 32;
    v36 = v28 + 32;
    *(_QWORD *)&v96[0] = (v32 + (v36 >> 6)) | ((unint64_t)(v33 + (v35 >> 6)) << 32);
    *((_QWORD *)&v96[0] + 1) = (v31 / 64 - (v36 >> 6) + ((int)(v31 - (v33 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v34 / 64 - (v35 >> 6) + ((int)(v34 - (v36 & 0xFFFFFFC0) + 32) >> 6)) << 32);
    v37 = WebCore::Widget::convertToRootView(v26, (const WebCore::IntRect *)v96);
    v39 = v37;
    v40 = v38;
    v41 = HIDWORD(v37);
    v42 = HIDWORD(v38);
    memset(v96, 0, sizeof(v96));
    v97 = 256;
    v102 = 0;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v101 = 0;
    if ((v38 & 0x80000000) == 0)
      v43 = v38;
    else
      v43 = v38 + 1;
    v44 = v37 + (v43 >> 1);
    if ((v38 & 0x8000000000000000) == 0)
      v45 = HIDWORD(v38);
    else
      v45 = HIDWORD(v38) + 1;
    v46 = HIDWORD(v37) + (v45 >> 1);
    LODWORD(v47) = v44 << 6;
    if (v44 < -33554432)
      LODWORD(v47) = 0x80000000;
    if (v44 <= 0x1FFFFFF)
      v47 = v47;
    else
      v47 = 0x7FFFFFFFLL;
    if (v46 >= -33554432)
      v48 = v46 << 6;
    else
      v48 = 0x80000000;
    if (v46 <= 0x1FFFFFF)
      v49 = v48;
    else
      v49 = 0x7FFFFFFFLL;
    v82 = v47 | (v49 << 32);
    v83 = v47 & 0xFFFFFFC0 | ((unint64_t)((v49 & 0xFFFFFFC0) >> 6) << 38);
    v84 = 0x4000000040;
    v85 = (float)(int)v47 * 0.015625;
    v86 = (float)(int)v49 * 0.015625;
    v87 = (float)(v47 & 0xFFFFFFC0) * 0.015625;
    v88 = (float)(v49 & 0xFFFFFFC0) * 0.015625;
    v89 = v87 + 1.0;
    v90 = v88;
    v91 = v87 + 1.0;
    v92 = v88 + 1.0;
    v93 = v87;
    v94 = v88 + 1.0;
    v95 = 256;
    v80 = 2339;
    v15 = 1;
    v81 = 1;
    if (!WebCore::Document::hitTest(v3, &v80, (WebCore::HitTestingTransformState *)&v82, (uint64_t)v96))
      goto LABEL_100;
    v51 = v98;
    v52 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 192))(v52) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5D970);
    }
    if (v51 != v52)
      goto LABEL_100;
    v53 = v39 << 6;
    if (v39 < -33554432)
      v53 = 0x80000000;
    if (v39 <= 0x1FFFFFF)
      v54 = v53;
    else
      v54 = 0x7FFFFFFFLL;
    v55 = (_DWORD)v41 << 6;
    if ((int)v41 < -33554432)
      v55 = 0x80000000;
    v56 = (int)v41 <= 0x1FFFFFF ? v55 : 0x7FFFFFFFLL;
    v78 = v54 & 0xFFFFFFC0;
    v79 = v54;
    v57 = (float)(int)v54 * 0.015625;
    v58 = (float)(int)v78 * 0.015625;
    v82 = v54 | ((unint64_t)v56 << 32);
    v83 = v78 | ((unint64_t)((v56 & 0xFFFFFFC0) >> 6) << 38);
    v59 = (float)(v56 & 0xFFFFFFC0) * 0.015625;
    v84 = 0x4000000040;
    v85 = v57;
    v86 = (float)(int)v56 * 0.015625;
    v87 = v58;
    v88 = v59;
    v89 = v58 + 1.0;
    v90 = v59;
    v91 = v58 + 1.0;
    v92 = v59 + 1.0;
    v93 = v58;
    v94 = v59 + 1.0;
    v95 = 256;
    v80 = 2339;
    v81 = 1;
    if (!WebCore::Document::hitTest(v3, &v80, (WebCore::HitTestingTransformState *)&v82, (uint64_t)v96))
      goto LABEL_100;
    v77 = v98;
    v60 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 192))(v60) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5D990);
    }
    if (v77 != v60)
      goto LABEL_100;
    v61 = (v39 + v40) << 6;
    if (v39 + v40 < -33554432)
      v61 = 0x80000000;
    v62 = v39 + v40 <= 0x1FFFFFF ? v61 : 0x7FFFFFFFLL;
    v63 = v62 & 0xFFFFFFC0;
    v82 = (v56 << 32) | v62;
    v83 = ((unint64_t)(v56 & 0xFFFFFFC0) << 32) | v63;
    v64 = (float)(int)v63 * 0.015625;
    v84 = 0x4000000040;
    v85 = (float)(int)v62 * 0.015625;
    v86 = (float)(int)v56 * 0.015625;
    v87 = v64;
    v88 = (float)(v56 & 0xFFFFFFC0) * 0.015625;
    v89 = v64 + 1.0;
    v90 = v88;
    v91 = v64 + 1.0;
    v92 = v59 + 1.0;
    v93 = v64;
    v94 = v59 + 1.0;
    v95 = 256;
    v80 = 2339;
    v81 = 1;
    if (!WebCore::Document::hitTest(v3, &v80, (WebCore::HitTestingTransformState *)&v82, (uint64_t)v96))
      goto LABEL_100;
    v65 = v98;
    v66 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 192))(v66) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5D9C8);
    }
    if (v65 != v66)
      goto LABEL_100;
    v67 = ((_DWORD)v41 + (_DWORD)v42) << 6;
    if ((int)v41 + (int)v42 < -33554432)
      v67 = 0x80000000;
    v68 = (int)v41 + (int)v42 <= 0x1FFFFFF ? v67 : 0x7FFFFFFFLL;
    v69 = v68 & 0xFFFFFFC0;
    v82 = v62 | ((unint64_t)v68 << 32);
    v83 = v62 & 0xFFFFFFC0 | ((unint64_t)((v68 & 0xFFFFFFC0) >> 6) << 38);
    v84 = 0x4000000040;
    v85 = (float)(int)v62 * 0.015625;
    v86 = (float)(int)v68 * 0.015625;
    v87 = (float)(int)v63 * 0.015625;
    v88 = (float)(int)v69 * 0.015625;
    v89 = v64 + 1.0;
    v90 = v88;
    v70 = v88 + 1.0;
    v91 = v64 + 1.0;
    v92 = v88 + 1.0;
    v93 = v87;
    v94 = v88 + 1.0;
    v95 = 256;
    v80 = 2339;
    v81 = 1;
    if (!WebCore::Document::hitTest(v3, &v80, (WebCore::HitTestingTransformState *)&v82, (uint64_t)v96))
      goto LABEL_100;
    v71 = v98;
    v72 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 192))(v72) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5D9E8);
    }
    if (v71 != v72)
      goto LABEL_100;
    v82 = (v68 << 32) | v79;
    v83 = (v69 << 32) | v78;
    v84 = 0x4000000040;
    v85 = v57;
    v86 = (float)(int)v68 * 0.015625;
    v87 = (float)(int)v78 * 0.015625;
    v88 = (float)(int)v69 * 0.015625;
    v89 = v58 + 1.0;
    v90 = v88;
    v91 = v58 + 1.0;
    v92 = v70;
    v93 = v87;
    v94 = v70;
    v95 = 256;
    v80 = 2339;
    v81 = 1;
    if (!WebCore::Document::hitTest(v3, &v80, (WebCore::HitTestingTransformState *)&v82, (uint64_t)v96))
      goto LABEL_100;
    v73 = v98;
    v74 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 192))(v74) & 1) != 0)
    {
      v15 = v73 != v74;
LABEL_100:
      WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)v96, v50);
      goto LABEL_101;
    }
LABEL_118:
    __break(0xC471u);
    JUMPOUT(0x195C5D904);
  }
LABEL_101:
  v12 = *(_DWORD *)(v10 + 16);
  if (!v12)
    goto LABEL_118;
LABEL_102:
  *(_DWORD *)(v10 + 16) = v12 - 1;
LABEL_19:
  if (v6[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[2];
LABEL_21:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    v75 = *(_WORD *)(v3 + 30);
    if ((v75 & 0x400) == 0)
    {
      v76 = *(_WORD *)(v3 + 28);
      if ((v76 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v3, v2);
      }
      else
      {
        if ((v76 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
          v75 = *(_WORD *)(v3 + 30);
        }
        *(_WORD *)(v3 + 30) = v75 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
      }
    }
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v15;
}

uint64_t WebCore::HTMLPlugInElement::canLoadScriptURL()
{
  return 1;
}

uint64_t WebCore::HTMLPlugInImageElement::HTMLPlugInImageElement(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;

  *(_OWORD *)(a1 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(a1 + 24) = 0x1C1C00000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3 + 96;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  ++*(_DWORD *)(a3 + 3324);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v4 = *a2;
  if (*a2)
    ++*v4;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = v4;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = off_1E33C8798;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 144) = 0uLL;
  *(_OWORD *)(a1 + 160) = 0uLL;
  v6 = *(unsigned int **)(StatusReg + 736);
  if (!v6)
    v6 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 136) = off_1E31F7378;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E33CAD20;
  v8[1] = WebCore::HTMLPlugInElement::swapRendererTimerFired;
  v8[2] = 0;
  v8[3] = a1;
  *(_QWORD *)(a1 + 184) = v8;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(_QWORD *)a1 = off_1E33C8CD0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

void WebCore::HTMLPlugInImageElement::~HTMLPlugInImageElement(WebCore::HTMLPlugInImageElement *this, void *a2)
{
  WebCore::ImageLoader *v3;
  WTF *v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  void *v10;
  _DWORD *v11;

  *(_QWORD *)this = off_1E33C8CD0;
  if (*((_BYTE *)this + 225))
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1840, this);
  v3 = (WebCore::ImageLoader *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
  {
    WebCore::ImageLoader::~ImageLoader(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_QWORD *)this = off_1E33C8798;
  v8 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  *((_QWORD *)this + 17) = off_1E31F7378;
  v9 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebCore::TimerBase::~TimerBase((WebCore::HTMLPlugInImageElement *)((char *)this + 136));
  v11 = (_DWORD *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 96))(v11);
    else
      --v11[2];
  }
  WebCore::HTMLFrameOwnerElement::~HTMLFrameOwnerElement(this, v10);
}

BOOL WebCore::HTMLPlugInImageElement::isImageType(WebCore::HTMLPlugInImageElement *this)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[5];

  v3 = (WTF::StringImpl **)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  if (!v2 || !*(_DWORD *)(v2 + 4))
  {
    if (WTF::protocolIs())
    {
      WTF::mimeTypeFromDataURL();
      v5 = v25[0];
      v25[0] = 0;
      v6 = *v3;
      *v3 = v5;
      if (v6)
      {
        v7 = *(_DWORD *)v6 - 2;
        if (*(_DWORD *)v6 == 2)
        {
          WTF::StringImpl::destroy(v6, v4);
          v6 = v25[0];
          v25[0] = 0;
          if (!v6)
            goto LABEL_7;
          v7 = *(_DWORD *)v6 - 2;
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, v19);
            goto LABEL_7;
          }
        }
        *(_DWORD *)v6 = v7;
      }
    }
  }
LABEL_7:
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 280) + 16);
    WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), (_QWORD *)this + 27, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)v25);
    v14 = (*(unsigned int (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v12 + 888))(v12, v25, v3) == 1;
    v15 = v25[0];
    v25[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    do
    {
      v16 = __ldaxr(v10);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v10));
    if (!v17)
    {
      atomic_store(1u, v10);
      v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v23 = off_1E31FE290;
      *((_QWORD *)v23 + 1) = v10;
      v25[0] = v23;
      WTF::ensureOnMainThread();
      v24 = v25[0];
      v25[0] = 0;
      if (v24)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  else
  {
    v20 = *v3;
    if (*v3 && *((_DWORD *)v20 + 1))
    {
      *(_DWORD *)v20 += 2;
      v25[0] = v20;
      if ((WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>((const char ***)WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WTF::String const&)::supportedImageMIMETypeSet, (uint64_t *)v25) & 1) != 0)
      {
        v14 = 1;
      }
      {
        if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes)
          v14 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes, (WTF::ASCIICaseInsensitiveHash *)v25) != 0;
        else
          v14 = 0;
      }
      else
      {
        v14 = 0;
        WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
      }
      v22 = v25[0];
      v25[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t WebCore::HTMLPlugInImageElement::canLoadURL(WebCore::HTMLPlugInImageElement *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SecurityOrigin *v10;
  WebCore::SecurityOrigin *v11;
  WTF::StringImpl *v12;
  const WebCore::SecurityOrigin *v13;
  void *v14;
  int isSameOriginDomain;
  __int16 v16;
  __int16 v17;

  if (!WTF::URL::protocolIsJavaScript(a2))
    return WebCore::HTMLFrameOwnerElement::isProhibitedSelfReference(this, a2) ^ 1;
  v5 = *((_QWORD *)this + 14);
  if (!v5)
    return WebCore::HTMLFrameOwnerElement::isProhibitedSelfReference(this, a2) ^ 1;
  v7 = *(_QWORD *)(v5 + 8);
  if (v7)
  {
    if (*(_BYTE *)(v7 + 144))
      return 0;
  }
  v8 = *(_QWORD *)(v5 + 8);
  if (!v8)
    return WebCore::HTMLFrameOwnerElement::isProhibitedSelfReference(this, a2) ^ 1;
  if (*(_BYTE *)(v8 + 144))
    return WebCore::HTMLFrameOwnerElement::isProhibitedSelfReference(this, a2) ^ 1;
  v9 = *(_QWORD *)(v8 + 296);
  if (!v9)
    return WebCore::HTMLFrameOwnerElement::isProhibitedSelfReference(this, a2) ^ 1;
  *(_DWORD *)(v9 + 24) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 192), v4);
  v11 = v10;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), v12);
  isSameOriginDomain = WebCore::SecurityOrigin::isSameOriginDomain(v11, v13);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    v16 = *(_WORD *)(v9 + 30);
    if ((v16 & 0x400) == 0)
    {
      v17 = *(_WORD *)(v9 + 28);
      if ((v17 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v9, v14);
      }
      else
      {
        if ((v17 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
          v16 = *(_WORD *)(v9 + 30);
        }
        *(_WORD *)(v9 + 30) = v16 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      }
    }
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  if (!isSameOriginDomain)
    return 0;
  else
    return WebCore::HTMLFrameOwnerElement::isProhibitedSelfReference(this, a2) ^ 1;
}

BOOL WebCore::HTMLPlugInImageElement::wouldLoadAsPlugIn(WebCore::HTMLPlugInImageElement *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;

  v18 = 0;
  WTF::URL::invalidate((WTF::URL *)&v18);
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), a2, *(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848, 0, (WTF::URL *)&v15);
    v12 = v15;
    v15 = 0;
    v13 = v18;
    v18 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        v14 = v15;
      }
      else
      {
        v14 = 0;
        *(_DWORD *)v13 -= 2;
      }
    }
    else
    {
      v14 = 0;
    }
    v19 = v16;
    LODWORD(v16) = v16 & 0xFFFFFFFE;
    v20 = v17;
    v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528) + 8) + 280)
                 + 16);
  v8 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, const WTF::String *))(*(_QWORD *)v6 + 888))(v6, &v18, a3);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v8 == 3;
}

void WebCore::HTMLPlugInImageElement::createElementRenderer(uint64_t a1@<X0>, WebCore::Style *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const WebCore::Element *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WebCore::HTMLElement *v16;
  char hasOverlay;
  _BYTE v18[24];

  if (*(int *)(a1 + 204) >= 1)
    goto LABEL_2;
  if (!*(_BYTE *)(a1 + 225))
  {
    *(_BYTE *)(a1 + 225) = 1;
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 1840, (_QWORD *)a1, (uint64_t)v18);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1))
  {
    WebCore::RenderElement::createFor((WebCore::Document *)a1, a2, 0, v12, a4);
    return;
  }
  if (WebCore::HTMLPlugInImageElement::isImageType((WebCore::HTMLPlugInImageElement *)a1))
  {
    v13 = bmalloc::api::isoAllocate();
    v14 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v13, 15, a1, a2, 12, 259);
    *(_OWORD *)(v14 + 200) = 0u;
    *(_OWORD *)(v14 + 184) = 0u;
    *(_OWORD *)(v14 + 168) = 0u;
    *(_OWORD *)(v14 + 152) = 0u;
    *(_DWORD *)(v14 + 20) |= 2u;
    *(_QWORD *)v14 = off_1E34280E8;
    *(_QWORD *)(v14 + 216) = 0;
    v15 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v15 + 8) = 0;
    *(_QWORD *)v15 = off_1E34287A0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 32) = 1;
    *(_QWORD *)(v13 + 224) = v15;
    *(_WORD *)(v13 + 232) = 0;
    *(_BYTE *)(v13 + 234) = 0;
    if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
      hasOverlay = WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)a1, v16);
    else
      hasOverlay = 0;
    *(_BYTE *)(v13 + 235) = hasOverlay;
    *(_DWORD *)(v13 + 236) = 1065353216;
    WebCore::RenderImage::updateAltText(v13);
    *a4 = v13;
  }
  else
  {
LABEL_2:
    v8 = *(_QWORD *)(a1 + 192);
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
    {
      (*(void (**)(_QWORD, uint64_t, WebCore::Style *, uint64_t))(**(_QWORD **)(a1 + 192) + 32))(*(_QWORD *)(a1 + 192), a1, a2, a3);
    }
    else
    {
      v9 = bmalloc::api::isoAllocate();
      v10 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v9, 7, a1, a2, 12, 1027);
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_QWORD *)(v10 + 200) = 0x258000004B00;
      v11 = *(_DWORD *)(v10 + 20);
      *(_DWORD *)(v10 + 224) = 1;
      *(_QWORD *)(v10 + 240) = 0;
      *(_QWORD *)(v10 + 248) = 0;
      *(_QWORD *)(v10 + 232) = 0;
      *(_DWORD *)(v10 + 20) = v11 | 3;
      *(_QWORD *)v10 = off_1E3422EF8;
      *(_QWORD *)(v10 + 208) = 0;
      *(_QWORD *)(v10 + 216) = &unk_1E34235B8;
      *(_BYTE *)(v10 + 256) = 0;
      *(_DWORD *)(v10 + 260) = 0;
      *(_QWORD *)(v10 + 272) = 0;
      *(_WORD *)(v10 + 280) = 0;
      *(_QWORD *)(v10 + 288) = 0;
      *a4 = v10;
    }
  }
}

uint64_t WebCore::HTMLPlugInImageElement::childShouldCreateRenderer(WebCore::HTMLPlugInImageElement *this, const WebCore::Node *a2)
{
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  return 0;
}

uint64_t WebCore::HTMLPlugInImageElement::willRecalcStyle(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = result;
  if (a2 || (*(_BYTE *)(result + 70) & 7) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 1296))(result);
    if ((result & 1) == 0 && *(_BYTE *)(v2 + 224) && (*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        result = 105;
        __break(0xC471u);
      }
      else
      {
        result = WebCore::HTMLPlugInImageElement::isImageType((WebCore::HTMLPlugInImageElement *)v2);
        if ((result & 1) == 0)
          return WebCore::Node::invalidateStyle(v2, 4u, 2);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7[2];
  char v8;
  int v9;

  if (!*(_BYTE *)(this + 241))
  {
    v2 = this;
    v3 = *(WebCore::Document **)(*(_QWORD *)(this + 40) + 8);
    ++*((_DWORD *)v3 + 832);
    *(_BYTE *)(v2 + 241) = 1;
    v4 = WebCore::Document::eventLoop(v3, a2);
    *(_DWORD *)(v2 + 24) += 2;
    {
      WebCore::GCReachableRefMap::map(void)::map = 0;
    }
    v6 = v2;
    v9 = 0;
    WTF::HashMap<WebCore::EventTarget *,unsigned int,WTF::DefaultHash<WebCore::EventTarget *>,WTF::HashTraits<WebCore::EventTarget *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::GCReachableRefMap::map(void)::map, &v6, &v9, (uint64_t)v7);
    ++*(_DWORD *)(v7[0] + 8);
    if (v8)
      *(_QWORD *)(v2 + 16) |= 0x4000000000000uLL;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E33CAD48;
    v5[1] = v2;
    v7[0] = (uint64_t)v5;
    WebCore::EventLoopTaskGroup::queueTask(v4, 0, v7);
    this = v7[0];
    v7[0] = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void WebCore::HTMLPlugInImageElement::didAttachRenderers(WebCore::HTMLPlugInImageElement *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  _BYTE v12[24];
  unsigned int **v13;

  *((_BYTE *)this + 224) = 1;
  WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution((uint64_t)this, a2);
  v3 = *((_QWORD *)this + 29);
  if (v3 && (*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5E6B0);
    }
    if ((((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL)
                                                                                                + 0x35)) == 1)
    {
      v4 = *(_QWORD **)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0xE0);
      v5 = v4[3];
      if (!v5 || !*(_QWORD *)(v5 + 8))
      {
        v6 = *(_QWORD *)(v3 + 24);
        if (v6)
        {
          do
            v7 = __ldaxr((unsigned int *)v6);
          while (__stlxr(v7 + 1, (unsigned int *)v6));
          v11 = (unsigned int *)v6;
          v8 = *(_QWORD *)(v6 + 8);
          if (v8)
          {
            v13 = &v11;
            ++*(_DWORD *)(v8 + 548);
            v9 = *(_QWORD *)(v8 + 488);
            if (v9)
            {
              if (*(_QWORD *)(v9 + 8))
                WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), (uint64_t *)&v13, (uint64_t)v12);
            }
          }
        }
        else
        {
          v11 = 0;
        }
        WebCore::RenderImageResource::setCachedImage(v4, (uint64_t *)&v11);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v11, v10);
      }
    }
  }
}

unsigned int *WebCore::HTMLPlugInImageElement::willDetachRenderers(WebCore::HTMLPlugInImageElement *this)
{
  uint64_t v2;
  void *v3;
  _DWORD *v4;

  v2 = WebCore::HTMLFrameOwnerElement::renderWidget(this);
  if (v2)
  {
    v4 = *(_DWORD **)(v2 + 232);
    if (v4)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 88))(*(_QWORD *)(v2 + 232)))
      {
        ++v4[2];
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 328))(v4);
        if (v4[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        else
          --v4[2];
      }
    }
  }
  return WebCore::HTMLPlugInElement::willDetachRenderers(this, v3);
}

uint64_t *WebCore::HTMLPlugInImageElement::didMoveToNewDocument(WebCore::HTMLPlugInImageElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  WebCore::ImageLoader *v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  double v11;
  _BYTE v13[24];

  if (*((_BYTE *)this + 225))
  {
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)a2 + 1840, this);
    WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)a3 + 1840, this, (uint64_t)v13);
  }
  v7 = (WebCore::ImageLoader *)*((_QWORD *)this + 29);
  if (v7)
    v7 = (WebCore::ImageLoader *)WebCore::ImageLoader::elementDidMoveToNewDocument(v7, a2);
  if (*((_BYTE *)this + 241))
  {
    v8 = *((_DWORD *)a2 + 832) - 1;
    *((_DWORD *)a2 + 832) = v8;
    v9 = *((_QWORD *)a2 + 66);
    if (v9)
    {
      if (*(_QWORD *)(v9 + 8))
        v10 = v8 == 0;
      else
        v10 = 0;
      if (v10
        && ((*((_QWORD *)a2 + 269) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*((_QWORD *)a2 + 269) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
      {
        *((_QWORD *)a2 + 268) = 0;
        WTF::MonotonicTime::now(v7);
        WebCore::TimerBase::setNextFireTime((uint64_t)a2 + 2120, v11 + 0.0);
      }
    }
    ++*((_DWORD *)a3 + 832);
  }
  return WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
}

void WebCore::HTMLPlugInImageElement::prepareForDocumentSuspension(WebCore::HTMLPlugInImageElement *this)
{
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      __break(0xC471u);
    else
      WebCore::RenderTreeUpdater::tearDownRenderers(this, 0);
  }
}

uint64_t WebCore::HTMLPlugInImageElement::resumeFromDocumentSuspension(WebCore::HTMLPlugInImageElement *this, WTF::StringImpl *a2)
{
  WebCore::HTMLPlugInImageElement::scheduleUpdateForAfterStyleResolution((uint64_t)this, a2);
  return WebCore::Node::invalidateStyle((uint64_t)this, 4u, 2);
}

uint64_t WebCore::HTMLPlugInImageElement::requestObject(uint64_t a1, _QWORD *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v10;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  const WTF::String *v41;
  uint64_t v42;
  const WTF::String *v43;
  uint64_t v44;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _DWORD **v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  _DWORD **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  WTF::StringImpl *v69;
  __int16 v70;
  __int16 v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _DWORD *v95;
  _DWORD **v96;
  WTF::StringImpl *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  __int128 v108;
  __int128 v109;

  if ((!*a2 || !*(_DWORD *)(*a2 + 4)) && (!*a3 || !*((_DWORD *)*a3 + 1)))
    return 0;
  v12 = *(_QWORD **)(a1 + 40);
  if (*v12)
    v13 = (*(_WORD *)(*v12 + 28) & 0x80) == 0;
  else
    v13 = 1;
  if (v13 || *(_BYTE *)(*v12 + 193))
  {
    v14 = v12[1];
    *(_DWORD *)(v14 + 24) += 2;
    v97 = 0;
    WTF::URL::invalidate((WTF::URL *)&v97);
    if (*a2 && *(_DWORD *)(*a2 + 4))
    {
      WebCore::Document::completeURL((WebCore::Document *)v14, a2, v14 + 848, 0, (WTF::URL *)&v107);
      v38 = v107;
      v107 = 0;
      v39 = v97;
      v97 = v38;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::destroy(v39, v37);
          v40 = v107;
        }
        else
        {
          v40 = 0;
          *(_DWORD *)v39 -= 2;
        }
      }
      else
      {
        v40 = 0;
      }
      v98 = v108;
      LODWORD(v108) = v108 & 0xFFFFFFFE;
      v99 = v109;
      v107 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v37);
        else
          *(_DWORD *)v40 -= 2;
      }
    }
    v15 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v14 + 192));
    v16 = v15;
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
    WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded((uint64_t)v15, (WebCore::SecurityOriginData *)&v97, 0, 0);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 528) + 8) + 280) + 16);
    v20 = WTF::URL::path((WTF::URL *)(v18 + 736));
    if (((*(uint64_t (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v19 + 1192))(v19, a3, v20, v21) & 1) != 0)goto LABEL_21;
    v107 = 0;
    WTF::URL::invalidate((WTF::URL *)&v107);
    v23 = WebCore::ContentSecurityPolicy::allowObjectFromSource((uint64_t)v16, (WTF::URL *)&v97, 0, (WTF::URL *)&v107);
    v24 = v107;
    v107 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v22);
        if (!v23)
        {
LABEL_59:
          if (v16)
          {
            if (!atomic_load(v16))
            {
              __break(0xC471u);
              JUMPOUT(0x195C5EF8CLL);
            }
            do
              v46 = __ldaxr(v16);
            while (__stlxr(v46 - 1, v16));
          }
          v47 = v97;
          v97 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::destroy(v47, v22);
              if (v14)
              {
LABEL_66:
                if (*(_DWORD *)(v14 + 24) == 2)
                {
                  v54 = *(_WORD *)(v14 + 30);
                  if ((v54 & 0x400) == 0)
                  {
                    v55 = *(_WORD *)(v14 + 28);
                    if ((v55 & 0xF000) == 0x9000)
                    {
                      WebCore::Document::removedLastRef((WebCore::Document *)v14, v22);
                    }
                    else
                    {
                      if ((v55 & 0x20) != 0)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 160) + 16))(*(_QWORD *)(v14 + 160));
                        v54 = *(_WORD *)(v14 + 30);
                      }
                      *(_WORD *)(v14 + 30) = v54 | 0x400;
                      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v14 + 24) -= 2;
                }
              }
LABEL_68:
              if ((v23 & 1) != 0)
                goto LABEL_69;
              if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0
                && (*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                goto LABEL_182;
              }
              return 0;
            }
            *(_DWORD *)v47 -= 2;
          }
          if (v14)
            goto LABEL_66;
          goto LABEL_68;
        }
LABEL_21:
        if ((*(_WORD *)(v14 + 3358) & 8) != 0
          && (v25 = *(_QWORD *)(v14 + 528)) != 0
          && (v26 = *(_QWORD *)(v25 + 8)) != 0
          && (v27 = *(_QWORD *)(v26 + 120)) != 0
          && (v28 = *(_QWORD *)(v27 + 8)) != 0)
        {
          v29 = *(_QWORD *)(v28 + 104);
          if (v29)
          {
            v30 = *(_DWORD *)(v29 + 4);
            if ((v30 & 1) == 0)
            {
              v31 = v29 + 32;
              LODWORD(v32) = v30 >> 5;
              if (!(_DWORD)v32)
                goto LABEL_57;
LABEL_50:
              v32 = v32;
              v43 = (const WTF::String *)(v31 + 8);
              v41 = (const WTF::String *)MEMORY[0x1E0CBF2F8];
              while (1)
              {
                v44 = *((_QWORD *)v43 - 1);
                if (v44 == WebCore::HTMLNames::typeAttr
                  || *(_QWORD *)(v44 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                  && *(_QWORD *)(v44 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
                {
                  break;
                }
                v43 = (const WTF::String *)((char *)v43 + 16);
                if (!--v32)
                  goto LABEL_58;
              }
              v41 = v43;
              goto LABEL_58;
            }
            v31 = *(_QWORD *)(v29 + 40);
            LODWORD(v32) = *(_DWORD *)(v29 + 52);
            if ((_DWORD)v32)
              goto LABEL_50;
          }
        }
        else
        {
          v33 = *(_QWORD *)(a1 + 104);
          if (v33)
          {
            v34 = *(_DWORD *)(v33 + 4);
            if ((v34 & 1) != 0)
            {
              v35 = *(_QWORD *)(v33 + 40);
              LODWORD(v36) = *(_DWORD *)(v33 + 52);
              if (!(_DWORD)v36)
                goto LABEL_57;
            }
            else
            {
              v35 = v33 + 32;
              LODWORD(v36) = v34 >> 5;
              if (!(_DWORD)v36)
                goto LABEL_57;
            }
            v36 = v36;
            v41 = (const WTF::String *)(v35 + 8);
            while (1)
            {
              v42 = *((_QWORD *)v41 - 1);
              if (v42 == WebCore::HTMLNames::typeAttr
                || *(_QWORD *)(v42 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                && *(_QWORD *)(v42 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
              {
                goto LABEL_58;
              }
              v41 = (const WTF::String *)((char *)v41 + 16);
              if (!--v36)
              {
                v41 = (const WTF::String *)MEMORY[0x1E0CBF2F8];
                goto LABEL_58;
              }
            }
          }
        }
LABEL_57:
        v41 = (const WTF::String *)MEMORY[0x1E0CBF2F8];
LABEL_58:
        LOBYTE(v23) = WebCore::ContentSecurityPolicy::allowPluginType((WebCore::ContentSecurityPolicy *)v16, a3, v41, (const WTF::URL *)&v97, 0);
        goto LABEL_59;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (!v23)
      goto LABEL_59;
    goto LABEL_21;
  }
LABEL_69:
  if ((WebCore::HTMLPlugInElement::requestObject(a1, a2, a3, a4, a5) & 1) != 0)
    return 1;
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v49 + 24) += 2;
  if (!WebCore::ScriptDisallowedScope::s_count
    || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
    || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType
    || webThreadDelegateMessageScopeCount)
  {
    v50 = *(_QWORD *)(a1 + 104);
    if (v50 && (v51 = *(_DWORD *)(v50 + 4), (v51 & 2) != 0))
    {
      if ((v51 & 1) != 0)
      {
        v72 = *(uint64_t **)(v50 + 40);
        LODWORD(v73) = *(_DWORD *)(v50 + 52);
      }
      else
      {
        v72 = (uint64_t *)(v50 + 32);
        LODWORD(v73) = v51 >> 5;
      }
      if ((_DWORD)v73)
      {
        v73 = v73;
        while (1)
        {
          v74 = *v72;
          if (*v72 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v74 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v74 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            break;
          }
          v72 += 2;
          if (!--v73)
            goto LABEL_138;
        }
      }
      else
      {
LABEL_138:
        v72 = 0;
      }
      v52 = (uint64_t)(v72 + 1);
    }
    else
    {
      v52 = MEMORY[0x1E0CBF2F8];
    }
    v10 = WebCore::FrameLoader::SubframeLoader::requestObject(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 528) + 8) + 280) + 56), (WebCore::HTMLObjectElement *)a1, a2, v52, a3, a4, a5);
    if (v49)
      goto LABEL_82;
    return v10;
  }
  v56 = WebCore::Document::eventLoop((WebCore::Document *)v49, v48);
  *(_DWORD *)(a1 + 24) += 2;
  v97 = (WTF::StringImpl *)a1;
  *(_QWORD *)&v98 = a1;
  v57 = (_DWORD *)*a2;
  if (v57)
    *v57 += 2;
  *((_QWORD *)&v98 + 1) = v57;
  v58 = *(_QWORD *)(a1 + 104);
  if (v58 && (v59 = *(_DWORD *)(v58 + 4), (v59 & 2) != 0))
  {
    if ((v59 & 1) != 0)
    {
      v75 = *(_QWORD **)(v58 + 40);
      LODWORD(v76) = *(_DWORD *)(v58 + 52);
    }
    else
    {
      v75 = (_QWORD *)(v58 + 32);
      LODWORD(v76) = v59 >> 5;
    }
    if ((_DWORD)v76)
    {
      v76 = v76;
      while (1)
      {
        v77 = *v75;
        if (*v75 == WebCore::HTMLNames::nameAttr
          || *(_QWORD *)(v77 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
          && *(_QWORD *)(v77 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
        {
          break;
        }
        v75 += 2;
        if (!--v76)
          goto LABEL_151;
      }
    }
    else
    {
LABEL_151:
      v75 = 0;
    }
    v60 = (_DWORD **)(v75 + 1);
  }
  else
  {
    v60 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v61 = *v60;
  if (*v60)
    *v61 += 2;
  *(_QWORD *)&v99 = v61;
  v62 = *a3;
  if (*a3)
    *(_DWORD *)v62 += 2;
  v96 = 0;
  v63 = *(unsigned int *)(a4 + 12);
  v100 = 0;
  v101 = 0;
  *((_QWORD *)&v99 + 1) = v62;
  v102 = v63;
  if ((_DWORD)v63)
  {
    if (v63 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5F1ECLL);
    }
    v78 = WTF::fastMalloc((WTF *)(8 * v63));
    v101 = v63;
    v96 = (_DWORD **)v78;
    v100 = v78;
    v79 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v79)
    {
      v80 = 0;
      v81 = *(_QWORD *)a4;
      v82 = 8 * v79;
      do
      {
        v83 = *(_DWORD **)(v81 + v80);
        if (v83)
          *v83 += 2;
        *(_QWORD *)(v78 + v80) = v83;
        v80 += 8;
      }
      while (v82 != v80);
    }
  }
  v64 = 0;
  v65 = *(unsigned int *)(a5 + 12);
  v103 = 0;
  v104 = 0;
  v105 = v65;
  if ((_DWORD)v65)
  {
    if (v65 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5F1F4);
    }
    v84 = WTF::fastMalloc((WTF *)(8 * v65));
    v64 = (_DWORD **)v84;
    v104 = v65;
    v103 = v84;
    v85 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v85)
    {
      v86 = 0;
      v87 = *(_QWORD *)a5;
      v88 = 8 * v85;
      do
      {
        v89 = *(_DWORD **)(v87 + v86);
        if (v89)
          *v89 += 2;
        *(_QWORD *)(v84 + v86) = v89;
        v86 += 8;
      }
      while (v88 != v86);
    }
  }
  *(_DWORD *)(v49 + 24) += 2;
  v106 = v49;
  v66 = WTF::fastMalloc((WTF *)0x58);
  v67 = v66;
  *(_QWORD *)v66 = off_1E33CAD70;
  *(_QWORD *)(v66 + 8) = a1;
  *(_QWORD *)&v98 = 0;
  *(_QWORD *)(v66 + 16) = a1;
  if (v57)
    *v57 += 2;
  *(_QWORD *)(v66 + 24) = v57;
  *(_QWORD *)(v66 + 32) = v61;
  *(_QWORD *)&v99 = 0;
  if (v62)
    *(_DWORD *)v62 += 2;
  *(_QWORD *)(v66 + 48) = 0;
  *(_QWORD *)(v66 + 56) = 0;
  *(_QWORD *)(v66 + 40) = v62;
  *(_DWORD *)(v66 + 60) = v63;
  if ((_DWORD)v63)
  {
    if (v63 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5F1FCLL);
    }
    v90 = 8 * v63;
    v91 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v63));
    *(_DWORD *)(v67 + 56) = v63;
    *(_QWORD *)(v67 + 48) = v91;
    do
    {
      v92 = *v96;
      if (*v96)
        *v92 += 2;
      *v91++ = v92;
      ++v96;
      v90 -= 8;
    }
    while (v90);
  }
  *(_QWORD *)(v67 + 64) = 0;
  *(_QWORD *)(v67 + 72) = 0;
  *(_DWORD *)(v67 + 76) = v65;
  if ((_DWORD)v65)
  {
    if (!(v65 >> 29))
    {
      v93 = 8 * v65;
      v94 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v65));
      *(_DWORD *)(v67 + 72) = v65;
      *(_QWORD *)(v67 + 64) = v94;
      do
      {
        v95 = *v64;
        if (*v64)
          *v95 += 2;
        *v94++ = v95;
        ++v64;
        v93 -= 8;
      }
      while (v93);
      goto LABEL_110;
    }
LABEL_182:
    __break(0xC471u);
    JUMPOUT(0x195C5EC8CLL);
  }
LABEL_110:
  v106 = 0;
  v107 = (WTF::StringImpl *)v67;
  *(_QWORD *)(v67 + 80) = v49;
  WebCore::EventLoopTaskGroup::queueTask(v56, 11, (uint64_t *)&v107);
  v69 = v107;
  v107 = 0;
  if (v69)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v69 + 8))(v69);
  WebCore::HTMLPlugInImageElement::requestObject(WTF::String const&,WTF::String const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0((uint64_t)&v97, v68);
  v10 = 1;
  if (v49)
  {
LABEL_82:
    if (*(_DWORD *)(v49 + 24) == 2)
    {
      v70 = *(_WORD *)(v49 + 30);
      if ((v70 & 0x400) == 0)
      {
        v71 = *(_WORD *)(v49 + 28);
        if ((v71 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v49, v53);
        }
        else
        {
          if ((v71 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v49 + 160) + 16))(*(_QWORD *)(v49 + 160));
            v70 = *(_WORD *)(v49 + 30);
          }
          *(_WORD *)(v49 + 30) = v70 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 72))(v49);
        }
      }
    }
    else
    {
      *(_DWORD *)(v49 + 24) -= 2;
    }
  }
  return v10;
}

uint64_t WebCore::HTMLPlugInImageElement::requestObject(WTF::String const&,WTF::String const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v13 = *(_WORD *)(v3 + 30);
      if ((v13 & 0x400) == 0)
      {
        v14 = *(_WORD *)(v3 + 28);
        if ((v14 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v14 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v13 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v13 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v4)
  {
    v17 = *(WTF::StringImpl ***)(a1 + 56);
    v18 = 8 * v4;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v5 = *(WTF **)(a1 + 56);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v6)
  {
    v20 = *(WTF::StringImpl ***)(a1 + 40);
    v21 = 8 * v6;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  v7 = *(WTF **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      v15 = *(_WORD *)(v11 + 30);
      if ((v15 & 0x400) == 0)
      {
        v16 = *(_WORD *)(v11 + 28);
        if ((v16 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v11, a2);
        }
        else
        {
          if ((v16 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
            v15 = *(_WORD *)(v11 + 30);
          }
          *(_WORD *)(v11 + 30) = v15 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
        }
      }
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::HTMLPreElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = *a1;
  if (*a1)
    ++*v7;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33CA300;
  *a3 = result;
  return result;
}

uint64_t WebCore::HTMLPreElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::wrapAttr)
    return 1;
  v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v2 > 0x1F8)
  {
    if (v2 == 949 || v2 == 505 || v2 == 947)
      return result;
    return 0;
  }
  v4 = v2 - 411 > 0x20 || ((1 << (v2 + 101)) & 0x100200001) == 0;
  if (v4 && v2 != 286)
    return 0;
  return result;
}

WTF::StringImpl *WebCore::HTMLPreElement::collectPresentationalHintsForAttribute(WebCore::HTMLPreElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  if (*(_QWORD *)a2 != WebCore::HTMLNames::wrapAttr)
    return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
  WebCore::MutableStyleProperties::setProperty(a4, 294, 0x23Au, 0);
  return (WTF::StringImpl *)WebCore::MutableStyleProperties::setProperty(a4, 270, 0x2D6u, 0);
}

void WebCore::HTMLProgressElement::~HTMLProgressElement(WebCore::HTMLProgressElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::HTMLProgressElement::create@<X0>(WebCore::HTMLProgressElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = bmalloc::api::isoAllocate();
  v8 = WebCore::Element::Element(v7, (_DWORD **)this, (uint64_t)a2, 1040);
  *(_QWORD *)v8 = off_1E33C9210;
  *(_QWORD *)(v8 + 112) = 0;
  *(_BYTE *)(v8 + 120) = 0;
  *a3 = v8;
  return WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v8);
}

void WebCore::HTMLProgressElement::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *this@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;

  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 148) & 0x1FC000) != 0)
  {
    v7 = WebCore::RenderProgress::operator new(328);
    *a4 = WebCore::RenderProgress::RenderProgress(v7, a1, this);
  }
  else
  {
    WebCore::RenderElement::createFor(a1, this, 0, a3, a4);
  }
}

uint64_t WebCore::HTMLProgressElement::childShouldCreateRenderer(WebCore::HTMLProgressElement *this, const WebCore::Node *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 4);
  if (!v2 || (*(_WORD *)(v2 + 28) & 0x80) == 0)
    return 0;
  if ((*((_WORD *)a2 + 14) & 0x20) == 0)
    return 1;
  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  else
    return 0;
}

uint64_t WebCore::HTMLProgressElement::renderProgress(WebCore::HTMLProgressElement *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v8;
  __int16 v9;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_25;
    if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 28)
      return v2;
  }
  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v3)
      *(_DWORD *)(v3 + 24) += 2;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + 80;
  do
  {
    v5 = *(_QWORD *)v4;
    v6 = *(_WORD *)(*(_QWORD *)v4 + 28);
    v4 = *(_QWORD *)v4 + 56;
  }
  while ((v6 & 8) == 0);
  v2 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195C5F850);
    }
    if (*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 28)
    {
LABEL_25:
      __break(0xC471u);
      JUMPOUT(0x195C5F830);
    }
  }
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      v8 = *(_WORD *)(v3 + 30);
      if ((v8 & 0x400) == 0)
      {
        v9 = *(_WORD *)(v3 + 28);
        if ((v9 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
        }
        else
        {
          if ((v9 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
            v8 = *(_WORD *)(v3 + 30);
          }
          *(_WORD *)(v3 + 30) = v8 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return v2;
}

void WebCore::HTMLProgressElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  void *v13;
  _BYTE v14[32];

  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::valueAttr)
  {
    v8 = *(_QWORD *)(a1 + 104);
    if (v8
      && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
        ? (v10 = *(uint64_t **)(v8 + 40), LODWORD(v8) = *(_DWORD *)(v8 + 52))
        : (v10 = (uint64_t *)(v8 + 32), LODWORD(v8) = v9 >> 5),
          (_DWORD)v8))
    {
      v8 = v8;
      while (1)
      {
        v11 = *v10;
        if (*v10 == v7
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(v7 + 24) && *(_QWORD *)(v11 + 32) == *(_QWORD *)(v7 + 32))
        {
          break;
        }
        v10 += 2;
        if (!--v8)
          goto LABEL_10;
      }
      v12 = 1;
    }
    else
    {
LABEL_10:
      v12 = 0;
    }
    if (*(unsigned __int8 *)(a1 + 120) != v12)
    {
      WebCore::Style::PseudoClassChangeInvalidation::PseudoClassChangeInvalidation((uint64_t)v14, a1, (WTF::StringImpl *)0x28, v12 ^ 1, 0);
      *(_BYTE *)(a1 + 120) = v12;
      WebCore::Style::PseudoClassChangeInvalidation::~PseudoClassChangeInvalidation((WebCore::Style::PseudoClassChangeInvalidation *)v14, v13);
    }
    WebCore::HTMLProgressElement::didElementStateChange((WebCore::HTMLProgressElement *)a1);
  }
  else if (v7 == WebCore::HTMLNames::maxAttr)
  {
    WebCore::HTMLProgressElement::didElementStateChange((WebCore::HTMLProgressElement *)a1);
  }
  else
  {
    WebCore::HTMLElement::attributeChanged(a1, a2, a3, a4, a5, a6);
  }
}

void WebCore::HTMLProgressElement::didElementStateChange(WebCore::HTMLProgressElement *this)
{
  WebCore::StyledElement *v2;
  double v3;
  void *v4;
  WebCore::RenderProgress *v5;
  WebCore::AXObjectCache *v6;
  WebCore::AXObjectCache *v7;
  int v8;

  v2 = (WebCore::StyledElement *)*((_QWORD *)this + 14);
  WebCore::HTMLProgressElement::position(this);
  WebCore::StyledElement::setInlineStyleProperty(v2, (WTF::StringImpl *)0x18A, 3, 0, v3 * 100.0);
  v5 = (WebCore::RenderProgress *)WebCore::HTMLProgressElement::renderProgress(this, v4);
  if (v5)
    WebCore::RenderProgress::updateFromElement(v5);
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v6 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    if (v6)
    {
      v7 = v6;
      ++*((_DWORD *)v6 + 2);
      WebCore::AXObjectCache::valueChanged(v6, this);
      v8 = *((_DWORD *)v7 + 2);
      if (v8)
        *((_DWORD *)v7 + 2) = v8 - 1;
      else
        __break(0xC471u);
    }
  }
}

void WebCore::HTMLProgressElement::didAttachRenderers(WebCore::HTMLProgressElement *this, void *a2)
{
  WebCore::RenderProgress *v2;

  v2 = (WebCore::RenderProgress *)WebCore::HTMLProgressElement::renderProgress(this, a2);
  if (v2)
    WebCore::RenderProgress::updateFromElement(v2);
}

void WebCore::HTMLProgressElement::value(WebCore::HTMLProgressElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  double v16;
  double v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v2 = *((_QWORD *)this + 13);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (uint64_t *)(v4 + 8);
    while (1)
    {
      v7 = *(v6 - 1);
      if (v7 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (!*v6)
    goto LABEL_19;
  v9 = *(unsigned __int8 **)(v8 + 8);
  v10 = *(unsigned int *)(v8 + 4);
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    v16 = WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v9, v10, v10);
    goto LABEL_26;
  }
  if (!(_DWORD)v10)
    goto LABEL_19;
  v11 = *(_QWORD *)(v8 + 8);
  while (1)
  {
    v13 = *v9++;
    v12 = v13;
    v14 = (1 << v13) & 0x100003600;
    if (v13 > 0x20 || v14 == 0)
      break;
    ++v11;
    if (!--v10)
      goto LABEL_19;
  }
  if (v12 <= 0x2E && ((1 << v12) & 0x680000000000) != 0 || v12 - 48 <= 9)
  {
    WTF::parseDouble();
    if (v17 == 0.0)
      v16 = 0.0;
    else
      v16 = v17;
  }
  else
  {
LABEL_19:
    v16 = NAN;
  }
LABEL_26:
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v16 >= 0.0)
  {
    v18 = *((_QWORD *)this + 13);
    if (v18
      && ((v19 = *(_DWORD *)(v18 + 4), (v19 & 1) != 0)
        ? (v20 = *(_QWORD *)(v18 + 40), LODWORD(v21) = *(_DWORD *)(v18 + 52))
        : (v20 = v18 + 32, LODWORD(v21) = v19 >> 5),
          (_DWORD)v21))
    {
      v21 = v21;
      v22 = (uint64_t *)(v20 + 8);
      while (1)
      {
        v23 = *(v22 - 1);
        if (v23 == WebCore::HTMLNames::maxAttr
          || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
          && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
        {
          break;
        }
        v22 += 2;
        if (!--v21)
        {
          v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v24 = *v22;
    if (*v22)
    {
      v25 = *(unsigned __int8 **)(v24 + 8);
      v26 = *(unsigned int *)(v24 + 4);
      if ((*(_BYTE *)(v24 + 16) & 4) != 0)
      {
        if ((_DWORD)v26)
        {
          for (i = *(_QWORD *)(v24 + 8); ; ++i)
          {
            v29 = *v25++;
            v28 = v29;
            v30 = (1 << v29) & 0x100003600;
            if (v29 > 0x20 || v30 == 0)
              break;
            if (!--v26)
              return;
          }
          if (v28 <= 0x2E && ((1 << v28) & 0x680000000000) != 0 || v28 - 48 <= 9)
            WTF::parseDouble();
        }
      }
      else
      {
        WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v25, v26, v26);
      }
    }
  }
}

double WebCore::HTMLProgressElement::max(WebCore::HTMLProgressElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double result;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::maxAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  result = WebCore::parseHTMLFloatingPointNumberValue(v8, v9);
  if ((*(uint64_t *)&result <= -1 || ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&result - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    return 1.0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLProgressElement::setValue(WebCore::HTMLProgressElement *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  WTF::AtomString::number(this, a2);
  v3 = *((_QWORD *)this + 13);
  if (v3
    && ((v4 = *(_DWORD *)(v3 + 4), (v4 & 1) != 0)
      ? (v5 = *(uint64_t **)(v3 + 40), v6 = *(_DWORD *)(v3 + 52))
      : (v5 = (uint64_t *)(v3 + 32), v6 = v4 >> 5),
        v6))
  {
    v7 = 0;
    while (1)
    {
      v8 = *v5;
      if (*v5 == WebCore::HTMLNames::valueAttr
        || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
        && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
      {
        break;
      }
      ++v7;
      v5 += 2;
      if (v6 == v7)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v7 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal(this, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::valueAttr, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::AtomString *WebCore::HTMLProgressElement::setMax(WTF::AtomString *this, double a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WebCore::Element *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];

  if (a2 > 0.0)
  {
    v6[3] = v2;
    v6[4] = v3;
    v4 = this;
    WTF::AtomString::number(this, a2);
    WebCore::Element::setAttributeWithoutSynchronization(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::maxAttr, v6);
    this = v6[0];
    v6[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::AtomString *)WTF::StringImpl::destroy(this, v5);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void WebCore::HTMLProgressElement::position(WebCore::HTMLProgressElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  if (*((_BYTE *)this + 120))
  {
    WebCore::HTMLProgressElement::value(this);
    v2 = *((_QWORD *)this + 13);
    if (v2
      && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
        ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
        : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
          (_DWORD)v5))
    {
      v5 = v5;
      v6 = (uint64_t *)(v4 + 8);
      while (1)
      {
        v7 = *(v6 - 1);
        if (v7 == WebCore::HTMLNames::maxAttr
          || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
          && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
        {
          break;
        }
        v6 += 2;
        if (!--v5)
        {
          v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    }
    v8 = *v6;
    if (*v6)
    {
      v9 = *(unsigned __int8 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4);
      if ((*(_BYTE *)(v8 + 16) & 4) != 0)
      {
        if ((_DWORD)v10)
        {
          for (i = *(_QWORD *)(v8 + 8); ; ++i)
          {
            v13 = *v9++;
            v12 = v13;
            v14 = (1 << v13) & 0x100003600;
            if (v13 > 0x20 || v14 == 0)
              break;
            if (!--v10)
              return;
          }
          if (v12 <= 0x2E && ((1 << v12) & 0x680000000000) != 0 || v12 - 48 <= 9)
            WTF::parseDouble();
        }
      }
      else
      {
        WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>((uint64_t)v9, v10, v10);
      }
    }
  }
}

uint64_t *WebCore::HTMLProgressElement::didAddUserAgentShadowRoot(WebCore::HTMLProgressElement *this, WebCore::ShadowRoot *a2)
{
  WTF::StringImpl *v4;
  WebCore::StyledElement *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _BYTE v9[24];
  _BYTE v10[24];
  WebCore::UserAgentParts *v11;
  WebCore::Node *v12;
  _BYTE v13[24];
  WebCore::UserAgentParts *v14;

  WebCore::ProgressInnerElement::create(*(WebCore::ProgressInnerElement **)(*((_QWORD *)this + 5) + 8), &v14);
  WebCore::ContainerNode::appendChild((uint64_t)a2, v14, (uint64_t)v13);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v13, v4);
  WebCore::ProgressBarElement::create(*(WebCore::ProgressBarElement **)(*((_QWORD *)this + 5) + 8), &v12);
  WebCore::ProgressValueElement::create(*(WebCore::ProgressValueElement **)(*((_QWORD *)this + 5) + 8), &v11);
  v5 = v11;
  *((_QWORD *)this + 14) = v11;
  WebCore::StyledElement::setInlineStyleProperty(v5, (WTF::StringImpl *)0x18A, 3, 0, -100.0);
  WebCore::ContainerNode::appendChild((uint64_t)v12, v11, (uint64_t)v10);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v10, v6);
  WebCore::ContainerNode::appendChild((uint64_t)v14, v12, (uint64_t)v9);
  WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v9, v7);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v11);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v12);
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v14);
}

BOOL WebCore::HTMLProgressElement::matchesIndeterminatePseudoClass(WebCore::HTMLProgressElement *this)
{
  return *((_BYTE *)this + 120) == 0;
}

void WebCore::HTMLOutputElement::~HTMLOutputElement(WebCore::HTMLOutputElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLOutputElement::~HTMLOutputElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::HTMLFormElement *v13;
  __int16 v14;
  __int16 v15;
  WebCore::Document *v16;
  WebCore::HTMLFormElement *v17;

  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)(v3 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v9 = *(WTF **)(v3 + 24);
    if ((WTF *)(v3 + 40) != v9 && v9 != 0)
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_QWORD *)this = off_1E33BAC98;
  *((_QWORD *)this + 14) = &unk_1E33BB200;
  v17 = 0;
  v12 = *((_QWORD *)this + 15);
  if (v12)
  {
    if (*(_QWORD *)(v12 + 8))
    {
      WebCore::FormListedElement::setFormInternal((WebCore::HTMLOutputElement *)((char *)this + 112), &v17);
      v13 = v17;
      v17 = 0;
      if (v13)
      {
        if (*((_DWORD *)v13 + 6) == 2)
        {
          v14 = *((_WORD *)v13 + 15);
          if ((v14 & 0x400) == 0)
          {
            v16 = v13;
            v15 = *((_WORD *)v13 + 14);
            if ((v15 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(v16, a2);
            }
            else
            {
              if ((v15 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)v16 + 20) + 16))(*((_QWORD *)v16 + 20));
                v14 = *((_WORD *)v16 + 15);
              }
              *((_WORD *)v16 + 15) = v14 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v16 + 72))(v16);
            }
          }
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
      }
    }
  }
  WebCore::ValidatedFormListedElement::~ValidatedFormListedElement((WebCore::HTMLOutputElement *)((char *)this + 112), a2);
  WebCore::Element::~Element((uint64_t)this);
}

