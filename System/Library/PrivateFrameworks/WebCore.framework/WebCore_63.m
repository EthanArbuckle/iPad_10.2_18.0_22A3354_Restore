uint64_t WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WTF **a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  if (!*a1)
    goto LABEL_13;
  if (WTF::StringImpl::startsWith())
  {
    result = *a2;
    if (!*a2)
      return result;
    result = WTF::StringImpl::startsWith();
    if (!(_DWORD)result)
      return result;
    goto LABEL_16;
  }
  if (!*a1 || !WTF::StringImpl::startsWith())
  {
LABEL_13:
    if (!*a2)
    {
      v6 = 0;
      return WTF::codePointCompare(*a1, v6, a3) >> 31;
    }
    if ((WTF::StringImpl::startsWith() & 1) == 0)
    {
LABEL_16:
      v6 = (const WTF::StringImpl *)*a2;
      return WTF::codePointCompare(*a1, v6, a3) >> 31;
    }
    return 1;
  }
  result = *a2;
  if (!*a2)
    return result;
  if ((WTF::StringImpl::startsWith() & 1) != 0)
    return 1;
  result = *a2;
  if (*a2)
  {
    result = WTF::StringImpl::startsWith();
    if ((_DWORD)result)
      goto LABEL_16;
  }
  return result;
}

WTF *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *,0>(uint64_t *a1, WTF **a2, const WTF::StringImpl *a3, WTF **a4, WTF **a5)
{
  const WTF::StringImpl *v10;
  WTF *result;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>(a1, a2, a3, a4);
  result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a5, (uint64_t *)a4, v10);
  if ((_DWORD)result)
  {
    std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a4, (WTF::StringImpl *)a5);
    result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (uint64_t *)a3, v12);
    if ((_DWORD)result)
    {
      std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a3, (WTF::StringImpl *)a4);
      result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)a3, (uint64_t *)a2, v13);
      if ((_DWORD)result)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a2, a3);
        result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a1, v14);
        if ((_DWORD)result)
          return std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a1, (WTF::StringImpl *)a2);
      }
    }
  }
  return result;
}

WTF *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>(uint64_t *a1, WTF **a2, const WTF::StringImpl *a3)
{
  char v6;
  const WTF::StringImpl *v7;
  WTF *result;
  uint64_t v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;

  v6 = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a1, a3);
  result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)a3, (uint64_t *)a2, v7);
  if ((v6 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v9 = (uint64_t)a1;
    }
    else
    {
      std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a1, (WTF::StringImpl *)a2);
      result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)a3, (uint64_t *)a2, v11);
      if (!(_DWORD)result)
        return result;
      v9 = (uint64_t)a2;
    }
    return std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v9, a3);
  }
  else if ((_DWORD)result)
  {
    std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a2, a3);
    result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a1, v10);
    if ((_DWORD)result)
      return std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a1, (WTF::StringImpl *)a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unint64_t v5;
  _BOOL8 result;
  WTF::StringImpl *v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WTF::StringImpl *v36[2];
  uint64_t v37;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (WTF::StringImpl *)(a2 - 24);
      if (WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)(a2 - 24), (uint64_t *)a1, a3))std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, v7);
      return 1;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)a1, (WTF **)(a1 + 24), (const WTF::StringImpl *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)a1, (WTF **)(a1 + 24), (const WTF::StringImpl *)(a1 + 48), (WTF **)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *,0>((uint64_t *)a1, (WTF **)(a1 + 24), (const WTF::StringImpl *)(a1 + 48), (WTF **)(a1 + 72), (WTF **)(a2 - 24));
      return 1;
    default:
      v8 = (uint64_t *)(a1 + 48);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)a1, (WTF **)(a1 + 24), (const WTF::StringImpl *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)v10, v8, v9))
    {
      v13 = *(_OWORD *)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_OWORD *)v36 = v13;
      *(_QWORD *)&v13 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = 0;
      v37 = v13;
      v14 = v10;
      while (1)
      {
        v15 = (uint64_t)v8;
        v16 = *v8;
        *v8 = 0;
        v17 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = v16;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v12);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = *(unsigned int *)(v14 + 20);
        if ((_DWORD)v18)
        {
          v19 = *(_DWORD ***)(v14 + 8);
          v20 = 8 * v18;
          do
          {
            v21 = *v19;
            *v19 = 0;
            if (v21)
            {
              if (v21[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
              else
                --v21[2];
            }
            ++v19;
            v20 -= 8;
          }
          while (v20);
        }
        v22 = *(WTF **)(v14 + 8);
        if (v22)
        {
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = 0;
          WTF::fastFree(v22, v12);
        }
        v23 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v14 + 8) = v23;
        *(_DWORD *)(v14 + 16) = *(_DWORD *)(v15 + 16);
        LODWORD(v23) = *(_DWORD *)(v15 + 20);
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v14 + 20) = v23;
        if (v15 == a1)
          break;
        v8 = (uint64_t *)(v15 - 24);
        v14 = v15;
        if ((WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v36, (uint64_t *)(v15 - 24), v9) & 1) == 0)goto LABEL_26;
      }
      v15 = a1;
LABEL_26:
      v24 = v36[0];
      v36[0] = 0;
      v25 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v12);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v26)
      {
        v27 = *(_DWORD ***)(v15 + 8);
        v28 = 8 * v26;
        do
        {
          v29 = *v27;
          *v27 = 0;
          if (v29)
          {
            if (v29[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
            else
              --v29[2];
          }
          ++v27;
          v28 -= 8;
        }
        while (v28);
      }
      v30 = *(WTF **)(v15 + 8);
      if (v30)
      {
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 0;
        WTF::fastFree(v30, v12);
      }
      v31 = v36[1];
      v36[1] = 0;
      *(_QWORD *)(v15 + 8) = v31;
      LODWORD(v31) = v37;
      LODWORD(v37) = 0;
      *(_DWORD *)(v15 + 16) = (_DWORD)v31;
      LODWORD(v31) = HIDWORD(v37);
      HIDWORD(v37) = 0;
      *(_DWORD *)(v15 + 20) = (_DWORD)v31;
      v32 = v36[1];
      if (HIDWORD(v37))
      {
        v33 = 8 * HIDWORD(v37);
        v34 = v36[1];
        do
        {
          v35 = *(_DWORD **)v34;
          *(_QWORD *)v34 = 0;
          if (v35)
          {
            if (v35[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
            else
              --v35[2];
          }
          v34 = (WTF::StringImpl *)((char *)v34 + 8);
          v33 -= 8;
        }
        while (v33);
      }
      if (v32)
        WTF::fastFree(v32, v12);
      if (v36[0])
      {
        if (*(_DWORD *)v36[0] == 2)
          WTF::StringImpl::destroy(v36[0], v12);
        else
          *(_DWORD *)v36[0] -= 2;
      }
      if (++v11 == 8)
        return v10 + 24 == a2;
    }
    v8 = (uint64_t *)v10;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

WTF *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  WTF *result;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v5 = *(WTF::StringImpl **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, a2);
      v17 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v17)
      {
        v18 = *(_DWORD ***)(a1 + 8);
        v19 = 8 * v17;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (v20[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
            else
              --v20[2];
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v9 = *(WTF **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v10;
  v11 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v12)
  {
    v13 = (_DWORD **)*((_QWORD *)a2 + 1);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        else
          --v15[2];
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  result = (WTF *)*((_QWORD *)a2 + 1);
  if (result)
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_DWORD *)a2 + 4) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *((_QWORD *)a2 + 1) = v4;
  *((_QWORD *)a2 + 2) = v6;
  return result;
}

WTF *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>(uint64_t *a1, WTF **a2, const WTF::StringImpl *a3, WTF **a4)
{
  const WTF::StringImpl *v8;
  WTF *result;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>(a1, a2, a3);
  result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (uint64_t *)a3, v8);
  if ((_DWORD)result)
  {
    std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a3, (WTF::StringImpl *)a4);
    result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)a3, (uint64_t *)a2, v10);
    if ((_DWORD)result)
    {
      std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a2, a3);
      result = (WTF *)WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a1, v11);
      if ((_DWORD)result)
        return std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)a1, (WTF::StringImpl *)a2);
    }
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_0,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_1,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_2,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_3,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_4,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_5,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::Length::TransformSyntaxValue>,WebCore::Length::SyntaxValueList> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  return WebCore::CSSStyleValueFactory::reifyValue(*a2, **(_DWORD **)(*(_QWORD *)a1 + 8), **(WTF::StringBuilder ***)(*(_QWORD *)a1 + 16), a3, a4, a5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_0,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_1,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_2,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_3,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_4,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_5,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::Length::TransformSyntaxValue>,WebCore::Length::SyntaxValueList> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;

  v3 = *(_DWORD **)(*(_QWORD *)a1 + 32);
  *v3 += 2;
  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E339F420;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_0,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_1,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_2,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_3,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_4,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_5,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::Length::TransformSyntaxValue>,WebCore::Length::SyntaxValueList> const&>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _BYTE v6[48];
  __int128 *v7;
  unsigned int v8;

  WebCore::CSSCustomPropertyValue::customCSSText(**(_QWORD **)(*(_QWORD *)a1 + 56), &v5);
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v6, (unsigned int **)&v5, 0, 0);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::CSSUnparsedValue::create(v7, (__int128 *)((char *)v7 + 24 * v8), (uint64_t *)a2);
  *(_DWORD *)(a2 + 16) = 0;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v6, v4);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_0,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_1,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_2,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_3,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_4,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_5,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::Length::TransformSyntaxValue>,WebCore::Length::SyntaxValueList> const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD v11[6];
  __int128 *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  char v15;

  v4 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v4 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_0,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_1,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_2,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_3,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_4,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_5,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::Length::TransformSyntaxValue>,WebCore::Length::SyntaxValueList> const&>(v10);
  }
  else
  {
    v5 = *a1;
    v11[0] = &v15;
    ((void (*)(WTF::StringImpl **__return_ptr, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSStyleValueFactory47constructStyleValueForCustomPropertySyntaxValueERKNS_7variantIJNS8_6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_3URLENS6_6StringENSC_20TransformSyntaxValueEEEEE3__0JZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__1ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__2ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__3ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__4ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__5ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__6EEEEEJRKNS0_6__implIJSB_SD_SE_SL_SM_SN_SO_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, v11);
    v6 = v14;
    if (v14)
    {
      v7 = *((_DWORD *)v14 + 2);
      *((_DWORD *)v14 + 2) = v7 + 1;
      *(_QWORD *)a3 = v6;
      *(_DWORD *)(a3 + 16) = 0;
      v14 = 0;
      if (v7)
        *((_DWORD *)v6 + 2) = v7;
      else
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 16))(v6);
    }
    else
    {
      WebCore::CSSCustomPropertyValue::customCSSText(**(_QWORD **)(v5 + 40), &v14);
      WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v11, (unsigned int **)&v14, 0, 0);
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v8);
        else
          *(_DWORD *)v14 -= 2;
      }
      WebCore::CSSUnparsedValue::create(v12, (__int128 *)((char *)v12 + 24 * v13), (uint64_t *)a3);
      *(_DWORD *)(a3 + 16) = 0;
      WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v11, v9);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_0,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_1,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_2,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_3,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_4,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_5,WebCore::CSSStyleValueFactory::reifyValue(WebCore::CSSValue const&,std::optional<WebCore::CSSPropertyID>,WebCore::Document *)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::Length::TransformSyntaxValue>,WebCore::Length::SyntaxValueList> const&>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD v10[6];
  __int128 *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  char v14;

  if (!a2[3])
    goto LABEL_14;
  v4 = *(unsigned int *)(*(_QWORD *)a2 + 40);
  if ((_DWORD)v4 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_14:
    __break(0xC471u);
    return;
  }
  v5 = *a1;
  v10[0] = &v14;
  ((void (*)(WTF::StringImpl **__return_ptr, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSStyleValueFactory47constructStyleValueForCustomPropertySyntaxValueERKNS_7variantIJNS8_6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_3URLENS6_6StringENSC_20TransformSyntaxValueEEEEE3__0JZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__1ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__2ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__3ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__4ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__5ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__6EEEEEJRKNS0_6__implIJSB_SD_SE_SL_SM_SN_SO_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v13, v10);
  v6 = v13;
  if (v13)
  {
    v7 = *((_DWORD *)v13 + 2);
    *((_DWORD *)v13 + 2) = v7 + 1;
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 16) = 0;
    v13 = 0;
    if (v7)
      *((_DWORD *)v6 + 2) = v7;
    else
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 16))(v6);
  }
  else
  {
    WebCore::CSSCustomPropertyValue::customCSSText(**(_QWORD **)(v5 + 48), &v13);
    WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v10, (unsigned int **)&v13, 0, 0);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebCore::CSSUnparsedValue::create(v11, (__int128 *)((char *)v11 + 24 * v12), (uint64_t *)a3);
    *(_DWORD *)(a3 + 16) = 0;
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v10, v9);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v3;
  float v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD v11[2];
  _BYTE v12[36];

  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 == 3)
  {
    if (*(_BYTE *)(a1 + 6))
      v4 = *(float *)a1;
    else
      v4 = (float)*(int *)a1;
    v5 = bmalloc::api::isoAllocate();
    v6 = 3;
    v7 = 3;
  }
  else
  {
    if (v3 != 4)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (*(_BYTE *)(a1 + 6))
      v4 = *(float *)a1;
    else
      v4 = (float)*(int *)a1;
    v5 = bmalloc::api::isoAllocate();
    v6 = 6;
    v7 = 6;
  }
  WebCore::CSSNumericType::create(v7, 1, (uint64_t)v12);
  *(_QWORD *)&v8 = 0x8000000080000000;
  *((_QWORD *)&v8 + 1) = 0x8000000080000000;
  v11[0] = v8;
  v11[1] = xmmword_1968BD2E0;
  v9 = v11;
  if (v12[32])
    v9 = v12;
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  v10 = v9[1];
  *(_OWORD *)(v5 + 40) = *v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 56) = v10;
  *(_QWORD *)v5 = &off_1E339F080;
  *(double *)(v5 + 72) = v4;
  *(_BYTE *)(v5 + 80) = v6;
LABEL_15:
  *a2 = v5;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __n128 result;
  __int128 v9;
  _OWORD v10[2];
  _BYTE v11[36];

  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(v4, 1, (uint64_t)v11);
  *(_QWORD *)&v6 = 0x8000000080000000;
  *((_QWORD *)&v6 + 1) = 0x8000000080000000;
  v10[0] = v6;
  v10[1] = xmmword_1968BD2E0;
  v7 = v10;
  if (v11[32])
    v7 = v11;
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  result = *(__n128 *)v7;
  v9 = *((_OWORD *)v7 + 1);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v7;
  *(_QWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 56) = v9;
  *(_QWORD *)v5 = &off_1E339F080;
  *(_QWORD *)(v5 + 72) = v3;
  *(_BYTE *)(v5 + 80) = v4;
  *a2 = v5;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(const WebCore::Color *a1@<X1>, uint64_t *a2@<X8>)
{
  int v3;
  int *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int *v7;
  _QWORD *v8;
  int *v9;
  int v10;
  uint64_t v11;
  _BYTE v12[8];

  v3 = *((_DWORD *)a1 + 2);
  if (v3 == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = 0;
    std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>((WTF::StringImpl **)&v9, &v11);
    *a2 = v11;
    if (v10 != -1)
      ((void (*)(_BYTE *, int **))off_1E339F2B8[v10])(v12, &v9);
    return;
  }
  {
    if (!v3)
      goto LABEL_6;
LABEL_12:
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(v8);
    return;
  }
  WebCore::CSSValuePool::singleton(void)::pool = 0;
  unk_1ECE88B90 = 0;
  qword_1ECE88B98 = 0;
  if (v3)
    goto LABEL_12;
LABEL_6:
  WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, a1, &v9);
  v4 = v9;
  v9 = 0;
  v5 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = &off_1E339F420;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = v4;
  *a2 = v5;
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
    else
      *v7 -= 2;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  WTF::StringImpl *v7;

  v3 = *a1;
  if (*a1)
    *(_DWORD *)v3 += 2;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 2;
  v5 = *(_BYTE *)(v4 + 6);
  *(_WORD *)(v4 + 4) = 21;
  *(_BYTE *)(v4 + 6) = v5 & 0xFC;
  *(_QWORD *)(v4 + 8) = v3;
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = &off_1E339F420;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = v4;
    *a2 = result;
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, v7);
    else
      *(_DWORD *)v3 -= 2;
  }
  else
  {
    result = bmalloc::api::isoAllocate();
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = &off_1E339F420;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = v4;
    *a2 = result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>@<X0>(WTF::StringImpl **a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  _BYTE v8[8];

  v3 = *a1;
  if (*a1)
    *(_DWORD *)v3 += 2;
  v5 = v3;
  v6 = 0;
  result = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>(&v5, &v7);
  *a2 = v7;
  if (v6 != -1)
    return ((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E339F2B8[v6])(v8, &v5);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::CSSStyleValueFactory::constructStyleValueForCustomPropertySyntaxValue(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &&,WebCore::CSSParserContext const&)::$_0,WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &,WebCore::CSSParserContext const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String> &&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = **(_QWORD **)result;
  v3 = *a2;
  v9 = *a2;
  *a2 = 0;
  v4 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 8))
  {
    v5 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v2, v4 + 1, (unint64_t)&v9);
    v6 = *(unsigned int *)(v2 + 12);
    v7 = *(char **)v2;
    v8 = *(_QWORD *)v5;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)&v7[8 * v6] = v8;
    result = v9;
    *(_DWORD *)(v2 + 12) = v6 + 1;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v3;
    *(_DWORD *)(v2 + 12) = v4 + 1;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &&,WebCore::CSSParserContext const&)::$_0,WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &,WebCore::CSSParserContext const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String> &&>(uint64_t *a1, unsigned int **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  _QWORD *v22;
  uint64_t v23;
  WTF *v24;
  _DWORD *v25;
  WTF *v26;
  uint64_t v27;
  int v28;
  char v29;

  v2 = *a1;
  WebCore::CSSStyleValueFactory::parseStyleValue(*(WebCore::CSSStyleValueFactory **)(*a1 + 8), a2, (const WTF::String *)1, *(const WTF::String **)(*a1 + 16), (uint64_t)&v26);
  if (!v28)
  {
    v8 = *(_QWORD *)(v2 + 32);
    v9 = v26;
    v10 = HIDWORD(v27);
    v26 = 0;
    v27 = 0;
    v11 = *(unsigned int *)(v8 + 8);
    v12 = *(unsigned int *)(v8 + 12);
    if (v12 + v10 > v11)
    {
      v13 = v11 + (v11 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v12 + v10)
        v15 = v12 + v10;
      else
        v15 = v14;
      if (v15 >> 29)
        goto LABEL_37;
      v16 = *(_QWORD **)v8;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(v8 + 8) = v15;
      *(_QWORD *)v8 = v17;
      memcpy(v17, v16, 8 * v12);
      if (v16)
      {
        if (*(_QWORD **)v8 == v16)
        {
          *(_QWORD *)v8 = 0;
          *(_DWORD *)(v8 + 8) = 0;
        }
        WTF::fastFree((WTF *)v16, v3);
      }
    }
    if ((_DWORD)v10)
    {
      v18 = *(_DWORD *)(v8 + 12);
      v19 = 8 * v10;
      v20 = 8 * v10;
      v21 = v9;
      do
      {
        v22 = *(_QWORD **)v8;
        v23 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        v21 = (WTF *)((char *)v21 + 8);
        v22[v18++] = v23;
        v20 -= 8;
      }
      while (v20);
      *(_DWORD *)(v8 + 12) = v18;
      v24 = v9;
      do
      {
        v25 = *(_DWORD **)v24;
        *(_QWORD *)v24 = 0;
        if (v25)
        {
          if (v25[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
          else
            --v25[2];
        }
        v24 = (WTF *)((char *)v24 + 8);
        v19 -= 8;
      }
      while (v19);
    }
    if (v9)
      WTF::fastFree(v9, v3);
    goto LABEL_32;
  }
  if (v28 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
    __break(0xC471u);
    return;
  }
  v4 = v27;
  v27 = 0;
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  *(_BYTE *)v5 = (_BYTE)v26;
  if (v6)
  {
    v7 = *(WTF::StringImpl **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v4;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    *(_QWORD *)(v5 + 8) = v4;
    *(_BYTE *)(v5 + 16) = 1;
  }
LABEL_32:
  if (v28 != -1)
    ((void (*)(char *, WTF **))off_1E339F258[v28])(&v29, &v26);
}

unint64_t WTF::Vector<WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x195911A48);
    }
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    result = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = result;
    if ((_DWORD)v5)
    {
      v7 = result;
      v8 = (WTF *)((char *)v4 + 16 * v5);
      v9 = v4;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v10 = *(unsigned int **)v9;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)v7 = v10;
        LODWORD(v10) = *((_DWORD *)v9 + 2);
        *((_DWORD *)v9 + 2) = 0;
        *(_DWORD *)(v7 + 8) = (_DWORD)v10;
        LODWORD(v10) = *((_DWORD *)v9 + 3);
        *((_DWORD *)v9 + 3) = 0;
        *(_DWORD *)(v7 + 12) = (_DWORD)v10;
        v11 = *((unsigned int *)v9 + 3);
        v12 = *(unsigned int **)v9;
        if ((_DWORD)v11)
        {
          v13 = 16 * v11;
          do
          {
            v14 = v12[2];
            if ((_DWORD)v14 != -1)
              result = ((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v14])(&v15, v12);
            v12[2] = -1;
            v12 += 4;
            v13 -= 16;
          }
          while (v13);
          v12 = *(unsigned int **)v9;
        }
        if (v12)
        {
          *(_QWORD *)v9 = 0;
          *((_DWORD *)v9 + 2) = 0;
          result = WTF::fastFree((WTF *)v12, v6);
        }
        v7 += 16;
        v9 = (WTF *)((char *)v9 + 16);
      }
      while (v9 != v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 4);
      *((_DWORD *)v5 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 5);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v7;
      v8 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v8)
      {
        v9 = (_DWORD **)*((_QWORD *)v5 + 1);
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
            else
              --v11[2];
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v12 = (WTF *)*((_QWORD *)v5 + 1);
      if (v12)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        WTF::fastFree(v12, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 24;
      v5 = (WTF::StringImpl *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return result;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_2,WTF::IterationStatus,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&>::call(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *result;
  void *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  char *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  _DWORD *v31;
  _DWORD *v32;
  WTF *v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD **)(a2 + 8);
  if (v7)
    *v7 += 2;
  v32 = v7;
  result = WebCore::StylePropertyMapReadOnly::reifyValueToVector(&v32, 0, **(WTF::StringBuilder ***)(a1 + 16), a5, (uint64_t)&v33, a3);
  v10 = *(WTF::StringImpl **)a2;
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = v33;
  v13 = v34;
  v12 = HIDWORD(v34);
  v33 = 0;
  v34 = 0;
  v14 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(v6 + 8))
  {
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v14 + 1)
      v17 = v14 + 1;
    else
      v17 = v16;
    if (v17 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v18 = *(WTF::StringImpl **)v6;
    v19 = (WTF::StringImpl *)(*(_QWORD *)v6 + 24 * v14);
    v20 = 24 * v17;
    v21 = WTF::fastMalloc((WTF *)(24 * v17));
    *(_DWORD *)(v6 + 8) = (v20 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v6 = v21;
    WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(v18, v19, v21);
    if (v18)
    {
      if (*(WTF::StringImpl **)v6 == v18)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v18, v9);
    }
    v22 = *(_DWORD *)(v6 + 12);
    v23 = *(WTF::StringImpl **)v6;
    if (v10)
      *(_DWORD *)v10 += 2;
    v24 = (char *)v23 + 24 * v22;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)v24 = v10;
  }
  else
  {
    v25 = *(WTF::StringImpl **)v6;
    v26 = (WTF::StringImpl **)(*(_QWORD *)v6 + 24 * v14);
    if (v10)
      *(_DWORD *)v10 += 2;
    *v26 = v10;
    v24 = (char *)v25 + 24 * v14;
    *((_QWORD *)v24 + 2) = 0;
  }
  *((_QWORD *)v24 + 1) = v11;
  *((_DWORD *)v24 + 4) = v13;
  *((_DWORD *)v24 + 5) = v12;
  ++*(_DWORD *)(v6 + 12);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (HIDWORD(v34))
  {
    v27 = v33;
    v28 = 8 * HIDWORD(v34);
    do
    {
      v29 = *(_DWORD **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (v29[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
        else
          --v29[2];
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  v30 = v33;
  if (v33)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    WTF::fastFree(v30, v9);
  }
  v31 = v32;
  v32 = 0;
  if (v31)
  {
    if (*v31 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, (WTF::StringImpl *)v9);
    else
      *v31 -= 2;
  }
  return 0;
}

uint64_t WebCore::InlineStylePropertyMap::propertyValue@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 104);
      if (v5)
      {
        result = *(_QWORD *)(v5 + 8);
        if (result)
          return WebCore::StyleProperties::getPropertyCSSValue(result, a2, a3);
      }
    }
  }
  *a3 = 0;
  return result;
}

void WebCore::InlineStylePropertyMap::shorthandPropertySerialization(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, WebCore *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::StyleProperties *v10;
  uint64_t v11;
  WTF::StringBuilder *v12;
  WTF::String *v13;
  WTF::StringBuilder *v14;
  WTF::String *v15;
  __n128 v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (v9 = *(_QWORD *)(v8 + 104)) != 0
    && (v10 = *(const WebCore::StyleProperties **)(v9 + 8)) != 0)
  {
    if ((a2 - 2) <= 0x1C8)
    {
      WebCore::StyleProperties::serializeLonghandValue((uint64_t)v10, a2, a3, a4, a5, a6);
    }
    else
    {
      v18[0] = WebCore::shorthandForProperty(a2);
      v18[1] = v11;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0;
      v29 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)v18, v10, v12, v13, (__n128)0);
      WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v18, v14, v15, a5, v16);
      WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v18, v17);
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
  }
}

uint64_t WebCore::InlineStylePropertyMap::customPropertyValue@<X0>(uint64_t result@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 104);
      if (v5)
      {
        result = *(_QWORD *)(v5 + 8);
        if (result)
          return WebCore::StyleProperties::getCustomPropertyCSSValue(result, a2, a3);
      }
    }
  }
  *a3 = 0;
  return result;
}

uint64_t WebCore::InlineStylePropertyMap::size(WebCore::InlineStylePropertyMap *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 104);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 8) != 0)
    return *(unsigned int *)(v4 + 28);
  else
    return v5 >> 4;
}

_DWORD *WebCore::InlineStylePropertyMap::entries@<X0>(_DWORD *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringBuilder *v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  unsigned int v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  _QWORD v30[2];

  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    if (a2)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 104);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            if (*((_BYTE *)a2 + 274))
            {
              __break(0xC471u);
              JUMPOUT(0x19591214CLL);
            }
            *(_QWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            v11 = *(_DWORD *)(v10 + 4);
            if ((v11 & 8) != 0)
            {
              v12 = *(_DWORD *)(v10 + 28);
              if (v12)
                goto LABEL_9;
            }
            else
            {
              v12 = v11 >> 4;
              if (v12)
              {
LABEL_9:
                if (v12 >= 0xAAAAAAB)
                {
                  __break(0xC471u);
LABEL_37:
                  JUMPOUT(0x19591212CLL);
                }
                v13 = 24 * v12;
                this = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v12));
                v14 = this;
                *(_DWORD *)(a4 + 8) = (v13 & 0xFFFFFFF8) / 0x18;
                *(_QWORD *)a4 = this;
                goto LABEL_15;
              }
            }
            v14 = 0;
LABEL_15:
            v15 = 0;
            v16 = (WebCore::ScriptExecutionContext *)((char *)a2 - 192);
            v17 = v10 + 8;
            for (i = 1; ; ++i)
            {
              v19 = *(unsigned int *)(v10 + 4);
              if ((v19 & 8) != 0)
              {
                if (*(_DWORD *)(v10 + 28) <= v15)
                  return this;
                v20 = *(_QWORD *)(v10 + 16) + 16 * v15;
                v22 = *(_DWORD **)(v20 + 8);
              }
              else
              {
                if (v15 >= v19 >> 4)
                  return this;
                v20 = v17 + 2 * v15;
                v21 = (unsigned int *)(v17 + 5 * v15 + ((v19 >> 3) & 0x1FFFFFFE));
                v22 = (_DWORD *)(*v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
              }
              v23 = *(_WORD *)v20 & 0x3FF;
              if (v23 != 1)
                break;
              if (((*((unsigned __int16 *)v22 + 2) | (*((unsigned __int8 *)v22 + 6) << 16)) & 0x3F800) != 0xE800)
              {
                __break(0xC471u);
                goto LABEL_37;
              }
              v24 = (_DWORD *)*((_QWORD *)v22 + 1);
              if (v24)
                goto LABEL_24;
LABEL_25:
              if (v22)
                *v22 += 2;
              v29 = v22;
              WebCore::StylePropertyMapReadOnly::reifyValueToVector(&v29, *(_WORD *)v20 & 0x3FF | 0x10000, v16, a3, (uint64_t)v30, a5);
              this = v29;
              v26 = v30[0];
              v27 = v30[1];
              if (v29)
              {
                if (*v29 == 2)
                  this = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v25);
                else
                  *v29 -= 2;
              }
              v28 = &v14[6 * (i - 1)];
              *v28 = v24;
              v28[1] = v26;
              v28[2] = v27;
              *(_DWORD *)(a4 + 12) = i;
              v15 = (v15 + 1);
            }
            v24 = (_DWORD *)*WebCore::nameString(v23);
            if (!v24)
              goto LABEL_25;
LABEL_24:
            *v24 += 2;
            goto LABEL_25;
          }
        }
      }
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  return this;
}

void WebCore::InlineStylePropertyMap::removeProperty(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::Element *v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;
  uint64_t v13;
  WebCore::StyledElement *v14;
  uint64_t v15;
  WebCore::MutableStyleProperties *v16;
  WTF::String *v17;
  __n128 v18;
  _BYTE v19[32];

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = *(WebCore::Element **)(v5 + 8);
    if (v7)
    {
      WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v19, v7, a3, a4, a5);
      v13 = *(_QWORD *)(a1 + 16);
      if (v13)
        v14 = *(WebCore::StyledElement **)(v13 + 8);
      else
        v14 = 0;
      v15 = *((_QWORD *)v14 + 13);
      if (v15 && *(_QWORD *)(v15 + 8))
      {
        v16 = WebCore::StyledElement::ensureMutableInlineStyle(v14, v9);
        if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v16, a2, 0, v17, v18))
        {
          v12.n128_f64[0] = WebCore::StyledElement::inlineStyleChanged(v14, (uint64_t)v9, v10, v11, v12);
          v19[25] = 1;
        }
      }
      WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v19, v9, v10, v11, v12);
    }
  }
}

BOOL WebCore::InlineStylePropertyMap::setShorthandProperty(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::Element *v7;
  uint64_t v10;
  WebCore::StyledElement *v11;
  void *v12;
  uint64_t v13;
  WTF::String *v14;
  __n128 v15;
  _BOOL8 v16;
  BOOL v18;
  _BYTE v19[32];

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v7 = *(WebCore::Element **)(v5 + 8);
  if (!v7)
    return 0;
  WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v19, v7, a3, a4, a5);
  v18 = 0;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
    v11 = *(WebCore::StyledElement **)(v10 + 8);
  else
    v11 = 0;
  WebCore::StyledElement::setInlineStyleProperty(v11, a2, a3, 0, &v18);
  v16 = !v18;
  if (!v18)
    v19[25] = 1;
  WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v19, v12, v13, v14, v15);
  return v16;
}

BOOL WebCore::InlineStylePropertyMap::setProperty(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::Element *v7;
  WTF::StringBuilder *v10;
  WTF::String *v11;
  __n128 v12;
  uint64_t v13;
  WebCore::StyledElement *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::String *v17;
  __n128 v18;
  WTF::StringImpl *v19;
  _BOOL8 v20;
  uint64_t v21;
  WebCore::StyledElement *v22;
  WebCore::MutableStyleProperties *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::String *v27;
  __n128 v28;
  WTF::StringImpl *v29;
  BOOL v31;
  _BYTE v32[32];
  WTF::StringImpl *v33;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v7 = *(WebCore::Element **)(v5 + 8);
  if (!v7)
    return 0;
  WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v32, v7, (uint64_t)a3, a4, a5);
  v31 = 0;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
    v14 = *(WebCore::StyledElement **)(v13 + 8);
  else
    v14 = 0;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v33, *a3, v10, v11, v12);
  WebCore::StyledElement::setInlineStyleProperty(v14, a2, (uint64_t)&v33, 0, &v31);
  v19 = v33;
  v33 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v31)
  {
    v20 = 0;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 16);
    if (v21)
      v22 = *(WebCore::StyledElement **)(v21 + 8);
    else
      v22 = 0;
    v23 = WebCore::StyledElement::ensureMutableInlineStyle(v22, v15);
    v24 = (WTF::StringImpl *)*a3;
    *a3 = 0;
    v33 = v24;
    WebCore::MutableStyleProperties::setProperty(v23, (int)a2, (_DWORD **)&v33, 0);
    v29 = v33;
    v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v25);
      else
        *(_DWORD *)v29 -= 2;
    }
    v18.n128_f64[0] = WebCore::StyledElement::inlineStyleChanged(v22, (uint64_t)v25, v26, v27, v28);
    v32[25] = 1;
    v20 = !v31;
  }
  WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v32, v15, v16, v17, v18);
  return v20;
}

uint64_t WebCore::InlineStylePropertyMap::setCustomProperty(uint64_t a1, __n128 a2, uint64_t a3, _QWORD *a4, WTF::String *a5)
{
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _DWORD *v15;
  uint64_t v16;
  WebCore::StyledElement *v17;
  WebCore::MutableStyleProperties *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::String *v22;
  __n128 v23;
  _DWORD *v24;
  uint64_t v25;
  __n128 v26;
  void *v27;
  uint64_t v28;
  WTF::String *v29;
  _BYTE v31[32];
  __int16 v32;
  _DWORD *v33;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v6 = *(WebCore::Element **)(v5 + 8);
  if (!v6)
    return 0;
  WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v31, v6, (uint64_t)a4, a5, a2);
  v10 = WTF::fastCompactMalloc((WTF *)0x60);
  v12 = v10;
  v13 = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)v10 = 2;
  v14 = *(_BYTE *)(v10 + 6);
  *(_WORD *)(v10 + 4) = -6144;
  *(_BYTE *)(v10 + 6) = v14 & 0xFC;
  v15 = (_DWORD *)*a4;
  if (*a4)
    *v15 += 2;
  *(_QWORD *)(v10 + 8) = v15;
  *(_QWORD *)(v10 + 24) = v13;
  *(_DWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
    v17 = *(WebCore::StyledElement **)(v16 + 8);
  else
    v17 = 0;
  v18 = WebCore::StyledElement::ensureMutableInlineStyle(v17, v11);
  v32 = -32767;
  v33 = (_DWORD *)v12;
  WebCore::MutableStyleProperties::addParsedProperty(v18, (unint64_t)&v32, v19);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*v24 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v20);
    else
      *v24 -= 2;
  }
  v26.n128_f64[0] = WebCore::StyledElement::inlineStyleChanged(v17, (uint64_t)v20, v21, v22, v23);
  v25 = 1;
  v31[25] = 1;
  WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v31, v27, v28, v29, v26);
  return v25;
}

void WebCore::InlineStylePropertyMap::removeCustomProperty(WebCore::InlineStylePropertyMap *this, const WTF::AtomString *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  WebCore::Element *v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;
  uint64_t v13;
  WebCore::StyledElement *v14;
  uint64_t v15;
  WebCore::MutableStyleProperties *v16;
  WTF::String *v17;
  __n128 v18;
  _BYTE v19[32];

  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v7 = *(WebCore::Element **)(v5 + 8);
    if (v7)
    {
      WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v19, v7, a3, a4, a5);
      v13 = *((_QWORD *)this + 2);
      if (v13)
        v14 = *(WebCore::StyledElement **)(v13 + 8);
      else
        v14 = 0;
      v15 = *((_QWORD *)v14 + 13);
      if (v15 && *(_QWORD *)(v15 + 8))
      {
        v16 = WebCore::StyledElement::ensureMutableInlineStyle(v14, v9);
        if (WebCore::MutableStyleProperties::removeCustomProperty(v16, a2, 0, v17, v18))
        {
          v12.n128_f64[0] = WebCore::StyledElement::inlineStyleChanged(v14, (uint64_t)v9, v10, v11, v12);
          v19[25] = 1;
        }
      }
      WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v19, v9, v10, v11, v12);
    }
  }
}

void WebCore::InlineStylePropertyMap::clear(WebCore::InlineStylePropertyMap *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  WebCore::Element *v6;
  void *v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  uint64_t v12;
  WebCore::StyledElement *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  WebCore::MutableStyleProperties *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::String *v21;
  __n128 v22;
  _BYTE v23[32];

  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(WebCore::Element **)(v5 + 8);
    if (v6)
    {
      WebCore::StyleAttributeMutationScope::StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v23, v6, a4, a5, a2);
      v12 = *((_QWORD *)this + 2);
      if (v12)
        v13 = *(WebCore::StyledElement **)(v12 + 8);
      else
        v13 = 0;
      v14 = *((_QWORD *)v13 + 13);
      if (!v14)
        goto LABEL_10;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        goto LABEL_10;
      v16 = *(_DWORD *)(v15 + 4);
      if ((v16 & 8) != 0)
      {
        if (!*(_DWORD *)(v15 + 28))
          goto LABEL_10;
      }
      else if (!(v16 >> 4))
      {
LABEL_10:
        v23[25] = 1;
        WebCore::StyleAttributeMutationScope::~StyleAttributeMutationScope((WebCore::StyleAttributeMutationScope *)v23, v8, v9, v10, v11);
        return;
      }
      v17 = WebCore::StyledElement::ensureMutableInlineStyle(v13, (WTF::StringImpl *)v8);
      WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::MutableStyleProperties *)((char *)v17 + 16), v18);
      v11.n128_f64[0] = WebCore::StyledElement::inlineStyleChanged(v13, v19, v20, v21, v22);
      goto LABEL_10;
    }
  }
}

WTF::StringImpl *WebCore::MainThreadStylePropertyMapReadOnly::get@<X0>(WebCore::MainThreadStylePropertyMapReadOnly *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v9;
  const WebCore::Document *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  WTF::String *v14;
  __n128 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37[2];
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;

  if ((*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 80))(a2)
    && (result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 488))(a2),
        (_DWORD)result))
  {
    v9 = *((_QWORD *)a2 + 54);
    if (!v9)
      goto LABEL_49;
    v10 = *(const WebCore::Document **)(v9 + 8);
    if (!v10)
      goto LABEL_49;
  }
  else
  {
    if (*((_BYTE *)a2 + 274))
    {
      __break(0xC471u);
      goto LABEL_69;
    }
    v10 = (WebCore::ScriptExecutionContext *)((char *)a2 - 192);
  }
  v11 = *a3;
  if (!*a3)
  {
    v20 = 0;
    v21 = 1;
    goto LABEL_19;
  }
  if (*((_DWORD *)v11 + 1) >= 3u)
  {
    v12 = *((_QWORD *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v12 == 45)
      {
        v13 = *(unsigned __int8 *)(v12 + 1);
LABEL_15:
        if (v13 == 45)
        {
          result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::MainThreadStylePropertyMapReadOnly *, WTF::StringImpl **))(*(_QWORD *)this + 72))(&v42, this, a3);
          v16 = v42;
          if (v42)
          {
            v42 = 0;
            v17 = (uint64_t)v16;
            v18 = 0;
            goto LABEL_47;
          }
LABEL_49:
          *(_QWORD *)a4 = 0;
          *(_DWORD *)(a4 + 16) = 0;
          return result;
        }
      }
    }
    else if (*(_WORD *)v12 == 45)
    {
      v13 = *(unsigned __int16 *)(v12 + 2);
      goto LABEL_15;
    }
  }
  v19 = *((unsigned int *)v11 + 4);
  v20 = *((_QWORD *)v11 + 1);
  LODWORD(v11) = *((_DWORD *)v11 + 1);
  v21 = (v19 >> 2) & 1;
LABEL_19:
  v22 = WebCore::cssPropertyID(v20, (const char *)(v11 | (unint64_t)(v21 << 32)));
  if (!(_DWORD)v22
    || ((v23 = v22, (v22 - 304) <= 0x1E) ? (v24 = ((1 << (v22 - 48)) & 0x7C010001) == 0) : (v24 = 1),
        !v24
     || (v25 = *((_QWORD *)v10 + 85)) != 0
     && (WebCore::isExposedNotInvalidAndNotInternal(v22, *(_QWORD *)(v25 + 664), *(_QWORD *)(v25 + 672), *(_QWORD *)(v25 + 680), *(_QWORD *)(v25 + 688), *(_QWORD *)(v25 + 696), *(_QWORD *)(v25 + 704), *(_QWORD *)(v25 + 712)) & 1) == 0))
  {
    v30 = *a3;
    if (*a3)
    {
      v31 = *((_DWORD *)v30 + 1);
      *(_DWORD *)v30 += 2;
      if (v31 < 0 || (v32 = (v31 + 17), __OFADD__(v31, 17)))
      {
        v41 = 0;
LABEL_68:
        __break(0xC471u);
LABEL_69:
        JUMPOUT(0x1959129D8);
      }
      v33 = (*((unsigned __int8 *)v30 + 16) >> 2) & 1;
    }
    else
    {
      v33 = 1;
      v32 = 17;
    }
    result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v32, v33, "Invalid property ", 0x11u, v30, &v41);
    v34 = v41;
    if (v41)
    {
      *(_BYTE *)a4 = 33;
      *(_QWORD *)(a4 + 8) = v34;
      *(_DWORD *)(a4 + 16) = 1;
      v41 = 0;
      if (!v30)
        return result;
      if (*(_DWORD *)v30 != 2)
      {
        *(_DWORD *)v30 -= 2;
        return result;
      }
      result = v30;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    }
    goto LABEL_68;
  }
  if ((v23 - 459) <= 0x5E)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::MainThreadStylePropertyMapReadOnly *, uint64_t))(*(_QWORD *)this + 64))(&v40, this, v23);
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v37, v10);
    WebCore::CSSStyleValueFactory::constructStyleValueForShorthandSerialization((unsigned int **)&v40, (const WTF::String *)v37, (uint64_t *)&v42);
    *(_QWORD *)a4 = v42;
    *(_DWORD *)(a4 + 16) = 0;
    v27 = v39;
    v39 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v37[0];
    v37[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v26);
      else
        *(_DWORD *)v28 -= 2;
    }
    result = v40;
    v40 = 0;
    if (!result)
      return result;
    v29 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
    {
LABEL_58:
      *(_DWORD *)result = v29;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
  }
  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, WebCore::MainThreadStylePropertyMapReadOnly *, uint64_t))(*(_QWORD *)this + 56))(&v42, this, v23);
  v16 = v42;
  if (!v42)
    goto LABEL_49;
  v18 = v23 | 0x10000;
  v42 = 0;
  v17 = (uint64_t)v16;
LABEL_47:
  WebCore::CSSStyleValueFactory::reifyValue(v17, v18, v10, v14, (uint64_t)v37, v15);
  if (*(_DWORD *)v16 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v35);
  else
    *(_DWORD *)v16 -= 2;
  v36 = 0;
  if (v38 != -1)
  {
    if (!v38)
    {
      v36 = v37[0];
      v37[0] = 0;
    }
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13CSSStyleValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v38])(&v40, v37);
  }
  result = v42;
  *(_QWORD *)a4 = v36;
  *(_DWORD *)(a4 + 16) = 0;
  v42 = 0;
  if (result)
  {
    v29 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v35);
    goto LABEL_58;
  }
  return result;
}

WTF::StringImpl *WebCore::MainThreadStylePropertyMapReadOnly::getAll@<X0>(WebCore::MainThreadStylePropertyMapReadOnly *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, const WTF::AtomString *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringBuilder *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WTF::String *v14;
  __n128 v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[5];
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;

  if ((*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 80))(a2)
    && (result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 488))(a2),
        (_DWORD)result))
  {
    v9 = *((_QWORD *)a2 + 54);
    if (!v9 || (v10 = *(WTF::StringBuilder **)(v9 + 8)) == 0)
    {
LABEL_47:
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 274))
    {
      __break(0xC471u);
      goto LABEL_64;
    }
    v10 = (WebCore::ScriptExecutionContext *)((char *)a2 - 192);
  }
  v11 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v18 = 0;
    v19 = 1;
    goto LABEL_18;
  }
  if (*(_DWORD *)(v11 + 4) >= 3u)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v12 == 45)
      {
        v13 = *(unsigned __int8 *)(v12 + 1);
LABEL_15:
        if (v13 == 45)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::MainThreadStylePropertyMapReadOnly *, const WTF::AtomString *))(*(_QWORD *)this + 72))(&v40, this, a3);
          v16 = 0;
          goto LABEL_49;
        }
      }
    }
    else if (*(_WORD *)v12 == 45)
    {
      v13 = *(unsigned __int16 *)(v12 + 2);
      goto LABEL_15;
    }
  }
  v17 = *(unsigned int *)(v11 + 16);
  v18 = *(_QWORD *)(v11 + 8);
  LODWORD(v11) = *(_DWORD *)(v11 + 4);
  v19 = (v17 >> 2) & 1;
LABEL_18:
  v20 = WebCore::cssPropertyID(v18, (const char *)(v11 | (unint64_t)(v19 << 32)));
  if (!(_DWORD)v20
    || ((v21 = v20, (v20 - 304) <= 0x1E) ? (v22 = ((1 << (v20 - 48)) & 0x7C010001) == 0) : (v22 = 1),
        !v22
     || (v23 = *((_QWORD *)v10 + 85)) != 0
     && (WebCore::isExposedNotInvalidAndNotInternal(v20, *(_QWORD *)(v23 + 664), *(_QWORD *)(v23 + 672), *(_QWORD *)(v23 + 680), *(_QWORD *)(v23 + 688), *(_QWORD *)(v23 + 696), *(_QWORD *)(v23 + 704), *(_QWORD *)(v23 + 712)) & 1) == 0))
  {
    v29 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v30 = *(_DWORD *)(v29 + 4);
      *(_DWORD *)v29 += 2;
      if (v30 < 0 || (v31 = (v30 + 17), __OFADD__(v30, 17)))
      {
        v39 = 0;
LABEL_63:
        __break(0xC471u);
LABEL_64:
        JUMPOUT(0x195912D94);
      }
      v32 = (*(unsigned __int8 *)(v29 + 16) >> 2) & 1;
    }
    else
    {
      v32 = 1;
      v31 = 17;
    }
    result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v31, v32, "Invalid property ", 0x11u, (_DWORD *)v29, &v39);
    v34 = v39;
    if (v39)
    {
      *(_BYTE *)a4 = 33;
      *(_QWORD *)(a4 + 8) = v34;
      *(_DWORD *)(a4 + 16) = 1;
      v39 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v29, v33);
        else
          *(_DWORD *)v29 -= 2;
      }
      return result;
    }
    goto LABEL_63;
  }
  if ((v21 - 459) > 0x5E)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::MainThreadStylePropertyMapReadOnly *, uint64_t))(*(_QWORD *)this + 56))(&v40, this, v21);
    v16 = v21 | 0x10000;
LABEL_49:
    WebCore::StylePropertyMapReadOnly::reifyValueToVector(&v40, v16, v10, v14, (uint64_t)v36, v15);
    *(WTF::StringImpl **)a4 = v36[0];
    *(WTF::StringImpl **)(a4 + 8) = v36[1];
    *(_DWORD *)(a4 + 16) = 0;
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v35);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::MainThreadStylePropertyMapReadOnly *, uint64_t))(*(_QWORD *)this + 64))(&v38, this, v21);
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v36, v10);
  WebCore::CSSStyleValueFactory::constructStyleValueForShorthandSerialization((unsigned int **)&v38, (const WTF::String *)v36, (uint64_t *)&v40);
  v25 = v37;
  v37 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v36[0];
  v36[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  v27 = v40;
  if (!v40)
    goto LABEL_47;
  result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
  v28 = *((_DWORD *)v27 + 2);
  *((_DWORD *)v27 + 2) = v28 + 1;
  *(_QWORD *)result = v27;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = 0x100000001;
  *(_DWORD *)(a4 + 16) = 0;
  if (!v28)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 16))(v27);
  *((_DWORD *)v27 + 2) = v28;
  return result;
}

_DWORD *WebCore::StylePropertyMapReadOnly::reifyValueToVector@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::String *v24;
  __n128 v25;
  int v26;
  _DWORD *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD **v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  _DWORD *v41;
  WTF *v42;
  uint64_t v43;
  int v44;
  char v45;
  char *v46;

  v7 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    return result;
  }
  v10 = result;
  v11 = (*(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16)) & 0x3F800;
  if (v11 == 120832)
  {
    if ((a2 & 0xFF0000) == 0
      || (result = (_DWORD *)WebCore::CSSProperty::listValuedPropertySeparator((unsigned __int16)a2), (_DWORD)result))
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      v23 = *(unsigned int *)(v7 + 8);
      if (!(_DWORD)v23)
        return result;
      if (!(v23 >> 29))
      {
        result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v23));
        *(_DWORD *)(a5 + 8) = v23;
        *(_QWORD *)a5 = result;
        v26 = *(_DWORD *)(v7 + 8);
        if (!v26)
          return result;
        v27 = result;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        while (1)
        {
          if (v29 > 3)
          {
            if (*(_DWORD *)(v7 + 8) <= v29)
            {
              __break(0xC471u);
              goto LABEL_70;
            }
            v31 = (_DWORD **)(*(_QWORD *)(v7 + 48) + 8 * (v30 - 4));
          }
          else
          {
            v31 = (_DWORD **)(v7 + 16 + 8 * v30);
          }
          v32 = *v31;
          *v32 = **v31 + 2;
          result = WebCore::CSSStyleValueFactory::reifyValue((uint64_t)v32, a2, a3, v24, (uint64_t)&v42, v25);
          if (*v32 == 2)
            result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v33);
          else
            *v32 -= 2;
          v34 = 0;
          if (v44 != -1)
          {
            if (!v44)
            {
              v34 = v42;
              v42 = 0;
            }
            result = (_DWORD *)((uint64_t (*)(char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13CSSStyleValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v44])(&v46, &v42);
          }
          *(_QWORD *)&v27[2 * v28++] = v34;
          *(_DWORD *)(a5 + 12) = v28;
          v29 = v30 + 1;
          v30 = (v30 + 1);
          if (v26 == v29)
            return result;
        }
      }
LABEL_68:
      __break(0xC471u);
      JUMPOUT(0x1959131C0);
    }
  }
  else if (v11 == 59392 && *(_DWORD *)(v7 + 72) == 4)
  {
    v43 = 0;
    v12 = *(unsigned int *)(v7 + 36);
    if ((_DWORD)v12)
    {
      if (v12 >> 29)
      {
        __break(0xC471u);
LABEL_70:
        JUMPOUT(0x1959131B4);
      }
      result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v12));
      v13 = (WTF *)result;
      LODWORD(v43) = v12;
      v42 = (WTF *)result;
      v14 = *(unsigned int *)(v7 + 36);
      if ((_DWORD)v14)
      {
        LODWORD(v15) = 0;
        v16 = *(_QWORD *)(v7 + 24);
        v17 = 48 * v14;
        while (1)
        {
          v18 = *(unsigned int *)(v16 + 40);
          if ((_DWORD)v18 == -1)
            break;
          v46 = &v45;
          result = ((_DWORD *(*)(_DWORD **__return_ptr, char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSStyleValueFactory47constructStyleValueForCustomPropertySyntaxValueERKNS_7variantIJNS8_6LengthENS8_22CSSCustomPropertyValue18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENS6_3URLENS6_6StringENSC_20TransformSyntaxValueEEEEE3__0JZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__1ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__2ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__3ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__4ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__5ZNS9_47constructStyleValueForCustomPropertySyntaxValueESR_E3__6EEEEEJRKNS0_6__implIJSB_SD_SE_SL_SM_SN_SO_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v41, &v46, v16);
          v20 = v41;
          if (!v41)
          {
            *(_QWORD *)a5 = 0;
            *(_QWORD *)(a5 + 8) = 0;
            v38 = v42;
            if ((_DWORD)v15)
            {
              v39 = 8 * v15;
              v40 = v42;
              do
              {
                result = *(_DWORD **)v40;
                *(_QWORD *)v40 = 0;
                if (result)
                {
                  if (result[2] == 1)
                    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
                  else
                    --result[2];
                }
                v40 = (WTF *)((char *)v40 + 8);
                v39 -= 8;
              }
              while (v39);
            }
            if (v38)
              return (_DWORD *)WTF::fastFree(v38, v19);
            return result;
          }
          if ((_DWORD)v15 == (_DWORD)v43)
          {
            v21 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v42, v15 + 1, (unint64_t)&v41);
            v15 = HIDWORD(v43);
            v13 = v42;
            v22 = *(_QWORD *)v21;
            *(_QWORD *)v21 = 0;
            *((_QWORD *)v13 + v15) = v22;
          }
          else
          {
            v41 = 0;
            *((_QWORD *)v13 + v15) = v20;
          }
          LODWORD(v15) = v15 + 1;
          HIDWORD(v43) = v15;
          result = v41;
          v41 = 0;
          if (result)
          {
            if (result[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
            else
              --result[2];
          }
          v16 += 48;
          v17 -= 48;
          if (!v17)
          {
            v13 = v42;
            LODWORD(v12) = v43;
            goto LABEL_63;
          }
        }
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_68;
      }
      LODWORD(v15) = 0;
    }
    else
    {
      LODWORD(v15) = 0;
      v13 = 0;
    }
LABEL_63:
    *(_QWORD *)a5 = v13;
    *(_DWORD *)(a5 + 8) = v12;
    *(_DWORD *)(a5 + 12) = v15;
    return result;
  }
  *v10 = 0;
  WebCore::CSSStyleValueFactory::reifyValue(v7, a2, a3, a4, (uint64_t)&v42, a6);
  if (*(_DWORD *)v7 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v7, v35);
  else
    *(_DWORD *)v7 -= 2;
  v36 = 0;
  if (v44 != -1)
  {
    if (!v44)
    {
      v36 = v42;
      v42 = 0;
    }
    ((void (*)(char **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13CSSStyleValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v44])(&v46, &v42);
  }
  *(_QWORD *)(a5 + 8) = 1;
  result = (_DWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a5 = result;
  if (v36)
  {
    v37 = *((_DWORD *)v36 + 2);
    *((_DWORD *)v36 + 2) = v37 + 1;
    *(_QWORD *)result = v36;
    *(_DWORD *)(a5 + 12) = 1;
    if (v37)
      *((_DWORD *)v36 + 2) = v37;
    else
      return (_DWORD *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 16))(v36);
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(a5 + 12) = 1;
  }
  return result;
}

WTF::StringImpl *WebCore::MainThreadStylePropertyMapReadOnly::has@<X0>(WebCore::MainThreadStylePropertyMapReadOnly *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::Document *v9;
  _DWORD *v10;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;

  WebCore::MainThreadStylePropertyMapReadOnly::get(this, a2, a3, (uint64_t)&v13);
  v5 = v15;
  if (!v15)
  {
    *(_BYTE *)a4 = v13 != 0;
    goto LABEL_5;
  }
  if (v15 == 1)
  {
    v6 = v14;
    v14 = 0;
    *(_BYTE *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v6;
LABEL_5:
    *(_DWORD *)(a4 + 16) = v5;
    return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E339F5A0[v5])(&v16, &v13);
  }
  v8 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::StylePropertyMap::set(v9, v8, v10, v11, v12);
}

WTF::StringImpl *WebCore::StylePropertyMap::set@<X0>(WebCore::Document *a1@<X1>, uint64_t a2@<X0>, _DWORD *a3@<X2>, unsigned int **a4@<X3>, uint64_t a5@<X8>)
{
  WTF *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  void *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  const WTF::StringImpl *v51;
  uint64_t v52;
  WTF *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  WTF *v64;
  uint64_t v65;
  _DWORD *v66;
  WTF *v67;
  WTF::StringImpl *v69;
  uint64_t v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  _DWORD *v74;
  int v75;
  int v76;
  uint64_t v79;
  int v80;
  char v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF *v84;
  unsigned __int8 *v85;
  int v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  _BYTE v98[24];
  WTF::StringImpl *v99;
  WTF *v100;
  uint64_t v101;
  _DWORD v102[8];
  _DWORD *v103;
  _DWORD *v104;

  v12 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v20 = 0;
    v21 = 1;
    goto LABEL_19;
  }
  if (*(_DWORD *)(v12 + 4) >= 3u)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v13 == 45)
      {
        v14 = *(unsigned __int8 *)(v13 + 1);
LABEL_8:
        if (v14 == 45)
        {
          WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v96, a1);
          WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(a3, a4, (uint64_t)&v96, (uint64_t)&v100);
          v16 = v99;
          v99 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
          result = v96;
          v96 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
            else
              *(_DWORD *)result -= 2;
          }
          if (v102[0])
          {
            if (v102[0] == 1)
            {
              v18 = v101;
              v101 = 0;
              *(_BYTE *)a5 = (_BYTE)v100;
              *(_QWORD *)(a5 + 8) = v18;
              *(_BYTE *)(a5 + 16) = 1;
LABEL_53:
              if (v102[0] != -1)
                return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E339F5B0[v102[0]])(&v96, &v100);
              return result;
            }
            goto LABEL_216;
          }
          v5 = v100;
          v6 = HIDWORD(v101);
          v100 = 0;
          v101 = 0;
          if ((_DWORD)v6 != 1 || (*(unsigned int (**)(_QWORD))(**(_QWORD **)v5 + 24))(*(_QWORD *)v5) != 11)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_BYTE *)a5 = 33;
            *(_BYTE *)(a5 + 16) = 1;
            if (!(_DWORD)v6)
            {
LABEL_51:
              if (v5)
                result = (WTF::StringImpl *)WTF::fastFree(v5, v34);
              goto LABEL_53;
            }
LABEL_90:
            v47 = 8 * v6;
            v48 = v5;
            do
            {
              result = *(WTF::StringImpl **)v48;
              *(_QWORD *)v48 = 0;
              if (result)
              {
                if (*((_DWORD *)result + 2) == 1)
                  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
                else
                  --*((_DWORD *)result + 2);
              }
              v48 = (WTF *)((char *)v48 + 8);
              v47 -= 8;
            }
            while (v47);
            goto LABEL_51;
          }
          (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)v5 + 32))(&v96);
          v33 = v96;
          if (!v96)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_BYTE *)a5 = 33;
            *(_BYTE *)(a5 + 16) = 1;
LABEL_86:
            v46 = v96;
            v96 = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, (WTF::StringImpl *)v34);
              else
                *(_DWORD *)v46 -= 2;
            }
            goto LABEL_90;
          }
          v96 = 0;
          if (((*((unsigned __int16 *)v33 + 2) | (*((unsigned __int8 *)v33 + 6) << 16)) & 0x3F800) == 0x1C000)
          {
            v91 = v33;
            (*(void (**)(uint64_t, WebCore::Document *, _DWORD *, WTF::StringImpl **))(*(_QWORD *)a2 + 120))(a2, a1, a3, &v91);
            v35 = v91;
            v91 = 0;
            if (v35)
            {
              if (*v35 == 2)
              {
LABEL_217:
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, (WTF::StringImpl *)v34);
                goto LABEL_49;
              }
              *v35 -= 2;
            }
LABEL_49:
            *(_QWORD *)a5 = 0;
            *(_QWORD *)(a5 + 8) = 0;
            *(_QWORD *)(a5 + 16) = 0;
            goto LABEL_86;
          }
          __break(0xC471u);
LABEL_222:
          JUMPOUT(0x195913D0CLL);
        }
      }
    }
    else if (*(_WORD *)v13 == 45)
    {
      v14 = *(unsigned __int16 *)(v13 + 2);
      goto LABEL_8;
    }
  }
  v19 = *(unsigned int *)(v12 + 16);
  v20 = *(_QWORD *)(v12 + 8);
  LODWORD(v12) = *(_DWORD *)(v12 + 4);
  v21 = (v19 >> 2) & 1;
LABEL_19:
  v22 = WebCore::cssPropertyID(v20, (const char *)(v12 | (unint64_t)(v21 << 32)));
  if (!(_DWORD)v22
    || ((v5 = (WTF *)v22, (v22 - 304) <= 0x1E) ? (v23 = ((1 << (v22 - 48)) & 0x7C010001) == 0) : (v23 = 1),
        !v23
     || (v24 = *((_QWORD *)a1 + 85),
         (WebCore::isExposedNotInvalidAndNotInternal(v22, *(_QWORD *)(v24 + 664), *(_QWORD *)(v24 + 672), *(_QWORD *)(v24 + 680), *(_QWORD *)(v24 + 688), *(_QWORD *)(v24 + 696), *(_QWORD *)(v24 + 704), *(_QWORD *)(v24 + 712)) & 1) == 0)))
  {
    v28 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
    {
      v29 = *((_DWORD *)v28 + 1);
      *(_DWORD *)v28 += 2;
      if (v29 < 0 || (v30 = (v29 + 17), __OFADD__(v29, 17)))
      {
        v95 = 0;
        goto LABEL_219;
      }
      v31 = (*((unsigned __int8 *)v28 + 16) >> 2) & 1;
    }
    else
    {
      v31 = 1;
      v30 = 17;
    }
    result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v30, v31, "Invalid property ", 0x11u, v28, &v95);
    v32 = v95;
    if (v95)
    {
      *(_BYTE *)a5 = 33;
      *(_QWORD *)(a5 + 8) = v32;
      *(_BYTE *)(a5 + 16) = 1;
      v95 = 0;
      if (!v28)
        return result;
LABEL_42:
      if (*(_DWORD *)v28 != 2)
      {
        *(_DWORD *)v28 -= 2;
        return result;
      }
      result = v28;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    }
LABEL_219:
    __break(0xC471u);
    JUMPOUT(0x195913E28);
  }
  v6 = WebCore::CSSProperty::listValuedPropertySeparator((int)v5);
  if (!(_DWORD)v6 && *a4 && **a4 >= 2)
  {
    v28 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
    {
      v39 = *((_DWORD *)v28 + 1);
      *(_DWORD *)v28 += 2;
      if (v39 < 0 || (v40 = (v39 + 67), __OFADD__(v39, 67)))
      {
        v94 = 0;
        goto LABEL_221;
      }
      if ((*((_BYTE *)v28 + 16) & 4) == 0)
      {
        v41 = 0;
        goto LABEL_205;
      }
    }
    else
    {
      v40 = 67;
    }
    v41 = 1;
LABEL_205:
    result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v40, v41, (uint64_t)v28, (int8x16_t *)" is not a list-valued property but more than one value was provided", 0x43u, &v94);
    v89 = v94;
    if (v94)
    {
      *(_BYTE *)a5 = 33;
      *(_QWORD *)(a5 + 8) = v89;
      *(_BYTE *)(a5 + 16) = 1;
      v94 = 0;
      if (!v28)
        return result;
      goto LABEL_42;
    }
LABEL_221:
    __break(0xC471u);
    goto LABEL_222;
  }
  if (((_DWORD)v5 - 459) > 0x5E)
  {
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v96, a1);
    WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(a3, a4, (uint64_t)&v96, (uint64_t)&v91);
    v37 = v99;
    v99 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    result = v96;
    v96 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
      else
        *(_DWORD *)result -= 2;
    }
    if (v93)
    {
      if (v93 != 1)
      {
LABEL_216:
        v35 = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_217;
      }
      v38 = v92;
      v92 = 0;
      *(_BYTE *)a5 = (_BYTE)v91;
      *(_QWORD *)(a5 + 8) = v38;
      *(_BYTE *)(a5 + 16) = 1;
LABEL_193:
      if (v93 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E339F5B0[v93])(&v96, &v91);
      return result;
    }
    v42 = v91;
    v43 = HIDWORD(v92);
    v91 = 0;
    v92 = 0;
    if (v43 >= 2)
    {
      v44 = 8 * v43;
      v45 = v42;
      while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v45 + 24))(*(_QWORD *)v45) != 11)
      {
        v45 = (WTF *)((char *)v45 + 8);
        v44 -= 8;
        if (!v44)
          goto LABEL_82;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 33;
      *(_BYTE *)(a5 + 16) = 1;
      goto LABEL_183;
    }
LABEL_82:
    if ((_DWORD)v43 == 1)
    {
      (*(void (**)(_DWORD **__return_ptr, _QWORD, WTF *))(**(_QWORD **)v42 + 40))(&v103, *(_QWORD *)v42, v5);
    }
    else
    {
      if (!(_DWORD)v43)
      {
        v103 = 0;
LABEL_178:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_BYTE *)a5 = 33;
        *(_BYTE *)(a5 + 16) = 1;
        goto LABEL_179;
      }
      v96 = (WTF::StringImpl *)v98;
      v97 = 4;
      v52 = 8 * v43;
      v53 = v42;
      do
      {
        (*(void (**)(_DWORD **__return_ptr, _QWORD, WTF *))(**(_QWORD **)v53 + 40))(&v104, *(_QWORD *)v53, v5);
        v55 = (uint64_t)v104;
        if (v104)
        {
          v103 = v104;
          v104 = 0;
          LODWORD(v56) = HIDWORD(v97);
          if (HIDWORD(v97) == (_DWORD)v97)
          {
            v59 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, HIDWORD(v97) + 1, (unint64_t)&v103);
            v56 = HIDWORD(v97);
            v60 = v96;
            v61 = *v59;
            *v59 = 0;
            *((_QWORD *)v60 + v56) = v61;
          }
          else
          {
            v103 = 0;
            *((_QWORD *)v96 + HIDWORD(v97)) = v55;
          }
          HIDWORD(v97) = v56 + 1;
          v57 = v103;
          v103 = 0;
          if (v57)
          {
            if (*v57 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v54);
            else
              *v57 -= 2;
          }
          v58 = v104;
          v104 = 0;
          if (v58)
          {
            if (*v58 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v58, v54);
            else
              *v58 -= 2;
          }
        }
        v53 = (WTF *)((char *)v53 + 8);
        v52 -= 8;
      }
      while (v52);
      v100 = (WTF *)v102;
      LODWORD(v101) = 4;
      v62 = v96;
      if (v96 == (WTF::StringImpl *)v98)
      {
        v63 = HIDWORD(v97);
        memcpy(v102, v98, 8 * HIDWORD(v97));
      }
      else
      {
        v96 = (WTF::StringImpl *)v98;
        v100 = v62;
        v90 = v97;
        v63 = HIDWORD(v97);
        LODWORD(v97) = 4;
        LODWORD(v101) = v90;
      }
      HIDWORD(v97) = 0;
      HIDWORD(v101) = v63;
      WebCore::CSSValueList::create((unsigned __int16)(char)v6, (uint64_t)&v100, (uint64_t *)&v104);
      v103 = v104;
      v104 = 0;
      if (HIDWORD(v101))
      {
        v64 = v100;
        v65 = 8 * HIDWORD(v101);
        do
        {
          v66 = *(_DWORD **)v64;
          *(_QWORD *)v64 = 0;
          if (v66)
          {
            if (*v66 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, v50);
            else
              *v66 -= 2;
          }
          v64 = (WTF *)((char *)v64 + 8);
          v65 -= 8;
        }
        while (v65);
      }
      v67 = v100;
      if (v102 != (_DWORD *)v100 && v100 != 0)
      {
        v100 = 0;
        LODWORD(v101) = 0;
        WTF::fastFree(v67, v50);
      }
      if (HIDWORD(v97))
      {
        v69 = v96;
        v70 = 8 * HIDWORD(v97);
        do
        {
          v71 = *(_DWORD **)v69;
          *(_QWORD *)v69 = 0;
          if (v71)
          {
            if (*v71 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, v50);
            else
              *v71 -= 2;
          }
          v69 = (WTF::StringImpl *)((char *)v69 + 8);
          v70 -= 8;
        }
        while (v70);
      }
      v72 = v96;
      if (v98 != (_BYTE *)v96 && v96 != 0)
      {
        v96 = 0;
        LODWORD(v97) = 0;
        WTF::fastFree(v72, v50);
      }
    }
    v74 = v103;
    if (!v103)
      goto LABEL_178;
    v75 = *((unsigned __int16 *)v103 + 2) | (*((unsigned __int8 *)v103 + 6) << 16);
    if ((v75 & 0x3F800) != 0)
    {
LABEL_158:
      v79 = (uint64_t)v103;
      if (!v103)
        goto LABEL_172;
      v80 = *v103;
      *v103 += 2;
      if (((*(unsigned __int16 *)(v79 + 4) | (*(unsigned __int8 *)(v79 + 6) << 16)) & 0x3F800) == 0x1B800)
      {
        if (WebCore::CSSValuePair::canBeCoalesced((WebCore::CSSValuePair *)v79, (uint64_t)v50, v51))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_BYTE *)a5 = 6;
          *(_BYTE *)(a5 + 16) = 1;
          if (*(_DWORD *)v79 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v79, v49);
          else
            *(_DWORD *)v79 -= 2;
LABEL_179:
          result = (WTF::StringImpl *)v103;
          v103 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v49);
            else
              *(_DWORD *)result -= 2;
          }
LABEL_183:
          if ((_DWORD)v43)
          {
            v83 = 8 * v43;
            v84 = v42;
            do
            {
              result = *(WTF::StringImpl **)v84;
              *(_QWORD *)v84 = 0;
              if (result)
              {
                if (*((_DWORD *)result + 2) == 1)
                  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
                else
                  --*((_DWORD *)result + 2);
              }
              v84 = (WTF *)((char *)v84 + 8);
              v83 -= 8;
            }
            while (v83);
          }
          if (v42)
            result = (WTF::StringImpl *)WTF::fastFree(v42, v49);
          goto LABEL_193;
        }
        v80 = *(_DWORD *)v79 - 2;
        if (*(_DWORD *)v79 == 2)
          goto LABEL_171;
      }
      else if (!v80)
      {
LABEL_171:
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v79, v50);
LABEL_172:
        v96 = (WTF::StringImpl *)v103;
        v103 = 0;
        v81 = (*(uint64_t (**)(uint64_t, WTF *, WTF::StringImpl **))(*(_QWORD *)a2 + 112))(a2, v5, &v96);
        v82 = v96;
        v96 = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, v49);
          else
            *(_DWORD *)v82 -= 2;
        }
        if ((v81 & 1) != 0)
        {
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          goto LABEL_179;
        }
        goto LABEL_178;
      }
      *(_DWORD *)v79 = v80;
      goto LABEL_172;
    }
    v76 = v103[1] & 0x7F;
    if ((v76 - 63) <= 0x11 && ((1 << ((v103[1] & 0x7F) - 63)) & 0x34001) != 0)
      goto LABEL_150;
    if (v76 == 73)
    {
      v85 = *(unsigned __int8 **)(*((_QWORD *)v103 + 1) + 8);
      v86 = v85[12];
      if (v86 != 1 && (v86 - 5) >= 4)
      {
        if (v85[12])
          goto LABEL_150;
        goto LABEL_157;
      }
      v76 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v85 + 72))(*(_QWORD *)(*((_QWORD *)v103 + 1) + 8));
    }
    if (v76 != 1)
    {
      LOWORD(v75) = *((_WORD *)v74 + 2);
      v76 = v75 & 0x7F;
LABEL_150:
      if ((v76 - 63) <= 0x11 && ((1 << (v76 - 63)) & 0x34001) != 0)
        goto LABEL_158;
      if ((v75 & 0x7F) == 0x49)
      {
        v87 = *(unsigned __int8 **)(*((_QWORD *)v74 + 1) + 8);
        v88 = v87[12];
        if (v88 != 1 && (v88 - 5) > 3)
          goto LABEL_158;
        v76 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v87 + 72))(v87);
      }
      if (v76 != 2)
        goto LABEL_158;
    }
LABEL_157:
    if ((WebCore::CSSProperty::allowsNumberOrIntegerInput((int)v5) & 1) == 0)
      goto LABEL_178;
    goto LABEL_158;
  }
  v25 = *a4;
  if (!*a4 || *v25 != 1)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  v91 = 0;
  v96 = (WTF::StringImpl *)&v91;
  v97 = (uint64_t)&v91;
  v26 = v25[4];
  if ((_DWORD)v26 == -1)
    goto LABEL_216;
  v100 = (WTF *)&v96;
  ((void (*)(WTF **, unsigned int *))off_1E339F650[v26])(&v100, v25 + 2);
  if (v91
    && *((_DWORD *)v91 + 1)
    && ((*(uint64_t (**)(uint64_t, WTF *, WTF::StringImpl **))(*(_QWORD *)a2 + 104))(a2, v5, &v91) & 1) != 0)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    *(_BYTE *)(a5 + 16) = 1;
  }
  result = v91;
  v91 = 0;
  if (result)
  {
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
  }
  return result;
}

_DWORD *WebCore::StylePropertyMap::append@<X0>(_DWORD *result@<X0>, const WebCore::Document *a2@<X1>, _DWORD *a3@<X2>, unsigned int **a4@<X3>, _QWORD *a5@<X8>)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _DWORD **v39;
  _DWORD *v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t *v58;
  WTF *v59;
  uint64_t v60;
  WTF *v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  char v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF *v67;
  uint64_t v68;
  _DWORD *v69;
  WTF *v70;
  WTF *v72;
  _DWORD *v73;
  WTF *v74;
  uint64_t v75;
  _DWORD *v76;
  WTF *v77;
  uint64_t v79;
  int v80;
  WTF *__dst;
  WTF *v82;
  int v83;
  unsigned int v84;
  _BYTE v85[32];
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  _BYTE v89[24];
  WTF::StringImpl *v90;
  WTF *v91;
  uint64_t v92;
  int v93;
  WTF *v94;
  unint64_t v95;
  _QWORD v96[4];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  if (!*a4 || !**a4)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return result;
  }
  v9 = result;
  v10 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v14 = 0;
    v15 = 1;
    goto LABEL_14;
  }
  if (*(_DWORD *)(v10 + 4) >= 3u)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v11 == 45)
      {
        v12 = *(unsigned __int8 *)(v11 + 1);
LABEL_11:
        if (v12 == 45)
        {
          result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_BYTE *)a5 = 33;
          *((_BYTE *)a5 + 16) = 1;
          return result;
        }
      }
    }
    else if (*(_WORD *)v11 == 45)
    {
      v12 = *(unsigned __int16 *)(v11 + 2);
      goto LABEL_11;
    }
  }
  v13 = *(unsigned int *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 8);
  LODWORD(v10) = *(_DWORD *)(v10 + 4);
  v15 = (v13 >> 2) & 1;
LABEL_14:
  v16 = WebCore::cssPropertyID(v14, (const char *)(v10 | (unint64_t)(v15 << 32)));
  if (!(_DWORD)v16
    || ((v17 = v16, (v16 - 304) <= 0x1E) ? (v18 = ((1 << (v16 - 48)) & 0x7C010001) == 0) : (v18 = 1),
        !v18
     || (v19 = *((_QWORD *)a2 + 85),
         (WebCore::isExposedNotInvalidAndNotInternal(v16, *(_QWORD *)(v19 + 664), *(_QWORD *)(v19 + 672), *(_QWORD *)(v19 + 680), *(_QWORD *)(v19 + 688), *(_QWORD *)(v19 + 696), *(_QWORD *)(v19 + 704), *(_QWORD *)(v19 + 712)) & 1) == 0)))
  {
    v26 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v27 = *(_DWORD *)(v26 + 4);
      *(_DWORD *)v26 += 2;
      if (v27 < 0)
        goto LABEL_154;
      v28 = (v27 + 17);
      if (__OFADD__(v27, 17))
        goto LABEL_154;
      v29 = (*(unsigned __int8 *)(v26 + 16) >> 2) & 1;
    }
    else
    {
      v29 = 1;
      v28 = 17;
    }
    result = (_DWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(v28, v29, "Invalid property ", 0x11u, (_DWORD *)v26, &v99);
    v31 = v99;
    if (!v99)
    {
LABEL_155:
      __break(0xC471u);
      JUMPOUT(0x19591469CLL);
    }
    *(_BYTE *)a5 = 33;
    a5[1] = v31;
    *((_BYTE *)a5 + 16) = 1;
    v99 = 0;
    if (!v26)
      return result;
LABEL_32:
    if (*(_DWORD *)v26 == 2)
      return (_DWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)v26, v30);
    *(_DWORD *)v26 -= 2;
    return result;
  }
  v20 = WebCore::CSSProperty::listValuedPropertySeparator(v17);
  if (!v20)
  {
    v26 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v32 = *(_DWORD *)(v26 + 4);
      *(_DWORD *)v26 += 2;
      if (v32 < 0 || (v33 = (v32 + 33), __OFADD__(v32, 33)))
      {
        v98 = 0;
        goto LABEL_157;
      }
      if ((*(_BYTE *)(v26 + 16) & 4) == 0)
      {
        v34 = 0;
        goto LABEL_145;
      }
    }
    else
    {
      v33 = 33;
    }
    v34 = 1;
LABEL_145:
    result = (_DWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v33, v34, v26, (int8x16_t *)" does not support multiple values", 0x21u, &v98);
    v79 = v98;
    if (v98)
    {
      *(_BYTE *)a5 = 33;
      a5[1] = v79;
      *((_BYTE *)a5 + 16) = 1;
      v98 = 0;
      if (!v26)
        return result;
      goto LABEL_32;
    }
LABEL_157:
    __break(0xC471u);
    JUMPOUT(0x1959146A8);
  }
  v21 = v20;
  (*(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v9 + 56))(&v97, v9, v17);
  v94 = (WTF *)v96;
  v95 = 4;
  v23 = v97;
  if (v97)
  {
    if (((*(unsigned __int16 *)(v97 + 4) | (*(unsigned __int8 *)(v97 + 6) << 16)) & 0x3F800) == 0x1D800)
    {
      v87 = (WTF::StringImpl *)v89;
      v88 = 4;
      v24 = *(unsigned int *)(v97 + 8);
      if (v24 >= 5)
      {
        if (v24 >> 29)
        {
LABEL_158:
          __break(0xC471u);
          JUMPOUT(0x195914680);
        }
        v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v24));
        LODWORD(v88) = v24;
        v87 = v25;
        LODWORD(v24) = *(_DWORD *)(v23 + 8);
      }
      else
      {
        v25 = (WTF::StringImpl *)v89;
      }
      if ((_DWORD)v24)
      {
        v35 = 0;
        v36 = 0;
        v37 = *(_QWORD *)(v23 + 48);
        v38 = HIDWORD(v88);
        do
        {
          if (v35 > 3)
          {
            if (v24 <= v35)
              goto LABEL_158;
            v39 = (_DWORD **)(v37 + 8 * (v36 - 4));
          }
          else
          {
            v39 = (_DWORD **)(v23 + 16 + 8 * v36);
          }
          v40 = *v39;
          *v40 += 2;
          *((_QWORD *)v25 + v38++) = v40;
          HIDWORD(v88) = v38;
          v35 = v36 + 1;
          v36 = (v36 + 1);
        }
        while ((_DWORD)v24 != v35);
      }
      v41 = v94;
      if (HIDWORD(v95))
      {
        WTF::VectorTypeOperations<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>::destruct(v94, (WTF *)((char *)v94 + 8 * HIDWORD(v95)));
        v41 = v94;
      }
      if (v41 != (WTF *)v96)
      {
        if (v41)
        {
          v94 = 0;
          LODWORD(v95) = 0;
          WTF::fastFree(v41, v22);
        }
        v94 = (WTF *)v96;
      }
      if (v87 == (WTF::StringImpl *)v89)
      {
        v43 = HIDWORD(v88);
        memcpy(v96, v89, 8 * HIDWORD(v88));
        v42 = v88;
      }
      else
      {
        v94 = v87;
        v42 = v88;
        v43 = HIDWORD(v88);
      }
      v95 = __PAIR64__(v43, v42);
    }
    else
    {
      v97 = 0;
      v96[0] = v23;
      HIDWORD(v95) = 1;
    }
  }
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v87, a2);
  WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(a3, a4, (uint64_t)&v87, (uint64_t)&v91);
  v45 = v90;
  v90 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v44);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = v87;
  v87 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v44);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (!v93)
  {
    v48 = v91;
    v49 = HIDWORD(v92);
    v91 = 0;
    v92 = 0;
    v50 = 8 * v49;
    if ((_DWORD)v49)
    {
      v51 = 8 * v49;
      v52 = v48;
      while ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v52 + 24))(*(_QWORD *)v52) != 11)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)v52 + 32))(&v87);
        v54 = v87;
        if (v87)
        {
          v86 = v87;
          v87 = 0;
          LODWORD(v55) = HIDWORD(v95);
          if (HIDWORD(v95) == (_DWORD)v95)
          {
            v58 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v94, HIDWORD(v95) + 1, (unint64_t)&v86);
            v55 = HIDWORD(v95);
            v59 = v94;
            v60 = *v58;
            *v58 = 0;
            *((_QWORD *)v59 + v55) = v60;
          }
          else
          {
            v86 = 0;
            *((_QWORD *)v94 + HIDWORD(v95)) = v54;
          }
          HIDWORD(v95) = v55 + 1;
          v56 = v86;
          v86 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v53);
            else
              *(_DWORD *)v56 -= 2;
          }
          v57 = v87;
          v87 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v53);
            else
              *(_DWORD *)v57 -= 2;
          }
        }
        v52 = (WTF *)((char *)v52 + 8);
        v51 -= 8;
        if (!v51)
          goto LABEL_89;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a5 = 33;
      *((_BYTE *)a5 + 16) = 1;
    }
    else
    {
LABEL_89:
      __dst = v48;
      v82 = (WTF *)v85;
      v83 = 4;
      v61 = v94;
      if (v94 == (WTF *)v96)
      {
        v62 = HIDWORD(v95);
        memcpy(v85, v96, 8 * HIDWORD(v95));
      }
      else
      {
        v94 = (WTF *)v96;
        v82 = v61;
        v80 = v95;
        v62 = HIDWORD(v95);
        LODWORD(v95) = 4;
        v83 = v80;
      }
      HIDWORD(v95) = 0;
      v84 = v62;
      WebCore::CSSValueList::create(v21, (uint64_t)&v82, (uint64_t *)&v86);
      v63 = v86;
      v86 = 0;
      v87 = v63;
      v64 = (*(uint64_t (**)(_DWORD *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 112))(v9, v17, &v87);
      v65 = v87;
      v87 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, v44);
        else
          *(_DWORD *)v65 -= 2;
      }
      v66 = v86;
      v86 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, v44);
        else
          *(_DWORD *)v66 -= 2;
      }
      if (v84)
      {
        v67 = v82;
        v68 = 8 * v84;
        do
        {
          v69 = *(_DWORD **)v67;
          *(_QWORD *)v67 = 0;
          if (v69)
          {
            if (*v69 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v69, v44);
            else
              *v69 -= 2;
          }
          v67 = (WTF *)((char *)v67 + 8);
          v68 -= 8;
        }
        while (v68);
      }
      v70 = v82;
      if (v85 != (_BYTE *)v82 && v82 != 0)
      {
        v82 = 0;
        v83 = 0;
        WTF::fastFree(v70, v44);
      }
      v48 = __dst;
      if ((v64 & 1) != 0)
      {
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_BYTE *)a5 = 33;
        *((_BYTE *)a5 + 16) = 1;
      }
    }
    if ((_DWORD)v49)
    {
      v72 = v48;
      do
      {
        v73 = *(_DWORD **)v72;
        *(_QWORD *)v72 = 0;
        if (v73)
        {
          if (v73[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 16))(v73);
          else
            --v73[2];
        }
        v72 = (WTF *)((char *)v72 + 8);
        v50 -= 8;
      }
      while (v50);
    }
    if (v48)
      WTF::fastFree(v48, v44);
    goto LABEL_124;
  }
  if (v93 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_154:
    v99 = 0;
    goto LABEL_155;
  }
  v47 = v92;
  v92 = 0;
  *(_BYTE *)a5 = (_BYTE)v91;
  a5[1] = v47;
  *((_BYTE *)a5 + 16) = 1;
LABEL_124:
  if (v93 != -1)
    ((void (*)(WTF::StringImpl **, WTF **))off_1E339F5B0[v93])(&v87, &v91);
  if (HIDWORD(v95))
  {
    v74 = v94;
    v75 = 8 * HIDWORD(v95);
    do
    {
      v76 = *(_DWORD **)v74;
      *(_QWORD *)v74 = 0;
      if (v76)
      {
        if (*v76 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v76, v44);
        else
          *v76 -= 2;
      }
      v74 = (WTF *)((char *)v74 + 8);
      v75 -= 8;
    }
    while (v75);
  }
  v77 = v94;
  if (v96 != (_QWORD *)v94 && v94 != 0)
  {
    v94 = 0;
    LODWORD(v95) = 0;
    WTF::fastFree(v77, v44);
  }
  result = (_DWORD *)v97;
  v97 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v44);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::StylePropertyMap::remove@<X0>(WebCore::StylePropertyMap *this@<X0>, WebCore::Document *a2@<X1>, const WTF::AtomString *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;

  v8 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v9 = 0;
    v14 = 0x100000000;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(unsigned int *)(v8 + 4);
  v11 = *(_DWORD *)(v8 + 16);
  if (v10 >= 3)
  {
    if ((v11 & 4) != 0)
    {
      if (*(_BYTE *)v9 == 45)
      {
        v12 = *(unsigned __int8 *)(v9 + 1);
LABEL_8:
        if (v12 == 45)
        {
          result = (*(uint64_t (**)(WebCore::StylePropertyMap *, const WTF::AtomString *))(*(_QWORD *)this + 96))(this, a3);
LABEL_19:
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          return result;
        }
      }
    }
    else if (*(_WORD *)v9 == 45)
    {
      v12 = *(unsigned __int16 *)(v9 + 2);
      goto LABEL_8;
    }
  }
  v14 = v10 | ((unint64_t)((v11 >> 2) & 1) << 32);
LABEL_11:
  result = WebCore::cssPropertyID(v9, (const char *)v14);
  if ((_DWORD)result)
  {
    v15 = result;
    if ((result - 304) > 0x1E || ((1 << (result - 48)) & 0x7C010001) == 0)
    {
      v17 = *((_QWORD *)a2 + 85);
      result = WebCore::isExposedNotInvalidAndNotInternal(result, *(_QWORD *)(v17 + 664), *(_QWORD *)(v17 + 672), *(_QWORD *)(v17 + 680), *(_QWORD *)(v17 + 688), *(_QWORD *)(v17 + 696), *(_QWORD *)(v17 + 704), *(_QWORD *)(v17 + 712));
      if ((result & 1) != 0)
      {
        result = (*(uint64_t (**)(WebCore::StylePropertyMap *, uint64_t))(*(_QWORD *)this + 88))(this, v15);
        goto LABEL_19;
      }
    }
  }
  v18 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v19 = *(_DWORD *)(v18 + 4);
    *(_DWORD *)v18 += 2;
    if (v19 < 0 || (result = (v19 + 17), __OFADD__(v19, 17)))
    {
      v23 = 0;
      goto LABEL_33;
    }
    v20 = (*(unsigned __int8 *)(v18 + 16) >> 2) & 1;
  }
  else
  {
    v20 = 1;
    result = 17;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>(result, v20, "Invalid property ", 0x11u, (_DWORD *)v18, &v23);
  v22 = v23;
  if (!v23)
  {
LABEL_33:
    __break(0xC471u);
    return result;
  }
  *(_BYTE *)a4 = 33;
  a4[1] = v22;
  *((_BYTE *)a4 + 16) = 1;
  v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)v18, v21);
    else
      *(_DWORD *)v18 -= 2;
  }
  return result;
}

void WebCore::CSSColorValue::toCSSValue(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CSSHSL::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[8];
  unsigned int v33;
  _BYTE v34[8];
  int v35;
  _BYTE v36[8];
  int v37;
  _BYTE *v38;
  int v39;
  char v40;
  _QWORD *v41;
  _BYTE v42[8];
  uint64_t v43;
  int v44;
  _QWORD *v45;
  _BYTE v46[8];
  uint64_t v47;
  int v48;
  _QWORD *v49;
  _BYTE v50[8];
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_54;
  v49 = &v45;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue20rectifyCSSColorAngleEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_20rectifyCSSColorAngleESO_E3__1ZNS9_20rectifyCSSColorAngleESO_E3__2ZNS9_20rectifyCSSColorAngleESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v53, &v49, a1);
  if (!v56)
  {
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v45 = &v41;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v49, &v45, a2);
    if (v52)
    {
      if (v52 == 1)
      {
        v13 = v51;
        v51 = 0;
        *(_BYTE *)a5 = v50[0];
        *(_QWORD *)(a5 + 8) = v13;
        v14 = 1;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_50:
        result = ((uint64_t (*)(_QWORD **, _BYTE *))off_1E339F600[v14])(&v45, v50);
LABEL_51:
        v11 = v56;
        if (v56 == -1)
          return result;
        return ((uint64_t (*)(_QWORD **, _BYTE *))off_1E339F600[v11])(&v49, v54);
      }
LABEL_54:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15 == -1)
      goto LABEL_54;
    v41 = &v38;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v45, &v41, a3);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_54;
      v16 = v47;
      v47 = 0;
      *(_BYTE *)a5 = v46[0];
      *(_QWORD *)(a5 + 8) = v16;
      v17 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_48:
      result = ((uint64_t (*)(_QWORD **, _BYTE *))off_1E339F600[v17])(&v41, v46);
LABEL_49:
      v14 = v52;
      if (v52 == -1)
        goto LABEL_51;
      goto LABEL_50;
    }
    v18 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v18 == -1)
      goto LABEL_54;
    v38 = v36;
    ((void (*)(_QWORD **__return_ptr, _BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v41, &v38, a4);
    if (v44)
    {
      if (v44 != 1)
        goto LABEL_54;
      v19 = v43;
      v43 = 0;
      *(_BYTE *)a5 = v42[0];
      *(_QWORD *)(a5 + 8) = v19;
      v20 = 1;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      if (v56)
        goto LABEL_54;
      v22 = result;
      LOBYTE(v38) = 0;
      v39 = -1;
      v23 = v55;
      if ((_DWORD)v55 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE **, _BYTE *))off_1E339F610[v55])(v36, &v38, v54);
        v39 = v23;
      }
      if (v52)
        goto LABEL_54;
      v36[0] = 0;
      v37 = -1;
      v24 = v51;
      if ((_DWORD)v51 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E339F610[v51])(v34, v36, v50);
        v37 = v24;
      }
      if (v48)
        goto LABEL_54;
      v34[0] = 0;
      v35 = -1;
      v25 = v47;
      if ((_DWORD)v47 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E339F610[v47])(v32, v34, v46);
        v35 = v25;
      }
      if (v44)
        goto LABEL_54;
      v32[0] = 0;
      v33 = -1;
      v26 = v43;
      if ((_DWORD)v43 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E339F610[v43])(&v40, v32, v42);
        v33 = v26;
      }
      *(_DWORD *)(v22 + 8) = 1;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)v22 = &off_1E339F530;
      *(_BYTE *)(v22 + 40) = 0;
      *(_DWORD *)(v22 + 48) = -1;
      v27 = v39;
      if (v39 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE **))off_1E339F610[v39])(&v40, v22 + 40, &v38);
        *(_DWORD *)(v22 + 48) = v27;
      }
      *(_BYTE *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = -1;
      v28 = v37;
      if (v37 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E339F610[v37])(&v40);
        *(_DWORD *)(v22 + 64) = v28;
      }
      *(_BYTE *)(v22 + 72) = 0;
      *(_DWORD *)(v22 + 80) = -1;
      v29 = v35;
      if (v35 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E339F610[v35])(&v40);
        *(_DWORD *)(v22 + 80) = v29;
      }
      *(_BYTE *)(v22 + 88) = 0;
      *(_DWORD *)(v22 + 96) = -1;
      v30 = v33;
      if (v33 == -1)
      {
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
      }
      else
      {
        result = ((uint64_t (*)(char *))off_1E339F610[v33])(&v40);
        *(_DWORD *)(v22 + 96) = v30;
        v31 = v33;
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
        if ((_DWORD)v31 != -1)
          result = ((uint64_t (*)(char *, _BYTE *))off_1E339F5F0[v31])(&v40, v32);
      }
      if (v35 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E339F5F0[v35])(v32, v34);
      if (v37 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E339F5F0[v37])(v34, v36);
      if (v39 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE **))off_1E339F5F0[v39])(v36, &v38);
      v20 = v44;
      if (v44 == -1)
      {
LABEL_47:
        v17 = v48;
        if (v48 == -1)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    result = ((uint64_t (*)(_BYTE **, _BYTE *))off_1E339F600[v20])(&v38, v42);
    goto LABEL_47;
  }
  if (v56 != 1)
    goto LABEL_54;
  v10 = v55;
  v55 = 0;
  *(_BYTE *)a5 = v54[0];
  *(_QWORD *)(a5 + 8) = v10;
  v11 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(_QWORD **, _BYTE *))off_1E339F600[v11])(&v49, v54);
}

_QWORD *WebCore::CSSHSL::setH@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue20rectifyCSSColorAngleEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_20rectifyCSSColorAngleESO_E3__1ZNS9_20rectifyCSSColorAngleESO_E3__2ZNS9_20rectifyCSSColorAngleESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))off_1E339F5F0[v10])(&v13, a1 + 40);
      *(_DWORD *)(a1 + 48) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))off_1E339F610[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 40;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))off_1E339F620[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))off_1E339F5F0[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSHSL::setS@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))off_1E339F5F0[v10])(&v13, a1 + 56);
      *(_DWORD *)(a1 + 64) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))off_1E339F610[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 56;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))off_1E339F620[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))off_1E339F5F0[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSHSL::setL@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))off_1E339F5F0[v10])(&v13, a1 + 72);
      *(_DWORD *)(a1 + 80) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))off_1E339F610[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 72;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))off_1E339F620[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))off_1E339F5F0[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSHSL::setAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))off_1E339F5F0[v10])(&v13, a1 + 88);
      *(_DWORD *)(a1 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))off_1E339F610[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 88;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))off_1E339F620[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))off_1E339F5F0[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E339F600[v8])(&v11, v15);
  return result;
}

uint64_t WebCore::CSSHWB::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t **v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  int v42;
  uint64_t **v43;
  int v44;
  char v45;
  uint64_t **v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t ***v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t ***v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  *a1 = 0;
  v54 = (uint64_t ***)v9;
  v55 = 1;
  if (*(unsigned __int8 *)(v9 + 68) != 255)
    goto LABEL_11;
  v10 = (*(_DWORD *)(v9 + 60) & 0x7FFFFFFF) != 0;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v9 + 44) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if ((*(_DWORD *)(v9 + 40) & 0x7FFFFFFF) != 0)
    v12 = v11.u32[0] + 1;
  if ((*(_DWORD *)(v9 + 64) & 0x7FFFFFFF) != 0)
    ++v10;
  if (v12 + v10 != 1 || (*(_OWORD *)(v9 + 44) | 0x80000000) == 0x80000000)
  {
LABEL_11:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v58) = 9;
    v25 = v55;
    v60 = 1;
  }
  else
  {
    v54 = 0;
    v58 = v9;
    v25 = 1;
    LODWORD(v59) = 0;
    v60 = 0;
  }
  ((void (*)(uint64_t ****, uint64_t ****))off_1E339F630[v25])(&v50, &v54);
  if (!v60)
  {
    v16 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v16 == -1)
      goto LABEL_63;
    v54 = &v46;
    ((void (*)(uint64_t ****__return_ptr, uint64_t ****, uint64_t))off_1E339F6F0[v16])(&v50, &v54, a2);
    if (v51 == -1)
      goto LABEL_63;
    v46 = (uint64_t **)&v43;
    ((void (*)(uint64_t ****__return_ptr, uint64_t ***, uint64_t ****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v51])(&v54, &v46, &v50);
    if (v51 != -1)
      ((void (*)(uint64_t ***, uint64_t ****))off_1E339F630[v51])(&v46, &v50);
    if (v57)
    {
      if (v57 == 1)
      {
        v17 = v56;
        v56 = 0;
        *(_BYTE *)a5 = v55;
        *(_QWORD *)(a5 + 8) = v17;
        v18 = 1;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_59:
        result = ((uint64_t (*)(uint64_t ****, int *))off_1E339F600[v18])(&v50, &v55);
LABEL_60:
        v15 = v60;
        if (v60 == -1)
          return result;
        return ((uint64_t (*)(uint64_t ****, uint64_t *))off_1E339F600[v15])(&v54, &v58);
      }
LABEL_63:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v19 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v19 == -1)
      goto LABEL_63;
    v50 = &v43;
    ((void (*)(uint64_t ***__return_ptr, uint64_t ****, uint64_t))off_1E339F6F0[v19])(&v46, &v50, a3);
    if (v47 == -1)
      goto LABEL_63;
    v43 = &v41;
    ((void (*)(uint64_t ****__return_ptr, uint64_t ***, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v47])(&v50, &v43, &v46);
    if (v47 != -1)
      ((void (*)(uint64_t ***, uint64_t ***))off_1E339F630[v47])(&v43, &v46);
    if (v53)
    {
      if (v53 != 1)
        goto LABEL_63;
      v20 = v52;
      v52 = 0;
      *(_BYTE *)a5 = v51;
      *(_QWORD *)(a5 + 8) = v20;
      v21 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_57:
      result = ((uint64_t (*)(uint64_t ***, int *))off_1E339F600[v21])(&v46, &v51);
LABEL_58:
      v18 = v57;
      if (v57 == -1)
        goto LABEL_60;
      goto LABEL_59;
    }
    v22 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v22 == -1)
      goto LABEL_63;
    v46 = &v41;
    ((void (*)(uint64_t ***__return_ptr, uint64_t ***, uint64_t))off_1E339F6F0[v22])(&v43, &v46, a4);
    if (v44 == -1)
      goto LABEL_63;
    v41 = &v39;
    ((void (*)(uint64_t ***__return_ptr, uint64_t **, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v44])(&v46, &v41, &v43);
    if (v44 != -1)
      ((void (*)(uint64_t **, uint64_t ***))off_1E339F630[v44])(&v41, &v43);
    if (v49)
    {
      if (v49 != 1)
        goto LABEL_63;
      v23 = v48;
      v48 = 0;
      *(_BYTE *)a5 = v47;
      *(_QWORD *)(a5 + 8) = v23;
      v24 = 1;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      v26 = bmalloc::api::isoAllocate();
      if (v60)
        goto LABEL_63;
      LOBYTE(v43) = 0;
      v44 = -1;
      v27 = v59;
      if ((_DWORD)v59 == -1)
        goto LABEL_63;
      v28 = v26;
      ((void (*)(uint64_t **, uint64_t ***, uint64_t *))off_1E339F610[v59])(&v41, &v43, &v58);
      v44 = v27;
      if (v27)
        goto LABEL_63;
      v29 = v43;
      v43 = 0;
      if (v57)
        goto LABEL_63;
      LOBYTE(v41) = 0;
      v42 = -1;
      v30 = v56;
      if ((_DWORD)v56 == -1)
        goto LABEL_63;
      ((void (*)(uint64_t *, uint64_t **, int *))off_1E339F610[v56])(&v39, &v41, &v55);
      v42 = v30;
      if (v30)
        goto LABEL_63;
      v31 = v41;
      v41 = 0;
      if (v53)
        goto LABEL_63;
      LOBYTE(v39) = 0;
      v40 = -1;
      v32 = v52;
      if ((_DWORD)v52 == -1)
        goto LABEL_63;
      ((void (*)(uint64_t *, uint64_t *, int *))off_1E339F610[v52])(&v37, &v39, &v51);
      v40 = v32;
      if (v32)
        goto LABEL_63;
      v33 = v39;
      v39 = 0;
      if (v49)
        goto LABEL_63;
      LOBYTE(v37) = 0;
      v38 = -1;
      v34 = v48;
      if ((_DWORD)v48 == -1)
        goto LABEL_63;
      ((void (*)(char *, uint64_t *, int *))off_1E339F610[v48])(&v45, &v37, &v47);
      v38 = v34;
      if ((_DWORD)v34)
        goto LABEL_63;
      v35 = v37;
      v37 = 0;
      *(_DWORD *)(v28 + 8) = 1;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)v28 = &off_1E339F570;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)(v28 + 40) = v29;
      *(_QWORD *)(v28 + 48) = v31;
      *(_QWORD *)(v28 + 56) = v33;
      *(_QWORD *)(v28 + 64) = v35;
      *(_QWORD *)a5 = v28;
      *(_DWORD *)(a5 + 16) = 0;
      result = ((uint64_t (*)(char *, uint64_t *))off_1E339F5F0[v34])(&v45, &v37);
      if (v40 != -1)
        result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E339F5F0[v40])(&v37, &v39);
      if (v42 != -1)
        result = ((uint64_t (*)(uint64_t *, uint64_t **))off_1E339F5F0[v42])(&v39, &v41);
      if (v44 != -1)
        result = ((uint64_t (*)(uint64_t **, uint64_t ***))off_1E339F5F0[v44])(&v41, &v43);
      v24 = v49;
      if (v49 == -1)
      {
LABEL_56:
        v21 = v53;
        if (v53 == -1)
          goto LABEL_58;
        goto LABEL_57;
      }
    }
    result = ((uint64_t (*)(uint64_t ***, int *))off_1E339F600[v24])(&v43, &v47);
    goto LABEL_56;
  }
  if (v60 != 1)
    goto LABEL_63;
  v14 = v59;
  v59 = 0;
  *(_BYTE *)a5 = v58;
  *(_QWORD *)(a5 + 8) = v14;
  v15 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(uint64_t ****, uint64_t *))off_1E339F600[v15])(&v54, &v58);
}

uint64_t WebCore::CSSHWB::setH@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  *a2 = 0;
  if (*(unsigned __int8 *)(v5 + 68) != 255)
    goto LABEL_11;
  v6 = (*(_DWORD *)(v5 + 60) & 0x7FFFFFFF) != 0;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v5 + 44) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if ((*(_DWORD *)(v5 + 40) & 0x7FFFFFFF) != 0)
    v8 = v7.u32[0] + 1;
  if ((*(_DWORD *)(v5 + 64) & 0x7FFFFFFF) != 0)
    ++v6;
  if (v8 + v6 != 1 || (*(_OWORD *)(v5 + 44) | 0x80000000) == 0x80000000)
  {
LABEL_11:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v22) = 9;
    v24 = 1;
    if (*(_DWORD *)(v5 + 8) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v10 = v22;
    }
    else
    {
      --*(_DWORD *)(v5 + 8);
      v10 = 9;
    }
    v11 = v23;
    v23 = 0;
    *(_BYTE *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
    v12 = 1;
    *(_BYTE *)(a3 + 16) = 1;
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E339F600[v12])(&v19, &v22);
  }
  v22 = v5;
  LODWORD(v23) = 0;
  v24 = 0;
  LOBYTE(v19) = 0;
  v20 = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15CSSKeywordValueENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_((uint64_t)&v21, &v19, &v22);
  v20 = 0;
  v14 = v19;
  v19 = 0;
  v15 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  if (!v15)
  {
    v18 = 0;
    goto LABEL_20;
  }
  v16 = v15[2];
  v17 = v16 - 1;
  if (v16 != 1)
  {
    v18 = 0;
    v15[2] = v17;
LABEL_20:
    result = ((uint64_t (*)(char *, uint64_t *))off_1E339F5F0[v18])(&v21, &v19);
    goto LABEL_21;
  }
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
  v18 = v20;
  if (v20 != -1)
    goto LABEL_20;
LABEL_21:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v12 = v24;
  if (v24 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E339F600[v12])(&v19, &v22);
  return result;
}

uint64_t WebCore::CSSHWB::setW@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  char v17;
  char *v18;
  char **v19;
  _BYTE v20[8];
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_20;
  v19 = &v18;
  ((void (*)(uint64_t *__return_ptr, char ***))off_1E339F6F0[v4])(&v15, &v19);
  if (v16 == -1)
    goto LABEL_20;
  v18 = &v17;
  ((void (*)(char ***__return_ptr, char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v19, &v18, &v15);
  if (v16 != -1)
    ((void (*)(char **, uint64_t *))off_1E339F630[v16])(&v18, &v15);
  if (!v22)
  {
    LOBYTE(v15) = 0;
    v16 = -1;
    v8 = v21;
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(char **, uint64_t *, _BYTE *))off_1E339F610[v21])(&v18, &v15, v20);
      v16 = v8;
      if (!v8)
      {
        v9 = v15;
        v15 = 0;
        v10 = *(_DWORD **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v9;
        if (v10)
        {
          v11 = v10[2];
          v12 = v11 - 1;
          if (v11 == 1)
          {
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
            v13 = v16;
            if (v16 == -1)
            {
LABEL_15:
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              v7 = v22;
              if (v22 == -1)
                return result;
              return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E339F600[v7])(&v15, v20);
            }
          }
          else
          {
            v13 = 0;
            v10[2] = v12;
          }
        }
        else
        {
          v13 = 0;
        }
        result = ((uint64_t (*)(char **, uint64_t *))off_1E339F5F0[v13])(&v18, &v15);
        goto LABEL_15;
      }
    }
LABEL_20:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v22 != 1)
    goto LABEL_20;
  v6 = v21;
  v21 = 0;
  *(_BYTE *)a3 = v20[0];
  a3[1] = v6;
  v7 = 1;
  *((_BYTE *)a3 + 16) = 1;
  return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E339F600[v7])(&v15, v20);
}

uint64_t WebCore::CSSHWB::setB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  char v17;
  char *v18;
  char **v19;
  _BYTE v20[8];
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_20;
  v19 = &v18;
  ((void (*)(uint64_t *__return_ptr, char ***))off_1E339F6F0[v4])(&v15, &v19);
  if (v16 == -1)
    goto LABEL_20;
  v18 = &v17;
  ((void (*)(char ***__return_ptr, char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v19, &v18, &v15);
  if (v16 != -1)
    ((void (*)(char **, uint64_t *))off_1E339F630[v16])(&v18, &v15);
  if (!v22)
  {
    LOBYTE(v15) = 0;
    v16 = -1;
    v8 = v21;
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(char **, uint64_t *, _BYTE *))off_1E339F610[v21])(&v18, &v15, v20);
      v16 = v8;
      if (!v8)
      {
        v9 = v15;
        v15 = 0;
        v10 = *(_DWORD **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v9;
        if (v10)
        {
          v11 = v10[2];
          v12 = v11 - 1;
          if (v11 == 1)
          {
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
            v13 = v16;
            if (v16 == -1)
            {
LABEL_15:
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              v7 = v22;
              if (v22 == -1)
                return result;
              return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E339F600[v7])(&v15, v20);
            }
          }
          else
          {
            v13 = 0;
            v10[2] = v12;
          }
        }
        else
        {
          v13 = 0;
        }
        result = ((uint64_t (*)(char **, uint64_t *))off_1E339F5F0[v13])(&v18, &v15);
        goto LABEL_15;
      }
    }
LABEL_20:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v22 != 1)
    goto LABEL_20;
  v6 = v21;
  v21 = 0;
  *(_BYTE *)a3 = v20[0];
  a3[1] = v6;
  v7 = 1;
  *((_BYTE *)a3 + 16) = 1;
  return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E339F600[v7])(&v15, v20);
}

uint64_t WebCore::CSSHWB::setAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  char v17;
  char *v18;
  char **v19;
  _BYTE v20[8];
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_20;
  v19 = &v18;
  ((void (*)(uint64_t *__return_ptr, char ***))off_1E339F6F0[v4])(&v15, &v19);
  if (v16 == -1)
    goto LABEL_20;
  v18 = &v17;
  ((void (*)(char ***__return_ptr, char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v19, &v18, &v15);
  if (v16 != -1)
    ((void (*)(char **, uint64_t *))off_1E339F630[v16])(&v18, &v15);
  if (!v22)
  {
    LOBYTE(v15) = 0;
    v16 = -1;
    v8 = v21;
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(char **, uint64_t *, _BYTE *))off_1E339F610[v21])(&v18, &v15, v20);
      v16 = v8;
      if (!v8)
      {
        v9 = v15;
        v15 = 0;
        v10 = *(_DWORD **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v9;
        if (v10)
        {
          v11 = v10[2];
          v12 = v11 - 1;
          if (v11 == 1)
          {
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
            v13 = v16;
            if (v16 == -1)
            {
LABEL_15:
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              v7 = v22;
              if (v22 == -1)
                return result;
              return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E339F600[v7])(&v15, v20);
            }
          }
          else
          {
            v13 = 0;
            v10[2] = v12;
          }
        }
        else
        {
          v13 = 0;
        }
        result = ((uint64_t (*)(char **, uint64_t *))off_1E339F5F0[v13])(&v18, &v15);
        goto LABEL_15;
      }
    }
LABEL_20:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v22 != 1)
    goto LABEL_20;
  v6 = v21;
  v21 = 0;
  *(_BYTE *)a3 = v20[0];
  a3[1] = v6;
  v7 = 1;
  *((_BYTE *)a3 + 16) = 1;
  return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E339F600[v7])(&v15, v20);
}

void WebCore::InlineStylePropertyMap::~InlineStylePropertyMap(WebCore::InlineStylePropertyMap *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::CSSColor::~CSSColor(WebCore::CSSColor *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = &off_1E339F4F0;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E339F5D0[v3])(&v7, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = &off_1E339F4F0;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E339F5D0[v3])(&v7, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

void WebCore::CSSHSL::~CSSHSL(WebCore::CSSHSL *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSHSL::~CSSHSL(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v3 = *((unsigned int *)this + 24);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E339F5F0[v3])(&v10, (char *)this + 88);
  *((_DWORD *)this + 24) = -1;
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E339F5F0[v4])(&v11, (char *)this + 72);
  *((_DWORD *)this + 20) = -1;
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E339F5F0[v5])(&v12, (char *)this + 56);
  *((_DWORD *)this + 16) = -1;
  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E339F5F0[v6])(&v13, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  *(_QWORD *)this = &off_1E339F420;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::CSSHWB::~CSSHWB(WebCore::CSSHWB *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSHWB::~CSSHWB(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[2];
  }
  *(_QWORD *)this = &off_1E339F420;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15CSSKeywordValueENSD_ISI_EENSF_ISI_EEEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E339F5F0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15CSSKeywordValueENSD_ISI_EENSF_ISI_EEEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15CSSKeywordValueENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E339F5F0[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15CSSKeywordValueENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E339F5F0[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 8);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  _WORD *v16;
  int8x16_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  char v45;
  uint64_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  v9 = result;
  if (!a2)
  {
    if ((_DWORD)result)
    {
      if (result <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
        v11 = v46;
        if (v46)
        {
          v16 = (_WORD *)(v46 + 20);
          *(_DWORD *)v46 = 2;
          *(_DWORD *)(v46 + 4) = v9;
          *(_QWORD *)(v46 + 8) = v46 + 20;
          *(_DWORD *)(v46 + 16) = 0;
          if (a3)
          {
            v17 = *(int8x16_t **)(a3 + 8);
            v18 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              v19 = (char *)&v16[v18];
              if (v18 >= 0x40)
              {
                v20 = (char *)&v16[v18 & 0xFFFFFFC0];
                v22 = 0uLL;
                v23 = (char *)(v46 + 20);
                do
                {
                  v47.val[0] = *v17;
                  v24 = v17[1];
                  v49.val[0] = v17[2];
                  v25 = v17[3];
                  v17 += 4;
                  v26 = v25;
                  v49.val[1] = 0uLL;
                  v51.val[0] = v24;
                  v47.val[1] = 0uLL;
                  v27 = v23;
                  vst2q_s8(v27, v47);
                  v27 += 32;
                  v51.val[1] = 0uLL;
                  vst2q_s8(v27, v51);
                  v28 = v23 + 64;
                  vst2q_s8(v28, v49);
                  v29 = v23 + 96;
                  vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
                  v23 += 128;
                }
                while (v23 != v20);
              }
              else
              {
                v20 = (char *)(v46 + 20);
              }
              while (v20 != v19)
              {
                v30 = v17->u8[0];
                v17 = (int8x16_t *)((char *)v17 + 1);
                *(_WORD *)v20 = v30;
                v20 += 2;
              }
            }
            else if ((_DWORD)v18 == 1)
            {
              *v16 = v17->i16[0];
            }
            else if ((_DWORD)v18)
            {
              result = (uint64_t)memcpy((void *)(v46 + 20), v17, 2 * v18);
            }
            v21 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v21 = 0;
          }
          v31 = (char *)&v16[v21];
          v32 = &v31[2 * a5];
          if ((a5 & 0xFFFFFFC0) != 0)
          {
            v33 = &v31[2 * (a5 & 0xFFFFFFC0)];
            v34 = 0uLL;
            do
            {
              v48.val[0] = *a4;
              v35 = a4[1];
              v50.val[0] = a4[2];
              v36 = a4[3];
              a4 += 4;
              v37 = v36;
              v50.val[1] = 0uLL;
              v52.val[0] = v35;
              v48.val[1] = 0uLL;
              v38 = v31;
              vst2q_s8(v38, v48);
              v38 += 32;
              v52.val[1] = 0uLL;
              vst2q_s8(v38, v52);
              v39 = v31 + 64;
              vst2q_s8(v39, v50);
              v40 = v31 + 96;
              vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
              v31 += 128;
            }
            while (v31 != v33);
            v31 = v33;
          }
          while (v31 != v32)
          {
            v41 = a4->u8[0];
            a4 = (int8x16_t *)((char *)a4 + 1);
            *(_WORD *)v31 = v41;
            v31 += 2;
          }
        }
        goto LABEL_41;
      }
LABEL_43:
      v11 = 0;
      goto LABEL_41;
    }
LABEL_42:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_41;
  }
  if (!(_DWORD)result)
    goto LABEL_42;
  if ((result & 0x80000000) != 0)
    goto LABEL_43;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v11 = v46;
  if (!v46)
    goto LABEL_41;
  v12 = (_BYTE *)(v46 + 20);
  *(_DWORD *)v46 = 2;
  *(_DWORD *)(v46 + 4) = v9;
  *(_QWORD *)(v46 + 8) = v46 + 20;
  *(_DWORD *)(v46 + 16) = 4;
  if (!a3)
  {
    v15 = 0;
    if (!a5)
      goto LABEL_41;
    goto LABEL_11;
  }
  v13 = *(_BYTE **)(a3 + 8);
  v14 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
        *v12 = *v13;
      else
        result = (uint64_t)memcpy((void *)(v46 + 20), v13, v14);
    }
  }
  else
  {
    if (v14 < 0x10)
    {
      v42 = (unsigned __int128 *)(v46 + 20);
    }
    else
    {
      v42 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
      v43 = (unsigned __int128 *)(v46 + 20);
      do
      {
        v44 = (unsigned __int128)vld2q_s8(v13);
        v13 += 32;
        *v43++ = v44;
      }
      while (v43 != v42);
    }
    while (v42 != (unsigned __int128 *)&v12[v14])
    {
      v45 = *v13;
      v13 += 2;
      *(_BYTE *)v42 = v45;
      v42 = (unsigned __int128 *)((char *)v42 + 1);
    }
  }
  v15 = *(unsigned int *)(a3 + 4);
  if (a5)
  {
LABEL_11:
    result = (uint64_t)&v12[v15];
    if (a5 == 1)
      *(_BYTE *)result = a4->i8[0];
    else
      result = (uint64_t)memcpy((void *)result, a4, a5);
  }
LABEL_41:
  *a6 = v11;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StylePropertyMap::set(WebCore::Document &,WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &&)::$_0,WebCore::StylePropertyMap::set(WebCore::Document &,WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String> &>(WTF::StringImpl ****a1, WebCore::CSSStyleValue **a2)
{
  WTF::StringImpl ***v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v2 = *a1;
  WebCore::CSSStyleValue::toString(*a2, &v5);
  result = **v2;
  **v2 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StylePropertyMap::set(WebCore::Document &,WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &&)::$_0,WebCore::StylePropertyMap::set(WebCore::Document &,WTF::AtomString const&,WTF::FixedVector<std::variant<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,WTF::String> &>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *result;

  v2 = *(WTF::StringImpl **)a2;
  v3 = *(WTF::StringImpl ***)(*(_QWORD *)a1 + 8);
  if (*(_QWORD *)a2)
    *(_DWORD *)v2 += 2;
  result = *v3;
  *v3 = v2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<Q0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  _BYTE v10[36];

  v3 = *a1 * 100.0;
  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(3u, 1, (uint64_t)v10);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v9[0] = v5;
  v9[1] = xmmword_1968BD2E0;
  v6 = v9;
  if (v10[32])
    v6 = v10;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  result = *(__n128 *)v6;
  v8 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v8;
  *(_QWORD *)v4 = &off_1E339F080;
  *(double *)(v4 + 72) = v3;
  *(_BYTE *)(v4 + 80) = 3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 64);
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(*a1 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if ((*(_DWORD *)(*a1 + 56) & 0x7FFFFFFF) != 0)
    v6 = v5.u32[0] + 1;
  if ((v4 & 0x7FFFFFFF) != 0)
    v7 = ((*(_DWORD *)(*a1 + 60) & 0x7FFFFFFF) != 0) + 1;
  else
    v7 = (*(_DWORD *)(*a1 + 60) & 0x7FFFFFFF) != 0;
  if (v6 + v7 != 1 || (v4 | 0x80000000) == 0x80000000)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a2 + 8) = 9;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *a1 = 0;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  *(_DWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  _BYTE v8[8];

  v3 = *a1;
  *a1 = 0;
  v5 = v3;
  v6 = 0;
  result = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>(&v5, &v7);
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 24) = 0;
  if (v6 != -1)
    return ((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E339F690[v6])(v8, &v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  if (!v4 || *(_DWORD *)(v4 + 4) != 4)
    goto LABEL_3;
  v7 = *(unsigned __int8 **)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    v8 = MEMORY[0x1E0CBF868];
    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7);
    if (v9 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[2]) != v9)
    {
      goto LABEL_3;
    }
    v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[3]);
  }
  else
  {
    v11 = *(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A));
    v8 = MEMORY[0x1E0CBF868];
    if (v11 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || (*((unsigned __int16 *)v7 + 1) | (32 * (*((unsigned __int16 *)v7 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || (*((unsigned __int16 *)v7 + 2) | (32 * (*((unsigned __int16 *)v7 + 2) - 65 < 0x1A))) != v11)
    {
      goto LABEL_3;
    }
    v10 = *((unsigned __int16 *)v7 + 3) | (32 * (*((unsigned __int16 *)v7 + 3) - 65 < 0x1A));
  }
  if (v10 == *(unsigned __int8 *)(v8 + 101))
  {
    v6 = 0;
    *a1 = 0;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_4;
  }
LABEL_3:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a2 + 8) = 9;
  v6 = 1;
LABEL_4:
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  _BYTE v10[36];

  v3 = *a1;
  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(0xCu, 1, (uint64_t)v10);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v9[0] = v5;
  v9[1] = xmmword_1968BD2E0;
  v6 = v9;
  if (v10[32])
    v6 = v10;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  result = *(__n128 *)v6;
  v8 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v8;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = v3;
  *(_BYTE *)(v4 + 80) = 12;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t result;
  int v9;

  v3 = *a1;
  if (*(unsigned __int8 *)(*a1 + 68) != 255)
    goto LABEL_11;
  v4 = (*(_DWORD *)(v3 + 60) & 0x7FFFFFFF) != 0;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v3 + 44) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if ((*(_DWORD *)(v3 + 40) & 0x7FFFFFFF) != 0)
    v6 = v5.u32[0] + 1;
  if ((*(_DWORD *)(v3 + 64) & 0x7FFFFFFF) != 0)
    ++v4;
  if (v6 + v4 != 1 || (*(_OWORD *)(v3 + 44) | 0x80000000) == 0x80000000)
  {
LABEL_11:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a2 + 8) = 9;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *a1 = 0;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  *(_DWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  _BYTE v8[8];

  v3 = *a1;
  *a1 = 0;
  v5 = v3;
  v6 = 0;
  result = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>(&v5, &v7);
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 24) = 0;
  if (v6 != -1)
    return ((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E339F690[v6])(v8, &v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorAngle(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  if (!v4 || *(_DWORD *)(v4 + 4) != 4)
    goto LABEL_3;
  v7 = *(unsigned __int8 **)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    v8 = MEMORY[0x1E0CBF868];
    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7);
    if (v9 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[2]) != v9)
    {
      goto LABEL_3;
    }
    v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[3]);
  }
  else
  {
    v11 = *(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A));
    v8 = MEMORY[0x1E0CBF868];
    if (v11 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || (*((unsigned __int16 *)v7 + 1) | (32 * (*((unsigned __int16 *)v7 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || (*((unsigned __int16 *)v7 + 2) | (32 * (*((unsigned __int16 *)v7 + 2) - 65 < 0x1A))) != v11)
    {
      goto LABEL_3;
    }
    v10 = *((unsigned __int16 *)v7 + 3) | (32 * (*((unsigned __int16 *)v7 + 3) - 65 < 0x1A));
  }
  if (v10 == *(unsigned __int8 *)(v8 + 101))
  {
    v6 = 0;
    *a1 = 0;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_4;
  }
LABEL_3:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a2 + 8) = 9;
  v6 = 1;
LABEL_4:
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  _BYTE v10[36];

  v3 = *a1;
  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)v10);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v9[0] = v5;
  v9[1] = xmmword_1968BD2E0;
  v6 = v9;
  if (v10[32])
    v6 = v10;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  result = *(__n128 *)v6;
  v8 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v8;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = v3;
  *(_BYTE *)(v4 + 80) = 1;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;

  v3 = *a1;
  v4 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(*a1 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
  if ((*(_DWORD *)(*a1 + 64) & 0x7FFFFFFF) != 0)
    v5 = -1;
  else
    v5 = 0;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)(v4 & 0xF));
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if ((*(_DWORD *)(*a1 + 56) & 0x7FFFFFFF) != 0)
    v7 = v6.u32[0] + 1;
  if ((*(_DWORD *)(*a1 + 60) & 0x7FFFFFFF) != 0)
    ++v7;
  if (v7 == v5 && *(unsigned __int8 *)(v3 + 68) == 255)
  {
    v9 = 0;
    *a1 = 0;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a2 + 8) = 9;
    v9 = 1;
  }
  *(_DWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  _BYTE v8[8];

  v3 = *a1;
  *a1 = 0;
  v5 = v3;
  v6 = 0;
  result = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>(&v5, &v7);
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 24) = 0;
  if (v6 != -1)
    return ((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E339F690[v6])(v8, &v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSColorValue::rectifyCSSColorNumber(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  if (!v4 || *(_DWORD *)(v4 + 4) != 4)
    goto LABEL_3;
  v7 = *(unsigned __int8 **)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    v8 = MEMORY[0x1E0CBF868];
    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7);
    if (v9 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[2]) != v9)
    {
      goto LABEL_3;
    }
    v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[3]);
  }
  else
  {
    v11 = *(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A));
    v8 = MEMORY[0x1E0CBF868];
    if (v11 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || (*((unsigned __int16 *)v7 + 1) | (32 * (*((unsigned __int16 *)v7 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || (*((unsigned __int16 *)v7 + 2) | (32 * (*((unsigned __int16 *)v7 + 2) - 65 < 0x1A))) != v11)
    {
      goto LABEL_3;
    }
    v10 = *((unsigned __int16 *)v7 + 3) | (32 * (*((unsigned __int16 *)v7 + 3) - 65 < 0x1A));
  }
  if (v10 == *(unsigned __int8 *)(v8 + 101))
  {
    v6 = 0;
    *a1 = 0;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_4;
  }
LABEL_3:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a2 + 8) = 9;
  v6 = 1;
LABEL_4:
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorPercent(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorPercent(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorPercent(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorPercent(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorPercent(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorAngle(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorAngle(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorAngle(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorAngle(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorNumber(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorNumber(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSColorValue::toCSSColorNumber(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::CSSColorValue::toCSSColorNumber(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

uint64_t WebCore::CSSLCH::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[8];
  unsigned int v33;
  _BYTE v34[8];
  int v35;
  _BYTE v36[8];
  int v37;
  _BYTE *v38;
  int v39;
  char v40;
  _QWORD *v41;
  _BYTE v42[8];
  uint64_t v43;
  int v44;
  _QWORD *v45;
  _BYTE v46[8];
  uint64_t v47;
  int v48;
  _QWORD *v49;
  _BYTE v50[8];
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_54;
  v49 = &v45;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v53, &v49, a1);
  if (!v56)
  {
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v45 = &v41;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v49, &v45, a2);
    if (v52)
    {
      if (v52 == 1)
      {
        v13 = v51;
        v51 = 0;
        *(_BYTE *)a5 = v50[0];
        *(_QWORD *)(a5 + 8) = v13;
        v14 = 1;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_50:
        result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v14])(&v45, v50);
LABEL_51:
        v11 = v56;
        if (v56 == -1)
          return result;
        return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
      }
LABEL_54:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15 == -1)
      goto LABEL_54;
    v41 = &v38;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue20rectifyCSSColorAngleEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_20rectifyCSSColorAngleESO_E3__1ZNS9_20rectifyCSSColorAngleESO_E3__2ZNS9_20rectifyCSSColorAngleESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v45, &v41, a3);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_54;
      v16 = v47;
      v47 = 0;
      *(_BYTE *)a5 = v46[0];
      *(_QWORD *)(a5 + 8) = v16;
      v17 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_48:
      result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v17])(&v41, v46);
LABEL_49:
      v14 = v52;
      if (v52 == -1)
        goto LABEL_51;
      goto LABEL_50;
    }
    v18 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v18 == -1)
      goto LABEL_54;
    v38 = v36;
    ((void (*)(_QWORD **__return_ptr, _BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v41, &v38, a4);
    if (v44)
    {
      if (v44 != 1)
        goto LABEL_54;
      v19 = v43;
      v43 = 0;
      *(_BYTE *)a5 = v42[0];
      *(_QWORD *)(a5 + 8) = v19;
      v20 = 1;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      if (v56)
        goto LABEL_54;
      v22 = result;
      LOBYTE(v38) = 0;
      v39 = -1;
      v23 = v55;
      if ((_DWORD)v55 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v55])(v36, &v38, v54);
        v39 = v23;
      }
      if (v52)
        goto LABEL_54;
      v36[0] = 0;
      v37 = -1;
      v24 = v51;
      if ((_DWORD)v51 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v51])(v34, v36, v50);
        v37 = v24;
      }
      if (v48)
        goto LABEL_54;
      v34[0] = 0;
      v35 = -1;
      v25 = v47;
      if ((_DWORD)v47 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v47])(v32, v34, v46);
        v35 = v25;
      }
      if (v44)
        goto LABEL_54;
      v32[0] = 0;
      v33 = -1;
      v26 = v43;
      if ((_DWORD)v43 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v43])(&v40, v32, v42);
        v33 = v26;
      }
      *(_DWORD *)(v22 + 8) = 1;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)v22 = &off_1E339F750;
      *(_BYTE *)(v22 + 40) = 0;
      *(_DWORD *)(v22 + 48) = -1;
      v27 = v39;
      if (v39 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v39])(&v40, v22 + 40, &v38);
        *(_DWORD *)(v22 + 48) = v27;
      }
      *(_BYTE *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = -1;
      v28 = v37;
      if (v37 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v37])(&v40);
        *(_DWORD *)(v22 + 64) = v28;
      }
      *(_BYTE *)(v22 + 72) = 0;
      *(_DWORD *)(v22 + 80) = -1;
      v29 = v35;
      if (v35 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v35])(&v40);
        *(_DWORD *)(v22 + 80) = v29;
      }
      *(_BYTE *)(v22 + 88) = 0;
      *(_DWORD *)(v22 + 96) = -1;
      v30 = v33;
      if (v33 == -1)
      {
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
      }
      else
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v33])(&v40);
        *(_DWORD *)(v22 + 96) = v30;
        v31 = v33;
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
        if ((_DWORD)v31 != -1)
          result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v40, v32);
      }
      if (v35 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v35])(v32, v34);
      if (v37 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v37])(v34, v36);
      if (v39 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v39])(v36, &v38);
      v20 = v44;
      if (v44 == -1)
      {
LABEL_47:
        v17 = v48;
        if (v48 == -1)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    result = ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v20])(&v38, v42);
    goto LABEL_47;
  }
  if (v56 != 1)
    goto LABEL_54;
  v10 = v55;
  v55 = 0;
  *(_BYTE *)a5 = v54[0];
  *(_QWORD *)(a5 + 8) = v10;
  v11 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
}

_QWORD *WebCore::CSSLCH::setL@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 40);
      *(_DWORD *)(a1 + 48) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 40;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSLCH::setC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 56);
      *(_DWORD *)(a1 + 64) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 56;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSLCH::setH@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue20rectifyCSSColorAngleEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_20rectifyCSSColorAngleESO_E3__1ZNS9_20rectifyCSSColorAngleESO_E3__2ZNS9_20rectifyCSSColorAngleESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 72);
      *(_DWORD *)(a1 + 80) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 72;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSLCH::setAlpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 88);
      *(_DWORD *)(a1 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 88;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

uint64_t WebCore::CSSLab::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[8];
  unsigned int v33;
  _BYTE v34[8];
  int v35;
  _BYTE v36[8];
  int v37;
  _BYTE *v38;
  int v39;
  char v40;
  _QWORD *v41;
  _BYTE v42[8];
  uint64_t v43;
  int v44;
  _QWORD *v45;
  _BYTE v46[8];
  uint64_t v47;
  int v48;
  _QWORD *v49;
  _BYTE v50[8];
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_54;
  v49 = &v45;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v53, &v49, a1);
  if (!v56)
  {
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v45 = &v41;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue21rectifyCSSColorNumberEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_21rectifyCSSColorNumberESO_E3__1ZNS9_21rectifyCSSColorNumberESO_E3__2ZNS9_21rectifyCSSColorNumberESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v49, &v45, a2);
    if (v52)
    {
      if (v52 == 1)
      {
        v13 = v51;
        v51 = 0;
        *(_BYTE *)a5 = v50[0];
        *(_QWORD *)(a5 + 8) = v13;
        v14 = 1;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_50:
        result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v14])(&v45, v50);
LABEL_51:
        v11 = v56;
        if (v56 == -1)
          return result;
        return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
      }
LABEL_54:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15 == -1)
      goto LABEL_54;
    v41 = &v38;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue21rectifyCSSColorNumberEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_21rectifyCSSColorNumberESO_E3__1ZNS9_21rectifyCSSColorNumberESO_E3__2ZNS9_21rectifyCSSColorNumberESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v45, &v41, a3);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_54;
      v16 = v47;
      v47 = 0;
      *(_BYTE *)a5 = v46[0];
      *(_QWORD *)(a5 + 8) = v16;
      v17 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_48:
      result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v17])(&v41, v46);
LABEL_49:
      v14 = v52;
      if (v52 == -1)
        goto LABEL_51;
      goto LABEL_50;
    }
    v18 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v18 == -1)
      goto LABEL_54;
    v38 = v36;
    ((void (*)(_QWORD **__return_ptr, _BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v41, &v38, a4);
    if (v44)
    {
      if (v44 != 1)
        goto LABEL_54;
      v19 = v43;
      v43 = 0;
      *(_BYTE *)a5 = v42[0];
      *(_QWORD *)(a5 + 8) = v19;
      v20 = 1;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      if (v56)
        goto LABEL_54;
      v22 = result;
      LOBYTE(v38) = 0;
      v39 = -1;
      v23 = v55;
      if ((_DWORD)v55 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v55])(v36, &v38, v54);
        v39 = v23;
      }
      if (v52)
        goto LABEL_54;
      v36[0] = 0;
      v37 = -1;
      v24 = v51;
      if ((_DWORD)v51 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v51])(v34, v36, v50);
        v37 = v24;
      }
      if (v48)
        goto LABEL_54;
      v34[0] = 0;
      v35 = -1;
      v25 = v47;
      if ((_DWORD)v47 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v47])(v32, v34, v46);
        v35 = v25;
      }
      if (v44)
        goto LABEL_54;
      v32[0] = 0;
      v33 = -1;
      v26 = v43;
      if ((_DWORD)v43 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v43])(&v40, v32, v42);
        v33 = v26;
      }
      *(_DWORD *)(v22 + 8) = 1;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)v22 = &off_1E339F790;
      *(_BYTE *)(v22 + 40) = 0;
      *(_DWORD *)(v22 + 48) = -1;
      v27 = v39;
      if (v39 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v39])(&v40, v22 + 40, &v38);
        *(_DWORD *)(v22 + 48) = v27;
      }
      *(_BYTE *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = -1;
      v28 = v37;
      if (v37 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v37])(&v40);
        *(_DWORD *)(v22 + 64) = v28;
      }
      *(_BYTE *)(v22 + 72) = 0;
      *(_DWORD *)(v22 + 80) = -1;
      v29 = v35;
      if (v35 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v35])(&v40);
        *(_DWORD *)(v22 + 80) = v29;
      }
      *(_BYTE *)(v22 + 88) = 0;
      *(_DWORD *)(v22 + 96) = -1;
      v30 = v33;
      if (v33 == -1)
      {
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
      }
      else
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v33])(&v40);
        *(_DWORD *)(v22 + 96) = v30;
        v31 = v33;
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
        if ((_DWORD)v31 != -1)
          result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v40, v32);
      }
      if (v35 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v35])(v32, v34);
      if (v37 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v37])(v34, v36);
      if (v39 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v39])(v36, &v38);
      v20 = v44;
      if (v44 == -1)
      {
LABEL_47:
        v17 = v48;
        if (v48 == -1)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    result = ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v20])(&v38, v42);
    goto LABEL_47;
  }
  if (v56 != 1)
    goto LABEL_54;
  v10 = v55;
  v55 = 0;
  *(_BYTE *)a5 = v54[0];
  *(_QWORD *)(a5 + 8) = v10;
  v11 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
}

_QWORD *WebCore::CSSLab::setA@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue21rectifyCSSColorNumberEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_21rectifyCSSColorNumberESO_E3__1ZNS9_21rectifyCSSColorNumberESO_E3__2ZNS9_21rectifyCSSColorNumberESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 56);
      *(_DWORD *)(a1 + 64) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 56;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSLab::setB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue21rectifyCSSColorNumberEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_21rectifyCSSColorNumberESO_E3__1ZNS9_21rectifyCSSColorNumberESO_E3__2ZNS9_21rectifyCSSColorNumberESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 72);
      *(_DWORD *)(a1 + 80) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 72;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

uint64_t WebCore::CSSOKLCH::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[8];
  unsigned int v33;
  _BYTE v34[8];
  int v35;
  _BYTE v36[8];
  int v37;
  _BYTE *v38;
  int v39;
  char v40;
  _QWORD *v41;
  _BYTE v42[8];
  uint64_t v43;
  int v44;
  _QWORD *v45;
  _BYTE v46[8];
  uint64_t v47;
  int v48;
  _QWORD *v49;
  _BYTE v50[8];
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_54;
  v49 = &v45;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v53, &v49, a1);
  if (!v56)
  {
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v45 = &v41;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v49, &v45, a2);
    if (v52)
    {
      if (v52 == 1)
      {
        v13 = v51;
        v51 = 0;
        *(_BYTE *)a5 = v50[0];
        *(_QWORD *)(a5 + 8) = v13;
        v14 = 1;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_50:
        result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v14])(&v45, v50);
LABEL_51:
        v11 = v56;
        if (v56 == -1)
          return result;
        return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
      }
LABEL_54:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15 == -1)
      goto LABEL_54;
    v41 = &v38;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue20rectifyCSSColorAngleEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_20rectifyCSSColorAngleESO_E3__1ZNS9_20rectifyCSSColorAngleESO_E3__2ZNS9_20rectifyCSSColorAngleESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v45, &v41, a3);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_54;
      v16 = v47;
      v47 = 0;
      *(_BYTE *)a5 = v46[0];
      *(_QWORD *)(a5 + 8) = v16;
      v17 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_48:
      result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v17])(&v41, v46);
LABEL_49:
      v14 = v52;
      if (v52 == -1)
        goto LABEL_51;
      goto LABEL_50;
    }
    v18 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v18 == -1)
      goto LABEL_54;
    v38 = v36;
    ((void (*)(_QWORD **__return_ptr, _BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v41, &v38, a4);
    if (v44)
    {
      if (v44 != 1)
        goto LABEL_54;
      v19 = v43;
      v43 = 0;
      *(_BYTE *)a5 = v42[0];
      *(_QWORD *)(a5 + 8) = v19;
      v20 = 1;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      if (v56)
        goto LABEL_54;
      v22 = result;
      LOBYTE(v38) = 0;
      v39 = -1;
      v23 = v55;
      if ((_DWORD)v55 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v55])(v36, &v38, v54);
        v39 = v23;
      }
      if (v52)
        goto LABEL_54;
      v36[0] = 0;
      v37 = -1;
      v24 = v51;
      if ((_DWORD)v51 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v51])(v34, v36, v50);
        v37 = v24;
      }
      if (v48)
        goto LABEL_54;
      v34[0] = 0;
      v35 = -1;
      v25 = v47;
      if ((_DWORD)v47 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v47])(v32, v34, v46);
        v35 = v25;
      }
      if (v44)
        goto LABEL_54;
      v32[0] = 0;
      v33 = -1;
      v26 = v43;
      if ((_DWORD)v43 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v43])(&v40, v32, v42);
        v33 = v26;
      }
      *(_DWORD *)(v22 + 8) = 1;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)v22 = &off_1E339F7D0;
      *(_BYTE *)(v22 + 40) = 0;
      *(_DWORD *)(v22 + 48) = -1;
      v27 = v39;
      if (v39 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v39])(&v40, v22 + 40, &v38);
        *(_DWORD *)(v22 + 48) = v27;
      }
      *(_BYTE *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = -1;
      v28 = v37;
      if (v37 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v37])(&v40);
        *(_DWORD *)(v22 + 64) = v28;
      }
      *(_BYTE *)(v22 + 72) = 0;
      *(_DWORD *)(v22 + 80) = -1;
      v29 = v35;
      if (v35 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v35])(&v40);
        *(_DWORD *)(v22 + 80) = v29;
      }
      *(_BYTE *)(v22 + 88) = 0;
      *(_DWORD *)(v22 + 96) = -1;
      v30 = v33;
      if (v33 == -1)
      {
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
      }
      else
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v33])(&v40);
        *(_DWORD *)(v22 + 96) = v30;
        v31 = v33;
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
        if ((_DWORD)v31 != -1)
          result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v40, v32);
      }
      if (v35 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v35])(v32, v34);
      if (v37 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v37])(v34, v36);
      if (v39 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v39])(v36, &v38);
      v20 = v44;
      if (v44 == -1)
      {
LABEL_47:
        v17 = v48;
        if (v48 == -1)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    result = ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v20])(&v38, v42);
    goto LABEL_47;
  }
  if (v56 != 1)
    goto LABEL_54;
  v10 = v55;
  v55 = 0;
  *(_BYTE *)a5 = v54[0];
  *(_QWORD *)(a5 + 8) = v10;
  v11 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
}

uint64_t WebCore::CSSOKLab::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[8];
  unsigned int v33;
  _BYTE v34[8];
  int v35;
  _BYTE v36[8];
  int v37;
  _BYTE *v38;
  int v39;
  char v40;
  _QWORD *v41;
  _BYTE v42[8];
  uint64_t v43;
  int v44;
  _QWORD *v45;
  _BYTE v46[8];
  uint64_t v47;
  int v48;
  _QWORD *v49;
  _BYTE v50[8];
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_54;
  v49 = &v45;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v53, &v49, a1);
  if (!v56)
  {
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v45 = &v41;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue21rectifyCSSColorNumberEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_21rectifyCSSColorNumberESO_E3__1ZNS9_21rectifyCSSColorNumberESO_E3__2ZNS9_21rectifyCSSColorNumberESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v12])(&v49, &v45, a2);
    if (v52)
    {
      if (v52 == 1)
      {
        v13 = v51;
        v51 = 0;
        *(_BYTE *)a5 = v50[0];
        *(_QWORD *)(a5 + 8) = v13;
        v14 = 1;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_50:
        result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v14])(&v45, v50);
LABEL_51:
        v11 = v56;
        if (v56 == -1)
          return result;
        return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
      }
LABEL_54:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15 == -1)
      goto LABEL_54;
    v41 = &v38;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue21rectifyCSSColorNumberEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_21rectifyCSSColorNumberESO_E3__1ZNS9_21rectifyCSSColorNumberESO_E3__2ZNS9_21rectifyCSSColorNumberESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v15])(&v45, &v41, a3);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_54;
      v16 = v47;
      v47 = 0;
      *(_BYTE *)a5 = v46[0];
      *(_QWORD *)(a5 + 8) = v16;
      v17 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_48:
      result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v17])(&v41, v46);
LABEL_49:
      v14 = v52;
      if (v52 == -1)
        goto LABEL_51;
      goto LABEL_50;
    }
    v18 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v18 == -1)
      goto LABEL_54;
    v38 = v36;
    ((void (*)(_QWORD **__return_ptr, _BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v41, &v38, a4);
    if (v44)
    {
      if (v44 != 1)
        goto LABEL_54;
      v19 = v43;
      v43 = 0;
      *(_BYTE *)a5 = v42[0];
      *(_QWORD *)(a5 + 8) = v19;
      v20 = 1;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      if (v56)
        goto LABEL_54;
      v22 = result;
      LOBYTE(v38) = 0;
      v39 = -1;
      v23 = v55;
      if ((_DWORD)v55 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v55])(v36, &v38, v54);
        v39 = v23;
      }
      if (v52)
        goto LABEL_54;
      v36[0] = 0;
      v37 = -1;
      v24 = v51;
      if ((_DWORD)v51 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v51])(v34, v36, v50);
        v37 = v24;
      }
      if (v48)
        goto LABEL_54;
      v34[0] = 0;
      v35 = -1;
      v25 = v47;
      if ((_DWORD)v47 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v47])(v32, v34, v46);
        v35 = v25;
      }
      if (v44)
        goto LABEL_54;
      v32[0] = 0;
      v33 = -1;
      v26 = v43;
      if ((_DWORD)v43 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v43])(&v40, v32, v42);
        v33 = v26;
      }
      *(_DWORD *)(v22 + 8) = 1;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)v22 = &off_1E339F810;
      *(_BYTE *)(v22 + 40) = 0;
      *(_DWORD *)(v22 + 48) = -1;
      v27 = v39;
      if (v39 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v39])(&v40, v22 + 40, &v38);
        *(_DWORD *)(v22 + 48) = v27;
      }
      *(_BYTE *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = -1;
      v28 = v37;
      if (v37 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v37])(&v40);
        *(_DWORD *)(v22 + 64) = v28;
      }
      *(_BYTE *)(v22 + 72) = 0;
      *(_DWORD *)(v22 + 80) = -1;
      v29 = v35;
      if (v35 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v35])(&v40);
        *(_DWORD *)(v22 + 80) = v29;
      }
      *(_BYTE *)(v22 + 88) = 0;
      *(_DWORD *)(v22 + 96) = -1;
      v30 = v33;
      if (v33 == -1)
      {
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
      }
      else
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v33])(&v40);
        *(_DWORD *)(v22 + 96) = v30;
        v31 = v33;
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
        if ((_DWORD)v31 != -1)
          result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v40, v32);
      }
      if (v35 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v35])(v32, v34);
      if (v37 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v37])(v34, v36);
      if (v39 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v39])(v36, &v38);
      v20 = v44;
      if (v44 == -1)
      {
LABEL_47:
        v17 = v48;
        if (v48 == -1)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    result = ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v20])(&v38, v42);
    goto LABEL_47;
  }
  if (v56 != 1)
    goto LABEL_54;
  v10 = v55;
  v55 = 0;
  *(_BYTE *)a5 = v54[0];
  *(_QWORD *)(a5 + 8) = v10;
  v11 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
}

uint64_t WebCore::CSSRGB::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _BYTE v32[8];
  unsigned int v33;
  _BYTE v34[8];
  int v35;
  _BYTE v36[8];
  int v37;
  _BYTE *v38;
  int v39;
  char v40;
  _QWORD *v41;
  _BYTE v42[8];
  uint64_t v43;
  int v44;
  _QWORD *v45;
  _BYTE v46[8];
  uint64_t v47;
  int v48;
  _QWORD *v49;
  _BYTE v50[8];
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE v54[8];
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_54;
  v49 = &v45;
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))off_1E339FA50[v6])(&v53, &v49, a1);
  if (!v56)
  {
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 == -1)
      goto LABEL_54;
    v45 = &v41;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))off_1E339FA50[v12])(&v49, &v45, a2);
    if (v52)
    {
      if (v52 == 1)
      {
        v13 = v51;
        v51 = 0;
        *(_BYTE *)a5 = v50[0];
        *(_QWORD *)(a5 + 8) = v13;
        v14 = 1;
        *(_DWORD *)(a5 + 16) = 1;
LABEL_50:
        result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v14])(&v45, v50);
LABEL_51:
        v11 = v56;
        if (v56 == -1)
          return result;
        return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
      }
LABEL_54:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15 == -1)
      goto LABEL_54;
    v41 = &v38;
    ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))off_1E339FA50[v15])(&v45, &v41, a3);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_54;
      v16 = v47;
      v47 = 0;
      *(_BYTE *)a5 = v46[0];
      *(_QWORD *)(a5 + 8) = v16;
      v17 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_48:
      result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v17])(&v41, v46);
LABEL_49:
      v14 = v52;
      if (v52 == -1)
        goto LABEL_51;
      goto LABEL_50;
    }
    v18 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v18 == -1)
      goto LABEL_54;
    v38 = v36;
    ((void (*)(_QWORD **__return_ptr, _BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore13CSSColorValue22rectifyCSSColorPercentEONS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS6_6StringENSB_INS8_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEEE3__0JZNS9_22rectifyCSSColorPercentESO_E3__1ZNS9_22rectifyCSSColorPercentESO_E3__2ZNS9_22rectifyCSSColorPercentESO_E3__3EEEEEJNS0_6__implIJdSH_SI_SM_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v41, &v38, a4);
    if (v44)
    {
      if (v44 != 1)
        goto LABEL_54;
      v19 = v43;
      v43 = 0;
      *(_BYTE *)a5 = v42[0];
      *(_QWORD *)(a5 + 8) = v19;
      v20 = 1;
      *(_DWORD *)(a5 + 16) = 1;
    }
    else
    {
      result = bmalloc::api::isoAllocate();
      if (v56)
        goto LABEL_54;
      v22 = result;
      LOBYTE(v38) = 0;
      v39 = -1;
      v23 = v55;
      if ((_DWORD)v55 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v55])(v36, &v38, v54);
        v39 = v23;
      }
      if (v52)
        goto LABEL_54;
      v36[0] = 0;
      v37 = -1;
      v24 = v51;
      if ((_DWORD)v51 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v51])(v34, v36, v50);
        v37 = v24;
      }
      if (v48)
        goto LABEL_54;
      v34[0] = 0;
      v35 = -1;
      v25 = v47;
      if ((_DWORD)v47 != -1)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v47])(v32, v34, v46);
        v35 = v25;
      }
      if (v44)
        goto LABEL_54;
      v32[0] = 0;
      v33 = -1;
      v26 = v43;
      if ((_DWORD)v43 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v43])(&v40, v32, v42);
        v33 = v26;
      }
      *(_DWORD *)(v22 + 8) = 1;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)v22 = &off_1E339F850;
      *(_BYTE *)(v22 + 40) = 0;
      *(_DWORD *)(v22 + 48) = -1;
      v27 = v39;
      if (v39 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v39])(&v40, v22 + 40, &v38);
        *(_DWORD *)(v22 + 48) = v27;
      }
      *(_BYTE *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = -1;
      v28 = v37;
      if (v37 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v37])(&v40);
        *(_DWORD *)(v22 + 64) = v28;
      }
      *(_BYTE *)(v22 + 72) = 0;
      *(_DWORD *)(v22 + 80) = -1;
      v29 = v35;
      if (v35 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v35])(&v40);
        *(_DWORD *)(v22 + 80) = v29;
      }
      *(_BYTE *)(v22 + 88) = 0;
      *(_DWORD *)(v22 + 96) = -1;
      v30 = v33;
      if (v33 == -1)
      {
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
      }
      else
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v33])(&v40);
        *(_DWORD *)(v22 + 96) = v30;
        v31 = v33;
        *(_QWORD *)a5 = v22;
        *(_DWORD *)(a5 + 16) = 0;
        if ((_DWORD)v31 != -1)
          result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v40, v32);
      }
      if (v35 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v35])(v32, v34);
      if (v37 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v37])(v34, v36);
      if (v39 != -1)
        result = ((uint64_t (*)(_BYTE *, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v39])(v36, &v38);
      v20 = v44;
      if (v44 == -1)
      {
LABEL_47:
        v17 = v48;
        if (v48 == -1)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    result = ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v20])(&v38, v42);
    goto LABEL_47;
  }
  if (v56 != 1)
    goto LABEL_54;
  v10 = v55;
  v55 = 0;
  *(_BYTE *)a5 = v54[0];
  *(_QWORD *)(a5 + 8) = v10;
  v11 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v11])(&v49, v54);
}

_QWORD *WebCore::CSSRGB::setR@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))off_1E339FA50[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 48);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 40);
      *(_DWORD *)(a1 + 48) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 40;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSRGB::setG@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))off_1E339FA50[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 56);
      *(_DWORD *)(a1 + 64) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 56;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

_QWORD *WebCore::CSSRGB::setB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_14;
  v11 = &v13;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t **))off_1E339FA50[v4])(&v14, &v11);
  if (v17)
  {
    if (v17 == 1)
    {
      v7 = v16;
      v16 = 0;
      *(_BYTE *)a3 = v15[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
    }
LABEL_14:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v16;
  if ((_DWORD)v16 == -1)
  {
    v10 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v10])(&v13, a1 + 72);
      *(_DWORD *)(a1 + 80) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v16])(&v13, &v11, v15);
    v12 = v9;
    v13 = a1 + 72;
    result = (_QWORD *)((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0____fdiagonal[v9])(&v13);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v12])(&v13, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v17;
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_15CSSKeywordValueENSB_ISG_EENSD_ISG_EEEEEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSO_EEEDcOSP_DpOT0____fmatrix[v8])(&v11, v15);
  return result;
}

_DWORD *WebCore::CSSMathClamp::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *result;
  uint64_t v21;
  _OWORD v22[2];
  _OWORD v23[2];
  _OWORD v24[2];
  char v25;
  _OWORD v26[2];
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_22;
  *(_QWORD *)&v28 = v24;
  __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v5](v33, &v28, a1);
  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8 == -1)
    goto LABEL_22;
  *(_QWORD *)&v28 = v24;
  __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v8](&v32, &v28, a2);
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9 == -1)
    goto LABEL_22;
  *(_QWORD *)&v28 = v24;
  __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v9](&v31, &v28, a3);
  v10 = *(_OWORD *)(v33[0] + 56);
  v27[0] = *(_OWORD *)(v33[0] + 40);
  v27[1] = v10;
  v11 = *(_OWORD *)(v32 + 56);
  v26[0] = *(_OWORD *)(v32 + 40);
  v26[1] = v11;
  WebCore::CSSNumericType::addTypes((uint64_t)v27, (uint64_t)v26, (uint64_t)&v28);
  if (!v30)
    goto LABEL_8;
  v23[0] = v28;
  v23[1] = v29;
  v12 = *(_OWORD *)(v31 + 56);
  v22[0] = *(_OWORD *)(v31 + 40);
  v22[1] = v12;
  WebCore::CSSNumericType::addTypes((uint64_t)v23, (uint64_t)v22, (uint64_t)v24);
  v30 = v25;
  v28 = v24[0];
  v29 = v24[1];
  if (!v25)
  {
LABEL_8:
    *(_BYTE *)a4 = 33;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    v18 = (_DWORD *)v31;
    v31 = 0;
    if (v18)
    {
      if (v18[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
      else
        --v18[2];
    }
    goto LABEL_11;
  }
  v13 = bmalloc::api::isoAllocate();
  if (!v30)
  {
    __break(1u);
LABEL_22:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::CSSMathClamp::serialize(v21);
  }
  v15 = v28;
  v14 = v29;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_OWORD *)(v13 + 40) = v15;
  *(_OWORD *)(v13 + 56) = v14;
  *(_QWORD *)v13 = &off_1E339F890;
  v17 = v32;
  v16 = v33[0];
  v32 = 0;
  v33[0] = 0;
  *(_QWORD *)(v13 + 72) = v16;
  *(_QWORD *)(v13 + 80) = v17;
  *(_QWORD *)(v13 + 88) = v31;
  *(_QWORD *)a4 = v13;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_11:
  v19 = (_DWORD *)v32;
  v32 = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
    else
      --v19[2];
  }
  result = (_DWORD *)v33[0];
  v33[0] = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::CSSMathClamp::serialize(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  WTF::StringBuilder::append();
  (***(void (****)(_QWORD, uint64_t, uint64_t))(a1 + 72))(*(_QWORD *)(a1 + 72), a2, 3);
  WTF::StringBuilder::append();
  (***(void (****)(_QWORD, uint64_t, uint64_t))(a1 + 80))(*(_QWORD *)(a1 + 80), a2, 3);
  WTF::StringBuilder::append();
  result = (***(uint64_t (****)(_QWORD, uint64_t, uint64_t))(a1 + 88))(*(_QWORD *)(a1 + 88), a2, 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *(unsigned int *)(a2 + 16);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)(a2 + 16) = v6 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v6) = 41;
  else
    *(_WORD *)(v9 + 2 * v6) = 41;
  return result;
}

uint64_t WebCore::CSSMathClamp::toSumValue@<X0>(WebCore::CSSMathClamp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  WTF *v10;
  double v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  WTF *v19;
  int v20;
  unsigned int v21;
  unsigned __int8 v22;
  WTF *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned __int8 v29;

  result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr))(**((_QWORD **)this + 9) + 48))(&v26);
  v6 = v29;
  if (v29)
    v7 = v28 == 1;
  else
    v7 = 0;
  if (!v7)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (!v6)
      return result;
    goto LABEL_39;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr))(**((_QWORD **)this + 10) + 48))(&v23);
  if (!v29)
    goto LABEL_59;
  if (!v28)
    goto LABEL_64;
  if (!v25
    || HIDWORD(v24) != 1
    || (result = WTF::operator==<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>((unsigned __int8 **)(v26 + 8), (uint64_t *)v23 + 1), (result & 1) == 0))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_29;
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr))(**((_QWORD **)this + 11) + 48))(&v19);
  if (!v29)
  {
LABEL_59:
    __break(1u);
    goto LABEL_64;
  }
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x19591A448);
  }
  v8 = v22;
  if (v22 && v21 == 1)
  {
    result = WTF::operator==<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>((unsigned __int8 **)(v26 + 8), (uint64_t *)v19 + 1);
    if ((result & 1) != 0)
    {
      if (v29)
      {
        if (!v28)
        {
          __break(0xC471u);
          JUMPOUT(0x19591A450);
        }
        if (v25)
        {
          v9 = HIDWORD(v24);
          if (!HIDWORD(v24))
          {
            __break(0xC471u);
            JUMPOUT(0x19591A458);
          }
          if (v22)
          {
            if (v21)
            {
              v10 = v23;
              result = (uint64_t)v19;
              v11 = *(double *)v19;
              if (*(double *)v19 >= *(double *)v23)
                v11 = *(double *)v23;
              if (*(double *)v26 >= v11)
                v11 = *(double *)v26;
              *(double *)v23 = v11;
              *(_QWORD *)a2 = v10;
              v12 = v24;
              v23 = 0;
              v24 = 0;
              *(_DWORD *)(a2 + 8) = v12;
              *(_DWORD *)(a2 + 12) = v9;
              *(_BYTE *)(a2 + 16) = 1;
              goto LABEL_51;
            }
LABEL_64:
            __break(0xC471u);
            JUMPOUT(0x19591A440);
          }
        }
      }
      goto LABEL_59;
    }
    v8 = v22;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (!v8)
    goto LABEL_29;
  result = (uint64_t)v19;
LABEL_51:
  if (v21)
  {
    v17 = 16 * v21;
    v18 = (_QWORD *)(result + 8);
    do
    {
      if (*v18)
        WTF::fastFree((WTF *)(*v18 - 16), v5);
      v18 += 2;
      v17 -= 16;
    }
    while (v17);
    result = (uint64_t)v19;
  }
  if (result)
  {
    v19 = 0;
    v20 = 0;
    result = WTF::fastFree((WTF *)result, v5);
  }
LABEL_29:
  if (v25)
  {
    result = (uint64_t)v23;
    if (HIDWORD(v24))
    {
      v13 = 16 * HIDWORD(v24);
      v14 = (_QWORD *)((char *)v23 + 8);
      do
      {
        if (*v14)
          WTF::fastFree((WTF *)(*v14 - 16), v5);
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
      result = (uint64_t)v23;
    }
    if (result)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      result = WTF::fastFree((WTF *)result, v5);
    }
  }
  if (v29)
  {
LABEL_39:
    result = v26;
    if (v28)
    {
      v15 = 16 * v28;
      v16 = (_QWORD *)(v26 + 8);
      do
      {
        if (*v16)
          WTF::fastFree((WTF *)(*v16 - 16), v5);
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
      result = v26;
    }
    if (result)
    {
      v26 = 0;
      v27 = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

uint64_t WebCore::CSSMathClamp::equals(_QWORD **a1, _QWORD *a2)
{
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 3
    && (*(unsigned int (**)(_QWORD *, _QWORD))(*a1[9] + 56))(a1[9], a2[9])
    && (*(unsigned int (**)(_QWORD *, _QWORD))(*a1[10] + 56))(a1[10], a2[10]))
  {
    return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1[11] + 56))(a1[11], a2[11]);
  }
  else
  {
    return 0;
  }
}

_QWORD *WebCore::CSSMathClamp::toCalcExpressionNode@<X0>(WebCore::CSSMathClamp *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *result;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  WTF *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  ++v3[2];
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  ++v4[2];
  v5 = (_DWORD *)*((_QWORD *)this + 11);
  ++v5[2];
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, _DWORD *))(*(_QWORD *)v3 + 64))(&v31, v3);
  if (!v31)
    goto LABEL_21;
  v30 = v31;
  v31 = 0;
  v8 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, 1uLL, (unint64_t)&v30);
  v9 = HIDWORD(v33);
  v10 = v32;
  v11 = *v8;
  *v8 = 0;
  *((_QWORD *)v10 + v9) = v11;
  v12 = v30;
  HIDWORD(v33) = v9 + 1;
  v30 = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = v31;
  v31 = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, _DWORD *))(*(_QWORD *)v4 + 64))(&v31, v4);
  v14 = v31;
  if (!v31)
    goto LABEL_21;
  v30 = v31;
  v31 = 0;
  LODWORD(v15) = HIDWORD(v33);
  if (HIDWORD(v33) == (_DWORD)v33)
  {
    v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
    v15 = HIDWORD(v33);
    v17 = v32;
    v18 = *v16;
    *v16 = 0;
    *((_QWORD *)v17 + v15) = v18;
  }
  else
  {
    v30 = 0;
    *((_QWORD *)v32 + HIDWORD(v33)) = v14;
  }
  HIDWORD(v33) = v15 + 1;
  v19 = v30;
  v30 = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, _DWORD *))(*(_QWORD *)v5 + 64))(&v31, v5);
  v21 = v31;
  if (v31)
  {
    v30 = v31;
    v31 = 0;
    LODWORD(v22) = HIDWORD(v33);
    if (HIDWORD(v33) == (_DWORD)v33)
    {
      v24 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
      v22 = HIDWORD(v33);
      v25 = v32;
      v26 = *v24;
      *v24 = 0;
      *((_QWORD *)v25 + v22) = v26;
    }
    else
    {
      v30 = 0;
      *((_QWORD *)v32 + HIDWORD(v33)) = v21;
    }
    HIDWORD(v33) = v22 + 1;
    v27 = v30;
    v30 = 0;
    if (v27)
    {
      if (v27[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
      else
        --v27[2];
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v23 = 1;
  }
  else
  {
LABEL_21:
    v23 = 0;
    *a2 = 0;
  }
  if (v5[2] == 1)
    result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  else
    --v5[2];
  if (v4[2] == 1)
    result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  if (v3[2] != 1)
  {
    --v3[2];
    if (!v23)
      goto LABEL_37;
    goto LABEL_36;
  }
  result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  if (v23)
LABEL_36:
    result = (_QWORD *)WebCore::CSSCalcOperationNode::createMinOrMaxOrClamp(2, (uint64_t *)&v32, 1, a2);
LABEL_37:
  v28 = v32;
  if (!HIDWORD(v33))
  {
    if (!v32)
      return result;
LABEL_48:
    v32 = 0;
    LODWORD(v33) = 0;
    return (_QWORD *)WTF::fastFree(v28, v7);
  }
  v29 = 8 * HIDWORD(v33);
  do
  {
    result = *(_QWORD **)v28;
    *(_QWORD *)v28 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v28 = (WTF *)((char *)v28 + 8);
    v29 -= 8;
  }
  while (v29);
  v28 = v32;
  if (v32)
    goto LABEL_48;
  return result;
}

uint64_t WebCore::CSSMathInvert::serialize(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  if ((a3 & 2) != 0)
  {
    WTF::StringBuilder::append();
    return (***(uint64_t (****)(_QWORD, uint64_t, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 72), a2, a3);
  }
  else
  {
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    result = (***(uint64_t (****)(_QWORD, uint64_t, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 72), a2, a3);
    v7 = *(_QWORD *)(a2 + 8);
    if (v7
      && ((v8 = *(unsigned int *)(a2 + 16), v8 < *(_DWORD *)(v7 + 4))
        ? (v9 = *(_QWORD *)a2 == 0)
        : (v9 = 0),
          v9))
    {
      v10 = *(_DWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 8);
      *(_DWORD *)(a2 + 16) = v8 + 1;
      if ((v10 & 4) != 0)
        *(_BYTE *)(v11 + v8) = 41;
      else
        *(_WORD *)(v11 + 2 * v8) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

WTF *WebCore::CSSMathInvert::toSumValue@<X0>(WebCore::CSSMathInvert *this@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  void *v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unsigned __int8 v38;

  result = (WTF *)(*(_QWORD *(**)(WTF **__return_ptr))(**((_QWORD **)this + 9) + 48))(&v36);
  if (!v38)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v5 = HIDWORD(v37);
  if (HIDWORD(v37) != 1 || (v6 = v36, *(double *)v36 == 0.0))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
LABEL_62:
    result = v36;
    if (v5)
    {
      v33 = 16 * v5;
      v34 = (_QWORD *)((char *)v36 + 8);
      do
      {
        if (*v34)
          WTF::fastFree((WTF *)(*v34 - 16), v4);
        v34 += 2;
        v33 -= 16;
      }
      while (v33);
      result = v36;
    }
    if (result)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
    return result;
  }
  *(double *)v36 = 1.0 / *(double *)v36;
  v35 = 0;
  v7 = *((_QWORD *)v6 + 1);
  if (!v7)
  {
    v10 = 0;
    v8 = 0;
LABEL_15:
    v9 = (unsigned __int8 *)(v7 + 8 * v8);
    goto LABEL_16;
  }
  v8 = *(unsigned int *)(v7 - 4);
  v9 = (unsigned __int8 *)(v7 + 8 * v8);
  if (!*(_DWORD *)(v7 - 12))
  {
    v10 = (unsigned __int8 *)(v7 + 8 * v8);
    goto LABEL_15;
  }
  v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if ((_DWORD)v8)
  {
    v11 = 8 * v8;
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    while (*v10 >= 0xFEu)
    {
      v10 += 8;
      v11 -= 8;
      if (!v11)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_16:
  if (v7)
    v12 = (unsigned __int8 *)(v7 + 8 * *(unsigned int *)(v7 - 4));
  else
    v12 = 0;
  if (v12 != v10)
  {
    while (1)
    {
      v13 = *((_DWORD *)v10 + 1);
      v14 = v35;
      if (v35
        || (result = (WTF *)WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash(&v35, 8u, 0), (v14 = v35) != 0))
      {
        v15 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = *v10;
      v17 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
      v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
      v19 = (v18 ^ HIWORD(v18)) & v15;
      v20 = (unsigned __int8 *)(v14 + 8 * v19);
      v21 = *v20;
      if (v21 != 255)
      {
        v22 = 0;
        v23 = 1;
        while (v21 != v16)
        {
          if (v21 == 254)
            v22 = v20;
          v19 = (v19 + v23) & v15;
          v20 = (unsigned __int8 *)(v14 + 8 * v19);
          v21 = *v20;
          ++v23;
          if (v21 == 255)
          {
            if (v22)
            {
              *v22 = -1;
              *((_DWORD *)v22 + 1) = 0;
              --*(_DWORD *)(v35 - 16);
              LOBYTE(v16) = *v10;
              v20 = v22;
            }
            goto LABEL_31;
          }
        }
        goto LABEL_44;
      }
LABEL_31:
      *v20 = v16;
      *((_DWORD *)v20 + 1) = -v13;
      v24 = v35 ? *(_DWORD *)(v35 - 12) + 1 : 1;
      *(_DWORD *)(v35 - 12) = v24;
      v25 = v35 ? *(_DWORD *)(v35 - 12) : 0;
      v26 = (*(_DWORD *)(v35 - 16) + v25);
      v27 = *(unsigned int *)(v35 - 4);
      if (v27 > 0x400)
        break;
      if (3 * v27 <= 4 * v26)
      {
        if ((_DWORD)v27)
          goto LABEL_40;
        v28 = 8;
        goto LABEL_43;
      }
LABEL_44:
      v29 = v10 + 8;
      v10 = v9;
      if (v29 != v9)
      {
        v10 = v29;
        while (*v10 >= 0xFEu)
        {
          v10 += 8;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
      if (v10 == v12)
      {
        v30 = v35;
        v7 = *((_QWORD *)v6 + 1);
        goto LABEL_54;
      }
    }
    if (v27 > 2 * v26)
      goto LABEL_44;
LABEL_40:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v27));
LABEL_43:
    result = (WTF *)WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash(&v35, v28, v20);
    goto LABEL_44;
  }
  v30 = 0;
LABEL_54:
  v35 = 0;
  *((_QWORD *)v6 + 1) = v30;
  if (v7)
    result = (WTF *)WTF::fastFree((WTF *)(v7 - 16), v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v31 = v38;
  if (v38)
  {
    *(_QWORD *)a2 = v36;
    v32 = v37;
    v36 = 0;
    v37 = 0;
    *(_QWORD *)(a2 + 8) = v32;
    *(_BYTE *)(a2 + 16) = 1;
  }
  if (v35)
  {
    result = (WTF *)WTF::fastFree((WTF *)(v35 - 16), v4);
    v31 = v38;
  }
  if (v31)
  {
    v5 = HIDWORD(v37);
    goto LABEL_62;
  }
  return result;
}

uint64_t WebCore::CSSMathInvert::equals(uint64_t a1, _QWORD *a2)
{
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 4)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), a2[9]);
  else
    return 0;
}

_DWORD *WebCore::CSSMathInvert::toCalcExpressionNode@<X0>(WebCore::CSSMathInvert *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(**((_QWORD **)this + 9) + 64))(&v7);
  v4 = v7;
  if (v7)
  {
    v7 = 0;
    v5 = WTF::fastMalloc((WTF *)0x18);
    v6 = *((_BYTE *)v4 + 12);
    *(_DWORD *)(v5 + 8) = 1;
    *(_BYTE *)(v5 + 12) = v6;
    *(_QWORD *)v5 = off_1E3399EF0;
    *(_QWORD *)(v5 + 16) = v4;
    *a2 = v5;
    result = v7;
    v7 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

unsigned int **WebCore::CSSMathMax::create@<X0>(unsigned int **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int **v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  WTF *v22;
  _DWORD *v23;
  _OWORD v24[2];
  _OWORD v25[2];
  _OWORD v26[2];
  char v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*result && (v3 = **result, (_DWORD)v3))
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
      v7 = *v4;
      if (!v7)
        goto LABEL_16;
      v10 = *v7;
      v9 = (uint64_t)(v7 + 2);
      v8 = v10;
      if (!v10)
        goto LABEL_16;
      v11 = 0;
      v12 = 0;
      v13 = 16 * v8;
      do
      {
        v14 = *(unsigned int *)(v9 + 8);
        if ((_DWORD)v14 == -1)
          std::__throw_bad_variant_access[abi:sn180100]();
        *(_QWORD *)&v26[0] = v24;
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v14]((uint64_t *)v25, v26, v9);
        v15 = v12 + 1;
        *((_QWORD *)v6 + v12) = *(_QWORD *)&v25[0];
        v9 += 16;
        v11 += 8;
        ++v12;
        v13 -= 16;
      }
      while (v13);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)v6;
        v17 = *(_BYTE *)(*(_QWORD *)v6 + 40);
        v28[0] = *(_OWORD *)(*(_QWORD *)v6 + 41);
        *(_OWORD *)((char *)v28 + 15) = *(_OWORD *)(v16 + 56);
        if ((_DWORD)v15 == 1)
        {
LABEL_14:
          v26[0] = v28[0];
          *(_OWORD *)((char *)v26 + 15) = *(_OWORD *)((char *)v28 + 15);
          v21 = bmalloc::api::isoAllocate();
          *(_DWORD *)(v21 + 8) = 1;
          *(_QWORD *)(v21 + 24) = 0;
          *(_QWORD *)(v21 + 32) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_BYTE *)(v21 + 40) = v17;
          *(_OWORD *)(v21 + 41) = v26[0];
          *(_OWORD *)(v21 + 56) = *(_OWORD *)((char *)v26 + 15);
          *(_QWORD *)v21 = &off_1E339F950;
          result = (unsigned int **)bmalloc::api::isoAllocate();
          *(_DWORD *)result = 1;
          result[1] = (unsigned int *)v6;
          *((_DWORD *)result + 4) = v3;
          *((_DWORD *)result + 5) = v15;
          *(_QWORD *)(v21 + 72) = result;
          *(_QWORD *)a2 = v21;
          *(_DWORD *)(a2 + 16) = 0;
          return result;
        }
        v18 = 0;
        while (1)
        {
          LOBYTE(v25[0]) = v17;
          *(_OWORD *)((char *)v25 + 1) = v28[0];
          v25[1] = *(_OWORD *)((char *)v28 + 15);
          v19 = *((_QWORD *)v6 + v18 + 1);
          v20 = *(_OWORD *)(v19 + 56);
          v24[0] = *(_OWORD *)(v19 + 40);
          v24[1] = v20;
          WebCore::CSSNumericType::addTypes((uint64_t)v25, (uint64_t)v24, (uint64_t)v26);
          v17 = v26[0];
          v28[0] = *(_OWORD *)((char *)v26 + 1);
          *(_OWORD *)((char *)v28 + 15) = v26[1];
          if (!v27)
            break;
          if (v15 - 1 == ++v18)
            goto LABEL_14;
        }
        *(_BYTE *)a2 = 33;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 1;
        v22 = v6;
        do
        {
          v23 = *(_DWORD **)v22;
          *(_QWORD *)v22 = 0;
          if (v23)
          {
            if (v23[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[2];
          }
          v22 = (WTF *)((char *)v22 + 8);
          v11 -= 8;
        }
        while (v11);
      }
      else
      {
LABEL_16:
        *(_BYTE *)a2 = 9;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 1;
      }
      return (unsigned int **)WTF::fastFree(v6, v5);
    }
  }
  else
  {
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::CSSMathMax::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  _OWORD v14[2];
  char v15;
  _BYTE v16[31];
  _OWORD v17[2];
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(result + 12);
  if (!v3)
  {
    v13 = 9;
LABEL_9:
    *(_BYTE *)a2 = v13;
    *(_QWORD *)(a2 + 8) = 0;
    v11 = 1;
    goto LABEL_10;
  }
  v4 = result;
  v5 = **(_QWORD **)result;
  v6 = *(_BYTE *)(v5 + 40);
  v19[0] = *(_OWORD *)(v5 + 41);
  *(_OWORD *)((char *)v19 + 15) = *(_OWORD *)(v5 + 56);
  if (v3 != 1)
  {
    v7 = 1;
    while (1)
    {
      v15 = v6;
      *(_OWORD *)v16 = v19[0];
      *(_OWORD *)&v16[15] = *(_OWORD *)((char *)v19 + 15);
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v7);
      v9 = *(_OWORD *)(v8 + 56);
      v14[0] = *(_OWORD *)(v8 + 40);
      v14[1] = v9;
      result = WebCore::CSSNumericType::addTypes((uint64_t)&v15, (uint64_t)v14, (uint64_t)v17);
      v6 = v17[0];
      v19[0] = *(_OWORD *)((char *)v17 + 1);
      *(_OWORD *)((char *)v19 + 15) = v17[1];
      if (!v18)
        break;
      if (++v7 >= (unint64_t)*(unsigned int *)(v4 + 12))
        goto LABEL_6;
    }
    v13 = 33;
    goto LABEL_9;
  }
LABEL_6:
  v17[0] = v19[0];
  *(_OWORD *)((char *)v17 + 15) = *(_OWORD *)((char *)v19 + 15);
  v10 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 40) = v6;
  *(_OWORD *)(v10 + 41) = v17[0];
  *(_OWORD *)(v10 + 56) = *(_OWORD *)((char *)v17 + 15);
  *(_QWORD *)v10 = &off_1E339F950;
  result = bmalloc::api::isoAllocate();
  v11 = 0;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v12 = *(_QWORD *)v4;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(result + 8) = v12;
  LODWORD(v12) = *(_DWORD *)(v4 + 8);
  *(_DWORD *)(v4 + 8) = 0;
  *(_DWORD *)(result + 16) = v12;
  LODWORD(v12) = *(_DWORD *)(v4 + 12);
  *(_DWORD *)(v4 + 12) = 0;
  *(_DWORD *)(result + 20) = v12;
  *(_QWORD *)(v10 + 72) = result;
  *(_QWORD *)a2 = v10;
LABEL_10:
  *(_DWORD *)(a2 + 16) = v11;
  return result;
}

uint64_t WebCore::CSSMathMax::serialize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t (**v8)();
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  if ((a3 & 2) == 0)
    WTF::StringBuilder::append();
  v6 = *(_QWORD *)(a1 + 72);
  v7 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v8 = off_1E339FAC0;
  *v7 = off_1E339FAC0;
  v7[1] = (uint64_t (**)())a2;
  if (*(_DWORD *)(v6 + 20))
  {
    v9 = 0;
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD, BOOL))(*v7)[2])(v7, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v9), v9 == 0);
      ++v9;
    }
    while (v9 < *(unsigned int *)(v6 + 20));
    v8 = *v7;
  }
  result = ((uint64_t (*)(uint64_t (***)()))v8[1])(v7);
  if ((a3 & 2) == 0)
  {
    v11 = *(_QWORD *)(a2 + 8);
    if (v11
      && ((v12 = *(unsigned int *)(a2 + 16), v12 < *(_DWORD *)(v11 + 4))
        ? (v13 = *(_QWORD *)a2 == 0)
        : (v13 = 0),
          v13))
    {
      v14 = *(_DWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 8);
      *(_DWORD *)(a2 + 16) = v12 + 1;
      if ((v14 & 4) != 0)
        *(_BYTE *)(v15 + v12) = 41;
      else
        *(_WORD *)(v15 + 2 * v12) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

uint64_t WebCore::CSSMathMax::toSumValue@<X0>(WebCore::CSSMathMax *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  WTF *v21;
  uint64_t v22;
  unsigned __int8 v23;
  WTF *v24;
  uint64_t v25;
  unsigned __int8 v26;

  v3 = *((_QWORD *)this + 9);
  if (!*(_DWORD *)(v3 + 20))
  {
    __break(0xC471u);
LABEL_65:
    JUMPOUT(0x19591B648);
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr))(***(_QWORD ***)(v3 + 8) + 48))(&v24);
  v6 = v26;
  if (!v26 || HIDWORD(v25) != 1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (!v6)
      return result;
    goto LABEL_34;
  }
  v7 = *(unsigned int *)(v3 + 20);
  if (v7 > 1)
  {
    v8 = 1;
    while (1)
    {
      if (v8 >= v7)
      {
        __break(0xC471u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(0xC471u);
        JUMPOUT(0x19591B658);
      }
      result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * v8)
                                                                      + 48))(&v21);
      if (!v23)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        goto LABEL_57;
      }
      v9 = HIDWORD(v22);
      if (HIDWORD(v22) != 1)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        goto LABEL_49;
      }
      if (!v26)
        goto LABEL_61;
      if (!HIDWORD(v25))
      {
        __break(0xC471u);
        goto LABEL_65;
      }
      result = WTF::operator==<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>((unsigned __int8 **)v21 + 1, (uint64_t *)v24 + 1);
      v10 = v23;
      if ((result & 1) == 0)
        break;
      if (!v23)
        goto LABEL_61;
      if (!HIDWORD(v22))
        goto LABEL_62;
      if (!v26)
        goto LABEL_61;
      if (!HIDWORD(v25))
      {
        __break(0xC471u);
        JUMPOUT(0x19591B660);
      }
      if (*(double *)v21 <= *(double *)v24)
      {
        v13 = 16 * HIDWORD(v22);
        v14 = (_QWORD *)((char *)v21 + 8);
        do
        {
          if (*v14)
            WTF::fastFree((WTF *)(*v14 - 16), v5);
          v14 += 2;
          v13 -= 16;
        }
        while (v13);
        result = (uint64_t)v21;
        if (v21)
        {
          v21 = 0;
          LODWORD(v22) = 0;
          result = WTF::fastFree((WTF *)result, v5);
        }
      }
      else
      {
        v11 = 16 * HIDWORD(v25);
        v12 = (_QWORD *)((char *)v24 + 8);
        do
        {
          if (*v12)
            WTF::fastFree((WTF *)(*v12 - 16), v5);
          v12 += 2;
          v11 -= 16;
        }
        while (v11);
        result = (uint64_t)v24;
        if (v24)
        {
          v24 = 0;
          LODWORD(v25) = 0;
          result = WTF::fastFree((WTF *)result, v5);
        }
        v24 = v21;
        v25 = v22;
      }
      ++v8;
      v7 = *(unsigned int *)(v3 + 20);
      if (v8 >= v7)
      {
        v15 = v26;
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        if (v15)
        {
          v16 = HIDWORD(v25);
          goto LABEL_43;
        }
        return result;
      }
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (v10)
    {
      v9 = HIDWORD(v22);
LABEL_49:
      result = (uint64_t)v21;
      if (v9)
      {
        v19 = 16 * v9;
        v20 = (_QWORD *)((char *)v21 + 8);
        do
        {
          if (*v20)
            WTF::fastFree((WTF *)(*v20 - 16), v5);
          v20 += 2;
          v19 -= 16;
        }
        while (v19);
        result = (uint64_t)v21;
      }
      if (result)
      {
        v21 = 0;
        LODWORD(v22) = 0;
        result = WTF::fastFree((WTF *)result, v5);
      }
    }
LABEL_57:
    if (!v26)
      return result;
LABEL_34:
    result = (uint64_t)v24;
    if (HIDWORD(v25))
    {
      v17 = 16 * HIDWORD(v25);
      v18 = (_QWORD *)((char *)v24 + 8);
      do
      {
        if (*v18)
          WTF::fastFree((WTF *)(*v18 - 16), v5);
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
      result = (uint64_t)v24;
    }
    if (result)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
    return result;
  }
  v16 = 1;
LABEL_43:
  *(_QWORD *)a2 = v24;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v16;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

BOOL WTF::operator==<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _BOOL8 result;
  unsigned __int8 *v22;

  v2 = *a1;
  if (*a1)
    v3 = *((_DWORD *)v2 - 3);
  else
    v3 = 0;
  v4 = *a2;
  if (*a2)
    v5 = *(_DWORD *)(v4 - 12);
  else
    v5 = 0;
  if (v3 != v5)
    return 0;
  if (v2)
  {
    v6 = &v2[8 * *((unsigned int *)v2 - 1)];
    if (v4)
      goto LABEL_10;
  }
  else
  {
    v6 = 0;
    if (v4)
    {
LABEL_10:
      v7 = v4 + 8 * *(unsigned int *)(v4 - 4);
      if (v2)
        goto LABEL_11;
LABEL_19:
      v9 = 0;
      v8 = 0;
      goto LABEL_20;
    }
  }
  v7 = 0;
  if (!v2)
    goto LABEL_19;
LABEL_11:
  v8 = *((unsigned int *)v2 - 1);
  v9 = &v2[8 * v8];
  if (!*((_DWORD *)v2 - 3))
  {
LABEL_20:
    v11 = &v2[8 * v8];
    v2 = v9;
    v9 = v11;
    goto LABEL_21;
  }
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    while (*v2 >= 0xFEu)
    {
      v2 += 8;
      v10 -= 8;
      if (!v10)
      {
        v2 = v9;
        break;
      }
    }
  }
LABEL_21:
  if (v2 == v6)
    return 1;
  if (v4)
  {
    v12 = *(_DWORD *)(v4 - 8);
    while (1)
    {
      v13 = *v2;
      v14 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
      v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
      v16 = (v15 ^ HIWORD(v15)) & v12;
      v17 = *(unsigned __int8 *)(v4 + 8 * v16);
      if (v17 != v13)
      {
        v18 = 1;
        while (v17 != 255)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(unsigned __int8 *)(v4 + 8 * v16);
          ++v18;
          if (v17 == v13)
            goto LABEL_30;
        }
        v16 = *(unsigned int *)(v4 - 4);
      }
LABEL_30:
      v19 = v4 + 8 * v16;
      if (v19 == v7 || *((_DWORD *)v2 + 1) != *(_DWORD *)(v19 + 4))
        return 0;
      v20 = v2 + 8;
      v2 = v9;
      if (v20 != v9)
      {
        v2 = v20;
        while (*v2 >= 0xFEu)
        {
          v2 += 8;
          if (v2 == v9)
          {
            v2 = v9;
            break;
          }
        }
      }
      if (v2 == v6)
        return 1;
    }
  }
  if (!v7 || *((_DWORD *)v2 + 1) != MEMORY[4])
    return 0;
  do
  {
    v22 = v2 + 8;
    v2 = v9;
    if (v22 != v9)
    {
      v2 = v22;
      while (*v2 >= 0xFEu)
      {
        v2 += 8;
        if (v2 == v9)
        {
          v2 = v9;
          break;
        }
      }
    }
    result = v2 == v6;
  }
  while (v2 != v6 && *((_DWORD *)v2 + 1) == MEMORY[4]);
  return result;
}

WTF *WebCore::CSSMathMax::toCalcExpressionNode@<X0>(WTF *this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 9) + 20);
  if (!(_DWORD)v4)
    goto LABEL_28;
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v5 = this;
  LODWORD(v23) = *(_DWORD *)(*((_QWORD *)this + 9) + 20);
  v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
  v6 = *((_QWORD *)v5 + 9);
  v7 = *(unsigned int *)(v6 + 20);
  if (!(_DWORD)v7)
    goto LABEL_28;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = 8 * v7;
  do
  {
    (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)v8 + 64))(&v21);
    v10 = v21;
    if (v21)
    {
      v20 = v21;
      v21 = 0;
      LODWORD(v11) = HIDWORD(v23);
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v20);
        v11 = HIDWORD(v23);
        v13 = v22;
        v14 = *v12;
        *v12 = 0;
        *((_QWORD *)v13 + v11) = v14;
      }
      else
      {
        v20 = 0;
        *((_QWORD *)v22 + HIDWORD(v23)) = v10;
      }
      HIDWORD(v23) = v11 + 1;
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
      }
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
    }
    v8 += 8;
    v9 -= 8;
  }
  while (v9);
  if (HIDWORD(v23))
  {
    WebCore::CSSCalcOperationNode::createMinOrMaxOrClamp(1, (uint64_t *)&v22, 1, a3);
    if (HIDWORD(v23))
    {
      v17 = v22;
      v18 = 8 * HIDWORD(v23);
      do
      {
        v19 = *(_DWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (v19[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
          else
            --v19[2];
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
LABEL_28:
    *a3 = 0;
  }
  this = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    return (WTF *)WTF::fastFree(this, a2);
  }
  return this;
}

void WebCore::CSSMathClamp::~CSSMathClamp(WebCore::CSSMathClamp *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSMathClamp::~CSSMathClamp(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v3 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  *(_QWORD *)this = &off_1E339F420;
  v6 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
    else
      *v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::CSSMathClamp::getType(WebCore::CSSMathClamp *this)
{
  return 3;
}

_DWORD *WebCore::CSSMathValue::toCSSValue@<X0>(WebCore::CSSMathValue *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(*(_QWORD *)this + 64))(&v9);
  v4 = v9;
  if (v9)
  {
    v9 = 0;
    v5 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 2;
    v6 = *(_BYTE *)(v5 + 6);
    *(_WORD *)(v5 + 4) = -14336;
    *(_BYTE *)(v5 + 6) = v6 & 0xFC;
    *(_QWORD *)(v5 + 8) = v4;
    *(_BYTE *)(v5 + 16) = 0;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 2;
    v8 = *(_BYTE *)(v7 + 6);
    *(_WORD *)(v7 + 4) = 73;
    *(_BYTE *)(v7 + 6) = v8 & 0xFC;
    *(_QWORD *)(v7 + 8) = v5;
    *a2 = v7;
    result = v9;
    v9 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::CSSMathClamp::getOperator(WebCore::CSSMathClamp *this)
{
  return 6;
}

void WebCore::CSSMathInvert::~CSSMathInvert(WebCore::CSSMathInvert *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSMathInvert::getType(WebCore::CSSMathInvert *this)
{
  return 4;
}

uint64_t WebCore::CSSMathInvert::getOperator(WebCore::CSSMathInvert *this)
{
  return 3;
}

void WebCore::CSSMathMax::~CSSMathMax(WebCore::CSSMathMax *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSMathMax::~CSSMathMax(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;

  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v7 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD ***)(v3 + 8);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (v10[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
            else
              --v10[2];
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)(v3 + 8);
      if (v11)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v11, a2);
      }
      bmalloc::api::isoDeallocate((bmalloc::api *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::CSSMathMax::getType(WebCore::CSSMathMax *this)
{
  return 6;
}

BOOL WebCore::CSSMathMax::equals(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t i;
  uint64_t v9;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 6
    && (v4 = *(_QWORD *)(a1 + 72), v5 = a2[9], v6 = *(unsigned int *)(v4 + 20), (_DWORD)v6 == *(_DWORD *)(v5 + 20)))
  {
    if ((_DWORD)v6)
    {
      v7 = 0;
      for (i = 0; i != v6; v7 = i >= v6)
      {
        if (i >= *(unsigned int *)(v4 + 20) || i >= *(unsigned int *)(v5 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19591BD88);
        }
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * i);
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 56))(v9, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * i)) & 1) == 0)break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t WebCore::CSSMathMax::getOperator(WebCore::CSSMathMax *this)
{
  return 5;
}

void WebCore::CSSLCH::~CSSLCH(WebCore::CSSLCH *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSLCH::~CSSLCH(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v3 = *((unsigned int *)this + 24);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v3])(&v10, (char *)this + 88);
  *((_DWORD *)this + 24) = -1;
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v4])(&v11, (char *)this + 72);
  *((_DWORD *)this + 20) = -1;
  v5 = *((unsigned int *)this + 16);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v12, (char *)this + 56);
  *((_DWORD *)this + 16) = -1;
  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15CSSKeywordValueENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v6])(&v13, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  *(_QWORD *)this = &off_1E339F420;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::CSSLab::~CSSLab(WebCore::CSSLab *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSLCH::~CSSLCH(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CSSOKLCH::~CSSOKLCH(WebCore::CSSOKLCH *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSLCH::~CSSLCH(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CSSOKLab::~CSSOKLab(WebCore::CSSOKLab *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSLCH::~CSSLCH(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CSSRGB::~CSSRGB(WebCore::CSSRGB *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSLCH::~CSSLCH(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toCSSColorRGBComp(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::toCSSColorRGBComp(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toCSSColorRGBComp(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_0,WebCore::toCSSColorRGBComp(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::negatedType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1,WebCore::negatedType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v2;

  *(_QWORD *)&result = 0x8000000080000000;
  *(_QWORD *)&v2 = 0x8000000080000000;
  *((_QWORD *)&v2 + 1) = 0x8000000080000000;
  *a1 = v2;
  a1[1] = xmmword_1968BD2E0;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::negatedType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1,WebCore::negatedType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int128 v11;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_OWORD *)(v2 + 40);
    v4 = *(_OWORD *)(v2 + 56);
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    if (*(_DWORD *)a2 != 0x80000000)
      *(_DWORD *)a2 = -*(_DWORD *)a2;
    v5 = *(_DWORD *)(a2 + 4);
    if (v5 != 0x80000000)
      *(_DWORD *)(a2 + 4) = -v5;
    v6 = *(_DWORD *)(a2 + 8);
    if (v6 != 0x80000000)
      *(_DWORD *)(a2 + 8) = -v6;
    v7 = *(_DWORD *)(a2 + 12);
    if (v7 != 0x80000000)
      *(_DWORD *)(a2 + 12) = -v7;
    v8 = *(_DWORD *)(a2 + 16);
    if (v8 != 0x80000000)
      *(_DWORD *)(a2 + 16) = -v8;
    v9 = *(_DWORD *)(a2 + 20);
    if (v9 != 0x80000000)
      *(_DWORD *)(a2 + 20) = -v9;
    v10 = *(_DWORD *)(a2 + 24);
    if (v10 != 0x80000000)
      *(_DWORD *)(a2 + 24) = -v10;
  }
  else
  {
    *(_QWORD *)&v3 = 0x8000000080000000;
    *(_QWORD *)&v11 = 0x8000000080000000;
    *((_QWORD *)&v11 + 1) = 0x8000000080000000;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = xmmword_1968BD2E0;
  }
  return *(double *)&v3;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<Q0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  _BYTE v10[36];

  v3 = *a1 * 100.0;
  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(3u, 1, (uint64_t)v10);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v9[0] = v5;
  v9[1] = xmmword_1968BD2E0;
  v6 = v9;
  if (v10[32])
    v6 = v10;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  result = *(__n128 *)v6;
  v8 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v8;
  *(_QWORD *)v4 = &off_1E339F080;
  *(double *)(v4 + 72) = v3;
  *(_BYTE *)(v4 + 80) = 3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 64);
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(*a1 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if ((*(_DWORD *)(*a1 + 56) & 0x7FFFFFFF) != 0)
    v6 = v5.u32[0] + 1;
  if ((v4 & 0x7FFFFFFF) != 0)
    v7 = ((*(_DWORD *)(*a1 + 60) & 0x7FFFFFFF) != 0) + 1;
  else
    v7 = (*(_DWORD *)(*a1 + 60) & 0x7FFFFFFF) != 0;
  v8 = v6 + v7;
  if (v8 != 1)
  {
    if (!v8 && *(unsigned __int8 *)(v3 + 68) == 255)
      goto LABEL_9;
LABEL_11:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a2 + 8) = 9;
    v9 = 1;
    goto LABEL_12;
  }
  if ((v4 | 0x80000000) == 0x80000000)
    goto LABEL_11;
LABEL_9:
  v9 = 0;
  *a1 = 0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_12:
  *(_DWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  _BYTE v8[8];

  v3 = *a1;
  *a1 = 0;
  v5 = v3;
  v6 = 0;
  result = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>(&v5, &v7);
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 24) = 0;
  if (v6 != -1)
    return ((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E339FA70[v6])(v8, &v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_2,WebCore::CSSRGB::rectifyCSSColorRGBComp(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  if (!v4 || *(_DWORD *)(v4 + 4) != 4)
    goto LABEL_3;
  v7 = *(unsigned __int8 **)(v4 + 8);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    v8 = MEMORY[0x1E0CBF868];
    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7);
    if (v9 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[2]) != v9)
    {
      goto LABEL_3;
    }
    v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[3]);
  }
  else
  {
    v11 = *(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A));
    v8 = MEMORY[0x1E0CBF868];
    if (v11 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
      || (*((unsigned __int16 *)v7 + 1) | (32 * (*((unsigned __int16 *)v7 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
      || (*((unsigned __int16 *)v7 + 2) | (32 * (*((unsigned __int16 *)v7 + 2) - 65 < 0x1A))) != v11)
    {
      goto LABEL_3;
    }
    v10 = *((unsigned __int16 *)v7 + 3) | (32 * (*((unsigned __int16 *)v7 + 3) - 65 < 0x1A));
  }
  if (v10 == *(unsigned __int8 *)(v8 + 101))
  {
    v6 = 0;
    *a1 = 0;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_4;
  }
LABEL_3:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)(a2 + 8) = 9;
  v6 = 1;
LABEL_4:
  *(_DWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSMathMax::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_0,void,WebCore::CSSNumericValue const&,BOOL>::call(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t), char a3)
{
  if ((a3 & 1) == 0)
    WTF::StringBuilder::append();
  return (**a2)(a2, *(_QWORD *)(a1 + 8), 3);
}

unsigned int **WebCore::CSSMathMin::create@<X0>(unsigned int **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int **v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;

  v19 = 0;
  v20 = 0;
  if (*result)
  {
    v3 = **result;
    if ((_DWORD)v3)
    {
      if (v3 >> 29)
      {
LABEL_22:
        __break(0xC471u);
        return result;
      }
      v4 = result;
      v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
      LODWORD(v20) = v3;
      v19 = v5;
      v6 = *v4;
      if (v6)
      {
        v9 = *v6;
        v8 = (uint64_t)(v6 + 2);
        v7 = v9;
        if (v9)
        {
          v10 = v5;
          v11 = 0;
          v12 = 16 * v7;
          while (1)
          {
            v13 = *(unsigned int *)(v8 + 8);
            if ((_DWORD)v13 == -1)
              break;
            v23 = &v22;
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v13](&v21, (__int128 *)&v23, v8);
            v14 = v11 + 1;
            *((_QWORD *)v10 + v11) = v21;
            v8 += 16;
            ++v11;
            v12 -= 16;
            if (!v12)
            {
              HIDWORD(v20) = v14;
              goto LABEL_10;
            }
          }
          result = (unsigned int **)std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_22;
        }
      }
    }
  }
LABEL_10:
  result = (unsigned int **)WebCore::CSSMathMin::create((uint64_t)&v19, a2);
  v16 = v19;
  if (HIDWORD(v20))
  {
    v17 = 8 * HIDWORD(v20);
    v18 = v19;
    do
    {
      result = *(unsigned int ***)v18;
      *(_QWORD *)v18 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (unsigned int **)(*((uint64_t (**)(unsigned int **))*result + 2))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v18 = (WTF *)((char *)v18 + 8);
      v17 -= 8;
    }
    while (v17);
  }
  if (v16)
    return (unsigned int **)WTF::fastFree(v16, v15);
  return result;
}

uint64_t WebCore::CSSMathMin::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  _OWORD v14[2];
  char v15;
  _BYTE v16[31];
  _OWORD v17[2];
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(result + 12);
  if (!v3)
  {
    v13 = 9;
LABEL_9:
    *(_BYTE *)a2 = v13;
    *(_QWORD *)(a2 + 8) = 0;
    v11 = 1;
    goto LABEL_10;
  }
  v4 = result;
  v5 = **(_QWORD **)result;
  v6 = *(_BYTE *)(v5 + 40);
  v19[0] = *(_OWORD *)(v5 + 41);
  *(_OWORD *)((char *)v19 + 15) = *(_OWORD *)(v5 + 56);
  if (v3 != 1)
  {
    v7 = 1;
    while (1)
    {
      v15 = v6;
      *(_OWORD *)v16 = v19[0];
      *(_OWORD *)&v16[15] = *(_OWORD *)((char *)v19 + 15);
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v7);
      v9 = *(_OWORD *)(v8 + 56);
      v14[0] = *(_OWORD *)(v8 + 40);
      v14[1] = v9;
      result = WebCore::CSSNumericType::addTypes((uint64_t)&v15, (uint64_t)v14, (uint64_t)v17);
      v6 = v17[0];
      v19[0] = *(_OWORD *)((char *)v17 + 1);
      *(_OWORD *)((char *)v19 + 15) = v17[1];
      if (!v18)
        break;
      if (++v7 >= (unint64_t)*(unsigned int *)(v4 + 12))
        goto LABEL_6;
    }
    v13 = 33;
    goto LABEL_9;
  }
LABEL_6:
  v17[0] = v19[0];
  *(_OWORD *)((char *)v17 + 15) = *(_OWORD *)((char *)v19 + 15);
  v10 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 40) = v6;
  *(_OWORD *)(v10 + 41) = v17[0];
  *(_OWORD *)(v10 + 56) = *(_OWORD *)((char *)v17 + 15);
  *(_QWORD *)v10 = &off_1E339FAE8;
  result = bmalloc::api::isoAllocate();
  v11 = 0;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v12 = *(_QWORD *)v4;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(result + 8) = v12;
  LODWORD(v12) = *(_DWORD *)(v4 + 8);
  *(_DWORD *)(v4 + 8) = 0;
  *(_DWORD *)(result + 16) = v12;
  LODWORD(v12) = *(_DWORD *)(v4 + 12);
  *(_DWORD *)(v4 + 12) = 0;
  *(_DWORD *)(result + 20) = v12;
  *(_QWORD *)(v10 + 72) = result;
  *(_QWORD *)a2 = v10;
LABEL_10:
  *(_DWORD *)(a2 + 16) = v11;
  return result;
}

uint64_t WebCore::CSSMathMin::serialize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t (**v8)();
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  if ((a3 & 2) == 0)
    WTF::StringBuilder::append();
  v6 = *(_QWORD *)(a1 + 72);
  v7 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v8 = off_1E339FDA8;
  *v7 = off_1E339FDA8;
  v7[1] = (uint64_t (**)())a2;
  if (*(_DWORD *)(v6 + 20))
  {
    v9 = 0;
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD, BOOL))(*v7)[2])(v7, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v9), v9 == 0);
      ++v9;
    }
    while (v9 < *(unsigned int *)(v6 + 20));
    v8 = *v7;
  }
  result = ((uint64_t (*)(uint64_t (***)()))v8[1])(v7);
  if ((a3 & 2) == 0)
  {
    v11 = *(_QWORD *)(a2 + 8);
    if (v11
      && ((v12 = *(unsigned int *)(a2 + 16), v12 < *(_DWORD *)(v11 + 4))
        ? (v13 = *(_QWORD *)a2 == 0)
        : (v13 = 0),
          v13))
    {
      v14 = *(_DWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 8);
      *(_DWORD *)(a2 + 16) = v12 + 1;
      if ((v14 & 4) != 0)
        *(_BYTE *)(v15 + v12) = 41;
      else
        *(_WORD *)(v15 + 2 * v12) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

uint64_t WebCore::CSSMathMin::toSumValue@<X0>(WebCore::CSSMathMin *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  WTF *v21;
  uint64_t v22;
  unsigned __int8 v23;
  WTF *v24;
  uint64_t v25;
  unsigned __int8 v26;

  v3 = *((_QWORD *)this + 9);
  if (!*(_DWORD *)(v3 + 20))
  {
    __break(0xC471u);
LABEL_65:
    JUMPOUT(0x19591CD20);
  }
  result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr))(***(_QWORD ***)(v3 + 8) + 48))(&v24);
  v6 = v26;
  if (!v26 || HIDWORD(v25) != 1)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (!v6)
      return result;
    goto LABEL_34;
  }
  v7 = *(unsigned int *)(v3 + 20);
  if (v7 > 1)
  {
    v8 = 1;
    while (1)
    {
      if (v8 >= v7)
      {
        __break(0xC471u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(0xC471u);
        JUMPOUT(0x19591CD30);
      }
      result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8 * v8)
                                                                      + 48))(&v21);
      if (!v23)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        goto LABEL_57;
      }
      v9 = HIDWORD(v22);
      if (HIDWORD(v22) != 1)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        goto LABEL_49;
      }
      if (!v26)
        goto LABEL_61;
      if (!HIDWORD(v25))
      {
        __break(0xC471u);
        goto LABEL_65;
      }
      result = WTF::operator==<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>((unsigned __int8 **)v21 + 1, (uint64_t *)v24 + 1);
      v10 = v23;
      if ((result & 1) == 0)
        break;
      if (!v23)
        goto LABEL_61;
      if (!HIDWORD(v22))
        goto LABEL_62;
      if (!v26)
        goto LABEL_61;
      if (!HIDWORD(v25))
      {
        __break(0xC471u);
        JUMPOUT(0x19591CD38);
      }
      if (*(double *)v21 >= *(double *)v24)
      {
        v13 = 16 * HIDWORD(v22);
        v14 = (_QWORD *)((char *)v21 + 8);
        do
        {
          if (*v14)
            WTF::fastFree((WTF *)(*v14 - 16), v5);
          v14 += 2;
          v13 -= 16;
        }
        while (v13);
        result = (uint64_t)v21;
        if (v21)
        {
          v21 = 0;
          LODWORD(v22) = 0;
          result = WTF::fastFree((WTF *)result, v5);
        }
      }
      else
      {
        v11 = 16 * HIDWORD(v25);
        v12 = (_QWORD *)((char *)v24 + 8);
        do
        {
          if (*v12)
            WTF::fastFree((WTF *)(*v12 - 16), v5);
          v12 += 2;
          v11 -= 16;
        }
        while (v11);
        result = (uint64_t)v24;
        if (v24)
        {
          v24 = 0;
          LODWORD(v25) = 0;
          result = WTF::fastFree((WTF *)result, v5);
        }
        v24 = v21;
        v25 = v22;
      }
      ++v8;
      v7 = *(unsigned int *)(v3 + 20);
      if (v8 >= v7)
      {
        v15 = v26;
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        if (v15)
        {
          v16 = HIDWORD(v25);
          goto LABEL_43;
        }
        return result;
      }
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (v10)
    {
      v9 = HIDWORD(v22);
LABEL_49:
      result = (uint64_t)v21;
      if (v9)
      {
        v19 = 16 * v9;
        v20 = (_QWORD *)((char *)v21 + 8);
        do
        {
          if (*v20)
            WTF::fastFree((WTF *)(*v20 - 16), v5);
          v20 += 2;
          v19 -= 16;
        }
        while (v19);
        result = (uint64_t)v21;
      }
      if (result)
      {
        v21 = 0;
        LODWORD(v22) = 0;
        result = WTF::fastFree((WTF *)result, v5);
      }
    }
LABEL_57:
    if (!v26)
      return result;
LABEL_34:
    result = (uint64_t)v24;
    if (HIDWORD(v25))
    {
      v17 = 16 * HIDWORD(v25);
      v18 = (_QWORD *)((char *)v24 + 8);
      do
      {
        if (*v18)
          WTF::fastFree((WTF *)(*v18 - 16), v5);
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
      result = (uint64_t)v24;
    }
    if (result)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
    return result;
  }
  v16 = 1;
LABEL_43:
  *(_QWORD *)a2 = v24;
  *(_DWORD *)(a2 + 8) = v25;
  *(_DWORD *)(a2 + 12) = v16;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

WTF *WebCore::CSSMathMin::toCalcExpressionNode@<X0>(WTF *this@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 9) + 20);
  if (!(_DWORD)v4)
    goto LABEL_28;
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v5 = this;
  LODWORD(v23) = *(_DWORD *)(*((_QWORD *)this + 9) + 20);
  v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
  v6 = *((_QWORD *)v5 + 9);
  v7 = *(unsigned int *)(v6 + 20);
  if (!(_DWORD)v7)
    goto LABEL_28;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = 8 * v7;
  do
  {
    (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)v8 + 64))(&v21);
    v10 = v21;
    if (v21)
    {
      v20 = v21;
      v21 = 0;
      LODWORD(v11) = HIDWORD(v23);
      if (HIDWORD(v23) == (_DWORD)v23)
      {
        v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v20);
        v11 = HIDWORD(v23);
        v13 = v22;
        v14 = *v12;
        *v12 = 0;
        *((_QWORD *)v13 + v11) = v14;
      }
      else
      {
        v20 = 0;
        *((_QWORD *)v22 + HIDWORD(v23)) = v10;
      }
      HIDWORD(v23) = v11 + 1;
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
      }
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
    }
    v8 += 8;
    v9 -= 8;
  }
  while (v9);
  if (HIDWORD(v23))
  {
    WebCore::CSSCalcOperationNode::createMinOrMaxOrClamp(0, (uint64_t *)&v22, 1, a3);
    if (HIDWORD(v23))
    {
      v17 = v22;
      v18 = 8 * HIDWORD(v23);
      do
      {
        v19 = *(_DWORD **)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (v19[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
          else
            --v19[2];
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
LABEL_28:
    *a3 = 0;
  }
  this = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    return (WTF *)WTF::fastFree(this, a2);
  }
  return this;
}

uint64_t WebCore::CSSMathNegate::serialize(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  if ((a3 & 2) == 0)
    WTF::StringBuilder::append();
  v7 = *(_QWORD *)(a2 + 8);
  if (v7
    && ((v8 = *(unsigned int *)(a2 + 16), v8 < *(_DWORD *)(v7 + 4))
      ? (v9 = *(_QWORD *)a2 == 0)
      : (v9 = 0),
        v9))
  {
    v14 = *(_DWORD *)(v7 + 16);
    v15 = *(_QWORD *)(v7 + 8);
    *(_DWORD *)(a2 + 16) = v8 + 1;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v8) = 45;
    else
      *(_WORD *)(v15 + 2 * v8) = 45;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  result = (***(uint64_t (****)(_QWORD, uint64_t, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 72), a2, a3);
  if ((a3 & 2) == 0)
  {
    v11 = *(_QWORD *)(a2 + 8);
    if (v11
      && ((v12 = *(unsigned int *)(a2 + 16), v12 < *(_DWORD *)(v11 + 4))
        ? (v13 = *(_QWORD *)a2 == 0)
        : (v13 = 0),
          v13))
    {
      v16 = *(_DWORD *)(v11 + 16);
      v17 = *(_QWORD *)(v11 + 8);
      *(_DWORD *)(a2 + 16) = v12 + 1;
      if ((v16 & 4) != 0)
        *(_BYTE *)(v17 + v12) = 41;
      else
        *(_WORD *)(v17 + 2 * v12) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

_QWORD *WebCore::CSSMathNegate::toSumValue@<X0>(WebCore::CSSMathNegate *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  double *v4;
  unsigned int v5;
  uint64_t v6;
  double *v7;
  double *v8;
  int v9;
  unsigned int v10;
  char v11;

  result = (*(_QWORD *(**)(double **__return_ptr))(**((_QWORD **)this + 9) + 48))(&v8);
  if (v11)
  {
    v4 = v8;
    v5 = v10;
    if (v10)
    {
      v6 = 16 * v10;
      v7 = v8;
      do
      {
        *v7 = -*v7;
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    *(_QWORD *)a2 = v4;
    *(_DWORD *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 12) = v5;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::CSSMathNegate::equals(uint64_t a1, _QWORD *a2)
{
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 7)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), a2[9]);
  else
    return 0;
}

_DWORD *WebCore::CSSMathNegate::toCalcExpressionNode@<X0>(WebCore::CSSMathNegate *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(**((_QWORD **)this + 9) + 64))(&v7);
  v4 = v7;
  if (v7)
  {
    v7 = 0;
    v5 = WTF::fastMalloc((WTF *)0x18);
    v6 = *((_BYTE *)v4 + 12);
    *(_DWORD *)(v5 + 8) = 1;
    *(_BYTE *)(v5 + 12) = v6;
    *(_QWORD *)v5 = off_1E339A120;
    *(_QWORD *)(v5 + 16) = v4;
    *a2 = v5;
    result = v7;
    v7 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

unsigned int **WebCore::CSSMathProduct::create@<X0>(unsigned int **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int **v4;
  void *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  _OWORD v23[2];
  char v24;
  char v25;

  if (*result && (v3 = **result, (_DWORD)v3))
  {
    if (v3 >> 29)
    {
LABEL_23:
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v3));
      v20 = v3;
      v19 = v6;
      v7 = *v4;
      if (v7 && (v10 = *v7, v9 = (uint64_t)(v7 + 2), (v8 = v10) != 0))
      {
        v11 = 0;
        v12 = 0;
        v13 = 16 * v8;
        do
        {
          v14 = *(unsigned int *)(v9 + 8);
          if ((_DWORD)v14 == -1)
          {
            result = (unsigned int **)std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_23;
          }
          *(_QWORD *)&v23[0] = &v25;
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v14](&v22, v23, v9);
          v6[v12] = v22;
          v9 += 16;
          ++v12;
          ++v11;
          v13 -= 16;
        }
        while (v13);
        v21 = v11;
        if (!v11)
          goto LABEL_13;
        WebCore::CSSNumericType::multiplyTypes(&v19, (uint64_t)v23);
        if (v24)
        {
          v15 = bmalloc::api::isoAllocate();
          *(_DWORD *)(v15 + 8) = 1;
          *(_QWORD *)(v15 + 24) = 0;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          v16 = v23[1];
          *(_OWORD *)(v15 + 40) = v23[0];
          *(_OWORD *)(v15 + 56) = v16;
          *(_QWORD *)v15 = &off_1E339FBA8;
          result = (unsigned int **)bmalloc::api::isoAllocate();
          *(_DWORD *)result = 1;
          result[1] = (unsigned int *)v6;
          *((_DWORD *)result + 4) = v3;
          *((_DWORD *)result + 5) = v11;
          *(_QWORD *)(v15 + 72) = result;
          *(_QWORD *)a2 = v15;
          *(_DWORD *)(a2 + 16) = 0;
          return result;
        }
        *(_BYTE *)a2 = 33;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 1;
        v17 = v6;
        do
        {
          v18 = (_DWORD *)*v17;
          *v17 = 0;
          if (v18)
          {
            if (v18[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
            else
              --v18[2];
          }
          ++v17;
          --v12;
        }
        while (v12 * 8);
      }
      else
      {
LABEL_13:
        *(_BYTE *)a2 = 9;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 1;
      }
      return (unsigned int **)WTF::fastFree((WTF *)v6, v5);
    }
  }
  else
  {
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t **WebCore::CSSNumericType::multiplyTypes@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int32x4_t v4;
  int32x2_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  uint64_t v12;
  BOOL v13;
  int8x8_t v14;
  int32x2_t v15;
  int8x8_t v16;
  int v17;
  int v18;
  int v19;

  v2 = *((unsigned int *)result + 3);
  if (!(_DWORD)v2)
  {
LABEL_19:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  v3 = **result;
  v4 = *(int32x4_t *)(v3 + 40);
  v5 = *(int32x2_t *)(v3 + 56);
  v6 = *(_DWORD *)(v3 + 64);
  v7 = *(unsigned __int8 *)(v3 + 68);
  if ((_DWORD)v2 != 1)
  {
    v9 = (uint64_t)(*result + 1);
    v10 = v2 - 1;
    v11.i64[0] = 0x8000000080000000;
    v11.i64[1] = 0x8000000080000000;
    while (1)
    {
      v12 = *(_QWORD *)v9;
      v8 = *(unsigned __int8 *)(*(_QWORD *)v9 + 68);
      if ((_DWORD)v7 != 255)
      {
        v13 = (_DWORD)v8 == 255 || (_DWORD)v7 == (_DWORD)v8;
        v8 = v7;
        if (!v13)
          goto LABEL_19;
      }
      v4 = (int32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v4, v11), *(int8x16_t *)(v12 + 40), (int8x16_t)vaddq_s32((int32x4_t)vbicq_s8(*(int8x16_t *)(v12 + 40), (int8x16_t)vceqq_s32(*(int32x4_t *)(v12 + 40), v11)), v4));
      v14 = (int8x8_t)vceq_s32(v5, (int32x2_t)0x8000000080000000);
      v15 = *(int32x2_t *)(v12 + 56);
      v16 = (int8x8_t)vadd_s32((int32x2_t)vbic_s8((int8x8_t)v15, (int8x8_t)vceq_s32(v15, (int32x2_t)0x8000000080000000)), v5);
      v17 = *(_DWORD *)(v12 + 64);
      if (v17 == 0x80000000)
        v18 = 0;
      else
        v18 = *(_DWORD *)(v12 + 64);
      v19 = v18 + v6;
      v5 = (int32x2_t)vbsl_s8(v14, (int8x8_t)v15, v16);
      if (v6 == 0x80000000)
        v6 = v17;
      else
        v6 = v19;
      v9 += 8;
      v7 = v8;
      if (!--v10)
        goto LABEL_18;
    }
  }
  LOBYTE(v8) = *(_BYTE *)(v3 + 68);
LABEL_18:
  *(int32x4_t *)a2 = v4;
  *(int32x2_t *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 28) = v8;
  *(_WORD *)(a2 + 29) = *(_WORD *)(v3 + 69);
  *(_BYTE *)(a2 + 31) = *(_BYTE *)(v3 + 71);
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

uint64_t WebCore::CSSMathProduct::serialize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t (**v7)();
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  _BYTE v15[2];

  v15[0] = a3;
  if ((a3 & 2) == 0)
    WTF::StringBuilder::append();
  v5 = *(_QWORD *)(a1 + 72);
  v6 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v7 = off_1E339FDF0;
  *v6 = off_1E339FDF0;
  v6[1] = (uint64_t (**)())v15;
  v6[2] = (uint64_t (**)())a2;
  if (*(_DWORD *)(v5 + 20))
  {
    v8 = 0;
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD, BOOL))(*v6)[2])(v6, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8), v8 == 0);
      ++v8;
    }
    while (v8 < *(unsigned int *)(v5 + 20));
    v7 = *v6;
  }
  result = ((uint64_t (*)(uint64_t (***)()))v7[1])(v6);
  if ((v15[0] & 2) == 0)
  {
    v15[1] = 41;
    v10 = *(_QWORD *)(a2 + 8);
    if (v10
      && ((v11 = *(unsigned int *)(a2 + 16), v11 < *(_DWORD *)(v10 + 4))
        ? (v12 = *(_QWORD *)a2 == 0)
        : (v12 = 0),
          v12))
    {
      v13 = *(_DWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(a2 + 16) = v11 + 1;
      if ((v13 & 4) != 0)
        *(_BYTE *)(v14 + v11) = 41;
      else
        *(_WORD *)(v14 + 2 * v11) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

WTF *WebCore::CSSMathProduct::toSumValue@<X0>(WebCore::CSSMathProduct *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v4;
  WTF *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  _DWORD *v38;
  void *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  void *v67;
  unint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned __int8 *v79;
  int v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  double *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  WTF *v100;
  char *v101;
  WTF *v102;
  WTF *v103;
  unsigned __int8 *v104;
  double v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  _DWORD *v109;
  WTF *v110;
  unsigned __int8 *v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v110 = (WTF *)0x3FF0000000000000;
  v111 = 0;
  v4 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0x3FF0000000000000;
  result = (WTF *)WTF::HashTable<WebCore::CSSUnitType,WTF::KeyValuePair<WebCore::CSSUnitType,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSUnitType,int>>,WTF::IntHash<WebCore::CSSUnitType>,WTF::HashMap<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>>::HashTable(v4 + 1, &v111);
  if (v111)
    result = (WTF *)WTF::fastFree((WTF *)(v111 - 16), v6);
  v7 = *((_QWORD *)this + 9);
  v8 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v8)
  {
    v95 = a2;
    v9 = *(_QWORD *)(v7 + 8);
    v97 = v9 + 8 * v8;
    v10 = 1;
    while (1)
    {
      v98 = v9;
      v99 = (WTF *)v4;
      (*(void (**)(WTF **__return_ptr))(**(_QWORD **)v9 + 48))(&v110);
      if (!v112)
        break;
      v107 = 0;
      v108 = 0;
      v4 = 0;
      if (!v10)
        goto LABEL_116;
      v96 = v10;
      v102 = v99;
      v100 = (WTF *)((char *)v99 + 16 * v10);
      v10 = 0;
      do
      {
        if (!v112)
          __break(1u);
        if (HIDWORD(v111))
        {
          v12 = v110;
          v101 = (char *)v110 + 16 * HIDWORD(v111);
          do
          {
            v105 = *(double *)v102 * *(double *)v12;
            WTF::HashTable<WebCore::CSSUnitType,WTF::KeyValuePair<WebCore::CSSUnitType,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSUnitType,int>>,WTF::IntHash<WebCore::CSSUnitType>,WTF::HashMap<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>>::HashTable((uint64_t *)&v109, (unsigned __int8 **)v102 + 1);
            v13 = *((_QWORD *)v12 + 1);
            v103 = v12;
            if (v13)
            {
              v14 = *(unsigned int *)(v13 - 4);
              v15 = (unsigned __int8 *)(v13 + 8 * v14);
              if (*(_DWORD *)(v13 - 12))
              {
                v16 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
                if ((_DWORD)v14)
                {
                  v17 = 8 * v14;
                  v16 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
                  while (*v16 >= 0xFEu)
                  {
                    v16 += 8;
                    v17 -= 8;
                    if (!v17)
                    {
                      v16 = v15;
                      break;
                    }
                  }
                }
LABEL_18:
                v18 = (unsigned __int8 *)(v13 + 8 * *(unsigned int *)(v13 - 4));
                goto LABEL_23;
              }
              v16 = (unsigned __int8 *)(v13 + 8 * v14);
            }
            else
            {
              v16 = 0;
              v14 = 0;
            }
            v15 = (unsigned __int8 *)(v13 + 8 * v14);
            if (v13)
              goto LABEL_18;
            v18 = 0;
LABEL_23:
            if (v18 != v16)
            {
              v104 = v18;
              do
              {
                v19 = (uint64_t)v109;
                if (v109)
                  goto LABEL_27;
                v20 = WTF::fastMalloc((WTF *)0x50);
                *(_BYTE *)(v20 + 16) = -1;
                *(_DWORD *)(v20 + 20) = 0;
                *(_BYTE *)(v20 + 24) = -1;
                *(_DWORD *)(v20 + 28) = 0;
                *(_BYTE *)(v20 + 32) = -1;
                *(_DWORD *)(v20 + 36) = 0;
                *(_BYTE *)(v20 + 40) = -1;
                *(_DWORD *)(v20 + 44) = 0;
                *(_BYTE *)(v20 + 48) = -1;
                *(_DWORD *)(v20 + 52) = 0;
                *(_BYTE *)(v20 + 56) = -1;
                *(_DWORD *)(v20 + 60) = 0;
                *(_BYTE *)(v20 + 64) = -1;
                *(_DWORD *)(v20 + 68) = 0;
                *(_BYTE *)(v20 + 72) = -1;
                *(_DWORD *)(v20 + 76) = 0;
                v109 = (_DWORD *)(v20 + 16);
                *(_QWORD *)(v20 + 8) = 0x800000007;
                *(_DWORD *)v20 = 0;
                *(v109 - 3) = 0;
                v19 = (uint64_t)v109;
                if (v109)
LABEL_27:
                  v21 = *(_DWORD *)(v19 - 8);
                else
                  v21 = 0;
                v22 = *v16;
                v23 = 9 * ((~(v22 << 15) + v22) ^ ((~(v22 << 15) + v22) >> 10));
                v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
                v25 = (v24 ^ HIWORD(v24)) & v21;
                v26 = (unsigned __int8 *)(v19 + 8 * v25);
                v27 = *v26;
                if (v27 != 255)
                {
                  v28 = 0;
                  v29 = 1;
                  while (v27 != v22)
                  {
                    if (v27 == 254)
                      v28 = v26;
                    v25 = (v25 + v29) & v21;
                    v26 = (unsigned __int8 *)(v19 + 8 * v25);
                    v27 = *v26;
                    ++v29;
                    if (v27 == 255)
                    {
                      if (v28)
                      {
                        *v28 = -1;
                        *((_DWORD *)v28 + 1) = 0;
                        --*(v109 - 4);
                        LOBYTE(v22) = *v16;
                        v26 = v28;
                      }
                      goto LABEL_36;
                    }
                  }
                  v37 = *((_DWORD *)v26 + 1) + *((_DWORD *)v16 + 1);
                  *((_DWORD *)v26 + 1) = v37;
                  if (v37)
                    goto LABEL_99;
LABEL_68:
                  if (v109)
                  {
                    v52 = *(v109 - 2);
                    v53 = *v16;
                    v54 = 9 * ((~(v53 << 15) + v53) ^ ((~(v53 << 15) + v53) >> 10));
                    v55 = (v54 ^ (v54 >> 6)) + ~((v54 ^ (v54 >> 6)) << 11);
                    v56 = (v55 ^ HIWORD(v55)) & v52;
                    v57 = LOBYTE(v109[2 * v56]);
                    if (v57 != v53)
                    {
                      v58 = 1;
                      while (v57 != 255)
                      {
                        v56 = ((_DWORD)v56 + v58) & v52;
                        v57 = LOBYTE(v109[2 * v56]);
                        ++v58;
                        if (v57 == v53)
                          goto LABEL_77;
                      }
                      v56 = *(v109 - 1);
                    }
LABEL_77:
                    if (v56 != *(v109 - 1))
                    {
                      LOBYTE(v109[2 * v56]) = -2;
                      ++*(v109 - 4);
                      v59 = v109 ? *(v109 - 3) - 1 : -1;
                      *(v109 - 3) = v59;
                      v60 = (uint64_t)v109;
                      if (v109)
                      {
                        v61 = *(v109 - 3);
                        v62 = *(v109 - 1);
                        if (6 * v61 < v62 && v62 >= 9)
                        {
                          v64 = v62 >> 1;
                          v65 = 8 * (v62 >> 1);
                          v66 = (_DWORD *)WTF::fastMalloc((WTF *)(v65 + 16));
                          v68 = 0;
                          do
                          {
                            v69 = &v66[v68 / 4];
                            *((_BYTE *)v69 + 16) = -1;
                            v69[5] = 0;
                            v68 += 8;
                          }
                          while (v65 != v68);
                          v70 = 0;
                          v109 = v66 + 4;
                          v66[2] = v64 - 1;
                          v66[3] = v64;
                          *v66 = 0;
                          *(v109 - 3) = v61;
                          v18 = v104;
                          do
                          {
                            v71 = (_QWORD *)(v60 + 8 * v70);
                            v72 = *(unsigned __int8 *)v71;
                            if (v72 <= 0xFD)
                            {
                              if (v109)
                                v73 = *(v109 - 2);
                              else
                                v73 = 0;
                              v74 = 0;
                              v75 = 9 * ((~(v72 << 15) + v72) ^ ((~(v72 << 15) + v72) >> 10));
                              v76 = (v75 ^ (v75 >> 6)) + ~((v75 ^ (v75 >> 6)) << 11);
                              v77 = v76 ^ HIWORD(v76);
                              do
                              {
                                v78 = v77 & v73;
                                v77 = ++v74 + v78;
                              }
                              while (LOBYTE(v109[2 * v78]) != 255);
                              *(_QWORD *)&v109[2 * v78] = *v71;
                            }
                            ++v70;
                          }
                          while (v70 != v62);
                          WTF::fastFree((WTF *)(v60 - 16), v67);
                        }
                      }
                    }
                  }
                  goto LABEL_99;
                }
LABEL_36:
                *v26 = v22;
                *((_DWORD *)v26 + 1) = *((_DWORD *)v16 + 1);
                if (v109)
                  v30 = *(v109 - 3) + 1;
                else
                  v30 = 1;
                *(v109 - 3) = v30;
                v31 = (uint64_t)v109;
                if (v109)
                  v32 = *(v109 - 3);
                else
                  v32 = 0;
                v33 = (*(v109 - 4) + v32);
                v34 = *(v109 - 1);
                if (v34 > 0x400)
                {
                  if (v34 > 2 * v33)
                    goto LABEL_67;
                }
                else
                {
                  if (3 * v34 > 4 * v33)
                    goto LABEL_67;
                  if (!(_DWORD)v34)
                  {
                    v35 = *(v109 - 3);
                    v36 = 8;
                    goto LABEL_50;
                  }
                }
                v35 = *(v109 - 3);
                v36 = (_DWORD)v34 << (6 * v35 >= (2 * v34));
LABEL_50:
                v38 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v36 + 16));
                if (v36)
                {
                  v40 = v36;
                  v41 = v38 + 5;
                  do
                  {
                    *((_BYTE *)v41 - 4) = -1;
                    *v41 = 0;
                    v41 += 2;
                    --v40;
                  }
                  while (v40);
                }
                v109 = v38 + 4;
                v38[2] = v36 - 1;
                v38[3] = v36;
                *v38 = 0;
                *(v109 - 3) = v35;
                if ((_DWORD)v34)
                {
                  v42 = 0;
                  v43 = 0;
                  v18 = v104;
                  do
                  {
                    v44 = (unsigned __int8 *)(v31 + 8 * v42);
                    v45 = *v44;
                    if (v45 <= 0xFD)
                    {
                      v46 = v109 ? *(v109 - 2) : 0;
                      v47 = 0;
                      v48 = 9 * ((~(v45 << 15) + v45) ^ ((~(v45 << 15) + v45) >> 10));
                      v49 = ((v48 ^ (v48 >> 6)) + ~((v48 ^ (v48 >> 6)) << 11)) ^ (((v48 ^ (v48 >> 6))
                                                                                 + ~((v48 ^ (v48 >> 6)) << 11)) >> 16);
                      do
                      {
                        v50 = v49 & v46;
                        v49 = ++v47 + v50;
                      }
                      while (LOBYTE(v109[2 * v50]) != 255);
                      v51 = (unsigned __int8 *)&v109[2 * v50];
                      *(_QWORD *)v51 = *(_QWORD *)v44;
                      if (v44 == v26)
                        v43 = v51;
                    }
                    ++v42;
                  }
                  while (v42 != v34);
                }
                else
                {
                  v43 = 0;
                  v18 = v104;
                }
                WTF::fastFree((WTF *)(v31 - 16), v39);
                v26 = v43;
LABEL_67:
                if (!*((_DWORD *)v26 + 1))
                  goto LABEL_68;
LABEL_99:
                v79 = v16 + 8;
                v16 = v15;
                if (v79 != v15)
                {
                  v16 = v79;
                  while (*v16 >= 0xFEu)
                  {
                    v16 += 8;
                    if (v16 == v15)
                    {
                      v16 = v15;
                      break;
                    }
                  }
                }
              }
              while (v16 != v18);
            }
            v106 = (uint64_t)v109;
            v80 = HIDWORD(v108);
            if (HIDWORD(v108) == (_DWORD)v108)
            {
              v81 = (uint64_t *)WTF::Vector<WebCore::CSSNumericValue::Addend,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v107, HIDWORD(v108) + 1, (unint64_t)&v105);
              v80 = HIDWORD(v108);
              v4 = v107;
              v82 = &v107[2 * HIDWORD(v108)];
              v84 = *v81;
              v83 = v81 + 1;
              *v82 = v84;
              v85 = v82 + 1;
            }
            else
            {
              v4 = v107;
              v86 = (double *)&v107[2 * HIDWORD(v108)];
              *v86 = v105;
              v85 = (uint64_t *)(v86 + 1);
              v83 = &v106;
            }
            *v85 = 0;
            v87 = *v83;
            *v83 = 0;
            *v85 = v87;
            v10 = v80 + 1;
            HIDWORD(v108) = v80 + 1;
            if (v106)
              WTF::fastFree((WTF *)(v106 - 16), v11);
            v12 = (WTF *)((char *)v103 + 16);
          }
          while ((char *)v103 + 16 != v101);
        }
        v102 = (WTF *)((char *)v102 + 16);
      }
      while (v102 != v100);
      v88 = 16 * v96;
      v89 = (_QWORD *)((char *)v99 + 8);
      do
      {
        if (*v89)
          WTF::fastFree((WTF *)(*v89 - 16), v11);
        v89 += 2;
        v88 -= 16;
      }
      while (v88);
LABEL_116:
      result = v99;
      if (v99)
      {
        result = (WTF *)WTF::fastFree(v99, v11);
        v10 = HIDWORD(v108);
      }
      v90 = v108;
      if (v112)
      {
        result = v110;
        if (HIDWORD(v111))
        {
          v91 = 16 * HIDWORD(v111);
          v92 = (_QWORD *)((char *)v110 + 8);
          do
          {
            if (*v92)
              WTF::fastFree((WTF *)(*v92 - 16), v11);
            v92 += 2;
            v91 -= 16;
          }
          while (v91);
          result = v110;
        }
        if (result)
        {
          v110 = 0;
          LODWORD(v111) = 0;
          result = (WTF *)WTF::fastFree(result, v11);
        }
      }
      v9 = v98 + 8;
      if (v98 + 8 == v97)
      {
        a2 = v95;
        goto LABEL_130;
      }
    }
    *v95 = 0;
    v95[16] = 0;
    if (v10)
    {
      v93 = 16 * v10;
      v94 = v4 + 1;
      do
      {
        if (*v94)
          WTF::fastFree((WTF *)(*v94 - 16), v11);
        v94 += 2;
        v93 -= 16;
      }
      while (v93);
    }
    result = (WTF *)v4;
    if (v4)
      return (WTF *)WTF::fastFree((WTF *)v4, v11);
  }
  else
  {
    v90 = 1;
    v10 = 1;
LABEL_130:
    *(_QWORD *)a2 = v4;
    *((_DWORD *)a2 + 2) = v90;
    *((_DWORD *)a2 + 3) = v10;
    a2[16] = 1;
  }
  return result;
}

_QWORD *WebCore::CSSMathProduct::toCalcExpressionNode@<X0>(_QWORD *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  char v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v4 = *(unsigned int *)(this[9] + 20);
  if (!(_DWORD)v4)
    goto LABEL_36;
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v5 = this;
  LODWORD(v25) = *(_DWORD *)(this[9] + 20);
  v24 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
  v6 = v5[9];
  v7 = *(unsigned int *)(v6 + 20);
  if (!(_DWORD)v7)
    goto LABEL_36;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = 8 * v7;
  do
  {
    this = (*(_QWORD *(**)(_DWORD **__return_ptr))(**(_QWORD **)v8 + 64))(&v23);
    v10 = v23;
    if (!v23)
    {
      *a3 = 0;
      goto LABEL_24;
    }
    v22 = v23;
    v23 = 0;
    LODWORD(v11) = HIDWORD(v25);
    if (HIDWORD(v25) == (_DWORD)v25)
    {
      v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, HIDWORD(v25) + 1, (unint64_t)&v22);
      v11 = HIDWORD(v25);
      v13 = v24;
      v14 = *v12;
      *v12 = 0;
      *((_QWORD *)v13 + v11) = v14;
    }
    else
    {
      v22 = 0;
      *((_QWORD *)v24 + HIDWORD(v25)) = v10;
    }
    HIDWORD(v25) = v11 + 1;
    v15 = v22;
    v22 = 0;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    v8 += 8;
    v9 -= 8;
  }
  while (v9);
  if (HIDWORD(v25) && (v17 = WebCore::determineCategory(&v24, 42), v17 != 9))
  {
    v18 = v17;
    this = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *((_DWORD *)this + 2) = 1;
    *((_BYTE *)this + 12) = v18;
    *this = off_1E339A040;
    *((_BYTE *)this + 13) = 42;
    this[2] = v24;
    v19 = v25;
    v24 = 0;
    v25 = 0;
    this[3] = v19;
    *((_WORD *)this + 16) = 256;
  }
  else
  {
LABEL_36:
    this = 0;
  }
  *a3 = this;
LABEL_24:
  v20 = v24;
  if (!HIDWORD(v25))
  {
    if (!v24)
      return this;
LABEL_35:
    v24 = 0;
    LODWORD(v25) = 0;
    return (_QWORD *)WTF::fastFree(v20, a2);
  }
  v21 = 8 * HIDWORD(v25);
  do
  {
    this = *(_QWORD **)v20;
    *(_QWORD *)v20 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      else
        --*((_DWORD *)this + 2);
    }
    v20 = (WTF *)((char *)v20 + 8);
    v21 -= 8;
  }
  while (v21);
  v20 = v24;
  if (v24)
    goto LABEL_35;
  return this;
}

unsigned int **WebCore::CSSMathSum::create@<X0>(unsigned int **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int **v4;
  WTF *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;

  v19 = 0;
  v20 = 0;
  if (*result)
  {
    v3 = **result;
    if ((_DWORD)v3)
    {
      if (v3 >> 29)
      {
LABEL_22:
        __break(0xC471u);
        return result;
      }
      v4 = result;
      v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
      LODWORD(v20) = v3;
      v19 = v5;
      v6 = *v4;
      if (v6)
      {
        v9 = *v6;
        v8 = (uint64_t)(v6 + 2);
        v7 = v9;
        if (v9)
        {
          v10 = v5;
          v11 = 0;
          v12 = 16 * v7;
          while (1)
          {
            v13 = *(unsigned int *)(v8 + 8);
            if ((_DWORD)v13 == -1)
              break;
            v23 = &v22;
            __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v13](&v21, (__int128 *)&v23, v8);
            v14 = v11 + 1;
            *((_QWORD *)v10 + v11) = v21;
            v8 += 16;
            ++v11;
            v12 -= 16;
            if (!v12)
            {
              HIDWORD(v20) = v14;
              goto LABEL_10;
            }
          }
          result = (unsigned int **)std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_22;
        }
      }
    }
  }
LABEL_10:
  result = (unsigned int **)WebCore::CSSMathSum::create((uint64_t)&v19, a2);
  v16 = v19;
  if (HIDWORD(v20))
  {
    v17 = 8 * HIDWORD(v20);
    v18 = v19;
    do
    {
      result = *(unsigned int ***)v18;
      *(_QWORD *)v18 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (unsigned int **)(*((uint64_t (**)(unsigned int **))*result + 2))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v18 = (WTF *)((char *)v18 + 8);
      v17 -= 8;
    }
    while (v17);
  }
  if (v16)
    return (unsigned int **)WTF::fastFree(v16, v15);
  return result;
}

uint64_t WebCore::CSSMathSum::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  _OWORD v15[2];
  char v16;
  _BYTE v17[31];
  _OWORD v18[2];
  char v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(result + 12);
  if (!v3)
  {
    v14 = 9;
LABEL_9:
    *(_BYTE *)a2 = v14;
    *(_QWORD *)(a2 + 8) = 0;
    v13 = 1;
    goto LABEL_10;
  }
  v4 = result;
  v5 = **(_QWORD **)result;
  v6 = *(_BYTE *)(v5 + 40);
  v20[0] = *(_OWORD *)(v5 + 41);
  *(_OWORD *)((char *)v20 + 15) = *(_OWORD *)(v5 + 56);
  if (v3 != 1)
  {
    v7 = 1;
    while (1)
    {
      v16 = v6;
      *(_OWORD *)v17 = v20[0];
      *(_OWORD *)&v17[15] = *(_OWORD *)((char *)v20 + 15);
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v7);
      v9 = *(_OWORD *)(v8 + 56);
      v15[0] = *(_OWORD *)(v8 + 40);
      v15[1] = v9;
      result = WebCore::CSSNumericType::addTypes((uint64_t)&v16, (uint64_t)v15, (uint64_t)v18);
      v6 = v18[0];
      v20[0] = *(_OWORD *)((char *)v18 + 1);
      *(_OWORD *)((char *)v20 + 15) = v18[1];
      if (!v19)
        break;
      if (++v7 >= (unint64_t)*(unsigned int *)(v4 + 12))
        goto LABEL_6;
    }
    v14 = 33;
    goto LABEL_9;
  }
LABEL_6:
  v18[0] = v20[0];
  *(_OWORD *)((char *)v18 + 15) = *(_OWORD *)((char *)v20 + 15);
  v10 = bmalloc::api::isoAllocate();
  v11 = *(_QWORD *)v4;
  v12 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 40) = v6;
  *(_OWORD *)(v10 + 56) = *(_OWORD *)((char *)v18 + 15);
  *(_OWORD *)(v10 + 41) = v18[0];
  *(_QWORD *)v10 = &off_1E339FC08;
  result = bmalloc::api::isoAllocate();
  v13 = 0;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v11;
  *(_QWORD *)(result + 16) = v12;
  *(_QWORD *)(v10 + 72) = result;
  *(_QWORD *)a2 = v10;
LABEL_10:
  *(_DWORD *)(a2 + 16) = v13;
  return result;
}

uint64_t WebCore::CSSMathSum::serialize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t (**v7)();
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  _BYTE v15[2];

  v15[0] = a3;
  if ((a3 & 2) == 0)
    WTF::StringBuilder::append();
  v5 = *(_QWORD *)(a1 + 72);
  v6 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v7 = off_1E339FE28;
  *v6 = off_1E339FE28;
  v6[1] = (uint64_t (**)())v15;
  v6[2] = (uint64_t (**)())a2;
  if (*(_DWORD *)(v5 + 20))
  {
    v8 = 0;
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD, BOOL))(*v6)[2])(v6, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v8), v8 == 0);
      ++v8;
    }
    while (v8 < *(unsigned int *)(v5 + 20));
    v7 = *v6;
  }
  result = ((uint64_t (*)(uint64_t (***)()))v7[1])(v6);
  if ((v15[0] & 2) == 0)
  {
    v15[1] = 41;
    v10 = *(_QWORD *)(a2 + 8);
    if (v10
      && ((v11 = *(unsigned int *)(a2 + 16), v11 < *(_DWORD *)(v10 + 4))
        ? (v12 = *(_QWORD *)a2 == 0)
        : (v12 = 0),
          v12))
    {
      v13 = *(_DWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(a2 + 16) = v11 + 1;
      if ((v13 & 4) != 0)
        *(_BYTE *)(v14 + v11) = 41;
      else
        *(_WORD *)(v14 + 2 * v11) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

_QWORD *WebCore::CSSMathSum::toSumValue@<X0>(WebCore::CSSMathSum *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  void *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 **v31;
  int v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  WTF *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  _OWORD v45[2];
  _OWORD v46[2];
  _OWORD v47[2];
  char v48;
  _OWORD v49[2];
  char v50;
  WTF *v51[2];
  __int128 v52;
  char v53;
  unsigned __int8 **v54;
  uint64_t v55;

  v54 = 0;
  v55 = 0;
  v3 = *((_QWORD *)this + 9);
  v4 = *(unsigned int *)(v3 + 20);
  if (!(_DWORD)v4)
  {
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x19591E8ECLL);
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = v8 + 8 * v4;
  do
  {
    result = (*(_QWORD *(**)(WTF **__return_ptr))(**(_QWORD **)v8 + 48))(v51);
    if (!(_BYTE)v52)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      v7 = HIDWORD(v55);
      v40 = (WTF *)v54;
      if (HIDWORD(v55))
        goto LABEL_69;
      goto LABEL_73;
    }
    v12 = v51[0];
    if (!HIDWORD(v51[1]))
      goto LABEL_55;
    v13 = (WTF *)((char *)v51[0] + 16 * HIDWORD(v51[1]));
    do
    {
      if (v7)
      {
        v14 = *((_QWORD *)v12 + 1);
        v15 = v7;
        v16 = 0;
        if (v14)
        {
          while (1)
          {
            v17 = v6[2 * v16 + 1];
            if (v17)
            {
              v18 = *((_DWORD *)v17 - 3);
              if (v18 == *(_DWORD *)(v14 - 12))
              {
                if (!v18)
                  goto LABEL_34;
                v19 = *((unsigned int *)v17 - 1);
                if ((_DWORD)v19)
                {
                  v20 = 8 * v19;
                  v21 = v6[2 * v16 + 1];
                  while (*v21 >= 0xFEu)
                  {
                    v21 += 8;
                    v20 -= 8;
                    if (!v20)
                      goto LABEL_34;
                  }
                }
                else
                {
                  v21 = v6[2 * v16 + 1];
                }
                v22 = &v17[8 * v19];
                if (v21 == v22)
                  goto LABEL_34;
                v23 = *(_DWORD *)(v14 - 8);
                while (1)
                {
                  v24 = *v21;
                  v25 = 9 * ((~(v24 << 15) + v24) ^ ((~(v24 << 15) + v24) >> 10));
                  v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
                  v27 = (v26 ^ HIWORD(v26)) & v23;
                  v28 = *(unsigned __int8 *)(v14 + 8 * v27);
                  if (v28 != v24)
                    break;
LABEL_26:
                  if (v27 == *(_DWORD *)(v14 - 4) || *((_DWORD *)v21 + 1) != *(_DWORD *)(v14 + 8 * v27 + 4))
                    goto LABEL_17;
                  v30 = v21 + 8;
                  v21 = v22;
                  if (v30 != v22)
                  {
                    v21 = v30;
                    while (*v21 >= 0xFEu)
                    {
                      v21 += 8;
                      if (v21 == v22)
                      {
                        v21 = v22;
                        break;
                      }
                    }
                  }
                  if (v21 == v22)
                    goto LABEL_34;
                }
                v29 = 1;
                while (v28 != 255)
                {
                  v27 = ((_DWORD)v27 + v29) & v23;
                  v28 = *(unsigned __int8 *)(v14 + 8 * v27);
                  ++v29;
                  if (v28 == v24)
                    goto LABEL_26;
                }
              }
            }
            else if (!*(_DWORD *)(v14 - 12))
            {
              goto LABEL_34;
            }
LABEL_17:
            if (++v16 == v7)
              goto LABEL_37;
          }
        }
        v37 = v6 + 1;
        while (*v37 && *(_DWORD *)(*v37 - 12))
        {
          ++v16;
          v37 += 2;
          if (v7 == v16)
            goto LABEL_37;
        }
LABEL_34:
        if (v16 >= v7)
          goto LABEL_76;
        *(double *)&v6[2 * v16] = *(double *)v12 + *(double *)&v6[2 * v16];
      }
      else
      {
        v15 = 0;
LABEL_37:
        if (v7 == (_DWORD)v55)
        {
          v31 = (unsigned __int8 **)WTF::Vector<WebCore::CSSNumericValue::Addend,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, v15 + 1, (unint64_t)v12);
          v32 = HIDWORD(v55);
          v5 = v54;
          v33 = &v54[2 * HIDWORD(v55)];
          *v33 = *v31;
          v33[1] = 0;
          v34 = v31[1];
          v31[1] = 0;
          v33[1] = v34;
          v7 = v32 + 1;
        }
        else
        {
          v35 = &v5[2 * v15];
          *v35 = *(unsigned __int8 **)v12;
          v35[1] = 0;
          v36 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          v35[1] = v36;
          v7 = HIDWORD(v55) + 1;
        }
        HIDWORD(v55) = v7;
        v6 = v5;
      }
      v12 = (WTF *)((char *)v12 + 16);
    }
    while (v12 != v13);
    if ((_BYTE)v52)
    {
      v12 = v51[0];
      if (HIDWORD(v51[1]))
      {
        v38 = 16 * HIDWORD(v51[1]);
        v39 = (_QWORD *)((char *)v51[0] + 8);
        do
        {
          if (*v39)
            WTF::fastFree((WTF *)(*v39 - 16), v11);
          v39 += 2;
          v38 -= 16;
        }
        while (v38);
        v12 = v51[0];
      }
LABEL_55:
      if (v12)
      {
        v51[0] = 0;
        LODWORD(v51[1]) = 0;
        WTF::fastFree(v12, v11);
      }
    }
    v8 += 8;
  }
  while (v8 != v9);
  if (!v7)
    goto LABEL_76;
  v40 = (WTF *)v54;
  result = (_QWORD *)WebCore::CSSMathSum::toSumValue(void)const::$_1::operator()((uint64_t)v51, v54[1]);
  if (!v53)
    goto LABEL_68;
  if (v7 < 2)
  {
LABEL_65:
    *(_QWORD *)a2 = v40;
    v42 = v55;
    v54 = 0;
    v55 = 0;
    *(_DWORD *)(a2 + 8) = v42;
    *(_DWORD *)(a2 + 12) = v7;
    *(_BYTE *)(a2 + 16) = 1;
    v40 = 0;
  }
  else
  {
    v41 = 0;
    while (1)
    {
      result = (_QWORD *)WebCore::CSSMathSum::toSumValue(void)const::$_1::operator()((uint64_t)v49, *(unsigned __int8 **)((char *)v40 + v41 + 24));
      if (!v50)
        break;
      v46[0] = *(_OWORD *)v51;
      v46[1] = v52;
      v45[0] = v49[0];
      v45[1] = v49[1];
      result = (_QWORD *)WebCore::CSSNumericType::addTypes((uint64_t)v46, (uint64_t)v45, (uint64_t)v47);
      v53 = v48;
      *(_OWORD *)v51 = v47[0];
      v52 = v47[1];
      if (!v48)
        break;
      v41 += 16;
      if (16 * v7 - 16 == v41)
        goto LABEL_65;
    }
LABEL_68:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
LABEL_69:
    v43 = 16 * v7;
    v44 = (_QWORD *)((char *)v40 + 8);
    do
    {
      if (*v44)
        result = (_QWORD *)WTF::fastFree((WTF *)(*v44 - 16), v11);
      v44 += 2;
      v43 -= 16;
    }
    while (v43);
  }
LABEL_73:
  if (v40)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    return (_QWORD *)WTF::fastFree(v40, v11);
  }
  return result;
}

uint64_t WebCore::CSSMathSum::toSumValue(void)const::$_1::operator()(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  if (!a2)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = &a2[8 * v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)a2 - 1);
  v3 = &a2[8 * v2];
  if (!*((_DWORD *)a2 - 3))
  {
    v4 = &a2[8 * v2];
    goto LABEL_10;
  }
  v4 = a2;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    v4 = a2;
    while (*v4 >= 0xFEu)
    {
      v4 += 8;
      v5 -= 8;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  v31 = result;
  if (a2)
    v6 = &a2[8 * *((unsigned int *)a2 - 1)];
  else
    v6 = 0;
  if (v6 == v4)
  {
    v10 = 0x80000000;
    v9 = 0x80000000;
    v8 = 0x80000000;
    v33 = 0x80000000;
    v34 = 0x80000000;
    v32 = 0x80000000;
    v7 = 0x80000000;
  }
  else
  {
    v7 = 0x80000000;
    v32 = 0x80000000;
    v33 = 0x80000000;
    v34 = 0x80000000;
    v8 = 0x80000000;
    v9 = 0x80000000;
    v10 = 0x80000000;
    do
    {
      v11 = *((_DWORD *)v4 + 1);
      result = WebCore::unitCategory(*v4);
      switch((int)result)
      {
        case 0:
          goto LABEL_50;
        case 1:
          v14 = v7 == 0x80000000;
          v15 = v11;
          if (v11 != 0x80000000)
            goto LABEL_52;
          goto LABEL_51;
        case 2:
        case 3:
        case 4:
          if (v10 == 0x80000000)
            v12 = 0;
          else
            v12 = v10;
          v13 = v11 + v12;
          if (v11 != 0x80000000)
            v10 = v13;
          goto LABEL_50;
        case 5:
          if (v9 == 0x80000000)
            v16 = 0;
          else
            v16 = v9;
          v17 = v11 + v16;
          if (v11 != 0x80000000)
            v9 = v17;
          goto LABEL_50;
        case 6:
          if (v8 == 0x80000000)
            v18 = 0;
          else
            v18 = v8;
          v19 = v11 + v18;
          if (v11 != 0x80000000)
            v8 = v19;
          goto LABEL_50;
        case 7:
          v20 = v33;
          if (v33 == 0x80000000)
            v21 = 0;
          else
            v21 = v33;
          v22 = v11 + v21;
          if (v11 != 0x80000000)
            v20 = v22;
          v33 = v20;
          goto LABEL_50;
        case 8:
          v23 = v34;
          if (v34 == 0x80000000)
            v24 = 0;
          else
            v24 = v34;
          v25 = v11 + v24;
          if (v11 != 0x80000000)
            v23 = v25;
          v34 = v23;
          goto LABEL_50;
        case 9:
          if (v11 != 0x80000000)
          {
            v26 = v32;
            if (v32 == 0x80000000)
              v26 = 0;
            v32 = v11 + v26;
          }
LABEL_50:
          v14 = v7 == 0x80000000;
LABEL_51:
          v15 = 0;
          v11 = 0x80000000;
LABEL_52:
          v27 = v15 + v7;
          if (v14)
            v7 = v11;
          else
            v7 = v27;
          v28 = v4 + 8;
          v4 = v3;
          if (v28 == v3)
            continue;
          v4 = v28;
          break;
        default:
          v30 = 0;
          v29 = v31;
          *(_BYTE *)v31 = 0;
          goto LABEL_64;
      }
      while (*v4 >= 0xFEu)
      {
        v4 += 8;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
    while (v4 != v6);
  }
  v29 = v31;
  *(_DWORD *)v31 = v10;
  *(_DWORD *)(v31 + 4) = v9;
  *(_DWORD *)(v31 + 8) = v8;
  *(_DWORD *)(v31 + 12) = v33;
  *(_DWORD *)(v31 + 16) = v34;
  *(_DWORD *)(v31 + 20) = v32;
  *(_DWORD *)(v31 + 24) = v7;
  v30 = 1;
  *(_BYTE *)(v31 + 28) = -1;
LABEL_64:
  *(_BYTE *)(v29 + 32) = v30;
  return result;
}

uint64_t WebCore::CSSNumericType::addTypes@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  int *v45;
  int v46;
  int v47;
  _DWORD *v48;
  int v49;
  int *v50;
  int v51;
  int *v52;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  __int128 v57;
  int v58;
  __int16 v59;
  char v60;

  v3 = *(unsigned __int8 *)(result + 28);
  v4 = *(unsigned __int8 *)(a2 + 28);
  if (v3 != 255)
  {
    if (v4 != 255 && v3 != v4)
    {
LABEL_122:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return result;
    }
    v6 = (_DWORD *)a2;
    switch(*(_BYTE *)(result + 28))
    {
      case 0:
        break;
      case 1:
        v6 = (_DWORD *)(a2 + 4);
        break;
      case 2:
        v6 = (_DWORD *)(a2 + 8);
        break;
      case 3:
        v6 = (_DWORD *)(a2 + 12);
        break;
      case 4:
        v6 = (_DWORD *)(a2 + 16);
        break;
      case 5:
        v6 = (_DWORD *)(a2 + 20);
        break;
      case 6:
        v6 = (_DWORD *)(a2 + 24);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19591F1E4);
    }
    if (*v6 == 0x80000000)
      *v6 = 0;
    v7 = *(_DWORD *)(a2 + 24);
    if (v7 != 0x80000000)
    {
      *(_DWORD *)(a2 + 24) = 0;
      *v6 += v7;
    }
    *(_BYTE *)(a2 + 28) = v3;
    v4 = v3;
  }
  v8 = (_DWORD *)result;
  switch(v4)
  {
    case 0:
      goto LABEL_28;
    case 1:
      v8 = (_DWORD *)(result + 4);
      goto LABEL_28;
    case 2:
      v8 = (_DWORD *)(result + 8);
      goto LABEL_28;
    case 3:
      v8 = (_DWORD *)(result + 12);
      goto LABEL_28;
    case 4:
      v8 = (_DWORD *)(result + 16);
      goto LABEL_28;
    case 5:
      v8 = (_DWORD *)(result + 20);
      goto LABEL_28;
    case 6:
      v8 = (_DWORD *)(result + 24);
LABEL_28:
      if (*v8 == 0x80000000)
        *v8 = 0;
      v9 = *(_DWORD *)(result + 24);
      if (v9 != 0x80000000)
      {
        *(_DWORD *)(result + 24) = 0;
        *v8 += v9;
      }
      *(_BYTE *)(result + 28) = v4;
      break;
    default:
      if (v4 != 255)
      {
        __break(0xC471u);
        JUMPOUT(0x19591EC7CLL);
      }
      return result;
  }
  v10 = *(_DWORD *)result != *(_DWORD *)a2 && *(_DWORD *)result != 0x80000000;
  if ((*(_DWORD *)result != 0x80000000) != (*(_DWORD *)a2 != 0x80000000) || v10)
    goto LABEL_73;
  v11 = *(_DWORD *)(result + 4);
  v12 = v11 != 0x80000000;
  v13 = *(_DWORD *)(a2 + 4);
  v14 = v11 != v13 && v11 != 0x80000000;
  if (((v12 ^ (v13 != 0x80000000)) & 1) != 0 || v14)
    goto LABEL_73;
  v15 = *(_DWORD *)(result + 8);
  v16 = v15 != 0x80000000;
  v17 = *(_DWORD *)(a2 + 8);
  v18 = v15 != v17 && v15 != 0x80000000;
  if (((v16 ^ (v17 != 0x80000000)) & 1) != 0 || v18)
    goto LABEL_73;
  v19 = *(_DWORD *)(result + 12);
  v20 = v19 != 0x80000000;
  v21 = *(_DWORD *)(a2 + 12);
  v22 = v19 != v21 && v19 != 0x80000000;
  if (((v20 ^ (v21 != 0x80000000)) & 1) != 0 || v22)
    goto LABEL_73;
  v23 = *(_DWORD *)(result + 16);
  v24 = v23 != 0x80000000;
  v25 = *(_DWORD *)(a2 + 16);
  v26 = v23 != v25 && v23 != 0x80000000;
  if (((v24 ^ (v25 != 0x80000000)) & 1) != 0 || v26)
    goto LABEL_73;
  v27 = *(_DWORD *)(result + 20);
  v28 = v27 != 0x80000000;
  v29 = *(_DWORD *)(a2 + 20);
  v30 = v27 != v29 && v27 != 0x80000000;
  if (((v28 ^ (v29 != 0x80000000)) & 1) != 0 || v30)
    goto LABEL_73;
  v31 = *(_DWORD *)(result + 24);
  v32 = v31 != 0x80000000;
  v33 = *(_DWORD *)(a2 + 24);
  v34 = v31 != v33 && v31 != 0x80000000;
  if (((v32 ^ (v33 != 0x80000000)) & 1) != 0
    || v34
    || ((v35 = *(unsigned __int8 *)(result + 28), v36 = v35 != 255, v37 = *(unsigned __int8 *)(a2 + 28), v35 != v37)
      ? (v38 = v35 != 255)
      : (v38 = 0),
        ((v36 ^ (v37 != 255)) & 1) != 0 || v38))
  {
LABEL_73:
    v39 = 0;
    v60 = 6;
    v59 = 1284;
    v58 = 50462976;
    v40 = (int *)(a2 + 24);
    v41 = (int *)(result + 24);
    while (2)
    {
      v42 = *((unsigned __int8 *)&v58 + v39);
      v43 = (_DWORD *)result;
      switch(*((_BYTE *)&v58 + v39))
      {
        case 0:
          goto LABEL_80;
        case 1:
          v43 = (_DWORD *)(result + 4);
          goto LABEL_80;
        case 2:
          v43 = (_DWORD *)(result + 8);
          goto LABEL_80;
        case 3:
          v43 = (_DWORD *)(result + 12);
          goto LABEL_80;
        case 4:
          v43 = (_DWORD *)(result + 16);
          goto LABEL_80;
        case 5:
          v43 = (_DWORD *)(result + 20);
LABEL_80:
          if (*v43 == 0x80000000)
          {
            v44 = (_DWORD *)a2;
            switch(*((_BYTE *)&v58 + v39))
            {
              case 0:
                break;
              case 1:
                v44 = (_DWORD *)(a2 + 4);
                break;
              case 2:
                v44 = (_DWORD *)(a2 + 8);
                break;
              case 3:
                v44 = (_DWORD *)(a2 + 12);
                break;
              case 4:
                v44 = (_DWORD *)(a2 + 16);
                break;
              case 5:
                v44 = (_DWORD *)(a2 + 20);
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x19591F1C4);
            }
            if (*v44 == 0x80000000)
              goto LABEL_120;
          }
          v45 = (int *)result;
          switch(*((_BYTE *)&v58 + v39))
          {
            case 0:
              break;
            case 1:
              v45 = (int *)(result + 4);
              break;
            case 2:
              v45 = (int *)(result + 8);
              break;
            case 3:
              v45 = (int *)(result + 12);
              break;
            case 4:
              v45 = (int *)(result + 16);
              break;
            case 5:
              v45 = (int *)(result + 20);
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19591F164);
          }
          v46 = *v45;
          if (*v45 == 0x80000000)
          {
            v46 = 0;
            *v45 = 0;
          }
          v47 = *v41;
          if (*v41 != 0x80000000)
          {
            *v41 = 0;
            *v45 = v46 + v47;
          }
          *(_BYTE *)(result + 28) = v42;
          v48 = (_DWORD *)a2;
          switch(v42)
          {
            case 0:
              break;
            case 1:
              v48 = (_DWORD *)(a2 + 4);
              break;
            case 2:
              v48 = (_DWORD *)(a2 + 8);
              break;
            case 3:
              v48 = (_DWORD *)(a2 + 12);
              break;
            case 4:
              v48 = (_DWORD *)(a2 + 16);
              break;
            case 5:
              v48 = (_DWORD *)(a2 + 20);
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19591F184);
          }
          if (*v48 == 0x80000000)
            *v48 = 0;
          v49 = *v40;
          if (*v40 != 0x80000000)
          {
            *v40 = 0;
            *v48 += v49;
          }
          *(_BYTE *)(a2 + 28) = v42;
          v51 = v42;
          v50 = (int *)(result + 24);
          v52 = (int *)(a2 + 24);
          switch(v51)
          {
            case 0:
              v50 = (int *)result;
              v52 = (int *)a2;
              break;
            case 1:
              v50 = (int *)(result + 4);
              v52 = (int *)(a2 + 4);
              break;
            case 2:
              v50 = (int *)(result + 8);
              v52 = (int *)(a2 + 8);
              break;
            case 3:
              v50 = (int *)(result + 12);
              v52 = (int *)(a2 + 12);
              break;
            case 4:
              v50 = (int *)(result + 16);
              v52 = (int *)(a2 + 16);
              break;
            case 5:
              v50 = (int *)(result + 20);
              v52 = (int *)(a2 + 20);
              break;
            case 6:
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19591F1A4);
          }
          v53 = *v50;
          v54 = v53 != 0x80000000;
          v55 = *v52;
          v56 = v53 != v55 && v53 != 0x80000000;
          if (((v54 ^ (v55 != 0x80000000)) & 1) == 0 && !v56)
            goto LABEL_120;
          goto LABEL_122;
        case 6:
LABEL_120:
          if (++v39 == 7)
            break;
          continue;
        default:
          __break(0xC471u);
          JUMPOUT(0x19591F144);
      }
      break;
    }
  }
  v57 = *(_OWORD *)(result + 16);
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(_OWORD *)(a3 + 16) = v57;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

_QWORD *WebCore::CSSMathSum::toCalcExpressionNode@<X0>(_QWORD *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  char v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v4 = *(unsigned int *)(this[9] + 20);
  if (!(_DWORD)v4)
    goto LABEL_36;
  if (v4 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v5 = this;
  LODWORD(v25) = *(_DWORD *)(this[9] + 20);
  v24 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
  v6 = v5[9];
  v7 = *(unsigned int *)(v6 + 20);
  if (!(_DWORD)v7)
    goto LABEL_36;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = 8 * v7;
  do
  {
    this = (*(_QWORD *(**)(_DWORD **__return_ptr))(**(_QWORD **)v8 + 64))(&v23);
    v10 = v23;
    if (!v23)
    {
      *a3 = 0;
      goto LABEL_24;
    }
    v22 = v23;
    v23 = 0;
    LODWORD(v11) = HIDWORD(v25);
    if (HIDWORD(v25) == (_DWORD)v25)
    {
      v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, HIDWORD(v25) + 1, (unint64_t)&v22);
      v11 = HIDWORD(v25);
      v13 = v24;
      v14 = *v12;
      *v12 = 0;
      *((_QWORD *)v13 + v11) = v14;
    }
    else
    {
      v22 = 0;
      *((_QWORD *)v24 + HIDWORD(v25)) = v10;
    }
    HIDWORD(v25) = v11 + 1;
    v15 = v22;
    v22 = 0;
    if (v15)
    {
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    v8 += 8;
    v9 -= 8;
  }
  while (v9);
  if (HIDWORD(v25) && (v17 = WebCore::determineCategory(&v24, 43), v17 != 9))
  {
    v18 = v17;
    this = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *((_DWORD *)this + 2) = 1;
    *((_BYTE *)this + 12) = v18;
    *this = off_1E339A040;
    *((_BYTE *)this + 13) = 43;
    this[2] = v24;
    v19 = v25;
    v24 = 0;
    v25 = 0;
    this[3] = v19;
    *((_WORD *)this + 16) = 256;
  }
  else
  {
LABEL_36:
    this = 0;
  }
  *a3 = this;
LABEL_24:
  v20 = v24;
  if (!HIDWORD(v25))
  {
    if (!v24)
      return this;
LABEL_35:
    v24 = 0;
    LODWORD(v25) = 0;
    return (_QWORD *)WTF::fastFree(v20, a2);
  }
  v21 = 8 * HIDWORD(v25);
  do
  {
    this = *(_QWORD **)v20;
    *(_QWORD *)v20 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      else
        --*((_DWORD *)this + 2);
    }
    v20 = (WTF *)((char *)v20 + 8);
    v21 -= 8;
  }
  while (v21);
  v20 = v24;
  if (v24)
    goto LABEL_35;
  return this;
}

uint64_t WebCore::CSSNumericType::create@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  result = WebCore::unitCategory(a1);
  switch((int)result)
  {
    case 0:
      *(_QWORD *)&v8 = 0x8000000080000000;
      *((_QWORD *)&v8 + 1) = 0x8000000080000000;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = 0x8000000080000000;
      goto LABEL_10;
    case 1:
      *(_QWORD *)&v9 = 0x8000000080000000;
      *((_QWORD *)&v9 + 1) = 0x8000000080000000;
      *(_OWORD *)a3 = v9;
      *(_QWORD *)(a3 + 16) = 0x8000000080000000;
      *(_DWORD *)(a3 + 24) = a2;
      goto LABEL_13;
    case 2:
    case 3:
    case 4:
      *(_DWORD *)a3 = a2;
      *(_QWORD *)&v6 = 0x8000000080000000;
      *((_QWORD *)&v6 + 1) = 0x8000000080000000;
      *(_OWORD *)(a3 + 4) = v6;
      goto LABEL_12;
    case 5:
      *(_DWORD *)a3 = 0x80000000;
      *(_DWORD *)(a3 + 4) = a2;
      *(_QWORD *)&v10 = 0x8000000080000000;
      *((_QWORD *)&v10 + 1) = 0x8000000080000000;
      *(_OWORD *)(a3 + 8) = v10;
      goto LABEL_10;
    case 6:
      *(_QWORD *)a3 = 0x8000000080000000;
      *(_DWORD *)(a3 + 8) = a2;
      *(_QWORD *)&v11 = 0x8000000080000000;
      *((_QWORD *)&v11 + 1) = 0x8000000080000000;
      *(_OWORD *)(a3 + 12) = v11;
      goto LABEL_13;
    case 7:
      *(_QWORD *)a3 = 0x8000000080000000;
      *(_DWORD *)(a3 + 8) = 0x80000000;
      *(_DWORD *)(a3 + 12) = a2;
      *(_QWORD *)(a3 + 16) = 0x8000000080000000;
      goto LABEL_10;
    case 8:
      *(_QWORD *)&v13 = 0x8000000080000000;
      *((_QWORD *)&v13 + 1) = 0x8000000080000000;
      *(_OWORD *)a3 = v13;
      *(_DWORD *)(a3 + 16) = a2;
LABEL_12:
      *(_QWORD *)(a3 + 20) = 0x8000000080000000;
      goto LABEL_13;
    case 9:
      *(_QWORD *)&v12 = 0x8000000080000000;
      *((_QWORD *)&v12 + 1) = 0x8000000080000000;
      *(_OWORD *)a3 = v12;
      *(_DWORD *)(a3 + 16) = 0x80000000;
      *(_DWORD *)(a3 + 20) = a2;
LABEL_10:
      *(_DWORD *)(a3 + 24) = 0x80000000;
LABEL_13:
      *(_BYTE *)(a3 + 28) = -1;
      v7 = 1;
      break;
    default:
      v7 = 0;
      *(_BYTE *)a3 = 0;
      break;
  }
  *(_BYTE *)(a3 + 32) = v7;
  return result;
}

uint64_t WebCore::CSSMatrixComponent::create@<X0>(WebCore::CSSMatrixComponent *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSMatrixComponent *v8;
  uint64_t v9;
  uint64_t result;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = *((unsigned __int16 *)this + 28);
  if (v5 == 841)
  {
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E339FE98;
    v21 = v6;
    v7 = a2;
    v8 = this;
    v9 = 16;
    goto LABEL_5;
  }
  if (v5 == 840)
  {
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E339FE70;
    v21 = v6;
    v7 = a2;
    v8 = this;
    v9 = 6;
LABEL_5:
    WebCore::CSSMatrixComponent::create(WebCore::CSSFunctionValue &)::$_0::operator()(v7, (uint64_t)v8, &v21, v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v11 = (_DWORD *)bmalloc::api::isoAllocate();
  *(_QWORD *)v11 = 0;
  v11[2] = 1;
  *((_OWORD *)v11 + 5) = xmmword_1969F0190;
  *((_OWORD *)v11 + 6) = unk_1969F01A0;
  *((_OWORD *)v11 + 7) = xmmword_1969F01B0;
  *((_OWORD *)v11 + 8) = unk_1969F01C0;
  *((_OWORD *)v11 + 1) = constinit_0;
  *((_OWORD *)v11 + 2) = unk_1969F0160;
  *((_OWORD *)v11 + 3) = xmmword_1969F0170;
  *((_OWORD *)v11 + 4) = unk_1969F0180;
  *((_BYTE *)v11 + 144) = 1;
  v12 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 12) = 1;
  *(_QWORD *)v12 = &off_1E339FC68;
  v13 = *((_BYTE *)v11 + 144);
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v15 = *((_OWORD *)v11 + 1);
  v16 = *((_OWORD *)v11 + 2);
  v17 = *((_OWORD *)v11 + 4);
  *(_OWORD *)(result + 48) = *((_OWORD *)v11 + 3);
  *(_OWORD *)(result + 64) = v17;
  *(_OWORD *)(result + 16) = v15;
  *(_OWORD *)(result + 32) = v16;
  v18 = *((_OWORD *)v11 + 5);
  v19 = *((_OWORD *)v11 + 6);
  v20 = *((_OWORD *)v11 + 8);
  *(_OWORD *)(result + 112) = *((_OWORD *)v11 + 7);
  *(_OWORD *)(result + 128) = v20;
  *(_OWORD *)(result + 80) = v18;
  *(_OWORD *)(result + 96) = v19;
  *(_BYTE *)(result + 144) = v13;
  *(_QWORD *)(v12 + 16) = result;
  *(_QWORD *)a2 = v12;
  *(_DWORD *)(a2 + 16) = 0;
  if (v11[2] == 1)
  {
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)(*(_QWORD *)v11 + 8) = 3;
      *(_QWORD *)v11 = 0;
    }
    return bmalloc::api::isoDeallocate((bmalloc::api *)v11, v14);
  }
  else
  {
    --v11[2];
  }
  return result;
}

WTF *WebCore::CSSMatrixComponent::create(WebCore::CSSFunctionValue &)::$_0::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *result;
  WebCore::CSSMatrixComponent *v22;
  WTF::StringBuilder *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v24 = a4;
    v25 = a3;
    v7 = 0;
    v8 = 0;
    v9 = a2 + 16;
    while (1)
    {
      if (v7 > 3)
      {
        if (*(_DWORD *)(a2 + 8) <= v7)
        {
          __break(0xC471u);
          JUMPOUT(0x19591FA24);
        }
        v10 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (v8 - 4));
      }
      else
      {
        v10 = (_QWORD *)(v9 + 8 * v8);
      }
      WebCore::CSSStyleValueFactory::reifyValue(&v26, *v10, 0, 0);
      if (v28)
        break;
      v14 = v26;
      v26 = 0;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14) != 10)
      {
        if (*(_DWORD *)(v14 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        else
          --*(_DWORD *)(v14 + 8);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = 0;
        v18 = v31;
        *(_BYTE *)a1 = 33;
        *(_QWORD *)(a1 + 8) = v18;
LABEL_14:
        *(_DWORD *)(a1 + 16) = 1;
        goto LABEL_19;
      }
      v15 = *(_QWORD *)(v14 + 72);
      v31 = v15;
      v16 = HIDWORD(v30);
      if (HIDWORD(v30) == (_DWORD)v30)
      {
        v17 = (_QWORD *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, HIDWORD(v30) + 1, (unint64_t)&v31);
        v16 = HIDWORD(v30);
        *((_QWORD *)v29 + HIDWORD(v30)) = *v17;
      }
      else
      {
        *((_QWORD *)v29 + HIDWORD(v30)) = v15;
      }
      HIDWORD(v30) = v16 + 1;
      if (*(_DWORD *)(v14 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      else
        --*(_DWORD *)(v14 + 8);
      v12 = 1;
LABEL_19:
      if (v28 != -1)
        ((void (*)(uint64_t *, uint64_t *))off_1E339FD60[v28])(&v31, &v26);
      if (!v12)
        goto LABEL_32;
      v7 = v8 + 1;
      v8 = (v8 + 1);
      if (v5 == v7)
      {
        v19 = HIDWORD(v30);
        a4 = v24;
        a3 = v25;
        goto LABEL_29;
      }
    }
    if (v28 != 1)
    {
      v22 = (WebCore::CSSMatrixComponent *)std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF *)WebCore::CSSMatrixComponent::serialize(v22, v23);
    }
    v12 = 0;
    v13 = v27;
    v27 = 0;
    *(_BYTE *)a1 = v26;
    *(_QWORD *)(a1 + 8) = v13;
    goto LABEL_14;
  }
  v19 = 0;
LABEL_29:
  if (v19 == a4)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, WTF **))(*(_QWORD *)*a3 + 16))(&v26, *a3, &v29);
    *(_QWORD *)a1 = v26;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = v26;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a1 + 16) = 1;
  }
LABEL_32:
  result = v29;
  if (v29)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

char *WebCore::CSSMatrixComponent::serialize(WebCore::CSSMatrixComponent *this, WTF::StringBuilder *a2)
{
  uint64_t v2;
  WTF::StringBuilder *v3;
  WTF::StringBuilder *v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  _WORD *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47[16];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63[16];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char v71[16];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79[16];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87[16];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95[16];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103[16];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char v111[16];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char v119[16];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127[16];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char __s[16];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  int8x16_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  int8x16_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  int8x16_t v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  int8x16_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  int8x16_t v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  size_t __n[2];
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  size_t v366[2];
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  uint64_t v399;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v399 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(v2 + 12))
  {
    WTF::numberToString();
    HIDWORD(v302) = strlen(v295.i8);
    WTF::numberToString();
    HIDWORD(v294) = strlen((const char *)&v287);
    WTF::numberToString();
    HIDWORD(v286) = strlen((const char *)&v279);
    WTF::numberToString();
    HIDWORD(v278) = strlen((const char *)&v271);
    WTF::numberToString();
    HIDWORD(v270) = strlen((const char *)&v263);
    WTF::numberToString();
    HIDWORD(v262) = strlen((const char *)&v255);
    v5 = *((_QWORD *)v4 + 1);
    if ((v5 || (v5 = *(_QWORD *)v4) != 0) && (*(_BYTE *)(v5 + 16) & 4) == 0)
    {
      result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
      if (result)
      {
        v347 = v299;
        v348 = v300;
        v349 = v301;
        v350 = v302;
        v343 = (__int128)v295;
        v344 = v296;
        v345 = v297;
        v346 = v298;
        v338 = v290;
        v337 = v289;
        v336 = v288;
        v335 = v287;
        v342 = v294;
        v341 = v293;
        v340 = v292;
        v339 = v291;
        v330 = v282;
        v329 = v281;
        v328 = v280;
        v327 = v279;
        v334 = v286;
        v333 = v285;
        v332 = v284;
        v331 = v283;
        v322 = v274;
        v321 = v273;
        v320 = v272;
        v319 = v271;
        v326 = v278;
        v325 = v277;
        v324 = v276;
        v323 = v275;
        v314 = v266;
        v313 = v265;
        v312 = v264;
        v311 = v263;
        v318 = v270;
        v317 = v269;
        v316 = v268;
        v315 = v267;
        v306 = v258;
        v305 = v257;
        v304 = v256;
        v303 = (int8x16_t)v255;
        v310 = v262;
        v309 = v261;
        v308 = v260;
        v307 = v259;
        *(_QWORD *)result = 0x7200740061006DLL;
        *((_DWORD *)result + 2) = 7864425;
        *((_WORD *)result + 6) = 40;
        v395 = v347;
        v396 = v348;
        v397 = v349;
        v398 = v350;
        v391 = v343;
        v392 = v344;
        v393 = v345;
        v394 = v346;
        v386 = v338;
        v385 = v337;
        v384 = v336;
        v383 = v335;
        v390 = v342;
        v389 = v341;
        v388 = v340;
        v387 = v339;
        v378 = v330;
        v377 = v329;
        v376 = v328;
        v375 = v327;
        v382 = v334;
        v381 = v333;
        v380 = v332;
        v379 = v331;
        v370 = v322;
        v369 = v321;
        v368 = v320;
        v367 = v319;
        v374 = v326;
        v373 = v325;
        v372 = v324;
        v371 = v323;
        v362 = v314;
        v361 = v313;
        v360 = v312;
        v359 = v311;
        *(_OWORD *)v366 = v318;
        v365 = v317;
        v364 = v316;
        v363 = v315;
        v354 = v306;
        v353 = v305;
        v352 = v304;
        v351 = v303;
        *(_OWORD *)__n = v310;
        v357 = v309;
        v356 = v308;
        v355 = v307;
        return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(result + 14, (int8x16_t *)&v391, (int8x16_t *)", ", 2, &v383, (int8x16_t *)", ", 2, &v375, (int8x16_t *)", ", 2, &v367, (int8x16_t *)", ", 2, &v359, (int8x16_t *)", ", 2, (__int128 *)v351.i8, 41);
      }
    }
    else
    {
      result = (char *)MEMORY[0x19AEA4824](v4);
      if (result)
      {
        v355 = v299;
        v356 = v300;
        v357 = v301;
        *(_OWORD *)__n = v302;
        v351 = v295;
        v352 = v296;
        v353 = v297;
        v354 = v298;
        v346 = v290;
        v345 = v289;
        v344 = v288;
        v343 = v287;
        v350 = v294;
        v349 = v293;
        v348 = v292;
        v347 = v291;
        v338 = v282;
        v337 = v281;
        v336 = v280;
        v335 = v279;
        v342 = v286;
        v341 = v285;
        v340 = v284;
        v339 = v283;
        v330 = v274;
        v329 = v273;
        v328 = v272;
        v327 = v271;
        v334 = v278;
        v333 = v277;
        v332 = v276;
        v331 = v275;
        v322 = v266;
        v321 = v265;
        v320 = v264;
        v319 = v263;
        v326 = v270;
        v325 = v269;
        v324 = v268;
        v323 = v267;
        v314 = v258;
        v313 = v257;
        v312 = v256;
        v311 = v255;
        v318 = v262;
        v317 = v261;
        v316 = v260;
        v315 = v259;
        *(_DWORD *)result = 1920229741;
        *(_DWORD *)(result + 3) = 678979954;
        v9 = result + 7;
        v10 = HIDWORD(__n[1]);
        if (HIDWORD(__n[1]))
        {
          if (HIDWORD(__n[1]) == 1)
            *v9 = v351.i8[0];
          else
            memcpy(result + 7, &v351, HIDWORD(__n[1]));
        }
        v11 = &v9[v10];
        *v11 = 8236;
        v12 = v11 + 1;
        v363 = v347;
        v364 = v348;
        v365 = v349;
        *(_OWORD *)v366 = v350;
        v359 = v343;
        v360 = v344;
        v361 = v345;
        v362 = v346;
        v13 = HIDWORD(v350);
        if (HIDWORD(v350))
        {
          if (HIDWORD(v350) == 1)
            *v12 = v359;
          else
            memcpy(v12, &v359, HIDWORD(v350));
        }
        v395 = v339;
        v396 = v340;
        v397 = v341;
        v398 = v342;
        v391 = v335;
        v392 = v336;
        v393 = v337;
        v394 = v338;
        v386 = v330;
        v385 = v329;
        v384 = v328;
        v383 = v327;
        v390 = v334;
        v389 = v333;
        v388 = v332;
        v387 = v331;
        v378 = v322;
        v377 = v321;
        v376 = v320;
        v375 = v319;
        v382 = v326;
        v381 = v325;
        v380 = v324;
        v379 = v323;
        v370 = v314;
        v369 = v313;
        v368 = v312;
        v367 = v311;
        v374 = v318;
        v373 = v317;
        v372 = v316;
        v371 = v315;
        return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(&v12[v13], ", ", 2u, &v391, ", ", 2u, &v383, v8, ", ", 2, &v375, ", ", 2, &v367, 41);
      }
    }
  }
  else
  {
    WTF::numberToString();
    HIDWORD(v142) = strlen(__s);
    WTF::numberToString();
    HIDWORD(v134) = strlen(v127);
    WTF::numberToString();
    HIDWORD(v126) = strlen(v119);
    WTF::numberToString();
    HIDWORD(v118) = strlen(v111);
    WTF::numberToString();
    HIDWORD(v110) = strlen(v103);
    WTF::numberToString();
    HIDWORD(v102) = strlen(v95);
    WTF::numberToString();
    HIDWORD(v94) = strlen(v87);
    WTF::numberToString();
    HIDWORD(v86) = strlen(v79);
    WTF::numberToString();
    HIDWORD(v78) = strlen(v71);
    WTF::numberToString();
    HIDWORD(v70) = strlen(v63);
    WTF::numberToString();
    HIDWORD(v62) = strlen(v55);
    WTF::numberToString();
    HIDWORD(v54) = strlen(v47);
    WTF::numberToString();
    HIDWORD(v46) = strlen(v39);
    WTF::numberToString();
    HIDWORD(v38) = strlen(v31);
    WTF::numberToString();
    HIDWORD(v30) = strlen(v23);
    WTF::numberToString();
    HIDWORD(v22) = strlen(v15);
    v7 = *((_QWORD *)v4 + 1);
    if ((v7 || (v7 = *(_QWORD *)v4) != 0) && (*(_BYTE *)(v7 + 16) & 4) == 0)
    {
      result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
      if (result)
      {
        v267 = v139;
        v268 = v140;
        v269 = v141;
        v270 = v142;
        v263 = *(_OWORD *)__s;
        v264 = v136;
        v265 = v137;
        v266 = v138;
        v258 = v130;
        v257 = v129;
        v256 = v128;
        v255 = *(_OWORD *)v127;
        v262 = v134;
        v261 = v133;
        v260 = v132;
        v259 = v131;
        v250 = v122;
        v249 = v121;
        v248 = v120;
        v247 = *(_OWORD *)v119;
        v254 = v126;
        v253 = v125;
        v252 = v124;
        v251 = v123;
        v242 = v114;
        v241 = v113;
        v240 = v112;
        v239 = *(_OWORD *)v111;
        v246 = v118;
        v245 = v117;
        v244 = v116;
        v243 = v115;
        v234 = v106;
        v233 = v105;
        v232 = v104;
        v231 = *(int8x16_t *)v103;
        v238 = v110;
        v237 = v109;
        v236 = v108;
        v235 = v107;
        v226 = v98;
        v225 = v97;
        v224 = v96;
        v223 = *(int8x16_t *)v95;
        v230 = v102;
        v229 = v101;
        v228 = v100;
        v227 = v99;
        v218 = v90;
        v217 = v89;
        v216 = v88;
        v215 = *(_OWORD *)v87;
        v222 = v94;
        v221 = v93;
        v220 = v92;
        v219 = v91;
        v210 = v82;
        v209 = v81;
        v208 = v80;
        v207 = *(_OWORD *)v79;
        v214 = v86;
        v213 = v85;
        v212 = v84;
        v211 = v83;
        v202 = v74;
        v201 = v73;
        v200 = v72;
        v199 = *(_OWORD *)v71;
        v206 = v78;
        v205 = v77;
        v204 = v76;
        v203 = v75;
        v194 = v66;
        v193 = v65;
        v192 = v64;
        v191 = *(_OWORD *)v63;
        v198 = v70;
        v197 = v69;
        v196 = v68;
        v195 = v67;
        v186 = v58;
        v185 = v57;
        v184 = v56;
        v183 = *(_OWORD *)v55;
        v190 = v62;
        v189 = v61;
        v188 = v60;
        v187 = v59;
        v178 = v50;
        v177 = v49;
        v176 = v48;
        v175 = *(_OWORD *)v47;
        v182 = v54;
        v181 = v53;
        v180 = v52;
        v179 = v51;
        v170 = v42;
        v169 = v41;
        v168 = v40;
        v167 = *(_OWORD *)v39;
        v174 = v46;
        v173 = v45;
        v172 = v44;
        v171 = v43;
        v162 = v34;
        v161 = v33;
        v160 = v32;
        v159 = *(_OWORD *)v31;
        v166 = v38;
        v165 = v37;
        v164 = v36;
        v163 = v35;
        v154 = v26;
        v153 = v25;
        v152 = v24;
        v151 = *(_OWORD *)v23;
        v158 = v30;
        v157 = v29;
        v156 = v28;
        v155 = v27;
        v146 = v18;
        v145 = v17;
        v144 = v16;
        v143 = *(_OWORD *)v15;
        v150 = v22;
        v149 = v21;
        v148 = v20;
        v147 = v19;
        *(_OWORD *)result = xmmword_1969F01F0;
        *((_WORD *)result + 8) = 40;
        v395 = v267;
        v396 = v268;
        v397 = v269;
        v398 = v270;
        v391 = v263;
        v392 = v264;
        v393 = v265;
        v394 = v266;
        v386 = v258;
        v385 = v257;
        v384 = v256;
        v383 = v255;
        v390 = v262;
        v389 = v261;
        v388 = v260;
        v387 = v259;
        v378 = v250;
        v377 = v249;
        v376 = v248;
        v375 = v247;
        v382 = v254;
        v381 = v253;
        v380 = v252;
        v379 = v251;
        v370 = v242;
        v369 = v241;
        v368 = v240;
        v367 = v239;
        v374 = v246;
        v373 = v245;
        v372 = v244;
        v371 = v243;
        v362 = v234;
        v361 = v233;
        v360 = v232;
        v359 = (__int128)v231;
        *(_OWORD *)v366 = v238;
        v365 = v237;
        v364 = v236;
        v363 = v235;
        v354 = v226;
        v353 = v225;
        v352 = v224;
        v351 = v223;
        *(_OWORD *)__n = v230;
        v357 = v229;
        v356 = v228;
        v355 = v227;
        v346 = v218;
        v345 = v217;
        v344 = v216;
        v343 = v215;
        v350 = v222;
        v349 = v221;
        v348 = v220;
        v347 = v219;
        v338 = v210;
        v337 = v209;
        v336 = v208;
        v335 = v207;
        v342 = v214;
        v341 = v213;
        v340 = v212;
        v339 = v211;
        v330 = v202;
        v329 = v201;
        v328 = v200;
        v327 = v199;
        v334 = v206;
        v333 = v205;
        v332 = v204;
        v331 = v203;
        v322 = v194;
        v321 = v193;
        v320 = v192;
        v319 = v191;
        v326 = v198;
        v325 = v197;
        v324 = v196;
        v323 = v195;
        v314 = v186;
        v313 = v185;
        v312 = v184;
        v311 = v183;
        v318 = v190;
        v317 = v189;
        v316 = v188;
        v315 = v187;
        v306 = v178;
        v305 = v177;
        v304 = v176;
        v303 = (int8x16_t)v175;
        v310 = v182;
        v309 = v181;
        v308 = v180;
        v307 = v179;
        v298 = v170;
        v297 = v169;
        v296 = v168;
        v295 = (int8x16_t)v167;
        v302 = v174;
        v301 = v173;
        v300 = v172;
        v299 = v171;
        v290 = v162;
        v289 = v161;
        v288 = v160;
        v287 = v159;
        v294 = v166;
        v293 = v165;
        v292 = v164;
        v291 = v163;
        v282 = v154;
        v281 = v153;
        v280 = v152;
        v279 = v151;
        v286 = v158;
        v285 = v157;
        v284 = v156;
        v283 = v155;
        v274 = v146;
        v273 = v145;
        v272 = v144;
        v271 = v143;
        v278 = v150;
        v277 = v149;
        v276 = v148;
        v275 = v147;
        return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)(result + 18), (uint64_t)&v391, (uint64_t)", ", 2, (uint64_t)&v383, (uint64_t)", ", 2, (uint64_t)&v375, (int8x16_t *)", ", 2, (int8x16_t *)&v367, (int8x16_t *)", ", 2, (int8x16_t *)&v359, (int8x16_t *)", ", 2, &v351, (int8x16_t *)", ", 2,
                 (int8x16_t *)&v343,
                 (int8x16_t *)", ",
                 2,
                 (int8x16_t *)&v335,
                 (int8x16_t *)", ",
                 2,
                 &v327,
                 (int8x16_t *)", ",
                 2,
                 &v319,
                 (int8x16_t *)", ",
                 2,
                 (int8x16_t *)&v311,
                 (int8x16_t *)", ",
                 2,
                 (__int128 *)v303.i8,
                 (int8x16_t *)", ",
                 2,
                 (__int128 *)v295.i8,
                 (int8x16_t *)", ",
                 2,
                 &v287,
                 (int8x16_t *)", ",
                 2,
                 &v279,
                 (int8x16_t *)", ",
                 2,
                 &v271,
                 0x29u);
      }
    }
    else
    {
      result = (char *)MEMORY[0x19AEA4824](v4);
      if (result)
      {
        v395 = v139;
        v396 = v140;
        v397 = v141;
        v398 = v142;
        v391 = *(_OWORD *)__s;
        v392 = v136;
        v393 = v137;
        v394 = v138;
        v386 = v130;
        v385 = v129;
        v384 = v128;
        v383 = *(_OWORD *)v127;
        v390 = v134;
        v389 = v133;
        v388 = v132;
        v387 = v131;
        v378 = v122;
        v377 = v121;
        v376 = v120;
        v375 = *(_OWORD *)v119;
        v382 = v126;
        v381 = v125;
        v380 = v124;
        v379 = v123;
        v370 = v114;
        v369 = v113;
        v368 = v112;
        v367 = *(_OWORD *)v111;
        v374 = v118;
        v373 = v117;
        v372 = v116;
        v371 = v115;
        v362 = v106;
        v361 = v105;
        v360 = v104;
        v359 = *(_OWORD *)v103;
        *(_OWORD *)v366 = v110;
        v365 = v109;
        v364 = v108;
        v363 = v107;
        v354 = v98;
        v353 = v97;
        v352 = v96;
        v351 = *(int8x16_t *)v95;
        *(_OWORD *)__n = v102;
        v357 = v101;
        v356 = v100;
        v355 = v99;
        v346 = v90;
        v345 = v89;
        v344 = v88;
        v343 = *(_OWORD *)v87;
        v350 = v94;
        v349 = v93;
        v348 = v92;
        v347 = v91;
        v338 = v82;
        v337 = v81;
        v336 = v80;
        v335 = *(_OWORD *)v79;
        v342 = v86;
        v341 = v85;
        v340 = v84;
        v339 = v83;
        v330 = v74;
        v329 = v73;
        v328 = v72;
        v327 = *(_OWORD *)v71;
        v334 = v78;
        v333 = v77;
        v332 = v76;
        v331 = v75;
        v322 = v66;
        v321 = v65;
        v320 = v64;
        v319 = *(_OWORD *)v63;
        v326 = v70;
        v325 = v69;
        v324 = v68;
        v323 = v67;
        v314 = v58;
        v313 = v57;
        v312 = v56;
        v311 = *(_OWORD *)v55;
        v318 = v62;
        v317 = v61;
        v316 = v60;
        v315 = v59;
        v306 = v50;
        v305 = v49;
        v304 = v48;
        v303 = *(int8x16_t *)v47;
        v310 = v54;
        v309 = v53;
        v308 = v52;
        v307 = v51;
        v298 = v42;
        v297 = v41;
        v296 = v40;
        v295 = *(int8x16_t *)v39;
        v302 = v46;
        v301 = v45;
        v300 = v44;
        v299 = v43;
        v290 = v34;
        v289 = v33;
        v288 = v32;
        v287 = *(_OWORD *)v31;
        v294 = v38;
        v293 = v37;
        v292 = v36;
        v291 = v35;
        v282 = v26;
        v281 = v25;
        v280 = v24;
        v279 = *(_OWORD *)v23;
        v286 = v30;
        v285 = v29;
        v284 = v28;
        v283 = v27;
        v274 = v18;
        v273 = v17;
        v272 = v16;
        v271 = *(_OWORD *)v15;
        v278 = v22;
        v277 = v21;
        v276 = v20;
        v275 = v19;
        return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)result, (uint64_t)"matrix3d(", 9, (uint64_t)&v391, (uint64_t)", ", 2, (uint64_t)&v383, v14, (uint64_t)", ", 2, &v375, ", ", 2u, &v367, ", ", 2u, &v359, ", ", 2u,
                 (__int128 *)v351.i8,
                 ", ",
                 2u,
                 &v343,
                 ", ",
                 2,
                 &v335,
                 ", ",
                 2,
                 &v327,
                 ", ",
                 2,
                 &v319,
                 ", ",
                 2,
                 &v311,
                 ", ",
                 2,
                 (__int128 *)v303.i8,
                 ", ",
                 2,
                 (__int128 *)v295.i8,
                 ", ",
                 2,
                 &v287,
                 ", ",
                 2,
                 &v279,
                 ", ",
                 2,
                 &v271,
                 0x29u);
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSMatrixComponent::toMatrix@<X0>(WebCore::CSSMatrixComponent *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((unsigned __int8 *)this + 12);
  result = *((_QWORD *)this + 2);
  if (v3)
  {
    v5 = *(_QWORD *)(result + 16);
    v6 = *(_QWORD *)(result + 24);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_QWORD *)(result + 56);
    v9 = *(_QWORD *)(result + 112);
    v10 = *(_QWORD *)(result + 120);
    result = bmalloc::api::isoAllocate();
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = v7;
    *(_QWORD *)(result + 56) = v8;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 80) = xmmword_1969F01D0;
    *(_OWORD *)(result + 96) = unk_1969F01E0;
    *(_QWORD *)(result + 112) = v9;
    *(_QWORD *)(result + 120) = v10;
    *(_OWORD *)(result + 128) = xmmword_1968A14C0;
    *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    ++*(_DWORD *)(result + 8);
  }
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

WTF *WebCore::CSSMatrixComponent::toCSSValue@<X0>(WebCore::CSSMatrixComponent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  _OWORD *v4;
  __int128 v5;
  double v6;
  int *v8;
  char v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double v32;
  int *v34;
  char v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  _DWORD *v46;
  WTF *v47;
  WTF *v49;
  uint64_t v50;
  _DWORD *v51;
  WTF *result;
  int v54;
  int v55;
  WTF *__src;
  WTF *__srca;
  WTF *v59;
  int v60;
  unsigned int v61;
  _BYTE v62[32];
  WTF *v63;
  int v64;
  unsigned int v65;
  _BYTE v66[32];
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  _BYTE v70[32];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = 0;
  v3 = 0;
  if (*((_BYTE *)this + 12))
  {
    v4 = (_OWORD *)*((_QWORD *)this + 2);
    v5 = v4[3];
    v71 = v4[1];
    v72 = v5;
    v73 = v4[7];
    v68 = (WTF *)v70;
    v69 = 4;
    do
    {
      v6 = *(double *)((char *)&v71 + v2);
      if ((int)v6 <= 0xFF
        && *(_QWORD *)((char *)&v71 + v2) == COERCE__INT64((double)(int)v6))
      {
        v8 = &WebCore::staticCSSValuePool[4 * (int)v6 + 2064];
        *v8 += 2;
      }
      else
      {
        v8 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v8 = 2;
        v9 = *((_BYTE *)v8 + 6);
        *((_WORD *)v8 + 2) = 1;
        *((_BYTE *)v8 + 6) = v9 & 0xFC;
        *((double *)v8 + 1) = v6;
        v3 = HIDWORD(v69);
      }
      v10 = v3;
      if (v3 == (_DWORD)v69)
      {
        v12 = v3 + ((unint64_t)v3 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= (unint64_t)v3 + 1)
          v14 = v3 + 1;
        else
          v14 = v13;
        __src = v68;
        if (v14 < 5)
        {
          v68 = (WTF *)v70;
          LODWORD(v69) = 4;
          v15 = (WTF *)v70;
        }
        else
        {
          if (v14 >> 29)
            goto LABEL_107;
          v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
          LODWORD(v69) = v14;
          v68 = v15;
        }
        memcpy(v15, __src, 8 * v10);
        if (v70 != (_BYTE *)__src && __src)
        {
          if (v68 == __src)
          {
            v68 = 0;
            LODWORD(v69) = 0;
          }
          WTF::fastFree(__src, v16);
        }
        v3 = HIDWORD(v69);
        v11 = (char *)v68 + 8 * HIDWORD(v69);
      }
      else
      {
        v11 = (char *)v68 + 8 * v3;
      }
      *(_QWORD *)v11 = v8;
      HIDWORD(v69) = ++v3;
      v2 += 8;
    }
    while (v2 != 48);
    v63 = (WTF *)v66;
    v64 = 4;
    v17 = v68;
    if (v68 == (WTF *)v70)
    {
      memcpy(v66, v70, 8 * v3);
    }
    else
    {
      v68 = (WTF *)v70;
      v63 = v17;
      v54 = v69;
      LODWORD(v69) = 4;
      v64 = v54;
    }
    HIDWORD(v69) = 0;
    v65 = v3;
    WebCore::CSSFunctionValue::create(840, (uint64_t)&v63, &v67);
    *a2 = v67;
    v67 = 0;
    if (v65)
    {
      v19 = v63;
      v20 = 8 * v65;
      do
      {
        v21 = *(_DWORD **)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*v21 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v18);
          else
            *v21 -= 2;
        }
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
    }
    v22 = v63;
    if (v66 != (_BYTE *)v63 && v63 != 0)
    {
      v63 = 0;
      v64 = 0;
      WTF::fastFree(v22, v18);
    }
    if (HIDWORD(v69))
    {
      v24 = v68;
      v25 = 8 * HIDWORD(v69);
      do
      {
        v26 = *(_DWORD **)v24;
        *(_QWORD *)v24 = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v18);
          else
            *v26 -= 2;
        }
        v24 = (WTF *)((char *)v24 + 8);
        v25 -= 8;
      }
      while (v25);
    }
  }
  else
  {
    v27 = (_OWORD *)*((_QWORD *)this + 2);
    v28 = v27[2];
    v71 = v27[1];
    v72 = v28;
    v29 = v27[4];
    v73 = v27[3];
    v74 = v29;
    v30 = v27[6];
    v75 = v27[5];
    v76 = v30;
    v31 = v27[8];
    v77 = v27[7];
    v78 = v31;
    v68 = (WTF *)v70;
    v69 = 4;
    do
    {
      v32 = *(double *)((char *)&v71 + v2);
      if ((int)v32 <= 0xFF
        && *(_QWORD *)((char *)&v71 + v2) == COERCE__INT64((double)(int)v32))
      {
        v34 = &WebCore::staticCSSValuePool[4 * (int)v32 + 2064];
        *v34 += 2;
      }
      else
      {
        v34 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v34 = 2;
        v35 = *((_BYTE *)v34 + 6);
        *((_WORD *)v34 + 2) = 1;
        *((_BYTE *)v34 + 6) = v35 & 0xFC;
        *((double *)v34 + 1) = v32;
        v3 = HIDWORD(v69);
      }
      v36 = v3;
      if (v3 == (_DWORD)v69)
      {
        v38 = v3 + ((unint64_t)v3 >> 2);
        if (v38 >= 0x10)
          v39 = v38 + 1;
        else
          v39 = 16;
        if (v39 <= (unint64_t)v3 + 1)
          v40 = v3 + 1;
        else
          v40 = v39;
        __srca = v68;
        if (v40 < 5)
        {
          v68 = (WTF *)v70;
          LODWORD(v69) = 4;
          v41 = (WTF *)v70;
        }
        else
        {
          if (v40 >> 29)
          {
LABEL_107:
            __break(0xC471u);
            JUMPOUT(0x195921B1CLL);
          }
          v41 = (WTF *)WTF::fastMalloc((WTF *)(8 * v40));
          LODWORD(v69) = v40;
          v68 = v41;
        }
        memcpy(v41, __srca, 8 * v36);
        if (v70 != (_BYTE *)__srca && __srca)
        {
          if (v68 == __srca)
          {
            v68 = 0;
            LODWORD(v69) = 0;
          }
          WTF::fastFree(__srca, v42);
        }
        v3 = HIDWORD(v69);
        v37 = (char *)v68 + 8 * HIDWORD(v69);
      }
      else
      {
        v37 = (char *)v68 + 8 * v3;
      }
      *(_QWORD *)v37 = v34;
      HIDWORD(v69) = ++v3;
      v2 += 8;
    }
    while (v2 != 128);
    v59 = (WTF *)v62;
    v60 = 4;
    v43 = v68;
    if (v68 == (WTF *)v70)
    {
      memcpy(v62, v70, 8 * v3);
    }
    else
    {
      v68 = (WTF *)v70;
      v59 = v43;
      v55 = v69;
      LODWORD(v69) = 4;
      v60 = v55;
    }
    HIDWORD(v69) = 0;
    v61 = v3;
    WebCore::CSSFunctionValue::create(841, (uint64_t)&v59, &v67);
    *a2 = v67;
    v67 = 0;
    if (v61)
    {
      v44 = v59;
      v45 = 8 * v61;
      do
      {
        v46 = *(_DWORD **)v44;
        *(_QWORD *)v44 = 0;
        if (v46)
        {
          if (*v46 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, v18);
          else
            *v46 -= 2;
        }
        v44 = (WTF *)((char *)v44 + 8);
        v45 -= 8;
      }
      while (v45);
    }
    v47 = v59;
    if (v62 != (_BYTE *)v59 && v59 != 0)
    {
      v59 = 0;
      v60 = 0;
      WTF::fastFree(v47, v18);
    }
    if (HIDWORD(v69))
    {
      v49 = v68;
      v50 = 8 * HIDWORD(v69);
      do
      {
        v51 = *(_DWORD **)v49;
        *(_QWORD *)v49 = 0;
        if (v51)
        {
          if (*v51 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v51, v18);
          else
            *v51 -= 2;
        }
        v49 = (WTF *)((char *)v49 + 8);
        v50 -= 8;
      }
      while (v50);
    }
  }
  result = v68;
  if (v70 != (_BYTE *)v68 && v68 != 0)
  {
    v68 = 0;
    LODWORD(v69) = 0;
    return (WTF *)WTF::fastFree(result, v18);
  }
  return result;
}

uint64_t WebCore::CSSPerspective::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t (*v9)();
  uint64_t v10;
  _BYTE v11[8];
  unsigned int v12;
  _BYTE v13[8];
  int v14;
  char v15;
  char *v16;
  char **v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v14 = -1;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E339FD38[v3])(&v18, v13, a1);
  v14 = v3;
  v15 = 0;
  v16 = &v15;
  v17 = &v16;
  ((void (*)(uint64_t *__return_ptr, char ***, _BYTE *))off_1E339FCF8[v3])(&v18, &v17, v13);
  if (v14 != -1)
    ((void (*)(char ***, _BYTE *))off_1E339FD20[v14])(&v17, v13);
  v14 = -1;
  if (v21)
  {
    if (v21 == 1)
    {
      v4 = v20;
      v20 = 0;
      *(_BYTE *)a2 = v19[0];
      *(_QWORD *)(a2 + 8) = v4;
      v5 = 1;
      *(_DWORD *)(a2 + 16) = 1;
      return ((uint64_t (*)(char ***, _BYTE *))off_1E339FD50[v5])(&v17, v19);
    }
LABEL_15:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  result = bmalloc::api::isoAllocate();
  if (v21)
    goto LABEL_15;
  v7 = result;
  v11[0] = 0;
  v12 = -1;
  v8 = v20;
  if ((_DWORD)v20 == -1)
  {
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = 0;
    *(_QWORD *)result = &off_1E339FCB0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = -1;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else
  {
    v9 = off_1E339FD38[v20];
    ((void (*)(char ***, _BYTE *, _BYTE *))v9)(&v17, v11, v19);
    v12 = v8;
    *(_DWORD *)(v7 + 8) = 1;
    *(_BYTE *)(v7 + 12) = 0;
    *(_QWORD *)v7 = &off_1E339FCB0;
    *(_BYTE *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 24) = -1;
    result = ((uint64_t (*)(char ***, uint64_t, _BYTE *))v9)(&v17, v7 + 16, v11);
    *(_DWORD *)(v7 + 24) = v8;
    v10 = v12;
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 16) = 0;
    if ((_DWORD)v10 != -1)
      result = ((uint64_t (*)(char ***, _BYTE *))off_1E339FD20[v10])(&v17, v11);
  }
  v12 = -1;
  v5 = v21;
  if (v21 != -1)
    return ((uint64_t (*)(char ***, _BYTE *))off_1E339FD50[v5])(&v17, v19);
  return result;
}

_QWORD *WebCore::CSSPerspective::create@<X0>(WebCore::CSSPerspective *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  int v18;
  _DWORD *v19;
  int v20;
  char v21;

  if (*((_WORD *)this + 28) == 842)
  {
    v4 = *((_DWORD *)this + 2);
    v5 = *((_QWORD *)this + 2);
    if (v4 != 1 || v5 == 0)
    {
      result = (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 33;
      *(_DWORD *)(a2 + 16) = 1;
      return result;
    }
    WebCore::CSSStyleValueFactory::reifyValue(&v14, v5, 0, 0);
    if (v16)
    {
      if (v16 != 1)
      {
        v11 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::CSSPerspective::setLength(v11, v12, v13);
      }
      v8 = v15;
      v15 = 0;
      *(_BYTE *)a2 = (_BYTE)v14;
      *(_QWORD *)(a2 + 8) = v8;
      v9 = 1;
      *(_DWORD *)(a2 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(_DWORD **, _DWORD **))off_1E339FD60[v9])(&v19, &v14);
    }
    v10 = v14;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14) == 12)
    {
      ++v10[2];
      v19 = v10;
      v20 = 2;
    }
    else
    {
      if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10) - 3 > 7)
      {
        result = (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_BYTE *)a2 = 33;
        *(_DWORD *)(a2 + 16) = 1;
        goto LABEL_20;
      }
      ++v10[2];
      v19 = v10;
      v20 = 0;
    }
    result = (_QWORD *)WebCore::CSSPerspective::create((uint64_t)&v19, a2);
    if (v20 != -1)
      result = (_QWORD *)((uint64_t (*)(char *, _DWORD **))off_1E339FD20[v20])(&v21, &v19);
LABEL_20:
    v9 = v16;
    if (v16 == -1)
      return result;
    return (_QWORD *)((uint64_t (*)(_DWORD **, _DWORD **))off_1E339FD60[v9])(&v19, &v14);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = 1;
  result = (_QWORD *)WebCore::CSSPerspective::create((uint64_t)v17, a2);
  if (v18 != -1)
    return (_QWORD *)((uint64_t (*)(_DWORD **, _BYTE *))off_1E339FD20[v18])(&v14, v17);
  return result;
}

_QWORD *WebCore::CSSPerspective::setLength@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  _BYTE v13[8];
  int v14;
  char v15;
  char *v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v14 = -1;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_16;
  ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E339FD38[v4])(&v17, v13, a2);
  v14 = v4;
  v15 = 0;
  v16 = &v15;
  v11 = &v16;
  result = ((_QWORD *(*)(uint64_t *__return_ptr, char ***, _BYTE *))off_1E339FCF8[v4])(&v17, &v11, v13);
  if (v14 != -1)
    result = (_QWORD *)((uint64_t (*)(char ***, _BYTE *))off_1E339FD20[v14])(&v11, v13);
  v14 = -1;
  if (v20)
  {
    if (v20 == 1)
    {
      v7 = v19;
      v19 = 0;
      *(_BYTE *)a3 = v18[0];
      *(_QWORD *)(a3 + 8) = v7;
      v8 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return (_QWORD *)((uint64_t (*)(char ***, _BYTE *))off_1E339FD50[v8])(&v11, v18);
    }
LABEL_16:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v11) = 0;
  v12 = -1;
  v9 = v19;
  if ((_DWORD)v19 == -1)
  {
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(char **, uint64_t))off_1E339FD20[v10])(&v16, a1 + 16);
      *(_DWORD *)(a1 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char **, char ***, _BYTE *))off_1E339FD38[v19])(&v16, &v11, v18);
    v12 = v9;
    v16 = (char *)(a1 + 16);
    result = (_QWORD *)((uint64_t (*)(char **))off_1E339FD70[v9])(&v16);
  }
  if (v12 != -1)
    result = (_QWORD *)((uint64_t (*)(char **, char ***))off_1E339FD20[v12])(&v16, &v11);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = v20;
  if (v20 != -1)
    return (_QWORD *)((uint64_t (*)(char ***, _BYTE *))off_1E339FD50[v8])(&v11, v18);
  return result;
}

uint64_t WebCore::CSSPerspective::serialize(WebCore::CSSPerspective *this, WTF::StringBuilder *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  WebCore::CSSPerspective *v11;
  _QWORD v12[3];
  _QWORD *v13;

  WTF::StringBuilder::append();
  v12[0] = a2;
  v12[1] = a2;
  v12[2] = a2;
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4 == -1)
  {
    v11 = (WebCore::CSSPerspective *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSPerspective::toMatrix(v11);
  }
  else
  {
    v13 = v12;
    result = ((uint64_t (*)(_QWORD **, char *))off_1E339FEC0[v4])(&v13, (char *)this + 16);
    LOBYTE(v12[0]) = 41;
    v6 = *((_QWORD *)a2 + 1);
    if (v6
      && ((v7 = *((unsigned int *)a2 + 4), v7 < *(_DWORD *)(v6 + 4))
        ? (v8 = *(_QWORD *)a2 == 0)
        : (v8 = 0),
          v8))
    {
      v9 = *(_DWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 8);
      *((_DWORD *)a2 + 4) = v7 + 1;
      if ((v9 & 4) != 0)
        *(_BYTE *)(v10 + v7) = 41;
      else
        *(_WORD *)(v10 + 2 * v7) = 41;
    }
    else
    {
      return WTF::StringBuilder::append();
    }
  }
  return result;
}

uint64_t WebCore::CSSPerspective::toMatrix@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;
  double v5;
  const double *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  _OWORD v16[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float64x2x4_t v20;
  float64x2x4_t v21;
  float64x2x4_t v22;
  float64x2x4_t v23;

  if (*(_DWORD *)(this + 24))
  {
    this = bmalloc::api::isoAllocate();
    *(_QWORD *)this = 0;
    *(_DWORD *)(this + 8) = 1;
    *(_OWORD *)(this + 80) = xmmword_1969F0190;
    *(float64x2_t *)(this + 96) = xmmword_1969F01A0;
    *(_OWORD *)(this + 112) = xmmword_1969F01B0;
    *(float64x2_t *)(this + 128) = xmmword_1969F01C0;
    *(_OWORD *)(this + 16) = constinit_0;
    *(float64x2_t *)(this + 32) = xmmword_1969F0160;
    *(_OWORD *)(this + 48) = xmmword_1969F0170;
    *(float64x2_t *)(this + 64) = xmmword_1969F0180;
    *(_BYTE *)(this + 144) = 1;
    *(_QWORD *)a2 = this;
    *(_DWORD *)(a2 + 16) = 0;
    return this;
  }
  v3 = *(_DWORD **)(this + 16);
  if (!v3)
    goto LABEL_12;
  ++v3[2];
  this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  if ((_DWORD)this != 10)
  {
    if (v3[2] == 1)
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
LABEL_12:
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    return this;
  }
  WebCore::CSSUnitValue::convertTo((uint64_t)v3, 6u, &v15);
  v4 = (_DWORD *)v15;
  if (v15)
  {
    v5 = *(double *)(v15 + 72);
    v17 = *(_OWORD *)&qword_1969F8F60;
    v18 = xmmword_1969F8F70;
    v19 = unk_1969F8F80;
    v16[0] = constinit_5;
    v16[1] = unk_1969F8F20;
    v16[2] = xmmword_1969F8F30;
    memset(&v16[3], 0, 32);
    if (v5 != 0.0)
      *((double *)&v17 + 1) = -1.0 / v5;
    v6 = (const double *)v16;
    v22 = vld4q_dup_f64(v6);
    v6 += 4;
    v20 = vld4q_dup_f64(v6);
    v6 += 4;
    v7 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], (float64x2_t)constinit_0), v22.val[1], (float64x2_t)xmmword_1969F0170), v22.val[2], (float64x2_t)xmmword_1969F0190), v22.val[3], (float64x2_t)xmmword_1969F01B0);
    v8 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], xmmword_1969F0160), v22.val[1], xmmword_1969F0180), v22.val[2], xmmword_1969F01A0), v22.val[3], xmmword_1969F01C0);
    v23 = vld4q_dup_f64(v6);
    v6 += 4;
    v9 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v20.val[0], (float64x2_t)constinit_0), v20.val[1], (float64x2_t)xmmword_1969F0170), v20.val[2], (float64x2_t)xmmword_1969F0190), v20.val[3], (float64x2_t)xmmword_1969F01B0);
    v10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v20.val[0], xmmword_1969F0160), v20.val[1], xmmword_1969F0180), v20.val[2], xmmword_1969F01A0), v20.val[3], xmmword_1969F01C0);
    v21 = vld4q_dup_f64(v6);
    v11 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], (float64x2_t)constinit_0), v23.val[1], (float64x2_t)xmmword_1969F0170), v23.val[2], (float64x2_t)xmmword_1969F0190), v23.val[3], (float64x2_t)xmmword_1969F01B0);
    v12 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], xmmword_1969F0160), v23.val[1], xmmword_1969F0180), v23.val[2], xmmword_1969F01A0), v23.val[3], xmmword_1969F01C0);
    v13 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v21.val[0], (float64x2_t)constinit_0), v21.val[1], (float64x2_t)xmmword_1969F0170), v21.val[2], (float64x2_t)xmmword_1969F0190), v21.val[3], (float64x2_t)xmmword_1969F01B0);
    v14 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v21.val[0], xmmword_1969F0160), v21.val[1], xmmword_1969F0180), v21.val[2], xmmword_1969F01A0), v21.val[3], xmmword_1969F01C0);
    this = bmalloc::api::isoAllocate();
    *(_QWORD *)this = 0;
    *(_DWORD *)(this + 8) = 1;
    *(float64x2_t *)(this + 16) = v7;
    *(float64x2_t *)(this + 32) = v8;
    *(float64x2_t *)(this + 48) = v9;
    *(float64x2_t *)(this + 96) = v12;
    *(float64x2_t *)(this + 112) = v13;
    *(float64x2_t *)(this + 128) = v14;
    *(float64x2_t *)(this + 64) = v10;
    *(float64x2_t *)(this + 80) = v11;
    *(_BYTE *)(this + 144) = 0;
    *(_QWORD *)a2 = this;
    *(_DWORD *)(a2 + 16) = 0;
    if (v4[2] == 1)
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  else
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 33;
    *(_DWORD *)(a2 + 16) = 1;
  }
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[2];
  return this;
}

void WebCore::CSSPerspective::toCSSValue(WebCore::CSSPerspective *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _DWORD *v8;
  WebCore::CSSMathMin *v9;
  _DWORD *v10;
  _QWORD v11[2];
  _QWORD *v12;

  v10 = 0;
  v11[0] = &v10;
  v11[1] = &v10;
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 == -1)
  {
    v9 = (WebCore::CSSMathMin *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::CSSMathMin::~CSSMathMin(v9);
  }
  else
  {
    v12 = v11;
    ((void (*)(_QWORD **, char *))off_1E339FED8[v3])(&v12, (char *)this + 16);
    v4 = v10;
    if (v10)
    {
      v10 = 0;
      v5 = WTF::fastCompactMalloc((WTF *)0x40);
      *(_DWORD *)v5 = 2;
      v7 = (*(unsigned __int8 *)(v5 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v5 + 8) = 1;
      *(_WORD *)(v5 + 4) = -7680;
      *(_BYTE *)(v5 + 6) = (v7 | 0x10000u) >> 16;
      *(_QWORD *)(v5 + 16) = v4;
      *(_WORD *)(v5 + 56) = 842;
      *a2 = v5;
      v8 = v10;
      v10 = 0;
      if (v8)
      {
        if (*v8 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
        else
          *v8 -= 2;
      }
    }
    else
    {
      *a2 = 0;
    }
  }
}

void WebCore::CSSMathMin::~CSSMathMin(WebCore::CSSMathMin *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSMathMax::~CSSMathMax(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::CSSMathMin::getType(WebCore::CSSMathMin *this)
{
  return 5;
}

BOOL WebCore::CSSMathMin::equals(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t i;
  uint64_t v9;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 5
    && (v4 = *(_QWORD *)(a1 + 72), v5 = a2[9], v6 = *(unsigned int *)(v4 + 20), (_DWORD)v6 == *(_DWORD *)(v5 + 20)))
  {
    if ((_DWORD)v6)
    {
      v7 = 0;
      for (i = 0; i != v6; v7 = i >= v6)
      {
        if (i >= *(unsigned int *)(v4 + 20) || i >= *(unsigned int *)(v5 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x1959226B4);
        }
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * i);
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 56))(v9, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * i)) & 1) == 0)break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t WebCore::CSSMathMin::getOperator(WebCore::CSSMathMin *this)
{
  return 4;
}

void WebCore::CSSMathNegate::~CSSMathNegate(WebCore::CSSMathNegate *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSMathNegate::getType(WebCore::CSSMathNegate *this)
{
  return 7;
}

uint64_t WebCore::CSSMathNegate::getOperator(WebCore::CSSMathNegate *this)
{
  return 2;
}

void WebCore::CSSMathProduct::~CSSMathProduct(WebCore::CSSMathProduct *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSMathMax::~CSSMathMax(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::CSSMathProduct::getType(WebCore::CSSMathProduct *this)
{
  return 8;
}

BOOL WebCore::CSSMathProduct::equals(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t i;
  uint64_t v9;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 8
    && (v4 = *(_QWORD *)(a1 + 72), v5 = a2[9], v6 = *(unsigned int *)(v4 + 20), (_DWORD)v6 == *(_DWORD *)(v5 + 20)))
  {
    if ((_DWORD)v6)
    {
      v7 = 0;
      for (i = 0; i != v6; v7 = i >= v6)
      {
        if (i >= *(unsigned int *)(v4 + 20) || i >= *(unsigned int *)(v5 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x195922938);
        }
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * i);
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 56))(v9, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * i)) & 1) == 0)break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t WebCore::CSSMathProduct::getOperator(WebCore::CSSMathProduct *this)
{
  return 1;
}

void WebCore::CSSMathSum::~CSSMathSum(WebCore::CSSMathSum *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSMathMax::~CSSMathMax(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::CSSMathSum::getType(WebCore::CSSMathSum *this)
{
  return 9;
}

BOOL WebCore::CSSMathSum::equals(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t i;
  uint64_t v9;

  if ((*(unsigned int (**)(_QWORD *))(*a2 + 24))(a2) == 9
    && (v4 = *(_QWORD *)(a1 + 72), v5 = a2[9], v6 = *(unsigned int *)(v4 + 20), (_DWORD)v6 == *(_DWORD *)(v5 + 20)))
  {
    if ((_DWORD)v6)
    {
      v7 = 0;
      for (i = 0; i != v6; v7 = i >= v6)
      {
        if (i >= *(unsigned int *)(v4 + 20) || i >= *(unsigned int *)(v5 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x195922A3CLL);
        }
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8 * i);
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 56))(v9, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * i)) & 1) == 0)break;
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t WebCore::CSSMathSum::getOperator(WebCore::CSSMathSum *this)
{
  return 0;
}

uint64_t WebCore::CSSTransformComponent::setIs2D(uint64_t this, char a2)
{
  *(_BYTE *)(this + 12) = a2;
  return this;
}

void WebCore::CSSMatrixComponent::~CSSMatrixComponent(WebCore::CSSMatrixComponent *this, void *a2)
{
  bmalloc::api *v3;

  *(_QWORD *)this = &off_1E339FC68;
  v3 = (bmalloc::api *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
        *(_QWORD *)v3 = 0;
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
}

{
  bmalloc::api *v3;

  *(_QWORD *)this = &off_1E339FC68;
  v3 = (bmalloc::api *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
        *(_QWORD *)v3 = 0;
      }
      bmalloc::api::isoDeallocate(v3, a2);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSMatrixComponent::getType(WebCore::CSSMatrixComponent *this)
{
  return 0;
}

void WebCore::CSSPerspective::~CSSPerspective(WebCore::CSSPerspective *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = &off_1E339FCB0;
  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E339FD20[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
}

void WebCore::CSSPerspective::~CSSPerspective(WebCore::CSSPerspective *this, void *a2)
{
  uint64_t v3;
  char v4;

  *(_QWORD *)this = &off_1E339FCB0;
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E339FD20[v3])(&v4, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSPerspective::getType(WebCore::CSSPerspective *this)
{
  return 1;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0,WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v2;

  *(_QWORD *)&result = 0x8000000080000000;
  *(_QWORD *)&v2 = 0x8000000080000000;
  *((_QWORD *)&v2 + 1) = 0x8000000080000000;
  *a1 = v2;
  a1[1] = xmmword_1968BD2E0;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0,WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_OWORD *)(v2 + 40);
    v4 = *(_OWORD *)(v2 + 56);
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    *(_QWORD *)&v3 = 0x8000000080000000;
    *(_QWORD *)&v5 = 0x8000000080000000;
    *((_QWORD *)&v5 + 1) = 0x8000000080000000;
    *a2 = v5;
    a2[1] = xmmword_1968BD2E0;
  }
  return *(double *)&v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_0,WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_1,WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *a1;
  *a1 = 0;
  if (!result)
    goto LABEL_15;
  if (*(unsigned __int8 *)(result + 68) != 255)
    goto LABEL_13;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(result + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
  v3.i16[0] = vaddlv_u8(v3);
  v4 = v3.u32[0];
  if ((*(_DWORD *)(result + 56) & 0x7FFFFFFF) != 0)
    v4 = v3.u32[0] + 1;
  v5 = (*(_DWORD *)(result + 64) & 0x7FFFFFFF) != 0
     ? ((*(_DWORD *)(result + 60) & 0x7FFFFFFF) != 0) + 1
     : (*(_DWORD *)(result + 60) & 0x7FFFFFFF) != 0;
  if (v4 + v5 != 1 || (*(_OWORD *)(result + 40) | 0x80000000) == 0x80000000)
  {
LABEL_13:
    *(_BYTE *)(a2 + 8) = 33;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 1;
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  else
  {
LABEL_15:
    *(_QWORD *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_0,WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_1,WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  _BYTE v11[8];

  v3 = *a1;
  *a1 = 0;
  v8 = v3;
  v9 = 0;
  std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>(&v8, &v10);
  result = (_DWORD *)v10;
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195922E3CLL);
  }
  v5 = *(_QWORD *)(v10 + 40);
  if (!v5 || *(_DWORD *)(v5 + 4) != 4)
    goto LABEL_3;
  v6 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v6 & 0xDF) != 0x4E || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x4E)
      goto LABEL_3;
    v7 = *(unsigned __int8 *)(v6 + 3);
  }
  else
  {
    if ((*(_WORD *)v6 & 0xFFDF) != 0x4E
      || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x4E)
    {
      goto LABEL_3;
    }
    v7 = *(unsigned __int16 *)(v6 + 6);
  }
  if ((v7 & 0xFFFFFFDF) != 0x45)
  {
LABEL_3:
    *(_BYTE *)(a2 + 8) = 33;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 1;
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
    goto LABEL_5;
  }
  *(_QWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
LABEL_5:
  if (v9 != -1)
    return (_DWORD *)((uint64_t (*)(_BYTE *, WTF::StringImpl **))off_1E339FD10[v9])(v11, &v8);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_0,WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_1,WebCore::checkLength(std::variant<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;

  result = *a1;
  *a1 = 0;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x195922F48);
  }
  v3 = *(_QWORD *)(result + 40);
  if (!v3 || *(_DWORD *)(v3 + 4) != 4)
    goto LABEL_3;
  v4 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v4 & 0xDF) != 0x4E || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x4E)
      goto LABEL_3;
    v5 = *(unsigned __int8 *)(v4 + 3);
  }
  else
  {
    if ((*(_WORD *)v4 & 0xFFDF) != 0x4E
      || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x4E)
    {
      goto LABEL_3;
    }
    v5 = *(unsigned __int16 *)(v4 + 6);
  }
  if ((v5 & 0xFFFFFFDF) == 0x45)
  {
    *(_QWORD *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }
LABEL_3:
  *(_BYTE *)(a2 + 8) = 33;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 1;
  if (*(_DWORD *)(result + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  --*(_DWORD *)(result + 8);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringENSA_INSB_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E339FD20[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringENSA_INSB_15CSSKeywordValueENSD_ISJ_EENSF_ISJ_EEEEEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_15CSSKeywordValueENSC_ISI_EENSE_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SH_SL_EEEOS10_EEEDcSS_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E339FD20[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_15CSSKeywordValueENSC_ISI_EENSE_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SH_SL_EEEOS10_EEEDcSS_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E339FD20[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_15CSSKeywordValueENSC_ISI_EENSE_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SH_SL_EEEOS10_EEEDcSS_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E339FD20[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSMathMin::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_0,void,WebCore::CSSNumericValue const&,BOOL>::call(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t), char a3)
{
  if ((a3 & 1) == 0)
    WTF::StringBuilder::append();
  return (**a2)(a2, *(_QWORD *)(a1 + 8), 3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSMathProduct::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_0,void,WebCore::CSSNumericValue const&,BOOL>::call(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  _QWORD *v6;

  v3 = a2;
  v5 = **(_BYTE **)(a1 + 8);
  if ((a3 & 1) != 0)
    goto LABEL_5;
  v6 = (_QWORD *)(a1 + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 4)
  {
    WTF::StringBuilder::append();
LABEL_5:
    v6 = (_QWORD *)(a1 + 16);
    return (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v3)(v3, *v6, v5 & 2 | 1);
  }
  WTF::StringBuilder::append();
  v3 = *(_QWORD *)(v3 + 72);
  return (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v3)(v3, *v6, v5 & 2 | 1);
}

unint64_t WTF::Vector<WebCore::CSSNumericValue::Addend,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::CSSNumericValue::Addend,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::CSSNumericValue::Addend,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CSSNumericValue::Addend,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = (_QWORD *)result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          *v10 = *(_QWORD *)v12;
          v10[1] = 0;
          v13 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          v10[1] = v13;
          v14 = *((_QWORD *)v12 + 1);
          if (v14)
            result = WTF::fastFree((WTF *)(v14 - 16), v9);
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 2;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSMathSum::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_0,void,WebCore::CSSNumericValue const&,BOOL>::call(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  _QWORD *v6;

  v3 = a2;
  v5 = **(_BYTE **)(a1 + 8);
  if ((a3 & 1) != 0)
    goto LABEL_5;
  v6 = (_QWORD *)(a1 + 16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 7)
  {
    WTF::StringBuilder::append();
LABEL_5:
    v6 = (_QWORD *)(a1 + 16);
    return (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v3)(v3, *v6, v5 & 2 | 1);
  }
  WTF::StringBuilder::append();
  v3 = *(_QWORD *)(v3 + 72);
  return (**(uint64_t (***)(uint64_t, _QWORD, uint64_t))v3)(v3, *v6, v5 & 2 | 1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSMatrixComponent::create(WebCore::CSSFunctionValue &)::$_1,WTF::Ref<WebCore::CSSTransformComponent,WTF::RawPtrTraits<WebCore::CSSTransformComponent>,WTF::DefaultRefDerefTraits<WebCore::CSSTransformComponent>>,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(unsigned int *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = a1[3];
  if (!v3)
    goto LABEL_17;
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195923668);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195923670);
  }
  if (v3 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x195923678);
  }
  if (v3 <= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x195923680);
  }
  if (v3 == 5)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195923660);
  }
  v4 = **(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v10 = (_DWORD *)bmalloc::api::isoAllocate();
  *(_QWORD *)v10 = 0;
  v10[2] = 1;
  *((_QWORD *)v10 + 2) = v4;
  *((_QWORD *)v10 + 3) = v5;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = v6;
  *((_QWORD *)v10 + 7) = v7;
  *((_QWORD *)v10 + 8) = 0;
  *((_QWORD *)v10 + 9) = 0;
  *((_OWORD *)v10 + 5) = xmmword_1969F01D0;
  *((_OWORD *)v10 + 6) = unk_1969F01E0;
  *((_QWORD *)v10 + 14) = v8;
  *((_QWORD *)v10 + 15) = v9;
  *((_OWORD *)v10 + 8) = xmmword_1968A14C0;
  *((_BYTE *)v10 + 144) = 1;
  v11 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v11 + 8) = 1;
  *(_BYTE *)(v11 + 12) = 1;
  *(_QWORD *)v11 = &off_1E339FC68;
  v12 = *((_BYTE *)v10 + 144);
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v15 = *((_OWORD *)v10 + 1);
  v16 = *((_OWORD *)v10 + 2);
  v17 = *((_OWORD *)v10 + 4);
  *(_OWORD *)(result + 48) = *((_OWORD *)v10 + 3);
  *(_OWORD *)(result + 64) = v17;
  *(_OWORD *)(result + 16) = v15;
  *(_OWORD *)(result + 32) = v16;
  v18 = *((_OWORD *)v10 + 5);
  v19 = *((_OWORD *)v10 + 6);
  v20 = *((_OWORD *)v10 + 8);
  *(_OWORD *)(result + 112) = *((_OWORD *)v10 + 7);
  *(_OWORD *)(result + 128) = v20;
  *(_OWORD *)(result + 80) = v18;
  *(_OWORD *)(result + 96) = v19;
  *(_BYTE *)(result + 144) = v12;
  *(_QWORD *)(v11 + 16) = result;
  *a2 = v11;
  if (v10[2] == 1)
  {
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)(*(_QWORD *)v10 + 8) = 3;
      *(_QWORD *)v10 = 0;
    }
    return bmalloc::api::isoDeallocate((bmalloc::api *)v10, v14);
  }
  else
  {
    --v10[2];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSMatrixComponent::create(WebCore::CSSFunctionValue &)::$_2,WTF::Ref<WebCore::CSSTransformComponent,WTF::RawPtrTraits<WebCore::CSSTransformComponent>,WTF::DefaultRefDerefTraits<WebCore::CSSTransformComponent>>,WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(unsigned int *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = a1[3];
  if (!v3)
    goto LABEL_37;
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238B4);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238BCLL);
  }
  if (v3 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238C4);
  }
  if (v3 <= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238CCLL);
  }
  if (v3 == 5)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238D4);
  }
  if (v3 <= 6)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238DCLL);
  }
  if (v3 == 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238E4);
  }
  if (v3 <= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238ECLL);
  }
  if (v3 == 9)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238F4);
  }
  if (v3 <= 0xA)
  {
    __break(0xC471u);
    JUMPOUT(0x1959238FCLL);
  }
  if (v3 == 11)
  {
    __break(0xC471u);
    JUMPOUT(0x195923904);
  }
  if (v3 <= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x19592390CLL);
  }
  if (v3 == 13)
  {
    __break(0xC471u);
    JUMPOUT(0x195923914);
  }
  if (v3 <= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x19592391CLL);
  }
  if (v3 == 15)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1959238ACLL);
  }
  v4 = **(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v30 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v26 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v23 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  v12 = (_DWORD *)bmalloc::api::isoAllocate();
  *(_QWORD *)v12 = 0;
  v12[2] = 1;
  *((_QWORD *)v12 + 2) = v4;
  *((_QWORD *)v12 + 3) = v5;
  *((_QWORD *)v12 + 4) = v6;
  *((_QWORD *)v12 + 5) = v7;
  *((_QWORD *)v12 + 6) = v8;
  *((_QWORD *)v12 + 7) = v9;
  *((_QWORD *)v12 + 8) = v10;
  *((_QWORD *)v12 + 9) = v11;
  *((_QWORD *)v12 + 10) = v30;
  *((_QWORD *)v12 + 11) = v29;
  *((_QWORD *)v12 + 12) = v28;
  *((_QWORD *)v12 + 13) = v27;
  *((_QWORD *)v12 + 14) = v26;
  *((_QWORD *)v12 + 15) = v25;
  *((_QWORD *)v12 + 16) = v24;
  *((_QWORD *)v12 + 17) = v23;
  *((_BYTE *)v12 + 144) = 0;
  v13 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v13 + 8) = 1;
  *(_BYTE *)(v13 + 12) = 0;
  *(_QWORD *)v13 = &off_1E339FC68;
  v14 = *((_BYTE *)v12 + 144);
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 1;
  v17 = *((_OWORD *)v12 + 1);
  v18 = *((_OWORD *)v12 + 2);
  v19 = *((_OWORD *)v12 + 4);
  *(_OWORD *)(result + 48) = *((_OWORD *)v12 + 3);
  *(_OWORD *)(result + 64) = v19;
  *(_OWORD *)(result + 16) = v17;
  *(_OWORD *)(result + 32) = v18;
  v20 = *((_OWORD *)v12 + 5);
  v21 = *((_OWORD *)v12 + 6);
  v22 = *((_OWORD *)v12 + 8);
  *(_OWORD *)(result + 112) = *((_OWORD *)v12 + 7);
  *(_OWORD *)(result + 128) = v22;
  *(_OWORD *)(result + 80) = v20;
  *(_OWORD *)(result + 96) = v21;
  *(_BYTE *)(result + 144) = v14;
  *(_QWORD *)(v13 + 16) = result;
  *a2 = v13;
  if (v12[2] == 1)
  {
    if (*(_QWORD *)v12)
    {
      *(_QWORD *)(*(_QWORD *)v12 + 8) = 3;
      *(_QWORD *)v12 = 0;
    }
    return bmalloc::api::isoDeallocate((bmalloc::api *)v12, v16);
  }
  else
  {
    --v12[2];
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_0,WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_1,WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::CSSKeywordValue,WebCore::CSSNumericValue<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(uint64_t result, double **a2)
{
  double *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(uint64_t **)result;
    if ((*(unsigned int (**)(double *))(*(_QWORD *)v2 + 24))(*a2) == 10 && v2[9] < 0.0)
    {
      WTF::StringBuilder::append();
      (**(void (***)(double *, uint64_t, _QWORD))*a2)(*a2, *v4, 0);
      result = *v4;
      v5 = *(_QWORD *)(*v4 + 8);
      if (v5 && (v6 = *(unsigned int *)(result + 16), v6 < *(_DWORD *)(v5 + 4)) && !*(_QWORD *)result)
      {
        v7 = *(_DWORD *)(v5 + 16);
        v8 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)(result + 16) = v6 + 1;
        if ((v7 & 4) != 0)
          *(_BYTE *)(v8 + v6) = 41;
        else
          *(_WORD *)(v8 + 2 * v6) = 41;
      }
      else
      {
        return WTF::StringBuilder::append();
      }
    }
    else
    {
      result = (uint64_t)*a2;
      if (*a2)
        return (**(uint64_t (***)(uint64_t, uint64_t, _QWORD))result)(result, *v4, 0);
    }
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_0,WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_1,WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::CSSKeywordValue,WebCore::CSSNumericValue<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_DWORD *)(v3 + 16) || *(_QWORD *)(v3 + 8))
  {
    if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
      return (WTF::StringImpl *)WTF::StringBuilder::append();
    else
      return (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  else
  {
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    result = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      LODWORD(v6) = *(_DWORD *)(v6 + 4);
    *(_DWORD *)(v3 + 16) = v6;
  }
  return result;
}

uint64_t (***std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_0,WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_1,WebCore::CSSPerspective::serialize(WTF::StringBuilder &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::CSSKeywordValue,WebCore::CSSNumericValue<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(uint64_t a1, uint64_t (****a2)(_QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD)
{
  uint64_t (***result)(_QWORD, _QWORD, _QWORD);

  result = *a2;
  if (*a2)
    return (uint64_t (***)(_QWORD, _QWORD, _QWORD))(**result)(result, *(_QWORD *)(*(_QWORD *)a1 + 16), 0);
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPerspective::toCSSValue(void)::$_0,WebCore::CSSPerspective::toCSSValue(void)::$_1,WebCore::CSSPerspective::toCSSValue(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::CSSKeywordValue,WebCore::CSSNumericValue<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(_DWORD ****a1, uint64_t a2)
{
  _DWORD ***v2;
  WTF::StringImpl *v3;
  _DWORD **v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *result;
  _DWORD *v8;

  v2 = *a1;
  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)a2 + 32))(&v8);
  v4 = *v2;
  v5 = v8;
  v8 = 0;
  v6 = *v4;
  *v4 = v5;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v3);
    else
      *v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v3);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPerspective::toCSSValue(void)::$_0,WebCore::CSSPerspective::toCSSValue(void)::$_1,WebCore::CSSPerspective::toCSSValue(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String,std::__variant_detail::_Trait<WebCore::CSSKeywordValue,WebCore::CSSNumericValue<WTF::String>,WTF::RawPtrTraits<WTF::RefPtr><WTF::String>>> const&>(uint64_t *a1, WebCore::CSSKeywordValue **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  _DWORD **v4;
  _DWORD *result;
  int *v6;

  v2 = *a1;
  WebCore::CSSKeywordValue::toCSSValue(*a2, &v6);
  v4 = *(_DWORD ***)(v2 + 8);
  result = *v4;
  *v4 = v6;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v3);
    else
      *result -= 2;
  }
  return result;
}

unsigned int *WebCore::CSSRotate::create@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int128 v9;
  int v10;
  int v11;
  _BOOL8 v12;
  uint8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;

  v6 = *a4;
  if (*(unsigned __int8 *)(*a4 + 68) != 255)
    goto LABEL_12;
  v7 = *(_DWORD *)(v6 + 40);
  v8 = *(_OWORD *)(v6 + 44);
  v9 = *(_OWORD *)(v6 + 44) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v11 = *(_DWORD *)(v6 + 60);
  v10 = *(_DWORD *)(v6 + 64);
  v12 = (v11 & 0x7FFFFFFF) != 0;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)v9))) & 0xF));
  v13.i16[0] = vaddlv_u8(v13);
  v16 = (v7 & 0x7FFFFFFF) == 0;
  v14 = v13.u32[0];
  if (!v16)
    v14 = v13.u32[0] + 1;
  v15 = (v10 & 0x7FFFFFFF) != 0 ? v12 + 1 : v12;
  v16 = v14 + v15 != 1 || (v8 | 0x80000000) == 0x80000000;
  if (v16)
  {
LABEL_12:
    *(_BYTE *)a5 = 33;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 1;
  }
  else
  {
    v18 = result[2];
    if ((_DWORD)v18 == -1
      || (v47 = &v44,
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v18](&v45, (__int128 *)&v47, (uint64_t)result), v21 = *(unsigned int *)(a2 + 8), (_DWORD)v21 == -1)|| (v47 = &v43, __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v21](&v44, (__int128 *)&v47, a2), v22 = *(unsigned int *)(a3 + 8), (_DWORD)v22 == -1))
    {
      v42 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned int *)WebCore::CSSRotate::create(v42);
    }
    else
    {
      v47 = (uint64_t *)&v46;
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v22](&v43, (__int128 *)&v47, a3);
      v23 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v45 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
      if ((*(_DWORD *)(v45 + 64) & 0x7FFFFFFF) != 0)
        v24 = -1;
      else
        v24 = 0;
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)(v23 & 0xF));
      v25.i16[0] = vaddlv_u8(v25);
      v26 = v25.u32[0];
      if ((*(_DWORD *)(v45 + 56) & 0x7FFFFFFF) != 0)
        v26 = v25.u32[0] + 1;
      if ((*(_DWORD *)(v45 + 60) & 0x7FFFFFFF) != 0)
        ++v26;
      if (v26 != v24 || *(unsigned __int8 *)(v45 + 68) != 255)
        goto LABEL_44;
      v27 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v44 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
      if ((*(_DWORD *)(v44 + 64) & 0x7FFFFFFF) != 0)
        v28 = -1;
      else
        v28 = 0;
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)(v27 & 0xF));
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.u32[0];
      if ((*(_DWORD *)(v44 + 56) & 0x7FFFFFFF) != 0)
        v30 = v29.u32[0] + 1;
      if ((*(_DWORD *)(v44 + 60) & 0x7FFFFFFF) != 0)
        ++v30;
      if (v30 != v28 || *(unsigned __int8 *)(v44 + 68) != 255)
        goto LABEL_44;
      v31 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v43 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
      if ((*(_DWORD *)(v43 + 64) & 0x7FFFFFFF) != 0)
        v32 = -1;
      else
        v32 = 0;
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)(v31 & 0xF));
      v33.i16[0] = vaddlv_u8(v33);
      v34 = v33.u32[0];
      if ((*(_DWORD *)(v43 + 56) & 0x7FFFFFFF) != 0)
        v34 = v33.u32[0] + 1;
      if ((*(_DWORD *)(v43 + 60) & 0x7FFFFFFF) != 0)
        ++v34;
      if (v34 == v32 && *(unsigned __int8 *)(v43 + 68) == 255)
      {
        v37 = bmalloc::api::isoAllocate();
        v39 = v44;
        v38 = v45;
        v44 = 0;
        v45 = 0;
        v40 = v43;
        v41 = *a4;
        *a4 = 0;
        *(_DWORD *)(v37 + 8) = 1;
        *(_BYTE *)(v37 + 12) = 0;
        *(_QWORD *)v37 = &off_1E339FF00;
        *(_QWORD *)(v37 + 16) = v38;
        *(_QWORD *)(v37 + 24) = v39;
        *(_QWORD *)(v37 + 32) = v40;
        *(_QWORD *)(v37 + 40) = v41;
        *(_QWORD *)a5 = v37;
        *(_DWORD *)(a5 + 16) = 0;
      }
      else
      {
LABEL_44:
        *(_BYTE *)a5 = 33;
        *(_QWORD *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + 16) = 1;
        v35 = (_DWORD *)v43;
        v43 = 0;
        if (v35)
        {
          if (v35[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
          else
            --v35[2];
        }
      }
      v36 = (_DWORD *)v44;
      v44 = 0;
      if (v36)
      {
        if (v36[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
        else
          --v36[2];
      }
      result = (unsigned int *)v45;
      v45 = 0;
      if (result)
      {
        if (result[2] == 1)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
        else
          --result[2];
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSRotate::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned __int128 v6;
  int v7;
  int v8;
  _BOOL8 v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  char v33;

  v3 = *(_QWORD *)result;
  if (*(unsigned __int8 *)(*(_QWORD *)result + 68) != 255)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 40);
  v5 = *(_OWORD *)(v3 + 44);
  v6 = *(_OWORD *)(v3 + 44) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v8 = *(_DWORD *)(v3 + 60);
  v7 = *(_DWORD *)(v3 + 64);
  v9 = (v8 & 0x7FFFFFFF) != 0;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)v6))) & 0xF));
  v10.i16[0] = vaddlv_u8(v10);
  v13 = (v4 & 0x7FFFFFFF) == 0;
  v11 = v10.u32[0];
  if (!v13)
    v11 = v10.u32[0] + 1;
  v12 = (v7 & 0x7FFFFFFF) != 0 ? v9 + 1 : v9;
  v13 = v11 + v12 != 1 || (v5 | 0x80000000) == 0x80000000;
  if (v13)
  {
LABEL_12:
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    v14 = 1;
  }
  else
  {
    v15 = (uint64_t *)result;
    v16 = bmalloc::api::isoAllocate();
    v17 = bmalloc::api::isoAllocate();
    WebCore::CSSNumericType::create(1u, 1, (uint64_t)v32);
    *(_QWORD *)&v18 = 0x8000000080000000;
    *((_QWORD *)&v18 + 1) = 0x8000000080000000;
    v30 = v18;
    v31 = xmmword_1968BD2E0;
    if (v33)
      v19 = (__int128 *)v32;
    else
      v19 = &v30;
    *(_DWORD *)(v17 + 8) = 1;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    v20 = v19[1];
    *(_OWORD *)(v17 + 40) = *v19;
    *(_QWORD *)(v17 + 32) = 0;
    *(_OWORD *)(v17 + 56) = v20;
    *(_QWORD *)v17 = &off_1E339F080;
    *(_QWORD *)(v17 + 72) = 0;
    *(_BYTE *)(v17 + 80) = 1;
    v21 = bmalloc::api::isoAllocate();
    WebCore::CSSNumericType::create(1u, 1, (uint64_t)v32);
    *(_QWORD *)&v22 = 0x8000000080000000;
    *((_QWORD *)&v22 + 1) = 0x8000000080000000;
    v30 = v22;
    v31 = xmmword_1968BD2E0;
    if (v33)
      v23 = (__int128 *)v32;
    else
      v23 = &v30;
    *(_DWORD *)(v21 + 8) = 1;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    v24 = v23[1];
    *(_OWORD *)(v21 + 40) = *v23;
    *(_QWORD *)(v21 + 32) = 0;
    *(_OWORD *)(v21 + 56) = v24;
    *(_QWORD *)v21 = &off_1E339F080;
    *(_QWORD *)(v21 + 72) = 0;
    *(_BYTE *)(v21 + 80) = 1;
    v25 = bmalloc::api::isoAllocate();
    result = WebCore::CSSNumericType::create(1u, 1, (uint64_t)v32);
    v14 = 0;
    *(_QWORD *)&v26 = 0x8000000080000000;
    *((_QWORD *)&v26 + 1) = 0x8000000080000000;
    v30 = v26;
    v31 = xmmword_1968BD2E0;
    if (v33)
      v27 = (__int128 *)v32;
    else
      v27 = &v30;
    *(_DWORD *)(v25 + 8) = 1;
    *(_QWORD *)(v25 + 16) = 0;
    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    v28 = v27[1];
    *(_OWORD *)(v25 + 40) = *v27;
    *(_OWORD *)(v25 + 56) = v28;
    *(_QWORD *)v25 = &off_1E339F080;
    *(_QWORD *)(v25 + 72) = 0x3FF0000000000000;
    *(_BYTE *)(v25 + 80) = 1;
    v29 = *v15;
    *v15 = 0;
    *(_DWORD *)(v16 + 8) = 1;
    *(_BYTE *)(v16 + 12) = 1;
    *(_QWORD *)v16 = &off_1E339FF00;
    *(_QWORD *)(v16 + 16) = v17;
    *(_QWORD *)(v16 + 24) = v21;
    *(_QWORD *)(v16 + 32) = v25;
    *(_QWORD *)(v16 + 40) = v29;
    *(_QWORD *)a2 = v16;
  }
  *(_DWORD *)(a2 + 16) = v14;
  return result;
}

_DWORD *WebCore::CSSRotate::create(WebCore::CSSFunctionValue &)::$_0::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v5;
  WTF *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *result;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v30 = a4;
    v31 = a3;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a2 + 16;
    while (1)
    {
      if (v9 > 3)
      {
        if (*(_DWORD *)(a2 + 8) <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1959244ECLL);
        }
        v12 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (v10 - 4));
      }
      else
      {
        v12 = (_QWORD *)(v11 + 8 * v10);
      }
      WebCore::CSSStyleValueFactory::reifyValue(&v33, *v12, 0, 0);
      if (!v35)
        break;
      if (v35 != 1)
      {
        v27 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::CSSRotate::setX(v27, v28, v29);
      }
      v13 = v34;
      v34 = 0;
      *(_BYTE *)a1 = (_BYTE)v33;
      *(_QWORD *)(a1 + 8) = v13;
      v14 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      v15 = 1;
LABEL_21:
      result = (_DWORD *)((uint64_t (*)(uint64_t *, _DWORD **))off_1E33A00F0[v15])(&v38, &v33);
LABEL_22:
      if (v14)
        goto LABEL_33;
      v9 = v10 + 1;
      v10 = (v10 + 1);
      if (v5 == v9)
      {
        v24 = v8;
        a4 = v30;
        a3 = v31;
        goto LABEL_31;
      }
    }
    v16 = v33;
    v33 = 0;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v16 + 24))(v16) - 3 <= 7)
    {
      v32 = v16;
LABEL_10:
      v18 = v8;
      if (v8 == (_DWORD)v37)
      {
        v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v36, v8 + 1, (unint64_t)&v32);
        v14 = 0;
        v20 = HIDWORD(v37);
        v8 = HIDWORD(v37) + 1;
        v7 = v36;
        v21 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v7 + v20) = v21;
      }
      else
      {
        v14 = 0;
        v32 = 0;
        ++v8;
        *((_QWORD *)v7 + v18) = v16;
      }
      HIDWORD(v37) = v8;
LABEL_17:
      result = v32;
      v32 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[2];
      }
      v15 = v35;
      if (v35 == -1)
        goto LABEL_22;
      goto LABEL_21;
    }
    v32 = 0;
    if (v16[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
      v16 = v32;
      if (v32)
        goto LABEL_10;
    }
    else
    {
      --v16[2];
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22 = v38;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v22;
    v14 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    goto LABEL_17;
  }
  v7 = 0;
  v8 = 0;
  v24 = 0;
LABEL_31:
  if (v24 == a4)
  {
    result = (_DWORD *)(*(uint64_t (**)(_QWORD, WTF **))(*(_QWORD *)*a3 + 16))(*a3, &v36);
    v8 = HIDWORD(v37);
    v7 = v36;
LABEL_33:
    if (!v8)
    {
LABEL_34:
      if (!v7)
        return result;
      goto LABEL_35;
    }
  }
  else
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = v33;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v25;
    *(_DWORD *)(a1 + 16) = 1;
    if (!v8)
      goto LABEL_34;
  }
  v26 = 8 * v8;
  do
  {
    result = *(_DWORD **)v7;
    *(_QWORD *)v7 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[2];
    }
    v7 = (WTF *)((char *)v7 + 8);
    v26 -= 8;
  }
  while (v26);
  v7 = v36;
  if (v36)
  {
LABEL_35:
    v36 = 0;
    LODWORD(v37) = 0;
    return (_DWORD *)WTF::fastFree(v7, v17);
  }
  return result;
}

_DWORD *WebCore::CSSRotate::setX@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *result;
  char v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::CSSRotate::setY(v12);
  }
  v15 = &v14;
  ((void (*)(uint64_t *__return_ptr, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v13, &v15);
  result = (_DWORD *)v13;
  v7 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v13 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
  if ((*(_DWORD *)(v13 + 64) & 0x7FFFFFFF) != 0)
    v8 = -1;
  else
    v8 = 0;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)(v7 & 0xF));
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if ((*(_DWORD *)(v13 + 56) & 0x7FFFFFFF) != 0)
    v10 = v9.u32[0] + 1;
  if ((*(_DWORD *)(v13 + 60) & 0x7FFFFFFF) != 0)
    ++v10;
  if (v10 == v8 && *(unsigned __int8 *)(v13 + 68) == 255)
  {
    v13 = 0;
    v11 = *(_DWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = result;
    if (v11)
    {
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        result = (_DWORD *)v13;
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        v13 = 0;
        if (!result)
          return result;
        goto LABEL_12;
      }
      --v11[2];
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *(_BYTE *)a3 = 33;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  v13 = 0;
LABEL_12:
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  --result[2];
  return result;
}

_DWORD *WebCore::CSSRotate::setY@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *result;
  char v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::CSSRotate::setZ(v12);
  }
  v15 = &v14;
  ((void (*)(uint64_t *__return_ptr, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v13, &v15);
  result = (_DWORD *)v13;
  v7 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v13 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
  if ((*(_DWORD *)(v13 + 64) & 0x7FFFFFFF) != 0)
    v8 = -1;
  else
    v8 = 0;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)(v7 & 0xF));
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if ((*(_DWORD *)(v13 + 56) & 0x7FFFFFFF) != 0)
    v10 = v9.u32[0] + 1;
  if ((*(_DWORD *)(v13 + 60) & 0x7FFFFFFF) != 0)
    ++v10;
  if (v10 == v8 && *(unsigned __int8 *)(v13 + 68) == 255)
  {
    v13 = 0;
    v11 = *(_DWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = result;
    if (v11)
    {
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        result = (_DWORD *)v13;
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        v13 = 0;
        if (!result)
          return result;
        goto LABEL_12;
      }
      --v11[2];
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *(_BYTE *)a3 = 33;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  v13 = 0;
LABEL_12:
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  --result[2];
  return result;
}

_DWORD *WebCore::CSSRotate::setZ@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *result;
  char v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _DWORD *v11;
  WebCore::CSSRotate *v12;
  WTF::StringBuilder *v13;
  uint64_t v14;
  char v15;
  char *v16;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v12 = (WebCore::CSSRotate *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::CSSRotate::serialize(v12, v13);
  }
  v16 = &v15;
  ((void (*)(uint64_t *__return_ptr, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v14, &v16);
  result = (_DWORD *)v14;
  v7 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v14 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
  if ((*(_DWORD *)(v14 + 64) & 0x7FFFFFFF) != 0)
    v8 = -1;
  else
    v8 = 0;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)(v7 & 0xF));
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if ((*(_DWORD *)(v14 + 56) & 0x7FFFFFFF) != 0)
    v10 = v9.u32[0] + 1;
  if ((*(_DWORD *)(v14 + 60) & 0x7FFFFFFF) != 0)
    ++v10;
  if (v10 == v8 && *(unsigned __int8 *)(v14 + 68) == 255)
  {
    v14 = 0;
    v11 = *(_DWORD **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = result;
    if (v11)
    {
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        result = (_DWORD *)v14;
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        v14 = 0;
        if (!result)
          return result;
        goto LABEL_12;
      }
      --v11[2];
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *(_BYTE *)a3 = 33;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  v14 = 0;
LABEL_12:
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  --result[2];
  return result;
}

uint64_t WebCore::CSSRotate::serialize(WebCore::CSSRotate *this, WTF::StringBuilder *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  WTF::StringBuilder::append();
  if (!*((_BYTE *)this + 12))
  {
    (***((void (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 2))(*((_QWORD *)this + 2), a2, 0);
    WTF::StringBuilder::append();
    (***((void (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 3))(*((_QWORD *)this + 3), a2, 0);
    WTF::StringBuilder::append();
    (***((void (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 4))(*((_QWORD *)this + 4), a2, 0);
    WTF::StringBuilder::append();
  }
  result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 5))(*((_QWORD *)this + 5), a2, 0);
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *((unsigned int *)a2 + 4);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  *((_DWORD *)a2 + 4) = v6 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v6) = 41;
  else
    *(_WORD *)(v9 + 2 * v6) = 41;
  return result;
}

uint64_t WebCore::CSSRotate::toMatrix@<X0>(WebCore::CSSRotate *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t result;
  _DWORD *v9;
  long double v10;
  double sinval;
  double cosval;
  __double2 v13;
  const double *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  char v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  _QWORD v39[8];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float64x2x4_t v46;
  float64x2x4_t v47;
  float64x2x4_t v48;
  float64x2x4_t v49;

  v4 = (_DWORD *)*((_QWORD *)this + 5);
  ++v4[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4) != 10)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
    v4 = 0;
  }
  v5 = *((_QWORD *)this + 2);
  ++*(_DWORD *)(v5 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) != 10)
  {
    if (*(_DWORD *)(v5 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      --*(_DWORD *)(v5 + 8);
    v5 = 0;
  }
  v6 = *((_QWORD *)this + 3);
  ++*(_DWORD *)(v6 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) != 10)
  {
    if (*(_DWORD *)(v6 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      --*(_DWORD *)(v6 + 8);
    v6 = 0;
  }
  v7 = (double *)*((_QWORD *)this + 4);
  ++*((_DWORD *)v7 + 2);
  result = (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 24))(v7);
  if ((_DWORD)result != 10)
  {
    if (*((_DWORD *)v7 + 2) == 1)
      result = (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 16))(v7);
    else
      --*((_DWORD *)v7 + 2);
    v7 = 0;
  }
  if (!v4 || !v5 || !v6)
  {
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (!v7)
    {
LABEL_44:
      if (!v6)
        goto LABEL_47;
      goto LABEL_45;
    }
LABEL_42:
    if (*((_DWORD *)v7 + 2) == 1)
    {
      result = (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 16))(v7);
      if (!v6)
        goto LABEL_47;
      goto LABEL_45;
    }
    --*((_DWORD *)v7 + 2);
    goto LABEL_44;
  }
  if (v7)
  {
    result = WebCore::CSSUnitValue::convertTo((uint64_t)v4, 0xCu, &v38);
    v9 = (_DWORD *)v38;
    if (v38)
    {
      v34 = (float64x2_t)xmmword_1969F0240;
      v35 = (float64x2_t)unk_1969F0250;
      v36 = (float64x2_t)xmmword_1969F0260;
      v37 = (float64x2_t)unk_1969F0270;
      v30 = (float64x2_t)xmmword_1969F0200;
      v31 = *(float64x2_t *)algn_1969F0210;
      v32 = (float64x2_t)xmmword_1969F0220;
      v33 = (float64x2_t)unk_1969F0230;
      if (*((_BYTE *)this + 12))
      {
        v10 = *(double *)(v38 + 72);
        if (fmod(v10, 360.0) != 0.0)
        {
          v13 = __sincos_stret(v10 * 0.0174532925);
          cosval = v13.__cosval;
          sinval = v13.__sinval;
          if (v13.__sinval < 2.22044605e-16 && v13.__sinval > -2.22044605e-16)
            sinval = 0.0;
          if (v13.__cosval < 2.22044605e-16 && v13.__cosval > -2.22044605e-16)
            cosval = 0.0;
          *(double *)v39 = cosval;
          *(double *)&v39[1] = sinval;
          v39[2] = 0;
          v39[3] = 0;
          *(double *)&v39[4] = -sinval;
          *(double *)&v39[5] = cosval;
          v39[6] = 0;
          v39[7] = 0;
          v40 = constinit_39;
          v41 = unk_1969F8FA0;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v45 = 0x3FF0000000000000;
          v16 = (const double *)v39;
          v17 = v30;
          v18 = v31;
          v19 = v32;
          v20 = v33;
          v21 = v34;
          v22 = v35;
          v48 = vld4q_dup_f64(v16);
          v16 += 4;
          v46 = vld4q_dup_f64(v16);
          v16 += 4;
          v30 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v30), v48.val[1], v32), v48.val[2], v34), v48.val[3], v36);
          v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v31), v48.val[1], v33), v48.val[2], v35), v48.val[3], v37);
          v49 = vld4q_dup_f64(v16);
          v16 += 4;
          v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v17), v46.val[1], v32), v46.val[2], v34), v46.val[3], v36);
          v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v18), v46.val[1], v33), v46.val[2], v35), v46.val[3], v37);
          v47 = vld4q_dup_f64(v16);
          v34 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v17), v49.val[1], v19), v49.val[2], v34), v49.val[3], v36);
          v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v18), v49.val[1], v20), v49.val[2], v35), v49.val[3], v37);
          v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v17), v47.val[1], v19), v47.val[2], v21), v47.val[3], v36);
          v37 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v18), v47.val[1], v20), v47.val[2], v22), v47.val[3], v37);
        }
      }
      else
      {
        WebCore::TransformationMatrix::rotate3d(&v30, 1, *(double *)(v5 + 72), *(double *)(v6 + 72), v7[9], *(double *)(v38 + 72));
      }
      v23 = *((_BYTE *)this + 12);
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      v25 = v32;
      v24 = v33;
      v26 = v31;
      *(float64x2_t *)(result + 16) = v30;
      *(float64x2_t *)(result + 32) = v26;
      *(float64x2_t *)(result + 48) = v25;
      v28 = v36;
      v27 = v37;
      v29 = v34;
      *(float64x2_t *)(result + 96) = v35;
      *(float64x2_t *)(result + 112) = v28;
      *(float64x2_t *)(result + 128) = v27;
      *(float64x2_t *)(result + 64) = v24;
      *(float64x2_t *)(result + 80) = v29;
      *(_BYTE *)(result + 144) = v23;
      *(_QWORD *)a2 = result;
      *(_DWORD *)(a2 + 16) = 0;
      if (v9[2] == 1)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      else
        --v9[2];
    }
    else
    {
      *(_BYTE *)a2 = 33;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
    }
    goto LABEL_42;
  }
  *(_BYTE *)a2 = 33;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 1;
LABEL_45:
  if (*(_DWORD *)(v6 + 8) == 1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  else
    --*(_DWORD *)(v6 + 8);
LABEL_47:
  if (v5)
  {
    if (*(_DWORD *)(v5 + 8) == 1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (!v4)
        return result;
      goto LABEL_51;
    }
    --*(_DWORD *)(v5 + 8);
  }
  if (!v4)
    return result;
LABEL_51:
  if (v4[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  --v4[2];
  return result;
}

_DWORD *WebCore::CSSRotate::toCSSValue@<X0>(WebCore::CSSRotate *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(**((_QWORD **)this + 5) + 32))(&v21);
  v5 = v21;
  if (v21)
  {
    if (*((_BYTE *)this + 12))
    {
      v21 = 0;
      v6 = WTF::fastCompactMalloc((WTF *)0x40);
      *(_DWORD *)v6 = 2;
      v8 = (*(unsigned __int8 *)(v6 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v6 + 8) = 1;
      *(_WORD *)(v6 + 4) = -7680;
      *(_BYTE *)(v6 + 6) = (v8 | 0x10000u) >> 16;
      *(_QWORD *)(v6 + 16) = v5;
      *(_WORD *)(v6 + 56) = 843;
      *a2 = v6;
    }
    else
    {
      (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 2) + 32))(&v20);
      if (v20)
      {
        (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 3) + 32))(&v19);
        if (v19)
        {
          (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 4) + 32))(&v18);
          v9 = v18;
          if (v18)
          {
            v11 = v19;
            v10 = v20;
            v19 = 0;
            v20 = 0;
            v18 = 0;
            v12 = v21;
            v21 = 0;
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            *(_DWORD *)v13 = 2;
            v14 = (*(unsigned __int8 *)(v13 + 6) << 16) & 0xFC0000;
            *(_DWORD *)(v13 + 8) = 4;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (v14 | 0x10000u) >> 16;
            *(_QWORD *)(v13 + 16) = v10;
            *(_QWORD *)(v13 + 24) = v11;
            *(_QWORD *)(v13 + 32) = v9;
            *(_QWORD *)(v13 + 40) = v12;
            *(_WORD *)(v13 + 56) = 847;
            *a2 = v13;
            v15 = v18;
            v18 = 0;
            if (v15)
            {
              if (*v15 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v7);
              else
                *v15 -= 2;
            }
          }
          else
          {
            *a2 = 0;
          }
          v16 = v19;
          v19 = 0;
          if (v16)
          {
            if (*v16 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v7);
            else
              *v16 -= 2;
          }
        }
        else
        {
          *a2 = 0;
        }
        v17 = v20;
        v20 = 0;
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v7);
          else
            *v17 -= 2;
        }
      }
      else
      {
        *a2 = 0;
      }
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

_DWORD *WebCore::CSSScale::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  _DWORD *v14;
  unsigned int v15;
  _DWORD *v16;
  char v17;
  uint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  _DWORD *v23;
  char v24;
  uint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  char v31;
  uint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *result;
  uint64_t v38;
  char v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  char v46;
  _OWORD v47[2];
  _QWORD v48[4];
  char v49;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_74;
  v48[0] = v47;
  __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v5]((uint64_t *)&v45, (__int128 *)v48, a1);
  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8 == -1)
    goto LABEL_74;
  v48[0] = v47;
  __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v8]((uint64_t *)&v44, (__int128 *)v48, a2);
  if (*(_BYTE *)(a3 + 16))
  {
    v9 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v9 != -1)
    {
      v48[0] = &v46;
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v9]((uint64_t *)v47, (__int128 *)v48, a3);
      goto LABEL_9;
    }
LABEL_74:
    v43 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_0::operator()(v43);
  }
  v10 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)v48);
  *(_QWORD *)&v11 = 0x8000000080000000;
  *((_QWORD *)&v11 + 1) = 0x8000000080000000;
  v47[0] = v11;
  v47[1] = xmmword_1968BD2E0;
  v12 = v47;
  if (v49)
    v12 = v48;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  v13 = v12[1];
  *(_OWORD *)(v10 + 40) = *v12;
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)(v10 + 56) = v13;
  *(_QWORD *)v10 = &off_1E339F080;
  *(_QWORD *)(v10 + 72) = 0x3FF0000000000000;
  *(_BYTE *)(v10 + 80) = 1;
  *(_QWORD *)&v47[0] = v10;
LABEL_9:
  v14 = v45;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v45 + 24))(v45) - 3 > 6)
  {
    v17 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v14 + 10) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
    if ((v14[16] & 0x7FFFFFFF) != 0)
      v18 = -1;
    else
      v18 = 0;
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)(v17 & 0xF));
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.u32[0];
    if ((v14[14] & 0x7FFFFFFF) != 0)
      v20 = v19.u32[0] + 1;
    if ((v14[15] & 0x7FFFFFFF) != 0)
      ++v20;
    if (v20 != v18 || *((unsigned __int8 *)v14 + 68) != 255)
      goto LABEL_57;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, _DWORD *))(*(_QWORD *)v14 + 64))(v48, v14);
    if (!v48[0])
      goto LABEL_57;
    v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v48[0] + 72))(v48[0]) - 1;
    v16 = (_DWORD *)v48[0];
    v48[0] = 0;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    if (v15 >= 2)
      goto LABEL_57;
  }
  v21 = v44;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v44 + 24))(v44) - 3 > 6)
  {
    v24 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v21 + 10) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
    if ((v21[16] & 0x7FFFFFFF) != 0)
      v25 = -1;
    else
      v25 = 0;
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)(v24 & 0xF));
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.u32[0];
    if ((v21[14] & 0x7FFFFFFF) != 0)
      v27 = v26.u32[0] + 1;
    if ((v21[15] & 0x7FFFFFFF) != 0)
      ++v27;
    if (v27 != v25 || *((unsigned __int8 *)v21 + 68) != 255)
      goto LABEL_57;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, _DWORD *))(*(_QWORD *)v21 + 64))(v48, v21);
    if (!v48[0])
      goto LABEL_57;
    v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v48[0] + 72))(v48[0]) - 1;
    v23 = (_DWORD *)v48[0];
    v48[0] = 0;
    if (v23)
    {
      if (v23[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      else
        --v23[2];
    }
    if (v22 >= 2)
      goto LABEL_57;
  }
  v28 = *(_QWORD *)&v47[0];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)&v47[0] + 24))(*(_QWORD *)&v47[0]) - 3 > 6)
  {
    v31 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v28 + 40) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
    if ((*(_DWORD *)(v28 + 64) & 0x7FFFFFFF) != 0)
      v32 = -1;
    else
      v32 = 0;
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)(v31 & 0xF));
    v33.i16[0] = vaddlv_u8(v33);
    v34 = v33.u32[0];
    if ((*(_DWORD *)(v28 + 56) & 0x7FFFFFFF) != 0)
      v34 = v33.u32[0] + 1;
    if ((*(_DWORD *)(v28 + 60) & 0x7FFFFFFF) != 0)
      ++v34;
    if (v34 == v32 && *(unsigned __int8 *)(v28 + 68) == 255)
      goto LABEL_71;
LABEL_57:
    *(_BYTE *)a4 = 33;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    v35 = *(_DWORD **)&v47[0];
    *(_QWORD *)&v47[0] = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
      else
        --v35[2];
    }
    goto LABEL_60;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v28 + 64))(v48, v28);
  if (!v48[0])
    goto LABEL_57;
  v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v48[0] + 72))(v48[0]) - 1;
  v30 = (_DWORD *)v48[0];
  v48[0] = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  if (v29 >= 2)
    goto LABEL_57;
LABEL_71:
  v38 = bmalloc::api::isoAllocate();
  v39 = *(_BYTE *)(a3 + 16);
  v41 = v44;
  v40 = v45;
  v44 = 0;
  v45 = 0;
  v42 = *(_QWORD *)&v47[0];
  *(_DWORD *)(v38 + 8) = 1;
  *(_BYTE *)(v38 + 12) = v39 ^ 1;
  *(_QWORD *)v38 = &off_1E339FF48;
  *(_QWORD *)(v38 + 16) = v40;
  *(_QWORD *)(v38 + 24) = v41;
  *(_QWORD *)(v38 + 32) = v42;
  *(_QWORD *)a4 = v38;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_60:
  v36 = v44;
  v44 = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
    else
      --v36[2];
  }
  result = v45;
  v45 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_0::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unint64_t a5, char a6)
{
  int v7;
  WTF *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *result;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  WebCore::CSSScale *v30;
  WTF::StringBuilder *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;

  v40 = 0;
  v41 = 0;
  v7 = *(_DWORD *)(a2 + 8);
  if (v7)
  {
    v32 = a6;
    v33 = a5;
    v34 = a4;
    v35 = a3;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = a2 + 16;
    while (1)
    {
      if (v11 > 3)
      {
        if (*(_DWORD *)(a2 + 8) <= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x19592591CLL);
        }
        v14 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (v12 - 4));
      }
      else
      {
        v14 = (_QWORD *)(v13 + 8 * v12);
      }
      WebCore::CSSStyleValueFactory::reifyValue(&v37, *v14, 0, 0);
      if (!v39)
        break;
      if (v39 != 1)
      {
        v30 = (WebCore::CSSScale *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_DWORD *)WebCore::CSSScale::serialize(v30, v31);
      }
      v15 = v38;
      v38 = 0;
      *(_BYTE *)a1 = (_BYTE)v37;
      *(_QWORD *)(a1 + 8) = v15;
      v16 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      v17 = 1;
LABEL_21:
      result = (_DWORD *)((uint64_t (*)(uint64_t *, _DWORD **))off_1E33A00F0[v17])(&v42, &v37);
LABEL_22:
      if (v16)
        goto LABEL_37;
      v11 = v12 + 1;
      v12 = (v12 + 1);
      if (v7 == v11)
      {
        v26 = v10;
        a4 = v34;
        a3 = v35;
        a6 = v32;
        a5 = v33;
        goto LABEL_31;
      }
    }
    v18 = v37;
    v37 = 0;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18) - 3 <= 7)
    {
      v36 = v18;
LABEL_10:
      v20 = v10;
      if (v10 == (_DWORD)v41)
      {
        v21 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v40, v10 + 1, (unint64_t)&v36);
        v16 = 0;
        v22 = HIDWORD(v41);
        v10 = HIDWORD(v41) + 1;
        v9 = v40;
        v23 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v9 + v22) = v23;
      }
      else
      {
        v16 = 0;
        v36 = 0;
        ++v10;
        *((_QWORD *)v9 + v20) = v18;
      }
      HIDWORD(v41) = v10;
LABEL_17:
      result = v36;
      v36 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[2];
      }
      v17 = v39;
      if (v39 == -1)
        goto LABEL_22;
      goto LABEL_21;
    }
    v36 = 0;
    if (v18[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
      v18 = v36;
      if (v36)
        goto LABEL_10;
    }
    else
    {
      --v18[2];
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = v42;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v24;
    v16 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    goto LABEL_17;
  }
  v9 = 0;
  v10 = 0;
  v26 = 0;
LABEL_31:
  if (a6)
    v27 = a5;
  else
    v27 = a4;
  if (v26 < a4 || v27 < v26)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = v37;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v28;
    *(_DWORD *)(a1 + 16) = 1;
    if (!v10)
      goto LABEL_38;
  }
  else
  {
    result = (_DWORD *)(*(uint64_t (**)(_QWORD, WTF **))(*(_QWORD *)*a3 + 16))(*a3, &v40);
    v10 = HIDWORD(v41);
    v9 = v40;
LABEL_37:
    if (!v10)
    {
LABEL_38:
      if (!v9)
        return result;
      goto LABEL_39;
    }
  }
  v29 = 8 * v10;
  do
  {
    result = *(_DWORD **)v9;
    *(_QWORD *)v9 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[2];
    }
    v9 = (WTF *)((char *)v9 + 8);
    v29 -= 8;
  }
  while (v29);
  v9 = v40;
  if (v40)
  {
LABEL_39:
    v40 = 0;
    LODWORD(v41) = 0;
    return (_DWORD *)WTF::fastFree(v9, v19);
  }
  return result;
}

uint64_t WebCore::CSSScale::serialize(WebCore::CSSScale *this, WTF::StringBuilder *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  WTF::StringBuilder::append();
  (***((void (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 2))(*((_QWORD *)this + 2), a2, 0);
  WTF::StringBuilder::append();
  result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 3))(*((_QWORD *)this + 3), a2, 0);
  if (!*((_BYTE *)this + 12))
  {
    WTF::StringBuilder::append();
    result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 4))(*((_QWORD *)this + 4), a2, 0);
  }
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *((unsigned int *)a2 + 4);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  *((_DWORD *)a2 + 4) = v6 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v6) = 41;
  else
    *(_WORD *)(v9 + 2 * v6) = 41;
  return result;
}

uint64_t WebCore::CSSScale::toMatrix@<X0>(WebCore::CSSScale *this@<X0>, uint64_t a2@<X8>)
{
  double *v4;
  int v5;
  double *v6;
  int v7;
  double *v8;
  uint64_t result;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;

  v4 = (double *)*((_QWORD *)this + 2);
  v5 = (*(uint64_t (**)(double *))(*(_QWORD *)v4 + 24))(v4);
  v6 = (double *)*((_QWORD *)this + 3);
  v7 = (*(uint64_t (**)(double *))(*(_QWORD *)v6 + 24))(v6);
  v8 = (double *)*((_QWORD *)this + 4);
  result = (*(uint64_t (**)(double *))(*(_QWORD *)v8 + 24))(v8);
  if (v5 == 10 && v7 == 10 && (_DWORD)result == 10)
  {
    v13 = v4[9];
    v14 = v6[9];
    v15 = 1.0;
    v16 = 0.0;
    v17 = *((unsigned __int8 *)this + 12);
    if (!v17)
    {
      v15 = v8[9];
      v16 = v15 * 0.0;
    }
    result = bmalloc::api::isoAllocate();
    v12 = 0;
    *(_DWORD *)(result + 8) = 1;
    *(double *)(result + 16) = v13;
    *(double *)(result + 24) = v13 * 0.0;
    *(double *)(result + 32) = v13 * 0.0;
    *(double *)(result + 40) = v13 * 0.0;
    *(_QWORD *)result = 0;
    *(double *)(result + 48) = v14 * 0.0;
    *(double *)(result + 56) = v14;
    *(double *)(result + 64) = v14 * 0.0;
    *(double *)(result + 72) = v14 * 0.0;
    *(double *)(result + 80) = v16;
    *(double *)(result + 88) = v16;
    *(double *)(result + 96) = v15;
    *(double *)(result + 104) = v16;
    *(_OWORD *)(result + 112) = xmmword_1969F0260;
    *(_OWORD *)(result + 128) = unk_1969F0270;
    *(_BYTE *)(result + 144) = v17;
    *(_QWORD *)a2 = result;
  }
  else
  {
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    v12 = 1;
  }
  *(_DWORD *)(a2 + 16) = v12;
  return result;
}

_DWORD *WebCore::CSSScale::toCSSValue@<X0>(WebCore::CSSScale *this@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *result;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 2) + 32))(&v17);
  (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 3) + 32))(&v16);
  if (!v17 || !v16)
    goto LABEL_10;
  if (!*((_BYTE *)this + 12))
  {
    (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 4) + 32))(&v15);
    v5 = (uint64_t)v15;
    if (v15)
    {
      v7 = v16;
      v6 = v17;
      v16 = 0;
      v17 = 0;
      v15 = 0;
      v8 = WTF::fastCompactMalloc((WTF *)0x40);
      *(_DWORD *)v8 = 2;
      v9 = (*(unsigned __int8 *)(v8 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v8 + 8) = 3;
      *(_WORD *)(v8 + 4) = -7680;
      *(_BYTE *)(v8 + 6) = (v9 | 0x10000u) >> 16;
      *(_QWORD *)(v8 + 16) = v6;
      *(_QWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = v5;
      *(_WORD *)(v8 + 56) = 852;
      *a2 = v8;
      v10 = v15;
      v15 = 0;
      if (!v10)
        goto LABEL_16;
      goto LABEL_13;
    }
LABEL_10:
    *a2 = 0;
    goto LABEL_16;
  }
  v13 = v16;
  v14 = v17;
  v16 = 0;
  v17 = 0;
  WebCore::CSSFunctionValue::create(848, &v14, &v13, (uint64_t *)&v15);
  *a2 = (uint64_t)v15;
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v4);
    else
      *v13 -= 2;
  }
  v10 = v14;
  if (v14)
  {
LABEL_13:
    if (*v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v4);
    else
      *v10 -= 2;
  }
LABEL_16:
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v4);
    else
      *v11 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v4);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSSkew::create@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int128 v7;
  int v8;
  int v9;
  _BOOL8 v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int128 v20;
  int v21;
  int v22;
  _BOOL8 v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)result;
  if (*(unsigned __int8 *)(*(_QWORD *)result + 68) != 255)
    goto LABEL_12;
  v5 = *(_DWORD *)(v4 + 40);
  v6 = *(_OWORD *)(v4 + 44);
  v7 = *(_OWORD *)(v4 + 44) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v9 = *(_DWORD *)(v4 + 60);
  v8 = *(_DWORD *)(v4 + 64);
  v10 = (v9 & 0x7FFFFFFF) != 0;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)v7))) & 0xF));
  v11.i16[0] = vaddlv_u8(v11);
  v14 = (v5 & 0x7FFFFFFF) == 0;
  v12 = v11.u32[0];
  if (!v14)
    v12 = v11.u32[0] + 1;
  v13 = (v8 & 0x7FFFFFFF) != 0 ? v10 + 1 : v10;
  v14 = v12 + v13 != 1 || (v6 | 0x80000000) == 0x80000000;
  if (v14)
    goto LABEL_12;
  v17 = *a2;
  if (*(unsigned __int8 *)(*a2 + 68) != 255)
    goto LABEL_12;
  v18 = *(_DWORD *)(v17 + 40);
  v19 = *(_OWORD *)(v17 + 44);
  v20 = *(_OWORD *)(v17 + 44) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v22 = *(_DWORD *)(v17 + 60);
  v21 = *(_DWORD *)(v17 + 64);
  v23 = (v22 & 0x7FFFFFFF) != 0;
  v24 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)v20))) & 0xF));
  v24.i16[0] = vaddlv_u8(v24);
  v14 = (v18 & 0x7FFFFFFF) == 0;
  v25 = v24.u32[0];
  if (!v14)
    v25 = v24.u32[0] + 1;
  v26 = (v21 & 0x7FFFFFFF) != 0 ? v23 + 1 : v23;
  if (v25 + v26 != 1 || (v19 | 0x80000000) == 0x80000000)
  {
LABEL_12:
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
    v15 = 1;
  }
  else
  {
    v28 = (uint64_t *)result;
    result = bmalloc::api::isoAllocate();
    v15 = 0;
    v29 = *v28;
    *v28 = 0;
    v30 = *a2;
    *a2 = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = 1;
    *(_QWORD *)result = &off_1E339FF90;
    *(_QWORD *)(result + 16) = v29;
    *(_QWORD *)(result + 24) = v30;
    *(_QWORD *)a3 = result;
  }
  *(_DWORD *)(a3 + 16) = v15;
  return result;
}

uint64_t WebCore::CSSSkew::serialize(WebCore::CSSSkew *this, WTF::StringBuilder *a2)
{
  double *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  WTF::StringBuilder::append();
  (***((void (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 2))(*((_QWORD *)this + 2), a2, 0);
  v4 = (double *)*((_QWORD *)this + 3);
  result = (*(uint64_t (**)(double *))(*(_QWORD *)v4 + 24))(v4);
  if ((_DWORD)result != 10 || v4[9] != 0.0)
  {
    WTF::StringBuilder::append();
    result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 3))(*((_QWORD *)this + 3), a2, 0);
  }
  v6 = *((_QWORD *)a2 + 1);
  if (!v6)
    return WTF::StringBuilder::append();
  v7 = *((unsigned int *)a2 + 4);
  if (v7 >= *(_DWORD *)(v6 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v9 = *(_DWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v6 + 8);
  *((_DWORD *)a2 + 4) = v7 + 1;
  if ((v9 & 4) != 0)
    *(_BYTE *)(v10 + v7) = 41;
  else
    *(_WORD *)(v10 + 2 * v7) = 41;
  return result;
}

uint64_t WebCore::CSSSkew::toMatrix@<X0>(WebCore::CSSSkew *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float64x2_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (_DWORD *)*((_QWORD *)this + 2);
  ++v4[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4) != 10)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
    v4 = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  ++v5[2];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 24))(v5);
  if ((_DWORD)result != 10)
  {
    if (v5[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
    v5 = 0;
  }
  if (v4)
  {
    if (!v5)
    {
      *(_BYTE *)a2 = 33;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
      goto LABEL_29;
    }
    WebCore::CSSUnitValue::convertTo((uint64_t)v4, 0xCu, &v24);
    result = WebCore::CSSUnitValue::convertTo((uint64_t)v5, 0xCu, &v23);
    v8 = (_DWORD *)v23;
    v7 = (_DWORD *)v24;
    if (v24)
    {
      if (!v23)
      {
        *(_BYTE *)a2 = 33;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 1;
LABEL_25:
        if (v7[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[2];
        goto LABEL_27;
      }
      v19 = xmmword_1969F0240;
      v20 = unk_1969F0250;
      v21 = xmmword_1969F0260;
      v22 = unk_1969F0270;
      v15 = (float64x2_t)xmmword_1969F0200;
      v16 = *(_OWORD *)algn_1969F0210;
      v17 = xmmword_1969F0220;
      v18 = unk_1969F0230;
      WebCore::TransformationMatrix::skew(&v15, *(double *)(v24 + 72), *(double *)(v23 + 72));
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      v10 = v17;
      v9 = v18;
      v11 = v16;
      *(float64x2_t *)(result + 16) = v15;
      *(_OWORD *)(result + 32) = v11;
      *(_OWORD *)(result + 48) = v10;
      v13 = v21;
      v12 = v22;
      v14 = v19;
      *(_OWORD *)(result + 96) = v20;
      *(_OWORD *)(result + 112) = v13;
      *(_OWORD *)(result + 128) = v12;
      *(_OWORD *)(result + 64) = v9;
      *(_OWORD *)(result + 80) = v14;
      *(_BYTE *)(result + 144) = 1;
      *(_QWORD *)a2 = result;
      *(_DWORD *)(a2 + 16) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 33;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
      if (!v8)
        goto LABEL_27;
    }
    if (v8[2] == 1)
    {
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      if (!v7)
        goto LABEL_27;
    }
    else
    {
      --v8[2];
      if (!v7)
        goto LABEL_27;
    }
    goto LABEL_25;
  }
  *(_BYTE *)a2 = 33;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 1;
  if (!v5)
    return result;
LABEL_27:
  if (v5[2] == 1)
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    if (!v4)
      return result;
  }
  else
  {
    --v5[2];
    if (!v4)
      return result;
  }
LABEL_29:
  if (v4[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  --v4[2];
  return result;
}

_DWORD *WebCore::CSSSkew::toCSSValue@<X0>(WebCore::CSSSkew *this@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  BOOL v6;
  double *v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  _DWORD *result;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;

  (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 2) + 32))(&v18);
  (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 3) + 32))(&v17);
  v5 = v17;
  if (v18)
    v6 = v17 == 0;
  else
    v6 = 1;
  if (v6)
  {
    *a2 = 0;
  }
  else
  {
    v7 = (double *)*((_QWORD *)this + 3);
    v8 = (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 24))(v7);
    if (v8 == 10 && v7[9] == 0.0)
    {
      v10 = v18;
      v18 = 0;
      v11 = WTF::fastCompactMalloc((WTF *)0x40);
      *(_DWORD *)v11 = 2;
      v12 = (*(unsigned __int8 *)(v11 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v11 + 8) = 1;
      *(_WORD *)(v11 + 4) = -7680;
      *(_BYTE *)(v11 + 6) = (v12 | 0x10000u) >> 16;
      *(_QWORD *)(v11 + 16) = v10;
      *(_WORD *)(v11 + 56) = 853;
      *a2 = v11;
    }
    else
    {
      v9 = v18;
      v18 = 0;
      v14 = v17;
      v15 = v9;
      v17 = 0;
      WebCore::CSSFunctionValue::create(853, &v15, &v14, &v16);
      *a2 = v16;
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v4);
        else
          *v14 -= 2;
      }
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v4);
        else
          *v15 -= 2;
      }
    }
    v5 = v17;
  }
  v17 = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v4);
    else
      *v5 -= 2;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v4);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSSkewX::serialize(WebCore::CSSSkewX *this, WTF::StringBuilder *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  WTF::StringBuilder::append();
  result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 2))(*((_QWORD *)this + 2), a2, 0);
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *((unsigned int *)a2 + 4);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  *((_DWORD *)a2 + 4) = v6 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v6) = 41;
  else
    *(_WORD *)(v9 + 2 * v6) = 41;
  return result;
}

uint64_t WebCore::CSSSkewX::toMatrix@<X0>(WebCore::CSSSkewX *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float64x2_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  ++v3[2];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  if ((_DWORD)result == 10)
  {
    result = WebCore::CSSUnitValue::convertTo((uint64_t)v3, 0xCu, &v20);
    v5 = (_DWORD *)v20;
    if (v20)
    {
      v16 = xmmword_1969F0240;
      v17 = unk_1969F0250;
      v18 = xmmword_1969F0260;
      v19 = unk_1969F0270;
      v12 = (float64x2_t)xmmword_1969F0200;
      v13 = *(_OWORD *)algn_1969F0210;
      v14 = xmmword_1969F0220;
      v15 = unk_1969F0230;
      WebCore::TransformationMatrix::skew(&v12, *(double *)(v20 + 72), 0.0);
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      v7 = v14;
      v6 = v15;
      v8 = v13;
      *(float64x2_t *)(result + 16) = v12;
      *(_OWORD *)(result + 32) = v8;
      *(_OWORD *)(result + 48) = v7;
      v10 = v18;
      v9 = v19;
      v11 = v16;
      *(_OWORD *)(result + 96) = v17;
      *(_OWORD *)(result + 112) = v10;
      *(_OWORD *)(result + 128) = v9;
      *(_OWORD *)(result + 64) = v6;
      *(_OWORD *)(result + 80) = v11;
      *(_BYTE *)(result + 144) = 1;
      *(_QWORD *)a2 = result;
      *(_DWORD *)(a2 + 16) = 0;
      if (v5[2] == 1)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
      else
        --v5[2];
    }
    else
    {
      *(_BYTE *)a2 = 33;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
    }
    if (v3[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  else
  {
    if (v3[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

_DWORD *WebCore::CSSSkewX::toCSSValue@<X0>(WebCore::CSSSkewX *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  _DWORD *v8;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(**((_QWORD **)this + 2) + 32))(&v8);
  v4 = v8;
  if (v8)
  {
    v8 = 0;
    v5 = WTF::fastCompactMalloc((WTF *)0x40);
    *(_DWORD *)v5 = 2;
    v7 = (*(unsigned __int8 *)(v5 + 6) << 16) & 0xFC0000;
    *(_DWORD *)(v5 + 8) = 1;
    *(_WORD *)(v5 + 4) = -7680;
    *(_BYTE *)(v5 + 6) = (v7 | 0x10000u) >> 16;
    *(_QWORD *)(v5 + 16) = v4;
    *(_WORD *)(v5 + 56) = 854;
    *a2 = v5;
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
      else
        *result -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::CSSSkewY::serialize(WebCore::CSSSkewY *this, WTF::StringBuilder *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  WTF::StringBuilder::append();
  result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 2))(*((_QWORD *)this + 2), a2, 0);
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *((unsigned int *)a2 + 4);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  *((_DWORD *)a2 + 4) = v6 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v6) = 41;
  else
    *(_WORD *)(v9 + 2 * v6) = 41;
  return result;
}

uint64_t WebCore::CSSSkewY::toMatrix@<X0>(WebCore::CSSSkewY *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float64x2_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = (_DWORD *)*((_QWORD *)this + 2);
  ++v3[2];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  if ((_DWORD)result == 10)
  {
    result = WebCore::CSSUnitValue::convertTo((uint64_t)v3, 0xCu, &v20);
    v5 = (_DWORD *)v20;
    if (v20)
    {
      v16 = xmmword_1969F0240;
      v17 = unk_1969F0250;
      v18 = xmmword_1969F0260;
      v19 = unk_1969F0270;
      v12 = (float64x2_t)xmmword_1969F0200;
      v13 = *(_OWORD *)algn_1969F0210;
      v14 = xmmword_1969F0220;
      v15 = unk_1969F0230;
      WebCore::TransformationMatrix::skew(&v12, 0.0, *(double *)(v20 + 72));
      result = bmalloc::api::isoAllocate();
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 1;
      v7 = v14;
      v6 = v15;
      v8 = v13;
      *(float64x2_t *)(result + 16) = v12;
      *(_OWORD *)(result + 32) = v8;
      *(_OWORD *)(result + 48) = v7;
      v10 = v18;
      v9 = v19;
      v11 = v16;
      *(_OWORD *)(result + 96) = v17;
      *(_OWORD *)(result + 112) = v10;
      *(_OWORD *)(result + 128) = v9;
      *(_OWORD *)(result + 64) = v6;
      *(_OWORD *)(result + 80) = v11;
      *(_BYTE *)(result + 144) = 1;
      *(_QWORD *)a2 = result;
      *(_DWORD *)(a2 + 16) = 0;
      if (v5[2] == 1)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
      else
        --v5[2];
    }
    else
    {
      *(_BYTE *)a2 = 33;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
    }
    if (v3[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  else
  {
    if (v3[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

_DWORD *WebCore::CSSSkewY::toCSSValue@<X0>(WebCore::CSSSkewY *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  WTF *v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  WTF *v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  _QWORD v22[4];
  _DWORD *v23;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(**((_QWORD **)this + 2) + 32))(&v23);
  v4 = v23;
  if (v23)
  {
    v20 = (WTF *)v22;
    v23 = 0;
    v22[0] = v4;
    v16 = (WTF *)v18;
    v18[0] = v4;
    v21 = 4;
    v17 = 0x100000004;
    WebCore::CSSFunctionValue::create(855, (uint64_t)&v16, &v19);
    *a2 = v19;
    v19 = 0;
    if (HIDWORD(v17))
    {
      v6 = v16;
      v7 = 8 * HIDWORD(v17);
      do
      {
        v8 = *(_DWORD **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          if (*v8 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v5);
          else
            *v8 -= 2;
        }
        v6 = (WTF *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
    }
    v9 = v16;
    if (v18 != (_QWORD *)v16 && v16 != 0)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      WTF::fastFree(v9, v5);
    }
    if (HIDWORD(v21))
    {
      v11 = v20;
      v12 = 8 * HIDWORD(v21);
      do
      {
        v13 = *(_DWORD **)v11;
        *(_QWORD *)v11 = 0;
        if (v13)
        {
          if (*v13 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v5);
          else
            *v13 -= 2;
        }
        v11 = (WTF *)((char *)v11 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    v14 = v20;
    if (v22 != (_QWORD *)v20 && v20 != 0)
    {
      v20 = 0;
      LODWORD(v21) = 0;
      WTF::fastFree(v14, v5);
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
      else
        *result -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSTransformComponent::toString@<X0>(WebCore::CSSTransformComponent *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  (**(void (***)(WebCore::CSSTransformComponent *, WTF::StringImpl **))this)(this, &v6);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSTransformValue::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  _DWORD *v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  char v45;
  _DWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  __int128 v56;
  __int128 *v57;
  __int128 v58;
  _DWORD *v59;
  __int128 v60;
  __int128 *v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t (**v64)();
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  __int128 v68;
  __int128 *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 *v73;
  __int128 v74;
  _QWORD *v75;
  uint64_t (**v76)();
  _DWORD *v77;
  _DWORD *v78;
  uint64_t (**v79)();
  _DWORD *v80;
  uint64_t v81;
  char *v82;
  WTF *v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  int v89;
  WTF *v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  uint64_t v96;
  uint8x8_t v97;
  uint64_t v98;
  _DWORD *v100;
  uint64_t v101;
  uint8x8_t v102;
  uint64_t v103;
  char *v105;
  _DWORD *v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD *v109;
  uint64_t v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  __int128 v116;
  __int128 *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  _DWORD *v123;
  WTF *v124;
  uint64_t v125;
  _DWORD *v127;
  _DWORD *v128;
  int v129;
  WTF *v130;
  uint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  int v134;
  uint64_t v135;
  _DWORD *v136;
  int v137;
  uint64_t v138;
  _DWORD *v139;
  int v140;
  _DWORD *v141;
  int v142;
  char v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  _DWORD *v148;
  _DWORD *v149;
  unsigned int v150;
  char v151;

  v130 = 0;
  v131 = 0;
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
    goto LABEL_246;
  v4 = 0;
  v5 = 0;
  v6 = a1 + 16;
  while (2)
  {
    if (v4 > 3)
    {
      if (*(_DWORD *)(a1 + 8) <= v4)
        goto LABEL_262;
      v7 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * (v5 - 4));
    }
    else
    {
      v7 = (uint64_t *)(v6 + 8 * v5);
    }
    v8 = *v7;
    if (!*v7 || ((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0x1E000)
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 33;
      *(_DWORD *)(a2 + 16) = 1;
      goto LABEL_250;
    }
    switch(*(_WORD *)(v8 + 56))
    {
      case 0x348:
      case 0x349:
        WebCore::CSSMatrixComponent::create((WebCore::CSSMatrixComponent *)v8, (uint64_t)&v148);
        if (v150)
        {
          if (v150 != 1)
            goto LABEL_261;
          v22 = v149;
          v149 = 0;
          LOBYTE(v127) = (_BYTE)v148;
          v128 = v22;
        }
        else
        {
          v46 = v148;
          v148 = 0;
          v127 = v46;
        }
        v129 = v150;
        result = ((uint64_t (*)(__int128 *, _DWORD **))off_1E33A0170[v150])(&v146, &v148);
        goto LABEL_132;
      case 0x34A:
        WebCore::CSSPerspective::create((WebCore::CSSPerspective *)v8, (uint64_t)&v148);
        v25 = v150;
        if (v150)
        {
          if (v150 != 1)
            goto LABEL_261;
          v26 = v149;
          v149 = 0;
          LOBYTE(v127) = (_BYTE)v148;
          v128 = v26;
        }
        else
        {
          v86 = v148;
          v148 = 0;
          v127 = v86;
        }
        v129 = v150;
        v79 = off_1E33A0160;
        goto LABEL_131;
      case 0x34B:
      case 0x34C:
      case 0x34D:
      case 0x34E:
      case 0x34F:
        switch(*(_WORD *)(v8 + 56))
        {
          case 0x34B:
            v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v10 = (uint64_t)v9;
            v11 = off_1E33A0228;
            goto LABEL_71;
          case 0x34C:
            v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v10 = (uint64_t)v9;
            v11 = off_1E33A01B0;
            goto LABEL_71;
          case 0x34D:
            v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v10 = (uint64_t)v9;
            v11 = off_1E33A01D8;
            goto LABEL_71;
          case 0x34E:
            v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v10 = (uint64_t)v9;
            v11 = off_1E33A0200;
LABEL_71:
            *v9 = v11;
            *(_QWORD *)&v146 = v9;
            v51 = v8;
            v52 = 1;
            goto LABEL_72;
          case 0x34F:
            v10 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v10 = off_1E33A0250;
            *(_QWORD *)&v146 = v10;
            v51 = v8;
            v52 = 4;
LABEL_72:
            WebCore::CSSRotate::create(WebCore::CSSFunctionValue &)::$_0::operator()((uint64_t)&v148, v51, &v146, v52);
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            break;
          default:
            v47 = bmalloc::api::isoAllocate();
            WebCore::CSSNumericType::create(0xCu, 1, (uint64_t)&v148);
            *(_QWORD *)&v48 = 0x8000000080000000;
            *((_QWORD *)&v48 + 1) = 0x8000000080000000;
            v146 = v48;
            v147 = xmmword_1968BD2E0;
            v49 = (__int128 *)&v148;
            if (!v151)
              v49 = &v146;
            *(_DWORD *)(v47 + 8) = 1;
            *(_QWORD *)(v47 + 16) = 0;
            *(_QWORD *)(v47 + 24) = 0;
            v50 = v49[1];
            *(_OWORD *)(v47 + 40) = *v49;
            *(_QWORD *)(v47 + 32) = 0;
            *(_OWORD *)(v47 + 56) = v50;
            *(_QWORD *)v47 = &off_1E339F080;
            *(_QWORD *)(v47 + 72) = 0;
            *(_BYTE *)(v47 + 80) = 12;
            *(_QWORD *)&v146 = v47;
            WebCore::CSSRotate::create((uint64_t)&v146, (uint64_t)&v148);
            if ((_QWORD)v146)
            {
              if (*(_DWORD *)(v146 + 8) == 1)
                (*(void (**)(_QWORD))(*(_QWORD *)v146 + 16))(v146);
              else
                --*(_DWORD *)(v146 + 8);
            }
            break;
        }
        if (v150)
        {
          if (v150 != 1)
            goto LABEL_261;
          v53 = v149;
          v149 = 0;
          LOBYTE(v127) = (_BYTE)v148;
          v128 = v53;
        }
        else
        {
          v54 = v148;
          v148 = 0;
          v127 = v54;
        }
        v129 = v150;
        result = ((uint64_t (*)(__int128 *, _DWORD **))off_1E33A0120[v150])(&v146, &v148);
        goto LABEL_132;
      case 0x350:
      case 0x351:
      case 0x352:
      case 0x353:
      case 0x354:
        switch(*(_WORD *)(v8 + 56))
        {
          case 0x350:
            v12 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v12 = off_1E33A0300;
            v148 = (_DWORD *)v12;
            v13 = v8;
            v14 = 1;
            v15 = 2;
            v16 = 1;
            goto LABEL_98;
          case 0x351:
            v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v12 = (uint64_t)v63;
            v64 = off_1E33A0288;
            goto LABEL_95;
          case 0x352:
            v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v12 = (uint64_t)v63;
            v64 = off_1E33A02B0;
            goto LABEL_95;
          case 0x353:
            v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v12 = (uint64_t)v63;
            v64 = off_1E33A02D8;
LABEL_95:
            *v63 = v64;
            v148 = v63;
            v13 = v8;
            v14 = 1;
            goto LABEL_97;
          case 0x354:
            v12 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v12 = off_1E33A0328;
            v148 = (_DWORD *)v12;
            v13 = v8;
            v14 = 3;
LABEL_97:
            v15 = 0;
            v16 = 0;
LABEL_98:
            WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_0::operator()((uint64_t)&v146, v13, &v148, v14, v15, v16);
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            break;
          default:
            v55 = bmalloc::api::isoAllocate();
            WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v148);
            *(_QWORD *)&v56 = 0x8000000080000000;
            *((_QWORD *)&v56 + 1) = 0x8000000080000000;
            v146 = v56;
            v147 = xmmword_1968BD2E0;
            if (v151)
              v57 = (__int128 *)&v148;
            else
              v57 = &v146;
            *(_DWORD *)(v55 + 8) = 1;
            *(_QWORD *)(v55 + 16) = 0;
            *(_QWORD *)(v55 + 24) = 0;
            v58 = v57[1];
            *(_OWORD *)(v55 + 40) = *v57;
            *(_QWORD *)(v55 + 32) = 0;
            *(_OWORD *)(v55 + 56) = v58;
            *(_QWORD *)v55 = &off_1E339F080;
            *(_QWORD *)(v55 + 72) = 0x3FF0000000000000;
            *(_BYTE *)(v55 + 80) = 1;
            v144 = (char *)v55;
            LODWORD(v145) = 1;
            v59 = (_DWORD *)bmalloc::api::isoAllocate();
            WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v148);
            *(_QWORD *)&v60 = 0x8000000080000000;
            *((_QWORD *)&v60 + 1) = 0x8000000080000000;
            v146 = v60;
            v147 = xmmword_1968BD2E0;
            if (v151)
              v61 = (__int128 *)&v148;
            else
              v61 = &v146;
            v59[2] = 1;
            *((_QWORD *)v59 + 2) = 0;
            *((_QWORD *)v59 + 3) = 0;
            v62 = v61[1];
            *(_OWORD *)(v59 + 10) = *v61;
            *((_QWORD *)v59 + 4) = 0;
            *(_OWORD *)(v59 + 14) = v62;
            *(_QWORD *)v59 = &off_1E339F080;
            *((_QWORD *)v59 + 9) = 0x3FF0000000000000;
            *((_BYTE *)v59 + 80) = 1;
            v141 = v59;
            v142 = 1;
            LOBYTE(v148) = 0;
            LOBYTE(v150) = 0;
            WebCore::CSSScale::create((uint64_t)&v144, (uint64_t)&v141, (uint64_t)&v148, (uint64_t)&v146);
            if ((_BYTE)v150 && (_DWORD)v149 != -1)
              ((void (*)(char *, _DWORD **))off_1E33A00E0[v149])(&v143, &v148);
            if (v142 != -1)
              ((void (*)(_DWORD **, _DWORD **))off_1E33A00E0[v142])(&v148, &v141);
            v142 = -1;
            if ((_DWORD)v145 != -1)
              ((void (*)(_DWORD **, char **))off_1E33A00E0[v145])(&v148, &v144);
            break;
        }
        if ((_DWORD)v147)
        {
          if ((_DWORD)v147 != 1)
            goto LABEL_261;
          v65 = (_DWORD *)*((_QWORD *)&v146 + 1);
          *((_QWORD *)&v146 + 1) = 0;
          LOBYTE(v127) = v146;
          v128 = v65;
        }
        else
        {
          v66 = (_DWORD *)v146;
          *(_QWORD *)&v146 = 0;
          v127 = v66;
        }
        v129 = v147;
        result = ((uint64_t (*)(_DWORD **, __int128 *))off_1E33A0110[v147])(&v148, &v146);
        goto LABEL_132;
      case 0x355:
        v144 = 0;
        v145 = 0;
        v27 = *(_DWORD *)(v8 + 8);
        if (!v27)
          goto LABEL_153;
        v28 = 0;
        v29 = 0;
        do
        {
          if (v28 > 3)
          {
            if (*(_DWORD *)(v8 + 8) <= v28)
            {
              __break(0xC471u);
              JUMPOUT(0x195927FD0);
            }
            v30 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * (v29 - 4));
          }
          else
          {
            v30 = (_QWORD *)(v8 + 16 + 8 * v29);
          }
          WebCore::CSSStyleValueFactory::reifyValue(&v148, *v30, 0, 0);
          if (v150)
          {
            if (v150 != 1)
              goto LABEL_261;
            v32 = 0;
            v33 = v149;
            v149 = 0;
            LOBYTE(v132) = (_BYTE)v148;
            v133 = v33;
            goto LABEL_34;
          }
          v34 = v148;
          v148 = 0;
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v34 + 24))(v34) - 3 >= 8)
          {
            if (v34[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
            else
              --v34[2];
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v32 = 0;
            LOBYTE(v132) = 33;
LABEL_34:
            v134 = 1;
            goto LABEL_40;
          }
          *(_QWORD *)&v146 = v34;
          LODWORD(v35) = HIDWORD(v145);
          if (HIDWORD(v145) == (_DWORD)v145)
          {
            v36 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v144, HIDWORD(v145) + 1, (unint64_t)&v146);
            v35 = HIDWORD(v145);
            v37 = v144;
            v38 = *(_QWORD *)v36;
            *(_QWORD *)v36 = 0;
            *(_QWORD *)&v37[8 * v35] = v38;
          }
          else
          {
            *(_QWORD *)&v146 = 0;
            *(_QWORD *)&v144[8 * HIDWORD(v145)] = v34;
          }
          HIDWORD(v145) = v35 + 1;
          v39 = (_DWORD *)v146;
          *(_QWORD *)&v146 = 0;
          if (v39)
          {
            if (v39[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
            else
              --v39[2];
          }
          v32 = 1;
LABEL_40:
          if (v150 != -1)
            ((void (*)(__int128 *, _DWORD **))off_1E33A00F0[v150])(&v146, &v148);
          if (!v32)
            goto LABEL_154;
          v28 = v29 + 1;
          v29 = (v29 + 1);
        }
        while (v27 != v28);
        v89 = HIDWORD(v145);
        if ((unint64_t)HIDWORD(v145) - 3 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_153:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          LOBYTE(v132) = 33;
          v133 = v148;
          v134 = 1;
          goto LABEL_154;
        }
        v105 = v144;
        v106 = *(_DWORD **)v144;
        ++*(_DWORD *)(*(_QWORD *)v144 + 8);
        if (v89 == 2)
        {
          v148 = v106;
          v107 = *((_QWORD *)v105 + 1);
          ++*(_DWORD *)(v107 + 8);
          *(_QWORD *)&v146 = v107;
          WebCore::CSSSkew::create((uint64_t)&v148, (uint64_t *)&v146, (uint64_t)&v132);
          if ((_QWORD)v146)
          {
            if (*(_DWORD *)(v146 + 8) == 1)
              (*(void (**)(void))(*(_QWORD *)v146 + 16))();
            else
              --*(_DWORD *)(v146 + 8);
          }
          v108 = v148;
          if (!v148)
            goto LABEL_154;
LABEL_231:
          if (v108[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v108 + 16))(v108);
          else
            --v108[2];
          goto LABEL_154;
        }
        v141 = v106;
        v115 = (_DWORD *)bmalloc::api::isoAllocate();
        WebCore::CSSNumericType::create(0xCu, 1, (uint64_t)&v148);
        *(_QWORD *)&v116 = 0x8000000080000000;
        *((_QWORD *)&v116 + 1) = 0x8000000080000000;
        v146 = v116;
        v147 = xmmword_1968BD2E0;
        v117 = (__int128 *)&v148;
        if (!v151)
          v117 = &v146;
        v115[2] = 1;
        *((_QWORD *)v115 + 2) = 0;
        *((_QWORD *)v115 + 3) = 0;
        v118 = v117[1];
        *(_OWORD *)(v115 + 10) = *v117;
        *((_QWORD *)v115 + 4) = 0;
        *(_OWORD *)(v115 + 14) = v118;
        *(_QWORD *)v115 = &off_1E339F080;
        *((_QWORD *)v115 + 9) = 0;
        *((_BYTE *)v115 + 80) = 12;
        v148 = v115;
        WebCore::CSSSkew::create((uint64_t)&v141, (uint64_t *)&v148, (uint64_t)&v132);
        if (v148)
        {
          if (v148[2] == 1)
            (*(void (**)(void))(*(_QWORD *)v148 + 16))();
          else
            --v148[2];
        }
        v108 = v141;
        if (v141)
          goto LABEL_231;
LABEL_154:
        v90 = (WTF *)v144;
        if (HIDWORD(v145))
        {
          v91 = 8 * HIDWORD(v145);
          do
          {
            v92 = *(_DWORD **)v90;
            *(_QWORD *)v90 = 0;
            if (v92)
            {
              if (v92[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 16))(v92);
              else
                --v92[2];
            }
            v90 = (WTF *)((char *)v90 + 8);
            v91 -= 8;
          }
          while (v91);
          v90 = (WTF *)v144;
        }
        if (v90)
        {
          v144 = 0;
          LODWORD(v145) = 0;
          WTF::fastFree(v90, v31);
        }
        if (v134)
        {
          if (v134 == 1)
          {
            v93 = v133;
            v133 = 0;
            LOBYTE(v127) = (_BYTE)v132;
            v128 = v93;
            goto LABEL_168;
          }
LABEL_261:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_262:
          __break(0xC471u);
          JUMPOUT(0x195927FB0);
        }
        v94 = v132;
        v132 = 0;
        v127 = v94;
LABEL_168:
        v129 = v134;
        result = ((uint64_t (*)(_DWORD **, _DWORD **))off_1E33A0150[v134])(&v148, &v132);
LABEL_132:
        if (!v129)
        {
          v80 = v127;
          v127 = 0;
          v148 = v80;
          LODWORD(v81) = HIDWORD(v131);
          if (HIDWORD(v131) == (_DWORD)v131)
          {
            v82 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v130, HIDWORD(v131) + 1, (unint64_t)&v148);
            v81 = HIDWORD(v131);
            v83 = v130;
            v84 = *(_QWORD *)v82;
            *(_QWORD *)v82 = 0;
            *((_QWORD *)v83 + v81) = v84;
          }
          else
          {
            v148 = 0;
            *((_QWORD *)v130 + HIDWORD(v131)) = v80;
          }
          HIDWORD(v131) = v81 + 1;
          v85 = v148;
          v148 = 0;
          if (v85)
          {
            if (v85[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 32))(v85);
            else
              --v85[2];
          }
          if (v129 != -1)
            ((void (*)(_DWORD **, _DWORD **))off_1E33A0170[v129])(&v148, &v127);
          v4 = v5 + 1;
          v5 = (v5 + 1);
          if (v2 == v4)
          {
LABEL_246:
            result = bmalloc::api::isoAllocate();
            *(_DWORD *)(result + 8) = 1;
            *(_QWORD *)(result + 16) = 0;
            *(_QWORD *)(result + 24) = 0;
            *(_QWORD *)result = &off_1E33A0068;
            v121 = v130;
            *(_QWORD *)(result + 32) = 0;
            *(_QWORD *)(result + 40) = v121;
            v122 = v131;
            v130 = 0;
            v131 = 0;
            *(_QWORD *)(result + 48) = v122;
            *(_QWORD *)a2 = result;
            *(_DWORD *)(a2 + 16) = 0;
            goto LABEL_250;
          }
          continue;
        }
        if (v129 != 1)
          goto LABEL_261;
        v123 = v128;
        *(_BYTE *)a2 = (_BYTE)v127;
        *(_QWORD *)(a2 + 8) = v123;
        *(_DWORD *)(a2 + 16) = 1;
LABEL_250:
        v124 = v130;
        if (HIDWORD(v131))
        {
          v125 = 8 * HIDWORD(v131);
          do
          {
            result = *(_QWORD *)v124;
            *(_QWORD *)v124 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 8) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
              else
                --*(_DWORD *)(result + 8);
            }
            v124 = (WTF *)((char *)v124 + 8);
            v125 -= 8;
          }
          while (v125);
          v124 = v130;
        }
        if (v124)
        {
          v130 = 0;
          LODWORD(v131) = 0;
          return WTF::fastFree(v124, v24);
        }
        return result;
      case 0x356:
        v40 = *(_QWORD *)(v8 + 16);
        if (*(_DWORD *)(v8 + 8) != 1 || v40 == 0)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v42 = 33;
          LOBYTE(v138) = 33;
          v140 = 1;
          goto LABEL_210;
        }
        WebCore::CSSStyleValueFactory::reifyValue(&v148, v40, 0, 0);
        if (v150)
        {
          if (v150 != 1)
            goto LABEL_261;
          v87 = v149;
          v149 = 0;
          LOBYTE(v138) = (_BYTE)v148;
          v139 = v87;
        }
        else
        {
          v95 = v148;
          v148 = 0;
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v95 + 24))(v95) - 3 < 8)
          {
            if (*((unsigned __int8 *)v95 + 68) != 255)
              goto LABEL_180;
            v96 = (v95[15] & 0x7FFFFFFF) != 0;
            v97 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v95 + 11) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
            v97.i16[0] = vaddlv_u8(v97);
            v98 = v97.u32[0];
            if ((v95[10] & 0x7FFFFFFF) != 0)
              v98 = v97.u32[0] + 1;
            if ((v95[16] & 0x7FFFFFFF) != 0)
              ++v96;
            if (v98 + v96 != 1 || (*(_OWORD *)(v95 + 11) | 0x80000000) == 0x80000000)
            {
LABEL_180:
              LOBYTE(v138) = 33;
              v139 = 0;
              v140 = 1;
              if (v95[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 16))(v95);
              else
                --v95[2];
            }
            else
            {
              v119 = bmalloc::api::isoAllocate();
              *(_DWORD *)(v119 + 8) = 1;
              *(_BYTE *)(v119 + 12) = 1;
              *(_QWORD *)v119 = &off_1E339FFD8;
              *(_QWORD *)(v119 + 16) = v95;
              v138 = v119;
              v140 = 0;
            }
            goto LABEL_205;
          }
          if (v95[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 16))(v95);
          else
            --v95[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          LOBYTE(v138) = 33;
        }
        v140 = 1;
LABEL_205:
        if (v150 != -1)
          ((void (*)(__int128 *, _DWORD **))off_1E33A00F0[v150])(&v146, &v148);
        if (!v140)
        {
          v110 = 0;
          v111 = (_DWORD *)v138;
          v138 = 0;
          v127 = v111;
LABEL_212:
          v129 = v110;
          result = ((uint64_t (*)(_DWORD **, uint64_t *))off_1E33A0130[v110])(&v148, &v138);
          goto LABEL_132;
        }
        if (v140 != 1)
          goto LABEL_261;
        v42 = v138;
LABEL_210:
        v109 = v139;
        v139 = 0;
        LOBYTE(v127) = v42;
        v128 = v109;
        v110 = 1;
        goto LABEL_212;
      case 0x357:
        v43 = *(_QWORD *)(v8 + 16);
        if (*(_DWORD *)(v8 + 8) != 1 || v43 == 0)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v45 = 33;
          LOBYTE(v135) = 33;
          v137 = 1;
          goto LABEL_222;
        }
        WebCore::CSSStyleValueFactory::reifyValue(&v148, v43, 0, 0);
        if (v150)
        {
          if (v150 != 1)
            goto LABEL_261;
          v88 = v149;
          v149 = 0;
          LOBYTE(v135) = (_BYTE)v148;
          v136 = v88;
        }
        else
        {
          v100 = v148;
          v148 = 0;
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v100 + 24))(v100) - 3 < 8)
          {
            if (*((unsigned __int8 *)v100 + 68) != 255)
              goto LABEL_193;
            v101 = (v100[15] & 0x7FFFFFFF) != 0;
            v102 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)(v100 + 11) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))))) & 0xF));
            v102.i16[0] = vaddlv_u8(v102);
            v103 = v102.u32[0];
            if ((v100[10] & 0x7FFFFFFF) != 0)
              v103 = v102.u32[0] + 1;
            if ((v100[16] & 0x7FFFFFFF) != 0)
              ++v101;
            if (v103 + v101 != 1 || (*(_OWORD *)(v100 + 11) | 0x80000000) == 0x80000000)
            {
LABEL_193:
              LOBYTE(v135) = 33;
              v136 = 0;
              v137 = 1;
              if (v100[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 16))(v100);
              else
                --v100[2];
            }
            else
            {
              v120 = bmalloc::api::isoAllocate();
              *(_DWORD *)(v120 + 8) = 1;
              *(_BYTE *)(v120 + 12) = 1;
              *(_QWORD *)v120 = &off_1E33A0020;
              *(_QWORD *)(v120 + 16) = v100;
              v135 = v120;
              v137 = 0;
            }
            goto LABEL_217;
          }
          if (v100[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 16))(v100);
          else
            --v100[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          LOBYTE(v135) = 33;
        }
        v137 = 1;
LABEL_217:
        if (v150 != -1)
          ((void (*)(__int128 *, _DWORD **))off_1E33A00F0[v150])(&v146, &v148);
        if (!v137)
        {
          v113 = 0;
          v114 = (_DWORD *)v135;
          v135 = 0;
          v127 = v114;
LABEL_224:
          v129 = v113;
          result = ((uint64_t (*)(_DWORD **, uint64_t *))off_1E33A0140[v113])(&v148, &v135);
          goto LABEL_132;
        }
        if (v137 != 1)
          goto LABEL_261;
        v45 = v135;
LABEL_222:
        v112 = v136;
        v136 = 0;
        LOBYTE(v127) = v45;
        v128 = v112;
        v113 = 1;
        goto LABEL_224;
      case 0x358:
      case 0x359:
      case 0x35A:
      case 0x35B:
      case 0x35C:
        switch(*(_WORD *)(v8 + 56))
        {
          case 0x358:
            v17 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v17 = off_1E33A0418;
            *(_QWORD *)&v146 = v17;
            v18 = v8;
            v19 = 1;
            v20 = 2;
            v21 = 1;
            goto LABEL_125;
          case 0x359:
            v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v17 = (uint64_t)v75;
            v76 = off_1E33A03A0;
            goto LABEL_122;
          case 0x35A:
            v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v17 = (uint64_t)v75;
            v76 = off_1E33A03C8;
            goto LABEL_122;
          case 0x35B:
            v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v17 = (uint64_t)v75;
            v76 = off_1E33A03F0;
LABEL_122:
            *v75 = v76;
            *(_QWORD *)&v146 = v75;
            v18 = v8;
            v19 = 1;
            goto LABEL_124;
          case 0x35C:
            v17 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v17 = off_1E33A0440;
            *(_QWORD *)&v146 = v17;
            v18 = v8;
            v19 = 3;
LABEL_124:
            v20 = 0;
            v21 = 0;
LABEL_125:
            WebCore::CSSTranslate::create(WebCore::CSSFunctionValue &)::$_0::operator()((uint64_t)&v148, v18, &v146, v19, v20, v21);
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            break;
          default:
            v67 = bmalloc::api::isoAllocate();
            WebCore::CSSNumericType::create(6u, 1, (uint64_t)&v148);
            *(_QWORD *)&v68 = 0x8000000080000000;
            *((_QWORD *)&v68 + 1) = 0x8000000080000000;
            v146 = v68;
            v147 = xmmword_1968BD2E0;
            if (v151)
              v69 = (__int128 *)&v148;
            else
              v69 = &v146;
            *(_DWORD *)(v67 + 8) = 1;
            *(_QWORD *)(v67 + 16) = 0;
            *(_QWORD *)(v67 + 24) = 0;
            v70 = v69[1];
            *(_OWORD *)(v67 + 40) = *v69;
            *(_QWORD *)(v67 + 32) = 0;
            *(_OWORD *)(v67 + 56) = v70;
            *(_QWORD *)v67 = &off_1E339F080;
            *(_QWORD *)(v67 + 72) = 0;
            *(_BYTE *)(v67 + 80) = 6;
            v144 = (char *)v67;
            v71 = bmalloc::api::isoAllocate();
            WebCore::CSSNumericType::create(6u, 1, (uint64_t)&v148);
            *(_QWORD *)&v72 = 0x8000000080000000;
            *((_QWORD *)&v72 + 1) = 0x8000000080000000;
            v146 = v72;
            v147 = xmmword_1968BD2E0;
            if (v151)
              v73 = (__int128 *)&v148;
            else
              v73 = &v146;
            *(_DWORD *)(v71 + 8) = 1;
            *(_QWORD *)(v71 + 16) = 0;
            *(_QWORD *)(v71 + 24) = 0;
            v74 = v73[1];
            *(_OWORD *)(v71 + 40) = *v73;
            *(_QWORD *)(v71 + 32) = 0;
            *(_OWORD *)(v71 + 56) = v74;
            *(_QWORD *)v71 = &off_1E339F080;
            *(_QWORD *)(v71 + 72) = 0;
            *(_BYTE *)(v71 + 80) = 6;
            *(_QWORD *)&v146 = v71;
            v141 = 0;
            WebCore::CSSTranslate::create((uint64_t *)&v144, (uint64_t *)&v146, (uint64_t *)&v141, (uint64_t)&v148);
            if (v141)
            {
              if (v141[2] == 1)
                (*(void (**)(void))(*(_QWORD *)v141 + 16))();
              else
                --v141[2];
            }
            if ((_QWORD)v146)
            {
              if (*(_DWORD *)(v146 + 8) == 1)
                (*(void (**)(void))(*(_QWORD *)v146 + 16))();
              else
                --*(_DWORD *)(v146 + 8);
            }
            if (v144)
            {
              if (*((_DWORD *)v144 + 2) == 1)
                (*(void (**)(char *))(*(_QWORD *)v144 + 16))(v144);
              else
                --*((_DWORD *)v144 + 2);
            }
            break;
        }
        v25 = v150;
        if (v150)
        {
          if (v150 != 1)
            goto LABEL_261;
          v77 = v149;
          v149 = 0;
          LOBYTE(v127) = (_BYTE)v148;
          v128 = v77;
        }
        else
        {
          v78 = v148;
          v148 = 0;
          v127 = v78;
        }
        v129 = v150;
        v79 = off_1E33A0100;
LABEL_131:
        result = ((uint64_t (*)(__int128 *, _DWORD **))v79[v25])(&v146, &v148);
        goto LABEL_132;
      default:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v127) = 33;
        v128 = v148;
        v129 = 1;
        goto LABEL_132;
    }
  }
}

char *WebCore::CSSTransformValue::setItem@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unint64_t v22;
  const char *v23;
  int v24;

  v6 = *((unsigned int *)result + 13);
  if (v6 < a2)
  {
    v22 = a2;
    v23 = "Index ";
    v24 = 6;
    v20 = " exceeds the range of CSSTransformValue.";
    v21 = 40;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v23, &v22, (uint64_t)&v20, &v19);
    v7 = v19;
    if (v19)
    {
      *(_BYTE *)a4 = 32;
      *(_QWORD *)(a4 + 8) = v7;
      v8 = 1;
      goto LABEL_15;
    }
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x1959281C8);
  }
  v9 = result;
  v10 = (uint64_t *)(result + 40);
  if (v6 == a2)
  {
    if ((_DWORD)v6 == *((_DWORD *)result + 12))
    {
      result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result + 5, a2 + 1, (unint64_t)a3);
      v11 = *((unsigned int *)v9 + 13);
      LODWORD(v6) = v11 + 1;
      v12 = *((_QWORD *)v9 + 5);
      v13 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)(v12 + 8 * v11) = v13;
    }
    else
    {
      LODWORD(v6) = v6 + 1;
      v16 = *((_QWORD *)result + 5);
      v17 = *a3;
      *a3 = 0;
      *(_QWORD *)(v16 + 8 * a2) = v17;
    }
    *((_DWORD *)v9 + 13) = v6;
  }
  else
  {
    if (v6 <= a2)
    {
      __break(0xC471u);
      goto LABEL_20;
    }
    v14 = *v10;
    v15 = *a3;
    *a3 = 0;
    result = *(char **)(v14 + 8 * a2);
    *(_QWORD *)(v14 + 8 * a2) = v15;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
      {
        result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 32))(result);
        LODWORD(v6) = *((_DWORD *)v9 + 13);
      }
      else
      {
        --*((_DWORD *)result + 2);
      }
    }
  }
  if (v6 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1959281D0);
  }
  v8 = 0;
  v18 = *(_QWORD *)(*v10 + 8 * a2);
  ++*(_DWORD *)(v18 + 8);
  *(_QWORD *)a4 = v18;
LABEL_15:
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

double *WebCore::CSSTransformValue::toMatrix@<X0>(WebCore::CSSTransformValue *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  double *result;
  void *v9;
  int v10;
  uint64_t v11;
  const double *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;
  bmalloc::api *v26;
  uint64_t v27;
  int v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  _BYTE v37[17];
  float64x2x4_t v38;
  float64x2x4_t v39;
  float64x2x4_t v40;
  float64x2x4_t v41;

  v33 = (float64x2_t)xmmword_1969F0240;
  v34 = (float64x2_t)unk_1969F0250;
  v35 = (float64x2_t)xmmword_1969F0260;
  v36 = (float64x2_t)unk_1969F0270;
  v29 = (float64x2_t)xmmword_1969F0200;
  v30 = *(float64x2_t *)algn_1969F0210;
  v31 = (float64x2_t)xmmword_1969F0220;
  v32 = (float64x2_t)unk_1969F0230;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = 8 * v3;
    v6 = 1;
    while (1)
    {
      v7 = *(_DWORD **)v4;
      v7[2] = *(_DWORD *)(*(_QWORD *)v4 + 8) + 1;
      result = (double *)(*(_QWORD *(**)(bmalloc::api **__return_ptr, _DWORD *))(*(_QWORD *)v7 + 16))(&v26, v7);
      v10 = v28;
      if (v28)
      {
        if (v28 != 1)
        {
          v25 = std::__throw_bad_variant_access[abi:sn180100]();
          return (double *)WebCore::CSSTransformValue::serialize(v25);
        }
        v11 = v27;
        v27 = 0;
        *(_BYTE *)a2 = (_BYTE)v26;
        *(_QWORD *)(a2 + 8) = v11;
        *(_DWORD *)(a2 + 16) = 1;
      }
      else
      {
        result = (double *)v26;
        ++*((_DWORD *)v26 + 2);
        v6 &= *((_BYTE *)result + 144) != 0;
        v12 = result + 2;
        v13 = v29;
        v14 = v30;
        v15 = v31;
        v16 = v32;
        v17 = v33;
        v18 = v34;
        v40 = vld4q_dup_f64(v12);
        v12 += 4;
        v38 = vld4q_dup_f64(v12);
        v12 += 4;
        v29 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v40.val[0], v29), v40.val[1], v31), v40.val[2], v33), v40.val[3], v35);
        v30 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v40.val[0], v30), v40.val[1], v32), v40.val[2], v34), v40.val[3], v36);
        v41 = vld4q_dup_f64(v12);
        v12 += 4;
        v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v38.val[0], v13), v38.val[1], v31), v38.val[2], v33), v38.val[3], v35);
        v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v38.val[0], v14), v38.val[1], v32), v38.val[2], v34), v38.val[3], v36);
        v39 = vld4q_dup_f64(v12);
        v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v41.val[0], v13), v41.val[1], v15), v41.val[2], v33), v41.val[3], v35);
        v34 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v41.val[0], v14), v41.val[1], v16), v41.val[2], v34), v41.val[3], v36);
        v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v39.val[0], v13), v39.val[1], v15), v39.val[2], v17), v39.val[3], v35);
        v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v39.val[0], v14), v39.val[1], v16), v39.val[2], v18), v39.val[3], v36);
        if (*((_DWORD *)result + 2) == 1)
        {
          if (*(_QWORD *)result)
          {
            *(_QWORD *)(*(_QWORD *)result + 8) = 3;
            *result = 0.0;
          }
          result = (double *)bmalloc::api::isoDeallocate((bmalloc::api *)result, v9);
        }
        else
        {
          --*((_DWORD *)result + 2);
        }
      }
      if (v28 != -1)
        result = (double *)((uint64_t (*)(_BYTE *, bmalloc::api **))off_1E33A0180[v28])(v37, &v26);
      if (v7[2] == 1)
      {
        result = (double *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 32))(v7);
        if (v10)
          return result;
      }
      else
      {
        --v7[2];
        if (v10)
          return result;
      }
      v4 += 8;
      v5 -= 8;
      if (!v5)
        goto LABEL_20;
    }
  }
  v6 = 1;
LABEL_20:
  result = (double *)bmalloc::api::isoAllocate();
  *result = 0.0;
  *((_DWORD *)result + 2) = 1;
  v20 = v31;
  v19 = v32;
  v21 = v30;
  *((float64x2_t *)result + 1) = v29;
  *((float64x2_t *)result + 2) = v21;
  *((float64x2_t *)result + 3) = v20;
  v22 = v36;
  v23 = v35;
  v24 = v33;
  *((float64x2_t *)result + 6) = v34;
  *((float64x2_t *)result + 7) = v23;
  *((float64x2_t *)result + 8) = v22;
  *((float64x2_t *)result + 4) = v19;
  *((float64x2_t *)result + 5) = v24;
  *((_BYTE *)result + 144) = v6 & 1;
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t WebCore::CSSTransformValue::serialize(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (****v5)(_QWORD, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t (***v10)(_QWORD, uint64_t);
  int v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 52);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD **)(result + 40);
    result = (**(uint64_t (***)(_QWORD))*v4)(*v4);
    if ((_DWORD)v2 != 1)
    {
      v5 = (uint64_t (****)(_QWORD, uint64_t))(v4 + 1);
      v6 = 8 * v2 - 8;
      do
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7
          && ((v8 = *(unsigned int *)(a2 + 16), v8 < *(_DWORD *)(v7 + 4))
            ? (v9 = *(_QWORD *)a2 == 0)
            : (v9 = 0),
              v9))
        {
          v11 = *(_DWORD *)(v7 + 16);
          v12 = *(_QWORD *)(v7 + 8);
          *(_DWORD *)(a2 + 16) = v8 + 1;
          if ((v11 & 4) != 0)
            *(_BYTE *)(v12 + v8) = 32;
          else
            *(_WORD *)(v12 + 2 * v8) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
        v10 = *v5++;
        result = (**v10)(v10, a2);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

WTF *WebCore::CSSTransformValue::toCSSValue@<X0>(WebCore::CSSTransformValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  WTF *v21;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  WTF *result;
  WTF *v28;
  uint64_t v29;
  _BYTE v30[32];
  _DWORD *v31;
  _DWORD *v32;
  WTF *v33;
  uint64_t v34;
  _BYTE v35[32];

  v33 = (WTF *)v35;
  v34 = 4;
  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)v4 + 48))(&v32);
      v7 = v32;
      if (v32)
      {
        v31 = v32;
        v32 = 0;
        LODWORD(v8) = HIDWORD(v34);
        if (HIDWORD(v34) == (_DWORD)v34)
        {
          v11 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)&v31);
          v8 = HIDWORD(v34);
          v12 = v33;
          v13 = *v11;
          *v11 = 0;
          *((_QWORD *)v12 + v8) = v13;
        }
        else
        {
          v31 = 0;
          *((_QWORD *)v33 + HIDWORD(v34)) = v7;
        }
        HIDWORD(v34) = v8 + 1;
        v9 = v31;
        v31 = 0;
        if (v9)
        {
          if (*v9 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v6);
          else
            *v9 -= 2;
        }
        v10 = v32;
        v32 = 0;
        if (v10)
        {
          if (*v10 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v6);
          else
            *v10 -= 2;
        }
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
    v14 = v33;
    v28 = (WTF *)v30;
    v29 = 4;
    v15 = HIDWORD(v34);
    if (v33 != (WTF *)v35)
    {
      v33 = (WTF *)v35;
      v28 = v14;
      v16 = v34;
      LODWORD(v34) = 4;
      LODWORD(v29) = v16;
      goto LABEL_21;
    }
  }
  else
  {
    v15 = 0;
    v28 = (WTF *)v30;
    v29 = 4;
  }
  memcpy(v30, v35, 8 * v15);
LABEL_21:
  HIDWORD(v34) = 0;
  HIDWORD(v29) = v15;
  WebCore::CSSTransformListValue::create((uint64_t)&v28, &v32);
  *a2 = v32;
  v32 = 0;
  if (HIDWORD(v29))
  {
    v18 = v28;
    v19 = 8 * HIDWORD(v29);
    do
    {
      v20 = *(_DWORD **)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        if (*v20 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v17);
        else
          *v20 -= 2;
      }
      v18 = (WTF *)((char *)v18 + 8);
      v19 -= 8;
    }
    while (v19);
  }
  v21 = v28;
  if (v30 != (_BYTE *)v28 && v28 != 0)
  {
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v21, v17);
  }
  if (HIDWORD(v34))
  {
    v23 = v33;
    v24 = 8 * HIDWORD(v34);
    do
    {
      v25 = *(_DWORD **)v23;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        if (*v25 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v17);
        else
          *v25 -= 2;
      }
      v23 = (WTF *)((char *)v23 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  result = v33;
  if (v35 != (_BYTE *)v33 && v33 != 0)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

uint64_t WebCore::CSSTranslate::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  _DWORD *v13;
  uint64_t result;
  _DWORD *v15;
  int v16;
  unsigned __int128 v17;
  int v18;
  _BOOL8 v19;
  int v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  _BYTE v30[36];

  v8 = (_DWORD *)*a3;
  if (!*a3)
  {
    v9 = bmalloc::api::isoAllocate();
    WebCore::CSSNumericType::create(6u, 1, (uint64_t)v30);
    *(_QWORD *)&v10 = 0x8000000080000000;
    *((_QWORD *)&v10 + 1) = 0x8000000080000000;
    v29[0] = v10;
    v29[1] = xmmword_1968BD2E0;
    v11 = v29;
    if (v30[32])
      v11 = v30;
    *(_DWORD *)(v9 + 8) = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    v12 = v11[1];
    *(_OWORD *)(v9 + 40) = *v11;
    *(_QWORD *)(v9 + 32) = 0;
    *(_OWORD *)(v9 + 56) = v12;
    *(_QWORD *)v9 = &off_1E339F080;
    *(_QWORD *)(v9 + 72) = 0;
    *(_BYTE *)(v9 + 80) = 6;
    v13 = (_DWORD *)*a3;
    *a3 = v9;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[2];
    }
  }
  result = WebCore::CSSNumericType::matchesTypeOrPercentage<(WebCore::CSSNumericBaseType)0>((int *)(*a1 + 40));
  if (!(_DWORD)result)
    goto LABEL_20;
  result = WebCore::CSSNumericType::matchesTypeOrPercentage<(WebCore::CSSNumericBaseType)0>((int *)(*a2 + 40));
  if (!(_DWORD)result)
    goto LABEL_20;
  v15 = (_DWORD *)*a3;
  if (*(unsigned __int8 *)(*a3 + 68) != 255)
    goto LABEL_20;
  v16 = *(_OWORD *)(v15 + 10);
  v17 = *(_OWORD *)(v15 + 10) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v18 = v15[14];
  v19 = (v15[15] & 0x7FFFFFFF) != 0;
  v20 = v15[16];
  v21 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)v17))) & 0xF));
  v21.i16[0] = vaddlv_u8(v21);
  v24 = (v18 & 0x7FFFFFFF) == 0;
  v22 = v21.u32[0];
  if (!v24)
    v22 = v21.u32[0] + 1;
  v23 = (v20 & 0x7FFFFFFF) != 0 ? v19 + 1 : v19;
  v24 = v22 + v23 != 1 || (v16 | 0x80000000) == 0x80000000;
  if (!v24)
  {
    result = bmalloc::api::isoAllocate();
    v25 = 0;
    v26 = *a1;
    *a1 = 0;
    v27 = *a2;
    *a2 = 0;
    v28 = *a3;
    *a3 = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 12) = v8 == 0;
    *(_QWORD *)result = &off_1E33A00A8;
    *(_QWORD *)(result + 16) = v26;
    *(_QWORD *)(result + 24) = v27;
    *(_QWORD *)(result + 32) = v28;
    *(_QWORD *)a4 = result;
  }
  else
  {
LABEL_20:
    *(_BYTE *)a4 = 33;
    *(_QWORD *)(a4 + 8) = 0;
    v25 = 1;
  }
  *(_DWORD *)(a4 + 16) = v25;
  return result;
}

uint64_t WebCore::CSSNumericType::matchesTypeOrPercentage<(WebCore::CSSNumericBaseType)0>(int *a1)
{
  int v1;
  int v2;
  unsigned __int128 v3;
  int v4;
  int v5;
  int32x4_t v6;
  int v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint8x8_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _BOOL8 v15;

  v1 = *a1;
  if (*((unsigned __int8 *)a1 + 28) == 255)
  {
    v2 = v1 & 0x7FFFFFFF;
    v3 = *(_OWORD *)(a1 + 1) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
    v6 = (int32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL);
    v6.i32[0] = v1 & 0x7FFFFFFF;
    v7 = a1[6];
    v4 = a1[5] & 0x7FFFFFFF;
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32(v6))) & 0xF));
    v8.i16[0] = vaddlv_u8(v8);
    if (HIDWORD(v3))
      v9 = v8.u32[0] + 1;
    else
      v9 = v8.u32[0];
    v5 = v7 & 0x7FFFFFFF;
    if ((v7 & 0x7FFFFFFF) != 0)
      v10 = ((a1[5] & 0x7FFFFFFF) != 0) + 1;
    else
      v10 = (a1[5] & 0x7FFFFFFF) != 0;
    if (v9 + v10 == 1)
    {
      if ((v1 | 0x80000000) != 0x80000000)
        return 1;
      v2 = 0;
    }
  }
  else
  {
    v2 = v1 & 0x7FFFFFFF;
    v3 = *(_OWORD *)(a1 + 1) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
    v4 = a1[5] & 0x7FFFFFFF;
    v5 = a1[6] & 0x7FFFFFFF;
  }
  v11 = v4 != 0;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)(vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1968BCEF0, (int8x16_t)vceqzq_s32((int32x4_t)v3))) & 0xF));
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v2)
    v13 = v12.u32[0] + 1;
  v14 = v5 != 0;
  if (v5)
    v15 = v11 + 1;
  else
    v15 = v11;
  return v13 + v15 == 1 && v14;
}

_DWORD *WebCore::CSSTranslate::create(WebCore::CSSFunctionValue &)::$_0::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unint64_t a5, char a6)
{
  int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *result;
  void *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  char *v20;
  WTF *v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v28;
  WebCore::CSSTranslate *v29;
  WTF::StringBuilder *v30;
  char v31;
  unint64_t v32;
  _QWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;

  v37 = 0;
  v38 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  if (v8)
  {
    v31 = a6;
    v32 = a5;
    v33 = a3;
    v10 = 0;
    v11 = 0;
    v12 = a2 + 16;
    while (1)
    {
      if (v10 > 3)
      {
        if (*(_DWORD *)(a2 + 8) <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x195928DB0);
        }
        v13 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (v11 - 4));
      }
      else
      {
        v13 = (_QWORD *)(v12 + 8 * v11);
      }
      result = WebCore::CSSStyleValueFactory::reifyValue(&v34, *v13, 0, 0);
      if (v36)
      {
        if (v36 != 1)
        {
          v29 = (WebCore::CSSTranslate *)std::__throw_bad_variant_access[abi:sn180100]();
          return (_DWORD *)WebCore::CSSTranslate::serialize(v29, v30);
        }
        v16 = 0;
        v17 = v35;
        v35 = 0;
        *(_BYTE *)a1 = (_BYTE)v34;
        *(_QWORD *)(a1 + 8) = v17;
      }
      else
      {
        v18 = v34;
        v34 = 0;
        if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18) - 3 < 8)
        {
          v39 = v18;
          LODWORD(v19) = HIDWORD(v38);
          if (HIDWORD(v38) == (_DWORD)v38)
          {
            v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v37, HIDWORD(v38) + 1, (unint64_t)&v39);
            v19 = HIDWORD(v38);
            v21 = v37;
            v22 = *(_QWORD *)v20;
            *(_QWORD *)v20 = 0;
            *((_QWORD *)v21 + v19) = v22;
          }
          else
          {
            v39 = 0;
            *((_QWORD *)v37 + HIDWORD(v38)) = v18;
          }
          HIDWORD(v38) = v19 + 1;
          result = v39;
          v39 = 0;
          if (result)
          {
            if (result[2] == 1)
              result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
            else
              --result[2];
          }
          v16 = 1;
          goto LABEL_20;
        }
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        else
          --v18[2];
        result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        v16 = 0;
        v23 = v39;
        *(_BYTE *)a1 = 33;
        *(_QWORD *)(a1 + 8) = v23;
      }
      *(_DWORD *)(a1 + 16) = 1;
LABEL_20:
      if (v36 != -1)
        result = (_DWORD *)((uint64_t (*)(_DWORD **, _DWORD **))off_1E33A00F0[v36])(&v39, &v34);
      if (!v16)
        goto LABEL_37;
      v10 = v11 + 1;
      v11 = (v11 + 1);
      if (v8 == v10)
      {
        v24 = HIDWORD(v38);
        a5 = v32;
        a3 = v33;
        a6 = v31;
        goto LABEL_30;
      }
    }
  }
  v24 = 0;
LABEL_30:
  if (a6)
    v25 = a5;
  else
    v25 = a4;
  if (v24 < a4 || v25 < v24)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = v34;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a1 + 16) = 1;
  }
  else
  {
    result = (_DWORD *)(*(uint64_t (**)(_QWORD, WTF **))(*(_QWORD *)*a3 + 16))(*a3, &v37);
  }
LABEL_37:
  v27 = v37;
  if (HIDWORD(v38))
  {
    v28 = 8 * HIDWORD(v38);
    do
    {
      result = *(_DWORD **)v27;
      *(_QWORD *)v27 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[2];
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
    v27 = v37;
  }
  if (v27)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    return (_DWORD *)WTF::fastFree(v27, v15);
  }
  return result;
}

uint64_t WebCore::CSSTranslate::serialize(WebCore::CSSTranslate *this, WTF::StringBuilder *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  WTF::StringBuilder::append();
  (***((void (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 2))(*((_QWORD *)this + 2), a2, 0);
  WTF::StringBuilder::append();
  result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 3))(*((_QWORD *)this + 3), a2, 0);
  if (!*((_BYTE *)this + 12))
  {
    WTF::StringBuilder::append();
    result = (***((uint64_t (****)(_QWORD, WTF::StringBuilder *, _QWORD))this + 4))(*((_QWORD *)this + 4), a2, 0);
  }
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
    return WTF::StringBuilder::append();
  v6 = *((unsigned int *)a2 + 4);
  if (v6 >= *(_DWORD *)(v5 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 8);
  *((_DWORD *)a2 + 4) = v6 + 1;
  if ((v8 & 4) != 0)
    *(_BYTE *)(v9 + v6) = 41;
  else
    *(_WORD *)(v9 + 2 * v6) = 41;
  return result;
}

uint64_t WebCore::CSSTranslate::toMatrix@<X0>(WebCore::CSSTranslate *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t result;
  _DWORD *v8;
  _DWORD *v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = (_DWORD *)*((_QWORD *)this + 2);
  ++v4[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4) != 10)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
    v4 = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  ++v5[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v5 + 24))(v5) != 10)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
    v5 = 0;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 4);
  ++v6[2];
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
  if ((_DWORD)result != 10)
  {
    if (v6[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[2];
    v6 = 0;
  }
  if (!v4 || !v5)
  {
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (!v6)
    {
LABEL_43:
      if (!v5)
        goto LABEL_46;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
  if (v6)
  {
    WebCore::CSSUnitValue::convertTo((uint64_t)v4, 6u, &v28);
    WebCore::CSSUnitValue::convertTo((uint64_t)v5, 6u, &v27);
    WebCore::CSSUnitValue::convertTo((uint64_t)v6, 6u, &v26);
    v8 = (_DWORD *)v28;
    if (v28)
    {
      v9 = (_DWORD *)v26;
      if (v27)
      {
        if (!v26)
        {
          *(_BYTE *)a2 = 33;
          *(_QWORD *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 16) = 1;
          goto LABEL_35;
        }
        v10 = *(double *)(v28 + 72);
        v11 = *(double *)(v27 + 72);
        v12 = *((unsigned __int8 *)this + 12);
        if (v12)
        {
          v13 = v11 * 0.0;
          v14 = v10 + v11 * 0.0;
          v15 = v11 + v10 * 0.0;
          v16 = v13 + v10 * 0.0;
          v17 = v16;
        }
        else
        {
          v18 = *(double *)(v26 + 72);
          v19 = v11 * 0.0;
          v14 = v10 + v11 * 0.0 + v18 * 0.0;
          v15 = v11 + v10 * 0.0 + v18 * 0.0;
          v20 = v19 + v10 * 0.0;
          v16 = v20 + v18;
          v17 = v20 + v18 * 0.0;
        }
        v21 = v17 + 1.0;
        v22 = v16 + 0.0;
        v23 = v15 + 0.0;
        v24 = v14 + 0.0;
        v25 = bmalloc::api::isoAllocate();
        *(_QWORD *)v25 = 0;
        *(_DWORD *)(v25 + 8) = 1;
        *(_QWORD *)(v25 + 16) = 0x3FF0000000000000;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_OWORD *)(v25 + 40) = 0u;
        *(_QWORD *)(v25 + 56) = 0x3FF0000000000000;
        *(_OWORD *)(v25 + 64) = 0u;
        *(_OWORD *)(v25 + 80) = 0u;
        *(_OWORD *)(v25 + 96) = xmmword_1968A14B0;
        *(double *)(v25 + 112) = v24;
        *(double *)(v25 + 120) = v23;
        *(double *)(v25 + 128) = v22;
        *(double *)(v25 + 136) = v21;
        *(_BYTE *)(v25 + 144) = v12;
        *(_QWORD *)a2 = v25;
        *(_DWORD *)(a2 + 16) = 0;
LABEL_33:
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[2];
LABEL_35:
        result = v27;
        if (v27)
        {
          if (*(_DWORD *)(v27 + 8) == 1)
          {
            result = (*(uint64_t (**)(void))(*(_QWORD *)v27 + 16))();
            if (v8)
            {
LABEL_39:
              if (v8[2] == 1)
                result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
              else
                --v8[2];
            }
LABEL_41:
            if (v6[2] == 1)
            {
              result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
              if (!v5)
                goto LABEL_46;
              goto LABEL_44;
            }
            --v6[2];
            goto LABEL_43;
          }
          --*(_DWORD *)(v27 + 8);
        }
        if (v8)
          goto LABEL_39;
        goto LABEL_41;
      }
    }
    else
    {
      v9 = (_DWORD *)v26;
    }
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    if (!v9)
      goto LABEL_35;
    goto LABEL_33;
  }
  *(_BYTE *)a2 = 33;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 1;
LABEL_44:
  if (v5[2] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  else
    --v5[2];
LABEL_46:
  if (v4)
  {
    if (v4[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  return result;
}

_DWORD *WebCore::CSSTranslate::toCSSValue@<X0>(WebCore::CSSTranslate *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(**((_QWORD **)this + 2) + 32))(&v17);
  if (!v17)
  {
    *a2 = 0;
    return result;
  }
  (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 3) + 32))(&v16);
  if (v16)
  {
    if (*((_BYTE *)this + 12))
    {
      v13 = v16;
      v14 = v17;
      v16 = 0;
      v17 = 0;
      WebCore::CSSFunctionValue::create(856, &v14, &v13, (uint64_t *)&v15);
      *a2 = (uint64_t)v15;
      if (v13)
      {
        if (*v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v5);
        else
          *v13 -= 2;
      }
      v11 = v14;
      if (!v14)
        goto LABEL_18;
    }
    else
    {
      (*(void (**)(_DWORD **__return_ptr))(**((_QWORD **)this + 4) + 32))(&v15);
      v6 = (uint64_t)v15;
      if (!v15)
      {
        *a2 = 0;
        goto LABEL_18;
      }
      v8 = v16;
      v7 = v17;
      v16 = 0;
      v17 = 0;
      v15 = 0;
      v9 = WTF::fastCompactMalloc((WTF *)0x40);
      *(_DWORD *)v9 = 2;
      v10 = (*(unsigned __int8 *)(v9 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v9 + 8) = 3;
      *(_WORD *)(v9 + 4) = -7680;
      *(_BYTE *)(v9 + 6) = (v10 | 0x10000u) >> 16;
      *(_QWORD *)(v9 + 16) = v7;
      *(_QWORD *)(v9 + 24) = v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_WORD *)(v9 + 56) = 860;
      *a2 = v9;
      v11 = v15;
      v15 = 0;
      if (!v11)
      {
LABEL_18:
        v12 = v16;
        v16 = 0;
        if (v12)
        {
          if (*v12 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v5);
          else
            *v12 -= 2;
        }
        goto LABEL_22;
      }
    }
    if (*v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v5);
    else
      *v11 -= 2;
    goto LABEL_18;
  }
  *a2 = 0;
LABEL_22:
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
    else
      *result -= 2;
  }
  return result;
}

void WebCore::CSSRotate::~CSSRotate(WebCore::CSSRotate *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E339FF00;
  v2 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
}

void WebCore::CSSRotate::~CSSRotate(WebCore::CSSRotate *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E339FF00;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[2];
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSRotate::getType(WebCore::CSSRotate *this)
{
  return 2;
}

void WebCore::CSSScale::~CSSScale(WebCore::CSSScale *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E339FF48;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
}

void WebCore::CSSScale::~CSSScale(WebCore::CSSScale *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E339FF48;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSScale::getType(WebCore::CSSScale *this)
{
  return 3;
}

void WebCore::CSSSkew::~CSSSkew(WebCore::CSSSkew *this)
{
  _DWORD *v2;
  _DWORD *v3;

  *(_QWORD *)this = &off_1E339FF90;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
}

void WebCore::CSSSkew::~CSSSkew(WebCore::CSSSkew *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E339FF90;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSSkew::getType(WebCore::CSSSkew *this)
{
  return 4;
}

void WebCore::CSSSkewX::~CSSSkewX(WebCore::CSSSkewX *this)
{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E339FFD8;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
}

void WebCore::CSSSkewX::~CSSSkewX(WebCore::CSSSkewX *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E339FFD8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSSkewX::getType(WebCore::CSSSkewX *this)
{
  return 5;
}

void WebCore::CSSSkewY::~CSSSkewY(WebCore::CSSSkewY *this)
{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E33A0020;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
}

void WebCore::CSSSkewY::~CSSSkewY(WebCore::CSSSkewY *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33A0020;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSSkewY::getType(WebCore::CSSSkewY *this)
{
  return 6;
}

void WebCore::CSSTransformValue::~CSSTransformValue(WebCore::CSSTransformValue *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 32))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  *(_QWORD *)this = &off_1E339F420;
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, (WTF::StringImpl *)a2);
    else
      *v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 32))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v7, a2);
  }
  *(_QWORD *)this = &off_1E339F420;
  v8 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, (WTF::StringImpl *)a2);
    else
      *v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSTransformValue::getType(WebCore::CSSTransformValue *this)
{
  return 2;
}

void WebCore::CSSTranslate::~CSSTranslate(WebCore::CSSTranslate *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33A00A8;
  v2 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
}

void WebCore::CSSTranslate::~CSSTranslate(WebCore::CSSTranslate *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E33A00A8;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSTranslate::getType(WebCore::CSSTranslate *this)
{
  return 7;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSRotate::create(WebCore::CSSFunctionValue &)::$_1,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSRotate,WTF::RawPtrTraits<WebCore::CSSRotate>,WTF::DefaultRefDerefTraits<WebCore::CSSRotate>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;

  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v23 = v5;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v6 = &v25;
  else
    v6 = (uint64_t *)&v23;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v7;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = 0x3FF0000000000000;
  *(_BYTE *)(v4 + 80) = 1;
  v20 = v4;
  v21 = 1;
  v8 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v9 = 0x8000000080000000;
  *((_QWORD *)&v9 + 1) = 0x8000000080000000;
  v23 = v9;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v10 = &v25;
  else
    v10 = (uint64_t *)&v23;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)v10;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 56) = v11;
  *(_QWORD *)v8 = &off_1E339F080;
  *(_QWORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 80) = 1;
  v18 = v8;
  v19 = 1;
  v12 = bmalloc::api::isoAllocate();
  result = WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v14 = 0x8000000080000000;
  *((_QWORD *)&v14 + 1) = 0x8000000080000000;
  v23 = v14;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v15 = &v25;
  else
    v15 = (uint64_t *)&v23;
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)v15;
  *(_OWORD *)(v12 + 56) = v16;
  *(_QWORD *)v12 = &off_1E339F080;
  *(_QWORD *)(v12 + 72) = 0;
  *(_BYTE *)(v12 + 80) = 1;
  v25 = v12;
  v26 = 1;
  if (*((_DWORD *)a1 + 3))
  {
    v17 = **a1;
    ++*(_DWORD *)(v17 + 8);
    *(_QWORD *)&v23 = v17;
    WebCore::CSSRotate::create((unsigned int *)&v20, (uint64_t)&v18, (uint64_t)&v25, (uint64_t *)&v23, a2);
    result = v23;
    if ((_QWORD)v23)
    {
      if (*(_DWORD *)(v23 + 8) == 1)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 16))();
      else
        --*(_DWORD *)(v23 + 8);
    }
    if (v26 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v26])(&v22, &v25);
    v26 = -1;
    if (v19 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v19])(&v22, &v18);
    v19 = -1;
    if (v21 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v21])(&v22, &v20);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSRotate::create(WebCore::CSSFunctionValue &)::$_2,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSRotate,WTF::RawPtrTraits<WebCore::CSSRotate>,WTF::DefaultRefDerefTraits<WebCore::CSSRotate>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;

  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v23 = v5;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v6 = &v25;
  else
    v6 = (uint64_t *)&v23;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v7;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = 1;
  v20 = v4;
  v21 = 1;
  v8 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v9 = 0x8000000080000000;
  *((_QWORD *)&v9 + 1) = 0x8000000080000000;
  v23 = v9;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v10 = &v25;
  else
    v10 = (uint64_t *)&v23;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)v10;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 56) = v11;
  *(_QWORD *)v8 = &off_1E339F080;
  *(_QWORD *)(v8 + 72) = 0x3FF0000000000000;
  *(_BYTE *)(v8 + 80) = 1;
  v18 = v8;
  v19 = 1;
  v12 = bmalloc::api::isoAllocate();
  result = WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v14 = 0x8000000080000000;
  *((_QWORD *)&v14 + 1) = 0x8000000080000000;
  v23 = v14;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v15 = &v25;
  else
    v15 = (uint64_t *)&v23;
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)v15;
  *(_OWORD *)(v12 + 56) = v16;
  *(_QWORD *)v12 = &off_1E339F080;
  *(_QWORD *)(v12 + 72) = 0;
  *(_BYTE *)(v12 + 80) = 1;
  v25 = v12;
  v26 = 1;
  if (*((_DWORD *)a1 + 3))
  {
    v17 = **a1;
    ++*(_DWORD *)(v17 + 8);
    *(_QWORD *)&v23 = v17;
    WebCore::CSSRotate::create((unsigned int *)&v20, (uint64_t)&v18, (uint64_t)&v25, (uint64_t *)&v23, a2);
    result = v23;
    if ((_QWORD)v23)
    {
      if (*(_DWORD *)(v23 + 8) == 1)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 16))();
      else
        --*(_DWORD *)(v23 + 8);
    }
    if (v26 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v26])(&v22, &v25);
    v26 = -1;
    if (v19 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v19])(&v22, &v18);
    v19 = -1;
    if (v21 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v21])(&v22, &v20);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSRotate::create(WebCore::CSSFunctionValue &)::$_3,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSRotate,WTF::RawPtrTraits<WebCore::CSSRotate>,WTF::DefaultRefDerefTraits<WebCore::CSSRotate>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;

  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v23 = v5;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v6 = &v25;
  else
    v6 = (uint64_t *)&v23;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v7;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = 1;
  v20 = v4;
  v21 = 1;
  v8 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v9 = 0x8000000080000000;
  *((_QWORD *)&v9 + 1) = 0x8000000080000000;
  v23 = v9;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v10 = &v25;
  else
    v10 = (uint64_t *)&v23;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)v10;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 56) = v11;
  *(_QWORD *)v8 = &off_1E339F080;
  *(_QWORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 80) = 1;
  v18 = v8;
  v19 = 1;
  v12 = bmalloc::api::isoAllocate();
  result = WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v25);
  *(_QWORD *)&v14 = 0x8000000080000000;
  *((_QWORD *)&v14 + 1) = 0x8000000080000000;
  v23 = v14;
  v24 = xmmword_1968BD2E0;
  if (v27)
    v15 = &v25;
  else
    v15 = (uint64_t *)&v23;
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)v15;
  *(_OWORD *)(v12 + 56) = v16;
  *(_QWORD *)v12 = &off_1E339F080;
  *(_QWORD *)(v12 + 72) = 0x3FF0000000000000;
  *(_BYTE *)(v12 + 80) = 1;
  v25 = v12;
  v26 = 1;
  if (*((_DWORD *)a1 + 3))
  {
    v17 = **a1;
    ++*(_DWORD *)(v17 + 8);
    *(_QWORD *)&v23 = v17;
    WebCore::CSSRotate::create((unsigned int *)&v20, (uint64_t)&v18, (uint64_t)&v25, (uint64_t *)&v23, a2);
    result = v23;
    if ((_QWORD)v23)
    {
      if (*(_DWORD *)(v23 + 8) == 1)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 16))();
      else
        --*(_DWORD *)(v23 + 8);
    }
    if (v26 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v26])(&v22, &v25);
    v26 = -1;
    if (v19 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v19])(&v22, &v18);
    v19 = -1;
    if (v21 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v21])(&v22, &v20);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSRotate::create(WebCore::CSSFunctionValue &)::$_4,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSRotate,WTF::RawPtrTraits<WebCore::CSSRotate>,WTF::DefaultRefDerefTraits<WebCore::CSSRotate>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  uint64_t result;
  _DWORD *v4;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = **(_DWORD ***)a1;
    ++v2[2];
    v4 = v2;
    WebCore::CSSRotate::create((uint64_t)&v4, a2);
    result = (uint64_t)v4;
    if (v4)
    {
      if (v4[2] == 1)
        return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 16))();
      else
        --v4[2];
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::CSSRotate::create(WebCore::CSSFunctionValue &)::$_5,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSRotate,WTF::RawPtrTraits<WebCore::CSSRotate>,WTF::DefaultRefDerefTraits<WebCore::CSSRotate>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *result;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;

  v2 = *((_DWORD *)a1 + 3);
  if (!v2)
    goto LABEL_25;
  v3 = *a1;
  v4 = **a1;
  if (v4)
    ++*(_DWORD *)(v4 + 8);
  v14 = v4;
  v15 = 1;
  if (v2 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19592A694);
  }
  v5 = v3[1];
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v12 = v5;
  v13 = 1;
  if (v2 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x19592A69CLL);
  }
  v6 = v3[2];
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  v10 = v6;
  v11 = 1;
  if (v2 <= 3)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x19592A68CLL);
  }
  v7 = (_DWORD *)v3[3];
  ++v7[2];
  v9 = v7;
  WebCore::CSSRotate::create((unsigned int *)&v14, (uint64_t)&v12, (uint64_t)&v10, (uint64_t *)&v9, a2);
  result = v9;
  if (v9)
  {
    if (v9[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 16))();
    else
      --v9[2];
  }
  if (v11 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v11])(&v16, &v10);
  v11 = -1;
  if (v13 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v13])(&v16, &v12);
  v13 = -1;
  if (v15 != -1)
    return (_DWORD *)((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v15])(&v16, &v14);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_1,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSScale,WTF::RawPtrTraits<WebCore::CSSScale>,WTF::DefaultRefDerefTraits<WebCore::CSSScale>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  char v10;
  _OWORD v11[2];
  _BYTE v12[8];
  int v13;
  char v14;
  char v15;

  if (*((_DWORD *)a1 + 3))
  {
    v3 = **a1;
    if (v3)
      ++*(_DWORD *)(v3 + 8);
    v8 = v3;
    v9 = 1;
    v4 = bmalloc::api::isoAllocate();
    WebCore::CSSNumericType::create(1u, 1, (uint64_t)v12);
    *(_QWORD *)&v5 = 0x8000000080000000;
    *((_QWORD *)&v5 + 1) = 0x8000000080000000;
    v11[0] = v5;
    v11[1] = xmmword_1968BD2E0;
    v6 = v11;
    if (v15)
      v6 = v12;
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    v7 = v6[1];
    *(_OWORD *)(v4 + 40) = *v6;
    *(_QWORD *)(v4 + 32) = 0;
    *(_OWORD *)(v4 + 56) = v7;
    *(_QWORD *)v4 = &off_1E339F080;
    *(_QWORD *)(v4 + 72) = 0x3FF0000000000000;
    *(_BYTE *)(v4 + 80) = 1;
    *(_QWORD *)&v11[0] = v4;
    DWORD2(v11[0]) = 1;
    v12[0] = 0;
    v14 = 0;
    WebCore::CSSScale::create((uint64_t)&v8, (uint64_t)v11, (uint64_t)v12, a2);
    if (v14 && v13 != -1)
      ((void (*)(char *, _BYTE *))off_1E33A00E0[v13])(&v10, v12);
    if (DWORD2(v11[0]) != -1)
      ((void (*)(_BYTE *, _OWORD *))off_1E33A00E0[DWORD2(v11[0])])(v12, v11);
    DWORD2(v11[0]) = -1;
    if (v9 != -1)
      ((void (*)(_BYTE *, uint64_t *))off_1E33A00E0[v9])(v12, &v8);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_2,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSScale,WTF::RawPtrTraits<WebCore::CSSScale>,WTF::DefaultRefDerefTraits<WebCore::CSSScale>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  _OWORD v13[2];
  _BYTE v14[8];
  int v15;
  char v16;
  char v17;

  v4 = bmalloc::api::isoAllocate();
  result = WebCore::CSSNumericType::create(1u, 1, (uint64_t)v14);
  *(_QWORD *)&v6 = 0x8000000080000000;
  *((_QWORD *)&v6 + 1) = 0x8000000080000000;
  v13[0] = v6;
  v13[1] = xmmword_1968BD2E0;
  v7 = v13;
  if (v17)
    v7 = v14;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v8 = v7[1];
  *(_OWORD *)(v4 + 40) = *v7;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v8;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = 0x3FF0000000000000;
  *(_BYTE *)(v4 + 80) = 1;
  *(_QWORD *)&v13[0] = v4;
  DWORD2(v13[0]) = 1;
  if (*((_DWORD *)a1 + 3))
  {
    v9 = **a1;
    if (v9)
      ++*(_DWORD *)(v9 + 8);
    v10 = v9;
    v11 = 1;
    v14[0] = 0;
    v16 = 0;
    result = (uint64_t)WebCore::CSSScale::create((uint64_t)v13, (uint64_t)&v10, (uint64_t)v14, a2);
    if (v16 && v15 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))off_1E33A00E0[v15])(&v12, v14);
    if (v11 != -1)
      result = ((uint64_t (*)(_BYTE *, uint64_t *))off_1E33A00E0[v11])(v14, &v10);
    v11 = -1;
    if (DWORD2(v13[0]) != -1)
      return ((uint64_t (*)(_BYTE *, _OWORD *))off_1E33A00E0[DWORD2(v13[0])])(v14, v13);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_3,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSScale,WTF::RawPtrTraits<WebCore::CSSScale>,WTF::DefaultRefDerefTraits<WebCore::CSSScale>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;

  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v19);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v17 = v5;
  v18 = xmmword_1968BD2E0;
  if (v22)
    v6 = &v19;
  else
    v6 = (uint64_t *)&v17;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v7;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = 0x3FF0000000000000;
  *(_BYTE *)(v4 + 80) = 1;
  v14 = v4;
  v15 = 1;
  v8 = bmalloc::api::isoAllocate();
  result = WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v19);
  *(_QWORD *)&v10 = 0x8000000080000000;
  *((_QWORD *)&v10 + 1) = 0x8000000080000000;
  v17 = v10;
  v18 = xmmword_1968BD2E0;
  if (v22)
    v11 = &v19;
  else
    v11 = (uint64_t *)&v17;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)v11;
  *(_OWORD *)(v8 + 56) = v12;
  *(_QWORD *)v8 = &off_1E339F080;
  *(_QWORD *)(v8 + 72) = 0x3FF0000000000000;
  *(_BYTE *)(v8 + 80) = 1;
  *(_QWORD *)&v17 = v8;
  DWORD2(v17) = 1;
  if (*((_DWORD *)a1 + 3))
  {
    v13 = **a1;
    if (v13)
      ++*(_DWORD *)(v13 + 8);
    v19 = v13;
    v20 = 1;
    v21 = 1;
    result = (uint64_t)WebCore::CSSScale::create((uint64_t)&v14, (uint64_t)&v17, (uint64_t)&v19, a2);
    if (v21 && v20 != -1)
      result = ((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v20])(&v16, &v19);
    if (DWORD2(v17) != -1)
      result = ((uint64_t (*)(uint64_t *, __int128 *))off_1E33A00E0[DWORD2(v17)])(&v19, &v17);
    DWORD2(v17) = -1;
    if (v15 != -1)
      return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33A00E0[v15])(&v19, &v14);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_4,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSScale,WTF::RawPtrTraits<WebCore::CSSScale>,WTF::DefaultRefDerefTraits<WebCore::CSSScale>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *result;
  _BYTE v7[8];
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;

  v2 = *((_DWORD *)a1 + 3);
  if (v2)
  {
    v3 = *a1;
    v4 = **a1;
    if (v4)
      ++*(_DWORD *)(v4 + 8);
    v12 = v4;
    v13 = 1;
    v5 = v3[v2 == 2];
    if (v5)
      ++*(_DWORD *)(v5 + 8);
    v10 = v5;
    v11 = 1;
    v7[0] = 0;
    v9 = 0;
    result = WebCore::CSSScale::create((uint64_t)&v12, (uint64_t)&v10, (uint64_t)v7, a2);
    if (v9 && v8 != -1)
      result = (_DWORD *)((uint64_t (*)(char *, _BYTE *))off_1E33A00E0[v8])(&v14, v7);
    if (v11 != -1)
      result = (_DWORD *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E33A00E0[v11])(v7, &v10);
    v11 = -1;
    if (v13 != -1)
      return (_DWORD *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E33A00E0[v13])(v7, &v12);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::CSSScale::create(WebCore::CSSFunctionValue &)::$_5,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSScale,WTF::RawPtrTraits<WebCore::CSSScale>,WTF::DefaultRefDerefTraits<WebCore::CSSScale>>>,WTF::Vector<WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *result;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;

  v2 = *((_DWORD *)a1 + 3);
  if (!v2)
    goto LABEL_20;
  v3 = *a1;
  v4 = **a1;
  if (v4)
    ++*(_DWORD *)(v4 + 8);
  v13 = v4;
  v14 = 1;
  if (v2 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19592ADB4);
  }
  v5 = v3[1];
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v11 = v5;
  v12 = 1;
  if (v2 <= 2)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x19592ADACLL);
  }
  v6 = v3[2];
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  v8 = v6;
  v9 = 1;
  v10 = 1;
  result = WebCore::CSSScale::create((uint64_t)&v13, (uint64_t)&v11, (uint64_t)&v8, a2);
  if (v10 && v9 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t *))off_1E33A00E0[v9])(&v15, &v8);
  if (v12 != -1)
    result = (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33A00E0[v12])(&v8, &v11);
  v12 = -1;
  if (v14 != -1)
    return (_DWORD *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E33A00E0[v14])(&v8, &v13);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::CSSTranslate::create(WebCore::CSSFunctionValue &)::$_1,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSTranslate,WTF::RawPtrTraits<WebCore::CSSTranslate>,WTF::DefaultRefDerefTraits<WebCore::CSSTranslate>>>,WTF::Vector<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  _DWORD *v8;
  _OWORD v9[2];
  uint64_t v10[4];
  char v11;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = **(_DWORD ***)a1;
    ++v3[2];
    v8 = v3;
    v4 = bmalloc::api::isoAllocate();
    WebCore::CSSNumericType::create(6u, 1, (uint64_t)v10);
    *(_QWORD *)&v5 = 0x8000000080000000;
    *((_QWORD *)&v5 + 1) = 0x8000000080000000;
    v9[0] = v5;
    v9[1] = xmmword_1968BD2E0;
    v6 = (uint64_t *)v9;
    if (v11)
      v6 = v10;
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    v7 = *((_OWORD *)v6 + 1);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
    *(_QWORD *)(v4 + 32) = 0;
    *(_OWORD *)(v4 + 56) = v7;
    *(_QWORD *)v4 = &off_1E339F080;
    *(_QWORD *)(v4 + 72) = 0;
    *(_BYTE *)(v4 + 80) = 6;
    v10[0] = v4;
    *(_QWORD *)&v9[0] = 0;
    WebCore::CSSTranslate::create((uint64_t *)&v8, v10, (uint64_t *)v9, a2);
    if (*(_QWORD *)&v9[0])
    {
      if (*(_DWORD *)(*(_QWORD *)&v9[0] + 8) == 1)
        (*(void (**)(void))(**(_QWORD **)&v9[0] + 16))();
      else
        --*(_DWORD *)(*(_QWORD *)&v9[0] + 8);
    }
    if (v10[0])
    {
      if (*(_DWORD *)(v10[0] + 8) == 1)
        (*(void (**)(void))(*(_QWORD *)v10[0] + 16))();
      else
        --*(_DWORD *)(v10[0] + 8);
    }
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(void))(*(_QWORD *)v8 + 16))();
      else
        --v8[2];
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSTranslate::create(WebCore::CSSFunctionValue &)::$_2,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSTranslate,WTF::RawPtrTraits<WebCore::CSSTranslate>,WTF::DefaultRefDerefTraits<WebCore::CSSTranslate>>>,WTF::Vector<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  _DWORD *v10;
  _OWORD v11[2];
  uint64_t v12[4];
  char v13;

  v4 = bmalloc::api::isoAllocate();
  result = WebCore::CSSNumericType::create(6u, 1, (uint64_t)v12);
  *(_QWORD *)&v6 = 0x8000000080000000;
  *((_QWORD *)&v6 + 1) = 0x8000000080000000;
  v11[0] = v6;
  v11[1] = xmmword_1968BD2E0;
  v7 = (uint64_t *)v11;
  if (v13)
    v7 = v12;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v8 = *((_OWORD *)v7 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v7;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v8;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = 6;
  v12[0] = v4;
  if (*((_DWORD *)a1 + 3))
  {
    v9 = **a1;
    ++*(_DWORD *)(v9 + 8);
    v10 = 0;
    *(_QWORD *)&v11[0] = v9;
    WebCore::CSSTranslate::create(v12, (uint64_t *)v11, (uint64_t *)&v10, a2);
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(void))(*(_QWORD *)v10 + 16))();
      else
        --v10[2];
    }
    if (*(_QWORD *)&v11[0])
    {
      if (*(_DWORD *)(*(_QWORD *)&v11[0] + 8) == 1)
        (*(void (**)(void))(**(_QWORD **)&v11[0] + 16))();
      else
        --*(_DWORD *)(*(_QWORD *)&v11[0] + 8);
    }
    result = v12[0];
    if (v12[0])
    {
      if (*(_DWORD *)(v12[0] + 8) == 1)
        return (*(uint64_t (**)(void))(*(_QWORD *)v12[0] + 16))();
      else
        --*(_DWORD *)(v12[0] + 8);
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::CSSTranslate::create(WebCore::CSSFunctionValue &)::$_3,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSTranslate,WTF::RawPtrTraits<WebCore::CSSTranslate>,WTF::DefaultRefDerefTraits<WebCore::CSSTranslate>>>,WTF::Vector<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  _DWORD *result;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[4];
  char v18;

  v4 = (_DWORD *)bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(6u, 1, (uint64_t)v17);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v15 = v5;
  v16 = xmmword_1968BD2E0;
  if (v18)
    v6 = v17;
  else
    v6 = (uint64_t *)&v15;
  v4[2] = 1;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 10) = *(_OWORD *)v6;
  *((_QWORD *)v4 + 4) = 0;
  *(_OWORD *)(v4 + 14) = v7;
  *(_QWORD *)v4 = &off_1E339F080;
  *((_QWORD *)v4 + 9) = 0;
  *((_BYTE *)v4 + 80) = 6;
  v14 = v4;
  v8 = bmalloc::api::isoAllocate();
  result = (_DWORD *)WebCore::CSSNumericType::create(6u, 1, (uint64_t)v17);
  *(_QWORD *)&v10 = 0x8000000080000000;
  *((_QWORD *)&v10 + 1) = 0x8000000080000000;
  v15 = v10;
  v16 = xmmword_1968BD2E0;
  if (v18)
    v11 = v17;
  else
    v11 = (uint64_t *)&v15;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)v11;
  *(_OWORD *)(v8 + 56) = v12;
  *(_QWORD *)v8 = &off_1E339F080;
  *(_QWORD *)(v8 + 72) = 0;
  *(_BYTE *)(v8 + 80) = 6;
  v17[0] = v8;
  if (*((_DWORD *)a1 + 3))
  {
    v13 = **a1;
    ++*(_DWORD *)(v13 + 8);
    *(_QWORD *)&v15 = v13;
    WebCore::CSSTranslate::create((uint64_t *)&v14, v17, (uint64_t *)&v15, a2);
    if ((_QWORD)v15)
    {
      if (*(_DWORD *)(v15 + 8) == 1)
        (*(void (**)(void))(*(_QWORD *)v15 + 16))();
      else
        --*(_DWORD *)(v15 + 8);
    }
    if (v17[0])
    {
      if (*(_DWORD *)(v17[0] + 8) == 1)
        (*(void (**)(void))(*(_QWORD *)v17[0] + 16))();
      else
        --*(_DWORD *)(v17[0] + 8);
    }
    result = v14;
    if (v14)
    {
      if (v14[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 16))();
      else
        --v14[2];
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::CSSTranslate::create(WebCore::CSSFunctionValue &)::$_4,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSTranslate,WTF::RawPtrTraits<WebCore::CSSTranslate>,WTF::DefaultRefDerefTraits<WebCore::CSSTranslate>>>,WTF::Vector<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  __int128 v12;
  _DWORD *v13;
  _OWORD v14[2];
  uint64_t v15[4];
  char v16;

  v3 = *(uint64_t **)a1;
  v4 = *(_DWORD *)(a1 + 12);
  if (v4 == 2)
  {
    v5 = *v3;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(*v3 + 8) + 1;
    v15[0] = v5;
    v6 = v3[1];
    ++*(_DWORD *)(v6 + 8);
    v13 = 0;
    *(_QWORD *)&v14[0] = v6;
    WebCore::CSSTranslate::create(v15, (uint64_t *)v14, (uint64_t *)&v13, a2);
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(void))(*(_QWORD *)v13 + 16))();
      else
        --v13[2];
    }
    if (*(_QWORD *)&v14[0])
    {
      if (*(_DWORD *)(*(_QWORD *)&v14[0] + 8) == 1)
        (*(void (**)(void))(**(_QWORD **)&v14[0] + 16))();
      else
        --*(_DWORD *)(*(_QWORD *)&v14[0] + 8);
    }
    v7 = (_DWORD *)v15[0];
    if (!v15[0])
      return;
LABEL_20:
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
    return;
  }
  if (!v4)
  {
    __break(0xC471u);
    return;
  }
  v8 = (_DWORD *)*v3;
  ++v8[2];
  v13 = v8;
  v9 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(6u, 1, (uint64_t)v15);
  *(_QWORD *)&v10 = 0x8000000080000000;
  *((_QWORD *)&v10 + 1) = 0x8000000080000000;
  v14[0] = v10;
  v14[1] = xmmword_1968BD2E0;
  v11 = (uint64_t *)v14;
  if (v16)
    v11 = v15;
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)v11;
  *(_QWORD *)(v9 + 32) = 0;
  *(_OWORD *)(v9 + 56) = v12;
  *(_QWORD *)v9 = &off_1E339F080;
  *(_QWORD *)(v9 + 72) = 0;
  *(_BYTE *)(v9 + 80) = 6;
  v15[0] = v9;
  *(_QWORD *)&v14[0] = 0;
  WebCore::CSSTranslate::create((uint64_t *)&v13, v15, (uint64_t *)v14, a2);
  if (*(_QWORD *)&v14[0])
  {
    if (*(_DWORD *)(*(_QWORD *)&v14[0] + 8) == 1)
      (*(void (**)(void))(**(_QWORD **)&v14[0] + 16))();
    else
      --*(_DWORD *)(*(_QWORD *)&v14[0] + 8);
  }
  if (v15[0])
  {
    if (*(_DWORD *)(v15[0] + 8) == 1)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 16))();
    else
      --*(_DWORD *)(v15[0] + 8);
  }
  v7 = v13;
  if (v13)
    goto LABEL_20;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::CSSTranslate::create(WebCore::CSSFunctionValue &)::$_5,WebCore::ExceptionOr<WTF::Ref<WebCore::CSSTranslate,WTF::RawPtrTraits<WebCore::CSSTranslate>,WTF::DefaultRefDerefTraits<WebCore::CSSTranslate>>>,WTF::Vector<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v2;
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *result;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  v2 = *(_DWORD *)(a1 + 12);
  if (!v2)
    goto LABEL_19;
  v3 = *(_QWORD **)a1;
  v4 = **(_DWORD ***)a1;
  ++v4[2];
  v10 = v4;
  if (v2 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19592B5ECLL);
  }
  v5 = (_DWORD *)v3[1];
  ++v5[2];
  v9 = v5;
  if (v2 <= 2)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19592B5E4);
  }
  v6 = (_DWORD *)v3[2];
  ++v6[2];
  v8 = v6;
  WebCore::CSSTranslate::create((uint64_t *)&v10, (uint64_t *)&v9, (uint64_t *)&v8, a2);
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v8 + 16))();
    else
      --v8[2];
  }
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v9 + 16))();
    else
      --v9[2];
  }
  result = v10;
  if (v10)
  {
    if (v10[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[2];
  }
  return result;
}

uint64_t WebCore::SelectorCompiler::SelectorCodeGenerator::compile(uint64_t a1, int **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  char *v20;
  _QWORD *v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  char *v27;
  _QWORD *v28;
  int v29;
  char *v30;
  char *v31;
  JSC::ARM64LogicalImmediate *v32;
  unsigned int *v33;
  int v34;
  JSC::AssemblerBuffer *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  void *v41;
  uint64_t v42;
  size_t *v43;
  size_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  WTF *v60;
  uint64_t v61;
  int v62;
  WTF *v63;
  int v64;
  int v65;
  WTF *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  char *v100;
  uint64_t *v101;
  int v102;
  char *v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  int *v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  char *v113;
  uint64_t *v114;
  unsigned int v115;
  char *v116;
  void *v117;
  unsigned int v118;
  int i;
  unsigned int v120;
  char v121;
  char *v122;
  int *v123;
  int v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  WTF *v129;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  int v140;
  _DWORD *v141;
  int v142;
  _DWORD *v143;
  unsigned int v144;
  WTF *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  WTF *v155;
  WTF *v156;
  WTF *v157;
  unsigned int v158;
  int v159;
  pthread_key_t *v160;
  void *v161;
  uint64_t v162;
  WTF *v163;
  unsigned int v164;
  JSC *JumpIslandToUsingJITMemcpy;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t k;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  unint64_t v174;
  unsigned int v175;
  JSC *v176;
  int v177;
  unsigned int v178;
  int *v179;
  JSC *v180;
  JSC *v181;
  uint64_t v182;
  JSC::ExecutableAllocator *v183;
  int v184;
  unsigned int v185;
  unsigned int *v186;
  int v187;
  _BOOL4 v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  JSC *v196;
  int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  int v201;
  JSC *v202;
  int v203;
  unsigned int v204;
  JSC *v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int *v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  BOOL v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  WTF *v227;
  WTF *v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v233;
  unsigned int v234;
  WTF *v235;
  int v236;
  int *v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  unint64_t v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  int v254;
  int8x8_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  unint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  int j;
  int8x8_t v268;
  int v269;
  unsigned int v270;
  char *v271;
  uint64_t *v272;
  int v273;
  char *v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  _BYTE **v278;
  int v279;
  _DWORD *v280;
  int *v281;
  uint64_t v282;
  int v283;
  void *v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  WTF *v288;
  WTF *v289;
  WTF *v290;
  int v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  _DWORD *v296;
  int v297;
  char v298;
  unsigned int v299;
  WTF *v300;
  unsigned int **v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int **v307;
  uint64_t v308;
  unsigned int *v309;
  unsigned int *v310;
  unsigned int v311;
  unsigned int v312;
  _BYTE *v313;
  uint64_t v314;
  size_t v315;
  size_t v316;
  uint64_t v317;
  size_t v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  int v323;
  char v324;
  unsigned int v325;
  int v326;
  int v327;
  int *v328;
  uint64_t v329;
  int v330;
  int *v331;
  int *v332;
  int v333;
  uint64_t v334;
  unsigned int v335;
  int v336;
  void *v337;
  WTF *v338;
  uint64_t v339;
  _DWORD *v340;
  WTF *v341;
  int v342;
  _DWORD *v343;
  _DWORD *v344;
  _BYTE *v345;
  _BYTE *v346;
  uint64_t v347;
  int v348;
  _BYTE *v349;
  _BYTE *v350;
  uint64_t v351;
  char *v352;
  unint64_t v353;
  int v354;
  char *v355;
  int *v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  unsigned __int8 v360;
  WTF *v361;
  int v362;
  unsigned int v363;
  _DWORD *v364;
  char *__src;
  int __srca;
  uint64_t *v367;
  WTF *v369;
  uint64_t v370;
  _BYTE v371[24];
  WTF *v372;
  uint64_t v373;
  _WORD v374[32];
  WTF *v375;
  uint64_t v376;
  _BYTE v377[24];
  int v378;
  int v379;
  char v380;
  __int16 v381;
  char v382;
  unsigned int v383;
  uint64_t v384;
  unsigned int v385;
  int v386;
  int v387;
  uint64_t v388;
  WTF *v389;
  uint64_t v390;
  uint64_t v391;
  WTF *v392;
  _BYTE v393[128];
  unsigned int v394;
  char v395;
  int v396;
  int v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  unsigned int *v401;
  uint64_t v402;
  _WORD v403[32];
  uint64_t v404;

  v2 = a1;
  v404 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 1148);
  if (v3 < 2)
  {
    v364 = *(_DWORD **)(a1 + 600);
    v5 = *(_DWORD *)(a1 + 608);
    v6 = *(unsigned __int8 *)(a1 + 612);
    v375 = (WTF *)v377;
    v376 = 2;
    v7 = *(_DWORD *)(a1 + 1144);
    if (v7 != 1)
    {
      if (v3 == 1)
      {
        if (!*(_DWORD *)(a1 + 1164))
        {
          __break(0xC471u);
          JUMPOUT(0x19592EF50);
        }
        v8 = *(_QWORD *)(a1 + 1152);
        if (!*(_QWORD *)(v8 + 4))
        {
          if (*(_QWORD *)(v8 + 480))
          {
            if (!*(_BYTE *)(a1 + 372))
            {
              __break(0xC471u);
              JUMPOUT(0x19592E23CLL);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
            v9 = *(_BYTE *)(a1 + 464) & 0x1F | 0x38404020;
            v10 = *(_DWORD *)(a1 + 360);
            if (v10 + 4 > *(_DWORD *)(a1 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
              v10 = *(_DWORD *)(v2 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v2 + 216) + v10) = v9;
            *(_DWORD *)(v2 + 360) += 4;
            JSC::MacroAssemblerARM64::branchTest32(v2 + 160, 0, 17, 17, (uint64_t)&v401);
            if (!*(_BYTE *)(v2 + 372))
            {
              __break(0xC471u);
              JUMPOUT(0x19592E26CLL);
            }
            v11 = **(_DWORD **)(v8 + 480);
            if ((v11 >> 9) > 0x1Cu)
              LODWORD(v12) = 0;
            else
              v12 = qword_1969F02A0[(char)(v11 >> 9)];
            *(_DWORD *)(*(_QWORD *)(v2 + 456) + 208) &= ~*(_DWORD *)(v2 + 480);
            v23 = *(_BYTE *)(v2 + 464) & 0x1F | 0x38404020;
            v24 = *(_DWORD *)(v2 + 360);
            if (v24 + 4 > *(_DWORD *)(v2 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
              v24 = *(_DWORD *)(v2 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v2 + 216) + v24) = v23;
            *(_DWORD *)(v2 + 360) += 4;
            JSC::MacroAssemblerARM64::branch32(v2 + 160, 1u, 17, v12, (uint64_t)&v372);
            v25 = (int)v372;
            if ((_DWORD)v372 != -1)
            {
              v26 = HIDWORD(v376);
              if (HIDWORD(v376) == (_DWORD)v376)
              {
                v27 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v375, (void *)(HIDWORD(v376) + 1), (unint64_t)&v372);
                v29 = *(_DWORD *)v27;
                v28 = v27 + 4;
                v25 = v29;
                v26 = HIDWORD(v376);
              }
              else
              {
                v28 = (WTF **)((char *)&v372 + 4);
              }
              v30 = (char *)v375 + 12 * v26;
              *(_DWORD *)v30 = v25;
              *(_QWORD *)(v30 + 4) = *v28;
              ++HIDWORD(v376);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v401, v2 + 160);
          }
          else
          {
            if (!*(_BYTE *)(a1 + 372))
            {
              __break(0xC471u);
              JUMPOUT(0x19592E540);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
            v16 = *(_BYTE *)(a1 + 464) & 0x1F | 0x38404020;
            v17 = *(_DWORD *)(a1 + 360);
            if (v17 + 4 > *(_DWORD *)(a1 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
              v17 = *(_DWORD *)(v2 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v2 + 216) + v17) = v16;
            *(_DWORD *)(v2 + 360) += 4;
            JSC::MacroAssemblerARM64::branchTest32(v2 + 160, 1u, 17, 17, (uint64_t)&v389);
            v18 = (int)v389;
            if ((_DWORD)v389 != -1)
            {
              v19 = HIDWORD(v376);
              if (HIDWORD(v376) == (_DWORD)v376)
              {
                v20 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v375, (void *)(HIDWORD(v376) + 1), (unint64_t)&v389);
                v22 = *(_DWORD *)v20;
                v21 = v20 + 4;
                v18 = v22;
                v19 = HIDWORD(v376);
              }
              else
              {
                v21 = (WTF **)((char *)&v389 + 4);
              }
              v31 = (char *)v375 + 12 * v19;
              *(_DWORD *)v31 = v18;
              *(_QWORD *)(v31 + 4) = *v21;
              ++HIDWORD(v376);
            }
          }
        }
        v7 = *(_DWORD *)(v2 + 1144);
      }
      if (!v7)
      {
        v32 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v2 + 3160);
        v33 = (unsigned int *)(v2 + 160);
        if (*(_DWORD *)(v2 + 1148) == 1)
        {
          if ((_DWORD)v32)
          {
            if (!*(_BYTE *)(v2 + 372))
            {
              __break(0xC471u);
              JUMPOUT(0x19592DEDCLL);
            }
            JSC::MacroAssemblerARM64::moveToCachedReg(v33, v32, v2 + 424);
            v35 = (JSC::AssemblerBuffer *)(v2 + 216);
            v36 = (unsigned int *)(v2 + 360);
            v37 = *(_DWORD *)(v2 + 360);
            v38 = v37 + 4;
            v39 = *(_DWORD *)(v2 + 352);
            v34 = -1207959472;
          }
          else
          {
            v35 = (JSC::AssemblerBuffer *)(v2 + 216);
            v36 = (unsigned int *)(v2 + 360);
            v37 = *(_DWORD *)(v2 + 360);
            v38 = v37 + 4;
            v39 = *(_DWORD *)(v2 + 352);
            v34 = -1207959457;
          }
        }
        else if ((_DWORD)v32)
        {
          if (!*(_BYTE *)(v2 + 372))
          {
            __break(0xC471u);
            JUMPOUT(0x19592DCFCLL);
          }
          v34 = -1207959504;
          JSC::MacroAssemblerARM64::moveToCachedReg(v33, v32, v2 + 424);
          v35 = (JSC::AssemblerBuffer *)(v2 + 216);
          v36 = (unsigned int *)(v2 + 360);
          v37 = *(_DWORD *)(v2 + 360);
          v38 = v37 + 4;
          v39 = *(_DWORD *)(v2 + 352);
        }
        else
        {
          v35 = (JSC::AssemblerBuffer *)(v2 + 216);
          v36 = (unsigned int *)(v2 + 360);
          v37 = *(_DWORD *)(v2 + 360);
          v38 = v37 + 4;
          v39 = *(_DWORD *)(v2 + 352);
          v34 = -1207959489;
        }
        if (v38 > v39)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v35);
          v37 = *v36;
        }
        *(_DWORD *)(*(_QWORD *)v35 + v37) = v34;
        *v36 += 4;
      }
    }
    v362 = v6;
    v363 = v5;
    v367 = (uint64_t *)(v2 + 600);
    v40 = (uint64_t *)(v2 + 1152);
    WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements((uint32x2_t *)(v2 + 1152), 0);
    v42 = 0;
    v43 = (size_t *)(v2 + 496);
    v44 = *(_QWORD *)(v2 + 504);
    v45 = (char *)(v2 + 528);
    while (1)
    {
      v46 = *v43;
      if (*v43)
        break;
      v47 = *(unsigned int *)(v2 + 520);
      if (v44)
      {
        v48 = *(unsigned int *)(v2 + 520);
        if (v44 == v47 - 1)
          goto LABEL_66;
LABEL_59:
        v49 = v44;
        goto LABEL_60;
      }
      v48 = 0;
      v49 = 0;
      if (!*(_DWORD *)(v2 + 520))
      {
LABEL_66:
        __src = *(char **)(v2 + 512);
        v50 = v48 + (v48 >> 2);
        if (v50 < 0x10)
        {
          *(_QWORD *)(v2 + 512) = v45;
          *(_DWORD *)(v2 + 520) = 16;
          v52 = (char *)(v2 + 528);
        }
        else
        {
          if (v50 >= 0xFFFFFFFF)
          {
            __break(0xC471u);
            JUMPOUT(0x19592EE70);
          }
          v51 = v50 + 1;
          v52 = (char *)WTF::fastMalloc((WTF *)(v50 + 1));
          *(_DWORD *)(v2 + 520) = v51;
          *(_QWORD *)(v2 + 512) = v52;
          v46 = *(_QWORD *)(v2 + 496);
          v44 = *(_QWORD *)(v2 + 504);
        }
        if (v46 <= v44)
        {
          memcpy(&v52[v46], &__src[v46], v44 - v46);
        }
        else
        {
          memcpy(v52, __src, v44);
          v53 = *(_QWORD *)(v2 + 496);
          v54 = &__src[v48];
          v55 = v53 - v48 + *(unsigned int *)(v2 + 520);
          memcpy((void *)(*(_QWORD *)(v2 + 512) + v55), &__src[v53], v54 - &__src[v53]);
          *(_QWORD *)(v2 + 496) = v55;
        }
        if (v45 != __src && __src)
        {
          if (*(char **)(v2 + 512) == __src)
          {
            *(_QWORD *)(v2 + 512) = 0;
            *(_DWORD *)(v2 + 520) = 0;
          }
          WTF::fastFree((WTF *)__src, v41);
        }
        v49 = *(_QWORD *)(v2 + 504);
        v47 = *(unsigned int *)(v2 + 520);
      }
LABEL_60:
      *(_BYTE *)(*(_QWORD *)(v2 + 512) + v49) = WebCore::callerSavedRegisters[v42];
      if (v49 == v47 - 1)
        v44 = 0;
      else
        v44 = v49 + 1;
      *(_QWORD *)(v2 + 504) = v44;
      if (++v42 == 15)
      {
        if (*(_DWORD *)(v2 + 3156) < 9u)
        {
          v401 = (unsigned int *)v403;
          v403[0] = 7454;
          v402 = 0x200000002;
          if (*(_BYTE *)(v2 + 612))
          {
            __break(0xC471u);
            JUMPOUT(0x19592D6C0);
          }
          v389 = (WTF *)&v391;
          v390 = 16;
          v56 = *v367;
          v57 = *(_DWORD *)(*v367 + 200);
          if (v57 + 4 > *(_DWORD *)(*v367 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v56 + 56));
            v57 = *(_DWORD *)(v56 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v56 + 56) + v57) = -1447068675;
          *(_DWORD *)(v56 + 200) += 4;
          v58 = *(_DWORD *)(v2 + 608);
          *(_DWORD *)(v2 + 608) = v58 + 16;
          v59 = v58 + 8;
          LODWORD(v372) = v58 + 8;
          if (HIDWORD(v390) == (_DWORD)v390)
          {
            v343 = (_DWORD *)WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v389, (void *)(HIDWORD(v390) + 1), (unint64_t)&v372);
            v60 = v389;
            *((_DWORD *)v389 + HIDWORD(v390)) = *v343;
          }
          else
          {
            v60 = v389;
            *((_DWORD *)v389 + HIDWORD(v390)) = v59;
          }
          v61 = (HIDWORD(v390) + 1);
          HIDWORD(v390) = v61;
          v62 = *(_DWORD *)(v2 + 608);
          LODWORD(v372) = v62;
          if ((_DWORD)v61 == (_DWORD)v390)
          {
            v344 = (_DWORD *)WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v389, (void *)(v61 + 1), (unint64_t)&v372);
            *((_DWORD *)v389 + HIDWORD(v390)) = *v344;
          }
          else
          {
            *((_DWORD *)v60 + v61) = v62;
          }
          ++HIDWORD(v390);
          v63 = *(WTF **)(v2 + 80);
          if (v63 != (WTF *)(v2 + 96))
          {
            if (v63)
            {
              *(_QWORD *)(v2 + 80) = 0;
              *(_DWORD *)(v2 + 88) = 0;
              WTF::fastFree(v63, v41);
            }
            *(_QWORD *)(v2 + 80) = v2 + 96;
          }
          if (v389 == (WTF *)&v391)
          {
            v64 = HIDWORD(v390);
            if (HIDWORD(v390))
              memcpy((void *)(v2 + 96), &v391, 4 * HIDWORD(v390));
            v65 = v390;
          }
          else
          {
            *(_QWORD *)(v2 + 80) = v389;
            v65 = v390;
            v64 = HIDWORD(v390);
          }
          *(_DWORD *)(v2 + 88) = v65;
          *(_DWORD *)(v2 + 92) = v64;
          v66 = (WTF *)v401;
          if (v403 != (_WORD *)v401 && v401)
          {
            v401 = 0;
            LODWORD(v402) = 0;
            WTF::fastFree(v66, v41);
          }
          v389 = (WTF *)&v391;
          v390 = 16;
          v67 = *(_DWORD *)(v2 + 3152);
          if (v67 < 0x10)
          {
LABEL_94:
            LOBYTE(v401) = 0;
            v69 = *(_QWORD *)(v2 + 496);
            v68 = *(_QWORD *)(v2 + 504);
            if (v69 == v68)
            {
LABEL_100:
              __break(0xC471u);
              JUMPOUT(0x19592BD88);
            }
            v70 = *(_QWORD *)(v2 + 512);
            v71 = *(_QWORD *)(v2 + 496);
            while (*(_BYTE *)(v70 + v71))
            {
              v72 = *(unsigned int *)(v2 + 520);
              v71 += v72 + 1;
              do
                v71 -= v72;
              while (v71 >= v72);
              if (v68 == v71)
                goto LABEL_100;
            }
            if (v69 > v71)
            {
              memmove((void *)(v70 + v71), (const void *)(v70 + v71 + 1), v68 - (v71 + 1));
              *(_QWORD *)(v2 + 504) = (*(_QWORD *)(v2 + 504) + (unint64_t)*(unsigned int *)(v2 + 520) - 1)
                                    % *(unsigned int *)(v2 + 520);
            }
            else
            {
              memmove((void *)(v70 + v69 + 1), (const void *)(v70 + v69), v71 - v69);
              *(_QWORD *)(v2 + 496) = (*(_QWORD *)(v2 + 496) + 1) % (unint64_t)*(unsigned int *)(v2 + 520);
            }
            v74 = (_QWORD *)(v2 + 544);
            v75 = *(unsigned int *)(v2 + 556);
            if ((_DWORD)v75 == *(_DWORD *)(v2 + 552))
            {
              v345 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 544, (WTF *)(v75 + 1), (unint64_t)&v401);
              v75 = *(unsigned int *)(v2 + 556);
              *(_BYTE *)(*(_QWORD *)(v2 + 544) + v75) = *v345;
            }
            else
            {
              *(_BYTE *)(*v74 + v75) = 0;
            }
            *(_DWORD *)(v2 + 556) = v75 + 1;
            v76 = *(_DWORD *)(v2 + 608);
            if (*(_DWORD *)(v2 + 1148) == 1)
            {
              if (*(_BYTE *)(v2 + 612))
              {
                __break(0xC471u);
                JUMPOUT(0x19592DC8CLL);
              }
              v77 = *v367;
              v78 = *(_DWORD *)(*v367 + 200);
              if (v78 + 4 > *(_DWORD *)(*v367 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v77 + 56));
                v78 = *(_DWORD *)(v77 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v77 + 56) + v78) = -132182047;
              *(_DWORD *)(v77 + 200) += 4;
              v79 = *(_DWORD *)(v2 + 608) + 16;
              *(_DWORD *)(v2 + 608) = v79;
              *(_DWORD *)(v2 + 3172) = v79;
            }
            v80 = *(_DWORD *)(v2 + 3168);
            if (v80 == 1)
              v81 = *(_DWORD *)(v2 + 3156) + 2;
            else
              v81 = *(_DWORD *)(v2 + 3156);
            v401 = (unsigned int *)v403;
            v402 = 16;
            if (v81)
            {
              WebCore::StackAllocator::allocateUninitialized((WebCore::StackAllocator *)&v372, (uint64_t)v367, v81);
              WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((int **)&v401, &v372);
              v235 = v372;
              if (v374 != (_WORD *)v372 && v372)
              {
                v372 = 0;
                LODWORD(v373) = 0;
                WTF::fastFree(v235, v73);
              }
              v80 = *(_DWORD *)(v2 + 3168);
            }
            if (v80 == 1)
            {
              v236 = HIDWORD(v402);
              if (!HIDWORD(v402))
              {
                __break(0xC471u);
                JUMPOUT(0x19592EF88);
              }
              v237 = (int *)v401;
              *(_DWORD *)(v2 + 6880) = v401[HIDWORD(v402) - 1];
              HIDWORD(v402) = v236 - 1;
              if (v236 == 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EF90);
              }
              v238 = v237[v236 - 1 - 1];
              HIDWORD(v402) = v236 - 2;
              *(_DWORD *)(v2 + 6884) = v238;
              v239 = *(_DWORD *)(v2 + 608);
              v96 = v239 >= v238;
              v240 = v239 - v238;
              if (!v96)
              {
                __break(0xC471u);
                JUMPOUT(0x19592E9F8);
              }
              JSC::MacroAssemblerARM64::store64(v2 + 160, 0, (v240 << 32) | 0x1F);
              v241 = *(_DWORD *)(v2 + 6880);
              v242 = *(_DWORD *)(v2 + 608);
              v96 = v242 >= v241;
              v243 = v242 - v241;
              if (!v96)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EA18);
              }
              JSC::MacroAssemblerARM64::store64(v2 + 160, 63, (v243 << 32) | 0x1F);
            }
            if (&v401 != (unsigned int **)(v2 + 3184))
            {
              v82 = *(_DWORD *)(v2 + 3196);
              v83 = HIDWORD(v402);
              if (v82 > HIDWORD(v402))
              {
                *(_DWORD *)(v2 + 3196) = HIDWORD(v402);
                v82 = v83;
              }
              else if (HIDWORD(v402) > *(_DWORD *)(v2 + 3192))
              {
                WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF **)(v2 + 3184), v73);
                v285 = HIDWORD(v402);
                if (*(_DWORD *)(v2 + 3192) < HIDWORD(v402))
                {
                  v361 = *(WTF **)(v2 + 3184);
                  v286 = *(unsigned int *)(v2 + 3196);
                  if (HIDWORD(v402) < 0x11)
                  {
                    v287 = v2 + 3200;
                    *(_QWORD *)(v2 + 3184) = v2 + 3200;
                    *(_DWORD *)(v2 + 3192) = 16;
                  }
                  else
                  {
                    if (HIDWORD(v402) >> 30)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592EFC4);
                    }
                    v287 = WTF::fastMalloc((WTF *)(4 * HIDWORD(v402)));
                    *(_DWORD *)(v2 + 3192) = v285;
                    *(_QWORD *)(v2 + 3184) = v287;
                  }
                  if ((_DWORD)v286)
                  {
                    v339 = 4 * v286;
                    v340 = (_DWORD *)v287;
                    v341 = v361;
                    do
                    {
                      v342 = *(_DWORD *)v341;
                      v341 = (WTF *)((char *)v341 + 4);
                      *v340++ = v342;
                      v339 -= 4;
                    }
                    while (v339);
                  }
                  if ((WTF *)(v2 + 3200) != v361 && v361)
                  {
                    if ((WTF *)v287 == v361)
                    {
                      *(_QWORD *)(v2 + 3184) = 0;
                      *(_DWORD *)(v2 + 3192) = 0;
                    }
                    WTF::fastFree(v361, v284);
                  }
                }
                v82 = *(_DWORD *)(v2 + 3196);
              }
              v84 = (int *)v401;
              if (v82)
              {
                memmove(*(void **)(v2 + 3184), v401, 4 * v82);
                v82 = *(_DWORD *)(v2 + 3196);
                v84 = (int *)v401;
              }
              if (v82 != HIDWORD(v402))
              {
                v280 = (_DWORD *)(*(_QWORD *)(v2 + 3184) + 4 * v82);
                v281 = &v84[v82];
                v282 = 4 * HIDWORD(v402) - 4 * v82;
                do
                {
                  v283 = *v281++;
                  *v280++ = v283;
                  v282 -= 4;
                }
                while (v282);
                v82 = HIDWORD(v402);
              }
              *(_DWORD *)(v2 + 3196) = v82;
            }
            v369 = (WTF *)v371;
            v370 = 2;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateSelectorCheckerExcludingPseudoElements((WebCore::SelectorCompiler::SelectorCodeGenerator *)v2, &v369, v2 + 1152);
            if (*(_DWORD *)(v2 + 1144) != 1 && *(_DWORD *)(v2 + 1148) == 1)
            {
              if (!*(_DWORD *)(v2 + 1164))
              {
                __break(0xC471u);
                JUMPOUT(0x19592EF58);
              }
              v85 = *v40;
              if (*(_QWORD *)(*v40 + 480))
              {
                v86 = *(_QWORD *)(v2 + 496);
                v87 = *(_QWORD *)(v2 + 504);
                v88 = *(unsigned int *)(v2 + 520);
                if (v86 <= v87)
                  v89 = 0;
                else
                  v89 = *(unsigned int *)(v2 + 520);
                if (v89 + v87 == v86)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592DEFCLL);
                }
                if (v86 == v87)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592DF1CLL);
                }
                v90 = *(_QWORD *)(v2 + 512);
                v91 = *(unsigned __int8 *)(v90 + v86);
                LOBYTE(v372) = *(_BYTE *)(v90 + v86);
                if (v86 == v88 - 1)
                  v92 = 0;
                else
                  v92 = v86 + 1;
                *(_QWORD *)(v2 + 496) = v92;
                v93 = *(unsigned int *)(v2 + 556);
                if ((_DWORD)v93 == *(_DWORD *)(v2 + 552))
                {
                  v346 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 544, (WTF *)(v93 + 1), (unint64_t)&v372);
                  v347 = *(unsigned int *)(v2 + 556);
                  *(_BYTE *)(*(_QWORD *)(v2 + 544) + v347) = *v346;
                  v91 = v372;
                  v348 = *(_DWORD *)(v2 + 1148);
                  *(_DWORD *)(v2 + 556) = v347 + 1;
                  if (v348 != 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19592E958);
                  }
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)(v2 + 544) + v93) = v91;
                  *(_DWORD *)(v2 + 556) = v93 + 1;
                }
                v94 = *(_DWORD *)(v2 + 3172);
                v95 = *(_DWORD *)(v2 + 608);
                v96 = v95 >= v94;
                v97 = v95 - v94;
                if (!v96)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592DF3CLL);
                }
                v360 = v91;
                JSC::MacroAssemblerARM64::load64(v2 + 160, (v97 << 32) | 0x1F, v91);
                v372 = (WTF *)v374;
                v373 = 2;
                if (!*(_BYTE *)(v2 + 372))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592DF5CLL);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 456) + 208) &= ~*(_DWORD *)(v2 + 480);
                JSC::MacroAssemblerARM64::load8(v2 + 160, v91 | 0x400000000, *(_BYTE *)(v2 + 464));
                JSC::MacroAssemblerARM64::branchTest32(v2 + 160, 1u, 17, 17, (uint64_t)&v387);
                v98 = v387;
                if (v387 != -1)
                {
                  v99 = HIDWORD(v373);
                  if (HIDWORD(v373) == (_DWORD)v373)
                  {
                    v100 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v372, (void *)(HIDWORD(v373) + 1), (unint64_t)&v387);
                    v102 = *(_DWORD *)v100;
                    v101 = (uint64_t *)(v100 + 4);
                    v98 = v102;
                    v99 = HIDWORD(v373);
                  }
                  else
                  {
                    v101 = &v388;
                  }
                  v103 = (char *)v372 + 12 * v99;
                  *(_DWORD *)v103 = v98;
                  *(_QWORD *)(v103 + 4) = *v101;
                  ++HIDWORD(v373);
                }
                if (!*(_BYTE *)(v2 + 372))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592DF7CLL);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 456) + 208) &= ~*(_DWORD *)(v2 + 480);
                JSC::MacroAssemblerARM64::load8(v2 + 160, v91, *(_BYTE *)(v2 + 464));
                JSC::MacroAssemblerARM64::branch32(v2 + 160, 0, 17, 2, (uint64_t)&v385);
                v104 = v385;
                if (v385 != -1)
                {
                  v105 = HIDWORD(v373);
                  if (HIDWORD(v373) == (_DWORD)v373)
                  {
                    v106 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v372, (void *)(HIDWORD(v373) + 1), (unint64_t)&v385);
                    v108 = *(_DWORD *)v106;
                    v107 = (int *)(v106 + 4);
                    v104 = v108;
                    v105 = HIDWORD(v373);
                  }
                  else
                  {
                    v107 = &v386;
                  }
                  v109 = (char *)v372 + 12 * v105;
                  *(_DWORD *)v109 = v104;
                  *(_QWORD *)(v109 + 4) = *(_QWORD *)v107;
                  ++HIDWORD(v373);
                }
                v110 = **(unsigned int **)(v85 + 480);
                if ((v110 >> 9) <= 0x1Cu)
                  __asm { BR              X10 }
                if (!*(_BYTE *)(v2 + 372))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592DFF8);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 456) + 208) &= ~*(_DWORD *)(v2 + 480);
                JSC::MacroAssemblerARM64::load8(v2 + 160, v91, *(_BYTE *)(v2 + 464));
                JSC::MacroAssemblerARM64::branchTest32(v2 + 160, 1u, 17, 17, (uint64_t)&v383);
                v111 = v383;
                if (v383 != -1)
                {
                  v112 = HIDWORD(v370);
                  if (HIDWORD(v370) == (_DWORD)v370)
                  {
                    v113 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v369, (void *)(HIDWORD(v370) + 1), (unint64_t)&v383);
                    v115 = *(_DWORD *)v113;
                    v114 = (uint64_t *)(v113 + 4);
                    v111 = v115;
                    v112 = HIDWORD(v370);
                  }
                  else
                  {
                    v114 = &v384;
                  }
                  v116 = (char *)v369 + 12 * v112;
                  *(_DWORD *)v116 = v111;
                  *(_QWORD *)(v116 + 4) = *v114;
                  ++HIDWORD(v370);
                }
                if (!*(_BYTE *)(v2 + 372))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592E018);
                }
                JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)(v2 + 160), (JSC::ARM64LogicalImmediate *)1, v2 + 424);
                v118 = *(_DWORD *)(v2 + 360);
                if (v118 + 4 > *(_DWORD *)(v2 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                  v118 = *(_DWORD *)(v2 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 216) + v118) = (32 * (char)v91) | 0xB80D8010;
                *(_DWORD *)(v2 + 360) += 4;
                for (i = *(_DWORD *)(v2 + 360); i < *(_DWORD *)(v2 + 212); *(_DWORD *)(v2 + 360) = i)
                {
                  if ((i + 4) > *(_DWORD *)(v2 + 352))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                    i = *(_DWORD *)(v2 + 360);
                  }
                  *(_DWORD *)(*(_QWORD *)(v2 + 216) + i) = -721215457;
                  i = *(_DWORD *)(v2 + 360) + 4;
                }
                v120 = i;
                if ((i + 4) > *(_DWORD *)(v2 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                  v120 = *(_DWORD *)(v2 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 216) + v120) = 335544320;
                *(_DWORD *)(v2 + 360) += 4;
                if (*(_BYTE *)(v2 + 488))
                  v121 = 69;
                else
                  v121 = 65;
                v378 = i;
                v379 = 0;
                v380 = v121;
                v381 = 15;
                v382 = -1;
                if (i != -1)
                {
                  if (HIDWORD(v370) == (_DWORD)v370)
                  {
                    v122 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v369, (void *)(HIDWORD(v370) + 1), (unint64_t)&v378);
                    v124 = *(_DWORD *)v122;
                    v123 = (int *)(v122 + 4);
                    v125 = (char *)v369 + 12 * HIDWORD(v370);
                    *(_DWORD *)v125 = v124;
                  }
                  else
                  {
                    v123 = &v379;
                    v125 = (char *)v369 + 12 * HIDWORD(v370);
                    *(_DWORD *)v125 = i;
                  }
                  *(_QWORD *)(v125 + 4) = *(_QWORD *)v123;
                  ++HIDWORD(v370);
                }
                v126 = HIDWORD(v373);
                if (HIDWORD(v373))
                {
                  v127 = 0;
                  v128 = 0;
                  do
                  {
                    if (v128 >= HIDWORD(v373))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592EE28);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v372 + v127), v2 + 160);
                    ++v128;
                    v127 += 12;
                  }
                  while (v126 != v128);
                }
                v129 = v372;
                if (v374 != (_WORD *)v372 && v372 != 0)
                {
                  v372 = 0;
                  LODWORD(v373) = 0;
                  WTF::fastFree(v129, v117);
                }
                WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v2 + 496), v360);
              }
            }
            if (*(_DWORD *)(v2 + 3168) == 1)
            {
              v245 = *(_QWORD *)(v2 + 496);
              v244 = *(_QWORD *)(v2 + 504);
              v246 = *(unsigned int *)(v2 + 520);
              if (v245 <= v244)
                v247 = 0;
              else
                v247 = *(unsigned int *)(v2 + 520);
              if (v247 + v244 == v245)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EA38);
              }
              if (v245 == v244)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EA58);
              }
              v248 = *(_BYTE *)(*(_QWORD *)(v2 + 512) + v245);
              LOBYTE(v372) = v248;
              if (v245 == v246 - 1)
                v249 = 0;
              else
                v249 = v245 + 1;
              *(_QWORD *)(v2 + 496) = v249;
              v250 = *(unsigned int *)(v2 + 556);
              if ((_DWORD)v250 == *(_DWORD *)(v2 + 552))
              {
                v349 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 544, (WTF *)(v250 + 1), (unint64_t)&v372);
                v250 = *(unsigned int *)(v2 + 556);
                *(_BYTE *)(*(_QWORD *)(v2 + 544) + v250) = *v349;
                v248 = (char)v372;
              }
              else
              {
                *(_BYTE *)(*v74 + v250) = v248;
              }
              *(_DWORD *)(v2 + 556) = v250 + 1;
              v251 = *(_DWORD *)(v2 + 6880);
              v252 = *(_DWORD *)(v2 + 608);
              v96 = v252 >= v251;
              v253 = v252 - v251;
              if (!v96)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EA78);
              }
              v254 = v248;
              JSC::MacroAssemblerARM64::load64(v2 + 160, (v253 << 32) | 0x1F, v248);
              JSC::MacroAssemblerARM64::branchTest64(v2 + 160, 0, v254, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v385, v255);
              v256 = *(_QWORD *)(v2 + 496);
              v257 = *(_QWORD *)(v2 + 504);
              v258 = *(unsigned int *)(v2 + 520);
              if (v256 <= v257)
                v259 = 0;
              else
                v259 = *(unsigned int *)(v2 + 520);
              if (v259 + v257 == v256)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EA98);
              }
              if (v256 == v257)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EAB8);
              }
              v260 = *(_QWORD *)(v2 + 512);
              v261 = *(unsigned __int8 *)(v260 + v256);
              LOBYTE(v372) = *(_BYTE *)(v260 + v256);
              if (v256 == v258 - 1)
                v262 = 0;
              else
                v262 = v256 + 1;
              *(_QWORD *)(v2 + 496) = v262;
              v263 = *(unsigned int *)(v2 + 556);
              if ((_DWORD)v263 == *(_DWORD *)(v2 + 552))
              {
                v350 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 544, (WTF *)(v263 + 1), (unint64_t)&v372);
                v263 = *(unsigned int *)(v2 + 556);
                *(_BYTE *)(*(_QWORD *)(v2 + 544) + v263) = *v350;
                v261 = v372;
              }
              else
              {
                *(_BYTE *)(*v74 + v263) = v261;
              }
              *(_DWORD *)(v2 + 556) = v263 + 1;
              v264 = *(_DWORD *)(v2 + 6884);
              v265 = *(_DWORD *)(v2 + 608);
              v96 = v265 >= v264;
              v266 = v265 - v264;
              if (!v96)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EAD8);
              }
              JSC::MacroAssemblerARM64::load64(v2 + 160, (v266 << 32) | 0x1F, v261);
              for (j = *(_DWORD *)(v2 + 360); j < *(_DWORD *)(v2 + 212); *(_DWORD *)(v2 + 360) = j)
              {
                if ((j + 4) > *(_DWORD *)(v2 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                  j = *(_DWORD *)(v2 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 216) + j) = -721215457;
                j = *(_DWORD *)(v2 + 360) + 4;
              }
              *(_DWORD *)(v2 + 368) = 0;
              JSC::MacroAssemblerARM64::branch64(v2 + 160, 0, (char)v261, v254, (uint64_t)&v372);
              if (!*(_BYTE *)(v2 + 372))
              {
                __break(0xC471u);
                JUMPOUT(0x19592EAF8);
              }
              *(_DWORD *)(*(_QWORD *)(v2 + 456) + 208) &= ~*(_DWORD *)(v2 + 480);
              JSC::MacroAssemblerARM64::load16(v2 + 160, v261 | 0x1E00000000, *(_BYTE *)(v2 + 464));
              JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, v2 + 160, 1u, 17, (uint64_t)&v387, v268);
              v269 = v387;
              if (v387 != -1)
              {
                v270 = HIDWORD(v370);
                if (HIDWORD(v370) == (_DWORD)v370)
                {
                  v271 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v369, (void *)(HIDWORD(v370) + 1), (unint64_t)&v387);
                  v273 = *(_DWORD *)v271;
                  v272 = (uint64_t *)(v271 + 4);
                  v269 = v273;
                  v270 = HIDWORD(v370);
                }
                else
                {
                  v272 = &v388;
                }
                v274 = (char *)v369 + 12 * v270;
                *(_DWORD *)v274 = v269;
                *(_QWORD *)(v274 + 4) = *v272;
                ++HIDWORD(v370);
              }
              JSC::MacroAssemblerARM64::load64(v2 + 160, v261 | 0x2000000000, v261);
              v383 = j;
              JSC::MacroAssembler::jump(v2 + 160, &v383);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v372, v2 + 160);
              WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v2 + 496), v261);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v385, v2 + 160);
              WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v2 + 496), v254);
            }
            WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v2 + 496), 0);
            v131 = *(_DWORD *)(v2 + 360);
            if (v131 + 4 > *(_DWORD *)(v2 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
              v131 = *(_DWORD *)(v2 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v2 + 216) + v131) = 838861792;
            v132 = *(_DWORD *)(v2 + 360) + 4;
            *(_DWORD *)(v2 + 360) = v132;
            if (HIDWORD(v370))
            {
              for (; (signed int)v132 < *(_DWORD *)(v2 + 212); *(_DWORD *)(v2 + 360) = v132)
              {
                if (v132 + 4 > *(_DWORD *)(v2 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                  v132 = *(_DWORD *)(v2 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 216) + v132) = -721215457;
                v132 = *(_DWORD *)(v2 + 360) + 4;
              }
              v133 = v132;
              if (v132 + 4 > *(_DWORD *)(v2 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                v133 = *(_DWORD *)(v2 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(v2 + 216) + v133) = 335544320;
              v134 = *(_DWORD *)(v2 + 360) + 4;
              *(_DWORD *)(v2 + 360) = v134;
              if (*(_BYTE *)(v2 + 488))
                v135 = 69;
              else
                v135 = 65;
              v372 = (WTF *)v132;
              LOBYTE(v373) = v135;
              *(_WORD *)((char *)&v373 + 1) = 15;
              BYTE3(v373) = -1;
              v136 = HIDWORD(v370);
              if (HIDWORD(v370))
              {
                v137 = 0;
                v138 = 0;
                do
                {
                  if (v138 >= HIDWORD(v370))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19592ECC4);
                  }
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v369 + v137), v2 + 160);
                  ++v138;
                  v137 += 12;
                }
                while (v136 != v138);
                v134 = *(_DWORD *)(v2 + 360);
              }
              if (v134 + 4 > *(_DWORD *)(v2 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                v134 = *(_DWORD *)(v2 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(v2 + 216) + v134) = 1384120320;
              *(_DWORD *)(v2 + 360) += 4;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v372, v2 + 160);
            }
            v139 = *(_DWORD *)(v2 + 608);
            v140 = v139 - v76;
            if (v139 != v76)
            {
              if (v139 <= v76)
              {
                __break(0xC471u);
                JUMPOUT(0x19592DCACLL);
              }
              JSC::MacroAssemblerARM64::add64(*(_QWORD *)(v2 + 600), v139 - v76, 31, 31);
              v76 = *(_DWORD *)(v2 + 608) - v140;
              *(_DWORD *)(v2 + 608) = v76;
            }
            if (v67 < 0x10)
            {
LABEL_206:
              v141 = *(_DWORD **)(v2 + 600);
              v142 = *(unsigned __int8 *)(v2 + 612);
              v372 = (WTF *)v374;
              v374[0] = 7454;
              v373 = 0x200000002;
              if (v142)
              {
                __break(0xC471u);
                JUMPOUT(0x19592D700);
              }
              if (*(_DWORD *)(v2 + 92) != 2)
              {
                __break(0xC471u);
                JUMPOUT(0x19592D78CLL);
              }
              v143 = *(_DWORD **)(v2 + 80);
              if (v143[1] != v76)
              {
                __break(0xC471u);
                JUMPOUT(0x19592D7ACLL);
              }
              if (*v143 != v76 - 8)
              {
                __break(0xC471u);
                JUMPOUT(0x19592D7CCLL);
              }
              if (v76 <= 0xF)
              {
                __break(0xC471u);
                JUMPOUT(0x19592D7ECLL);
              }
              v144 = v141[50];
              if (v144 + 4 > v141[48])
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v141 + 14));
                v144 = v141[50];
              }
              *(_DWORD *)(*((_QWORD *)v141 + 7) + v144) = -1463714819;
              v141[50] += 4;
              v145 = v372;
              if (v374 != (_WORD *)v372 && v372)
              {
                v372 = 0;
                LODWORD(v373) = 0;
                WTF::fastFree(v145, v41);
              }
              v146 = *(_DWORD *)(v2 + 360);
              if (v146 + 4 > *(_DWORD *)(v2 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                v146 = *(_DWORD *)(v2 + 360);
              }
              v147 = v76 - 16;
              *(_DWORD *)(*(_QWORD *)(v2 + 216) + v146) = -698416192;
              *(_DWORD *)(v2 + 360) += 4;
              v148 = HIDWORD(v376);
              if (HIDWORD(v376))
              {
                v150 = 0;
                v151 = 0;
                do
                {
                  if (v151 >= HIDWORD(v376))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19592EDA0);
                  }
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v375 + v150), v2 + 160);
                  ++v151;
                  v150 += 12;
                }
                while (v148 != v151);
                v152 = *(_DWORD *)(v2 + 360);
                if (v152 + 4 > *(_DWORD *)(v2 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                  v152 = *(_DWORD *)(v2 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 216) + v152) = 1384120320;
                v153 = *(_DWORD *)(v2 + 360);
                v154 = v153 + 4;
                *(_DWORD *)(v2 + 360) = v153 + 4;
                v149 = v363;
                if ((v153 + 8) > *(_DWORD *)(v2 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
                  v154 = *(_DWORD *)(v2 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(v2 + 216) + v154) = -698416192;
                *(_DWORD *)(v2 + 360) += 4;
                if (v147 != v363)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D82CLL);
                }
                if (v362)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D84CLL);
                }
              }
              else
              {
                v149 = v147;
                if (v364 != v141)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592C63CLL);
                }
              }
              *(_DWORD *)(v2 + 608) = v149;
              *(_BYTE *)(v2 + 612) = 0;
              v155 = v369;
              if (v371 != (_BYTE *)v369 && v369)
              {
                v369 = 0;
                LODWORD(v370) = 0;
                WTF::fastFree(v155, v41);
              }
              v156 = (WTF *)v401;
              if (v403 != (_WORD *)v401 && v401)
              {
                v401 = 0;
                LODWORD(v402) = 0;
                WTF::fastFree(v156, v41);
              }
              v157 = v389;
              if (&v391 != (uint64_t *)v389 && v389)
              {
                v389 = 0;
                LODWORD(v390) = 0;
                WTF::fastFree(v157, v41);
              }
              v158 = 0;
              v159 = 0;
              goto LABEL_234;
            }
            v288 = (WTF *)*(unsigned int *)(v2 + 588);
            v372 = (WTF *)v374;
            LODWORD(v373) = 1;
            HIDWORD(v373) = (_DWORD)v288;
            if (v288 < 2)
            {
              v289 = (WTF *)v374;
            }
            else
            {
              v289 = (WTF *)WTF::fastMalloc(v288);
              LODWORD(v373) = (_DWORD)v288;
              v372 = v289;
              LODWORD(v288) = *(_DWORD *)(v2 + 588);
            }
            memcpy(v289, *(const void **)(v2 + 576), v288);
            if (*(_DWORD *)(v2 + 584))
            {
              if (*(_DWORD *)(v2 + 588))
                *(_DWORD *)(v2 + 588) = 0;
              v290 = *(WTF **)(v2 + 576);
              if ((WTF *)(v2 + 592) == v290)
              {
                if (!v290)
                  goto LABEL_588;
              }
              else if (!v290
                     || (*(_QWORD *)(v2 + 576) = 0,
                         *(_DWORD *)(v2 + 584) = 0,
                         WTF::fastFree(v290, v41),
                         !*(_QWORD *)(v2 + 576)))
              {
LABEL_588:
                *(_QWORD *)(v2 + 576) = v2 + 592;
                *(_DWORD *)(v2 + 584) = 1;
              }
            }
            if (*(_BYTE *)(v2 + 612))
            {
              __break(0xC471u);
              JUMPOUT(0x19592EC0CLL);
            }
            v291 = HIDWORD(v373);
            if (HIDWORD(v390) != HIDWORD(v373))
            {
              __break(0xC471u);
              JUMPOUT(0x19592EC2CLL);
            }
            if ((v373 & 0x100000000) != 0)
              WebCore::StackAllocator::pop(v367, *((_DWORD *)v389 + (HIDWORD(v373) - 1)), *((_BYTE *)v372 + (HIDWORD(v373) - 1)));
            if ((v291 & 0xFFFFFFFE) != 0)
            {
              v292 = (v291 & 0xFFFFFFFE) - 1;
              do
              {
                if (HIDWORD(v390) <= v292)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592EF70);
                }
                v293 = v292;
                v294 = *((_DWORD *)v389 + v292);
                if (v294 != *(_DWORD *)(v2 + 608))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592E978);
                }
                v295 = v292 - 1;
                if (HIDWORD(v390) <= v295)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592EF78);
                }
                if (*((_DWORD *)v389 + v295) != v294 - 8)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592E998);
                }
                if (v294 <= 0xF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592E9B8);
                }
                *(_DWORD *)(v2 + 608) = v294 - 16;
                if (HIDWORD(v373) <= v293)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592EF60);
                }
                if (HIDWORD(v373) <= v295)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592EF68);
                }
                v296 = *(_DWORD **)(v2 + 600);
                v297 = *((unsigned __int8 *)v372 + v293);
                v298 = *((_BYTE *)v372 + v295);
                v299 = v296[50];
                if (v299 + 4 > v296[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v296 + 14));
                  v299 = v296[50];
                }
                *(_DWORD *)(*((_QWORD *)v296 + 7) + v299) = v297 & 0xFFFF83FF | ((v298 & 0x1F) << 10) | 0xA8C103E0;
                v296[50] += 4;
                v292 = v293 - 2;
              }
              while ((_DWORD)v293 != 1);
            }
            v300 = v372;
            if (v374 != (_WORD *)v372 && v372)
            {
              v372 = 0;
              LODWORD(v373) = 0;
              WTF::fastFree(v300, v41);
            }
            v76 = *(_DWORD *)(v2 + 608);
            goto LABEL_206;
          }
          if (v67 - 17 <= 0xFFFFFFFD)
          {
            __break(0xC471u);
            JUMPOUT(0x19592EBACLL);
          }
          if (*(_DWORD *)(v2 + 588))
          {
            __break(0xC471u);
            JUMPOUT(0x19592EBCCLL);
          }
          v278 = (_BYTE **)(v2 + 576);
          LOBYTE(v401) = 19;
          if (*(_DWORD *)(v2 + 584))
          {
            **v278 = 19;
            v279 = 1;
          }
          else
          {
            v313 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 576, (WTF *)1, (unint64_t)&v401);
            v314 = *(unsigned int *)(v2 + 588);
            *(_BYTE *)(*(_QWORD *)(v2 + 576) + v314) = *v313;
            v279 = v314 + 1;
          }
          *(_DWORD *)(v2 + 588) = v279;
          v316 = *(_QWORD *)(v2 + 496);
          v315 = *(_QWORD *)(v2 + 504);
          if (v316)
          {
            LODWORD(v317) = *(_DWORD *)(v2 + 520);
            if (v315 + 1 == v316)
              goto LABEL_709;
          }
          else
          {
            v317 = *(unsigned int *)(v2 + 520);
            if (v315)
            {
              if (v315 == v317 - 1)
              {
LABEL_709:
                v351 = v317;
                v352 = *(char **)(v2 + 512);
                v353 = ((unint64_t)v317 >> 2) + v317;
                if (v353 < 0x10)
                {
                  *(_QWORD *)(v2 + 512) = v45;
                  *(_DWORD *)(v2 + 520) = 16;
                  v355 = (char *)(v2 + 528);
                }
                else
                {
                  if (v353 >= 0xFFFFFFFF)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19592EFCCLL);
                  }
                  v354 = v353 + 1;
                  v355 = (char *)WTF::fastMalloc((WTF *)(v353 + 1));
                  *(_DWORD *)(v2 + 520) = v354;
                  *(_QWORD *)(v2 + 512) = v355;
                  v316 = *(_QWORD *)(v2 + 496);
                  v315 = *(_QWORD *)(v2 + 504);
                }
                if (v316 <= v315)
                {
                  memcpy(&v355[v316], &v352[v316], v315 - v316);
                }
                else
                {
                  memcpy(v355, v352, v315);
                  v357 = *(_QWORD *)(v2 + 496);
                  v358 = v357 - v351 + *(unsigned int *)(v2 + 520);
                  memcpy((void *)(*(_QWORD *)(v2 + 512) + v358), &v352[v357], v351 - v357);
                  *(_QWORD *)(v2 + 496) = v358;
                }
                if (v45 != v352 && v352)
                {
                  if (*(char **)(v2 + 512) == v352)
                  {
                    *(_QWORD *)(v2 + 512) = 0;
                    *(_DWORD *)(v2 + 520) = 0;
                  }
                  WTF::fastFree((WTF *)v352, v359);
                }
                v315 = *(_QWORD *)(v2 + 504);
                LODWORD(v317) = *(_DWORD *)(v2 + 520);
              }
            }
            else
            {
              if (!(_DWORD)v317)
                goto LABEL_709;
              v315 = 0;
            }
          }
          *(_BYTE *)(*(_QWORD *)(v2 + 512) + v315) = (_BYTE)v401;
          if (v315 == v317 - 1)
            v318 = 0;
          else
            v318 = v315 + 1;
          *(_QWORD *)(v2 + 504) = v318;
          if (*(_BYTE *)(v2 + 612))
          {
            __break(0xC471u);
            JUMPOUT(0x19592EBECLL);
          }
          v401 = (unsigned int *)v403;
          v402 = 16;
          __srca = *(_DWORD *)(v2 + 588);
          if (__srca)
          {
            v319 = *(_DWORD *)(v2 + 588);
            v320 = __srca - 1;
            if (__srca == 1)
              goto LABEL_652;
            v321 = 0;
            do
            {
              if (*(_DWORD *)(v2 + 588) <= v321 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EF80);
              }
              v322 = *v367;
              v323 = (*v278)[v321 + 1];
              v324 = (*v278)[v321];
              v325 = *(_DWORD *)(*v367 + 200);
              if (v325 + 4 > *(_DWORD *)(*v367 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v322 + 56));
                v325 = *(_DWORD *)(v322 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v322 + 56) + v325) = v323 & 0xFFFF83FF | ((v324 & 0x1F) << 10) | 0xA9BF03E0;
              *(_DWORD *)(v322 + 200) += 4;
              v326 = *(_DWORD *)(v2 + 608);
              *(_DWORD *)(v2 + 608) = v326 + 16;
              v327 = v326 + 8;
              LODWORD(v372) = v326 + 8;
              if (HIDWORD(v402) == (_DWORD)v402)
              {
                v331 = (int *)WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v401, (void *)(HIDWORD(v402) + 1), (unint64_t)&v372);
                v328 = (int *)v401;
                v401[HIDWORD(v402)] = *v331;
              }
              else
              {
                v328 = (int *)v401;
                v401[HIDWORD(v402)] = v327;
              }
              v329 = (HIDWORD(v402) + 1);
              HIDWORD(v402) = v329;
              v330 = *(_DWORD *)(v2 + 608);
              LODWORD(v372) = v330;
              if ((_DWORD)v329 == (_DWORD)v402)
              {
                v332 = (int *)WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v401, (void *)(v329 + 1), (unint64_t)&v372);
                v401[HIDWORD(v402)] = *v332;
              }
              else
              {
                v328[v329] = v330;
              }
              ++HIDWORD(v402);
              v321 += 2;
            }
            while (v321 < v320);
            if ((__srca & 1) != 0)
            {
              v319 = *(_DWORD *)(v2 + 588);
LABEL_652:
              if (v319 <= v320)
              {
                __break(0xC471u);
                JUMPOUT(0x19592EFBCLL);
              }
              if (*(_BYTE *)(v2 + 612))
              {
                __break(0xC471u);
                JUMPOUT(0x19592ECACLL);
              }
              v333 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 576) + v320);
              v334 = *v367;
              v335 = *(_DWORD *)(*v367 + 200);
              if (v335 + 4 > *(_DWORD *)(*v367 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v334 + 56));
                v335 = *(_DWORD *)(v334 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v334 + 56) + v335) = v333 | 0xF81F0FE0;
              *(_DWORD *)(v334 + 200) += 4;
              v336 = *(_DWORD *)(v2 + 608) + 16;
              *(_DWORD *)(v2 + 608) = v336;
              LODWORD(v372) = v336;
              if (HIDWORD(v402) == (_DWORD)v402)
              {
                v356 = (int *)WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v401, (void *)(HIDWORD(v402) + 1), (unint64_t)&v372);
                v401[HIDWORD(v402)] = *v356;
              }
              else
              {
                v401[HIDWORD(v402)] = v336;
              }
              ++HIDWORD(v402);
            }
          }
          WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((int **)&v389, &v401);
          v338 = (WTF *)v401;
          if (v403 != (_WORD *)v401 && v401)
          {
            v401 = 0;
            LODWORD(v402) = 0;
            WTF::fastFree(v338, v337);
          }
          goto LABEL_94;
        }
        v275 = *(_DWORD *)(v2 + 360);
        if (v275 + 4 > *(_DWORD *)(v2 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
          v275 = *(_DWORD *)(v2 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(v2 + 216) + v275) = 1384120320;
        v276 = *(_DWORD *)(v2 + 360);
        v277 = v276 + 4;
        *(_DWORD *)(v2 + 360) = v276 + 4;
        if ((v276 + 8) > *(_DWORD *)(v2 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
          v277 = *(_DWORD *)(v2 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(v2 + 216) + v277) = -698416192;
        *(_DWORD *)(v2 + 360) += 4;
        v159 = v6;
        v158 = v5;
LABEL_234:
        a1 = (uint64_t)v375;
        if (v377 != (_BYTE *)v375 && v375)
        {
          v375 = 0;
          LODWORD(v376) = 0;
          a1 = WTF::fastFree((WTF *)a1, v41);
        }
        if (v158)
        {
          __break(0xC471u);
          JUMPOUT(0x19592D86CLL);
        }
        if (v159)
        {
          __break(0xC471u);
          JUMPOUT(0x19592D88CLL);
        }
LABEL_239:
        v389 = 0;
        v390 = 0;
        v391 = -2;
        v392 = (WTF *)v393;
        v394 = 128;
        v160 = (pthread_key_t *)JSC::threadSpecificAssemblerData((JSC *)a1);
        v162 = (uint64_t)pthread_getspecific(*v160);
        if (!v162)
        {
          v162 = WTF::fastMalloc((WTF *)0x98);
          WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v162, v160);
        }
        v163 = *(WTF **)v162;
        if (*(_QWORD *)v162 != v162 + 8)
        {
          v164 = *(_DWORD *)(v162 + 136);
          if (v394 < v164)
          {
            if (v392 && v392 != (WTF *)v393)
            {
              WTF::fastFree(v392, v161);
              v163 = *(WTF **)v162;
              v164 = *(_DWORD *)(v162 + 136);
            }
            v392 = v163;
            v394 = v164;
            *(_QWORD *)v162 = v162 + 8;
            *(_DWORD *)(v162 + 136) = 128;
          }
        }
        v4 = 1;
        v395 = 1;
        v396 = 0;
        v397 = 17;
        v398 = 0u;
        v399 = 0u;
        v400 = 0;
        JumpIslandToUsingJITMemcpy = (JSC *)JSC::LinkBuffer::linkCode();
        if ((_BYTE)v396)
        {
          v167 = MEMORY[0x1E0CC10F8];
          if (*(_DWORD *)(v2 + 628))
          {
            v168 = 0;
            for (k = 0; k < *(unsigned int *)(v2 + 628); ++k)
            {
              v170 = *(_QWORD *)(v2 + 616) + v168;
              v171 = *(_DWORD *)v170;
              if (*(int *)v170 < 4)
                v172 = 0;
              else
                v172 = *(_DWORD *)((char *)v392 + (v171 & 0xFFFFFFFC) - 4);
              v173 = *(_DWORD *)(v170 + 4);
              v174 = *(_QWORD *)(v170 + 8);
              v175 = v171 - v172;
              if ((v173 & 2) != 0)
              {
                v180 = (JSC *)(v398 + v175);
                if ((v173 & 4) != 0)
                {
                  if (*(_DWORD *)v180 != -721215457)
                    goto LABEL_371;
                  v186 = (unsigned int *)((char *)v180 - 4);
                  v185 = *((_DWORD *)v180 - 1);
                  v187 = (int)(v185 << 8) >> 13;
                  if (v185 >> 25 == 42)
                  {
                    v188 = v187 == 8;
                    if (v186 != (unsigned int *)(((unint64_t)v180 - 1) & 0xFFFFFFFFFFFFFFFCLL))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592D614);
                    }
                    v189 = *((_DWORD *)v180 - 1) & 0xF ^ v188;
                    if ((unint64_t)(((uint64_t)(v174 - (_QWORD)v186) >> 2) + 0x40000) >> 19)
                    {
                      v195 = v189 ^ 0x41 | 0x54000000;
                      LODWORD(v401) = v195;
                      if (*(_QWORD *)(v167 + 504) > (unint64_t)v186
                        || *(_QWORD *)(v167 + 512) <= (unint64_t)v186)
                      {
                        goto LABEL_405;
                      }
                      if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592D8DCLL);
                      }
                      v196 = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                      if (v196 < v180)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592D8FCLL);
                      }
                      if (*(_QWORD *)(v167 + 1864))
                        v196 = (JSC *)JSC::dumpJITMemory((JSC *)((char *)v180 - 4), &v401, (const void *)4);
                      if (*(_BYTE *)(v167 + 484))
                        goto LABEL_370;
                      if (!*(_QWORD *)(v167 + 552))
                        goto LABEL_404;
                      v210 = JSC::startOfFixedExecutableMemoryPoolImpl(v196);
                      (*(void (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v186 - v210, &v401, 4);
                      if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592EC8CLL);
                      }
                      goto LABEL_371;
                    }
                    v190 = v189 & 0xFF00001F | (32 * (((v174 - (_DWORD)v186) >> 2) & 0x7FFFF)) | 0x54000000;
                    LODWORD(v401) = v190;
                    if (*(_QWORD *)(v167 + 504) <= (unint64_t)v186
                      && *(_QWORD *)(v167 + 512) > (unint64_t)v186)
                    {
                      if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592D8BCLL);
                      }
                      JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                      if (JumpIslandToUsingJITMemcpy < v180)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592D91CLL);
                      }
                      if (*(_QWORD *)(v167 + 1864))
                        JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory((JSC *)((char *)v180 - 4), &v401, (const void *)4);
                      if (*(_BYTE *)(v167 + 484))
                      {
                        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
                        *v186 = v401;
                        JumpIslandToUsingJITMemcpy = (JSC *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
LABEL_286:
                        LODWORD(v401) = -721215457;
                        if (v180 != (JSC *)(((unint64_t)v180 + 3) & 0xFFFFFFFFFFFFFFFCLL))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592D93CLL);
                        }
                        v191 = -721215457;
                        if (*(_QWORD *)(v167 + 504) > (unint64_t)v180
                          || *(_QWORD *)(v167 + 512) <= (unint64_t)v180)
                        {
                          goto LABEL_416;
                        }
                        if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592D95CLL);
                        }
                        JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                        if ((JSC *)((char *)v180 + 4) > JumpIslandToUsingJITMemcpy)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592D97CLL);
                        }
                        if (*(_QWORD *)(v167 + 1864))
                          JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory(v180, &v401, (const void *)4);
                        if (!*(_BYTE *)(v167 + 484))
                        {
                          if (*(_QWORD *)(v167 + 552))
                          {
                            v211 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                            JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v180 - v211, &v401, 4);
                            if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19592EC6CLL);
                            }
                            goto LABEL_372;
                          }
                          goto LABEL_415;
                        }
LABEL_348:
                        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
                        *(_DWORD *)v180 = (_DWORD)v401;
                        JumpIslandToUsingJITMemcpy = (JSC *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
                        goto LABEL_372;
                      }
                      if (*(_QWORD *)(v167 + 552))
                      {
                        v209 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                        JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v186 - v209, &v401, 4);
                        if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592EC4CLL);
                        }
                        goto LABEL_286;
                      }
                      v190 = v401;
                    }
                    *v186 = v190;
                    goto LABEL_286;
                  }
                  if ((v185 & 0x7E000000) != 0x36000000)
                  {
                    if ((v185 & 0x7E000000) != 0x34000000)
                      goto LABEL_371;
                    if (v186 != (unsigned int *)(((unint64_t)v180 - 1) & 0xFFFFFFFFFFFFFFFCLL))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592DC4CLL);
                    }
                    v192 = (v187 != 8) ^ ((v185 & 0x1000000) >> 24);
                    if ((unint64_t)(((uint64_t)(v174 - (_QWORD)v186) >> 2) + 0x40000) >> 19)
                    {
                      if (v192)
                        v201 = 889192512;
                      else
                        v201 = 872415296;
                      v195 = v201 | v185 & 0x8000001F;
                      LODWORD(v401) = v195;
                      if (*(_QWORD *)(v167 + 504) <= (unint64_t)v186
                        && *(_QWORD *)(v167 + 512) > (unint64_t)v186)
                      {
                        if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592DD5CLL);
                        }
                        v202 = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                        if (v202 < v180)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592DDBCLL);
                        }
                        if (*(_QWORD *)(v167 + 1864))
                          v202 = (JSC *)JSC::dumpJITMemory((JSC *)((char *)v180 - 4), &v401, (const void *)4);
                        if (*(_BYTE *)(v167 + 484))
                          goto LABEL_370;
                        if (*(_QWORD *)(v167 + 552))
                        {
                          v214 = JSC::startOfFixedExecutableMemoryPoolImpl(v202);
                          (*(void (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v186 - v214, &v401, 4);
                          if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19592ECF8);
                          }
                          goto LABEL_371;
                        }
LABEL_404:
                        v195 = v401;
                      }
LABEL_405:
                      *v186 = v195;
LABEL_371:
                      JumpIslandToUsingJITMemcpy = JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)0,(JSC::MachineCodeCopyMode)1>(v180, v180, (_BYTE *)v174);
                      goto LABEL_372;
                    }
                    if (v192)
                      v193 = 872415232;
                    else
                      v193 = 889192448;
                    v194 = v185 & 0x8000001F | (32 * (((v174 - (_DWORD)v186) >> 2) & 0x7FFFF)) | v193;
                    LODWORD(v401) = v194;
                    if (*(_QWORD *)(v167 + 504) <= (unint64_t)v186
                      && *(_QWORD *)(v167 + 512) > (unint64_t)v186)
                    {
                      if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592DD1CLL);
                      }
                      JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                      if (JumpIslandToUsingJITMemcpy < v180)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592DDFCLL);
                      }
                      if (*(_QWORD *)(v167 + 1864))
                        JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory((JSC *)((char *)v180 - 4), &v401, (const void *)4);
                      if (*(_BYTE *)(v167 + 484))
                      {
                        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
                        *v186 = v401;
                        JumpIslandToUsingJITMemcpy = (JSC *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
                        goto LABEL_310;
                      }
                      if (*(_QWORD *)(v167 + 552))
                      {
                        v212 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                        JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v186 - v212, &v401, 4);
                        if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592ED18);
                        }
LABEL_310:
                        LODWORD(v401) = -721215457;
                        if (v180 != (JSC *)(((unint64_t)v180 + 3) & 0xFFFFFFFFFFFFFFFCLL))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592DE1CLL);
                        }
                        v191 = -721215457;
                        if (*(_QWORD *)(v167 + 504) > (unint64_t)v180
                          || *(_QWORD *)(v167 + 512) <= (unint64_t)v180)
                        {
                          goto LABEL_416;
                        }
                        if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592DE5CLL);
                        }
                        JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                        if ((JSC *)((char *)v180 + 4) > JumpIslandToUsingJITMemcpy)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592DE9CLL);
                        }
                        if (*(_QWORD *)(v167 + 1864))
                          JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory(v180, &v401, (const void *)4);
                        if (!*(_BYTE *)(v167 + 484))
                        {
                          if (*(_QWORD *)(v167 + 552))
                          {
                            v216 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                            JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v180 - v216, &v401, 4);
                            if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19592ED38);
                            }
                            goto LABEL_372;
                          }
                          goto LABEL_415;
                        }
                        goto LABEL_348;
                      }
                      v194 = v401;
                    }
                    *v186 = v194;
                    goto LABEL_310;
                  }
                  if (v186 != (unsigned int *)(((unint64_t)v180 - 1) & 0xFFFFFFFFFFFFFFFCLL))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19592DC6CLL);
                  }
                  v197 = (v185 >> 19) & 0x1F;
                  v198 = ((v185 & 0x7FFE0) != 256) ^ ((v185 & 0x1000000) >> 24);
                  if ((unint64_t)(((uint64_t)(v174 - (_QWORD)v186) >> 2) + 0x2000) >> 14)
                  {
                    if (v198)
                      v203 = 922746944;
                    else
                      v203 = 905969728;
                    v204 = *((_DWORD *)v180 - 1) & 0x80000000 | v203 & 0xFFFFFFE0 | (v197 << 19) | *((_DWORD *)v180 - 1) & 0x1F;
                    LODWORD(v401) = v204;
                    if (*(_QWORD *)(v167 + 504) <= (unint64_t)v186
                      && *(_QWORD *)(v167 + 512) > (unint64_t)v186)
                    {
                      if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592DD3CLL);
                      }
                      v205 = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                      if (v205 < v180)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592DDDCLL);
                      }
                      if (*(_QWORD *)(v167 + 1864))
                        v205 = (JSC *)JSC::dumpJITMemory((JSC *)((char *)v180 - 4), &v401, (const void *)4);
                      if (*(_BYTE *)(v167 + 484))
                      {
LABEL_370:
                        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
                        *v186 = v401;
                        be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
                        goto LABEL_371;
                      }
                      if (*(_QWORD *)(v167 + 552))
                      {
                        v215 = JSC::startOfFixedExecutableMemoryPoolImpl(v205);
                        (*(void (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v186 - v215, &v401, 4);
                        if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19592ED58);
                        }
                        goto LABEL_371;
                      }
                      v204 = v401;
                    }
                    *v186 = v204;
                    goto LABEL_371;
                  }
                  if (v198)
                    v199 = 905969664;
                  else
                    v199 = 922746880;
                  v200 = *((_DWORD *)v180 - 1) & 0x80000000 | v199 & 0xFFF80000 | (v197 << 19) | *((_DWORD *)v180 - 1) & 0x1F | (32 * (((v174 - (_DWORD)v186) >> 2) & 0x3FFF));
                  LODWORD(v401) = v200;
                  if (*(_QWORD *)(v167 + 504) <= (unint64_t)v186
                    && *(_QWORD *)(v167 + 512) > (unint64_t)v186)
                  {
                    if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592DD7CLL);
                    }
                    JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                    if (JumpIslandToUsingJITMemcpy < v180)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592DD9CLL);
                    }
                    if (*(_QWORD *)(v167 + 1864))
                      JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory((JSC *)((char *)v180 - 4), &v401, (const void *)4);
                    if (*(_BYTE *)(v167 + 484))
                    {
                      be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
                      *v186 = v401;
                      JumpIslandToUsingJITMemcpy = (JSC *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
                      goto LABEL_340;
                    }
                    if (*(_QWORD *)(v167 + 552))
                    {
                      v213 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                      JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v186 - v213, &v401, 4);
                      if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592ED78);
                      }
LABEL_340:
                      LODWORD(v401) = -721215457;
                      if (v180 != (JSC *)(((unint64_t)v180 + 3) & 0xFFFFFFFFFFFFFFFCLL))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592DE3CLL);
                      }
                      v191 = -721215457;
                      if (*(_QWORD *)(v167 + 504) > (unint64_t)v180
                        || *(_QWORD *)(v167 + 512) <= (unint64_t)v180)
                      {
                        goto LABEL_416;
                      }
                      if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592DE7CLL);
                      }
                      JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                      if ((JSC *)((char *)v180 + 4) > JumpIslandToUsingJITMemcpy)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19592DEBCLL);
                      }
                      if (*(_QWORD *)(v167 + 1864))
                        JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory(v180, &v401, (const void *)4);
                      if (!*(_BYTE *)(v167 + 484))
                      {
                        if (*(_QWORD *)(v167 + 552))
                        {
                          v217 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                          JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v180 - v217, &v401, 4);
                          if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19592ED98);
                          }
                          goto LABEL_372;
                        }
LABEL_415:
                        v191 = (int)v401;
LABEL_416:
                        *(_DWORD *)v180 = v191;
                        goto LABEL_372;
                      }
                      goto LABEL_348;
                    }
                    v200 = v401;
                  }
                  *v186 = v200;
                  goto LABEL_340;
                }
                v181 = (JSC *)((char *)v180 - 4);
                v182 = v174 - ((_QWORD)v180 - 4);
                if ((unint64_t)((v182 >> 2) + 0x2000000) >> 26)
                {
                  v183 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(JumpIslandToUsingJITMemcpy);
                  JumpIslandToUsingJITMemcpy = (JSC *)JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v183, (char *)v180 - 4, (void *)v174);
                  v182 = JumpIslandToUsingJITMemcpy - v181;
                  if ((unint64_t)(((JumpIslandToUsingJITMemcpy - v181) >> 2) + 0x2000000) >> 26)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19592D5D0);
                  }
                }
                v184 = (v182 >> 2) & 0x3FFFFFF | 0x94000000;
                LODWORD(v401) = v184;
                if (v181 != (JSC *)(((unint64_t)v180 - 1) & 0xFFFFFFFFFFFFFFFCLL))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D568);
                }
                if (*(_QWORD *)(v167 + 504) > (unint64_t)v181
                  || *(_QWORD *)(v167 + 512) <= (unint64_t)v181)
                {
                  goto LABEL_383;
                }
                if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D588);
                }
                JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                if (v180 > JumpIslandToUsingJITMemcpy)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D5A8);
                }
                if (*(_QWORD *)(v167 + 1864))
                  JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory((JSC *)((char *)v180 - 4), &v401, (const void *)4);
                if (!*(_BYTE *)(v167 + 484))
                {
                  if (*(_QWORD *)(v167 + 552))
                  {
                    v208 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                    JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v181 - v208, &v401, 4);
                    if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592EB6CLL);
                    }
                    goto LABEL_372;
                  }
                  v184 = (int)v401;
LABEL_383:
                  *(_DWORD *)v181 = v184;
                  goto LABEL_372;
                }
                be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
                *(_DWORD *)v181 = (_DWORD)v401;
                JumpIslandToUsingJITMemcpy = (JSC *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
              }
              else
              {
                v176 = (JSC *)(v398 + v175 - 16);
                v177 = *(_DWORD *)v176;
                v178 = *(_DWORD *)v176 & 0x1F | (32 * WORD1(v174)) | 0xF2A00000;
                LODWORD(v401) = *(_DWORD *)v176 & 0x1F | (32 * (unsigned __int16)v174) | 0xD2800000;
                HIDWORD(v401) = v178;
                LODWORD(v402) = (v174 >> 27) & 0x1FFFE0 | v177 & 0x1F | 0xF2C00000;
                if (v176 != (JSC *)(((unint64_t)v176 + 3) & 0xFFFFFFFFFFFFFFFCLL))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D500);
                }
                if (*(_QWORD *)(v167 + 504) > (unint64_t)v176
                  || *(_QWORD *)(v167 + 512) <= (unint64_t)v176)
                {
                  goto LABEL_378;
                }
                if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D520);
                }
                JumpIslandToUsingJITMemcpy = (JSC *)JSC::endOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                if ((JSC *)((char *)v176 + 12) > JumpIslandToUsingJITMemcpy)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19592D540);
                }
                if (*(_QWORD *)(v167 + 1864))
                  JumpIslandToUsingJITMemcpy = (JSC *)JSC::dumpJITMemory(v176, &v401, (const void *)0xC);
                if (!*(_BYTE *)(v167 + 484))
                {
                  if (*(_QWORD *)(v167 + 552))
                  {
                    v206 = JSC::startOfFixedExecutableMemoryPoolImpl(JumpIslandToUsingJITMemcpy);
                    JumpIslandToUsingJITMemcpy = (JSC *)(*(uint64_t (**)(char *, unsigned int **, uint64_t))(v167 + 552))((char *)v176 - v206, &v401, 12);
                    if ((unint64_t)&v401 - *(_QWORD *)(v167 + 40) < *(_QWORD *)(v167 + 48))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19592E9D8);
                    }
                    goto LABEL_372;
                  }
LABEL_378:
                  v207 = (int *)v401;
                  *((_DWORD *)v176 + 2) = v402;
                  *(_QWORD *)v176 = v207;
                  goto LABEL_372;
                }
                be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
                v179 = (int *)v401;
                *((_DWORD *)v176 + 2) = v402;
                *(_QWORD *)v176 = v179;
                JumpIslandToUsingJITMemcpy = (JSC *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
              }
LABEL_372:
              v168 += 16;
            }
          }
          if (*(_BYTE *)(v167 + 648) || *(_BYTE *)(v167 + 647) || *(_BYTE *)(v167 + 649))
          {
            JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl();
            v218 = (int *)v401;
            v219 = (unsigned int *)v402;
            if (v402)
            {
              do
                v233 = __ldaxr(v219);
              while (__stlxr(v233 + 1, v219));
              v221 = (unsigned int *)v402;
              v402 = 0;
              if (v221)
              {
                do
                {
                  v234 = __ldaxr(v221);
                  v223 = --v234 == 0;
                }
                while (__stlxr(v234, v221));
                goto LABEL_430;
              }
            }
          }
          else
          {
            JSC::LinkBuffer::finalizeCodeWithoutDisassemblyImpl();
            v218 = (int *)v401;
            v219 = (unsigned int *)v402;
            if (v402)
            {
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 + 1, v219));
              v221 = (unsigned int *)v402;
              v402 = 0;
              if (v221)
              {
                do
                {
                  v222 = __ldaxr(v221);
                  v223 = --v222 == 0;
                }
                while (__stlxr(v222, v221));
LABEL_430:
                if (v223)
                {
                  atomic_store(1u, v221);
                  v372 = (WTF *)v221;
                  WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v372);
                }
              }
            }
          }
          v224 = (unsigned int *)a2[1];
          *a2 = v218;
          a2[1] = (int *)v219;
          if (v224)
          {
            do
            {
              v225 = __ldaxr(v224);
              v226 = v225 - 1;
            }
            while (__stlxr(v226, v224));
            if (!v226)
            {
              atomic_store(1u, v224);
              v401 = v224;
              WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v401);
            }
          }
          if ((*(_DWORD *)(v2 + 1148) & 0xFFFFFFFD) != 0)
            v4 = 3;
          else
            v4 = 2;
        }
        if (HIDWORD(v400))
        {
          v301 = (unsigned int **)*((_QWORD *)&v399 + 1);
          v302 = *((_QWORD *)&v399 + 1) + 8 * HIDWORD(v400);
          do
          {
            v303 = *v301;
            *v301 = 0;
            if (v303)
            {
              v304 = v303 + 2;
              do
              {
                v305 = __ldaxr(v304);
                v306 = v305 - 1;
              }
              while (__stlxr(v306, v304));
              if (!v306)
              {
                atomic_store(1u, v303 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v303 + 8))(v303);
              }
            }
            ++v301;
          }
          while (v301 != (unsigned int **)v302);
        }
        v227 = (WTF *)*((_QWORD *)&v399 + 1);
        if (*((_QWORD *)&v399 + 1))
        {
          *((_QWORD *)&v399 + 1) = 0;
          LODWORD(v400) = 0;
          WTF::fastFree(v227, v166);
        }
        if (DWORD1(v399))
        {
          v307 = (unsigned int **)*((_QWORD *)&v398 + 1);
          v308 = *((_QWORD *)&v398 + 1) + 8 * DWORD1(v399);
          do
          {
            v309 = *v307;
            *v307 = 0;
            if (v309)
            {
              v310 = v309 + 2;
              do
              {
                v311 = __ldaxr(v310);
                v312 = v311 - 1;
              }
              while (__stlxr(v312, v310));
              if (!v312)
              {
                atomic_store(1u, v309 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v309 + 8))(v309);
              }
            }
            ++v307;
          }
          while (v307 != (unsigned int **)v308);
        }
        v228 = (WTF *)*((_QWORD *)&v398 + 1);
        if (*((_QWORD *)&v398 + 1))
        {
          *((_QWORD *)&v398 + 1) = 0;
          LODWORD(v399) = 0;
          WTF::fastFree(v228, v166);
        }
        JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::~AssemblerDataImpl((JSC *)&v392);
        v229 = (unsigned int *)v389;
        v389 = 0;
        if (v229)
        {
          do
          {
            v230 = __ldaxr(v229);
            v231 = v230 - 1;
          }
          while (__stlxr(v231, v229));
          if (!v231)
          {
            atomic_store(1u, v229);
            v401 = v229;
            WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v401);
          }
        }
        return v4;
      }
    }
    v48 = *(unsigned int *)(v2 + 520);
    if (v44 + 1 == v46)
      goto LABEL_66;
    v47 = *(unsigned int *)(v2 + 520);
    goto LABEL_59;
  }
  if (v3 == 2)
  {
    v13 = *(_DWORD *)(a1 + 360);
    if (v13 + 4 > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
      v13 = *(_DWORD *)(v2 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v2 + 216) + v13) = 1384120320;
    v14 = *(_DWORD *)(v2 + 360);
    v15 = v14 + 4;
    *(_DWORD *)(v2 + 360) = v14 + 4;
    if ((v14 + 8) > *(_DWORD *)(v2 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 216));
      v15 = *(_DWORD *)(v2 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v2 + 216) + v15) = -698416192;
    *(_DWORD *)(v2 + 360) += 4;
    goto LABEL_239;
  }
  if (v3 != 3)
    goto LABEL_239;
  return 1;
}

uint64_t operationIsAutofilled(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return HIBYTE(*(unsigned __int16 *)(a1 + 230)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t operationIsAutofilledAndObscured(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return (*(unsigned __int16 *)(a1 + 230) >> 10) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL operationIsAutofilledStrongPassword(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 230) & 0x100) != 0)
    return (*(_WORD *)(a1 + 230) & 0x3800) == 6144;
  return 0;
}

uint64_t operationIsAutofilledStrongPasswordViewable(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    return (*(unsigned __int16 *)(a1 + 230) >> 9) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t operationIsChecked(uint64_t a1)
{
  uint64_t v1;

  if ((*(_WORD *)(a1 + 28) & 0x10) == 0)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
  if (v1 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    if ((*(_WORD *)(a1 + 230) & 1) != 0)
      return (*(_WORD *)(*(_QWORD *)(a1 + 240) + 12) & 0x1002) != 0;
    return 0;
  }
  if (v1 != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    return 0;
  return WebCore::HTMLOptionElement::selected(a1, 0);
}

uint64_t operationMatchesDefaultPseudoClass(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 816))(a1);
}

uint64_t operationMatchesDisabledPseudoClass(_WORD *a1)
{
  if ((a1[14] & 0x10) != 0)
    return (*(uint64_t (**)(_WORD *))(*(_QWORD *)a1 + 1216))(a1);
  else
    return 0;
}

uint64_t operationMatchesEnabledPseudoClass(WebCore::HTMLMaybeFormAssociatedCustomElement *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((*((_WORD *)a1 + 14) & 0x10) == 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 24);
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
    return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
    return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
    return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  if (v2 == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  result = (*(uint64_t (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 856))(a1);
  if ((_DWORD)result)
  {
    result = WebCore::HTMLMaybeFormAssociatedCustomElement::isFormAssociatedCustomElement(a1);
    if ((_DWORD)result)
      return (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)a1 + 1216))(a1) ^ 1;
  }
  return result;
}

BOOL operationIsDefinedElement(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 79) & 0x10) == 0;
}

uint64_t operationMatchesFocusPseudoClass(uint64_t a1)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(_QWORD *)(v12 + 528);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 24);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
            goto LABEL_33;
        }
      }
    }
    v18 = *(_QWORD *)(v12 + 2632);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 528);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 8);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 24);
            if (v22)
            {
              v16 = *(_QWORD *)(v22 + 8);
              if (v16)
              {
LABEL_33:
                v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 80) + 8) + 112);
                if (v17)
                {
                  if (WebCore::InspectorCSSAgent::forcePseudoState(v17, a1, 29))
                    return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused((WebCore::Element *)a1)
    || (*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v4 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0
    && (*(_BYTE *)(v4 + 192) & 0x10) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 296) + 3064);
        if ((*(_WORD *)(v7 + 256) & 4) != 0)
        {
          v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8) + 528);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = *(_QWORD *)(v9 + 24);
              if (v10)
              {
                v11 = *(_QWORD *)(v10 + 8);
                if (v11)
                  return *(_WORD *)(*(_QWORD *)(v11 + 72) + 26) & 1;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL operationMatchesFocusVisiblePseudoClass(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(_QWORD *)(v11 + 528);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
            goto LABEL_30;
        }
      }
    }
    v17 = *(_QWORD *)(v11 + 2632);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 528);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_QWORD *)(v20 + 24);
            if (v21)
            {
              v15 = *(_QWORD *)(v21 + 8);
              if (v15)
              {
LABEL_30:
                v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 80) + 8) + 112);
                if (v16)
                {
                  if (WebCore::InspectorCSSAgent::forcePseudoState(v16, a1, 30))
                    return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 54) & 2) == 0)
    return 0;
  result = WebCore::Element::isUserActionElementHasFocusVisible((WebCore::Element *)a1);
  if (result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064);
        if ((*(_WORD *)(v6 + 256) & 4) != 0)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 528);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 24);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                  return *(_WORD *)(*(_QWORD *)(v10 + 72) + 26) & 1;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL operationMatchesFocusWithinPseudoClass(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(_QWORD *)(v11 + 528);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
            goto LABEL_29;
        }
      }
    }
    v16 = *(_QWORD *)(v11 + 2632);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 528);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 24);
            if (v20)
            {
              v15 = *(_QWORD *)(v20 + 8);
              if (v15)
              {
LABEL_29:
                v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 80) + 8) + 112);
                if (v21)
                {
                  if (WebCore::InspectorCSSAgent::forcePseudoState(v21, a1, 31))
                    return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 54) & 2) == 0)
    return 0;
  result = WebCore::Element::isUserActionElementHasFocusWithin((WebCore::Element *)a1);
  if (result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v5 + 296) + 3064);
        if ((*(_WORD *)(v6 + 256) & 4) != 0)
        {
          v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 528);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 24);
              if (v9)
              {
                v10 = *(_QWORD *)(v9 + 8);
                if (v10)
                  return *(_WORD *)(*(_QWORD *)(v10 + 72) + 26) & 1;
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t operationIsMediaDocument(uint64_t a1)
{
  return (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3358) >> 4) & 1;
}

uint64_t operationIsInRange(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 912))(a1);
}

uint64_t operationMatchesIndeterminatePseudoClass(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 808))(a1);
}

uint64_t operationIsInvalid(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 776))(a1);
}

uint64_t operationIsOptionalFormControl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
}

uint64_t operationIsOutOfRange(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
}

uint64_t operationMatchesReadOnlyPseudoClass(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 800))(a1) ^ 1;
}

uint64_t operationMatchesReadWritePseudoClass(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 800))(a1);
}

uint64_t operationIsRequiredFormControl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
}

uint64_t operationIsValid(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 768))(a1);
}

BOOL operationIsWindowInactive(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  return v1
      && (v2 = *(_QWORD *)(v1 + 8)) != 0
      && (v3 = *(_QWORD *)(v2 + 24)) != 0
      && (v4 = *(_QWORD *)(v3 + 8)) != 0
      && (*(_WORD *)(*(_QWORD *)(v4 + 72) + 26) & 1) == 0;
}

BOOL operationMatchesFullscreenPseudoClass(uint64_t a1, WebCore::TreeScope *a2)
{
  if ((*(_BYTE *)(a1 + 54) & 0x40) != 0)
    return 1;
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
    return WebCore::DocumentOrShadowRootFullscreen::fullscreenElement((WebCore::DocumentOrShadowRootFullscreen *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 96), a2) == (WebCore::Element *)a1;
  return 0;
}

BOOL operationMatchesFullscreenDocumentPseudoClass(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 1992);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = v2 + 1;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
  v4 = *(_QWORD **)(v3 + 3096);
  if (v4)
  {
    v7 = 0;
    v8 = (_QWORD *)(v3 + 3104);
    do
    {
      if (v7)
        v9 = v7 + 1;
      else
        v9 = v8;
      v7 = (_QWORD *)*v9;
      v5 = *v7;
      if ((*(_BYTE *)(*v7 + 54) & 0x40) != 0)
        break;
      v5 = 0;
    }
    while (v7 != v4);
  }
  else
  {
    v5 = 0;
  }
  if (v2 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19592F838);
  }
  result = v5 != 0;
  *(_DWORD *)(v1 + 8) = v2;
  return result;
}

BOOL operationMatchesAnimatingFullscreenTransitionPseudoClass(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _BOOL8 result;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 1992);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 8);
    *(_DWORD *)(v1 + 8) = v2 + 1;
    if (*(_QWORD *)(v1 + 56) == a1)
    {
      result = *(_BYTE *)(v1 + 130) != 0;
      if (v2 != -1)
        goto LABEL_4;
    }
    else
    {
      result = 0;
      if (v2 != -1)
      {
LABEL_4:
        *(_DWORD *)(v1 + 8) = v2;
        return result;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19592F8D4);
  }
  return 0;
}

uint64_t operationMatchesInWindowFullscreenPseudoClass(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  WebCore::FullscreenManager *v9;
  uint64_t v10;
  void *v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(_QWORD *)(v2 + 1992);
  if (!v3)
  {
    v5 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v5 = 0;
    *(_DWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v2);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = v6;
    *(_BYTE *)(v5 + 40) = 0;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_DWORD *)(v5 + 127) = 0;
    *(_QWORD *)(v5 + 136) = WTF::cryptographicallyRandomNumber<unsigned long long>();
    v9 = *(WebCore::FullscreenManager **)(v2 + 1992);
    *(_QWORD *)(v2 + 1992) = v5;
    if (v9)
    {
      WebCore::FullscreenManager::~FullscreenManager(v9, v8);
      if (*(_DWORD *)(v10 + 8))
      {
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, v11);
      }
    }
    v3 = *(_QWORD *)(v2 + 1992);
  }
  if (*(_QWORD *)(v3 + 56) != a1)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 1080) == 4;
  return result;
}

BOOL operationMatchesPictureInPicturePseudoClass(uint64_t a1)
{
  uint64_t v2;

  if ((*(_WORD *)(a1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    return 0;
  }
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3032);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  return v2 == a1;
}

uint64_t operationMatchesFutureCuePseudoClass(_BYTE *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 176))(a1);
  if ((_DWORD)result)
    return a1[112] == 0;
  return result;
}

uint64_t operationMatchesPastCuePseudoClass(_BYTE *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 176))(a1);
  if ((_DWORD)result)
    return a1[112] != 0;
  return result;
}

uint64_t operationMatchesPlayingPseudoClass(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1) ^ 1;
  return result;
}

uint64_t operationMatchesPausedPseudoClass(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1);
  return result;
}

unint64_t operationMatchesSeekingPseudoClass(uint64_t a1)
{
  unint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return ((unint64_t)*(unsigned int *)(a1 + 1265) >> 11) & 1;
  return result;
}

unint64_t operationMatchesBufferingPseudoClass(uint64_t a1)
{
  unint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return ((unint64_t)*(unsigned int *)(a1 + 1265) >> 12) & 1;
  return result;
}

unint64_t operationMatchesStalledPseudoClass(uint64_t a1)
{
  unint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return ((unint64_t)*(unsigned int *)(a1 + 1265) >> 13) & 1;
  return result;
}

uint64_t operationMatchesMutedPseudoClass(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1472))(a1);
  return result;
}

uint64_t operationMatchesVolumeLockedPseudoClass(_BYTE *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 824))(a1);
  if ((_DWORD)result)
    return a1[1270] & 1;
  return result;
}

uint64_t operationHasAttachment(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  __int16 v5;

  if ((*(_WORD *)(a1 + 28) & 0x10) == 0)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    return 0;
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 24))(a1 + 112);
  if ((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  result = *(_QWORD *)((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (result)
  {
    v3 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v3 + 2;
    v4 = *(_QWORD *)(result + 80);
    if (v4)
    {
      while (1)
      {
        v5 = *(_WORD *)(v4 + 28);
        if ((v5 & 0x10) != 0
          && (v5 & 0x110) != 0x110
          && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
        {
          break;
        }
        v4 = *(_QWORD *)(v4 + 56);
        if (!v4)
          goto LABEL_14;
      }
      *(_DWORD *)(v4 + 24) += 2;
      v3 = *(_DWORD *)(result + 24) - 2;
    }
LABEL_14:
    if (v3)
    {
      *(_DWORD *)(result + 24) = v3;
    }
    else if ((*(_WORD *)(result + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    result = v4 != 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
      return 1;
    }
  }
  return result;
}

uint64_t operationMatchesDir(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 72);
  if ((v2 & 0x4000000000000000) != 0)
    v3 = v2 >> 63;
  else
    LODWORD(v3) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3360) != 0;
  return (a2 == 0) ^ v3;
}

uint64_t operationMatchesHtmlDocumentPseudoClass(uint64_t a1)
{
  return *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3358) & 1;
}

uint64_t operationMatchesLangPseudoClass(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  int8x16_t v34;
  int16x8_t v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  const char *v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  const char *v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  unsigned __int8 *v93[2];
  __int128 v94;

  v4 = a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    if (*(_QWORD *)(v4 + 120))
    {
      v10 = *(_QWORD *)(v4 + 120);
      goto LABEL_6;
    }
    return 0;
  }
  if ((*(_WORD *)(v4 + 30) & 8) != 0)
    goto LABEL_3;
  if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v10 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x40);
    if (v10)
      goto LABEL_6;
  }
  if ((*(_BYTE *)(v4 + 22) & 8) != 0)
  {
LABEL_3:
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
    v7 = (uint64_t *)(v6 + 1720);
    v8 = *(_QWORD *)(v6 + 1720);
    v9 = (uint64_t *)(v6 + 1712);
    if (v8)
      v9 = v7;
  }
  else
  {
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v10 = *v9;
  if (!*v9)
    return 0;
LABEL_6:
  v11 = *(_DWORD *)(v10 + 4);
  v12 = *(_DWORD *)v10 + 2;
  *(_DWORD *)v10 = v12;
  if (!v11)
  {
    v17 = 0;
    goto LABEL_15;
  }
  v13 = *(_BYTE *)(v10 + 16);
  *(_QWORD *)&v92 = *(_QWORD *)(v10 + 8);
  DWORD2(v92) = v11;
  BYTE12(v92) = (v13 & 4) != 0;
  v14 = *a2;
  if (*a2)
    v15 = *a2 + 2;
  else
    v15 = 0;
  if (v14)
    v16 = (uint64_t)&(*a2)[4 * *v14 + 2];
  else
    v16 = 0;
  if (v15 == (_QWORD *)v16)
  {
    v17 = 0;
    goto LABEL_14;
  }
  v88 = *(_DWORD *)(v10 + 4);
  v87 = v16;
  v84 = v10;
  do
  {
    v20 = v2 & 0xFFFFFF0000000000;
    v21 = *v15;
    if (!*v15)
    {
      v2 = v20 | 0x100000000;
      goto LABEL_98;
    }
    v22 = *(unsigned int *)(v21 + 4);
    v23 = ((unint64_t)*(unsigned int *)(v21 + 16) >> 2) & 1;
    v24 = v20 | (v23 << 32);
    v2 = v24 | v22;
    if (!(_DWORD)v22)
      goto LABEL_98;
    v25 = *(unsigned __int8 **)(v21 + 8);
    if ((WTF::operator==(v25, v24 | v22, "*", 2) & 1) != 0
      || (v94 = v92,
          v93[0] = v25,
          v93[1] = (unsigned __int8 *)v2,
          WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>((unsigned __int8 **)&v94, v93))&& WTF::StringView::find((uint64_t)&v92, 0x2Du, 0, *(double *)v34.i64, *(double *)v35.i64, v36) == -1)
    {
      v17 = 1;
      break;
    }
    v37 = 0;
    v38 = 0;
    v39 = MEMORY[0x1E0CBF868];
    v89 = v2;
    v83 = v23;
    while (1)
    {
      if ((_DWORD)v38)
      {
        if (v38 >= v88)
        {
          v17 = 0;
          v10 = v84;
          goto LABEL_14;
        }
        v29 = v38;
        v40 = v38 + 1;
        v39 = MEMORY[0x1E0CBF868];
        v10 = v84;
      }
      else
      {
        v40 = 0;
      }
      if ((_DWORD)v23)
      {
        if (v22 > v40)
        {
          v41 = v22 - v40;
          v29 = 16;
          if (v41 < 0x10)
            v29 = v22 - v40;
          if (v29)
          {
            v42 = v29;
            v43 = &v25[v40];
            while (1)
            {
              v30 = *v43;
              if ((_DWORD)v30 == 45)
                break;
              ++v43;
              if (!--v42)
                goto LABEL_34;
            }
LABEL_36:
            v44 = v43 - v25;
            goto LABEL_37;
          }
LABEL_34:
          if (v41 >= 0x11)
          {
            v43 = (unsigned __int8 *)memchr(&v25[v40 + v29], 45, v41 - v29);
            v39 = MEMORY[0x1E0CBF868];
            if (v43)
              goto LABEL_36;
          }
        }
        v44 = -1;
      }
      else
      {
        v44 = WTF::find<char16_t,(void *)0>((uint64_t)v25, v22, 0x2Du, v40, *(double *)v34.i64, *(double *)v35.i64, v36);
        v39 = MEMORY[0x1E0CBF868];
      }
LABEL_37:
      if (v22 >= v44)
        v45 = v44;
      else
        v45 = v22;
      if (v22 <= v40)
      {
        v52 = 0;
        v47 = 0;
        v50 = *((_QWORD *)&v92 + 1);
        v51 = (const char *)v92;
        v49 = "";
        v53 = "" == "*";
        v74 = 0x100000000;
        goto LABEL_92;
      }
      v46 = v45 - v40;
      if (v22 - v40 <= v45 - v40)
      {
        v49 = (char *)v25;
        v47 = v2;
        if (!v40)
          goto LABEL_45;
        v46 = v22 - v40;
        LODWORD(v23) = v83;
      }
      v47 = v46;
      v48 = v22 - v40;
      if (!(_DWORD)v23)
      {
        if (v48 < v47)
          goto LABEL_150;
        v49 = (char *)&v25[2 * v40];
        goto LABEL_45;
      }
      if (v48 >= v47)
      {
        v49 = (char *)&v25[v40];
        v47 |= 0x100000000uLL;
LABEL_45:
        v50 = *((_QWORD *)&v92 + 1);
        v51 = (const char *)v92;
        v52 = v47 == 1;
        v53 = v49 == "*";
        if (v49 != "*" && (_DWORD)v47 == 1)
        {
          if ((v47 & 0xFF00000000) != 0)
          {
            v5 = *v49 == 42;
            v54 = 1;
            v55 = 1;
          }
          else
          {
            v55 = 0;
            v5 = *(unsigned __int16 *)v49 == 42;
            v54 = 1;
          }
          goto LABEL_49;
        }
        v74 = v47;
LABEL_92:
        v5 = v53 & v52;
        v55 = v74 & 0xFF00000000;
        v54 = v47;
        v47 = v74;
LABEL_49:
        v56 = v50 & 0xFF00000000;
        v30 = v50;
        v57 = v47;
        v90 = v50;
        v82 = v44;
        v81 = v45;
        goto LABEL_50;
      }
      while (1)
      {
LABEL_150:
        __break(1u);
LABEL_151:
        while (*(_WORD *)v29 != 45)
        {
          v29 += 2;
          LODWORD(v71) = -1;
          v45 -= 2;
          v39 = MEMORY[0x1E0CBF868];
          v51 = (const char *)v30;
          v5 = v31;
          v50 = v32;
          v25 = v33;
          v22 = v26;
          v15 = v27;
          v10 = v84;
          v54 = v28;
          v47 = v4;
          v55 = v2;
          v49 = (char *)v37;
          v57 = v48;
          v56 = (uint64_t)v86;
          if (!v45)
            goto LABEL_64;
        }
LABEL_168:
        LODWORD(v71) = -1;
        v51 = (const char *)v30;
        if (v29 != v44)
          v71 = (uint64_t)(v29 - v30) >> 1;
        v39 = MEMORY[0x1E0CBF868];
LABEL_172:
        v5 = v31;
        v50 = v32;
        v25 = v33;
        v22 = v26;
        v15 = v27;
        v10 = v84;
        v54 = v28;
        v47 = v4;
        v55 = v2;
        v49 = (char *)v37;
        v57 = v48;
        v56 = (uint64_t)v86;
LABEL_64:
        if (v88 >= v71)
          v37 = v71;
        else
          v37 = v88;
        v44 = v91;
        LODWORD(v48) = v37 - v91;
        if (v37 < v91)
          goto LABEL_97;
        v45 = (v50 - v91);
        v30 = v90;
        if (v50 <= v91)
          break;
        if (v45 <= v48)
        {
          v72 = v51;
          v48 = v50;
          if (!(_DWORD)v91)
            goto LABEL_73;
          LODWORD(v48) = v50 - v91;
        }
        v48 = v48;
        v29 = v90 - v91;
        if (v56)
        {
          if (v29 >= v48)
          {
            v72 = &v51[v91];
            v48 = v48 | 0x100000000;
            goto LABEL_73;
          }
        }
        else if (v29 >= v48)
        {
          v72 = &v51[2 * v91];
          goto LABEL_73;
        }
      }
      v48 = 0x100000000;
      v72 = "";
LABEL_73:
      if ((_DWORD)v54 != (_DWORD)v48)
        goto LABEL_108;
      v30 = v48 & 0xFF00000000;
      if (!v55)
      {
        v44 = v47;
        v75 = v47;
        if (v30)
        {
          if ((_DWORD)v47)
          {
            v30 = *(unsigned __int16 *)v49 | (32 * (*(unsigned __int16 *)v49 - 65 < 0x1A));
            v32 = MEMORY[0x1E0CBF868];
            v31 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v72);
            if ((_DWORD)v30 == (_DWORD)v31)
            {
              v31 = 1;
              do
              {
                v30 = v31;
                if (v57 == v31)
                  break;
                v32 = *(unsigned __int16 *)&v49[2 * v31] | (32
                                                          * (*(unsigned __int16 *)&v49[2 * v31]
                                                                         - 65 < 0x1A));
                v33 = (unsigned __int8 *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v72[v31++]);
              }
              while ((_DWORD)v32 == (_DWORD)v33);
              goto LABEL_141;
            }
LABEL_162:
            v29 = 0;
LABEL_161:
            v39 = MEMORY[0x1E0CBF868];
            v10 = v84;
            v47 = v44;
            LODWORD(v44) = v91;
            goto LABEL_82;
          }
        }
        else if ((_DWORD)v47)
        {
          v30 = *(unsigned __int16 *)v49 | (32 * (*(unsigned __int16 *)v49 - 65 < 0x1A));
          v80 = *(unsigned __int16 *)v72;
          v32 = (v80 - 65) < 0x1A;
          v31 = v80 | (32 * v32);
          if ((_DWORD)v30 != (_DWORD)v31)
            goto LABEL_162;
          v31 = 1;
          do
          {
            v30 = v31;
            if (v57 == v31)
              break;
            v32 = *(unsigned __int16 *)&v49[2 * v31] | (32
                                                      * (*(unsigned __int16 *)&v49[2 * v31]
                                                                     - 65 < 0x1A));
            v33 = (unsigned __int8 *)(*(unsigned __int16 *)&v72[2 * v31] | (32
                                                                          * (*(unsigned __int16 *)&v72[2 * v31]
                                                                                         - 65 < 0x1A)));
            ++v31;
          }
          while ((_DWORD)v32 == (_DWORD)v33);
LABEL_141:
          v29 = v30 >= v75;
          goto LABEL_161;
        }
LABEL_160:
        v29 = 1;
        goto LABEL_161;
      }
      if (!v30)
      {
        v44 = v47;
        v75 = v47;
        if ((_DWORD)v47)
        {
          v30 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v49);
          v76 = *(unsigned __int16 *)v72;
          v32 = (v76 - 65) < 0x1A;
          v31 = v76 | (32 * v32);
          if ((_DWORD)v31 == (_DWORD)v30)
          {
            v31 = 1;
            do
            {
              v30 = v31;
              if (v57 == v31)
                break;
              v32 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v49[v31]);
              v33 = (unsigned __int8 *)(*(unsigned __int16 *)&v72[2 * v31] | (32
                                                                            * (*(unsigned __int16 *)&v72[2 * v31]
                                                                                           - 65 < 0x1A)));
              ++v31;
            }
            while ((_DWORD)v33 == (_DWORD)v32);
            goto LABEL_141;
          }
          goto LABEL_162;
        }
        goto LABEL_160;
      }
      if (!(_DWORD)v54)
      {
        v29 = 1;
        goto LABEL_82;
      }
      v30 = *(unsigned __int8 *)(v39 + *(unsigned __int8 *)v72);
      if (*(unsigned __int8 *)(v39 + *v49) != (_DWORD)v30)
      {
LABEL_108:
        v29 = 0;
        goto LABEL_82;
      }
      v31 = 1;
      do
      {
        v30 = v31;
        if (v57 == v31)
          break;
        v32 = *(unsigned __int8 *)(v39 + v49[v31]);
        v33 = (unsigned __int8 *)*(unsigned __int8 *)(v39 + v72[v31++]);
      }
      while ((_DWORD)v32 == (_DWORD)v33);
      v29 = v30 >= v47;
LABEL_82:
      if ((v5 & 1) != 0)
        goto LABEL_123;
      v73 = v29 ^ 1;
      if ((_DWORD)v44)
        v73 = 0;
      if ((v73 & 1) != 0)
        goto LABEL_97;
      if ((_DWORD)v44 && (_DWORD)v48 == 1)
        break;
      v39 = MEMORY[0x1E0CBF868];
      v10 = v84;
      v30 = v90;
      if ((v29 & 1) == 0)
      {
        if (v88 <= v71)
        {
LABEL_97:
          v16 = v87;
          v2 = v89;
          goto LABEL_98;
        }
LABEL_50:
        if ((_DWORD)v37)
          v58 = (v37 + 1);
        else
          v58 = 0;
        v91 = v58;
        if (v56)
        {
          if (v50 > v58)
          {
            v59 = &v51[v58];
            v60 = v30 - v58;
            v61 = 16;
            if (v60 < 0x10)
              v61 = v60;
            if (v61)
            {
              v62 = v61;
              v63 = v59;
              while (*v63 != 45)
              {
                ++v63;
                if (!--v62)
                  goto LABEL_61;
              }
LABEL_63:
              LODWORD(v71) = (_DWORD)v63 - (_DWORD)v51;
              goto LABEL_64;
            }
LABEL_61:
            if (v60 >= 0x11)
            {
              v85 = v22;
              v86 = v15;
              v64 = v25;
              v65 = v50;
              v2 = v5;
              v66 = v51;
              v4 = v54;
              v67 = v57;
              v68 = v49;
              v69 = v55;
              v70 = v47;
              v63 = memchr((void *)&v59[v61], 45, v60 - v61);
              v47 = v70;
              v55 = v69;
              v49 = v68;
              v57 = v67;
              v54 = v4;
              v50 = v65;
              v25 = v64;
              v22 = v85;
              v10 = v84;
              v5 = v2;
              v51 = v66;
              v39 = MEMORY[0x1E0CBF868];
              if (v63)
                goto LABEL_63;
            }
          }
          LODWORD(v71) = -1;
          goto LABEL_64;
        }
        v86 = 0;
        v48 = v57;
        v37 = (unint64_t)v49;
        v2 = v55;
        v4 = v47;
        v28 = v54;
        v27 = v15;
        v77 = v30;
        v26 = v22;
        v33 = v25;
        v32 = v50;
        v31 = v5;
        v30 = (unint64_t)v51;
        if (v77 > v58)
        {
          v44 = (unint64_t)&v51[2 * v90];
          v29 = (unint64_t)&v51[2 * v58];
          v45 = v44 - v29;
          if ((uint64_t)(v44 - v29) <= -2)
            goto LABEL_150;
          if (v45 <= 0x3E)
            goto LABEL_151;
          if (v29 + 14 < v44)
          {
            while (1)
            {
              v35.i64[0] = 0x2D002D002D002DLL;
              v35.i64[1] = 0x2D002D002D002DLL;
              v34 = (int8x16_t)vceqq_s16(*(int16x8_t *)v29, v35);
              v35.i16[0] = vmaxvq_u16((uint16x8_t)v34);
              if (v35.i32[0])
                goto LABEL_167;
              v78 = v29 + 16;
              v79 = v29 + 30;
              v29 += 16;
              if (v79 >= v44)
                goto LABEL_165;
            }
          }
          v78 = (unint64_t)&v51[2 * v91];
LABEL_165:
          if (v78 < v44)
          {
            v29 = v44 - 16;
            v35.i64[0] = 0x2D002D002D002DLL;
            v35.i64[1] = 0x2D002D002D002DLL;
            v34 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v44 - 16), v35);
            v35.i16[0] = vmaxvq_u16((uint16x8_t)v34);
            if (v35.i32[0])
            {
LABEL_167:
              v35.i64[0] = 0x3000200010000;
              v34 = vornq_s8((int8x16_t)xmmword_196881010, v34);
              v34.i16[0] = vminvq_u16((uint16x8_t)v34);
              v29 += 2 * v34.u8[0];
              goto LABEL_168;
            }
          }
        }
        LODWORD(v71) = -1;
        v39 = MEMORY[0x1E0CBF868];
        goto LABEL_172;
      }
LABEL_123:
      LODWORD(v23) = v83;
      v17 = 1;
      v2 = v89;
      v38 = v81;
      if (v22 <= v82)
        goto LABEL_14;
    }
    v16 = v87;
    v2 = v89;
    v10 = v84;
LABEL_98:
    v17 = 0;
    v15 += 2;
  }
  while (v15 != (_QWORD *)v16);
LABEL_14:
  v12 = *(_DWORD *)v10;
LABEL_15:
  v18 = v12 - 2;
  if (v18)
    *(_DWORD *)v10 = v18;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)v5);
  return v17;
}

BOOL operationMatchesPopoverOpenPseudoClass(uint64_t a1)
{
  uint64_t v2;

  return (*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v2 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xE8)) != 0
      && *(_BYTE *)(v2 + 1) != 0;
}

BOOL operationMatchesModalPseudoClass(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
  {
    return *(_BYTE *)(a1 + 120) != 0;
  }
  else
  {
    return (*(unsigned __int8 *)(a1 + 54) >> 6) & 1;
  }
}

BOOL operationMatchesActiveViewTransitionPseudoClass(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  return *(_QWORD *)(v1 + 1272) == a1 && *(_QWORD *)(v1 + 2112) != 0;
}

uint64_t operationIsUserInvalid(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 792))(a1);
}

uint64_t operationIsUserValid(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 784))(a1);
}

uint64_t WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements(uint64_t this, WebCore::SelectorCompiler::SelectorList *a2, unsigned int *a3, WebCore::SelectorCompiler::SelectorFragmentList *a4)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  __int128 v9;
  int v10;
  unsigned int v11;
  int v12;
  uint32x2_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v6 = this;
  v7 = *(_DWORD *)(this + 12);
  if (v7)
  {
    v8 = 0;
    v14 = *(uint32x2_t **)this;
    v15 = *(_QWORD *)this + 2016 * v7;
    v9 = 0uLL;
    do
    {
      v17 = v9;
      this = WebCore::SelectorCompiler::computeBacktrackingMemoryRequirements((WebCore::SelectorCompiler *)v14, a4, (BOOL)a3);
      v8 = v8 || v14[251].i8[4] != 0;
      *((_QWORD *)&v16 + 1) = *((_QWORD *)&v17 + 1);
      *(uint32x2_t *)&v16 = vmax_u32(*(uint32x2_t *)&v17, v14[250]);
      v9 = v16;
      v14 += 252;
    }
    while (v14 != (uint32x2_t *)v15);
  }
  else
  {
    v8 = 0;
    *(_QWORD *)&v9 = 0;
  }
  v10 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= v9)
    v10 = v9;
  *(_DWORD *)a2 = v10;
  v11 = DWORD1(v9);
  if (*a3 > DWORD1(v9))
    v11 = *a3;
  *a3 = v11;
  if (v9 <= 6)
    v12 = 6;
  else
    v12 = v9;
  *(_DWORD *)(v6 + 16) = v12;
  *(_DWORD *)(v6 + 20) = DWORD1(v9);
  *(_BYTE *)(v6 + 24) = v8;
  return this;
}

WTF *WebCore::SelectorCompiler::SelectorCodeGenerator::generateSelectorCheckerExcludingPseudoElements(WebCore::SelectorCompiler::SelectorCodeGenerator *this, _DWORD *a2, uint64_t a3)
{
  double v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF *v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  WTF *v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int k;
  int v40;
  int v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  int m;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  double v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int i;
  int v77;
  int v78;
  uint64_t v79;
  double v80;
  int j;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  WTF *v96;
  WTF *v97;
  WTF *v98;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  unint64_t v106;
  uint64_t v107;
  WebCore::SelectorCompiler::SelectorCodeGenerator *v108;
  unsigned __int8 v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int n;
  unsigned int kk;
  unsigned int v120;
  char v121;
  unsigned int ii;
  unsigned int v123;
  char v124;
  unsigned int jj;
  unsigned int v126;
  char v127;
  uint64_t v128;
  char *v129;
  _QWORD *v130;
  int v131;
  _DWORD *v132;
  _QWORD *v133;
  unsigned int v134;
  char v135;
  unsigned int *v136;
  _BYTE *v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  _DWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  _QWORD *v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF *v166;
  _QWORD *v167;
  WTF *v168;
  uint64_t v170;
  WTF *v171;
  _QWORD *v172;
  WTF *v173;
  WTF *v175;
  WTF *result;
  uint64_t v177;
  WTF *v178;
  unint64_t v179;
  unsigned int v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  JSC::AssemblerBuffer *v184;
  uint64_t *v185;
  _QWORD *v186;
  WTF *v187;
  _DWORD v188[8];
  WTF *v189;
  uint64_t v190;
  _BYTE v191[32];
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  _DWORD v196[8];
  uint64_t v197;
  WTF *v198;
  _DWORD v199[8];
  WTF *v200;
  uint64_t v201;
  _BYTE v202[31];
  unsigned __int8 v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE v206[40];

  v6 = 0.0;
  v194 = 0xFFFFFFFFLL;
  memset(v196, 0, sizeof(v196));
  memset(v199, 0, sizeof(v199));
  v197 = 0xFFFFFFFFLL;
  v192 = (WTF *)-1;
  v193 = -1;
  v195 = (WTF *)&v196[2];
  v196[0] = 2;
  v198 = (WTF *)&v199[2];
  v199[0] = 2;
  v7 = *((_QWORD *)this + 408);
  v8 = *((_QWORD *)this + 409);
  if (v7)
  {
    if (v8 + 1 != v7)
      goto LABEL_5;
    LODWORD(v9) = *((_DWORD *)this + 822);
  }
  else
  {
    v9 = *((unsigned int *)this + 822);
    if (v8)
    {
      if (v8 != v9 - 1)
        goto LABEL_5;
    }
    else if ((_DWORD)v9)
    {
      v8 = 0;
LABEL_5:
      v10 = -1;
      goto LABEL_6;
    }
  }
  v177 = v9;
  v178 = (WTF *)*((_QWORD *)this + 410);
  v179 = ((unint64_t)v9 >> 2) + v9;
  if (v179 <= 0xF)
    v179 = 15;
  if (v179 < 0x20)
  {
    v181 = (char *)this + 3296;
    *((_QWORD *)this + 410) = (char *)this + 3296;
    *((_DWORD *)this + 822) = 32;
  }
  else
  {
    if (v179 >= 0x2492492)
    {
      __break(0xC471u);
      JUMPOUT(0x195931FC4);
    }
    v180 = 112 * v179 + 112;
    v181 = (char *)WTF::fastMalloc((WTF *)(112 * v179 + 112));
    *((_DWORD *)this + 822) = (613566757 * (unint64_t)(v180 >> 4)) >> 32;
    *((_QWORD *)this + 410) = v181;
    v7 = *((_QWORD *)this + 408);
    v8 = *((_QWORD *)this + 409);
  }
  if (v7 <= v8)
  {
    WTF::VectorMover<false,WebCore::SelectorCompiler::BacktrackingLevel>::move((WTF *)((char *)v178 + 112 * v7), (WTF *)((char *)v178 + 112 * v8), (uint64_t)&v181[112 * v7]);
  }
  else
  {
    WTF::VectorMover<false,WebCore::SelectorCompiler::BacktrackingLevel>::move(v178, (WTF *)((char *)v178 + 112 * v8), (uint64_t)v181);
    v182 = *((_QWORD *)this + 408);
    v183 = v182 - v177 + *((unsigned int *)this + 822);
    WTF::VectorMover<false,WebCore::SelectorCompiler::BacktrackingLevel>::move((WTF *)((char *)v178 + 112 * v182), (WTF *)((char *)v178 + 112 * v177), *((_QWORD *)this + 410) + 112 * v183);
    *((_QWORD *)this + 408) = v183;
  }
  if ((WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 3296) != v178 && v178)
  {
    if (*((WTF **)this + 410) == v178)
    {
      *((_QWORD *)this + 410) = 0;
      *((_DWORD *)this + 822) = 0;
    }
    WTF::fastFree(v178, a2);
  }
  v8 = *((_QWORD *)this + 409);
  v10 = (int)v192;
LABEL_6:
  v11 = *((_QWORD *)this + 410);
  v12 = v11 + 112 * v8;
  *(_DWORD *)v12 = v10;
  *(_DWORD *)(v12 + 4) = HIDWORD(v192);
  *(_QWORD *)(v12 + 8) = v193;
  v13 = v194;
  *(_QWORD *)(v12 + 32) = 2;
  v14 = (_DWORD *)(v12 + 32);
  *(v14 - 4) = v13;
  v15 = v14 + 2;
  *((_QWORD *)v14 - 1) = v14 + 2;
  v16 = v14 + 1;
  v17 = v195;
  if (v195 == (WTF *)&v196[2])
  {
    if (v196[1])
    {
      v19 = &v196[3 * v196[1] + 2];
      v20 = &v196[2];
      do
      {
        *v15 = *v20;
        *(_QWORD *)(v15 + 1) = *(_QWORD *)(v20 + 1);
        v20 += 3;
        v15 += 3;
      }
      while (v20 != v19);
    }
  }
  else
  {
    v195 = (WTF *)&v196[2];
    *((_QWORD *)v14 - 1) = v17;
    v18 = v196[0];
    v196[0] = 2;
    *v14 = v18;
  }
  v21 = v196[1];
  v196[1] = 0;
  *v16 = v21;
  v22 = v11 + 112 * v8;
  v23 = v197;
  *(_QWORD *)(v22 + 80) = 2;
  v24 = (_DWORD *)(v22 + 80);
  *(v24 - 4) = v23;
  v25 = v24 + 2;
  *((_QWORD *)v24 - 1) = v24 + 2;
  v26 = v24 + 1;
  v27 = v198;
  if (v198 == (WTF *)&v199[2])
  {
    if (v199[1])
    {
      v29 = &v199[3 * v199[1] + 2];
      v30 = &v199[2];
      do
      {
        *v25 = *v30;
        *(_QWORD *)(v25 + 1) = *(_QWORD *)(v30 + 1);
        v30 += 3;
        v25 += 3;
      }
      while (v30 != v29);
    }
  }
  else
  {
    v198 = (WTF *)&v199[2];
    *((_QWORD *)v24 - 1) = v27;
    v28 = v199[0];
    v199[0] = 2;
    *v24 = v28;
  }
  v31 = v199[1];
  v199[1] = 0;
  *v26 = v31;
  v32 = *((_QWORD *)this + 409);
  if (v32 == *((unsigned int *)this + 822) - 1)
    v33 = 0;
  else
    v33 = v32 + 1;
  *((_QWORD *)this + 409) = v33;
  v34 = v198;
  if (&v199[2] != (_DWORD *)v198 && v198)
  {
    v198 = 0;
    v199[0] = 0;
    WTF::fastFree(v34, a2);
  }
  v35 = v195;
  if (&v196[2] != (_DWORD *)v195 && v195)
  {
    v195 = 0;
    v196[0] = 0;
    WTF::fastFree(v35, a2);
  }
  v36 = *(_DWORD *)(a3 + 12);
  if (v36)
  {
    v37 = *(_QWORD *)a3;
    v38 = v37 + 496 * v36;
    v185 = (uint64_t *)((char *)this + 496);
    v186 = (_QWORD *)((char *)this + 544);
    v184 = (WebCore::SelectorCompiler::SelectorCodeGenerator *)((char *)this + 216);
    do
    {
      switch(*(_DWORD *)(v37 + 4))
      {
        case 0:
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching((uint64_t)this, (uint64_t)a2, (uint64_t)a2, v37, v6);
          break;
        case 1:
          for (i = *((_DWORD *)this + 90); ; *((_DWORD *)this + 90) = i)
          {
            v77 = *((_DWORD *)this + 53);
            if (i >= v77)
              break;
            if ((i + 4) > *((_DWORD *)this + 88))
            {
              v6 = JSC::AssemblerBuffer::outOfLineGrow(v184);
              i = *((_DWORD *)this + 90);
            }
            *(_DWORD *)(*((_QWORD *)this + 27) + i) = -721215457;
            i = *((_DWORD *)this + 90) + 4;
          }
          *((_DWORD *)this + 92) = 0;
          if ((*(_BYTE *)(v37 + 28) & 1) != 0)
          {
            v78 = i;
            if (i < v77)
            {
              v78 = i;
              do
              {
                if ((v78 + 4) > *((_DWORD *)this + 88))
                {
                  v6 = JSC::AssemblerBuffer::outOfLineGrow(v184);
                  v78 = *((_DWORD *)this + 90);
                }
                *(_DWORD *)(*((_QWORD *)this + 27) + v78) = -721215457;
                v78 = *((_DWORD *)this + 90) + 4;
                *((_DWORD *)this + 90) = v78;
              }
              while (v78 < *((_DWORD *)this + 53));
            }
            *((_DWORD *)this + 92) = 0;
            v79 = *((_QWORD *)this + 409);
            if (*((_QWORD *)this + 408) == v79)
            {
              __break(0xC471u);
              JUMPOUT(0x195931D44);
            }
            if (!v79)
              v79 = *((unsigned int *)this + 822);
            *(_DWORD *)(*((_QWORD *)this + 410) + 112 * v79 - 104) = v78;
          }
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToParentElement((uint64_t)this, (uint64_t)a2, 0, v6);
          if ((*(_BYTE *)(v37 + 28) & 1) != 0)
          {
            for (j = *((_DWORD *)this + 90); j < *((_DWORD *)this + 53); *((_DWORD *)this + 90) = j)
            {
              if ((j + 4) > *((_DWORD *)this + 88))
              {
                v80 = JSC::AssemblerBuffer::outOfLineGrow(v184);
                j = *((_DWORD *)this + 90);
              }
              *(_DWORD *)(*((_QWORD *)this + 27) + j) = -721215457;
              j = *((_DWORD *)this + 90) + 4;
            }
            *((_DWORD *)this + 92) = 0;
            v82 = *((_QWORD *)this + 409);
            if (*((_QWORD *)this + 408) == v82)
            {
              __break(0xC471u);
              JUMPOUT(0x195931D64);
            }
            if (!v82)
              v82 = *((unsigned int *)this + 822);
            *(_DWORD *)(*((_QWORD *)this + 410) + 112 * v82 - 112) = j;
          }
          v192 = (WTF *)&v194;
          v193 = 2;
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching((uint64_t)this, (uint64_t)&v192, (uint64_t)&v192, v37, v80);
          v83 = (unsigned int *)v192;
          if (!HIDWORD(v193))
            goto LABEL_120;
          v84 = 12 * HIDWORD(v193);
          do
          {
            LODWORD(v204) = i;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v83, (unsigned int *)&v204, (uint64_t)this + 160);
            v83 += 3;
            v84 -= 12;
          }
          while (v84);
          goto LABEL_119;
        case 2:
          v192 = (WTF *)&v194;
          v193 = 2;
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToParentElement((uint64_t)this, (uint64_t)&v192, 0, v6);
          WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures((uint64_t)this, a2, *(_DWORD *)(v37 + 16), (uint64_t)v192, HIDWORD(v193));
          v204 = (uint64_t)v206;
          v205 = 2;
          v200 = (WTF *)v202;
          v201 = 2;
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching((uint64_t)this, (uint64_t)&v204, (uint64_t)&v200, v37, v53);
          WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures((uint64_t)this, a2, *(_DWORD *)(v37 + 20), v204, HIDWORD(v205));
          WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures((uint64_t)this, a2, *(_DWORD *)(v37 + 24), (uint64_t)v200, HIDWORD(v201));
          if ((*(_BYTE *)(v37 + 28) & 4) != 0)
          {
            if (*((_BYTE *)this + 3176))
            {
              v54 = *((_QWORD *)this + 409);
              if (*((_QWORD *)this + 408) == v54)
              {
                __break(0xC471u);
                JUMPOUT(0x195931DE4);
              }
              if (!v54)
                v54 = *((unsigned int *)this + 822);
              v55 = *((unsigned int *)this + 799);
              if (!(_DWORD)v55)
              {
                __break(0xC471u);
                JUMPOUT(0x195931FBCLL);
              }
              v56 = *((_QWORD *)this + 410);
              v57 = *(_DWORD *)(*((_QWORD *)this + 398) + 4 * v55 - 4);
              *((_DWORD *)this + 799) = v55 - 1;
              *(_DWORD *)(v56 + 112 * v54 - 96) = v57;
              v58 = *((_DWORD *)this + 152);
              v59 = v58 >= v57;
              v60 = v58 - v57;
              if (!v59)
              {
                __break(0xC471u);
                JUMPOUT(0x195931E04);
              }
              JSC::MacroAssemblerARM64::store64((uint64_t)this + 160, 0, (v60 << 32) | 0x1F);
            }
            else
            {
              v89 = *((_QWORD *)this + 62);
              v88 = *((_QWORD *)this + 63);
              v90 = v88;
              if (v89 > v88)
                v90 = v88 + *((unsigned int *)this + 130);
              if (v90 == v89)
              {
                __break(0xC471u);
                JUMPOUT(0x195931E44);
              }
              if (v89 == v88)
              {
                __break(0xC471u);
                JUMPOUT(0x195931E64);
              }
              v91 = *(unsigned __int8 *)(*((_QWORD *)this + 64) + v89);
              v203 = *(_BYTE *)(*((_QWORD *)this + 64) + v89);
              if (v89 == *((unsigned int *)this + 130) - 1)
                v92 = 0;
              else
                v92 = v89 + 1;
              *((_QWORD *)this + 62) = v92;
              v93 = *((unsigned int *)this + 139);
              if ((_DWORD)v93 == *((_DWORD *)this + 138))
              {
                v141 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v186, (WTF *)(v93 + 1), (unint64_t)&v203);
                v93 = *((unsigned int *)this + 139);
                *(_BYTE *)(*((_QWORD *)this + 68) + v93) = *v141;
                v91 = v203;
              }
              else
              {
                *(_BYTE *)(*v186 + v93) = v91;
              }
              *((_DWORD *)this + 139) = v93 + 1;
              *((_BYTE *)this + 3177) = v91;
              if (v91)
              {
                if (v91 == 31)
                  v94 = -1862270945;
                else
                  v94 = v91 | 0xAA0003E0;
                v95 = *((_DWORD *)this + 90);
                if (v95 + 4 > *((_DWORD *)this + 88))
                {
                  v6 = JSC::AssemblerBuffer::outOfLineGrow(v184);
                  v95 = *((_DWORD *)this + 90);
                }
                *(_DWORD *)(*((_QWORD *)this + 27) + v95) = v94;
                *((_DWORD *)this + 90) += 4;
              }
              *((_BYTE *)this + 3176) = 1;
            }
          }
          v96 = v200;
          if (v202 != (_BYTE *)v200 && v200)
          {
            v200 = 0;
            LODWORD(v201) = 0;
            WTF::fastFree(v96, a2);
          }
          goto LABEL_145;
        case 3:
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacent((uint64_t)this, a2, v37);
          if (*((_DWORD *)this + 286) != 1)
          {
            v63 = *((_QWORD *)this + 62);
            v62 = *((_QWORD *)this + 63);
            v64 = *((unsigned int *)this + 130);
            if (v63 <= v62)
              v65 = 0;
            else
              v65 = *((unsigned int *)this + 130);
            if (v65 + v62 == v63)
            {
              __break(0xC471u);
              JUMPOUT(0x195931CA4);
            }
            if (v63 == v62)
            {
              __break(0xC471u);
              JUMPOUT(0x195931CE4);
            }
            v66 = *(_BYTE *)(*((_QWORD *)this + 64) + v63);
            LOBYTE(v192) = v66;
            if (v63 == v64 - 1)
              v67 = 0;
            else
              v67 = v63 + 1;
            *((_QWORD *)this + 62) = v67;
            v68 = *((unsigned int *)this + 139);
            if ((_DWORD)v68 == *((_DWORD *)this + 138))
            {
              v139 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v186, (WTF *)(v68 + 1), (unint64_t)&v192);
              v68 = *((unsigned int *)this + 139);
              *(_BYTE *)(*((_QWORD *)this + 68) + v68) = *v139;
              v66 = v192;
            }
            else
            {
              *(_BYTE *)(*v186 + v68) = v66;
            }
            *((_DWORD *)this + 139) = v68 + 1;
            v69 = v66;
            WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v192, (uint64_t)this, v66);
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation((uint64_t)this, v69, 0, 3u, 0);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v192, (uint64_t)this + 160);
            WebCore::RegisterAllocator::deallocateRegister(v185, v69);
          }
          v192 = (WTF *)&v194;
          v193 = 2;
          v204 = (uint64_t)v206;
          v205 = 2;
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching((uint64_t)this, (uint64_t)&v192, (uint64_t)&v204, v37, v61);
          WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures((uint64_t)this, a2, *(_DWORD *)(v37 + 20), (uint64_t)v192, HIDWORD(v193));
          WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures((uint64_t)this, a2, *(_DWORD *)(v37 + 24), v204, HIDWORD(v205));
          if ((*(_BYTE *)(v37 + 28) & 8) != 0)
          {
            v70 = *((_QWORD *)this + 409);
            if (*((_QWORD *)this + 408) == v70)
            {
              __break(0xC471u);
              JUMPOUT(0x195931D84);
            }
            if (!v70)
              v70 = *((unsigned int *)this + 822);
            v71 = *((unsigned int *)this + 799);
            if (!(_DWORD)v71)
            {
              __break(0xC471u);
              JUMPOUT(0x195931FB4);
            }
            v72 = *((_QWORD *)this + 410);
            v73 = *(_DWORD *)(*((_QWORD *)this + 398) + 4 * v71 - 4);
            *((_DWORD *)this + 799) = v71 - 1;
            *(_DWORD *)(v72 + 112 * v70 - 48) = v73;
            v74 = *((_DWORD *)this + 152);
            v59 = v74 >= v73;
            v75 = v74 - v73;
            if (!v59)
            {
              __break(0xC471u);
              JUMPOUT(0x195931DC4);
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)this + 160, 0, (v75 << 32) | 0x1F);
          }
LABEL_145:
          v97 = (WTF *)v204;
          if (v206 != (_BYTE *)v204 && v204)
          {
            v204 = 0;
            LODWORD(v205) = 0;
            WTF::fastFree(v97, a2);
          }
          v98 = v192;
          if (&v194 != (uint64_t *)v192 && v192)
          {
            v192 = 0;
            LODWORD(v193) = 0;
            WTF::fastFree(v98, a2);
          }
          break;
        case 4:
          for (k = *((_DWORD *)this + 90); ; *((_DWORD *)this + 90) = k)
          {
            v40 = *((_DWORD *)this + 53);
            if (k >= v40)
              break;
            if ((k + 4) > *((_DWORD *)this + 88))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v184);
              k = *((_DWORD *)this + 90);
            }
            *(_DWORD *)(*((_QWORD *)this + 27) + k) = -721215457;
            k = *((_DWORD *)this + 90) + 4;
          }
          *((_DWORD *)this + 92) = 0;
          if ((*(_BYTE *)(v37 + 28) & 2) != 0)
          {
            v41 = k;
            if (k < v40)
            {
              v41 = k;
              do
              {
                if ((v41 + 4) > *((_DWORD *)this + 88))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v184);
                  v41 = *((_DWORD *)this + 90);
                }
                *(_DWORD *)(*((_QWORD *)this + 27) + v41) = -721215457;
                v41 = *((_DWORD *)this + 90) + 4;
                *((_DWORD *)this + 90) = v41;
              }
              while (v41 < *((_DWORD *)this + 53));
            }
            *((_DWORD *)this + 92) = 0;
            v42 = *((_QWORD *)this + 409);
            if (*((_QWORD *)this + 408) == v42)
            {
              __break(0xC471u);
              JUMPOUT(0x195931D24);
            }
            if (!v42)
              v42 = *((unsigned int *)this + 822);
            *(_DWORD *)(*((_QWORD *)this + 410) + 112 * v42 - 100) = v41;
          }
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacent((uint64_t)this, a2, v37);
          if (*((_DWORD *)this + 286) != 1)
          {
            v45 = *((_QWORD *)this + 62);
            v44 = *((_QWORD *)this + 63);
            v46 = *((unsigned int *)this + 130);
            if (v45 <= v44)
              v47 = 0;
            else
              v47 = *((unsigned int *)this + 130);
            if (v47 + v44 == v45)
            {
              __break(0xC471u);
              JUMPOUT(0x195931CC4);
            }
            if (v45 == v44)
            {
              __break(0xC471u);
              JUMPOUT(0x195931D04);
            }
            v48 = *(_BYTE *)(*((_QWORD *)this + 64) + v45);
            LOBYTE(v192) = v48;
            if (v45 == v46 - 1)
              v49 = 0;
            else
              v49 = v45 + 1;
            *((_QWORD *)this + 62) = v49;
            v50 = *((unsigned int *)this + 139);
            if ((_DWORD)v50 == *((_DWORD *)this + 138))
            {
              v140 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v186, (WTF *)(v50 + 1), (unint64_t)&v192);
              v50 = *((unsigned int *)this + 139);
              *(_BYTE *)(*((_QWORD *)this + 68) + v50) = *v140;
              v48 = v192;
            }
            else
            {
              *(_BYTE *)(*v186 + v50) = v48;
            }
            *((_DWORD *)this + 139) = v50 + 1;
            v51 = v48;
            WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v192, (uint64_t)this, v48);
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation((uint64_t)this, v51, 0, 3u, 0);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v192, (uint64_t)this + 160);
            WebCore::RegisterAllocator::deallocateRegister(v185, v51);
          }
          if ((*(_BYTE *)(v37 + 28) & 2) != 0)
          {
            for (m = *((_DWORD *)this + 90); m < *((_DWORD *)this + 53); *((_DWORD *)this + 90) = m)
            {
              if ((m + 4) > *((_DWORD *)this + 88))
              {
                v43 = JSC::AssemblerBuffer::outOfLineGrow(v184);
                m = *((_DWORD *)this + 90);
              }
              *(_DWORD *)(*((_QWORD *)this + 27) + m) = -721215457;
              m = *((_DWORD *)this + 90) + 4;
            }
            *((_DWORD *)this + 92) = 0;
            v85 = *((_QWORD *)this + 409);
            if (*((_QWORD *)this + 408) == v85)
            {
              __break(0xC471u);
              JUMPOUT(0x195931DA4);
            }
            if (!v85)
              v85 = *((unsigned int *)this + 822);
            *(_DWORD *)(*((_QWORD *)this + 410) + 112 * v85 - 108) = m;
          }
          v192 = (WTF *)&v194;
          v193 = 2;
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching((uint64_t)this, (uint64_t)&v192, (uint64_t)&v192, v37, v43);
          v83 = (unsigned int *)v192;
          if (HIDWORD(v193))
          {
            v86 = 12 * HIDWORD(v193);
            do
            {
              LODWORD(v204) = k;
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v83, (unsigned int *)&v204, (uint64_t)this + 160);
              v83 += 3;
              v86 -= 12;
            }
            while (v86);
LABEL_119:
            v83 = (unsigned int *)v192;
          }
LABEL_120:
          if (&v194 != (uint64_t *)v83 && v83 != 0)
          {
            v192 = 0;
            LODWORD(v193) = 0;
            WTF::fastFree((WTF *)v83, a2);
          }
          break;
        default:
          break;
      }
      if ((*(_DWORD *)v37 - 3) <= 1 && (*(_DWORD *)(v37 + 4) - 5) <= 0xFFFFFFFD)
      {
        v100 = *((_DWORD *)this + 286);
        if (*(_QWORD *)(v37 + 4))
        {
          if (v100 == 1)
            goto LABEL_181;
          v111 = *((_QWORD *)this + 62);
          v112 = *((_QWORD *)this + 63);
          v113 = *((unsigned int *)this + 130);
          if (v111 <= v112)
            v114 = 0;
          else
            v114 = *((unsigned int *)this + 130);
          if (v114 + v112 == v111)
          {
            __break(0xC471u);
            JUMPOUT(0x195931C24);
          }
          if (v111 == v112)
          {
            __break(0xC471u);
            JUMPOUT(0x195931C64);
          }
          v105 = *(_BYTE *)(*((_QWORD *)this + 64) + v111);
          LOBYTE(v192) = v105;
          if (v111 == v113 - 1)
            v115 = 0;
          else
            v115 = v111 + 1;
          *((_QWORD *)this + 62) = v115;
          v116 = *((unsigned int *)this + 139);
          if ((_DWORD)v116 == *((_DWORD *)this + 138))
          {
            v138 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v186, (WTF *)(v116 + 1), (unint64_t)&v192);
            v116 = *((unsigned int *)this + 139);
            *(_BYTE *)(*((_QWORD *)this + 68) + v116) = *v138;
            v105 = v192;
          }
          else
          {
            *(_BYTE *)(*v186 + v116) = v105;
          }
          *((_DWORD *)this + 139) = v116 + 1;
          WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v192, (uint64_t)this, v105);
          v108 = this;
          v109 = v105;
          v110 = 2;
        }
        else
        {
          if (v100 == 1)
            goto LABEL_181;
          v101 = *((_QWORD *)this + 62);
          v102 = *((_QWORD *)this + 63);
          v103 = *((unsigned int *)this + 130);
          if (v101 <= v102)
            v104 = 0;
          else
            v104 = *((unsigned int *)this + 130);
          if (v104 + v102 == v101)
          {
            __break(0xC471u);
            JUMPOUT(0x195931C44);
          }
          if (v101 == v102)
          {
            __break(0xC471u);
            JUMPOUT(0x195931C84);
          }
          v105 = *(_BYTE *)(*((_QWORD *)this + 64) + v101);
          LOBYTE(v192) = v105;
          if (v101 == v103 - 1)
            v106 = 0;
          else
            v106 = v101 + 1;
          *((_QWORD *)this + 62) = v106;
          v107 = *((unsigned int *)this + 139);
          if ((_DWORD)v107 == *((_DWORD *)this + 138))
          {
            v137 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v186, (WTF *)(v107 + 1), (unint64_t)&v192);
            v107 = *((unsigned int *)this + 139);
            *(_BYTE *)(*((_QWORD *)this + 68) + v107) = *v137;
            v105 = v192;
          }
          else
          {
            *(_BYTE *)(*v186 + v107) = v105;
          }
          *((_DWORD *)this + 139) = v107 + 1;
          WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v192, (uint64_t)this, v105);
          v108 = this;
          v109 = v105;
          v110 = 1;
        }
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation((uint64_t)v108, v109, 0, v110, 0);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v192, (uint64_t)this + 160);
        WebCore::RegisterAllocator::deallocateRegister(v185, v105);
      }
LABEL_181:
      v117 = *(unsigned __int8 *)(v37 + 28);
      if ((~v117 & 0x30) == 0)
      {
        for (n = *((_DWORD *)this + 90); (signed int)n < *((_DWORD *)this + 53); *((_DWORD *)this + 90) = n)
        {
          if (n + 4 > *((_DWORD *)this + 88))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v184);
            n = *((_DWORD *)this + 90);
          }
          *(_DWORD *)(*((_QWORD *)this + 27) + n) = -721215457;
          n = *((_DWORD *)this + 90) + 4;
        }
        v120 = n;
        if (n + 4 > *((_DWORD *)this + 88))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v184);
          v120 = *((_DWORD *)this + 90);
        }
        *(_DWORD *)(*((_QWORD *)this + 27) + v120) = 335544320;
        *((_DWORD *)this + 90) += 4;
        if (*((_BYTE *)this + 488))
          v121 = 69;
        else
          v121 = 65;
        v192 = (WTF *)n;
        LOBYTE(v193) = v121;
        *(_WORD *)((char *)&v193 + 1) = 15;
        BYTE3(v193) = -1;
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateAdjacentBacktrackingTail(this, a2);
        goto LABEL_200;
      }
      if ((v117 & 0x10) != 0)
      {
        for (ii = *((_DWORD *)this + 90); (signed int)ii < *((_DWORD *)this + 53); *((_DWORD *)this + 90) = ii)
        {
          if (ii + 4 > *((_DWORD *)this + 88))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v184);
            ii = *((_DWORD *)this + 90);
          }
          *(_DWORD *)(*((_QWORD *)this + 27) + ii) = -721215457;
          ii = *((_DWORD *)this + 90) + 4;
        }
        v123 = ii;
        if (ii + 4 > *((_DWORD *)this + 88))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v184);
          v123 = *((_DWORD *)this + 90);
        }
        *(_DWORD *)(*((_QWORD *)this + 27) + v123) = 335544320;
        *((_DWORD *)this + 90) += 4;
        if (*((_BYTE *)this + 488))
          v124 = 69;
        else
          v124 = 65;
        v192 = (WTF *)ii;
        LOBYTE(v193) = v124;
        *(_WORD *)((char *)&v193 + 1) = 15;
        BYTE3(v193) = -1;
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateAdjacentBacktrackingTail(this, a2);
        for (jj = *((_DWORD *)this + 90); (signed int)jj < *((_DWORD *)this + 53); *((_DWORD *)this + 90) = jj)
        {
          if (jj + 4 > *((_DWORD *)this + 88))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v184);
            jj = *((_DWORD *)this + 90);
          }
          *(_DWORD *)(*((_QWORD *)this + 27) + jj) = -721215457;
          jj = *((_DWORD *)this + 90) + 4;
        }
        v126 = jj;
        if (jj + 4 > *((_DWORD *)this + 88))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v184);
          v126 = *((_DWORD *)this + 90);
        }
        *(_DWORD *)(*((_QWORD *)this + 27) + v126) = 335544320;
        *((_DWORD *)this + 90) += 4;
        if (*((_BYTE *)this + 488))
          v127 = 69;
        else
          v127 = 65;
        v204 = jj;
        LOBYTE(v205) = v127;
        *(_WORD *)((char *)&v205 + 1) = 15;
        BYTE3(v205) = -1;
        if (jj != -1)
        {
          v128 = a2[3];
          if ((_DWORD)v128 == a2[2])
          {
            v129 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, (void *)(v128 + 1), (unint64_t)&v204);
            v131 = *(_DWORD *)v129;
            v130 = v129 + 4;
            v132 = (_DWORD *)(*(_QWORD *)a2 + 12 * a2[3]);
            *v132 = v131;
            v133 = v132 + 1;
          }
          else
          {
            v136 = (unsigned int *)(*(_QWORD *)a2 + 12 * v128);
            *v136 = jj;
            v133 = v136 + 1;
            v130 = (uint64_t *)((char *)&v204 + 4);
          }
          *v133 = *v130;
          ++a2[3];
        }
        goto LABEL_201;
      }
      if ((v117 & 0x20) != 0)
      {
        for (kk = *((_DWORD *)this + 90); (signed int)kk < *((_DWORD *)this + 53); *((_DWORD *)this + 90) = kk)
        {
          if (kk + 4 > *((_DWORD *)this + 88))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v184);
            kk = *((_DWORD *)this + 90);
          }
          *(_DWORD *)(*((_QWORD *)this + 27) + kk) = -721215457;
          kk = *((_DWORD *)this + 90) + 4;
        }
        v134 = kk;
        if (kk + 4 > *((_DWORD *)this + 88))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v184);
          v134 = *((_DWORD *)this + 90);
        }
        *(_DWORD *)(*((_QWORD *)this + 27) + v134) = 335544320;
        *((_DWORD *)this + 90) += 4;
        if (*((_BYTE *)this + 488))
          v135 = 69;
        else
          v135 = 65;
        v192 = (WTF *)kk;
        LOBYTE(v193) = v135;
        *(_WORD *)((char *)&v193 + 1) = 15;
        BYTE3(v193) = -1;
LABEL_200:
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateDescendantBacktrackingTail(this);
LABEL_201:
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v192, (uint64_t)this + 160);
      }
      v37 += 496;
    }
    while (v37 != v38);
  }
  v142 = *((_QWORD *)this + 409);
  if (*((_QWORD *)this + 408) == v142)
  {
    __break(0xC471u);
    JUMPOUT(0x195931E24);
  }
  v143 = *((_QWORD *)this + 409);
  if (!v142)
    v143 = *((unsigned int *)this + 822);
  v144 = v143 - 1;
  v145 = *((_QWORD *)this + 410);
  v146 = v145 + 112 * v144;
  v187 = (WTF *)v188;
  v147 = v146 + 40;
  v150 = *(_QWORD *)(v146 + 24);
  v149 = (_QWORD *)(v146 + 24);
  v148 = v150;
  if (v150 == v147)
  {
    v151 = *(_DWORD *)(v145 + 112 * v144 + 36);
    if (v151)
    {
      v152 = v148 + 12 * v151;
      v153 = v188;
      do
      {
        *v153 = *(_DWORD *)v148;
        *(_QWORD *)(v153 + 1) = *(_QWORD *)(v148 + 4);
        v148 += 12;
        v153 += 3;
      }
      while (v148 != v152);
    }
  }
  else
  {
    *v149 = v147;
    v187 = (WTF *)v148;
    *(_DWORD *)(v145 + 112 * v144 + 32) = 2;
  }
  v154 = v145 + 112 * v144;
  v189 = (WTF *)v191;
  v157 = *(_QWORD **)(v154 + 72);
  v156 = (_QWORD *)(v154 + 72);
  v155 = v157;
  *((_DWORD *)v156 - 9) = 0;
  v188[6] = *((_DWORD *)v156 - 2);
  v190 = 2;
  if (v157 == v156 + 2)
  {
    v160 = *(_DWORD *)(v145 + 112 * v144 + 84);
    if (v160)
    {
      v161 = (_QWORD *)((char *)v155 + 12 * v160);
      v162 = v191;
      do
      {
        *(_DWORD *)v162 = *(_DWORD *)v155;
        *(_QWORD *)(v162 + 4) = *(_QWORD *)((char *)v155 + 4);
        v155 = (_QWORD *)((char *)v155 + 12);
        v162 += 12;
      }
      while (v155 != v161);
    }
  }
  else
  {
    *v156 = v156 + 2;
    v189 = (WTF *)v155;
    v158 = v145 + 112 * v144;
    v159 = *(_DWORD *)(v158 + 80);
    *(_DWORD *)(v158 + 80) = 2;
    LODWORD(v190) = v159;
    v160 = *(_DWORD *)(v158 + 84);
  }
  *(_DWORD *)(v145 + 112 * v144 + 84) = 0;
  HIDWORD(v190) = v160;
  if (!v142)
    v142 = *((unsigned int *)this + 822);
  v163 = v142 - 1;
  *((_QWORD *)this + 409) = v142 - 1;
  v164 = *((_QWORD *)this + 410);
  v165 = v164 + 112 * (v142 - 1);
  v168 = *(WTF **)(v165 + 72);
  v167 = (_QWORD *)(v165 + 72);
  v166 = v168;
  if (v167 + 2 != (_QWORD *)v168 && v166 != 0)
  {
    *v167 = 0;
    *(_DWORD *)(v164 + 112 * v163 + 80) = 0;
    WTF::fastFree(v166, a2);
  }
  v170 = v164 + 112 * v163;
  v173 = *(WTF **)(v170 + 24);
  v172 = (_QWORD *)(v170 + 24);
  v171 = v173;
  if (v172 + 2 != (_QWORD *)v173 && v171 != 0)
  {
    *v172 = 0;
    *(_DWORD *)(v164 + 112 * v163 + 32) = 0;
    WTF::fastFree(v171, a2);
  }
  v175 = v189;
  if (v191 != (_BYTE *)v189 && v189)
  {
    v189 = 0;
    LODWORD(v190) = 0;
    WTF::fastFree(v175, a2);
  }
  result = v187;
  if (v188 != (_DWORD *)v187 && v187)
    return (WTF *)WTF::fastFree(v187, a2);
  return result;
}

unsigned int *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(unsigned int *result, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  __int16 v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  JSC::AssemblerBuffer *v23;
  JSC::AssemblerBuffer *v24;
  JSC::AssemblerBuffer *v25;
  JSC::AssemblerBuffer *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  __int128 v31;
  uint64_t v32;

  *(_DWORD *)(a2 + 208) = 0;
  v3 = *((unsigned __int8 *)result + 8);
  switch(*((_BYTE *)result + 8))
  {
    case 0x83:
    case 0x87:
      v4 = *result;
      v5 = *(_DWORD *)(a2 + 200);
      if (v5 < *(_DWORD *)(a2 + 52))
      {
        v23 = (JSC::AssemblerBuffer *)(a2 + 56);
        do
        {
          if ((v5 + 4) > *(_DWORD *)(a2 + 192))
          {
            v25 = v23;
            v28 = result;
            JSC::AssemblerBuffer::outOfLineGrow(v23);
            v23 = v25;
            result = v28;
            v5 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v5) = -721215457;
          v5 = *(_DWORD *)(a2 + 200) + 4;
          *(_DWORD *)(a2 + 200) = v5;
        }
        while (v5 < *(_DWORD *)(a2 + 52));
        v3 = *((unsigned __int8 *)result + 8);
      }
      v6 = (_QWORD *)(a2 + 32);
      v7 = *((_BYTE *)result + 9);
      v8 = *((unsigned __int8 *)result + 10);
      v9 = *((_BYTE *)result + 11);
      *(_QWORD *)&v31 = v4;
      *((_QWORD *)&v31 + 1) = v5;
      BYTE3(v32) = v7 & 0xF;
      *(_WORD *)((char *)&v32 + 1) = v3;
      v10 = v8 << 6;
      goto LABEL_6;
    case 0x84:
    case 0x88:
      v11 = *result;
      v12 = *(_DWORD *)(a2 + 200);
      if (v12 < *(_DWORD *)(a2 + 52))
      {
        v24 = (JSC::AssemblerBuffer *)(a2 + 56);
        do
        {
          if ((v12 + 4) > *(_DWORD *)(a2 + 192))
          {
            v26 = v24;
            v29 = result;
            JSC::AssemblerBuffer::outOfLineGrow(v24);
            v24 = v26;
            result = v29;
            v12 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = -721215457;
          v12 = *(_DWORD *)(a2 + 200) + 4;
          *(_DWORD *)(a2 + 200) = v12;
        }
        while (v12 < *(_DWORD *)(a2 + 52));
        v3 = *((unsigned __int8 *)result + 8);
      }
      v6 = (_QWORD *)(a2 + 32);
      v13 = *((_BYTE *)result + 9);
      v14 = *((_WORD *)result + 2);
      v9 = *((_BYTE *)result + 11);
      *(_QWORD *)&v31 = v11;
      *((_QWORD *)&v31 + 1) = v12;
      BYTE3(v32) = v13 & 0xF;
      *(_WORD *)((char *)&v32 + 1) = v3;
      v10 = v14 & 0x3F;
LABEL_6:
      WORD2(v32) = v10;
      LOBYTE(v32) = v9;
      v15 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v15 != *(_DWORD *)(a2 + 40))
        goto LABEL_7;
      result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v15 + 1, (unint64_t)&v31);
      v16 = *(_QWORD *)(a2 + 32) + 24 * *(unsigned int *)(a2 + 44);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      *(_BYTE *)(v16 + 16) = -1;
      goto LABEL_13;
    default:
      v19 = *result;
      v20 = *(_DWORD *)(a2 + 200);
      if (v20 < *(_DWORD *)(a2 + 52))
      {
        do
        {
          if ((v20 + 4) > *(_DWORD *)(a2 + 192))
          {
            v27 = v19;
            v30 = result;
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
            v19 = v27;
            result = v30;
            v20 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = -721215457;
          v20 = *(_DWORD *)(a2 + 200) + 4;
          *(_DWORD *)(a2 + 200) = v20;
        }
        while (v20 < *(_DWORD *)(a2 + 52));
        v3 = *((unsigned __int8 *)result + 8);
      }
      v6 = (_QWORD *)(a2 + 32);
      v21 = *((_BYTE *)result + 9);
      LOBYTE(v32) = -1;
      *(_QWORD *)&v31 = v19;
      *((_QWORD *)&v31 + 1) = v20;
      BYTE3(v32) = v21 & 0xF;
      *(_WORD *)((char *)&v32 + 1) = v3;
      WORD2(v32) = 0;
      v15 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v15 == *(_DWORD *)(a2 + 40))
      {
        result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 32, v15 + 1, (unint64_t)&v31);
        v16 = *(_QWORD *)(a2 + 32) + 24 * *(unsigned int *)(a2 + 44);
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_BYTE *)(v16 + 16) = -1;
LABEL_13:
        v22 = (*(unsigned __int8 *)(v16 + 19) << 16) | 0xF0000;
        *(_WORD *)(v16 + 17) = 65;
        *(_BYTE *)(v16 + 19) = BYTE2(v22);
        *(_WORD *)(v16 + 20) &= 0xFC00u;
        v17 = *(_OWORD *)result;
        v18 = *((_QWORD *)result + 2);
      }
      else
      {
LABEL_7:
        v16 = *v6 + 24 * v15;
        v17 = v31;
        v18 = v32;
      }
      *(_QWORD *)(v16 + 16) = v18;
      *(_OWORD *)v16 = v17;
      ++*(_DWORD *)(a2 + 44);
      return result;
  }
}

unsigned int *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = 12 * v2;
    while (v6 < v4[3])
    {
      result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v4 + v5), a2);
      ++v6;
      v5 += 12;
      if (v7 == v5)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

WTF *WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatchesSelectorList(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  uint64_t *v4;
  int v6;
  _BYTE *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  _BYTE *v22;
  _BYTE *v23;
  _DWORD *v24;
  void *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  WTF *v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  int v42;
  _BYTE *v43;
  int i;
  unsigned int v45;
  char v46;
  char *v47;
  int *v48;
  int v49;
  _DWORD *v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  WTF *v60;
  char *v61;
  WTF *v62;
  WTF *v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  WTF *v68;
  _BYTE *v70;
  _BYTE *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  int j;
  unsigned int v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int k;
  unsigned int v87;
  char v88;
  uint64_t v89;
  char *v90;
  int *v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  WTF *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  WTF *v101;
  int v102;
  uint64_t v103;
  char v104;
  WTF *v105;
  unint64_t v106;
  uint64_t v107;
  WTF *v108;
  WTF *v109;
  WTF *v111;
  WTF *result;
  JSC::AssemblerBuffer *v114;
  _BYTE *v115;
  uint64_t v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  int v122;
  char v123;
  __int16 v124;
  char v125;
  unsigned int v126[2];
  char v127;
  __int16 v128;
  char v129;
  int v130;
  int v131;
  char v132;
  __int16 v133;
  char v134;
  WTF *v135[2];
  _BYTE v136[32];
  WTF *v137[2];
  _BYTE v138[24];
  WTF *v139;
  uint64_t v140;
  _BYTE v141[24];
  uint64_t *v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  _BYTE v148[32];

  v4 = a4;
  v6 = a3;
  v7 = v148;
  v146 = v148;
  v147 = 16;
  v118 = *((unsigned __int8 *)a4 + 24);
  if (*((_BYTE *)a4 + 24))
  {
    v148[0] = 0;
    if (a3)
    {
      v148[1] = a3;
      v8 = 1;
      v9 = 2;
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v10 = 0;
      v9 = 1;
    }
  }
  else
  {
    if (!a3)
    {
      v9 = 0;
      v8 = 0;
      v10 = 0xFFFFFFFFLL;
      goto LABEL_8;
    }
    v8 = 0;
    v148[0] = 0;
    v9 = 1;
    v10 = 0xFFFFFFFFLL;
  }
  HIDWORD(v147) = v9;
LABEL_8:
  v11 = *(_QWORD *)(a1 + 496);
  v12 = *(_QWORD *)(a1 + 504);
  if (v11 > v12)
    LODWORD(v12) = v12 + *(_DWORD *)(a1 + 520);
  v13 = v12 - v11;
  if (v8)
    v14 = 2;
  else
    v14 = 1;
  v15 = v14 + v13;
  v16 = *((_DWORD *)a4 + 4);
  v17 = v16 - v15;
  if (v16 > v15)
  {
    v18 = *(unsigned int *)(a1 + 556);
    if ((_DWORD)v18)
    {
      v19 = *(_BYTE **)(a1 + 544);
      v20 = v148;
      do
      {
        LOBYTE(v142) = 0;
        LOBYTE(v142) = *v19;
        if (v142 == v6)
          v21 = v8;
        else
          v21 = 0;
        if ((_BYTE)v142 && (v21 & 1) == 0)
        {
          if (v9 == (_DWORD)v147)
          {
            v22 = v7;
            v23 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v146, (WTF *)(v9 + 1), (unint64_t)&v142);
            v9 = HIDWORD(v147);
            v20 = v146;
            v7 = v22;
            v146[HIDWORD(v147)] = *v23;
          }
          else
          {
            v20[v9] = (_BYTE)v142;
          }
          HIDWORD(v147) = ++v9;
          if (!--v17)
            break;
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
  }
  v115 = v7;
  v24 = (_DWORD *)(a1 + 600);
  WebCore::StackAllocator::push<16ul,WTF::CrashOnOverflow>((uint64_t)&v142, (_BYTE *)(a1 + 600), (uint64_t)&v146);
  v26 = HIDWORD(v147);
  if (HIDWORD(v147))
  {
    v27 = v146;
    do
    {
      if (*v27)
        WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), *v27);
      ++v27;
      --v26;
    }
    while (v26);
  }
  v28 = a2;
  if (v6)
  {
    if (v6 == 31)
    {
      v29 = -1862269984;
    }
    else if (v6 == 63)
    {
      v29 = -763363328;
    }
    else
    {
      v29 = ((v6 & 0x1F) << 16) | 0xAA0003E0;
    }
    v30 = (unsigned int *)(a1 + 360);
    v31 = *(_DWORD *)(a1 + 360);
    if (v31 + 4 > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
      v31 = *v30;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v31) = v29;
    *v30 += 4;
  }
  v139 = (WTF *)v141;
  v140 = 2;
  v32 = *((_DWORD *)v4 + 3);
  v120 = (v32 - 1);
  if (v32 == 1)
  {
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateSelectorCheckerExcludingPseudoElements((WebCore::SelectorCompiler::SelectorCodeGenerator *)a1);
    goto LABEL_107;
  }
  v137[0] = (WTF *)v138;
  v137[1] = (WTF *)2;
  if (!v32)
    goto LABEL_102;
  v117 = v10;
  v33 = 0;
  v114 = (JSC::AssemblerBuffer *)(a1 + 216);
  v119 = v4;
  do
  {
    v34 = *v4;
    v135[0] = (WTF *)v136;
    v135[1] = (WTF *)2;
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateSelectorCheckerExcludingPseudoElements((WebCore::SelectorCompiler::SelectorCodeGenerator *)a1);
    if (v33 == v120)
    {
      v35 = HIDWORD(v135[1]);
      if (!HIDWORD(v135[1]))
        goto LABEL_92;
      v36 = v135[0];
      v37 = HIDWORD(v140);
      v38 = HIDWORD(v140) + (unint64_t)HIDWORD(v135[1]);
      if (v38 <= v140)
        goto LABEL_88;
      v39 = v140 + ((unint64_t)v140 >> 2);
      if (v39 >= 0x10)
        v40 = v39 + 1;
      else
        v40 = 16;
      if (v40 <= v38)
        v40 = HIDWORD(v140) + (unint64_t)HIDWORD(v135[1]);
      v41 = v139;
      if (v40 < 3)
      {
        v43 = v141;
        v139 = (WTF *)v141;
        LODWORD(v140) = 2;
        if (!HIDWORD(v140))
          goto LABEL_83;
      }
      else
      {
        if (v40 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x19593305CLL);
        }
        v42 = 12 * v40;
        v43 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v40));
        LODWORD(v140) = (v42 & 0xFFFFFFFC) / 0xC;
        v139 = (WTF *)v43;
        v4 = v119;
        if (!v37)
          goto LABEL_83;
      }
      v60 = v41;
      do
      {
        *(_DWORD *)v43 = *(_DWORD *)v60;
        *(_QWORD *)(v43 + 4) = *(_QWORD *)((char *)v60 + 4);
        v60 = (WTF *)((char *)v60 + 12);
        v43 += 12;
      }
      while (v60 != (WTF *)((char *)v41 + 12 * v37));
LABEL_83:
      if (v141 != (_BYTE *)v41 && v41)
      {
        if (v139 == v41)
        {
          v139 = 0;
          LODWORD(v140) = 0;
        }
        WTF::fastFree(v41, v25);
      }
LABEL_88:
      if (v38 < HIDWORD(v140))
      {
        __break(0xC471u);
        JUMPOUT(0x195933054);
      }
      v61 = (char *)v139 + 12 * HIDWORD(v140);
      v62 = (WTF *)((char *)v36 + 12 * v35);
      do
      {
        *(_DWORD *)v61 = *(_DWORD *)v36;
        *(_QWORD *)(v61 + 4) = *(_QWORD *)((char *)v36 + 4);
        v36 = (WTF *)((char *)v36 + 12);
        v61 += 12;
      }
      while (v36 != v62);
      HIDWORD(v140) = v38;
      goto LABEL_92;
    }
    for (i = *(_DWORD *)(a1 + 360); i < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v114);
        i = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + i) = -721215457;
      i = *(_DWORD *)(a1 + 360) + 4;
    }
    v45 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v114);
      v45 = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v45) = 335544320;
    *(_DWORD *)(a1 + 360) += 4;
    if (*(_BYTE *)(a1 + 488))
      v46 = 69;
    else
      v46 = 65;
    v130 = i;
    v131 = 0;
    v132 = v46;
    v133 = 15;
    v134 = -1;
    if (i != -1)
    {
      if (HIDWORD(v137[1]) == LODWORD(v137[1]))
      {
        v47 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, (void *)(HIDWORD(v137[1]) + 1), (unint64_t)&v130);
        v49 = *(_DWORD *)v47;
        v48 = (int *)(v47 + 4);
        v50 = (_DWORD *)((char *)v137[0] + 12 * HIDWORD(v137[1]));
        *v50 = v49;
        v51 = v50 + 1;
      }
      else
      {
        v52 = (int *)((char *)v137[0] + 12 * HIDWORD(v137[1]));
        *v52 = i;
        v51 = v52 + 1;
        v48 = &v131;
      }
      *v51 = *(_QWORD *)v48;
      ++HIDWORD(v137[1]);
    }
    if (HIDWORD(v135[1]))
    {
      v53 = 0;
      v54 = 0;
      v55 = 12 * HIDWORD(v135[1]);
      do
      {
        if (v54 >= HIDWORD(v135[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x195933034);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v135[0] + v53), a1 + 160);
        ++v54;
        v53 += 12;
      }
      while (v55 != v53);
    }
    v4 = v119;
    if (*(_BYTE *)(v34 + 2016 * v33 + 2012))
    {
      if (!v118)
        goto LABEL_212;
      if (v144 <= v117)
      {
        __break(0xC471u);
        JUMPOUT(0x19593304CLL);
      }
      v56 = *((_DWORD *)v142 + v117);
      v57 = *(_DWORD *)(a1 + 608);
      v58 = v57 >= v56;
      v59 = v57 - v56;
      if (!v58)
      {
        __break(0xC471u);
        JUMPOUT(0x195932ECCLL);
      }
      JSC::MacroAssemblerARM64::load64(a1 + 160, (v59 << 32) | 0x1F, 0);
    }
LABEL_92:
    v63 = v135[0];
    if (v136 != (_BYTE *)v135[0] && v135[0] != 0)
    {
      v135[0] = 0;
      LODWORD(v135[1]) = 0;
      WTF::fastFree(v63, v25);
    }
    ++v33;
  }
  while (v33 < *((unsigned int *)v4 + 3));
  v28 = a2;
  v24 = (_DWORD *)(a1 + 600);
  if (HIDWORD(v137[1]))
  {
    v65 = 0;
    v66 = 0;
    v67 = 12 * HIDWORD(v137[1]);
    do
    {
      if (v66 >= HIDWORD(v137[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x195933044);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v137[0] + v65), a1 + 160);
      ++v66;
      v65 += 12;
    }
    while (v67 != v65);
  }
LABEL_102:
  v68 = v137[0];
  if (v138 != (_BYTE *)v137[0] && v137[0] != 0)
  {
    v137[0] = 0;
    LODWORD(v137[1]) = 0;
    WTF::fastFree(v68, v25);
  }
LABEL_107:
  if (HIDWORD(v147))
  {
    v70 = v146;
    v71 = &v146[HIDWORD(v147)];
    do
    {
      v72 = *v70;
      if (*v70)
      {
        LOBYTE(v137[0]) = *v70;
        v74 = *(_QWORD *)(a1 + 496);
        v73 = *(_QWORD *)(a1 + 504);
        if (v74 == v73)
        {
LABEL_190:
          __break(0xC471u);
          JUMPOUT(0x195932EECLL);
        }
        v75 = *(_QWORD *)(a1 + 512);
        v76 = *(_QWORD *)(a1 + 496);
        while (*(unsigned __int8 *)(v75 + v76) != v72)
        {
          v77 = *(unsigned int *)(a1 + 520);
          v76 += v77 + 1;
          do
            v76 -= v77;
          while (v76 >= v77);
          if (v73 == v76)
            goto LABEL_190;
        }
        if (v74 > v76)
        {
          memmove((void *)(v75 + v76), (const void *)(v75 + v76 + 1), v73 - (v76 + 1));
          *(_QWORD *)(a1 + 504) = (*(_QWORD *)(a1 + 504) + (unint64_t)*(unsigned int *)(a1 + 520) - 1)
                                % *(unsigned int *)(a1 + 520);
        }
        else
        {
          memmove((void *)(v75 + v74 + 1), (const void *)(v75 + v74), v76 - v74);
          *(_QWORD *)(a1 + 496) = (*(_QWORD *)(a1 + 496) + 1) % (unint64_t)*(unsigned int *)(a1 + 520);
        }
        v78 = *(unsigned int *)(a1 + 556);
        if ((_DWORD)v78 == *(_DWORD *)(a1 + 552))
        {
          v79 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v78 + 1), (unint64_t)v137);
          v78 = *(unsigned int *)(a1 + 556);
          *(_BYTE *)(*(_QWORD *)(a1 + 544) + v78) = *v79;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 544) + v78) = v72;
        }
        *(_DWORD *)(a1 + 556) = v78 + 1;
      }
      ++v70;
    }
    while (v70 != v71);
  }
  if (v144)
  {
    if (HIDWORD(v140))
    {
      *(_OWORD *)v137 = *(_OWORD *)v24;
      *(_OWORD *)v135 = *(_OWORD *)v24;
      WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(v137, (uint64_t)&v142, (uint64_t)&v146);
      for (j = *(_DWORD *)(a1 + 360); j < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = j)
      {
        if ((j + 4) > *(_DWORD *)(a1 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
          j = *(_DWORD *)(a1 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 216) + j) = -721215457;
        j = *(_DWORD *)(a1 + 360) + 4;
      }
      v81 = j;
      if ((j + 4) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v81 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v81) = 335544320;
      *(_DWORD *)(a1 + 360) += 4;
      if (*(_BYTE *)(a1 + 488))
        v82 = 69;
      else
        v82 = 65;
      v126[0] = j;
      v126[1] = 0;
      v127 = v82;
      v128 = 15;
      v129 = -1;
      if (HIDWORD(v140))
      {
        v83 = 0;
        v84 = 0;
        v85 = 12 * HIDWORD(v140);
        do
        {
          if (v84 >= HIDWORD(v140))
          {
            __break(0xC471u);
            JUMPOUT(0x19593303CLL);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v139 + v83), a1 + 160);
          ++v84;
          v83 += 12;
        }
        while (v85 != v83);
      }
      WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(v135, (uint64_t)&v142, (uint64_t)&v146);
      for (k = *(_DWORD *)(a1 + 360); k < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = k)
      {
        if ((k + 4) > *(_DWORD *)(a1 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
          k = *(_DWORD *)(a1 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 216) + k) = -721215457;
        k = *(_DWORD *)(a1 + 360) + 4;
      }
      v87 = k;
      if ((k + 4) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v87 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v87) = 335544320;
      *(_DWORD *)(a1 + 360) += 4;
      if (*(_BYTE *)(a1 + 488))
        v88 = 69;
      else
        v88 = 65;
      v121 = k;
      v122 = 0;
      v123 = v88;
      v124 = 15;
      v125 = -1;
      if (k != -1)
      {
        v89 = *(unsigned int *)(v28 + 12);
        if ((_DWORD)v89 == *(_DWORD *)(v28 + 8))
        {
          v90 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, (void *)(v89 + 1), (unint64_t)&v121);
          v92 = *(_DWORD *)v90;
          v91 = (int *)(v90 + 4);
          v93 = *(_QWORD *)v28 + 12 * *(unsigned int *)(v28 + 12);
          *(_DWORD *)v93 = v92;
        }
        else
        {
          v91 = &v122;
          v93 = *(_QWORD *)v28 + 12 * v89;
          *(_DWORD *)v93 = k;
        }
        *(_QWORD *)(v93 + 4) = *(_QWORD *)v91;
        ++*(_DWORD *)(v28 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v126, a1 + 160);
      if (LODWORD(v137[1]) != LODWORD(v135[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x195932FD4);
      }
      v104 = BYTE4(v137[1]);
      if (BYTE4(v137[1]) != BYTE4(v135[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x195932FF4);
      }
      *(_DWORD *)(a1 + 608) = v137[1];
      *(_BYTE *)(a1 + 612) = v104;
    }
    else
    {
      WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(v24, (uint64_t)&v142, (uint64_t)&v146);
    }
    goto LABEL_177;
  }
  v94 = HIDWORD(v140);
  if (!HIDWORD(v140))
    goto LABEL_177;
  v95 = v139;
  v96 = *(unsigned int *)(v28 + 8);
  v97 = *(unsigned int *)(v28 + 12);
  v98 = v97 + HIDWORD(v140);
  if (v98 > v96)
  {
    v99 = v96 + (v96 >> 2);
    if (v99 >= 0x10)
      v100 = v99 + 1;
    else
      v100 = 16;
    if (v100 <= v98)
      v100 = v97 + HIDWORD(v140);
    v101 = *(WTF **)v28;
    if (v100 < 3)
    {
      v103 = v28 + 16;
      *(_QWORD *)v28 = v28 + 16;
      *(_DWORD *)(v28 + 8) = 2;
      if (!(_DWORD)v97)
        goto LABEL_168;
    }
    else
    {
      if (v100 >= 0x15555556)
      {
LABEL_212:
        __break(0xC471u);
        JUMPOUT(0x195932EACLL);
      }
      v102 = 12 * v100;
      v103 = WTF::fastMalloc((WTF *)(12 * v100));
      *(_DWORD *)(v28 + 8) = (v102 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v28 = v103;
      if (!(_DWORD)v97)
      {
LABEL_168:
        if ((WTF *)(v28 + 16) != v101 && v101)
        {
          if (*(WTF **)v28 == v101)
          {
            *(_QWORD *)v28 = 0;
            *(_DWORD *)(v28 + 8) = 0;
          }
          WTF::fastFree(v101, v25);
        }
        goto LABEL_173;
      }
    }
    v105 = v101;
    do
    {
      *(_DWORD *)v103 = *(_DWORD *)v105;
      *(_QWORD *)(v103 + 4) = *(_QWORD *)((char *)v105 + 4);
      v105 = (WTF *)((char *)v105 + 12);
      v103 += 12;
    }
    while (v105 != (WTF *)((char *)v101 + 12 * v97));
    goto LABEL_168;
  }
LABEL_173:
  v106 = *(unsigned int *)(v28 + 12);
  if (v98 < v106)
  {
    __break(0xC471u);
    JUMPOUT(0x195933064);
  }
  v107 = *(_QWORD *)v28 + 12 * v106;
  v108 = (WTF *)((char *)v95 + 12 * v94);
  do
  {
    *(_DWORD *)v107 = *(_DWORD *)v95;
    *(_QWORD *)(v107 + 4) = *(_QWORD *)((char *)v95 + 4);
    v95 = (WTF *)((char *)v95 + 12);
    v107 += 12;
  }
  while (v95 != v108);
  *(_DWORD *)(v28 + 12) = v98;
LABEL_177:
  v109 = v139;
  if (v141 != (_BYTE *)v139 && v139 != 0)
  {
    v139 = 0;
    LODWORD(v140) = 0;
    WTF::fastFree(v109, v25);
  }
  v111 = (WTF *)v142;
  if (&v145 != v142 && v142 != 0)
  {
    v142 = 0;
    v143 = 0;
    WTF::fastFree(v111, v25);
  }
  result = (WTF *)v146;
  if (v115 != v146 && v146)
  {
    v146 = 0;
    LODWORD(v147) = 0;
    return (WTF *)WTF::fastFree(result, v25);
  }
  return result;
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  JSC::AssemblerBuffer *v19;
  unsigned int v20;
  uint64_t v21;
  int64_t v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int i;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  int *v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  void *v46;
  WTF **v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  _DWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  int64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  _DWORD *v62;
  void *v63;
  unsigned int *v64;
  int8x8_t v65;
  char *v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  int v79;
  _DWORD *v80;
  _QWORD *v81;
  _DWORD *v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  int v101;
  void *v102;
  int v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  int v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  char *v137;
  _QWORD *v138;
  int v139;
  uint64_t v140;
  WTF *v141;
  WTF *v142;
  uint64_t v143;
  int v144;
  int v145;
  int RegisterWithPreference;
  unsigned int v147;
  double v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unsigned __int8 v161;
  void *v162;
  int v163;
  uint64_t v164;
  char *v165;
  _QWORD *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  int8x8_t v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  uint64_t v191;
  char *v192;
  _QWORD *v193;
  int v194;
  uint64_t v195;
  int v196;
  int v197;
  void *v198;
  int v199;
  uint64_t v200;
  char *v201;
  _QWORD *v202;
  int v203;
  uint64_t v204;
  WTF *v205;
  WTF *v206;
  uint64_t v207;
  WTF *v208;
  void *v209;
  uint64_t *v210;
  int v211;
  JSC::AssemblerBuffer *v212;
  unsigned int v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  unsigned __int8 v234;
  int8x8_t v235;
  unsigned int v236;
  unsigned int v237;
  char *v238;
  int *v239;
  unsigned int v240;
  char *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  unint64_t v248;
  uint64_t v249;
  int8x8_t v250;
  unsigned int v251;
  unsigned int v252;
  char *v253;
  int *v254;
  unsigned int v255;
  char *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  char v264;
  char *v265;
  int *v266;
  int v267;
  _BYTE *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  void *v282;
  WTF *v283;
  WTF *v285;
  int8x8_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned __int8 v291;
  unint64_t v292;
  uint64_t v293;
  unsigned __int8 v294;
  WTF *v295;
  WTF *v296;
  JSC::ARM64LogicalImmediate *v297;
  JSC::ARM64LogicalImmediate *v298;
  WTF *v299;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  WTF *v306;
  void *v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  unint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  unint64_t v321;
  unsigned int v322;
  unsigned int *v323;
  unsigned int v324;
  int v325;
  int v326;
  JSC::AssemblerBuffer *v327;
  unsigned int v328;
  unsigned __int8 v329;
  int k;
  unsigned int v331;
  uint64_t v332;
  int v333;
  unsigned int v334;
  char v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  WTF *v340;
  int8x8_t v342;
  WTF *v343;
  WTF *v344;
  JSC::ARM64LogicalImmediate *v345;
  JSC::ARM64LogicalImmediate *v346;
  WTF *v347;
  void *v349;
  unsigned int m;
  unsigned int v351;
  char v352;
  uint64_t v353;
  char *v354;
  _QWORD *v355;
  int v356;
  _DWORD *v357;
  _QWORD *v358;
  unsigned int *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  WTF *v363;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  void *v373;
  unsigned int n;
  unsigned int v375;
  char v376;
  char *v377;
  _QWORD *v378;
  int v379;
  _DWORD *v380;
  _QWORD *v381;
  unsigned int *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  WTF *v386;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  WTF *v392;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  unsigned __int8 *v398;
  _QWORD *v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  JSC::ARM64LogicalImmediate *v404;
  signed __int8 v405;
  unint64_t v406;
  uint64_t v407;
  void *v408;
  uint64_t v409;
  char *v410;
  _QWORD *v411;
  int v412;
  _DWORD *v413;
  _QWORD *v414;
  _DWORD *v415;
  WTF *v416;
  WTF *v417;
  _BYTE *v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t *v421;
  uint64_t v422;
  unint64_t v423;
  int v424;
  unsigned __int8 v425;
  void *v426;
  uint64_t v427;
  char *v428;
  _QWORD *v429;
  int v430;
  _DWORD *v431;
  _QWORD *v432;
  _DWORD *v433;
  WTF *v434;
  WTF *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  void *v442;
  WTF *v443;
  uint64_t v444;
  WTF *v445;
  unsigned int v446;
  uint64_t v447;
  char *v448;
  unint64_t *v449;
  uint64_t v450;
  WTF *v451;
  uint64_t *v452;
  int v453;
  unsigned int v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  int v465;
  unsigned __int8 v466;
  unsigned int *v467;
  uint64_t v468;
  uint64_t v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  char v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  WTF *v478;
  WTF *v480;
  int8x8_t v481;
  unsigned int v482;
  _BYTE *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  void *v488;
  WTF *v489;
  uint64_t v490;
  unsigned int v491;
  WTF *v492;
  uint64_t v493;
  char *v494;
  uint64_t v495;
  unint64_t *v496;
  uint64_t v497;
  _BYTE *v498;
  WTF *v499;
  int v500;
  unsigned int v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  int v512;
  unsigned __int8 v513;
  _BYTE *v514;
  unsigned int *v515;
  uint64_t v516;
  unsigned int v517;
  int v518;
  int v519;
  unsigned int v520;
  char v521;
  void *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  WTF *v526;
  WTF *v528;
  int8x8_t v529;
  unsigned int v530;
  _BYTE *v531;
  uint64_t v532;
  unsigned int v533;
  uint64_t v534;
  int v535;
  int v536;
  uint64_t v537;
  WTF *v538;
  uint64_t v539;
  int v540;
  int v541;
  void *v542;
  int v543;
  uint64_t v544;
  char *v545;
  _QWORD *v546;
  int v547;
  uint64_t v548;
  WTF *v549;
  WTF *v550;
  uint64_t v551;
  int v552;
  int v553;
  JSC::AssemblerBuffer *v554;
  int v555;
  unsigned int v556;
  uint64_t v557;
  char v558;
  uint64_t v559;
  char *v560;
  _QWORD *v561;
  int v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unsigned int v569;
  unint64_t v570;
  _QWORD *v571;
  uint64_t v572;
  uint64_t v573;
  JSC::AssemblerBuffer *v574;
  unsigned int v575;
  int v576;
  unsigned int v577;
  uint64_t v578;
  char *v579;
  int *v580;
  unsigned int v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  double v585;
  int v586;
  unsigned int v587;
  char v588;
  uint64_t v589;
  char *v590;
  int *v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  unint64_t v603;
  _QWORD *v604;
  uint64_t v605;
  unsigned int v606;
  int8x8_t v607;
  unsigned int v608;
  uint64_t v609;
  char *v610;
  int *v611;
  unsigned int v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  char v618;
  unint64_t v619;
  uint64_t v620;
  unsigned int v621;
  void *v622;
  int j;
  unsigned int v624;
  char v625;
  char *v626;
  int *v627;
  int v628;
  char *v629;
  uint64_t v630;
  void *v631;
  WTF *v632;
  WTF *v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  WTF *v637;
  uint64_t v639;
  int8x8_t v640;
  int v641;
  unsigned int v642;
  char *v643;
  uint64_t *v644;
  int v645;
  char *v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  char v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  WTF *v656;
  WTF *v658;
  uint64_t v659;
  unint64_t v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unsigned __int8 v664;
  unint64_t v665;
  uint64_t v666;
  unsigned __int8 v667;
  int8x8_t v668;
  int8x8_t v669;
  int v670;
  uint64_t v671;
  char *v672;
  int *v673;
  int v674;
  uint64_t v675;
  int v676;
  unsigned int v677;
  char v678;
  int8x8_t v679;
  int v680;
  uint64_t v681;
  char *v682;
  uint64_t *v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  int v688;
  void *v689;
  int v690;
  uint64_t v691;
  void *v692;
  WTF **v693;
  char v694;
  unsigned int v695;
  unsigned int v696;
  uint64_t v697;
  unsigned __int8 v698;
  char *v699;
  _QWORD *v700;
  int v701;
  WTF **v702;
  uint64_t v703;
  WTF *v704;
  WTF *v705;
  uint64_t v706;
  int v707;
  int v708;
  void *v709;
  JSC::AssemblerBuffer *v710;
  int v711;
  unsigned int v712;
  char v713;
  uint64_t v714;
  char *v715;
  _QWORD *v716;
  int v717;
  uint64_t v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  char v723;
  unint64_t v724;
  _QWORD *v725;
  uint64_t v726;
  JSC::AssemblerBuffer *v727;
  unsigned int v728;
  uint64_t v729;
  void *v730;
  double v731;
  char v732;
  int v733;
  unsigned int v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  WTF *v738;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unsigned int v745;
  unint64_t v746;
  uint64_t v747;
  unsigned int v748;
  unsigned __int8 v749;
  int v750;
  uint64_t v751;
  char *v752;
  _QWORD *v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  unint64_t v757;
  WTF *v758;
  uint64_t v760;
  unint64_t v761;
  unint64_t v762;
  uint64_t v763;
  uint64_t v764;
  unsigned __int8 v765;
  unint64_t v766;
  uint64_t v767;
  unsigned __int8 v768;
  int8x8_t v769;
  int8x8_t v770;
  unsigned int v771;
  uint64_t v772;
  char *v773;
  int *v774;
  unsigned int v775;
  uint64_t v776;
  int v777;
  uint64_t v778;
  uint64_t *v779;
  unsigned int v780;
  char v781;
  int8x8_t v782;
  unsigned int v783;
  uint64_t v784;
  char *v785;
  int *v786;
  unsigned int v787;
  uint64_t v788;
  uint64_t v789;
  int v790;
  int v791;
  double v792;
  JSC::AssemblerBuffer *v793;
  int v794;
  unsigned int v795;
  char v796;
  uint64_t v797;
  char *v798;
  _QWORD *v799;
  int v800;
  uint64_t v801;
  unint64_t v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  unsigned int v807;
  unint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  uint64_t v811;
  JSC::AssemblerBuffer *v812;
  unsigned int v813;
  unsigned __int8 v814;
  unsigned int v815;
  uint64_t v816;
  char *v817;
  int *v818;
  unsigned int v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  unint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unsigned int v828;
  unint64_t v829;
  _QWORD *v830;
  uint64_t v831;
  unsigned int v832;
  int8x8_t v833;
  unsigned int v834;
  uint64_t v835;
  char *v836;
  int *v837;
  unsigned int v838;
  uint64_t v839;
  unint64_t v840;
  unint64_t v841;
  uint64_t v842;
  uint64_t v843;
  char v844;
  unint64_t v845;
  uint64_t v846;
  unsigned int v847;
  int8x8_t v848;
  void *v849;
  char v850;
  int v851;
  unsigned int v852;
  uint64_t v853;
  uint64_t v854;
  unint64_t v855;
  WTF *v856;
  uint64_t v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unsigned __int8 v863;
  unint64_t v864;
  uint64_t v865;
  unsigned __int8 v866;
  int8x8_t v867;
  int8x8_t v868;
  unsigned int v869;
  uint64_t v870;
  char *v871;
  int *v872;
  unsigned int v873;
  uint64_t v874;
  void *v875;
  WTF *v876;
  uint64_t v877;
  int v878;
  unsigned int v879;
  char v880;
  int8x8_t v881;
  unsigned int v882;
  uint64_t v883;
  char *v884;
  int *v885;
  unsigned int v886;
  uint64_t v887;
  _BYTE *v888;
  _BYTE *v889;
  _BYTE *v890;
  _BYTE *v891;
  _BYTE *v892;
  _BYTE *v893;
  _BYTE *v894;
  _BYTE *v895;
  _BYTE *v896;
  _BYTE *v897;
  _BYTE *v898;
  _BYTE *v899;
  _BYTE *v900;
  _BYTE *v901;
  _BYTE *v902;
  _BYTE *v903;
  _BYTE *v904;
  _BYTE *v905;
  _BYTE *v906;
  _BYTE *v907;
  _BYTE *v908;
  _BYTE *v909;
  JSC::AssemblerBuffer *v910;
  JSC::AssemblerBuffer *v911;
  WTF *v912;
  WTF *v913;
  JSC::AssemblerBuffer *v914;
  JSC::AssemblerBuffer *v915;
  JSC::AssemblerBuffer *v916;
  JSC::AssemblerBuffer *v917;
  uint64_t v918;
  uint64_t *v919;
  uint64_t *v920;
  _QWORD *v921;
  _QWORD *v922;
  uint64_t *v925;
  uint64_t *v926;
  int v928;
  uint64_t v929;
  int v930;
  int v931;
  int v932;
  uint64_t v933;
  unsigned int v934;
  int v935;
  char v936;
  __int16 v937;
  char v938;
  unsigned int v939;
  int v940;
  char v941;
  __int16 v942;
  char v943;
  unsigned int v944;
  int v945;
  char v946;
  __int16 v947;
  char v948;
  unsigned int v949;
  int v950;
  char v951;
  __int16 v952;
  char v953;
  WTF *v954;
  uint64_t v955;
  _BYTE v956[24];
  WTF *v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  WTF *v961;
  uint64_t v962;
  _BYTE v963[16];
  WTF *v964;
  uint64_t v965;
  _BYTE v966[64];
  void *v967;
  int v968;
  __int16 v969;
  unsigned int v970;
  int v971;
  char v972;
  __int16 v973;
  char v974;
  unint64_t v975;
  uint64_t v976;
  _BYTE v977[32];

  v5 = a3;
  v6 = a1;
  v7 = *(_QWORD *)(a4 + 56);
  if (v7 && *(_QWORD *)(v7 + 8) != WebCore::anyName)
  {
    v8 = *(_QWORD *)(a1 + 496);
    v9 = *(_QWORD *)(a1 + 504);
    v10 = *(unsigned int *)(a1 + 520);
    if (v8 <= v9)
      v11 = 0;
    else
      v11 = *(unsigned int *)(a1 + 520);
    if (v11 + v9 == v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195938384);
    }
    if (v8 == v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1959383A4);
    }
    v13 = *(_QWORD *)(a1 + 512);
    v14 = *(unsigned __int8 *)(v13 + v8);
    LOBYTE(v957) = *(_BYTE *)(v13 + v8);
    if (v8 == v10 - 1)
      v15 = 0;
    else
      v15 = v8 + 1;
    *(_QWORD *)(a1 + 496) = v15;
    v16 = (_QWORD *)(a1 + 544);
    v17 = *(unsigned int *)(a1 + 556);
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 552))
    {
      v888 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v17 + 1), (unint64_t)&v957);
      v17 = *(unsigned int *)(v6 + 556);
      *(_BYTE *)(*(_QWORD *)(v6 + 544) + v17) = *v888;
      v14 = v957;
    }
    else
    {
      *(_BYTE *)(*v16 + v17) = v14;
    }
    v925 = (uint64_t *)(v6 + 496);
    *(_DWORD *)(v6 + 556) = v17 + 1;
    v18 = (_DWORD *)(v6 + 160);
    v19 = (JSC::AssemblerBuffer *)(v6 + 216);
    v20 = *(_DWORD *)(v6 + 360);
    if (v20 + 4 > *(_DWORD *)(v6 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v6 + 216));
      v20 = *(_DWORD *)(v6 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v6 + 216) + v20) = v14 & 0x1F | 0xF8460000;
    *(_DWORD *)(v6 + 360) += 4;
    v21 = *(_QWORD *)(v7 + 8);
    v22 = *(_QWORD *)(v21 + 24);
    v23 = &dword_1ECE90000;
    if (v22 != WebCore::starAtomData)
    {
      if (v22 != *(_QWORD *)(v21 + 40))
      {
        v957 = (WTF *)&v959;
        v958 = 2;
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAndDocumentIsHTML(a1, (uint64_t)&v957, COERCE_DOUBLE(2));
        v25 = *(_QWORD *)(a1 + 496);
        v24 = *(_QWORD *)(a1 + 504);
        v26 = *(unsigned int *)(a1 + 520);
        if (v25 <= v24)
          v27 = 0;
        else
          v27 = *(unsigned int *)(a1 + 520);
        if (v27 + v24 == v25)
        {
          __break(0xC471u);
          JUMPOUT(0x1959387A0);
        }
        if (v25 == v24)
        {
          __break(0xC471u);
          JUMPOUT(0x1959387C0);
        }
        v28 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v25);
        LOBYTE(v970) = v28;
        if (v25 == v26 - 1)
          v29 = 0;
        else
          v29 = v25 + 1;
        *(_QWORD *)(a1 + 496) = v29;
        v30 = *(unsigned int *)(a1 + 556);
        if ((_DWORD)v30 == *(_DWORD *)(a1 + 552))
        {
          v895 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (WTF *)(v30 + 1), (unint64_t)&v970);
          v30 = *(unsigned int *)(a1 + 556);
          *(_BYTE *)(*(_QWORD *)(a1 + 544) + v30) = *v895;
          v28 = v970;
        }
        else
        {
          *(_BYTE *)(*v16 + v30) = v28;
        }
        *(_DWORD *)(a1 + 556) = v30 + 1;
        v31 = v28;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>(v18, *(_QWORD *)(v21 + 40), v28);
        for (i = *(_DWORD *)(a1 + 360); i < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = i)
        {
          if ((i + 4) > *(_DWORD *)(a1 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v19);
            i = *(_DWORD *)(a1 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + i) = -721215457;
          i = *(_DWORD *)(a1 + 360) + 4;
        }
        v33 = i;
        if ((i + 4) > *(_DWORD *)(a1 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v19);
          v33 = *(_DWORD *)(a1 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 216) + v33) = 335544320;
        *(_DWORD *)(a1 + 360) += 4;
        if (*(_BYTE *)(a1 + 488))
          v34 = 69;
        else
          v34 = 65;
        v970 = i;
        v971 = 0;
        v972 = v34;
        v973 = 15;
        v974 = -1;
        v35 = HIDWORD(v958);
        if (HIDWORD(v958))
        {
          v36 = 0;
          v37 = 0;
          do
          {
            if (v37 >= HIDWORD(v958))
            {
              __break(0xC471u);
              JUMPOUT(0x1959396E8);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v36), (uint64_t)v18);
            ++v37;
            v36 += 12;
          }
          while (v35 != v37);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>(v18, *(_QWORD *)(v21 + 24), v31);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v970, (uint64_t)v18);
        if (!*(_BYTE *)(a1 + 372))
        {
          __break(0xC471u);
          JUMPOUT(0x195938848);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
        JSC::MacroAssemblerARM64::load64((uint64_t)v18, v14 | 0x1800000000, *(_BYTE *)(a1 + 464));
        JSC::MacroAssemblerARM64::branch64((uint64_t)v18, 1, 17, v31, (uint64_t)&v949);
        v38 = v949;
        v23 = &dword_1ECE90000;
        if (v949 != -1)
        {
          v39 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v39 == *(_DWORD *)(a2 + 8))
          {
            v40 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v39 + 1), (unint64_t)&v949);
            v42 = *(_DWORD *)v40;
            v41 = (int *)(v40 + 4);
            v38 = v42;
            LODWORD(v39) = *(_DWORD *)(a2 + 12);
          }
          else
          {
            v41 = &v950;
          }
          v48 = *(_QWORD *)a2 + 12 * v39;
          *(_DWORD *)v48 = v38;
          *(_QWORD *)(v48 + 4) = *(_QWORD *)v41;
          ++*(_DWORD *)(a2 + 12);
        }
        WebCore::RegisterAllocator::deallocateRegister(v925, v31);
        v50 = v957;
        if (&v959 != (uint64_t *)v957 && v957)
        {
          v957 = 0;
          LODWORD(v958) = 0;
          WTF::fastFree(v50, v49);
        }
        goto LABEL_59;
      }
      v43 = *(unsigned __int16 *)(v21 + 10);
      if (*(_WORD *)(v21 + 10))
      {
        if (!*(_BYTE *)(a1 + 372))
        {
          __break(0xC471u);
          JUMPOUT(0x1959388C0);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
        JSC::MacroAssemblerARM64::load16((uint64_t)v18, v14 | 0xA00000000, *(_BYTE *)(a1 + 464));
        JSC::MacroAssemblerARM64::branch32((uint64_t)v18, 1u, 17, v43, (uint64_t)&v954);
        v44 = (int)v954;
        if ((_DWORD)v954 != -1)
        {
          v45 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v45 != *(_DWORD *)(a2 + 8))
          {
            v53 = (char *)&v954 + 4;
            goto LABEL_57;
          }
          v46 = (void *)(v45 + 1);
          v47 = &v954;
LABEL_55:
          v52 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v46, (unint64_t)v47);
          v54 = *(_DWORD *)v52;
          v53 = v52 + 4;
          v44 = v54;
          LODWORD(v45) = *(_DWORD *)(a2 + 12);
LABEL_57:
          v55 = (_DWORD *)(*(_QWORD *)a2 + 12 * v45);
          *v55 = v44;
          v56 = v55 + 1;
LABEL_58:
          *v56 = *(_QWORD *)v53;
          ++*(_DWORD *)(a2 + 12);
        }
      }
      else
      {
        if (!*(_BYTE *)(a1 + 372))
        {
          __break(0xC471u);
          JUMPOUT(0x195938900);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
        JSC::MacroAssemblerARM64::load64((uint64_t)v18, v14 | 0x1800000000, *(_BYTE *)(a1 + 464));
        JSC::MacroAssemblerARM64::branch64((uint64_t)v18, 1u, 17, v22, (uint64_t)&v975);
        if ((_DWORD)v975 != -1)
        {
          v51 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v51 != *(_DWORD *)(a2 + 8))
          {
            v121 = (_DWORD *)(*(_QWORD *)a2 + 12 * v51);
            *v121 = v975;
            v56 = v121 + 1;
            v53 = (char *)&v975 + 4;
            goto LABEL_58;
          }
          v46 = (void *)(v51 + 1);
          v47 = (WTF **)&v975;
          goto LABEL_55;
        }
      }
    }
LABEL_59:
    v57 = *(_QWORD *)(v7 + 8);
    v58 = *(_QWORD *)(v57 + 32);
    v6 = a1;
    if (v58 == *((_QWORD *)v23 + 358))
    {
LABEL_80:
      WebCore::RegisterAllocator::deallocateRegister(v925, v14);
      v5 = a3;
      goto LABEL_81;
    }
    if (v58)
    {
      v59 = *(unsigned __int8 *)(v57 + 8);
      if (*(_BYTE *)(v57 + 8))
      {
        if (!*(_BYTE *)(a1 + 372))
        {
          __break(0xC471u);
          JUMPOUT(0x195938868);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
        JSC::MacroAssemblerARM64::load8((uint64_t)v18, v14 | 0x800000000, *(_BYTE *)(a1 + 464));
        JSC::MacroAssemblerARM64::branch32((uint64_t)v18, 1u, 17, v59, (uint64_t)&v939);
        v60 = v939;
        if (v939 == -1)
          goto LABEL_80;
        v62 = (_DWORD *)(a2 + 12);
        v61 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v61 == *(_DWORD *)(a2 + 8))
        {
          v63 = (void *)(v61 + 1);
          v64 = &v939;
LABEL_74:
          v66 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v63, (unint64_t)v64);
          v68 = *(_DWORD *)v66;
          v67 = v66 + 4;
          v60 = v68;
          LODWORD(v61) = *(_DWORD *)(a2 + 12);
LABEL_79:
          v70 = *(_QWORD *)a2 + 12 * v61;
          *(_DWORD *)v70 = v60;
          *(_QWORD *)(v70 + 4) = *v67;
          ++*v62;
          goto LABEL_80;
        }
        v69 = &v939;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 372))
        {
          __break(0xC471u);
          JUMPOUT(0x1959388E0);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
        JSC::MacroAssemblerARM64::load64((uint64_t)v18, v14 | 0x2000000000, *(_BYTE *)(a1 + 464));
        JSC::MacroAssemblerARM64::branch64((uint64_t)v18, 1u, 17, v58, (uint64_t)&v934);
        v60 = v934;
        if (v934 == -1)
          goto LABEL_80;
        v62 = (_DWORD *)(a2 + 12);
        v61 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v61 == *(_DWORD *)(a2 + 8))
        {
          v63 = (void *)(v61 + 1);
          v64 = &v934;
          goto LABEL_74;
        }
        v69 = &v934;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x195938888);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 208) &= ~*(_DWORD *)(a1 + 448);
      JSC::MacroAssemblerARM64::load64((uint64_t)v18, v14 | 0x2000000000, *(_BYTE *)(a1 + 432));
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)v18, 1u, 16, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v944, v65);
      v60 = v944;
      if (v944 == -1)
        goto LABEL_80;
      v62 = (_DWORD *)(a2 + 12);
      v61 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v61 == *(_DWORD *)(a2 + 8))
      {
        v63 = (void *)(v61 + 1);
        v64 = &v944;
        goto LABEL_74;
      }
      v69 = &v944;
    }
    v67 = v69 + 1;
    goto LABEL_79;
  }
LABEL_81:
  v71 = a4;
  v72 = *(_QWORD *)(a4 + 184);
  if (!v72)
    goto LABEL_82;
  v94 = *(_DWORD *)(v72 - 8);
  LODWORD(v95) = v94 & 0x55BDB35C;
  v96 = *(unsigned __int8 *)(v72 + (v94 & 0x55BDB35C));
  if (v96 == 46)
    goto LABEL_132;
  v97 = 1;
  while (v96 != 255)
  {
    v95 = ((_DWORD)v95 + v97) & v94;
    v96 = *(unsigned __int8 *)(v72 + v95);
    ++v97;
    if (v96 == 46)
      goto LABEL_132;
  }
  LODWORD(v108) = v94 & 0x914DD147;
  v109 = *(unsigned __int8 *)(v72 + (v94 & 0x914DD147));
  if (v109 == 13)
    goto LABEL_132;
  v110 = 1;
  while (v109 != 255)
  {
    v108 = ((_DWORD)v108 + v110) & v94;
    v109 = *(unsigned __int8 *)(v72 + v108);
    ++v110;
    if (v109 == 13)
      goto LABEL_132;
  }
  LODWORD(v111) = v94 & 0x2328354B;
  v112 = *(unsigned __int8 *)(v72 + (v94 & 0x2328354B));
  if (v112 == 80)
  {
LABEL_132:
    if (!*(_BYTE *)(v6 + 372))
    {
      __break(0xC471u);
      JUMPOUT(0x195938920);
    }
    *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
    v114 = *(_BYTE *)(v6 + 464) & 0x1F | 0x7841E000;
    v115 = *(_DWORD *)(v6 + 360);
    if (v115 + 4 > *(_DWORD *)(v6 + 352))
    {
      a5 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v6 + 216));
      v115 = *(_DWORD *)(v6 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v6 + 216) + v115) = v114;
    *(_DWORD *)(v6 + 360) += 4;
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, v6 + 160, 0, 17, (uint64_t)&v957, *(int8x8_t *)&a5);
    v116 = (int)v957;
    if ((_DWORD)v957 != -1)
    {
      v117 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v117 == *(_DWORD *)(v5 + 8))
      {
        v118 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, (void *)(v117 + 1), (unint64_t)&v957);
        v120 = *(_DWORD *)v118;
        v119 = v118 + 4;
        v116 = v120;
        LODWORD(v117) = *(_DWORD *)(v5 + 12);
      }
      else
      {
        v119 = (WTF **)((char *)&v957 + 4);
      }
      v122 = *(_QWORD *)v5 + 12 * v117;
      *(_DWORD *)v122 = v116;
      *(_QWORD *)(v122 + 4) = *v119;
      ++*(_DWORD *)(v5 + 12);
    }
    v72 = *(_QWORD *)(a4 + 184);
    if (!v72)
      goto LABEL_82;
    v94 = *(_DWORD *)(v72 - 8);
  }
  else
  {
    v113 = 1;
    while (v112 != 255)
    {
      v111 = ((_DWORD)v111 + v113) & v94;
      v112 = *(unsigned __int8 *)(v72 + v111);
      ++v113;
      if (v112 == 80)
        goto LABEL_132;
    }
  }
  LODWORD(v123) = v94 & 0xA972BA79;
  v124 = *(unsigned __int8 *)(v72 + (v94 & 0xA972BA79));
  if (v124 == 68)
  {
LABEL_147:
    v126 = *(_QWORD *)(v6 + 496);
    v127 = *(_QWORD *)(v6 + 504);
    v128 = *(unsigned int *)(v6 + 520);
    if (v126 <= v127)
      v129 = 0;
    else
      v129 = *(unsigned int *)(v6 + 520);
    if (v129 + v127 == v126)
    {
      __break(0xC471u);
      JUMPOUT(0x195938950);
    }
    if (v126 == v127)
    {
      __break(0xC471u);
      JUMPOUT(0x195938990);
    }
    v130 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 512) + v126);
    LOBYTE(v975) = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v126);
    if (v126 == v128 - 1)
      v131 = 0;
    else
      v131 = v126 + 1;
    *(_QWORD *)(v6 + 496) = v131;
    v132 = (_QWORD *)(v6 + 544);
    v133 = *(unsigned int *)(v6 + 556);
    if ((_DWORD)v133 == *(_DWORD *)(v6 + 552))
    {
      v896 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v132, (WTF *)(v133 + 1), (unint64_t)&v975);
      v133 = *(unsigned int *)(v6 + 556);
      *(_BYTE *)(*(_QWORD *)(v6 + 544) + v133) = *v896;
      v130 = v975;
    }
    else
    {
      *(_BYTE *)(*v132 + v133) = v130;
    }
    *(_DWORD *)(v6 + 556) = v133 + 1;
    v134 = *(_DWORD *)(v6 + 360);
    if (v134 + 4 > *(_DWORD *)(v6 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v6 + 216));
      v134 = *(_DWORD *)(v6 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v6 + 216) + v134) = v130 & 0x1F | 0xF8428000;
    *(_DWORD *)(v6 + 360) += 4;
    JSC::MacroAssemblerARM64::load64(v6 + 160, v130 | 0x800000000, v130);
    if (!*(_BYTE *)(v6 + 372))
    {
      __break(0xC471u);
      JUMPOUT(0x1959389E0);
    }
    *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
    JSC::MacroAssemblerARM64::load64(v6 + 160, v130 | 0x4F800000000, *(_BYTE *)(v6 + 464));
    JSC::MacroAssemblerARM64::branch64(v6 + 160, 1, 17, 0, (uint64_t)&v957);
    v135 = (int)v957;
    v71 = a4;
    if ((_DWORD)v957 != -1)
    {
      v136 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v136 == *(_DWORD *)(v5 + 8))
      {
        v137 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, (void *)(v136 + 1), (unint64_t)&v957);
        v139 = *(_DWORD *)v137;
        v138 = v137 + 4;
        v135 = v139;
        LODWORD(v136) = *(_DWORD *)(v5 + 12);
      }
      else
      {
        v138 = (WTF **)((char *)&v957 + 4);
      }
      v168 = *(_QWORD *)v5 + 12 * v136;
      *(_DWORD *)v168 = v135;
      *(_QWORD *)(v168 + 4) = *v138;
      ++*(_DWORD *)(v5 + 12);
    }
    WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v6 + 496), v130);
    v72 = *(_QWORD *)(a4 + 184);
    if (!v72)
      goto LABEL_82;
    v94 = *(_DWORD *)(v72 - 8);
  }
  else
  {
    v125 = 1;
    while (v124 != 255)
    {
      v123 = ((_DWORD)v123 + v125) & v94;
      v124 = *(unsigned __int8 *)(v72 + v123);
      ++v125;
      if (v124 == 68)
        goto LABEL_147;
    }
  }
  LODWORD(v169) = v94 & 0x8DC94D4D;
  v170 = *(unsigned __int8 *)(v72 + (v94 & 0x8DC94D4D));
  if (v170 == 69)
  {
LABEL_206:
    v172 = *(_QWORD *)(v6 + 496);
    v173 = *(_QWORD *)(v6 + 504);
    v174 = *(unsigned int *)(v6 + 520);
    if (v172 <= v173)
      v175 = 0;
    else
      v175 = *(unsigned int *)(v6 + 520);
    if (v175 + v173 == v172)
    {
      __break(0xC471u);
      JUMPOUT(0x195938970);
    }
    if (v172 == v173)
    {
      __break(0xC471u);
      JUMPOUT(0x1959389B0);
    }
    v176 = *(_QWORD *)(v6 + 512);
    v177 = *(unsigned __int8 *)(v176 + v172);
    LOBYTE(v957) = *(_BYTE *)(v176 + v172);
    if (v172 == v174 - 1)
      v178 = 0;
    else
      v178 = v172 + 1;
    *(_QWORD *)(v6 + 496) = v178;
    v179 = (_QWORD *)(v6 + 544);
    v180 = *(unsigned int *)(v6 + 556);
    if ((_DWORD)v180 == *(_DWORD *)(v6 + 552))
    {
      v897 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v179, (WTF *)(v180 + 1), (unint64_t)&v957);
      v180 = *(unsigned int *)(v6 + 556);
      *(_BYTE *)(*(_QWORD *)(v6 + 544) + v180) = *v897;
      v177 = v957;
    }
    else
    {
      *(_BYTE *)(*v179 + v180) = v177;
    }
    *(_DWORD *)(v6 + 556) = v180 + 1;
    if (*(_DWORD *)(v6 + 1148) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195938A00);
    }
    v181 = *(_DWORD *)(v6 + 3172);
    v182 = *(_DWORD *)(v6 + 608);
    v183 = v182 >= v181;
    v184 = v182 - v181;
    if (!v183)
    {
      __break(0xC471u);
      JUMPOUT(0x195938A20);
    }
    v185 = (char)v177;
    JSC::MacroAssemblerARM64::load64(v6 + 160, (v184 << 32) | 0x1F, v177);
    v186 = v177;
    JSC::MacroAssemblerARM64::load64(v6 + 160, v177 | 0x2800000000, v177);
    JSC::MacroAssemblerARM64::branchTest64(v6 + 160, 1u, v177, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v957, v187);
    v188 = v177 & 0x1F | 0xF8428000;
    v189 = *(_DWORD *)(v6 + 360);
    if (v189 + 4 > *(_DWORD *)(v6 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v6 + 216));
      v189 = *(_DWORD *)(v6 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v6 + 216) + v189) = v188;
    *(_DWORD *)(v6 + 360) += 4;
    JSC::MacroAssemblerARM64::load64(v6 + 160, v186 | 0x800000000, v185);
    JSC::MacroAssemblerARM64::load64(v6 + 160, v186 | 0x4F800000000, v185);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v957, v6 + 160);
    JSC::MacroAssemblerARM64::branch64(v6 + 160, 1, v185, 0, (uint64_t)&v975);
    v190 = v975;
    v71 = a4;
    if ((_DWORD)v975 != -1)
    {
      v191 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v191 == *(_DWORD *)(v5 + 8))
      {
        v192 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, (void *)(v191 + 1), (unint64_t)&v975);
        v194 = *(_DWORD *)v192;
        v193 = v192 + 4;
        v190 = v194;
        LODWORD(v191) = *(_DWORD *)(v5 + 12);
      }
      else
      {
        v193 = (unint64_t *)((char *)&v975 + 4);
      }
      v207 = *(_QWORD *)v5 + 12 * v191;
      *(_DWORD *)v207 = v190;
      *(_QWORD *)(v207 + 4) = *v193;
      ++*(_DWORD *)(v5 + 12);
    }
    WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v6 + 496), v185);
    v72 = *(_QWORD *)(a4 + 184);
    if (!v72)
      goto LABEL_82;
    v94 = *(_DWORD *)(v72 - 8);
  }
  else
  {
    v171 = 1;
    while (v170 != 255)
    {
      v169 = ((_DWORD)v169 + v171) & v94;
      v170 = *(unsigned __int8 *)(v72 + v169);
      ++v171;
      if (v170 == 69)
        goto LABEL_206;
    }
  }
  LODWORD(v195) = v94 & 0x9199CB18;
  v196 = *(unsigned __int8 *)(v72 + (v94 & 0x9199CB18));
  if (v196 == 75)
  {
LABEL_228:
    v957 = (WTF *)(v6 + 160);
    v958 = v6 + 496;
    v959 = v6 + 600;
    v960 = v6 + 616;
    v961 = (WTF *)v963;
    v962 = 16;
    v964 = (WTF *)v966;
    v965 = 16;
    v967 = operationElementIsTarget;
    v968 = 1;
    v969 = -256;
    WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v975, &v957);
    v199 = v975;
    if ((_DWORD)v975 != -1)
    {
      v200 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v200 == *(_DWORD *)(v5 + 8))
      {
        v201 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, (void *)(v200 + 1), (unint64_t)&v975);
        v203 = *(_DWORD *)v201;
        v202 = v201 + 4;
        v199 = v203;
        LODWORD(v200) = *(_DWORD *)(v5 + 12);
      }
      else
      {
        v202 = (unint64_t *)((char *)&v975 + 4);
      }
      v204 = *(_QWORD *)v5 + 12 * v200;
      *(_DWORD *)v204 = v199;
      *(_QWORD *)(v204 + 4) = *v202;
      ++*(_DWORD *)(v5 + 12);
    }
    v205 = v964;
    if (v966 != (_BYTE *)v964 && v964)
    {
      v964 = 0;
      LODWORD(v965) = 0;
      WTF::fastFree(v205, v198);
    }
    v206 = v961;
    if (v963 != (_BYTE *)v961 && v961)
    {
      v961 = 0;
      LODWORD(v962) = 0;
      WTF::fastFree(v206, v198);
    }
  }
  else
  {
    v197 = 1;
    while (v196 != 255)
    {
      v195 = ((_DWORD)v195 + v197) & v94;
      v196 = *(unsigned __int8 *)(v72 + v195);
      ++v197;
      if (v196 == 75)
        goto LABEL_228;
    }
  }
LABEL_82:
  if (*(_DWORD *)(v71 + 204))
  {
    v73 = 0;
    do
    {
      v74 = *(void **)(*(_QWORD *)(v71 + 192) + 8 * v73);
      v957 = (WTF *)(a1 + 160);
      v958 = a1 + 496;
      v959 = a1 + 600;
      v960 = a1 + 616;
      v961 = (WTF *)v963;
      v962 = 16;
      v964 = (WTF *)v966;
      v965 = 16;
      v967 = v74;
      v968 = 1;
      v969 = -256;
      WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v975, &v957);
      if ((_DWORD)v975 != -1)
      {
        v76 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v76 == *(_DWORD *)(a3 + 8))
        {
          v77 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v76 + 1), (unint64_t)&v975);
          v79 = *(_DWORD *)v77;
          v78 = v77 + 4;
          v80 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
          *v80 = v79;
          v81 = v80 + 1;
        }
        else
        {
          v82 = (_DWORD *)(*(_QWORD *)a3 + 12 * v76);
          *v82 = v975;
          v81 = v82 + 1;
          v78 = (unint64_t *)((char *)&v975 + 4);
        }
        *v81 = *v78;
        ++*(_DWORD *)(a3 + 12);
      }
      v83 = v964;
      if (v966 != (_BYTE *)v964 && v964)
      {
        v964 = 0;
        LODWORD(v965) = 0;
        WTF::fastFree(v83, v75);
      }
      v84 = v961;
      if (v963 != (_BYTE *)v961 && v961)
      {
        v961 = 0;
        LODWORD(v962) = 0;
        WTF::fastFree(v84, v75);
      }
      ++v73;
      v71 = a4;
    }
    while (v73 < *(unsigned int *)(a4 + 204));
  }
  v85 = a1;
  v86 = a3;
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementDataMatching((_QWORD *)a1, a3, v71, a5);
  v88 = *(_QWORD *)(v71 + 184);
  if (!v88)
    goto LABEL_98;
  v98 = *(_DWORD *)(v88 - 8);
  LODWORD(v99) = v98 & 0xC855C661;
  v100 = *(unsigned __int8 *)(v88 + (v98 & 0xC855C661));
  if (v100 == 11)
  {
LABEL_120:
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateSpecialFailureInQuirksModeForActiveAndHoverIfNeeded((char *)a1, a3, *(_BYTE *)(v71 + 488), v87);
    v957 = (WTF *)(a1 + 160);
    v958 = a1 + 496;
    v959 = a1 + 600;
    v960 = a1 + 616;
    v961 = (WTF *)v963;
    v962 = 16;
    v964 = (WTF *)v966;
    v965 = 16;
    v967 = operationElementIsActive;
    v968 = 1;
    v969 = -256;
    WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v975, &v957);
    v103 = v975;
    if ((_DWORD)v975 != -1)
    {
      v104 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v104 == *(_DWORD *)(a3 + 8))
      {
        v105 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v104 + 1), (unint64_t)&v975);
        v107 = *(_DWORD *)v105;
        v106 = v105 + 4;
        v103 = v107;
        LODWORD(v104) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v106 = (unint64_t *)((char *)&v975 + 4);
      }
      v140 = *(_QWORD *)a3 + 12 * v104;
      *(_DWORD *)v140 = v103;
      *(_QWORD *)(v140 + 4) = *v106;
      ++*(_DWORD *)(a3 + 12);
    }
    v141 = v964;
    if (v966 != (_BYTE *)v964 && v964)
    {
      v964 = 0;
      LODWORD(v965) = 0;
      WTF::fastFree(v141, v102);
    }
    v142 = v961;
    if (v963 != (_BYTE *)v961 && v961)
    {
      v961 = 0;
      LODWORD(v962) = 0;
      WTF::fastFree(v142, v102);
    }
    v88 = *(_QWORD *)(v71 + 184);
    if (!v88)
      goto LABEL_98;
    v98 = *(_DWORD *)(v88 - 8);
  }
  else
  {
    v101 = 1;
    while (v100 != 255)
    {
      v99 = ((_DWORD)v99 + v101) & v98;
      v100 = *(unsigned __int8 *)(v88 + v99);
      ++v101;
      if (v100 == 11)
        goto LABEL_120;
    }
  }
  LODWORD(v143) = v98 & 0x6380E9D7;
  v144 = *(unsigned __int8 *)(v88 + (v98 & 0x6380E9D7));
  if (v144 == 24)
  {
LABEL_173:
    if (*(_DWORD *)(a1 + 1144) == 1)
    {
      WebCore::SelectorCompiler::jumpIfElementIsNotEmpty(a1 + 160, a1 + 496, a3, v87);
    }
    else
    {
      RegisterWithPreference = WebCore::RegisterAllocator::allocateRegisterWithPreference((unint64_t *)(a1 + 496));
      v147 = *(_DWORD *)(a1 + 360);
      if (v147 + 4 > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v147 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v147) = RegisterWithPreference & 0x1F | 0x52800000;
      *(_DWORD *)(a1 + 360) += 4;
      v957 = (WTF *)&v959;
      v958 = 2;
      WebCore::SelectorCompiler::jumpIfElementIsNotEmpty(a1 + 160, a1 + 496, (uint64_t)&v957, COERCE_DOUBLE(2));
      v149 = *(_DWORD *)(a1 + 360);
      if (v149 + 4 > *(_DWORD *)(a1 + 352))
      {
        v148 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v149 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v149) = RegisterWithPreference | 0x320003E0;
      *(_DWORD *)(a1 + 360) += 4;
      v150 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v151 = 0;
        v152 = 0;
        do
        {
          if (v152 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x1959396F8);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v151), a1 + 160);
          ++v152;
          v151 += 12;
        }
        while (v150 != v152);
      }
      if (*(_DWORD *)(a1 + 1144) != 1)
      {
        v154 = *(_QWORD *)(a1 + 496);
        v153 = *(_QWORD *)(a1 + 504);
        v155 = *(unsigned int *)(a1 + 520);
        if (v154 <= v153)
          v156 = 0;
        else
          v156 = *(unsigned int *)(a1 + 520);
        if (v156 + v153 == v154)
        {
          __break(0xC471u);
          JUMPOUT(0x19593936CLL);
        }
        if (v154 == v153)
        {
          __break(0xC471u);
          JUMPOUT(0x19593938CLL);
        }
        v157 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v154);
        LOBYTE(v975) = v157;
        if (v154 == v155 - 1)
          v158 = 0;
        else
          v158 = v154 + 1;
        *(_QWORD *)(a1 + 496) = v158;
        v159 = (_QWORD *)(a1 + 544);
        v160 = *(unsigned int *)(a1 + 556);
        if ((_DWORD)v160 == *(_DWORD *)(a1 + 552))
        {
          v909 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v159, (WTF *)(v160 + 1), (unint64_t)&v975);
          v160 = *(unsigned int *)(a1 + 556);
          *(_BYTE *)(*(_QWORD *)(a1 + 544) + v160) = *v909;
          v157 = v975;
        }
        else
        {
          *(_BYTE *)(*v159 + v160) = v157;
        }
        *(_DWORD *)(a1 + 556) = v160 + 1;
        v161 = v157;
        WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v975, a1, v157);
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v161, 0, 0, RegisterWithPreference | 0x100);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v975, a1 + 160);
        WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v161);
      }
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1 + 160, 0, RegisterWithPreference, (uint64_t)&v954, *(int8x8_t *)&v148);
      v163 = (int)v954;
      v71 = a4;
      if ((_DWORD)v954 != -1)
      {
        v164 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v164 == *(_DWORD *)(a3 + 8))
        {
          v165 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v164 + 1), (unint64_t)&v954);
          v167 = *(_DWORD *)v165;
          v166 = v165 + 4;
          v163 = v167;
          LODWORD(v164) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v166 = (WTF **)((char *)&v954 + 4);
        }
        v537 = *(_QWORD *)a3 + 12 * v164;
        *(_DWORD *)v537 = v163;
        *(_QWORD *)(v537 + 4) = *v166;
        ++*(_DWORD *)(a3 + 12);
      }
      v538 = v957;
      if (&v959 != (uint64_t *)v957 && v957)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v538, v162);
      }
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), RegisterWithPreference);
    }
    v88 = *(_QWORD *)(v71 + 184);
    if (!v88)
      goto LABEL_98;
    v98 = *(_DWORD *)(v88 - 8);
  }
  else
  {
    v145 = 1;
    while (v144 != 255)
    {
      v143 = ((_DWORD)v143 + v145) & v98;
      v144 = *(unsigned __int8 *)(v88 + v143);
      ++v145;
      if (v144 == 24)
        goto LABEL_173;
    }
  }
  LODWORD(v539) = v98 & 0xFF3EBB0E;
  v540 = *(unsigned __int8 *)(v88 + (v98 & 0xFF3EBB0E));
  if (v540 == 37)
  {
LABEL_723:
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateSpecialFailureInQuirksModeForActiveAndHoverIfNeeded((char *)a1, a3, *(_BYTE *)(v71 + 488), v87);
    v957 = (WTF *)(a1 + 160);
    v958 = a1 + 496;
    v959 = a1 + 600;
    v960 = a1 + 616;
    v961 = (WTF *)v963;
    v962 = 16;
    v964 = (WTF *)v966;
    v965 = 16;
    v967 = operationElementIsHovered;
    v968 = 1;
    v969 = -256;
    WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v975, &v957);
    v543 = v975;
    if ((_DWORD)v975 != -1)
    {
      v544 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v544 == *(_DWORD *)(a3 + 8))
      {
        v545 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v544 + 1), (unint64_t)&v975);
        v547 = *(_DWORD *)v545;
        v546 = v545 + 4;
        v543 = v547;
        LODWORD(v544) = *(_DWORD *)(a3 + 12);
      }
      else
      {
        v546 = (unint64_t *)((char *)&v975 + 4);
      }
      v548 = *(_QWORD *)a3 + 12 * v544;
      *(_DWORD *)v548 = v543;
      *(_QWORD *)(v548 + 4) = *v546;
      ++*(_DWORD *)(a3 + 12);
    }
    v549 = v964;
    if (v966 != (_BYTE *)v964 && v964)
    {
      v964 = 0;
      LODWORD(v965) = 0;
      WTF::fastFree(v549, v542);
    }
    v550 = v961;
    if (v963 != (_BYTE *)v961 && v961)
    {
      v961 = 0;
      LODWORD(v962) = 0;
      WTF::fastFree(v550, v542);
    }
    v88 = *(_QWORD *)(v71 + 184);
    if (!v88)
      goto LABEL_98;
    v98 = *(_DWORD *)(v88 - 8);
  }
  else
  {
    v541 = 1;
    while (v540 != 255)
    {
      v539 = ((_DWORD)v539 + v541) & v98;
      v540 = *(unsigned __int8 *)(v88 + v539);
      ++v541;
      if (v540 == 37)
        goto LABEL_723;
    }
  }
  LODWORD(v551) = v98 & 0x906704A7;
  v552 = *(unsigned __int8 *)(v88 + (v98 & 0x906704A7));
  if (v552 == 55)
  {
LABEL_736:
    if (*(_DWORD *)(a1 + 1144) == 1)
    {
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoPreviousAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v957, a1);
      v554 = (JSC::AssemblerBuffer *)(a1 + 216);
      v555 = *(_DWORD *)(a1 + 360);
      if (v555 < *(_DWORD *)(a1 + 212))
      {
        v86 = a3;
        do
        {
          if ((v555 + 4) > *(_DWORD *)(v85 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v554);
            v555 = *(_DWORD *)(a1 + 360);
          }
          v85 = a1;
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + v555) = -721215457;
          v555 = *(_DWORD *)(a1 + 360) + 4;
          *(_DWORD *)(a1 + 360) = v555;
        }
        while (v555 < *(_DWORD *)(a1 + 212));
      }
      v556 = v555;
      if ((v555 + 4) > *(_DWORD *)(v85 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v554);
        v556 = *(_DWORD *)(v85 + 360);
      }
      v557 = v85 + 160;
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v556) = 335544320;
      *(_DWORD *)(v85 + 360) += 4;
      if (*(_BYTE *)(v85 + 488))
        v558 = 69;
      else
        v558 = 65;
      v954 = (WTF *)v555;
      LOBYTE(v955) = v558;
      *(_WORD *)((char *)&v955 + 1) = 15;
      BYTE3(v955) = -1;
      if (v555 != -1)
      {
        v559 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v559 == *(_DWORD *)(v86 + 8))
        {
          v560 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v559 + 1), (unint64_t)&v954);
          v562 = *(_DWORD *)v560;
          v561 = v560 + 4;
          v563 = *(_QWORD *)v86 + 12 * *(unsigned int *)(v86 + 12);
          *(_DWORD *)v563 = v562;
        }
        else
        {
          v561 = (WTF **)((char *)&v954 + 4);
          v563 = *(_QWORD *)v86 + 12 * v559;
          *(_DWORD *)v563 = v555;
        }
        *(_QWORD *)(v563 + 4) = *v561;
        ++*(_DWORD *)(v86 + 12);
      }
      v582 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v583 = 0;
        v584 = 0;
        do
        {
          if (v584 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x195939700);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v583), v85 + 160);
          ++v584;
          v583 += 12;
        }
        while (v582 != v584);
      }
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoNextAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v975, v85);
      v586 = *(_DWORD *)(v85 + 360);
      if (v586 < *(_DWORD *)(v85 + 212))
      {
        v86 = a3;
        do
        {
          if ((v586 + 4) > *(_DWORD *)(v85 + 352))
          {
            v585 = JSC::AssemblerBuffer::outOfLineGrow(v554);
            v586 = *(_DWORD *)(a1 + 360);
          }
          v85 = a1;
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + v586) = -721215457;
          v586 = *(_DWORD *)(a1 + 360) + 4;
          *(_DWORD *)(a1 + 360) = v586;
        }
        while (v586 < *(_DWORD *)(a1 + 212));
      }
      v587 = v586;
      if ((v586 + 4) > *(_DWORD *)(v85 + 352))
      {
        v585 = JSC::AssemblerBuffer::outOfLineGrow(v554);
        v587 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v587) = 335544320;
      *(_DWORD *)(v85 + 360) += 4;
      if (*(_BYTE *)(v85 + 488))
        v588 = 69;
      else
        v588 = 65;
      v970 = v586;
      v971 = 0;
      v972 = v588;
      v973 = 15;
      v974 = -1;
      if (v586 != -1)
      {
        v589 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v589 == *(_DWORD *)(v86 + 8))
        {
          v590 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v589 + 1), (unint64_t)&v970);
          v592 = *(_DWORD *)v590;
          v591 = (int *)(v590 + 4);
          v593 = *(_QWORD *)v86 + 12 * *(unsigned int *)(v86 + 12);
          *(_DWORD *)v593 = v592;
        }
        else
        {
          v591 = &v971;
          v593 = *(_QWORD *)v86 + 12 * v589;
          *(_DWORD *)v593 = v586;
        }
        *(_QWORD *)(v593 + 4) = *(_QWORD *)v591;
        ++*(_DWORD *)(v86 + 12);
      }
      v594 = HIDWORD(v976);
      if (HIDWORD(v976))
      {
        v595 = 0;
        v596 = 0;
        do
        {
          if (v596 >= HIDWORD(v976))
          {
            __break(0xC471u);
            JUMPOUT(0x195939708);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v975 + v595), v557);
          ++v596;
          v595 += 12;
        }
        while (v594 != v596);
      }
      v597 = *(_QWORD *)(v85 + 496);
      v598 = *(_QWORD *)(v85 + 504);
      v599 = *(unsigned int *)(v85 + 520);
      if (v597 <= v598)
        v600 = 0;
      else
        v600 = *(unsigned int *)(v85 + 520);
      if (v600 + v598 == v597)
      {
        __break(0xC471u);
        JUMPOUT(0x195938C88);
      }
      if (v597 == v598)
      {
        __break(0xC471u);
        JUMPOUT(0x195938E18);
      }
      v601 = *(_QWORD *)(v85 + 512);
      v602 = *(unsigned __int8 *)(v601 + v597);
      LOBYTE(v949) = *(_BYTE *)(v601 + v597);
      if (v597 == v599 - 1)
        v603 = 0;
      else
        v603 = v597 + 1;
      *(_QWORD *)(v85 + 496) = v603;
      v604 = (_QWORD *)(v85 + 544);
      v605 = *(unsigned int *)(v85 + 556);
      if ((_DWORD)v605 == *(_DWORD *)(v85 + 552))
      {
        v899 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v604, (WTF *)(v605 + 1), (unint64_t)&v949);
        v605 = *(unsigned int *)(v85 + 556);
        *(_BYTE *)(*(_QWORD *)(v85 + 544) + v605) = *v899;
        v602 = v949;
      }
      else
      {
        *(_BYTE *)(*v604 + v605) = v602;
      }
      *(_DWORD *)(v85 + 556) = v605 + 1;
      v606 = *(_DWORD *)(v85 + 360);
      if (v606 + 4 > *(_DWORD *)(v85 + 352))
      {
        v585 = JSC::AssemblerBuffer::outOfLineGrow(v554);
        v606 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v606) = v602 & 0x1F | 0xF8420000;
      *(_DWORD *)(v85 + 360) += 4;
      JSC::MacroAssemblerARM64::branchTest64(v557, 0, v602, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v949, *(int8x8_t *)&v585);
      if (!*(_BYTE *)(v85 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x195938EF8);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 456) + 208) &= ~*(_DWORD *)(v85 + 480);
      JSC::MacroAssemblerARM64::load16(v557, v602 | 0x1E00000000, *(_BYTE *)(v85 + 464));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, v557, 1u, 17, (uint64_t)&v944, v607);
      v608 = v944;
      if (v944 != -1)
      {
        v609 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v609 == *(_DWORD *)(v86 + 8))
        {
          v610 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v609 + 1), (unint64_t)&v944);
          v612 = *(_DWORD *)v610;
          v611 = (int *)(v610 + 4);
          v608 = v612;
          LODWORD(v609) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v611 = &v945;
        }
        v630 = *(_QWORD *)v86 + 12 * v609;
        *(_DWORD *)v630 = v608;
        *(_QWORD *)(v630 + 4) = *(_QWORD *)v611;
        ++*(_DWORD *)(v86 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v949, v557);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v85 + 496), v602);
      v632 = (WTF *)v975;
      if (v977 != (_BYTE *)v975 && v975)
      {
        v975 = 0;
        LODWORD(v976) = 0;
        WTF::fastFree(v632, v631);
      }
      v633 = v957;
      v71 = a4;
      if (&v959 != (uint64_t *)v957 && v957)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v633, v631);
      }
    }
    else
    {
      v564 = *(_QWORD *)(a1 + 496);
      v565 = *(_QWORD *)(a1 + 504);
      v566 = *(unsigned int *)(a1 + 520);
      if (v564 <= v565)
        v567 = 0;
      else
        v567 = *(unsigned int *)(a1 + 520);
      if (v567 + v565 == v564)
      {
        __break(0xC471u);
        JUMPOUT(0x195938C00);
      }
      if (v564 == v565)
      {
        __break(0xC471u);
        JUMPOUT(0x195938DF8);
      }
      v568 = *(_QWORD *)(a1 + 512);
      v569 = *(unsigned __int8 *)(v568 + v564);
      LOBYTE(v957) = *(_BYTE *)(v568 + v564);
      if (v564 == v566 - 1)
        v570 = 0;
      else
        v570 = v564 + 1;
      *(_QWORD *)(a1 + 496) = v570;
      v571 = (_QWORD *)(a1 + 544);
      v572 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v572 == *(_DWORD *)(a1 + 552))
      {
        v898 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v572 + 1), (unint64_t)&v957);
        v572 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v572) = *v898;
        v569 = v957;
      }
      else
      {
        *(_BYTE *)(*v571 + v572) = v569;
      }
      *(_DWORD *)(a1 + 556) = v572 + 1;
      v573 = a1 + 160;
      v574 = (JSC::AssemblerBuffer *)(a1 + 216);
      v575 = *(_DWORD *)(a1 + 360);
      if (v575 + 4 > *(_DWORD *)(a1 + 352))
      {
        v87 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v575 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v575) = v569 & 0x1F | 0xF8420000;
      *(_DWORD *)(a1 + 360) += 4;
      v576 = (char)v569;
      JSC::MacroAssemblerARM64::branchTest64(a1 + 160, 0, v569, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v939, *(int8x8_t *)&v87);
      v577 = v939;
      if (v939 != -1)
      {
        v578 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v578 == *(_DWORD *)(a3 + 8))
        {
          v579 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v578 + 1), (unint64_t)&v939);
          v581 = *(_DWORD *)v579;
          v580 = (int *)(v579 + 4);
          v577 = v581;
          LODWORD(v578) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v580 = &v940;
        }
        v613 = *(_QWORD *)a3 + 12 * v578;
        *(_DWORD *)v613 = v577;
        *(_QWORD *)(v613 + 4) = *(_QWORD *)v580;
        ++*(_DWORD *)(a3 + 12);
      }
      v614 = *(_QWORD *)(a1 + 496);
      v615 = *(_QWORD *)(a1 + 504);
      v616 = *(unsigned int *)(a1 + 520);
      if (v614 <= v615)
        v617 = 0;
      else
        v617 = *(unsigned int *)(a1 + 520);
      if (v617 + v615 == v614)
      {
        __break(0xC471u);
        JUMPOUT(0x195938EC8);
      }
      if (v614 == v615)
      {
        __break(0xC471u);
        JUMPOUT(0x195938FB8);
      }
      v618 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v614);
      LOBYTE(v957) = v618;
      if (v614 == v616 - 1)
        v619 = 0;
      else
        v619 = v614 + 1;
      *(_QWORD *)(a1 + 496) = v619;
      v620 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v620 == *(_DWORD *)(a1 + 552))
      {
        v903 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v620 + 1), (unint64_t)&v957);
        v620 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v620) = *v903;
        v618 = (char)v957;
      }
      else
      {
        *(_BYTE *)(*v571 + v620) = v618;
      }
      *(_DWORD *)(a1 + 556) = v620 + 1;
      v621 = *(_DWORD *)(a1 + 360);
      if (v621 + 4 > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v621 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v621) = v618 & 0x1F | 0x52800000;
      *(_DWORD *)(a1 + 360) += 4;
      v957 = (WTF *)&v959;
      v958 = 2;
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoPreviousAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v975, a1);
      for (j = *(_DWORD *)(a1 + 360); j < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = j)
      {
        if ((j + 4) > *(_DWORD *)(a1 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v574);
          j = *(_DWORD *)(a1 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 216) + j) = -721215457;
        j = *(_DWORD *)(a1 + 360) + 4;
      }
      v624 = j;
      if ((j + 4) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v574);
        v624 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v624) = 335544320;
      *(_DWORD *)(a1 + 360) += 4;
      if (*(_BYTE *)(a1 + 488))
        v625 = 69;
      else
        v625 = 65;
      v934 = j;
      v935 = 0;
      v936 = v625;
      v937 = 15;
      v938 = -1;
      if (j != -1)
      {
        if (HIDWORD(v958) == (_DWORD)v958)
        {
          v626 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v957, (void *)(HIDWORD(v958) + 1), (unint64_t)&v934);
          v628 = *(_DWORD *)v626;
          v627 = (int *)(v626 + 4);
          v629 = (char *)v957 + 12 * HIDWORD(v958);
          *(_DWORD *)v629 = v628;
        }
        else
        {
          v627 = &v935;
          v629 = (char *)v957 + 12 * HIDWORD(v958);
          *(_DWORD *)v629 = j;
        }
        *(_QWORD *)(v629 + 4) = *(_QWORD *)v627;
        ++HIDWORD(v958);
      }
      v634 = HIDWORD(v976);
      if (HIDWORD(v976))
      {
        v635 = 0;
        v636 = 0;
        do
        {
          if (v636 >= HIDWORD(v976))
          {
            __break(0xC471u);
            JUMPOUT(0x195939728);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v975 + v635), v573);
          ++v636;
          v635 += 12;
        }
        while (v634 != v636);
      }
      v637 = (WTF *)v975;
      if (v977 != (_BYTE *)v975 && v975 != 0)
      {
        v975 = 0;
        LODWORD(v976) = 0;
        WTF::fastFree(v637, v622);
      }
      if (!*(_BYTE *)(a1 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x195939094);
      }
      v639 = v569;
      *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
      JSC::MacroAssemblerARM64::load16(v573, v569 | 0x1E00000000, *(_BYTE *)(a1 + 464));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, v573, 1u, 17, (uint64_t)&v932, v640);
      v641 = v932;
      if (v932 != -1)
      {
        v642 = HIDWORD(v958);
        if (HIDWORD(v958) == (_DWORD)v958)
        {
          v643 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v957, (void *)(HIDWORD(v958) + 1), (unint64_t)&v932);
          v645 = *(_DWORD *)v643;
          v644 = (uint64_t *)(v643 + 4);
          v641 = v645;
          v642 = HIDWORD(v958);
        }
        else
        {
          v644 = &v933;
        }
        v646 = (char *)v957 + 12 * v642;
        *(_DWORD *)v646 = v641;
        *(_QWORD *)(v646 + 4) = *v644;
        ++HIDWORD(v958);
      }
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoNextAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v975, a1);
      v648 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v649 = 0;
        v650 = 0;
        do
        {
          if (v650 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x195939730);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v649), v573);
          ++v650;
          v649 += 12;
        }
        while (v648 != v650);
      }
      v651 = v618;
      v652 = *(_DWORD *)(a1 + 360);
      if (v652 + 4 > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v574);
        v652 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v652) = v618 | 0x320003E0;
      *(_DWORD *)(a1 + 360) += 4;
      v653 = HIDWORD(v976);
      if (HIDWORD(v976))
      {
        v654 = 0;
        v655 = 0;
        do
        {
          if (v655 >= HIDWORD(v976))
          {
            __break(0xC471u);
            JUMPOUT(0x195939738);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v975 + v654), v573);
          ++v655;
          v654 += 12;
        }
        while (v653 != v655);
      }
      v656 = (WTF *)v975;
      if (v977 != (_BYTE *)v975 && v975 != 0)
      {
        v975 = 0;
        LODWORD(v976) = 0;
        WTF::fastFree(v656, v647);
      }
      v658 = v957;
      v86 = a3;
      if (&v959 != (uint64_t *)v957 && v957)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v658, v647);
      }
      v659 = a1;
      v661 = *(_QWORD *)(a1 + 496);
      v660 = *(_QWORD *)(a1 + 504);
      v662 = *(unsigned int *)(a1 + 520);
      if (v661 <= v660)
        v663 = 0;
      else
        v663 = *(unsigned int *)(a1 + 520);
      if (v663 + v660 == v661)
      {
        __break(0xC471u);
        JUMPOUT(0x195939124);
      }
      if (v661 == v660)
      {
        __break(0xC471u);
        JUMPOUT(0x195939194);
      }
      v664 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v661);
      LOBYTE(v957) = v664;
      if (v661 == v662 - 1)
        v665 = 0;
      else
        v665 = v661 + 1;
      *(_QWORD *)(a1 + 496) = v665;
      v666 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v666 == *(_DWORD *)(a1 + 552))
      {
        v907 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v571, (WTF *)(v666 + 1), (unint64_t)&v957);
        v666 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v666) = *v907;
        v664 = v957;
      }
      else
      {
        *(_BYTE *)(*v571 + v666) = v664;
      }
      *(_DWORD *)(a1 + 556) = v666 + 1;
      v667 = v664;
      WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v957, a1, v664);
      if (!*(_BYTE *)(a1 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x1959391F4);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
      JSC::MacroAssemblerARM64::load16(v573, v639 | 0x1C00000000, *(_BYTE *)(a1 + 464));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, v573, 0, 17, (uint64_t)&v975, v668);
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v667, v576, 8u, 0);
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v667, v576, 9u, 0);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v975, v573);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v573, 1u, v651, (uint64_t)&v930, v669);
      v670 = v930;
      if (v930 != -1)
      {
        v671 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v671 == *(_DWORD *)(a3 + 8))
        {
          v672 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v671 + 1), (unint64_t)&v930);
          v674 = *(_DWORD *)v672;
          v673 = (int *)(v672 + 4);
          v670 = v674;
          LODWORD(v671) = *(_DWORD *)(a3 + 12);
        }
        else
        {
          v673 = &v931;
        }
        v675 = *(_QWORD *)a3 + 12 * v671;
        *(_DWORD *)v675 = v670;
        *(_QWORD *)(v675 + 4) = *(_QWORD *)v673;
        ++*(_DWORD *)(a3 + 12);
      }
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v667, 0, 0xAu, 0);
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v667, 0, 0xBu, 0);
      v676 = *(_DWORD *)(a1 + 360);
      if (v676 < *(_DWORD *)(a1 + 212))
      {
        v86 = a3;
        do
        {
          if ((v676 + 4) > *(_DWORD *)(v659 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v574);
            v676 = *(_DWORD *)(a1 + 360);
          }
          v659 = a1;
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + v676) = -721215457;
          v676 = *(_DWORD *)(a1 + 360) + 4;
          *(_DWORD *)(a1 + 360) = v676;
        }
        while (v676 < *(_DWORD *)(a1 + 212));
      }
      v677 = v676;
      if ((v676 + 4) > *(_DWORD *)(v659 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v574);
        v677 = *(_DWORD *)(v659 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v659 + 216) + v677) = 335544320;
      *(_DWORD *)(v659 + 360) += 4;
      if (*(_BYTE *)(v659 + 488))
        v678 = 69;
      else
        v678 = 65;
      v949 = v676;
      v950 = 0;
      v951 = v678;
      v952 = 15;
      v953 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v957, v573);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v573, 1u, v651, (uint64_t)&v928, v679);
      v680 = v928;
      if (v928 != -1)
      {
        v681 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v681 == *(_DWORD *)(v86 + 8))
        {
          v682 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v681 + 1), (unint64_t)&v928);
          v684 = *(_DWORD *)v682;
          v683 = (uint64_t *)(v682 + 4);
          v680 = v684;
          LODWORD(v681) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v683 = &v929;
        }
        v685 = *(_QWORD *)v86 + 12 * v681;
        *(_DWORD *)v685 = v680;
        *(_QWORD *)(v685 + 4) = *v683;
        ++*(_DWORD *)(v86 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v949, v573);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v659 + 496), v667);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v659 + 496), v651);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v659 + 496), v576);
      v85 = a1;
      v71 = a4;
    }
    v88 = *(_QWORD *)(v71 + 184);
    if (!v88)
      goto LABEL_98;
    v98 = *(_DWORD *)(v88 - 8);
  }
  else
  {
    v553 = 1;
    while (v552 != 255)
    {
      v551 = ((_DWORD)v551 + v553) & v98;
      v552 = *(unsigned __int8 *)(v88 + v551);
      ++v553;
      if (v552 == 55)
        goto LABEL_736;
    }
  }
  LODWORD(v686) = v98 & 0x8DF9CB6A;
  v687 = *(unsigned __int8 *)(v88 + (v98 & 0x8DF9CB6A));
  if (v687 == 62)
  {
LABEL_898:
    if (*(_DWORD *)(v85 + 1144) == 1)
    {
      v957 = (WTF *)(v85 + 160);
      v958 = v85 + 496;
      v959 = v85 + 600;
      v960 = v85 + 616;
      v961 = (WTF *)v963;
      v962 = 16;
      v964 = (WTF *)v966;
      v965 = 16;
      v967 = operationIsPlaceholderShown;
      v968 = 1;
      v969 = -256;
      WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v975, &v957);
      v690 = v975;
      if ((_DWORD)v975 == -1)
        goto LABEL_913;
      v691 = *(unsigned int *)(v86 + 12);
      if ((_DWORD)v691 == *(_DWORD *)(v86 + 8))
      {
        v692 = (void *)(v691 + 1);
        v693 = (WTF **)&v975;
LABEL_908:
        v699 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, v692, (unint64_t)v693);
        v701 = *(_DWORD *)v699;
        v700 = v699 + 4;
        v690 = v701;
        LODWORD(v691) = *(_DWORD *)(v86 + 12);
LABEL_912:
        v703 = *(_QWORD *)v86 + 12 * v691;
        *(_DWORD *)v703 = v690;
        *(_QWORD *)(v703 + 4) = *v700;
        ++*(_DWORD *)(v86 + 12);
LABEL_913:
        v704 = v964;
        if (v966 != (_BYTE *)v964 && v964)
        {
          v964 = 0;
          LODWORD(v965) = 0;
          WTF::fastFree(v704, v689);
        }
        v705 = v961;
        if (v963 != (_BYTE *)v961 && v961)
        {
          v961 = 0;
          LODWORD(v962) = 0;
          WTF::fastFree(v705, v689);
        }
        v88 = *(_QWORD *)(v71 + 184);
        if (!v88)
          goto LABEL_98;
        v98 = *(_DWORD *)(v88 - 8);
        goto LABEL_917;
      }
      v702 = (WTF **)&v975;
    }
    else
    {
      v694 = WebCore::RegisterAllocator::allocateRegisterWithPreference((unint64_t *)(v85 + 496));
      if (*(_DWORD *)(v85 + 1148) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195938CA8);
      }
      v695 = *(_DWORD *)(v85 + 3172);
      v696 = *(_DWORD *)(v85 + 608);
      v183 = v696 >= v695;
      v697 = v696 - v695;
      if (!v183)
      {
        __break(0xC471u);
        JUMPOUT(0x195938E38);
      }
      v698 = v694;
      JSC::MacroAssemblerARM64::load64(v85 + 160, (v697 << 32) | 0x1F, v694);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v85 + 496), v698);
      v957 = (WTF *)(v85 + 160);
      v958 = v85 + 496;
      v959 = v85 + 600;
      v960 = v85 + 616;
      v961 = (WTF *)v963;
      v962 = 16;
      v964 = (WTF *)v966;
      v965 = 16;
      v967 = operationMakeContextStyleUniqueIfNecessaryAndTestIsPlaceholderShown;
      v968 = 2;
      LOBYTE(v969) = 0;
      HIBYTE(v969) = v698;
      WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v954, &v957);
      v690 = (int)v954;
      v71 = a4;
      if ((_DWORD)v954 == -1)
        goto LABEL_913;
      v691 = *(unsigned int *)(v86 + 12);
      if ((_DWORD)v691 == *(_DWORD *)(v86 + 8))
      {
        v692 = (void *)(v691 + 1);
        v693 = &v954;
        goto LABEL_908;
      }
      v702 = &v954;
    }
    v700 = (WTF **)((char *)v702 + 4);
    goto LABEL_912;
  }
  v688 = 1;
  while (v687 != 255)
  {
    v686 = ((_DWORD)v686 + v688) & v98;
    v687 = *(unsigned __int8 *)(v88 + v686);
    ++v688;
    if (v687 == 62)
      goto LABEL_898;
  }
LABEL_917:
  LODWORD(v706) = v98 & 0xF1897776;
  v707 = *(unsigned __int8 *)(v88 + (v98 & 0xF1897776));
  if (v707 == 27)
  {
LABEL_921:
    if (*(_DWORD *)(v85 + 1144) == 1)
    {
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoPreviousAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v957, v85);
      v710 = (JSC::AssemblerBuffer *)(v85 + 216);
      v711 = *(_DWORD *)(v85 + 360);
      if (v711 < *(_DWORD *)(v85 + 212))
      {
        v71 = a4;
        v86 = a3;
        do
        {
          if ((v711 + 4) > *(_DWORD *)(v85 + 352))
          {
            v87 = JSC::AssemblerBuffer::outOfLineGrow(v710);
            v711 = *(_DWORD *)(a1 + 360);
          }
          v85 = a1;
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + v711) = -721215457;
          v711 = *(_DWORD *)(a1 + 360) + 4;
          *(_DWORD *)(a1 + 360) = v711;
        }
        while (v711 < *(_DWORD *)(a1 + 212));
      }
      v712 = v711;
      if ((v711 + 4) > *(_DWORD *)(v85 + 352))
      {
        v87 = JSC::AssemblerBuffer::outOfLineGrow(v710);
        v712 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v712) = 335544320;
      *(_DWORD *)(v85 + 360) += 4;
      if (*(_BYTE *)(v85 + 488))
        v713 = 69;
      else
        v713 = 65;
      v975 = v711;
      LOBYTE(v976) = v713;
      *(_WORD *)((char *)&v976 + 1) = 15;
      BYTE3(v976) = -1;
      if (v711 != -1)
      {
        v714 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v714 == *(_DWORD *)(v86 + 8))
        {
          v715 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v714 + 1), (unint64_t)&v975);
          v717 = *(_DWORD *)v715;
          v716 = v715 + 4;
          v718 = *(_QWORD *)v86 + 12 * *(unsigned int *)(v86 + 12);
          *(_DWORD *)v718 = v717;
        }
        else
        {
          v716 = (unint64_t *)((char *)&v975 + 4);
          v718 = *(_QWORD *)v86 + 12 * v714;
          *(_DWORD *)v718 = v711;
        }
        *(_QWORD *)(v718 + 4) = *v716;
        ++*(_DWORD *)(v86 + 12);
      }
      v755 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v756 = 0;
        v757 = 0;
        do
        {
          if (v757 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x195939718);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v756), v85 + 160);
          ++v757;
          v756 += 12;
        }
        while (v755 != v757);
      }
      v758 = v957;
      if (&v959 != (uint64_t *)v957 && v957 != 0)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v758, v709);
      }
    }
    else
    {
      v719 = *(_QWORD *)(v85 + 496);
      v720 = *(_QWORD *)(v85 + 504);
      v721 = *(unsigned int *)(v85 + 520);
      if (v719 <= v720)
        v722 = 0;
      else
        v722 = *(unsigned int *)(v85 + 520);
      if (v722 + v720 == v719)
      {
        __break(0xC471u);
        JUMPOUT(0x195938D30);
      }
      if (v719 == v720)
      {
        __break(0xC471u);
        JUMPOUT(0x195938E58);
      }
      v723 = *(_BYTE *)(*(_QWORD *)(v85 + 512) + v719);
      LOBYTE(v957) = v723;
      if (v719 == v721 - 1)
        v724 = 0;
      else
        v724 = v719 + 1;
      *(_QWORD *)(v85 + 496) = v724;
      v725 = (_QWORD *)(v85 + 544);
      v726 = *(unsigned int *)(v85 + 556);
      if ((_DWORD)v726 == *(_DWORD *)(v85 + 552))
      {
        v900 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v726 + 1), (unint64_t)&v957);
        v726 = *(unsigned int *)(v85 + 556);
        *(_BYTE *)(*(_QWORD *)(v85 + 544) + v726) = *v900;
        v723 = (char)v957;
      }
      else
      {
        *(_BYTE *)(*v725 + v726) = v723;
      }
      *(_DWORD *)(v85 + 556) = v726 + 1;
      v727 = (JSC::AssemblerBuffer *)(v85 + 216);
      v728 = *(_DWORD *)(v85 + 360);
      if (v728 + 4 > *(_DWORD *)(v85 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        v728 = *(_DWORD *)(v85 + 360);
      }
      v729 = v85 + 160;
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v728) = v723 & 0x1F | 0x52800000;
      *(_DWORD *)(v85 + 360) += 4;
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoPreviousAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v957, v85);
      v732 = v723;
      v733 = v723 | 0x320003E0;
      v734 = *(_DWORD *)(v85 + 360);
      if (v734 + 4 > *(_DWORD *)(v85 + 352))
      {
        v731 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        v734 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v734) = v733;
      *(_DWORD *)(v85 + 360) += 4;
      v735 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v736 = 0;
        v737 = 0;
        do
        {
          if (v737 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x195939710);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v736), v85 + 160);
          ++v737;
          v736 += 12;
        }
        while (v735 != v737);
      }
      v738 = v957;
      if (&v959 != (uint64_t *)v957 && v957 != 0)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v738, v730);
      }
      v740 = *(_QWORD *)(v85 + 496);
      v741 = *(_QWORD *)(v85 + 504);
      v742 = *(unsigned int *)(v85 + 520);
      if (v740 <= v741)
        v743 = 0;
      else
        v743 = *(unsigned int *)(v85 + 520);
      if (v743 + v741 == v740)
      {
        __break(0xC471u);
        JUMPOUT(0x195938F38);
      }
      if (v740 == v741)
      {
        __break(0xC471u);
        JUMPOUT(0x195938FD8);
      }
      v744 = *(_QWORD *)(v85 + 512);
      v745 = *(unsigned __int8 *)(v744 + v740);
      LOBYTE(v957) = *(_BYTE *)(v744 + v740);
      if (v740 == v742 - 1)
        v746 = 0;
      else
        v746 = v740 + 1;
      *(_QWORD *)(v85 + 496) = v746;
      v747 = *(unsigned int *)(v85 + 556);
      if ((_DWORD)v747 == *(_DWORD *)(v85 + 552))
      {
        v904 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v747 + 1), (unint64_t)&v957);
        v747 = *(unsigned int *)(v85 + 556);
        *(_BYTE *)(*(_QWORD *)(v85 + 544) + v747) = *v904;
        v745 = v957;
      }
      else
      {
        *(_BYTE *)(*v725 + v747) = v745;
      }
      *(_DWORD *)(v85 + 556) = v747 + 1;
      v748 = *(_DWORD *)(v85 + 360);
      if (v748 + 4 > *(_DWORD *)(v85 + 352))
      {
        v731 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        v748 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v748) = v745 & 0x1F | 0xF8420000;
      *(_DWORD *)(v85 + 360) += 4;
      v749 = v745;
      JSC::MacroAssemblerARM64::branchTest64(v85 + 160, 0, v745, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v954, *(int8x8_t *)&v731);
      v750 = (int)v954;
      if ((_DWORD)v954 != -1)
      {
        v751 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v751 == *(_DWORD *)(v86 + 8))
        {
          v752 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v751 + 1), (unint64_t)&v954);
          v754 = *(_DWORD *)v752;
          v753 = v752 + 4;
          v750 = v754;
          LODWORD(v751) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v753 = (WTF **)((char *)&v954 + 4);
        }
        v760 = *(_QWORD *)v86 + 12 * v751;
        *(_DWORD *)v760 = v750;
        *(_QWORD *)(v760 + 4) = *v753;
        ++*(_DWORD *)(v86 + 12);
      }
      v762 = *(_QWORD *)(v85 + 496);
      v761 = *(_QWORD *)(v85 + 504);
      v763 = *(unsigned int *)(v85 + 520);
      if (v762 <= v761)
        v764 = 0;
      else
        v764 = *(unsigned int *)(v85 + 520);
      if (v764 + v761 == v762)
      {
        __break(0xC471u);
        JUMPOUT(0x1959390C4);
      }
      if (v762 == v761)
      {
        __break(0xC471u);
        JUMPOUT(0x195939144);
      }
      v765 = *(_BYTE *)(*(_QWORD *)(v85 + 512) + v762);
      LOBYTE(v957) = v765;
      if (v762 == v763 - 1)
        v766 = 0;
      else
        v766 = v762 + 1;
      *(_QWORD *)(v85 + 496) = v766;
      v767 = *(unsigned int *)(v85 + 556);
      if ((_DWORD)v767 == *(_DWORD *)(v85 + 552))
      {
        v906 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v767 + 1), (unint64_t)&v957);
        v767 = *(unsigned int *)(v85 + 556);
        *(_BYTE *)(*(_QWORD *)(v85 + 544) + v767) = *v906;
        v765 = v957;
      }
      else
      {
        *(_BYTE *)(*v725 + v767) = v765;
      }
      *(_DWORD *)(v85 + 556) = v767 + 1;
      v768 = v765;
      WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v957, v85, v765);
      if (!*(_BYTE *)(v85 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x1959391B4);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 456) + 208) &= ~*(_DWORD *)(v85 + 480);
      JSC::MacroAssemblerARM64::load16(v85 + 160, v745 | 0x1C00000000, *(_BYTE *)(v85 + 464));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, v85 + 160, 0, 17, (uint64_t)&v970, v769);
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(v85, v768, (char)v745, 8u, 0);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v970, v85 + 160);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v85 + 160, 1u, v732, (uint64_t)&v949, v770);
      v771 = v949;
      if (v949 != -1)
      {
        v772 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v772 == *(_DWORD *)(v86 + 8))
        {
          v773 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v772 + 1), (unint64_t)&v949);
          v775 = *(_DWORD *)v773;
          v774 = (int *)(v773 + 4);
          v771 = v775;
          LODWORD(v772) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v774 = &v950;
        }
        v776 = *(_QWORD *)v86 + 12 * v772;
        *(_DWORD *)v776 = v771;
        *(_QWORD *)(v776 + 4) = *(_QWORD *)v774;
        ++*(_DWORD *)(v86 + 12);
      }
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(v85, v768, 0, 0xAu, 0);
      v777 = *(_DWORD *)(v85 + 360);
      if (v777 < *(_DWORD *)(v85 + 212))
      {
        v86 = a3;
        do
        {
          if ((v777 + 4) > *(_DWORD *)(v85 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v727);
            v777 = *(_DWORD *)(a1 + 360);
          }
          v85 = a1;
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + v777) = -721215457;
          v777 = *(_DWORD *)(a1 + 360) + 4;
          *(_DWORD *)(a1 + 360) = v777;
        }
        while (v777 < *(_DWORD *)(a1 + 212));
      }
      v778 = v85;
      v779 = (uint64_t *)(v85 + 496);
      v780 = v777;
      if ((v777 + 4) > *(_DWORD *)(v778 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v727);
        v780 = *(_DWORD *)(v778 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v778 + 216) + v780) = 335544320;
      *(_DWORD *)(v778 + 360) += 4;
      if (*(_BYTE *)(v778 + 488))
        v781 = 69;
      else
        v781 = 65;
      v944 = v777;
      v945 = 0;
      v946 = v781;
      v947 = 15;
      v948 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v957, v729);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v729, 1u, v732, (uint64_t)&v939, v782);
      v783 = v939;
      v71 = a4;
      if (v939 != -1)
      {
        v784 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v784 == *(_DWORD *)(v86 + 8))
        {
          v785 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v784 + 1), (unint64_t)&v939);
          v787 = *(_DWORD *)v785;
          v786 = (int *)(v785 + 4);
          v783 = v787;
          LODWORD(v784) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v786 = &v940;
        }
        v788 = *(_QWORD *)v86 + 12 * v784;
        *(_DWORD *)v788 = v783;
        *(_QWORD *)(v788 + 4) = *(_QWORD *)v786;
        ++*(_DWORD *)(v86 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v944, v729);
      WebCore::RegisterAllocator::deallocateRegister(v779, v768);
      WebCore::RegisterAllocator::deallocateRegister(v779, v749);
      WebCore::RegisterAllocator::deallocateRegister(v779, v732);
      v85 = a1;
    }
    v88 = *(_QWORD *)(v71 + 184);
    if (!v88)
      goto LABEL_98;
    v98 = *(_DWORD *)(v88 - 8);
  }
  else
  {
    v708 = 1;
    while (v707 != 255)
    {
      v706 = ((_DWORD)v706 + v708) & v98;
      v707 = *(unsigned __int8 *)(v88 + v706);
      ++v708;
      if (v707 == 27)
        goto LABEL_921;
    }
  }
  LODWORD(v789) = v98 & 0xFF455007;
  v790 = *(unsigned __int8 *)(v88 + (v98 & 0xFF455007));
  if (v790 == 44)
  {
LABEL_1016:
    if (*(_DWORD *)(v85 + 1144) == 1)
    {
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoNextAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v957, v85);
      v793 = (JSC::AssemblerBuffer *)(v85 + 216);
      v794 = *(_DWORD *)(v85 + 360);
      if (v794 < *(_DWORD *)(v85 + 212))
      {
        v86 = a3;
        do
        {
          if ((v794 + 4) > *(_DWORD *)(v85 + 352))
          {
            v792 = JSC::AssemblerBuffer::outOfLineGrow(v793);
            v794 = *(_DWORD *)(a1 + 360);
          }
          v85 = a1;
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + v794) = -721215457;
          v794 = *(_DWORD *)(a1 + 360) + 4;
          *(_DWORD *)(a1 + 360) = v794;
        }
        while (v794 < *(_DWORD *)(a1 + 212));
      }
      v795 = v794;
      if ((v794 + 4) > *(_DWORD *)(v85 + 352))
      {
        v792 = JSC::AssemblerBuffer::outOfLineGrow(v793);
        v795 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v795) = 335544320;
      *(_DWORD *)(v85 + 360) += 4;
      if (*(_BYTE *)(v85 + 488))
        v796 = 69;
      else
        v796 = 65;
      v975 = v794;
      LOBYTE(v976) = v796;
      *(_WORD *)((char *)&v976 + 1) = 15;
      BYTE3(v976) = -1;
      if (v794 != -1)
      {
        v797 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v797 == *(_DWORD *)(v86 + 8))
        {
          v798 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v797 + 1), (unint64_t)&v975);
          v800 = *(_DWORD *)v798;
          v799 = v798 + 4;
          v801 = *(_QWORD *)v86 + 12 * *(unsigned int *)(v86 + 12);
          *(_DWORD *)v801 = v800;
        }
        else
        {
          v799 = (unint64_t *)((char *)&v975 + 4);
          v801 = *(_QWORD *)v86 + 12 * v797;
          *(_DWORD *)v801 = v794;
        }
        *(_QWORD *)(v801 + 4) = *v799;
        ++*(_DWORD *)(v86 + 12);
      }
      v820 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v821 = 0;
        v822 = 0;
        do
        {
          if (v822 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x195939720);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v821), v85 + 160);
          ++v822;
          v821 += 12;
        }
        while (v820 != v822);
      }
      v823 = *(_QWORD *)(v85 + 496);
      v824 = *(_QWORD *)(v85 + 504);
      v825 = *(unsigned int *)(v85 + 520);
      if (v823 <= v824)
        v826 = 0;
      else
        v826 = *(unsigned int *)(v85 + 520);
      if (v826 + v824 == v823)
      {
        __break(0xC471u);
        JUMPOUT(0x195938DD8);
      }
      if (v823 == v824)
      {
        __break(0xC471u);
        JUMPOUT(0x195938E98);
      }
      v827 = *(_QWORD *)(v85 + 512);
      v828 = *(unsigned __int8 *)(v827 + v823);
      LOBYTE(v954) = *(_BYTE *)(v827 + v823);
      if (v823 == v825 - 1)
        v829 = 0;
      else
        v829 = v823 + 1;
      *(_QWORD *)(v85 + 496) = v829;
      v830 = (_QWORD *)(v85 + 544);
      v831 = *(unsigned int *)(v85 + 556);
      if ((_DWORD)v831 == *(_DWORD *)(v85 + 552))
      {
        v902 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v830, (WTF *)(v831 + 1), (unint64_t)&v954);
        v831 = *(unsigned int *)(v85 + 556);
        *(_BYTE *)(*(_QWORD *)(v85 + 544) + v831) = *v902;
        v828 = v954;
      }
      else
      {
        *(_BYTE *)(*v830 + v831) = v828;
      }
      *(_DWORD *)(v85 + 556) = v831 + 1;
      v832 = *(_DWORD *)(v85 + 360);
      if (v832 + 4 > *(_DWORD *)(v85 + 352))
      {
        v792 = JSC::AssemblerBuffer::outOfLineGrow(v793);
        v832 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v832) = v828 & 0x1F | 0xF8420000;
      *(_DWORD *)(v85 + 360) += 4;
      JSC::MacroAssemblerARM64::branchTest64(v85 + 160, 0, v828, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v954, *(int8x8_t *)&v792);
      if (!*(_BYTE *)(v85 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x195938F78);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 456) + 208) &= ~*(_DWORD *)(v85 + 480);
      JSC::MacroAssemblerARM64::load16(v85 + 160, v828 | 0x1E00000000, *(_BYTE *)(v85 + 464));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, v85 + 160, 1u, 17, (uint64_t)&v970, v833);
      v834 = v970;
      if (v970 != -1)
      {
        v835 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v835 == *(_DWORD *)(v86 + 8))
        {
          v836 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v835 + 1), (unint64_t)&v970);
          v838 = *(_DWORD *)v836;
          v837 = (int *)(v836 + 4);
          v834 = v838;
          LODWORD(v835) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v837 = &v971;
        }
        v874 = *(_QWORD *)v86 + 12 * v835;
        *(_DWORD *)v874 = v834;
        *(_QWORD *)(v874 + 4) = *(_QWORD *)v837;
        ++*(_DWORD *)(v86 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v954, v85 + 160);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v85 + 496), v828);
      v876 = v957;
      if (&v959 != (uint64_t *)v957 && v957)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v876, v875);
      }
      v71 = a4;
    }
    else
    {
      v802 = *(_QWORD *)(v85 + 496);
      v803 = *(_QWORD *)(v85 + 504);
      v804 = *(unsigned int *)(v85 + 520);
      if (v802 <= v803)
        v805 = 0;
      else
        v805 = *(unsigned int *)(v85 + 520);
      if (v805 + v803 == v802)
      {
        __break(0xC471u);
        JUMPOUT(0x195938DB8);
      }
      if (v802 == v803)
      {
        __break(0xC471u);
        JUMPOUT(0x195938E78);
      }
      v806 = *(_QWORD *)(v85 + 512);
      v807 = *(unsigned __int8 *)(v806 + v802);
      LOBYTE(v957) = *(_BYTE *)(v806 + v802);
      if (v802 == v804 - 1)
        v808 = 0;
      else
        v808 = v802 + 1;
      *(_QWORD *)(v85 + 496) = v808;
      v809 = (_QWORD *)(v85 + 544);
      v810 = *(unsigned int *)(v85 + 556);
      if ((_DWORD)v810 == *(_DWORD *)(v85 + 552))
      {
        v901 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v810 + 1), (unint64_t)&v957);
        v810 = *(unsigned int *)(v85 + 556);
        *(_BYTE *)(*(_QWORD *)(v85 + 544) + v810) = *v901;
        v807 = v957;
      }
      else
      {
        *(_BYTE *)(*v809 + v810) = v807;
      }
      *(_DWORD *)(v85 + 556) = v810 + 1;
      v811 = v85 + 160;
      v812 = (JSC::AssemblerBuffer *)(v85 + 216);
      v813 = *(_DWORD *)(v85 + 360);
      if (v813 + 4 > *(_DWORD *)(v85 + 352))
      {
        v87 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        v813 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v813) = v807 & 0x1F | 0xF8420000;
      *(_DWORD *)(v85 + 360) += 4;
      v814 = v807;
      JSC::MacroAssemblerARM64::branchTest64(v85 + 160, 0, v807, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v949, *(int8x8_t *)&v87);
      v815 = v949;
      if (v949 != -1)
      {
        v816 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v816 == *(_DWORD *)(v86 + 8))
        {
          v817 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v816 + 1), (unint64_t)&v949);
          v819 = *(_DWORD *)v817;
          v818 = (int *)(v817 + 4);
          v815 = v819;
          LODWORD(v816) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v818 = &v950;
        }
        v839 = *(_QWORD *)v86 + 12 * v816;
        *(_DWORD *)v839 = v815;
        *(_QWORD *)(v839 + 4) = *(_QWORD *)v818;
        ++*(_DWORD *)(v86 + 12);
      }
      v840 = *(_QWORD *)(v85 + 496);
      v841 = *(_QWORD *)(v85 + 504);
      v842 = *(unsigned int *)(v85 + 520);
      if (v840 <= v841)
        v843 = 0;
      else
        v843 = *(unsigned int *)(v85 + 520);
      if (v843 + v841 == v840)
      {
        __break(0xC471u);
        JUMPOUT(0x195938F98);
      }
      if (v840 == v841)
      {
        __break(0xC471u);
        JUMPOUT(0x195938FF8);
      }
      v844 = *(_BYTE *)(*(_QWORD *)(v85 + 512) + v840);
      LOBYTE(v957) = v844;
      if (v840 == v842 - 1)
        v845 = 0;
      else
        v845 = v840 + 1;
      *(_QWORD *)(v85 + 496) = v845;
      v846 = *(unsigned int *)(v85 + 556);
      if ((_DWORD)v846 == *(_DWORD *)(v85 + 552))
      {
        v905 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v846 + 1), (unint64_t)&v957);
        v846 = *(unsigned int *)(v85 + 556);
        *(_BYTE *)(*(_QWORD *)(v85 + 544) + v846) = *v905;
        v844 = (char)v957;
      }
      else
      {
        *(_BYTE *)(*v809 + v846) = v844;
      }
      *(_DWORD *)(v85 + 556) = v846 + 1;
      v847 = *(_DWORD *)(v85 + 360);
      if (v847 + 4 > *(_DWORD *)(v85 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        v847 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v847) = v844 & 0x1F | 0x52800000;
      *(_DWORD *)(v85 + 360) += 4;
      if (!*(_BYTE *)(v85 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x1959390F4);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 456) + 208) &= ~*(_DWORD *)(v85 + 480);
      JSC::MacroAssemblerARM64::load16(v85 + 160, v807 | 0x1E00000000, *(_BYTE *)(v85 + 464));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, v85 + 160, 1u, 17, (uint64_t)&v954, v848);
      WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoNextAdjacentElement((WebCore::SelectorCompiler::SelectorCodeGenerator *)&v957, v85);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v954, v85 + 160);
      v850 = v844;
      v851 = v844 | 0x320003E0;
      v852 = *(_DWORD *)(v85 + 360);
      if (v852 + 4 > *(_DWORD *)(v85 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        v852 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v852) = v851;
      *(_DWORD *)(v85 + 360) += 4;
      v853 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v854 = 0;
        v855 = 0;
        do
        {
          if (v855 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x195939740);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v854), v811);
          ++v855;
          v854 += 12;
        }
        while (v853 != v855);
      }
      v856 = v957;
      if (&v959 != (uint64_t *)v957 && v957 != 0)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v856, v849);
      }
      v858 = a1;
      v860 = *(_QWORD *)(a1 + 496);
      v859 = *(_QWORD *)(a1 + 504);
      v861 = *(unsigned int *)(a1 + 520);
      if (v860 <= v859)
        v862 = 0;
      else
        v862 = *(unsigned int *)(a1 + 520);
      if (v862 + v859 == v860)
      {
        __break(0xC471u);
        JUMPOUT(0x195939174);
      }
      if (v860 == v859)
      {
        __break(0xC471u);
        JUMPOUT(0x1959391D4);
      }
      v863 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v860);
      LOBYTE(v957) = v863;
      if (v860 == v861 - 1)
        v864 = 0;
      else
        v864 = v860 + 1;
      *(_QWORD *)(a1 + 496) = v864;
      v865 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v865 == *(_DWORD *)(a1 + 552))
      {
        v908 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v809, (WTF *)(v865 + 1), (unint64_t)&v957);
        v865 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v865) = *v908;
        v863 = v957;
      }
      else
      {
        *(_BYTE *)(*v809 + v865) = v863;
      }
      *(_DWORD *)(a1 + 556) = v865 + 1;
      v866 = v863;
      WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v957, a1, v863);
      if (!*(_BYTE *)(a1 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x19593927CLL);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
      JSC::MacroAssemblerARM64::load16(v811, v807 | 0x1C00000000, *(_BYTE *)(a1 + 464));
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, v811, 0, 17, (uint64_t)&v954, v867);
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v866, (char)v807, 9u, 0);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v954, v811);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v811, 1u, v850, (uint64_t)&v944, v868);
      v869 = v944;
      if (v944 != -1)
      {
        v870 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v870 == *(_DWORD *)(v86 + 8))
        {
          v871 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v870 + 1), (unint64_t)&v944);
          v873 = *(_DWORD *)v871;
          v872 = (int *)(v871 + 4);
          v869 = v873;
          LODWORD(v870) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v872 = &v945;
        }
        v877 = *(_QWORD *)v86 + 12 * v870;
        *(_DWORD *)v877 = v869;
        *(_QWORD *)(v877 + 4) = *(_QWORD *)v872;
        ++*(_DWORD *)(v86 + 12);
      }
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v866, 0, 0xBu, 0);
      v878 = *(_DWORD *)(a1 + 360);
      if (v878 < *(_DWORD *)(a1 + 212))
      {
        v86 = a3;
        do
        {
          if ((v878 + 4) > *(_DWORD *)(v858 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v812);
            v878 = *(_DWORD *)(a1 + 360);
          }
          v858 = a1;
          *(_DWORD *)(*(_QWORD *)(a1 + 216) + v878) = -721215457;
          v878 = *(_DWORD *)(a1 + 360) + 4;
          *(_DWORD *)(a1 + 360) = v878;
        }
        while (v878 < *(_DWORD *)(a1 + 212));
      }
      v879 = v878;
      if ((v878 + 4) > *(_DWORD *)(v858 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v812);
        v879 = *(_DWORD *)(v858 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v858 + 216) + v879) = 335544320;
      *(_DWORD *)(v858 + 360) += 4;
      if (*(_BYTE *)(v858 + 488))
        v880 = 69;
      else
        v880 = 65;
      v939 = v878;
      v940 = 0;
      v941 = v880;
      v942 = 15;
      v943 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v957, v811);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v811, 1u, v850, (uint64_t)&v934, v881);
      v882 = v934;
      v71 = a4;
      if (v934 != -1)
      {
        v883 = *(unsigned int *)(v86 + 12);
        if ((_DWORD)v883 == *(_DWORD *)(v86 + 8))
        {
          v884 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v883 + 1), (unint64_t)&v934);
          v886 = *(_DWORD *)v884;
          v885 = (int *)(v884 + 4);
          v882 = v886;
          LODWORD(v883) = *(_DWORD *)(v86 + 12);
        }
        else
        {
          v885 = &v935;
        }
        v887 = *(_QWORD *)v86 + 12 * v883;
        *(_DWORD *)v887 = v882;
        *(_QWORD *)(v887 + 4) = *(_QWORD *)v885;
        ++*(_DWORD *)(v86 + 12);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v939, v811);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v858 + 496), v866);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v858 + 496), v850);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v858 + 496), v814);
      v85 = a1;
    }
  }
  else
  {
    v791 = 1;
    while (v790 != 255)
    {
      v789 = ((_DWORD)v789 + v791) & v98;
      v790 = *(unsigned __int8 *)(v88 + v789);
      ++v791;
      if (v790 == 44)
        goto LABEL_1016;
    }
  }
LABEL_98:
  if (!*(_DWORD *)(v71 + 332))
    goto LABEL_357;
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthChildRelationUpdate((WebCore::SelectorCompiler::SelectorCodeGenerator *)v85, (const WebCore::SelectorCompiler::SelectorFragment *)v71);
  v957 = (WTF *)&v959;
  v958 = 32;
  v89 = *(unsigned int *)(v71 + 332);
  if (v89 < 0x21)
  {
    if (!(_DWORD)v89)
      goto LABEL_243;
    goto LABEL_101;
  }
  if (v89 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x195939748);
  }
  v208 = (WTF *)WTF::fastMalloc((WTF *)(8 * v89));
  LODWORD(v958) = v89;
  v957 = v208;
  LODWORD(v89) = *(_DWORD *)(v71 + 332);
  if ((_DWORD)v89)
  {
LABEL_101:
    v90 = *(_QWORD *)(v71 + 320);
    v91 = 8 * v89;
    do
    {
      if (*(_DWORD *)v90 != 1 || *(_DWORD *)(v90 + 4) >= 2u)
      {
        v92 = *(_QWORD *)v90;
        v975 = *(_QWORD *)v90;
        if (HIDWORD(v958) == (_DWORD)v958)
        {
          v93 = (_QWORD *)WTF::Vector<std::pair<int,int>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v957, HIDWORD(v958) + 1, (unint64_t)&v975);
          *((_QWORD *)v957 + HIDWORD(v958)) = *v93;
        }
        else
        {
          *((_QWORD *)v957 + HIDWORD(v958)) = v92;
        }
        ++HIDWORD(v958);
      }
      v90 += 8;
      v91 -= 8;
    }
    while (v91);
  }
LABEL_243:
  WTF::Vector<std::pair<int,int>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v957, HIDWORD(v958));
  if (HIDWORD(v958))
  {
    v210 = (uint64_t *)(v85 + 496);
    v211 = WebCore::RegisterAllocator::allocateRegisterWithPreference((unint64_t *)(v85 + 496));
    v212 = (JSC::AssemblerBuffer *)(v85 + 216);
    v213 = *(_DWORD *)(v85 + 360);
    if (v213 + 4 > *(_DWORD *)(v85 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
      v213 = *(_DWORD *)(v85 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v85 + 216) + v213) = v211 | 0x320003E0;
    *(_DWORD *)(v85 + 360) += 4;
    v214 = *(_QWORD *)(v85 + 496);
    v215 = *(_QWORD *)(v85 + 504);
    v216 = *(unsigned int *)(v85 + 520);
    if (v214 <= v215)
      v217 = 0;
    else
      v217 = *(unsigned int *)(v85 + 520);
    if (v217 + v215 == v214)
    {
      __break(0xC471u);
      JUMPOUT(0x1959383D4);
    }
    if (v214 == v215)
    {
      __break(0xC471u);
      JUMPOUT(0x195938408);
    }
    v218 = *(unsigned __int8 *)(*(_QWORD *)(v85 + 512) + v214);
    LOBYTE(v975) = *(_BYTE *)(*(_QWORD *)(v85 + 512) + v214);
    if (v214 == v216 - 1)
      v219 = 0;
    else
      v219 = v214 + 1;
    *(_QWORD *)(v85 + 496) = v219;
    v220 = (_QWORD *)(v85 + 544);
    v221 = *(unsigned int *)(v85 + 556);
    if ((_DWORD)v221 == *(_DWORD *)(v85 + 552))
    {
      v889 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v221 + 1), (unint64_t)&v975);
      v221 = *(unsigned int *)(v85 + 556);
      *(_BYTE *)(*(_QWORD *)(v85 + 544) + v221) = *v889;
      v218 = v975;
    }
    else
    {
      *(_BYTE *)(*v220 + v221) = v218;
    }
    *(_DWORD *)(v85 + 556) = v221 + 1;
    if (v218)
    {
      if (v218 == 31)
        v222 = -1862270945;
      else
        v222 = v218 | 0xAA0003E0;
      v223 = *(_DWORD *)(v85 + 360);
      if (v223 + 4 > *(_DWORD *)(v85 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        v223 = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + v223) = v222;
      *(_DWORD *)(v85 + 360) += 4;
    }
    v975 = (unint64_t)v977;
    v976 = 2;
    v954 = (WTF *)v956;
    v955 = 2;
    v224 = (char)v218;
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacentElement(v85, (uint64_t)&v975, (char)v218);
    v225 = *(_QWORD *)(v85 + 496);
    v226 = *(_QWORD *)(v85 + 504);
    v227 = *(unsigned int *)(v85 + 520);
    if (v225 <= v226)
      v228 = 0;
    else
      v228 = *(unsigned int *)(v85 + 520);
    if (v228 + v226 == v225)
    {
      __break(0xC471u);
      JUMPOUT(0x195938428);
    }
    if (v225 == v226)
    {
      __break(0xC471u);
      JUMPOUT(0x195938468);
    }
    v229 = v85 + 160;
    v230 = *(_QWORD *)(v85 + 512);
    v231 = *(unsigned __int8 *)(v230 + v225);
    LOBYTE(v939) = *(_BYTE *)(v230 + v225);
    if (v225 == v227 - 1)
      v232 = 0;
    else
      v232 = v225 + 1;
    *(_QWORD *)(v85 + 496) = v232;
    v233 = *(unsigned int *)(v85 + 556);
    if ((_DWORD)v233 == *(_DWORD *)(v85 + 552))
    {
      v890 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v233 + 1), (unint64_t)&v939);
      v233 = *(unsigned int *)(v85 + 556);
      *(_BYTE *)(*(_QWORD *)(v85 + 544) + v233) = *v890;
      v231 = v939;
    }
    else
    {
      *(_BYTE *)(*v220 + v233) = v231;
    }
    *(_DWORD *)(v85 + 556) = v233 + 1;
    v234 = v231;
    JSC::MacroAssemblerARM64::load64(v85 + 160, v218 | 0x4800000000, v231);
    JSC::MacroAssemblerARM64::and64(v85 + 160, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFFFFFLL, (char)v231);
    JSC::MacroAssemblerARM64::branchTest64(v85 + 160, 0, v231, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v970, v235);
    v236 = v970;
    if (v970 != -1)
    {
      v237 = HIDWORD(v955);
      if (HIDWORD(v955) == (_DWORD)v955)
      {
        v238 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v954, (void *)(HIDWORD(v955) + 1), (unint64_t)&v970);
        v240 = *(_DWORD *)v238;
        v239 = (int *)(v238 + 4);
        v236 = v240;
        v237 = HIDWORD(v955);
      }
      else
      {
        v239 = &v971;
      }
      v241 = (char *)v954 + 12 * v237;
      *(_DWORD *)v241 = v236;
      *(_QWORD *)(v241 + 4) = *(_QWORD *)v239;
      ++HIDWORD(v955);
    }
    v242 = *(_QWORD *)(v85 + 496);
    v243 = *(_QWORD *)(v85 + 504);
    v244 = *(unsigned int *)(v85 + 520);
    if (v242 <= v243)
      v245 = 0;
    else
      v245 = *(unsigned int *)(v85 + 520);
    if (v245 + v243 == v242)
    {
      __break(0xC471u);
      JUMPOUT(0x1959384A8);
    }
    if (v242 == v243)
    {
      __break(0xC471u);
      JUMPOUT(0x1959384E8);
    }
    v246 = *(_QWORD *)(v85 + 512);
    v247 = *(unsigned __int8 *)(v246 + v242);
    LOBYTE(v939) = *(_BYTE *)(v246 + v242);
    if (v242 == v244 - 1)
      v248 = 0;
    else
      v248 = v242 + 1;
    *(_QWORD *)(v85 + 496) = v248;
    v249 = *(unsigned int *)(v85 + 556);
    if ((_DWORD)v249 == *(_DWORD *)(v85 + 552))
    {
      v892 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v249 + 1), (unint64_t)&v939);
      v249 = *(unsigned int *)(v85 + 556);
      *(_BYTE *)(*(_QWORD *)(v85 + 544) + v249) = *v892;
      v247 = v939;
    }
    else
    {
      *(_BYTE *)(*v220 + v249) = v247;
    }
    *(_DWORD *)(v85 + 556) = v249 + 1;
    JSC::MacroAssemblerARM64::load16(v229, v231 | 0x1A00000000, v247);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v229, 0, v247, (uint64_t)&v949, v250);
    v251 = v949;
    if (v949 != -1)
    {
      v252 = HIDWORD(v955);
      if (HIDWORD(v955) == (_DWORD)v955)
      {
        v253 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v954, (void *)(HIDWORD(v955) + 1), (unint64_t)&v949);
        v255 = *(_DWORD *)v253;
        v254 = (int *)(v253 + 4);
        v251 = v255;
        v252 = HIDWORD(v955);
      }
      else
      {
        v254 = &v950;
      }
      v256 = (char *)v954 + 12 * v252;
      *(_DWORD *)v256 = v251;
      *(_QWORD *)(v256 + 4) = *(_QWORD *)v254;
      ++HIDWORD(v955);
    }
    if (v247 == 31)
    {
      v258 = v211 | ((v211 & 0x1F) << 16);
      v259 = 186672096;
    }
    else
    {
      v257 = (v247 & 0x1F) << 16;
      if (v211 == 31)
      {
        v260 = v257 | 0xB2063FF;
        goto LABEL_296;
      }
      v258 = v257 | (32 * (v211 & 0x1F));
      v259 = v211 & 0x1F | 0xB000000;
    }
    v260 = v258 | v259;
LABEL_296:
    v261 = *(_DWORD *)(a1 + 360);
    if (v261 + 4 > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v212);
      v261 = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v261) = v260;
    v262 = *(_DWORD *)(a1 + 360) + 4;
    for (*(_DWORD *)(a1 + 360) = v262; v262 < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = v262)
    {
      if ((v262 + 4) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v212);
        v262 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v262) = -721215457;
      v262 = *(_DWORD *)(a1 + 360) + 4;
    }
    v263 = v262;
    if ((v262 + 4) > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v212);
      v263 = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v263) = 335544320;
    *(_DWORD *)(a1 + 360) += 4;
    if (*(_BYTE *)(a1 + 488))
      v264 = 69;
    else
      v264 = 65;
    v944 = v262;
    v945 = 0;
    v946 = v264;
    v947 = 15;
    v948 = -1;
    if (v262 != -1)
    {
      if (HIDWORD(v976) == (_DWORD)v976)
      {
        v265 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v975, (void *)(HIDWORD(v976) + 1), (unint64_t)&v944);
        v267 = *(_DWORD *)v265;
        v266 = (int *)(v265 + 4);
        v268 = (_BYTE *)(v975 + 12 * HIDWORD(v976));
        *(_DWORD *)v268 = v267;
      }
      else
      {
        v266 = &v945;
        v268 = (_BYTE *)(v975 + 12 * HIDWORD(v976));
        *(_DWORD *)v268 = v262;
      }
      *(_QWORD *)(v268 + 4) = *(_QWORD *)v266;
      ++HIDWORD(v976);
    }
    v914 = (JSC::AssemblerBuffer *)(v85 + 216);
    WebCore::RegisterAllocator::deallocateRegister(v210, v247);
    v269 = HIDWORD(v955);
    v85 = a1;
    if (HIDWORD(v955))
    {
      v270 = 0;
      v271 = 0;
      do
      {
        if (v271 >= HIDWORD(v955))
        {
          __break(0xC471u);
          JUMPOUT(0x1959396D0);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v954 + v270), v229);
        ++v271;
        v270 += 12;
      }
      while (v269 != v271);
    }
    v272 = *(_DWORD *)(a1 + 360);
    if (v272 + 4 > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v914);
      v272 = *(_DWORD *)(a1 + 360);
    }
    v273 = v211 | (32 * v211) | 0x11000400;
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v272) = v273;
    v274 = *(_DWORD *)(a1 + 360) + 4;
    for (*(_DWORD *)(a1 + 360) = v274; v274 < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = v274)
    {
      if ((v274 + 4) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v914);
        v274 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v274) = -721215457;
      v274 = *(_DWORD *)(a1 + 360) + 4;
    }
    *(_DWORD *)(a1 + 368) = 0;
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacentElement(a1, (uint64_t)&v975, v224);
    v275 = *(_DWORD *)(a1 + 360);
    if (v275 + 4 > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v914);
      v275 = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v275) = v273;
    v276 = *(_DWORD *)(a1 + 360) + 4;
    for (*(_DWORD *)(a1 + 360) = v276; v276 < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = v276)
    {
      if ((v276 + 4) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v914);
        v276 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v276) = -721215457;
      v276 = *(_DWORD *)(a1 + 360) + 4;
    }
    v277 = v276;
    if ((v276 + 4) > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v914);
      v277 = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + v277) = 335544320;
    *(_DWORD *)(a1 + 360) += 4;
    if (*(_BYTE *)(a1 + 488))
      v278 = 69;
    else
      v278 = 65;
    v939 = v276;
    v940 = 0;
    v941 = v278;
    v942 = 15;
    v943 = -1;
    v934 = v274;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v939, &v934, v229);
    v279 = HIDWORD(v976);
    if (HIDWORD(v976))
    {
      v280 = 0;
      v281 = 0;
      do
      {
        if (v281 >= HIDWORD(v976))
        {
          __break(0xC471u);
          JUMPOUT(0x1959396D8);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v975 + v280), v229);
        ++v281;
        v280 += 12;
      }
      while (v279 != v281);
    }
    WebCore::RegisterAllocator::deallocateRegister(v210, v234);
    v283 = v954;
    if (v956 != (_BYTE *)v954 && v954 != 0)
    {
      v954 = 0;
      LODWORD(v955) = 0;
      WTF::fastFree(v283, v282);
    }
    v285 = (WTF *)v975;
    if (v977 != (_BYTE *)v975 && v975)
    {
      v975 = 0;
      LODWORD(v976) = 0;
      WTF::fastFree(v285, v282);
    }
    WebCore::RegisterAllocator::deallocateRegister(v210, v224);
    v86 = a3;
    if (*(_DWORD *)(a1 + 1144) != 1)
    {
      v288 = *(_QWORD *)(a1 + 496);
      v287 = *(_QWORD *)(a1 + 504);
      v289 = *(unsigned int *)(a1 + 520);
      if (v288 <= v287)
        v290 = 0;
      else
        v290 = *(unsigned int *)(a1 + 520);
      if (v290 + v287 == v288)
      {
        __break(0xC471u);
        JUMPOUT(0x195938740);
      }
      if (v288 == v287)
      {
        __break(0xC471u);
        JUMPOUT(0x195938760);
      }
      v291 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v288);
      LOBYTE(v975) = v291;
      if (v288 == v289 - 1)
        v292 = 0;
      else
        v292 = v288 + 1;
      *(_QWORD *)(a1 + 496) = v292;
      v293 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v293 == *(_DWORD *)(a1 + 552))
      {
        v894 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v220, (WTF *)(v293 + 1), (unint64_t)&v975);
        v293 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v293) = *v894;
        v291 = v975;
      }
      else
      {
        *(_BYTE *)(*v220 + v293) = v291;
      }
      *(_DWORD *)(a1 + 556) = v293 + 1;
      v294 = v291;
      WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)&v975, a1, v291);
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v294, 0, 0xCu, v211 | 0x100);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v975, v229);
      WebCore::RegisterAllocator::deallocateRegister(v210, v294);
    }
    if (HIDWORD(v958))
    {
      v295 = v957;
      v296 = (WTF *)((char *)v957 + 8 * HIDWORD(v958));
      do
      {
        v297 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)v295;
        v298 = (JSC::ARM64LogicalImmediate *)*((unsigned int *)v295 + 1);
        v295 = (WTF *)((char *)v295 + 8);
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthFilterTest(a1, a3, v211, v297, v298, v286);
      }
      while (v295 != v296);
    }
    WebCore::RegisterAllocator::deallocateRegister(v210, v211);
    v71 = a4;
  }
  v299 = v957;
  if (&v959 != (uint64_t *)v957 && v957 != 0)
  {
    v957 = 0;
    LODWORD(v958) = 0;
    WTF::fastFree(v299, v209);
  }
LABEL_357:
  if (*(_DWORD *)(v71 + 380))
  {
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthLastChildParentCheckAndRelationUpdate(v85, v86, v71, v87);
    v957 = (WTF *)&v959;
    v958 = 32;
    v301 = *(unsigned int *)(v71 + 380);
    if (v301 >= 0x21)
    {
      if (v301 >> 29)
      {
LABEL_1314:
        __break(0xC471u);
        JUMPOUT(0x195936364);
      }
      v306 = (WTF *)WTF::fastMalloc((WTF *)(8 * v301));
      LODWORD(v958) = v301;
      v957 = v306;
      LODWORD(v301) = *(_DWORD *)(v71 + 380);
      if (!(_DWORD)v301)
        goto LABEL_372;
    }
    else if (!(_DWORD)v301)
    {
LABEL_372:
      WTF::Vector<std::pair<int,int>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v957, HIDWORD(v958));
      if (HIDWORD(v958))
      {
        v309 = *(_QWORD *)(v85 + 496);
        v308 = *(_QWORD *)(v85 + 504);
        v310 = *(unsigned int *)(v85 + 520);
        if (v309 <= v308)
          v311 = 0;
        else
          v311 = *(unsigned int *)(v85 + 520);
        if (v311 + v308 == v309)
        {
          __break(0xC471u);
          JUMPOUT(0x195938448);
        }
        if (v309 == v308)
        {
          __break(0xC471u);
          JUMPOUT(0x195938488);
        }
        v312 = *(_BYTE *)(*(_QWORD *)(v85 + 512) + v309);
        LOBYTE(v975) = v312;
        if (v309 == v310 - 1)
          v313 = 0;
        else
          v313 = v309 + 1;
        *(_QWORD *)(v85 + 496) = v313;
        v314 = (uint64_t *)(v85 + 544);
        v315 = *(unsigned int *)(v85 + 556);
        if ((_DWORD)v315 == *(_DWORD *)(v85 + 552))
        {
          v891 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v315 + 1), (unint64_t)&v975);
          v315 = *(unsigned int *)(v85 + 556);
          v316 = *(_QWORD *)(v85 + 544);
          *(_BYTE *)(v316 + v315) = *v891;
          v312 = v975;
          v313 = *(_QWORD *)(v85 + 496);
          v308 = *(_QWORD *)(v85 + 504);
        }
        else
        {
          v316 = *v314;
          *(_BYTE *)(*v314 + v315) = v312;
        }
        v317 = (v315 + 1);
        *(_DWORD *)(v85 + 556) = v317;
        v318 = *(unsigned int *)(v85 + 520);
        if (v313 <= v308)
          v319 = 0;
        else
          v319 = *(unsigned int *)(v85 + 520);
        if (v319 + v308 == v313)
        {
          __break(0xC471u);
          JUMPOUT(0x1959384C8);
        }
        if (v313 == v308)
        {
          __break(0xC471u);
          JUMPOUT(0x195938508);
        }
        v320 = *(unsigned __int8 *)(*(_QWORD *)(v85 + 512) + v313);
        LOBYTE(v975) = *(_BYTE *)(*(_QWORD *)(v85 + 512) + v313);
        if (v313 == v318 - 1)
          v321 = 0;
        else
          v321 = v313 + 1;
        *(_QWORD *)(v85 + 496) = v321;
        if ((_DWORD)v317 == *(_DWORD *)(v85 + 552))
        {
          v893 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85 + 544, (WTF *)(v317 + 1), (unint64_t)&v975);
          v317 = *(unsigned int *)(v85 + 556);
          *(_BYTE *)(*(_QWORD *)(v85 + 544) + v317) = *v893;
          v320 = v975;
        }
        else
        {
          *(_BYTE *)(v316 + v317) = v320;
        }
        *(_DWORD *)(v85 + 556) = v317 + 1;
        if (v320)
        {
          if (v320 == 31)
            v322 = -1862270945;
          else
            v322 = v320 | 0xAA0003E0;
          v323 = (unsigned int *)(v85 + 360);
          v324 = *(_DWORD *)(v85 + 360);
          if (v324 + 4 > *(_DWORD *)(v85 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
            v324 = *v323;
          }
          *(_DWORD *)(*(_QWORD *)(v85 + 216) + v324) = v322;
          *v323 += 4;
        }
        v325 = v312;
        v326 = v312 | 0x320003E0;
        v327 = (JSC::AssemblerBuffer *)(v85 + 216);
        v328 = *(_DWORD *)(v85 + 360);
        if (v328 + 4 > *(_DWORD *)(v85 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
          v328 = *(_DWORD *)(v85 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(v85 + 216) + v328) = v326;
        *(_DWORD *)(v85 + 360) += 4;
        v975 = (unint64_t)v977;
        v976 = 2;
        v329 = v320;
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToNextAdjacentElement(v85, (uint64_t)&v975, v320);
        for (k = *(_DWORD *)(v85 + 360); k < *(_DWORD *)(v85 + 212); *(_DWORD *)(v85 + 360) = k)
        {
          if ((k + 4) > *(_DWORD *)(v85 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
            k = *(_DWORD *)(v85 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v85 + 216) + k) = -721215457;
          k = *(_DWORD *)(v85 + 360) + 4;
        }
        *(_DWORD *)(v85 + 368) = 0;
        v331 = k;
        if ((k + 4) > *(_DWORD *)(v85 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
          v331 = *(_DWORD *)(v85 + 360);
        }
        v332 = v85 + 160;
        *(_DWORD *)(*(_QWORD *)(v85 + 216) + v331) = v325 | (32 * v325) | 0x11000400;
        *(_DWORD *)(v85 + 360) += 4;
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToNextAdjacentElement(v85, (uint64_t)&v975, v329);
        v333 = *(_DWORD *)(v85 + 360);
        if (v333 < *(_DWORD *)(v85 + 212))
        {
          do
          {
            if ((v333 + 4) > *(_DWORD *)(a1 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v327);
              v333 = *(_DWORD *)(a1 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 216) + v333) = -721215457;
            v333 = *(_DWORD *)(a1 + 360) + 4;
            *(_DWORD *)(a1 + 360) = v333;
            v86 = a3;
          }
          while (v333 < *(_DWORD *)(a1 + 212));
        }
        v85 = a1;
        v334 = v333;
        if ((v333 + 4) > *(_DWORD *)(a1 + 352))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v327);
          v334 = *(_DWORD *)(a1 + 360);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 216) + v334) = 335544320;
        *(_DWORD *)(a1 + 360) += 4;
        if (*(_BYTE *)(a1 + 488))
          v335 = 69;
        else
          v335 = 65;
        v954 = (WTF *)v333;
        LOBYTE(v955) = v335;
        *(_WORD *)((char *)&v955 + 1) = 15;
        BYTE3(v955) = -1;
        v970 = k;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v954, &v970, v332);
        v337 = HIDWORD(v976);
        if (HIDWORD(v976))
        {
          v338 = 0;
          v339 = 0;
          do
          {
            if (v339 >= HIDWORD(v976))
            {
              __break(0xC471u);
              JUMPOUT(0x1959396E0);
            }
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v975 + v338), v332);
            ++v339;
            v338 += 12;
          }
          while (v337 != v339);
        }
        v340 = (WTF *)v975;
        if (v977 != (_BYTE *)v975 && v975 != 0)
        {
          v975 = 0;
          LODWORD(v976) = 0;
          WTF::fastFree(v340, v336);
        }
        WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v329);
        if (HIDWORD(v958))
        {
          v343 = v957;
          v344 = (WTF *)((char *)v957 + 8 * HIDWORD(v958));
          do
          {
            v345 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)v343;
            v346 = (JSC::ARM64LogicalImmediate *)*((unsigned int *)v343 + 1);
            v343 = (WTF *)((char *)v343 + 8);
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthFilterTest(a1, v86, v325, v345, v346, v342);
          }
          while (v343 != v344);
        }
        WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v325);
        v71 = a4;
      }
      v347 = v957;
      if (&v959 != (uint64_t *)v957 && v957 != 0)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v347, v307);
      }
      goto LABEL_428;
    }
    v302 = *(_QWORD *)(v71 + 368);
    v303 = 8 * v301;
    do
    {
      if (*(_DWORD *)v302 != 1 || *(_DWORD *)(v302 + 4) >= 2u)
      {
        v304 = *(_QWORD *)v302;
        v975 = *(_QWORD *)v302;
        if (HIDWORD(v958) == (_DWORD)v958)
        {
          v305 = (_QWORD *)WTF::Vector<std::pair<int,int>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v957, HIDWORD(v958) + 1, (unint64_t)&v975);
          *((_QWORD *)v957 + HIDWORD(v958)) = *v305;
        }
        else
        {
          *((_QWORD *)v957 + HIDWORD(v958)) = v304;
        }
        ++HIDWORD(v958);
      }
      v302 += 8;
      v303 -= 8;
    }
    while (v303);
    goto LABEL_372;
  }
LABEL_428:
  if (*(_DWORD *)(v71 + 428))
  {
    v957 = (WTF *)&v959;
    v958 = 2;
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatchesSelectorList(v85, (uint64_t)&v957, 0, (uint64_t *)(v71 + 416));
    for (m = *(_DWORD *)(v85 + 360); (signed int)m < *(_DWORD *)(v85 + 212); *(_DWORD *)(v85 + 360) = m)
    {
      if (m + 4 > *(_DWORD *)(v85 + 352))
      {
        v87 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
        m = *(_DWORD *)(v85 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v85 + 216) + m) = -721215457;
      m = *(_DWORD *)(v85 + 360) + 4;
    }
    v351 = m;
    if (m + 4 > *(_DWORD *)(v85 + 352))
    {
      v87 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 216));
      v351 = *(_DWORD *)(v85 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v85 + 216) + v351) = 335544320;
    *(_DWORD *)(v85 + 360) += 4;
    if (*(_BYTE *)(v85 + 488))
      v352 = 69;
    else
      v352 = 65;
    v975 = m;
    LOBYTE(v976) = v352;
    *(_WORD *)((char *)&v976 + 1) = 15;
    BYTE3(v976) = -1;
    if (m != -1)
    {
      v353 = *(unsigned int *)(v86 + 12);
      if ((_DWORD)v353 == *(_DWORD *)(v86 + 8))
      {
        v354 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, (void *)(v353 + 1), (unint64_t)&v975);
        v356 = *(_DWORD *)v354;
        v355 = v354 + 4;
        v357 = (_DWORD *)(*(_QWORD *)v86 + 12 * *(unsigned int *)(v86 + 12));
        *v357 = v356;
        v358 = v357 + 1;
      }
      else
      {
        v359 = (unsigned int *)(*(_QWORD *)v86 + 12 * v353);
        *v359 = m;
        v358 = v359 + 1;
        v355 = (unint64_t *)((char *)&v975 + 4);
      }
      *v358 = *v355;
      ++*(_DWORD *)(v86 + 12);
    }
    if (HIDWORD(v958))
    {
      v360 = 0;
      v361 = 0;
      v362 = 12 * HIDWORD(v958);
      do
      {
        if (v361 >= HIDWORD(v958))
        {
          __break(0xC471u);
          JUMPOUT(0x1959396C0);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v360), v85 + 160);
        ++v361;
        v360 += 12;
      }
      while (v362 != v360);
    }
    v363 = v957;
    if (&v959 != (uint64_t *)v957 && v957 != 0)
    {
      v957 = 0;
      LODWORD(v958) = 0;
      WTF::fastFree(v363, v349);
    }
  }
  v365 = *(unsigned int *)(v71 + 476);
  if ((_DWORD)v365)
  {
    v366 = *(_QWORD *)(v71 + 464);
    v367 = v366 + 16 * v365;
    v368 = v85 + 160;
    v917 = (JSC::AssemblerBuffer *)(v85 + 216);
    v918 = v367;
    do
    {
      LODWORD(v369) = *(_DWORD *)(v366 + 12);
      if (!(_DWORD)v369)
        goto LABEL_1314;
      v957 = (WTF *)&v959;
      v958 = 2;
      if ((_DWORD)v369 == 1)
      {
        v370 = 0;
      }
      else
      {
        v371 = 0;
        v372 = 0;
        do
        {
          v975 = (unint64_t)v977;
          v976 = 2;
          if (v369 <= v372)
          {
            __break(0xC471u);
            JUMPOUT(0x195939428);
          }
          WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching(v85, &v975, &v975, *(_QWORD *)v366 + 496 * v371);
          for (n = *(_DWORD *)(v85 + 360); (signed int)n < *(_DWORD *)(v85 + 212); *(_DWORD *)(v85 + 360) = n)
          {
            if (n + 4 > *(_DWORD *)(v85 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v917);
              n = *(_DWORD *)(v85 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v85 + 216) + n) = -721215457;
            n = *(_DWORD *)(v85 + 360) + 4;
          }
          v375 = n;
          if (n + 4 > *(_DWORD *)(v85 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v917);
            v375 = *(_DWORD *)(v85 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v85 + 216) + v375) = 335544320;
          *(_DWORD *)(v85 + 360) += 4;
          if (*(_BYTE *)(v85 + 488))
            v376 = 69;
          else
            v376 = 65;
          v954 = (WTF *)n;
          LOBYTE(v955) = v376;
          *(_WORD *)((char *)&v955 + 1) = 15;
          BYTE3(v955) = -1;
          if (n != -1)
          {
            if (HIDWORD(v958) == (_DWORD)v958)
            {
              v377 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v957, (void *)(HIDWORD(v958) + 1), (unint64_t)&v954);
              v379 = *(_DWORD *)v377;
              v378 = v377 + 4;
              v380 = (_DWORD *)((char *)v957 + 12 * HIDWORD(v958));
              *v380 = v379;
              v381 = v380 + 1;
            }
            else
            {
              v382 = (unsigned int *)((char *)v957 + 12 * HIDWORD(v958));
              *v382 = n;
              v381 = v382 + 1;
              v378 = (WTF **)((char *)&v954 + 4);
            }
            *v381 = *v378;
            ++HIDWORD(v958);
          }
          v383 = HIDWORD(v976);
          if (HIDWORD(v976))
          {
            v384 = 0;
            v385 = 0;
            do
            {
              if (v385 >= HIDWORD(v976))
              {
                __break(0xC471u);
                JUMPOUT(0x195938A38);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v975 + v384), v368);
              ++v385;
              v384 += 12;
            }
            while (v383 != v385);
          }
          v386 = (WTF *)v975;
          if (v977 != (_BYTE *)v975 && v975 != 0)
          {
            v975 = 0;
            LODWORD(v976) = 0;
            WTF::fastFree(v386, v373);
          }
          v369 = *(unsigned int *)(v366 + 12);
          v370 = v369 - 1;
          v371 = ++v372;
          v85 = a1;
        }
        while (v369 - 1 > (unint64_t)v372);
        v367 = v918;
        if (!(_DWORD)v369)
        {
          __break(0xC471u);
          JUMPOUT(0x1959396C8);
        }
      }
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatching(v85, a3, a3, *(_QWORD *)v366 + 496 * v370);
      v389 = HIDWORD(v958);
      if (HIDWORD(v958))
      {
        v390 = 0;
        v391 = 0;
        do
        {
          if (v391 >= HIDWORD(v958))
          {
            __break(0xC471u);
            JUMPOUT(0x195939420);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v390), v368);
          ++v391;
          v390 += 12;
        }
        while (v389 != v391);
      }
      v392 = v957;
      if (&v959 != (uint64_t *)v957 && v957 != 0)
      {
        v957 = 0;
        LODWORD(v958) = 0;
        WTF::fastFree(v392, v388);
      }
      v366 += 16;
    }
    while (v366 != v367);
    v71 = a4;
    v86 = a3;
  }
  v394 = *(unsigned int *)(v71 + 460);
  if ((_DWORD)v394)
  {
    v395 = *(uint64_t **)(v71 + 448);
    v396 = 32 * v394;
    do
    {
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatchesSelectorList(v85, v86, 0, v395);
      v395 += 4;
      v396 -= 32;
    }
    while (v396);
  }
  v397 = *(unsigned int *)(v71 + 84);
  if ((_DWORD)v397)
  {
    v398 = *(unsigned __int8 **)(v71 + 72);
    v399 = (_QWORD *)(v85 + 544);
    do
    {
      v400 = *(_QWORD *)(a1 + 496);
      v401 = *(_QWORD *)(a1 + 504);
      v402 = *(unsigned int *)(a1 + 520);
      if (v400 <= v401)
        v403 = 0;
      else
        v403 = *(unsigned int *)(a1 + 520);
      if (v403 + v401 == v400)
      {
        __break(0xC471u);
        JUMPOUT(0x195936384);
      }
      if (v400 == v401)
      {
        __break(0xC471u);
        JUMPOUT(0x1959363A4);
      }
      v404 = (JSC::ARM64LogicalImmediate *)*v398;
      v405 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v400);
      LOBYTE(v957) = v405;
      if (v400 == v402 - 1)
        v406 = 0;
      else
        v406 = v400 + 1;
      *(_QWORD *)(a1 + 496) = v406;
      v407 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v407 == *(_DWORD *)(a1 + 552))
      {
        v418 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v399, (WTF *)(v407 + 1), (unint64_t)&v957);
        v407 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v407) = *v418;
        v405 = (char)v957;
      }
      else
      {
        *(_BYTE *)(*v399 + v407) = v405;
      }
      *(_DWORD *)(a1 + 556) = v407 + 1;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)(v85 + 160), v404, v405);
      v957 = (WTF *)(v85 + 160);
      v958 = v85 + 496;
      v959 = v85 + 600;
      v960 = v85 + 616;
      v961 = (WTF *)v963;
      v962 = 16;
      v964 = (WTF *)v966;
      v965 = 16;
      v967 = operationMatchesDir;
      v968 = 2;
      LOBYTE(v969) = 0;
      HIBYTE(v969) = v405;
      WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v975, &v957);
      if ((_DWORD)v975 != -1)
      {
        v409 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v409 == *(_DWORD *)(a3 + 8))
        {
          v410 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v409 + 1), (unint64_t)&v975);
          v412 = *(_DWORD *)v410;
          v411 = v410 + 4;
          v413 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
          *v413 = v412;
          v414 = v413 + 1;
        }
        else
        {
          v415 = (_DWORD *)(*(_QWORD *)a3 + 12 * v409);
          *v415 = v975;
          v414 = v415 + 1;
          v411 = (unint64_t *)((char *)&v975 + 4);
        }
        *v414 = *v411;
        ++*(_DWORD *)(a3 + 12);
      }
      v416 = v964;
      if (v966 != (_BYTE *)v964 && v964)
      {
        v964 = 0;
        LODWORD(v965) = 0;
        WTF::fastFree(v416, v408);
      }
      v417 = v961;
      if (v963 != (_BYTE *)v961 && v961)
      {
        v961 = 0;
        LODWORD(v962) = 0;
        WTF::fastFree(v417, v408);
      }
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(v85 + 496), v405);
      ++v398;
      --v397;
    }
    while (v397);
    v71 = a4;
  }
  v419 = *(unsigned int *)(v71 + 100);
  if ((_DWORD)v419)
  {
    v420 = *(unint64_t **)(a4 + 88);
    v421 = (unint64_t *)(a1 + 496);
    v422 = 8 * v419;
    do
    {
      v423 = *v420;
      v424 = WebCore::RegisterAllocator::allocateRegisterWithPreference(v421);
      v425 = v424;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)(a1 + 160), v423, v424);
      v957 = (WTF *)(a1 + 160);
      v958 = a1 + 496;
      v959 = a1 + 600;
      v960 = a1 + 616;
      v961 = (WTF *)v963;
      v962 = 16;
      v964 = (WTF *)v966;
      v965 = 16;
      v967 = operationMatchesLangPseudoClass;
      v968 = 2;
      LOBYTE(v969) = 0;
      HIBYTE(v969) = v425;
      WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v975, &v957);
      if ((_DWORD)v975 != -1)
      {
        v427 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v427 == *(_DWORD *)(a3 + 8))
        {
          v428 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v427 + 1), (unint64_t)&v975);
          v430 = *(_DWORD *)v428;
          v429 = v428 + 4;
          v431 = (_DWORD *)(*(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12));
          *v431 = v430;
          v432 = v431 + 1;
        }
        else
        {
          v433 = (_DWORD *)(*(_QWORD *)a3 + 12 * v427);
          *v433 = v975;
          v432 = v433 + 1;
          v429 = (unint64_t *)((char *)&v975 + 4);
        }
        *v432 = *v429;
        ++*(_DWORD *)(a3 + 12);
      }
      v434 = v964;
      if (v966 != (_BYTE *)v964 && v964)
      {
        v964 = 0;
        LODWORD(v965) = 0;
        WTF::fastFree(v434, v426);
      }
      v435 = v961;
      if (v963 != (_BYTE *)v961 && v961)
      {
        v961 = 0;
        LODWORD(v962) = 0;
        WTF::fastFree(v435, v426);
      }
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)v421, v425);
      ++v420;
      v422 -= 8;
    }
    while (v422);
  }
  v436 = a4;
  v437 = a3;
  v438 = a1;
  if (*(_DWORD *)(a4 + 364))
  {
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthChildRelationUpdate((WebCore::SelectorCompiler::SelectorCodeGenerator *)a1, (const WebCore::SelectorCompiler::SelectorFragment *)a4);
    v439 = *(unsigned int *)(a4 + 364);
    if ((_DWORD)v439)
    {
      v440 = 40 * v439;
      v441 = (uint64_t *)(*(_QWORD *)(a4 + 352) + 8);
      do
      {
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatchesSelectorList(a1, a3, 0, v441);
        v441 += 5;
        v440 -= 40;
      }
      while (v440);
      v443 = *(WTF **)(a4 + 352);
      v444 = *(unsigned int *)(a4 + 364);
      v954 = 0;
      v955 = 0;
      if ((_DWORD)v444)
      {
        v445 = 0;
        v446 = 0;
        v447 = 40 * v444;
        do
        {
          if (*(_DWORD *)v443 != 1 || *((_DWORD *)v443 + 1) >= 2u)
          {
            v957 = v443;
            if (v446 == (_DWORD)v955)
            {
              v448 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v954, v446 + 1, (unint64_t)&v957);
              v446 = HIDWORD(v955);
              v445 = v954;
              *((_QWORD *)v954 + HIDWORD(v955)) = *(_QWORD *)v448;
            }
            else
            {
              *((_QWORD *)v445 + v446) = v443;
            }
            HIDWORD(v955) = ++v446;
          }
          v443 = (WTF *)((char *)v443 + 40);
          v447 -= 40;
        }
        while (v447);
        v912 = v445;
        if (v446)
        {
          v449 = (unint64_t *)(a1 + 496);
          v450 = a1 + 160;
          v910 = (JSC::AssemblerBuffer *)(a1 + 216);
          v921 = (_QWORD *)(a1 + 544);
          v451 = v445;
          v915 = (WTF *)((char *)v445 + 8 * v446);
          v919 = (uint64_t *)(a1 + 496);
          do
          {
            v452 = *(uint64_t **)v451;
            v453 = WebCore::RegisterAllocator::allocateRegisterWithPreference(v449);
            v454 = *(_DWORD *)(v438 + 360);
            if (v454 + 4 > *(_DWORD *)(v438 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v910);
              v454 = *(_DWORD *)(v438 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v438 + 216) + v454) = v453 | 0x320003E0;
            *(_DWORD *)(v438 + 360) += 4;
            v455 = *(_QWORD *)(v438 + 496);
            v456 = *(_QWORD *)(v438 + 504);
            v457 = *(unsigned int *)(v438 + 520);
            if (v455 <= v456)
              v458 = 0;
            else
              v458 = *(unsigned int *)(v438 + 520);
            if (v458 + v456 == v455)
            {
              __break(0xC471u);
              JUMPOUT(0x1959363C4);
            }
            if (v455 == v456)
            {
              __break(0xC471u);
              JUMPOUT(0x1959363E4);
            }
            v459 = *(_QWORD *)(a1 + 512);
            v460 = *(unsigned __int8 *)(v459 + v455);
            LOBYTE(v957) = *(_BYTE *)(v459 + v455);
            if (v455 == v457 - 1)
              v461 = 0;
            else
              v461 = v455 + 1;
            *(_QWORD *)(a1 + 496) = v461;
            v462 = *(unsigned int *)(a1 + 556);
            if ((_DWORD)v462 == *(_DWORD *)(a1 + 552))
            {
              v483 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v921, (WTF *)(v462 + 1), (unint64_t)&v957);
              v462 = *(unsigned int *)(a1 + 556);
              *(_BYTE *)(*(_QWORD *)(a1 + 544) + v462) = *v483;
              v460 = v957;
            }
            else
            {
              *(_BYTE *)(*v921 + v462) = v460;
            }
            *(_DWORD *)(a1 + 556) = v462 + 1;
            if (v460)
            {
              if (v460 == 31)
              {
                v463 = a1;
                v482 = *(_DWORD *)(a1 + 360);
                if (v482 + 4 > *(_DWORD *)(a1 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v910);
                  v482 = *(_DWORD *)(a1 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 216) + v482) = -1862270945;
              }
              else
              {
                v463 = a1;
                v464 = *(_DWORD *)(a1 + 360);
                if (v464 + 4 > *(_DWORD *)(a1 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v910);
                  v464 = *(_DWORD *)(a1 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 216) + v464) = v460 | 0xAA0003E0;
              }
              v465 = *(_DWORD *)(v463 + 360) + 4;
              *(_DWORD *)(v463 + 360) = v465;
            }
            else
            {
              v463 = a1;
              v465 = *(_DWORD *)(a1 + 360);
            }
            v957 = (WTF *)&v959;
            v958 = 2;
            while (v465 < *(_DWORD *)(v463 + 212))
            {
              v463 = a1;
              if ((v465 + 4) > *(_DWORD *)(a1 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v910);
                v465 = *(_DWORD *)(a1 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 216) + v465) = -721215457;
              v465 = *(_DWORD *)(a1 + 360) + 4;
              *(_DWORD *)(a1 + 360) = v465;
            }
            *(_DWORD *)(a1 + 368) = 0;
            v466 = v460;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacentElement(a1, (uint64_t)&v957, (char)v460);
            v975 = (unint64_t)v977;
            v976 = 2;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatchesSelectorList(a1, (uint64_t)&v975, v460, v452 + 1);
            if (HIDWORD(v976))
            {
              v467 = (unsigned int *)v975;
              v468 = 12 * HIDWORD(v976);
              do
              {
                v970 = v465;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v467, &v970, v450);
                v467 += 3;
                v468 -= 12;
              }
              while (v468);
            }
            v469 = a1;
            v470 = *(_DWORD *)(a1 + 360);
            if (v470 + 4 > *(_DWORD *)(a1 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v910);
              v470 = *(_DWORD *)(a1 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 216) + v470) = v453 | (32 * v453) | 0x11000400;
            while (1)
            {
              v471 = *(_DWORD *)(v469 + 360) + 4;
              *(_DWORD *)(v469 + 360) = v471;
              if (v471 >= *(_DWORD *)(v469 + 212))
                break;
              v469 = a1;
              if ((v471 + 4) > *(_DWORD *)(a1 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v910);
                v471 = *(_DWORD *)(a1 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 216) + v471) = -721215457;
            }
            v472 = v471;
            if ((v471 + 4) > *(_DWORD *)(a1 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v910);
              v472 = *(_DWORD *)(a1 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 216) + v472) = 335544320;
            *(_DWORD *)(a1 + 360) += 4;
            if (*(_BYTE *)(a1 + 488))
              v473 = 69;
            else
              v473 = 65;
            v970 = v471;
            v971 = 0;
            v972 = v473;
            v973 = 15;
            v974 = -1;
            v949 = v465;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v970, &v949, v450);
            v475 = HIDWORD(v958);
            if (HIDWORD(v958))
            {
              v476 = 0;
              v477 = 0;
              do
              {
                if (v477 >= HIDWORD(v958))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959394D8);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v476), v450);
                ++v477;
                v476 += 12;
              }
              while (v475 != v477);
            }
            v478 = (WTF *)v975;
            if (v977 != (_BYTE *)v975 && v975 != 0)
            {
              v975 = 0;
              LODWORD(v976) = 0;
              WTF::fastFree(v478, v474);
            }
            v480 = v957;
            v449 = (unint64_t *)(a1 + 496);
            if (&v959 != (uint64_t *)v957 && v957)
            {
              v957 = 0;
              LODWORD(v958) = 0;
              WTF::fastFree(v480, v474);
            }
            WebCore::RegisterAllocator::deallocateRegister(v919, v466);
            v438 = a1;
            v437 = a3;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthFilterTest(a1, a3, v453, (JSC::ARM64LogicalImmediate *)*(unsigned int *)v452, (JSC::ARM64LogicalImmediate *)*((unsigned int *)v452 + 1), v481);
            WebCore::RegisterAllocator::deallocateRegister(v919, v453);
            v451 = (WTF *)((char *)v451 + 8);
          }
          while (v451 != v915);
        }
        v436 = a4;
        if (v912)
        {
          v954 = 0;
          LODWORD(v955) = 0;
          WTF::fastFree(v912, v442);
        }
      }
    }
  }
  if (*(_DWORD *)(v436 + 412))
  {
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthLastChildParentCheckAndRelationUpdate(v438, v437, v436, v87);
    v484 = *(unsigned int *)(v436 + 412);
    if ((_DWORD)v484)
    {
      v485 = 40 * v484;
      v486 = (uint64_t *)(*(_QWORD *)(v436 + 400) + 8);
      do
      {
        WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatchesSelectorList(v438, v437, 0, v486);
        v486 += 5;
        v485 -= 40;
      }
      while (v485);
      v487 = *(unsigned int *)(v436 + 412);
      v955 = 0;
      if ((_DWORD)v487)
      {
        if (v487 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1959396F0);
        }
        v489 = (WTF *)WTF::fastMalloc((WTF *)(8 * v487));
        LODWORD(v955) = v487;
        v954 = v489;
        v490 = *(unsigned int *)(v436 + 412);
        if (!(_DWORD)v490)
          goto LABEL_694;
        v491 = 0;
        v492 = *(WTF **)(v436 + 400);
        v493 = 40 * v490;
        do
        {
          if (*(_DWORD *)v492 != 1 || *((_DWORD *)v492 + 1) >= 2u)
          {
            v957 = v492;
            if (v491 == (_DWORD)v955)
            {
              v494 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v954, v491 + 1, (unint64_t)&v957);
              v491 = HIDWORD(v955);
              v489 = v954;
              *((_QWORD *)v954 + HIDWORD(v955)) = *(_QWORD *)v494;
            }
            else
            {
              *((_QWORD *)v489 + v491) = v492;
            }
            HIDWORD(v955) = ++v491;
          }
          v492 = (WTF *)((char *)v492 + 40);
          v493 -= 40;
        }
        while (v493);
        v495 = v491;
        v489 = v954;
        if (v955 <= v491)
        {
          if (!v491)
          {
LABEL_692:
            if (!v489)
              goto LABEL_695;
            v954 = 0;
            LODWORD(v955) = 0;
            goto LABEL_694;
          }
LABEL_634:
          v496 = (unint64_t *)(v438 + 496);
          v497 = v438 + 160;
          v911 = (JSC::AssemblerBuffer *)(v438 + 216);
          v498 = v977;
          v922 = (_QWORD *)(v438 + 544);
          v499 = v489;
          v913 = v489;
          v916 = (WTF *)((char *)v489 + 8 * v495);
          v920 = (uint64_t *)(v438 + 496);
          do
          {
            v926 = *(uint64_t **)v499;
            v500 = WebCore::RegisterAllocator::allocateRegisterWithPreference(v496);
            v501 = *(_DWORD *)(v438 + 360);
            if (v501 + 4 > *(_DWORD *)(v438 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v911);
              v501 = *(_DWORD *)(v438 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v438 + 216) + v501) = v500 | 0x320003E0;
            *(_DWORD *)(v438 + 360) += 4;
            v502 = *(_QWORD *)(v438 + 496);
            v503 = *(_QWORD *)(v438 + 504);
            v504 = *(unsigned int *)(v438 + 520);
            if (v502 <= v503)
              v505 = 0;
            else
              v505 = *(unsigned int *)(v438 + 520);
            if (v505 + v503 == v502)
            {
              __break(0xC471u);
              JUMPOUT(0x195936404);
            }
            if (v502 == v503)
            {
              __break(0xC471u);
              JUMPOUT(0x195936424);
            }
            v506 = *(_QWORD *)(a1 + 512);
            v507 = *(unsigned __int8 *)(v506 + v502);
            LOBYTE(v957) = *(_BYTE *)(v506 + v502);
            if (v502 == v504 - 1)
              v508 = 0;
            else
              v508 = v502 + 1;
            *(_QWORD *)(a1 + 496) = v508;
            v509 = *(unsigned int *)(a1 + 556);
            if ((_DWORD)v509 == *(_DWORD *)(a1 + 552))
            {
              v531 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v922, (WTF *)(v509 + 1), (unint64_t)&v957);
              v509 = *(unsigned int *)(a1 + 556);
              *(_BYTE *)(*(_QWORD *)(a1 + 544) + v509) = *v531;
              v507 = v957;
            }
            else
            {
              *(_BYTE *)(*v922 + v509) = v507;
            }
            *(_DWORD *)(a1 + 556) = v509 + 1;
            if (v507)
            {
              if (v507 == 31)
              {
                v510 = a1;
                v530 = *(_DWORD *)(a1 + 360);
                if (v530 + 4 > *(_DWORD *)(a1 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v911);
                  v530 = *(_DWORD *)(a1 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 216) + v530) = -1862270945;
              }
              else
              {
                v510 = a1;
                v511 = *(_DWORD *)(a1 + 360);
                if (v511 + 4 > *(_DWORD *)(a1 + 352))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v911);
                  v511 = *(_DWORD *)(a1 + 360);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 216) + v511) = v507 | 0xAA0003E0;
              }
              v512 = *(_DWORD *)(v510 + 360) + 4;
              *(_DWORD *)(v510 + 360) = v512;
            }
            else
            {
              v510 = a1;
              v512 = *(_DWORD *)(a1 + 360);
            }
            v957 = (WTF *)&v959;
            v958 = 2;
            while (v512 < *(_DWORD *)(v510 + 212))
            {
              v510 = a1;
              if ((v512 + 4) > *(_DWORD *)(a1 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v911);
                v512 = *(_DWORD *)(a1 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 216) + v512) = -721215457;
              v512 = *(_DWORD *)(a1 + 360) + 4;
              *(_DWORD *)(a1 + 360) = v512;
            }
            *(_DWORD *)(a1 + 368) = 0;
            v513 = v507;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToNextAdjacentElement(a1, (uint64_t)&v957, v507);
            v514 = v498;
            v975 = (unint64_t)v498;
            v976 = 2;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementMatchesSelectorList(a1, (uint64_t)&v975, v507, v926 + 1);
            if (HIDWORD(v976))
            {
              v515 = (unsigned int *)v975;
              v516 = 12 * HIDWORD(v976);
              do
              {
                v970 = v512;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v515, &v970, v497);
                v515 += 3;
                v516 -= 12;
              }
              while (v516);
            }
            v517 = *(_DWORD *)(a1 + 360);
            if (v517 + 4 > *(_DWORD *)(a1 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v911);
              v517 = *(_DWORD *)(a1 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 216) + v517) = v500 | (32 * v500) | 0x11000400;
            v518 = *(_DWORD *)(a1 + 360) + 4;
            *(_DWORD *)(a1 + 360) = v518;
            v519 = *(_DWORD *)(a1 + 212);
            v498 = v514;
            while (v518 < v519)
            {
              if ((v518 + 4) > *(_DWORD *)(a1 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v911);
                v518 = *(_DWORD *)(a1 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 216) + v518) = -721215457;
              v518 = *(_DWORD *)(a1 + 360) + 4;
              *(_DWORD *)(a1 + 360) = v518;
              v519 = *(_DWORD *)(a1 + 212);
            }
            v520 = v518;
            if ((v518 + 4) > *(_DWORD *)(a1 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v911);
              v520 = *(_DWORD *)(a1 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 216) + v520) = 335544320;
            *(_DWORD *)(a1 + 360) += 4;
            if (*(_BYTE *)(a1 + 488))
              v521 = 69;
            else
              v521 = 65;
            v970 = v518;
            v971 = 0;
            v972 = v521;
            v973 = 15;
            v974 = -1;
            v949 = v512;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v970, &v949, v497);
            v523 = HIDWORD(v958);
            if (HIDWORD(v958))
            {
              v524 = 0;
              v525 = 0;
              do
              {
                if (v525 >= HIDWORD(v958))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959394E0);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v957 + v524), v497);
                ++v525;
                v524 += 12;
              }
              while (v523 != v525);
            }
            v526 = (WTF *)v975;
            if (v514 != (_BYTE *)v975 && v975 != 0)
            {
              v975 = 0;
              LODWORD(v976) = 0;
              WTF::fastFree(v526, v522);
            }
            v528 = v957;
            v496 = (unint64_t *)v920;
            if (&v959 != (uint64_t *)v957 && v957)
            {
              v957 = 0;
              LODWORD(v958) = 0;
              WTF::fastFree(v528, v522);
            }
            WebCore::RegisterAllocator::deallocateRegister(v920, v513);
            v438 = a1;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthFilterTest(a1, a3, v500, (JSC::ARM64LogicalImmediate *)*(unsigned int *)v926, (JSC::ARM64LogicalImmediate *)*((unsigned int *)v926 + 1), v529);
            WebCore::RegisterAllocator::deallocateRegister(v920, v500);
            v499 = (WTF *)((char *)v499 + 8);
          }
          while (v499 != v916);
          v436 = a4;
          v489 = v913;
          goto LABEL_692;
        }
        if (v491)
        {
          LODWORD(v955) = v491;
          v489 = (WTF *)WTF::fastRealloc(v954, (void *)(8 * v491));
          v954 = v489;
          goto LABEL_634;
        }
        if (v954)
LABEL_694:
          WTF::fastFree(v489, v488);
      }
    }
  }
LABEL_695:
  v532 = *(_QWORD *)(v436 + 184);
  if (v532)
  {
    v533 = *(_DWORD *)(v532 - 8);
    LODWORD(v534) = v533 & 0x2328354B;
    v535 = *(unsigned __int8 *)(v532 + (v533 & 0x2328354B));
    if (v535 == 80)
    {
LABEL_701:
      WebCore::SelectorCompiler::SelectorCodeGenerator::generateStoreLastVisitedElement(v438);
    }
    else
    {
      v536 = 1;
      while (v535 != 255)
      {
        v534 = ((_DWORD)v534 + v536) & v533;
        v535 = *(unsigned __int8 *)(v532 + v534);
        ++v536;
        if (v535 == 80)
          goto LABEL_701;
      }
    }
  }
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToParentElement(uint64_t a1, uint64_t a2, unsigned __int8 a3, double a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  int8x8_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  v7 = a1 + 160;
  v8 = a3 & 0x1F | 0xF8420000;
  v9 = *(_DWORD *)(a1 + 360);
  if (v9 + 4 > *(_DWORD *)(a1 + 352))
  {
    a4 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
    v9 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v9) = v8;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::branchTest64(v7, 0, a3, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v25, *(int8x8_t *)&a4);
  v10 = v25;
  if (v25 != -1)
  {
    v11 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
    {
      v12 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v11 + 1), (unint64_t)&v25);
      v14 = *(_DWORD *)v12;
      v13 = (uint64_t *)(v12 + 4);
      v10 = v14;
      LODWORD(v11) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v13 = &v26;
    }
    v15 = *(_QWORD *)a2 + 12 * v11;
    *(_DWORD *)v15 = v10;
    *(_QWORD *)(v15 + 4) = *v13;
    ++*(_DWORD *)(a2 + 12);
  }
  if (*(_BYTE *)(a1 + 372))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
    JSC::MacroAssemblerARM64::load16(v7, a3 | 0x1C00000000, *(_BYTE *)(a1 + 464));
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, v7, 0, 17, (uint64_t)&v23, v16);
    v17 = v23;
    if (v23 != -1)
    {
      v18 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v18 == *(_DWORD *)(a2 + 8))
      {
        v19 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v18 + 1), (unint64_t)&v23);
        v21 = *(_DWORD *)v19;
        v20 = (int *)(v19 + 4);
        v17 = v21;
        LODWORD(v18) = *(_DWORD *)(a2 + 12);
      }
      else
      {
        v20 = &v24;
      }
      v22 = *(_QWORD *)a2 + 12 * v18;
      *(_DWORD *)v22 = v17;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)v20;
      ++*(_DWORD *)(a2 + 12);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures(uint64_t result, unsigned int *a2, int a3, uint64_t a4, unsigned int a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  int v50;
  WTF *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;

  switch(a3)
  {
    case 0:
      if (a5)
      {
        v8 = a2[2];
        v9 = a2[3];
        v10 = v9 + a5;
        if (v10 > v8)
        {
          v11 = v8 + (v8 >> 2);
          if (v11 >= 0x10)
            v12 = v11 + 1;
          else
            v12 = 16;
          if (v12 <= v10)
            v12 = v9 + a5;
          v13 = *(WTF **)a2;
          if (v12 < 3)
          {
            result = (uint64_t)(a2 + 4);
            *(_QWORD *)a2 = a2 + 4;
            a2[2] = 2;
          }
          else
          {
            if (v12 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x195939FD0);
            }
            v14 = 12 * v12;
            result = WTF::fastMalloc((WTF *)(12 * v12));
            a2[2] = (v14 & 0xFFFFFFFC) / 0xC;
            *(_QWORD *)a2 = result;
          }
          if ((_DWORD)v9)
          {
            v51 = v13;
            do
            {
              *(_DWORD *)result = *(_DWORD *)v51;
              *(_QWORD *)(result + 4) = *(_QWORD *)((char *)v51 + 4);
              v51 = (WTF *)((char *)v51 + 12);
              result += 12;
            }
            while (v51 != (WTF *)((char *)v13 + 12 * v9));
          }
          if (a2 + 4 != (unsigned int *)v13 && v13)
          {
            if (*(WTF **)a2 == v13)
            {
              *(_QWORD *)a2 = 0;
              a2[2] = 0;
            }
            result = WTF::fastFree(v13, a2);
          }
        }
        v52 = a2[3];
        if (v10 < v52)
        {
          __break(0xC471u);
          JUMPOUT(0x195939FB8);
        }
        v53 = *(_QWORD *)a2 + 12 * v52;
        v54 = a4 + 12 * a5;
        do
        {
          *(_DWORD *)v53 = *(_DWORD *)a4;
          *(_QWORD *)(v53 + 4) = *(_QWORD *)(a4 + 4);
          a4 += 12;
          v53 += 12;
        }
        while (a4 != v54);
        a2[3] = v10;
      }
      return result;
    case 1:
      v27 = *(_QWORD *)(result + 3272);
      if (*(_QWORD *)(result + 3264) == v27)
      {
        __break(0xC471u);
        JUMPOUT(0x195939F28);
      }
      if (v27)
      {
        if (!a5)
          return result;
      }
      else
      {
        v27 = *(unsigned int *)(result + 3288);
        if (!a5)
          return result;
      }
      v28 = *(_DWORD *)(*(_QWORD *)(result + 3280) + 112 * v27 - 112);
      v29 = result + 160;
      v30 = 12 * a5;
      do
      {
        v63 = v28;
        result = (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)a4, &v63, v29);
        a4 += 12;
        v30 -= 12;
      }
      while (v30);
      return result;
    case 2:
      v19 = *(_QWORD *)(result + 3272);
      if (*(_QWORD *)(result + 3264) == v19)
      {
        __break(0xC471u);
        JUMPOUT(0x195939EE8);
      }
      if (v19)
      {
        if (!a5)
          return result;
      }
      else
      {
        v19 = *(unsigned int *)(result + 3288);
        if (!a5)
          return result;
      }
      v20 = *(_DWORD *)(*(_QWORD *)(result + 3280) + 112 * v19 - 108);
      v21 = result + 160;
      v22 = 12 * a5;
      do
      {
        v63 = v20;
        result = (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)a4, &v63, v21);
        a4 += 12;
        v22 -= 12;
      }
      while (v22);
      return result;
    case 3:
      v23 = *(_QWORD *)(result + 3272);
      if (*(_QWORD *)(result + 3264) == v23)
      {
        __break(0xC471u);
        JUMPOUT(0x195939F08);
      }
      if (v23)
      {
        if (!a5)
          return result;
      }
      else
      {
        v23 = *(unsigned int *)(result + 3288);
        if (!a5)
          return result;
      }
      v24 = *(_DWORD *)(*(_QWORD *)(result + 3280) + 112 * v23 - 104);
      v25 = result + 160;
      v26 = 12 * a5;
      do
      {
        v63 = v24;
        result = (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)a4, &v63, v25);
        a4 += 12;
        v26 -= 12;
      }
      while (v26);
      return result;
    case 4:
      v15 = *(_QWORD *)(result + 3272);
      if (*(_QWORD *)(result + 3264) == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x195939EC8);
      }
      if (v15)
      {
        if (!a5)
          return result;
      }
      else
      {
        v15 = *(unsigned int *)(result + 3288);
        if (!a5)
          return result;
      }
      v16 = *(_DWORD *)(*(_QWORD *)(result + 3280) + 112 * v15 - 100);
      v17 = result + 160;
      v18 = 12 * a5;
      do
      {
        v63 = v16;
        result = (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)a4, &v63, v17);
        a4 += 12;
        v18 -= 12;
      }
      while (v18);
      return result;
    case 5:
      v31 = *(_QWORD *)(result + 3272);
      if (*(_QWORD *)(result + 3264) == v31)
      {
        __break(0xC471u);
        JUMPOUT(0x195939F48);
      }
      if (v31)
      {
        if (a5)
        {
LABEL_39:
          v32 = *(_QWORD *)(result + 3280);
          v33 = v32 + 112 * v31 - 88;
          v35 = *(unsigned int *)(v32 + 112 * v31 - 80);
          v36 = *(unsigned int *)(v33 + 12);
          v37 = v36 + a5;
          if (v37 > v35)
          {
            v38 = v35 + (v35 >> 2);
            if (v38 >= 0x10)
              v39 = v38 + 1;
            else
              v39 = 16;
            if (v39 <= v37)
              v39 = v36 + a5;
            v40 = *(WTF **)v33;
            if (v39 < 3)
            {
              result = v33 + 16;
              *(_QWORD *)v33 = v33 + 16;
              *(_DWORD *)(v33 + 8) = 2;
            }
            else
            {
              if (v39 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x195939FD8);
              }
              v41 = 12 * v39;
              result = WTF::fastMalloc((WTF *)(12 * v39));
              *(_DWORD *)(v33 + 8) = (v41 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)v33 = result;
            }
            if ((_DWORD)v36)
            {
              v55 = v40;
              do
              {
                *(_DWORD *)result = *(_DWORD *)v55;
                *(_QWORD *)(result + 4) = *(_QWORD *)((char *)v55 + 4);
                v55 = (WTF *)((char *)v55 + 12);
                result += 12;
              }
              while (v55 != (WTF *)((char *)v40 + 12 * v36));
            }
            if ((WTF *)(v33 + 16) != v40 && v40)
            {
              if (*(WTF **)v33 == v40)
              {
                *(_QWORD *)v33 = 0;
                *(_DWORD *)(v33 + 8) = 0;
              }
              result = WTF::fastFree(v40, a2);
            }
          }
          v56 = *(unsigned int *)(v33 + 12);
          if (v37 < v56)
          {
            __break(0xC471u);
            JUMPOUT(0x195939FC0);
          }
          v57 = *(_QWORD *)v33 + 12 * v56;
          v58 = a4 + 12 * a5;
          do
          {
            *(_DWORD *)v57 = *(_DWORD *)a4;
            *(_QWORD *)(v57 + 4) = *(_QWORD *)(a4 + 4);
            a4 += 12;
            v57 += 12;
          }
          while (a4 != v58);
          goto LABEL_98;
        }
      }
      else
      {
        v31 = *(unsigned int *)(result + 3288);
        if (a5)
          goto LABEL_39;
      }
      return result;
    case 6:
      v42 = *(_QWORD *)(result + 3272);
      if (*(_QWORD *)(result + 3264) == v42)
      {
        __break(0xC471u);
        JUMPOUT(0x195939F68);
      }
      if (v42)
      {
        if (!a5)
          return result;
      }
      else
      {
        v42 = *(unsigned int *)(result + 3288);
        if (!a5)
          return result;
      }
      v43 = *(_QWORD *)(result + 3280);
      v33 = v43 + 112 * v42 - 40;
      v45 = *(unsigned int *)(v43 + 112 * v42 - 32);
      v46 = *(unsigned int *)(v33 + 12);
      v37 = v46 + a5;
      if (v37 > v45)
      {
        v47 = v45 + (v45 >> 2);
        if (v47 >= 0x10)
          v48 = v47 + 1;
        else
          v48 = 16;
        if (v48 <= v37)
          v48 = v46 + a5;
        v49 = *(WTF **)v33;
        if (v48 < 3)
        {
          result = v33 + 16;
          *(_QWORD *)v33 = v33 + 16;
          *(_DWORD *)(v33 + 8) = 2;
        }
        else
        {
          if (v48 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x195939FE0);
          }
          v50 = 12 * v48;
          result = WTF::fastMalloc((WTF *)(12 * v48));
          *(_DWORD *)(v33 + 8) = (v50 & 0xFFFFFFFC) / 0xC;
          *(_QWORD *)v33 = result;
        }
        if ((_DWORD)v46)
        {
          v59 = v49;
          do
          {
            *(_DWORD *)result = *(_DWORD *)v59;
            *(_QWORD *)(result + 4) = *(_QWORD *)((char *)v59 + 4);
            v59 = (WTF *)((char *)v59 + 12);
            result += 12;
          }
          while (v59 != (WTF *)((char *)v49 + 12 * v46));
        }
        if ((WTF *)(v33 + 16) != v49 && v49)
        {
          if (*(WTF **)v33 == v49)
          {
            *(_QWORD *)v33 = 0;
            *(_DWORD *)(v33 + 8) = 0;
          }
          result = WTF::fastFree(v49, a2);
        }
      }
      v60 = *(unsigned int *)(v33 + 12);
      if (v37 < v60)
      {
        __break(0xC471u);
        JUMPOUT(0x195939FC8);
      }
      v61 = *(_QWORD *)v33 + 12 * v60;
      v62 = a4 + 12 * a5;
      do
      {
        *(_DWORD *)v61 = *(_DWORD *)a4;
        *(_QWORD *)(v61 + 4) = *(_QWORD *)(a4 + 4);
        a4 += 12;
        v61 += 12;
      }
      while (a4 != v62);
LABEL_98:
      *(_DWORD *)(v33 + 12) = v37;
      return result;
    default:
      return result;
  }
}

uint64_t WTF::Deque<WebCore::SelectorCompiler::BacktrackingLevel,32ul>::last(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19593A040);
  }
  if (!v1)
    v1 = *(unsigned int *)(a1 + 24);
  return *(_QWORD *)(a1 + 16) + 112 * v1 - 112;
}

WTF *WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacent(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  JSC::AssemblerBuffer *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  WTF *result;
  _BYTE *v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[24];

  v6 = *(_DWORD *)(a3 + 16);
  if (v6 <= 4)
  {
    v8 = *(_QWORD *)(a1 + 496);
    v9 = *(_QWORD *)(a1 + 504);
    v10 = v9;
    if (v8 > v9)
      v10 = v9 + *(unsigned int *)(a1 + 520);
    if (v10 == v8)
    {
      __break(0xC471u);
      JUMPOUT(0x19593A238);
    }
    if (v8 == v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19593A258);
    }
    v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 512) + v8);
    LOBYTE(v27) = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v8);
    if (v8 == *(unsigned int *)(a1 + 520) - 1)
      v11 = 0;
    else
      v11 = v8 + 1;
    *(_QWORD *)(a1 + 496) = v11;
    v12 = (_QWORD *)(a1 + 544);
    v13 = *(unsigned int *)(a1 + 556);
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 552))
    {
      v26 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, (WTF *)(v13 + 1), (unint64_t)&v27);
      v13 = *(unsigned int *)(a1 + 556);
      *(_BYTE *)(*(_QWORD *)(a1 + 544) + v13) = *v26;
      v7 = v27;
    }
    else
    {
      *(_BYTE *)(*v12 + v13) = v7;
    }
    *(_DWORD *)(a1 + 556) = v13 + 1;
    if (v7)
    {
      if (v7 == 31)
        v14 = -1862270945;
      else
        v14 = v7 | 0xAA0003E0;
      v15 = (unsigned int *)(a1 + 360);
      v16 = *(_DWORD *)(a1 + 360);
      if (v16 + 4 > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v16 = *v15;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v16) = v14;
      *v15 += 4;
    }
  }
  else
  {
    v7 = 0;
  }
  v27 = (WTF *)v29;
  v28 = 2;
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacentElement(a1, (uint64_t)&v27, (char)v7);
  WebCore::SelectorCompiler::SelectorCodeGenerator::linkFailures(a1, a2, *(_DWORD *)(a3 + 16), (uint64_t)v27, HIDWORD(v28));
  if (v6 <= 4)
  {
    if (v7)
    {
      if (v7 == 31)
      {
        v19 = (JSC::AssemblerBuffer *)(a1 + 216);
        v20 = (unsigned int *)(a1 + 360);
        v21 = *(_DWORD *)(a1 + 360);
        v22 = v21 + 4;
        v23 = *(_DWORD *)(a1 + 352);
        v18 = -1862269984;
      }
      else
      {
        if (v7 == 63)
          v18 = -763363328;
        else
          v18 = ((v7 & 0x1F) << 16) | 0xAA0003E0;
        v19 = (JSC::AssemblerBuffer *)(a1 + 216);
        v20 = (unsigned int *)(a1 + 360);
        v21 = *(_DWORD *)(a1 + 360);
        v22 = v21 + 4;
        v23 = *(_DWORD *)(a1 + 352);
      }
      if (v22 > v23)
      {
        JSC::AssemblerBuffer::outOfLineGrow(v19);
        v21 = *v20;
      }
      *(_DWORD *)(*(_QWORD *)v19 + v21) = v18;
      *v20 += 4;
    }
    WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v7);
  }
  result = v27;
  if (v29 != (_BYTE *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

uint64_t WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacentElement(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  int8x8_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t result;
  JSC::AssemblerBuffer *v17;
  JSC::AssemblerBuffer *v18;
  int v19;
  unsigned int v20[3];
  int v21;
  uint64_t v22;

  v6 = a1 + 160;
  v7 = *(_DWORD *)(a1 + 360);
  if (v7 < *(_DWORD *)(a1 + 212))
  {
    v17 = (JSC::AssemblerBuffer *)(a1 + 216);
    do
    {
      if ((v7 + 4) > *(_DWORD *)(a1 + 352))
      {
        v18 = v17;
        JSC::AssemblerBuffer::outOfLineGrow(v17);
        v17 = v18;
        v7 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v7) = -721215457;
      v7 = *(_DWORD *)(a1 + 360) + 4;
      *(_DWORD *)(a1 + 360) = v7;
    }
    while (v7 < *(_DWORD *)(a1 + 212));
  }
  *(_DWORD *)(a1 + 368) = 0;
  JSC::MacroAssemblerARM64::load64(v6, a3 | 0x3000000000, a3);
  JSC::MacroAssemblerARM64::and64(v6, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFFFFFLL, a3);
  JSC::MacroAssemblerARM64::branchTest64(v6, 0, a3, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v21, v8);
  v9 = v21;
  if (v21 != -1)
  {
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
    {
      v11 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v10 + 1), (unint64_t)&v21);
      v13 = *(_DWORD *)v11;
      v12 = (uint64_t *)(v11 + 4);
      v9 = v13;
      LODWORD(v10) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v12 = &v22;
    }
    v14 = *(_QWORD *)a2 + 12 * v10;
    *(_DWORD *)v14 = v9;
    *(_QWORD *)(v14 + 4) = *v12;
    ++*(_DWORD *)(a2 + 12);
  }
  if (*(_BYTE *)(a1 + 372))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
    JSC::MacroAssemblerARM64::load16(v6, a3 | 0x1C00000000, *(_BYTE *)(a1 + 464));
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, v6, 0, 17, (uint64_t)v20, v15);
    v19 = v7;
    return (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v20, (unsigned int *)&v19, v6);
  }
  else
  {
    result = 6195;
    __break(0xC471u);
  }
  return result;
}

__int128 *operationAddStyleRelationFunction(uint64_t a1, uint64_t a2)
{
  __int128 *result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  result = (__int128 *)(a1 + 72);
  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = 0x100000000;
  v4 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 80))
  {
    result = (__int128 *)WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v4 + 1), (unint64_t)&v7);
    v4 = *(unsigned int *)(a1 + 84);
    v5 = *(_QWORD *)(a1 + 72);
    v6 = *result;
  }
  else
  {
    v5 = *(_QWORD *)result;
    v6 = v7;
  }
  *(_OWORD *)(v5 + 16 * v4) = v6;
  ++*(_DWORD *)(a1 + 84);
  return result;
}

void JSC::MacroAssemblerARM64::branchTest32(JSC::ARM64LogicalImmediate *this@<X3>, uint64_t a2@<X0>, unsigned int a3@<W1>, char a4@<W2>, uint64_t a5@<X8>, int8x8_t a6@<D0>)
{
  unsigned int v6;
  char v7;
  uint8x8_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  char v24;
  unsigned int i;
  int v26;
  int v27;
  JSC::AssemblerBuffer *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int j;

  v6 = this;
  v7 = a4;
  if ((_DWORD)this == -1)
  {
    if (a3 <= 1)
    {
      if (*(_BYTE *)(a2 + 328))
      {
        for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
        {
          if (i + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
            i = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
          i = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
      }
      else
      {
        i = *(_DWORD *)(a2 + 200);
      }
      if (a3)
        v37 = 889192448;
      else
        v37 = 872415232;
      v38 = v7 & 0x1F | v37;
      if (i + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = v38;
      v39 = *(_DWORD *)(a2 + 200);
      v20 = v39 + 4;
      *(_DWORD *)(a2 + 200) = v39 + 4;
      v40 = v39 + 8;
      v41 = v39 + 4;
      if (v40 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
        v41 = *(_DWORD *)(a2 + 200);
      }
      v12 = 0;
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = -721215457;
      *(_DWORD *)(a2 + 200) += 4;
      v22 = *(_BYTE *)(a2 + 328) == 0;
      v23 = -121;
      v24 = -125;
      goto LABEL_45;
    }
    v32 = (unsigned __int16)(32 * (a4 & 0x1F)) | ((a4 & 0x1F) << 16) | 0x6A00001F;
    goto LABEL_24;
  }
  if (a3 <= 1)
  {
    a6.i32[0] = (int)this;
    v11 = (uint8x8_t)vcnt_s8(a6);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.i32[0] == 1)
    {
      v12 = __clz(__rbit32(this));
      if (*(_BYTE *)(a2 + 328))
      {
        for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
        {
          if ((j + 4) > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
            j = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
          j = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
      }
      v13 = (v12 << 26) & 0x80000000;
      v14 = v12 << 19;
      v15 = v7 & 0x1F;
      if (a3)
      {
        v16 = v13 | v15;
        v17 = v14 | 0x37000000;
      }
      else
      {
        v16 = v14 & 0xF80000 | v15 | v13;
        v17 = 905969664;
      }
      v18 = v16 | v17;
      v19 = *(_DWORD *)(a2 + 200);
      if (v19 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
        v19 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v19) = v18;
      v20 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v20;
      v21 = v20;
      if ((v20 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
        v21 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v21) = -721215457;
      *(_DWORD *)(a2 + 200) += 4;
      v22 = *(_BYTE *)(a2 + 328) == 0;
      v23 = -120;
      v24 = -124;
LABEL_45:
      if (v22)
        v23 = v24;
      goto LABEL_47;
    }
  }
  v26 = JSC::ARM64LogicalImmediate::create32(this);
  if (v26 == -1)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19593A960);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v6, *(char *)(a2 + 272));
    v32 = (32 * (v7 & 0x1F)) | 0x6A10001F;
LABEL_24:
    v33 = *(_DWORD *)(a2 + 200);
    if (v33 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
      v33 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = v32;
    v30 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v30;
    if (*(_BYTE *)(a2 + 328))
    {
      for (; (signed int)v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
      {
        if (v30 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
          v30 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
        v30 = *(_DWORD *)(a2 + 200) + 4;
      }
      *(_DWORD *)(a2 + 208) = 0;
    }
    v31 = a3 | 0x54000000;
    v28 = (JSC::AssemblerBuffer *)(a2 + 56);
    goto LABEL_28;
  }
  v27 = (32 * (v7 & 0x1F)) | (v26 << 10) | 0x7200001F;
  v28 = (JSC::AssemblerBuffer *)(a2 + 56);
  v29 = *(_DWORD *)(a2 + 200);
  if (v29 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v29 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = v27;
  v30 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v30;
  if (*(_BYTE *)(a2 + 328))
  {
    while ((signed int)v30 < *(_DWORD *)(a2 + 52))
    {
      if (v30 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
        v30 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
      v30 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v30;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  v31 = a3 | 0x54000000;
LABEL_28:
  if (v30 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v28);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = v31;
  v34 = *(_DWORD *)(a2 + 200);
  v20 = v34 + 4;
  *(_DWORD *)(a2 + 200) = v34 + 4;
  v35 = v34 + 8;
  v36 = v34 + 4;
  if (v35 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v28);
    v36 = *(_DWORD *)(a2 + 200);
  }
  v12 = 0;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v23 = -122;
  else
    v23 = -126;
  v7 = -1;
LABEL_47:
  *(_DWORD *)a5 = v20;
  *(_DWORD *)(a5 + 4) = v12;
  *(_BYTE *)(a5 + 8) = v23;
  *(_BYTE *)(a5 + 9) = a3;
  *(_BYTE *)(a5 + 10) = 0;
  *(_BYTE *)(a5 + 11) = v7;
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,WebCore::Style::Relation::Type,std::optional<JSC::ARM64Registers::RegisterID>)::$_0::operator()(_QWORD **a1, int a2)
{
  uint64_t v4;
  JSC::AssemblerBuffer *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v4 = (uint64_t)*a1;
  v5 = (JSC::AssemblerBuffer *)(*a1 + 27);
  v6 = *((_DWORD *)*a1 + 90);
  if (v6 + 4 > *((_DWORD *)*a1 + 88))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*a1 + 27));
    v6 = *(_DWORD *)(v4 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 216) + v6) = a2 | (32 * a2) | 0x51000400;
  v7 = *(_DWORD *)(v4 + 360);
  v8 = v7 + 4;
  *(_DWORD *)(v4 + 360) = v7 + 4;
  if ((v7 + 8) > *(_DWORD *)(v4 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v5);
    v8 = *(_DWORD *)(v4 + 360);
  }
  v9 = a2 & 0x1F | (32 * (a2 & 0x1F));
  *(_DWORD *)(*(_QWORD *)(v4 + 216) + v8) = v9 | 0xD37CEC00;
  *(_DWORD *)(v4 + 360) += 4;
  if (!*(_BYTE *)(v4 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x19593ABC0);
  }
  v10 = *a1[1];
  *(_DWORD *)(*(_QWORD *)(v4 + 424) + 208) &= ~*(_DWORD *)(v4 + 448);
  JSC::MacroAssemblerARM64::load64(v4 + 160, v10, *(_BYTE *)(v4 + 432));
  if (a2 == 31)
    v11 = -1959762945;
  else
    v11 = v9 | 0x8B100000;
  v12 = *(_DWORD *)(v4 + 360);
  if (v12 + 4 > *(_DWORD *)(v4 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v5);
    v12 = *(_DWORD *)(v4 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 216) + v12) = v11;
  *(_DWORD *)(v4 + 360) += 4;
}

uint64_t WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToNextAdjacentElement(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  int v7;
  int8x8_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t result;
  JSC::AssemblerBuffer *v17;
  JSC::AssemblerBuffer *v18;
  int v19;
  unsigned int v20[3];
  int v21;
  uint64_t v22;

  v6 = a1 + 160;
  v7 = *(_DWORD *)(a1 + 360);
  if (v7 < *(_DWORD *)(a1 + 212))
  {
    v17 = (JSC::AssemblerBuffer *)(a1 + 216);
    do
    {
      if ((v7 + 4) > *(_DWORD *)(a1 + 352))
      {
        v18 = v17;
        JSC::AssemblerBuffer::outOfLineGrow(v17);
        v17 = v18;
        v7 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v7) = -721215457;
      v7 = *(_DWORD *)(a1 + 360) + 4;
      *(_DWORD *)(a1 + 360) = v7;
    }
    while (v7 < *(_DWORD *)(a1 + 212));
  }
  *(_DWORD *)(a1 + 368) = 0;
  JSC::MacroAssemblerARM64::load64(v6, a3 | 0x3800000000, a3);
  JSC::MacroAssemblerARM64::branchTest64(v6, 0, a3, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v21, v8);
  v9 = v21;
  if (v21 != -1)
  {
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
    {
      v11 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v10 + 1), (unint64_t)&v21);
      v13 = *(_DWORD *)v11;
      v12 = (uint64_t *)(v11 + 4);
      v9 = v13;
      LODWORD(v10) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v12 = &v22;
    }
    v14 = *(_QWORD *)a2 + 12 * v10;
    *(_DWORD *)v14 = v9;
    *(_QWORD *)(v14 + 4) = *v12;
    ++*(_DWORD *)(a2 + 12);
  }
  if (*(_BYTE *)(a1 + 372))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
    JSC::MacroAssemblerARM64::load16(v6, a3 | 0x1C00000000, *(_BYTE *)(a1 + 464));
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, v6, 0, 17, (uint64_t)v20, v15);
    v19 = v7;
    return (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v20, (unsigned int *)&v19, v6);
  }
  else
  {
    result = 6195;
    __break(0xC471u);
  }
  return result;
}

char *WebCore::SelectorCompiler::SelectorCodeGenerator::generateSpecialFailureInQuirksModeForActiveAndHoverIfNeeded(char *result, uint64_t a2, char a3, double a4)
{
  char *v4;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int8x8_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  unsigned int v28[3];
  unsigned __int8 v29;

  if (a3)
  {
    v4 = result;
    if (!result[372])
    {
      __break(0xC471u);
      JUMPOUT(0x19593AFE0);
    }
    *(_DWORD *)(*((_QWORD *)result + 57) + 208) &= ~*((_DWORD *)result + 120);
    v6 = result[464] & 0x1F | 0x7841E000;
    v7 = *((_DWORD *)result + 90);
    if (v7 + 4 > *((_DWORD *)result + 88))
    {
      a4 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(result + 216));
      v7 = *((_DWORD *)v4 + 90);
    }
    *(_DWORD *)(*((_QWORD *)v4 + 27) + v7) = v6;
    *((_DWORD *)v4 + 90) += 4;
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)(v4 + 160), 1u, 17, (uint64_t)v28, *(int8x8_t *)&a4);
    v8 = *((_QWORD *)v4 + 62);
    v9 = *((_QWORD *)v4 + 63);
    v10 = *((unsigned int *)v4 + 130);
    if (v8 <= v9)
      v11 = 0;
    else
      v11 = *((unsigned int *)v4 + 130);
    if (v11 + v9 == v8)
    {
      __break(0xC471u);
      JUMPOUT(0x19593B010);
    }
    if (v8 == v9)
    {
      __break(0xC471u);
      JUMPOUT(0x19593B030);
    }
    v12 = *((_QWORD *)v4 + 64);
    v13 = *(unsigned __int8 *)(v12 + v8);
    v29 = *(_BYTE *)(v12 + v8);
    if (v8 == v10 - 1)
      v14 = 0;
    else
      v14 = v8 + 1;
    *((_QWORD *)v4 + 62) = v14;
    v15 = v4 + 544;
    v16 = *((unsigned int *)v4 + 139);
    if ((_DWORD)v16 == *((_DWORD *)v4 + 138))
    {
      v25 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, (WTF *)(v16 + 1), (unint64_t)&v29);
      v16 = *((unsigned int *)v4 + 139);
      *(_BYTE *)(*((_QWORD *)v4 + 68) + v16) = *v25;
      v13 = v29;
    }
    else
    {
      *(_BYTE *)(*v15 + v16) = v13;
    }
    *((_DWORD *)v4 + 139) = v16 + 1;
    v17 = *((_DWORD *)v4 + 90);
    if (v17 + 4 > *((_DWORD *)v4 + 88))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 216));
      v17 = *((_DWORD *)v4 + 90);
    }
    *(_DWORD *)(*((_QWORD *)v4 + 27) + v17) = v13 & 0x1F | 0xF8428000;
    *((_DWORD *)v4 + 90) += 4;
    JSC::MacroAssemblerARM64::load64((uint64_t)(v4 + 160), v13 | 0x800000000, v13);
    if (!v4[372])
    {
      __break(0xC471u);
      JUMPOUT(0x19593B060);
    }
    *(_DWORD *)(*((_QWORD *)v4 + 57) + 208) &= ~*((_DWORD *)v4 + 120);
    JSC::MacroAssemblerARM64::load8((uint64_t)(v4 + 160), v13 | 0xD3800000000, v4[464]);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, (uint64_t)(v4 + 160), 1u, 17, (uint64_t)&v26, v18);
    v19 = v26;
    if (v26 != -1)
    {
      v20 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v20 == *(_DWORD *)(a2 + 8))
      {
        v21 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v20 + 1), (unint64_t)&v26);
        v23 = *(_DWORD *)v21;
        v22 = (uint64_t *)(v21 + 4);
        v19 = v23;
        LODWORD(v20) = *(_DWORD *)(a2 + 12);
      }
      else
      {
        v22 = &v27;
      }
      v24 = *(_QWORD *)a2 + 12 * v20;
      *(_DWORD *)v24 = v19;
      *(_QWORD *)(v24 + 4) = *v22;
      ++*(_DWORD *)(a2 + 12);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v28, (uint64_t)(v4 + 160));
    return (char *)WebCore::RegisterAllocator::deallocateRegister((uint64_t *)v4 + 62, v13);
  }
  return result;
}

void JSC::MacroAssemblerARM64::branchSub32(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, char a5, int a6)
{
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;

  v9 = (a5 & 0x1F) << 16;
  if (a4 == 31 || a6 == 31)
  {
    v10 = a6 & 0x1F | (32 * a4) | 0x6B206000;
  }
  else
  {
    v9 |= a6 & 0x1F | (32 * (a4 & 0x1F));
    v10 = 1795162112;
  }
  v11 = v9 | v10;
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = v11;
  v13 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v13;
  if (*(_BYTE *)(a2 + 328))
  {
    for (; (signed int)v13 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v13)
    {
      if (v13 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
        v13 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
      v13 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  if (v13 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v13 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = a3 | 0x54000000;
  v14 = *(_DWORD *)(a2 + 200);
  v15 = v14 + 4;
  *(_DWORD *)(a2 + 200) = v14 + 4;
  v16 = v14 + 8;
  v17 = v14 + 4;
  if (v16 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v17 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v17) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v18 = -122;
  else
    v18 = -126;
  *(_DWORD *)a1 = v15;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 9) = a3;
  *(_WORD *)(a1 + 10) = -256;
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::moduloIsZero(uint64_t a1, uint64_t a2, int a3, JSC::ARM64LogicalImmediate *this, int8x8_t a5)
{
  unsigned int v5;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  signed __int8 v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  JSC::ARM64LogicalImmediate *v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  signed __int8 v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  JSC::AssemblerBuffer *v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  char *v38;
  _QWORD *v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _DWORD v45[3];
  _DWORD v46[3];
  signed __int8 v47;

  v5 = this;
  switch((int)this)
  {
    case -2:
    case 2:
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1 + 160, 1u, a3, (uint64_t)v46, a5);
      v9 = v46[0];
      if (v46[0] != -1)
      {
        v11 = (_DWORD *)(a2 + 12);
        v10 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
        {
          v12 = (void *)(v10 + 1);
          v13 = v46;
          goto LABEL_32;
        }
        v41 = v46;
        goto LABEL_35;
      }
      break;
    case -1:
    case 1:
      return;
    default:
      v14 = *(_QWORD *)(a1 + 496);
      v15 = *(_QWORD *)(a1 + 504);
      v16 = *(unsigned int *)(a1 + 520);
      if (v14 <= v15)
        v17 = 0;
      else
        v17 = *(unsigned int *)(a1 + 520);
      if (v17 + v15 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x19593B520);
      }
      if (v14 == v15)
      {
        __break(0xC471u);
        JUMPOUT(0x19593B540);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v14);
      v47 = v18;
      if (v14 == v16 - 1)
        v19 = 0;
      else
        v19 = v14 + 1;
      *(_QWORD *)(a1 + 496) = v19;
      v20 = (_QWORD *)(a1 + 544);
      v21 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v21 == *(_DWORD *)(a1 + 552))
      {
        v43 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v21 + 1), (unint64_t)&v47);
        v21 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v21) = *v43;
        v18 = v47;
      }
      else
      {
        *(_BYTE *)(*v20 + v21) = v18;
      }
      *(_DWORD *)(a1 + 556) = v21 + 1;
      v22 = (JSC::ARM64LogicalImmediate *)v5;
      v23 = v18;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)(a1 + 160), v22, v18);
      v24 = *(_QWORD *)(a1 + 496);
      v25 = *(_QWORD *)(a1 + 504);
      v26 = *(unsigned int *)(a1 + 520);
      if (v24 <= v25)
        v27 = 0;
      else
        v27 = *(unsigned int *)(a1 + 520);
      if (v27 + v25 == v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19593B560);
      }
      if (v24 == v25)
      {
        __break(0xC471u);
        JUMPOUT(0x19593B580);
      }
      v28 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v24);
      v47 = v28;
      if (v24 == v26 - 1)
        v29 = 0;
      else
        v29 = v24 + 1;
      *(_QWORD *)(a1 + 496) = v29;
      v30 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v30 == *(_DWORD *)(a1 + 552))
      {
        v44 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v30 + 1), (unint64_t)&v47);
        v30 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v30) = *v44;
        v28 = v47;
      }
      else
      {
        *(_BYTE *)(*v20 + v30) = v28;
      }
      *(_DWORD *)(a1 + 556) = v30 + 1;
      v31 = (v18 & 0x1F) << 16;
      v32 = v31 & 0xFFFFFC00 | (32 * (a3 & 0x1F)) | v28 & 0x1F | 0x1AC00C00;
      v33 = (JSC::AssemblerBuffer *)(a1 + 216);
      v34 = *(_DWORD *)(a1 + 360);
      if (v34 + 4 > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v33);
        v32 = v31 & 0xFFFFFC00 | (32 * (a3 & 0x1F)) | v28 & 0x1F | 0x1AC00C00;
        v33 = (JSC::AssemblerBuffer *)(a1 + 216);
        v34 = *(_DWORD *)(a1 + 360);
      }
      v35 = v28 & 0x1F;
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v34) = v32;
      v36 = *(_DWORD *)(a1 + 360);
      v37 = v36 + 4;
      *(_DWORD *)(a1 + 360) = v36 + 4;
      if ((v36 + 8) > *(_DWORD *)(a1 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v33);
        v35 = v28 & 0x1F;
        v37 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v37) = v31 | (32 * v35) | v35 | 0x1B007C00;
      *(_DWORD *)(a1 + 360) += 4;
      JSC::MacroAssemblerARM64::branchSub32((uint64_t)v45, a1 + 160, 1u, a3, v28, v28);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v28);
      WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v23);
      v9 = v45[0];
      if (v45[0] != -1)
      {
        v11 = (_DWORD *)(a2 + 12);
        v10 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
        {
          v12 = (void *)(v10 + 1);
          v13 = v45;
LABEL_32:
          v38 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12, (unint64_t)v13);
          v40 = *(_DWORD *)v38;
          v39 = v38 + 4;
          v9 = v40;
          LODWORD(v10) = *(_DWORD *)(a2 + 12);
        }
        else
        {
          v41 = v45;
LABEL_35:
          v39 = v41 + 1;
        }
        v42 = *(_QWORD *)a2 + 12 * v10;
        *(_DWORD *)v42 = v9;
        *(_QWORD *)(v42 + 4) = *v39;
        ++*v11;
      }
      break;
  }
}

unsigned int *WebCore::SelectorCompiler::SelectorCodeGenerator::generateAdjacentBacktrackingTail(WebCore::SelectorCompiler::SelectorCodeGenerator *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v28;

  v2 = *((_QWORD *)this + 408);
  v3 = *((_QWORD *)this + 409);
  if (v2 == v3)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x19593B814);
  }
  v5 = *((_QWORD *)this + 409);
  if (!v3)
    v5 = *((unsigned int *)this + 822);
  v6 = *((_QWORD *)this + 410) + 112 * v5;
  v7 = *(unsigned int *)(v6 - 28);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = v6 - 40;
    v11 = 12 * v7;
    do
    {
      if (v9 >= *(unsigned int *)(v10 + 12))
        goto LABEL_38;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)v10 + v8), (uint64_t)this + 160);
      ++v9;
      v8 += 12;
    }
    while (v11 != v8);
    v2 = *((_QWORD *)this + 408);
    v3 = *((_QWORD *)this + 409);
  }
  if (v2 == v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19593B834);
  }
  if (!v3)
    v3 = *((unsigned int *)this + 822);
  v12 = *((_QWORD *)this + 410) + 112 * v3;
  if (*(_DWORD *)(v12 - 32))
  {
    v13 = v12 - 40;
    if (*(_DWORD *)(v12 - 28))
      *(_DWORD *)(v12 - 28) = 0;
    v14 = *(WTF **)v13;
    if (v12 - 24 != *(_QWORD *)(v12 - 40) && v14 != 0)
    {
      *(_QWORD *)v13 = 0;
      *(_DWORD *)(v12 - 32) = 0;
      WTF::fastFree(v14, a2);
      v14 = *(WTF **)v13;
    }
    if (!v14)
    {
      *(_QWORD *)v13 = v13 + 16;
      *(_DWORD *)(v13 + 8) = 2;
    }
  }
  v16 = *((_QWORD *)this + 409);
  if (*((_QWORD *)this + 408) == v16)
  {
    __break(0xC471u);
    JUMPOUT(0x19593B854);
  }
  if (!v16)
    v16 = *((unsigned int *)this + 822);
  v17 = *((_QWORD *)this + 410) + 112 * v16;
  v19 = *(_DWORD *)(v17 - 48);
  v18 = (_DWORD *)(v17 - 48);
  v20 = *((_DWORD *)this + 152);
  v21 = v20 - v19;
  if (v20 < v19)
  {
    __break(0xC471u);
    JUMPOUT(0x19593B874);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this + 160, (v21 << 32) | 0x1F, 0);
  v22 = (_QWORD *)((char *)this + 3184);
  v23 = *((unsigned int *)this + 799);
  if ((_DWORD)v23 == *((_DWORD *)this + 798))
  {
    v24 = (_DWORD *)WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, (void *)(v23 + 1), (unint64_t)v18);
    v25 = (_DWORD *)(*((_QWORD *)this + 398) + 4 * *((unsigned int *)this + 799));
  }
  else
  {
    v25 = (_DWORD *)(*v22 + 4 * v23);
    v24 = v18;
  }
  *v25 = *v24;
  ++*((_DWORD *)this + 799);
  *v18 = -1;
  v26 = *((_QWORD *)this + 409);
  if (*((_QWORD *)this + 408) == v26)
  {
    __break(0xC471u);
    JUMPOUT(0x19593B894);
  }
  if (!v26)
    v26 = *((unsigned int *)this + 822);
  v28 = *(_DWORD *)(*((_QWORD *)this + 410) + 112 * v26 - 108);
  return JSC::MacroAssembler::jump((uint64_t)this + 160, &v28);
}

WTF *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::clear(WTF *result, void *a2)
{
  WTF *v2;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if ((WTF *)((char *)v2 + 16) != *(WTF **)v2 && result != 0)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(result, a2);
      result = *(WTF **)v2;
    }
    if (!result)
    {
      *(_QWORD *)v2 = (char *)v2 + 16;
      *((_DWORD *)v2 + 2) = 2;
    }
  }
  return result;
}

unsigned int *JSC::MacroAssembler::jump(uint64_t a1, unsigned int *a2)
{
  JSC::AssemblerBuffer *v4;
  int i;
  unsigned int v6;
  char v7;
  JSC::AssemblerBuffer *v9;
  unsigned int v10;
  unsigned int v11[2];
  char v12;
  __int16 v13;
  char v14;

  v4 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v9 = v4;
      JSC::AssemblerBuffer::outOfLineGrow(v4);
      v4 = v9;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v6 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v4);
    v6 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v6) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v7 = 69;
  else
    v7 = 65;
  v11[0] = i;
  v11[1] = 0;
  v12 = v7;
  v13 = 15;
  v14 = -1;
  v10 = *a2;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v11, &v10, a1);
}

uint64_t WebCore::SelectorCompiler::SelectorCodeGenerator::generateDescendantBacktrackingTail(WebCore::SelectorCompiler::SelectorCodeGenerator *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t result;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v2 = (char *)this + 3264;
  v3 = WTF::Deque<WebCore::SelectorCompiler::BacktrackingLevel,32ul>::last((uint64_t)this + 3264);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v3 + 24), (uint64_t)this + 160);
  v4 = WTF::Deque<WebCore::SelectorCompiler::BacktrackingLevel,32ul>::last((uint64_t)v2);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::clear((WTF *)(v4 + 24), v5);
  v7 = (unsigned int *)(WTF::Deque<WebCore::SelectorCompiler::BacktrackingLevel,32ul>::last((uint64_t)v2) + 16);
  v6 = *v7;
  if (*v7 == -1)
  {
    JSC::MacroAssemblerARM64::move((_DWORD *)this + 40, *((char *)this + 3177), 0);
    WebCore::RegisterAllocator::deallocateRegister((uint64_t *)this + 62, *((_BYTE *)this + 3177));
    *((_BYTE *)this + 3176) = 0;
LABEL_3:
    v13 = *(_DWORD *)WTF::Deque<WebCore::SelectorCompiler::BacktrackingLevel,32ul>::last((uint64_t)v2);
    return (uint64_t)JSC::MacroAssembler::jump((uint64_t)this + 160, &v13);
  }
  v9 = *((_DWORD *)this + 152);
  v10 = v9 >= v6;
  v11 = v9 - v6;
  if (v10)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)this + 160, (v11 << 32) | 0x1F, 0);
    v12 = *((unsigned int *)this + 799);
    if ((_DWORD)v12 == *((_DWORD *)this + 798))
    {
      WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>((uint64_t)this + 3184, (unint64_t)v7);
    }
    else
    {
      *(_DWORD *)(*((_QWORD *)this + 398) + 4 * v12) = *v7;
      ++*((_DWORD *)this + 799);
    }
    *v7 = -1;
    goto LABEL_3;
  }
  result = 260;
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementDataMatching(_QWORD *result, uint64_t a2, uint64_t a3, double a4)
{
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  int v18;
  uint64_t v19;
  char *v20;
  int *v21;
  int v22;
  uint64_t v23;
  int64_t *v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  signed __int8 v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  char v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  char v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  int v88;
  _DWORD *v89;
  _QWORD *v90;
  unsigned int *v91;
  unsigned int v92;
  char v93;
  _BYTE *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  char v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int8x8_t v125;
  double v126;
  int v127;
  uint64_t v128;
  char *v129;
  uint64_t *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  _QWORD *v135;
  void *v136;
  WTF *v137;
  void *v138;
  WTF *v139;
  WTF *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl **v149;
  uint64_t v150;
  char v151;
  WTF *v152;
  void *v153;
  _QWORD *v154;
  WTF *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  WTF *v159;
  void *v160;
  WTF *v161;
  void *v162;
  uint64_t v163;
  unsigned int v164;
  unint64_t v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  unint64_t v188;
  uint64_t v189;
  int *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  int v194;
  unsigned int i;
  unsigned int v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  WTF *v202;
  int j;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unint64_t v210;
  uint64_t v211;
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  int64_t v215;
  int v216;
  void *v217;
  int *v218;
  char *v219;
  int *v220;
  int v221;
  _DWORD *v222;
  _QWORD *v223;
  int8x8_t v224;
  char *v225;
  uint64_t *v226;
  int v227;
  _DWORD *v228;
  uint64_t *v229;
  _DWORD *v230;
  _DWORD *v231;
  _DWORD *v232;
  _DWORD *v233;
  int k;
  uint64_t v235;
  char *v236;
  uint64_t *v237;
  int v238;
  _DWORD *v239;
  uint64_t *v240;
  _DWORD *v241;
  unsigned int v242;
  unsigned __int8 v243;
  unsigned int v244;
  unsigned int v245;
  char v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int v251;
  unint64_t *v252;
  int v253;
  int RegisterWithPreference;
  char *v255;
  int *v256;
  int v257;
  _DWORD *v258;
  _QWORD *v259;
  uint64_t v260;
  char v261;
  unint64_t *v262;
  int v263;
  void *v264;
  void *v265;
  unsigned int *v266;
  uint64_t v267;
  WTF *v269;
  double v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  unint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t *v280;
  int v281;
  _DWORD *v282;
  uint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  unint64_t v289;
  uint64_t v290;
  char *v291;
  int *v292;
  int v293;
  _DWORD *v294;
  _QWORD *v295;
  int *v296;
  _DWORD *v297;
  void *v298;
  WTF *v299;
  WTF *v300;
  uint64_t *v301;
  unsigned __int8 v302;
  _DWORD *v303;
  void *v304;
  WTF *v305;
  WTF *v306;
  _BYTE *v307;
  _BYTE *v308;
  _BYTE *v309;
  _BYTE *v310;
  uint64_t v311;
  _BYTE *v312;
  _BYTE *v313;
  void *v314;
  WTF *v315;
  void *v316;
  WTF *v317;
  WTF *v318;
  _BYTE *v319;
  _BYTE *v320;
  _BYTE *v321;
  _BYTE *v322;
  _BYTE *v323;
  unsigned int v324;
  JSC::AssemblerBuffer *v325;
  unsigned __int8 v326;
  int v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  unsigned __int8 v333;
  int v334;
  unsigned __int8 v335;
  unsigned int v336;
  int *v337;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  int v345;
  _QWORD *v346;
  uint64_t *v347;
  int v348;
  int v349;
  int v350;
  uint64_t v351;
  unsigned int v352[2];
  char v353;
  __int16 v354;
  char v355;
  unsigned int v356[3];
  WTF *v357;
  uint64_t v358;
  _BYTE v359[24];
  unsigned int v360;
  int v361;
  uint64_t v362;
  int v363;
  int v364;
  int v365;
  uint64_t v366;
  int v367;
  int v368;
  int v369;
  uint64_t v370;
  WTF *v371;
  uint64_t v372;
  _BYTE v373[24];
  int v374;
  int v375;
  int v376;
  uint64_t v377;
  WTF *v378;
  uint64_t v379;
  _DWORD *v380;
  uint64_t v381;
  WTF *v382;
  uint64_t v383;
  _BYTE v384[16];
  WTF *v385;
  uint64_t v386;
  _BYTE v387[64];
  void (*v388)();
  int v389;
  __int16 v390;
  unsigned int v391[3];
  int v392;
  int v393;
  char v394;
  __int16 v395;
  char v396;

  if (*(_QWORD *)(a3 + 64))
    v4 = 0;
  else
    v4 = *(_DWORD *)(a3 + 116) == 0;
  if (!v4 || *(_DWORD *)(a3 + 252) != 0)
  {
    v6 = (uint64_t)result;
    v7 = result[62];
    v8 = result[63];
    v9 = *((unsigned int *)result + 130);
    if (v7 <= v8)
      v10 = 0;
    else
      v10 = *((unsigned int *)result + 130);
    if (v10 + v8 == v7)
    {
      __break(0xC471u);
      JUMPOUT(0x19593E110);
    }
    if (v7 == v8)
    {
      __break(0xC471u);
      JUMPOUT(0x19593E130);
    }
    v11 = a3;
    v12 = result[64];
    v13 = *(unsigned __int8 *)(v12 + v7);
    LOBYTE(v378) = *(_BYTE *)(v12 + v7);
    if (v7 == v9 - 1)
      v14 = 0;
    else
      v14 = v7 + 1;
    result[62] = v14;
    v15 = *((unsigned int *)result + 139);
    if ((_DWORD)v15 == *((_DWORD *)result + 138))
    {
      v319 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(result + 68), (WTF *)(v15 + 1), (unint64_t)&v378);
      v15 = *(unsigned int *)(v6 + 556);
      *(_BYTE *)(*(_QWORD *)(v6 + 544) + v15) = *v319;
      v13 = v378;
    }
    else
    {
      *(_BYTE *)(result[68] + v15) = v13;
    }
    *(_DWORD *)(v6 + 556) = v15 + 1;
    v325 = (JSC::AssemblerBuffer *)(v6 + 216);
    v16 = *(_DWORD *)(v6 + 360);
    if (v16 + 4 > *(_DWORD *)(v6 + 352))
    {
      a4 = JSC::AssemblerBuffer::outOfLineGrow(v325);
      v16 = *(_DWORD *)(v6 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(v6 + 216) + v16) = v13 & 0x1F | 0xF8468000;
    *(_DWORD *)(v6 + 360) += 4;
    v328 = (char)v13;
    JSC::MacroAssemblerARM64::branchTest64(v6 + 160, 0, v13, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v348, *(int8x8_t *)&a4);
    v18 = v348;
    if (v348 != -1)
    {
      v19 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v19 == *(_DWORD *)(a2 + 8))
      {
        v20 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v19 + 1), (unint64_t)&v348);
        v22 = *(_DWORD *)v20;
        v21 = (int *)(v20 + 4);
        v18 = v22;
        LODWORD(v19) = *(_DWORD *)(a2 + 12);
      }
      else
      {
        v21 = &v349;
      }
      v23 = *(_QWORD *)a2 + 12 * v19;
      *(_DWORD *)v23 = v18;
      *(_QWORD *)(v23 + 4) = *(_QWORD *)v21;
      ++*(_DWORD *)(a2 + 12);
    }
    v24 = *(int64_t **)(v11 + 64);
    if (v24)
    {
      if (!*(_BYTE *)(v6 + 372))
      {
        __break(0xC471u);
        JUMPOUT(0x19593E160);
      }
      v25 = *v24;
      *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
      JSC::MacroAssemblerARM64::load64(v6 + 160, v13 | 0x1800000000, *(_BYTE *)(v6 + 464));
      JSC::MacroAssemblerARM64::branch64(v6 + 160, 1u, 17, v25, (uint64_t)&v378);
      v26 = (int)v378;
      if ((_DWORD)v378 != -1)
      {
        v27 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v27 == *(_DWORD *)(a2 + 8))
        {
          v28 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v27 + 1), (unint64_t)&v378);
          v30 = *(_DWORD *)v28;
          v29 = v28 + 4;
          v26 = v30;
          LODWORD(v27) = *(_DWORD *)(a2 + 12);
        }
        else
        {
          v29 = (WTF **)((char *)&v378 + 4);
        }
        v31 = *(_QWORD *)a2 + 12 * v27;
        *(_DWORD *)v31 = v26;
        *(_QWORD *)(v31 + 4) = *v29;
        ++*(_DWORD *)(a2 + 12);
      }
    }
    v346 = (_QWORD *)(v6 + 544);
    v347 = (uint64_t *)(v6 + 496);
    v343 = v11;
    v336 = v13;
    if (*(_DWORD *)(v11 + 116))
    {
      v32 = *(_QWORD *)(v6 + 496);
      v33 = *(_QWORD *)(v6 + 504);
      v34 = *(unsigned int *)(v6 + 520);
      if (v32 <= v33)
        v35 = 0;
      else
        v35 = *(unsigned int *)(v6 + 520);
      if (v35 + v33 == v32)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E180);
      }
      if (v32 == v33)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E1A0);
      }
      v36 = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v32);
      LOBYTE(v371) = v36;
      if (v32 == v34 - 1)
        v37 = 0;
      else
        v37 = v32 + 1;
      *(_QWORD *)(v6 + 496) = v37;
      v38 = *(unsigned int *)(v6 + 556);
      if ((_DWORD)v38 == *(_DWORD *)(v6 + 552))
      {
        v320 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v346, (WTF *)(v38 + 1), (unint64_t)&v371);
        v38 = *(unsigned int *)(v6 + 556);
        *(_BYTE *)(*(_QWORD *)(v6 + 544) + v38) = *v320;
        v36 = (char)v371;
      }
      else
      {
        *(_BYTE *)(*v346 + v38) = v36;
      }
      *(_DWORD *)(v6 + 556) = v38 + 1;
      JSC::MacroAssemblerARM64::load64(v6 + 160, v13 | 0x1000000000, v36);
      JSC::MacroAssemblerARM64::branchTest64(v6 + 160, 0, v36, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v378, v39);
      v40 = (int)v378;
      if ((_DWORD)v378 != -1)
      {
        v41 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v41 == *(_DWORD *)(a2 + 8))
        {
          v42 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v41 + 1), (unint64_t)&v378);
          v44 = *(_DWORD *)v42;
          v43 = v42 + 4;
          v40 = v44;
          LODWORD(v41) = *(_DWORD *)(a2 + 12);
        }
        else
        {
          v43 = (WTF **)((char *)&v378 + 4);
        }
        v45 = *(_QWORD *)a2 + 12 * v41;
        *(_DWORD *)v45 = v40;
        *(_QWORD *)(v45 + 4) = *v43;
        ++*(_DWORD *)(a2 + 12);
      }
      v47 = *(_QWORD *)(v6 + 496);
      v46 = *(_QWORD *)(v6 + 504);
      v48 = *(unsigned int *)(v6 + 520);
      if (v47 <= v46)
        v49 = 0;
      else
        v49 = *(unsigned int *)(v6 + 520);
      if (v49 + v46 == v47)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E1C0);
      }
      if (v47 == v46)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E1E0);
      }
      v333 = v36;
      v50 = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v47);
      LOBYTE(v371) = v50;
      if (v47 == v48 - 1)
        v51 = 0;
      else
        v51 = v47 + 1;
      *(_QWORD *)(v6 + 496) = v51;
      v52 = *(unsigned int *)(v6 + 556);
      if ((_DWORD)v52 == *(_DWORD *)(v6 + 552))
      {
        v321 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v346, (WTF *)(v52 + 1), (unint64_t)&v371);
        v52 = *(unsigned int *)(v6 + 556);
        *(_BYTE *)(*(_QWORD *)(v6 + 544) + v52) = *v321;
        v50 = (char)v371;
      }
      else
      {
        *(_BYTE *)(*v346 + v52) = v50;
      }
      *(_DWORD *)(v6 + 556) = v52 + 1;
      v335 = v50;
      if (*(_DWORD *)(v11 + 116))
      {
        v53 = 0;
        v54 = v50 & 0x1F | 0x52800000;
        v55 = 32 * v36;
        v344 = v50 | (32 * v50) | 0x11000400;
        v56 = ((v50 & 0x1F) << 16) | 0x6B00023F;
        v341 = v55 | 0x91004000;
        v340 = ((v50 & 0x1F) << 16) | 0xF8607A20;
        v57 = v55 | 0xB840C000;
        do
        {
          v59 = *(_QWORD *)(v6 + 496);
          v58 = *(_QWORD *)(v6 + 504);
          v60 = *(unsigned int *)(v6 + 520);
          if (v59 <= v58)
            v61 = 0;
          else
            v61 = *(unsigned int *)(v6 + 520);
          if (v61 + v58 == v59)
          {
            __break(0xC471u);
            JUMPOUT(0x19593DEF0);
          }
          if (v59 == v58)
          {
            __break(0xC471u);
            JUMPOUT(0x19593DF10);
          }
          v62 = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v59);
          LOBYTE(v371) = v62;
          if (v59 == v60 - 1)
            v63 = 0;
          else
            v63 = v59 + 1;
          *(_QWORD *)(v6 + 496) = v63;
          v64 = *(unsigned int *)(v6 + 556);
          if ((_DWORD)v64 == *(_DWORD *)(v6 + 552))
          {
            v94 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v346, (WTF *)(v64 + 1), (unint64_t)&v371);
            v64 = *(unsigned int *)(v6 + 556);
            *(_BYTE *)(*(_QWORD *)(v6 + 544) + v64) = *v94;
            v62 = (char)v371;
          }
          else
          {
            *(_BYTE *)(*v346 + v64) = v62;
          }
          *(_DWORD *)(v6 + 556) = v64 + 1;
          if (v53 >= *(unsigned int *)(v11 + 116))
          {
            __break(0xC471u);
            JUMPOUT(0x19593E534);
          }
          v65 = v62;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)(v6 + 160), *(_QWORD *)(*(_QWORD *)(v11 + 104) + 8 * v53), v62);
          v66 = *(_DWORD *)(v6 + 360);
          if (v66 + 4 > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v66 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v66) = v54;
          while (1)
          {
            v67 = *(_DWORD *)(v6 + 360) + 4;
            *(_DWORD *)(v6 + 360) = v67;
            if (v67 >= *(_DWORD *)(v6 + 212))
              break;
            if ((v67 + 4) > *(_DWORD *)(v6 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v325);
              v67 = *(_DWORD *)(v6 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v6 + 216) + v67) = -721215457;
          }
          *(_DWORD *)(v6 + 368) = 0;
          if (!*(_BYTE *)(v6 + 372))
          {
            __break(0xC471u);
            JUMPOUT(0x19593DF30);
          }
          v68 = *(char *)(v6 + 464);
          *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
          v69 = v67;
          if ((v67 + 4) > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v69 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v69) = v341 | v68;
          v70 = *(_DWORD *)(v6 + 360);
          v71 = v70 + 4;
          *(_DWORD *)(v6 + 360) = v70 + 4;
          if ((v70 + 8) > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v71 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v71) = v340 | v68 & 0x1F;
          *(_DWORD *)(v6 + 360) += 4;
          JSC::MacroAssemblerARM64::branch64(v6 + 160, 0, 17, v65, (uint64_t)&v371);
          v72 = *(_DWORD *)(v6 + 360);
          if (v72 + 4 > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v72 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v72) = v344;
          v73 = *(_DWORD *)(v6 + 360);
          v74 = v73 + 4;
          *(_DWORD *)(v6 + 360) = v73 + 4;
          if (!*(_BYTE *)(v6 + 372))
          {
            __break(0xC471u);
            JUMPOUT(0x19593DF50);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
          v75 = *(_BYTE *)(v6 + 464);
          if ((v73 + 8) > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v74 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v74) = v57 | v75 & 0x1F;
          v76 = *(_DWORD *)(v6 + 360);
          v77 = v76 + 4;
          *(_DWORD *)(v6 + 360) = v76 + 4;
          if ((v76 + 8) > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v77 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v77) = v56;
          v78 = *(_DWORD *)(v6 + 360) + 4;
          *(_DWORD *)(v6 + 360) = v78;
          if (*(_BYTE *)(v6 + 488))
          {
            while ((signed int)v78 < *(_DWORD *)(v6 + 212))
            {
              if (v78 + 4 > *(_DWORD *)(v6 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v325);
                v78 = *(_DWORD *)(v6 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(v6 + 216) + v78) = -721215457;
              v78 = *(_DWORD *)(v6 + 360) + 4;
              *(_DWORD *)(v6 + 360) = v78;
            }
            *(_DWORD *)(v6 + 368) = 0;
          }
          if (v78 + 4 > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v78 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v78) = 1409286144;
          v79 = *(_DWORD *)(v6 + 360);
          v80 = v79 + 4;
          *(_DWORD *)(v6 + 360) = v79 + 4;
          v81 = v79 + 8;
          v82 = v79 + 4;
          if (v81 > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v82 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v82) = -721215457;
          v83 = *(_DWORD *)(v6 + 360) + 4;
          *(_DWORD *)(v6 + 360) = v83;
          if (*(_BYTE *)(v6 + 488))
            v84 = -122;
          else
            v84 = -126;
          v357 = (WTF *)v80;
          LOBYTE(v358) = v84;
          *(_WORD *)((char *)&v358 + 1) = 0;
          BYTE3(v358) = -1;
          if (v80 != -1)
          {
            v85 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v85 == *(_DWORD *)(a2 + 8))
            {
              v86 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v85 + 1), (unint64_t)&v357);
              v88 = *(_DWORD *)v86;
              v87 = v86 + 4;
              v89 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
              *v89 = v88;
              v90 = v89 + 1;
            }
            else
            {
              v91 = (unsigned int *)(*(_QWORD *)a2 + 12 * v85);
              *v91 = v80;
              v90 = v91 + 1;
              v87 = (WTF **)((char *)&v357 + 4);
            }
            *v90 = *v87;
            ++*(_DWORD *)(a2 + 12);
            v83 = *(_DWORD *)(v6 + 360);
          }
          while (v83 < *(_DWORD *)(v6 + 212))
          {
            if ((v83 + 4) > *(_DWORD *)(v6 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v325);
              v83 = *(_DWORD *)(v6 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v6 + 216) + v83) = -721215457;
            v83 = *(_DWORD *)(v6 + 360) + 4;
            *(_DWORD *)(v6 + 360) = v83;
          }
          v92 = v83;
          if ((v83 + 4) > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v92 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v92) = 335544320;
          *(_DWORD *)(v6 + 360) += 4;
          if (*(_BYTE *)(v6 + 488))
            v93 = 69;
          else
            v93 = 65;
          v392 = v83;
          v393 = 0;
          v394 = v93;
          v395 = 15;
          v396 = -1;
          v391[0] = v67;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v392, v391, v6 + 160);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v371, v6 + 160);
          WebCore::RegisterAllocator::deallocateRegister(v347, v65);
          ++v53;
          v11 = v343;
        }
        while (v53 < *(unsigned int *)(v343 + 116));
      }
      WebCore::RegisterAllocator::deallocateRegister(v347, v335);
      WebCore::RegisterAllocator::deallocateRegister(v347, v333);
      v13 = v336;
    }
    if (*(_DWORD *)(v11 + 252))
    {
      v95 = *(_QWORD *)(v6 + 496);
      v96 = *(_QWORD *)(v6 + 504);
      v97 = *(unsigned int *)(v6 + 520);
      if (v95 <= v96)
        v98 = 0;
      else
        v98 = *(unsigned int *)(v6 + 520);
      v99 = (uint64_t *)(v6 + 544);
      if (v98 + v96 == v95)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E200);
      }
      if (v95 == v96)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E220);
      }
      v100 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 512) + v95);
      LOBYTE(v378) = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v95);
      if (v95 == v97 - 1)
        v101 = 0;
      else
        v101 = v95 + 1;
      *(_QWORD *)(v6 + 496) = v101;
      v102 = *(unsigned int *)(v6 + 556);
      if ((_DWORD)v102 == *(_DWORD *)(v6 + 552))
      {
        v322 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v346, (WTF *)(v102 + 1), (unint64_t)&v378);
        v102 = *(unsigned int *)(v6 + 556);
        *(_BYTE *)(*(_QWORD *)(v6 + 544) + v102) = *v322;
        v100 = v378;
      }
      else
      {
        *(_BYTE *)(*v346 + v102) = v100;
      }
      v334 = v100;
      *(_DWORD *)(v6 + 556) = v102 + 1;
      v103 = *(_DWORD *)(v6 + 360);
      if (v103 + 4 > *(_DWORD *)(v6 + 352))
      {
        v17 = JSC::AssemblerBuffer::outOfLineGrow(v325);
        v103 = *(_DWORD *)(v6 + 360);
      }
      v104 = (32 * (char)v13) | v334 & 0x1F;
      *(_DWORD *)(*(_QWORD *)(v6 + 216) + v103) = v104 | 0xB8404000;
      *(_DWORD *)(v6 + 360) += 4;
      v105 = *(unsigned int *)(v343 + 252);
      v106 = (char)v334;
      if ((_DWORD)v105)
      {
        v132 = 0;
        v133 = *(_QWORD *)(v343 + 240);
        v134 = 1;
        do
        {
          v135 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v133 + 8) + 32);
          if (v135[5] == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24)
            && (v135[2] == WebCore::starAtomData || v135[4] == *(_QWORD *)(WebCore::HTMLNames::styleAttr + 32)))
          {
            break;
          }
          v134 = ++v132 < v105;
          v133 += 16;
        }
        while (v105 != v132);
        if (!v134)
          goto LABEL_175;
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, v6 + 160, 0, v334, (uint64_t)&v371, *(int8x8_t *)&v17);
        v378 = (WTF *)(v6 + 160);
        v379 = v6 + 496;
        v380 = (_DWORD *)(v6 + 600);
        v381 = v6 + 616;
        v382 = (WTF *)v384;
        v383 = 16;
        v385 = (WTF *)v387;
        v386 = 16;
        v388 = (void (*)())operationSynchronizeStyleAttributeInternal;
        v389 = 1;
        v390 = -256;
        WebCore::FunctionCall::prepareAndCall((WebCore::FunctionCall *)&v378);
        WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(v380, (uint64_t)&v385, (uint64_t)&v382);
        if ((_DWORD)v386)
        {
          if (HIDWORD(v386))
            HIDWORD(v386) = 0;
          v137 = v385;
          if (v387 != (_BYTE *)v385)
          {
            if (!v385 || (v385 = 0, LODWORD(v386) = 0, WTF::fastFree(v137, v136), !v385))
            {
              v385 = (WTF *)v387;
              LODWORD(v386) = 16;
            }
          }
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v371, v6 + 160);
        v139 = v385;
        if (v387 != (_BYTE *)v385 && v385)
        {
          v385 = 0;
          LODWORD(v386) = 0;
          WTF::fastFree(v139, v138);
        }
        v140 = v382;
        v13 = v336;
        if (v384 != (_BYTE *)v382 && v382)
        {
          v382 = 0;
          LODWORD(v383) = 0;
          WTF::fastFree(v140, v138);
        }
        if (*(_DWORD *)(v343 + 252))
        {
LABEL_175:
          v141 = 0;
          v142 = 0;
          while (1)
          {
            v143 = v106;
            v144 = *(_QWORD *)(*(_QWORD *)(v343 + 240) + v141);
            v145 = *(_QWORD *)(v144 + 8);
            WebCore::SVGElement::animatableAttributeForName(*(_QWORD *)(v145 + 32) + 24, &v378);
            v146 = *(_QWORD **)(v145 + 32);
            v147 = (uint64_t)(v146 + 3);
            v148 = v146[3];
            v149 = (WTF::StringImpl **)v378;
            if (v148 == *((_QWORD *)v378 + 3) && (v146[2] == WebCore::starAtomData || v146[4] == *((_QWORD *)v378 + 4)))
              break;
            v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v144 + 8) + 32) + 40);
            v106 = v143;
            if (v148 == v150)
              goto LABEL_178;
            WebCore::SVGElement::animatableAttributeForName(v147, &v371);
            v154 = *(_QWORD **)(v145 + 32);
            if (v154[3] != *((_QWORD *)v371 + 3))
            {
              if (*(_DWORD *)v371 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v371);
                WTF::fastFree(v155, v156);
              }
              else
              {
                --*(_DWORD *)v371;
              }
LABEL_178:
              v151 = 1;
              goto LABEL_179;
            }
            if (v154[2] == WebCore::starAtomData)
            {
              if (*(_DWORD *)v371 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v371);
                WTF::fastFree(v161, v162);
              }
              else
              {
                --*(_DWORD *)v371;
              }
              v151 = 0;
              v99 = (uint64_t *)(v6 + 544);
              goto LABEL_188;
            }
            v157 = v154[4];
            v158 = *((_QWORD *)v371 + 4);
            if (*(_DWORD *)v371 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v371);
              WTF::fastFree(v159, v160);
            }
            else
            {
              --*(_DWORD *)v371;
            }
            v4 = v157 == v158;
            v99 = (uint64_t *)(v6 + 544);
            v106 = v143;
            if (!v4)
              goto LABEL_178;
            v151 = 0;
LABEL_179:
            if (*(_DWORD *)v149 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v149);
              WTF::fastFree(v152, v153);
              if ((v151 & 1) == 0)
              {
LABEL_443:
                JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v6 + 160, 0, v106, (uint64_t)&v371, *(int8x8_t *)&v17);
                v378 = (WTF *)(v6 + 160);
                v379 = v6 + 496;
                v380 = (_DWORD *)(v6 + 600);
                v381 = v6 + 616;
                v382 = (WTF *)v384;
                v383 = 16;
                v385 = (WTF *)v387;
                v386 = 16;
                v388 = (void (*)())operationSynchronizeAllAnimatedSVGAttribute;
                v389 = 1;
                v390 = -256;
                WebCore::FunctionCall::prepareAndCall((WebCore::FunctionCall *)&v378);
                WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(v380, (uint64_t)&v385, (uint64_t)&v382);
                if ((_DWORD)v386)
                {
                  if (HIDWORD(v386))
                    HIDWORD(v386) = 0;
                  v315 = v385;
                  if (v387 != (_BYTE *)v385)
                  {
                    if (!v385 || (v385 = 0, LODWORD(v386) = 0, WTF::fastFree(v315, v314), !v385))
                    {
                      v385 = (WTF *)v387;
                      LODWORD(v386) = 16;
                    }
                  }
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v371, v6 + 160);
                v317 = v385;
                if (v387 != (_BYTE *)v385 && v385)
                {
                  v385 = 0;
                  LODWORD(v386) = 0;
                  WTF::fastFree(v317, v316);
                }
                v318 = v382;
                v13 = v336;
                if (v384 != (_BYTE *)v382 && v382)
                {
                  v382 = 0;
                  LODWORD(v383) = 0;
                  WTF::fastFree(v318, v316);
                }
                goto LABEL_135;
              }
            }
            else
            {
              --*(_DWORD *)v149;
              if ((v151 & 1) == 0)
                goto LABEL_443;
            }
            ++v142;
            v141 += 16;
            v13 = v336;
            if (v142 >= *(unsigned int *)(v343 + 252))
              goto LABEL_135;
          }
          v151 = 0;
LABEL_188:
          v106 = v143;
          goto LABEL_179;
        }
      }
LABEL_135:
      v107 = *(_QWORD *)(v6 + 496);
      v108 = *(_QWORD *)(v6 + 504);
      v109 = *(unsigned int *)(v6 + 520);
      if (v107 <= v108)
        v110 = 0;
      else
        v110 = *(unsigned int *)(v6 + 520);
      if (v110 + v108 == v107)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E250);
      }
      if (v107 == v108)
      {
        __break(0xC471u);
        JUMPOUT(0x19593E270);
      }
      v111 = *(_QWORD *)(v6 + 512);
      v112 = *(unsigned __int8 *)(v111 + v107);
      LOBYTE(v378) = *(_BYTE *)(v111 + v107);
      if (v107 == v109 - 1)
        v113 = 0;
      else
        v113 = v107 + 1;
      *(_QWORD *)(v6 + 496) = v113;
      v114 = *(unsigned int *)(v6 + 556);
      if ((_DWORD)v114 == *(_DWORD *)(v6 + 552))
      {
        v323 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, (WTF *)(v114 + 1), (unint64_t)&v378);
        v114 = *(unsigned int *)(v6 + 556);
        *(_BYTE *)(*(_QWORD *)(v6 + 544) + v114) = *v323;
        v112 = v378;
      }
      else
      {
        *(_BYTE *)(*v99 + v114) = v112;
      }
      *(_DWORD *)(v6 + 556) = v114 + 1;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, v6 + 160, 0, v106, (uint64_t)v356, *(int8x8_t *)&v17);
      v332 = v112;
      v327 = (char)v112;
      JSC::MacroAssemblerARM64::load64(v6 + 160, v13 | 0x2800000000, v112);
      v115 = *(_DWORD *)(v6 + 360);
      if (v115 + 4 > *(_DWORD *)(v6 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v325);
        v115 = *(_DWORD *)(v6 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v6 + 216) + v115) = v104 | 0xB8434000;
      v116 = *(_DWORD *)(v6 + 360) + 4;
      *(_DWORD *)(v6 + 360) = v116;
      if (v116 < *(_DWORD *)(v6 + 212))
      {
        v117 = v343;
        v118 = v334;
        do
        {
          if ((v116 + 4) > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v116 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v116) = -721215457;
          v116 = *(_DWORD *)(v6 + 360) + 4;
          *(_DWORD *)(v6 + 360) = v116;
        }
        while (v116 < *(_DWORD *)(v6 + 212));
      }
      else
      {
        v117 = v343;
        v118 = v334;
      }
      v119 = v116;
      if ((v116 + 4) > *(_DWORD *)(v6 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v325);
        v119 = *(_DWORD *)(v6 + 360);
      }
      v120 = v118 & 0x1F;
      *(_DWORD *)(*(_QWORD *)(v6 + 216) + v119) = 335544320;
      *(_DWORD *)(v6 + 360) += 4;
      if (*(_BYTE *)(v6 + 488))
        v121 = 69;
      else
        v121 = 65;
      v352[0] = v116;
      v352[1] = 0;
      v353 = v121;
      v354 = 15;
      v355 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v356, v6 + 160);
      v122 = *(_DWORD *)(v6 + 360);
      if (v122 + 4 > *(_DWORD *)(v6 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v325);
        v122 = *(_DWORD *)(v6 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v6 + 216) + v122) = v120 | (32 * v118) | 0x53057C00;
      v123 = *(_DWORD *)(v6 + 360);
      v124 = v123 + 4;
      *(_DWORD *)(v6 + 360) = v123 + 4;
      if ((v123 + 8) > *(_DWORD *)(v6 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v325);
        v124 = *(_DWORD *)(v6 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(v6 + 216) + v124) = v327 | (32 * v328) | 0x91008000;
      *(_DWORD *)(v6 + 360) += 4;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v352, v6 + 160);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v6 + 160, 0, v106, (uint64_t)&v350, v125);
      v127 = v350;
      if (v350 != -1)
      {
        v128 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v128 == *(_DWORD *)(a2 + 8))
        {
          v129 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v128 + 1), (unint64_t)&v350);
          v131 = *(_DWORD *)v129;
          v130 = (uint64_t *)(v129 + 4);
          v127 = v131;
          LODWORD(v128) = *(_DWORD *)(a2 + 12);
        }
        else
        {
          v130 = &v351;
        }
        v163 = *(_QWORD *)a2 + 12 * v128;
        *(_DWORD *)v163 = v127;
        *(_QWORD *)(v163 + 4) = *v130;
        ++*(_DWORD *)(a2 + 12);
      }
      v326 = v106;
      v164 = v332;
      v331 = *(unsigned int *)(v117 + 252);
      if ((_DWORD)v331)
      {
        v165 = 0;
        v342 = (v331 - 1);
        v329 = v120 << 16;
        v324 = (32 * (char)v118) | 0x91000000;
        while (1)
        {
          LOBYTE(v166) = v118;
          v167 = v164;
          if (v165 == v342)
            goto LABEL_244;
          v169 = *(_QWORD *)(v6 + 496);
          v168 = *(_QWORD *)(v6 + 504);
          v170 = v168;
          if (v169 > v168)
            v170 = v168 + *(unsigned int *)(v6 + 520);
          if (v170 == v169)
          {
            __break(0xC471u);
            JUMPOUT(0x19593E010);
          }
          if (v169 == v168)
          {
            __break(0xC471u);
            JUMPOUT(0x19593E030);
          }
          v167 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 512) + v169);
          LOBYTE(v378) = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v169);
          if (v169 == *(unsigned int *)(v6 + 520) - 1)
            v171 = 0;
          else
            v171 = v169 + 1;
          *(_QWORD *)(v6 + 496) = v171;
          v172 = *(unsigned int *)(v6 + 556);
          if ((_DWORD)v172 == *(_DWORD *)(v6 + 552))
          {
            v309 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, (WTF *)(v172 + 1), (unint64_t)&v378);
            v172 = *(unsigned int *)(v6 + 556);
            v173 = *(_QWORD *)(v6 + 544);
            v164 = v332;
            *(_BYTE *)(v173 + v172) = *v309;
            v167 = v378;
            v171 = *(_QWORD *)(v6 + 496);
            v168 = *(_QWORD *)(v6 + 504);
          }
          else
          {
            v173 = *v99;
            *(_BYTE *)(*v99 + v172) = v167;
          }
          v174 = (v172 + 1);
          *(_DWORD *)(v6 + 556) = v174;
          v175 = v168;
          if (v171 > v168)
            v175 = v168 + *(unsigned int *)(v6 + 520);
          if (v175 == v171)
          {
            __break(0xC471u);
            JUMPOUT(0x19593E050);
          }
          if (v171 == v168)
          {
            __break(0xC471u);
            JUMPOUT(0x19593E070);
          }
          v166 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 512) + v171);
          LOBYTE(v378) = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v171);
          v176 = v171 == *(unsigned int *)(v6 + 520) - 1 ? 0 : v171 + 1;
          *(_QWORD *)(v6 + 496) = v176;
          if ((_DWORD)v174 == *(_DWORD *)(v6 + 552))
          {
            v310 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, (WTF *)(v174 + 1), (unint64_t)&v378);
            v311 = *(unsigned int *)(v6 + 556);
            v177 = v311 + 1;
            v164 = v332;
            *(_BYTE *)(*(_QWORD *)(v6 + 544) + v311) = *v310;
            v166 = v378;
          }
          else
          {
            v177 = v172 + 2;
            *(_BYTE *)(v173 + v174) = v166;
          }
          *(_DWORD *)(v6 + 556) = v177;
          if (v164 != v167)
            break;
LABEL_235:
          if (v118 == v166)
          {
            LOBYTE(v166) = v118;
            goto LABEL_244;
          }
          if (v118 == 63)
          {
            v180 = *(_DWORD *)(v6 + 360);
            if (v166 != 31)
            {
              v181 = v166 & 0x1F | 0xD2800000;
              goto LABEL_240;
            }
LABEL_423:
            v181 = v324 | (char)v166;
            goto LABEL_240;
          }
          v180 = *(_DWORD *)(v6 + 360);
          if (v118 == 31 || v166 == 31)
            goto LABEL_423;
          v181 = v329 | v166 | 0xAA0003E0;
LABEL_240:
          if (v180 + 4 > *(_DWORD *)(v6 + 352))
          {
            v126 = JSC::AssemblerBuffer::outOfLineGrow(v325);
            v180 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v180) = v181;
          *(_DWORD *)(v6 + 360) += 4;
LABEL_244:
          if (v165 >= *(unsigned int *)(v117 + 252))
          {
            __break(0xC471u);
            JUMPOUT(0x19593E53CLL);
          }
          v183 = *(_QWORD *)(v6 + 496);
          v182 = *(_QWORD *)(v6 + 504);
          v184 = *(unsigned int *)(v6 + 520);
          if (v183 <= v182)
            v185 = 0;
          else
            v185 = *(unsigned int *)(v6 + 520);
          if (v185 + v182 == v183)
          {
            __break(0xC471u);
            JUMPOUT(0x19593DF70);
          }
          if (v183 == v182)
          {
            __break(0xC471u);
            JUMPOUT(0x19593DF90);
          }
          v186 = *(_QWORD *)(v117 + 240);
          v187 = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v183);
          LOBYTE(v378) = v187;
          if (v183 == v184 - 1)
            v188 = 0;
          else
            v188 = v183 + 1;
          *(_QWORD *)(v6 + 496) = v188;
          v189 = *(unsigned int *)(v6 + 556);
          if ((_DWORD)v189 == *(_DWORD *)(v6 + 552))
          {
            v307 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, (WTF *)(v189 + 1), (unint64_t)&v378);
            v189 = *(unsigned int *)(v6 + 556);
            *(_BYTE *)(*(_QWORD *)(v6 + 544) + v189) = *v307;
            v187 = (char)v378;
          }
          else
          {
            *(_BYTE *)(*v99 + v189) = v187;
          }
          *(_DWORD *)(v6 + 556) = v189 + 1;
          v337 = (int *)(v186 + 16 * v165);
          v190 = *(int **)v337;
          v191 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v337 + 8) + 32);
          v192 = *(_QWORD *)(v191 + 40);
          v193 = *(_QWORD *)(v191 + 24);
          v194 = v187;
          v345 = v187;
          if (v192 == v193)
          {
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)(v6 + 160), v192, v187);
          }
          else
          {
            v378 = (WTF *)&v380;
            v379 = 2;
            WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAndDocumentIsHTML(v6, (uint64_t)&v378, v126);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)(v6 + 160), v192, v194);
            for (i = *(_DWORD *)(v6 + 360); (signed int)i < *(_DWORD *)(v6 + 212); *(_DWORD *)(v6 + 360) = i)
            {
              if (i + 4 > *(_DWORD *)(v6 + 352))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v325);
                i = *(_DWORD *)(v6 + 360);
              }
              *(_DWORD *)(*(_QWORD *)(v6 + 216) + i) = -721215457;
              i = *(_DWORD *)(v6 + 360) + 4;
            }
            v196 = i;
            if (i + 4 > *(_DWORD *)(v6 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v325);
              v196 = *(_DWORD *)(v6 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v6 + 216) + v196) = 335544320;
            *(_DWORD *)(v6 + 360) += 4;
            if (*(_BYTE *)(v6 + 488))
              v197 = 69;
            else
              v197 = 65;
            v371 = (WTF *)i;
            LOBYTE(v372) = v197;
            *(_WORD *)((char *)&v372 + 1) = 15;
            BYTE3(v372) = -1;
            v198 = HIDWORD(v379);
            if (HIDWORD(v379))
            {
              v199 = 0;
              v200 = 0;
              do
              {
                if (v200 >= HIDWORD(v379))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19593E52CLL);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v378 + v199), v6 + 160);
                ++v200;
                v199 += 12;
              }
              while (v198 != v200);
            }
            v194 = v345;
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)(v6 + 160), v193, v345);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v371, v6 + 160);
            v202 = v378;
            if (&v380 != (_DWORD **)v378 && v378)
            {
              v378 = 0;
              LODWORD(v379) = 0;
              WTF::fastFree(v202, v201);
            }
            v99 = (uint64_t *)(v6 + 544);
          }
          v371 = (WTF *)v373;
          v372 = 2;
          for (j = *(_DWORD *)(v6 + 360); j < *(_DWORD *)(v6 + 212); *(_DWORD *)(v6 + 360) = j)
          {
            if ((j + 4) > *(_DWORD *)(v6 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v325);
              j = *(_DWORD *)(v6 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v6 + 216) + j) = -721215457;
            j = *(_DWORD *)(v6 + 360) + 4;
          }
          *(_DWORD *)(v6 + 368) = 0;
          v204 = *(_QWORD *)(v6 + 496);
          v205 = *(_QWORD *)(v6 + 504);
          v206 = *(unsigned int *)(v6 + 520);
          if (v204 <= v205)
            v207 = 0;
          else
            v207 = *(unsigned int *)(v6 + 520);
          if (v207 + v205 == v204)
          {
            __break(0xC471u);
            JUMPOUT(0x19593DFB0);
          }
          if (v204 == v205)
          {
            __break(0xC471u);
            JUMPOUT(0x19593DFD0);
          }
          v208 = *(_QWORD *)(v6 + 512);
          v209 = *(unsigned __int8 *)(v208 + v204);
          LOBYTE(v378) = *(_BYTE *)(v208 + v204);
          if (v204 == v206 - 1)
            v210 = 0;
          else
            v210 = v204 + 1;
          *(_QWORD *)(v6 + 496) = v210;
          v211 = *(unsigned int *)(v6 + 556);
          v339 = j;
          if ((_DWORD)v211 == *(_DWORD *)(v6 + 552))
          {
            v308 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, (WTF *)(v211 + 1), (unint64_t)&v378);
            v211 = *(unsigned int *)(v6 + 556);
            *(_BYTE *)(*(_QWORD *)(v6 + 544) + v211) = *v308;
            v209 = v378;
          }
          else
          {
            *(_BYTE *)(*v99 + v211) = v209;
          }
          *(_DWORD *)(v6 + 556) = v211 + 1;
          v212 = v209;
          v330 = v167;
          JSC::MacroAssemblerARM64::load64(v6 + 160, v167, v209);
          if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v190 + 1) + 32) + 16) != WebCore::starAtomData)
          {
            if (!*(_BYTE *)(v6 + 372))
            {
              __break(0xC471u);
              JUMPOUT(0x19593DFF0);
            }
            v213 = v209;
            *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
            JSC::MacroAssemblerARM64::load64(v6 + 160, v209 | 0x1800000000, *(_BYTE *)(v6 + 464));
            JSC::MacroAssemblerARM64::branch64(v6 + 160, 1, 17, v194, (uint64_t)&v378);
            v214 = *(_QWORD *)(*((_QWORD *)v190 + 1) + 32);
            v215 = *(_QWORD *)(v214 + 32);
            if (v215)
            {
              v216 = *(unsigned __int8 *)(v214 + 8);
              if (*(_BYTE *)(v214 + 8))
              {
                if (!*(_BYTE *)(v6 + 372))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19593E0B0);
                }
                *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
                JSC::MacroAssemblerARM64::load8(v6 + 160, v213 | 0x800000000, *(_BYTE *)(v6 + 464));
                JSC::MacroAssemblerARM64::branch32(v6 + 160, 0, 17, v216, (uint64_t)&v369);
                if (v369 != -1)
                {
                  if (HIDWORD(v372) == (_DWORD)v372)
                  {
                    v217 = (void *)(HIDWORD(v372) + 1);
                    v218 = &v369;
                    goto LABEL_310;
                  }
                  v231 = (_DWORD *)((char *)v371 + 12 * HIDWORD(v372));
                  *v231 = v369;
                  v229 = (uint64_t *)(v231 + 1);
                  v226 = &v370;
LABEL_316:
                  *v229 = *v226;
                  ++HIDWORD(v372);
                }
LABEL_317:
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v378, v6 + 160);
                goto LABEL_318;
              }
              if (!*(_BYTE *)(v6 + 372))
              {
                __break(0xC471u);
                JUMPOUT(0x19593E0F0);
              }
              *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
              JSC::MacroAssemblerARM64::load64(v6 + 160, v213 | 0x2000000000, *(_BYTE *)(v6 + 464));
              JSC::MacroAssemblerARM64::branch64(v6 + 160, 0, 17, v215, (uint64_t)&v367);
              if (v367 == -1)
                goto LABEL_317;
              if (HIDWORD(v372) != (_DWORD)v372)
              {
                v233 = (_DWORD *)((char *)v371 + 12 * HIDWORD(v372));
                *v233 = v367;
                v229 = (uint64_t *)(v233 + 1);
                v226 = (uint64_t *)&v368;
                goto LABEL_316;
              }
              v217 = (void *)(HIDWORD(v372) + 1);
              v218 = &v367;
            }
            else
            {
              if (!*(_BYTE *)(v6 + 372))
              {
                __break(0xC471u);
                JUMPOUT(0x19593E0D0);
              }
              *(_DWORD *)(*(_QWORD *)(v6 + 424) + 208) &= ~*(_DWORD *)(v6 + 448);
              JSC::MacroAssemblerARM64::load64(v6 + 160, v213 | 0x2000000000, *(_BYTE *)(v6 + 432));
              JSC::MacroAssemblerARM64::branchTest64(v6 + 160, 0, 16, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)&v365, v224);
              if (v365 == -1)
                goto LABEL_317;
              if (HIDWORD(v372) != (_DWORD)v372)
              {
                v232 = (_DWORD *)((char *)v371 + 12 * HIDWORD(v372));
                *v232 = v365;
                v229 = (uint64_t *)(v232 + 1);
                v226 = &v366;
                goto LABEL_316;
              }
              v217 = (void *)(HIDWORD(v372) + 1);
              v218 = &v365;
            }
LABEL_310:
            v225 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v371, v217, (unint64_t)v218);
            v227 = *(_DWORD *)v225;
            v226 = (uint64_t *)(v225 + 4);
            v228 = (_DWORD *)((char *)v371 + 12 * HIDWORD(v372));
            *v228 = v227;
            v229 = (uint64_t *)(v228 + 1);
            goto LABEL_316;
          }
          if (!*(_BYTE *)(v6 + 372))
          {
            __break(0xC471u);
            JUMPOUT(0x19593E090);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
          JSC::MacroAssemblerARM64::load64(v6 + 160, v209 | 0x1800000000, *(_BYTE *)(v6 + 464));
          JSC::MacroAssemblerARM64::branch64(v6 + 160, 0, 17, v194, (uint64_t)&v363);
          if (v363 != -1)
          {
            if (HIDWORD(v372) == (_DWORD)v372)
            {
              v219 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v371, (void *)(HIDWORD(v372) + 1), (unint64_t)&v363);
              v221 = *(_DWORD *)v219;
              v220 = (int *)(v219 + 4);
              v222 = (_DWORD *)((char *)v371 + 12 * HIDWORD(v372));
              *v222 = v221;
              v223 = v222 + 1;
            }
            else
            {
              v230 = (_DWORD *)((char *)v371 + 12 * HIDWORD(v372));
              *v230 = v363;
              v223 = v230 + 1;
              v220 = &v364;
            }
            *v223 = *(_QWORD *)v220;
            ++HIDWORD(v372);
          }
LABEL_318:
          WebCore::RegisterAllocator::deallocateRegister(v347, v212);
          for (k = *(_DWORD *)(v6 + 360); k < *(_DWORD *)(v6 + 212); *(_DWORD *)(v6 + 360) = k)
          {
            if ((k + 4) > *(_DWORD *)(v6 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v325);
              k = *(_DWORD *)(v6 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v6 + 216) + k) = -721215457;
            k = *(_DWORD *)(v6 + 360) + 4;
          }
          *(_DWORD *)(v6 + 368) = 0;
          v166 = (char)v166;
          JSC::MacroAssemblerARM64::branchSub32((uint64_t)&v361, v6 + 160, 0, v166, 1, v166);
          if (v361 != -1)
          {
            v235 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v235 == *(_DWORD *)(a2 + 8))
            {
              v236 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v235 + 1), (unint64_t)&v361);
              v238 = *(_DWORD *)v236;
              v237 = (uint64_t *)(v236 + 4);
              v239 = (_DWORD *)(*(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 12));
              *v239 = v238;
              v240 = (uint64_t *)(v239 + 1);
            }
            else
            {
              v241 = (_DWORD *)(*(_QWORD *)a2 + 12 * v235);
              *v241 = v361;
              v240 = (uint64_t *)(v241 + 1);
              v237 = &v362;
            }
            *v240 = *v237;
            ++*(_DWORD *)(a2 + 12);
          }
          v242 = *(_DWORD *)(v6 + 360);
          if (v242 + 4 > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v242 = *(_DWORD *)(v6 + 360);
          }
          v243 = v167;
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v242) = (char)v167 | (32 * (char)v167) | 0x91004000;
          while (1)
          {
            v244 = *(_DWORD *)(v6 + 360) + 4;
            *(_DWORD *)(v6 + 360) = v244;
            if ((signed int)v244 >= *(_DWORD *)(v6 + 212))
              break;
            if (v244 + 4 > *(_DWORD *)(v6 + 352))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v325);
              v244 = *(_DWORD *)(v6 + 360);
            }
            *(_DWORD *)(*(_QWORD *)(v6 + 216) + v244) = -721215457;
          }
          v245 = v244;
          if (v244 + 4 > *(_DWORD *)(v6 + 352))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v325);
            v245 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v245) = 335544320;
          *(_DWORD *)(v6 + 360) += 4;
          if (*(_BYTE *)(v6 + 488))
            v246 = 69;
          else
            v246 = 65;
          v378 = (WTF *)v244;
          LOBYTE(v379) = v246;
          *(_WORD *)((char *)&v379 + 1) = 15;
          BYTE3(v379) = -1;
          v360 = v339;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v378, &v360, v6 + 160);
          v248 = HIDWORD(v372);
          if (HIDWORD(v372))
          {
            v249 = 0;
            v250 = 0;
            do
            {
              if (v250 >= HIDWORD(v372))
              {
                __break(0xC471u);
                JUMPOUT(0x19593E524);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v371 + v249), v6 + 160);
              ++v250;
              v249 += 12;
            }
            while (v248 != v250);
          }
          if ((*v190 & 0x1F0) != 0x50)
          {
            v357 = (WTF *)v359;
            v358 = 2;
            v252 = (unint64_t *)(*(_QWORD *)v337 + 8);
            v251 = **(_DWORD **)v337;
            if ((v251 & 0x100000) != 0)
              v252 = (unint64_t *)(*v252 + 8);
            v253 = v337[2];
            switch((v251 >> 4) & 0x1F)
            {
              case 4u:
                RegisterWithPreference = WebCore::RegisterAllocator::allocateRegisterWithPreference((unint64_t *)v347);
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)(v6 + 160), *v252, RegisterWithPreference);
                switch(v253)
                {
                  case 2:
                    v284 = *(_QWORD *)(v6 + 496);
                    v285 = *(_QWORD *)(v6 + 504);
                    v286 = *(unsigned int *)(v6 + 520);
                    if (v284 <= v285)
                      v287 = 0;
                    else
                      v287 = *(unsigned int *)(v6 + 520);
                    if (v287 + v285 == v284)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19593E364);
                    }
                    if (v284 == v285)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19593E3A4);
                    }
                    v288 = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v284);
                    LOBYTE(v378) = v288;
                    if (v284 == v286 - 1)
                      v289 = 0;
                    else
                      v289 = v284 + 1;
                    *(_QWORD *)(v6 + 496) = v289;
                    v290 = *(unsigned int *)(v6 + 556);
                    if ((_DWORD)v290 == *(_DWORD *)(v6 + 552))
                    {
                      v312 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v346, (WTF *)(v290 + 1), (unint64_t)&v378);
                      v290 = *(unsigned int *)(v6 + 556);
                      *(_BYTE *)(*(_QWORD *)(v6 + 544) + v290) = *v312;
                      v288 = (char)v378;
                    }
                    else
                    {
                      *(_BYTE *)(*v346 + v290) = v288;
                    }
                    *(_DWORD *)(v6 + 556) = v290 + 1;
                    JSC::MacroAssemblerARM64::load64(v6 + 160, v330 | 0x800000000, v288);
                    JSC::MacroAssemblerARM64::branch64(v6 + 160, 0, v288, RegisterWithPreference, (uint64_t)v391);
                    v378 = (WTF *)(v6 + 160);
                    v379 = v6 + 496;
                    v380 = (_DWORD *)(v6 + 600);
                    v381 = v6 + 616;
                    v382 = (WTF *)v384;
                    v383 = 16;
                    v385 = (WTF *)v387;
                    v386 = 16;
                    v388 = operationEqualIgnoringASCIICaseNonNull;
                    v389 = 2;
                    LOBYTE(v390) = v288;
                    HIBYTE(v390) = RegisterWithPreference;
                    WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v374, &v378);
                    if (v374 != -1)
                    {
                      if (HIDWORD(v358) == (_DWORD)v358)
                      {
                        v291 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v357, (void *)(HIDWORD(v358) + 1), (unint64_t)&v374);
                        v293 = *(_DWORD *)v291;
                        v292 = (int *)(v291 + 4);
                        v294 = (_DWORD *)((char *)v357 + 12 * HIDWORD(v358));
                        *v294 = v293;
                        v295 = v294 + 1;
                      }
                      else
                      {
                        v297 = (_DWORD *)((char *)v357 + 12 * HIDWORD(v358));
                        *v297 = v374;
                        v295 = v297 + 1;
                        v292 = &v375;
                      }
                      *v295 = *(_QWORD *)v292;
                      ++HIDWORD(v358);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v391, v6 + 160);
                    v299 = v385;
                    if (v387 != (_BYTE *)v385 && v385)
                    {
                      v385 = 0;
                      LODWORD(v386) = 0;
                      WTF::fastFree(v299, v298);
                    }
                    v300 = v382;
                    if (v384 != (_BYTE *)v382 && v382)
                    {
                      v382 = 0;
                      LODWORD(v383) = 0;
                      WTF::fastFree(v300, v298);
                    }
                    v301 = (uint64_t *)(v6 + 496);
                    v302 = v288;
                    goto LABEL_418;
                  case 1:
                    if (!*(_BYTE *)(v6 + 372))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19593E324);
                    }
                    *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
                    JSC::MacroAssemblerARM64::load64(v6 + 160, v330 | 0x800000000, *(_BYTE *)(v6 + 464));
                    JSC::MacroAssemblerARM64::branch64(v6 + 160, 0, 17, RegisterWithPreference, (uint64_t)v391);
                    WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAndDocumentIsHTML(v6, (uint64_t)&v357, v271);
                    v272 = *(_QWORD *)(v6 + 496);
                    v273 = *(_QWORD *)(v6 + 504);
                    v274 = *(unsigned int *)(v6 + 520);
                    if (v272 <= v273)
                      v275 = 0;
                    else
                      v275 = *(unsigned int *)(v6 + 520);
                    if (v275 + v273 == v272)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19593E384);
                    }
                    if (v272 == v273)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19593E3C4);
                    }
                    v276 = *(_BYTE *)(*(_QWORD *)(v6 + 512) + v272);
                    LOBYTE(v378) = v276;
                    if (v272 == v274 - 1)
                      v277 = 0;
                    else
                      v277 = v272 + 1;
                    *(_QWORD *)(v6 + 496) = v277;
                    v278 = *(unsigned int *)(v6 + 556);
                    if ((_DWORD)v278 == *(_DWORD *)(v6 + 552))
                    {
                      v313 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v346, (WTF *)(v278 + 1), (unint64_t)&v378);
                      v278 = *(unsigned int *)(v6 + 556);
                      *(_BYTE *)(*(_QWORD *)(v6 + 544) + v278) = *v313;
                      v276 = (char)v378;
                    }
                    else
                    {
                      *(_BYTE *)(*v346 + v278) = v276;
                    }
                    *(_DWORD *)(v6 + 556) = v278 + 1;
                    JSC::MacroAssemblerARM64::load64(v6 + 160, v330 | 0x800000000, v276);
                    v378 = (WTF *)(v6 + 160);
                    v379 = v6 + 496;
                    v380 = (_DWORD *)(v6 + 600);
                    v381 = v6 + 616;
                    v382 = (WTF *)v384;
                    v383 = 16;
                    v385 = (WTF *)v387;
                    v386 = 16;
                    v388 = operationEqualIgnoringASCIICaseNonNull;
                    v389 = 2;
                    LOBYTE(v390) = v276;
                    HIBYTE(v390) = RegisterWithPreference;
                    WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v376, &v378);
                    if (v376 != -1)
                    {
                      if (HIDWORD(v358) == (_DWORD)v358)
                      {
                        v279 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v357, (void *)(HIDWORD(v358) + 1), (unint64_t)&v376);
                        v281 = *(_DWORD *)v279;
                        v280 = (uint64_t *)(v279 + 4);
                        v282 = (_DWORD *)((char *)v357 + 12 * HIDWORD(v358));
                        *v282 = v281;
                        v283 = (uint64_t *)(v282 + 1);
                      }
                      else
                      {
                        v303 = (_DWORD *)((char *)v357 + 12 * HIDWORD(v358));
                        *v303 = v376;
                        v283 = (uint64_t *)(v303 + 1);
                        v280 = &v377;
                      }
                      *v283 = *v280;
                      ++HIDWORD(v358);
                    }
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v391, v6 + 160);
                    v305 = v385;
                    if (v387 != (_BYTE *)v385 && v385)
                    {
                      v385 = 0;
                      LODWORD(v386) = 0;
                      WTF::fastFree(v305, v304);
                    }
                    v306 = v382;
                    if (v384 != (_BYTE *)v382 && v382)
                    {
                      v382 = 0;
                      LODWORD(v383) = 0;
                      WTF::fastFree(v306, v304);
                    }
                    v301 = (uint64_t *)(v6 + 496);
                    v302 = v276;
LABEL_418:
                    WebCore::RegisterAllocator::deallocateRegister(v301, v302);
                    break;
                  case 0:
                    if (!*(_BYTE *)(v6 + 372))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19593E344);
                    }
                    *(_DWORD *)(*(_QWORD *)(v6 + 456) + 208) &= ~*(_DWORD *)(v6 + 480);
                    JSC::MacroAssemblerARM64::load64(v6 + 160, v330 | 0x800000000, *(_BYTE *)(v6 + 464));
                    JSC::MacroAssemblerARM64::branch64(v6 + 160, 1, 17, RegisterWithPreference, (uint64_t)&v392);
                    if (v392 != -1)
                    {
                      if (HIDWORD(v358) == (_DWORD)v358)
                      {
                        v255 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v357, (void *)(HIDWORD(v358) + 1), (unint64_t)&v392);
                        v257 = *(_DWORD *)v255;
                        v256 = (int *)(v255 + 4);
                        v258 = (_DWORD *)((char *)v357 + 12 * HIDWORD(v358));
                        *v258 = v257;
                        v259 = v258 + 1;
                      }
                      else
                      {
                        v296 = (int *)((char *)v357 + 12 * HIDWORD(v358));
                        *v296 = v392;
                        v259 = v296 + 1;
                        v256 = &v393;
                      }
                      *v259 = *(_QWORD *)v256;
                      ++HIDWORD(v358);
                    }
                    break;
                }
                WebCore::RegisterAllocator::deallocateRegister(v347, RegisterWithPreference);
LABEL_361:
                v266 = (unsigned int *)v357;
                if (HIDWORD(v358))
                {
                  v267 = 12 * HIDWORD(v358);
                  do
                  {
                    LODWORD(v378) = k;
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v266, (unsigned int *)&v378, v6 + 160);
                    v266 += 3;
                    v267 -= 12;
                  }
                  while (v267);
                  v266 = (unsigned int *)v357;
                }
                if (v359 != (_BYTE *)v266 && v266 != 0)
                {
                  v357 = 0;
                  LODWORD(v358) = 0;
                  WTF::fastFree((WTF *)v266, v247);
                }
                break;
              case 6u:
                v260 = v6;
                v261 = v243;
                v262 = v252;
                v263 = v337[2];
                v264 = operationAttributeValueSpaceSeparatedListContainsCaseSensitive;
                v265 = operationAttributeValueSpaceSeparatedListContainsCaseInsensitive;
                goto LABEL_360;
              case 7u:
                v260 = v6;
                v261 = v243;
                v262 = v252;
                v263 = v337[2];
                v264 = operationAttributeValueMatchHyphenRuleCaseSensitive;
                v265 = operationAttributeValueMatchHyphenRuleCaseInsensitive;
                goto LABEL_360;
              case 0xAu:
                v260 = v6;
                v261 = v243;
                v262 = v252;
                v263 = v337[2];
                v264 = operationAttributeValueContainsCaseSensitive;
                v265 = operationAttributeValueContainsCaseInsensitive;
                goto LABEL_360;
              case 0xBu:
                v260 = v6;
                v261 = v243;
                v262 = v252;
                v263 = v337[2];
                v264 = operationAttributeValueBeginsWithCaseSensitive;
                v265 = operationAttributeValueBeginsWithCaseInsensitive;
                goto LABEL_360;
              case 0xCu:
                v260 = v6;
                v261 = v243;
                v262 = v252;
                v263 = v337[2];
                v264 = operationAttributeValueEndsWithCaseSensitive;
                v265 = operationAttributeValueEndsWithCaseInsensitive;
LABEL_360:
                WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAttributeFunctionCallValueMatching(v260, (uint64_t)&v357, v261, v262, v263, (uint64_t)v264, (uint64_t)v265);
                goto LABEL_361;
              default:
                goto LABEL_361;
            }
          }
          v269 = v371;
          if (v373 != (_BYTE *)v371 && v371 != 0)
          {
            v371 = 0;
            LODWORD(v372) = 0;
            WTF::fastFree(v269, v247);
          }
          WebCore::RegisterAllocator::deallocateRegister(v347, v345);
          v99 = (uint64_t *)(v6 + 544);
          if (v165 != v342)
          {
            WebCore::RegisterAllocator::deallocateRegister(v347, v166);
            WebCore::RegisterAllocator::deallocateRegister(v347, v243);
          }
          ++v165;
          v117 = v343;
          v164 = v332;
          v118 = v334;
          if (v165 == v331)
            goto LABEL_440;
        }
        if (v164 == 63)
        {
          if (v167 != 31)
          {
            v178 = v167 & 0x1F | 0xD2800000;
            goto LABEL_232;
          }
        }
        else if (v164 != 31 && v167 != 31)
        {
          v178 = ((v332 & 0x1F) << 16) | v167 | 0xAA0003E0;
LABEL_232:
          v179 = *(_DWORD *)(v6 + 360);
          if (v179 + 4 > *(_DWORD *)(v6 + 352))
          {
            v126 = JSC::AssemblerBuffer::outOfLineGrow(v325);
            v179 = *(_DWORD *)(v6 + 360);
          }
          *(_DWORD *)(*(_QWORD *)(v6 + 216) + v179) = v178;
          *(_DWORD *)(v6 + 360) += 4;
          goto LABEL_235;
        }
        v178 = (32 * v327) | 0x91000000 | (char)v167;
        goto LABEL_232;
      }
LABEL_440:
      WebCore::RegisterAllocator::deallocateRegister(v347, v327);
      WebCore::RegisterAllocator::deallocateRegister(v347, v326);
    }
    return WebCore::RegisterAllocator::deallocateRegister(v347, v328);
  }
  return result;
}

void *WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAndDocumentIsHTML(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  int v6;
  JSC::AssemblerBuffer *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  char *v11;
  int *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  int8x8_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int8 v38;

  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x19593E7FCLL);
  }
  v5 = a1 + 160;
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  v6 = *(_BYTE *)(a1 + 464) & 0x1F | 0x7841C000;
  v7 = (JSC::AssemblerBuffer *)(a1 + 216);
  v8 = *(_DWORD *)(a1 + 360);
  if (v8 + 4 > *(_DWORD *)(a1 + 352))
  {
    a3 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
    v8 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v8) = v6;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, v5, 0, 17, (uint64_t)&v36, *(int8x8_t *)&a3);
  v9 = v36;
  if (v36 != -1)
  {
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
    {
      v11 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v10 + 1), (unint64_t)&v36);
      v13 = *(_DWORD *)v11;
      v12 = (int *)(v11 + 4);
      v9 = v13;
      LODWORD(v10) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v12 = &v37;
    }
    v14 = *(_QWORD *)a2 + 12 * v10;
    *(_DWORD *)v14 = v9;
    *(_QWORD *)(v14 + 4) = *(_QWORD *)v12;
    ++*(_DWORD *)(a2 + 12);
  }
  v15 = *(_QWORD *)(a1 + 496);
  v16 = *(_QWORD *)(a1 + 504);
  v17 = *(unsigned int *)(a1 + 520);
  if (v15 <= v16)
    v18 = 0;
  else
    v18 = *(unsigned int *)(a1 + 520);
  if (v18 + v16 == v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19593E82CLL);
  }
  if (v15 == v16)
  {
    __break(0xC471u);
    JUMPOUT(0x19593E84CLL);
  }
  v19 = *(_QWORD *)(a1 + 512);
  v20 = *(unsigned __int8 *)(v19 + v15);
  v38 = *(_BYTE *)(v19 + v15);
  if (v15 == v17 - 1)
    v21 = 0;
  else
    v21 = v15 + 1;
  *(_QWORD *)(a1 + 496) = v21;
  v22 = (_QWORD *)(a1 + 544);
  v23 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 552))
  {
    v33 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, (WTF *)(v23 + 1), (unint64_t)&v38);
    v23 = *(unsigned int *)(a1 + 556);
    *(_BYTE *)(*(_QWORD *)(a1 + 544) + v23) = *v33;
    v20 = v38;
  }
  else
  {
    *(_BYTE *)(*v22 + v23) = v20;
  }
  *(_DWORD *)(a1 + 556) = v23 + 1;
  v24 = *(_DWORD *)(a1 + 360);
  if (v24 + 4 > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v7);
    v24 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v24) = v20 & 0x1F | 0xF8428000;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::load64(v5, v20 | 0x800000000, v20);
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x19593E87CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  JSC::MacroAssemblerARM64::load16(v5, v20 | 0xD1E00000000, *(_BYTE *)(a1 + 464));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, v5, 0, 17, (uint64_t)&v34, v25);
  v26 = v34;
  if (v34 != -1)
  {
    v27 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v27 == *(_DWORD *)(a2 + 8))
    {
      v28 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v27 + 1), (unint64_t)&v34);
      v30 = *(_DWORD *)v28;
      v29 = (uint64_t *)(v28 + 4);
      v26 = v30;
      LODWORD(v27) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v29 = &v35;
    }
    v31 = *(_QWORD *)a2 + 12 * v27;
    *(_DWORD *)v31 = v26;
    *(_QWORD *)(v31 + 4) = *v29;
    ++*(_DWORD *)(a2 + 12);
  }
  return WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v20);
}

unsigned int *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  __int16 v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  __int16 v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  __int128 v22;
  uint64_t v23;

  v4 = *((unsigned __int8 *)result + 8);
  switch(*((_BYTE *)result + 8))
  {
    case 0x83:
    case 0x87:
      v5 = (_QWORD *)(a3 + 32);
      v6 = *a2;
      v7 = *((_BYTE *)result + 9);
      v8 = *((unsigned __int8 *)result + 10);
      v9 = *((_BYTE *)result + 11);
      *(_QWORD *)&v22 = *result;
      *((_QWORD *)&v22 + 1) = v6;
      BYTE3(v23) = v7 & 0xF;
      *(_WORD *)((char *)&v23 + 1) = v4;
      v10 = v8 << 6;
      goto LABEL_4;
    case 0x84:
    case 0x88:
      v5 = (_QWORD *)(a3 + 32);
      v11 = *a2;
      v12 = *((_BYTE *)result + 9);
      v13 = *((_WORD *)result + 2);
      v9 = *((_BYTE *)result + 11);
      *(_QWORD *)&v22 = *result;
      *((_QWORD *)&v22 + 1) = v11;
      BYTE3(v23) = v12 & 0xF;
      *(_WORD *)((char *)&v23 + 1) = v4;
      v10 = v13 & 0x3F;
LABEL_4:
      WORD2(v23) = v10;
      LOBYTE(v23) = v9;
      v14 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v14 != *(_DWORD *)(a3 + 40))
        goto LABEL_5;
      result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v14 + 1, (unint64_t)&v22);
      v15 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      *(_BYTE *)(v15 + 16) = -1;
      goto LABEL_10;
    default:
      v5 = (_QWORD *)(a3 + 32);
      v18 = *result;
      v19 = *a2;
      v20 = *((_BYTE *)result + 9);
      LOBYTE(v23) = -1;
      *(_QWORD *)&v22 = v18;
      *((_QWORD *)&v22 + 1) = v19;
      BYTE3(v23) = v20 & 0xF;
      *(_WORD *)((char *)&v23 + 1) = v4;
      WORD2(v23) = 0;
      v14 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v14 == *(_DWORD *)(a3 + 40))
      {
        result = (unsigned int *)WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3 + 32, v14 + 1, (unint64_t)&v22);
        v15 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_BYTE *)(v15 + 16) = -1;
LABEL_10:
        v21 = (*(unsigned __int8 *)(v15 + 19) << 16) | 0xF0000;
        *(_WORD *)(v15 + 17) = 65;
        *(_BYTE *)(v15 + 19) = BYTE2(v21);
        *(_WORD *)(v15 + 20) &= 0xFC00u;
        v16 = *(_OWORD *)result;
        v17 = *((_QWORD *)result + 2);
      }
      else
      {
LABEL_5:
        v15 = *v5 + 24 * v14;
        v16 = v22;
        v17 = v23;
      }
      *(_QWORD *)(v15 + 16) = v17;
      *(_OWORD *)v15 = v16;
      ++*(_DWORD *)(a3 + 44);
      return result;
  }
}

uint64_t operationAttributeValueBeginsWithCaseSensitive()
{
  return WTF::StringImpl::startsWith();
}

uint64_t operationAttributeValueBeginsWithCaseInsensitive()
{
  return WTF::StringImpl::startsWithIgnoringASCIICase();
}

BOOL operationAttributeValueContainsCaseSensitive()
{
  return WTF::StringImpl::find() != -1;
}

BOOL operationAttributeValueContainsCaseInsensitive()
{
  return WTF::StringImpl::findIgnoringASCIICase() != -1;
}

uint64_t operationAttributeValueEndsWithCaseSensitive()
{
  return WTF::StringImpl::endsWith();
}

uint64_t operationAttributeValueEndsWithCaseInsensitive()
{
  return WTF::StringImpl::endsWithIgnoringASCIICase();
}

uint64_t operationAttributeValueMatchHyphenRuleCaseSensitive(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 4) < *(_DWORD *)(a2 + 4))
    return 0;
  result = WTF::StringImpl::startsWith();
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(v2 + 4);
    v6 = *(unsigned int *)(a2 + 4);
    if (v5 == (_DWORD)v6)
    {
      return 1;
    }
    else if (v5 <= v6)
    {
      result = 1161;
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        v8 = *(unsigned __int8 *)(v7 + v6);
      else
        v8 = *(unsigned __int16 *)(v7 + 2 * v6);
      return v8 == 45;
    }
  }
  return result;
}

uint64_t operationAttributeValueMatchHyphenRuleCaseInsensitive(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 4) < *(_DWORD *)(a2 + 4))
    return 0;
  result = WTF::StringImpl::startsWithIgnoringASCIICase();
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(v2 + 4);
    v6 = *(unsigned int *)(a2 + 4);
    if (v5 == (_DWORD)v6)
    {
      return 1;
    }
    else if (v5 <= v6)
    {
      result = 1161;
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        v8 = *(unsigned __int8 *)(v7 + v6);
      else
        v8 = *(unsigned __int16 *)(v7 + 2 * v6);
      return v8 == 45;
    }
  }
  return result;
}

uint64_t operationAttributeValueSpaceSeparatedListContainsCaseSensitive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  BOOL v22;

  v3 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    while (1)
    {
      v4 = WTF::StringImpl::find();
      result = 0;
      if (v4 == -1)
        break;
      v6 = 0;
      if (v4)
      {
        v12 = WTF::StringImpl::operator[](v3, (int)v4 - 1);
        v13 = v12 > 0x20 || ((1 << v12) & 0x100003600) == 0;
        v6 = v4;
        if (v13)
          continue;
      }
      v7 = (*(_DWORD *)(a2 + 4) + v6);
      v8 = *(_DWORD *)(v3 + 4);
      if ((_DWORD)v7 == v8)
        return 1;
      if (v8 <= v7)
        goto LABEL_18;
      v9 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        v10 = *(unsigned __int8 *)(v9 + v7);
      else
        v10 = *(unsigned __int16 *)(v9 + 2 * v7);
      v11 = v10 - 9;
      if (v11 < 0x18 && ((0x80001Bu >> v11) & 1) != 0)
        return 1;
    }
  }
  else
  {
    while (1)
    {
      v19 = WTF::StringImpl::find();
      result = 0;
      if (v19 == -1)
        break;
      v20 = 0;
      if (v19)
      {
        v21 = WTF::StringImpl::operator[](v3, (int)v19 - 1);
        v22 = v21 > 0x20 || ((1 << v21) & 0x100003600) == 0;
        v20 = v19;
        if (v22)
          continue;
      }
      v14 = (*(_DWORD *)(a2 + 4) + v20);
      v15 = *(_DWORD *)(v3 + 4);
      if ((_DWORD)v14 == v15)
        return 1;
      if (v15 <= v14)
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x19593EDB8);
      }
      v16 = *(_QWORD *)(v3 + 8);
      v17 = (*(_BYTE *)(v3 + 16) & 4) != 0 ? *(unsigned __int8 *)(v16 + v14) : *(unsigned __int16 *)(v16 + 2 * v14);
      v18 = v17 - 9;
      if (v18 < 0x18 && ((0x80001Bu >> v18) & 1) != 0)
        return 1;
    }
  }
  return result;
}

uint64_t operationAttributeValueSpaceSeparatedListContainsCaseInsensitive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t IgnoringASCIICase;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    while (1)
    {
      IgnoringASCIICase = WTF::StringImpl::findIgnoringASCIICase();
      if (!IgnoringASCIICase)
        break;
      if (IgnoringASCIICase == -1)
        return 0;
      v5 = (IgnoringASCIICase - 1);
      v6 = *(_DWORD *)(v3 + 4);
      if (v6 <= v5)
        goto LABEL_43;
      v7 = IgnoringASCIICase;
      v8 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        v9 = *(unsigned __int8 *)(v8 + v5);
      else
        v9 = *(unsigned __int16 *)(v8 + 2 * v5);
      v10 = v9 > 0x20;
      v11 = (1 << v9) & 0x100003600;
      if (!v10 && v11 != 0)
      {
LABEL_14:
        v13 = (*(_DWORD *)(a2 + 4) + v7);
        if ((_DWORD)v13 == v6)
          return 1;
        if (v6 <= v13)
          goto LABEL_43;
        v14 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v3 + 16) & 4) != 0)
          v15 = *(unsigned __int8 *)(v14 + v13);
        else
          v15 = *(unsigned __int16 *)(v14 + 2 * v13);
        v16 = v15 - 9;
        if (v16 < 0x18 && ((0x80001Bu >> v16) & 1) != 0)
          return 1;
      }
    }
    v7 = 0;
    v6 = *(_DWORD *)(v3 + 4);
    goto LABEL_14;
  }
  while (1)
  {
    while (1)
    {
      v20 = WTF::StringImpl::findIgnoringASCIICase();
      if (v20)
        break;
      v23 = 0;
      v22 = *(_DWORD *)(v3 + 4);
LABEL_40:
      v28 = (*(_DWORD *)(a2 + 4) + v23);
      if ((_DWORD)v28 != v22)
      {
        if (v22 <= v28)
          goto LABEL_43;
        v17 = *(_QWORD *)(v3 + 8);
        v18 = (*(_BYTE *)(v3 + 16) & 4) != 0 ? *(unsigned __int8 *)(v17 + v28) : *(unsigned __int16 *)(v17 + 2 * v28);
        v19 = v18 - 9;
        if (v19 >= 0x18 || ((0x80001Bu >> v19) & 1) == 0)
          continue;
      }
      return 1;
    }
    if (v20 == -1)
      return 0;
    v21 = (v20 - 1);
    v22 = *(_DWORD *)(v3 + 4);
    if (v22 <= v21)
    {
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x19593F070);
    }
    v23 = v20;
    v24 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      v25 = *(unsigned __int8 *)(v24 + v21);
    else
      v25 = *(unsigned __int16 *)(v24 + 2 * v21);
    v10 = v25 > 0x20;
    v26 = (1 << v25) & 0x100003600;
    if (!v10 && v26 != 0)
      goto LABEL_40;
  }
}

void *WebCore::SelectorCompiler::SelectorCodeGenerator::generateElementAttributeFunctionCallValueMatching(uint64_t a1, uint64_t a2, char a3, unint64_t *a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  int RegisterWithPreference;
  unsigned __int8 v16;
  WebCore::FunctionCall *v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  _DWORD *v22;
  char *v23;
  _QWORD *v24;
  int v25;
  int8x8_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  char *v31;
  uint64_t *v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  int8x8_t v50;
  int v51;
  unsigned int v52;
  char *v53;
  int *v54;
  int v55;
  char *v56;
  uint64_t v57;
  void *v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  WTF *v65;
  WTF *v66;
  int i;
  unsigned int v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  int v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  _BYTE *v82;
  JSC::AssemblerBuffer *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD v86[3];
  int v87;
  uint64_t v88;
  unsigned int v89[2];
  char v90;
  __int16 v91;
  char v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  _BYTE v101[28];
  _DWORD v102[3];
  WebCore::FunctionCall *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  _BYTE v109[16];
  WTF *v110;
  uint64_t v111;
  _BYTE v112[64];
  uint64_t v113;
  int v114;
  char v115;
  unsigned __int8 v116;

  v14 = (uint64_t *)(a1 + 496);
  RegisterWithPreference = WebCore::RegisterAllocator::allocateRegisterWithPreference((unint64_t *)(a1 + 496));
  v16 = RegisterWithPreference;
  v17 = (WebCore::FunctionCall *)(a1 + 160);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)(a1 + 160), *a4, RegisterWithPreference);
  if (a5 == 2)
  {
    v103 = (WebCore::FunctionCall *)(a1 + 160);
    v104 = v14;
    v105 = a1 + 600;
    v106 = a1 + 616;
    v107 = (WTF *)v109;
    v108 = 16;
    v110 = (WTF *)v112;
    v111 = 16;
    v113 = a7;
    v114 = 2;
    v115 = a3;
    v116 = v16;
    WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)v86, &v103);
    v19 = v86[0];
    if (v86[0] == -1)
    {
LABEL_21:
      v36 = v110;
      if (v112 != (_BYTE *)v110 && v110)
      {
        v110 = 0;
        LODWORD(v111) = 0;
        WTF::fastFree(v36, v18);
      }
      v37 = v107;
      if (v109 != (_BYTE *)v107 && v107)
      {
        v107 = 0;
        LODWORD(v108) = 0;
        goto LABEL_71;
      }
      return WebCore::RegisterAllocator::deallocateRegister(v14, v16);
    }
    v20 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v20 == *(_DWORD *)(a2 + 8))
    {
      v21 = (void *)(v20 + 1);
      v22 = v86;
      goto LABEL_10;
    }
    v34 = v86;
LABEL_19:
    v24 = v34 + 1;
    goto LABEL_20;
  }
  if (a5 != 1)
  {
    if (a5)
      return WebCore::RegisterAllocator::deallocateRegister(v14, v16);
    v103 = (WebCore::FunctionCall *)(a1 + 160);
    v104 = v14;
    v105 = a1 + 600;
    v106 = a1 + 616;
    v107 = (WTF *)v109;
    v108 = 16;
    v110 = (WTF *)v112;
    v111 = 16;
    v113 = a6;
    v114 = 2;
    v115 = a3;
    v116 = v16;
    WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)v102, &v103);
    v19 = v102[0];
    if (v102[0] == -1)
      goto LABEL_21;
    v20 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v20 == *(_DWORD *)(a2 + 8))
    {
      v21 = (void *)(v20 + 1);
      v22 = v102;
LABEL_10:
      v23 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v21, (unint64_t)v22);
      v25 = *(_DWORD *)v23;
      v24 = v23 + 4;
      v19 = v25;
      LODWORD(v20) = *(_DWORD *)(a2 + 12);
LABEL_20:
      v35 = *(_QWORD *)a2 + 12 * v20;
      *(_DWORD *)v35 = v19;
      *(_QWORD *)(v35 + 4) = *v24;
      ++*(_DWORD *)(a2 + 12);
      goto LABEL_21;
    }
    v34 = v102;
    goto LABEL_19;
  }
  v99 = (WTF *)v101;
  v26 = (int8x8_t)2;
  v100 = 2;
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x19593F770);
  }
  v85 = a6;
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  v27 = *(_BYTE *)(a1 + 464) & 0x1F | 0x7841C000;
  v28 = *(_DWORD *)(a1 + 360);
  if (v28 + 4 > *(_DWORD *)(a1 + 352))
  {
    *(double *)&v26 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
    v28 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v28) = v27;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, a1 + 160, 0, 17, (uint64_t)&v97, v26);
  v29 = v97;
  if (v97 != -1)
  {
    v30 = HIDWORD(v100);
    if (HIDWORD(v100) == (_DWORD)v100)
    {
      v31 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v99, (void *)(HIDWORD(v100) + 1), (unint64_t)&v97);
      v33 = *(_DWORD *)v31;
      v32 = (uint64_t *)(v31 + 4);
      v29 = v33;
      v30 = HIDWORD(v100);
    }
    else
    {
      v32 = &v98;
    }
    v39 = (char *)v99 + 12 * v30;
    *(_DWORD *)v39 = v29;
    *(_QWORD *)(v39 + 4) = *v32;
    ++HIDWORD(v100);
  }
  v40 = *(_QWORD *)(a1 + 496);
  v41 = *(_QWORD *)(a1 + 504);
  v42 = *(unsigned int *)(a1 + 520);
  if (v40 <= v41)
    v43 = 0;
  else
    v43 = *(unsigned int *)(a1 + 520);
  if (v43 + v41 == v40)
  {
    __break(0xC471u);
    JUMPOUT(0x19593F7A0);
  }
  if (v40 == v41)
  {
    __break(0xC471u);
    JUMPOUT(0x19593F7C0);
  }
  v44 = *(_QWORD *)(a1 + 512);
  v45 = *(unsigned __int8 *)(v44 + v40);
  LOBYTE(v103) = *(_BYTE *)(v44 + v40);
  if (v40 == v42 - 1)
    v46 = 0;
  else
    v46 = v40 + 1;
  *(_QWORD *)(a1 + 496) = v46;
  v47 = (_QWORD *)(a1 + 544);
  v48 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v48 == *(_DWORD *)(a1 + 552))
  {
    v82 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, (WTF *)(v48 + 1), (unint64_t)&v103);
    v48 = *(unsigned int *)(a1 + 556);
    *(_BYTE *)(*(_QWORD *)(a1 + 544) + v48) = *v82;
    v45 = v103;
  }
  else
  {
    *(_BYTE *)(*v47 + v48) = v45;
  }
  *(_DWORD *)(a1 + 556) = v48 + 1;
  v49 = *(_DWORD *)(a1 + 360);
  if (v49 + 4 > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
    v49 = *(_DWORD *)(a1 + 360);
  }
  v83 = (JSC::AssemblerBuffer *)(a1 + 216);
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v49) = v45 & 0x1F | 0xF8428000;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::load64(a1 + 160, v45 | 0x800000000, v45);
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x19593F7F0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  JSC::MacroAssemblerARM64::load16(a1 + 160, v45 | 0xD1E00000000, *(_BYTE *)(a1 + 464));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1 + 160, 0, 17, (uint64_t)&v95, v50);
  v51 = v95;
  if (v95 != -1)
  {
    v52 = HIDWORD(v100);
    if (HIDWORD(v100) == (_DWORD)v100)
    {
      v53 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v99, (void *)(HIDWORD(v100) + 1), (unint64_t)&v95);
      v55 = *(_DWORD *)v53;
      v54 = (int *)(v53 + 4);
      v51 = v55;
      v52 = HIDWORD(v100);
    }
    else
    {
      v54 = &v96;
    }
    v56 = (char *)v99 + 12 * v52;
    *(_DWORD *)v56 = v51;
    *(_QWORD *)(v56 + 4) = *(_QWORD *)v54;
    ++HIDWORD(v100);
  }
  WebCore::RegisterAllocator::deallocateRegister(v14, v45);
  v57 = a1 + 600;
  v103 = (WebCore::FunctionCall *)(a1 + 160);
  v104 = v14;
  v105 = a1 + 600;
  v106 = a1 + 616;
  v84 = a1 + 616;
  v107 = (WTF *)v109;
  v108 = 16;
  v110 = (WTF *)v112;
  v111 = 16;
  v113 = a7;
  v114 = 2;
  v115 = a3;
  v116 = v16;
  WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v93, &v103);
  v59 = v93;
  if (v93 != -1)
  {
    v60 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v60 == *(_DWORD *)(a2 + 8))
    {
      v61 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v60 + 1), (unint64_t)&v93);
      v63 = *(_DWORD *)v61;
      v62 = (uint64_t *)(v61 + 4);
      v59 = v63;
      LODWORD(v60) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v62 = &v94;
    }
    v64 = *(_QWORD *)a2 + 12 * v60;
    *(_DWORD *)v64 = v59;
    *(_QWORD *)(v64 + 4) = *v62;
    ++*(_DWORD *)(a2 + 12);
  }
  v65 = v110;
  if (v112 != (_BYTE *)v110 && v110)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree(v65, v58);
  }
  v66 = v107;
  if (v109 != (_BYTE *)v107 && v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree(v66, v58);
  }
  for (i = *(_DWORD *)(a1 + 360); i < *(_DWORD *)(a1 + 212); *(_DWORD *)(a1 + 360) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 352))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v83);
      i = *(_DWORD *)(a1 + 360);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 216) + i) = -721215457;
    i = *(_DWORD *)(a1 + 360) + 4;
  }
  v68 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 352))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v83);
    v68 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v68) = 335544320;
  *(_DWORD *)(a1 + 360) += 4;
  if (*(_BYTE *)(a1 + 488))
    v69 = 69;
  else
    v69 = 65;
  v89[0] = i;
  v89[1] = 0;
  v90 = v69;
  v91 = 15;
  v92 = -1;
  if (HIDWORD(v100))
  {
    v70 = 0;
    v71 = 0;
    v72 = 12 * HIDWORD(v100);
    do
    {
      if (v71 >= HIDWORD(v100))
      {
        __break(0xC471u);
        JUMPOUT(0x19593F8ECLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v99 + v70), (uint64_t)v17);
      ++v71;
      v70 += 12;
    }
    while (v72 != v70);
  }
  v103 = v17;
  v104 = v14;
  v105 = v57;
  v106 = v84;
  v107 = (WTF *)v109;
  v108 = 16;
  v110 = (WTF *)v112;
  v111 = 16;
  v113 = v85;
  v114 = 2;
  v115 = a3;
  v116 = v16;
  WebCore::FunctionCall::callAndBranchOnCondition((uint64_t)&v87, &v103);
  v74 = v87;
  if (v87 != -1)
  {
    v75 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v75 == *(_DWORD *)(a2 + 8))
    {
      v76 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v75 + 1), (unint64_t)&v87);
      v78 = *(_DWORD *)v76;
      v77 = (uint64_t *)(v76 + 4);
      v74 = v78;
      LODWORD(v75) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v77 = &v88;
    }
    v79 = *(_QWORD *)a2 + 12 * v75;
    *(_DWORD *)v79 = v74;
    *(_QWORD *)(v79 + 4) = *v77;
    ++*(_DWORD *)(a2 + 12);
  }
  v80 = v110;
  if (v112 != (_BYTE *)v110 && v110)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree(v80, v73);
  }
  v81 = v107;
  if (v109 != (_BYTE *)v107 && v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree(v81, v73);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v89, (uint64_t)v17);
  v37 = v99;
  if (v101 != (_BYTE *)v99 && v99)
  {
    v99 = 0;
    LODWORD(v100) = 0;
LABEL_71:
    WTF::fastFree(v37, v18);
  }
  return WebCore::RegisterAllocator::deallocateRegister(v14, v16);
}

uint64_t operationElementIsActive(uint64_t a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(a1 + 54) & 2) != 0 && WebCore::Element::isUserActionElementActive((WebCore::Element *)a1))
    return 1;
  if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(_QWORD *)(v4 + 528);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 24)) == 0 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    v9 = *(_QWORD *)(v4 + 2632);
    if (!v9)
      return 0;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      return 0;
    v11 = *(_QWORD *)(v10 + 528);
    if (!v11)
      return 0;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      return 0;
    v13 = *(_QWORD *)(v12 + 24);
    if (!v13)
      return 0;
    v8 = *(_QWORD *)(v13 + 8);
    if (!v8)
      return 0;
  }
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 112);
  if (result)
    return WebCore::InspectorCSSAgent::forcePseudoState(result, a1, 11);
  return result;
}

void *WebCore::SelectorCompiler::jumpIfElementIsNotEmpty(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  int i;
  unsigned int v46;
  char v47;
  _BYTE *v49;
  _BYTE *v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54[2];
  char v55;
  __int16 v56;
  char v57;
  int v58;
  uint64_t v59;
  unsigned int v60[3];
  char v61;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 24);
  if (*(_QWORD *)a2 <= v5)
    v7 = 0;
  else
    v7 = *(unsigned int *)(a2 + 24);
  if (v7 + v5 == v4)
  {
    __break(0xC471u);
    JUMPOUT(0x19593FDDCLL);
  }
  if (v4 == v5)
  {
    __break(0xC471u);
    JUMPOUT(0x19593FDFCLL);
  }
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(unsigned __int8 *)(v11 + v4);
  LOBYTE(v60[0]) = *(_BYTE *)(v11 + v4);
  if (v4 == v6 - 1)
    v13 = 0;
  else
    v13 = v4 + 1;
  *(_QWORD *)a2 = v13;
  v14 = (_QWORD *)(a2 + 48);
  v15 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v15 == *(_DWORD *)(a2 + 56))
  {
    v49 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, (WTF *)(v15 + 1), (unint64_t)v60);
    v15 = *(unsigned int *)(a2 + 60);
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v15) = *v49;
    v12 = LOBYTE(v60[0]);
  }
  else
  {
    *(_BYTE *)(*v14 + v15) = v12;
  }
  *(_DWORD *)(a2 + 60) = v15 + 1;
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    a4 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v12 & 0x1F | 0xF8450000;
  v17 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v17; v17 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v17)
  {
    if ((v17 + 4) > *(_DWORD *)(a1 + 192))
    {
      a4 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v17 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = -721215457;
    v17 = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  v18 = v12;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, v12, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v60, *(int8x8_t *)&a4);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19593FE78);
  }
  v19 = v12;
  v20 = v12 | 0x1C00000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, v20, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, a1, 1u, 17, (uint64_t)&v58, v21);
  v22 = v58;
  if (v58 != -1)
  {
    v23 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v23 == *(_DWORD *)(a3 + 8))
    {
      v24 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v23 + 1), (unint64_t)&v58);
      v26 = *(_DWORD *)v24;
      v25 = (uint64_t *)(v24 + 4);
      v22 = v26;
      LODWORD(v23) = *(_DWORD *)(a3 + 12);
    }
    else
    {
      v25 = &v59;
    }
    v27 = *(_QWORD *)a3 + 12 * v23;
    *(_DWORD *)v27 = v22;
    *(_QWORD *)(v27 + 4) = *v25;
    ++*(_DWORD *)(a3 + 12);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19593FE98);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, v20, *(_BYTE *)(a1 + 304));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, a1, 0, 17, (uint64_t)v54, v28);
  v29 = *(_QWORD *)a2;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = *(unsigned int *)(a2 + 24);
  if (*(_QWORD *)a2 <= v30)
    v32 = 0;
  else
    v32 = *(unsigned int *)(a2 + 24);
  if (v32 + v30 == v29)
  {
    __break(0xC471u);
    JUMPOUT(0x19593FEB8);
  }
  if (v29 == v30)
  {
    __break(0xC471u);
    JUMPOUT(0x19593FED8);
  }
  v33 = *(_BYTE *)(*(_QWORD *)(a2 + 16) + v29);
  v61 = v33;
  if (v29 == v31 - 1)
    v34 = 0;
  else
    v34 = v29 + 1;
  *(_QWORD *)a2 = v34;
  v35 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v35 == *(_DWORD *)(a2 + 56))
  {
    v50 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, (WTF *)(v35 + 1), (unint64_t)&v61);
    v35 = *(unsigned int *)(a2 + 60);
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v35) = *v50;
    v33 = v61;
  }
  else
  {
    *(_BYTE *)(*v14 + v35) = v33;
  }
  *(_DWORD *)(a2 + 60) = v35 + 1;
  JSC::MacroAssemblerARM64::load64(a1, v19 | 0x5000000000, v33);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19593FEF8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v37 = *(_BYTE *)(a1 + 304);
  v38 = *(_DWORD *)(a1 + 200);
  if (v38 + 4 > *(_DWORD *)(a1 + 192))
  {
    v36 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = (32 * v33) | v37 & 0x1F | 0xB8404000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1u, 17, (uint64_t)&v52, *(int8x8_t *)&v36);
  v39 = v52;
  if (v52 != -1)
  {
    v40 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v40 == *(_DWORD *)(a3 + 8))
    {
      v41 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v40 + 1), (unint64_t)&v52);
      v43 = *(_DWORD *)v41;
      v42 = (uint64_t *)(v41 + 4);
      v39 = v43;
      LODWORD(v40) = *(_DWORD *)(a3 + 12);
    }
    else
    {
      v42 = &v53;
    }
    v44 = *(_QWORD *)a3 + 12 * v40;
    *(_DWORD *)v44 = v39;
    *(_QWORD *)(v44 + 4) = *v42;
    ++*(_DWORD *)(a3 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v54, a1);
  WebCore::RegisterAllocator::deallocateRegister((uint64_t *)a2, v33);
  JSC::MacroAssemblerARM64::load64(a1, v19 | 0x3800000000, v18);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v46 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v46 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v46) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v47 = 69;
  else
    v47 = 65;
  v54[0] = i;
  v54[1] = 0;
  v55 = v47;
  v56 = 15;
  v57 = -1;
  v51 = v17;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v54, (unsigned int *)&v51, a1);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v60, a1);
  return WebCore::RegisterAllocator::deallocateRegister((uint64_t *)a2, v18);
}

uint64_t operationElementIsHovered(uint64_t a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(a1 + 54) & 2) != 0 && WebCore::Element::isUserActionElementHovered((WebCore::Element *)a1))
    return 1;
  if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(_QWORD *)(v4 + 528);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0 || (v7 = *(_QWORD *)(v6 + 24)) == 0 || (v8 = *(_QWORD *)(v7 + 8)) == 0)
  {
    v9 = *(_QWORD *)(v4 + 2632);
    if (!v9)
      return 0;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      return 0;
    v11 = *(_QWORD *)(v10 + 528);
    if (!v11)
      return 0;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      return 0;
    v13 = *(_QWORD *)(v12 + 24);
    if (!v13)
      return 0;
    v8 = *(_QWORD *)(v13 + 8);
    if (!v8)
      return 0;
  }
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + 8) + 112);
  if (result)
    return WebCore::InspectorCSSAgent::forcePseudoState(result, a1, 37);
  return result;
}

uint64_t operationMakeContextStyleUniqueIfNecessaryAndTestIsPlaceholderShown(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;

  result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 872))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 880))(a1);
    if ((_DWORD)result)
    {
      if (!*(_BYTE *)a2)
      {
        *(_QWORD *)&v6 = a1;
        *((_QWORD *)&v6 + 1) = 0x10000000DLL;
        v5 = *(unsigned int *)(a2 + 84);
        if ((_DWORD)v5 == *(_DWORD *)(a2 + 80))
        {
          WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::Relation>(a2 + 72, (unint64_t)&v6);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)(a2 + 72) + 16 * v5) = v6;
          ++*(_DWORD *)(a2 + 84);
        }
      }
      return (a1[169] >> 3) & 1;
    }
  }
  return result;
}

uint64_t operationIsPlaceholderShown(unsigned __int8 *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 872))(a1);
  if ((_DWORD)result)
    return (a1[169] >> 3) & 1;
  return result;
}

WTF *WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthChildRelationUpdate(WebCore::SelectorCompiler::SelectorCodeGenerator *this, const WebCore::SelectorCompiler::SelectorFragment *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  signed __int8 v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  WTF *result;
  _BYTE *v32;
  _BYTE *v33;
  WTF *v34;
  uint64_t v35;
  _BYTE v36[28];
  unsigned int v37[3];

  v34 = (WTF *)v36;
  v2 = 2;
  v35 = 2;
  v4 = *((_QWORD *)this + 62);
  v3 = *((_QWORD *)this + 63);
  v5 = *((unsigned int *)this + 130);
  if (v4 <= v3)
    v6 = 0;
  else
    v6 = *((unsigned int *)this + 130);
  if (v6 + v3 == v4)
  {
    __break(0xC471u);
    goto LABEL_46;
  }
  if (v4 == v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1959403A4);
  }
  v9 = (uint64_t *)((char *)this + 496);
  v10 = *(_BYTE *)(*((_QWORD *)this + 64) + v4);
  LOBYTE(v37[0]) = v10;
  if (v4 == v5 - 1)
    v11 = 0;
  else
    v11 = v4 + 1;
  *((_QWORD *)this + 62) = v11;
  v12 = (_QWORD *)((char *)this + 544);
  v13 = *((unsigned int *)this + 139);
  if ((_DWORD)v13 == *((_DWORD *)this + 138))
  {
    v32 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 544, (WTF *)(v13 + 1), (unint64_t)v37);
    v13 = *((unsigned int *)this + 139);
    *(_BYTE *)(*((_QWORD *)this + 68) + v13) = *v32;
    v10 = v37[0];
  }
  else
  {
    *(_BYTE *)(*v12 + v13) = v10;
  }
  *((_DWORD *)this + 139) = v13 + 1;
  v14 = v10;
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToParentElement((uint64_t)this, (uint64_t)&v34, v10, *(double *)&v2);
  if (*((_DWORD *)this + 286) != 1)
  {
    if (*((_DWORD *)a2 + 2) == 2 || *((_BYTE *)a2 + 12) == 0)
      v16 = 5;
    else
      v16 = 4;
    v18 = *((_QWORD *)this + 62);
    v17 = *((_QWORD *)this + 63);
    v19 = *((unsigned int *)this + 130);
    if (v18 <= v17)
      v20 = 0;
    else
      v20 = *((unsigned int *)this + 130);
    if (v20 + v17 == v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1959403C4);
    }
    if (v18 == v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1959403E4);
    }
    v21 = *(_BYTE *)(*((_QWORD *)this + 64) + v18);
    LOBYTE(v37[0]) = v21;
    if (v18 == v19 - 1)
      v22 = 0;
    else
      v22 = v18 + 1;
    *((_QWORD *)this + 62) = v22;
    v23 = *((unsigned int *)this + 139);
    if ((_DWORD)v23 == *((_DWORD *)this + 138))
    {
      v33 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, (WTF *)(v23 + 1), (unint64_t)v37);
      v23 = *((unsigned int *)this + 139);
      *(_BYTE *)(*((_QWORD *)this + 68) + v23) = *v33;
      v21 = v37[0];
    }
    else
    {
      *(_BYTE *)(*v12 + v23) = v21;
    }
    *((_DWORD *)this + 139) = v23 + 1;
    v24 = v21;
    WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)v37, (uint64_t)this, v21);
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation((uint64_t)this, v24, v14, v16, 0);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v37, (uint64_t)this + 160);
    WebCore::RegisterAllocator::deallocateRegister(v9, v24);
  }
  if (HIDWORD(v35))
  {
    v25 = 0;
    v26 = 0;
    v27 = (char *)this + 160;
    v28 = 12 * HIDWORD(v35);
    while (v26 < HIDWORD(v35))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v34 + v25), (uint64_t)v27);
      ++v26;
      v25 += 12;
      if (v28 == v25)
        goto LABEL_33;
    }
    __break(0xC471u);
LABEL_46:
    JUMPOUT(0x195940384);
  }
LABEL_33:
  WebCore::RegisterAllocator::deallocateRegister(v9, v14);
  result = v34;
  if (v36 != (_BYTE *)v34 && v34 != 0)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, v29);
  }
  return result;
}

void JSC::MacroAssemblerARM64::load16(uint64_t a1, uint64_t a2, char a3)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;

  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v5 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v6 = 2017460224;
LABEL_3:
    v7 = v5 | v6;
    goto LABEL_4;
  }
  if (HIDWORD(a2) <= 0x1FFE && (a2 & 0x100000000) == 0)
  {
    v5 = (HIDWORD(a2) << 9) & 0x3FFC00;
    v6 = a3 & 0x1F | (32 * (char)a2) | 0x79400000;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v11 = a2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304));
  v7 = a3 & 0x1F | (32 * v11) | 0x78716800;
LABEL_4:
  v10 = *(_DWORD *)(a1 + 200);
  v9 = (unsigned int *)(a1 + 200);
  v8 = v10;
  if (v10 + 4 > *(v9 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 - 36));
    v8 = *v9;
  }
  *(_DWORD *)(*((_QWORD *)v9 - 18) + v8) = v7;
  *v9 += 4;
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthFilterTest(uint64_t a1, uint64_t a2, int a3, JSC::ARM64LogicalImmediate *this, JSC::ARM64LogicalImmediate *a5, int8x8_t a6)
{
  int v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;
  char *v14;
  _QWORD *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned __int8 v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int8x8_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  unsigned int v45;
  char *v46;
  _QWORD *v47;
  int v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  int v55;
  _BYTE *v56;
  int v57;
  _DWORD v58[3];
  _DWORD v59[3];
  _DWORD v60[3];
  _DWORD v61[3];
  unsigned __int8 v62;

  if ((_DWORD)this)
  {
    if ((int)this < 1)
    {
      v18 = *(_QWORD *)(a1 + 496);
      v17 = *(_QWORD *)(a1 + 504);
      v19 = *(unsigned int *)(a1 + 520);
      if (v18 <= v17)
        v20 = 0;
      else
        v20 = *(unsigned int *)(a1 + 520);
      if (v20 + v17 == v18)
      {
        __break(0xC471u);
        JUMPOUT(0x195940900);
      }
      if (v18 == v17)
      {
        __break(0xC471u);
        JUMPOUT(0x195940920);
      }
      v21 = (uint64_t *)(a1 + 496);
      v22 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v18);
      v62 = v22;
      if (v18 == v19 - 1)
        v23 = 0;
      else
        v23 = v18 + 1;
      *(_QWORD *)(a1 + 496) = v23;
      v24 = (_QWORD *)(a1 + 544);
      v25 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v25 == *(_DWORD *)(a1 + 552))
      {
        v53 = (int)a5;
        v54 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, (WTF *)(v25 + 1), (unint64_t)&v62);
        LODWORD(a5) = v53;
        v25 = *(unsigned int *)(a1 + 556);
        *(_BYTE *)(*(_QWORD *)(a1 + 544) + v25) = *v54;
        v22 = v62;
      }
      else
      {
        *(_BYTE *)(*v24 + v25) = v22;
      }
      *(_DWORD *)(a1 + 556) = v25 + 1;
      v26 = (char)v22;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)(a1 + 160), (JSC::ARM64LogicalImmediate *)a5, (char)v22);
      JSC::MacroAssemblerARM64::branchSub32((uint64_t)v58, a1 + 160, 4u, v26, a3, v26);
      v28 = v58[0];
      if (v58[0] == -1)
        goto LABEL_58;
      v29 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v29 == *(_DWORD *)(a2 + 8))
      {
        v30 = (void *)(v29 + 1);
        v31 = v58;
LABEL_48:
        v46 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v30, (unint64_t)v31);
        v48 = *(_DWORD *)v46;
        v47 = v46 + 4;
        v28 = v48;
        LODWORD(v29) = *(_DWORD *)(a2 + 12);
LABEL_57:
        v52 = *(_QWORD *)a2 + 12 * v29;
        *(_DWORD *)v52 = v28;
        *(_QWORD *)(v52 + 4) = *v47;
        ++*(_DWORD *)(a2 + 12);
        goto LABEL_58;
      }
      v50 = v58;
LABEL_56:
      v47 = v50 + 1;
      goto LABEL_57;
    }
    if ((_DWORD)this == 2 && (_DWORD)a5 == 1)
    {
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1 + 160, 0, a3, (uint64_t)v60, a6);
      v10 = v60[0];
      if (v60[0] != -1)
      {
        v11 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
        {
          v12 = (void *)(v11 + 1);
          v13 = v60;
LABEL_11:
          v14 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12, (unint64_t)v13);
          v16 = *(_DWORD *)v14;
          v15 = v14 + 4;
          v10 = v16;
          LODWORD(v11) = *(_DWORD *)(a2 + 12);
LABEL_54:
          v51 = *(_QWORD *)a2 + 12 * v11;
          *(_DWORD *)v51 = v10;
          *(_QWORD *)(v51 + 4) = *v15;
          ++*(_DWORD *)(a2 + 12);
          return;
        }
        v49 = v60;
        goto LABEL_53;
      }
      return;
    }
    if (!(_DWORD)a5)
    {
      WebCore::SelectorCompiler::SelectorCodeGenerator::moduloIsZero(a1, a2, a3, this, a6);
      return;
    }
    v33 = *(_QWORD *)(a1 + 496);
    v32 = *(_QWORD *)(a1 + 504);
    v34 = *(unsigned int *)(a1 + 520);
    if (v33 <= v32)
      v35 = 0;
    else
      v35 = *(unsigned int *)(a1 + 520);
    if (v35 + v32 == v33)
    {
      __break(0xC471u);
      JUMPOUT(0x195940940);
    }
    if (v33 == v32)
    {
      __break(0xC471u);
      JUMPOUT(0x195940960);
    }
    v36 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 512) + v33);
    v62 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v33);
    if (v33 == v34 - 1)
      v37 = 0;
    else
      v37 = v33 + 1;
    *(_QWORD *)(a1 + 496) = v37;
    v38 = (_QWORD *)(a1 + 544);
    v39 = *(unsigned int *)(a1 + 556);
    if ((_DWORD)v39 == *(_DWORD *)(a1 + 552))
    {
      v55 = (int)a5;
      v56 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, (WTF *)(v39 + 1), (unint64_t)&v62);
      LODWORD(a5) = v55;
      v39 = *(unsigned int *)(a1 + 556);
      *(_BYTE *)(*(_QWORD *)(a1 + 544) + v39) = *v56;
      v36 = v62;
    }
    else
    {
      *(_BYTE *)(*v38 + v39) = v36;
    }
    v21 = (uint64_t *)(a1 + 496);
    *(_DWORD *)(a1 + 556) = v39 + 1;
    v40 = a1 + 160;
    v26 = (char)v36;
    if (v36 == a3)
    {
LABEL_45:
      JSC::MacroAssemblerARM64::branchSub32((uint64_t)v59, v40, 4u, v26, (int)a5, v26);
      v28 = v59[0];
      if (v59[0] == -1)
      {
LABEL_58:
        WebCore::SelectorCompiler::SelectorCodeGenerator::moduloIsZero(a1, a2, v26, this, v27);
        WebCore::RegisterAllocator::deallocateRegister(v21, v26);
        return;
      }
      v29 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v29 == *(_DWORD *)(a2 + 8))
      {
        v30 = (void *)(v29 + 1);
        v31 = v59;
        goto LABEL_48;
      }
      v50 = v59;
      goto LABEL_56;
    }
    if (a3 == 63)
    {
      if (v36 != 31)
      {
        v43 = v36 & 0x1F | 0xD2800000;
        goto LABEL_42;
      }
    }
    else if (a3 != 31 && v36 != 31)
    {
      v41 = v36 & 0xFFE0FFFF | ((a3 & 0x1F) << 16);
      v42 = -1442839584;
LABEL_41:
      v43 = v41 | v42;
LABEL_42:
      v44 = (_DWORD *)(a1 + 360);
      v45 = *(_DWORD *)(a1 + 360);
      if (v45 + 4 > *(_DWORD *)(a1 + 352))
      {
        v57 = (int)a5;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
        v40 = a1 + 160;
        v44 = (_DWORD *)(a1 + 360);
        LODWORD(a5) = v57;
        v45 = *(_DWORD *)(a1 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 216) + v45) = v43;
      *v44 += 4;
      goto LABEL_45;
    }
    v41 = (char)v36 | (32 * a3);
    v42 = -1862270976;
    goto LABEL_41;
  }
  JSC::MacroAssemblerARM64::branch32(a1 + 160, 1u, a3, (int)a5, (uint64_t)v61);
  v10 = v61[0];
  if (v61[0] != -1)
  {
    v11 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(a2 + 8))
    {
      v12 = (void *)(v11 + 1);
      v13 = v61;
      goto LABEL_11;
    }
    v49 = v61;
LABEL_53:
    v15 = v49 + 1;
    goto LABEL_54;
  }
}

void *WebCore::SelectorCompiler::SelectorCodeGenerator::generateNthLastChildParentCheckAndRelationUpdate(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int8x8_t v17;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  int8x8_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  int *v32;
  int v33;
  uint64_t v34;
  _BYTE *v36;
  _BYTE *v37;
  int v38;
  int v39;
  unsigned int v40[3];
  unsigned int v41[3];
  unsigned int v42[3];

  v4 = *(_QWORD *)(a1 + 496);
  v5 = *(_QWORD *)(a1 + 504);
  v6 = *(unsigned int *)(a1 + 520);
  if (v4 <= v5)
    v7 = 0;
  else
    v7 = *(unsigned int *)(a1 + 520);
  if (v7 + v5 == v4)
  {
    __break(0xC471u);
    JUMPOUT(0x195940CECLL);
  }
  if (v4 == v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195940D0CLL);
  }
  v11 = *(_QWORD *)(a1 + 512);
  v12 = *(unsigned __int8 *)(v11 + v4);
  LOBYTE(v42[0]) = *(_BYTE *)(v11 + v4);
  if (v4 == v6 - 1)
    v13 = 0;
  else
    v13 = v4 + 1;
  *(_QWORD *)(a1 + 496) = v13;
  v14 = (_QWORD *)(a1 + 544);
  v15 = *(unsigned int *)(a1 + 556);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 552))
  {
    v36 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 544, (WTF *)(v15 + 1), (unint64_t)v42);
    v15 = *(unsigned int *)(a1 + 556);
    *(_BYTE *)(*(_QWORD *)(a1 + 544) + v15) = *v36;
    v12 = LOBYTE(v42[0]);
  }
  else
  {
    *(_BYTE *)(*v14 + v15) = v12;
  }
  *(_DWORD *)(a1 + 556) = v15 + 1;
  v16 = *(_DWORD *)(a1 + 360);
  if (v16 + 4 > *(_DWORD *)(a1 + 352))
  {
    a4 = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 216));
    v16 = *(_DWORD *)(a1 + 360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 216) + v16) = v12 & 0x1F | 0xF8420000;
  *(_DWORD *)(a1 + 360) += 4;
  JSC::MacroAssemblerARM64::branchTest64(a1 + 160, 0, v12, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v41, *(int8x8_t *)&a4);
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x195940D3CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  JSC::MacroAssemblerARM64::load16(a1 + 160, v12 | 0x1C00000000, *(_BYTE *)(a1 + 464));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)8, a1 + 160, 0, 17, (uint64_t)v40, v17);
  if (*(_DWORD *)(a1 + 1144) != 1)
  {
    if (*(_DWORD *)(a3 + 8) == 2 || *(_BYTE *)(a3 + 12) == 0)
      v19 = 7;
    else
      v19 = 6;
    v21 = *(_QWORD *)(a1 + 496);
    v20 = *(_QWORD *)(a1 + 504);
    v22 = *(unsigned int *)(a1 + 520);
    if (v21 <= v20)
      v23 = 0;
    else
      v23 = *(unsigned int *)(a1 + 520);
    if (v23 + v20 == v21)
    {
      __break(0xC471u);
      JUMPOUT(0x195940D7CLL);
    }
    if (v21 == v20)
    {
      __break(0xC471u);
      JUMPOUT(0x195940D9CLL);
    }
    v24 = *(_BYTE *)(*(_QWORD *)(a1 + 512) + v21);
    LOBYTE(v42[0]) = v24;
    if (v21 == v22 - 1)
      v25 = 0;
    else
      v25 = v21 + 1;
    *(_QWORD *)(a1 + 496) = v25;
    v26 = *(unsigned int *)(a1 + 556);
    if ((_DWORD)v26 == *(_DWORD *)(a1 + 552))
    {
      v37 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, (WTF *)(v26 + 1), (unint64_t)v42);
      v26 = *(unsigned int *)(a1 + 556);
      *(_BYTE *)(*(_QWORD *)(a1 + 544) + v26) = *v37;
      v24 = v42[0];
    }
    else
    {
      *(_BYTE *)(*v14 + v26) = v24;
    }
    *(_DWORD *)(a1 + 556) = v26 + 1;
    v27 = v24;
    WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode((uint64_t)v42, a1, v24);
    WebCore::SelectorCompiler::SelectorCodeGenerator::generateAddStyleRelation(a1, v27, (char)v12, v19, 0);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v42, a1 + 160);
    WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v27);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v40, a1 + 160);
  if (!*(_BYTE *)(a1 + 372))
  {
    __break(0xC471u);
    JUMPOUT(0x195940D5CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 456) + 208) &= ~*(_DWORD *)(a1 + 480);
  JSC::MacroAssemblerARM64::load16(a1 + 160, v12 | 0x1E00000000, *(_BYTE *)(a1 + 464));
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, a1 + 160, 1u, 17, (uint64_t)&v38, v28);
  v29 = v38;
  if (v38 != -1)
  {
    v30 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v30 == *(_DWORD *)(a2 + 8))
    {
      v31 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (void *)(v30 + 1), (unint64_t)&v38);
      v33 = *(_DWORD *)v31;
      v32 = (int *)(v31 + 4);
      v29 = v33;
      LODWORD(v30) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v32 = &v39;
    }
    v34 = *(_QWORD *)a2 + 12 * v30;
    *(_DWORD *)v34 = v29;
    *(_QWORD *)(v34 + 4) = *(_QWORD *)v32;
    ++*(_DWORD *)(a2 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v41, a1 + 160);
  return WebCore::RegisterAllocator::deallocateRegister((uint64_t *)(a1 + 496), v12);
}

uint64_t operationElementIsTarget(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 1568);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if (v2 == a1)
    return 1;
  if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(_QWORD *)(v5 + 528);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || (v8 = *(_QWORD *)(v7 + 24)) == 0 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v10 = *(_QWORD *)(v5 + 2632);
    if (!v10)
      return 0;
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11)
      return 0;
    v12 = *(_QWORD *)(v11 + 528);
    if (!v12)
      return 0;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      return 0;
    v14 = *(_QWORD *)(v13 + 24);
    if (!v14)
      return 0;
    v9 = *(_QWORD *)(v14 + 8);
    if (!v9)
      return 0;
  }
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 112);
  if (result)
    return WebCore::InspectorCSSAgent::forcePseudoState(result, a1, 75);
  return result;
}

void WebCore::SelectorCompiler::SelectorFragmentList::~SelectorFragmentList(WebCore::SelectorCompiler::SelectorFragment **this, void *a2)
{
  uint64_t v3;
  WebCore::SelectorCompiler::SelectorFragment *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((unsigned int *)this + 3);
  v4 = *this;
  if ((_DWORD)v3)
  {
    v5 = 496 * v3;
    do
    {
      WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v4, a2);
      v4 = (WebCore::SelectorCompiler::SelectorFragment *)(v6 + 496);
      v5 -= 496;
    }
    while (v5);
    v4 = *this;
  }
  if (this + 2 != (WebCore::SelectorCompiler::SelectorFragment **)v4 && v4 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

WTF *WTF::VectorTypeOperations<WebCore::SelectorCompiler::BacktrackingLevel>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v7;

  if (result != a2)
  {
    v3 = (WTF *)((char *)result + 88);
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 - 2);
      if (v3 != v4 && v4 != 0)
      {
        *((_QWORD *)v3 - 2) = 0;
        *((_DWORD *)v3 - 2) = 0;
        WTF::fastFree(v4, a2);
      }
      result = (WTF *)*((_QWORD *)v3 - 8);
      if ((WTF *)((char *)v3 - 48) != result && result != 0)
      {
        *((_QWORD *)v3 - 8) = 0;
        *((_DWORD *)v3 - 14) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v7 = (WTF *)((char *)v3 + 24);
      v3 = (WTF *)((char *)v3 + 112);
    }
    while (v7 != a2);
  }
  return result;
}

void WebCore::SelectorCompiler::SelectorList::~SelectorList(WebCore::SelectorCompiler::SelectorList *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WebCore::SelectorCompiler::SelectorFragment *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_DWORD *)this + 3);
  v4 = *(WTF **)this;
  if (!v3)
  {
    if (!v4)
      return;
LABEL_16:
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
    return;
  }
  v5 = (WTF *)((char *)v4 + 2016 * v3);
  do
  {
    v6 = *((unsigned int *)v4 + 3);
    v7 = *(WebCore::SelectorCompiler::SelectorFragment **)v4;
    if ((_DWORD)v6)
    {
      v8 = 496 * v6;
      do
      {
        WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v7, a2);
        v7 = (WebCore::SelectorCompiler::SelectorFragment *)(v9 + 496);
        v8 -= 496;
      }
      while (v8);
      v7 = *(WebCore::SelectorCompiler::SelectorFragment **)v4;
    }
    if ((WTF *)((char *)v4 + 16) != v7 && v7 != 0)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      WTF::fastFree(v7, a2);
    }
    v4 = (WTF *)((char *)v4 + 2016);
  }
  while (v4 != v5);
  v4 = *(WTF **)this;
  if (*(_QWORD *)this)
    goto LABEL_16;
}

void WebCore::SelectorCompiler::NthChildOfSelectorInfo::~NthChildOfSelectorInfo(WebCore::SelectorCompiler::NthChildOfSelectorInfo *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WebCore::SelectorCompiler::SelectorFragment *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_DWORD *)this + 5);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (!v3)
  {
    if (!v4)
      return;
LABEL_16:
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
    return;
  }
  v5 = (WTF *)((char *)v4 + 2016 * v3);
  do
  {
    v6 = *((unsigned int *)v4 + 3);
    v7 = *(WebCore::SelectorCompiler::SelectorFragment **)v4;
    if ((_DWORD)v6)
    {
      v8 = 496 * v6;
      do
      {
        WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v7, a2);
        v7 = (WebCore::SelectorCompiler::SelectorFragment *)(v9 + 496);
        v8 -= 496;
      }
      while (v8);
      v7 = *(WebCore::SelectorCompiler::SelectorFragment **)v4;
    }
    if ((WTF *)((char *)v4 + 16) != v7 && v7 != 0)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      WTF::fastFree(v7, a2);
    }
    v4 = (WTF *)((char *)v4 + 2016);
  }
  while (v4 != v5);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
    goto LABEL_16;
}

JSC *JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::~AssemblerDataImpl(JSC *a1)
{
  pthread_key_t *v2;
  void *v3;
  _QWORD *v4;
  WTF *v5;
  _DWORD *v6;
  unsigned int v7;
  BOOL v8;

  v2 = (pthread_key_t *)JSC::threadSpecificAssemblerData(a1);
  v4 = pthread_getspecific(*v2);
  if (!v4)
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data(v4, v2);
  }
  v6 = (_DWORD *)((char *)a1 + 8);
  v5 = *(WTF **)a1;
  if (*(JSC **)a1 != (JSC *)((char *)a1 + 8))
  {
    v7 = *((_DWORD *)a1 + 34);
    if (*((_DWORD *)v4 + 34) >= v7)
    {
      if (v5)
      {
        WTF::fastFree(v5, v3);
        *((_DWORD *)a1 + 34) = 128;
        *(_QWORD *)a1 = v6;
      }
    }
    else
    {
      if (*v4)
        v8 = *v4 == (_QWORD)(v4 + 1);
      else
        v8 = 1;
      if (!v8)
      {
        WTF::fastFree((WTF *)*v4, v3);
        v5 = *(WTF **)a1;
        v7 = *((_DWORD *)a1 + 34);
      }
      *v4 = v5;
      *((_DWORD *)v4 + 34) = v7;
      *(_QWORD *)a1 = v6;
      *((_DWORD *)a1 + 34) = 128;
    }
  }
  return a1;
}

_QWORD *WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data(_QWORD *a1, pthread_key_t *a2)
{
  JSC *v3;
  pthread_key_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  WTF *v9;

  a1[18] = a2;
  v3 = (JSC *)pthread_setspecific(*a2, a1);
  *a1 = a1 + 1;
  *((_DWORD *)a1 + 34) = 128;
  v4 = (pthread_key_t *)JSC::threadSpecificAssemblerData(v3);
  v6 = (uint64_t)pthread_getspecific(*v4);
  if (!v6)
  {
    v6 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data(v6, v4);
  }
  v7 = *(_QWORD *)v6;
  if (*(_QWORD *)v6 != v6 + 8)
  {
    v8 = *(_DWORD *)(v6 + 136);
    if (*((_DWORD *)a1 + 34) < v8)
    {
      v9 = (WTF *)*a1;
      if (*a1 && v9 != (WTF *)(a1 + 1))
      {
        WTF::fastFree(v9, v5);
        v7 = *(_QWORD *)v6;
        v8 = *(_DWORD *)(v6 + 136);
      }
      *a1 = v7;
      *((_DWORD *)a1 + 34) = v8;
      *(_QWORD *)v6 = v6 + 8;
      *(_DWORD *)(v6 + 136) = 128;
    }
  }
  return a1;
}

WebCore::SelectorCompiler::AttributeMatchingInfo *WebCore::SelectorCompiler::AttributeMatchingInfo::AttributeMatchingInfo(WebCore::SelectorCompiler::AttributeMatchingInfo *this, const WebCore::CSSSelector *a2)
{
  int v3;

  *(_QWORD *)this = a2;
  if ((*(_DWORD *)a2 & 0x1F0) == 0x50)
  {
    v3 = 0;
  }
  else if ((*(_DWORD *)a2 & 0x800000) != 0)
  {
    v3 = 2;
  }
  else
  {
    v3 = WebCore::HTMLDocument::isCaseSensitiveAttribute((WebCore::HTMLDocument *)(*((_QWORD *)a2 + 1) + 32), a2) ^ 1;
  }
  *((_DWORD *)this + 2) = v3;
  return this;
}

unint64_t WTF::Vector<WebCore::SelectorCompiler::SelectorFragment,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 496 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::SelectorCompiler::SelectorFragment,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::SelectorCompiler::SelectorFragment,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<WebCore::SelectorCompiler::SelectorFragment,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::SelectorCompiler::SelectorFragment *v8;
  void *v9;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(WTF **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    if (a2 < 5)
    {
      v6 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (a2 >= 0x842109)
      {
        __break(0xC471u);
        return;
      }
      v5 = 496 * a2;
      v6 = WTF::fastMalloc((WTF *)(496 * a2));
      *(_DWORD *)(a1 + 8) = v5 / 0x1F0;
      *(_QWORD *)a1 = v6;
    }
    if ((_DWORD)v4)
    {
      v7 = 496 * v4;
      v8 = v3;
      do
      {
        WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v6, (uint64_t)v8);
        WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v8, v9);
        v6 += 496;
        v8 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)v8 + 496);
        v7 -= 496;
      }
      while (v7);
    }
    if ((WTF *)(a1 + 16) != v3 && v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, (void *)a2);
    }
  }
}

uint64_t WTF::Vector<WTF::AtomStringImpl const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::AtomStringImpl*>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = *a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 9)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 8;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

void WebCore::SelectorCompiler::addNthChildType(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v14;
  int **v15;
  int v17;
  int *v18;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  void *v25;
  unsigned int v26;
  WebCore::SelectorCompiler::SelectorFragment *v27[2];
  _QWORD v28[249];
  char v29;
  _DWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _BYTE v35[9];

  v35[0] = a4;
  v8 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(v8 + 24);
  v9 = *(_DWORD *)(v8 + 28);
  if (v10 > 0 || v9 >= 1)
  {
    if ((*(_BYTE *)(a1 + 2) & 0x10) != 0 && (v15 = *(int ***)(v8 + 56)) != 0)
    {
      v31 = 0;
      v32 = 0;
      v33 = -1;
      v34 = 1;
      v30[0] = v10;
      v30[1] = v9;
      v17 = (_DWORD)a2 != 1;
      v18 = *v15;
      if (*v15)
      {
        v21 = 0;
        do
        {
          if (!v21)
          {
            bzero(v28, 0x7D0uLL);
            v27[0] = (WebCore::SelectorCompiler::SelectorFragment *)v28;
            v27[1] = (WebCore::SelectorCompiler::SelectorFragment *)4;
            v28[248] = -1;
            v29 = 1;
            if (HIDWORD(v32) == (_DWORD)v32)
            {
              WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::SelectorFragmentList>((uint64_t)&v31, (unint64_t)v27);
            }
            else
            {
              WebCore::SelectorCompiler::SelectorFragmentList::SelectorFragmentList(v31 + 2016 * HIDWORD(v32), (uint64_t)v27);
              ++HIDWORD(v32);
            }
            WebCore::SelectorCompiler::SelectorFragmentList::~SelectorFragmentList(v27, v25);
            if (!HIDWORD(v32))
            {
              __break(0xC471u);
              return;
            }
            v21 = v31 + 2016 * HIDWORD(v32) - 2016;
          }
          LODWORD(v27[0]) = 0;
          v22 = WebCore::SelectorCompiler::constructFragments(v18, a2, v21, 1, a3, a5, v27, 1);
          if (v22 != 2)
          {
            if (v22 == 3)
              goto LABEL_36;
            v21 = 0;
            if (v17 <= v22)
              v17 = v22;
          }
          do
          {
            v24 = *v18;
            v18 += 4;
            v23 = v24;
          }
          while ((v24 & 0x80000) == 0);
        }
        while ((v23 & 0x20000) == 0);
        if (v21)
          WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast((unsigned int *)&v31, a2);
      }
      if (HIDWORD(v32))
      {
        v26 = *(_DWORD *)(a7 + 12);
        if (v26 == *(_DWORD *)(a7 + 8))
        {
          WTF::Vector<WebCore::SelectorCompiler::NthChildOfSelectorInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::NthChildOfSelectorInfo&>(a7, (unint64_t)v30);
        }
        else
        {
          WebCore::SelectorCompiler::NthChildOfSelectorInfo::NthChildOfSelectorInfo((WebCore::SelectorCompiler::NthChildOfSelectorInfo *)(*(_QWORD *)a7 + 40 * v26), (const WebCore::SelectorCompiler::NthChildOfSelectorInfo *)v30);
          ++*(_DWORD *)(a7 + 12);
        }
      }
LABEL_36:
      WebCore::SelectorCompiler::NthChildOfSelectorInfo::~NthChildOfSelectorInfo((WebCore::SelectorCompiler::NthChildOfSelectorInfo *)v30, a2);
    }
    else if (v10 <= 0 && v9 == 1)
    {
      WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::add(a8, v35, (uint64_t)v27);
    }
    else
    {
      v27[0] = (WebCore::SelectorCompiler::SelectorFragment *)__PAIR64__(v9, v10);
      v14 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v14 == *(_DWORD *)(a6 + 8))
      {
        WTF::Vector<std::pair<int,int>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,int>>(a6, (unint64_t)v27);
      }
      else
      {
        *(WebCore::SelectorCompiler::SelectorFragment **)(*(_QWORD *)a6 + 8 * v14) = v27[0];
        ++*(_DWORD *)(a6 + 12);
      }
    }
  }
}

unsigned int *WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(unsigned int *result, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = v2 - 1;
    v5 = *(_QWORD *)result + 2016 * (v2 - 1);
    v6 = *(unsigned int *)(v5 + 12);
    result = *(unsigned int **)v5;
    if ((_DWORD)v6)
    {
      v7 = 496 * v6;
      do
      {
        WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment((WebCore::SelectorCompiler::SelectorFragment *)result, a2);
        result = (unsigned int *)(v8 + 496);
        v7 -= 496;
      }
      while (v7);
      result = *(unsigned int **)v5;
    }
    if ((unsigned int *)(v5 + 16) != result && result != 0)
    {
      *(_QWORD *)v5 = 0;
      *(_DWORD *)(v5 + 8) = 0;
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
    v3[3] = v4;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

char *WTF::Vector<WTF::CodePtr<(WTF::PtrTag)64323,(WTF::FunctionAttributes)0>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CodePtr<(WTF::PtrTag)64323,(WTF::FunctionAttributes)0>>(uint64_t a1, unint64_t a2)
{
  char *result;

  result = WTF::Vector<WTF::CodePtr<(WTF::PtrTag)64323,(WTF::FunctionAttributes)0>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *(_QWORD *)result;
  return result;
}

char *WTF::Vector<WTF::CodePtr<(WTF::PtrTag)64323,(WTF::FunctionAttributes)0>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v10 < 5)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_34;
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v22 = 0;
        do
        {
          *(_QWORD *)(v11 + v22) = *(_QWORD *)((char *)v5 + v22);
          v22 += 8;
        }
        while (8 * v6 != v22);
        v21 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x195941C30);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 5)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_43;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 8 * v16;
    v19 = v5;
    do
    {
      v20 = *(_QWORD *)v19;
      v19 = (WTF *)((char *)v19 + 8);
      *v17++ = v20;
      v18 -= 8;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

uint64_t *WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::add@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  v13 = v8;
  v14 = v12 & v8;
  v15 = (uint64_t *)(v6 + v14);
  v16 = *(unsigned __int8 *)(v6 + v14);
  if (v16 != 255)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v16 == v9)
      {
        if ((v7 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v6 - 4);
        v24 = 0;
        v23 = v6 + v28;
        goto LABEL_11;
      }
      if (v16 == 254)
        v25 = v15;
      v14 = ((_DWORD)v14 + v26) & v13;
      v15 = (uint64_t *)(v6 + v14);
      v16 = *(unsigned __int8 *)(v6 + v14);
      ++v26;
    }
    while (v16 != 255);
    if (v25)
    {
      *(_BYTE *)v25 = -1;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      v15 = v25;
    }
  }
  *(_BYTE *)v15 = v9;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_10;
    goto LABEL_24;
  }
  if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v27 = 8;
LABEL_27:
      result = (uint64_t *)WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::rehash(v4, v27, (uint64_t)v15);
      v15 = result;
      v19 = *v4;
      if (*v4)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_10;
    }
LABEL_24:
    v27 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    goto LABEL_27;
  }
LABEL_10:
  v23 = v19 + v22;
  v24 = 1;
LABEL_11:
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 16) = v24;
  return result;
}

{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unsigned int v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  v13 = v8;
  v14 = v12 & v8;
  v15 = (uint64_t *)(v6 + v14);
  v16 = *(unsigned __int8 *)(v6 + v14);
  if (v16 != 255)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v9)
      {
        if ((v7 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v25 = v6 + v27;
        goto LABEL_21;
      }
      if (v16 == 254)
        v17 = v15;
      v14 = ((_DWORD)v14 + v18) & v13;
      v15 = (uint64_t *)(v6 + v14);
      v16 = *(unsigned __int8 *)(v6 + v14);
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *(_BYTE *)v17 = -1;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      v15 = v17;
    }
  }
  *(_BYTE *)v15 = v9;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_17;
    goto LABEL_28;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v28 = 8;
LABEL_31:
      result = (uint64_t *)WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::rehash(v4, v28, (uint64_t)v15);
      v15 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_17;
    }
LABEL_28:
    v28 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_31;
  }
LABEL_17:
  v25 = v21 + v24;
  v26 = 1;
LABEL_21:
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

_BYTE *WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(unsigned __int8 *)(v6 + v13);
      if (v15 <= 0xFD)
      {
        v16 = *a1;
        v17 = *a1 ? *(_DWORD *)(v16 - 8) : 0;
        v18 = 0;
        v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(unsigned __int8 *)(v16 + v21) != 255);
        v22 = (_BYTE *)(v16 + v21);
        *v22 = v15;
        if (v6 + v13 == a3)
          v14 = v22;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::IntHash<WebCore::CSSSelectorPseudoClass>>,WebCore::CSSSelectorPseudoClass>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + (v6 & v3);
  }
  while (*(unsigned __int8 *)(v2 + v7) != 255);
  return v2 + v7;
}

WebCore::SelectorCompiler::NthChildOfSelectorInfo *WebCore::SelectorCompiler::NthChildOfSelectorInfo::NthChildOfSelectorInfo(WebCore::SelectorCompiler::NthChildOfSelectorInfo *this, const WebCore::SelectorCompiler::NthChildOfSelectorInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SelectorCompiler::SelectorFragment *v14;
  uint64_t v15;
  const WebCore::SelectorCompiler::SelectorFragment *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = *((unsigned int *)a2 + 5);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 5) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >= 0x208209)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x19594230CLL);
    }
    v7 = 2016 * v4;
    v8 = WTF::fastMalloc((WTF *)(2016 * v4));
    *((_DWORD *)this + 4) = v7 / 0x7E0;
    *((_QWORD *)this + 1) = v8;
    v9 = *((_DWORD *)a2 + 5);
    if (v9)
    {
      v10 = v8;
      v11 = *((_QWORD *)a2 + 1);
      v12 = v11 + 2016 * v9;
      do
      {
        v13 = *(unsigned int *)(v11 + 12);
        v14 = (WebCore::SelectorCompiler::SelectorFragment *)(v10 + 16);
        *(_QWORD *)v10 = v10 + 16;
        *(_DWORD *)(v10 + 8) = 4;
        *(_DWORD *)(v10 + 12) = v13;
        if (v13 >= 5)
        {
          if (v13 >= 0x842109)
            goto LABEL_14;
          v19 = 496 * v13;
          v14 = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastMalloc((WTF *)(496 * v13));
          *(_DWORD *)(v10 + 8) = v19 / 0x1F0;
          *(_QWORD *)v10 = v14;
        }
        v15 = *(unsigned int *)(v11 + 12);
        if ((_DWORD)v15)
        {
          v16 = *(const WebCore::SelectorCompiler::SelectorFragment **)v11;
          v17 = 496 * v15;
          do
          {
            v14 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v14, v16)+ 496);
            v16 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v16 + 496);
            v17 -= 496;
          }
          while (v17);
        }
        v18 = *(_QWORD *)(v11 + 2000);
        *(_QWORD *)(v10 + 2005) = *(_QWORD *)(v11 + 2005);
        *(_QWORD *)(v10 + 2000) = v18;
        v10 += 2016;
        v11 += 2016;
      }
      while (v11 != v12);
    }
  }
  v5 = *((_QWORD *)a2 + 3);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *((_QWORD *)this + 3) = v5;
  return this;
}

unsigned int *WTF::Vector<WebCore::SelectorCompiler::NthChildOfSelectorInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::NthChildOfSelectorInfo&>(uint64_t a1, unint64_t a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::SelectorCompiler::SelectorFragment *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  result = (unsigned int *)WTF::Vector<WebCore::SelectorCompiler::NthChildOfSelectorInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = result;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = (_QWORD *)(*(_QWORD *)a1 + 40 * v5);
  *v7 = *(_QWORD *)result;
  v8 = result[5];
  v7[1] = 0;
  v7[2] = 0;
  v9 = (unsigned int **)(v7 + 1);
  *((_DWORD *)v9 + 3) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >= 0x208209)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x1959424C8);
    }
    v12 = 2016 * v8;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(2016 * v8));
    *(_DWORD *)(v6 + 40 * v5 + 16) = v12 / 0x7E0;
    *v9 = result;
    v13 = v4[5];
    if (v13)
    {
      v14 = result;
      v15 = *((_QWORD *)v4 + 1);
      v16 = v15 + 2016 * v13;
      do
      {
        v17 = *(unsigned int *)(v15 + 12);
        result = v14 + 4;
        *(_QWORD *)v14 = v14 + 4;
        v14[2] = 4;
        v14[3] = v17;
        if (v17 >= 5)
        {
          if (v17 >= 0x842109)
            goto LABEL_14;
          v22 = 496 * v17;
          result = (unsigned int *)WTF::fastMalloc((WTF *)(496 * v17));
          v14[2] = v22 / 0x1F0;
          *(_QWORD *)v14 = result;
        }
        v18 = *(unsigned int *)(v15 + 12);
        if ((_DWORD)v18)
        {
          v19 = *(const WebCore::SelectorCompiler::SelectorFragment **)v15;
          v20 = 496 * v18;
          do
          {
            result = (unsigned int *)((char *)WebCore::SelectorCompiler::SelectorFragment::SelectorFragment((WebCore::SelectorCompiler::SelectorFragment *)result, v19)+ 496);
            v19 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v19 + 496);
            v20 -= 496;
          }
          while (v20);
        }
        v21 = *(_QWORD *)(v15 + 2000);
        *(_QWORD *)((char *)v14 + 2005) = *(_QWORD *)(v15 + 2005);
        *((_QWORD *)v14 + 250) = v21;
        v14 += 504;
        v15 += 2016;
      }
      while (v15 != v16);
    }
  }
  v10 = v6 + 40 * v5;
  v11 = *((_QWORD *)v4 + 3);
  *(_BYTE *)(v10 + 32) = *((_BYTE *)v4 + 32);
  *(_QWORD *)(v10 + 24) = v11;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WebCore::SelectorCompiler::SelectorList *WebCore::SelectorCompiler::SelectorList::SelectorList(WebCore::SelectorCompiler::SelectorList *this, const WebCore::SelectorCompiler::SelectorList *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SelectorCompiler::SelectorFragment *v14;
  uint64_t v15;
  const WebCore::SelectorCompiler::SelectorFragment *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >= 0x208209)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x195942644);
    }
    v7 = 2016 * v4;
    v8 = WTF::fastMalloc((WTF *)(2016 * v4));
    *((_DWORD *)this + 2) = v7 / 0x7E0;
    *(_QWORD *)this = v8;
    v9 = *((_DWORD *)a2 + 3);
    if (v9)
    {
      v10 = v8;
      v11 = *(_QWORD *)a2;
      v12 = *(_QWORD *)a2 + 2016 * v9;
      do
      {
        v13 = *(unsigned int *)(v11 + 12);
        v14 = (WebCore::SelectorCompiler::SelectorFragment *)(v10 + 16);
        *(_QWORD *)v10 = v10 + 16;
        *(_DWORD *)(v10 + 8) = 4;
        *(_DWORD *)(v10 + 12) = v13;
        if (v13 >= 5)
        {
          if (v13 >= 0x842109)
            goto LABEL_14;
          v19 = 496 * v13;
          v14 = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastMalloc((WTF *)(496 * v13));
          *(_DWORD *)(v10 + 8) = v19 / 0x1F0;
          *(_QWORD *)v10 = v14;
        }
        v15 = *(unsigned int *)(v11 + 12);
        if ((_DWORD)v15)
        {
          v16 = *(const WebCore::SelectorCompiler::SelectorFragment **)v11;
          v17 = 496 * v15;
          do
          {
            v14 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v14, v16)+ 496);
            v16 = (const WebCore::SelectorCompiler::SelectorFragment *)((char *)v16 + 496);
            v17 -= 496;
          }
          while (v17);
        }
        v18 = *(_QWORD *)(v11 + 2000);
        *(_QWORD *)(v10 + 2005) = *(_QWORD *)(v11 + 2005);
        *(_QWORD *)(v10 + 2000) = v18;
        v10 += 2016;
        v11 += 2016;
      }
      while (v11 != v12);
    }
  }
  v5 = *((_QWORD *)a2 + 2);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_QWORD *)this + 2) = v5;
  return this;
}

uint64_t *WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  char v17;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v8 = WTF::fastMalloc((WTF *)(v7 + 16));
      v9 = v8;
      v10 = v8 + 16;
      if (v7)
        memset((void *)(v8 + 16), 255, v7);
      *a1 = v10;
      *(_DWORD *)(v9 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v11 = WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::begin(a2);
      v12 = v11;
      v14 = v13;
      v15 = *a2 ? &(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if (v15 != v11)
      {
        do
        {
          v16 = (_BYTE *)WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::IntHash<WebCore::CSSSelectorPseudoClass>>,WebCore::CSSSelectorPseudoClass>(a1, v12);
          v17 = *v12++;
          *v16 = v17;
          while (v12 != v14)
          {
            if (*v12 < 0xFEu)
              goto LABEL_14;
            ++v12;
          }
          v12 = v14;
LABEL_14:
          ;
        }
        while (v12 != v15);
      }
    }
  }
  return a1;
}

unsigned __int8 *WTF::HashTable<WebCore::CSSSelectorPseudoClass,WebCore::CSSSelectorPseudoClass,WTF::IdentityExtractor,WTF::IntHash<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>,WTF::StrongEnumHashTraits<WebCore::CSSSelectorPseudoClass>>::begin(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  uint64_t v2;
  unsigned __int8 *v3;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    while (*result >= 0xFEu)
    {
      ++result;
      if (!--v2)
        return v3;
    }
  }
  return result;
}

char *WTF::Vector<WebCore::SelectorCompiler::NthChildOfSelectorInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WebCore::SelectorCompiler::SelectorFragment *v5;
  WebCore::SelectorCompiler::SelectorFragment *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WebCore::SelectorCompiler::SelectorFragment *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::SelectorCompiler::SelectorFragment *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WebCore::SelectorCompiler::SelectorFragment **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12)),
        (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x195942970);
      }
      v17 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
      v18 = 40 * v16;
      v19 = WTF::fastMalloc((WTF *)(40 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::SelectorCompiler::NthChildOfSelectorInfo>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WebCore::SelectorCompiler::SelectorFragment **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WebCore::SelectorCompiler::SelectorFragment **)a1;
    }
    else
    {
      if (v9 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x195942978);
      }
      v10 = 40 * v9;
      v11 = WTF::fastMalloc((WTF *)(40 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::SelectorCompiler::NthChildOfSelectorInfo>::move(v5, v6, v11);
      v13 = *(WebCore::SelectorCompiler::SelectorFragment **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WebCore::SelectorCompiler::SelectorFragment **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WebCore::SelectorCompiler::SelectorFragment *WTF::VectorMover<false,WebCore::SelectorCompiler::NthChildOfSelectorInfo>::move(WebCore::SelectorCompiler::SelectorFragment *result, WebCore::SelectorCompiler::SelectorFragment *a2, uint64_t a3)
{
  WebCore::SelectorCompiler::SelectorFragment *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v5 = result;
    while (1)
    {
      v6 = *(_QWORD *)v5;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 4);
      *((_DWORD *)v5 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 5);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v7;
      v8 = *((_QWORD *)v5 + 3);
      *(_BYTE *)(a3 + 32) = *((_BYTE *)v5 + 32);
      *(_QWORD *)(a3 + 24) = v8;
      v9 = *((_DWORD *)v5 + 5);
      v10 = (WTF *)*((_QWORD *)v5 + 1);
      if (v9)
        break;
      if (v10)
        goto LABEL_19;
LABEL_5:
      a3 += 40;
      v5 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)v5 + 40);
      if (v5 == a2)
        return result;
    }
    v11 = (WTF *)((char *)v10 + 2016 * v9);
    do
    {
      v12 = *((unsigned int *)v10 + 3);
      result = *(WebCore::SelectorCompiler::SelectorFragment **)v10;
      if ((_DWORD)v12)
      {
        v13 = 496 * v12;
        do
        {
          WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(result, a2);
          result = (WebCore::SelectorCompiler::SelectorFragment *)(v14 + 496);
          v13 -= 496;
        }
        while (v13);
        result = *(WebCore::SelectorCompiler::SelectorFragment **)v10;
      }
      if ((WTF *)((char *)v10 + 16) != result && result != 0)
      {
        *(_QWORD *)v10 = 0;
        *((_DWORD *)v10 + 2) = 0;
        result = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastFree(result, a2);
      }
      v10 = (WTF *)((char *)v10 + 2016);
    }
    while (v10 != v11);
    v10 = (WTF *)*((_QWORD *)v5 + 1);
    if (!v10)
      goto LABEL_5;
LABEL_19:
    *((_QWORD *)v5 + 1) = 0;
    *((_DWORD *)v5 + 4) = 0;
    result = (WebCore::SelectorCompiler::SelectorFragment *)WTF::fastFree(v10, a2);
    goto LABEL_5;
  }
  return result;
}

_QWORD *WTF::Vector<std::pair<int,int>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<int,int>>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<std::pair<int,int>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<std::pair<int,int>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v10 < 3)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_30;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 8 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195942C78);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 3)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t WebCore::SelectorCompiler::SelectorFragmentList::SelectorFragmentList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::SelectorCompiler::SelectorFragment *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  int v12;

  v4 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 4;
  v5 = *(WebCore::SelectorCompiler::SelectorFragment **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = 496 * v6;
      do
      {
        WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v4, (uint64_t)v5);
        WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v5, v8);
        v4 += 496;
        v5 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)v5 + 496);
        v7 -= 496;
      }
      while (v7);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)a1 = v5;
    v12 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 4;
    *(_DWORD *)(a1 + 8) = v12;
  }
  v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = *(_QWORD *)(a2 + 2000);
  *(_QWORD *)(a1 + 2005) = *(_QWORD *)(a2 + 2005);
  *(_QWORD *)(a1 + 2000) = v10;
  return a1;
}

void WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::SelectorFragmentList>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SelectorCompiler::SelectorFragment *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;

  v3 = WTF::Vector<WebCore::SelectorCompiler::SelectorFragmentList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = v3;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 2016 * v5;
  v8 = v7 + 16;
  *(_QWORD *)v7 = v7 + 16;
  *(_QWORD *)(v7 + 8) = 4;
  v9 = *(WebCore::SelectorCompiler::SelectorFragment **)v3;
  if (*(_QWORD *)v3 == v3 + 16)
  {
    v10 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v10)
    {
      v14 = 496 * v10;
      do
      {
        WebCore::SelectorCompiler::SelectorFragment::SelectorFragment(v8, (uint64_t)v9);
        WebCore::SelectorCompiler::SelectorFragment::~SelectorFragment(v9, v15);
        v8 += 496;
        v9 = (WebCore::SelectorCompiler::SelectorFragment *)((char *)v9 + 496);
        v14 -= 496;
      }
      while (v14);
    }
  }
  else
  {
    *(_QWORD *)v3 = v3 + 16;
    *(_QWORD *)v7 = v9;
    v16 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = 4;
    *(_DWORD *)(v7 + 8) = v16;
  }
  v11 = *(_DWORD *)(v4 + 12);
  *(_DWORD *)(v4 + 12) = 0;
  *(_DWORD *)(v7 + 12) = v11;
  v12 = (_QWORD *)(v6 + 2016 * v5 + 2000);
  v13 = *(_QWORD *)(v4 + 2000);
  *(_QWORD *)((char *)v12 + 5) = *(_QWORD *)(v4 + 2005);
  *v12 = v13;
  ++*(_DWORD *)(a1 + 12);
}

__n128 WTF::Vector<WebCore::SelectorCompiler::AttributeMatchingInfo,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::AttributeMatchingInfo>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::SelectorCompiler::AttributeMatchingInfo,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<WebCore::SelectorCompiler::AttributeMatchingInfo,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  __int128 v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 16 * v6 <= a3))
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= (unint64_t)a2)
      v15 = (unint64_t)a2;
    else
      v15 = v14;
    if (v15 > v12)
    {
      v16 = *(unsigned int *)(a1 + 12);
      if (v15 < 5)
      {
        v17 = (_OWORD *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
      }
      else
      {
        if (v15 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x195943054);
        }
        v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v17;
      }
      if ((_DWORD)v16)
      {
        v20 = 16 * v16;
        v21 = v5;
        do
        {
          v22 = *(_OWORD *)v21;
          v21 = (WTF *)((char *)v21 + 16);
          *v17++ = v22;
          v20 -= 16;
        }
        while (v20);
      }
      if ((WTF *)(a1 + 16) != v5 && v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, a2);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= (unint64_t)a2)
      v10 = (unint64_t)a2;
    else
      v10 = v9;
    if (v10 > v7)
    {
      if (v10 < 5)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
      }
      else
      {
        if (v10 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x19594305CLL);
        }
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
      }
      v18 = 0;
      do
      {
        *(_OWORD *)(v11 + v18) = *(_OWORD *)((char *)v5 + v18);
        v18 += 16;
      }
      while (16 * v6 != v18);
      if ((WTF *)(a1 + 16) != v5 && v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, a2);
      }
    }
    return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return v3;
}

uint64_t WebCore::SelectorCompiler::computeBacktrackingStartOffsetInChain(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v23;
  uint64_t v24;

  if (a2 <= a3)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x1959431A0);
  }
  if (a3)
  {
    v3 = a3;
    v4 = a2 - 1;
    do
    {
      v5 = 0;
      v6 = v3;
      if (v3-- > 1)
        v8 = v6;
      else
        v8 = 1;
      v9 = -v8;
      v10 = a2 - v6;
      while (1)
      {
        if (v4 + v5 >= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x1959431A8);
        }
        if ((int)v3 + (int)v5 >= a2)
          goto LABEL_38;
        v11 = (unsigned __int8 *)(a1 + 16 * (v4 + v5));
        v12 = *(_QWORD *)(a1 + 16 * (v3 + v5));
        if (*(_QWORD *)v11 && v12 != 0)
        {
          v14 = *(_QWORD **)(*(_QWORD *)v11 + 8);
          if (v14 != (_QWORD *)WebCore::anyName)
          {
            v15 = *(_QWORD **)(v12 + 8);
            if (v15 != (_QWORD *)WebCore::anyName)
            {
              v16 = v11[8];
              v17 = v14[3];
              if (v17 == WebCore::starAtomData || (v18 = v15[3], v18 == WebCore::starAtomData))
              {
                v23 = v14[4];
                if (v23 != WebCore::starAtomData)
                {
                  v24 = v15[4];
                  if (v24 != WebCore::starAtomData && (v16 != 0) == (v23 == v24))
                    break;
                }
                goto LABEL_20;
              }
              v19 = v14[5];
              if (v19 != v15[5])
              {
                if (!v16)
                  break;
                goto LABEL_20;
              }
              v20 = v17 == v19 && v18 == v19;
              if (v20 && v16 != 0)
                break;
            }
          }
        }
LABEL_20:
        if (v9 == --v5)
          return v10;
      }
    }
    while ((_DWORD)v3);
  }
  return a2;
}

__n128 WTF::Vector<WebCore::SelectorCompiler::TagNamePattern,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SelectorCompiler::TagNamePattern&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::SelectorCompiler::TagNamePattern,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<WebCore::SelectorCompiler::TagNamePattern,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  uint64_t v21;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      if (v10 < 0x21)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_33;
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_33:
        v21 = 0;
        do
        {
          *(_OWORD *)(v11 + v21) = *(_OWORD *)((char *)v5 + v21);
          v21 += 16;
        }
        while (16 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x1959433B0);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x21)
    {
      v17 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_42;
      v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 16 * v16;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      v19 = (WTF *)((char *)v19 + 16);
      *v17++ = v20;
      v18 -= 16;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

JSC::ExecutableAllocator *JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)0,(JSC::MachineCodeCopyMode)1>(JSC::ExecutableAllocator *result, _BYTE *a2, _BYTE *a3)
{
  JSC *v3;
  uint64_t v4;
  JSC::ExecutableAllocator *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v3 = result;
  v4 = a3 - a2;
  if ((unint64_t)(((a3 - a2) >> 2) + 0x2000000) >> 26)
  {
    v7 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(result);
    result = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v7, a2, a3);
    v4 = result - (JSC::ExecutableAllocator *)a2;
    if ((unint64_t)(((result - (JSC::ExecutableAllocator *)a2) >> 2) + 0x2000000) >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x195943550);
    }
  }
  v8 = (v4 >> 2) & 0x3FFFFFF | 0x14000000;
  v11 = v8;
  if ((JSC *)(((unint64_t)v3 + 3) & 0xFFFFFFFFFFFFFFFCLL) != v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1959434DCLL);
  }
  v9 = MEMORY[0x1E0CC10F8];
  if (*(_QWORD *)(MEMORY[0x1E0CC10F8] + 504) > (unint64_t)v3
    || *(_QWORD *)(MEMORY[0x1E0CC10F8] + 512) <= (unint64_t)v3)
  {
    goto LABEL_21;
  }
  if ((unint64_t)&v11 - *(_QWORD *)(MEMORY[0x1E0CC10F8] + 40) < *(_QWORD *)(MEMORY[0x1E0CC10F8] + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x1959434FCLL);
  }
  result = (JSC::ExecutableAllocator *)JSC::endOfFixedExecutableMemoryPoolImpl(result);
  if ((JSC *)((char *)v3 + 4) > result)
  {
    __break(0xC471u);
    JUMPOUT(0x19594351CLL);
  }
  if (*(_QWORD *)(v9 + 1864))
    result = (JSC::ExecutableAllocator *)JSC::dumpJITMemory(v3, &v11, (const void *)4);
  if (*(_BYTE *)(v9 + 484))
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)v3 = v11;
    return (JSC::ExecutableAllocator *)be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
  }
  if (!*(_QWORD *)(v9 + 552))
  {
    v8 = v11;
LABEL_21:
    *(_DWORD *)v3 = v8;
    return result;
  }
  v10 = JSC::startOfFixedExecutableMemoryPoolImpl(result);
  result = (JSC::ExecutableAllocator *)(*(uint64_t (**)(char *, int *, uint64_t))(v9 + 552))((char *)v3 - v10, &v11, 4);
  if ((unint64_t)&v11 - *(_QWORD *)(v9 + 40) < *(_QWORD *)(v9 + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x1959435A4);
  }
  return result;
}

void JSC::MacroAssemblerARM64::moveToCachedReg(unsigned int *a1, JSC::ARM64LogicalImmediate *this, uint64_t a3)
{
  unsigned int v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  unsigned int v15;
  __int16 v16;

  v4 = this;
  v6 = (int)this;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 208) & *(_DWORD *)(a3 + 24)) != 0)
  {
    v7 = *(_QWORD *)(a3 + 16);
    if (v7 == (int)this)
      return;
    v8 = JSC::ARM64LogicalImmediate::create32(this);
    if (v8 != -1)
    {
      v9 = *(char *)(a3 + 8) | (v8 << 10);
      v10 = 838861792;
LABEL_5:
      v11 = v9 | v10;
      v12 = a1[50];
      if (v12 + 4 > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
        v12 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = v11;
      a1[50] += 4;
      goto LABEL_16;
    }
    v13 = v7 ^ v6;
    if (!((v7 ^ v6) >> 32))
    {
      if ((v4 & 0xFFFF0000) != (unint64_t)(v7 & 0xFFFF0000))
      {
        v14 = ((v4 & 0xFFFF0000) >> 11) | 0x72A00000 | *(_BYTE *)(a3 + 8) & 0x1F;
        v15 = a1[50];
        if (v15 + 4 > a1[48])
        {
          v16 = v13;
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
          v13 = v16;
          v15 = a1[50];
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v14;
        a1[50] += 4;
      }
      if (!v13)
        goto LABEL_16;
      v9 = *(_BYTE *)(a3 + 8) & 0x1F | (32 * (unsigned __int16)v4);
      v10 = 1920991232;
      goto LABEL_5;
    }
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)v4, *(char *)(a3 + 8));
LABEL_16:
  *(_QWORD *)(a3 + 16) = v6;
  *(_DWORD *)(*(_QWORD *)a3 + 208) |= *(_DWORD *)(a3 + 24);
}

void JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(unsigned int *a1, JSC::ARM64LogicalImmediate *this, int a3)
{
  unsigned int v4;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int *v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;

  v4 = this;
  if ((_DWORD)this == -1)
  {
    v6 = 310378496;
    goto LABEL_5;
  }
  if (!(_DWORD)this)
  {
    v6 = 1384120320;
LABEL_5:
    v8 = a1 + 50;
    v7 = a1[50];
    v9 = v6 & 0xFFFFFFE0 | a3 & 0x1F;
LABEL_8:
    v12 = (JSC::AssemblerBuffer *)(v8 - 36);
    v13 = v7 + 4;
    v14 = *(v8 - 2);
    v15 = v8;
LABEL_9:
    if (v13 > v14)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12);
      v7 = *v15;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v7) = v9;
    *v15 += 4;
    return;
  }
  v10 = JSC::ARM64LogicalImmediate::create32(this);
  if (v10 != -1)
  {
    v11 = a1[50];
    v8 = a1 + 50;
    v7 = v11;
    v9 = a3 | (v10 << 10) | 0x320003E0;
    goto LABEL_8;
  }
  if ((unsigned __int16)v4 == 0xFFFF)
    v16 = -1;
  else
    v16 = 0;
  if ((_WORD)v4)
    v17 = v16;
  else
    v17 = 1;
  v18 = HIWORD(v4);
  if (!HIWORD(v4))
  {
    if (!(_WORD)v4)
      return;
    v19 = a3 & 0x1F;
    v12 = (JSC::AssemblerBuffer *)(a1 + 14);
    v15 = a1 + 50;
    v20 = a1 + 48;
    goto LABEL_27;
  }
  if (HIWORD(v4) == 0xFFFF)
    --v17;
  v19 = a3 & 0x1F;
  v12 = (JSC::AssemblerBuffer *)(a1 + 14);
  v15 = a1 + 50;
  v20 = a1 + 48;
  if ((v17 & 0x80000000) == 0)
  {
    if (!(_WORD)v4)
    {
      v21 = v19 | (32 * HIWORD(v4));
      v22 = 1386217472;
LABEL_34:
      v9 = v21 | v22;
      v7 = *v15;
      v13 = *v15 + 4;
      goto LABEL_35;
    }
LABEL_27:
    v23 = v19 & 0xFFE0001F | (32 * (unsigned __int16)v4) | 0x52800000;
    v24 = *v15;
    if (*v15 + 4 > *v20)
    {
      v30 = v19;
      v28 = v19 & 0xFFE0001F | (32 * (unsigned __int16)v4) | 0x52800000;
      JSC::AssemblerBuffer::outOfLineGrow(v12);
      v23 = v28;
      v18 = HIWORD(v4);
      v19 = v30;
      v24 = *v15;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v24) = v23;
    v25 = *v15;
    v7 = *v15 + 4;
    *v15 = v7;
    if (v18)
      goto LABEL_30;
    return;
  }
  if ((unsigned __int16)v4 == 0xFFFF)
  {
    if (HIWORD(v4) == 0xFFFF)
      return;
    v21 = v19 | (32 * (HIWORD(v4) ^ 0xFFFF));
    v22 = 312475648;
    goto LABEL_34;
  }
  v26 = v19 | (32 * ((unsigned __int16)v4 ^ 0xFFFF)) | 0x12800000;
  v27 = *v15;
  if (*v15 + 4 > *v20)
  {
    v31 = v19;
    v29 = v19 | (32 * ((unsigned __int16)v4 ^ 0xFFFF)) | 0x12800000;
    JSC::AssemblerBuffer::outOfLineGrow(v12);
    v26 = v29;
    v18 = HIWORD(v4);
    v19 = v31;
    v27 = *v15;
  }
  *(_DWORD *)(*(_QWORD *)v12 + v27) = v26;
  v25 = *v15;
  v7 = *v15 + 4;
  *v15 = v7;
  if (v18 != 0xFFFF)
  {
LABEL_30:
    v9 = v19 | (32 * HIWORD(v4)) | 0x72A00000;
    v13 = v25 + 8;
LABEL_35:
    v14 = *v20;
    goto LABEL_9;
  }
}

uint64_t JSC::ARM64LogicalImmediate::highestSetBit(unint64_t this)
{
  unint64_t v1;
  unsigned int v2;

  v1 = HIDWORD(this);
  if (!HIDWORD(this))
    v1 = this;
  if (v1 < 0x10000)
  {
    v2 = 32 * (HIDWORD(this) != 0);
  }
  else
  {
    v1 >>= 16;
    v2 = (32 * (HIDWORD(this) != 0)) | 0x10;
  }
  if (v1 >= 0x100)
  {
    v1 >>= 8;
    v2 |= 8u;
  }
  if (v1 >= 0x10)
  {
    v1 >>= 4;
    v2 |= 4u;
  }
  if (v1 >= 4)
  {
    v1 >>= 2;
    v2 += 2;
  }
  if (v1 <= 1)
    return v2;
  else
    return v2 + 1;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<16u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  int v12;

  *a4 = (unint64_t)((unsigned __int16)a1 & 0x8000) >> 15;
  if ((a1 & 0x8000) != 0)
    v6 = a1 ^ 0xFFFF;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  v8 = 0;
  *a2 = v7;
  v9 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v10 = v9 ^ v6;
  if (v9 == v6)
    goto LABEL_5;
  v12 = JSC::ARM64LogicalImmediate::highestSetBit(v9 ^ v6);
  result = 0;
  *a3 = v12;
  if (v10 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v12)
  {
    v8 = v12 + 1;
LABEL_5:
    *a3 = v8;
    return 1;
  }
  return result;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<8u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  int v12;

  *a4 = (a1 & 0x80) >> 7;
  if ((a1 & 0x80) != 0)
    v6 = a1 ^ 0xFF;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  *a2 = v7;
  v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v9 = v8 ^ v6;
  if (v8 != v6)
  {
    v10 = JSC::ARM64LogicalImmediate::highestSetBit(v8 ^ v6);
    result = 0;
    *a3 = v10;
    if (v9 != 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v10)
      return result;
    v12 = v10 + 1;
  }
  else
  {
    v12 = 0;
  }
  *a3 = v12;
  return 1;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<4u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  int v12;

  *a4 = (a1 & 8) >> 3;
  if ((a1 & 8) != 0)
    v6 = a1 ^ 0xF;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  *a2 = v7;
  v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v9 = v8 ^ v6;
  if (v8 != v6)
  {
    v10 = JSC::ARM64LogicalImmediate::highestSetBit(v8 ^ v6);
    result = 0;
    *a3 = v10;
    if (v9 != 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v10)
      return result;
    v12 = v10 + 1;
  }
  else
  {
    v12 = 0;
  }
  *a3 = v12;
  return 1;
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<2u>(unint64_t a1, _DWORD *a2, _DWORD *a3, _BYTE *a4)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  int v12;

  *a4 = (a1 & 2) >> 1;
  if ((a1 & 2) != 0)
    v6 = a1 ^ 3;
  else
    v6 = a1;
  v7 = JSC::ARM64LogicalImmediate::highestSetBit(v6);
  *a2 = v7;
  v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v7;
  v9 = v8 ^ v6;
  if (v8 != v6)
  {
    v10 = JSC::ARM64LogicalImmediate::highestSetBit(v8 ^ v6);
    result = 0;
    *a3 = v10;
    if (v9 != 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v10)
      return result;
    v12 = v10 + 1;
  }
  else
  {
    v12 = 0;
  }
  *a3 = v12;
  return 1;
}

__n128 JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::grow(uint64_t a1, int a2)
{
  WTF *v3;
  WTF *v4;
  __n128 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = (WTF *)(*(_DWORD *)(a1 + 136) + a2 + (*(_DWORD *)(a1 + 136) >> 1));
  *(_DWORD *)(a1 + 136) = (_DWORD)v3;
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1 == a1 + 8)
  {
    v6 = WTF::fastMalloc(v3);
    *(_QWORD *)a1 = v6;
    v7 = *((_OWORD *)v4 + 3);
    v9 = *(_OWORD *)v4;
    v8 = *((_OWORD *)v4 + 1);
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v4 + 2);
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)v6 = v9;
    *(_OWORD *)(v6 + 16) = v8;
    result = *((__n128 *)v4 + 6);
    v10 = *((_OWORD *)v4 + 7);
    v12 = *((_OWORD *)v4 + 4);
    v11 = *((_OWORD *)v4 + 5);
    *(__n128 *)(v6 + 96) = result;
    *(_OWORD *)(v6 + 112) = v10;
    *(_OWORD *)(v6 + 64) = v12;
    *(_OWORD *)(v6 + 80) = v11;
  }
  else
  {
    *(_QWORD *)a1 = WTF::fastRealloc(*(WTF **)a1, v3);
  }
  return result;
}

_QWORD *WTF::Deque<JSC::ARM64Registers::RegisterID,16ul>::expandCapacity(_QWORD *result)
{
  size_t *v1;
  unint64_t v2;
  char *v3;
  unint64_t v4;
  int v5;
  char *v6;
  size_t v7;
  size_t v8;
  void *v9;

  v1 = result;
  v2 = *((unsigned int *)result + 6);
  v3 = (char *)result[2];
  v4 = v2 + (v2 >> 2);
  if (v4 < 0x10)
  {
    v6 = (char *)(result + 4);
    v1[2] = (size_t)(v1 + 4);
    *((_DWORD *)v1 + 6) = 16;
  }
  else
  {
    if (v4 >= 0xFFFFFFFF)
    {
      __break(0xC471u);
      return result;
    }
    v5 = v4 + 1;
    v6 = (char *)WTF::fastMalloc((WTF *)(v4 + 1));
    *((_DWORD *)v1 + 6) = v5;
    v1[2] = (size_t)v6;
  }
  v7 = v1[1];
  if (*v1 <= v7)
  {
    result = memcpy(&v6[*v1], &v3[*v1], v7 - *v1);
  }
  else
  {
    memcpy(v6, v3, v7);
    v8 = *v1 - v2 + *((unsigned int *)v1 + 6);
    result = memcpy((void *)(v1[2] + v8), &v3[*v1], v2 - *v1);
    *v1 = v8;
  }
  if (v1 + 4 != (size_t *)v3 && v3)
  {
    if ((char *)v1[2] == v3)
    {
      v1[2] = 0;
      *((_DWORD *)v1 + 6) = 0;
    }
    return (_QWORD *)WTF::fastFree((WTF *)v3, v9);
  }
  return result;
}

_DWORD *WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StackAllocator::StackReference>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  int v21;
  uint64_t v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (v10 < 0x11)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_34;
      }
      if (!(v10 >> 30))
      {
        v11 = WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v22 = 0;
        do
        {
          *(_DWORD *)(v11 + v22) = *(_DWORD *)((char *)v5 + v22);
          v22 += 4;
        }
        while (4 * v6 != v22);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if ((WTF *)v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x195943FACLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x11)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_43;
      v17 = WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 4 * v16;
    v19 = (_DWORD *)v17;
    v20 = v5;
    do
    {
      v21 = *(_DWORD *)v20;
      v20 = (WTF *)((char *)v20 + 4);
      *v19++ = v21;
      v18 -= 4;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if ((WTF *)v17 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

uint64_t WTF::Vector<JSC::ARM64Registers::RegisterID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      if (v10 < 2)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_30;
      }
      if (!HIDWORD(v10))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)v10);
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195944144);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 2)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

void JSC::MacroAssemblerARM64::add64(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  int v14;
  int v15;
  int v16;

  if (a2 < 0x1000)
  {
    v5 = 0x80000000;
LABEL_3:
    v6 = a4 | (32 * a3) | v5 | ((a2 & 0xFFF) << 10);
LABEL_4:
    v7 = 285212672;
LABEL_5:
    v8 = v6 | v7;
    goto LABEL_6;
  }
  v14 = -a2;
  if (-a2 < 0x1000)
  {
    v15 = -1073741824;
LABEL_11:
    v6 = a4 | (32 * a3) | v15 | (v14 << 10);
    goto LABEL_4;
  }
  if ((a2 & 0xFFF) == 0)
  {
    v16 = a2 >> 12;
    if (!HIBYTE(a2))
    {
      v5 = -2143289344;
      a2 >>= 12;
      goto LABEL_3;
    }
    v14 = -v16;
    if (-v16 < 0x1000)
    {
      v15 = -1069547520;
      goto LABEL_11;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1959442A4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, a2, *(char *)(a1 + 272));
  if (a3 == 31 || a4 == 31)
  {
    v6 = a4 | (32 * a3);
    v7 = -1959763968;
    goto LABEL_5;
  }
  v8 = a4 & 0x1F | (32 * (a3 & 0x1F)) | 0x8B100000;
LABEL_6:
  v11 = *(_DWORD *)(a1 + 200);
  v10 = (unsigned int *)(a1 + 200);
  v9 = v11;
  if (v11 + 4 > *(v10 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 - 36));
    v9 = *v10;
  }
  *(_DWORD *)(*((_QWORD *)v10 - 18) + v9) = v8;
  *v10 += 4;
}

void JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>(_DWORD *a1, unint64_t a2, int a3)
{
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  JSC::AssemblerBuffer *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  uint64_t v39;

  if (a2 == -1)
  {
    v6 = -1837105152;
    goto LABEL_5;
  }
  v5 = a2;
  if (!a2)
  {
    v6 = -763363328;
LABEL_5:
    v8 = a1 + 50;
    v7 = a1[50];
    v9 = v6 & 0xFFFFFFE0 | a3 & 0x1F;
LABEL_6:
    v10 = (JSC::AssemblerBuffer *)(v8 - 36);
    v11 = v8;
    v12 = v7 + 4;
    v13 = *(v8 - 2);
    goto LABEL_7;
  }
  v39 = 0;
  v38 = 0;
  v14 = HIDWORD(a2);
  if (JSC::ARM64LogicalImmediate::findBitRange<64u>(a2, (int *)&v39 + 1, (int *)&v39, &v38))
  {
    v22 = v39 - HIDWORD(v39) + 62;
    if (v38)
    {
      v23 = 63 - HIDWORD(v39);
    }
    else
    {
      v22 = HIDWORD(v39) - v39;
      v23 = -(int)v39 & 0x3F;
    }
    v24 = v22 | (v23 << 6) | 0x1000;
  }
  else
  {
    if ((_DWORD)v5 != (_DWORD)v14)
      goto LABEL_12;
    v24 = JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)v5);
  }
  if (v24 != -1)
  {
    v25 = a1[50];
    v8 = a1 + 50;
    v7 = v25;
    v9 = a3 | (v24 << 10) | 0xB20003E0;
    goto LABEL_6;
  }
LABEL_12:
  if ((unsigned __int16)v5 == 0xFFFF)
    v15 = -1;
  else
    v15 = 0;
  if (!(_WORD)v5)
    v15 = 1;
  if (WORD1(v5))
  {
    if (WORD1(v5) == 0xFFFF)
      --v15;
  }
  else
  {
    ++v15;
  }
  if (WORD2(v5))
  {
    if (WORD2(v5) == 0xFFFF)
      --v15;
  }
  else
  {
    ++v15;
  }
  v16 = HIWORD(v5);
  if (HIWORD(v5))
  {
    if ((_DWORD)v16 == 0xFFFF)
      --v15;
  }
  else
  {
    ++v15;
  }
  v17 = a3 & 0x1F;
  v10 = (JSC::AssemblerBuffer *)(a1 + 14);
  v11 = a1 + 50;
  if (v15 < 0)
  {
    if ((unsigned __int16)v5 == 0xFFFF)
    {
      if (WORD1(v5) == 0xFFFF)
      {
        if (WORD2(v5) == 0xFFFF)
        {
          if ((_DWORD)v16 == 0xFFFF)
            return;
          v9 = v17 | (32 * (v16 ^ 0xFFFF)) | 0x92E00000;
          v7 = a1[50];
          goto LABEL_83;
        }
        v7 = a1[50];
        v31 = v7 + 4;
        v32 = a1[48];
        v33 = v17 | (32 * (WORD2(v5) ^ 0xFFFF)) | 0x92C00000;
        goto LABEL_78;
      }
      v29 = v17 | (32 * (WORD1(v5) ^ 0xFFFF)) | 0x92A00000;
      v7 = a1[50];
      v30 = v7 + 4;
    }
    else
    {
      v27 = a1[50];
      if (v27 + 4 > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
        v27 = *v11;
      }
      *(_DWORD *)(*(_QWORD *)v10 + v27) = v17 | (32 * ((unsigned __int16)v5 ^ 0xFFFF)) | 0x92800000;
      v28 = *v11;
      v7 = *v11 + 4;
      *v11 = v7;
      if (WORD1(v5) == 0xFFFF)
        goto LABEL_62;
      v29 = v17 | (32 * WORD1(v5)) | 0xF2A00000;
      v30 = v28 + 8;
    }
    if (v30 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
      v7 = *v11;
    }
    *(_DWORD *)(*(_QWORD *)v10 + v7) = v29;
    v7 = *v11 + 4;
    *v11 = v7;
LABEL_62:
    if (WORD2(v5) == 0xFFFF)
    {
LABEL_81:
      if ((_DWORD)v16 == 0xFFFF)
        return;
      v9 = v17 | (32 * v16) | 0xF2E00000;
LABEL_83:
      v12 = v7 + 4;
      v13 = a1[48];
LABEL_7:
      if (v12 <= v13)
      {
LABEL_8:
        *(_DWORD *)(*(_QWORD *)v10 + v7) = v9;
        *v11 += 4;
        return;
      }
LABEL_76:
      JSC::AssemblerBuffer::outOfLineGrow(v10);
      v7 = *v11;
      goto LABEL_8;
    }
    v31 = v7 + 4;
    v32 = a1[48];
    v33 = v17 & 0xFFE0001F | (32 * (unsigned __int16)v14) | 0xF2C00000;
LABEL_78:
    if (v31 > v32)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
      v7 = *v11;
    }
    *(_DWORD *)(*(_QWORD *)v10 + v7) = v33;
    v7 = *v11 + 4;
    *v11 = v7;
    goto LABEL_81;
  }
  if ((_WORD)v5)
  {
    v18 = a1[50];
    if (v18 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
      v18 = *v11;
    }
    *(_DWORD *)(*(_QWORD *)v10 + v18) = v17 & 0xFFE0001F | (32 * (unsigned __int16)v5) | 0xD2800000;
    v19 = *v11;
    v20 = *v11 + 4;
    *v11 = v20;
    if (!WORD1(v5))
    {
      v26 = 0;
      if (!WORD2(v5))
        goto LABEL_71;
      goto LABEL_65;
    }
    LODWORD(v5) = v17 | (32 * WORD1(v5)) | 0xF2A00000;
    v21 = v19 + 8;
  }
  else
  {
    if (!WORD1(v5))
    {
      v26 = 1;
      if (!WORD2(v5))
        goto LABEL_71;
      goto LABEL_65;
    }
    LODWORD(v5) = v17 | (32 * WORD1(v5)) | 0xD2A00000;
    v20 = a1[50];
    v21 = v20 + 4;
  }
  if (v21 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
    v20 = *v11;
  }
  v26 = 0;
  *(_DWORD *)(*(_QWORD *)v10 + v20) = v5;
  *v11 += 4;
  if (WORD2(v5))
  {
LABEL_65:
    v34 = a1[50];
    if ((v26 & 1) != 0)
      v35 = -759169024;
    else
      v35 = -222298112;
    v36 = v17 & 0xFFE0001F | (32 * (unsigned __int16)v14) | v35;
    if (v34 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
      v34 = *v11;
    }
    v26 = 0;
    *(_DWORD *)(*(_QWORD *)v10 + v34) = v36;
    *v11 += 4;
  }
LABEL_71:
  if ((_DWORD)v16)
  {
    v7 = a1[50];
    if ((v26 & 1) != 0)
      v37 = -757071872;
    else
      v37 = -220200960;
    v9 = v17 | (32 * v16) | v37;
    if (v7 + 4 <= a1[48])
      goto LABEL_8;
    goto LABEL_76;
  }
}

void JSC::MacroAssemblerARM64::store64(uint64_t a1, char a2, uint64_t a3)
{
  char v3;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = a3;
  if ((HIDWORD(a3) + 256) > 0x1FF)
  {
    if (HIDWORD(a3) > 0x7FF8 || (a3 & 0x700000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, a3 >> 32, *(char *)(a1 + 304));
      v6 = a2 & 0x1F | (32 * v3) | 0xF8316800;
    }
    else
    {
      v6 = (HIDWORD(a3) << 7) & 0x3FFC00 | a2 & 0x1F | (32 * (char)a3) | 0xF9000000;
    }
  }
  else
  {
    v6 = ((WORD2(a3) & 0x1FF) << 12) | a2 & 0x1F | (32 * (char)a3) | 0xF8000000;
  }
  v9 = *(_DWORD *)(a1 + 200);
  v8 = (unsigned int *)(a1 + 200);
  v7 = v9;
  if (v9 + 4 > *(v8 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 - 36));
    v7 = *v8;
  }
  *(_DWORD *)(*((_QWORD *)v8 - 18) + v7) = v6;
  *v8 += 4;
}

void JSC::MacroAssemblerARM64::moveToCachedReg(_DWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int16 v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  BOOL v18;
  uint64_t v19;

  if ((*(_DWORD *)(*(_QWORD *)a3 + 208) & *(_DWORD *)(a3 + 24)) == 0)
    goto LABEL_13;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6 == a2)
    return;
  if (a2 + 1 >= 2)
  {
    v19 = 0;
    v18 = 0;
    if (JSC::ARM64LogicalImmediate::findBitRange<64u>(a2, (int *)&v19 + 1, (int *)&v19, &v18))
    {
      v12 = v19 - HIDWORD(v19) + 62;
      if (v18)
      {
        v13 = 63 - HIDWORD(v19);
      }
      else
      {
        v12 = HIDWORD(v19) - v19;
        v13 = -(int)v19 & 0x3F;
      }
      v14 = v12 | (v13 << 6) | 0x1000;
    }
    else
    {
      if ((_DWORD)a2 != HIDWORD(a2))
        goto LABEL_6;
      v14 = JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)a2);
    }
    if (v14 != -1)
    {
      v11 = *(char *)(a3 + 8) | (v14 << 10);
      v8 = -1308621856;
LABEL_20:
      v15 = v11 | v8;
      v16 = a1[50];
      if (v16 + 4 > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
        v16 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = v15;
      a1[50] += 4;
      goto LABEL_23;
    }
  }
LABEL_6:
  v7 = v6 ^ a2;
  if (!((v6 ^ a2) >> 32))
  {
    v8 = -226492416;
    if ((a2 & 0xFFFF0000) != (v6 & 0xFFFF0000))
    {
      v9 = ((a2 & 0xFFFF0000) >> 11) | 0xF2A00000 | *(_BYTE *)(a3 + 8) & 0x1F;
      v10 = a1[50];
      if (v10 + 4 > a1[48])
      {
        v17 = v7;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14));
        v7 = v17;
        v8 = -226492416;
        v10 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = v9;
      a1[50] += 4;
    }
    if (!v7)
      goto LABEL_23;
    v11 = *(_BYTE *)(a3 + 8) & 0x1F | (32 * (unsigned __int16)a2);
    goto LABEL_20;
  }
LABEL_13:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>(a1, a2, *(char *)(a3 + 8));
LABEL_23:
  *(_QWORD *)(a3 + 16) = a2;
  *(_DWORD *)(*(_QWORD *)a3 + 208) |= *(_DWORD *)(a3 + 24);
}

void JSC::MacroAssemblerARM64::load64(uint64_t a1, uint64_t a2, char a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;

  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v5 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v6 = -130023424;
LABEL_3:
    v7 = v5 | v6;
    goto LABEL_4;
  }
  if (HIDWORD(a2) <= 0x7FF8 && (a2 & 0x700000000) == 0)
  {
    v5 = (HIDWORD(a2) << 7) & 0x3FFC00;
    v6 = a3 & 0x1F | (32 * (char)a2) | 0xF9400000;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v11 = a2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304));
  v7 = a3 & 0x1F | (32 * v11) | 0xF8716800;
LABEL_4:
  v10 = *(_DWORD *)(a1 + 200);
  v9 = (unsigned int *)(a1 + 200);
  v8 = v10;
  if (v10 + 4 > *(v9 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 - 36));
    v8 = *v9;
  }
  *(_DWORD *)(*((_QWORD *)v9 - 18) + v8) = v7;
  *v9 += 4;
}

void JSC::MacroAssemblerARM64::branchTest64(uint64_t a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, JSC::ARM64LogicalImmediate *a4@<X3>, uint64_t a5@<X8>, int8x8_t a6@<D0>)
{
  char v7;
  uint8x8_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char v22;
  char v23;
  unsigned int j;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  JSC::AssemblerBuffer *v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int i;
  BOOL v43;
  uint64_t v44;

  v7 = a3;
  if ((_DWORD)a4 != -1)
  {
    if (a2 <= 1)
    {
      a6.i32[0] = (int)a4;
      v11 = (uint8x8_t)vcnt_s8(a6);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.i32[0] == 1)
      {
        v12 = __clz(__rbit32(a4));
        if (*(_BYTE *)(a1 + 328))
        {
          for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
          {
            if ((i + 4) > *(_DWORD *)(a1 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
              i = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
            i = *(_DWORD *)(a1 + 200) + 4;
          }
          *(_DWORD *)(a1 + 208) = 0;
        }
        v13 = (v12 << 26) & 0x80000000;
        v14 = v12 << 19;
        v15 = v7 & 0x1F;
        if (a2)
        {
          v16 = v13 | v15;
          v17 = v14 | 0x37000000;
        }
        else
        {
          v16 = v14 & 0xF80000 | v15 | v13;
          v17 = 905969664;
        }
        v18 = v16 | v17;
        v19 = *(_DWORD *)(a1 + 200);
        if (v19 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
          v19 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = v18;
        v20 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v20;
        v21 = v20;
        if ((v20 + 4) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
          v21 = *(_DWORD *)(a1 + 200);
        }
        v22 = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = -721215457;
        *(_DWORD *)(a1 + 200) += 4;
        if (*(_BYTE *)(a1 + 328))
          v23 = -120;
        else
          v23 = -124;
        goto LABEL_57;
      }
    }
    if ((unint64_t)((int)a4 + 1) < 2)
      goto LABEL_21;
    v44 = 0;
    v43 = 0;
    if (JSC::ARM64LogicalImmediate::findBitRange<64u>((int)a4, (int *)&v44 + 1, (int *)&v44, &v43))
    {
      v32 = v44 - HIDWORD(v44) + 62;
      if (v43)
      {
        v33 = 63 - HIDWORD(v44);
      }
      else
      {
        v32 = HIDWORD(v44) - v44;
        v33 = -(int)v44 & 0x3F;
      }
      v34 = v32 | (v33 << 6) | 0x1000;
    }
    else
    {
      if ((_DWORD)a4 != (int)a4 >> 31)
      {
LABEL_21:
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x195944FF4);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 272));
        v25 = (32 * (v7 & 0x1F)) | 0xEA10001F;
        goto LABEL_24;
      }
      v34 = JSC::ARM64LogicalImmediate::create32(a4);
    }
    if (v34 != -1)
    {
      v35 = (32 * (v7 & 0x1F)) | (v34 << 10) | 0xF200001F;
      v29 = (JSC::AssemblerBuffer *)(a1 + 56);
      v36 = *(_DWORD *)(a1 + 200);
      if (v36 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        v36 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = v35;
      v27 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v27;
      if (*(_BYTE *)(a1 + 328))
      {
        while ((signed int)v27 < *(_DWORD *)(a1 + 52))
        {
          if (v27 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
            v27 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
          v27 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v27;
        }
        *(_DWORD *)(a1 + 208) = 0;
      }
      v28 = a2 | 0x54000000;
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (a2 > 1)
  {
    v25 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
LABEL_24:
    v26 = *(_DWORD *)(a1 + 200);
    if (v26 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v26 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v25;
    v27 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v27;
    if (*(_BYTE *)(a1 + 328))
    {
      for (; (signed int)v27 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v27)
      {
        if (v27 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
          v27 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
        v27 = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    v28 = a2 | 0x54000000;
    v29 = (JSC::AssemblerBuffer *)(a1 + 56);
LABEL_28:
    if (v27 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v29);
      v27 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v28;
    v30 = *(_DWORD *)(a1 + 200);
    v20 = v30 + 4;
    *(_DWORD *)(a1 + 200) = v30 + 4;
    v31 = v30 + 4;
    if ((v30 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v29);
      v31 = *(_DWORD *)(a1 + 200);
    }
    v12 = 0;
    v22 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v23 = -122;
    else
      v23 = -126;
    v7 = -1;
    goto LABEL_57;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    for (j = *(_DWORD *)(a1 + 200); (signed int)j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
    {
      if (j + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        j = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
      j = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    j = *(_DWORD *)(a1 + 200);
  }
  if (a2)
    v37 = -1258291200;
  else
    v37 = -1275068416;
  v38 = v7 & 0x1F | v37;
  if (j + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    j = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = v38;
  v39 = *(_DWORD *)(a1 + 200);
  v20 = v39 + 4;
  *(_DWORD *)(a1 + 200) = v39 + 4;
  v40 = v39 + 8;
  v41 = v39 + 4;
  if (v40 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v41 = *(_DWORD *)(a1 + 200);
  }
  v12 = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v23 = -121;
  else
    v23 = -125;
  v22 = 1;
LABEL_57:
  *(_DWORD *)a5 = v20;
  *(_DWORD *)(a5 + 4) = v12;
  *(_BYTE *)(a5 + 8) = v23;
  *(_BYTE *)(a5 + 9) = a2;
  *(_BYTE *)(a5 + 10) = v22;
  *(_BYTE *)(a5 + 11) = v7;
}

_DWORD *JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch(_DWORD *result)
{
  int v1;
  JSC::AssemblerBuffer *v2;
  JSC::AssemblerBuffer *v3;
  _DWORD *v4;

  v1 = result[50];
  if (v1 < result[13])
  {
    v2 = (JSC::AssemblerBuffer *)(result + 14);
    do
    {
      if ((v1 + 4) > result[48])
      {
        v3 = v2;
        v4 = result;
        JSC::AssemblerBuffer::outOfLineGrow(v2);
        v2 = v3;
        result = v4;
        v1 = v4[50];
      }
      *(_DWORD *)(*((_QWORD *)result + 7) + v1) = -721215457;
      v1 = result[50] + 4;
      result[50] = v1;
    }
    while (v1 < result[13]);
  }
  result[52] = 0;
  return result;
}

void WebCore::StackAllocator::pop(uint64_t *a1, unsigned int a2, char a3)
{
  uint64_t v4;
  unsigned int v5;

  if (*((_DWORD *)a1 + 2) != a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1959452B8);
  }
  if (*((_BYTE *)a1 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x1959452D8);
  }
  if (a2 <= 0xF)
  {
    __break(0xC471u);
    JUMPOUT(0x1959452F8);
  }
  *((_DWORD *)a1 + 2) = a2 - 16;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 200);
  if (v5 + 4 > *(_DWORD *)(*a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56));
    v5 = *(_DWORD *)(v4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 56) + v5) = a3 & 0x1F | 0xF84107E0;
  *(_DWORD *)(v4 + 200) += 4;
}

void JSC::MacroAssemblerARM64::branch32(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  JSC::AssemblerBuffer *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  BOOL v37;

  v6 = a2;
  if (a4)
  {
    if (a4 > 0xFFF)
    {
      v13 = -a4;
      if (-a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v9 = 0;
          v10 = 0;
          v12 = 0;
          LOBYTE(v13) = 0;
          v11 = 0;
        }
        else
        {
          v30 = a4 >> 12;
          v31 = HIBYTE(a4);
          v32 = 0xC00000000;
          v33 = 1;
          if (-(a4 >> 12) > 0xFFF)
            v32 = 0;
          if (-v30 <= 0xFFF)
          {
            v34 = 0x100000000;
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          if (-v30 <= 0xFFF)
            v35 = -v30;
          else
            LOBYTE(v35) = 0;
          if (-v30 <= 0xFFF)
            v36 = -(a4 >> 12) & 0xFFFFFF00;
          else
            v36 = 0;
          v12 = 0x100000000;
          v37 = v31 == 0;
          if (v31)
            v9 = v32;
          else
            v9 = 0xC00000000;
          if (v37)
            v10 = 0;
          else
            v10 = v33;
          if (v37)
          {
            LOBYTE(v13) = a4 >> 12;
          }
          else
          {
            v12 = v34;
            LOBYTE(v13) = v35;
          }
          if (v37)
            v11 = v30 & 0xFFFFFF00;
          else
            v11 = v36;
        }
      }
      else
      {
        v9 = 0;
        v11 = v13 & 0xFFFFFF00;
        v12 = 0x100000000;
        v10 = 1;
      }
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = a4 & 0xFFFFFF00;
      v12 = 0x100000000;
      LOBYTE(v13) = a4;
    }
    v14 = v9 | v11 | v13;
    v15 = v12 | v10;
    goto LABEL_5;
  }
  if (a2 <= 1)
  {
LABEL_9:
    JSC::MacroAssemblerARM64::branchTest32(a1, v6, a3, a3, a5);
    return;
  }
  if (a2 == 10)
  {
    v6 = 5;
    goto LABEL_9;
  }
  if (a2 == 11)
  {
    v6 = 4;
    goto LABEL_9;
  }
  v14 = 0;
  v15 = 0x100000000;
LABEL_5:
  if ((v15 & 0xFF00000000) != 0)
  {
    v16 = v14 & 0xFFFFFFFF00000000;
    v17 = ((v14 & 0xFFF) << 10) | (32 * a3);
    v18 = (JSC::AssemblerBuffer *)(a1 + 56);
    v19 = *(_DWORD *)(a1 + 200);
    if ((_BYTE)v15)
      v20 = 822083615;
    else
      v20 = 1895825439;
    if (v16 == 0xC00000000)
      v20 |= 0x400000u;
    v22 = v20 | v17;
    if (v19 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v18);
      v19 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = v22;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x195945554);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, a1 + 264);
    if (a3 == 31)
    {
      v29 = *(_DWORD *)(a1 + 200);
      if (v29 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        v29 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = 1798333439;
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 200);
      if (v21 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        v21 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = (32 * (a3 & 0x1F)) | 0x6B10001F;
    }
  }
  v23 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v23;
  if (*(_BYTE *)(a1 + 328))
  {
    for (; (signed int)v23 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v23)
    {
      if (v23 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        v23 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -721215457;
      v23 = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v6 | 0x54000000;
  v24 = *(_DWORD *)(a1 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a1 + 200) = v24 + 4;
  v26 = v24 + 8;
  v27 = v24 + 4;
  if (v26 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v28 = -122;
  else
    v28 = -126;
  *(_DWORD *)a5 = v25;
  *(_DWORD *)(a5 + 4) = 0;
  *(_BYTE *)(a5 + 8) = v28;
  *(_BYTE *)(a5 + 9) = v6;
  *(_WORD *)(a5 + 10) = -256;
}

void JSC::MacroAssemblerARM64::branchTest32(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v5;
  unsigned int i;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;

  v5 = a3;
  if (a2 <= 1 && a3 == a4)
  {
    if (*(_BYTE *)(a1 + 328))
    {
      for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
      {
        if (i + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
          i = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
        i = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    else
    {
      i = *(_DWORD *)(a1 + 200);
    }
    if (a2)
      v10 = 889192448;
    else
      v10 = 872415232;
    v11 = v5 & 0x1F | v10;
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v11;
    v12 = *(_DWORD *)(a1 + 200);
    v13 = v12 + 4;
    *(_DWORD *)(a1 + 200) = v12 + 4;
    v14 = v12 + 8;
    v15 = v12 + 4;
    if (v14 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v15 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v16 = -121;
    else
      v16 = -125;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0x6A00001F);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), a2 | 0x54000000);
    v13 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), -721215457);
    if (*(_BYTE *)(a1 + 328))
      v16 = -122;
    else
      v16 = -126;
    v5 = -1;
  }
  *(_DWORD *)a5 = v13;
  *(_DWORD *)(a5 + 4) = 0;
  *(_BYTE *)(a5 + 8) = v16;
  *(_BYTE *)(a5 + 9) = a2;
  *(_BYTE *)(a5 + 10) = 0;
  *(_BYTE *)(a5 + 11) = v5;
}

void WebCore::FunctionCall::swapArguments(WebCore::FunctionCall *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  JSC::AssemblerBuffer *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v2 = *((char *)this + 156);
  v3 = *((unsigned __int8 *)this + 156);
  v4 = *((char *)this + 157);
  v5 = *((unsigned __int8 *)this + 157);
  v6 = *(_DWORD **)this;
  if (v2 != 15)
  {
    if (v3 == 31)
    {
      v23 = v6[50];
      v9 = v6 + 50;
      v8 = v23;
      v11 = (JSC::AssemblerBuffer *)(v9 - 36);
      v12 = v23 + 4;
      v13 = *(v9 - 2);
      v7 = -1862269969;
    }
    else
    {
      if (v3 == 63)
        v7 = -763363313;
      else
        v7 = ((v3 & 0x1F) << 16) | 0xAA0003EF;
      v10 = v6[50];
      v9 = v6 + 50;
      v8 = v10;
      v11 = (JSC::AssemblerBuffer *)(v9 - 36);
      v12 = v10 + 4;
      v13 = *(v9 - 2);
    }
    if (v12 > v13)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v11);
      v8 = *v9;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v8) = v7;
    *v9 += 4;
    v6 = *(_DWORD **)this;
  }
  if (v5 != v3)
  {
    if (v4 == 63)
    {
      if (v3 != 31)
      {
        v24 = v6[50];
        if (v24 + 4 > v6[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v6 + 14));
          v24 = v6[50];
        }
        *(_DWORD *)(*((_QWORD *)v6 + 7) + v24) = (v3 & 0x1F) - 763363328;
        v6[50] += 4;
        v6 = *(_DWORD **)this;
        goto LABEL_21;
      }
    }
    else if (v2 != 31 && v5 != 31)
    {
      v15 = v3 & 0xFFE0FFFF | ((v4 & 0x1F) << 16) | 0xAA0003E0;
LABEL_16:
      v18 = v6[50];
      v17 = v6 + 50;
      v16 = v18;
      if (v18 + 4 > *(v17 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 - 36));
        v16 = *v17;
      }
      *(_DWORD *)(*((_QWORD *)v17 - 18) + v16) = v15;
      *v17 += 4;
      v6 = *(_DWORD **)this;
      goto LABEL_19;
    }
    v15 = v2 | (32 * v4) | 0x91000000;
    goto LABEL_16;
  }
LABEL_19:
  if (v5 == 15)
    return;
  if (v5 == 31)
  {
    v19 = -1862270465;
    goto LABEL_22;
  }
LABEL_21:
  v19 = v5 | 0xAA0F03E0;
LABEL_22:
  v22 = v6[50];
  v21 = v6 + 50;
  v20 = v22;
  if (v22 + 4 > *(v21 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v21 - 36));
    v20 = *v21;
  }
  *(_DWORD *)(*((_QWORD *)v21 - 18) + v20) = v19;
  *v21 += 4;
}

char *WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Call,WTF::CodePtr<(WTF::PtrTag)64323,(WTF::FunctionAttributes)0>>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (char *)v5 + 16 * *(unsigned int *)(a1 + 12);
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *(WTF **)a1;
        return (char *)v19 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (v10 < 0x21)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_34;
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v20 = 0;
        do
        {
          v21 = (_QWORD *)(v11 + v20);
          v22 = (char *)v5 + v20;
          *v21 = *(_QWORD *)((char *)v5 + v20);
          v21[1] = *(_QWORD *)((char *)v5 + v20 + 8);
          v20 += 16;
        }
        while (v22 + 16 != v6);
        v19 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v19 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v19 = *(WTF **)a1;
        }
        return (char *)v19 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x195945C90);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x21)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_43;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = v5;
    do
    {
      *v17 = *(_QWORD *)v18;
      v17[1] = *((_QWORD *)v18 + 1);
      v18 = (WTF *)((char *)v18 + 16);
      v17 += 2;
    }
    while (v18 != (WTF *)((char *)v5 + 16 * v16));
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

WTF **WTF::Vector<WebCore::StackAllocator::StackReference,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF **result, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF **v4;
  WTF **v5;

  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    v3 = (WTF *)(result + 2);
    v2 = *result;
    if (result + 2 != (WTF **)*result)
    {
      if (!v2)
        goto LABEL_9;
      *result = 0;
      *((_DWORD *)result + 2) = 0;
      v4 = result + 2;
      v5 = result;
      WTF::fastFree(v2, a2);
      v3 = (WTF *)v4;
      result = v5;
      v2 = *v5;
    }
    if (v2)
      return result;
LABEL_9:
    *result = v3;
    *((_DWORD *)result + 2) = 16;
  }
  return result;
}

void JSC::MacroAssemblerARM64::load8(uint64_t a1, uint64_t a2, char a3)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;

  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v5 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v6 = 943718400;
LABEL_3:
    v7 = v5 | v6;
    goto LABEL_4;
  }
  if (HIDWORD(a2) <= 0xFFF)
  {
    v5 = ((WORD2(a2) & 0xFFF) << 10) | a3 & 0x1F | (32 * (char)a2);
    v6 = 960495616;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    return;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v11 = a2;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304));
  v7 = a3 & 0x1F | (32 * v11) | 0x38716800;
LABEL_4:
  v10 = *(_DWORD *)(a1 + 200);
  v9 = (unsigned int *)(a1 + 200);
  v8 = v10;
  if (v10 + 4 > *(v9 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 - 36));
    v8 = *v9;
  }
  *(_DWORD *)(*((_QWORD *)v9 - 18) + v8) = v7;
  *v9 += 4;
}

void JSC::MacroAssemblerARM64::branch64(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  JSC::AssemblerBuffer *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;

  v6 = a2;
  if (a4)
  {
    if ((unint64_t)a4 <= 0xFFF)
    {
      v10 = 0;
      v11 = 0;
      v13 = a4 & 0xFFFFFF00;
      v12 = 0x100000000;
      LOBYTE(v9) = a4;
    }
    else
    {
      v9 = -a4;
      if ((unint64_t)-a4 <= 0xFFF)
      {
        v10 = 0;
        v13 = v9 & 0xFFFFFF00;
        v12 = 0x100000000;
        v11 = 1;
      }
      else if ((a4 & 0xFFF) != 0)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        LOBYTE(v9) = 0;
        v13 = 0;
      }
      else
      {
        v29 = (unint64_t)a4 >> 24;
        v30 = -(a4 >> 12);
        v31 = v30 > 0xFFF;
        v32 = v30 & 0xFFFFFF00;
        v33 = 0xC00000000;
        v34 = 1;
        if (v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
        }
        else
        {
          v35 = 0x100000000;
        }
        if (v31)
          LOBYTE(v36) = 0;
        else
          v36 = -(a4 >> 12);
        if (v31)
          v37 = 0;
        else
          v37 = v32;
        v12 = 0x100000000;
        v38 = v29 == 0;
        if (v29)
          v10 = v33;
        else
          v10 = 0xC00000000;
        if (v38)
          v11 = 0;
        else
          v11 = v34;
        if (v38)
        {
          v9 = a4 >> 12;
        }
        else
        {
          v12 = v35;
          LOBYTE(v9) = v36;
        }
        if (v38)
          v13 = (a4 >> 12) & 0xFFFFFF00;
        else
          v13 = v37;
      }
    }
    v14 = v9 | v10 | v13;
    v15 = v12 | v11;
    goto LABEL_7;
  }
  if (a2 <= 1)
  {
LABEL_11:
    JSC::MacroAssemblerARM64::branchTest64(a1, v6, a3, a3, a5);
    return;
  }
  if (a2 == 10)
  {
    v6 = 5;
    goto LABEL_11;
  }
  if (a2 == 11)
  {
    v6 = 4;
    goto LABEL_11;
  }
  v14 = 0;
  v15 = 0x100000000;
LABEL_7:
  if ((v15 & 0xFF00000000) != 0)
  {
    v16 = v14 & 0xFFFFFFFF00000000;
    v17 = ((v14 & 0xFFF) << 10) | (32 * a3);
    v18 = (JSC::AssemblerBuffer *)(a1 + 56);
    v19 = *(_DWORD *)(a1 + 200);
    if ((_BYTE)v15)
      v20 = -1325400033;
    else
      v20 = -251658209;
    if (v16 == 0xC00000000)
      v20 |= 0x400000u;
    v22 = v20 | v17;
    if (v19 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v18);
      v19 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = v22;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x195946108);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a4, a1 + 264);
    if (a3 == 31)
    {
      v39 = *(_DWORD *)(a1 + 200);
      if (v39 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        v39 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = -349150209;
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 200);
      if (v21 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        v21 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = (32 * (a3 & 0x1F)) | 0xEB10001F;
    }
  }
  v23 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v23;
  if (*(_BYTE *)(a1 + 328))
  {
    for (; (signed int)v23 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v23)
    {
      if (v23 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
        v23 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -721215457;
      v23 = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v6 | 0x54000000;
  v24 = *(_DWORD *)(a1 + 200);
  v25 = v24 + 4;
  *(_DWORD *)(a1 + 200) = v24 + 4;
  v26 = v24 + 8;
  v27 = v24 + 4;
  if (v26 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v28 = -122;
  else
    v28 = -126;
  *(_DWORD *)a5 = v25;
  *(_DWORD *)(a5 + 4) = 0;
  *(_BYTE *)(a5 + 8) = v28;
  *(_BYTE *)(a5 + 9) = v6;
  *(_WORD *)(a5 + 10) = -256;
}

void JSC::MacroAssemblerARM64::branchTest64(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v5;
  unsigned int i;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  v5 = a3;
  if (a2 <= 1 && a3 == a4)
  {
    if (*(_BYTE *)(a1 + 328))
    {
      for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
      {
        if (i + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
          i = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
        i = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    else
    {
      i = *(_DWORD *)(a1 + 200);
    }
    if (a2)
      v18 = -1258291200;
    else
      v18 = -1275068416;
    v19 = v5 & 0x1F | v18;
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v19;
    v20 = *(_DWORD *)(a1 + 200);
    v14 = v20 + 4;
    *(_DWORD *)(a1 + 200) = v20 + 4;
    v21 = v20 + 8;
    v22 = v20 + 4;
    if (v21 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v22 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v17 = -121;
    else
      v17 = -125;
    v16 = 1;
  }
  else
  {
    v10 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEA00001F;
    v11 = *(_DWORD *)(a1 + 200);
    if (v11 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v11 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v11) = v10;
    v12 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v12;
    if (*(_BYTE *)(a1 + 328))
    {
      while ((signed int)v12 < *(_DWORD *)(a1 + 52))
      {
        if (v12 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
          v12 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = -721215457;
        v12 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v12;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v12 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = a2 | 0x54000000;
    v13 = *(_DWORD *)(a1 + 200);
    v14 = v13 + 4;
    *(_DWORD *)(a1 + 200) = v13 + 4;
    v15 = v13 + 4;
    if ((v13 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56));
      v15 = *(_DWORD *)(a1 + 200);
    }
    v16 = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v17 = -122;
    else
      v17 = -126;
    v5 = -1;
  }
  *(_DWORD *)a5 = v14;
  *(_DWORD *)(a5 + 4) = 0;
  *(_BYTE *)(a5 + 8) = v17;
  *(_BYTE *)(a5 + 9) = a2;
  *(_BYTE *)(a5 + 10) = v16;
  *(_BYTE *)(a5 + 11) = v5;
}

void JSC::MacroAssemblerARM64::branchSub32(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, int a5, int a6)
{
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  int v21;
  int v22;

  if (a5 >= 0x1000)
  {
    v20 = -a5;
    if (-a5 >= 0x1000)
    {
      if ((a5 & 0xFFF) != 0)
        goto LABEL_34;
      v22 = a5 >> 12;
      if (!HIBYTE(a5))
      {
        v9 = 1614807040;
        a5 >>= 12;
        goto LABEL_3;
      }
      v20 = -v22;
      if (-v22 >= 0x1000)
      {
LABEL_34:
        if (*(_BYTE *)(a2 + 212))
        {
          *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a2, a5, *(char *)(a2 + 272));
          JSC::MacroAssemblerARM64::branchSub32(a1, a2, a3, a4, 16, a6);
        }
        else
        {
          __break(0xC471u);
        }
        return;
      }
      v21 = 541065216;
    }
    else
    {
      v21 = 0x20000000;
    }
    v10 = a6 & 0x1F | (32 * a4) | v21 | (v20 << 10);
    v11 = 285212672;
    goto LABEL_4;
  }
  v9 = 1610612736;
LABEL_3:
  v10 = a6 & 0x1F | (32 * a4) | v9;
  v11 = ((a5 & 0xFFF) << 10) | 0x11000000;
LABEL_4:
  v12 = v10 | v11;
  v13 = *(_DWORD *)(a2 + 200);
  if (v13 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v13 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = v12;
  v14 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v14;
  if (*(_BYTE *)(a2 + 328))
  {
    for (; (signed int)v14 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v14)
    {
      if (v14 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
        v14 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = -721215457;
      v14 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  if (v14 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v14 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = a3 | 0x54000000;
  v15 = *(_DWORD *)(a2 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a2 + 200) = v15 + 4;
  v17 = v15 + 8;
  v18 = v15 + 4;
  if (v17 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56));
    v18 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v19 = -122;
  else
    v19 = -126;
  *(_DWORD *)a1 = v16;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 9) = a3;
  *(_WORD *)(a1 + 10) = -256;
}

void WebCore::FunctionCall::callAndBranchOnCondition(uint64_t a1, WebCore::FunctionCall **this)
{
  WebCore::FunctionCall *v4;
  unsigned int v5;
  void *v6;
  WebCore::FunctionCall *v7;
  WebCore::FunctionCall *v8;
  unsigned int i;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;

  WebCore::FunctionCall::prepareAndCall((WebCore::FunctionCall *)this);
  v4 = *this;
  v5 = *((_DWORD *)*this + 50);
  if (v5 + 4 > *((_DWORD *)*this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((WebCore::FunctionCall *)((char *)v4 + 56));
    v5 = *((_DWORD *)v4 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v4 + 7) + v5) = 1778384927;
  *((_DWORD *)v4 + 50) += 4;
  WebCore::StackAllocator::pop<16ul,WTF::CrashOnOverflow>(this[2], (uint64_t)(this + 8), (uint64_t)(this + 4));
  if (*((_DWORD *)this + 18))
  {
    if (*((_DWORD *)this + 19))
      *((_DWORD *)this + 19) = 0;
    v7 = this[8];
    if (this + 10 == (WebCore::FunctionCall **)v7)
    {
      if (v7)
        goto LABEL_8;
      goto LABEL_22;
    }
    if (!v7 || (this[8] = 0, *((_DWORD *)this + 18) = 0, WTF::fastFree(v7, v6), !this[8]))
    {
LABEL_22:
      this[8] = (WebCore::FunctionCall *)(this + 10);
      *((_DWORD *)this + 18) = 16;
    }
  }
LABEL_8:
  v8 = *this;
  if (*((_BYTE *)*this + 328))
  {
    for (i = *((_DWORD *)v8 + 50); (signed int)i < *((_DWORD *)v8 + 13); *((_DWORD *)v8 + 50) = i)
    {
      if (i + 4 > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((WebCore::FunctionCall *)((char *)v8 + 56));
        i = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + i) = -721215457;
      i = *((_DWORD *)v8 + 50) + 4;
    }
    *((_DWORD *)v8 + 52) = 0;
  }
  else
  {
    i = *((_DWORD *)v8 + 50);
  }
  if (i + 4 > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((WebCore::FunctionCall *)((char *)v8 + 56));
    i = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + i) = 1409286144;
  v10 = *((_DWORD *)v8 + 50);
  v11 = v10 + 4;
  *((_DWORD *)v8 + 50) = v10 + 4;
  v12 = v10 + 8;
  v13 = v10 + 4;
  if (v12 > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((WebCore::FunctionCall *)((char *)v8 + 56));
    v13 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v13) = -721215457;
  *((_DWORD *)v8 + 50) += 4;
  if (*((_BYTE *)v8 + 328))
    v14 = -122;
  else
    v14 = -126;
  *(_DWORD *)a1 = v11;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v14;
  *(_WORD *)(a1 + 9) = 0;
  *(_BYTE *)(a1 + 11) = -1;
}

void JSC::MacroAssemblerARM64::and64(uint64_t a1, JSC::ARM64LogicalImmediate *a2, int a3)
{
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;

  if ((unint64_t)a2 + 1 < 2)
    goto LABEL_4;
  v16 = 0;
  v15 = 0;
  if (JSC::ARM64LogicalImmediate::findBitRange<64u>((uint64_t)a2, (int *)&v16 + 1, (int *)&v16, &v15))
  {
    v12 = v16 - HIDWORD(v16) + 62;
    if (v15)
    {
      v13 = 63 - HIDWORD(v16);
    }
    else
    {
      v12 = HIDWORD(v16) - v16;
      v13 = -(int)v16 & 0x3F;
    }
    v14 = v12 | (v13 << 6) | 0x1000;
  }
  else
  {
    if ((_DWORD)a2 != HIDWORD(a2))
      goto LABEL_4;
    v14 = JSC::ARM64LogicalImmediate::create32(a2);
  }
  if (v14 != -1)
  {
    v6 = (32 * (a3 & 0x1F)) | (v14 << 10);
    v7 = a3 | 0x92000000;
    goto LABEL_6;
  }
LABEL_4:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x195946A40);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,long long>((_DWORD *)a1, (unint64_t)a2, *(char *)(a1 + 272));
  v6 = a3 & 0x1F | (32 * (a3 & 0x1F));
  v7 = -1978662912;
LABEL_6:
  v8 = v6 | v7;
  v11 = *(_DWORD *)(a1 + 200);
  v10 = (unsigned int *)(a1 + 200);
  v9 = v11;
  if (v11 + 4 > *(v10 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 - 36));
    v9 = *v10;
  }
  *(_DWORD *)(*((_QWORD *)v10 - 18) + v9) = v8;
  *v10 += 4;
}

char *WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (char *)v5 + 12 * *(unsigned int *)(a1 + 12);
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v9 = (unint64_t)a2;
      if (v9 <= v7)
      {
        v19 = *(WTF **)a1;
        return (char *)v19 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (v9 < 3)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_32;
      }
      if (v9 < 0x15555556)
      {
        v10 = 12 * v9;
        v11 = WTF::fastMalloc((WTF *)(12 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)a1 = v11;
LABEL_32:
        v20 = 0;
        do
        {
          v21 = v11 + v20;
          v22 = (char *)v5 + v20;
          *(_DWORD *)v21 = *(_DWORD *)((char *)v5 + v20);
          *(_QWORD *)(v21 + 4) = *(_QWORD *)((char *)v5 + v20 + 4);
          v20 += 12;
        }
        while (v22 + 12 != v6);
        v19 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v19 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v19 = *(WTF **)a1;
        }
        return (char *)v19 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x195946C88);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  if (v14 > v12)
  {
    v15 = *(_DWORD *)(a1 + 12);
    if (v14 < 3)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
      if (!v15)
        goto LABEL_25;
    }
    else
    {
      if (v14 >= 0x15555556)
        goto LABEL_41;
      v16 = 12 * v14;
      v17 = WTF::fastMalloc((WTF *)(12 * v14));
      *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a1 = v17;
      if (!v15)
        goto LABEL_25;
    }
    v18 = v5;
    do
    {
      *(_DWORD *)v17 = *(_DWORD *)v18;
      *(_QWORD *)(v17 + 4) = *(_QWORD *)((char *)v18 + 4);
      v18 = (WTF *)((char *)v18 + 12);
      v17 += 12;
    }
    while (v18 != (WTF *)((char *)v5 + 12 * v15));
LABEL_25:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  __int128 v14;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0xAAAAAAB)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 24 * v4;
    v9 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v11 = 24 * v7;
      v12 = v6;
      do
      {
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_BYTE *)(v9 + 16) = -1;
        v13 = (*(unsigned __int8 *)(v9 + 19) << 16) | 0xF0000;
        *(_WORD *)(v9 + 17) = 65;
        *(_BYTE *)(v9 + 19) = BYTE2(v13);
        *(_WORD *)(v9 + 20) &= 0xFC00u;
        v14 = *(_OWORD *)v12;
        *(_QWORD *)(v9 + 16) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v9 = v14;
        v9 += 24;
        v12 = (WTF *)((char *)v12 + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WTF::Vector<JSC::ARM64Registers::RegisterID,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::RegisterID&>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;
  uint64_t v4;

  result = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

WTF *WTF::VectorMover<false,WebCore::SelectorCompiler::BacktrackingLevel>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  WTF *v6;
  WTF *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF *v24;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
      *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
      *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
      *(_QWORD *)(a3 + 24) = a3 + 40;
      *(_QWORD *)(a3 + 32) = 2;
      v6 = (WTF *)*((_QWORD *)v5 + 3);
      v7 = (WTF *)((char *)v5 + 40);
      if (v6 == (WTF *)((char *)v5 + 40))
      {
        v9 = *((_DWORD *)v5 + 9);
        if (v9)
        {
          v10 = 0;
          v11 = (uint64_t)v6 + 12 * v9;
          do
          {
            v12 = a3 + v10;
            v13 = (uint64_t)v6 + v10;
            *(_DWORD *)(v12 + 40) = *(_DWORD *)((char *)v6 + v10);
            *(_QWORD *)(v12 + 44) = *(_QWORD *)((char *)v6 + v10 + 4);
            v10 += 12;
          }
          while (v13 + 12 != v11);
        }
      }
      else
      {
        *((_QWORD *)v5 + 3) = v7;
        *(_QWORD *)(a3 + 24) = v6;
        v8 = *((_DWORD *)v5 + 8);
        *((_DWORD *)v5 + 8) = 2;
        *(_DWORD *)(a3 + 32) = v8;
      }
      v14 = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 9) = 0;
      *(_DWORD *)(a3 + 36) = v14;
      *(_DWORD *)(a3 + 64) = *((_DWORD *)v5 + 16);
      *(_QWORD *)(a3 + 72) = a3 + 88;
      *(_QWORD *)(a3 + 80) = 2;
      v15 = (WTF *)*((_QWORD *)v5 + 9);
      v16 = (WTF *)((char *)v5 + 88);
      if (v15 == (WTF *)((char *)v5 + 88))
      {
        v18 = *((_DWORD *)v5 + 21);
        if (v18)
        {
          v19 = 0;
          v20 = (uint64_t)v15 + 12 * v18;
          do
          {
            v21 = a3 + v19;
            v22 = (uint64_t)v15 + v19;
            *(_DWORD *)(v21 + 88) = *(_DWORD *)((char *)v15 + v19);
            *(_QWORD *)(v21 + 92) = *(_QWORD *)((char *)v15 + v19 + 4);
            v19 += 12;
          }
          while (v22 + 12 != v20);
        }
      }
      else
      {
        *((_QWORD *)v5 + 9) = v16;
        *(_QWORD *)(a3 + 72) = v15;
        v17 = *((_DWORD *)v5 + 20);
        *((_DWORD *)v5 + 20) = 2;
        *(_DWORD *)(a3 + 80) = v17;
      }
      v23 = *((_DWORD *)v5 + 21);
      *((_DWORD *)v5 + 21) = 0;
      *(_DWORD *)(a3 + 84) = v23;
      v24 = (WTF *)*((_QWORD *)v5 + 9);
      if (v16 != v24 && v24 != 0)
      {
        *((_QWORD *)v5 + 9) = 0;
        *((_DWORD *)v5 + 20) = 0;
        WTF::fastFree(v24, a2);
      }
      result = (WTF *)*((_QWORD *)v5 + 3);
      if (v7 != result && result != 0)
      {
        *((_QWORD *)v5 + 3) = 0;
        *((_DWORD *)v5 + 8) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      a3 += 112;
      v5 = (WTF *)((char *)v5 + 112);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::VectorBuffer<std::pair<int,int>,32ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 >= 0x21)
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  else
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 32;
  }
  return result;
}

uint64_t WTF::Vector<std::pair<int,int>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), (unint64_t)v5 + 8 * v6 <= a3))
  {
    v12 = *(unsigned int *)(a1 + 8);
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 > a2)
      a2 = v14;
    if (a2 > v12)
    {
      v15 = *(unsigned int *)(a1 + 12);
      WTF::VectorBuffer<std::pair<int,int>,32ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
      memcpy(*(void **)a1, v5, 8 * v15);
      if ((void *)(a1 + 16) != v5)
      {
        if (v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v16);
        }
      }
    }
  }
  else
  {
    v7 = (uint64_t)(a3 - (_QWORD)v5) >> 3;
    v8 = *(unsigned int *)(a1 + 8);
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    if (a2 > v8)
    {
      WTF::VectorBuffer<std::pair<int,int>,32ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
      memcpy(*(void **)a1, v5, 8 * v6);
      if ((void *)(a1 + 16) != v5)
      {
        if (v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v11);
        }
      }
    }
    return *(_QWORD *)a1 + 8 * v7;
  }
  return v3;
}

WTF *WTF::Vector<std::pair<int,int>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, unint64_t a2)
{
  unint64_t v2;
  int v3;
  WTF *v4;
  unint64_t v5;
  WTF *v6;

  v2 = *((unsigned int *)result + 2);
  if (v2 > a2)
  {
    v3 = a2;
    v4 = result;
    v5 = *((unsigned int *)result + 3);
    if (v5 > a2)
    {
      *((_DWORD *)result + 3) = a2;
      LODWORD(v5) = a2;
    }
    v6 = *(WTF **)result;
    if (a2)
    {
      if (v2 >= a2)
        v2 = a2;
      if (v2 >= 0x21)
      {
        *((_DWORD *)result + 2) = a2;
        result = (WTF *)WTF::fastRealloc(v6, (void *)(8 * a2));
        *(_QWORD *)v4 = result;
        return result;
      }
      if (a2 >= 0x21)
      {
        if (a2 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        result = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
        *((_DWORD *)v4 + 2) = v3;
        *(_QWORD *)v4 = result;
      }
      else
      {
        result = (WTF *)((char *)result + 16);
        *(_QWORD *)v4 = (char *)v4 + 16;
        *((_DWORD *)v4 + 2) = 32;
      }
      if (result != v6)
        result = (WTF *)memcpy(result, v6, 8 * v5);
    }
    if ((WTF *)((char *)v4 + 16) != v6 && v6 != 0)
    {
      if (*(WTF **)v4 == v6)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
      }
      result = (WTF *)WTF::fastFree(v6, (void *)a2);
    }
    if (!*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = (char *)v4 + 16;
      *((_DWORD *)v4 + 2) = 32;
    }
  }
  return result;
}

_BYTE *WebCore::AbortController::abort(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _DWORD *v6;
  uint64_t v7;
  _BYTE *result;
  void *v9;
  bmalloc::api *v10;
  void *v11;
  _DWORD *v12;

  v3 = a3;
  if (a3 == 10)
  {
    WebCore::DOMException::create(0x10u, MEMORY[0x1E0CBF738], (uint64_t *)&v12);
    v3 = WebCore::wrap<WebCore::DOMException>(a2, a2, v12);
    v6 = v12;
    v12 = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
  }
  v7 = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(v7 + 24);
  result = WebCore::AbortSignal::signalAbort((_BYTE *)v7, v3);
  if (*(_DWORD *)(v7 + 24) == 1)
  {
    WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v7, v9);
    return (_BYTE *)bmalloc::api::isoDeallocate(v10, v11);
  }
  else
  {
    --*(_DWORD *)(v7 + 24);
  }
  return result;
}

_BYTE *WebCore::AbortSignal::signalAbort(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  WebCore *Allocator;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL4 v20;
  _DWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  WebCore::AbortSignal *v26;
  bmalloc::api *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE **v36;
  unint64_t v37;
  uint64_t v38;

  if (!result[156])
  {
    v3 = result;
    result[156] = 1;
    Allocator = (WebCore *)WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteAllNodes((uint64_t)(result + 72), (void *)a2);
    v6 = *((_QWORD *)v3 + 9);
    if (v6)
    {
      *((_QWORD *)v3 + 9) = 0;
      Allocator = (WebCore *)WTF::fastFree((WTF *)(v6 - 16), v5);
      v6 = *((_QWORD *)v3 + 9);
      *((_QWORD *)v3 + 10) = 0;
      *((_QWORD *)v3 + 11) = 0;
      *((_DWORD *)v3 + 24) = 0;
      if (v6)
      {
        LODWORD(v6) = *(_DWORD *)(v6 - 12);
        if (v6 > 0x7FFFFFFE)
          LODWORD(v6) = 0x7FFFFFFF;
      }
    }
    else
    {
      *((_QWORD *)v3 + 10) = 0;
      *((_QWORD *)v3 + 11) = 0;
      *((_DWORD *)v3 + 24) = 0;
    }
    *((_DWORD *)v3 + 25) = 2 * v6;
    if ((a2 & 0xFFFE000000000002) != 0)
    {
      *((_QWORD *)v3 + 17) = a2;
      v29 = *((_QWORD *)v3 + 18);
      if (v29)
      {
        *(_QWORD *)(v29 + 8) = 3;
        *((_QWORD *)v3 + 18) = 0;
      }
    }
    else
    {
      Allocator = 0;
      *((_QWORD *)v3 + 17) = 0;
      if (a2)
      {
        if ((a2 & 8) != 0)
          v37 = (a2 - 112) | 1;
        else
          v37 = a2 & 0xFFFFFFFFFFFFC000;
        if ((v37 & 1) != 0)
          v38 = v37 + 47;
        else
          v38 = *(_QWORD *)v37 + 32;
        Allocator = *(WebCore **)(v38 + 16);
        if (!Allocator)
          Allocator = (WebCore *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v38 + 16) = *(_QWORD *)Allocator;
        *(_QWORD *)Allocator = a2;
        *((_QWORD *)Allocator + 1) = 0;
        *((_QWORD *)Allocator + 2) = 0;
      }
      __dmb(0xAu);
      v7 = *((_QWORD *)v3 + 18);
      *((_QWORD *)v3 + 18) = Allocator;
      if (v7)
        *(_QWORD *)(v7 + 8) = 3;
    }
    v8 = (WTF *)*((_QWORD *)v3 + 6);
    v9 = *((unsigned int *)v3 + 15);
    *((_QWORD *)v3 + 6) = 0;
    *((_QWORD *)v3 + 7) = 0;
    v10 = 16 * v9;
    if ((_DWORD)v9)
    {
      v11 = (uint64_t *)((char *)v8 + 8);
      v12 = 16 * v9;
      do
      {
        v13 = *v11;
        v11 += 2;
        Allocator = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2);
        v12 -= 16;
      }
      while (v12);
    }
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
      v15 = WebCore::threadGlobalDataSlow(Allocator);
    v16 = *(_QWORD *)(v15 + 40);
    if (!v16)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
      v16 = *(_QWORD *)(v15 + 40);
    }
    v17 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
    *(_QWORD *)v17 = off_1E33A4B48;
    *(_QWORD *)(v17 + 8) = 0;
    v19 = *(_DWORD *)(v17 + 20) & 0xFFC00000 | 0x1E8200;
    v20 = *(_QWORD *)(v16 + 64) != 0;
    *(_DWORD *)(v17 + 16) = 1;
    *(_DWORD *)(v17 + 20) = v19 | v20;
    v21 = *(_DWORD **)(v16 + 64);
    if (v21)
      *v21 += 2;
    *(_QWORD *)(v17 + 24) = v21;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = v18;
    *(_QWORD *)(v17 + 64) = 0;
    result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v3, (WebCore::Event *)v17);
    if (*(_DWORD *)(v17 + 16) == 1)
      result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    else
      --*(_DWORD *)(v17 + 16);
    v24 = *((_QWORD *)v3 + 13);
    v23 = (_QWORD *)*((_QWORD *)v3 + 14);
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    if (v23)
    {
      v25 = v23;
      while (1)
      {
        v26 = *(WebCore::AbortSignal **)(*v25 + 8);
        if (v26)
          break;
        v25 = (_QWORD *)v25[2];
        if (!v25)
          goto LABEL_42;
      }
LABEL_28:
      ++*((_DWORD *)v26 + 6);
      WebCore::AbortSignal::signalAbort(v26, a2);
      if (*((_DWORD *)v26 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v26, v22);
        bmalloc::api::isoDeallocate(v27, v28);
      }
      else
      {
        --*((_DWORD *)v26 + 6);
      }
      while (1)
      {
        v25 = (_QWORD *)v25[2];
        if (!v25)
          break;
        v26 = *(WebCore::AbortSignal **)(*v25 + 8);
        if (v26)
          goto LABEL_28;
      }
      do
      {
LABEL_42:
        v32 = (_QWORD *)v23[2];
        v33 = *v23;
        *v23 = 0;
        if (v33)
        {
          do
          {
            v34 = __ldaxr((unsigned int *)v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, (unsigned int *)v33));
          if (!v35)
          {
            atomic_store(1u, (unsigned int *)v33);
            v30 = *(unsigned int *)(v33 + 28);
            if ((_DWORD)v30)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v33 + 16), (WTF::StringImpl *)(*(_QWORD *)(v33 + 16) + 32 * v30));
            v31 = *(WTF **)(v33 + 16);
            if (v31)
            {
              *(_QWORD *)(v33 + 16) = 0;
              *(_DWORD *)(v33 + 24) = 0;
              WTF::fastFree(v31, v22);
            }
            WTF::fastFree((WTF *)v33, v22);
          }
        }
        result = (_BYTE *)WTF::fastFree((WTF *)v23, v22);
        v23 = v32;
      }
      while (v32);
    }
    if (v24)
    {
      result = (_BYTE *)WTF::fastFree((WTF *)(v24 - 16), v22);
      if ((_DWORD)v9)
      {
LABEL_48:
        v36 = (_BYTE **)((char *)v8 + 8);
        do
        {
          result = *v36;
          *v36 = 0;
          if (result)
            result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
          v36 += 2;
          v10 -= 16;
        }
        while (v10);
      }
    }
    else if ((_DWORD)v9)
    {
      goto LABEL_48;
    }
    if (v8)
      return (_BYTE *)WTF::fastFree(v8, v22);
  }
  return result;
}

void *WebCore::AbortSignal::bisoHeap(WebCore::AbortSignal *this)
{
  return &WebCore::AbortSignal::bisoHeap(void)::heap;
}

uint64_t WebCore::AbortSignal::operator new(uint64_t this)
{
  if (this == 160)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::AbortSignal::abort@<D0>(uint64_t a1@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v4;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *Allocator;
  uint64_t v11;
  double result;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v4 = a3;
  if (a3 == 10)
  {
    WebCore::DOMException::create(0x10u, MEMORY[0x1E0CBF738], (uint64_t *)&v15);
    v4 = WebCore::wrap<WebCore::DOMException>(a1, a1, v15);
    v8 = v15;
    v15 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  v9 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v9 + 24) = 1;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = &unk_1E33A4FC0;
  *(_QWORD *)(v9 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v9 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v9 + 32), a2);
  *(_QWORD *)v9 = off_1E33A0468;
  *(_QWORD *)(v9 + 32) = &unk_1E33A04E0;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_QWORD *)(v9 + 144) = 0;
  if ((v4 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)(v9 + 136) = v4;
  }
  else
  {
    if (v4)
    {
      if ((v4 & 8) != 0)
        v13 = (v4 - 112) | 1;
      else
        v13 = v4 & 0xFFFFFFFFFFFFC000;
      if ((v13 & 1) != 0)
        v14 = v13 + 47;
      else
        v14 = *(_QWORD *)v13 + 32;
      Allocator = *(_QWORD **)(v14 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v14 + 16) = *Allocator;
      *Allocator = v4;
      Allocator[1] = 0;
      Allocator[2] = 0;
    }
    else
    {
      Allocator = 0;
    }
    __dmb(0xAu);
    v11 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)(v9 + 144) = Allocator;
    if (v11)
      *(_QWORD *)(v11 + 8) = 3;
  }
  *(_DWORD *)(v9 + 152) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)(v9 + 156) = 1;
  *a4 = v9;
  return result;
}

_QWORD *WebCore::AbortSignal::timeout@<X0>(WebCore::AbortSignal *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  _QWORD *v9;

  v6 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &unk_1E33A4FC0;
  *(_QWORD *)(v6 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 32), this);
  *(_QWORD *)v6 = off_1E33A0468;
  *(_QWORD *)(v6 + 32) = &unk_1E33A04E0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_QWORD *)(v6 + 136) = 10;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0x10000000000;
  *a3 = v6;
  ++*(_DWORD *)(v6 + 24);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E33A08C0;
  v7[1] = v6;
  v9 = v7;
  WebCore::DOMTimer::install(this, (uint64_t *)&v9, 0, (double)(unint64_t)a2 / 1000.0);
  result = v9;
  v9 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_BYTE *WebCore::AbortSignal::any@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _BYTE *result;
  unint64_t v8;
  unint64_t v9;
  WebCore::AbortSignal **v10;
  WebCore::AbortSignal *v11;
  uint64_t v12;
  WebCore::AbortSignal *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &unk_1E33A4FC0;
  *(_QWORD *)(v6 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v6 + 40) = 0;
  result = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v6 + 32), a1);
  *(_QWORD *)v6 = off_1E33A0468;
  *(_QWORD *)(v6 + 32) = &unk_1E33A04E0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 136) = 10;
  *a3 = v6;
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(WebCore::AbortSignal ***)a2;
    while (1)
    {
      v11 = v10[v9];
      if (*((_BYTE *)v11 + 156))
        break;
      if (v8 == ++v9)
      {
        *(_BYTE *)(v6 + 159) = 1;
        v12 = 8 * v8;
        do
        {
          v13 = *v10++;
          result = WebCore::AbortSignal::addSourceSignal((WebCore::AbortSignal *)v6, v13);
          v12 -= 8;
        }
        while (v12);
        return result;
      }
    }
    if (v9 >= v8)
    {
      __break(0xC471u);
    }
    else
    {
      v14 = *((_QWORD *)v11 + 17);
      if (!v14)
      {
        v15 = *((_QWORD *)v11 + 18);
        if (v15 && *(_QWORD *)v15)
        {
          if ((*(_BYTE *)(v15 + 8) & 3) != 0)
            v14 = 10;
          else
            v14 = *(_QWORD *)v15;
        }
        else
        {
          v14 = 10;
        }
      }
      return WebCore::AbortSignal::signalAbort((_BYTE *)v6, v14);
    }
  }
  else
  {
    *(_BYTE *)(v6 + 159) = 1;
  }
  return result;
}

WebCore::AbortSignal *WebCore::AbortSignal::addSourceSignal(WebCore::AbortSignal *this, WebCore::AbortSignal *a2)
{
  WebCore::AbortSignal *v3;
  _QWORD *v4;
  WebCore::AbortSignal *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;
  _BYTE v9[24];

  v3 = this;
  if (*((_BYTE *)a2 + 159))
  {
    v4 = (_QWORD *)*((_QWORD *)a2 + 10);
    if (v4)
    {
      while (1)
      {
        v5 = *(WebCore::AbortSignal **)(*v4 + 8);
        if (v5)
          break;
        v4 = (_QWORD *)v4[2];
        if (!v4)
          return this;
      }
LABEL_6:
      ++*((_DWORD *)v5 + 6);
      this = (WebCore::AbortSignal *)WebCore::AbortSignal::addSourceSignal(v3, v5);
      if (*((_DWORD *)v5 + 6) == 1)
      {
        WebCore::AbortSignal::~AbortSignal(v5, v6);
        this = (WebCore::AbortSignal *)bmalloc::api::isoDeallocate(v7, v8);
      }
      else
      {
        --*((_DWORD *)v5 + 6);
      }
      while (1)
      {
        v4 = (_QWORD *)v4[2];
        if (!v4)
          break;
        v5 = *(WebCore::AbortSignal **)(*v4 + 8);
        if (v5)
        {
          ++*((_DWORD *)a2 + 24);
          goto LABEL_6;
        }
      }
      ++*((_DWORD *)a2 + 24);
    }
  }
  else
  {
    WTF::WeakListHashSet<WebCore::AbortSignal,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::AbortSignal>((uint64_t)v9, (uint64_t)this + 72, (uint64_t)a2);
    return (WebCore::AbortSignal *)WTF::WeakListHashSet<WebCore::AbortSignal,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::AbortSignal>((uint64_t)v9, (uint64_t)a2 + 104, (uint64_t)v3);
  }
  return this;
}

void WebCore::AbortSignal::~AbortSignal(WebCore::AbortSignal *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;

  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 18) = 0;
  }
  v4 = (WTF *)*((_QWORD *)this + 14);
  while (v4)
  {
    v21 = v4;
    v4 = (WTF *)*((_QWORD *)v4 + 2);
    v22 = *(unsigned int **)v21;
    *(_QWORD *)v21 = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v33 = v21;
        v35 = (WTF *)v22;
        atomic_store(1u, v22);
        v25 = v22[7];
        if ((_DWORD)v25)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v35 + 2), (WTF::StringImpl *)(*((_QWORD *)v35 + 2) + 32 * v25));
        v26 = (WTF *)*((_QWORD *)v35 + 2);
        if (v26)
        {
          *((_QWORD *)v35 + 2) = 0;
          *((_DWORD *)v35 + 6) = 0;
          WTF::fastFree(v26, a2);
        }
        WTF::fastFree(v35, a2);
        v21 = v33;
      }
    }
    WTF::fastFree(v21, a2);
  }
  v5 = *((_QWORD *)this + 13);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = (WTF *)*((_QWORD *)this + 10);
  while (v6)
  {
    v27 = v6;
    v6 = (WTF *)*((_QWORD *)v6 + 2);
    v28 = *(unsigned int **)v27;
    *(_QWORD *)v27 = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v34 = v27;
        v36 = (WTF *)v28;
        atomic_store(1u, v28);
        v31 = v28[7];
        if ((_DWORD)v31)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v36 + 2), (WTF::StringImpl *)(*((_QWORD *)v36 + 2) + 32 * v31));
        v32 = (WTF *)*((_QWORD *)v36 + 2);
        if (v32)
        {
          *((_QWORD *)v36 + 2) = 0;
          *((_DWORD *)v36 + 6) = 0;
          WTF::fastFree(v32, a2);
        }
        WTF::fastFree(v36, a2);
        v27 = v34;
      }
    }
    WTF::fastFree(v27, a2);
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v17 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v17)
      {
        v20 = v8;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v17));
        v8 = v20;
      }
      v18 = *(WTF **)(v8 + 16);
      if (v18)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        v19 = v8;
        WTF::fastFree(v18, a2);
        v8 = v19;
      }
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = *((unsigned int *)this + 15);
  if ((_DWORD)v11)
  {
    v12 = 16 * v11;
    v13 = (uint64_t *)(*((_QWORD *)this + 6) + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v15 = (WTF *)*((_QWORD *)this + 6);
  if (v15)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v15, a2);
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::AbortSignal *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v16);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AbortSignal::~AbortSignal(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::AbortSignal::~AbortSignal(WebCore::AbortSignal *this, void *a2)
{
  WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WTF::WeakListHashSet<WebCore::AbortSignal,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::AbortSignal>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t result;
  void *v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;

  v6 = *(_DWORD *)(a2 + 28);
  v7 = *(_DWORD *)(a2 + 24) + 1;
  *(_DWORD *)(a2 + 24) = v7;
  if (v7 > v6)
  {
    v8 = *(WTF **)(a2 + 8);
    if (v8)
    {
      do
      {
        v9 = (WTF *)*((_QWORD *)v8 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v8 + 8))
          WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a2, (void *)a2, v8);
        v8 = v9;
      }
      while (v9);
    }
    *(_DWORD *)(a2 + 24) = 0;
    v10 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
      if (v10 > 0x7FFFFFFE)
        LODWORD(v10) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a2 + 28) = 2 * v10;
  }
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 8) = a3;
    *(_BYTE *)(v11 + 32) = 0;
    v13 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v13 & 0xFFFF000000000000 | v11;
    v14 = v13 & 0xFFFFFFFFFFFFLL;
    if ((v13 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)v14);
        v29 = *(unsigned int *)(v14 + 28);
        if ((_DWORD)v29)
        {
          v34 = v14;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v29));
          v14 = v34;
        }
        v30 = *(WTF **)(v14 + 16);
        if (v30)
        {
          *(_QWORD *)(v14 + 16) = 0;
          *(_DWORD *)(v14 + 24) = 0;
          v33 = v14;
          WTF::fastFree(v30, v12);
          v14 = v33;
        }
        WTF::fastFree((WTF *)v14, v12);
      }
    }
  }
  v17 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v18 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v18 + 1, (unsigned int *)v17));
  do
    v19 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v19 + 1, (unsigned int *)v17));
  v35 = (WTF *)v17;
  result = (uint64_t)WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::add((uint64_t *)a2, (uint64_t *)&v35, a1);
  v22 = v35;
  v35 = 0;
  if (!v22)
    goto LABEL_20;
  do
  {
    v23 = __ldaxr((unsigned int *)v22);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, (unsigned int *)v22));
  if (v24)
  {
LABEL_20:
    if (!v17)
      return result;
    goto LABEL_21;
  }
  atomic_store(1u, (unsigned int *)v22);
  v31 = *((unsigned int *)v22 + 7);
  if ((_DWORD)v31)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v22 + 2), (WTF::StringImpl *)(*((_QWORD *)v22 + 2) + 32 * v31));
  v32 = (WTF *)*((_QWORD *)v22 + 2);
  if (v32)
  {
    *((_QWORD *)v22 + 2) = 0;
    *((_DWORD *)v22 + 6) = 0;
    WTF::fastFree(v32, v21);
  }
  result = WTF::fastFree(v22, v21);
  if (v17)
  {
    do
    {
LABEL_21:
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v27 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v27)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v27));
      v28 = *(WTF **)(v17 + 16);
      if (v28)
      {
        *(_QWORD *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        WTF::fastFree(v28, v21);
      }
      return WTF::fastFree((WTF *)v17, v21);
    }
  }
  return result;
}

_BYTE *WebCore::AbortSignal::signalFollow(_BYTE *this, WebCore::AbortSignal *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;

  if (!this[156])
  {
    v3 = (uint64_t)this;
    if (*((_BYTE *)a2 + 156))
    {
      v4 = *((_QWORD *)a2 + 17);
      if (!v4)
      {
        v5 = *((_QWORD *)a2 + 18);
        if (v5 && *(_QWORD *)v5)
        {
          if ((*(_BYTE *)(v5 + 8) & 3) != 0)
            v4 = 10;
          else
            v4 = *(_QWORD *)v5;
        }
        else
        {
          v4 = 10;
        }
      }
      return WebCore::AbortSignal::signalAbort(this, v4);
    }
    else
    {
      v6 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
      v8 = v6;
      if (v6)
      {
        do
          v9 = __ldaxr(v6);
        while (__stlxr(v9 + 1, v6));
      }
      v10 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = v8;
      if (v10)
      {
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v23 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v23)
          {
            v26 = v10;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v23));
            v10 = v26;
          }
          v24 = *(WTF **)(v10 + 16);
          if (v24)
          {
            *(_QWORD *)(v10 + 16) = 0;
            *(_DWORD *)(v10 + 24) = 0;
            v25 = v10;
            WTF::fastFree(v24, v7);
            v10 = v25;
          }
          WTF::fastFree((WTF *)v10, v7);
        }
      }
      v13 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v3);
      v14 = v13;
      if (v13)
      {
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 + 1, v13));
      }
      this = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)this = &off_1E33A08E8;
      *((_QWORD *)this + 1) = v14;
      v16 = *((_DWORD *)a2 + 38) + 1;
      *((_DWORD *)a2 + 38) = v16;
      v27 = v16;
      v28 = this;
      v17 = *((unsigned int *)a2 + 15);
      if ((_DWORD)v17 == *((_DWORD *)a2 + 14))
      {
        v18 = WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a2 + 12, v17 + 1, (unint64_t)&v27);
        v19 = *((unsigned int *)a2 + 15);
        v20 = *((_QWORD *)a2 + 6) + 16 * v19;
        *(_DWORD *)v20 = *v18;
        v21 = *((_QWORD *)v18 + 1);
        *((_QWORD *)v18 + 1) = 0;
        *(_QWORD *)(v20 + 8) = v21;
        this = v28;
        *((_DWORD *)a2 + 15) = v19 + 1;
        v28 = 0;
        if (this)
          return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
      }
      else
      {
        v22 = *((_QWORD *)a2 + 6) + 16 * v17;
        *(_DWORD *)v22 = v16;
        *(_QWORD *)(v22 + 8) = this;
        *((_DWORD *)a2 + 15) = v17 + 1;
      }
    }
  }
  return this;
}

uint64_t WebCore::AbortSignal::addAlgorithm(unsigned int *a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v3 = a1[38] + 1;
  a1[38] = v3;
  v13 = v3;
  v4 = *a2;
  *a2 = 0;
  v14 = v4;
  v5 = a1[15];
  if ((_DWORD)v5 == a1[14])
  {
    v6 = WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 12, v5 + 1, (unint64_t)&v13);
    v7 = a1[15];
    v8 = *((_QWORD *)a1 + 6) + 16 * v7;
    *(_DWORD *)v8 = *v6;
    v9 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    *(_QWORD *)(v8 + 8) = v9;
    v10 = v14;
    a1[15] = v7 + 1;
    v14 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    v12 = *((_QWORD *)a1 + 6) + 16 * v5;
    *(_DWORD *)v12 = v3;
    *(_QWORD *)(v12 + 8) = v4;
    a1[15] = v5 + 1;
  }
  return a1[38];
}

WebCore::EventNames **WebCore::AbortSignal::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 64);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 158) = v6;
  return this;
}

uint64_t WebCore::AbortSignal::addAbortAlgorithmToSignal(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 156))
  {
    v4 = *(_QWORD *)(a1 + 136);
    if (!v4)
    {
      v5 = *(_QWORD *)(a1 + 144);
      if (v5 && *(_QWORD *)v5)
      {
        if ((*(_BYTE *)(v5 + 8) & 3) != 0)
          v4 = 10;
        else
          v4 = *(_QWORD *)v5;
      }
      else
      {
        v4 = 10;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v4);
    return 0;
  }
  else
  {
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E33A0910;
    v7[1] = v3;
    v8 = *(_DWORD *)(a1 + 152) + 1;
    *(_DWORD *)(a1 + 152) = v8;
    v16 = v8;
    v17 = v7;
    v9 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 56))
    {
      v10 = WTF::Vector<std::pair<unsigned int,WTF::Function<void ()(JSC::JSValue)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 48), v9 + 1, (unint64_t)&v16);
      v11 = *(unsigned int *)(a1 + 60);
      v12 = *(_QWORD *)(a1 + 48) + 16 * v11;
      *(_DWORD *)v12 = *v10;
      v13 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)(v12 + 8) = v13;
      v14 = v17;
      *(_DWORD *)(a1 + 60) = v11 + 1;
      v17 = 0;
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 48) + 16 * v9;
      *(_DWORD *)v15 = v8;
      *(_QWORD *)(v15 + 8) = v7;
      *(_DWORD *)(a1 + 60) = v9 + 1;
    }
    return *(unsigned int *)(a1 + 152);
  }
}

uint64_t WebCore::makeSimpleRange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  *(_DWORD *)(v6 + 24) += 2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = result;
  return result;
}

WebCore::ActiveDOMCallback *WebCore::ActiveDOMCallback::ActiveDOMCallback(WebCore::ActiveDOMCallback *this, WebCore::ScriptExecutionContext *a2)
{
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  *(_QWORD *)this = &off_1E33A0508;
  return this;
}

{
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  *(_QWORD *)this = &off_1E33A0508;
  return this;
}

void WebCore::ActiveDOMCallback::~ActiveDOMCallback(WebCore::ActiveDOMCallback *this, void *a2)
{
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::ActiveDOMCallback::activeDOMObjectsAreSuspended(WebCore::ActiveDOMCallback *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  _BOOL8 v5;
  int v7;
  _DWORD *v8;
  int v9;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v3 == 1)
    {
      v7 = *(_DWORD *)(v2 + 216);
      *(_DWORD *)(v2 + 216) = v7 + 1;
      v5 = *(_BYTE *)(v2 + 179) != 0;
      if (v7)
        *(_DWORD *)(v2 + 216) = v7;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
    }
    else if (v3 == 2)
    {
      v9 = *(_DWORD *)(v2 + 216);
      v8 = (_DWORD *)(v2 + 216);
      *v8 = v9 + 1;
      v5 = *((_BYTE *)v8 - 37) != 0;
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(v8);
    }
    else
    {
      return *(_BYTE *)(v2 + 179) != 0;
    }
  }
  else
  {
    v4 = *(_DWORD *)(v2 - 264);
    *(_DWORD *)(v2 - 264) = v4 + 2;
    v5 = *(_BYTE *)(v2 + 179) != 0;
    if (v4)
    {
      *(_DWORD *)(v2 - 264) = v4;
    }
    else if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288));
    }
  }
  return v5;
}

BOOL WebCore::ActiveDOMCallback::activeDOMObjectAreStopped(WebCore::ActiveDOMCallback *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _BOOL8 v6;
  int v8;
  _DWORD *v9;
  int v10;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 1;
  v4 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v4 == 1)
    {
      v8 = *(_DWORD *)(v3 + 216);
      *(_DWORD *)(v3 + 216) = v8 + 1;
      v6 = *(_BYTE *)(v3 + 180) != 0;
      if (v8)
        *(_DWORD *)(v3 + 216) = v8;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
    }
    else if (v4 == 2)
    {
      v10 = *(_DWORD *)(v3 + 216);
      v9 = (_DWORD *)(v3 + 216);
      *v9 = v10 + 1;
      v6 = *((_BYTE *)v9 - 36) != 0;
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(v9);
    }
    else
    {
      return *(_BYTE *)(v3 + 180) != 0;
    }
  }
  else
  {
    v5 = *(_DWORD *)(v3 - 264);
    *(_DWORD *)(v3 - 264) = v5 + 2;
    v6 = *(_BYTE *)(v3 + 180) != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 264) = v5;
    }
    else if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
    }
  }
  return v6;
}

uint64_t WebCore::ActiveDOMObject::ActiveDOMObject(WebCore::ActiveDOMObject *this, WebCore::Document *a2)
{
  WebCore::Document *v2;
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t result;
  uint64_t v7;
  WebCore::ActiveDOMObject *v8;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 88);
  if (v4)
  {
    v5 = *(WebCore::Document **)(v4 + 8);
    if (v5)
      v2 = v5;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::Document *)((char *)v2 + 192));
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v2 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v8 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v2 + 40, (uint64_t *)&v8, (uint64_t)&v7);
    return (uint64_t)this;
  }
  return result;
}

void WebCore::ActiveDOMObject::~ActiveDOMObject(WebCore::ActiveDOMObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_1E33A0540;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v5 == 1 || v5 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject((WebCore::ScriptExecutionContext *)(v4 - 96), this);
      v6 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v6 == 1)
        {
          if (*(_DWORD *)(v4 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 40))(v4 - 96);
          else
            --*(_DWORD *)(v4 + 216);
        }
        else if (v6 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
        }
      }
      else if (*(_DWORD *)(v4 - 264) == 2)
      {
        if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288));
      }
      else
      {
        *(_DWORD *)(v4 - 264) -= 2;
      }
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

unsigned int *WebCore::ActiveDOMObject::didMoveToNewDocument(WebCore::ActiveDOMObject *this, WebCore::Document *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  int v8;
  uint64_t v9;
  WebCore::Document *v10;
  unsigned int *result;
  void *v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v6 == 1 || v6 == 2)
          ++*(_DWORD *)(v5 + 216);
      }
      else
      {
        *(_DWORD *)(v5 - 264) += 2;
      }
      WebCore::ScriptExecutionContext::willDestroyActiveDOMObject((WebCore::ScriptExecutionContext *)(v5 - 96), this);
      v8 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v8 == 1)
        {
          if (*(_DWORD *)(v5 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 40))(v5 - 96);
          else
            --*(_DWORD *)(v5 + 216);
        }
        else if (v8 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
        }
      }
      else if (*(_DWORD *)(v5 - 264) == 2)
      {
        if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v7);
      }
      else
      {
        *(_DWORD *)(v5 - 264) -= 2;
      }
    }
  }
  v9 = *((_QWORD *)a2 + 88);
  if (v9)
  {
    v10 = *(WebCore::Document **)(v9 + 8);
    if (v10)
      a2 = v10;
  }
  *((_DWORD *)a2 + 6) += 2;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::Document *)((char *)a2 + 192));
  result = (unsigned int *)WebCore::ScriptExecutionContext::didCreateActiveDOMObject((WebCore::Document *)((char *)a2 + 192), this);
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(a2, v12);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

BOOL WebCore::ActiveDOMObject::isContextStopped(WebCore::ActiveDOMObject *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  return !v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0 || *(_BYTE *)(v2 + 180) != 0;
}

BOOL WebCore::ActiveDOMObject::isAllowedToRunScript(WebCore::ActiveDOMObject *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && !*(_BYTE *)(v2 + 180) && *(_BYTE *)(v2 + 179) == 0;
}

unsigned int *WebCore::ActiveDOMObject::queueTaskInEventLoop(unsigned int *result, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v3 = *((_QWORD *)result + 1);
  if (v3)
  {
    result = *(unsigned int **)(v3 + 8);
    if (result)
    {
      v6 = (*(uint64_t (**)(unsigned int *))(*((_QWORD *)result - 12) + 104))(result - 24);
      return WebCore::EventLoopTaskGroup::queueTask(v6, a2, a3);
    }
  }
  return result;
}

_QWORD *WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(_QWORD *result, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;

  v4 = result[1];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v9 = result;
      v10 = v5 - 96;
      v11 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v11 == 1 || v11 == 2)
          ++*(_DWORD *)(v5 + 216);
      }
      else
      {
        *(_DWORD *)(v5 - 264) += 2;
      }
      v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v5 - 96);
      if ((*(_BYTE *)(a2 + 22) & 2) != 0)
        *(_DWORD *)(a2 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
      v13 = *a4;
      *a4 = 0;
      v14 = WTF::fastMalloc((WTF *)0x28);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v15 = &off_1E33A0850;
      v15[1] = a2;
      v15[2] = v13;
      *(_QWORD *)v14 = off_1E33A0990;
      *(_BYTE *)(v14 + 8) = a3;
      v16 = *v12;
      if (*v12)
        goto LABEL_36;
      v16 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = v12;
      v20 = (unsigned int *)*v12;
      *v12 = v16;
      if (!v20)
        goto LABEL_36;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v19);
      }
      v16 = *v12;
      if (*v12)
      {
LABEL_36:
        do
          v17 = __ldaxr((unsigned int *)v16);
        while (__stlxr(v17 + 1, (unsigned int *)v16));
      }
      *(_QWORD *)v14 = off_1E33A0878;
      *(_QWORD *)(v14 + 16) = v16;
      *(_QWORD *)(v14 + 24) = v9;
      *(_QWORD *)(v14 + 32) = v15;
      ++v9[2];
      v23 = (_QWORD *)v14;
      WebCore::EventLoopTaskGroup::queueTask((uint64_t)v12, (uint64_t *)&v23);
      result = v23;
      v23 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      v18 = *(unsigned __int8 *)(v5 + 178);
      if (*(_BYTE *)(v5 + 178))
      {
        if (v18 == 1)
        {
          if (*(_DWORD *)(v5 + 216) == 1)
            return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v5 - 96);
          else
            --*(_DWORD *)(v5 + 216);
        }
        else if (v18 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
        }
      }
      else if (*(_DWORD *)(v5 - 264) == 2)
      {
        if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
          return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288));
      }
      else
      {
        *(_DWORD *)(v5 - 264) -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal(unsigned int *result, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  int v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;

  v5 = *((_QWORD *)result + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v11 = result;
      v12 = v6 - 96;
      v13 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v13 == 1 || v13 == 2)
          ++*(_DWORD *)(v6 + 216);
      }
      else
      {
        *(_DWORD *)(v6 - 264) += 2;
      }
      v14 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 104))(v6 - 96);
      if ((*(_BYTE *)(a2 + 22) & 2) != 0)
        *(_DWORD *)(a2 + 24) += 2;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
      v15 = *a5;
      *a5 = 0;
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v16 = &off_1E33A0938;
      v16[1] = a2;
      v16[2] = v15;
      v17 = *(uint64_t **)(a4 + 8);
      v18 = *v17;
      if (*v17)
        goto LABEL_44;
      v18 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = v17;
      v27 = (unsigned int *)*v17;
      *v17 = v18;
      if (!v27)
        goto LABEL_44;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v26);
      }
      v18 = *v17;
      if (*v17)
      {
LABEL_44:
        do
          v19 = __ldaxr((unsigned int *)v18);
        while (__stlxr(v19 + 1, (unsigned int *)v18));
      }
      v20 = WTF::fastMalloc((WTF *)0x28);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v21 = &off_1E3391560;
      v21[1] = v18;
      v21[2] = v16;
      *(_QWORD *)v20 = off_1E33A0990;
      *(_BYTE *)(v20 + 8) = a3;
      v22 = *v14;
      if (*v14)
        goto LABEL_45;
      v22 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = v14;
      v31 = (unsigned int *)*v14;
      *v14 = v22;
      if (!v31)
        goto LABEL_45;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v30);
      }
      v22 = *v14;
      if (*v14)
      {
LABEL_45:
        do
          v23 = __ldaxr((unsigned int *)v22);
        while (__stlxr(v23 + 1, (unsigned int *)v22));
      }
      *(_QWORD *)v20 = off_1E33A0878;
      *(_QWORD *)(v20 + 16) = v22;
      *(_QWORD *)(v20 + 24) = v11;
      *(_QWORD *)(v20 + 32) = v21;
      ++*((_QWORD *)v11 + 2);
      v34 = (unsigned int *)v20;
      WebCore::EventLoopTaskGroup::queueTask((uint64_t)v14, (uint64_t *)&v34);
      result = v34;
      v34 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v25 = *(unsigned __int8 *)(v6 + 178);
      if (*(_BYTE *)(v6 + 178))
      {
        if (v25 == 1)
        {
          if (*(_DWORD *)(v6 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v6 - 96);
          else
            --*(_DWORD *)(v6 + 216);
        }
        else if (v25 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
        }
      }
      else if (*(_DWORD *)(v6 - 264) == 2)
      {
        if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v24);
      }
      else
      {
        *(_DWORD *)(v6 - 264) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::AllDescendantsCollection::operator new(uint64_t this)
{
  if (this == 88)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::AllDescendantsCollection::AllDescendantsCollection(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  double result;

  v3 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 20) = 0;
  v4 = 96;
  switch(a3)
  {
    case 4u:
      v4 = 192;
      goto LABEL_13;
    case 5u:
LABEL_13:
      v5 = *(_WORD *)(a1 + 21) & 0xFE00 | a3 & 0x1F | v4;
      goto LABEL_8;
    case 8u:
    case 9u:
    case 0xAu:
      v3 = 64;
      goto LABEL_3;
    case 0x11u:
    case 0x12u:
      v3 = 224;
      goto LABEL_3;
    case 0x14u:
    case 0x15u:
      v3 = 160;
      goto LABEL_3;
    case 0x16u:
      v5 = *(_WORD *)(a1 + 21) & 0xFE00 | a3 & 0x1F | 0x20;
      goto LABEL_5;
    default:
LABEL_3:
      v5 = *(_WORD *)(a1 + 21) & 0xFE00 | a3 & 0x1F | v3;
      if (a3 > 0x19 || ((1 << a3) & 0x3AFF800) != 0 || ((1 << a3) & 0x1007FF) == 0)
LABEL_5:
        v6 = 0;
      else
LABEL_8:
        v6 = 512;
      *(_WORD *)(a1 + 21) = v5 & 0xFDFF | v6;
      *(_DWORD *)(a2 + 24) += 2;
      *(_QWORD *)(a1 + 24) = a2;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_BYTE *)(a1 + 80) &= 0xFCu;
      *(_QWORD *)a1 = off_1E33A0598;
      return result;
  }
}

uint64_t WebCore::Attr::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, _DWORD **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;
  _DWORD *v10;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x200000000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a1 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)result = off_1E33A0600;
  *(_QWORD *)(result + 80) = 0;
  v9 = *a2;
  if (*a2)
    ++*v9;
  *(_QWORD *)(result + 88) = v9;
  v10 = *a3;
  if (*a3)
    *v10 += 2;
  *(_QWORD *)(result + 96) = v10;
  *(_QWORD *)(result + 104) = 0;
  *a4 = result;
  return result;
}

void WebCore::Attr::~Attr(WebCore::Attr *this)
{
  WTF::StringImpl *v2;
  WebCore::MutableStyleProperties *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  WebCore::Node::willBeDeletedFrom((uint64_t)this, *(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
  v3 = (WebCore::MutableStyleProperties *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::MutableStyleProperties::~MutableStyleProperties(v3, v2);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v13 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v13)
      {
        v16 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v13));
        v6 = v16;
      }
      v14 = *(WTF **)(v6 + 16);
      if (v14)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v15 = v6;
        WTF::fastFree(v14, v2);
        v6 = v15;
      }
      WTF::fastFree((WTF *)v6, v2);
    }
  }
  WebCore::Node::~Node(this, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::Attr::~Attr(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void *WebCore::Attr::setPrefix@<X0>(WebCore::Attr *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  WTF::StringImpl **v4;
  void *result;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  void *v20;
  _QWORD v21[2];
  char v22;

  v4 = a2;
  result = WebCore::Node::checkSetPrefix((uint64_t *)this, (const WTF::AtomString *)a2, v21, a4);
  if (v22)
  {
    v8 = v21[1];
    *(_BYTE *)a3 = v21[0];
    *(_QWORD *)(a3 + 8) = v8;
LABEL_21:
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v9 = *v4;
  v11 = (WTF::StringImpl ***)((char *)this + 88);
  v10 = *((_QWORD *)this + 11);
  if (*v4 == (WTF::StringImpl *)WebCore::xmlnsAtomData
    && *(_QWORD *)(v10 + 32) != WebCore::XMLNSNames::xmlnsNamespaceURI
    || WebCore::xmlnsAtomData == *(_QWORD *)(v10 + 24))
  {
    *(_BYTE *)a3 = 11;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_21;
  }
  if (!v9 || !*((_DWORD *)v9 + 1))
    v4 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v12 = *((_QWORD *)this + 10);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      *(_DWORD *)(v13 + 24) += 2;
      v14 = *(_QWORD *)(v13 + 104);
      if (!v14 || (*(_BYTE *)(v14 + 4) & 1) == 0)
      {
        WebCore::Element::createUniqueElementData((WebCore::Element *)v13);
        v14 = *(_QWORD *)(v13 + 104);
      }
      v15 = *(unsigned int *)(v14 + 52);
      if ((_DWORD)v15)
      {
        v16 = *(WTF::StringImpl ****)(v14 + 40);
        v17 = *v11;
        v18 = 16 * v15;
        while (1)
        {
          v19 = *v16;
          if (*v16 == v17 || v19[3] == v17[3] && v19[4] == v17[4])
            break;
          v16 += 2;
          v18 -= 16;
          if (!v18)
            goto LABEL_24;
        }
      }
      else
      {
LABEL_24:
        v16 = 0;
      }
      WebCore::QualifiedName::setPrefix(v16, v4);
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v20);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
  }
  result = WebCore::QualifiedName::setPrefix(v11, v4);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WebCore::Attr::namespaceURI(WebCore::Attr *this)
{
  return *((_QWORD *)this + 11) + 32;
}

WTF::StringImpl **WebCore::QualifiedName::setPrefix(WTF::StringImpl ***this, WTF::StringImpl **a2)
{
  WebCore::QualifiedName::QualifiedNameImpl *v3;
  WTF::StringImpl **result;
  int v5;
  WTF *v6;
  void *v7;
  WTF *v8;
  void *v9;
  WebCore::QualifiedName::QualifiedNameImpl *v10;

  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v10, a2, *this + 3, *this + 4);
  v3 = v10;
  v10 = 0;
  result = *this;
  *this = (WTF::StringImpl **)v3;
  if (result)
  {
    v5 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result != 1)
    {
LABEL_3:
      *(_DWORD *)result = v5;
      return result;
    }
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
    WTF::fastFree(v6, v7);
    result = (WTF::StringImpl **)v10;
    v10 = 0;
    if (result)
    {
      v5 = *(_DWORD *)result - 1;
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        return (WTF::StringImpl **)WTF::fastFree(v8, v9);
      }
      goto LABEL_3;
    }
  }
  return result;
}

unsigned int *WebCore::Attr::setValue@<X0>(unsigned int *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;

  v5 = *((_QWORD *)this + 10);
  if (v5 && (v8 = *(_QWORD *)(v5 + 8)) != 0)
  {
    *(_DWORD *)(v8 + 24) += 2;
    this = (unsigned int *)WebCore::Element::setAttribute((WebCore::Element *)v8, (const WebCore::QualifiedName *)(this + 22), a2, (WTF::String *)1, a3, a4);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
    v6 = *a2;
    if (*a2)
      *(_DWORD *)v6 += 2;
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        this = (unsigned int *)WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::Attr::setNodeValue@<X0>(WebCore::Attr *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>, __n128 a4@<Q0>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  v6 = *a2;
  if (*a2)
  {
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase(v6, (WTF::StringImpl *)a2);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    if (!*MEMORY[0x1E0CBF3B8])
      goto LABEL_6;
  }
  *(_DWORD *)v6 += 2;
LABEL_6:
  v9 = v6;
  WebCore::Attr::setValue((unsigned int *)this, &v9, a3, a4);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Attr::cloneNodeInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  WTF::String *v7;
  uint64_t v8;
  __n128 v9;
  _DWORD **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *result;
  int v16;
  WTF::StringImpl *v17;

  v8 = bmalloc::api::isoAllocate();
  v10 = (_DWORD **)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 80);
  if (v11 && (v13 = *(_QWORD *)(v11 + 8)) != 0)
  {
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::Element::getAttributeForBindings(v13, (unsigned __int8 *)(a1 + 88), 1, v7, &v17, v9);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v6);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  else
  {
    v12 = *(WTF::StringImpl **)(a1 + 96);
    if (v12)
      *(_DWORD *)v12 += 2;
    v17 = v12;
  }
  *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v8 + 24) = 0x200000000002;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = a2 + 96;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)v8 = off_1E33A0600;
  *(_QWORD *)(v8 + 80) = 0;
  v14 = *v10;
  if (*v10)
    ++*v14;
  *(_QWORD *)(v8 + 88) = v14;
  result = v17;
  if (v17)
  {
    v16 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *(_QWORD *)(v8 + 96) = result;
    *(_QWORD *)(v8 + 104) = 0;
    *a3 = v8;
    v17 = 0;
    if (v16)
      *(_DWORD *)result = v16;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
  }
  else
  {
    *(_QWORD *)(v8 + 96) = 0;
    *(_QWORD *)(v8 + 104) = 0;
    *a3 = v8;
  }
  return result;
}

uint64_t WebCore::Attr::value@<X0>(uint64_t this@<X0>, WTF::String *a2@<X3>, WTF::StringImpl **a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(this + 80);
  if (v4 && (v6 = *(_QWORD *)(v4 + 8)) != 0)
  {
    *(_DWORD *)(v6 + 24) += 2;
    this = WebCore::Element::getAttributeForBindings(v6, (unsigned __int8 *)(this + 88), 1, a2, a3, a4);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    v5 = *(WTF::StringImpl **)(this + 96);
    if (v5)
      *(_DWORD *)v5 += 2;
    *a3 = v5;
  }
  return this;
}

_QWORD *WebCore::Attr::style(WebCore::Attr *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  WTF::StringImpl *v6;
  WTF::String *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v31;
  WTF::StringImpl *v32;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  v4 = *(_QWORD *)(v1 + 8);
  if (!v4 || (*(_WORD *)(v4 + 28) & 0x70) == 0)
    return 0;
  *(_DWORD *)(v4 + 24) += 2;
  v8 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = v8 + 32;
  *(_QWORD *)(v8 + 24) = 4;
  v9.n128_u64[0] = 0x900000002;
  *(_QWORD *)v8 = 0x900000002;
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v8;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v18 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v18)
      {
        v19 = 16 * v18;
        v20 = (_DWORD **)(*(_QWORD *)(v10 + 16) + 8);
        do
        {
          v21 = *v20;
          *v20 = 0;
          if (v21)
          {
            if (*v21 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v6);
            else
              *v21 -= 2;
          }
          v20 += 2;
          v19 -= 16;
        }
        while (v19);
      }
      v22 = *(WTF **)(v10 + 16);
      if ((WTF *)(v10 + 32) != v22 && v22 != 0)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        WTF::fastFree(v22, v6);
      }
      v24 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      WTF::fastFree((WTF *)v10, v6);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *((_QWORD *)this + 10);
  if (v11 && (v13 = *(_QWORD *)(v11 + 8)) != 0)
  {
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::Element::getAttributeForBindings(v13, (unsigned __int8 *)this + 88, 1, v7, &v32, v9);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  else
  {
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    if (v12)
      *(_DWORD *)v12 += 2;
    v32 = v12;
  }
  (*(void (**)(uint64_t, char *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v4 + 1128))(v4, (char *)this + 88, &v32, v8);
  v16 = v32;
  v32 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v2 = *(_QWORD **)(v8 + 8);
  if (!v2)
  {
    v2 = (_QWORD *)bmalloc::api::isoAllocate();
    *v2 = off_1E3399C18;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = v8;
    v2[4] = 0;
    v17 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v2;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v2 = *(_QWORD **)(v8 + 8);
    }
  }
  if (*(_DWORD *)v8 == 1)
  {
    v25 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v25)
    {
      v26 = 16 * v25;
      v27 = (_DWORD **)(*(_QWORD *)(v8 + 16) + 8);
      do
      {
        v28 = *v27;
        *v27 = 0;
        if (v28)
        {
          if (*v28 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v15);
          else
            *v28 -= 2;
        }
        v27 += 2;
        v26 -= 16;
      }
      while (v26);
    }
    v29 = *(WTF **)(v8 + 16);
    if ((WTF *)(v8 + 32) != v29 && v29 != 0)
    {
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      WTF::fastFree(v29, v15);
    }
    v31 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    WTF::fastFree((WTF *)v8, v15);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v15);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v2;
}

uint64_t WebCore::Attr::detachFromElementWithValue(WebCore::Attr *this, const WTF::AtomString *a2, uint64_t a3, WebCore::TreeScope *a4)
{
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  WebCore::Node *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (result)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)result));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)result);
      v13 = *(unsigned int *)(result + 28);
      if ((_DWORD)v13)
      {
        v16 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v13));
        result = v16;
      }
      v14 = *(WTF **)(result + 16);
      if (v14)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v15 = result;
        WTF::fastFree(v14, a2);
        result = v15;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v10 = (WebCore::Node *)*((_QWORD *)this + 5);
  v11 = *((_QWORD *)v10 + 1);
  v12 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 2;
  if (v10 != (WebCore::Node *)(v11 + 96))
  {
    result = WebCore::Node::moveTreeToNewScope(this, v10, (WebCore::TreeScope *)(v11 + 96), a4);
    v12 = *(_DWORD *)(v11 + 24) - 2;
  }
  if (v12)
  {
    *(_DWORD *)(v11 + 24) = v12;
  }
  else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  return result;
}

WTF::StringImpl *WebCore::Attr::attachToElement(WebCore::Attr *this, WebCore::Element *a2)
{
  unsigned int *v4;
  void *v5;
  WebCore::TreeScope *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  WTF::StringImpl *result;
  WebCore::TreeScope *v14;
  WebCore::Node *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  v7 = v4;
  if (v4)
  {
    do
      v8 = __ldaxr(v4);
    while (__stlxr(v8 + 1, v4));
  }
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v7;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v16 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v16)
      {
        v19 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v16));
        v9 = v19;
      }
      v17 = *(WTF **)(v9 + 16);
      if (v17)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v18 = v9;
        WTF::fastFree(v17, v5);
        v9 = v18;
      }
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  v12 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v12 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v12;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  v14 = (WebCore::TreeScope *)*((_QWORD *)a2 + 5);
  v15 = (WebCore::Node *)*((_QWORD *)this + 5);
  if (v15 != v14)
    return (WTF::StringImpl *)WebCore::Node::moveTreeToNewScope((uint64_t)this, v15, v14, v6);
  return result;
}

WebCore::EventNames **WebCore::BeforeTextInsertedEvent::BeforeTextInsertedEvent(WebCore::EventNames **this, WebCore::EventNames **a2)
{
  WebCore::EventNames **v3;
  uint64_t v4;
  WebCore::BeforeTextInsertedEvent *v5;
  uint64_t v6;
  WebCore::EventNames *v7;
  unsigned int v8;
  WebCore::EventNames *v9;
  WebCore::EventNames *v10;

  v3 = this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(WebCore::BeforeTextInsertedEvent **)(v4 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = (WebCore::BeforeTextInsertedEvent *)this;
  }
  v6 = *((_QWORD *)v5 + 5);
  if (!v6)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *((_QWORD *)v5 + 5);
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
  v3[1] = 0;
  v8 = *((_DWORD *)v3 + 5) & 0xFFC00000 | 0x1E8204 | (*(_QWORD *)(v6 + 2336) != 0);
  *((_DWORD *)v3 + 4) = 1;
  *((_DWORD *)v3 + 5) = v8;
  v9 = *(WebCore::EventNames **)(v6 + 2336);
  if (v9)
    *(_DWORD *)v9 += 2;
  v3[3] = v9;
  v3[4] = 0;
  v3[5] = 0;
  v3[6] = 0;
  v3[7] = v7;
  v3[8] = 0;
  *v3 = (WebCore::EventNames *)off_1E33A0788;
  v10 = *a2;
  if (*a2)
    *(_DWORD *)v10 += 2;
  v3[9] = v10;
  return v3;
}

void WebCore::BeforeTextInsertedEvent::~BeforeTextInsertedEvent(WebCore::BeforeTextInsertedEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::AbortSignal::eventTargetInterface(WebCore::AbortSignal *this)
{
  return 48;
}

uint64_t WebCore::AbortSignal::scriptExecutionContext(WebCore::AbortSignal *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::AbortSignal::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::AbortSignal *WebCore::AbortSignal::derefEventTarget(WebCore::AbortSignal *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::AbortSignal::~AbortSignal(this, a2);
    return (WebCore::AbortSignal *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

WTF::StringImpl *WebCore::Attr::nodeValue@<X0>(WebCore::Attr *this@<X0>, void *a2@<X1>, WTF::String *a3@<X3>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  WTF::StringImpl *result;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v6 = *((_QWORD *)this + 10);
  if (!v6 || (v9 = *(_QWORD *)(v6 + 8)) == 0)
  {
    result = (WTF::StringImpl *)*((_QWORD *)this + 12);
    if (result)
    {
      v8 = *(_DWORD *)result + 2;
      *(_DWORD *)result = v8;
      goto LABEL_9;
    }
LABEL_15:
    *a4 = 0;
    return result;
  }
  *(_DWORD *)(v9 + 24) += 2;
  WebCore::Element::getAttributeForBindings(v9, (unsigned __int8 *)this + 88, 1, a3, &v10, a5);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  result = v10;
  if (!v10)
    goto LABEL_15;
  v8 = *(_DWORD *)v10;
LABEL_9:
  *(_DWORD *)result = v8 + 2;
  *a4 = result;
  v10 = 0;
  if (!v8)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
  *(_DWORD *)result = v8;
  return result;
}

uint64_t WebCore::Attr::localName(WebCore::Attr *this)
{
  return *((_QWORD *)this + 11) + 24;
}

uint64_t WebCore::Attr::prefix(WebCore::Attr *this)
{
  return *((_QWORD *)this + 11) + 16;
}

uint64_t WebCore::Attr::isAttributeNode(WebCore::Attr *this)
{
  return 1;
}

uint64_t WebCore::Node::canContainRangeEndPoint(WebCore::Node *this)
{
  return 0;
}

uint64_t WebCore::Node::childTypeAllowed()
{
  return 0;
}

uint64_t WebCore::Node::allowsDoubleTapGesture(WebCore::Node *this)
{
  return 1;
}

uint64_t WebCore::BeforeTextInsertedEvent::isBeforeTextInsertedEvent(WebCore::BeforeTextInsertedEvent *this)
{
  return 1;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::length(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  v2 = *(_BYTE *)(a1 + 80);
  if ((v2 & 1) != 0)
    return *(unsigned int *)(a1 + 60);
  v3 = a1 + 40;
  if ((v2 & 2) == 0 && !*(_QWORD *)(a1 + 48))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v6 = v5 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    ++*(_DWORD *)(v6 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v8 = a1;
      WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v5 + 1760), &v8, (uint64_t)v7);
      v3 = a1 + 40;
    }
  }
  result = WebCore::CollectionIndexCache<WebCore::AllDescendantsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(v3, a1);
  *(_DWORD *)(a1 + 60) = result;
  *(_BYTE *)(a1 + 80) |= 1u;
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::item(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  _DWORD *v37;
  uint64_t *v38;
  _BYTE v39[24];
  uint64_t v40;

  v2 = a2;
  v3 = result;
  v4 = *(_BYTE *)(result + 80);
  if ((v4 & 1) != 0 && *(_DWORD *)(result + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    if (*(_DWORD *)(result + 76) <= a2)
    {
      __break(0xC471u);
    }
    else
    {
      v20 = *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * a2);
      if (!v20)
        return 0;
      return *(_QWORD *)(v20 + 8);
    }
    return result;
  }
  v5 = (uint64_t *)(result + 40);
  result = *(_QWORD *)(result + 48);
  if (!result)
  {
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v3 + 60) - v2 < v2)
      {
        v36 = (uint64_t *)(v3 + 40);
        v25 = v3;
        v26 = v2;
        v27 = WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionLast(v3);
        result = v28;
        *(_QWORD *)(v25 + 40) = v27;
        *(_QWORD *)(v25 + 48) = v28;
        v29 = *(_DWORD *)(v25 + 60);
        if (v29 - 1 > v26)
        {
          WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward(v25, v36, v29 + ~v26);
          result = *(_QWORD *)(v25 + 48);
        }
        *(_DWORD *)(v25 + 56) = v26;
        return result;
      }
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + 8);
      v15 = v14 + 4 * (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v15 + 1768);
      if ((*(_BYTE *)(v3 + 22) & 2) != 0)
      {
        v40 = v3;
        v21 = (uint64_t *)(v3 + 40);
        v22 = v3;
        v23 = v2;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v14 + 1760), &v40, (uint64_t)v39);
        v5 = v21;
        v2 = v23;
        v3 = v22;
      }
    }
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0 && (v24 = *(_QWORD *)(v3 + 24), (*(_BYTE *)(v24 + 22) & 0x18) != 0))
      v16 = *(_QWORD *)(v24 + 40);
    else
      v16 = v3 + 24;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(*(_QWORD *)v16 + 80);
    if (v18)
    {
      result = 0;
      while ((*(_WORD *)(v18 + 28) & 8) == 0)
      {
        v18 = *(_QWORD *)(v18 + 56);
        if (!v18)
          goto LABEL_39;
      }
      result = v18;
    }
    else
    {
      result = 0;
    }
LABEL_39:
    *(_DWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 40) = v17;
    *(_QWORD *)(v3 + 48) = result;
    if (v2)
    {
      v37 = (_DWORD *)(v3 + 56);
      if (result)
      {
        v30 = v3;
        WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseForward(v3, v5, v2, v37);
        result = *(_QWORD *)(v30 + 48);
        if (result)
          return result;
        v3 = v30;
        v19 = *v37 + 1;
        goto LABEL_42;
      }
    }
    else if (result)
    {
      return result;
    }
    v19 = 0;
LABEL_42:
    result = 0;
    *(_DWORD *)(v3 + 60) = v19;
    v4 = *(_BYTE *)(v3 + 80);
    goto LABEL_30;
  }
  v6 = *(_DWORD *)(v3 + 56);
  v7 = v2 - v6;
  if (v2 > v6)
  {
    if ((v4 & 1) != 0 && *(_DWORD *)(v3 + 60) - v2 < v7)
    {
      v38 = (uint64_t *)(v3 + 40);
      v31 = v3;
      v32 = v2;
      v33 = WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionLast(v3);
      result = v34;
      *(_QWORD *)(v31 + 40) = v33;
      *(_QWORD *)(v31 + 48) = v34;
      v35 = *(_DWORD *)(v31 + 60);
      if (v35 - 1 > v32)
      {
        WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward(v31, v38, v35 + ~v32);
        result = *(_QWORD *)(v31 + 48);
      }
      *(_DWORD *)(v31 + 56) = v32;
      return result;
    }
    if (v2 == v6)
      return result;
    v8 = 0;
    v9 = *v5;
    while (1)
    {
      v10 = *(_QWORD *)(result + 80);
      if (!v10)
      {
        if (result == v9)
          goto LABEL_29;
        while (1)
        {
          v10 = *(_QWORD *)(result + 56);
          if (v10)
            break;
          result = *(_QWORD *)(result + 32);
          if (result)
            v12 = result == v9;
          else
            v12 = 1;
          if (v12)
            goto LABEL_29;
        }
      }
      if ((*(_WORD *)(v10 + 28) & 8) == 0)
        break;
      result = v10;
LABEL_11:
      *(_QWORD *)(v3 + 48) = result;
      if (++v8 == v7)
      {
        *(_DWORD *)(v3 + 56) = v7 + v6;
        return result;
      }
    }
    while (v10 != v9)
    {
      while (1)
      {
        result = *(_QWORD *)(v10 + 56);
        if (result)
          break;
        v10 = *(_QWORD *)(v10 + 32);
        if (v10)
          v11 = v10 == v9;
        else
          v11 = 1;
        if (v11)
          goto LABEL_29;
      }
      v10 = *(_QWORD *)(v10 + 56);
      if ((*(_WORD *)(result + 28) & 8) != 0)
        goto LABEL_11;
    }
LABEL_29:
    result = 0;
    *(_QWORD *)(v3 + 48) = 0;
    v13 = v8 + v6;
    *(_DWORD *)(v3 + 56) = v13;
    *(_DWORD *)(v3 + 60) = v13 + 1;
LABEL_30:
    *(_BYTE *)(v3 + 80) = v4 | 1;
    return result;
  }
  if (v2 < v6)
    return WebCore::CollectionIndexCache<WebCore::AllDescendantsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo((uint64_t *)(v3 + 40), v3, v2);
  return result;
}

uint64_t WebCore::NodeList::isLiveNodeList(WebCore::NodeList *this)
{
  return 0;
}

uint64_t WebCore::NodeList::isChildNodeList(WebCore::NodeList *this)
{
  return 0;
}

uint64_t WebCore::NodeList::isEmptyNodeList(WebCore::NodeList *this)
{
  return 0;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WebCore::Node *v14;
  int v15;
  int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  void *v21;
  WebCore::Node *v22;
  unsigned __int8 v23;
  int v24;
  int j;
  unsigned int v26;
  uint64_t v27;
  void *v29;
  uint64_t v30;
  WebCore::Node *v31;
  WebCore *v32;
  uint64_t v33;
  WebCore::Node *v34;
  WebCore::Node *v35;

  v2 = *a2;
  if (!*a2 || !*(_DWORD *)(v2 + 4))
    return 0;
  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v33 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v33 + 22) & 0x18) != 0))
    v7 = *(uint64_t **)(v33 + 40);
  else
    v7 = (uint64_t *)(a1 + 24);
  v8 = *v7;
  if ((*(_BYTE *)(*v7 + 22) & 0x18) == 0)
    return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
  v35 = 0;
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(uint64_t **)(v9 + 24);
  if (v10)
  {
    v11 = *v10;
    if (v11)
    {
      v16 = 0;
      for (i = *(_DWORD *)(v2 + 16) >> 8; ; i = v16 + v18)
      {
        v18 = i & *(_DWORD *)(v11 - 8);
        v19 = *(_QWORD *)(v11 + 40 * v18);
        if (!v19)
          break;
        if (v19 != -1 && v19 == v2)
        {
          if (!WebCore::TreeScope::containsMultipleElementsWithId(*(_QWORD *)(v8 + 40), a2))
          {
            WebCore::TreeScope::getElementById((unsigned int *)v9, (const WTF::AtomString *)a2, (uint64_t *)&v34);
            WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v35, (uint64_t *)&v34);
            v22 = v34;
            v34 = 0;
            if (v22)
            {
              if (*((_DWORD *)v22 + 6) == 2)
              {
                if ((*((_WORD *)v22 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v22, v21);
              }
              else
              {
                *((_DWORD *)v22 + 6) -= 2;
              }
            }
          }
LABEL_29:
          if (!v35)
            return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
          v23 = WebCore::Node::isDescendantOf((const WebCore::Node ***)v35, (const WebCore::Node ***)v8);
          v14 = v35;
          if ((v23 & 1) != 0)
          {
            v15 = 0;
            v3 = v35;
            goto LABEL_14;
          }
          v15 = 1;
          goto LABEL_13;
        }
        ++v16;
      }
    }
  }
  v12 = *(uint64_t **)(v9 + 32);
  if (v12)
  {
    v13 = *v12;
    if (v13)
    {
      v24 = 0;
      for (j = *(_DWORD *)(v2 + 16) >> 8; ; j = v24 + v26)
      {
        v26 = j & *(_DWORD *)(v13 - 8);
        v27 = *(_QWORD *)(v13 + 40 * v26);
        if (!v27)
          break;
        if (v27 != -1 && v27 == v2)
        {
          if (!WebCore::TreeScope::containsMultipleElementsWithName(*(_QWORD *)(v8 + 40), a2))
          {
            WebCore::TreeScope::getElementByName((unsigned int *)v9, (const WTF::AtomString *)a2, (uint64_t *)&v34);
            v30 = *WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v35, (uint64_t *)&v34);
            v31 = v34;
            v34 = 0;
            if (v31)
            {
              if (*((_DWORD *)v31 + 6) == 2)
              {
                if ((*((_WORD *)v31 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v31, v29);
              }
              else
              {
                *((_DWORD *)v31 + 6) -= 2;
              }
            }
            if (v30)
            {
              v32 = (WebCore *)*((unsigned __int16 *)v35 + 14);
              if ((v32 & 0x10) == 0
                || (*(_WORD *)(a1 + 21) & 0x1F) == 7
                && !WebCore::nameShouldBeVisibleInDocumentAll(v32, *((WebCore::Element **)v35 + 12)))
              {
                WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v35, 0);
              }
            }
          }
          goto LABEL_29;
        }
        ++v24;
      }
    }
  }
  v14 = 0;
  v15 = 0;
LABEL_13:
  v3 = 0;
LABEL_14:
  v35 = 0;
  if (!v14)
  {
LABEL_59:
    if (!v15)
      return (uint64_t)v3;
    return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
  }
  if (*((_DWORD *)v14 + 6) == 2)
  {
    if ((*((_WORD *)v14 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v14, a2);
      if ((v15 & 1) == 0)
        return (uint64_t)v3;
      return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
    }
    goto LABEL_59;
  }
  *((_DWORD *)v14 + 6) -= 2;
  if ((v15 & 1) != 0)
    return WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, a2);
  return (uint64_t)v3;
}

_QWORD *WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteAllNodes(uint64_t a1, void *a2)
{
  _QWORD *result;
  _QWORD *v3;
  WTF *v4;
  void *v5;

  result = *(_QWORD **)(a1 + 8);
  if (result)
  {
    do
    {
      v3 = (_QWORD *)result[2];
      v4 = (WTF *)WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~ListHashSetNode(result, a2);
      WTF::fastFree(v4, v5);
      result = v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~ListHashSetNode(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = a1;
  v3 = *a1;
  *v2 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      v11 = v2;
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
      return v11;
    }
  }
  return v2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(WebCore::EventTarget &,WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33A0850;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(WebCore::EventTarget &,WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33A0850;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(WebCore::EventTarget &,WebCore::TaskSource,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void WebCore::ActiveDOMObjectEventDispatchTask::~ActiveDOMObjectEventDispatchTask(WebCore::ActiveDOMObjectEventDispatchTask *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E33A0878;
  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  --*(_QWORD *)(v4 + 16);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E33A0990;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E33A0878;
  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  --*(_QWORD *)(v4 + 16);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E33A0990;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ActiveDOMObjectEventDispatchTask::execute(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 180) && !*(_BYTE *)(v2 + 179))
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 32) + 16))(*(_QWORD *)(this + 32));
    }
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AbortSignal::timeout(WebCore::ScriptExecutionContext &,unsigned long long)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::AbortSignal *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::AbortSignal *)a1[1];
  *a1 = &off_1E33A08C0;
  a1[1] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AbortSignal::timeout(WebCore::ScriptExecutionContext &,unsigned long long)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::AbortSignal *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = (WebCore::AbortSignal *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A08C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::AbortSignal::~AbortSignal(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::AbortSignal::timeout(WebCore::ScriptExecutionContext &,unsigned long long)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, WebCore::ScriptExecutionContext *this)
{
  _DWORD *result;
  uint64_t v4;
  JSC::JSLock *v5;
  _BYTE *v6;
  unint64_t v7;
  _DWORD *v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 8) + 157) = 0;
  result = (_DWORD *)WebCore::ScriptExecutionContext::globalObject(this);
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = *(JSC::JSLock **)(*((_QWORD *)result + 7) + 112);
    JSC::JSLock::lock(v5);
    v6 = *(_BYTE **)(a1 + 8);
    WebCore::DOMException::create(0x13u, MEMORY[0x1E0CBF738], (uint64_t *)&v8);
    v7 = WebCore::wrap<WebCore::DOMException>(v4, v4, v8);
    WebCore::AbortSignal::signalAbort(v6, v7);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    if (v5)
      return (_DWORD *)JSC::JSLock::unlock(v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AbortSignal::signalFollow(WebCore::AbortSignal&)::$_0,void,JSC::JSValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33A08E8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AbortSignal::signalFollow(WebCore::AbortSignal&)::$_0,void,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A08E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::AbortSignal::signalFollow(WebCore::AbortSignal&)::$_0,void,JSC::JSValue>::call(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  bmalloc::api *v5;
  void *v6;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      ++*(_DWORD *)(v3 + 24);
      result = WebCore::AbortSignal::signalAbort((_BYTE *)v3, a2);
      if (*(_DWORD *)(v3 + 24) == 1)
      {
        WebCore::AbortSignal::~AbortSignal((WebCore::AbortSignal *)v3, v4);
        return (_BYTE *)bmalloc::api::isoDeallocate(v5, v6);
      }
      else
      {
        --*(_DWORD *)(v3 + 24);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AbortSignal::addAbortAlgorithmToSignal(WebCore::AbortSignal&,WTF::Ref<WebCore::AbortAlgorithm,WTF::RawPtrTraits<WebCore::AbortAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::AbortAlgorithm>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E33A0910;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AbortSignal::addAbortAlgorithmToSignal(WebCore::AbortSignal&,WTF::Ref<WebCore::AbortAlgorithm,WTF::RawPtrTraits<WebCore::AbortAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::AbortAlgorithm>> &&)::$_0,void,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A0910;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AbortSignal::addAbortAlgorithmToSignal(WebCore::AbortSignal&,WTF::Ref<WebCore::AbortAlgorithm,WTF::RawPtrTraits<WebCore::AbortAlgorithm>,WTF::DefaultRefDerefTraits<WebCore::AbortAlgorithm>> &&)::$_0,void,JSC::JSValue>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal(WebCore::EventTarget &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E33A0938;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal(WebCore::EventTarget &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33A0938;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ActiveDOMObject::queueCancellableTaskToDispatchEventInternal(WebCore::EventTarget &,WebCore::TaskSource,WTF::TaskCancellationGroup &,WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(WebCore::HTMLCollection *a1, void *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = off_1E33A09B8;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8), a1);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(a1, v3);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(WebCore::HTMLCollection *a1, void *a2)
{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E33A09B8;
  if (*((_QWORD *)a1 + 6) || (*((_BYTE *)a1 + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 40) + 8), a1);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(a1, v3);
  return bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::CollectionIndexCache<WebCore::AllDescendantsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v22 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v22 + 22) & 0x18) != 0))
    v3 = *(uint64_t **)(v22 + 40);
  else
    v3 = (uint64_t *)(a2 + 24);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 80);
  if (!v5)
    return 0;
  result = 0;
  while ((*(_WORD *)(v5 + 28) & 8) == 0)
  {
    v5 = *(_QWORD *)(v5 + 56);
    if (!v5)
      return result;
  }
  v7 = *(_DWORD *)(a1 + 32);
  LODWORD(result) = *(_DWORD *)(a1 + 36);
  for (i = v7; ; i = *(_DWORD *)(a1 + 32))
  {
    v9 = result;
    if ((_DWORD)result == i)
    {
      v16 = result + ((unint64_t)result >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= (unint64_t)result + 1)
        v18 = result + 1;
      else
        v18 = v17;
      WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 24, v18);
      v9 = *(unsigned int *)(a1 + 36);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
      if (v11)
      {
        do
          v19 = __ldaxr(v11);
        while (__stlxr(v19 + 1, v11));
      }
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 24);
      v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
    }
    *(_QWORD *)(v10 + 8 * v9) = v11;
    result = (*(_DWORD *)(a1 + 36) + 1);
    *(_DWORD *)(a1 + 36) = result;
    v13 = *(_QWORD *)(v5 + 80);
    if (!v13)
    {
      if (v5 == v4)
        goto LABEL_45;
      while (1)
      {
        v13 = *(_QWORD *)(v5 + 56);
        if (v13)
          break;
        v5 = *(_QWORD *)(v5 + 32);
        if (v5)
          v15 = v5 == v4;
        else
          v15 = 1;
        if (v15)
          goto LABEL_45;
      }
    }
    if ((*(_WORD *)(v13 + 28) & 8) == 0)
      break;
    v5 = v13;
LABEL_27:
    ;
  }
  while (v13 != v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v13 + 56);
      if (v5)
        break;
      v13 = *(_QWORD *)(v13 + 32);
      if (v13)
        v14 = v13 == v4;
      else
        v14 = 1;
      if (v14)
        goto LABEL_45;
    }
    v13 = *(_QWORD *)(v13 + 56);
    if ((*(_WORD *)(v5 + 28) & 8) != 0)
      goto LABEL_27;
  }
LABEL_45:
  v20 = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 40) |= 2u;
  v21 = v20 - v7;
  if (v21)
  {
    WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8 * v21));
    return *(unsigned int *)(a1 + 36);
  }
  return result;
}

void WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseForward(uint64_t a1, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;

  *a4 = 0;
  if (a3)
  {
    v4 = 0;
    v5 = *a2;
    v6 = a2[1];
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 80);
      if (!v7)
      {
        if (v6 == v5)
          goto LABEL_25;
        while (1)
        {
          v7 = *(_QWORD *)(v6 + 56);
          if (v7)
            break;
          v6 = *(_QWORD *)(v6 + 32);
          if (v6)
            v9 = v6 == v5;
          else
            v9 = 1;
          if (v9)
            goto LABEL_25;
        }
      }
      if ((*(_WORD *)(v7 + 28) & 8) == 0)
        break;
      v6 = v7;
LABEL_16:
      a2[1] = v6;
      *a4 = ++v4;
      if (v4 >= a3)
        return;
    }
    while (v7 != v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v7 + 56);
        if (v6)
          break;
        v7 = *(_QWORD *)(v7 + 32);
        if (v7)
          v8 = v7 == v5;
        else
          v8 = 1;
        if (v8)
          goto LABEL_25;
      }
      v7 = *(_QWORD *)(v7 + 56);
      if ((*(_WORD *)(v6 + 28) & 8) != 0)
        goto LABEL_16;
    }
LABEL_25:
    a2[1] = 0;
  }
}

uint64_t WebCore::CollectionIndexCache<WebCore::AllDescendantsCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v17;

  v3 = *((_DWORD *)a1 + 4) - a3;
  if (v3 <= a3)
  {
    v7 = a1[1];
    if (v3)
    {
      v8 = *a1;
      while ((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v11 = *(_QWORD *)(v7 + 88);
            if (!v11)
              break;
            v7 = *(_QWORD *)(v7 + 88);
          }
          while ((*(_WORD *)(v11 + 28) & 4) != 0);
        }
        else
        {
          v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_13:
        while ((*(_WORD *)(v7 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v10 = *(_QWORD *)(v7 + 88);
                if (!v10)
                  break;
                v7 = *(_QWORD *)(v7 + 88);
              }
              while ((*(_WORD *)(v10 + 28) & 4) != 0);
            }
            else
            {
              v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v7 = *(_QWORD *)(v7 + 32);
            if (v7 == v8)
              goto LABEL_32;
          }
          if (!v7)
            goto LABEL_32;
        }
        a1[1] = v7;
        if (!--v3)
          goto LABEL_33;
      }
      v7 = *(_QWORD *)(v7 + 32);
      if (v7 != v8 && v7 != 0)
        goto LABEL_13;
LABEL_32:
      v7 = 0;
      a1[1] = 0;
    }
LABEL_33:
    *((_DWORD *)a1 + 4) = a3;
  }
  else
  {
    if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v17 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v17 + 22) & 0x18) != 0))
      v4 = *(uint64_t **)(v17 + 40);
    else
      v4 = (uint64_t *)(a2 + 24);
    v5 = *v4;
    v6 = *(_QWORD *)(*v4 + 80);
    if (v6)
    {
      while ((*(_WORD *)(v6 + 28) & 8) == 0)
      {
        v7 = 0;
        v6 = *(_QWORD *)(v6 + 56);
        if (!v6)
          goto LABEL_36;
      }
      v7 = v6;
    }
    else
    {
      v7 = 0;
    }
LABEL_36:
    *a1 = v5;
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = 0;
    if (a3)
    {
      v12 = 0;
      *((_DWORD *)a1 + 4) = 0;
      while (1)
      {
        v13 = *(_QWORD *)(v7 + 80);
        if (!v13)
        {
          if (v7 == v5)
            goto LABEL_60;
          while (1)
          {
            v13 = *(_QWORD *)(v7 + 56);
            if (v13)
              break;
            v7 = *(_QWORD *)(v7 + 32);
            if (v7)
              v15 = v7 == v5;
            else
              v15 = 1;
            if (v15)
              goto LABEL_60;
          }
        }
        if ((*(_WORD *)(v13 + 28) & 8) == 0)
          break;
        v7 = v13;
LABEL_51:
        a1[1] = v7;
        *((_DWORD *)a1 + 4) = ++v12;
        if (v12 >= a3)
          return v7;
      }
      while (v13 != v5)
      {
        while (1)
        {
          v7 = *(_QWORD *)(v13 + 56);
          if (v7)
            break;
          v13 = *(_QWORD *)(v13 + 32);
          if (v13)
            v14 = v13 == v5;
          else
            v14 = 1;
          if (v14)
            goto LABEL_60;
        }
        v13 = *(_QWORD *)(v13 + 56);
        if ((*(_WORD *)(v7 + 28) & 8) != 0)
          goto LABEL_51;
      }
LABEL_60:
      v7 = 0;
      a1[1] = 0;
    }
  }
  return v7;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionLast(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v6 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v6 + 22) & 0x18) != 0))
    v1 = *(uint64_t **)(v6 + 40);
  else
    v1 = (uint64_t *)(a1 + 24);
  result = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v4 = *(_QWORD *)(v3 + 88);
        if (!v4)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v4 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v5 = *(_QWORD *)(v3 + 88);
            if (!v5)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v5 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == result)
          return result;
      }
      if (!v3)
        return result;
    }
  }
  return result;
}

void WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v3 = *a2;
    v4 = a2[1];
    while ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v7 = *(_QWORD *)(v4 + 88);
          if (!v7)
            break;
          v4 = *(_QWORD *)(v4 + 88);
        }
        while ((*(_WORD *)(v7 + 28) & 4) != 0);
      }
      else
      {
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
      }
LABEL_8:
      while ((*(_WORD *)(v4 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v6 = *(_QWORD *)(v4 + 88);
              if (!v6)
                break;
              v4 = *(_QWORD *)(v4 + 88);
            }
            while ((*(_WORD *)(v6 + 28) & 4) != 0);
          }
          else
          {
            v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v4 = *(_QWORD *)(v4 + 32);
          if (v4 == v3)
            goto LABEL_27;
        }
        if (!v4)
          goto LABEL_27;
      }
      a2[1] = v4;
      if (!--a3)
        return;
    }
    v4 = *(_QWORD *)(v4 + 32);
    if (v4 != v3 && v4 != 0)
      goto LABEL_8;
LABEL_27:
    a2[1] = 0;
  }
}

BOOL WebCore::TreeScope::containsMultipleElementsWithName(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int i;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v13;

  v2 = *(uint64_t **)(a1 + 32);
  if (!v2)
    return 0;
  v3 = *a2;
  if (!*a2)
    return 0;
  if (!*(_DWORD *)(v3 + 4))
    return 0;
  v5 = *v2;
  if (!v5)
    return 0;
  v6 = 0;
  v7 = *(_DWORD *)(v5 - 8);
  for (i = *(_DWORD *)(v3 + 16) >> 8; ; i = ++v6 + v9)
  {
    v9 = i & v7;
    v10 = (uint64_t *)(v5 + 40 * (i & v7));
    v11 = *v10;
    if (!*v10)
      break;
    if (v11 != -1 && v11 == v3)
    {
      v13 = *(_DWORD *)(v5 - 4);
      return v10 != (uint64_t *)(v5 + 40 * v13) && *((_DWORD *)v10 + 4) > 1u;
    }
  }
  v13 = *(_DWORD *)(v5 - 4);
  v10 = (uint64_t *)(v5 + 40 * v13);
  return v10 != (uint64_t *)(v5 + 40 * v13) && *((_DWORD *)v10 + 4) > 1u;
}

uint64_t *WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  if (*(_DWORD *)(v3 + 24) != 2)
  {
    *(_DWORD *)(v3 + 24) -= 2;
    return a1;
  }
  if ((*(_WORD *)(v3 + 30) & 0x400) != 0)
    return a1;
  WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  return a1;
}

BOOL WebCore::nameShouldBeVisibleInDocumentAll(WebCore *this, WebCore::Element *a2)
{
  uint64_t v3;

  if ((this & 0x10) == 0)
    return 0;
  v3 = *((_QWORD *)a2 + 3);
  return *(_QWORD *)(WebCore::HTMLNames::aTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::embedTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::formTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::frameTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::imgTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::inputTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::mapTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::metaTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::objectTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::selectTag + 24) == v3
      || *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24) == v3;
}

uint64_t WebCore::BeforeUnloadEvent::isBeforeUnloadEvent(WebCore::BeforeUnloadEvent *this)
{
  return 1;
}

uint64_t WebCore::makeBoundaryPointBeforeNode@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int i;
  uint64_t v6;

  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *(_QWORD *)(this + 48);
    for (i = 0; ; ++i)
    {
      v6 = v4 & 0xFFFFFFFFFFFFLL;
      if (!v6)
        break;
      v4 = *(_QWORD *)(v6 + 48);
    }
    *(_QWORD *)a2 = v3;
    *(_DWORD *)(a2 + 8) = i;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return this;
}

uint64_t WebCore::makeBoundaryPointAfterNode@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(this + 32);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    v4 = *(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL;
    if (v4)
    {
      v5 = 1;
      do
      {
        ++v5;
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v4);
    }
    else
    {
      v5 = 1;
    }
    *(_QWORD *)a2 = v3;
    *(_DWORD *)(a2 + 8) = v5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return this;
}

uint64_t WebCore::treeOrderForTesting(int a1, int *a2, uint64_t a3)
{
  if (a1 == 2)
    return WebCore::treeOrder<(WebCore::TreeType)2>(a2, a3);
  if (a1 == 1)
    return WebCore::treeOrder<(WebCore::TreeType)1>(a2, a3);
  if (a1)
    return 129;
  return WebCore::treeOrder<(WebCore::TreeType)0>(a2, a3);
}

uint64_t WebCore::treeOrder<(WebCore::TreeType)1>(int *a1, uint64_t a2)
{
  WebCore::Node *v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  int v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  int v19;
  WebCore::Node *v20;
  unsigned int v21;
  WebCore::Node *v23;
  WebCore::Node *v24;

  v3 = *(WebCore::Node **)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v4 = a1[2];
    v5 = *(_DWORD *)(a2 + 8);
    v6 = v4 == v5;
    if (v4 < v5)
      v7 = -1;
    else
      v7 = 1;
    if (v6)
      return 0;
    else
      return v7;
  }
  else
  {
    v23 = 0;
    *((_DWORD *)v3 + 6) += 2;
    v24 = v3;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
    while (v24)
    {
      v9 = (WebCore::Node *)WebCore::parent<(WebCore::TreeType)1>((uint64_t)v24);
      v10 = v9;
      if (v9)
        *((_DWORD *)v9 + 6) += 2;
      v23 = v9;
      v11 = *(WebCore::Node **)a1;
      if (v9 == *(WebCore::Node **)a1)
      {
        if (WebCore::isOffsetBeforeChild((uint64_t)v9, a1[2], (uint64_t)v24))
          v13 = -1;
        else
          v13 = 1;
        v21 = v13;
        v12 = v10;
      }
      else
      {
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v24, (uint64_t *)&v23);
        v12 = v23;
      }
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
      if (v10 == v11)
      {
LABEL_43:
        v20 = v24;
        v24 = 0;
        if (v20)
        {
          if (*((_DWORD *)v20 + 6) == 2)
          {
            if ((*((_WORD *)v20 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v20);
          }
          else
          {
            *((_DWORD *)v20 + 6) -= 2;
          }
        }
        return v21;
      }
    }
    v14 = *(WebCore::Node **)a1;
    *((_DWORD *)v14 + 6) = *(_DWORD *)(*(_QWORD *)a1 + 24) + 2;
    v23 = 0;
    v24 = v14;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
    while (v24)
    {
      v15 = (WebCore::Node *)WebCore::parent<(WebCore::TreeType)1>((uint64_t)v24);
      v16 = v15;
      if (v15)
        *((_DWORD *)v15 + 6) += 2;
      v23 = v15;
      v17 = *(WebCore::Node **)a2;
      if (v15 == *(WebCore::Node **)a2)
      {
        if (WebCore::isOffsetBeforeChild((uint64_t)v15, *(_DWORD *)(a2 + 8), (uint64_t)v24))
          v19 = 1;
        else
          v19 = -1;
        v21 = v19;
        v18 = v16;
      }
      else
      {
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v24, (uint64_t *)&v23);
        v18 = v23;
      }
      if (v18)
      {
        if (*((_DWORD *)v18 + 6) == 2)
        {
          if ((*((_WORD *)v18 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v18);
        }
        else
        {
          *((_DWORD *)v18 + 6) -= 2;
        }
      }
      if (v16 == v17)
        goto LABEL_43;
    }
    return WebCore::treeOrder<(WebCore::TreeType)1>(*(_QWORD *)a1, *(_QWORD *)a2);
  }
}

uint64_t WebCore::treeOrder<(WebCore::TreeType)2>(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v14 = a1[2];
    v15 = *(_DWORD *)(a2 + 8);
    v16 = v14 == v15;
    if (v14 < v15)
      v17 = -1;
    else
      v17 = 1;
    if (v16)
      return 0;
    else
      return v17;
  }
  *(_DWORD *)(v4 + 24) += 2;
  while (1)
  {
    v5 = v4;
    v6 = (uint64_t *)(v4 + 32);
    v7 = *(_QWORD *)(v4 + 32);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
      {
        v8 = *(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL;
        if (v8)
        {
          v10 = *(_QWORD *)(v8 + 88);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 224);
            if (v11)
            {
              v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v4);
              v6 = (uint64_t *)(v4 + 32);
              v4 = v12;
              if (v12)
              {
LABEL_8:
                v9 = 0;
                *(_DWORD *)(v4 + 24) += 2;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
    {
      v13 = *(_QWORD *)(v5 + 200);
      if (!v13)
      {
        v4 = 0;
        goto LABEL_22;
      }
      v6 = (uint64_t *)(v13 + 8);
    }
    v4 = *v6;
    if (*v6)
      goto LABEL_8;
LABEL_22:
    v9 = 1;
LABEL_9:
    if (v4 == *(_QWORD *)a1)
      break;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    if ((v9 & 1) != 0)
    {
      v4 = *(_QWORD *)a1;
      *(_DWORD *)(*(_QWORD *)a1 + 24) += 2;
      while (1)
      {
        v5 = v4;
        v21 = (uint64_t *)(v4 + 32);
        v22 = *(_QWORD *)(v4 + 32);
        if (!v22
          || (*(_WORD *)(v22 + 28) & 8) == 0
          || (v23 = *(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL) == 0
          || (v25 = *(_QWORD *)(v23 + 88)) == 0
          || (v26 = *(_QWORD *)(v25 + 224)) == 0
          || (v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v4),
              v21 = (uint64_t *)(v4 + 32),
              (v4 = v27) == 0))
        {
          if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
          {
            v28 = *(_QWORD *)(v5 + 200);
            if (!v28)
            {
              v4 = 0;
LABEL_50:
              v24 = 1;
              goto LABEL_37;
            }
            v21 = (uint64_t *)(v28 + 8);
          }
          v4 = *v21;
          if (!*v21)
            goto LABEL_50;
        }
        v24 = 0;
        *(_DWORD *)(v4 + 24) += 2;
LABEL_37:
        if (v4 == *(_QWORD *)a2)
        {
          v19 = !WebCore::isOffsetBeforeChild(v4, *(_DWORD *)(a2 + 8), v5);
          v20 = 1;
          goto LABEL_53;
        }
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
        if ((v24 & 1) != 0)
        {
          v30 = *(_QWORD *)a1;
          v31 = *(_QWORD *)a2;
          if (*(_QWORD *)a1 == *(_QWORD *)a2)
            return 0;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          WebCore::commonInclusiveAncestorAndChildren<(WebCore::TreeType)2>(v30, v31, &v37);
          if (!v37)
            return 129;
          v32 = v38;
          if (!v38)
            return 255;
          if (v39)
          {
            v33 = *(unsigned __int16 *)(v38 + 28);
            v34 = *(unsigned __int16 *)(v39 + 28);
            if (((v33 | v34) & 0x80) != 0)
            {
              if ((v33 & 0x80) != 0)
                v35 = -127;
              else
                v35 = 1;
              if ((v34 & 0x80) != 0)
                return v35;
              else
                return 0xFFFFFFFFLL;
            }
            if (v38 == v39)
              return 255;
            do
              v32 = *(_QWORD *)(v32 + 56);
            while (v32 != v39 && v32 != 0);
            if (v32)
              return 255;
          }
          return 1;
        }
      }
    }
  }
  v19 = !WebCore::isOffsetBeforeChild(v4, a1[2], v5);
  v20 = -1;
LABEL_53:
  if (v19)
    v18 = -v20;
  else
    v18 = v20;
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v18;
}

uint64_t WebCore::BoundaryPoint::protectedDocument@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::BroadcastChannel::MainThreadBridge::ensureOnMainThread(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Page *v10;
  int v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  char v19;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 40);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = v5 - 96;
          if (*(_BYTE *)(v5 + 178))
          {
            if (*(unsigned __int8 *)(v5 + 178) - 1 < 2)
              ++*(_DWORD *)(v5 + 216);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v5 - 96);
            if ((result & 1) == 0)
            {
              result = 96;
              __break(0xC471u);
              return result;
            }
            v14 = *(_QWORD *)(*(_QWORD *)(v5 + 264) + 128);
            if (v14)
            {
              v15 = *a2;
              *a2 = 0;
              v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v16 = &off_1E33A1088;
              v16[1] = v15;
              v18 = v16;
              v19 = 0;
              (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 56))(v14, &v18);
              result = (uint64_t)v18;
              v18 = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            }
          }
          else
          {
            *(_DWORD *)(v5 - 264) += 2;
            v7 = *(_QWORD *)(v5 + 240);
            if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && (v9 = *(_QWORD *)(v8 + 24)) != 0)
            {
              v10 = *(WebCore::Page **)(v9 + 8);
              if (v10)
                ++*(_DWORD *)v10;
            }
            else
            {
              v10 = 0;
            }
            result = (*(uint64_t (**)(_QWORD, WebCore::Page *))(*(_QWORD *)*a2 + 16))(*a2, v10);
            if (v10)
            {
              if (*(_DWORD *)v10 == 1)
              {
                WebCore::Page::~Page(v10);
                result = WTF::fastFree(v12, v13);
              }
              else
              {
                --*(_DWORD *)v10;
              }
            }
          }
          v11 = *(unsigned __int8 *)(v5 + 178);
          if (*(_BYTE *)(v5 + 178))
          {
            if (v11 == 1)
            {
              if (*(_DWORD *)(v5 + 216) == 1)
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v5 - 96);
              else
                --*(_DWORD *)(v5 + 216);
            }
            else if (v11 == 2)
            {
              return (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
            }
          }
          else if (*(_DWORD *)(v5 - 264) == 2)
          {
            if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288));
          }
          else
          {
            *(_DWORD *)(v5 - 264) -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::BroadcastChannel::scriptExecutionContext(WebCore::BroadcastChannel *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

WebCore::BroadcastChannel *WebCore::BroadcastChannel::BroadcastChannel(WebCore::BroadcastChannel *this, WebCore::ScriptExecutionContext *a2, const WTF::String *a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  WebCore::SecurityOrigin *v28;
  WebCore::SecurityOrigin *v29;
  WebCore::SecurityOrigin *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  _BYTE v84[40];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_19689B170;
  *(_QWORD *)(v5 + 24) = this;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v5;
  *(_QWORD *)this = &unk_1E33A4FC0;
  *((_QWORD *)this + 1) = 0;
  if (!*((_BYTE *)a2 + 274))
  {
    v6 = (char *)a2 - 192;
    v7 = *((_QWORD *)a2 + 64);
    if (v7)
    {
      v8 = *(char **)(v7 + 8);
      if (v8)
        v6 = v8;
    }
    a2 = (WebCore::ScriptExecutionContext *)(v6 + 192);
  }
  *((_QWORD *)this + 4) = &off_1E33A18C0;
  *((_QWORD *)this + 5) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::BroadcastChannel *)((char *)this + 32), a2);
  *((_QWORD *)this + 4) = &off_1E33A0540;
  *((_QWORD *)this + 6) = 0;
  if (*((_BYTE *)a2 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19594C8F0);
  }
  v83 = (uint64_t)this + 32;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 16, &v83, (uint64_t)v84);
  *(_QWORD *)this = off_1E33A0AE8;
  *((_QWORD *)this + 4) = &unk_1E33A0B80;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = this;
    *(_BYTE *)(v10 + 32) = 0;
    v12 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v12 & 0xFFFF000000000000 | v10;
    v13 = v12 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)v13);
        v81 = *(unsigned int *)(v13 + 28);
        if ((_DWORD)v81)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v13 + 16), (WTF::StringImpl *)(*(_QWORD *)(v13 + 16) + 32 * v81));
        v82 = *(WTF **)(v13 + 16);
        if (v82)
        {
          *(_QWORD *)(v13 + 16) = 0;
          *(_DWORD *)(v13 + 24) = 0;
          WTF::fastFree(v82, v11);
        }
        WTF::fastFree((WTF *)v13, v11);
      }
    }
  }
  v16 = (unsigned int *)(*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)(v9 + 16) = v16;
  WTF::String::isolatedCopy();
  v19 = *((_QWORD *)this + 5);
  if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0)
  {
    v21 = v20 - 96;
    v22 = *(unsigned __int8 *)(v20 + 178);
    if (*(_BYTE *)(v20 + 178))
    {
      if (v22 == 1 || v22 == 2)
        ++*(_DWORD *)(v20 + 216);
    }
    else
    {
      *(_DWORD *)(v20 - 264) += 2;
    }
  }
  else
  {
    v21 = 0;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v21, v18);
  v24 = v23;
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 + 1, v23));
  v26 = (uint64_t)v23;
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 136))(v21) + 432) & 0x80000000000) != 0)
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 256))(v21);
  do
    v27 = __ldaxr((unsigned int *)v26);
  while (__stlxr(v27 + 1, (unsigned int *)v26));
  v28 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
  WebCore::SecurityOrigin::SecurityOrigin(v28, (const WebCore::SecurityOrigin *)v26);
  v29 = (WebCore::SecurityOrigin *)WTF::fastMalloc((WTF *)0x40);
  v30 = WebCore::SecurityOrigin::SecurityOrigin(v29, (const WebCore::SecurityOrigin *)v24);
  *(_QWORD *)(v9 + 32) = v28;
  *(_QWORD *)(v9 + 40) = v30;
  if (!v24)
    goto LABEL_26;
  do
  {
    v32 = __ldaxr(v24);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v24));
  if (v33)
  {
LABEL_26:
    if (!v26)
      goto LABEL_29;
    goto LABEL_27;
  }
  atomic_store(1u, v24);
  v75 = (WTF::StringImpl *)*((_QWORD *)v24 + 6);
  *((_QWORD *)v24 + 6) = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v31);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = (WTF::StringImpl *)*((_QWORD *)v24 + 5);
  *((_QWORD *)v24 + 5) = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v31);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = v24[8];
  if ((_DWORD)v77 != -1)
    ((void (*)(_BYTE *, unsigned int *))off_1E33A0FA8[v77])(v84, v24 + 2);
  v24[8] = -1;
  WTF::fastFree((WTF *)v24, v31);
  if (v26)
  {
    do
    {
LABEL_27:
      v34 = __ldaxr((unsigned int *)v26);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v26));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)v26);
      v78 = *(WTF::StringImpl **)(v26 + 48);
      *(_QWORD *)(v26 + 48) = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v31);
        else
          *(_DWORD *)v78 -= 2;
      }
      v79 = *(WTF::StringImpl **)(v26 + 40);
      *(_QWORD *)(v26 + 40) = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v31);
        else
          *(_DWORD *)v79 -= 2;
      }
      v80 = *(unsigned int *)(v26 + 32);
      if ((_DWORD)v80 != -1)
        ((void (*)(_BYTE *, uint64_t))off_1E33A0FA8[v80])(v84, v26 + 8);
      *(_DWORD *)(v26 + 32) = -1;
      WTF::fastFree((WTF *)v26, v31);
    }
  }
LABEL_29:
  v36 = *(unsigned __int8 *)(v21 + 274);
  if (*(_BYTE *)(v21 + 274))
  {
    if (v36 == 1)
    {
      if (*(_DWORD *)(v21 + 312) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      else
        --*(_DWORD *)(v21 + 312);
    }
    else if (v36 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v21 + 312));
    }
  }
  else if (*(_DWORD *)(v21 - 168) == 2)
  {
    if ((*(_WORD *)(v21 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v21 - 192));
  }
  else
  {
    *(_DWORD *)(v21 - 168) -= 2;
  }
  *((_QWORD *)this + 7) = v9;
  *((_WORD *)this + 32) = 0;
  do
    v37 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v37 + 1, (unsigned int *)v9));
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_167))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_167))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_167);
LABEL_38:
  if ((byte_1ECE83109 & 1) != 0)
  {
    v39 = qword_1ECE83110;
    v40 = *(_QWORD *)(v9 + 8);
    if (qword_1ECE83110)
    {
LABEL_41:
      v41 = *(_DWORD *)(v39 - 8);
      goto LABEL_42;
    }
  }
  else
  {
    qword_1ECE83110 = 0;
    byte_1ECE83109 = 1;
    v40 = *(_QWORD *)(v9 + 8);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u, 0);
  v39 = qword_1ECE83110;
  if (qword_1ECE83110)
    goto LABEL_41;
  v41 = 0;
LABEL_42:
  v42 = (v40 + ~(v40 << 32)) ^ ((unint64_t)(v40 + ~(v40 << 32)) >> 22);
  v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
  v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
  v45 = v41 & ((v44 >> 31) ^ v44);
  v46 = (uint64_t *)(v39 + 24 * v45);
  v47 = *v46;
  if (!*v46)
  {
LABEL_50:
    *v46 = v40;
    v50 = *((_QWORD *)this + 3);
    if (!v50)
    {
      v52 = 0;
      goto LABEL_62;
    }
    if (__ldaxr((unsigned __int8 *)v50))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v50))
    {
      goto LABEL_55;
    }
    MEMORY[0x19AEA534C](v50);
LABEL_55:
    if (*(_QWORD *)(v50 + 24))
    {
      ++*(_QWORD *)(v50 + 16);
      v52 = v50;
    }
    else
    {
      v52 = 0;
    }
    v53 = __ldxr((unsigned __int8 *)v50);
    if (v53 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v50))
      {
LABEL_62:
        v54 = v46[1];
        v46[1] = v52;
        if (!v54)
          goto LABEL_75;
        if (__ldaxr((unsigned __int8 *)v54))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v54))
        {
          goto LABEL_67;
        }
        MEMORY[0x19AEA534C](v54);
LABEL_67:
        v56 = *(_QWORD *)(v54 + 16) - 1;
        *(_QWORD *)(v54 + 16) = v56;
        if (!v56)
        {
          v57 = *(_QWORD *)(v54 + 8);
          v58 = __ldxr((unsigned __int8 *)v54);
          if (v58 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v54))
            {
              if (v57)
                goto LABEL_75;
LABEL_74:
              WTF::fastFree((WTF *)v54, v31);
              goto LABEL_75;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v54);
          if (v57)
            goto LABEL_75;
          goto LABEL_74;
        }
        v72 = __ldxr((unsigned __int8 *)v54);
        if (v72 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v54))
          {
LABEL_75:
            v46[2] = (uint64_t)this;
            if (qword_1ECE83110)
              v59 = *(_DWORD *)(qword_1ECE83110 - 12) + 1;
            else
              v59 = 1;
            *(_DWORD *)(qword_1ECE83110 - 12) = v59;
            if (qword_1ECE83110)
              v60 = *(_DWORD *)(qword_1ECE83110 - 12);
            else
              v60 = 0;
            v61 = (*(_DWORD *)(qword_1ECE83110 - 16) + v60);
            v62 = *(unsigned int *)(qword_1ECE83110 - 4);
            if (v62 > 0x400)
            {
              if (v62 > 2 * v61)
                goto LABEL_88;
            }
            else
            {
              if (3 * v62 > 4 * v61)
                goto LABEL_88;
              if (!(_DWORD)v62)
              {
                v63 = 8;
                goto LABEL_87;
              }
            }
            v63 = (_DWORD)v62 << (6 * *(_DWORD *)(qword_1ECE83110 - 12) >= (2 * v62));
LABEL_87:
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v63, v46);
            goto LABEL_88;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v54);
        goto LABEL_75;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v50);
    goto LABEL_62;
  }
  v48 = 0;
  v49 = 1;
  while (v47 != v40)
  {
    if (v47 == -1)
      v48 = v46;
    v45 = (v45 + v49) & v41;
    v46 = (uint64_t *)(v39 + 24 * v45);
    v47 = *v46;
    ++v49;
    if (!*v46)
    {
      if (v48)
      {
        *v48 = 0;
        v48[1] = 0;
        v48[2] = 0;
        --*(_DWORD *)(v39 - 16);
        v46 = v48;
      }
      goto LABEL_50;
    }
  }
LABEL_88:
  v64 = __ldxr((unsigned __int8 *)&_MergedGlobals_167);
  if (v64 != 1)
  {
    __clrex();
    goto LABEL_92;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_167))
LABEL_92:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_167);
  v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 40);
  if (v65)
  {
    v66 = *(_QWORD *)(v65 + 8);
    if (v66)
      v65 = v66 - 96;
    else
      v65 = 0;
  }
  v67 = *(_OWORD *)(v65 + 240);
  *(_OWORD *)&v84[8] = *(_OWORD *)(v65 + 224);
  *(_OWORD *)&v84[24] = v67;
  v68 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v68 = off_1E33A10B0;
  *(_QWORD *)(v68 + 16) = v9;
  *(_OWORD *)(v68 + 24) = *(_OWORD *)v84;
  *(_OWORD *)(v68 + 40) = *(_OWORD *)&v84[16];
  *(_QWORD *)(v68 + 56) = *(_QWORD *)&v84[32];
  v83 = v68;
  WebCore::BroadcastChannel::MainThreadBridge::ensureOnMainThread(v9, &v83);
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  do
  {
    v69 = __ldaxr((unsigned int *)v9);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, (unsigned int *)v9));
  if (!v70)
  {
    atomic_store(1u, (unsigned int *)v9);
    v73 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v73 = off_1E33A1060;
    v73[1] = v9;
    *(_QWORD *)v84 = v73;
    WTF::ensureOnMainThread();
    v74 = *(_QWORD *)v84;
    *(_QWORD *)v84 = 0;
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  }
  return this;
}

void WebCore::BroadcastChannel::~BroadcastChannel(WebCore::BroadcastChannel *this)
{
  WebCore::ActiveDOMObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  _QWORD *v35;
  _QWORD *v36;

  *(_QWORD *)this = off_1E33A0AE8;
  *((_QWORD *)this + 4) = &unk_1E33A0B80;
  v2 = (WebCore::BroadcastChannel *)((char *)this + 32);
  WebCore::BroadcastChannel::close((uint64_t)this);
  v4 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v33 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v33)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v33));
      v34 = *(WTF **)(v5 + 16);
      if (v34)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v34, v3);
      }
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_167))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_167))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](&_MergedGlobals_167);
LABEL_8:
  if ((byte_1ECE83109 & 1) == 0)
  {
    qword_1ECE83110 = 0;
    byte_1ECE83109 = 1;
    goto LABEL_40;
  }
  if (qword_1ECE83110)
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
    v10 = *(_DWORD *)(qword_1ECE83110 - 8);
    v11 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = (uint64_t *)(qword_1ECE83110 + 24 * v14);
    v16 = *v15;
    if (*v15 != v9)
    {
      v17 = 1;
      while (v16)
      {
        v14 = (v14 + v17) & v10;
        v15 = (uint64_t *)(qword_1ECE83110 + 24 * v14);
        v16 = *v15;
        ++v17;
        if (*v15 == v9)
          goto LABEL_16;
      }
      v15 = (uint64_t *)(qword_1ECE83110 + 24 * *(unsigned int *)(qword_1ECE83110 - 4));
    }
LABEL_16:
    if ((uint64_t *)(qword_1ECE83110 + 24 * *(unsigned int *)(qword_1ECE83110 - 4)) != v15)
    {
      v18 = v15[1];
      *v15 = -1;
      v15[1] = 0;
      if (!v18)
        goto LABEL_30;
      if (__ldaxr((unsigned __int8 *)v18))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v18))
      {
        goto LABEL_22;
      }
      MEMORY[0x19AEA534C](v18);
LABEL_22:
      v20 = *(_QWORD *)(v18 + 16) - 1;
      *(_QWORD *)(v18 + 16) = v20;
      if (!v20)
      {
        v21 = *(_QWORD *)(v18 + 8);
        v22 = __ldxr((unsigned __int8 *)v18);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v18))
          {
            if (v21)
              goto LABEL_30;
LABEL_29:
            WTF::fastFree((WTF *)v18, v3);
            goto LABEL_30;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v18);
        if (v21)
          goto LABEL_30;
        goto LABEL_29;
      }
      v32 = __ldxr((unsigned __int8 *)v18);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
        {
LABEL_30:
          v23 = qword_1ECE83110;
          ++*(_DWORD *)(qword_1ECE83110 - 16);
          if (v23)
            v24 = *(_DWORD *)(v23 - 12) - 1;
          else
            v24 = -1;
          *(_DWORD *)(v23 - 12) = v24;
          if (qword_1ECE83110)
          {
            v25 = *(_DWORD *)(qword_1ECE83110 - 4);
            if (6 * *(_DWORD *)(qword_1ECE83110 - 12) < v25 && v25 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v25 >> 1, 0);
          }
          goto LABEL_40;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_30;
    }
  }
LABEL_40:
  v27 = __ldxr((unsigned __int8 *)&_MergedGlobals_167);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_167))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_167);
  v28 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = off_1E33A1060;
      v35[1] = v28;
      v36 = v35;
      WTF::ensureOnMainThread();
      if (v36)
        (*(void (**)(_QWORD *))(*v36 + 8))(v36);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v2, v3);
  WebCore::EventTarget::~EventTarget(this, v31);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::BroadcastChannel::~BroadcastChannel(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::BroadcastChannel::close(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;

  if (!*(_BYTE *)(this + 64))
  {
    *(_BYTE *)(this + 64) = 1;
    v1 = *(unsigned int **)(this + 56);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33A10D8;
    v3[1] = v1;
    v7 = (uint64_t)v3;
    WebCore::BroadcastChannel::MainThreadBridge::ensureOnMainThread((uint64_t)v1, &v7);
    this = v7;
    if (v7)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v1)
    {
      do
      {
        v4 = __ldaxr(v1);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v1));
      if (!v5)
      {
        atomic_store(1u, v1);
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E33A1060;
        v6[1] = v1;
        v7 = (uint64_t)v6;
        WTF::ensureOnMainThread();
        this = v7;
        v7 = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

void `non-virtual thunk to'WebCore::BroadcastChannel::~BroadcastChannel(WebCore::BroadcastChannel *this)
{
  WebCore::BroadcastChannel::~BroadcastChannel((WebCore::BroadcastChannel *)((char *)this - 32));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::BroadcastChannel::~BroadcastChannel((WebCore::BroadcastChannel *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::BroadcastChannel::postMessage@<X0>(uint64_t result@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  int v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  int v34;
  WTF *v35;
  uint64_t v36;

  v5 = *(_QWORD *)(result + 40);
  if (!v5)
    goto LABEL_38;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_38;
  v9 = result;
  v10 = v6 - 96;
  if (!*(_BYTE *)(v6 + 178))
  {
    v11 = (_DWORD *)(v6 - 264);
    *(_DWORD *)(v6 - 264) += 2;
    result = WebCore::Document::isFullyActive((WebCore::Document *)(v6 - 288));
    v13 = result;
    v14 = *(unsigned __int8 *)(v6 + 178);
    if (*(_BYTE *)(v6 + 178))
    {
      if (v14 == 1)
      {
        if (*(_DWORD *)(v6 + 216) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v6 - 96);
        else
          --*(_DWORD *)(v6 + 216);
      }
      else if (v14 == 2)
      {
        result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
      }
    }
    else if (*v11 == 2)
    {
      if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v12);
    }
    else
    {
      *v11 -= 2;
    }
    if ((v13 & 1) != 0)
      goto LABEL_8;
LABEL_38:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  if (*(unsigned __int8 *)(v6 + 178) - 1 < 2)
    ++*(_DWORD *)(v6 + 216);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 64))(v6 - 96);
  if ((result & 1) == 0)
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x19594D2D4);
  }
  v25 = *(unsigned __int8 *)(v6 + 305);
  v26 = *(unsigned __int8 *)(v6 + 178);
  if (*(_BYTE *)(v6 + 178))
  {
    if (v26 == 1)
    {
      if (*(_DWORD *)(v6 + 216) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v6 - 96);
      else
        --*(_DWORD *)(v6 + 216);
    }
    else if (v26 == 2)
    {
      result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
    }
  }
  else if (*(_DWORD *)(v6 - 264) == 2)
  {
    if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v24);
  }
  else
  {
    *(_DWORD *)(v6 - 264) -= 2;
  }
  if (v25)
    goto LABEL_38;
LABEL_8:
  if (*(_BYTE *)(v9 + 64))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 8;
    *((_BYTE *)a4 + 16) = 1;
    return result;
  }
  v35 = 0;
  v36 = 0;
  v31[0] = 0;
  v31[1] = 0;
  WebCore::SerializedScriptValue::create(a2, a3, (uint64_t)v31, (uint64_t)&v35, 0, 0, 1, (uint64_t)&v32);
  if (!v34)
  {
    v17 = *(unsigned int **)(v9 + 56);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    if (!v34)
    {
      v19 = v32;
      v32 = 0;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v20 = off_1E33A1100;
      v20[1] = v17;
      v20[2] = v19;
      v31[0] = v20;
      WebCore::BroadcastChannel::MainThreadBridge::ensureOnMainThread((uint64_t)v17, v31);
      if (v31[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v31[0] + 8))(v31[0]);
      if (v17)
      {
        do
        {
          v22 = __ldaxr(v17);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v17));
        if (!v23)
        {
          atomic_store(1u, v17);
          v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v27 = off_1E33A1060;
          v27[1] = v17;
          v31[0] = v27;
          WTF::ensureOnMainThread();
          v28 = v31[0];
          v31[0] = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v16 = v34;
      if (v34 == -1)
        goto LABEL_23;
      goto LABEL_22;
    }
    goto LABEL_50;
  }
  if (v34 != 1)
  {
LABEL_50:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_51;
  }
  v15 = v33;
  v33 = 0;
  *(_BYTE *)a4 = v32;
  a4[1] = v15;
  v16 = 1;
  *((_BYTE *)a4 + 16) = 1;
LABEL_22:
  ((void (*)(_QWORD *, uint64_t *))off_1E33A0FB8[v16])(v31, &v32);
LABEL_23:
  if (HIDWORD(v36))
  {
    v29 = (uint64_t *)v35;
    v30 = 8 * HIDWORD(v36);
    do
    {
      v29 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v29, v21)+ 1;
      v30 -= 8;
    }
    while (v30);
  }
  result = (uint64_t)v35;
  if (v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    return WTF::fastFree((WTF *)result, v21);
  }
  return result;
}

uint64_t WebCore::BroadcastChannel::dispatchMessageTo(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t result;
  _QWORD *v26;
  char v27;
  uint64_t v28[2];
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  *a3 = 0;
  if ((byte_1ECE8310A & 1) != 0)
  {
    if (qword_1ECE83118)
    {
      v5 = *(_DWORD *)(qword_1ECE83118 - 8);
      v6 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(qword_1ECE83118 + 48 * v9);
      if (v10 != a1)
      {
        v11 = 1;
        while (v10)
        {
          v9 = (v9 + v11) & v5;
          v10 = *(_QWORD *)(qword_1ECE83118 + 48 * v9);
          ++v11;
          if (v10 == a1)
            goto LABEL_7;
        }
        goto LABEL_29;
      }
LABEL_7:
      v12 = qword_1ECE83118 + 48 * v9;
      v13 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      v14 = v12 + 16;
      if (v13 | v15)
      {
        v16 = *(_OWORD *)(v14 + 16);
        v28[0] = v13;
        v28[1] = v15;
        v29 = v16;
        v17 = *a2;
        *a2 = 0;
        v18 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v18 = &off_1E33A1150;
        *(_QWORD *)(v18 + 8) = a1;
        *(_QWORD *)(v18 + 16) = v17;
        *(_QWORD *)(v18 + 24) = v3;
        *(_BYTE *)(v18 + 32) = 1;
        v26 = (_QWORD *)v18;
        v27 = 0;
        if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
        {
          __clrex();
        }
        else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
        {
          goto LABEL_12;
        }
        MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_12:
        {
          WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
        }
        v20 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, v28);
        if (v20)
        {
          v21 = v20[4];
          if (v21)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 88))(v20[4]) & 1) != 0)
            {
              v22 = 1;
              goto LABEL_18;
            }
            (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v21 + 336))(v21, &v26);
          }
        }
        else
        {
          v21 = 0;
        }
        v22 = 0;
LABEL_18:
        v23 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
        if (v23 == 1)
        {
          if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
          {
            if (!v22)
              goto LABEL_31;
LABEL_24:
            (*(void (**)(_QWORD *, uint64_t))(*v26 + 16))(v26, v21);
            goto LABEL_31;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
        if (!v22)
          goto LABEL_31;
        goto LABEL_24;
      }
    }
  }
  else
  {
    qword_1ECE83118 = 0;
    byte_1ECE8310A = 1;
  }
LABEL_29:
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = &off_1E335A710;
  v24[1] = v3;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19594D59CLL);
  }
  v26 = v24;
  WTF::callOnMainThread();
LABEL_31:
  result = (uint64_t)v26;
  v26 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WebCore::EventNames **WebCore::BroadcastChannel::eventListenersDidChange(WebCore::EventNames **this)
{
  WebCore::EventNames **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = this;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v3 = (uint64_t)this;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = (unint64_t)v1[2];
  if ((v5 & 0x1000000000000) != 0 && (v7 = v5 & 0xFFFFFFFFFFFFLL, v8 = *(unsigned int *)(v7 + 28), (_DWORD)v8))
  {
    v9 = *(uint64_t **)(v7 + 16);
    v10 = *(_QWORD *)(v4 + 1192);
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      v6 = v12 == v10;
      v13 = v12 == v10 || v11 == 0;
      v11 -= 32;
    }
    while (!v13);
  }
  else
  {
    v6 = 0;
  }
  *((_BYTE *)v1 + 65) = v6;
  return this;
}

BOOL WebCore::BroadcastChannel::virtualHasPendingActivity(WebCore::BroadcastChannel *this)
{
  return !*((_BYTE *)this + 64) && *((_BYTE *)this + 65) != 0;
}

BOOL `non-virtual thunk to'WebCore::BroadcastChannel::virtualHasPendingActivity(WebCore::BroadcastChannel *this)
{
  return !*((_BYTE *)this + 32) && *((_BYTE *)this + 33) != 0;
}

uint64_t WebCore::CDATASection::nodeName(WebCore::CDATASection *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::CDATASection::cloneNodeInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  _DWORD *v8;
  int v9;

  v5 = *(WTF::StringImpl **)(a1 + 80);
  if (v5)
    *(_DWORD *)v5 += 2;
  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x400300000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  if (v5)
  {
    v9 = *(_DWORD *)v5;
    *(_DWORD *)v5 += 2;
    *(_QWORD *)(result + 80) = v5;
    *(_QWORD *)result = off_1E33A0DB8;
    *a3 = result;
    if (v9)
      *(_DWORD *)v5 = v9;
    else
      return WTF::StringImpl::destroy(v5, v7);
  }
  else
  {
    v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v8 += 2;
      *(_QWORD *)(result + 80) = v8;
    }
    else
    {
      *(_QWORD *)(result + 80) = 0;
    }
    *(_QWORD *)result = off_1E33A0DB8;
    *a3 = result;
  }
  return result;
}

unsigned int *WebCore::CDATASection::virtualCreate@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  void *v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  result = (unsigned int *)bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 2) = xmmword_1968BC9D0;
  *((_QWORD *)result + 3) = 0x400300000002;
  *((_QWORD *)result + 4) = 0;
  v8 = v5 + 96;
  if (!v5)
    v8 = 0;
  *((_QWORD *)result + 5) = v8;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  ++*(_DWORD *)(v5 + 3324);
  v9 = *a2;
  if (*a2 || (v9 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v9 += 2;
  *((_QWORD *)result + 10) = v9;
  *(_QWORD *)result = off_1E33A0DB8;
  *a3 = result;
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::CharacterData::setData(WebCore::CharacterData *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl **v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;

  if (*a2)
    v4 = a2;
  else
    v4 = (const WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v5 = (unsigned int *)*((_QWORD *)this + 10);
  if (v5)
    v6 = v5[1];
  else
    v6 = 0;
  if (!WTF::equal((WTF *)v5, *v4, a3))
    goto LABEL_7;
  v9 = *((_QWORD *)this + 4);
  v10 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v11 = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v10 + 24) = v11 + 2;
  v12 = *(_WORD *)(v10 + 3292);
  v13 = (v12 & 0x20) == 0
     && !(*(_BYTE *)(v10 + 3364) & 4 | v12 & 1)
     && (!v9
      || (*(_WORD *)(v9 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24));
  if (v11)
  {
    *(_DWORD *)(v10 + 24) = v11;
  }
  else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  if (v13)
  {
    v14 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_DWORD *)(v14 + 24) += 2;
    result = WebCore::Document::textRemoved((WebCore::Document *)v14, this, 0, v6);
    v15 = *(_QWORD *)(v14 + 528);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        result = WebCore::FrameSelection::textWasReplaced(*(_QWORD *)(*(_QWORD *)(v16 + 296) + 3064), this, 0, v6, v6);
        do
        {
          v19 = __ldaxr(v17);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v17));
        if (!v20)
        {
          atomic_store(1u, v17);
          v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v21 = off_1E31FE290;
          v21[1] = v17;
          v22 = (uint64_t)v21;
          WTF::ensureOnMainThread();
          result = v22;
          if (v22)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
      }
    }
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v14);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  else
  {
LABEL_7:
    *((_DWORD *)this + 6) += 2;
    if (*v4)
      v7 = *((unsigned int *)*v4 + 1);
    else
      v7 = 0;
    result = (*(uint64_t (**)(WebCore::CharacterData *, const WTF::StringImpl **, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 376))(this, v4, 0, v6, v7, 1);
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CharacterData::substringData@<X0>(WebCore::CharacterData *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *result;
  unsigned int v6;
  int v7;
  WTF::StringImpl *v8;

  result = (WTF::StringImpl *)*((_QWORD *)this + 10);
  if (!result)
  {
    if (a2)
      goto LABEL_3;
    result = 0;
LABEL_7:
    v7 = 0;
    *(_QWORD *)a4 = result;
    goto LABEL_8;
  }
  v6 = *((_DWORD *)result + 1);
  if (v6 >= a2)
  {
    if (a2 || v6 > a3)
    {
      WTF::StringImpl::substring(result);
      result = v8;
    }
    else
    {
      *(_DWORD *)result += 2;
    }
    goto LABEL_7;
  }
LABEL_3:
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v7 = 1;
LABEL_8:
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

WebCore::Style::Invalidator **std::optional<WebCore::Style::ChildChangeInvalidation>::emplace[abi:sn180100]<WebCore::ContainerNode &,WebCore::ContainerNode::ChildChange &,void>(WebCore::Style::Invalidator **this, uint64_t a2, const WebCore::Style::RuleSet *a3)
{
  __int16 v6;
  WebCore::Style::Invalidator *v7;
  int v8;
  _BOOL4 v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;

  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)this + 16))
    {
      if (*((_BYTE *)this + 17))
        WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(this, a2, a3);
      WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)this);
    }
    *((_BYTE *)this + 24) = 0;
  }
  v6 = *(_WORD *)(a2 + 28);
  if ((v6 & 8) != 0)
    v7 = (WebCore::Style::Invalidator *)a2;
  else
    v7 = 0;
  *this = v7;
  this[1] = a3;
  if ((v6 & 8) == 0)
    goto LABEL_11;
  if ((*(_BYTE *)(a2 + 22) & 8) == 0)
    goto LABEL_11;
  v11 = *(_QWORD **)(a2 + 40);
  v12 = v11[1];
  if (!*(_QWORD *)(v12 + 1944) || *(_BYTE *)(v12 + 3405))
    goto LABEL_11;
  if ((*(_BYTE *)(a2 + 70) & 4) != 0)
  {
    v18 = *v11;
    v19 = (*(_WORD *)(*v11 + 28) & 0x80) == 0 || v18 == 0;
    v20 = v18 + 216;
    if (v19)
      v20 = v12 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v20 + 236))
      goto LABEL_11;
  }
  v13 = *(_QWORD *)(v12 + 1272);
  if (v13 && (*(_BYTE *)(v13 + 70) & 4) != 0)
  {
LABEL_11:
    v8 = 0;
    v9 = 0;
    *((_BYTE *)this + 16) = 0;
  }
  else
  {
    if (!*(_BYTE *)(v12 + 3362) && *(_BYTE *)(v12 + 3390))
    {
      v21 = *(unsigned __int8 *)(v12 + 3391);
      *((_BYTE *)this + 16) = v21;
      if (!v21)
      {
        v8 = 0;
        v9 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      *((_BYTE *)this + 16) = 1;
    }
    v14 = *v11;
    v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0 || v14 == 0;
    v16 = v14 + 216;
    v17 = v12 + 1328;
    if (!v15)
      v17 = v16;
    v9 = *(unsigned __int8 *)(*(_QWORD *)v17 + 236) != 0;
    v8 = 1;
  }
LABEL_12:
  *((_BYTE *)this + 17) = v9;
  *((_BYTE *)this + 18) = *(_QWORD *)(a2 + 80) == 0;
  if (v8 && v9)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(this, a2, a3);
  *((_BYTE *)this + 24) = 1;
  return this;
}

uint64_t WebCore::CharacterData::appendData(uint64_t this, const WTF::String *a2)
{
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = (_QWORD *)this;
  v4 = *(WTF::StringImpl **)(this + 80);
  if (v4)
    *(_DWORD *)v4 += 2;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  if (v4)
    v6 = *((_DWORD *)v4 + 1);
  else
    v6 = 0;
  if (v5)
    v7 = *(_DWORD *)(v5 + 4);
  else
    v7 = 0;
  if ((v7 | v6) < 0 || (this = (v6 + v7), __OFADD__(v6, v7)))
  {
    v14 = 0;
    goto LABEL_40;
  }
  if (v4)
  {
    v8 = *((_DWORD *)v4 + 4);
    v9 = (v8 >> 2) & 1;
    if (v5 && (v8 & 4) != 0)
      goto LABEL_14;
  }
  else
  {
    if (v5)
    {
LABEL_14:
      v9 = (*(unsigned __int8 *)(v5 + 16) >> 2) & 1;
      goto LABEL_15;
    }
    v9 = 1;
  }
LABEL_15:
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v9, (uint64_t)v4, v5, &v14);
  if (!v14)
  {
LABEL_40:
    __break(0xC471u);
    return this;
  }
  v10 = v3[10];
  if (v10)
    v11 = *(unsigned int *)(v10 + 4);
  else
    v11 = 0;
  if (*(_QWORD *)a2)
    v12 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  else
    v12 = 0;
  (*(void (**)(_QWORD *, WTF::StringImpl **, uint64_t, _QWORD, uint64_t, _QWORD))(*v3 + 376))(v3, &v14, v11, 0, v12, 0);
  this = (uint64_t)v14;
  v14 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
    else
      *(_DWORD *)this -= 2;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)v5, v13);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v13);
    else
      *(_DWORD *)v4 -= 2;
  }
  return this;
}

uint64_t WebCore::CharacterData::insertData@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;

  v6 = this;
  v8 = *(_QWORD *)(this + 80);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 4);
    if (v9 < a3)
    {
LABEL_3:
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = 1;
      return this;
    }
    v10 = *(char **)(v8 + 8);
    v11 = (unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32;
  }
  else
  {
    if ((_DWORD)a3)
      goto LABEL_3;
    v10 = 0;
    v9 = 0;
    v11 = 0x100000000;
  }
  v12 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v13 = *(char **)(v12 + 8);
    v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  v15 = a3 | 0x100000000;
  if (!HIDWORD(v11))
    v15 = a3;
  if (v9 <= a3)
    v15 = v11 | v9;
  if ((_DWORD)v9)
    v16 = v10;
  else
    v16 = "";
  if ((_DWORD)v9)
    v17 = v15;
  else
    v17 = 0x100000000;
  v18 = (v9 - a3);
  if (v9 <= a3)
  {
    v18 = 0x100000000;
    v10 = "";
    goto LABEL_20;
  }
  if ((_DWORD)a3)
  {
    v24 = v9 - a3;
    if (HIDWORD(v11))
    {
      if (v24 >= v18)
      {
        v10 += a3;
        v18 |= 0x100000000uLL;
        goto LABEL_20;
      }
    }
    else if (v24 >= v18)
    {
      v10 += 2 * a3;
      goto LABEL_20;
    }
    __break(1u);
LABEL_49:
    v25 = 0;
LABEL_50:
    __break(0xC471u);
    return this;
  }
  v18 = v11 | v9;
LABEL_20:
  if (((v18 | v14) & 0x80000000) != 0)
    goto LABEL_49;
  v19 = v14 + v18;
  v20 = __OFADD__((_DWORD)v14, (_DWORD)v18);
  if ((v17 & 0x80000000) != 0)
    goto LABEL_49;
  if (v20)
    goto LABEL_49;
  this = (v17 + v19);
  if (__OFADD__((_DWORD)v17, v19))
    goto LABEL_49;
  LODWORD(v21) = 0;
  if ((v14 & 0x100000000) != 0 && (v17 & 0x100000000) != 0)
    v21 = HIDWORD(v18);
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(this, v21, v16, v17, v13, v14, v10, v18, &v25);
  if (!v25)
    goto LABEL_50;
  if (*(_QWORD *)a2)
    v22 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  else
    v22 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 376))(v6, &v25, a3, 0, v22, 1);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  this = (uint64_t)v25;
  v25 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v23);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::CharacterData::deleteData@<X0>(WebCore::CharacterData *this@<X0>, WTF::String *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v9 = *((_QWORD *)this + 10);
  result = (WebCore::CharacterData *)((char *)this + 80);
  v8 = v9;
  if (v9)
  {
    v10 = *(_DWORD *)(v8 + 4);
    if (v10 < a2)
    {
LABEL_3:
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
  }
  else
  {
    if ((_DWORD)a2)
      goto LABEL_3;
    v10 = 0;
  }
  v11 = v10 - (_DWORD)a2;
  if (v11 >= a3)
    v12 = a3;
  else
    v12 = v11;
  WTF::makeStringByRemoving(result, a2);
  (*(void (**)(WebCore::CharacterData *, WTF::StringImpl **, WTF::String *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 376))(this, &v14, a2, v12, 0, 1);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CharacterData::replaceData@<X0>(WTF::StringImpl *this@<X0>, const WTF::String *a2@<X3>, uint64_t a3@<X1>, unsigned int a4@<W2>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;

  v7 = this;
  v9 = *((_QWORD *)this + 10);
  if (!v9)
  {
    if ((_DWORD)a3)
      goto LABEL_3;
    v10 = 0;
    v17 = 0;
    v13 = 0;
    v12 = 0;
    v15 = 0x100000000;
    v14 = 1;
    goto LABEL_52;
  }
  v10 = *(unsigned int *)(v9 + 4);
  v11 = v10 - a3;
  if (v10 < a3)
  {
LABEL_3:
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
    return this;
  }
  if (v11 >= a4)
    v12 = a4;
  else
    v12 = v11;
  v13 = *(char **)(v9 + 8);
  v14 = ((unint64_t)*(unsigned int *)(v9 + 16) >> 2) & 1;
  v15 = v10 & 0xFFFFFFFEFFFFFFFFLL | (v14 << 32);
  if (!(_DWORD)v10)
  {
    v10 = 0;
    v17 = 0;
LABEL_52:
    v16 = 0x100000000;
    v18 = "";
    goto LABEL_11;
  }
  if (v10 <= a3)
  {
    v17 = v10;
    v18 = v13;
    v16 = v10 & 0xFFFFFFFEFFFFFFFFLL | (v14 << 32);
  }
  else
  {
    v16 = (v14 << 32) | a3;
    v17 = v10;
    v18 = v13;
  }
LABEL_11:
  v19 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v19 += 2;
  v20 = (v12 + a3);
  v21 = v17 - v20;
  if (v17 <= v20)
  {
    v21 = 0x100000000;
    v13 = "";
  }
  else
  {
    if (!(_DWORD)v20)
    {
      v21 = v15;
      goto LABEL_16;
    }
    v31 = v10 - v20;
    if (v14)
    {
      if (v31 >= v21)
      {
        v13 += v20;
        v21 |= 0x100000000uLL;
        goto LABEL_16;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v31 < v21)
      goto LABEL_55;
    v13 += 2 * v20;
  }
LABEL_16:
  if (v19)
    v22 = *(_DWORD *)(v19 + 4);
  else
    v22 = 0;
  if (((v22 | v21) & 0x80000000) != 0)
    goto LABEL_56;
  v23 = __OFADD__(v22, (_DWORD)v21);
  v24 = v22 + v21;
  v25 = v23;
  if ((v16 & 0x80000000) != 0)
    goto LABEL_56;
  if (v25)
    goto LABEL_56;
  v26 = v16 + v24;
  if (__OFADD__((_DWORD)v16, v24))
    goto LABEL_56;
  if ((v16 & 0x100000000) == 0)
  {
    LODWORD(v28) = 0;
    goto LABEL_32;
  }
  if (!v19 || (*(_BYTE *)(v19 + 16) & 4) != 0)
  {
    v28 = HIDWORD(v21);
LABEL_32:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((uint64_t)&v32, v26, v28, v18, v16, v19, v13, v21);
    if (v32)
    {
      if (!v19)
        goto LABEL_36;
      goto LABEL_34;
    }
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x19594E334);
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((uint64_t)&v32, v26, 0, v18, v16, v19, v13, v21);
  if (!v32)
    goto LABEL_56;
LABEL_34:
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v19, v27);
  else
    *(_DWORD *)v19 -= 2;
LABEL_36:
  if (*(_QWORD *)a2)
    v29 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  else
    v29 = 0;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 376))(v7, &v32, a3, v12, v29, 1);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  this = v32;
  v32 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v30);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::CharacterData::nodeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 80);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::CharacterData::setNodeValue@<X0>(WebCore::CharacterData *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;

  result = WebCore::CharacterData::setData(this, a2, a3);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return result;
}

WTF::StringImpl *WebCore::CharacterData::setDataAndUpdate(WebCore::Text *this, _QWORD *a2, const WebCore::Style::RuleSet *a3, int a4, int a5, int a6)
{
  WebCore::Text *v11;
  WebCore::Text *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::Node *v27;
  void *v28;
  void *v29;
  WTF::StringImpl *result;
  WebCore::Style::Invalidator *v31;
  WebCore::Style::Invalidator *v32;
  WebCore::Style::Invalidator *v33[2];
  char v34;
  char v35;
  char v36;
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v11 = this;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  LOBYTE(v38) = 4;
  v12 = this;
  while (1)
  {
    v12 = (WebCore::Text *)(*((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFLL);
    if (!v12)
      break;
    if ((*((_WORD *)v12 + 14) & 8) != 0)
    {
      *((_DWORD *)v12 + 6) += 2;
      break;
    }
  }
  *(_QWORD *)&v39 = v12;
  do
  {
    this = (WebCore::Text *)*((_QWORD *)this + 7);
    if (!this)
    {
      *((_QWORD *)&v39 + 1) = 0;
      LOWORD(v40) = 257;
      goto LABEL_11;
    }
  }
  while ((*((_WORD *)this + 14) & 8) == 0);
  v13 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v13 + 2;
  *((_QWORD *)&v39 + 1) = this;
  LOWORD(v40) = 257;
  if (v13)
  {
    *((_DWORD *)this + 6) = v13;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(this, a2);
  }
LABEL_11:
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v12, a2);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)v11 + 10);
  *((_QWORD *)v11 + 10) = 0;
  v37 = v14;
  LOBYTE(v33[0]) = 0;
  v36 = 0;
  v15 = *((_QWORD *)v11 + 4);
  if (v15)
  {
    *(_DWORD *)(v15 + 24) += 2;
    std::optional<WebCore::Style::ChildChangeInvalidation>::emplace[abi:sn180100]<WebCore::ContainerNode &,WebCore::ContainerNode::ChildChange &,void>(v33, v15, (const WebCore::Style::RuleSet *)&v38);
    if (*(_DWORD *)(v15 + 24) == 2)
    {
      if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
    }
    else
    {
      *(_DWORD *)(v15 + 24) -= 2;
    }
  }
  v16 = (_DWORD *)*a2;
  if (*a2)
    *v16 += 2;
  v17 = (WTF::StringImpl *)*((_QWORD *)v11 + 10);
  *((_QWORD *)v11 + 10) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v36 && v34)
  {
    if (v35)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v33, (uint64_t)a2, a3);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v33);
  }
  *((_WORD *)v11 + 15) &= ~0x100u;
  v18 = *(_QWORD *)(*((_QWORD *)v11 + 5) + 8);
  *(_DWORD *)(v18 + 24) += 2;
  if (a4 && a6)
    WebCore::Document::textRemoved((WebCore::Document *)v18, v11, a3, a4);
  if (a5 && a6)
    WebCore::Document::textInserted((WebCore::Document *)v18, v11, a3, a5);
  v19 = *((_WORD *)v11 + 14);
  if ((v19 & 2) != 0)
  {
    WebCore::Text::updateRendererAfterContentChange(v11, a3, a4);
  }
  else if ((v19 & 0xF000) == 0x7000)
  {
    WebCore::ProcessingInstruction::checkStyleSheet(v11);
  }
  v20 = *(_QWORD *)(v18 + 528);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      WebCore::FrameSelection::textWasReplaced(*(_QWORD *)(*(_QWORD *)(v21 + 296) + 3064), v11, a3, a4, a5);
      do
      {
        v24 = __ldaxr(v22);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v22));
      if (!v25)
      {
        atomic_store(1u, v22);
        v31 = (WebCore::Style::Invalidator *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v31 = off_1E31FE290;
        *((_QWORD *)v31 + 1) = v22;
        v33[0] = v31;
        WTF::ensureOnMainThread();
        v32 = v33[0];
        v33[0] = 0;
        if (v32)
          (*(void (**)(WebCore::Style::Invalidator *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
  }
  v26 = *(_QWORD *)(*((_QWORD *)v11 + 5) + 8);
  *(_QWORD *)(v26 + 1288) = ++WebCore::Document::s_globalTreeVersion;
  v27 = (WebCore::Node *)*((_QWORD *)v11 + 4);
  if (v27)
  {
    *((_DWORD *)v27 + 6) += 2;
    (*(void (**)(WebCore::Node *, __int128 *))(*(_QWORD *)v27 + 376))(v27, &v38);
    if (*((_DWORD *)v27 + 6) == 2)
    {
      if ((*((_WORD *)v27 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v27, v28);
    }
    else
    {
      *((_DWORD *)v27 + 6) -= 2;
    }
  }
  WebCore::CharacterData::dispatchModifiedEvent((unsigned int *)v11, (const WTF::String *)&v37);
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v18, v29);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::CharacterData::dispatchModifiedEvent(unsigned int *this, const WTF::String *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  WebCore::Event *v8;
  void *v9;
  uint64_t v10;
  WebCore::MutationObserver **v11;
  void *v12;
  WebCore::MutationObserver **v13;
  WebCore::MutationObserver **v14;

  v3 = this;
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3364) & 4) != 0)
  {
    WebCore::Node::registeredMutationObservers((uint64_t)this, 4, 0, &v14);
    this = (unsigned int *)v14;
    if (v14)
    {
      if (*((_DWORD *)v14 - 3))
      {
        v10 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v10 = 0;
        v11 = v14;
        v14 = 0;
        *(_QWORD *)v10 = v11;
        *(_BYTE *)(v10 + 8) = 64;
        if (v14)
          WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(v14, v9);
        WebCore::MutationRecord::createCharacterData((WebCore::MutationRecord *)v3, a2, &v14);
        WebCore::MutationObserverInterestGroup::enqueueMutationRecord((uint64_t *)v10, (WTF::StringImpl **)&v14);
        v13 = v14;
        v14 = 0;
        if (v13)
        {
          if (*((_DWORD *)v13 + 2) == 1)
            (*((void (**)(WebCore::MutationObserver **))*v13 + 1))(v13);
          else
            --*((_DWORD *)v13 + 2);
        }
        if (*(_QWORD *)v10)
          WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*(WebCore::MutationObserver ***)v10, v12);
        this = (unsigned int *)WTF::fastFree((WTF *)v10, v12);
      }
      else
      {
        this = (unsigned int *)WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(v14, a2);
      }
    }
  }
  v4 = *((_QWORD *)v3 + 5);
  if ((*((_BYTE *)v3 + 22) & 0x10) == 0)
  {
    if ((*(_WORD *)(*(_QWORD *)(v4 + 8) + 3292) & 0x20) != 0)
    {
      v7 = (_QWORD *)(WebCore::eventNames((WebCore *)this) + 8);
      v8 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
      WebCore::MutationEvent::MutationEvent((uint64_t)v8, v7, 1, 0, 0, (_DWORD **)a2, (_DWORD **)v3 + 10);
      WebCore::Node::dispatchScopedEvent((WebCore::Node *)v3, v8);
      if (*((_DWORD *)v8 + 4) == 1)
        (*(void (**)(WebCore::Event *))(*(_QWORD *)v8 + 8))(v8);
      else
        --*((_DWORD *)v8 + 4);
    }
    this = (unsigned int *)WebCore::Node::dispatchSubtreeModifiedEvent((uint64_t)v3);
    v4 = *((_QWORD *)v3 + 5);
  }
  v5 = *(_QWORD *)(v4 + 8);
  *(_DWORD *)(v5 + 24) += 2;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    this = (unsigned int *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v5, a2);
    if (this)
      this = (unsigned int *)WebCore::InspectorInstrumentation::characterDataModifiedImpl((uint64_t)this, (WebCore::CharacterData *)v3);
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::ChildListMutationAccumulator::willRemoveChild(WebCore::ChildListMutationAccumulator *this, WebCore::Node *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  *((_DWORD *)a2 + 6) += 2;
  if (!*((_DWORD *)this + 13))
  {
    v4 = (_DWORD *)((char *)this + 36);
    if (!*((_DWORD *)this + 9))
      goto LABEL_10;
    if (*((WebCore::Node **)this + 8) == a2)
    {
LABEL_4:
      v5 = *((_QWORD *)a2 + 7);
      if (v5)
        *(_DWORD *)(v5 + 24) += 2;
      result = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v5;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      goto LABEL_28;
    }
  }
  WebCore::ChildListMutationAccumulator::enqueueMutationRecord(this);
  v4 = (_DWORD *)((char *)this + 36);
  if (*((_DWORD *)this + 9) || *((_DWORD *)this + 13))
    goto LABEL_4;
LABEL_10:
  v7 = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL;
  if (v7)
    *(_DWORD *)((*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v7;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = *((_QWORD *)a2 + 7);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v9;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v11);
    v13 = v12;
    if (v12)
    {
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 + 1, v12));
    }
  }
  else
  {
    v13 = 0;
  }
  result = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v13;
  if (result)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)result));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)result);
      v26 = *(unsigned int *)(result + 28);
      if ((_DWORD)v26)
      {
        v29 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v26));
        result = v29;
      }
      v27 = *(WTF **)(result + 16);
      if (v27)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v28 = result;
        WTF::fastFree(v27, a2);
        result = v28;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
LABEL_28:
  v17 = *((unsigned int *)this + 9);
  if ((_DWORD)v17 == *((_DWORD *)this + 8))
  {
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17 + 1)
      v20 = v17 + 1;
    else
      v20 = v19;
    if (v20 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19594EBC4);
    }
    v21 = (void *)*((_QWORD *)this + 3);
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *((_DWORD *)this + 8) = v20;
    *((_QWORD *)this + 3) = v22;
    result = (uint64_t)memcpy(v22, v21, 8 * v17);
    if (v21)
    {
      if (*((void **)this + 3) == v21)
      {
        *((_QWORD *)this + 3) = 0;
        *((_DWORD *)this + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v21, v23);
    }
    v17 = *((unsigned int *)this + 9);
    v24 = (_QWORD *)(*((_QWORD *)this + 3) + 8 * v17);
  }
  else
  {
    v24 = (_QWORD *)(*((_QWORD *)this + 3) + 8 * v17);
  }
  v25 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v25 + 2;
  *v24 = a2;
  *v4 = v17 + 1;
  if (v25)
  {
    *((_DWORD *)a2 + 6) = v25;
  }
  else if ((*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef(a2);
  }
  return result;
}

void WebCore::EmptyNodeList::~EmptyNodeList(WebCore::EmptyNodeList *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::NodeListsNodeData **v4;
  WebCore::NodeListsNodeData *v5;
  uint64_t v6;
  WTF *v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WebCore::NodeListsNodeData *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 4);
  v4 = (WebCore::NodeListsNodeData **)(*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL);
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  *(_DWORD *)(v3 + 24) += 2;
  v6 = *(_QWORD *)v5;
  if (*(_QWORD *)v5)
    LODWORD(v6) = *(_QWORD *)(v6 + 8) != 0;
  v7 = (WTF *)*((_QWORD *)v5 + 1);
  if (v7)
    v8 = *((_QWORD *)v7 + 1) != 0;
  else
    v8 = 0;
  v9 = v8 + v6;
  v10 = *((_QWORD *)v5 + 2);
  if (v10)
    LODWORD(v10) = *(_DWORD *)(v10 - 12);
  v11 = v9 + v10;
  v12 = *((_QWORD *)v5 + 3);
  if (v12)
    LODWORD(v12) = *(_DWORD *)(v12 - 12);
  v13 = v11 + v12;
  v14 = *((_QWORD *)v5 + 4);
  if (v14)
    LODWORD(v14) = *(_DWORD *)(v14 - 12);
  if (v13 + (_DWORD)v14 == 1)
  {
    v15 = *v4;
    *v4 = 0;
    if (!v15)
      goto LABEL_17;
    WebCore::NodeListsNodeData::~NodeListsNodeData(v15, a2);
    goto LABEL_16;
  }
  *((_QWORD *)v5 + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
LABEL_16:
      WTF::fastFree(v7, a2);
      goto LABEL_17;
    }
    --*(_DWORD *)v7;
  }
LABEL_17:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
  v17 = *((_QWORD *)this + 3);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (WTF *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, a2);
      else
        --*(_DWORD *)v18;
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::EmptyNodeList::~EmptyNodeList(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::ChildNodeList::~ChildNodeList(WebCore::ChildNodeList *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::NodeListsNodeData **v4;
  WebCore::NodeListsNodeData *v5;
  WTF *v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WebCore::NodeListsNodeData *v15;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;

  v3 = *((_QWORD *)this + 4);
  v4 = (WebCore::NodeListsNodeData **)(*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL);
  if (v4)
    v5 = *v4;
  else
    v5 = 0;
  *(_DWORD *)(v3 + 24) += 4;
  v6 = *(WTF **)v5;
  if (*(_QWORD *)v5)
    v7 = *((_QWORD *)v6 + 1) != 0;
  else
    v7 = 0;
  v8 = *((_QWORD *)v5 + 1);
  if (v8)
    LODWORD(v8) = *(_QWORD *)(v8 + 8) != 0;
  v9 = v8 + v7;
  v10 = *((_QWORD *)v5 + 2);
  if (v10)
    LODWORD(v10) = *(_DWORD *)(v10 - 12);
  v11 = v9 + v10;
  v12 = *((_QWORD *)v5 + 3);
  if (v12)
    LODWORD(v12) = *(_DWORD *)(v12 - 12);
  v13 = v11 + v12;
  v14 = *((_QWORD *)v5 + 4);
  if (v14)
    LODWORD(v14) = *(_DWORD *)(v14 - 12);
  if (v13 + (_DWORD)v14 == 1)
  {
    v15 = *v4;
    *v4 = 0;
    if (!v15)
      goto LABEL_17;
    WebCore::NodeListsNodeData::~NodeListsNodeData(v15, a2);
    goto LABEL_16;
  }
  *(_QWORD *)v5 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
LABEL_16:
      WTF::fastFree(v6, a2);
      goto LABEL_17;
    }
    --*(_DWORD *)v6;
  }
LABEL_17:
  v16 = *(_DWORD *)(v3 + 24) - 2;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) != 0)
      goto LABEL_38;
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    v16 = *(_DWORD *)(v3 + 24);
  }
  else
  {
    *(_DWORD *)(v3 + 24) = v16;
  }
  v17 = v16 - 2;
  if (v17)
  {
    *(_DWORD *)(v3 + 24) = v17;
    goto LABEL_21;
  }
LABEL_38:
  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
LABEL_21:
  WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19, v18);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  v20 = *((_QWORD *)this + 3);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v21 = (WTF *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v18);
      else
        --*(_DWORD *)v21;
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v22 = *((_QWORD *)this + 1);
  if (v22)
  {
    *(_QWORD *)(v22 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::ChildNodeList::~ChildNodeList(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::ChildNodeList::length(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v1 = this;
  v2 = *(_BYTE *)(this + 72);
  if ((v2 & 1) != 0)
    return *(unsigned int *)(this + 52);
  v3 = *(_QWORD *)(*(_QWORD *)(this + 32) + 80);
  if (v3)
  {
    v4 = (uint64_t *)(this + 56);
    v5 = *(_DWORD *)(this + 64);
    LODWORD(this) = *(_DWORD *)(this + 68);
    do
    {
      v6 = this;
      if ((_DWORD)this == *(_DWORD *)(v1 + 64))
      {
        v10 = this + ((unint64_t)this >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= (unint64_t)this + 1)
          v12 = this + 1;
        else
          v12 = v11;
        WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v1 + 56, v12);
        v6 = *(unsigned int *)(v1 + 68);
        v7 = *(_QWORD *)(v1 + 56);
        v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v3);
        if (v8)
        {
          do
            v13 = __ldaxr(v8);
          while (__stlxr(v13 + 1, v8));
        }
      }
      else
      {
        v7 = *v4;
        v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v3);
        if (v8)
        {
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
      }
      *(_QWORD *)(v7 + 8 * v6) = v8;
      this = (*(_DWORD *)(v1 + 68) + 1);
      *(_DWORD *)(v1 + 68) = this;
      v3 = *(_QWORD *)(v3 + 56);
    }
    while (v3);
    v2 = *(_BYTE *)(v1 + 72) | 2;
    *(_BYTE *)(v1 + 72) = v2;
    if (*(_DWORD *)(v1 + 64) != v5)
    {
      WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                           * (*(_DWORD *)(v1 + 64) - v5)));
      this = *(unsigned int *)(v1 + 68);
      v2 = *(_BYTE *)(v1 + 72);
    }
  }
  else
  {
    this = 0;
  }
  *(_DWORD *)(v1 + 52) = this;
  *(_BYTE *)(v1 + 72) = v2 | 1;
  return this;
}

_QWORD *WebCore::ChildNodeList::item(_QWORD *this, unsigned int a2)
{
  uint64_t v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;

  v3 = this[4];
  v4 = *((_BYTE *)this + 72);
  if ((v4 & 1) != 0 && *((_DWORD *)this + 13) <= a2)
    return 0;
  if ((this[9] & 2) == 0)
  {
    v6 = this + 5;
    v5 = (_QWORD *)this[5];
    if (!v5)
    {
      if ((this[9] & 1) != 0 && (v8 = *((_DWORD *)this + 13), v8 - a2 < a2))
      {
        v5 = *(_QWORD **)(v3 + 88);
        *v6 = v5;
        if (v8 - 1 > a2 && v8 + ~a2)
        {
          v9 = a2 - v8 + 1;
          do
          {
            if (!v5)
              break;
            v5 = (_QWORD *)(v5[6] & 0xFFFFFFFFFFFFLL);
            *v6 = v5;
          }
          while (!__CFADD__(v9++, 1));
        }
        *((_DWORD *)this + 12) = a2;
      }
      else
      {
        v11 = 0;
        v12 = *(_QWORD **)(v3 + 80);
        this[5] = v12;
        *((_DWORD *)this + 12) = 0;
        if (a2 && v12)
        {
          v11 = 0;
          v5 = v12;
          while (1)
          {
            v5 = (_QWORD *)v5[7];
            *v6 = v5;
            if (!v5)
              break;
            if (a2 == ++v11)
            {
              v11 = a2;
              break;
            }
          }
          *((_DWORD *)this + 12) = v11;
        }
        else
        {
          v5 = v12;
        }
        if (!v5)
        {
          if (v12)
            v13 = v11 + 1;
          else
            v13 = 0;
          *((_DWORD *)this + 13) = v13;
          *((_BYTE *)this + 72) = v4 | 1;
        }
      }
      return v5;
    }
    v7 = *((_DWORD *)this + 12);
    if (v7 < a2)
      return (_QWORD *)WebCore::CollectionIndexCache<WebCore::ChildNodeList,WebCore::Node *>::traverseForwardTo((uint64_t)(this + 5), v3, a2);
    if (v7 > a2)
      return (_QWORD *)WebCore::CollectionIndexCache<WebCore::ChildNodeList,WebCore::Node *>::traverseBackwardTo((uint64_t)(this + 5), v3, a2);
    return v5;
  }
  if (*((_DWORD *)this + 17) > a2)
  {
    v5 = *(_QWORD **)(this[7] + 8 * a2);
    if (v5)
      return (_QWORD *)v5[1];
    return v5;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::ClassCollection::create@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, WTF::AtomString *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  const WTF::AtomString *v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  result = bmalloc::api::isoAllocate();
  v10 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  v11 = 96;
  switch(a2)
  {
    case 4u:
      v11 = 192;
      goto LABEL_24;
    case 5u:
LABEL_24:
      v12 = *(_WORD *)(result + 21) & 0xFE00 | a2 & 0x1F | v11;
      goto LABEL_12;
    case 8u:
    case 9u:
    case 0xAu:
      v10 = 64;
      goto LABEL_3;
    case 0x11u:
    case 0x12u:
      v10 = 224;
      goto LABEL_3;
    case 0x14u:
    case 0x15u:
      v10 = 160;
      goto LABEL_3;
    case 0x16u:
      v12 = *(_WORD *)(result + 21) & 0xFE00 | a2 & 0x1F | 0x20;
      goto LABEL_5;
    default:
LABEL_3:
      v12 = *(_WORD *)(result + 21) & 0xFE00 | a2 & 0x1F | v10;
      if (a2 > 0x19 || ((1 << a2) & 0x3AFF800) != 0 || ((1 << a2) & 0x1007FF) == 0)
LABEL_5:
        v13 = 0;
      else
LABEL_12:
        v13 = 512;
      *(_WORD *)(result + 21) = v12 & 0xFDFF | v13;
      *(_DWORD *)(a1 + 24) += 2;
      *(_QWORD *)(result + 24) = a1;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_BYTE *)(result + 80) &= 0xFCu;
      *(_QWORD *)result = off_1E33A0F50;
      v14 = (_QWORD *)(result + 88);
      v15 = *(WTF::StringImpl **)a3;
      if (*(_QWORD *)a3 && *((_DWORD *)v15 + 1))
      {
        v19 = result;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3384) == 2)
        {
          WTF::AtomString::convertToASCIILowercase(a3);
        }
        else
        {
          *(_DWORD *)v15 += 2;
          v20 = v15;
        }
        WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v20, v9, v14);
        v18 = v20;
        v20 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
        result = v19;
      }
      else
      {
        *v14 = 0;
      }
      v16 = *(WTF::StringImpl **)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)v16 += 2;
      *(_QWORD *)(result + 96) = v16;
      *a4 = result;
      return result;
  }
}

void WebCore::ClassCollection::~ClassCollection(WebCore::ClassCollection *this)
{
  uint64_t v2;
  uint64_t *v3;
  WTF::StringImpl **v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  _QWORD *v12;
  WebCore::ClassCollection *v13;

  v2 = *((_QWORD *)this + 3);
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v3 = *(uint64_t **)(*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL);
  else
    v3 = 0;
  v4 = (WTF::StringImpl **)((char *)this + 96);
  WebCore::NodeListsNodeData::removeCachedCollection(v3, this, (WTF::StringImpl **)this + 12);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
      WebCore::SpaceSplitStringData::destroy(v7, (WTF::StringImpl *)v5);
    else
      --*((_DWORD *)v7 + 2);
  }
  *(_QWORD *)this = off_1E33A0FD8;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v9 = v8 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v9 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v11 = (uint64_t *)(v8 + 1760);
      v13 = this;
      v12 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v8 + 1760), (uint64_t *)&v13);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v11, v12);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v5);
  WebCore::HTMLCollection::~HTMLCollection(this, v10);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::ClassCollection::~ClassCollection(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::BeforeUnloadEvent::~BeforeUnloadEvent(WebCore::BeforeUnloadEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::BroadcastChannel::eventTargetInterface(WebCore::BroadcastChannel *this)
{
  return 50;
}

uint64_t WebCore::BroadcastChannel::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::BroadcastChannel::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::BroadcastChannel::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::BroadcastChannel::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::BroadcastChannel::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::BroadcastChannel::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::BroadcastChannel::stop(WebCore::BroadcastChannel *this)
{
  return WebCore::BroadcastChannel::close((uint64_t)this - 32);
}

void WebCore::CDATASection::~CDATASection(WebCore::CDATASection *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Text::~Text((uint64_t)this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::Text::canContainRangeEndPoint(WebCore::Text *this)
{
  return 1;
}

uint64_t WebCore::EmptyNodeList::length(WebCore::EmptyNodeList *this)
{
  return 0;
}

uint64_t WebCore::EmptyNodeList::item(WebCore::EmptyNodeList *this)
{
  return 0;
}

uint64_t WebCore::EmptyNodeList::isEmptyNodeList(WebCore::EmptyNodeList *this)
{
  return 1;
}

uint64_t WebCore::EmptyNodeList::memoryCost(WebCore::EmptyNodeList *this)
{
  return 0;
}

uint64_t WebCore::ChildNodeList::isChildNodeList(WebCore::ChildNodeList *this)
{
  return 1;
}

uint64_t WebCore::ChildNodeList::memoryCost(WebCore::ChildNodeList *this)
{
  return 8 * *((unsigned int *)this + 16);
}

WebCore::Node *WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::namedItem(uint64_t a1, WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  uint64_t *v7;
  uint64_t v8;
  const WebCore::TreeScope *v9;
  unsigned int *v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int i;
  unsigned int v19;
  uint64_t v20;
  int j;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v27;
  unsigned int v28;
  int v29;
  int k;
  unsigned int v31;
  uint64_t v32;
  unsigned int v34;
  WebCore::Node *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int m;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WebCore *v51;
  uint64_t v52;
  __int16 v53;
  WebCore::Node *v54;
  uint64_t v56;
  WebCore::Node *v57;
  WebCore::Node *v58;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v2 + 4))
    return 0;
  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v56 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v56 + 22) & 0x18) != 0))
    v7 = *(uint64_t **)(v56 + 40);
  else
    v7 = (uint64_t *)(a1 + 24);
  v8 = *v7;
  if ((*(_BYTE *)(*v7 + 22) & 0x18) == 0)
    return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
  v58 = 0;
  v9 = *(const WebCore::TreeScope **)(v8 + 40);
  v10 = (unsigned int *)*((_QWORD *)v9 + 3);
  if (v10)
  {
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      v15 = 0;
      v16 = *(_DWORD *)(v11 - 8);
      v17 = *(_DWORD *)(v2 + 16) >> 8;
      for (i = v17; ; i = v15 + v19)
      {
        v19 = i & v16;
        v20 = *(_QWORD *)(v11 + 40 * v19);
        if (!v20)
          goto LABEL_10;
        if (v20 != -1 && v20 == v2)
          break;
        ++v15;
      }
      for (j = 0; ; v17 = j + v23)
      {
        v23 = v17 & v16;
        v24 = (uint64_t *)(v11 + 40 * (v17 & v16));
        v25 = *v24;
        if (!*v24)
          break;
        if (v25 != -1 && v25 == v2)
        {
          v34 = *(_DWORD *)(v11 - 4);
          goto LABEL_42;
        }
        ++j;
      }
      v34 = *(_DWORD *)(v11 - 4);
      v24 = (uint64_t *)(v11 + 40 * v34);
LABEL_42:
      if (v24 == (uint64_t *)(v11 + 40 * v34) || *((_DWORD *)v24 + 4) <= 1u)
      {
        WebCore::TreeScopeOrderedMap::getElementById(v10, a2, v9, (uint64_t *)&v57);
        v35 = v58;
        v58 = v57;
        if (v35)
        {
          if (*((_DWORD *)v35 + 6) == 2)
          {
            if ((*((_WORD *)v35 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v35, a2);
          }
          else
          {
            *((_DWORD *)v35 + 6) -= 2;
          }
        }
      }
LABEL_47:
      v12 = v58;
      if (!v58)
        return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
      v36 = *((_QWORD *)v58 + 13);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 16);
        if (v37)
        {
          v38 = *(_QWORD *)(a1 + 88);
          if (v38)
          {
            if (v37 != v38)
            {
              v39 = 0;
              v40 = *(unsigned int *)(v38 + 12);
              v41 = v38 + 16;
              v14 = 1;
              do
              {
                if (v39 == v40)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19594FD84);
                }
                v42 = 0;
                while (*(_QWORD *)(v37 + 16 + 8 * v42) != *(_QWORD *)(v41 + 8 * v39))
                {
                  if (++v42 >= (unint64_t)*(unsigned int *)(v37 + 12))
                    goto LABEL_14;
                }
                if (v40 <= 1)
                  v52 = 1;
                else
                  v52 = v40;
                ++v39;
              }
              while (v39 != v52);
            }
            v53 = *(_WORD *)(v8 + 28);
            if ((v53 & 0xF000) == 0x9000)
            {
              if (**((_QWORD **)v58 + 5) == v8
                && (*((_WORD *)v58 + 14) & 0xF000) != 0x9000
                && (*((_BYTE *)v58 + 22) & 8) != 0)
              {
                v58 = 0;
                if (*((_DWORD *)v12 + 6) != 2)
                {
                  *((_DWORD *)v12 + 6) -= 2;
                  return v12;
                }
                v14 = 0;
                v3 = v12;
                goto LABEL_109;
              }
            }
            else if ((v53 & 4) != 0
                   && *(_QWORD *)(v8 + 80)
                   && ((*((unsigned __int8 *)v58 + 22) ^ *(unsigned __int8 *)(v8 + 22)) & 8) == 0)
            {
              v54 = v58;
              do
                v54 = (WebCore::Node *)*((_QWORD *)v54 + 4);
              while (v54 != (WebCore::Node *)v8 && v54 != 0);
              if (v54)
              {
                v14 = 0;
                v3 = v58;
                goto LABEL_15;
              }
            }
          }
        }
      }
      v14 = 1;
      goto LABEL_14;
    }
  }
LABEL_10:
  v12 = (WebCore::Node *)*((_QWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
    {
      v27 = 0;
      v28 = *(_DWORD *)(v13 - 8);
      v29 = *(_DWORD *)(v2 + 16) >> 8;
      for (k = v29; ; k = v27 + v31)
      {
        v31 = k & v28;
        v32 = *(_QWORD *)(v13 + 40 * v31);
        if (!v32)
          break;
        if (v32 != -1 && v32 == v2)
        {
          for (m = 0; ; v29 = m + v44)
          {
            v44 = v29 & v28;
            v45 = (uint64_t *)(v13 + 40 * (v29 & v28));
            v46 = *v45;
            if (!*v45)
              break;
            if (v46 != -1 && v46 == v2)
            {
              v48 = *(_DWORD *)(v13 - 4);
              goto LABEL_66;
            }
            ++m;
          }
          v48 = *(_DWORD *)(v13 - 4);
          v45 = (uint64_t *)(v13 + 40 * v48);
LABEL_66:
          if (v45 == (uint64_t *)(v13 + 40 * v48) || *((_DWORD *)v45 + 4) <= 1u)
          {
            WebCore::TreeScopeOrderedMap::getElementByName((unsigned int *)v12, a2, v9, (uint64_t *)&v57);
            v50 = v57;
            v49 = v58;
            v58 = v57;
            if (v49)
            {
              if (*((_DWORD *)v49 + 6) == 2)
              {
                if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v49, a2);
              }
              else
              {
                *((_DWORD *)v49 + 6) -= 2;
              }
            }
            if (v50)
            {
              v51 = (WebCore *)*((unsigned __int16 *)v50 + 14);
              if ((v51 & 0x10) == 0
                || (*(_WORD *)(a1 + 21) & 0x1F) == 7
                && !WebCore::nameShouldBeVisibleInDocumentAll(v51, *((WebCore::Element **)v50 + 12)))
              {
                WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v58, 0);
              }
            }
          }
          goto LABEL_47;
        }
        ++v27;
      }
    }
    v12 = 0;
  }
  v14 = 0;
LABEL_14:
  v3 = 0;
LABEL_15:
  v58 = 0;
  if (!v12)
  {
LABEL_112:
    if (!v14)
      return v3;
    return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
  }
  if (*((_DWORD *)v12 + 6) == 2)
  {
LABEL_109:
    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v12, a2);
      if ((v14 & 1) == 0)
        return v3;
      return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
    }
    goto LABEL_112;
  }
  *((_DWORD *)v12 + 6) -= 2;
  if ((v14 & 1) != 0)
    return (WebCore::Node *)WebCore::HTMLCollection::namedItemSlow((_QWORD *)a1, (uint64_t *)a2);
  return v3;
}

BOOL WebCore::isOffsetBeforeChild(uint64_t a1, int a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;

  if (!a2)
    return 1;
  if (*(_QWORD *)(a3 + 32) != a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 80);
  if (!v4 || v4 == a3)
    return 0;
  do
  {
    result = --a2 == 0;
    if (!a2)
      break;
    v4 = *(_QWORD *)(v4 + 56);
  }
  while (v4 && v4 != a3);
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr((unsigned int *)v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v8);
          v11 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v11)
          {
            v14 = v8;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v8 = v14;
          }
          v12 = *(WTF **)(v8 + 16);
          if (v12)
          {
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            v13 = v8;
            WTF::fastFree(v12, a2);
            v8 = v13;
          }
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
    }
    while (v6 != (WTF *)v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E33A0FD8;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v6 = (uint64_t *)(v3 + 1760);
      v8 = a1;
      v7 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v8);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v6, v7);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::~CachedHTMLCollection(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E33A0FD8;
  if (*(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 80) & 3) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 8);
    v4 = v3 + 4 * (((unint64_t)*(unsigned __int16 *)(a1 + 21) >> 5) & 0xF);
    --*(_DWORD *)(v4 + 1768);
    if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    {
      v9 = (uint64_t *)(v3 + 1760);
      v11 = a1;
      v10 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v3 + 1760), &v11);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v9, v10);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection((WebCore::HTMLCollection *)a1, v5);
  return bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::BroadcastChannel::MainThreadBridge,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(uint64_t **)(result + 8);
  if (v2)
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v2 + 5, a2);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v2 + 4, v3);
    v5 = (WTF::StringImpl *)v2[3];
    v2[3] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v2[2];
    v2[2] = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)v6);
        v9 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v9)
        {
          v12 = v6;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
          v6 = v12;
        }
        v10 = *(WTF **)(v6 + 16);
        if (v10)
        {
          *(_QWORD *)(v6 + 16) = 0;
          *(_DWORD *)(v6 + 24) = 0;
          v11 = v6;
          WTF::fastFree(v10, v4);
          v6 = v11;
        }
        WTF::fastFree((WTF *)v6, v4);
      }
    }
    return WTF::fastFree((WTF *)v2, v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::ensureOnMainThread(WTF::Function<void ()(WebCore::Page *)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33A1088;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::ensureOnMainThread(WTF::Function<void ()(WebCore::Page *)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33A1088;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::ensureOnMainThread(WTF::Function<void ()(WebCore::Page *)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t result;
  WTF *v7;
  void *v8;

  if (*(_BYTE *)(a2 + 274))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 336);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0)
    {
      v5 = *(_DWORD **)(v4 + 8);
      if (v5)
        ++*v5;
    }
    else
    {
      v5 = 0;
    }
    result = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v5);
    if (v5)
    {
      if (*v5 == 1)
      {
        WebCore::Page::~Page((uint64_t)v5);
        return WTF::fastFree(v7, v8);
      }
      else
      {
        --*v5;
      }
    }
  }
  return result;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::registerChannel(void)::$_0,void,WebCore::Page *>::call(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v2 = result;
  v3 = *((_QWORD *)result + 2);
  if (a2)
  {
    v4 = *(_DWORD **)(a2 + 960);
    ++v4[2];
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, v3 + 32, v3 + 24, *(_QWORD *)(v3 + 8));
    if (v4[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  if ((byte_1ECE8310A & 1) != 0)
  {
    v5 = qword_1ECE83118;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = v2 + 8;
    if (qword_1ECE83118)
    {
LABEL_7:
      v8 = *(_DWORD *)(v5 - 8);
      goto LABEL_8;
    }
  }
  else
  {
    qword_1ECE83118 = 0;
    byte_1ECE8310A = 1;
    v6 = *(_QWORD *)(v3 + 8);
    v7 = v2 + 8;
  }
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
  v5 = qword_1ECE83118;
  if (qword_1ECE83118)
    goto LABEL_7;
  v8 = 0;
LABEL_8:
  v9 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (_QWORD *)(v5 + 48 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_16:
    *v13 = v6;
    v17 = *(_OWORD *)v7;
    v13[4] = *((_QWORD *)v7 + 2);
    *((_OWORD *)v13 + 1) = v17;
    if (qword_1ECE83118)
      v18 = *(_DWORD *)(qword_1ECE83118 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(qword_1ECE83118 - 12) = v18;
    if (qword_1ECE83118)
      v19 = *(_DWORD *)(qword_1ECE83118 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(qword_1ECE83118 - 16) + v19);
    v21 = *(unsigned int *)(qword_1ECE83118 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        return result;
    }
    else
    {
      if (3 * v21 > 4 * v20)
        return result;
      if (!(_DWORD)v21)
      {
        v22 = 8;
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v22);
      }
    }
    v22 = (_DWORD)v21 << (6 * *(_DWORD *)(qword_1ECE83118 - 12) >= (2 * v21));
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v22);
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v6)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (_QWORD *)(v5 + 48 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[3] = 0;
        v15[4] = 0;
        v15[2] = 0;
        --*(_DWORD *)(qword_1ECE83118 - 16);
        v13 = v15;
      }
      goto LABEL_16;
    }
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;

  v2 = qword_1ECE83118;
  if (qword_1ECE83118)
  {
    v3 = *(_DWORD *)(qword_1ECE83118 - 4);
    v4 = *(_DWORD *)(qword_1ECE83118 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(48 * a1 + 16));
  if (a1)
  {
    v7 = a1;
    v8 = result + 8;
    do
    {
      *(v8 - 2) = 0;
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      v8 += 6;
      --v7;
    }
    while (v7);
  }
  qword_1ECE83118 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE83118 - 12) = v4;
  if (v3)
  {
    v9 = v3;
    v10 = qword_1ECE83118;
    if (qword_1ECE83118)
    {
      for (i = 0; i != v3; ++i)
      {
        v12 = v2 + 48 * i;
        if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2)
        {
          v13 = *(_DWORD *)(v10 - 8);
          v14 = (*(_QWORD *)v12 + ~(*(_QWORD *)v12 << 32)) ^ ((*(_QWORD *)v12 + ~(*(_QWORD *)v12 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v10 + 48 * v17;
            v6 = *(void **)v19;
            v17 = (v17 + v18++) & v13;
          }
          while (*(_QWORD *)v19);
          v20 = *(_OWORD *)v12;
          v21 = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(v19 + 16) = *(_OWORD *)(v12 + 16);
          *(_OWORD *)(v19 + 32) = v21;
          *(_OWORD *)v19 = v20;
        }
      }
    }
    else
    {
      v22 = (_OWORD *)v2;
      do
      {
        if ((unint64_t)(*(_QWORD *)v22 + 1) >= 2)
        {
          v23 = v22[1];
          MEMORY[0] = *v22;
          MEMORY[0x10] = v23;
          MEMORY[0x20] = v22[2];
        }
        v22 += 3;
        --v9;
      }
      while (v9);
    }
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::unregisterChannel(void)::$_0,void,WebCore::Page *>::call(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v2 = *((_QWORD *)result + 1);
  if (a2)
  {
    v3 = *(_DWORD **)(a2 + 960);
    ++v3[2];
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, v2 + 32, v2 + 24, *(_QWORD *)(v2 + 8));
    if (v3[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  if ((byte_1ECE8310A & 1) != 0)
  {
    if (qword_1ECE83118)
    {
      v4 = *(_QWORD *)(v2 + 8);
      v5 = *(_DWORD *)(qword_1ECE83118 - 8);
      v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = (uint64_t *)(qword_1ECE83118 + 48 * v9);
      v11 = *v10;
      if (*v10 != v4)
      {
        v12 = 1;
        while (v11)
        {
          v9 = (v9 + v12) & v5;
          v10 = (uint64_t *)(qword_1ECE83118 + 48 * v9);
          v11 = *v10;
          ++v12;
          if (*v10 == v4)
            goto LABEL_12;
        }
        v10 = (uint64_t *)(qword_1ECE83118 + 48 * *(unsigned int *)(qword_1ECE83118 - 4));
      }
LABEL_12:
      if ((uint64_t *)(qword_1ECE83118 + 48 * *(unsigned int *)(qword_1ECE83118 - 4)) != v10)
      {
        *v10 = -1;
        v13 = qword_1ECE83118;
        ++*(_DWORD *)(qword_1ECE83118 - 16);
        v14 = v13 ? *(_DWORD *)(v13 - 12) - 1 : -1;
        *(_DWORD *)(v13 - 12) = v14;
        if (qword_1ECE83118)
        {
          v15 = *(_DWORD *)(qword_1ECE83118 - 4);
          if (6 * *(_DWORD *)(qword_1ECE83118 - 12) < v15 && v15 >= 9)
            return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v15 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1ECE83118 = 0;
    byte_1ECE8310A = 1;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::postMessage(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&)::$_0,void,WebCore::Page *>::~CallableWrapper(_QWORD *result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  _QWORD *v6;

  *result = off_1E33A1100;
  v2 = (unsigned int *)result[2];
  result[2] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = result;
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      WTF::fastFree((WTF *)v2, v5);
      return v6;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::postMessage(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&)::$_0,void,WebCore::Page *>::~CallableWrapper(WTF *a1, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  WTF *v7;

  *(_QWORD *)a1 = off_1E33A1100;
  v2 = (unsigned int *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      v7 = a1;
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      WTF::fastFree((WTF *)v2, v6);
      a1 = v7;
    }
  }
  return WTF::fastFree(a1, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::MainThreadBridge::postMessage(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&)::$_0,void,WebCore::Page *>::call(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[10];

  v20[9] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return result;
  v3 = result + 2;
  v4 = result[2];
  v5 = result[1];
  v6 = *(unsigned int *)(v4 + 244);
  if ((_DWORD)v6)
  {
    if (v6 >= 0x38E38E4)
    {
      __break(0xC471u);
      return result;
    }
    v7 = 72 * v6;
    v8 = WTF::fastMalloc((WTF *)(72 * v6));
    v9 = (v7 & 0xFFFFFFF8) / 0x48;
    v10 = *(unsigned int *)(v4 + 244);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v4 + 232);
      v13 = 72 * v10;
      v14 = ((unint64_t)(8 * v10 - 8) >> 3) + 1;
      do
      {
        WebCore::URLKeepingBlobAlive::isolatedCopy((WebCore::URLKeepingBlobAlive *)(v12 + v11), (uint64_t)v20);
        WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(v8 + v11, v20);
        WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v20);
        v11 += 72;
      }
      while (v13 != v11);
      goto LABEL_10;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v14 = 0;
LABEL_10:
  v15 = *(_DWORD **)(a2 + 960);
  ++v15[2];
  v16 = v5 + 32;
  v17 = v5 + 24;
  v18 = *(_QWORD *)(v5 + 8);
  v19 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v19 = &off_1E33A1128;
  *(_QWORD *)(v19 + 8) = v8;
  *(_DWORD *)(v19 + 16) = v9;
  *(_DWORD *)(v19 + 20) = v14;
  v20[0] = v19;
  (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v15 + 32))(v15, v16, v17, v18, v3, v20);
  result = (_QWORD *)v20[0];
  v20[0] = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  if (v15[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
  --v15[2];
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16BroadcastChannel16MainThreadBridge11postMessageEONS_3RefINS2_21SerializedScriptValueENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEEN3__0clINS2_4PageEEEDaPT_EUlvE_vJEED1Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::URLKeepingBlobAlive *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E33A1128;
  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    v6 = *(WebCore::URLKeepingBlobAlive **)(a1 + 8);
    v7 = 72 * v3;
    do
    {
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(v6);
      v6 = (WebCore::URLKeepingBlobAlive *)(v8 + 72);
      v7 -= 72;
    }
    while (v7);
  }
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16BroadcastChannel16MainThreadBridge11postMessageEONS_3RefINS2_21SerializedScriptValueENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEEEN3__0clINS2_4PageEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::URLKeepingBlobAlive *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E33A1128;
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v6 = (WebCore::URLKeepingBlobAlive *)*((_QWORD *)this + 1);
    v7 = 72 * v3;
    do
    {
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(v6);
      v6 = (WebCore::URLKeepingBlobAlive *)(v8 + 72);
      v7 -= 72;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::BroadcastChannel>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t *v51;

  v3 = qword_1ECE83110;
  if (qword_1ECE83110)
  {
    v4 = *(_DWORD *)(qword_1ECE83110 - 4);
    v5 = *(_DWORD *)(qword_1ECE83110 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  v8 = (_DWORD *)v6;
  v9 = v6 + 16;
  if (a1)
    bzero((void *)(v6 + 16), 24 * a1);
  qword_1ECE83110 = v9;
  v8[2] = a1 - 1;
  v8[3] = a1;
  *v8 = 0;
  *(_DWORD *)(qword_1ECE83110 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = 0;
    v12 = v4;
    v49 = v4;
    while (1)
    {
      v13 = (uint64_t *)(v3 + 24 * v10);
      v14 = *v13;
      if (*v13 == -1)
        goto LABEL_57;
      if (v14)
      {
        v18 = qword_1ECE83110;
        if (qword_1ECE83110)
          v19 = *(_DWORD *)(qword_1ECE83110 - 8);
        else
          v19 = 0;
        v51 = v11;
        v23 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v19 & ((v25 >> 31) ^ v25);
        v27 = 1;
        do
        {
          v28 = v26;
          v29 = (uint64_t *)(qword_1ECE83110 + 24 * v26);
          v26 = (v26 + v27++) & v19;
        }
        while (*v29);
        v30 = v28;
        v31 = qword_1ECE83110 + 24 * v28;
        v34 = *(_QWORD *)(v31 + 8);
        v33 = (_QWORD *)(v31 + 8);
        v32 = v34;
        *v33 = 0;
        if (!v34)
          goto LABEL_41;
        if (__ldaxr((unsigned __int8 *)v32))
        {
          __clrex();
          goto LABEL_32;
        }
        if (__stxr(1u, (unsigned __int8 *)v32))
LABEL_32:
          MEMORY[0x19AEA534C](v32);
        v36 = *(_QWORD *)(v32 + 16) - 1;
        *(_QWORD *)(v32 + 16) = v36;
        if (v36)
        {
          v47 = __ldxr((unsigned __int8 *)v32);
          if (v47 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v32))
              goto LABEL_41;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v32);
          goto LABEL_41;
        }
        v37 = *(_QWORD *)(v32 + 8);
        v38 = __ldxr((unsigned __int8 *)v32);
        if (v38 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v32))
          {
            if (!v37)
LABEL_40:
              WTF::fastFree((WTF *)v32, v7);
LABEL_41:
            *v29 = *v13;
            v39 = v3 + 24 * v10;
            *v33 = *(_QWORD *)(v39 + 8);
            v40 = *(_QWORD *)(v39 + 16);
            *(_QWORD *)(v39 + 8) = 0;
            *(_QWORD *)(v39 + 16) = 0;
            *(_QWORD *)(v18 + 24 * v30 + 16) = v40;
            v41 = *(_QWORD *)(v39 + 8);
            *(_QWORD *)(v39 + 8) = 0;
            v11 = v51;
            if (!v41)
              goto LABEL_54;
            if (__ldaxr((unsigned __int8 *)v41))
            {
              __clrex();
              goto LABEL_45;
            }
            if (__stxr(1u, (unsigned __int8 *)v41))
LABEL_45:
              MEMORY[0x19AEA534C](v41);
            v43 = *(_QWORD *)(v41 + 16) - 1;
            *(_QWORD *)(v41 + 16) = v43;
            if (!v43)
            {
              v44 = *(_QWORD *)(v41 + 8);
              v45 = __ldxr((unsigned __int8 *)v41);
              if (v45 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v41))
                {
                  if (!v44)
LABEL_53:
                    WTF::fastFree((WTF *)v41, v7);
                  goto LABEL_54;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v41);
              if (!v44)
                goto LABEL_53;
              goto LABEL_54;
            }
            v48 = __ldxr((unsigned __int8 *)v41);
            if (v48 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v41))
                goto LABEL_54;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v41);
LABEL_54:
            if (v13 == a2)
              v11 = v29;
            v12 = v49;
            goto LABEL_57;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v32);
        if (!v37)
          goto LABEL_40;
        goto LABEL_41;
      }
      v15 = v3 + 24 * v10;
      v16 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)(v15 + 8) = 0;
      if (!v16)
        goto LABEL_57;
      if (__ldaxr((unsigned __int8 *)v16))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v16))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v16);
LABEL_17:
      v20 = *(_QWORD *)(v16 + 16) - 1;
      *(_QWORD *)(v16 + 16) = v20;
      if (v20)
      {
        v46 = __ldxr((unsigned __int8 *)v16);
        if (v46 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v16))
            goto LABEL_57;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
        goto LABEL_57;
      }
      v21 = *(_QWORD *)(v16 + 8);
      v22 = __ldxr((unsigned __int8 *)v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
        {
          if (!v21)
            goto LABEL_24;
          goto LABEL_57;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (!v21)
LABEL_24:
        WTF::fastFree((WTF *)v16, v7);
LABEL_57:
      if (++v10 == v12)
        goto LABEL_75;
    }
  }
  if (v3)
LABEL_75:
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::dispatchMessageTo(WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  _QWORD *v11;

  *(_QWORD *)a1 = &off_1E33A1150;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    *v3 = &off_1E335A710;
    v3[1] = v4;
    if (!v4)
    {
      result = 139;
      __break(0xC471u);
      return result;
    }
    v11 = v3;
    WTF::callOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    do
    {
      v8 = __ldaxr(v6);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v6));
    if (!v9)
    {
      atomic_store(1u, v6);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v6 + 2), a2);
      WTF::fastFree((WTF *)v6, v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::dispatchMessageTo(WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  _QWORD *v11;

  *(_QWORD *)this = &off_1E33A1150;
  if (*((_BYTE *)this + 32))
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v4 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    *v3 = &off_1E335A710;
    v3[1] = v4;
    if (!v4)
    {
      result = 139;
      __break(0xC471u);
      return result;
    }
    v11 = v3;
    WTF::callOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v8 = __ldaxr(v6);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v6));
    if (!v9)
    {
      atomic_store(1u, v6);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v6 + 2), a2);
      WTF::fastFree((WTF *)v6, v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::dispatchMessageTo(WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void,WebCore::ScriptExecutionContext &>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  char v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)();
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  _QWORD *v55;

  v2 = result;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_167))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_167))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](&_MergedGlobals_167);
LABEL_5:
  if ((byte_1ECE83109 & 1) == 0)
  {
    v4 = 0;
    qword_1ECE83110 = 0;
    byte_1ECE83109 = 1;
    goto LABEL_48;
  }
  v4 = qword_1ECE83110;
  if (!qword_1ECE83110)
    goto LABEL_48;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_DWORD *)(qword_1ECE83110 - 8);
  v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(qword_1ECE83110 + 24 * v10);
  if (v11 != v5)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(qword_1ECE83110 + 24 * v10);
      ++v12;
      if (v11 == v5)
        goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_11:
  v13 = *(_QWORD *)(qword_1ECE83110 + 24 * v10 + 8);
  if (!v13)
    goto LABEL_25;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEA534C](v13);
LABEL_16:
  if (*(_QWORD *)(v13 + 24))
  {
    ++*(_QWORD *)(v13 + 16);
    v15 = v13;
  }
  else
  {
    v15 = 0;
  }
  v16 = __ldxr((unsigned __int8 *)v13);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
    {
      if (v15)
        goto LABEL_21;
LABEL_25:
      v4 = 0;
      goto LABEL_48;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
  if (!v15)
    goto LABEL_25;
LABEL_21:
  v4 = *(_QWORD *)(v4 + 24 * v10 + 16);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_28;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_28:
  if (*(_QWORD *)(v15 + 24))
    ++*(_QWORD *)(v15 + 8);
  else
    v4 = 0;
  v18 = __ldxr((unsigned __int8 *)v15);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_35:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_40;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_40:
  v20 = *(_QWORD *)(v15 + 16) - 1;
  *(_QWORD *)(v15 + 16) = v20;
  if (!v20)
  {
    v21 = *(_QWORD *)(v15 + 8);
    v22 = __ldxr((unsigned __int8 *)v15);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (v21)
          goto LABEL_48;
LABEL_47:
        result = WTF::fastFree((WTF *)v15, a2);
        goto LABEL_48;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v21)
      goto LABEL_48;
    goto LABEL_47;
  }
  v51 = __ldxr((unsigned __int8 *)v15);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_109;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_109:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_48:
  v23 = __ldxr((unsigned __int8 *)&_MergedGlobals_167);
  if (v23 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_167))
    {
      if (!v4)
        return result;
      goto LABEL_54;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_167);
  if (!v4)
    return result;
LABEL_54:
  v24 = *(_QWORD *)(v4 + 40);
  if (!v24)
    goto LABEL_86;
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
    goto LABEL_86;
  v26 = v25 - 96;
  if (*(_BYTE *)(v25 + 178))
  {
    if (*(unsigned __int8 *)(v25 + 178) - 1 < 2)
      ++*(_DWORD *)(v25 + 216);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 64))(v25 - 96);
    if ((result & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195951748);
    }
    v53 = *(unsigned __int8 *)(v25 + 305);
    v54 = *(unsigned __int8 *)(v25 + 178);
    if (*(_BYTE *)(v25 + 178))
    {
      if (v54 == 1)
      {
        if (*(_DWORD *)(v25 + 216) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v25 - 96);
        else
          --*(_DWORD *)(v25 + 216);
      }
      else if (v54 == 2)
      {
        result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v25 + 216));
      }
    }
    else if (*(_DWORD *)(v25 - 264) == 2)
    {
      if ((*(_WORD *)(v25 - 258) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v25 - 288), a2);
    }
    else
    {
      *(_DWORD *)(v25 - 264) -= 2;
    }
    if (v53)
      goto LABEL_86;
  }
  else
  {
    v27 = (_DWORD *)(v25 - 264);
    *(_DWORD *)(v25 - 264) += 2;
    result = WebCore::Document::isFullyActive((WebCore::Document *)(v25 - 288));
    v28 = result;
    v29 = *(unsigned __int8 *)(v25 + 178);
    if (*(_BYTE *)(v25 + 178))
    {
      if (v29 == 1)
      {
        if (*(_DWORD *)(v25 + 216) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v25 - 96);
        else
          --*(_DWORD *)(v25 + 216);
      }
      else if (v29 == 2)
      {
        result = (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v25 + 216));
      }
    }
    else if (*v27 == 2)
    {
      if ((*(_WORD *)(v25 - 258) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v25 - 288), a2);
    }
    else
    {
      *v27 -= 2;
    }
    if ((v28 & 1) == 0)
      goto LABEL_86;
  }
  if (*(_BYTE *)(v4 + 64))
    goto LABEL_86;
  v30 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v31 = off_1E33A11A0;
  v31[1] = v4;
  v31[2] = v30;
  v32 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v32 = 1;
  v33 = *(_QWORD *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_66;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_66:
  ++*(_QWORD *)(v33 + 8);
  v35 = __ldxr((unsigned __int8 *)v33);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_70;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_70:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
  *(_QWORD *)(v32 + 8) = v4;
  ++*(_QWORD *)(v4 + 48);
  v36 = *(_QWORD *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v36))
  {
    goto LABEL_75;
  }
  MEMORY[0x19AEA534C](v36);
LABEL_75:
  ++*(_QWORD *)(v36 + 8);
  v38 = __ldxr((unsigned __int8 *)v36);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_79;
  }
  if (__stlxr(0, (unsigned __int8 *)v36))
LABEL_79:
    WTF::Lock::unlockSlow((WTF::Lock *)v36);
  v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v39 = &off_1E33A1178;
  v39[1] = v4;
  v39[2] = v32;
  v39[3] = v31;
  v55 = v39;
  v40 = *(_QWORD *)(v4 + 40);
  if (v40 && (v41 = *(_QWORD *)(v40 + 8)) != 0)
  {
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v41 - 96) + 104))(v41 - 96);
    WebCore::EventLoopTaskGroup::queueTask(v42, 15, (uint64_t *)&v55);
    result = (uint64_t)v55;
    v55 = 0;
    if (!result)
      goto LABEL_86;
    v43 = *(uint64_t (***)())result;
  }
  else
  {
    v55 = 0;
    v43 = &off_1E33A1178;
  }
  result = v43[1]();
LABEL_86:
  v44 = *(_QWORD *)(v4 + 24);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_90;
  }
  result = MEMORY[0x19AEA534C](v44);
LABEL_90:
  v46 = *(_QWORD *)(v44 + 8);
  v47 = v46 - 1;
  *(_QWORD *)(v44 + 8) = v46 - 1;
  if (v46 == 1)
  {
    v52 = *(_QWORD *)(v44 + 16);
    v48 = *(_QWORD *)(v44 + 24);
    *(_QWORD *)(v44 + 24) = 0;
    v49 = v52 != 0;
  }
  else
  {
    v48 = 0;
    v49 = 1;
  }
  v50 = __ldxr((unsigned __int8 *)v44);
  if (v50 != 1)
  {
    __clrex();
LABEL_97:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v44);
    if (v47)
      return result;
    goto LABEL_98;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
    goto LABEL_97;
  if (v47)
    return result;
LABEL_98:
  if (v48)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 72))(v48);
  if (!v49)
    return WTF::fastFree((WTF *)v44, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::BroadcastChannel>(WebCore::BroadcastChannel &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *a1 = &off_1E33A1178;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::BroadcastChannel>>::deref(v4, a2);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return a1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return a1;
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::BroadcastChannel>(WebCore::BroadcastChannel &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  *(_QWORD *)this = &off_1E33A1178;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::BroadcastChannel>>::deref(v4, a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_10:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return WTF::fastFree(this, a2);
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return WTF::fastFree(this, a2);
LABEL_18:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::BroadcastChannel>(WebCore::BroadcastChannel &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

WTF *WTF::RefCounted<WebCore::ActiveDOMObject::PendingActivity<WebCore::BroadcastChannel>>::deref(WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  v3 = *((_QWORD *)this + 1);
  --*(_QWORD *)(v3 + 48);
  *((_QWORD *)this + 1) = 0;
  v4 = *(_QWORD *)(v3 + 24);
  LODWORD(v3) = __ldaxr((unsigned __int8 *)v4);
  if ((_DWORD)v3)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_7:
  v5 = *(_QWORD *)(v4 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v4 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_14:
  if (!v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
    if (!v8)
      WTF::fastFree((WTF *)v4, a2);
  }
  return (WTF *)WTF::fastFree(v2, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::dispatchMessage(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&)::$_0,void>::~CallableWrapper(_QWORD *result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  _QWORD *v6;

  *result = off_1E33A11A0;
  v2 = (unsigned int *)result[2];
  result[2] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = result;
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      WTF::fastFree((WTF *)v2, v5);
      return v6;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::dispatchMessage(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  WTF *v7;

  *(_QWORD *)a1 = off_1E33A11A0;
  v2 = (unsigned int *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      v7 = a1;
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      WTF::fastFree((WTF *)v2, v6);
      a1 = v7;
    }
  }
  return WTF::fastFree(a1, a2);
}

char *WTF::Detail::CallableWrapper<WebCore::BroadcastChannel::dispatchMessage(WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&)::$_0,void>::call(char *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  WTF::StringImpl *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SecurityContext *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::SecurityOriginData *v14;
  _QWORD *v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char *v38;
  uint64_t v39;

  v1 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v1 + 64))
  {
    v2 = *(_QWORD *)(v1 + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = result;
        result = (char *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v3 - 96));
        if (result)
        {
          v6 = result;
          v7 = *(_QWORD *)(v1 + 40);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
              v9 = (WebCore::SecurityContext *)(v8 - 96);
            else
              v9 = 0;
          }
          else
          {
            v9 = 0;
          }
          v10 = *((_QWORD *)v6 + 7);
          WebCore::SecurityContext::securityOrigin(v9, v5);
          v12 = *(unsigned int *)(v11 + 32);
          if ((_DWORD)v12 == 1)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
          }
          else
          {
            if ((_DWORD)v12 == -1)
            {
              v27 = (char *)std::__throw_bad_variant_access[abi:sn180100]();
              return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v27, v28, v29, v30);
            }
            v13 = v11;
            v14 = (WebCore::SecurityOriginData *)(v11 + 8);
            v33 = (uint64_t *)&v38;
            v15 = (_QWORD *)((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v12])(&v33, v11 + 8);
            if (MEMORY[0x19AEA53F4](*v15, "file", 4) && *(_BYTE *)(v13 + 59))
              WTF::String::String(&v37, (uint64_t)"null", 5);
            else
              WebCore::SecurityOriginData::toString(v14, &v37);
          }
          v36 = 0;
          LOBYTE(v33) = 0;
          v35 = 0;
          v31 = 0;
          v32 = 0;
          WebCore::MessageEvent::create((WTF::StringImpl *)v6, (uint64_t *)v4 + 2, (_DWORD **)&v37, (_DWORD **)&v36, (uint64_t)&v33, (uint64_t *)&v31, (uint64_t *)&v38);
          if (HIDWORD(v32))
          {
            v25 = (uint64_t *)v31;
            v26 = 8 * HIDWORD(v32);
            do
            {
              v25 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v25, v16)+ 1;
              v26 -= 8;
            }
            while (v26);
          }
          v17 = v31;
          if (v31)
          {
            v31 = 0;
            LODWORD(v32) = 0;
            WTF::fastFree(v17, v16);
          }
          if (v35 && v34 != -1)
            ((void (*)(WTF **, uint64_t **))off_1E33A11B8[v34])(&v31, &v33);
          v18 = v36;
          v36 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = v37;
          v37 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = *(_QWORD *)(v10 + 16);
          if (v20)
          {
            if (*(_QWORD *)(v10 + 24) != v20)
            {
              __break(0xC471u);
              JUMPOUT(0x195951E08);
            }
          }
          else
          {
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, v38);
          }
          if (v39)
          {
            v21 = (uint64_t *)(v39 - 16);
            v22 = *(_QWORD *)(((v39 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v23 = *(uint64_t **)(v39 - 8);
            if (v23)
            {
              v24 = *v21;
              *v23 = *v21;
              *(_QWORD *)(v24 + 8) = v23;
              *v21 = 0;
              v21[1] = 0;
            }
            *v21 = *(_QWORD *)(v22 + 40);
            *(_QWORD *)(v22 + 40) = v21;
            v39 = 0;
          }
          result = v38;
          v38 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 4) == 1)
              return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 4);
          }
        }
      }
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(char *__dst, uint64_t a2, char *__src, uint64_t a4)
{
  char *v8;
  size_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  char *v13;
  unsigned __int128 v14;
  char v15;
  char *v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  char v19;

  if (a2)
  {
    v8 = *(char **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v9)
      {
        if ((_DWORD)v9 == 1)
          *__dst = *v8;
        else
          memcpy(__dst, v8, v9);
      }
    }
    else
    {
      if (v9 < 0x10)
      {
        v16 = __dst;
      }
      else
      {
        v16 = &__dst[v9 & 0xFFFFFFF0];
        v17 = (unsigned __int128 *)__dst;
        do
        {
          v18 = (unsigned __int128)vld2q_s8(v8);
          v8 += 32;
          *v17++ = v18;
        }
        while (v17 != (unsigned __int128 *)v16);
      }
      while (v16 != &__dst[v9])
      {
        v19 = *v8;
        v8 += 2;
        *v16++ = v19;
      }
    }
    v10 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v10 = 0;
  }
  result = &__dst[v10];
  if ((a4 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a4)
    {
      if ((_DWORD)a4 == 1)
        *result = *__src;
      else
        return (char *)memcpy(result, __src, a4);
    }
  }
  else
  {
    v12 = &result[a4];
    if (a4 >= 0x10)
    {
      v13 = &result[a4 & 0xFFFFFFF0];
      do
      {
        v14 = (unsigned __int128)vld2q_s8(__src);
        __src += 32;
        *(_OWORD *)result = v14;
        result += 16;
      }
      while (result != v13);
      result = v13;
    }
    while (result != v12)
    {
      v15 = *__src;
      __src += 2;
      *result++ = v15;
    }
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  _QWORD v23[2];
  int8x16x2_t v24;
  int8x16x2_t v25;
  int8x16x2_t v26;

  if (a2)
  {
    v8 = *(int8x16_t **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v10 = &__dst[2 * v9];
      if (v9 >= 0x40)
      {
        v11 = &__dst[2 * (v9 & 0xFFFFFFC0)];
        v13 = 0uLL;
        v14 = __dst;
        do
        {
          v24.val[0] = *v8;
          v15 = v8[1];
          v25.val[0] = v8[2];
          v16 = v8[3];
          v8 += 4;
          v17 = v16;
          v25.val[1] = 0uLL;
          v26.val[0] = v15;
          v24.val[1] = 0uLL;
          v18 = v14;
          vst2q_s8(v18, v24);
          v18 += 32;
          v26.val[1] = 0uLL;
          vst2q_s8(v18, v26);
          v19 = v14 + 64;
          vst2q_s8(v19, v25);
          v20 = v14 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
          v14 += 128;
        }
        while (v14 != v11);
      }
      else
      {
        v11 = __dst;
      }
      while (v11 != v10)
      {
        v21 = v8->u8[0];
        v8 = (int8x16_t *)((char *)v8 + 1);
        *(_WORD *)v11 = v21;
        v11 += 2;
      }
    }
    else if ((_DWORD)v9 == 1)
    {
      *(_WORD *)__dst = v8->i16[0];
    }
    else if ((_DWORD)v9)
    {
      memcpy(__dst, v8, 2 * v9);
    }
    v12 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v12 = 0;
  }
  v23[0] = a3;
  v23[1] = a4;
  return WTF::StringView::getCharacters<char16_t>(v23, &__dst[2 * v12]);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(uint64_t result, unsigned int a2, int a3, _BYTE *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _WORD *v18;
  int8x16_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  unsigned __int128 *v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  char v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD v39[2];
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;

  v14 = (_QWORD *)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v15 = v39[0];
        if (v39[0])
        {
          v16 = (_BYTE *)(v39[0] + 20);
          *(_DWORD *)v39[0] = 2;
          *(_DWORD *)(v15 + 4) = a2;
          *(_QWORD *)(v15 + 8) = v15 + 20;
          *(_DWORD *)(v15 + 16) = 4;
          if ((a5 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a5)
            {
              if ((_DWORD)a5 == 1)
                *v16 = *a4;
              else
                memcpy((void *)(v15 + 20), a4, a5);
            }
          }
          else
          {
            if (a5 < 0x10)
            {
              v33 = (unsigned __int128 *)(v15 + 20);
            }
            else
            {
              v33 = (unsigned __int128 *)&v16[a5 & 0xFFFFFFF0];
              v34 = (unsigned __int128 *)(v15 + 20);
              do
              {
                v35 = (unsigned __int128)vld2q_s8(a4);
                a4 += 32;
                *v34++ = v35;
              }
              while (v34 != v33);
            }
            while (v33 != (unsigned __int128 *)&v16[a5])
            {
              v36 = *a4;
              a4 += 2;
              *(_BYTE *)v33 = v36;
              v33 = (unsigned __int128 *)((char *)v33 + 1);
            }
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(&v16[a5], a6, a7, a8);
        }
        goto LABEL_30;
      }
LABEL_32:
      v15 = 0;
      goto LABEL_30;
    }
LABEL_31:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_30;
  }
  if (!a2)
    goto LABEL_31;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_32;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v15 = v39[0];
  if (v39[0])
  {
    *(_DWORD *)v39[0] = 2;
    *(_DWORD *)(v15 + 4) = a2;
    *(_QWORD *)(v15 + 8) = v15 + 20;
    *(_DWORD *)(v15 + 16) = 0;
    v37 = a4;
    v38 = a5;
    WTF::StringView::getCharacters<char16_t>(&v37, (char *)(v15 + 20));
    v17 = v15 + 20;
    v18 = (_WORD *)(v15 + 20 + 2 * v38);
    if (a6)
    {
      v19 = *(int8x16_t **)(a6 + 8);
      v20 = *(unsigned int *)(a6 + 4);
      if ((*(_BYTE *)(a6 + 16) & 4) != 0)
      {
        v21 = (char *)&v18[v20];
        if (v20 >= 0x40)
        {
          v22 = (char *)&v18[v20 & 0xFFFFFFC0];
          v24 = 0uLL;
          v25 = (char *)(v17 + 2 * v38);
          do
          {
            v40.val[0] = *v19;
            v26 = v19[1];
            v41.val[0] = v19[2];
            v27 = v19[3];
            v19 += 4;
            v28 = v27;
            v41.val[1] = 0uLL;
            v42.val[0] = v26;
            v40.val[1] = 0uLL;
            v29 = v25;
            vst2q_s8(v29, v40);
            v29 += 32;
            v42.val[1] = 0uLL;
            vst2q_s8(v29, v42);
            v30 = v25 + 64;
            vst2q_s8(v30, v41);
            v31 = v25 + 96;
            vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
            v25 += 128;
          }
          while (v25 != v22);
        }
        else
        {
          v22 = (char *)(v17 + 2 * v38);
        }
        while (v22 != v21)
        {
          v32 = v19->u8[0];
          v19 = (int8x16_t *)((char *)v19 + 1);
          *(_WORD *)v22 = v32;
          v22 += 2;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *v18 = v19->i16[0];
      }
      else if ((_DWORD)v20)
      {
        memcpy((void *)(v17 + 2 * v38), v19, 2 * v20);
      }
      v23 = *(unsigned int *)(a6 + 4);
    }
    else
    {
      v23 = 0;
    }
    v39[0] = a7;
    v39[1] = a8;
    result = (uint64_t)WTF::StringView::getCharacters<char16_t>(v39, (char *)&v18[v23]);
  }
LABEL_30:
  *v14 = v15;
  return result;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashMap<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>,WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTraits<WTF::WeakRef<WebCore::ChildListMutationAccumulator,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = qword_1ECE83120;
  if (qword_1ECE83120)
  {
    v3 = *(_DWORD *)(qword_1ECE83120 - 4);
    v4 = *(_DWORD *)(qword_1ECE83120 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE83120 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE83120 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != -1)
        break;
LABEL_6:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
    if (!v9)
    {
      v10 = v2 + 16 * v7;
      v11 = *(WTF **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WTF::fastFree(v11, v6);
          v9 = *v8;
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
      *v8 = 0;
      if (!v9)
        goto LABEL_6;
      do
      {
        v12 = __ldaxr((unsigned int *)v9);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v9));
      if (v13)
        goto LABEL_6;
      atomic_store(1u, (unsigned int *)v9);
      v34 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v34)
      {
        v41 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v34));
        v9 = v41;
      }
      v35 = *(WTF **)(v9 + 16);
      if (v35)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v39 = v9;
        WTF::fastFree(v35, v6);
        v9 = v39;
      }
      goto LABEL_50;
    }
    if (qword_1ECE83120)
      v14 = *(_DWORD *)(qword_1ECE83120 - 8);
    else
      v14 = 0;
    v15 = ~(*(_QWORD *)(v9 + 8) << 32) + *(_QWORD *)(v9 + 8);
    v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
    v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
    v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ ((_DWORD)v17 + ~((_DWORD)v17 << 27)));
    if (*(_QWORD *)(qword_1ECE83120 + 16 * v18))
    {
      v36 = 1;
      do
        v18 = ((_DWORD)v18 + v36++) & v14;
      while (*(_QWORD *)(qword_1ECE83120 + 16 * v18));
    }
    v19 = qword_1ECE83120 + 16 * v18;
    v20 = *(WTF **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WTF::fastFree(v20, v6);
        v29 = *(unsigned int **)v19;
        *(_QWORD *)v19 = 0;
        if (v29)
        {
          do
          {
            v27 = __ldaxr(v29);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v29));
          if (!v28)
          {
            v30 = v7;
            atomic_store(1u, v29);
            v31 = v29;
            v32 = v29[7];
            if ((_DWORD)v32)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v31 + 2), (WTF::StringImpl *)(*((_QWORD *)v31 + 2) + 32 * v32));
            v33 = (WTF *)*((_QWORD *)v31 + 2);
            if (v33)
            {
              *((_QWORD *)v31 + 2) = 0;
              v31[6] = 0;
              WTF::fastFree(v33, v6);
            }
            WTF::fastFree((WTF *)v31, v6);
            v7 = v30;
          }
        }
        goto LABEL_19;
      }
      --*(_DWORD *)v20;
    }
    *(_QWORD *)v19 = 0;
LABEL_19:
    v21 = *v8;
    *v8 = 0;
    *(_QWORD *)v19 = v21;
    v22 = v2 + 16 * v7;
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v19 + 8) = v23;
    v24 = *(WTF **)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, v6);
      else
        --*(_DWORD *)v24;
    }
    v9 = *v8;
    *v8 = 0;
    if (!v9)
      goto LABEL_6;
    do
    {
      v25 = __ldaxr((unsigned int *)v9);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v9));
    if (v26)
      goto LABEL_6;
    atomic_store(1u, (unsigned int *)v9);
    v37 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v37)
    {
      v42 = v9;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v37));
      v9 = v42;
    }
    v38 = *(WTF **)(v9 + 16);
    if (v38)
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      v40 = v9;
      WTF::fastFree(v38, v6);
      v9 = v40;
    }
LABEL_50:
    WTF::fastFree((WTF *)v9, v6);
    goto LABEL_6;
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = (WTF *)((char *)v4 + 8 * v5);
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *v8 = v11;
        v12 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr((unsigned int *)v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, (unsigned int *)v12));
          if (!v14)
          {
            atomic_store(1u, (unsigned int *)v12);
            v15 = *(unsigned int *)(v12 + 28);
            if ((_DWORD)v15)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v15));
            v16 = *(WTF **)(v12 + 16);
            if (v16)
            {
              *(_QWORD *)(v12 + 16) = 0;
              *(_DWORD *)(v12 + 24) = 0;
              WTF::fastFree(v16, v7);
            }
            WTF::fastFree((WTF *)v12, v7);
          }
        }
        ++v8;
        v10 = (WTF *)((char *)v10 + 8);
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::ChildNodeList,WebCore::Node *>::traverseForwardTo(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v9;

  v3 = *(_BYTE *)(a1 + 32);
  if ((v3 & 1) != 0)
  {
    v4 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v5 = a3 - v4;
    if (v6 - a3 < a3 - v4)
    {
      v7 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)a1 = v7;
      if (v6 - 1 > a3 && v6 + ~a3 != 0)
      {
        v9 = a3 - v6 + 1;
        do
        {
          if (!v7)
            break;
          v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL;
          *(_QWORD *)a1 = v7;
        }
        while (!__CFADD__(v9++, 1));
      }
LABEL_16:
      *(_DWORD *)(a1 + 8) = a3;
      return v7;
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 8);
    v5 = a3 - v4;
  }
  v7 = *(_QWORD *)a1;
  if (v4 != a3)
  {
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 56);
      *(_QWORD *)a1 = v7;
      if (!v7)
        break;
      ++v4;
      if (!--v5)
        goto LABEL_16;
    }
    *(_DWORD *)(a1 + 8) = v4;
    a3 = v4;
    goto LABEL_20;
  }
  *(_DWORD *)(a1 + 8) = a3;
  if (!v7)
  {
LABEL_20:
    v7 = 0;
    *(_DWORD *)(a1 + 12) = a3 + 1;
    *(_BYTE *)(a1 + 32) = v3 | 1;
  }
  return v7;
}

uint64_t WebCore::CollectionIndexCache<WebCore::ChildNodeList,WebCore::Node *>::traverseBackwardTo(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 - a3 <= a3)
  {
    v4 = *(_QWORD *)a1;
    if (v3 != a3)
    {
      v6 = a3 - v3;
      do
      {
        if (!v4)
          break;
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        *(_QWORD *)a1 = v4;
      }
      while (!__CFADD__(v6++, 1));
    }
    *(_DWORD *)(a1 + 8) = a3;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)a1 = v4;
    *(_DWORD *)(a1 + 8) = 0;
    if (a3)
    {
      v5 = 0;
      while (1)
      {
        v4 = *(_QWORD *)(v4 + 56);
        *(_QWORD *)a1 = v4;
        if (!v4)
          break;
        if (a3 == ++v5)
        {
          v5 = a3;
          break;
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
  }
  return v4;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseForward(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;

  v7 = result;
  *a4 = 0;
  while (1)
  {
    v8 = (_QWORD *)*a2;
    v9 = (_QWORD *)a2[1];
    v10 = (_QWORD *)v9[10];
    if (!v10)
    {
      if (v9 == v8)
        goto LABEL_27;
      while (1)
      {
        v10 = (_QWORD *)v9[7];
        if (v10)
          break;
        v9 = (_QWORD *)v9[4];
        if (v9)
          v15 = v9 == v8;
        else
          v15 = 1;
        if (v15)
          goto LABEL_27;
      }
    }
    if ((*((_WORD *)v10 + 14) & 8) == 0)
      break;
    v11 = v10;
LABEL_15:
    a2[1] = v11;
    v13 = v11[13];
    if (v13)
    {
      result = *(_QWORD *)(v13 + 16);
      if (result)
      {
        v14 = *(_QWORD *)(v7 + 88);
        if (v14)
        {
          result = WebCore::SpaceSplitStringData::containsAll(result, v14);
          if ((_DWORD)result)
          {
            v16 = *a4 + 1;
            *a4 = v16;
            if (v16 >= a3)
              return result;
          }
        }
      }
    }
  }
  while (v10 != v8)
  {
    while (1)
    {
      v11 = (_QWORD *)v10[7];
      if (v11)
        break;
      v10 = (_QWORD *)v10[4];
      if (v10)
        v12 = v10 == v8;
      else
        v12 = 1;
      if (v12)
        goto LABEL_27;
    }
    v10 = (_QWORD *)v10[7];
    if ((*((_WORD *)v11 + 14) & 8) != 0)
      goto LABEL_15;
  }
LABEL_27:
  a2[1] = 0;
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::ClassCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  _BYTE v43[24];
  uint64_t v44;

  v3 = a3;
  if ((a1[5] & 1) != 0)
  {
    if (*((_DWORD *)a1 + 5) - a3 < a3 - *((_DWORD *)a1 + 4))
    {
      if ((*(_WORD *)(a2 + 21) & 0x200) != 0 && (v42 = *(_QWORD *)(a2 + 24), (*(_BYTE *)(v42 + 22) & 0x18) != 0))
        v9 = *(uint64_t **)(v42 + 40);
      else
        v9 = (uint64_t *)(a2 + 24);
      v10 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::ClassCollection>(*(_QWORD *)(a2 + 88), *v9);
      result = v11;
      *a1 = v10;
      a1[1] = v11;
      v13 = *((_DWORD *)a1 + 5);
      if (v13 - 1 > v3)
      {
        v14 = v13 + ~v3;
        if (v14)
        {
LABEL_11:
          while ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v17 = *(_QWORD *)(result + 88);
                if (!v17)
                  break;
                result = *(_QWORD *)(result + 88);
              }
              while ((*(_WORD *)(v17 + 28) & 4) != 0);
            }
            else
            {
              result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
            }
LABEL_16:
            while ((*(_WORD *)(result + 28) & 8) == 0)
            {
              if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
              {
                if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
                {
                  result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
                  do
                  {
                    v16 = *(_QWORD *)(result + 88);
                    if (!v16)
                      break;
                    result = *(_QWORD *)(result + 88);
                  }
                  while ((*(_WORD *)(v16 + 28) & 4) != 0);
                }
                else
                {
                  result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
                }
              }
              else
              {
                result = *(_QWORD *)(result + 32);
                if (result == v10)
                  goto LABEL_88;
              }
              if (!result)
                goto LABEL_88;
            }
            a1[1] = result;
            v18 = *(_QWORD *)(result + 104);
            if (v18)
            {
              v19 = *(_QWORD *)(v18 + 16);
              if (v19)
              {
                v20 = *(_QWORD *)(a2 + 88);
                if (v20)
                {
                  if (v19 != v20)
                  {
                    v21 = 0;
                    v22 = *(unsigned int *)(v20 + 12);
                    v23 = v20 + 16;
                    if (v22 <= 1)
                      v24 = 1;
                    else
                      v24 = v22;
                    do
                    {
                      if (v21 == v22)
                      {
                        __break(0xC471u);
                        goto LABEL_98;
                      }
                      v25 = 0;
                      while (*(_QWORD *)(v19 + 16 + 8 * v25) != *(_QWORD *)(v23 + 8 * v21))
                      {
                        if (++v25 >= (unint64_t)*(unsigned int *)(v19 + 12))
                          goto LABEL_11;
                      }
                      ++v21;
                    }
                    while (v21 != v24);
                  }
                  if (!--v14)
                    goto LABEL_89;
                }
              }
            }
          }
          result = *(_QWORD *)(result + 32);
          if (result != v10 && result != 0)
            goto LABEL_16;
LABEL_88:
          result = 0;
          a1[1] = 0;
        }
      }
LABEL_89:
      *((_DWORD *)a1 + 4) = v3;
      return result;
    }
    v6 = a1 + 1;
  }
  else
  {
    v6 = a1 + 1;
    if ((a1[5] & 2) == 0 && !a1[1])
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) + 8);
      v8 = v7 + 4 * (((unint64_t)*(unsigned __int16 *)(a2 + 21) >> 5) & 0xF);
      ++*(_DWORD *)(v8 + 1768);
      if ((*(_BYTE *)(a2 + 22) & 2) != 0)
      {
        v44 = a2;
        WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v7 + 1760), &v44, (uint64_t)v43);
        v6 = a1 + 1;
      }
    }
  }
  v26 = *((_DWORD *)a1 + 4);
  v27 = v3 - v26;
  if (v3 != v26)
  {
    v28 = 0;
    v29 = *a1;
    result = a1[1];
    while (1)
    {
LABEL_51:
      v30 = *(_QWORD *)(result + 80);
      if (!v30)
      {
        if (result == v29)
          goto LABEL_86;
        while (1)
        {
          v30 = *(_QWORD *)(result + 56);
          if (v30)
            break;
          result = *(_QWORD *)(result + 32);
          if (result)
            v40 = result == v29;
          else
            v40 = 1;
          if (v40)
            goto LABEL_86;
        }
      }
      if ((*(_WORD *)(v30 + 28) & 8) == 0)
        break;
      result = v30;
LABEL_64:
      *v6 = result;
      v32 = *(_QWORD *)(result + 104);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = *(_QWORD *)(a2 + 88);
          if (v34)
          {
            if (v33 != v34)
            {
              v35 = 0;
              v36 = *(unsigned int *)(v34 + 12);
              v37 = v34 + 16;
              if (v36 <= 1)
                v38 = 1;
              else
                v38 = v36;
              while (v35 != v36)
              {
                v39 = 0;
                while (*(_QWORD *)(v33 + 16 + 8 * v39) != *(_QWORD *)(v37 + 8 * v35))
                {
                  if (++v39 >= (unint64_t)*(unsigned int *)(v33 + 12))
                    goto LABEL_51;
                }
                if (++v35 == v38)
                  goto LABEL_77;
              }
              __break(0xC471u);
LABEL_98:
              JUMPOUT(0x195952D30);
            }
LABEL_77:
            if (++v28 == v27)
            {
              v3 = v26;
              goto LABEL_93;
            }
          }
        }
      }
    }
    while (v30 != v29)
    {
      while (1)
      {
        result = *(_QWORD *)(v30 + 56);
        if (result)
          break;
        v30 = *(_QWORD *)(v30 + 32);
        if (v30)
          v31 = v30 == v29;
        else
          v31 = 1;
        if (v31)
          goto LABEL_86;
      }
      v30 = *(_QWORD *)(v30 + 56);
      if ((*(_WORD *)(result + 28) & 8) != 0)
        goto LABEL_64;
    }
LABEL_86:
    a1[1] = 0;
    v41 = v28 + v26;
    *((_DWORD *)a1 + 4) = v28 + v26;
    goto LABEL_87;
  }
  result = *v6;
LABEL_93:
  v41 = v27 + v3;
  *((_DWORD *)a1 + 4) = v27 + v3;
  if (!result)
  {
LABEL_87:
    result = 0;
    *((_DWORD *)a1 + 5) = v41 + 1;
    *((_BYTE *)a1 + 40) |= 1u;
  }
  return result;
}

uint64_t WebCore::CollectionIndexCache<WebCore::ClassCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *((_DWORD *)a1 + 4) - a3;
  if (v6 <= a3)
  {
    if (v6)
    {
      v22 = *a1;
      result = a1[1];
LABEL_42:
      while ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v25 = *(_QWORD *)(result + 88);
            if (!v25)
              break;
            result = *(_QWORD *)(result + 88);
          }
          while ((*(_WORD *)(v25 + 28) & 4) != 0);
        }
        else
        {
          result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_47:
        while ((*(_WORD *)(result + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v24 = *(_QWORD *)(result + 88);
                if (!v24)
                  break;
                result = *(_QWORD *)(result + 88);
              }
              while ((*(_WORD *)(v24 + 28) & 4) != 0);
            }
            else
            {
              result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            result = *(_QWORD *)(result + 32);
            if (result == v22)
              goto LABEL_79;
          }
          if (!result)
            goto LABEL_79;
        }
        a1[1] = result;
        v26 = *(_QWORD *)(result + 104);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 16);
          if (v27)
          {
            v28 = *(_QWORD *)(a2 + 88);
            if (v28)
            {
              if (v27 != v28)
              {
                v29 = 0;
                v30 = *(unsigned int *)(v28 + 12);
                v31 = v28 + 16;
                if (v30 <= 1)
                  v32 = 1;
                else
                  v32 = v30;
                do
                {
                  if (v29 == v30)
                    goto LABEL_83;
                  v33 = 0;
                  while (*(_QWORD *)(v27 + 16 + 8 * v33) != *(_QWORD *)(v31 + 8 * v29))
                  {
                    if (++v33 >= (unint64_t)*(unsigned int *)(v27 + 12))
                      goto LABEL_42;
                  }
                  ++v29;
                }
                while (v29 != v32);
              }
              if (!--v6)
                goto LABEL_81;
            }
          }
        }
      }
      result = *(_QWORD *)(result + 32);
      if (result != v22 && result != 0)
        goto LABEL_47;
LABEL_79:
      result = 0;
      a1[1] = 0;
    }
    else
    {
      result = a1[1];
    }
LABEL_81:
    *((_DWORD *)a1 + 4) = a3;
  }
  else
  {
    v7 = WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionBegin(a2);
    result = v8;
    *a1 = v7;
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = 0;
    if (a3)
    {
      v10 = 0;
      *((_DWORD *)a1 + 4) = 0;
      while (1)
      {
LABEL_4:
        v11 = *(_QWORD *)(result + 80);
        if (!v11)
        {
          if (result == v7)
            goto LABEL_39;
          while (1)
          {
            v11 = *(_QWORD *)(result + 56);
            if (v11)
              break;
            result = *(_QWORD *)(result + 32);
            if (result)
              v21 = result == v7;
            else
              v21 = 1;
            if (v21)
              goto LABEL_39;
          }
        }
        if ((*(_WORD *)(v11 + 28) & 8) == 0)
          break;
        result = v11;
LABEL_17:
        a1[1] = result;
        v13 = *(_QWORD *)(result + 104);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 16);
          if (v14)
          {
            v15 = *(_QWORD *)(a2 + 88);
            if (v15)
            {
              if (v14 != v15)
              {
                v16 = 0;
                v17 = *(unsigned int *)(v15 + 12);
                v18 = v15 + 16;
                if (v17 <= 1)
                  v19 = 1;
                else
                  v19 = v17;
                while (v16 != v17)
                {
                  v20 = 0;
                  while (*(_QWORD *)(v14 + 16 + 8 * v20) != *(_QWORD *)(v18 + 8 * v16))
                  {
                    if (++v20 >= (unint64_t)*(unsigned int *)(v14 + 12))
                      goto LABEL_4;
                  }
                  if (++v16 == v19)
                    goto LABEL_30;
                }
LABEL_83:
                __break(0xC471u);
                JUMPOUT(0x195953040);
              }
LABEL_30:
              *((_DWORD *)a1 + 4) = ++v10;
              if (v10 >= a3)
                return result;
            }
          }
        }
      }
      while (v11 != v7)
      {
        while (1)
        {
          result = *(_QWORD *)(v11 + 56);
          if (result)
            break;
          v11 = *(_QWORD *)(v11 + 32);
          if (v11)
            v12 = v11 == v7;
          else
            v12 = 1;
          if (v12)
            goto LABEL_39;
        }
        v11 = *(_QWORD *)(v11 + 56);
        if ((*(_WORD *)(result + 28) & 8) != 0)
          goto LABEL_17;
      }
LABEL_39:
      result = 0;
      a1[1] = 0;
    }
  }
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionLast(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  if ((*(_WORD *)(a1 + 21) & 0x200) != 0 && (v3 = *(_QWORD *)(a1 + 24), (*(_BYTE *)(v3 + 22) & 0x18) != 0))
    v1 = *(uint64_t **)(v3 + 40);
  else
    v1 = (uint64_t *)(a1 + 24);
  return WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::ClassCollection>(*(_QWORD *)(a1 + 88), *v1);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a3)
  {
    v3 = *a2;
    v4 = a2[1];
LABEL_3:
    while ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v7 = *(_QWORD *)(v4 + 88);
          if (!v7)
            break;
          v4 = *(_QWORD *)(v4 + 88);
        }
        while ((*(_WORD *)(v7 + 28) & 4) != 0);
      }
      else
      {
        v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
      }
LABEL_8:
      while ((*(_WORD *)(v4 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v6 = *(_QWORD *)(v4 + 88);
              if (!v6)
                break;
              v4 = *(_QWORD *)(v4 + 88);
            }
            while ((*(_WORD *)(v6 + 28) & 4) != 0);
          }
          else
          {
            v4 = *(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v4 = *(_QWORD *)(v4 + 32);
          if (v4 == v3)
            goto LABEL_40;
        }
        if (!v4)
          goto LABEL_40;
      }
      a2[1] = v4;
      v8 = *(_QWORD *)(v4 + 104);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          v10 = *(_QWORD *)(result + 88);
          if (v10)
          {
            if (v9 != v10)
            {
              v11 = 0;
              v12 = *(unsigned int *)(v10 + 12);
              v13 = v10 + 16;
              if (v12 <= 1)
                v14 = 1;
              else
                v14 = v12;
              while (v11 != v12)
              {
                v15 = 0;
                while (*(_QWORD *)(v9 + 16 + 8 * v15) != *(_QWORD *)(v13 + 8 * v11))
                {
                  if (++v15 >= (unint64_t)*(unsigned int *)(v9 + 12))
                    goto LABEL_3;
                }
                if (++v11 == v14)
                  goto LABEL_37;
              }
              result = 58;
              __break(0xC471u);
              return result;
            }
LABEL_37:
            if (!--a3)
              return result;
          }
        }
      }
    }
    v4 = *(_QWORD *)(v4 + 32);
    if (v4 != v3 && v4 != 0)
      goto LABEL_8;
LABEL_40:
    a2[1] = 0;
  }
  return result;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::ClassCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2)
    return a2;
  if ((*(_WORD *)(v2 + 28) & 4) != 0)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 88);
      if (!v3)
        break;
      v2 = *(_QWORD *)(v2 + 88);
    }
    while ((*(_WORD *)(v3 + 28) & 4) != 0);
  }
  while ((*(_WORD *)(v2 + 28) & 8) == 0)
  {
    if ((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_WORD *)((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
        do
        {
          v4 = *(_QWORD *)(v2 + 88);
          if (!v4)
            break;
          v2 = *(_QWORD *)(v2 + 88);
        }
        while ((*(_WORD *)(v4 + 28) & 4) != 0);
      }
      else
      {
        v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
      }
    }
    else
    {
      v2 = *(_QWORD *)(v2 + 32);
      if (v2 == a2)
        return a2;
    }
    if (!v2)
      return a2;
  }
  while (1)
  {
    v6 = *(_QWORD *)(v2 + 104);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (v7 && a1 != 0)
        break;
    }
LABEL_34:
    if ((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v2 = *(_QWORD *)(v2 + 32);
      if (v2 != a2 && v2 != 0)
        goto LABEL_39;
      return a2;
    }
    if ((*(_WORD *)((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
    {
      v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
      do
      {
        v15 = *(_QWORD *)(v2 + 88);
        if (!v15)
          break;
        v2 = *(_QWORD *)(v2 + 88);
      }
      while ((*(_WORD *)(v15 + 28) & 4) != 0);
    }
    else
    {
      v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
    }
LABEL_39:
    while ((*(_WORD *)(v2 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v14 = *(_QWORD *)(v2 + 88);
            if (!v14)
              break;
            v2 = *(_QWORD *)(v2 + 88);
          }
          while ((*(_WORD *)(v14 + 28) & 4) != 0);
        }
        else
        {
          v2 = *(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v2 = *(_QWORD *)(v2 + 32);
        if (v2 == a2)
          return a2;
      }
      if (!v2)
        return a2;
    }
  }
  if (v7 == a1)
    return a2;
  v9 = 0;
  v10 = *(unsigned int *)(a1 + 12);
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = v10;
  while (v9 != v10)
  {
    v12 = 0;
    while (*(_QWORD *)(v7 + 16 + 8 * v12) != *(_QWORD *)(a1 + 16 + 8 * v9))
    {
      if (++v12 >= (unint64_t)*(unsigned int *)(v7 + 12))
        goto LABEL_34;
    }
    if (++v9 == v11)
      return a2;
  }
  result = 58;
  __break(0xC471u);
  return result;
}

void WebCore::ClipboardEvent::~ClipboardEvent(WebCore::ClipboardEvent *this, void *a2)
{
  WebCore::DataTransfer *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::DataTransfer *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WebCore::DataTransfer *v3;
  bmalloc::api *v4;
  void *v5;
  WTF *v6;
  void *v7;

  v3 = (WebCore::DataTransfer *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::DataTransfer::~DataTransfer(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::ClipboardEvent::isClipboardEvent(WebCore::ClipboardEvent *this)
{
  return 1;
}

uint64_t WebCore::Comment::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x800100000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a1 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  v7 = *a2;
  if (*a2 || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(result + 80) = v7;
  *(_QWORD *)result = off_1E33A15C0;
  *a3 = result;
  return result;
}

uint64_t WebCore::Comment::nodeName(WebCore::Comment *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::Comment::cloneNodeInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  _DWORD *v8;
  int v9;

  v5 = *(WTF::StringImpl **)(a1 + 80);
  if (v5)
    *(_DWORD *)v5 += 2;
  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x800100000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a2 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  if (v5)
  {
    v9 = *(_DWORD *)v5;
    *(_DWORD *)v5 += 2;
    *(_QWORD *)(result + 80) = v5;
    *(_QWORD *)result = off_1E33A15C0;
    *a3 = result;
    if (v9)
      *(_DWORD *)v5 = v9;
    else
      return WTF::StringImpl::destroy(v5, v7);
  }
  else
  {
    v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v8 += 2;
      *(_QWORD *)(result + 80) = v8;
    }
    else
    {
      *(_QWORD *)(result + 80) = 0;
    }
    *(_QWORD *)result = off_1E33A15C0;
    *a3 = result;
  }
  return result;
}

void WebCore::ComposedTreeIterator::Context::Context(WebCore::ComposedTreeIterator::Context *this, WebCore::ContainerNode *a2, WebCore::Node *a3)
{
  char *v3;
  char **v4;
  WebCore::ContainerNode *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  int v12;
  int v13;
  _OWORD *v14;
  WebCore::ComposedTreeIterator::Context *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::ComposedTreeIterator::Context *v19;
  WebCore::ComposedTreeIterator::Context *v20;
  uint64_t v21;
  __int128 v22;
  WebCore::ContainerNode *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[160];

  v3 = (char *)this + 24;
  *((_QWORD *)this + 1) = (char *)this + 24;
  v4 = (char **)((char *)this + 8);
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 2) = 16;
  *((_DWORD *)this + 70) = 0;
  if (a3 == a2)
  {
LABEL_12:
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = (char *)this + 312;
    *((_QWORD *)this + 38) = 16;
    *((_DWORD *)this + 142) = 0;
    *((_QWORD *)this + 72) = -1;
    return;
  }
  v25 = 20;
  v5 = (WebCore::ContainerNode *)*((_QWORD *)a3 + 4);
  v23 = v5;
  v24 = (WTF *)v26;
  if (v5 == a2)
  {
    v6 = 0;
    *(_QWORD *)&v22 = 0;
    DWORD2(v22) = 0;
LABEL_4:
    *(_OWORD *)&v3[16 * v6] = v22;
    goto LABEL_5;
  }
  v20 = this;
  do
  {
    v12 = HIDWORD(v25);
    if (HIDWORD(v25) == (_DWORD)v25)
    {
      WTF::Vector<WebCore::Node *,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContainerNode *&>((uint64_t)&v24, &v23);
    }
    else
    {
      *((_QWORD *)v24 + HIDWORD(v25)) = v5;
      HIDWORD(v25) = v12 + 1;
    }
    v5 = (WebCore::ContainerNode *)*((_QWORD *)v5 + 4);
    v23 = v5;
  }
  while (v5 != a2);
  v13 = *((_DWORD *)v20 + 4);
  v6 = *((unsigned int *)v20 + 5);
  *(_QWORD *)&v22 = 0;
  DWORD2(v22) = 0;
  if ((_DWORD)v6 != v13)
  {
    v3 = *v4;
    this = v20;
    goto LABEL_4;
  }
  v14 = (_OWORD *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v22);
  this = v20;
  *(_OWORD *)(*((_QWORD *)v20 + 1) + 16 * *((unsigned int *)v20 + 5)) = *v14;
LABEL_5:
  ++*((_DWORD *)this + 5);
  v7 = HIDWORD(v25);
  if (!HIDWORD(v25))
  {
    v8 = 1;
LABEL_7:
    *((_DWORD *)this + 70) = v8;
    v9 = v24;
    if (v26 != (_BYTE *)v24 && v24 != 0)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      v19 = this;
      WTF::fastFree(v9, a2);
      this = v19;
    }
    goto LABEL_12;
  }
  v21 = (uint64_t)v4;
  v15 = this;
  while (1)
  {
    v16 = v7 - 1;
    if (HIDWORD(v25) <= (v7 - 1))
      break;
    v17 = *((_QWORD *)v24 + v16);
    while (1)
    {
      v17 = *(_QWORD *)(v17 + 56);
      if (!v17)
        break;
      if ((*(_WORD *)(v17 + 28) & 0xA) != 0)
      {
        *(_QWORD *)&v22 = v17;
        DWORD2(v22) = v7;
        v18 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v18 == *((_DWORD *)v15 + 4))
        {
          WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ElementAndTextDescendantIterator::AncestorSibling>(v21, (unint64_t)&v22);
        }
        else
        {
          *(_OWORD *)(*((_QWORD *)v15 + 1) + 16 * v18) = v22;
          ++*((_DWORD *)v15 + 5);
        }
        break;
      }
    }
    v7 = v16;
    if (!(_DWORD)v16)
    {
      v8 = HIDWORD(v25) + 1;
      this = v15;
      goto LABEL_7;
    }
  }
  __break(0xC471u);
}

uint64_t WebCore::ComposedTreeIterator::Context::Context(uint64_t a1, const WebCore::ContainerNode *a2, WebCore::Node *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  WebCore::ElementAndTextDescendantIterator::ElementAndTextDescendantIterator((WebCore::ElementAndTextDescendantIterator *)a1, a2, a3);
  v5 = *v4;
  v6 = *((unsigned int *)v4 + 5);
  v7 = v4 + 39;
  *(_QWORD *)(a1 + 288) = v5;
  *(_QWORD *)(a1 + 296) = v7;
  *(_DWORD *)(a1 + 304) = 16;
  *(_DWORD *)(a1 + 308) = v6;
  if (v6 >= 0x11)
  {
    if (v6 >> 28)
      goto LABEL_11;
    v12 = v6;
    v7 = (void *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(a1 + 304) = v12;
    *(_QWORD *)(a1 + 296) = v7;
    v6 = *(unsigned int *)(a1 + 20);
  }
  memcpy(v7, *(const void **)(a1 + 8), 16 * v6);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 576) = -1;
  v8 = *(_QWORD *)(a1 + 288);
  do
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
    {
      v10 = *(unsigned int *)(a1 + 308);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(a1 + 296) + 16 * v10;
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(v11 - 16);
        *(_DWORD *)(a1 + 568) = *(_DWORD *)(v11 - 8);
        *(_DWORD *)(a1 + 308) = v10 - 1;
        return a1;
      }
LABEL_11:
      __break(0xC471u);
      JUMPOUT(0x195953910);
    }
  }
  while ((*(_WORD *)(v8 + 28) & 0xA) == 0);
  *(_QWORD *)(a1 + 288) = v8;
  return a1;
}

void WebCore::ComposedTreeIterator::initializeContextStack(WebCore::ComposedTreeIterator *this, WebCore::ContainerNode *a2, WebCore::Node *a3)
{
  uint64_t v3;
  WebCore::Node *v4;
  WebCore::ContainerNode *v5;
  WebCore::ContainerNode *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  _QWORD *v17;
  _DWORD *v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  WTF *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  WTF *v42;
  int v43;
  int v44;
  uint64_t v45;
  WTF *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  WTF *v54;
  void *v55;
  int v56;
  int v57;
  WTF *v58;
  WTF *v59;
  uint64_t *v60;
  int v61;
  int v62;
  WTF *v63;
  uint64_t *v64;
  WebCore::ContainerNode **v65;
  WebCore::HTMLSlotElement *v66;
  __int128 *v67;
  __int16 v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int v75;
  uint64_t v76;
  WTF *v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  WTF *v81;
  WTF *v82;
  unsigned int v83;
  uint64_t v84;
  void *v85;
  uint64_t *v86;
  __int128 *v87;
  uint64_t v88;
  WebCore::ShadowRoot *v89;
  void *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  int v95;
  uint64_t v96;
  WTF *v97;
  int v98;
  uint64_t v99;
  WTF *v100;
  WTF *v101;
  unsigned int v102;
  WebCore::HTMLSlotElement *AssignedSlot;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  WebCore::Node *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  WTF *v119;
  WTF *v121;
  uint64_t v123;
  void *v124;
  WTF *v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  WebCore::Node *v134;
  WebCore::Node *v135;
  uint64_t v136;
  void *__src;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  _BYTE v142[232];
  int v143;
  uint64_t v144;
  WTF *v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  _BYTE v150[232];
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  v7 = v3;
  v8 = &xmmword_1968C0000;
  if (v4 != v5)
  {
    v64 = (uint64_t *)(v3 + 8);
    v9 = -1;
    v65 = (WebCore::ContainerNode **)v4;
    while (1)
    {
      v66 = v65[4];
      if (!v66)
      {
        LOWORD(v136) = 0;
        __src = &v139;
        v139 = 0;
        v140 = v142;
        v141 = 16;
        LODWORD(v146) = 0;
        v147 = 0;
        v148 = v150;
        v149 = 16;
        v153 = 0;
        v154 = -1;
        v138 = 0x100000008;
        *(_WORD *)v7 = 0;
        WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v64, &__src);
        WebCore::ComposedTreeIterator::~ComposedTreeIterator((WebCore::ComposedTreeIterator *)&v136, v85);
        return;
      }
      v67 = v8;
      v68 = *((_WORD *)v66 + 14);
      if ((v68 & 0x80) != 0)
      {
        WebCore::ComposedTreeIterator::Context::Context((WebCore::ComposedTreeIterator::Context *)&v136, v65[4], v4);
        v69 = *(_DWORD *)(v7 + 20);
        v70 = v7;
        if (v69 == *(_DWORD *)(v7 + 16))
        {
          v71 = v64;
          WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>((uint64_t)v64, (unint64_t)&v136);
        }
        else
        {
          v71 = v64;
          v72 = *v64;
          v73 = *v64 + 584 * v69;
          *(_QWORD *)v73 = v136;
          *(_QWORD *)(v73 + 8) = v73 + 24;
          *(_QWORD *)(v73 + 16) = 16;
          v74 = __src;
          if (__src == &v139)
          {
            memcpy((void *)(v73 + 24), &v139, 16 * HIDWORD(v138));
          }
          else
          {
            __src = &v139;
            *(_QWORD *)(v73 + 8) = v74;
            v112 = v138;
            LODWORD(v138) = 16;
            *(_DWORD *)(v73 + 16) = v112;
          }
          v75 = HIDWORD(v138);
          HIDWORD(v138) = 0;
          *(_DWORD *)(v73 + 20) = v75;
          *(_DWORD *)(v73 + 280) = v143;
          v76 = v72 + 584 * v69;
          *(_QWORD *)(v76 + 288) = v144;
          *(_QWORD *)(v76 + 296) = v76 + 312;
          *(_QWORD *)(v76 + 304) = 16;
          v77 = v145;
          v78 = &v147;
          if (v145 == (WTF *)&v147)
          {
            memcpy((void *)(v76 + 312), &v147, 16 * HIDWORD(v146));
          }
          else
          {
            v145 = (WTF *)&v147;
            *(_QWORD *)(v76 + 296) = v77;
            v113 = v146;
            LODWORD(v146) = 16;
            *(_DWORD *)(v76 + 304) = v113;
          }
          v79 = HIDWORD(v146);
          HIDWORD(v146) = 0;
          *(_DWORD *)(v76 + 308) = v79;
          v80 = v72 + 584 * v69;
          *(_DWORD *)(v80 + 568) = v151;
          *(_QWORD *)(v80 + 576) = v152;
          v7 = v70;
          ++*(_DWORD *)(v70 + 20);
        }
        v81 = v145;
        v64 = v71;
        v8 = v67;
        if (&v147 != (uint64_t *)v145 && v145)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree(v81, v78);
        }
        v82 = (WTF *)__src;
        if (&v139 != __src && __src)
        {
          __src = 0;
          LODWORD(v138) = 0;
          WTF::fastFree(v82, v78);
        }
        v83 = *(_DWORD *)(v7 + 20);
        if (!v83)
        {
          __break(0xC471u);
          JUMPOUT(0x19595444CLL);
        }
        *(_QWORD *)(*v71 + 584 * v83 - 8) = v9;
        v84 = *((_QWORD *)v66 + 25);
        if (v84)
        {
          v66 = *(WebCore::HTMLSlotElement **)(v84 + 8);
          v9 = -1;
          v4 = v66;
        }
        else
        {
          v66 = 0;
          v4 = 0;
          v9 = -1;
        }
      }
      else
      {
        v86 = v64;
        v131 = v7;
        v87 = v8;
        v135 = (WebCore::Node *)v65;
        if ((v68 & 8) != 0 && (*((_QWORD *)v66 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v89 = *(WebCore::ShadowRoot **)((*((_QWORD *)v66 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
          if (v89)
          {
            WebCore::ComposedTreeIterator::Context::Context((uint64_t)&v136, v66, v4);
            v91 = *(_DWORD *)(v131 + 20);
            if (v91 == *(_DWORD *)(v131 + 16))
            {
              WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>((uint64_t)v64, (unint64_t)&v136);
            }
            else
            {
              v92 = *v64;
              v93 = *v64 + 584 * v91;
              *(_QWORD *)v93 = v136;
              *(_QWORD *)(v93 + 8) = v93 + 24;
              *(_QWORD *)(v93 + 16) = 16;
              v94 = __src;
              if (__src == &v139)
              {
                memcpy((void *)(v93 + 24), &v139, 16 * HIDWORD(v138));
              }
              else
              {
                __src = &v139;
                *(_QWORD *)(v93 + 8) = v94;
                v127 = v138;
                LODWORD(v138) = 16;
                *(_DWORD *)(v93 + 16) = v127;
              }
              v95 = HIDWORD(v138);
              HIDWORD(v138) = 0;
              *(_DWORD *)(v93 + 20) = v95;
              *(_DWORD *)(v93 + 280) = v143;
              v96 = v92 + 584 * v91;
              *(_QWORD *)(v96 + 288) = v144;
              *(_QWORD *)(v96 + 296) = v96 + 312;
              *(_QWORD *)(v96 + 304) = 16;
              v97 = v145;
              if (v145 == (WTF *)&v147)
              {
                memcpy((void *)(v96 + 312), &v147, 16 * HIDWORD(v146));
              }
              else
              {
                v145 = (WTF *)&v147;
                *(_QWORD *)(v96 + 296) = v97;
                v128 = v146;
                LODWORD(v146) = 16;
                *(_DWORD *)(v96 + 304) = v128;
              }
              v98 = HIDWORD(v146);
              HIDWORD(v146) = 0;
              *(_DWORD *)(v96 + 308) = v98;
              v99 = v92 + 584 * v91;
              *(_DWORD *)(v99 + 568) = v151;
              *(_QWORD *)(v99 + 576) = v152;
              ++*(_DWORD *)(v131 + 20);
            }
            v100 = v145;
            if (&v147 != (uint64_t *)v145 && v145)
            {
              v145 = 0;
              LODWORD(v146) = 0;
              WTF::fastFree(v100, v90);
            }
            v101 = (WTF *)__src;
            if (&v139 != __src && __src)
            {
              __src = 0;
              LODWORD(v138) = 0;
              WTF::fastFree(v101, v90);
            }
            v102 = *(_DWORD *)(v131 + 20);
            if (!v102)
            {
              __break(0xC471u);
              JUMPOUT(0x195954454);
            }
            *(_QWORD *)(*v86 + 584 * v102 - 8) = v9;
            AssignedSlot = (WebCore::HTMLSlotElement *)WebCore::ShadowRoot::findAssignedSlot(v89, v135);
            if (!AssignedSlot)
            {
              LOWORD(v136) = 0;
              __src = &v139;
              v139 = 0;
              v140 = v142;
              v141 = 16;
              LODWORD(v146) = 0;
              v147 = 0;
              v148 = v150;
              v149 = 16;
              v153 = 0;
              v154 = -1;
              v138 = 0x100000008;
              *(_WORD *)v131 = 0;
              v114 = *(_DWORD *)(v131 + 20);
              v115 = *(WTF **)(v131 + 8);
              if (v114)
              {
                v116 = 0;
                v117 = 584 * v114;
                do
                {
                  v118 = (char *)v115 + v116;
                  v119 = *(WTF **)((char *)v115 + v116 + 296);
                  if ((WTF *)((char *)v115 + v116 + 312) != v119 && v119 != 0)
                  {
                    *((_QWORD *)v118 + 37) = 0;
                    *((_DWORD *)v118 + 76) = 0;
                    WTF::fastFree(v119, v104);
                  }
                  v121 = (WTF *)*((_QWORD *)v118 + 1);
                  if (v118 + 24 != (char *)v121 && v121 != 0)
                  {
                    *((_QWORD *)v118 + 1) = 0;
                    *(_DWORD *)((char *)v115 + v116 + 16) = 0;
                    WTF::fastFree(v121, v104);
                  }
                  v116 += 584;
                }
                while (v117 != v116);
                v115 = (WTF *)*v86;
              }
              v123 = v131 + 24;
              if (v115 != (WTF *)(v131 + 24))
              {
                if (v115)
                {
                  *(_QWORD *)(v131 + 8) = 0;
                  *(_DWORD *)(v131 + 16) = 0;
                  WTF::fastFree(v115, v104);
                }
                *v86 = v123;
              }
              if (__src == &v139)
              {
                WTF::VectorMover<false,WebCore::ComposedTreeIterator::Context>::move((WTF *)&v139, (WTF *)(&v139 + 73 * HIDWORD(v138)), v123);
                v125 = (WTF *)__src;
                v126 = v138;
                HIDWORD(v138) = 0;
                *(_QWORD *)(v131 + 16) = v126;
                if (&v139 != (uint64_t *)v125 && v125)
                {
                  __src = 0;
                  LODWORD(v138) = 0;
                  WTF::fastFree(v125, v124);
                }
              }
              else
              {
                *(_QWORD *)(v131 + 8) = __src;
                *(_QWORD *)(v131 + 16) = v138;
              }
              return;
            }
            v66 = AssignedSlot;
            v105 = WebCore::HTMLSlotElement::assignedNodes(AssignedSlot);
            v106 = *(unsigned int *)(v105 + 12);
            if ((_DWORD)v106)
            {
              v9 = 0;
              while (1)
              {
                v107 = *(WebCore::Node **)(*(_QWORD *)v105 + 8 * v9);
                if (v107)
                  v107 = (WebCore::Node *)*((_QWORD *)v107 + 1);
                if (v107 == v135)
                  break;
                if (v106 == ++v9)
                {
                  v4 = v66;
                  v9 = -1;
                  goto LABEL_66;
                }
              }
            }
            else
            {
              v9 = -1;
            }
            v4 = v66;
          }
        }
LABEL_66:
        v8 = v87;
        v7 = v131;
        v64 = v86;
      }
      v65 = (WebCore::ContainerNode **)v66;
      if (v66 == v6)
        goto LABEL_3;
    }
  }
  v9 = -1;
LABEL_3:
  v10 = (uint64_t *)(v7 + 8);
  WebCore::ComposedTreeIterator::Context::Context((WebCore::ComposedTreeIterator::Context *)&v136, v6, v4);
  v11 = *(_DWORD *)(v7 + 20);
  if (v11 == *(_DWORD *)(v7 + 16))
  {
    WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>(v7 + 8, (unint64_t)&v136);
  }
  else
  {
    v12 = *v10;
    v13 = *v10 + 584 * v11;
    *(_QWORD *)v13 = v136;
    *(_QWORD *)(v13 + 8) = v13 + 24;
    v14 = *((_QWORD *)v8 + 456);
    *(_QWORD *)(v13 + 16) = v14;
    v15 = __src;
    if (__src == &v139)
    {
      memcpy((void *)(v13 + 24), __src, 16 * HIDWORD(v138));
    }
    else
    {
      __src = &v139;
      *(_QWORD *)(v13 + 8) = v15;
      v108 = v138;
      LODWORD(v138) = 16;
      *(_DWORD *)(v13 + 16) = v108;
    }
    v16 = HIDWORD(v138);
    HIDWORD(v138) = 0;
    *(_DWORD *)(v13 + 20) = v16;
    *(_DWORD *)(v13 + 280) = v143;
    v17 = (_QWORD *)(v12 + 584 * v11);
    v17[36] = v144;
    v17[37] = v17 + 39;
    v18 = (_DWORD *)v17 + 77;
    v17[38] = v14;
    v19 = v145;
    if (v145 == (WTF *)&v147)
    {
      memcpy(v17 + 39, v145, 16 * HIDWORD(v146));
    }
    else
    {
      v145 = (WTF *)&v147;
      v17[37] = v19;
      v109 = v146;
      LODWORD(v146) = 16;
      *((_DWORD *)v17 + 76) = v109;
    }
    v20 = HIDWORD(v146);
    HIDWORD(v146) = 0;
    *v18 = v20;
    v21 = v12 + 584 * v11;
    *(_DWORD *)(v21 + 568) = v151;
    *(_QWORD *)(v21 + 576) = v152;
    ++*(_DWORD *)(v7 + 20);
  }
  v22 = v145;
  if (&v147 != (uint64_t *)v145 && v145 != 0)
  {
    v145 = 0;
    LODWORD(v146) = 0;
    WTF::fastFree(v22, v19);
  }
  v24 = (WTF *)__src;
  if (&v139 != __src && __src)
  {
    __src = 0;
    LODWORD(v138) = 0;
    WTF::fastFree(v24, v19);
  }
  LODWORD(v25) = *(_DWORD *)(v7 + 20);
  if (!(_DWORD)v25)
  {
    __break(0xC471u);
    JUMPOUT(0x195954444);
  }
  *(_QWORD *)(*v10 + 584 * v25 - 8) = v9;
  if ((_DWORD)v25 != 1)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = *((_QWORD *)v8 + 456);
    v129 = (uint64_t *)(v7 + 8);
    v130 = v7;
    do
    {
      if (v28 >= v25)
      {
        __break(0xC471u);
        JUMPOUT(0x19595445CLL);
      }
      v30 = (unint64_t)&v26[(v25 - 1)];
      if (v30 >= v25)
      {
        __break(0xC471u);
        JUMPOUT(0x195954464);
      }
      v132 = v28;
      v133 = v26;
      v31 = *v10;
      v32 = (uint64_t *)(*v10 + v27);
      v136 = *v32;
      __src = &v139;
      v138 = v29;
      v33 = (uint64_t *)v32[1];
      if (v32 + 3 == v33)
      {
        v34 = *((unsigned int *)v32 + 5);
        memcpy(&v139, v33, 16 * v34);
      }
      else
      {
        v32[1] = (uint64_t)(v32 + 3);
        __src = v33;
        v110 = *((_DWORD *)v32 + 4);
        *((_DWORD *)v32 + 4) = 16;
        LODWORD(v138) = v110;
        LODWORD(v34) = *((_DWORD *)v32 + 5);
      }
      v35 = v31 + v27;
      *(_DWORD *)(v31 + v27 + 20) = 0;
      HIDWORD(v138) = v34;
      v143 = *(_DWORD *)(v31 + v27 + 280);
      v144 = *(_QWORD *)(v31 + v27 + 288);
      v145 = (WTF *)&v147;
      v146 = v29;
      v36 = *(void **)(v31 + v27 + 296);
      v37 = v31 + v27 + 312;
      if ((void *)v37 == v36)
      {
        v38 = *(unsigned int *)(v35 + 308);
        memcpy(&v147, v36, 16 * v38);
      }
      else
      {
        *(_QWORD *)(v35 + 296) = v37;
        v145 = (WTF *)v36;
        v111 = *(_DWORD *)(v35 + 304);
        *(_DWORD *)(v35 + 304) = 16;
        LODWORD(v146) = v111;
        LODWORD(v38) = *(_DWORD *)(v35 + 308);
      }
      v39 = v31 + 584 * v30;
      v40 = v31 + v27;
      *(_DWORD *)(v40 + 308) = 0;
      HIDWORD(v146) = v38;
      v151 = *(_DWORD *)(v31 + v27 + 568);
      v152 = *(_QWORD *)(v31 + v27 + 576);
      *(_QWORD *)v40 = *(_QWORD *)v39;
      v41 = *(void **)(v39 + 8);
      v42 = (WTF *)(v39 + 24);
      if (v41 == (void *)(v39 + 24))
      {
        memcpy(v32 + 3, v41, 16 * *(unsigned int *)(v39 + 20));
        v43 = *(_DWORD *)(v39 + 16);
      }
      else
      {
        *(_QWORD *)(v39 + 8) = v42;
        v32[1] = (uint64_t)v41;
        v43 = *(_DWORD *)(v39 + 16);
        *(_DWORD *)(v39 + 16) = 16;
      }
      *(_DWORD *)(v31 + v27 + 16) = v43;
      v44 = *(_DWORD *)(v39 + 20);
      *(_DWORD *)(v39 + 20) = 0;
      *(_DWORD *)(v35 + 20) = v44;
      *(_DWORD *)(v35 + 280) = *(_DWORD *)(v39 + 280);
      v45 = v31 + 584 * v30;
      *(_QWORD *)(v35 + 288) = *(_QWORD *)(v45 + 288);
      v46 = *(WTF **)(v35 + 296);
      if ((WTF *)v37 != v46)
      {
        if (v46)
        {
          *(_QWORD *)(v35 + 296) = 0;
          *(_DWORD *)(v31 + v27 + 304) = 0;
          WTF::fastFree(v46, v41);
        }
        *(_QWORD *)(v35 + 296) = v37;
      }
      v134 = (WebCore::Node *)(v45 + 296);
      v47 = *(const void **)(v45 + 296);
      v48 = v31 + 584 * v30 + 312;
      if (v47 == (const void *)v48)
      {
        v49 = v31 + 584 * v30;
        memcpy((void *)(v31 + v27 + 312), v47, 16 * *(unsigned int *)(v49 + 308));
        v50 = *(_DWORD *)(v49 + 304);
      }
      else
      {
        *(_QWORD *)v134 = v48;
        *(_QWORD *)(v35 + 296) = v47;
        v88 = v31 + 584 * v30;
        v50 = *(_DWORD *)(v88 + 304);
        *(_DWORD *)(v88 + 304) = 16;
      }
      *(_DWORD *)(v31 + v27 + 304) = v50;
      v51 = v31 + 584 * v30;
      v52 = *(_DWORD *)(v51 + 308);
      *(_DWORD *)(v51 + 308) = 0;
      *(_DWORD *)(v40 + 308) = v52;
      *(_DWORD *)(v40 + 568) = *(_DWORD *)(v51 + 568);
      *(_QWORD *)(v40 + 576) = *(_QWORD *)(v51 + 576);
      v53 = &v139;
      *(_QWORD *)v39 = v136;
      v54 = *(WTF **)(v39 + 8);
      if (v54 != v42)
      {
        if (v54)
        {
          *(_QWORD *)(v39 + 8) = 0;
          *(_DWORD *)(v39 + 16) = 0;
          WTF::fastFree(v54, &v139);
        }
        *(_QWORD *)(v39 + 8) = v42;
        v53 = &v139;
      }
      v55 = __src;
      if (__src == &v139)
      {
        v56 = HIDWORD(v138);
        memcpy((void *)(v39 + 24), &v139, 16 * HIDWORD(v138));
        v57 = v138;
      }
      else
      {
        __src = &v139;
        *(_QWORD *)(v39 + 8) = v55;
        v57 = v138;
        v56 = HIDWORD(v138);
        LODWORD(v138) = 16;
      }
      *(_DWORD *)(v39 + 16) = v57;
      HIDWORD(v138) = 0;
      *(_DWORD *)(v39 + 20) = v56;
      *(_DWORD *)(v39 + 280) = v143;
      *(_QWORD *)(v45 + 288) = v144;
      v58 = *(WTF **)v134;
      if (*(_QWORD *)v134 != v48)
      {
        if (v58)
        {
          *(_QWORD *)v134 = 0;
          *(_DWORD *)(v31 + 584 * v30 + 304) = 0;
          WTF::fastFree(v58, v53);
        }
        *(_QWORD *)v134 = v48;
      }
      v59 = v145;
      v60 = &v147;
      if (v145 == (WTF *)&v147)
      {
        v61 = HIDWORD(v146);
        memcpy((void *)(v31 + 584 * v30 + 312), &v147, 16 * HIDWORD(v146));
        v62 = v146;
      }
      else
      {
        v145 = (WTF *)&v147;
        *(_QWORD *)v134 = v59;
        v62 = v146;
        LODWORD(v146) = 16;
        v61 = HIDWORD(v146);
      }
      *(_DWORD *)(v31 + 584 * v30 + 304) = v62;
      HIDWORD(v146) = 0;
      *(_DWORD *)(v51 + 308) = v61;
      *(_DWORD *)(v51 + 568) = v151;
      *(_QWORD *)(v51 + 576) = v152;
      v63 = (WTF *)__src;
      if (&v139 != __src)
      {
        if (__src)
        {
          __src = 0;
          LODWORD(v138) = 0;
          WTF::fastFree(v63, v60);
        }
      }
      v28 = v132 + 1;
      v25 = *(unsigned int *)(v130 + 20);
      v27 += 584;
      v26 = v133 - 1;
      v10 = v129;
    }
    while (v132 + 1 < v25 >> 1);
  }
}

WebCore::ComposedTreeIterator *WebCore::ComposedTreeIterator::ComposedTreeIterator(WebCore::ComposedTreeIterator *this, WebCore::ContainerNode *a2, WebCore::Node *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD v12[66];
  uint64_t v13;

  *(_BYTE *)this = (*((_QWORD *)a2 + 2) & 0x10000000000000) != 0;
  *((_BYTE *)this + 1) = 0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 8;
  if ((*((_BYTE *)a2 + 28) & 8) != 0
    && (*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0
    && *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
  {
    goto LABEL_9;
  }
  if (a3 == a2)
  {
    v4 = 0;
    v8 = 0;
  }
  else
  {
    if (*((WebCore::ContainerNode **)a3 + 4) != a2)
    {
LABEL_9:
      WebCore::ComposedTreeIterator::initializeContextStack(this, a2, a3);
      return this;
    }
    v6 = 0;
    v4 = 1;
    v7 = 0;
    v8 = 1;
    a2 = a3;
  }
  v9 = 0;
  v10 = v12;
  v11 = 16;
  v12[64] = 0;
  v13 = -1;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *((_DWORD *)this + 10) = 16;
  memcpy((char *)this + 48, &v6, (16 * v4));
  *((_DWORD *)this + 11) = v4;
  *((_DWORD *)this + 76) = v4;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = (char *)this + 336;
  *((_QWORD *)this + 41) = 16;
  *((_DWORD *)this + 148) = 0;
  *((_QWORD *)this + 75) = -1;
  *((_DWORD *)this + 5) = 1;
  return this;
}

void WebCore::ComposedTreeIterator::~ComposedTreeIterator(WebCore::ComposedTreeIterator *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  WTF *v8;
  WTF *v10;

  v3 = *((_DWORD *)this + 5);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    v5 = 0;
    v6 = 584 * v3;
    do
    {
      v7 = (char *)v4 + v5;
      v8 = *(WTF **)((char *)v4 + v5 + 296);
      if ((WTF *)((char *)v4 + v5 + 312) != v8 && v8 != 0)
      {
        *((_QWORD *)v7 + 37) = 0;
        *((_DWORD *)v7 + 76) = 0;
        WTF::fastFree(v8, a2);
        v7 = (char *)v4 + v5;
      }
      v10 = (WTF *)*((_QWORD *)v7 + 1);
      if (v7 + 24 != (char *)v10 && v10 != 0)
      {
        *((_QWORD *)v7 + 1) = 0;
        *(_DWORD *)((char *)v4 + v5 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
      v5 += 584;
    }
    while (v6 != v5);
    v4 = (WTF *)*((_QWORD *)this + 1);
  }
  if ((WebCore::ComposedTreeIterator *)((char *)this + 24) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
}

WTF *WebCore::ComposedTreeIterator::traverseShadowRoot(WebCore::ComposedTreeIterator *this, WebCore::ShadowRoot *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _DWORD *v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  WTF *v18;
  WTF *result;
  int v20;
  int v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  _BYTE v31[256];
  int v32;
  uint64_t v33;

  if ((*((_WORD *)a2 + 14) & 4) != 0 && (v3 = *((_QWORD *)a2 + 10)) != 0)
  {
    while ((*(_WORD *)(v3 + 28) & 0xA) == 0)
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        goto LABEL_16;
    }
    v4 = 0;
    v22 = v3;
    v23 = (WTF *)&v25;
    v25 = 0;
    v24 = 0x100000010;
    v5 = 1;
    v26 = 0;
    v27 = 1;
  }
  else
  {
LABEL_16:
    v3 = 0;
    v5 = 0;
    v22 = 0;
    v23 = (WTF *)&v25;
    v24 = 16;
    v27 = 0;
    v4 = 1;
  }
  v28 = 0;
  v29 = (WTF *)v31;
  v30 = 16;
  v32 = 0;
  v33 = -1;
  if (v4)
  {
    WebCore::ComposedTreeIterator::traverseNextSkippingChildren((uint64_t)this, a2);
  }
  else
  {
    v6 = (uint64_t *)((char *)this + 8);
    v7 = *((_DWORD *)this + 5);
    if (v7 == *((_DWORD *)this + 4))
    {
      WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>((uint64_t)v6, (unint64_t)&v22);
    }
    else
    {
      v8 = *v6;
      v9 = *v6 + 584 * v7;
      *(_QWORD *)v9 = v3;
      *(_QWORD *)(v9 + 8) = v9 + 24;
      *(_QWORD *)(v9 + 16) = 16;
      v10 = v23;
      v11 = &v25;
      if (v23 == (WTF *)&v25)
      {
        memcpy((void *)(v9 + 24), &v25, 16 * HIDWORD(v24));
        v5 = v27;
      }
      else
      {
        v23 = (WTF *)&v25;
        *(_QWORD *)(v9 + 8) = v10;
        v20 = v24;
        LODWORD(v24) = 16;
        *(_DWORD *)(v9 + 16) = v20;
      }
      v12 = HIDWORD(v24);
      HIDWORD(v24) = 0;
      *(_DWORD *)(v9 + 20) = v12;
      *(_DWORD *)(v9 + 280) = v5;
      v13 = (_QWORD *)(v8 + 584 * v7);
      v13[36] = v28;
      v13[37] = v13 + 39;
      v14 = (_DWORD *)v13 + 77;
      v13[38] = 16;
      v15 = v29;
      if (v29 == (WTF *)v31)
      {
        memcpy(v13 + 39, v31, 16 * HIDWORD(v30));
      }
      else
      {
        v29 = (WTF *)v31;
        v13[37] = v15;
        v21 = v30;
        LODWORD(v30) = 16;
        *((_DWORD *)v13 + 76) = v21;
      }
      v16 = HIDWORD(v30);
      HIDWORD(v30) = 0;
      *v14 = v16;
      v17 = v8 + 584 * v7;
      *(_DWORD *)(v17 + 568) = v32;
      *(_QWORD *)(v17 + 576) = v33;
      ++*((_DWORD *)this + 5);
    }
  }
  v18 = v29;
  if (v31 != (_BYTE *)v29 && v29)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    WTF::fastFree(v18, v11);
  }
  result = v23;
  if (&v25 != (uint64_t *)v23)
  {
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      return (WTF *)WTF::fastFree(result, v11);
    }
  }
  return result;
}

uint64_t WebCore::ComposedTreeIterator::traverseNextSkippingChildren(uint64_t this, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(unsigned int *)(this + 20);
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195954A00);
  }
  v3 = v2 - 1;
  v4 = *(_QWORD *)(this + 8);
  v5 = (uint64_t *)(v4 + 584 * (v2 - 1));
  v6 = *v5;
  while (1)
  {
    v6 = *(_QWORD *)(v6 + 56);
    if (!v6)
      break;
    if ((*(_WORD *)(v6 + 28) & 0xA) != 0)
    {
      *v5 = v6;
      goto LABEL_6;
    }
  }
  v8 = *((unsigned int *)v5 + 5);
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195954A08);
  }
  v9 = v5[1] + 16 * v8;
  v6 = *(_QWORD *)(v9 - 16);
  *v5 = v6;
  *((_DWORD *)v5 + 70) = *(_DWORD *)(v9 - 8);
  *((_DWORD *)v5 + 5) = v8 - 1;
LABEL_6:
  v7 = *(_QWORD *)(v4 + 584 * v3 + 288);
  if (v6 == v7 || !*((_DWORD *)v5 + 70) && !*(_DWORD *)(v4 + 584 * v3 + 568))
  {
    while (1)
    {
LABEL_15:
      v10 = v2 - 1;
      v11 = v4 + 584 * (v2 - 1);
      if (v6 == v7)
      {
        if (v2 < 2)
          return this;
      }
      else if (*(_DWORD *)(v11 + 280) || v2 < 2 || *(_DWORD *)(v4 + 584 * v10 + 568))
      {
        return this;
      }
      v12 = v4 + 584 * v10;
      v13 = *(WTF **)(v12 + 296);
      if ((WTF *)(v12 + 312) != v13 && v13 != 0)
      {
        *(_QWORD *)(v12 + 296) = 0;
        *(_DWORD *)(v4 + 584 * v10 + 304) = 0;
        v26 = this;
        v22 = v11;
        v23 = v10;
        WTF::fastFree(v13, a2);
        v11 = v22;
        LODWORD(v10) = v23;
        this = v26;
      }
      v15 = *(WTF **)(v11 + 8);
      if ((WTF *)(v11 + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        v27 = this;
        v24 = v10;
        WTF::fastFree(v15, a2);
        LODWORD(v10) = v24;
        this = v27;
      }
      *(_DWORD *)(this + 20) = v10;
      if (!(_DWORD)v10)
      {
        __break(0xC471u);
        JUMPOUT(0x195954B7CLL);
      }
      v2 = v10;
      v4 = *(_QWORD *)(this + 8);
      v17 = *(_QWORD *)(v4 + 584 * v10 - 584);
      if ((*(_WORD *)(v17 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
      {
        v25 = this;
        v21 = WebCore::ComposedTreeIterator::advanceInSlot(this, 1, v17);
        this = v25;
        if ((v21 & 1) != 0)
          return this;
        v2 = *(unsigned int *)(v25 + 20);
        if (!(_DWORD)v2)
        {
          __break(0xC471u);
          JUMPOUT(0x195954B8CLL);
        }
        this = v25;
        v4 = *(_QWORD *)(v25 + 8);
      }
      v18 = (uint64_t *)(v4 + 584 * (v2 - 1));
      v6 = *v18;
      v7 = v18[36];
      if (*v18 == v7 || !*((_DWORD *)v18 + 70) && !*(_DWORD *)(v4 + 584 * (v2 - 1) + 568))
        break;
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 56);
        if (!v6)
          break;
        if ((*(_WORD *)(v6 + 28) & 0xA) != 0)
        {
          *v18 = v6;
          goto LABEL_15;
        }
      }
      v19 = *((unsigned int *)v18 + 5);
      if (!(_DWORD)v19)
      {
        __break(0xC471u);
        JUMPOUT(0x195954B84);
      }
      v20 = v18[1] + 16 * v19;
      v6 = *(_QWORD *)(v20 - 16);
      *v18 = v6;
      *((_DWORD *)v18 + 70) = *(_DWORD *)(v20 - 8);
      *((_DWORD *)v18 + 5) = v19 - 1;
    }
  }
  return this;
}

void WebCore::ComposedTreeIterator::traverseNextInShadowTree(WebCore::ComposedTreeIterator *this, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  WebCore::ComposedTreeIterator *v19;
  _DWORD *v20;
  uint64_t v21;
  WebCore::Node *v22;
  const WebCore::ContainerNode *v23;
  unsigned int v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  WebCore::ComposedTreeIterator *v30;
  _OWORD v31[36];

  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
    goto LABEL_46;
  v3 = (_QWORD *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v5 = v2 - 1;
  v6 = *(_QWORD *)(v4 + 584 * (v2 - 1));
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
  {
    goto LABEL_4;
  }
  v29 = (_QWORD *)((char *)this + 8);
  v19 = this;
  v20 = (_DWORD *)WebCore::HTMLSlotElement::assignedNodes((WebCore::HTMLSlotElement *)v6);
  v21 = *((unsigned int *)v19 + 5);
  LODWORD(v2) = *((_DWORD *)v19 + 5);
  if (v20)
  {
    if (!(_DWORD)v2)
    {
      __break(0xC471u);
      JUMPOUT(0x195954E9CLL);
    }
    *(_QWORD *)(*v29 + 584 * v21 - 8) = 0;
    if (!v20[3])
    {
      __break(0xC471u);
      JUMPOUT(0x195954EA4);
    }
    v22 = *(WebCore::Node **)(**(_QWORD **)v20 + 8);
    if ((*(_WORD *)(*((_QWORD *)v22 + 4) + 28) & 8) != 0)
      v23 = (const WebCore::ContainerNode *)*((_QWORD *)v22 + 4);
    else
      v23 = 0;
    WebCore::ComposedTreeIterator::Context::Context((uint64_t)v31, v23, v22);
    v24 = *((_DWORD *)v19 + 5);
    if (v24 == *((_DWORD *)v19 + 4))
    {
      WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>((uint64_t)v29, (unint64_t)v31);
    }
    else
    {
      WebCore::ComposedTreeIterator::Context::Context(*((_QWORD *)v19 + 1) + 584 * v24, (uint64_t)v31);
      ++*((_DWORD *)v19 + 5);
    }
    WebCore::ComposedTreeIterator::Context::~Context((WebCore::ComposedTreeIterator::Context *)v31, v25);
    return;
  }
  if (!(_DWORD)v2)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x195954E74);
  }
  v3 = v29;
  this = v19;
  v4 = *v29;
  v5 = v21 - 1;
LABEL_4:
  v7 = (uint64_t *)(v4 + 584 * v5);
  v8 = *v7;
  if ((*(_WORD *)(*v7 + 28) & 4) != 0 && (v9 = *(_QWORD *)(v8 + 80)) != 0)
  {
    do
    {
      if ((*(_WORD *)(v9 + 28) & 0xA) != 0)
      {
        v10 = v9;
        break;
      }
      v10 = 0;
      v9 = *(_QWORD *)(v9 + 56);
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }
  while (1)
  {
    v8 = *(_QWORD *)(v8 + 56);
    if (!v8)
      break;
    if ((*(_WORD *)(v8 + 28) & 0xA) != 0)
    {
      if (v10)
      {
        *(_QWORD *)&v31[0] = v8;
        DWORD2(v31[0]) = *((_DWORD *)v7 + 70);
        v11 = *((unsigned int *)v7 + 5);
        if ((_DWORD)v11 == *((_DWORD *)v7 + 4))
        {
          v28 = v3;
          v30 = this;
          v26 = v7;
          v27 = v10;
          v17 = WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v7 + 1), v11 + 1, (unint64_t)v31);
          v7 = v26;
          v10 = v27;
          v18 = (_OWORD *)v17;
          v3 = v28;
          this = v30;
          *(_OWORD *)(v26[1] + 16 * *((unsigned int *)v26 + 5)) = *v18;
        }
        else
        {
          *(_OWORD *)(v7[1] + 16 * v11) = v31[0];
        }
        ++*((_DWORD *)v7 + 5);
        LODWORD(v2) = *((_DWORD *)this + 5);
        goto LABEL_14;
      }
      *v7 = v8;
      goto LABEL_15;
    }
  }
  if (v10)
  {
LABEL_14:
    ++*((_DWORD *)v7 + 70);
    *v7 = v10;
    goto LABEL_15;
  }
  v15 = *((unsigned int *)v7 + 5);
  if (!(_DWORD)v15)
  {
    __break(0xC471u);
    JUMPOUT(0x195954E84);
  }
  v16 = v7[1] + 16 * v15;
  *v7 = *(_QWORD *)(v16 - 16);
  *((_DWORD *)v7 + 70) = *(_DWORD *)(v16 - 8);
  *((_DWORD *)v7 + 5) = v15 - 1;
LABEL_15:
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195954E7CLL);
  }
  v12 = v2 - 1;
  v13 = *v3;
  v14 = v13 + 584 * v12;
  if (*(_QWORD *)v14 == *(_QWORD *)(v14 + 288) || !*(_DWORD *)(v14 + 280) && !*(_DWORD *)(v13 + 584 * v12 + 568))
    WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)this, a2);
}

uint64_t WebCore::ComposedTreeIterator::advanceInSlot(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WebCore::Node *v13;
  const WebCore::ContainerNode *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int *v21;
  WTF *v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  int v27;
  int v28;
  uint64_t v29;
  void *__src;
  int v31;
  unsigned int v32;
  _DWORD v33[66];
  uint64_t v34;
  WTF *v35;
  int v36;
  unsigned int v37;
  _DWORD v38[66];
  uint64_t v39;

  v4 = result;
  v5 = **(_QWORD **)(a3 + 40);
  if (v5)
    v6 = (*(_WORD *)(v5 + 28) & 0x80) == 0;
  else
    v6 = 1;
  if (v6)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 24);
    *(_DWORD *)(v5 + 24) = v7 + 2;
    result = *(_QWORD *)(v5 + 224);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a3, v5);
      v8 = result;
      v7 = *(_DWORD *)(v5 + 24) - 2;
      if (*(_DWORD *)(v5 + 24) != 2)
      {
LABEL_7:
        *(_DWORD *)(v5 + 24) = v7;
        goto LABEL_8;
      }
    }
    else
    {
      v8 = 0;
      if (v7)
        goto LABEL_7;
    }
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
LABEL_8:
  v9 = *(_DWORD *)(v4 + 20);
  if (v9)
  {
    v10 = *(_QWORD *)(v4 + 8) + 584 * v9;
    v11 = *(_QWORD *)(v10 - 8) + a2;
    *(_QWORD *)(v10 - 8) = v11;
    v12 = *(unsigned int *)(v8 + 12);
    if (v11 < v12)
    {
      v13 = *(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)v8 + 8 * v11) + 8);
      if ((*(_WORD *)(*((_QWORD *)v13 + 4) + 28) & 8) != 0)
        v14 = (const WebCore::ContainerNode *)*((_QWORD *)v13 + 4);
      else
        v14 = 0;
      WebCore::ComposedTreeIterator::Context::Context((uint64_t)&v29, v14, v13);
      v15 = *(_DWORD *)(v4 + 20);
      if (v15 == *(_DWORD *)(v4 + 16))
      {
        WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>(v4 + 8, (unint64_t)&v29);
      }
      else
      {
        v16 = *(_QWORD *)(v4 + 8);
        v17 = v16 + 584 * v15;
        *(_QWORD *)v17 = v29;
        *(_QWORD *)(v17 + 8) = v17 + 24;
        *(_QWORD *)(v17 + 16) = 16;
        v18 = __src;
        if (__src == v33)
        {
          memcpy((void *)(v17 + 24), __src, 16 * v32);
        }
        else
        {
          __src = v33;
          *(_QWORD *)(v17 + 8) = v18;
          v27 = v31;
          v31 = 16;
          *(_DWORD *)(v17 + 16) = v27;
        }
        v19 = v32;
        v32 = 0;
        *(_DWORD *)(v17 + 20) = v19;
        *(_DWORD *)(v17 + 280) = v33[64];
        v20 = (_QWORD *)(v16 + 584 * v15);
        v20[36] = v34;
        v20[37] = v20 + 39;
        v21 = (unsigned int *)v20 + 77;
        v20[38] = 16;
        v22 = v35;
        if (v35 == (WTF *)v38)
        {
          memcpy(v20 + 39, v35, 16 * v37);
        }
        else
        {
          v35 = (WTF *)v38;
          v20[37] = v22;
          v28 = v36;
          v36 = 16;
          *((_DWORD *)v20 + 76) = v28;
        }
        v23 = v37;
        v37 = 0;
        *v21 = v23;
        v24 = v16 + 584 * v15;
        *(_DWORD *)(v24 + 568) = v38[64];
        *(_QWORD *)(v24 + 576) = v39;
        ++*(_DWORD *)(v4 + 20);
      }
      v25 = v35;
      if (v38 != (_DWORD *)v35 && v35)
      {
        v35 = 0;
        v36 = 0;
        WTF::fastFree(v25, v22);
      }
      v26 = (WTF *)__src;
      if (v33 != __src)
      {
        if (__src)
        {
          __src = 0;
          v31 = 0;
          WTF::fastFree(v26, v22);
        }
      }
    }
    return v11 < v12;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ComposedTreeIterator::traverseSiblingInSlot(WebCore::ComposedTreeIterator *this, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v12;
  uint64_t v14;
  uint64_t result;
  void *v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  WTF *v22;
  WTF *v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  int v32;
  _QWORD v33[3];
  _DWORD v34[66];
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD v38[66];
  uint64_t v39;
  uint64_t v40;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = *(unsigned int *)(v2 + 20);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1959553ECLL);
  }
  v5 = (int)v3;
  v6 = v2;
  v7 = v4 - 1;
  v8 = *(_QWORD *)(v2 + 8);
  v9 = v8 + 584 * (v4 - 1);
  v10 = *(WTF **)(v9 + 296);
  if ((WTF *)(v9 + 312) != v10 && v10 != 0)
  {
    *(_QWORD *)(v9 + 296) = 0;
    *(_DWORD *)(v8 + 584 * v7 + 304) = 0;
    v29 = v8 + 584 * (v4 - 1);
    WTF::fastFree(v10, v3);
    v9 = v29;
    LODWORD(v7) = v4 - 1;
  }
  v12 = *(WTF **)(v9 + 8);
  if ((WTF *)(v9 + 24) != v12 && v12 != 0)
  {
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
    v32 = v7;
    WTF::fastFree(v12, v3);
    LODWORD(v7) = v32;
  }
  *(_DWORD *)(v6 + 20) = v7;
  if (!(_DWORD)v7
    || (v14 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 584 * v4 - 1168), (*(_WORD *)(v14 + 28) & 0x10) == 0)
    || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195955394);
  }
  result = WebCore::ComposedTreeIterator::advanceInSlot(v6, v5, v14);
  if ((result & 1) == 0)
  {
    v33[0] = 0;
    v33[1] = v34;
    v33[2] = 16;
    v34[64] = 0;
    v35 = 0;
    v36 = v38;
    v37 = 16;
    v38[64] = 0;
    v39 = -1;
    *(_WORD *)v6 = 0;
    v17 = *(_DWORD *)(v6 + 20);
    v18 = *(WTF **)(v6 + 8);
    if (v17)
    {
      v19 = 0;
      v20 = 584 * v17;
      do
      {
        v21 = (char *)v18 + v19;
        v22 = *(WTF **)((char *)v18 + v19 + 296);
        if ((WTF *)((char *)v18 + v19 + 312) != v22 && v22 != 0)
        {
          *((_QWORD *)v21 + 37) = 0;
          *((_DWORD *)v21 + 76) = 0;
          v27 = v20;
          v30 = v18;
          v26 = (char *)v18 + v19;
          WTF::fastFree(v22, v16);
          v21 = v26;
          v20 = v27;
          v18 = v30;
        }
        v24 = (WTF *)*((_QWORD *)v21 + 1);
        if (v21 + 24 != (char *)v24 && v24 != 0)
        {
          *((_QWORD *)v21 + 1) = 0;
          *(_DWORD *)((char *)v18 + v19 + 16) = 0;
          v28 = v20;
          v31 = v18;
          WTF::fastFree(v24, v16);
          v20 = v28;
          v18 = v31;
        }
        v19 += 584;
      }
      while (v20 != v19);
      v18 = *(WTF **)(v6 + 8);
    }
    if (v18 != (WTF *)(v6 + 24))
    {
      if (v18)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        WTF::fastFree(v18, v16);
      }
      *(_QWORD *)(v6 + 8) = v6 + 24;
    }
    WTF::VectorMover<false,WebCore::ComposedTreeIterator::Context>::move((WTF *)v33, (WTF *)&v40, v6 + 24);
    result = (uint64_t)v33;
    *(_QWORD *)(v6 + 16) = 0x100000008;
  }
  return result;
}

WTF::StringImpl *WebCore::composedTreeAsText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  WTF *v10;
  char *v11;
  WTF *v12;
  uint64_t *v13;
  int v14;
  _QWORD *v15;
  _DWORD *v16;
  WTF *v17;
  int v18;
  char *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  char *v24;
  uint64_t v25;
  WTF *v26;
  WTF::TextStream *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  __int16 v31;
  WebCore::ShadowRoot *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  WTF *v36;
  WTF *v38;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  WTF *v45;
  WTF *v47;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _BYTE v79[8];
  WTF *v80;
  uint64_t v81;
  _BYTE v82[4672];
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  int v85;
  char v86;
  int v87;
  __int16 v88;
  int v89;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = (int)v3;
  v5 = v2;
  v83 = 0;
  v84 = 0;
  v86 = 1;
  v85 = 0;
  v87 = 0;
  v88 = 256;
  v89 = 0;
  v79[0] = (*(_QWORD *)(v2 + 16) & 0x10000000000000) != 0;
  v79[1] = 0;
  v80 = (WTF *)v82;
  v81 = 8;
  v6 = *(_WORD *)(v2 + 28);
  if ((v6 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
  {
    v56 = **(_QWORD **)(v2 + 40);
    if (v56)
    {
      if ((*(_WORD *)(v56 + 28) & 0x80) != 0)
      {
        v57 = *(_DWORD *)(v56 + 24);
        *(_DWORD *)(v56 + 24) = v57 + 2;
        v58 = *(_QWORD *)(v56 + 224);
        if (v58)
        {
          v59 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 24))(v58, v5, v56);
          v57 = *(_DWORD *)(v56 + 24) - 2;
        }
        else
        {
          v59 = 0;
        }
        if (v57)
        {
          *(_DWORD *)(v56 + 24) = v57;
        }
        else if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v56, v3);
        }
        if (v59)
        {
          if (!v59[3])
          {
            __break(0xC471u);
LABEL_121:
            JUMPOUT(0x195955A38);
          }
          WebCore::ComposedTreeIterator::initializeContextStack((WebCore::ComposedTreeIterator *)v79, (WebCore::ContainerNode *)v5, *(WebCore::Node **)(**(_QWORD **)v59 + 8));
          goto LABEL_19;
        }
        v6 = *(_WORD *)(v5 + 28);
      }
    }
  }
  if ((v6 & 8) != 0
    && (*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v53 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
  {
    if ((*(_WORD *)(v53 + 28) & 4) != 0 && (v54 = *(_QWORD *)(v53 + 80)) != 0)
    {
      while ((*(_WORD *)(v54 + 28) & 0xA) == 0)
      {
        v54 = *(_QWORD *)(v54 + 56);
        if (!v54)
          goto LABEL_85;
      }
      v62 = v54;
      v63 = (WTF *)&v65;
      v65 = 0;
      v64 = 0x100000010;
      LODWORD(v66) = 0;
      v69 = 1;
    }
    else
    {
LABEL_85:
      v62 = 0;
      v63 = (WTF *)&v65;
      v64 = 16;
      v69 = 0;
      v54 = v5;
    }
    WebCore::ComposedTreeIterator::initializeContextStack((WebCore::ComposedTreeIterator *)v79, (WebCore::ContainerNode *)v5, (WebCore::Node *)v54);
    v21 = v63;
    if (&v65 == (uint64_t *)v63 || v63 == 0)
      goto LABEL_19;
  }
  else
  {
    if ((v6 & 4) != 0 && (v7 = *(_QWORD *)(v5 + 80)) != 0)
    {
      while ((*(_WORD *)(v7 + 28) & 0xA) == 0)
      {
        v7 = *(_QWORD *)(v7 + 56);
        if (!v7)
          goto LABEL_9;
      }
      v62 = v7;
      v63 = (WTF *)&v65;
      v65 = 0;
      v64 = 0x100000010;
      v8 = 1;
      LODWORD(v66) = 0;
      v69 = 1;
    }
    else
    {
LABEL_9:
      v8 = 0;
      v7 = 0;
      v62 = 0;
      v63 = (WTF *)&v65;
      v64 = 16;
      v69 = 0;
    }
    v70 = 0;
    v71 = (WTF *)v73;
    v72 = 16;
    v75 = 0;
    v76 = -1;
    v9 = HIDWORD(v81);
    if (HIDWORD(v81) == (_DWORD)v81)
    {
      WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>((uint64_t)&v80, (unint64_t)&v62);
    }
    else
    {
      v10 = v80;
      v11 = (char *)v80 + 584 * HIDWORD(v81);
      *(_QWORD *)v11 = v7;
      *((_QWORD *)v11 + 1) = v11 + 24;
      *((_QWORD *)v11 + 2) = 16;
      v12 = v63;
      v13 = &v65;
      if (v63 == (WTF *)&v65)
      {
        memcpy(v11 + 24, &v65, 16 * HIDWORD(v64));
        v8 = v69;
      }
      else
      {
        v63 = (WTF *)&v65;
        *((_QWORD *)v11 + 1) = v12;
        v60 = v64;
        LODWORD(v64) = 16;
        *((_DWORD *)v11 + 4) = v60;
      }
      v14 = HIDWORD(v64);
      HIDWORD(v64) = 0;
      *((_DWORD *)v11 + 5) = v14;
      *((_DWORD *)v11 + 70) = v8;
      v15 = (_QWORD *)((char *)v10 + 584 * v9);
      v15[36] = v70;
      v15[37] = v15 + 39;
      v16 = (_DWORD *)v15 + 77;
      v15[38] = 16;
      v17 = v71;
      if (v71 == (WTF *)v73)
      {
        memcpy(v15 + 39, v73, 16 * HIDWORD(v72));
      }
      else
      {
        v71 = (WTF *)v73;
        v15[37] = v17;
        v61 = v72;
        LODWORD(v72) = 16;
        *((_DWORD *)v15 + 76) = v61;
      }
      v18 = HIDWORD(v72);
      HIDWORD(v72) = 0;
      *v16 = v18;
      v19 = (char *)v10 + 584 * v9;
      *((_DWORD *)v19 + 142) = v75;
      *((_QWORD *)v19 + 72) = v76;
      ++HIDWORD(v81);
    }
    v20 = v71;
    if (v73 != (_QWORD *)v71 && v71)
    {
      v71 = 0;
      LODWORD(v72) = 0;
      WTF::fastFree(v20, v13);
    }
    v21 = v63;
    if (&v65 == (uint64_t *)v63 || !v63)
      goto LABEL_19;
  }
  v63 = 0;
  LODWORD(v64) = 0;
  WTF::fastFree(v21, v13);
LABEL_19:
  LOWORD(v62) = 0;
  v63 = (WTF *)&v65;
  v65 = 0;
  v66 = &v68;
  v67 = 16;
  LODWORD(v72) = 0;
  v73[0] = 0;
  v73[1] = &v74;
  v73[2] = 16;
  v77 = 0;
  v78 = -1;
  v64 = 0x100000008;
  v22 = HIDWORD(v81);
  if (!HIDWORD(v81))
  {
LABEL_117:
    __break(0xC471u);
    JUMPOUT(0x195955B80);
  }
  v23 = v80;
  v24 = (char *)v80 + 584 * HIDWORD(v81) - 584;
  v25 = 1;
  while (1)
  {
    v26 = v63;
    if (*(_QWORD *)v24 == *((_QWORD *)v63 + 73 * v25 - 73)
      || !*((_DWORD *)v24 + 70) && !*((_DWORD *)v63 + 146 * v25 - 76))
    {
      break;
    }
    LODWORD(v27) = 0;
    v28 = 584 * v22;
    v29 = (_DWORD *)((char *)v23 + 280);
    do
    {
      v27 = (WTF::TextStream *)(*v29 + (_DWORD)v27);
      v29 += 146;
      v28 -= 584;
    }
    while (v28);
    WTF::writeIndent((WTF *)&v83, v27);
    if (!HIDWORD(v81))
    {
      __break(0xC471u);
      JUMPOUT(0x195955B90);
    }
    v30 = *((_QWORD *)v80 + 73 * HIDWORD(v81) - 73);
    v31 = *(_WORD *)(v30 + 28);
    if ((v31 & 2) != 0)
    {
      WTF::TextStream::operator<<();
      if (v4 != 1)
        goto LABEL_35;
      WTF::TextStream::operator<<();
      if (!HIDWORD(v81))
      {
        __break(0xC471u);
        JUMPOUT(0x195955B98);
      }
      goto LABEL_34;
    }
    if ((v31 & 8) == 0)
    {
      __break(0xC471u);
      goto LABEL_121;
    }
    WTF::TextStream::operator<<();
    if ((*(_QWORD *)(v30 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && *(_QWORD *)((*(_QWORD *)(v30 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
    {
      WTF::TextStream::operator<<();
    }
    if (v4 == 1)
    {
      WTF::TextStream::operator<<();
      if (!HIDWORD(v81))
      {
        __break(0xC471u);
        JUMPOUT(0x195955BA0);
      }
LABEL_34:
      WTF::TextStream::operator<<();
    }
LABEL_35:
    WTF::TextStream::operator<<();
    WebCore::ComposedTreeIterator::operator++((uint64_t)v79, v32);
    v22 = HIDWORD(v81);
    if (!HIDWORD(v81))
      goto LABEL_117;
    v25 = HIDWORD(v64);
    v23 = v80;
    v24 = (char *)v80 + 584 * HIDWORD(v81) - 584;
    if (!HIDWORD(v64))
    {
      __break(0xC471u);
      JUMPOUT(0x195955B88);
    }
  }
  v33 = 0;
  v34 = 584 * v25;
  do
  {
    v35 = (char *)v26 + v33;
    v36 = *(WTF **)((char *)v26 + v33 + 296);
    if ((WTF *)((char *)v26 + v33 + 312) != v36 && v36 != 0)
    {
      *((_QWORD *)v35 + 37) = 0;
      *((_DWORD *)v35 + 76) = 0;
      WTF::fastFree(v36, v13);
    }
    v38 = (WTF *)*((_QWORD *)v35 + 1);
    if (v35 + 24 != (char *)v38 && v38 != 0)
    {
      *((_QWORD *)v35 + 1) = 0;
      *(_DWORD *)((char *)v26 + v33 + 16) = 0;
      WTF::fastFree(v38, v13);
    }
    v33 += 584;
  }
  while (v34 != v33);
  v40 = v63;
  if (&v65 != (uint64_t *)v63 && v63)
  {
    v63 = 0;
    LODWORD(v64) = 0;
    WTF::fastFree(v40, v13);
  }
  v41 = v80;
  if (HIDWORD(v81))
  {
    v42 = 0;
    v43 = 584 * HIDWORD(v81);
    do
    {
      v44 = (char *)v41 + v42;
      v45 = *(WTF **)((char *)v41 + v42 + 296);
      if ((WTF *)((char *)v41 + v42 + 312) != v45 && v45 != 0)
      {
        *((_QWORD *)v44 + 37) = 0;
        *((_DWORD *)v44 + 76) = 0;
        WTF::fastFree(v45, v13);
      }
      v47 = (WTF *)*((_QWORD *)v44 + 1);
      if (v44 + 24 != (char *)v47 && v47 != 0)
      {
        *((_QWORD *)v44 + 1) = 0;
        *(_DWORD *)((char *)v41 + v42 + 16) = 0;
        WTF::fastFree(v47, v13);
      }
      v42 += 584;
    }
    while (v43 != v42);
    v41 = v80;
  }
  if (v82 != (_BYTE *)v41 && v41 != 0)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    WTF::fastFree(v41, v13);
  }
  WTF::TextStream::release((WTF::TextStream *)&v83);
  v51 = v84;
  v84 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v50);
    else
      *(_DWORD *)v51 -= 2;
  }
  result = v83;
  v83 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v50);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CompositionEvent::~CompositionEvent(WebCore::CompositionEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::UIEvent::~UIEvent(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::UIEvent::~UIEvent(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::CompositionEvent::isCompositionEvent(WebCore::CompositionEvent *this)
{
  return 1;
}

uint64_t *WebCore::ConstantPropertyMap::values(WebCore::ConstantPropertyMap *this, WTF::StringImpl *a2)
{
  uint64_t *result;

  if (*((_BYTE *)this + 8))
    return (uint64_t *)this;
  result = WebCore::ConstantPropertyMap::buildValues(this, a2);
  if (*((_BYTE *)this + 8))
    return (uint64_t *)this;
  __break(1u);
  return result;
}

uint64_t *WebCore::ConstantPropertyMap::buildValues(WebCore::ConstantPropertyMap *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;

  if (*((_BYTE *)this + 8))
  {
    v3 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = v3;
        do
        {
          v6 = *(WTF::StringImpl **)v5;
          if (*(_QWORD *)v5 != -1)
          {
            v7 = *(_DWORD **)(v5 + 8);
            *(_QWORD *)(v5 + 8) = 0;
            if (v7)
            {
              if (*v7 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
                v6 = *(WTF::StringImpl **)v5;
              }
              else
              {
                *v7 -= 2;
              }
            }
            *(_QWORD *)v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 16;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_BYTE *)this + 8) = 1;
  }
  WebCore::ConstantPropertyMap::updateConstantsForSafeAreaInsets(this);
  return WebCore::ConstantPropertyMap::updateConstantsForFullscreen(this);
}

uint64_t *WebCore::ConstantPropertyMap::nameForProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if ((_MergedGlobals_168 & 1) == 0)
  {
    v3 = a2;
    WTF::AtomStringImpl::add();
    a2 = v3;
    qword_1ECE83138 = v12;
    _MergedGlobals_168 = 1;
  }
  if ((byte_1ECE83129 & 1) == 0)
  {
    v4 = a2;
    WTF::AtomStringImpl::add();
    a2 = v4;
    unk_1ECE83140 = v12;
    byte_1ECE83129 = 1;
  }
  if ((byte_1ECE8312A & 1) == 0)
  {
    v5 = a2;
    WTF::AtomStringImpl::add();
    a2 = v5;
    unk_1ECE83148 = v12;
    byte_1ECE8312A = 1;
  }
  if ((byte_1ECE8312B & 1) == 0)
  {
    v6 = a2;
    WTF::AtomStringImpl::add();
    a2 = v6;
    unk_1ECE83150 = v12;
    byte_1ECE8312B = 1;
  }
  if ((byte_1ECE8312C & 1) == 0)
  {
    v7 = a2;
    WTF::AtomStringImpl::add();
    a2 = v7;
    unk_1ECE83158 = v12;
    byte_1ECE8312C = 1;
  }
  if ((byte_1ECE8312D & 1) == 0)
  {
    v8 = a2;
    WTF::AtomStringImpl::add();
    a2 = v8;
    unk_1ECE83160 = v12;
    byte_1ECE8312D = 1;
  }
  if ((byte_1ECE8312E & 1) == 0)
  {
    v9 = a2;
    WTF::AtomStringImpl::add();
    a2 = v9;
    unk_1ECE83168 = v12;
    byte_1ECE8312E = 1;
  }
  if ((byte_1ECE8312F & 1) == 0)
  {
    v10 = a2;
    WTF::AtomStringImpl::add();
    a2 = v10;
    unk_1ECE83170 = v12;
    byte_1ECE8312F = 1;
  }
  if ((byte_1ECE83130 & 1) == 0)
  {
    v11 = a2;
    WTF::AtomStringImpl::add();
    a2 = v11;
    qword_1ECE83178 = v12;
    byte_1ECE83130 = 1;
  }
  if (a2 > 8)
    return (uint64_t *)MEMORY[0x1E0CBF2F8];
  else
    return (&off_1E33A17A0)[a2];
}

uint64_t *WebCore::ConstantPropertyMap::setValueForProperty(WebCore::ConstantPropertyMap *this, WTF::StringImpl *a2, uint64_t *a3)
{
  unsigned int v4;
  WebCore::ConstantPropertyMap *v5;
  uint64_t *result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v4 = a2;
  v5 = this;
  if (!*((_BYTE *)this + 8))
    this = (WebCore::ConstantPropertyMap *)WebCore::ConstantPropertyMap::buildValues(this, a2);
  result = WebCore::ConstantPropertyMap::nameForProperty((uint64_t)this, v4);
  if (*((_BYTE *)v5 + 8))
  {
    v7 = (WTF::StringImpl *)result;
    v8 = WTF::fastCompactMalloc((WTF *)0x60);
    v9 = *a3;
    *a3 = 0;
    *(_DWORD *)v8 = 2;
    v10 = *(_BYTE *)(v8 + 6);
    *(_WORD *)(v8 + 4) = -6144;
    *(_BYTE *)(v8 + 6) = v10 & 0xFC;
    v11 = *(_DWORD **)v7;
    if (*(_QWORD *)v7)
      *v11 += 2;
    *(_QWORD *)(v8 + 8) = v11;
    *(_QWORD *)(v8 + 24) = v9;
    *(_DWORD *)(v8 + 72) = 2;
    *(_QWORD *)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 88) = 0;
    v14 = (WTF::StringImpl *)v8;
    WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)v5, v7, &v14, (uint64_t)&v13);
    result = (uint64_t *)v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *WebCore::ConstantPropertyMap::updateConstantsForSafeAreaInsets(WebCore::ConstantPropertyMap *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  char v7;
  float v8;
  float v9;
  float v10;
  double v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *result;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  char v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  char v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  char v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  WTF::StringImpl *v67;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  v3 = 0.0;
  if (v2 && (v4 = *(_QWORD *)(v2 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 24)) != 0)
  {
    v6 = *(float **)(v5 + 8);
    if (v6)
    {
      v7 = 0;
      ++*(_DWORD *)v6;
      v3 = v6[102];
      v8 = v6[103];
      v9 = v6[104];
      v10 = v6[105];
      goto LABEL_8;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 1;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
LABEL_8:
  v11 = v3;
  v12 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
  WTF::operator==("px", 0x100000002, "px", 0x100000002);
  v13 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v13 = ((v12 & 0x7F) << 11) | 0x400109;
  *(_DWORD *)(v13 + 4) = 2;
  *(_QWORD *)(v13 + 8) = "px";
  *(double *)(v13 + 16) = v11;
  v65 = (char *)v13;
  v66 = v13 + 24;
  v14 = WebCore::strictCSSParserContext((WebCore *)v13);
  v15 = WTF::fastMalloc((WTF *)0x60);
  WebCore::CSSVariableData::CSSVariableData(v15, &v65, (const WebCore::CSSParserContext *)v14);
  v17 = WTF::fastFree((WTF *)v13, v16);
  if (!*((_BYTE *)this + 8))
    v17 = WebCore::ConstantPropertyMap::buildValues(this);
  result = WebCore::ConstantPropertyMap::nameForProperty(v17, 0);
  if (!*((_BYTE *)this + 8))
    goto LABEL_49;
  v19 = (WTF::StringImpl *)result;
  v20 = WTF::fastCompactMalloc((WTF *)0x60);
  v64 = 0;
  *(_DWORD *)v20 = 2;
  v21 = *(_BYTE *)(v20 + 6);
  *(_WORD *)(v20 + 4) = -6144;
  *(_BYTE *)(v20 + 6) = v21 & 0xFC;
  v22 = *(_DWORD **)v19;
  if (*(_QWORD *)v19)
    *v22 += 2;
  *(_QWORD *)(v20 + 8) = v22;
  *(_QWORD *)(v20 + 24) = v15;
  *(_DWORD *)(v20 + 72) = 2;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  v67 = (WTF::StringImpl *)v20;
  WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v19, &v67, (uint64_t)&v65);
  v24 = v67;
  v67 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v64, v23);
  v25 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
  WTF::operator==("px", 0x100000002, "px", 0x100000002);
  v26 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v26 = ((v25 & 0x7F) << 11) | 0x400109;
  *(_DWORD *)(v26 + 4) = 2;
  *(_QWORD *)(v26 + 8) = "px";
  *(double *)(v26 + 16) = v8;
  v65 = (char *)v26;
  v66 = v26 + 24;
  v27 = WebCore::strictCSSParserContext((WebCore *)v26);
  v28 = WTF::fastMalloc((WTF *)0x60);
  WebCore::CSSVariableData::CSSVariableData(v28, &v65, (const WebCore::CSSParserContext *)v27);
  v30 = WTF::fastFree((WTF *)v26, v29);
  if (!*((_BYTE *)this + 8))
    v30 = WebCore::ConstantPropertyMap::buildValues(this);
  result = WebCore::ConstantPropertyMap::nameForProperty(v30, 1u);
  if (!*((_BYTE *)this + 8))
    goto LABEL_49;
  v31 = (WTF::StringImpl *)result;
  v32 = WTF::fastCompactMalloc((WTF *)0x60);
  v64 = 0;
  *(_DWORD *)v32 = 2;
  v33 = *(_BYTE *)(v32 + 6);
  *(_WORD *)(v32 + 4) = -6144;
  *(_BYTE *)(v32 + 6) = v33 & 0xFC;
  v34 = *(_DWORD **)v31;
  if (*(_QWORD *)v31)
    *v34 += 2;
  *(_QWORD *)(v32 + 8) = v34;
  *(_QWORD *)(v32 + 24) = v28;
  *(_DWORD *)(v32 + 72) = 2;
  *(_QWORD *)(v32 + 80) = 0;
  *(_QWORD *)(v32 + 88) = 0;
  v67 = (WTF::StringImpl *)v32;
  WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v31, &v67, (uint64_t)&v65);
  v36 = v67;
  v67 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v64, v35);
  v37 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
  WTF::operator==("px", 0x100000002, "px", 0x100000002);
  v38 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v38 = ((v37 & 0x7F) << 11) | 0x400109;
  *(_DWORD *)(v38 + 4) = 2;
  *(_QWORD *)(v38 + 8) = "px";
  *(double *)(v38 + 16) = v9;
  v65 = (char *)v38;
  v66 = v38 + 24;
  v39 = WebCore::strictCSSParserContext((WebCore *)v38);
  v40 = WTF::fastMalloc((WTF *)0x60);
  WebCore::CSSVariableData::CSSVariableData(v40, &v65, (const WebCore::CSSParserContext *)v39);
  v42 = WTF::fastFree((WTF *)v38, v41);
  if (!*((_BYTE *)this + 8))
    v42 = WebCore::ConstantPropertyMap::buildValues(this);
  result = WebCore::ConstantPropertyMap::nameForProperty(v42, 2u);
  if (!*((_BYTE *)this + 8))
    goto LABEL_49;
  v43 = (WTF::StringImpl *)result;
  v44 = WTF::fastCompactMalloc((WTF *)0x60);
  v64 = 0;
  *(_DWORD *)v44 = 2;
  v45 = *(_BYTE *)(v44 + 6);
  *(_WORD *)(v44 + 4) = -6144;
  *(_BYTE *)(v44 + 6) = v45 & 0xFC;
  v46 = *(_DWORD **)v43;
  if (*(_QWORD *)v43)
    *v46 += 2;
  *(_QWORD *)(v44 + 8) = v46;
  *(_QWORD *)(v44 + 24) = v40;
  *(_DWORD *)(v44 + 72) = 2;
  *(_QWORD *)(v44 + 80) = 0;
  *(_QWORD *)(v44 + 88) = 0;
  v67 = (WTF::StringImpl *)v44;
  WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v43, &v67, (uint64_t)&v65);
  v48 = v67;
  v67 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v64, v47);
  v49 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
  WTF::operator==("px", 0x100000002, "px", 0x100000002);
  v50 = ((v49 & 0x7F) << 11) | 0x400109;
  v51 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v51 = v50;
  *(_DWORD *)(v51 + 4) = 2;
  *(_QWORD *)(v51 + 8) = "px";
  *(double *)(v51 + 16) = v10;
  v65 = (char *)v51;
  v66 = v51 + 24;
  v52 = WebCore::strictCSSParserContext((WebCore *)v51);
  v53 = WTF::fastMalloc((WTF *)0x60);
  WebCore::CSSVariableData::CSSVariableData(v53, &v65, (const WebCore::CSSParserContext *)v52);
  v55 = WTF::fastFree((WTF *)v51, v54);
  if (!*((_BYTE *)this + 8))
    v55 = WebCore::ConstantPropertyMap::buildValues(this);
  result = WebCore::ConstantPropertyMap::nameForProperty(v55, 3u);
  if (*((_BYTE *)this + 8))
  {
    v56 = (WTF::StringImpl *)result;
    v57 = WTF::fastCompactMalloc((WTF *)0x60);
    v64 = 0;
    *(_DWORD *)v57 = 2;
    v58 = *(_BYTE *)(v57 + 6);
    *(_WORD *)(v57 + 4) = -6144;
    *(_BYTE *)(v57 + 6) = v58 & 0xFC;
    v59 = *(_DWORD **)v56;
    if (*(_QWORD *)v56)
      *v59 += 2;
    *(_QWORD *)(v57 + 8) = v59;
    *(_QWORD *)(v57 + 24) = v53;
    *(_DWORD *)(v57 + 72) = 2;
    *(_QWORD *)(v57 + 80) = 0;
    *(_QWORD *)(v57 + 88) = 0;
    v67 = (WTF::StringImpl *)v57;
    WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v56, &v67, (uint64_t)&v65);
    v61 = v67;
    v67 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, v60);
      else
        *(_DWORD *)v61 -= 2;
    }
    result = WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v64, v60);
    if ((v7 & 1) == 0)
    {
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::Page::~Page((WebCore::Page *)v6);
        return (uint64_t *)WTF::fastFree(v62, v63);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  else
  {
LABEL_49:
    __break(1u);
  }
  return result;
}

uint64_t *WebCore::ConstantPropertyMap::updateConstantsForFullscreen(WebCore::ConstantPropertyMap *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  float v8;
  float v9;
  float v10;
  int v11;
  double v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  char v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  char v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  char v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  char v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t *result;
  WTF *v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  WTF::StringImpl *v89;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  v3 = 0.0;
  if (!v2 || (v4 = *(_QWORD *)(v2 + 8)) == 0 || (v5 = *(_QWORD *)(v4 + 24)) == 0)
  {
    v11 = 0;
    v6 = 0;
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_61;
  v7 = 0;
  ++*(_DWORD *)v6;
  v3 = *(float *)(v6 + 424);
  v8 = *(float *)(v6 + 428);
  v9 = *(float *)(v6 + 432);
  v10 = *(float *)(v6 + 436);
  v11 = 1;
  while (1)
  {
    v12 = v3;
    v13 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
    WTF::operator==("px", 0x100000002, "px", 0x100000002);
    v14 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v14 = ((v13 & 0x7F) << 11) | 0x400109;
    *(_DWORD *)(v14 + 4) = 2;
    *(_QWORD *)(v14 + 8) = "px";
    *(double *)(v14 + 16) = v12;
    v87 = (char *)v14;
    v88 = v14 + 24;
    v15 = WebCore::strictCSSParserContext((WebCore *)v14);
    v16 = WTF::fastMalloc((WTF *)0x60);
    WebCore::CSSVariableData::CSSVariableData(v16, &v87, (const WebCore::CSSParserContext *)v15);
    v18 = WTF::fastFree((WTF *)v14, v17);
    if (!*((_BYTE *)this + 8))
      v18 = WebCore::ConstantPropertyMap::buildValues(this);
    v19 = WebCore::ConstantPropertyMap::nameForProperty(v18, 4u);
    if (*((_BYTE *)this + 8))
    {
      v20 = (WTF::StringImpl *)v19;
      v21 = WTF::fastCompactMalloc((WTF *)0x60);
      v86 = 0;
      *(_DWORD *)v21 = 2;
      v22 = *(_BYTE *)(v21 + 6);
      *(_WORD *)(v21 + 4) = -6144;
      *(_BYTE *)(v21 + 6) = v22 & 0xFC;
      v23 = *(_DWORD **)v20;
      if (*(_QWORD *)v20)
        *v23 += 2;
      *(_QWORD *)(v21 + 8) = v23;
      *(_QWORD *)(v21 + 24) = v16;
      *(_DWORD *)(v21 + 72) = 2;
      *(_QWORD *)(v21 + 80) = 0;
      *(_QWORD *)(v21 + 88) = 0;
      v89 = (WTF::StringImpl *)v21;
      WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v20, &v89, (uint64_t)&v87);
      v25 = v89;
      v89 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v86, v24);
      v26 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
      WTF::operator==("px", 0x100000002, "px", 0x100000002);
      v27 = ((v26 & 0x7F) << 11) | 0x400109;
      v28 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v28 = v27;
      *(_DWORD *)(v28 + 4) = 2;
      *(_QWORD *)(v28 + 8) = "px";
      *(double *)(v28 + 16) = v8;
      v87 = (char *)v28;
      v88 = v28 + 24;
      v29 = WebCore::strictCSSParserContext((WebCore *)v28);
      v30 = WTF::fastMalloc((WTF *)0x60);
      v86 = WebCore::CSSVariableData::CSSVariableData(v30, &v87, (const WebCore::CSSParserContext *)v29);
      v32 = WTF::fastFree((WTF *)v28, v31);
      if (!*((_BYTE *)this + 8))
        v32 = WebCore::ConstantPropertyMap::buildValues(this);
      v33 = WebCore::ConstantPropertyMap::nameForProperty(v32, 5u);
      if (*((_BYTE *)this + 8))
      {
        v34 = (WTF::StringImpl *)v33;
        v35 = WTF::fastCompactMalloc((WTF *)0x60);
        v36 = v86;
        v86 = 0;
        *(_DWORD *)v35 = 2;
        v37 = *(_BYTE *)(v35 + 6);
        *(_WORD *)(v35 + 4) = -6144;
        *(_BYTE *)(v35 + 6) = v37 & 0xFC;
        v38 = *(_DWORD **)v34;
        if (*(_QWORD *)v34)
          *v38 += 2;
        *(_QWORD *)(v35 + 8) = v38;
        *(_QWORD *)(v35 + 24) = v36;
        *(_DWORD *)(v35 + 72) = 2;
        *(_QWORD *)(v35 + 80) = 0;
        *(_QWORD *)(v35 + 88) = 0;
        v89 = (WTF::StringImpl *)v35;
        WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v34, &v89, (uint64_t)&v87);
        v40 = v89;
        v89 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v39);
          else
            *(_DWORD *)v40 -= 2;
        }
        WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v86, v39);
        v41 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
        WTF::operator==("px", 0x100000002, "px", 0x100000002);
        v42 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v42 = ((v41 & 0x7F) << 11) | 0x400109;
        *(_DWORD *)(v42 + 4) = 2;
        *(_QWORD *)(v42 + 8) = "px";
        *(double *)(v42 + 16) = v9;
        v87 = (char *)v42;
        v88 = v42 + 24;
        v43 = WebCore::strictCSSParserContext((WebCore *)v42);
        v44 = WTF::fastMalloc((WTF *)0x60);
        WebCore::CSSVariableData::CSSVariableData(v44, &v87, (const WebCore::CSSParserContext *)v43);
        v46 = WTF::fastFree((WTF *)v42, v45);
        if (!*((_BYTE *)this + 8))
          v46 = WebCore::ConstantPropertyMap::buildValues(this);
        v47 = WebCore::ConstantPropertyMap::nameForProperty(v46, 6u);
        if (*((_BYTE *)this + 8))
        {
          v48 = (WTF::StringImpl *)v47;
          v49 = WTF::fastCompactMalloc((WTF *)0x60);
          v86 = 0;
          *(_DWORD *)v49 = 2;
          v50 = *(_BYTE *)(v49 + 6);
          *(_WORD *)(v49 + 4) = -6144;
          *(_BYTE *)(v49 + 6) = v50 & 0xFC;
          v51 = *(_DWORD **)v48;
          if (*(_QWORD *)v48)
            *v51 += 2;
          *(_QWORD *)(v49 + 8) = v51;
          *(_QWORD *)(v49 + 24) = v44;
          *(_DWORD *)(v49 + 72) = 2;
          *(_QWORD *)(v49 + 80) = 0;
          *(_QWORD *)(v49 + 88) = 0;
          v89 = (WTF::StringImpl *)v49;
          WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v48, &v89, (uint64_t)&v87);
          v53 = v89;
          v89 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, v52);
            else
              *(_DWORD *)v53 -= 2;
          }
          WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v86, v52);
          v54 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("px", 2);
          WTF::operator==("px", 0x100000002, "px", 0x100000002);
          v55 = ((v54 & 0x7F) << 11) | 0x400109;
          v56 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v56 = v55;
          *(_DWORD *)(v56 + 4) = 2;
          *(_QWORD *)(v56 + 8) = "px";
          *(double *)(v56 + 16) = v10;
          v87 = (char *)v56;
          v88 = v56 + 24;
          v57 = WebCore::strictCSSParserContext((WebCore *)v56);
          v58 = WTF::fastMalloc((WTF *)0x60);
          WebCore::CSSVariableData::CSSVariableData(v58, &v87, (const WebCore::CSSParserContext *)v57);
          v60 = WTF::fastFree((WTF *)v56, v59);
          if (!*((_BYTE *)this + 8))
            v60 = WebCore::ConstantPropertyMap::buildValues(this);
          v61 = WebCore::ConstantPropertyMap::nameForProperty(v60, 7u);
          if (*((_BYTE *)this + 8))
          {
            v62 = (WTF::StringImpl *)v61;
            v63 = WTF::fastCompactMalloc((WTF *)0x60);
            v86 = 0;
            *(_DWORD *)v63 = 2;
            v64 = *(_BYTE *)(v63 + 6);
            *(_WORD *)(v63 + 4) = -6144;
            *(_BYTE *)(v63 + 6) = v64 & 0xFC;
            v65 = *(_DWORD **)v62;
            if (*(_QWORD *)v62)
              *v65 += 2;
            *(_QWORD *)(v63 + 8) = v65;
            *(_QWORD *)(v63 + 24) = v58;
            *(_DWORD *)(v63 + 72) = 2;
            *(_QWORD *)(v63 + 80) = 0;
            *(_QWORD *)(v63 + 88) = 0;
            v89 = (WTF::StringImpl *)v63;
            WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v62, &v89, (uint64_t)&v87);
            v67 = v89;
            v89 = 0;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v67, v66);
              else
                *(_DWORD *)v67 -= 2;
            }
            WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v86, v66);
            v68 = 0;
            if (v11)
              v68 = *(_QWORD *)(v6 + 440);
            v69 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("s", 1);
            WTF::operator==("s", 0x100000001, "s", 0x100000001);
            v70 = ((v69 & 0x7F) << 11) | 0x400109;
            v71 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)v71 = v70;
            *(_DWORD *)(v71 + 4) = 1;
            *(_QWORD *)(v71 + 8) = "s";
            *(_QWORD *)(v71 + 16) = v68;
            v87 = (char *)v71;
            v88 = v71 + 24;
            v72 = WebCore::strictCSSParserContext((WebCore *)v71);
            v73 = WTF::fastMalloc((WTF *)0x60);
            WebCore::CSSVariableData::CSSVariableData(v73, &v87, (const WebCore::CSSParserContext *)v72);
            v75 = WTF::fastFree((WTF *)v71, v74);
            if (!*((_BYTE *)this + 8))
              v75 = WebCore::ConstantPropertyMap::buildValues(this);
            v76 = WebCore::ConstantPropertyMap::nameForProperty(v75, 8u);
            if (*((_BYTE *)this + 8))
              break;
          }
        }
      }
    }
    __break(1u);
LABEL_61:
    v11 = 0;
LABEL_7:
    v7 = 1;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
  }
  v77 = (WTF::StringImpl *)v76;
  v78 = WTF::fastCompactMalloc((WTF *)0x60);
  v86 = 0;
  *(_DWORD *)v78 = 2;
  v79 = *(_BYTE *)(v78 + 6);
  *(_WORD *)(v78 + 4) = -6144;
  *(_BYTE *)(v78 + 6) = v79 & 0xFC;
  v80 = *(_DWORD **)v77;
  if (*(_QWORD *)v77)
    *v80 += 2;
  *(_QWORD *)(v78 + 8) = v80;
  *(_QWORD *)(v78 + 24) = v73;
  *(_DWORD *)(v78 + 72) = 2;
  *(_QWORD *)(v78 + 80) = 0;
  *(_QWORD *)(v78 + 88) = 0;
  v89 = (WTF::StringImpl *)v78;
  WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>((uint64_t *)this, v77, &v89, (uint64_t)&v87);
  v82 = v89;
  v89 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, v81);
    else
      *(_DWORD *)v82 -= 2;
  }
  result = WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v86, v81);
  if ((v7 & 1) == 0)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::Page::~Page((WebCore::Page *)v6);
      return (uint64_t *)WTF::fastFree(v84, v85);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

unsigned int *WebCore::ConstantPropertyMap::setFullscreenAutoHideDuration(WebCore::ConstantPropertyMap *a1, double a2)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v12;
  unsigned int *result;
  void *v14;
  uint64_t v15;
  char *v16[2];

  v4 = WebCore::cssPrimitiveValueUnitFromTrie<unsigned char>("s", 1);
  WTF::operator==("s", 0x100000001, "s", 0x100000001);
  v5 = ((v4 & 0x7F) << 11) | 0x400109;
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = v5;
  *(_DWORD *)(v6 + 4) = 1;
  *(_QWORD *)(v6 + 8) = "s";
  *(double *)(v6 + 16) = a2;
  v16[0] = (char *)v6;
  v16[1] = (char *)(v6 + 24);
  v7 = WebCore::strictCSSParserContext((WebCore *)v6);
  v8 = WTF::fastMalloc((WTF *)0x60);
  v15 = WebCore::CSSVariableData::CSSVariableData(v8, v16, (const WebCore::CSSParserContext *)v7);
  WTF::fastFree((WTF *)v6, v9);
  WebCore::ConstantPropertyMap::setValueForProperty(a1, (WTF::StringImpl *)8, &v15);
  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v15, v10);
  v11 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  *(_DWORD *)(v11 + 24) += 2;
  result = (unsigned int *)WebCore::Document::invalidateMatchedPropertiesCacheAndForceStyleRecalc((WebCore::Document *)v11, v12);
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v11, v14);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  return result;
}

WebCore::NodeTraversal *WebCore::ContainerNode::removeSelfOrChildNodesForInsertion(WebCore::NodeTraversal *result, uint64_t a2, _DWORD *a3)
{
  WebCore::NodeTraversal *v4;
  __int16 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::NodeTraversal *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int16 v16;
  char v17;
  WebCore::NodeTraversal *v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  WTF::StringImpl *v22;
  int v23;
  _BOOL4 v24;
  _QWORD *v25;
  uint64_t v26;
  WebCore::Text *v27;
  WebCore::TreeScope *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v33;
  WebCore::TreeScope *v34;
  WebCore::Node *v35;
  _BOOL4 v36;
  _BOOL4 v37;
  void *v38;
  const WebCore::Style::RuleSet *v39;
  _BOOL4 v40;
  int v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  WebCore::NodeTraversal *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  void *v74;
  WTF::StringImpl *v75;
  const WebCore::Style::RuleSet *v76;
  uint64_t v77;
  WebCore::Node **v78;
  uint64_t v79;
  unsigned int *v80;
  WebCore::Node *v81;
  uint64_t v82;
  uint64_t v83;
  WebCore::Node *v85;
  WebCore::NodeTraversal *v86;
  WebCore::NodeTraversal *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::NodeTraversal *v91;
  WebCore::NodeTraversal *v92;
  WebCore::NodeTraversal *v93;
  WebCore::NodeTraversal *v94;
  uint64_t v95;
  WebCore::NodeTraversal *v96;
  WebCore::NodeTraversal *v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::NodeTraversal *v100;
  uint64_t v101;
  WebCore::ChildListMutationAccumulator *v102;
  __int16 v103;
  WTF::StringImpl *v104;
  int v105;
  _BOOL4 v106;
  _QWORD *v107;
  uint64_t v108;
  WebCore::Text *v109;
  const WebCore::Style::RuleSet *v110;
  WebCore::TreeScope *v111;
  uint64_t v112;
  int v113;
  WebCore::ChildListMutationAccumulator *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WebCore::NodeTraversal *v118;
  WebCore::NodeTraversal *v119;
  WebCore::NodeTraversal *v120;
  WebCore::NodeTraversal *v121;
  uint64_t v122;
  WebCore::NodeTraversal *v123;
  WebCore::NodeTraversal *v124;
  uint64_t v125;
  uint64_t v126;
  WebCore::NodeTraversal *v127;
  uint64_t v128;
  WTF *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Inspector::InspectorDebuggerAgent **v150;
  uint64_t v151;
  WTF *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WebCore::NodeTraversal *v171;
  int v172;
  WebCore::NodeTraversal *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  WebCore::NodeTraversal *v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  uint64_t v183;
  WebCore::NodeTraversal **v184;
  WebCore::Node *v185;
  _QWORD *v186;
  WebCore::Event *v187;
  WTF::StringImpl *v188;
  const WebCore::Node *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  WebCore::Event *v195;
  WTF::StringImpl *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  WebCore::Node *v201;
  WebCore::Event *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  unsigned int *v206;
  uint64_t v207;
  uint64_t *v208;
  _QWORD *v209;
  WebCore::Event *v210;
  WTF::StringImpl *v211;
  const WebCore::Node *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  unsigned int *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  WebCore::Event *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  _BOOL4 v226;
  _QWORD *v227;
  BOOL v228;
  uint64_t v229;
  uint64_t v230;
  _BOOL4 v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  WebCore::NodeTraversal *v235;
  WebCore::NodeTraversal *v236;
  uint64_t v237;
  __int16 v238;
  uint64_t v239;
  __int16 v241;
  _QWORD *v242;
  WebCore::TreeScope *v243;
  WebCore::Node *v244;
  _BOOL4 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WebCore::WindowProxy *v249;
  WebCore::DOMWrapperWorld *v250;
  WebCore::DOMWrapperWorld **v251;
  WebCore::Document *v252;
  WebCore::ChildListMutationAccumulator *v253;
  uint64_t v254;
  WebCore::RenderView *v255;
  WebCore::Node *v256;
  WebCore::Element *RenderingAncestor;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  WebCore::NodeTraversal *v278;
  uint64_t v279;
  WTF::StringImpl *v281[2];
  BOOL v282;
  BOOL v283;
  BOOL v284;
  WTF::StringImpl *v285[2];
  __int128 v286;
  uint64_t v287;
  WebCore::ChildListMutationAccumulator *v288;
  WebCore::NodeTraversal *v289[2];
  __int128 v290;
  char *v291;

  v4 = result;
  v5 = *(_WORD *)(a2 + 28);
  if ((v5 & 0xF000) == 0xB000)
    v6 = a2;
  else
    v6 = 0;
  if ((v5 & 0xF000) != 0xB000)
  {
    v7 = a3[3];
    if ((_DWORD)v7 == a3[2])
    {
      v70 = v7 + (v7 >> 2);
      if (v70 >= 0x10)
        v71 = v70 + 1;
      else
        v71 = 16;
      if (v71 <= v7 + 1)
        v72 = v7 + 1;
      else
        v72 = v71;
      v73 = *(_DWORD **)a3;
      if (v72 < 0xC)
      {
        v74 = a3 + 4;
        *(_QWORD *)a3 = a3 + 4;
        a3[2] = 11;
      }
      else
      {
        if (v72 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195958808);
        }
        v74 = (void *)WTF::fastMalloc((WTF *)(8 * v72));
        a3[2] = v72;
        *(_QWORD *)a3 = v74;
      }
      result = (WebCore::NodeTraversal *)memcpy(v74, v73, 8 * v7);
      if (a3 + 4 != v73 && v73)
      {
        if (*(_DWORD **)a3 == v73)
        {
          *(_QWORD *)a3 = 0;
          a3[2] = 0;
        }
        result = (WebCore::NodeTraversal *)WTF::fastFree((WTF *)v73, (void *)a2);
      }
      v7 = a3[3];
      v8 = (uint64_t *)(*(_QWORD *)a3 + 8 * v7);
    }
    else
    {
      v8 = (uint64_t *)(*(_QWORD *)a3 + 8 * v7);
    }
    v9 = a2;
    *(_DWORD *)(a2 + 24) += 2;
    *v8 = a2;
    a3[3] = v7 + 1;
    v10 = *(_QWORD *)(a2 + 32);
    if (v10)
    {
      v11 = v4;
      *(_DWORD *)(v10 + 24) += 4;
      *(_DWORD *)(a2 + 24) += 4;
      ++WebCore::ScriptDisallowedScope::s_count;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 3364) & 1) != 0)
      {
        result = (WebCore::NodeTraversal *)WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)v10, (uint64_t *)v289);
        v114 = v289[0];
        if (v289[0])
        {
          if (*((_QWORD *)v289[0] + 10))
            result = (WebCore::NodeTraversal *)WebCore::ChildListMutationAccumulator::willRemoveChild(v289[0], (WebCore::Node *)a2);
          if (*(_DWORD *)v114 == 1)
          {
            WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v114, (void *)a2);
            result = (WebCore::NodeTraversal *)WTF::fastFree(v152, v153);
          }
          else
          {
            --*(_DWORD *)v114;
          }
          v9 = a2;
        }
      }
      --WebCore::ScriptDisallowedScope::s_count;
      v12 = *(_QWORD *)(v9 + 40);
      if (*(_BYTE *)(*(_QWORD *)(v12 + 8) + 3364))
      {
        v115 = *(_QWORD *)(a2 + 32);
        if (v115)
        {
          while (1)
          {
            if ((*(_QWORD *)(v115 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v116 = *(_QWORD *)((*(_QWORD *)(v115 + 72) & 0xFFFFFFFFFFFFLL) + 8);
              if (v116)
              {
                v117 = *(unsigned int *)(v116 + 12);
                if (!(_DWORD)v117)
                  break;
                v197 = *(uint64_t **)v116;
                v198 = 8 * v117;
                do
                {
                  v199 = *v197++;
                  result = (WebCore::NodeTraversal *)WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(v199, (WebCore::Node *)a2);
                  v198 -= 8;
                }
                while (v198);
                if ((*(_QWORD *)(v115 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v116 = *(_QWORD *)((*(_QWORD *)(v115 + 72) & 0xFFFFFFFFFFFFLL) + 8);
                  if (v116)
                    break;
                }
              }
            }
LABEL_249:
            v115 = *(_QWORD *)(v115 + 32);
            if (!v115)
            {
              v12 = *(_QWORD *)(a2 + 40);
              goto LABEL_10;
            }
          }
          v120 = *(WebCore::NodeTraversal **)(v116 + 16);
          v118 = (WebCore::NodeTraversal *)(v116 + 16);
          v119 = v120;
          if (v120)
          {
            v122 = *((unsigned int *)v119 - 1);
            v123 = (WebCore::NodeTraversal *)((char *)v119 + 8 * v122);
            if (*((_DWORD *)v119 - 3))
            {
              v121 = v119;
              if ((_DWORD)v122)
              {
                v128 = 8 * v122;
                v121 = v119;
                while ((unint64_t)(*(_QWORD *)v121 + 1) <= 1)
                {
                  v121 = (WebCore::NodeTraversal *)((char *)v121 + 8);
                  v128 -= 8;
                  if (!v128)
                  {
                    v121 = v123;
                    goto LABEL_255;
                  }
                }
              }
              goto LABEL_255;
            }
            v121 = (WebCore::NodeTraversal *)((char *)v119 + 8 * v122);
          }
          else
          {
            v121 = 0;
            v122 = 0;
          }
          v123 = (WebCore::NodeTraversal *)((char *)v119 + 8 * v122);
LABEL_255:
          v289[0] = v118;
          v289[1] = v121;
          *(_QWORD *)&v290 = v123;
          if (v119)
          {
            v125 = *((unsigned int *)v119 - 1);
            v124 = (WebCore::NodeTraversal *)((char *)v119 + 8 * v125);
          }
          else
          {
            v124 = 0;
            v125 = 0;
          }
          *((_QWORD *)&v290 + 1) = v124;
          v291 = (char *)v119 + 8 * v125;
          if (v121 != v124)
          {
            v171 = v121;
            while (!*(_QWORD *)(*(_QWORD *)v171 + 8))
            {
              v235 = (WebCore::NodeTraversal *)((char *)v171 + 8);
              v289[1] = v235;
              v171 = v123;
              if (v235 != v123)
              {
                v171 = v235;
                while ((unint64_t)(*(_QWORD *)v171 + 1) <= 1)
                {
                  v171 = (WebCore::NodeTraversal *)((char *)v171 + 8);
                  v289[1] = v171;
                  if (v171 == v123)
                  {
                    v171 = v123;
                    break;
                  }
                }
              }
              v121 = v124;
              if (v171 == v124)
                goto LABEL_258;
            }
            v121 = v171;
          }
LABEL_258:
          v126 = *(_QWORD *)v118;
          if (v126)
            v127 = (WebCore::NodeTraversal *)(v126 + 8 * *(unsigned int *)(v126 - 4));
          else
            v127 = 0;
          while (v121 != v127)
          {
            WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(*(_QWORD *)(*(_QWORD *)v121 + 8), (WebCore::Node *)a2);
            result = (WebCore::NodeTraversal *)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v289);
            v121 = v289[1];
          }
          goto LABEL_249;
        }
      }
LABEL_10:
      v13 = *(_QWORD *)(v12 + 8);
      *(_DWORD *)(v13 + 24) += 2;
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v133 = *(_QWORD *)(v13 + 528);
        if (v133)
        {
          v134 = *(_QWORD *)(v133 + 8);
          if (v134)
          {
            v135 = *(_QWORD *)(v134 + 24);
            if (v135)
            {
              v136 = *(_QWORD *)(v135 + 8);
              if (v136)
                goto LABEL_286;
            }
          }
        }
        v154 = *(_QWORD *)(v13 + 2632);
        if (v154)
        {
          v155 = *(_QWORD *)(v154 + 8);
          if (v155)
          {
            v156 = *(_QWORD *)(v155 + 528);
            if (v156)
            {
              v157 = *(_QWORD *)(v156 + 8);
              if (v157)
              {
                v158 = *(_QWORD *)(v157 + 24);
                if (v158)
                {
                  v136 = *(_QWORD *)(v158 + 8);
                  if (v136)
                  {
LABEL_286:
                    result = *(WebCore::NodeTraversal **)(*(_QWORD *)(*(_QWORD *)(v136 + 80) + 8) + 152);
                    if (result)
                      result = (WebCore::NodeTraversal *)WebCore::PageDOMDebuggerAgent::willRemoveDOMNode((Inspector::InspectorDebuggerAgent **)result, (WebCore::Node *)a2);
                  }
                }
              }
            }
          }
        }
      }
      if ((*(_BYTE *)(a2 + 22) & 0x10) != 0 || *(_BYTE *)(v13 + 3268))
        goto LABEL_17;
      if (*(_QWORD *)(a2 + 32) && (*(_WORD *)(v13 + 3292) & 4) != 0)
      {
        v193 = (_QWORD *)(WebCore::eventNames(result) + 40);
        v194 = *(_QWORD *)(a2 + 32);
        if (v194)
          *(_DWORD *)(v194 + 24) += 2;
        v289[0] = 0;
        v285[0] = 0;
        v195 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v195, v193, 1, 0, v194, (_DWORD **)v289, (_DWORD **)v285);
        WebCore::Node::dispatchScopedEvent((WebCore::Node *)a2, v195);
        if (*((_DWORD *)v195 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v195 + 8))(v195);
        else
          --*((_DWORD *)v195 + 4);
        v196 = v285[0];
        v285[0] = 0;
        if (v196)
        {
          if (*(_DWORD *)v196 == 2)
            WTF::StringImpl::destroy(v196, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v196 -= 2;
        }
        result = v289[0];
        v289[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WebCore::NodeTraversal *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        if (v194)
        {
          if (*(_DWORD *)(v194 + 24) == 2)
          {
            if ((*(_WORD *)(v194 + 30) & 0x400) == 0)
              result = (WebCore::NodeTraversal *)WebCore::Node::removedLastRef((WebCore::Node *)v194);
          }
          else
          {
            *(_DWORD *)(v194 + 24) -= 2;
          }
        }
      }
      if ((*(_BYTE *)(a2 + 22) & 8) == 0 || (*(_WORD *)(v13 + 3292) & 8) == 0)
        goto LABEL_17;
      v185 = (WebCore::Node *)a2;
      *(_DWORD *)(a2 + 24) += 2;
      v285[0] = 0;
      v289[0] = (WebCore::NodeTraversal *)a2;
      result = (WebCore::NodeTraversal *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v285);
      do
      {
        v186 = (_QWORD *)(WebCore::eventNames(result) + 48);
        v285[0] = 0;
        v281[0] = 0;
        v187 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v187, v186, 0, 0, 0, (_DWORD **)v285, (_DWORD **)v281);
        WebCore::Node::dispatchScopedEvent(v185, v187);
        if (*((_DWORD *)v187 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v187 + 8))(v187);
        else
          --*((_DWORD *)v187 + 4);
        v190 = v281[0];
        v281[0] = 0;
        if (v190)
        {
          if (*(_DWORD *)v190 == 2)
            WTF::StringImpl::destroy(v190, v188);
          else
            *(_DWORD *)v190 -= 2;
        }
        v191 = v285[0];
        v285[0] = 0;
        if (v191)
        {
          if (*(_DWORD *)v191 == 2)
            WTF::StringImpl::destroy(v191, v188);
          else
            *(_DWORD *)v191 -= 2;
        }
        v192 = WebCore::NodeTraversal::next(v289[0], (const WebCore::Node *)a2, v189);
        result = (WebCore::NodeTraversal *)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v289, v192);
        v185 = v289[0];
      }
      while (v289[0]);
      if (v13)
      {
LABEL_17:
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            result = (WebCore::NodeTraversal *)WebCore::Node::removedLastRef((WebCore::Node *)v13);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
      }
      v15 = a2;
      if (*(_QWORD *)(a2 + 32) == v10)
      {
        v16 = *(_WORD *)(a2 + 28);
        if ((v16 & 4) == 0 || (*(_WORD *)(a2 + 78) & 0x3FF) == 0)
          goto LABEL_22;
        result = (WebCore::NodeTraversal *)WebCore::disconnectSubframes((WebCore::Node *)a2, 0);
        if (*(_QWORD *)(a2 + 32) == v10)
        {
          v16 = *(_WORD *)(a2 + 28);
LABEL_22:
          *(_OWORD *)v289 = 0u;
          v290 = 0u;
          if ((v16 & 2) != 0)
            v17 = 3;
          else
            v17 = 6;
          if ((v16 & 8) != 0)
            v17 = 1;
          LOBYTE(v289[0]) = v17;
          if ((v16 & 8) != 0)
            v18 = (WebCore::NodeTraversal *)a2;
          else
            v18 = 0;
          v291 = 0;
          v289[1] = v18;
          do
            v15 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
          while (v15 && (*(_WORD *)(v15 + 28) & 8) == 0);
          *(_QWORD *)&v290 = v15;
          v19 = a2;
          do
            v19 = *(_QWORD *)(v19 + 56);
          while (v19 && (*(_WORD *)(v19 + 28) & 8) == 0);
          *((_QWORD *)&v290 + 1) = v19;
          LOBYTE(v291) = 1;
          if ((v16 & 8) != 0)
            v20 = 2;
          else
            v20 = 1;
          BYTE1(v291) = v20;
          ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          ++WebCore::ScriptDisallowedScope::s_count;
          v21 = *(_WORD *)(v10 + 28);
          if ((v21 & 8) != 0)
            v22 = (WTF::StringImpl *)v10;
          else
            v22 = 0;
          v285[0] = v22;
          v285[1] = (WTF::StringImpl *)v289;
          if ((v21 & 8) != 0)
          {
            v226 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v10);
            LOBYTE(v286) = v226;
            if (v226)
            {
              v227 = (_QWORD *)*((_QWORD *)v285[0] + 5);
              if (*v227)
                v228 = (*(_WORD *)(*v227 + 28) & 0x80) == 0;
              else
                v228 = 1;
              if (v228)
                v230 = v227[1] + 1328;
              else
                v230 = *v227 + 216;
              v24 = *(unsigned __int8 *)(*(_QWORD *)v230 + 236) != 0;
              v23 = 1;
            }
            else
            {
              v23 = 0;
              v24 = 0;
            }
          }
          else
          {
            v23 = 0;
            v24 = 0;
            LOBYTE(v286) = 0;
          }
          BYTE1(v286) = v24;
          BYTE2(v286) = *(_QWORD *)(v10 + 80) == 0;
          if (v23 && v24)
            WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v285, a2, (const WebCore::Style::RuleSet *)a3);
          if ((*(_WORD *)(v10 + 28) & 0x80) != 0 || (*(_BYTE *)(v10 + 22) & 0x10) != 0)
          {
            v25 = *(_QWORD **)(v10 + 40);
            v131 = *v25;
            if ((*(_WORD *)(*v25 + 28) & 0x80) == 0)
              v131 = 0;
            v132 = *(_QWORD *)(v131 + 224);
            if (v132)
            {
              ++*(_DWORD *)(v132 + 12);
              *(_BYTE *)(v132 + 9) = 0;
            }
          }
          else
          {
            v25 = *(_QWORD **)(v10 + 40);
          }
          v26 = v25[1];
          *(_DWORD *)(v26 + 24) += 2;
          WebCore::Document::nodeWillBeRemoved((WebCore::Document *)v26, (WebCore::Node *)a2);
          if (*(_DWORD *)(v26 + 24) == 2)
          {
            if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v26);
          }
          else
          {
            *(_DWORD *)(v26 + 24) -= 2;
          }
          v29 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
          if (v29)
            *(_DWORD *)((*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
          v30 = *(_QWORD *)(a2 + 56);
          if (v30)
            *(_DWORD *)(v30 + 24) += 2;
          v31 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
          *(_DWORD *)(v31 + 24) += 2;
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v137 = *(_QWORD *)(v31 + 528);
            if (v137)
            {
              v138 = *(_QWORD *)(v137 + 8);
              if (v138)
              {
                v139 = *(_QWORD *)(v138 + 24);
                if (v139)
                {
                  v140 = *(_QWORD *)(v139 + 8);
                  if (v140)
                    goto LABEL_292;
                }
              }
            }
            v159 = *(_QWORD *)(v31 + 2632);
            if (v159)
            {
              v160 = *(_QWORD *)(v159 + 8);
              if (v160)
              {
                v161 = *(_QWORD *)(v160 + 528);
                if (v161)
                {
                  v162 = *(_QWORD *)(v161 + 8);
                  if (v162)
                  {
                    v163 = *(_QWORD *)(v162 + 24);
                    if (v163)
                    {
                      v140 = *(_QWORD *)(v163 + 8);
                      if (v140)
                      {
LABEL_292:
                        v141 = *(_QWORD *)(*(_QWORD *)(v140 + 80) + 8);
                        v142 = *(uint64_t **)(v141 + 152);
                        if (v142)
                        {
                          v281[0] = (WTF::StringImpl *)a2;
                          WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v142 + 21, (WTF::StringImpl *)v281);
                          WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v142 + 22, (WTF::StringImpl *)v281);
                          WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v142 + 23, (WTF::StringImpl *)v281);
                        }
                        v143 = *(uint64_t **)(v141 + 40);
                        if (v143)
                          WebCore::InspectorDOMAgent::didRemoveDOMNode(v143, (WebCore::Node *)a2);
                      }
                    }
                  }
                }
              }
            }
          }
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
          ++WebCore::ScriptDisallowedScope::s_count;
          v33 = *(_WORD *)(a2 + 28);
          if ((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((v33 & 8) == 0)
            {
              if ((v33 & 2) != 0)
                WebCore::RenderTreeUpdater::tearDownRenderer((WebCore::RenderTreeUpdater *)a2, v27);
              goto LABEL_62;
            }
          }
          else if ((v33 & 8) == 0
                 || (*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0
                 || (v57 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
                 || (*(_QWORD *)(v57 + 16) & 0x1FLL) != 0x12)
          {
LABEL_62:
            if ((*(_BYTE *)(v10 + 23) & 0x10) != 0)
            {
              v144 = (*(_WORD *)(v10 + 28) & 8) != 0 && (*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) != 0
                   ? *(_QWORD *)((*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
                   : 0;
              v145 = *(_QWORD *)(v144 + 224);
              if (v145)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 96))(v145, a2);
            }
            if (v30)
            {
              *(_QWORD *)(v30 + 48) = v29 | ((unint64_t)*(unsigned __int16 *)(v30 + 54) << 48);
              *(_QWORD *)(a2 + 56) = 0;
            }
            else
            {
              *(_QWORD *)(v10 + 88) = v29;
            }
            if (v29)
            {
              *(_QWORD *)(v29 + 56) = v30;
              *(_QWORD *)(a2 + 48) = (unint64_t)*(unsigned __int16 *)(a2 + 54) << 48;
            }
            else
            {
              *(_QWORD *)(v10 + 80) = v30;
            }
            *(_QWORD *)(a2 + 32) = 0;
            *(_DWORD *)(a2 + 24) &= ~1u;
            v34 = (WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 96);
            v35 = *(WebCore::Node **)(a2 + 40);
            if (v35 != v34)
              WebCore::Node::moveTreeToNewScope((WebCore::Node *)a2, v35, v34, v28);
            --WebCore::ScriptDisallowedScope::s_count;
            v36 = (*(_BYTE *)(v10 + 22) & 0x18) == 0;
            if ((*(_BYTE *)(a2 + 22) & 8) != 0)
              v37 = WebCore::notifyNodeRemovedFromDocument(v10, v36, a2);
            else
              v37 = WebCore::notifyNodeRemovedFromTree(v10, v36, a2);
            v40 = v37;
            if (v30)
            {
              if (*(_DWORD *)(v30 + 24) == 2)
              {
                if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v30);
              }
              else
              {
                *(_DWORD *)(v30 + 24) -= 2;
              }
            }
            if (v29)
            {
              if (*(_DWORD *)(v29 + 24) == 2)
              {
                if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v29);
              }
              else
              {
                *(_DWORD *)(v29 + 24) -= 2;
              }
            }
            if ((_BYTE)v286)
            {
              if (BYTE1(v286))
                WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v285, (uint64_t)v38, v39);
              WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v285);
            }
            --WebCore::ScriptDisallowedScope::s_count;
            v41 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
            if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
              && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
            {
              WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v285, v38);
              v41 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
            }
            WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v41 - 1;
            if (v40)
            {
              v56 = *(_QWORD *)(a2 + 8);
              if ((!v56 || (*(_BYTE *)(v56 + 8) & 3) != 0 || !*(_QWORD *)v56)
                && (*(_WORD *)(a2 + 28) & 4) != 0
                && *(_QWORD *)(a2 + 80))
              {
                WebCore::willCreatePossiblyOrphanedTreeByRemovalSlowCase((WebCore::Node *)a2, (WebCore::Node *)v38);
              }
            }
            result = (WebCore::NodeTraversal *)(*(uint64_t (**)(uint64_t, WebCore::NodeTraversal **))(*(_QWORD *)v10 + 376))(v10, v289);
            v42 = 1;
LABEL_83:
            if (*(_DWORD *)(a2 + 24) == 2)
            {
              if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
                result = (WebCore::NodeTraversal *)WebCore::Node::removedLastRef((WebCore::Node *)a2);
            }
            else
            {
              *(_DWORD *)(a2 + 24) -= 2;
            }
            if ((v42 & 1) != 0)
            {
              v43 = *(uint64_t **)(v10 + 40);
              v44 = v43[1];
              v45 = *(_DWORD *)(v44 + 24);
              *(_DWORD *)(v44 + 24) = v45 + 2;
              if (*(_QWORD *)(v44 + 1808))
              {
                v49 = *v43;
                if (!v49
                  || (*(_WORD *)(v49 + 28) & 0x80) == 0
                  || (v50 = *(_QWORD *)(v49 + 200)) == 0
                  || (v51 = *(_QWORD *)(v50 + 8)) == 0
                  || (*(_WORD *)(v51 + 28) & 0x20) == 0
                  || *(_QWORD *)(*(_QWORD *)(v51 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
                {
                  WebCore::Document::checkedSVGExtensions((WebCore::Document *)v44, v289);
                  v53 = v289[0];
                  v54 = (WTF *)*((_QWORD *)v289[0] + 7);
                  v55 = *((unsigned int *)v289[0] + 17);
                  *((_QWORD *)v289[0] + 7) = 0;
                  *((_QWORD *)v53 + 8) = 0;
                  if ((_DWORD)v55)
                  {
                    v180 = 8 * v55;
                    v181 = 8 * v55;
                    v182 = v54;
                    do
                    {
                      v183 = *(_QWORD *)v182;
                      v182 = (WTF *)((char *)v182 + 8);
                      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v183 + 1240))(v183, &WebCore::SVGNames::hrefAttr);
                      v181 -= 8;
                    }
                    while (v181);
                    v184 = (WebCore::NodeTraversal **)v54;
                    do
                    {
                      result = *v184;
                      *v184 = 0;
                      if (result)
                      {
                        if (*((_DWORD *)result + 6) == 2)
                        {
                          v11 = v4;
                          if ((*((_WORD *)result + 15) & 0x400) == 0)
                            result = (WebCore::NodeTraversal *)WebCore::Node::removedLastRef(result);
                        }
                        else
                        {
                          *((_DWORD *)result + 6) -= 2;
                          v11 = v4;
                        }
                      }
                      ++v184;
                      v180 -= 8;
                    }
                    while (v180);
                  }
                  if (v54)
                    result = (WebCore::NodeTraversal *)WTF::fastFree(v54, v52);
                  if (v53)
                  {
                    if (!*(_DWORD *)v53)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195957D9CLL);
                    }
                    --*(_DWORD *)v53;
                  }
                  v45 = *(_DWORD *)(v44 + 24) - 2;
                }
              }
              if (v45)
              {
                *(_DWORD *)(v44 + 24) = v45;
              }
              else if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
              {
                result = (WebCore::NodeTraversal *)WebCore::Node::removedLastRef((WebCore::Node *)v44);
              }
              if ((*(_BYTE *)(v10 + 22) & 0x10) == 0)
              {
                v46 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
                if (!*(_BYTE *)(v46 + 3268) && (*(_WORD *)(v46 + 3292) & 1) != 0)
                {
                  v200 = (_QWORD *)(WebCore::eventNames(result) + 56);
                  if (*(_QWORD *)(v10 + 32)
                    || (v229 = *(_QWORD *)(v10 + 16), (v229 & 0x1000000000000) != 0)
                    && WebCore::EventListenerMap::find((v229 & 0xFFFFFFFFFFFFLL) + 16, v200))
                  {
                    v289[0] = 0;
                    v285[0] = 0;
                    v201 = (WebCore::Node *)WebCore::MutationEvent::operator new(112);
                    WebCore::MutationEvent::MutationEvent((uint64_t)v201, v200, 1, 0, 0, (_DWORD **)v289, (_DWORD **)v285);
                    WebCore::EventDispatcher::dispatchScopedEvent((WebCore::EventDispatcher *)v10, v201, v202);
                    if (*((_DWORD *)v201 + 4) == 1)
                      (*(void (**)(WebCore::Node *))(*(_QWORD *)v201 + 8))(v201);
                    else
                      --*((_DWORD *)v201 + 4);
                    v204 = v285[0];
                    v285[0] = 0;
                    if (v204)
                    {
                      if (*(_DWORD *)v204 == 2)
                        WTF::StringImpl::destroy(v204, v203);
                      else
                        *(_DWORD *)v204 -= 2;
                    }
                    v205 = v289[0];
                    v289[0] = 0;
                    if (v205)
                    {
                      if (*(_DWORD *)v205 == 2)
                        WTF::StringImpl::destroy(v205, v203);
                      else
                        *(_DWORD *)v205 -= 2;
                    }
                  }
                }
              }
              *(_QWORD *)v11 = 0;
              *((_QWORD *)v11 + 1) = 0;
              *((_QWORD *)v11 + 2) = 0;
            }
            else
            {
              *(_BYTE *)v4 = 5;
              *((_QWORD *)v4 + 1) = 0;
              *((_BYTE *)v4 + 16) = 1;
            }
            result = (WebCore::NodeTraversal *)a2;
            if (*(_DWORD *)(a2 + 24) == 2)
            {
              if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
                result = (WebCore::NodeTraversal *)WebCore::Node::removedLastRef((WebCore::Node *)a2);
            }
            else
            {
              *(_DWORD *)(a2 + 24) -= 2;
            }
            v47 = *(_DWORD *)(v10 + 24) - 2;
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) != 0)
              {
LABEL_158:
                if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                  return (WebCore::NodeTraversal *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
                return result;
              }
              result = (WebCore::NodeTraversal *)WebCore::Node::removedLastRef((WebCore::Node *)v10);
              v47 = *(_DWORD *)(v10 + 24);
            }
            else
            {
              *(_DWORD *)(v10 + 24) = v47;
            }
            v48 = v47 - 2;
            if (v48)
            {
              *(_DWORD *)(v10 + 24) = v48;
              return result;
            }
            goto LABEL_158;
          }
          WebCore::RenderTreeUpdater::tearDownRenderers((WebCore *)a2, 0);
          goto LABEL_62;
        }
      }
      v42 = 0;
      goto LABEL_83;
    }
LABEL_281:
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    return result;
  }
  v58 = *(_QWORD *)(a2 + 80);
  if (!v58)
    goto LABEL_281;
  if ((v5 & 4) != 0)
  {
    LODWORD(v59) = a3[3];
    do
    {
      v60 = v59;
      if ((_DWORD)v59 == a3[2])
      {
        v63 = a3 + 4;
        v62 = *(_DWORD **)a3;
        v64 = v59 + 1;
        v65 = v60 + (v60 >> 2);
        if (v65 >= 0x10)
          v66 = v65 + 1;
        else
          v66 = 16;
        if (v66 <= v64)
          v67 = v60 + 1;
        else
          v67 = v66;
        if (v67 < 0xC)
        {
          *(_QWORD *)a3 = v63;
          a3[2] = 11;
          v68 = a3 + 4;
        }
        else
        {
          if (v67 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195958810);
          }
          v68 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
          a3[2] = v67;
          *(_QWORD *)a3 = v68;
        }
        memcpy(v68, v62, 8 * v60);
        if (v63 != v62 && v62)
        {
          if (*(_DWORD **)a3 == v62)
          {
            *(_QWORD *)a3 = 0;
            a3[2] = 0;
          }
          WTF::fastFree((WTF *)v62, v69);
        }
        v59 = a3[3];
        v61 = (_QWORD *)(*(_QWORD *)a3 + 8 * v59);
      }
      else
      {
        v61 = (_QWORD *)(*(_QWORD *)a3 + 8 * v59);
      }
      *(_DWORD *)(v58 + 24) += 2;
      *v61 = v58;
      LODWORD(v59) = v59 + 1;
      a3[3] = v59;
      v58 = *(_QWORD *)(v58 + 56);
    }
    while (v58);
    v5 = *(_WORD *)(a2 + 28);
  }
  if ((v5 & 0xF200) == 0xB200)
  {
    v172 = WebCore::ScriptDisallowedScope::s_count++;
    if ((*(_QWORD *)(v6 + 72) & 0x3FFFFFFFFFFFFFFLL) != 0
      || (v173 = v4, (v174 = *(_QWORD *)(v6 + 8)) != 0) && (*(_BYTE *)(v174 + 8) & 3) == 0 && *(_QWORD *)v174)
    {
      __break(0xC471u);
      JUMPOUT(0x195958648);
    }
    v175 = *(_QWORD *)(a2 + 80);
    if (v175)
    {
      do
      {
        *(_DWORD *)(v175 + 24) += 2;
        v176 = *(_QWORD *)(v175 + 56);
        if (v176)
        {
          *(_DWORD *)(v176 + 24) += 2;
          WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)v6, 0, (WebCore::Node *)v176, (WebCore::Node *)v175);
          if (*(_DWORD *)(v176 + 24) == 2)
          {
            if ((*(_WORD *)(v176 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v176);
          }
          else
          {
            *(_DWORD *)(v176 + 24) -= 2;
          }
        }
        else
        {
          WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)v6, 0, 0, (WebCore::Node *)v175);
        }
        if (*(_DWORD *)(v175 + 24) == 2)
        {
          if ((*(_WORD *)(v175 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v175);
        }
        else
        {
          *(_DWORD *)(v175 + 24) -= 2;
        }
        v175 = *(_QWORD *)(a2 + 80);
      }
      while (v175);
      v172 = WebCore::ScriptDisallowedScope::s_count - 1;
    }
    v177 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
    *(_QWORD *)(v177 + 1288) = ++WebCore::Document::s_globalTreeVersion;
    WebCore::ScriptDisallowedScope::s_count = v172;
    goto LABEL_602;
  }
  WebCore::ChildListMutationScope::ChildListMutationScope(&v288, (WebCore::ContainerNode *)v6);
  v77 = a3[3];
  if ((_DWORD)v77)
  {
    v78 = *(WebCore::Node ***)a3;
    v79 = *(_QWORD *)a3 + 8 * v77;
    v80 = (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter;
    while (1)
    {
      v81 = *v78;
      if (v288 && *((_QWORD *)v288 + 10))
      {
        WebCore::ChildListMutationAccumulator::willRemoveChild(v288, *v78);
        v81 = *v78;
      }
      v82 = *((_QWORD *)v81 + 5);
      if (*(_BYTE *)(*(_QWORD *)(v82 + 8) + 3364))
      {
        v89 = *((_QWORD *)v81 + 4);
        if (v89)
          break;
      }
LABEL_183:
      v83 = *(_QWORD *)(v82 + 8);
      *(_DWORD *)(v83 + 24) += 2;
      if (atomic_load(v80))
      {
        v146 = *(_QWORD *)(v83 + 528);
        if (v146)
        {
          v147 = *(_QWORD *)(v146 + 8);
          if (v147)
          {
            v148 = *(_QWORD *)(v147 + 24);
            if (v148)
            {
              v149 = *(_QWORD *)(v148 + 8);
              if (v149)
                goto LABEL_305;
            }
          }
        }
        v164 = *(_QWORD *)(v83 + 2632);
        if (v164)
        {
          v165 = *(_QWORD *)(v164 + 8);
          if (v165)
          {
            v166 = *(_QWORD *)(v165 + 528);
            if (v166)
            {
              v167 = *(_QWORD *)(v166 + 8);
              if (v167)
              {
                v168 = *(_QWORD *)(v167 + 24);
                if (v168)
                {
                  v149 = *(_QWORD *)(v168 + 8);
                  if (v149)
                  {
LABEL_305:
                    v150 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v149 + 80) + 8) + 152);
                    if (v150)
                    {
                      v151 = v83;
                      WebCore::PageDOMDebuggerAgent::willRemoveDOMNode(v150, v81);
                      v83 = v151;
                    }
                  }
                }
              }
            }
          }
        }
      }
      v85 = *v78;
      if ((*((_BYTE *)*v78 + 22) & 0x10) != 0 || *(_BYTE *)(v83 + 3268))
        goto LABEL_190;
      v86 = v4;
      if (*((_QWORD *)v85 + 4) && (*(_WORD *)(v83 + 3292) & 4) != 0)
      {
        v216 = v80;
        v279 = v83;
        v217 = WebCore::eventNames((WebCore *)v83);
        v218 = *((_QWORD *)*v78 + 4);
        if (v218)
          *(_DWORD *)(v218 + 24) += 2;
        v219 = (_QWORD *)(v217 + 40);
        v289[0] = 0;
        v285[0] = 0;
        v220 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v220, v219, 1, 0, v218, (_DWORD **)v289, (_DWORD **)v285);
        WebCore::Node::dispatchScopedEvent(v85, v220);
        if (*((_DWORD *)v220 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v220 + 8))(v220);
        else
          --*((_DWORD *)v220 + 4);
        v221 = v285[0];
        v285[0] = 0;
        if (v221)
        {
          if (*(_DWORD *)v221 == 2)
            WTF::StringImpl::destroy(v221, v75);
          else
            *(_DWORD *)v221 -= 2;
        }
        v222 = v289[0];
        v289[0] = 0;
        if (v222)
        {
          if (*(_DWORD *)v222 == 2)
            WTF::StringImpl::destroy(v222, v75);
          else
            *(_DWORD *)v222 -= 2;
        }
        v83 = v279;
        v80 = v216;
        if (v218)
        {
          if (*(_DWORD *)(v218 + 24) == 2)
          {
            v83 = v279;
            v80 = v216;
            if ((*(_WORD *)(v218 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v218);
              v83 = v279;
            }
          }
          else
          {
            *(_DWORD *)(v218 + 24) -= 2;
            v83 = v279;
            v80 = v216;
          }
        }
      }
      v87 = *v78;
      v4 = v86;
      if ((*((_BYTE *)*v78 + 22) & 8) == 0 || (*(_WORD *)(v83 + 3292) & 8) == 0)
        goto LABEL_190;
      v206 = v80;
      v207 = v83;
      *((_DWORD *)v87 + 6) += 2;
      v285[0] = 0;
      v289[0] = v87;
      v208 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v285);
      do
      {
        v209 = (_QWORD *)(WebCore::eventNames((WebCore *)v208) + 48);
        v285[0] = 0;
        v281[0] = 0;
        v210 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v210, v209, 0, 0, 0, (_DWORD **)v285, (_DWORD **)v281);
        WebCore::Node::dispatchScopedEvent(v87, v210);
        if (*((_DWORD *)v210 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v210 + 8))(v210);
        else
          --*((_DWORD *)v210 + 4);
        v213 = v281[0];
        v281[0] = 0;
        if (v213)
        {
          if (*(_DWORD *)v213 == 2)
            WTF::StringImpl::destroy(v213, v211);
          else
            *(_DWORD *)v213 -= 2;
        }
        v214 = v285[0];
        v285[0] = 0;
        if (v214)
        {
          if (*(_DWORD *)v214 == 2)
            WTF::StringImpl::destroy(v214, v211);
          else
            *(_DWORD *)v214 -= 2;
        }
        v215 = WebCore::NodeTraversal::next(v289[0], *v78, v212);
        v208 = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v289, v215);
        v87 = v289[0];
      }
      while (v289[0]);
      v83 = v207;
      v80 = v206;
      v4 = v86;
      if (v207)
      {
LABEL_190:
        if (*(_DWORD *)(v83 + 24) == 2)
        {
          if ((*(_WORD *)(v83 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v83);
        }
        else
        {
          *(_DWORD *)(v83 + 24) -= 2;
        }
      }
      if (++v78 == (WebCore::Node **)v79)
        goto LABEL_217;
    }
    while (1)
    {
      if ((*(_QWORD *)(v89 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v88 = *(_QWORD *)((*(_QWORD *)(v89 + 72) & 0xFFFFFFFFFFFFLL) + 8);
        if (v88)
        {
          v90 = *(unsigned int *)(v88 + 12);
          if (!(_DWORD)v90)
            break;
          v223 = *(uint64_t **)v88;
          v224 = 8 * v90;
          do
          {
            v225 = *v223++;
            WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(v225, v81);
            v224 -= 8;
          }
          while (v224);
          if ((*(_QWORD *)(v89 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v88 = *(_QWORD *)((*(_QWORD *)(v89 + 72) & 0xFFFFFFFFFFFFLL) + 8);
            if (v88)
              break;
          }
        }
      }
LABEL_198:
      v89 = *(_QWORD *)(v89 + 32);
      if (!v89)
      {
        v81 = *v78;
        v82 = *((_QWORD *)*v78 + 5);
        goto LABEL_183;
      }
    }
    v93 = *(WebCore::NodeTraversal **)(v88 + 16);
    v91 = (WebCore::NodeTraversal *)(v88 + 16);
    v92 = v93;
    if (v93)
    {
      v95 = *((unsigned int *)v92 - 1);
      v96 = (WebCore::NodeTraversal *)((char *)v92 + 8 * v95);
      if (*((_DWORD *)v92 - 3))
      {
        v94 = v92;
        if ((_DWORD)v95)
        {
          v101 = 8 * v95;
          v94 = v92;
          while ((unint64_t)(*(_QWORD *)v94 + 1) <= 1)
          {
            v94 = (WebCore::NodeTraversal *)((char *)v94 + 8);
            v101 -= 8;
            if (!v101)
            {
              v94 = v96;
              goto LABEL_204;
            }
          }
        }
        goto LABEL_204;
      }
      v94 = (WebCore::NodeTraversal *)((char *)v92 + 8 * v95);
    }
    else
    {
      v94 = 0;
      v95 = 0;
    }
    v96 = (WebCore::NodeTraversal *)((char *)v92 + 8 * v95);
LABEL_204:
    v289[0] = v91;
    v289[1] = v94;
    *(_QWORD *)&v290 = v96;
    if (v92)
    {
      v98 = *((unsigned int *)v92 - 1);
      v97 = (WebCore::NodeTraversal *)((char *)v92 + 8 * v98);
    }
    else
    {
      v97 = 0;
      v98 = 0;
    }
    *((_QWORD *)&v290 + 1) = v97;
    v291 = (char *)v92 + 8 * v98;
    if (v94 != v97)
    {
      v179 = v94;
      while (!*(_QWORD *)(*(_QWORD *)v179 + 8))
      {
        v236 = (WebCore::NodeTraversal *)((char *)v179 + 8);
        v289[1] = v236;
        v179 = v96;
        if (v236 != v96)
        {
          v179 = v236;
          while ((unint64_t)(*(_QWORD *)v179 + 1) <= 1)
          {
            v179 = (WebCore::NodeTraversal *)((char *)v179 + 8);
            v289[1] = v179;
            if (v179 == v96)
            {
              v179 = v96;
              break;
            }
          }
        }
        v94 = v97;
        if (v179 == v97)
          goto LABEL_207;
      }
      v94 = v179;
    }
LABEL_207:
    v99 = *(_QWORD *)v91;
    if (v99)
      v100 = (WebCore::NodeTraversal *)(v99 + 8 * *(unsigned int *)(v99 - 4));
    else
      v100 = 0;
    while (v94 != v100)
    {
      WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(*(_QWORD *)(*(_QWORD *)v94 + 8), v81);
      WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(v289);
      v94 = v289[1];
    }
    goto LABEL_198;
  }
LABEL_217:
  v102 = v288;
  v288 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v102, v75);
      WTF::fastFree(v129, v130);
    }
    else
    {
      --*(_DWORD *)v102;
    }
  }
  if ((*(_WORD *)(v6 + 78) & 0x3FF) != 0)
    WebCore::disconnectSubframes((WebCore::Node *)v6, 1);
  *(_OWORD *)v285 = 0u;
  v286 = 0u;
  LOBYTE(v285[0]) = 5;
  v287 = 1;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  v103 = *(_WORD *)(a2 + 28);
  if ((v103 & 8) != 0)
    v104 = (WTF::StringImpl *)v6;
  else
    v104 = 0;
  v281[0] = v104;
  v281[1] = (WTF::StringImpl *)v285;
  if ((v103 & 8) != 0)
  {
    v231 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v6);
    v282 = v231;
    if (v231)
    {
      v232 = (uint64_t *)*((_QWORD *)v281[0] + 5);
      v233 = *v232;
      if (*v232 && (*(_WORD *)(v233 + 28) & 0x80) != 0)
        v234 = v233 + 216;
      else
        v234 = v232[1] + 1328;
      v106 = *(unsigned __int8 *)(*(_QWORD *)v234 + 236) != 0;
      v105 = 1;
    }
    else
    {
      v105 = 0;
      v106 = 0;
    }
  }
  else
  {
    v105 = 0;
    v106 = 0;
    v282 = 0;
  }
  v283 = v106;
  v284 = *(_QWORD *)(a2 + 80) == 0;
  if (v105 && v106)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v281, (uint64_t)v75, v76);
  if ((*(_WORD *)(a2 + 28) & 0x80) != 0 || (*(_BYTE *)(v6 + 22) & 0x10) != 0)
  {
    v107 = *(_QWORD **)(v6 + 40);
    v169 = *v107;
    if ((*(_WORD *)(*v107 + 28) & 0x80) == 0)
      v169 = 0;
    v170 = *(_QWORD *)(v169 + 224);
    if (v170)
    {
      ++*(_DWORD *)(v170 + 12);
      *(_BYTE *)(v170 + 9) = 1;
    }
  }
  else
  {
    v107 = *(_QWORD **)(v6 + 40);
  }
  v108 = v107[1];
  *(_DWORD *)(v108 + 24) += 2;
  WebCore::Document::nodeChildrenWillBeRemoved((WebCore::Document *)v108, (WebCore::ContainerNode *)v6);
  if (*(_DWORD *)(v108 + 24) == 2)
  {
    if ((*(_WORD *)(v108 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v108);
  }
  else
  {
    *(_DWORD *)(v108 + 24) -= 2;
  }
  v278 = v4;
  v112 = *(_QWORD *)(a2 + 80);
  if (!v112)
  {
    v178 = 1;
    goto LABEL_597;
  }
  v113 = 0;
  do
  {
    v237 = *(_QWORD *)(v112 + 56);
    *(_DWORD *)(v112 + 24) += 2;
    v238 = *(_WORD *)(v112 + 28);
    if (v237)
      *(_DWORD *)(v237 + 24) += 2;
    v239 = *(_QWORD *)(*(_QWORD *)(v112 + 40) + 8);
    *(_DWORD *)(v239 + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v259 = *(_QWORD *)(v239 + 528);
      if (v259)
      {
        v260 = *(_QWORD *)(v259 + 8);
        if (v260)
        {
          v261 = *(_QWORD *)(v260 + 24);
          if (v261)
          {
            v262 = *(_QWORD *)(v261 + 8);
            if (v262)
              goto LABEL_578;
          }
        }
      }
      v268 = *(_QWORD *)(v239 + 2632);
      if (v268)
      {
        v269 = *(_QWORD *)(v268 + 8);
        if (v269)
        {
          v270 = *(_QWORD *)(v269 + 528);
          if (v270)
          {
            v271 = *(_QWORD *)(v270 + 8);
            if (v271)
            {
              v272 = *(_QWORD *)(v271 + 24);
              if (v272)
              {
                v262 = *(_QWORD *)(v272 + 8);
                if (v262)
                {
LABEL_578:
                  v263 = *(_QWORD *)(*(_QWORD *)(v262 + 80) + 8);
                  v264 = *(_QWORD *)(v263 + 152);
                  if (v264)
                  {
                    v289[0] = (WebCore::NodeTraversal *)v112;
                    v276 = v263;
                    v277 = v264;
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v264 + 168), (WTF::StringImpl *)v289);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v277 + 176), (WTF::StringImpl *)v289);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v277 + 184), (WTF::StringImpl *)v289);
                    v263 = v276;
                  }
                  v265 = *(uint64_t **)(v263 + 40);
                  if (v265)
                    WebCore::InspectorDOMAgent::didRemoveDOMNode(v265, (WebCore::Node *)v112);
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v239 + 24) == 2)
    {
      if ((*(_WORD *)(v239 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v239);
    }
    else
    {
      *(_DWORD *)(v239 + 24) -= 2;
    }
    ++WebCore::ScriptDisallowedScope::s_count;
    v241 = *(_WORD *)(v112 + 28);
    if ((*(_QWORD *)(v112 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
      if ((v241 & 8) == 0)
        goto LABEL_529;
      if ((*(_QWORD *)(v112 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_529;
      v254 = *(_QWORD *)((*(_QWORD *)(v112 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (!v254 || (*(_QWORD *)(v254 + 16) & 0x1FLL) != 0x12)
        goto LABEL_529;
      goto LABEL_563;
    }
    if ((v241 & 8) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v112 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195958CE0);
      }
LABEL_563:
      v255 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(v112 + 40) + 8) + 1944);
      if (v255)
      {
        WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v289, v255);
        WebCore::RenderTreeUpdater::tearDownRenderers(v112, 0);
        RenderingAncestor = (WebCore::Element *)WebCore::findRenderingAncestor((WebCore *)v112, v256);
        if (RenderingAncestor)
        {
          if ((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195958D00);
          }
          if ((*(_QWORD *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1ELL) == 0x16)
            WebCore::Element::invalidateRenderer(RenderingAncestor);
        }
        WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v289, v258);
      }
      goto LABEL_529;
    }
    if ((v241 & 2) != 0)
      WebCore::RenderTreeUpdater::tearDownRenderer((WebCore::RenderTreeUpdater *)v112, v109);
LABEL_529:
    if ((*(_BYTE *)(v6 + 23) & 0x10) != 0)
    {
      v266 = (*(_WORD *)(a2 + 28) & 8) != 0 && (*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0
           ? *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
           : 0;
      v267 = *(_QWORD *)(v266 + 224);
      if (v267)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v267 + 96))(v267, v112);
    }
    v242 = (_QWORD *)(v6 + 88);
    if (v237)
    {
      *(_QWORD *)(v237 + 48) = (unint64_t)*(unsigned __int16 *)(v237 + 54) << 48;
      v242 = (_QWORD *)(v112 + 56);
    }
    *v242 = 0;
    *(_QWORD *)(a2 + 80) = v237;
    *(_QWORD *)(v112 + 32) = 0;
    *(_DWORD *)(v112 + 24) &= ~1u;
    v243 = (WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 96);
    v244 = *(WebCore::Node **)(v112 + 40);
    if (v244 != v243)
      WebCore::Node::moveTreeToNewScope((WebCore::Node *)v112, v244, v243, v111);
    --WebCore::ScriptDisallowedScope::s_count;
    if (v237)
    {
      if (*(_DWORD *)(v237 + 24) == 2)
      {
        if ((*(_WORD *)(v237 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v237);
      }
      else
      {
        *(_DWORD *)(v237 + 24) -= 2;
      }
    }
    v245 = (*(_BYTE *)(v6 + 22) & 0x18) == 0;
    if ((*(_BYTE *)(v112 + 22) & 8) != 0)
    {
      if (!WebCore::notifyNodeRemovedFromDocument(v6, v245, v112))
        goto LABEL_518;
    }
    else if (!WebCore::notifyNodeRemovedFromTree(v6, v245, v112))
    {
      goto LABEL_518;
    }
    v246 = *(_QWORD *)(v112 + 8);
    if ((!v246 || (*(_BYTE *)(v246 + 8) & 3) != 0 || !*(_QWORD *)v246) && (*(_WORD *)(v112 + 28) & 4) != 0)
    {
      if (*(_QWORD *)(v112 + 80))
      {
        v247 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 40) + 8) + 528);
        if (v247)
        {
          v248 = *(_QWORD *)(v247 + 8);
          if (v248)
          {
            v249 = *(WebCore::WindowProxy **)(v248 + 112);
            {
              v250 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
            }
            else
            {
              v275 = WebCore::g_commonVMOrNull;
              if (!WebCore::g_commonVMOrNull)
                v275 = WebCore::commonVMSlow(0);
              v250 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v275 + 41456) + 16);
              WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v250;
            }
            v251 = *(WebCore::DOMWrapperWorld ***)(WebCore::WindowProxy::jsWindowProxy(v249, v250) + 16);
            JSC::JSLockHolder::JSLockHolder();
            *(_DWORD *)(v112 + 24) += 2;
            v288 = (WebCore::ChildListMutationAccumulator *)v112;
            WebCore::createWrapper(v251, (JSC::VM *)v251, (WebCore::JSDOMGlobalObject *)&v288, v252);
            v253 = v288;
            v288 = 0;
            if (v253)
            {
              if (*((_DWORD *)v253 + 6) == 2)
              {
                if ((*((_WORD *)v253 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v253);
              }
              else
              {
                *((_DWORD *)v253 + 6) -= 2;
              }
            }
            MEMORY[0x19AEA32A0](v289);
          }
        }
      }
    }
LABEL_518:
    if (*(_DWORD *)(v112 + 24) == 2)
    {
      if ((*(_WORD *)(v112 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v112);
    }
    else
    {
      *(_DWORD *)(v112 + 24) -= 2;
    }
    v113 |= (v238 & 8) >> 3;
    v112 = *(_QWORD *)(a2 + 80);
  }
  while (v112);
  if ((v113 & 1) != 0)
    v178 = 2;
  else
    v178 = 1;
LABEL_597:
  BYTE1(v287) = v178;
  v173 = v278;
  if (v282)
  {
    if (v283)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v281, (uint64_t)v109, v110);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v281);
  }
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 376))(v6, v285);
  --WebCore::ScriptDisallowedScope::s_count;
  v274 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v289, v273);
    v274 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v274 - 1;
LABEL_602:
  WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary((_QWORD *)v6);
  result = (WebCore::NodeTraversal *)WebCore::Node::dispatchSubtreeModifiedEvent(v6);
  *(_QWORD *)v173 = 0;
  *((_QWORD *)v173 + 1) = 0;
  *((_QWORD *)v173 + 2) = 0;
  return result;
}

_QWORD *WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary(_QWORD *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v1 = (uint64_t *)this[5];
  v2 = v1[1];
  v3 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v3 + 2;
  if (*(_QWORD *)(v2 + 1808))
  {
    v4 = *v1;
    v5 = !v4 || (*(_WORD *)(v4 + 28) & 0x80) == 0;
    if (v5
      || (v6 = *(_QWORD *)(v4 + 200)) == 0
      || (v7 = *(_QWORD *)(v6 + 8)) == 0
      || (*(_WORD *)(v7 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
    {
      WebCore::Document::checkedSVGExtensions((WebCore::Document *)v2, &v20);
      v9 = v20;
      this = *(_QWORD **)(v20 + 56);
      v10 = *(unsigned int *)(v20 + 68);
      *(_QWORD *)(v20 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      if ((_DWORD)v10)
      {
        v11 = v9;
        v12 = 8 * v10;
        v13 = 8 * v10;
        v14 = this;
        v15 = this;
        do
        {
          v16 = *v15++;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 1240))(v16, &WebCore::SVGNames::hrefAttr);
          v13 -= 8;
        }
        while (v13);
        this = v14;
        v17 = v14;
        do
        {
          v18 = *v17;
          *v17 = 0;
          if (v18)
          {
            v19 = v17;
            if (*(_DWORD *)(v18 + 24) == 2)
            {
              this = v14;
              v9 = v11;
              if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v18);
                v17 = v19;
                this = v14;
              }
            }
            else
            {
              *(_DWORD *)(v18 + 24) -= 2;
              this = v14;
              v9 = v11;
            }
          }
          ++v17;
          v12 -= 8;
        }
        while (v12);
      }
      if (this)
        this = (_QWORD *)WTF::fastFree((WTF *)this, v8);
      if (v9)
      {
        if (!*(_DWORD *)v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195958E94);
        }
        --*(_DWORD *)v9;
      }
      v3 = *(_DWORD *)(v2 + 24) - 2;
    }
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 24) = v3;
  }
  else if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  return this;
}

void WebCore::ContainerNode::takeAllChildrenFrom(WebCore::ContainerNode *this, WebCore::Node **a2, const WebCore::Style::RuleSet *a3, WebCore::TreeScope *a4)
{
  WebCore::ContainerNode *v4;
  __int16 v6;
  WebCore::Node *v7;
  unsigned int v8;
  WTF *v9;
  unint64_t v10;
  WebCore::Node **v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  WebCore::Style::Invalidator *v22;
  int v23;
  _BOOL4 v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  const WebCore::Style::RuleSet *v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  void *v33;
  _BOOL4 v34;
  char v35;
  int v36;
  uint64_t *v38;
  uint64_t v39;
  WebCore::TreeScope *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::ChildListMutationAccumulator *v49;
  WebCore::Node **v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  _BYTE v68[88];
  WebCore::Style::Invalidator *v69[2];
  char v70;
  BOOL v71;
  BOOL v72;
  WebCore::ChildListMutationAccumulator *v73[2];
  __int128 v74;
  uint64_t v75;

  v4 = (WebCore::ContainerNode *)a2;
  v66 = (WTF *)v68;
  v67 = 11;
  v6 = *((_WORD *)a2 + 14);
  if ((v6 & 4) != 0)
  {
    v7 = a2[10];
    if (v7)
    {
      v8 = 0;
      v9 = (WTF *)v68;
      do
      {
        v10 = v8;
        if (v8 == (_DWORD)v67)
        {
          v12 = v8 + 1;
          v13 = v10 + (v10 >> 2);
          if (v13 >= 0x10)
            v14 = v13 + 1;
          else
            v14 = 16;
          if (v14 <= v12)
            v15 = v10 + 1;
          else
            v15 = v14;
          if (v15 < 0xC)
          {
            v66 = (WTF *)v68;
            LODWORD(v67) = 11;
            v16 = (WTF *)v68;
          }
          else
          {
            if (v15 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x195959688);
            }
            v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v15));
            LODWORD(v67) = v15;
            v66 = v16;
          }
          memcpy(v16, v9, 8 * v10);
          if (v68 != (_BYTE *)v9 && v9)
          {
            if (v66 == v9)
            {
              v66 = 0;
              LODWORD(v67) = 0;
            }
            WTF::fastFree(v9, a2);
          }
          v8 = HIDWORD(v67);
          v9 = v66;
          v11 = (WebCore::Node **)((char *)v66 + 8 * HIDWORD(v67));
        }
        else
        {
          v11 = (WebCore::Node **)((char *)v9 + 8 * v8);
        }
        *((_DWORD *)v7 + 6) += 2;
        *v11 = v7;
        HIDWORD(v67) = ++v8;
        v7 = (WebCore::Node *)*((_QWORD *)v7 + 7);
      }
      while (v7);
      v6 = *((_WORD *)v4 + 14);
    }
  }
  v17 = v6 & 0xF200;
  v18 = WebCore::ScriptDisallowedScope::s_count;
  v19 = ++WebCore::ScriptDisallowedScope::s_count;
  if (v17 != 45568)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 3364) & 1) == 0)
      goto LABEL_26;
    WebCore::ChildListMutationScope::ChildListMutationScope(v73, v4);
    v49 = v73[0];
    if (HIDWORD(v67))
    {
      if (!v73[0])
      {
LABEL_123:
        v19 = WebCore::ScriptDisallowedScope::s_count;
LABEL_26:
        v20 = v19 - 1;
        WebCore::ScriptDisallowedScope::s_count = v19 - 1;
        if ((*((_WORD *)v4 + 39) & 0x3FF) != 0)
        {
          WebCore::disconnectSubframes(v4, 1);
          v20 = WebCore::ScriptDisallowedScope::s_count;
        }
        v75 = 0;
        *(_OWORD *)v73 = 0u;
        v74 = 0u;
        LOBYTE(v73[0]) = 5;
        ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        WebCore::ScriptDisallowedScope::s_count = v20 + 1;
        v21 = *((_WORD *)v4 + 14);
        if ((v21 & 8) != 0)
          v22 = v4;
        else
          v22 = 0;
        v69[0] = v22;
        v69[1] = (WebCore::Style::Invalidator *)v73;
        if ((v21 & 8) == 0)
          goto LABEL_32;
        if ((*((_BYTE *)v4 + 22) & 8) == 0)
          goto LABEL_32;
        v54 = (_QWORD *)*((_QWORD *)v4 + 5);
        v55 = v54[1];
        if (!*(_QWORD *)(v55 + 1944) || *(_BYTE *)(v55 + 3405))
          goto LABEL_32;
        if ((*((_BYTE *)v4 + 70) & 4) != 0)
        {
          v63 = *v54;
          v64 = (*(_WORD *)(*v54 + 28) & 0x80) == 0 || v63 == 0;
          v65 = v63 + 216;
          if (v64)
            v65 = v55 + 1328;
          if (!*(_BYTE *)(*(_QWORD *)v65 + 236))
            goto LABEL_32;
        }
        v56 = *(_QWORD *)(v55 + 1272);
        if (v56 && (*(_BYTE *)(v56 + 70) & 4) != 0)
        {
LABEL_32:
          v23 = 0;
          v24 = 0;
          v70 = 0;
        }
        else
        {
          if (!*(_BYTE *)(v55 + 3362) && *(_BYTE *)(v55 + 3390))
          {
            v70 = *(_BYTE *)(v55 + 3391);
            if (!v70)
            {
              v23 = 0;
              v24 = 0;
              goto LABEL_33;
            }
          }
          else
          {
            v70 = 1;
          }
          v57 = *v54;
          v58 = (*(_WORD *)(v57 + 28) & 0x80) == 0 || v57 == 0;
          v59 = v57 + 216;
          v60 = v55 + 1328;
          if (!v58)
            v60 = v59;
          v24 = *(unsigned __int8 *)(*(_QWORD *)v60 + 236) != 0;
          v23 = 1;
        }
LABEL_33:
        v71 = v24;
        v72 = *((_QWORD *)v4 + 10) == 0;
        if (v23 && v24)
        {
          WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v69, (uint64_t)a2, a3);
          if ((*((_WORD *)v4 + 14) & 0x80) == 0)
          {
LABEL_36:
            v25 = (_QWORD *)*((_QWORD *)v4 + 5);
            if ((*((_BYTE *)v4 + 22) & 0x10) == 0)
            {
LABEL_37:
              v26 = v25[1];
              *(_DWORD *)(v26 + 24) += 2;
              WebCore::Document::nodeChildrenWillBeRemoved((WebCore::Document *)v26, v4);
              if (*(_DWORD *)(v26 + 24) == 2)
              {
                if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v26, v27);
              }
              else
              {
                *(_DWORD *)(v26 + 24) -= 2;
              }
              v29 = *((_QWORD *)v4 + 10);
              if (v29)
              {
                v30 = 0;
                do
                {
                  *(_DWORD *)(v29 + 24) += 2;
                  v31 = *(_WORD *)(v29 + 28);
                  v32 = *(_QWORD *)(v29 + 56);
                  if (v32)
                  {
                    *(_DWORD *)(v32 + 24) += 2;
                    WebCore::ContainerNode::removeBetween(v4, 0, (WebCore::Node *)v32, (WebCore::Node *)v29);
                    if (*(_DWORD *)(v32 + 24) == 2)
                    {
                      if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v32, v33);
                    }
                    else
                    {
                      *(_DWORD *)(v32 + 24) -= 2;
                    }
                  }
                  else
                  {
                    WebCore::ContainerNode::removeBetween(v4, 0, 0, (WebCore::Node *)v29);
                  }
                  v34 = (*((_BYTE *)v4 + 22) & 0x18) == 0;
                  if ((*(_BYTE *)(v29 + 22) & 8) != 0)
                    WebCore::notifyNodeRemovedFromDocument((uint64_t)v4, v34, v29);
                  else
                    WebCore::notifyNodeRemovedFromTree((uint64_t)v4, v34, v29);
                  if (*(_DWORD *)(v29 + 24) == 2)
                  {
                    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v29, v27);
                  }
                  else
                  {
                    *(_DWORD *)(v29 + 24) -= 2;
                  }
                  v30 |= (v31 & 8) >> 3;
                  v29 = *((_QWORD *)v4 + 10);
                }
                while (v29);
                if ((v30 & 1) != 0)
                  v35 = 2;
                else
                  v35 = 1;
              }
              else
              {
                v35 = 1;
              }
              BYTE1(v75) = v35;
              if (v70)
              {
                if (v71)
                  WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v69, (uint64_t)v27, v28);
                WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v69);
              }
              (*(void (**)(WebCore::ContainerNode *, WebCore::ChildListMutationAccumulator **))(*(_QWORD *)v4 + 376))(v4, v73);
              --WebCore::ScriptDisallowedScope::s_count;
              v36 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
                && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
              {
                WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v69, a2);
                v36 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              }
              WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v36 - 1;
              goto LABEL_69;
            }
LABEL_143:
            v61 = *v25;
            if ((*(_WORD *)(*v25 + 28) & 0x80) == 0)
              v61 = 0;
            v62 = *(_QWORD *)(v61 + 224);
            if (v62)
            {
              ++*(_DWORD *)(v62 + 12);
              *(_BYTE *)(v62 + 9) = 1;
            }
            goto LABEL_37;
          }
        }
        else if ((v21 & 0x80) == 0)
        {
          goto LABEL_36;
        }
        v25 = (_QWORD *)*((_QWORD *)v4 + 5);
        goto LABEL_143;
      }
      v50 = (WebCore::Node **)v66;
      v51 = 8 * HIDWORD(v67);
      do
      {
        if (v49 && *((_QWORD *)v49 + 10))
        {
          WebCore::ChildListMutationAccumulator::willRemoveChild(v49, *v50);
          v49 = v73[0];
        }
        ++v50;
        v51 -= 8;
      }
      while (v51);
    }
    v73[0] = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v49, a2);
        WTF::fastFree(v52, v53);
      }
      else
      {
        --*(_DWORD *)v49;
      }
    }
    goto LABEL_123;
  }
  if ((*((_QWORD *)v4 + 9) & 0x3FFFFFFFFFFFFFFLL) != 0
    || (v45 = *((_QWORD *)v4 + 1)) != 0 && (*(_BYTE *)(v45 + 8) & 3) == 0 && *(_QWORD *)v45)
  {
    __break(0xC471u);
    JUMPOUT(0x195959580);
  }
  v46 = *((_QWORD *)v4 + 10);
  if (v46)
  {
    do
    {
      *(_DWORD *)(v46 + 24) += 2;
      v47 = *(_QWORD *)(v46 + 56);
      if (v47)
      {
        *(_DWORD *)(v47 + 24) += 2;
        WebCore::ContainerNode::removeBetween(v4, 0, (WebCore::Node *)v47, (WebCore::Node *)v46);
        if (*(_DWORD *)(v47 + 24) == 2)
        {
          if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v47, a2);
        }
        else
        {
          *(_DWORD *)(v47 + 24) -= 2;
        }
      }
      else
      {
        WebCore::ContainerNode::removeBetween(v4, 0, 0, (WebCore::Node *)v46);
      }
      if (*(_DWORD *)(v46 + 24) == 2)
      {
        if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v46, a2);
      }
      else
      {
        *(_DWORD *)(v46 + 24) -= 2;
      }
      v46 = *((_QWORD *)v4 + 10);
    }
    while (v46);
    v18 = WebCore::ScriptDisallowedScope::s_count - 1;
  }
  v48 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
  *(_QWORD *)(v48 + 1288) = ++WebCore::Document::s_globalTreeVersion;
  WebCore::ScriptDisallowedScope::s_count = v18;
LABEL_69:
  v38 = (uint64_t *)v66;
  if (HIDWORD(v67))
  {
    v39 = 8 * HIDWORD(v67);
    do
    {
      a2 = (WebCore::Node **)*v38;
      if (!*(_QWORD *)(*v38 + 32))
      {
        v40 = (WebCore::TreeScope *)*((_QWORD *)this + 5);
        if (a2[5] != v40)
        {
          WebCore::Node::moveTreeToNewScope(*v38, a2[5], v40, a4);
          a2 = (WebCore::Node **)*v38;
        }
        WebCore::ContainerNode::parserAppendChild((uint64_t)this, (WebCore::Node *)a2, v40, a4);
      }
      ++v38;
      v39 -= 8;
    }
    while (v39);
    v41 = v66;
    v42 = 8 * HIDWORD(v67);
    do
    {
      v43 = *(_QWORD *)v41;
      *(_QWORD *)v41 = 0;
      if (v43)
      {
        if (*(_DWORD *)(v43 + 24) == 2)
        {
          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v43, a2);
        }
        else
        {
          *(_DWORD *)(v43 + 24) -= 2;
        }
      }
      v41 = (WTF *)((char *)v41 + 8);
      v42 -= 8;
    }
    while (v42);
    v38 = (uint64_t *)v66;
  }
  if (v68 != (_BYTE *)v38 && v38 != 0)
    WTF::fastFree((WTF *)v38, a2);
}

uint64_t WebCore::ContainerNode::ensurePreInsertionValidity@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, WebCore::Node *a3@<X2>, _QWORD *a4@<X8>)
{
  _WORD *v6;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = (_WORD *)this;
  *(_DWORD *)(this + 24) += 2;
  v8 = this;
  do
  {
    if ((WebCore::Node *)v8 == a2)
      goto LABEL_51;
    this = v8;
    v8 = *(_QWORD *)(v8 + 32);
    if (v8)
    {
LABEL_4:
      *(_DWORD *)(v8 + 24) += 2;
      goto LABEL_5;
    }
    v12 = *(_WORD *)(this + 28);
    if ((v12 & 0x80) != 0)
    {
      v13 = *(_QWORD *)(this + 200);
      if (!v13)
      {
LABEL_42:
        v8 = 0;
        goto LABEL_5;
      }
      v8 = *(_QWORD *)(v13 + 8);
      if (v8)
        goto LABEL_4;
    }
    else
    {
      if ((v12 & 0xF000) != 0xB000)
        goto LABEL_42;
      v15 = this;
      if ((*(unsigned int (**)(void))(*(_QWORD *)this + 392))() && (v14 = *(_QWORD *)(v15 + 96)) != 0)
      {
        v8 = *(_QWORD *)(v14 + 8);
        this = v15;
        if (v8)
          goto LABEL_4;
      }
      else
      {
        v8 = 0;
        this = v15;
      }
    }
LABEL_5:
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
  }
  while (v8);
  v9 = *((unsigned __int16 *)a2 + 14);
  if ((v9 & 0xA) != 0 && (v6[14] & 8) != 0)
  {
    if (a3 && *((_WORD **)a3 + 4) != v6)
      goto LABEL_37;
LABEL_14:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return this;
  }
  if ((~v9 & 0x408) == 0)
  {
    this = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 368))(a2);
    if ((_DWORD)this)
      goto LABEL_53;
  }
  if (a3 && *((_WORD **)a3 + 4) != v6)
  {
LABEL_37:
    *(_BYTE *)a4 = 5;
    a4[1] = 0;
    goto LABEL_54;
  }
  if ((v6[14] & 0xF000) == 0x9000)
  {
    this = WebCore::Document::canAcceptChild((uint64_t)v6, (uint64_t)a2, (uint64_t)a3, 1);
    if ((this & 1) != 0)
      goto LABEL_14;
    *(_BYTE *)a4 = 1;
    a4[1] = 0;
    *((_BYTE *)a4 + 16) = 1;
  }
  else
  {
    v10 = *((unsigned __int16 *)a2 + 14);
    if ((v10 & 0xF000) == 0xB000)
    {
      if ((v10 & 4) == 0)
        goto LABEL_14;
      v11 = *((_QWORD *)a2 + 10);
      if (!v11)
        goto LABEL_14;
      *(_DWORD *)(v11 + 24) += 2;
      while (1)
      {
        a2 = (WebCore::Node *)v11;
        this = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v6 + 240))(v6, *(unsigned __int16 *)(v11 + 28) >> 12);
        if (!(_DWORD)this)
          break;
        v11 = *(_QWORD *)(v11 + 56);
        if (v11)
          *(_DWORD *)(v11 + 24) += 2;
        if (*((_DWORD *)a2 + 6) == 2)
        {
          if ((*((_WORD *)a2 + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef(a2);
        }
        else
        {
          *((_DWORD *)a2 + 6) -= 2;
        }
        if (!v11)
          goto LABEL_14;
      }
LABEL_51:
      if (*((_DWORD *)a2 + 6) == 2)
      {
        if ((*((_WORD *)a2 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(a2);
      }
      else
      {
        *((_DWORD *)a2 + 6) -= 2;
      }
    }
    else
    {
      this = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v6 + 240))(v6, v10 >> 12);
      if ((this & 1) != 0)
        goto LABEL_14;
    }
LABEL_53:
    *(_BYTE *)a4 = 1;
    a4[1] = 0;
LABEL_54:
    *((_BYTE *)a4 + 16) = 1;
  }
  return this;
}

WebCore::Node *WebCore::ContainerNode::ensurePreInsertionValidityForPhantomDocumentFragment@<X0>(WebCore::Node *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WebCore::Node *v5;
  WebCore::Node **v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WebCore::Node **v12;
  __int16 v13;

  v5 = this;
  v7 = *(WebCore::Node ***)a2;
  v8 = *(unsigned int *)(a2 + 12);
  if ((*((_WORD *)this + 14) & 0xF000) != 0x9000)
  {
LABEL_2:
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        this = (WebCore::Node *)WebCore::checkAcceptChild(a4, v5, *v7, a3, 1, 1);
        if (*(_BYTE *)(a4 + 16))
          return this;
        ++v7;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_6:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return this;
  }
  if (!(_DWORD)v8)
    goto LABEL_6;
  v10 = 0;
  v11 = 8 * v8;
  v12 = *(WebCore::Node ***)a2;
  while (1)
  {
    v13 = *((_WORD *)*v12 + 14);
    if ((v13 & 8) != 0 && (v10 & 1) != 0)
      break;
    v10 |= (v13 & 8) >> 3;
    ++v12;
    v11 -= 8;
    if (!v11)
      goto LABEL_2;
  }
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return this;
}

WebCore::ChildListMutationScope *WebCore::ChildListMutationScope::ChildListMutationScope(WebCore::ChildListMutationAccumulator **this, WebCore::ContainerNode *a2)
{
  void *v4;
  WebCore::ChildListMutationAccumulator *v5;
  WebCore::ChildListMutationAccumulator *v6;
  int v7;
  WTF *v8;
  void *v9;
  void *v10;
  WTF *v11;
  void *v12;
  WebCore::ChildListMutationAccumulator *v13;

  *this = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 3364) & 1) != 0)
  {
    WebCore::ChildListMutationAccumulator::getOrCreate(a2, (uint64_t *)&v13);
    v5 = v13;
    v13 = 0;
    v6 = *this;
    *this = v5;
    if (v6)
    {
      v7 = *(_DWORD *)v6 - 1;
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v6, v4);
        WTF::fastFree(v8, v9);
        v6 = v13;
        v13 = 0;
        if (!v6)
          return (WebCore::ChildListMutationScope *)this;
        v7 = *(_DWORD *)v6 - 1;
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v6, v10);
          WTF::fastFree(v11, v12);
          return (WebCore::ChildListMutationScope *)this;
        }
      }
      *(_DWORD *)v6 = v7;
    }
  }
  return (WebCore::ChildListMutationScope *)this;
}

void WebCore::ChildListMutationScope::~ChildListMutationScope(WebCore::ChildListMutationAccumulator **this, void *a2)
{
  WebCore::ChildListMutationAccumulator *v3;
  WTF *v4;
  void *v5;

  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

unsigned int *WebCore::ContainerNode::parserInsertBefore(unsigned int *this, uint64_t a2, WebCore::Node *a3, WebCore::TreeScope *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __n128 v9;
  __int16 v10;
  char v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  char v17;
  __int16 v18;
  WebCore::Style::Invalidator *v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  WebCore::TreeScope *v30;
  WebCore::Node *v31;
  int v32;
  void *v33;
  WebCore::ChildListMutationAccumulator *v34;
  void *v35;
  const WebCore::Style::RuleSet *v36;
  int v37;
  void *v39;
  WTF *v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  WTF *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  WebCore::Style::Invalidator *v63[2];
  char v64;
  BOOL v65;
  BOOL v66;
  WTF *v67;
  uint64_t v68;
  _BYTE v69[88];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  WebCore::ChildListMutationAccumulator *v73[2];
  int v74;
  _BYTE v75[73];
  uint64_t v76;

  if (a3 == (WebCore::Node *)a2)
    return this;
  *(_QWORD *)&v75[65] = v4;
  v76 = v5;
  if ((*((_QWORD *)a3 + 6) & 0xFFFFFFFFFFFFLL) == a2)
    return this;
  v8 = (uint64_t)this;
  v9.n128_u64[1] = 0;
  v70 = 0u;
  v71 = 0u;
  v10 = *(_WORD *)(a2 + 28);
  if ((v10 & 2) != 0)
    v11 = 2;
  else
    v11 = 7;
  if ((v10 & 8) != 0)
    v12 = 0;
  else
    v12 = v11;
  v13 = *((_WORD *)a3 + 14);
  LOBYTE(v70) = v12;
  if ((v10 & 8) != 0)
    v14 = a2;
  else
    v14 = 0;
  v72 = 0;
  *((_QWORD *)&v70 + 1) = v14;
  v15 = a3;
  do
    v15 = (WebCore::Node *)(*((_QWORD *)v15 + 6) & 0xFFFFFFFFFFFFLL);
  while (v15 && (*((_WORD *)v15 + 14) & 8) == 0);
  *(_QWORD *)&v71 = v15;
  v16 = a3;
  if ((v13 & 8) == 0)
  {
    v16 = a3;
    do
      v16 = (WebCore::Node *)*((_QWORD *)v16 + 7);
    while (v16 && (*((_WORD *)v16 + 14) & 8) == 0);
  }
  *((_QWORD *)&v71 + 1) = v16;
  if ((v10 & 8) != 0)
    v17 = 2;
  else
    v17 = 1;
  BYTE1(v72) = v17;
  v67 = (WTF *)v69;
  v9.n128_u64[0] = 11;
  v68 = 11;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  v18 = *((_WORD *)this + 14);
  if ((v18 & 8) != 0)
    v19 = (WebCore::Style::Invalidator *)this;
  else
    v19 = 0;
  v63[0] = v19;
  v63[1] = (WebCore::Style::Invalidator *)&v70;
  if ((v18 & 8) == 0)
    goto LABEL_23;
  if ((*((_BYTE *)this + 22) & 8) == 0)
    goto LABEL_23;
  v47 = (_QWORD *)*((_QWORD *)this + 5);
  v48 = v47[1];
  if (!*(_QWORD *)(v48 + 1944) || *(_BYTE *)(v48 + 3405))
    goto LABEL_23;
  if ((*((_BYTE *)this + 70) & 4) != 0)
  {
    v59 = *v47;
    v60 = (*(_WORD *)(*v47 + 28) & 0x80) == 0 || v59 == 0;
    v61 = v59 + 216;
    if (v60)
      v61 = v48 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v61 + 236))
      goto LABEL_23;
  }
  v49 = *(_QWORD *)(v48 + 1272);
  if (v49 && (*(_BYTE *)(v49 + 70) & 4) != 0)
  {
LABEL_23:
    v20 = 0;
    v21 = 0;
    v64 = 0;
  }
  else
  {
    if (!*(_BYTE *)(v48 + 3362) && *(_BYTE *)(v48 + 3390))
    {
      v64 = *(_BYTE *)(v48 + 3391);
      if (!v64)
      {
        v20 = 0;
        v21 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v64 = 1;
    }
    v50 = *v47;
    v51 = (*(_WORD *)(v50 + 28) & 0x80) == 0 || v50 == 0;
    v52 = v50 + 216;
    v53 = v48 + 1328;
    if (!v51)
      v53 = v52;
    v21 = *(unsigned __int8 *)(*(_QWORD *)v53 + 236) != 0;
    v20 = 1;
  }
LABEL_24:
  v65 = v21;
  v22 = (uint64_t *)(this + 20);
  v66 = *((_QWORD *)this + 10) == 0;
  if (v20 && v21)
  {
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v63, a2, a3);
    if ((*(_WORD *)(v8 + 28) & 0x80) != 0)
      goto LABEL_97;
  }
  else if ((v18 & 0x80) != 0)
  {
    goto LABEL_97;
  }
  if ((*(_BYTE *)(v8 + 22) & 0x10) == 0)
  {
    v23 = *(_QWORD **)(v8 + 40);
    goto LABEL_29;
  }
LABEL_97:
  v23 = *(_QWORD **)(v8 + 40);
  v54 = *v23;
  if ((*(_WORD *)(*v23 + 28) & 0x80) == 0)
    v54 = 0;
  v55 = *(_QWORD *)(v54 + 224);
  if (v55)
  {
    ++*(_DWORD *)(v55 + 12);
    *(_BYTE *)(v55 + 9) = 0;
  }
LABEL_29:
  v24 = v23[1];
  if (v24 != *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8))
  {
    WebCore::Document::adoptNode(v24, (WebCore::Node *)a2, (uint64_t)a3, a4, (uint64_t)v73, v9);
    if (v74 != -1)
      ((void (*)(_BYTE *, WebCore::ChildListMutationAccumulator **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4NodeENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v74])(v75, v73);
    v74 = -1;
  }
  v25 = WebCore::ScriptDisallowedScope::s_count++;
  v26 = *((_QWORD *)a3 + 6);
  v27 = v26 & 0xFFFFFFFFFFFFLL;
  if ((v26 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *(_DWORD *)((v26 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    v28 = v26 & 0xFFFF000000000000 | a2;
    v22 = (uint64_t *)(v27 + 56);
  }
  else
  {
    v28 = v26 & 0xFFFF000000000000 | a2;
  }
  *v22 = a2;
  *((_QWORD *)a3 + 6) = v28;
  *(_QWORD *)(a2 + 32) = v8;
  v29 = (uint64_t *)(a2 + 32);
  *(_DWORD *)(a2 + 24) |= 1u;
  *(_QWORD *)(a2 + 48) = v27 | ((unint64_t)*(unsigned __int16 *)(a2 + 54) << 48);
  *(_QWORD *)(a2 + 56) = a3;
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v27, (void *)a2);
        v25 = WebCore::ScriptDisallowedScope::s_count - 1;
      }
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  WebCore::ScriptDisallowedScope::s_count = v25;
  v30 = *(WebCore::TreeScope **)(v8 + 40);
  v31 = *(WebCore::Node **)(a2 + 40);
  if (v31 != v30)
    WebCore::Node::moveTreeToNewScope(a2, v31, v30, a4);
  v32 = *(_WORD *)(a2 + 78) & 0x3FF;
  if ((*(_WORD *)(a2 + 78) & 0x3FF) != 0)
  {
    if ((*(_WORD *)(a2 + 28) & 0x80) != 0)
    {
      v62 = *(_QWORD *)(a2 + 200);
      if (!v62)
        goto LABEL_41;
      v29 = (uint64_t *)(v62 + 8);
    }
    v56 = *v29;
    if (v56)
    {
      do
      {
        WebCore::Node::incrementConnectedSubframeCount(v56, v32);
        if ((*(_WORD *)(v56 + 28) & 0x80) != 0)
        {
          v58 = *(_QWORD *)(v56 + 200);
          if (!v58)
            break;
          v57 = (uint64_t *)(v58 + 8);
        }
        else
        {
          v57 = (uint64_t *)(v56 + 32);
        }
        v56 = *v57;
      }
      while (*v57);
    }
  }
LABEL_41:
  WebCore::ChildListMutationScope::ChildListMutationScope(v73, (WebCore::ContainerNode *)v8);
  v34 = v73[0];
  if (v73[0])
  {
    if (*((_QWORD *)v73[0] + 10))
    {
      WebCore::ChildListMutationAccumulator::childAdded(v73[0], (WebCore::Node *)a2);
      v34 = v73[0];
      v73[0] = 0;
      if (!v34)
        goto LABEL_42;
    }
    else
    {
      v73[0] = 0;
    }
    if (*(_DWORD *)v34 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v34, v33);
      WTF::fastFree(v45, v46);
    }
    else
    {
      --*(_DWORD *)v34;
    }
  }
LABEL_42:
  WebCore::notifyChildNodeInserted(v8, a2, (uint64_t)&v67);
  if (v64)
  {
    if (v65)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v63, (uint64_t)v35, v36);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v63);
  }
  --WebCore::ScriptDisallowedScope::s_count;
  v37 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v73, v35);
    v37 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v37 - 1;
  this = (unsigned int *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 376))(v8, &v70);
  v40 = v67;
  if (HIDWORD(v68))
  {
    v41 = 8 * HIDWORD(v68);
    do
    {
      v42 = *(unsigned int **)v40;
      v40 = (WTF *)((char *)v40 + 8);
      this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 280))(v42);
      v41 -= 8;
    }
    while (v41);
    v40 = v67;
    if (HIDWORD(v68))
    {
      v43 = 8 * HIDWORD(v68);
      do
      {
        this = *(unsigned int **)v40;
        *(_QWORD *)v40 = 0;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, v39);
          }
          else
          {
            this[6] -= 2;
          }
        }
        v40 = (WTF *)((char *)v40 + 8);
        v43 -= 8;
      }
      while (v43);
      v40 = v67;
    }
  }
  if (v69 != (_BYTE *)v40 && v40 != 0)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    return (unsigned int *)WTF::fastFree(v40, v39);
  }
  return this;
}

WebCore::ChildListMutationAccumulator *WebCore::ContainerNode::parserRemoveChild(WebCore::ContainerNode *this, WebCore::Node *a2)
{
  void *v4;
  WebCore::ChildListMutationAccumulator *result;
  uint64_t v6;
  const WebCore::Style::RuleSet *v7;
  __int16 v8;
  WebCore::Style::Invalidator *v9;
  int v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  void *v19;
  const WebCore::Style::RuleSet *v20;
  int v21;
  WTF *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  WebCore::Style::Invalidator *v36[2];
  char v37;
  BOOL v38;
  BOOL v39;
  WebCore::ChildListMutationAccumulator *v40[2];
  __int128 v41;
  uint64_t v42;

  *((_DWORD *)a2 + 6) += 2;
  ++WebCore::ScriptDisallowedScope::s_count;
  WebCore::ChildListMutationScope::ChildListMutationScope(v40, this);
  result = v40[0];
  if (v40[0])
  {
    if (*((_QWORD *)v40[0] + 10))
    {
      WebCore::ChildListMutationAccumulator::willRemoveChild(v40[0], a2);
      result = v40[0];
      v40[0] = 0;
      if (!result)
        goto LABEL_2;
    }
    else
    {
      v40[0] = 0;
    }
    if (*(_DWORD *)result == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(result, v4);
      result = (WebCore::ChildListMutationAccumulator *)WTF::fastFree(v22, v23);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
LABEL_2:
  --WebCore::ScriptDisallowedScope::s_count;
  if ((*((_WORD *)this + 39) & 0x3FF) != 0)
    result = (WebCore::ChildListMutationAccumulator *)WebCore::disconnectSubframes(this, 1);
  if (*((WebCore::ContainerNode **)a2 + 4) == this)
  {
    v42 = 0;
    *(_OWORD *)v40 = 0u;
    v41 = 0u;
    WebCore::makeChildChangeForRemoval((uint64_t)v40, (uint64_t)a2);
    ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    ++WebCore::ScriptDisallowedScope::s_count;
    v8 = *((_WORD *)this + 14);
    if ((v8 & 8) != 0)
      v9 = this;
    else
      v9 = 0;
    v36[0] = v9;
    v36[1] = (WebCore::Style::Invalidator *)v40;
    if ((v8 & 8) == 0)
      goto LABEL_9;
    if ((*((_BYTE *)this + 22) & 8) == 0)
      goto LABEL_9;
    v24 = (_QWORD *)*((_QWORD *)this + 5);
    v25 = v24[1];
    if (!*(_QWORD *)(v25 + 1944) || *(_BYTE *)(v25 + 3405))
      goto LABEL_9;
    if ((*((_BYTE *)this + 70) & 4) != 0)
    {
      v33 = *v24;
      v34 = (*(_WORD *)(*v24 + 28) & 0x80) == 0 || v33 == 0;
      v35 = v33 + 216;
      if (v34)
        v35 = v25 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v35 + 236))
        goto LABEL_9;
    }
    v26 = *(_QWORD *)(v25 + 1272);
    if (v26 && (*(_BYTE *)(v26 + 70) & 4) != 0)
    {
LABEL_9:
      v10 = 0;
      v11 = 0;
      v37 = 0;
    }
    else
    {
      if (!*(_BYTE *)(v25 + 3362) && *(_BYTE *)(v25 + 3390))
      {
        v37 = *(_BYTE *)(v25 + 3391);
        if (!v37)
        {
          v10 = 0;
          v11 = 0;
          goto LABEL_10;
        }
      }
      else
      {
        v37 = 1;
      }
      v27 = *v24;
      v28 = (*(_WORD *)(v27 + 28) & 0x80) == 0 || v27 == 0;
      v29 = v27 + 216;
      v30 = v25 + 1328;
      if (!v28)
        v30 = v29;
      v11 = *(unsigned __int8 *)(*(_QWORD *)v30 + 236) != 0;
      v10 = 1;
    }
LABEL_10:
    v38 = v11;
    v39 = *((_QWORD *)this + 10) == 0;
    if (v10 && v11)
    {
      WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v36, v6, v7);
      if ((*((_WORD *)this + 14) & 0x80) != 0)
        goto LABEL_72;
    }
    else if ((v8 & 0x80) != 0)
    {
      goto LABEL_72;
    }
    if ((*((_BYTE *)this + 22) & 0x10) == 0)
    {
      v12 = (_QWORD *)*((_QWORD *)this + 5);
      goto LABEL_15;
    }
LABEL_72:
    v12 = (_QWORD *)*((_QWORD *)this + 5);
    v31 = *v12;
    if ((*(_WORD *)(*v12 + 28) & 0x80) == 0)
      v31 = 0;
    v32 = *(_QWORD *)(v31 + 224);
    if (v32)
    {
      ++*(_DWORD *)(v32 + 12);
      *(_BYTE *)(v32 + 9) = 0;
    }
LABEL_15:
    v13 = v12[1];
    *(_DWORD *)(v13 + 24) += 2;
    WebCore::Document::nodeWillBeRemoved((WebCore::Document *)v13, a2);
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
    v15 = *((_QWORD *)a2 + 6);
    v16 = v15 & 0xFFFFFFFFFFFFLL;
    if ((v15 & 0xFFFFFFFFFFFFLL) != 0)
      *(_DWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
    v17 = *((_QWORD *)a2 + 7);
    if (v17)
      *(_DWORD *)(v17 + 24) += 2;
    WebCore::ContainerNode::removeBetween(this, (WebCore::Node *)v16, (WebCore::Node *)v17, a2);
    v18 = (*((_BYTE *)this + 22) & 0x18) == 0;
    if ((*((_BYTE *)a2 + 22) & 8) != 0)
    {
      WebCore::notifyNodeRemovedFromDocument((uint64_t)this, v18, (uint64_t)a2);
      if (v17)
        goto LABEL_23;
    }
    else
    {
      WebCore::notifyNodeRemovedFromTree((uint64_t)this, v18, (uint64_t)a2);
      if (v17)
      {
LABEL_23:
        if (*(_DWORD *)(v17 + 24) == 2)
        {
          if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v17, v19);
        }
        else
        {
          *(_DWORD *)(v17 + 24) -= 2;
        }
      }
    }
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v16, v19);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
    if (v37)
    {
      if (v38)
        WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v36, (uint64_t)v19, v20);
      WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v36);
    }
    --WebCore::ScriptDisallowedScope::s_count;
    v21 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
      && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
    {
      WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v36, v19);
      v21 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    }
    WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v21 - 1;
    result = (WebCore::ChildListMutationAccumulator *)(*(uint64_t (**)(WebCore::ContainerNode *, WebCore::ChildListMutationAccumulator **))(*(_QWORD *)this + 376))(this, v40);
  }
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      return (WebCore::ChildListMutationAccumulator *)WebCore::Node::removedLastRef(a2, v4);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
  return result;
}

WebCore::ChildListMutationAccumulator *WebCore::ContainerNode::replaceAll(WebCore::ContainerNode *this, WebCore::Node *a2)
{
  WebCore::ChildListMutationAccumulator *result;
  WTF::StringImpl *v4;
  int v5;
  void *v6;
  WTF *v7;
  void *v8;
  void *v9;
  const WebCore::Style::RuleSet *v10;
  WebCore::TreeScope *v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  WTF *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF *v22;
  void *v23;
  const WebCore::Style::RuleSet *v24;
  Inspector::InspectorDebuggerAgent **v25;
  uint64_t v26;
  WebCore::Node *v27;
  WTF *v28;
  __int16 v29;
  WebCore::Style::Invalidator *v30;
  int v31;
  _BOOL4 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  int v49;
  WebCore::Node *v50;
  _BOOL4 v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v59;
  _QWORD *v60;
  WebCore::TreeScope *v61;
  WebCore::Node *v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::WindowProxy *v67;
  WebCore::DOMWrapperWorld *v68;
  WebCore::DOMWrapperWorld **v69;
  WebCore::Document *v70;
  WebCore::ChildListMutationAccumulator *v71;
  uint64_t v72;
  WebCore::RenderView *v73;
  WebCore::Node *v74;
  WebCore::Element *RenderingAncestor;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  char v93;
  __int16 v94;
  WebCore::Style::Invalidator *v95;
  int v96;
  _BOOL4 v97;
  _QWORD *v98;
  uint64_t v99;
  WebCore::TreeScope *v101;
  WebCore::Node *v102;
  int v103;
  uint64_t v104;
  int v105;
  void *v106;
  WebCore::ChildListMutationAccumulator *v107;
  void *v108;
  const WebCore::Style::RuleSet *v109;
  int v110;
  WebCore::Node *v111;
  WTF *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  WTF *v116;
  void *v118;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  Inspector::InspectorDebuggerAgent **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  void *v141;
  uint64_t v142;
  _BOOL4 v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v150;
  uint64_t v151;
  _BYTE v152[88];
  WebCore::ChildListMutationAccumulator *v153;
  _BYTE v154[8];
  WTF::StringImpl *v155;
  char v156;
  WebCore::Style::Invalidator *v157;
  __int128 *v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  _BYTE v167[128];
  WebCore::ChildListMutationAccumulator *v168[2];

  if (!a2)
  {
    WebCore::ChildListMutationScope::ChildListMutationScope(&v165, this);
    WebCore::ContainerNode::removeChildren((uint64_t)this);
    result = v165;
    v165 = 0;
    if (!result)
      return result;
    v5 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(result, v6);
      return (WebCore::ChildListMutationAccumulator *)WTF::fastFree(v7, v8);
    }
    goto LABEL_6;
  }
  if (!*((_QWORD *)this + 10))
  {
    result = (WebCore::ChildListMutationAccumulator *)WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)v154, this, (uint64_t)a2);
    if (!v156)
      return result;
    result = v155;
    if (!v155)
      return result;
    v5 = *(_DWORD *)v155 - 2;
    if (*(_DWORD *)v155 == 2)
      return (WebCore::ChildListMutationAccumulator *)WTF::StringImpl::destroy(v155, v4);
LABEL_6:
    *(_DWORD *)result = v5;
    return result;
  }
  *((_DWORD *)this + 6) += 2;
  WebCore::ChildListMutationScope::ChildListMutationScope(&v153, this);
  v150 = (WTF *)v152;
  v151 = 11;
  v12 = *((_WORD *)this + 14);
  if ((v12 & 4) != 0)
  {
    v13 = *((_QWORD *)this + 10);
    if (v13)
    {
      v14 = 0;
      v15 = (WTF *)v152;
      do
      {
        v16 = v14;
        if (v14 == (_DWORD)v151)
        {
          v18 = v14 + 1;
          v19 = v16 + (v16 >> 2);
          if (v19 >= 0x10)
            v20 = v19 + 1;
          else
            v20 = 16;
          if (v20 <= v18)
            v21 = v16 + 1;
          else
            v21 = v20;
          if (v21 < 0xC)
          {
            v150 = (WTF *)v152;
            LODWORD(v151) = 11;
            v22 = (WTF *)v152;
          }
          else
          {
            if (v21 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19595A9FCLL);
            }
            v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * v21));
            LODWORD(v151) = v21;
            v150 = v22;
          }
          memcpy(v22, v15, 8 * v16);
          if (v152 != (_BYTE *)v15 && v15)
          {
            if (v150 == v15)
            {
              v150 = 0;
              LODWORD(v151) = 0;
            }
            WTF::fastFree(v15, v9);
          }
          v14 = HIDWORD(v151);
          v15 = v150;
          v17 = (_QWORD *)((char *)v150 + 8 * HIDWORD(v151));
        }
        else
        {
          v17 = (_QWORD *)((char *)v15 + 8 * v14);
        }
        *(_DWORD *)(v13 + 24) += 2;
        *v17 = v13;
        HIDWORD(v151) = ++v14;
        v13 = *(_QWORD *)(v13 + 56);
      }
      while (v13);
      v12 = *((_WORD *)this + 14);
    }
  }
  if ((v12 & 0xF200) == 0xB200)
  {
    v41 = ++WebCore::ScriptDisallowedScope::s_count;
    if ((*((_QWORD *)this + 9) & 0x3FFFFFFFFFFFFFFLL) != 0
      || (v42 = *((_QWORD *)this + 1)) != 0 && (*(_BYTE *)(v42 + 8) & 3) == 0 && *(_QWORD *)v42)
    {
      __break(0xC471u);
      JUMPOUT(0x19595A988);
    }
    v43 = *((_QWORD *)this + 10);
    if (v43)
    {
      v36 = 0;
      do
      {
        *(_DWORD *)(v43 + 24) += 2;
        v44 = *(_WORD *)(v43 + 28);
        v45 = *(_QWORD *)(v43 + 56);
        if (v45)
        {
          *(_DWORD *)(v45 + 24) += 2;
          WebCore::ContainerNode::removeBetween(this, 0, (WebCore::Node *)v45, (WebCore::Node *)v43);
          if (*(_DWORD *)(v45 + 24) == 2)
          {
            if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v45);
          }
          else
          {
            *(_DWORD *)(v45 + 24) -= 2;
          }
        }
        else
        {
          WebCore::ContainerNode::removeBetween(this, 0, 0, (WebCore::Node *)v43);
        }
        if (*(_DWORD *)(v43 + 24) == 2)
        {
          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v43);
        }
        else
        {
          *(_DWORD *)(v43 + 24) -= 2;
        }
        v36 |= (v44 & 8) >> 3;
        v43 = *((_QWORD *)this + 10);
      }
      while (v43);
      v41 = WebCore::ScriptDisallowedScope::s_count;
    }
    else
    {
      v36 = 0;
    }
    v47 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    *(_QWORD *)(v47 + 1288) = ++WebCore::Document::s_globalTreeVersion;
    v48 = v41 - 1;
    v49 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    v50 = a2;
    goto LABEL_186;
  }
  WebCore::ChildListMutationScope::ChildListMutationScope(&v165, this);
  if (HIDWORD(v151))
  {
    v25 = (Inspector::InspectorDebuggerAgent **)v150;
    v26 = 8 * HIDWORD(v151);
    do
    {
      v27 = *v25;
      if (v165 && *((_QWORD *)v165 + 10))
      {
        WebCore::ChildListMutationAccumulator::willRemoveChild(v165, v27);
        v27 = *v25;
      }
      WebCore::Node::notifyMutationObserversNodeWillDetach(v27);
      WebCore::dispatchChildRemovalEvents(v25++);
      v26 -= 8;
    }
    while (v26);
  }
  v28 = v165;
  v165 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v28, v23);
      WTF::fastFree(v37, v38);
    }
    else
    {
      --*(_DWORD *)v28;
    }
  }
  if ((*((_WORD *)this + 39) & 0x3FF) != 0)
    WebCore::disconnectSubframes(this, 1);
  v162 = 0u;
  v163 = 0u;
  LOBYTE(v162) = 5;
  v164 = 1;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  v29 = *((_WORD *)this + 14);
  if ((v29 & 8) != 0)
    v30 = this;
  else
    v30 = 0;
  v157 = v30;
  v158 = &v162;
  if ((v29 & 8) != 0)
  {
    v51 = WebCore::Element::needsStyleInvalidation(this);
    v159 = v51;
    if (v51)
    {
      v52 = (_QWORD *)*((_QWORD *)v157 + 5);
      if (*v52)
        v53 = (*(_WORD *)(*v52 + 28) & 0x80) == 0;
      else
        v53 = 1;
      if (v53)
        v54 = v52[1] + 1328;
      else
        v54 = *v52 + 216;
      v32 = *(unsigned __int8 *)(*(_QWORD *)v54 + 236) != 0;
      v31 = 1;
    }
    else
    {
      v31 = 0;
      v32 = 0;
    }
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v159 = 0;
  }
  v160 = v32;
  v161 = *((_QWORD *)this + 10) == 0;
  if (v31 && v32)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(&v157, (uint64_t)v23, v24);
  if ((*((_WORD *)this + 14) & 0x80) != 0 || (*((_BYTE *)this + 22) & 0x10) != 0)
  {
    v33 = (_QWORD *)*((_QWORD *)this + 5);
    v39 = *v33;
    if ((*(_WORD *)(*v33 + 28) & 0x80) == 0)
      v39 = 0;
    v40 = *(_QWORD *)(v39 + 224);
    if (v40)
    {
      ++*(_DWORD *)(v40 + 12);
      *(_BYTE *)(v40 + 9) = 1;
    }
  }
  else
  {
    v33 = (_QWORD *)*((_QWORD *)this + 5);
  }
  v34 = v33[1];
  *(_DWORD *)(v34 + 24) += 2;
  WebCore::Document::nodeChildrenWillBeRemoved((WebCore::Document *)v34, this);
  if (*(_DWORD *)(v34 + 24) == 2)
  {
    if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v34);
  }
  else
  {
    *(_DWORD *)(v34 + 24) -= 2;
  }
  v35 = *((_QWORD *)this + 10);
  if (!v35)
  {
    v36 = 0;
    v46 = 1;
    goto LABEL_181;
  }
  v36 = 0;
  do
  {
    v55 = *(_QWORD *)(v35 + 56);
    *(_DWORD *)(v35 + 24) += 2;
    v56 = *(_WORD *)(v35 + 28);
    if (v55)
      *(_DWORD *)(v55 + 24) += 2;
    v57 = *(_QWORD *)(*(_QWORD *)(v35 + 40) + 8);
    *(_DWORD *)(v57 + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v77 = *(_QWORD *)(v57 + 528);
      if (v77)
      {
        v78 = *(_QWORD *)(v77 + 8);
        if (v78)
        {
          v79 = *(_QWORD *)(v78 + 24);
          if (v79)
          {
            v80 = *(_QWORD *)(v79 + 8);
            if (v80)
              goto LABEL_162;
          }
        }
      }
      v86 = *(_QWORD *)(v57 + 2632);
      if (v86)
      {
        v87 = *(_QWORD *)(v86 + 8);
        if (v87)
        {
          v88 = *(_QWORD *)(v87 + 528);
          if (v88)
          {
            v89 = *(_QWORD *)(v88 + 8);
            if (v89)
            {
              v90 = *(_QWORD *)(v89 + 24);
              if (v90)
              {
                v80 = *(_QWORD *)(v90 + 8);
                if (v80)
                {
LABEL_162:
                  v81 = *(_QWORD *)(*(_QWORD *)(v80 + 80) + 8);
                  v82 = *(_QWORD *)(v81 + 152);
                  if (v82)
                  {
                    v165 = (WTF *)v35;
                    v147 = v81;
                    v148 = v82;
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v82 + 168), (WTF::StringImpl *)&v165);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v148 + 176), (WTF::StringImpl *)&v165);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v148 + 184), (WTF::StringImpl *)&v165);
                    v81 = v147;
                  }
                  v83 = *(uint64_t **)(v81 + 40);
                  if (v83)
                    WebCore::InspectorDOMAgent::didRemoveDOMNode(v83, (WebCore::Node *)v35);
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
    ++WebCore::ScriptDisallowedScope::s_count;
    v59 = *(_WORD *)(v35 + 28);
    if ((*(_QWORD *)(v35 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
      if ((v59 & 8) == 0)
        goto LABEL_113;
      if ((*(_QWORD *)(v35 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_113;
      v72 = *(_QWORD *)((*(_QWORD *)(v35 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (!v72 || (*(_QWORD *)(v72 + 16) & 0x1FLL) != 0x12)
        goto LABEL_113;
      goto LABEL_147;
    }
    if ((v59 & 8) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v35 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19595B190);
      }
LABEL_147:
      v73 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(v35 + 40) + 8) + 1944);
      if (v73)
      {
        WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)&v165, v73);
        WebCore::RenderTreeUpdater::tearDownRenderers(v35, 0);
        RenderingAncestor = (WebCore::Element *)WebCore::findRenderingAncestor((WebCore *)v35, v74);
        if (RenderingAncestor)
        {
          if ((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19595B1B0);
          }
          if ((*(_QWORD *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1ELL) == 0x16)
            WebCore::Element::invalidateRenderer(RenderingAncestor);
        }
        WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)&v165, v76);
      }
      goto LABEL_113;
    }
    if ((v59 & 2) != 0)
      WebCore::RenderTreeUpdater::tearDownRenderer((WebCore::RenderTreeUpdater *)v35, (WebCore::Text *)v9);
LABEL_113:
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v84 = (*((_WORD *)this + 14) & 8) != 0 && (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0
          ? *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58)
          : 0;
      v85 = *(_QWORD *)(v84 + 224);
      if (v85)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 96))(v85, v35);
    }
    v60 = (_QWORD *)((char *)this + 88);
    if (v55)
    {
      *(_QWORD *)(v55 + 48) = (unint64_t)*(unsigned __int16 *)(v55 + 54) << 48;
      v60 = (_QWORD *)(v35 + 56);
    }
    *v60 = 0;
    *((_QWORD *)this + 10) = v55;
    *(_QWORD *)(v35 + 32) = 0;
    *(_DWORD *)(v35 + 24) &= ~1u;
    v61 = (WebCore::TreeScope *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 96);
    v62 = *(WebCore::Node **)(v35 + 40);
    if (v62 != v61)
      WebCore::Node::moveTreeToNewScope((WebCore::Node *)v35, v62, v61, v11);
    --WebCore::ScriptDisallowedScope::s_count;
    if (v55)
    {
      if (*(_DWORD *)(v55 + 24) == 2)
      {
        if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v55);
      }
      else
      {
        *(_DWORD *)(v55 + 24) -= 2;
      }
    }
    v63 = (*((_BYTE *)this + 22) & 0x18) == 0;
    if ((*(_BYTE *)(v35 + 22) & 8) != 0)
    {
      if (!WebCore::notifyNodeRemovedFromDocument((uint64_t)this, v63, v35))
        goto LABEL_102;
    }
    else if (!WebCore::notifyNodeRemovedFromTree((uint64_t)this, v63, v35))
    {
      goto LABEL_102;
    }
    v64 = *(_QWORD *)(v35 + 8);
    if ((!v64 || (*(_BYTE *)(v64 + 8) & 3) != 0 || !*(_QWORD *)v64) && (*(_WORD *)(v35 + 28) & 4) != 0)
    {
      if (*(_QWORD *)(v35 + 80))
      {
        v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 40) + 8) + 528);
        if (v65)
        {
          v66 = *(_QWORD *)(v65 + 8);
          if (v66)
          {
            v67 = *(WebCore::WindowProxy **)(v66 + 112);
            {
              v68 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
            }
            else
            {
              v142 = WebCore::g_commonVMOrNull;
              if (!WebCore::g_commonVMOrNull)
                v142 = WebCore::commonVMSlow(0);
              v68 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v142 + 41456) + 16);
              WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v68;
            }
            v69 = *(WebCore::DOMWrapperWorld ***)(WebCore::WindowProxy::jsWindowProxy(v67, v68) + 16);
            JSC::JSLockHolder::JSLockHolder();
            *(_DWORD *)(v35 + 24) += 2;
            v168[0] = (WebCore::ChildListMutationAccumulator *)v35;
            WebCore::createWrapper(v69, (JSC::VM *)v69, (WebCore::JSDOMGlobalObject *)v168, v70);
            v71 = v168[0];
            v168[0] = 0;
            if (v71)
            {
              if (*((_DWORD *)v71 + 6) == 2)
              {
                if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v71);
              }
              else
              {
                *((_DWORD *)v71 + 6) -= 2;
              }
            }
            MEMORY[0x19AEA32A0](&v165);
          }
        }
      }
    }
LABEL_102:
    if (*(_DWORD *)(v35 + 24) == 2)
    {
      if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v35);
    }
    else
    {
      *(_DWORD *)(v35 + 24) -= 2;
    }
    v36 |= (v56 & 8) >> 3;
    v35 = *((_QWORD *)this + 10);
  }
  while (v35);
  if ((v36 & 1) != 0)
    v46 = 2;
  else
    v46 = 1;
LABEL_181:
  BYTE1(v164) = v46;
  v50 = a2;
  if (v159)
  {
    if (v160)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(&v157, (uint64_t)v9, v10);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)&v157);
  }
  v48 = --WebCore::ScriptDisallowedScope::s_count;
  v91 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v165, v9);
    v91 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    v48 = WebCore::ScriptDisallowedScope::s_count;
  }
  v49 = v91 - 1;
LABEL_186:
  v92 = v36 | ((*((_WORD *)v50 + 14) & 8) >> 3);
  v162 = 0u;
  v163 = 0u;
  LOBYTE(v162) = 8;
  v164 = 1;
  if ((v92 & 1) != 0)
    v93 = 2;
  else
    v93 = 1;
  BYTE1(v164) = v93;
  v165 = (WTF *)v167;
  v166 = 11;
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v49 + 1;
  WebCore::ScriptDisallowedScope::s_count = v48 + 1;
  v94 = *((_WORD *)this + 14);
  if ((v94 & 8) != 0)
    v95 = this;
  else
    v95 = 0;
  v157 = v95;
  v158 = &v162;
  if ((v94 & 8) != 0)
  {
    v143 = WebCore::Element::needsStyleInvalidation(this);
    v159 = v143;
    if (v143)
    {
      v144 = (uint64_t *)*((_QWORD *)v157 + 5);
      v145 = *v144;
      if (*v144 && (*(_WORD *)(v145 + 28) & 0x80) != 0)
        v146 = v145 + 216;
      else
        v146 = v144[1] + 1328;
      v97 = *(unsigned __int8 *)(*(_QWORD *)v146 + 236) != 0;
      v96 = 1;
    }
    else
    {
      v96 = 0;
      v97 = 0;
    }
    v50 = a2;
  }
  else
  {
    v96 = 0;
    v97 = 0;
    v159 = 0;
  }
  v160 = v97;
  v161 = *((_QWORD *)this + 10) == 0;
  if (v96 && v97)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(&v157, (uint64_t)v9, v10);
  if ((*((_WORD *)this + 14) & 0x80) != 0 || (*((_BYTE *)this + 22) & 0x10) != 0)
  {
    v98 = (_QWORD *)*((_QWORD *)this + 5);
    v128 = *v98;
    if ((*(_WORD *)(*v98 + 28) & 0x80) == 0)
      v128 = 0;
    v129 = *(_QWORD *)(v128 + 224);
    if (v129)
    {
      ++*(_DWORD *)(v129 + 12);
      *(_BYTE *)(v129 + 9) = 0;
    }
  }
  else
  {
    v98 = (_QWORD *)*((_QWORD *)this + 5);
  }
  v99 = v98[1];
  *(_DWORD *)(v99 + 24) += 2;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v130 = *(_QWORD *)(v99 + 528);
    if (v130)
    {
      v131 = *(_QWORD *)(v130 + 8);
      if (v131)
      {
        v132 = *(_QWORD *)(v131 + 24);
        if (v132)
        {
          v133 = *(_QWORD *)(v132 + 8);
          if (v133)
            goto LABEL_277;
        }
      }
    }
    v135 = *(_QWORD *)(v99 + 2632);
    if (v135)
    {
      v136 = *(_QWORD *)(v135 + 8);
      if (v136)
      {
        v137 = *(_QWORD *)(v136 + 528);
        if (v137)
        {
          v138 = *(_QWORD *)(v137 + 8);
          if (v138)
          {
            v139 = *(_QWORD *)(v138 + 24);
            if (v139)
            {
              v133 = *(_QWORD *)(v139 + 8);
              if (v133)
              {
LABEL_277:
                v134 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v133 + 80) + 8) + 152);
                if (v134)
                  WebCore::PageDOMDebuggerAgent::willInsertDOMNode(v134, this);
              }
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v99 + 24) == 2)
  {
    if ((*(_WORD *)(v99 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v99);
  }
  else
  {
    *(_DWORD *)(v99 + 24) -= 2;
  }
  v101 = (WebCore::TreeScope *)*((_QWORD *)this + 5);
  v102 = (WebCore::Node *)*((_QWORD *)v50 + 5);
  if (v102 != v101)
    WebCore::Node::moveTreeToNewScope(v50, v102, v101, v11);
  v103 = WebCore::ScriptDisallowedScope::s_count++;
  *((_QWORD *)v50 + 4) = this;
  *((_DWORD *)v50 + 6) |= 1u;
  v104 = *((_QWORD *)this + 11);
  if (v104)
  {
    v105 = *(_DWORD *)(v104 + 24);
    *(_DWORD *)(v104 + 24) = v105 + 2;
    *((_QWORD *)v50 + 6) = v104 | ((unint64_t)*((unsigned __int16 *)v50 + 27) << 48);
    *(_QWORD *)(v104 + 56) = v50;
    if (v105)
    {
      *(_DWORD *)(v104 + 24) = v105;
    }
    else if ((*(_WORD *)(v104 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v104);
      v103 = WebCore::ScriptDisallowedScope::s_count - 1;
    }
  }
  else
  {
    *((_QWORD *)this + 10) = v50;
  }
  *((_QWORD *)this + 11) = v50;
  WebCore::ScriptDisallowedScope::s_count = v103;
  WebCore::ChildListMutationScope::ChildListMutationScope(v168, this);
  v107 = v168[0];
  if (v168[0])
  {
    if (*((_QWORD *)v168[0] + 10))
    {
      WebCore::ChildListMutationAccumulator::childAdded(v168[0], v50);
      v107 = v168[0];
      v168[0] = 0;
      if (!v107)
        goto LABEL_209;
    }
    else
    {
      v168[0] = 0;
    }
    if (*(_DWORD *)v107 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v107, v106);
      WTF::fastFree(v140, v141);
    }
    else
    {
      --*(_DWORD *)v107;
    }
  }
LABEL_209:
  WebCore::notifyChildNodeInserted((uint64_t)this, (uint64_t)v50, (uint64_t)&v165);
  if (v159)
  {
    if (v160)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(&v157, (uint64_t)v108, v109);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)&v157);
  }
  --WebCore::ScriptDisallowedScope::s_count;
  v110 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v157, v108);
    v110 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v110 - 1;
  (*(void (**)(WebCore::ContainerNode *, __int128 *))(*(_QWORD *)this + 376))(this, &v162);
  if (HIDWORD(v166))
  {
    v112 = v165;
    v113 = 8 * HIDWORD(v166);
    do
    {
      v114 = *(_QWORD *)v112;
      v112 = (WTF *)((char *)v112 + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 280))(v114);
      v113 -= 8;
    }
    while (v113);
  }
  WebCore::dispatchChildInsertionEvents(v50, v111);
  if (HIDWORD(v166))
  {
    v120 = v165;
    v121 = 8 * HIDWORD(v166);
    do
    {
      v122 = *(_QWORD *)v120;
      *(_QWORD *)v120 = 0;
      if (v122)
      {
        if (*(_DWORD *)(v122 + 24) == 2)
        {
          if ((*(_WORD *)(v122 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v122);
        }
        else
        {
          *(_DWORD *)(v122 + 24) -= 2;
        }
      }
      v120 = (WTF *)((char *)v120 + 8);
      v121 -= 8;
    }
    while (v121);
  }
  v116 = v165;
  if (v167 != (_BYTE *)v165 && v165 != 0)
  {
    v165 = 0;
    LODWORD(v166) = 0;
    WTF::fastFree(v116, v115);
  }
  WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary(this);
  WebCore::Node::dispatchSubtreeModifiedEvent((uint64_t)this);
  if (HIDWORD(v151))
  {
    v123 = v150;
    v124 = 8 * HIDWORD(v151);
    do
    {
      v125 = *(_QWORD *)v123;
      *(_QWORD *)v123 = 0;
      if (v125)
      {
        if (*(_DWORD *)(v125 + 24) == 2)
        {
          if ((*(_WORD *)(v125 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v125);
        }
        else
        {
          *(_DWORD *)(v125 + 24) -= 2;
        }
      }
      v123 = (WTF *)((char *)v123 + 8);
      v124 -= 8;
    }
    while (v124);
  }
  if (v152 != (_BYTE *)v150 && v150 != 0)
    WTF::fastFree(v150, v118);
  result = v153;
  v153 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(result, v118);
      result = (WebCore::ChildListMutationAccumulator *)WTF::fastFree(v126, v127);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return (WebCore::ChildListMutationAccumulator *)WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

WebCore::ChildListMutationAccumulator *WebCore::ContainerNode::stringReplaceAll(WebCore::ContainerNode *a1, uint64_t a2)
{
  void *v3;
  WebCore::ChildListMutationAccumulator *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v10;
  void *v11;
  WebCore::ChildListMutationAccumulator *v12;

  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    v7 = bmalloc::api::isoAllocate();
    v8 = v7;
    *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v7 + 24) = 0x300300000002;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v6 + 96;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    ++*(_DWORD *)(v6 + 3324);
    v9 = *(_DWORD **)a2;
    if (*(_QWORD *)a2 || (v9 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
      *v9 += 2;
    *(_QWORD *)(v7 + 80) = v9;
    *(_QWORD *)v7 = off_1E33A8078;
    result = WebCore::ContainerNode::replaceAll(a1, (WebCore::Node *)v7);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return (WebCore::ChildListMutationAccumulator *)WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
    WebCore::ChildListMutationScope::ChildListMutationScope(&v12, a1);
    WebCore::ContainerNode::removeChildren((uint64_t)a1);
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(result, v3);
        return (WebCore::ChildListMutationAccumulator *)WTF::fastFree(v10, v11);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::ContainerNode::appendChild@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;

  v4 = (WebCore::Node *)this;
  *(_DWORD *)(this + 24) += 2;
  v6 = this;
  while ((WebCore::Node *)v6 != a2)
  {
    this = v6;
    v6 = *(_QWORD *)(v6 + 32);
    if (!v6)
    {
      v11 = *(_WORD *)(this + 28);
      if ((v11 & 0x80) != 0)
      {
        v12 = *(_QWORD *)(this + 200);
        if (!v12)
        {
LABEL_36:
          v6 = 0;
          goto LABEL_5;
        }
        v6 = *(_QWORD *)(v12 + 8);
        if (!v6)
          goto LABEL_5;
      }
      else
      {
        if ((v11 & 0xF000) != 0xB000)
          goto LABEL_36;
        v13 = this;
        if (!(*(unsigned int (**)(void))(*(_QWORD *)this + 392))() || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        {
          v6 = 0;
          this = v13;
          goto LABEL_5;
        }
        v6 = *(_QWORD *)(v14 + 8);
        this = v13;
        if (!v6)
          goto LABEL_5;
      }
    }
    *(_DWORD *)(v6 + 24) += 2;
LABEL_5:
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
    if (!v6)
    {
      v7 = *((unsigned __int16 *)a2 + 14);
      if ((v7 & 0xA) != 0 && (*((_WORD *)v4 + 14) & 8) != 0)
        return WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a3, v4, (uint64_t)a2);
      if ((~v7 & 0x408) != 0
        || (this = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 368))(a2), !(_DWORD)this))
      {
        if ((*((_WORD *)v4 + 14) & 0xF000) == 0x9000)
        {
          this = WebCore::Document::canAcceptChild((uint64_t)v4, (uint64_t)a2, 0, 1);
          if ((this & 1) != 0)
            return WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a3, v4, (uint64_t)a2);
        }
        else
        {
          v8 = *((unsigned __int16 *)a2 + 14);
          if ((v8 & 0xF000) != 0xB000)
          {
            this = (*(uint64_t (**)(WebCore::Node *, _QWORD))(*(_QWORD *)v4 + 240))(v4, v8 >> 12);
            if (!(_DWORD)this)
              goto LABEL_33;
            return WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a3, v4, (uint64_t)a2);
          }
          if ((v8 & 4) == 0)
            return WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a3, v4, (uint64_t)a2);
          v9 = *((_QWORD *)a2 + 10);
          if (!v9)
            return WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a3, v4, (uint64_t)a2);
          *(_DWORD *)(v9 + 24) += 2;
          while (1)
          {
            v10 = v9;
            this = (*(uint64_t (**)(WebCore::Node *, _QWORD))(*(_QWORD *)v4 + 240))(v4, *(unsigned __int16 *)(v9 + 28) >> 12);
            if (!(_DWORD)this)
              break;
            v9 = *(_QWORD *)(v9 + 56);
            if (v9)
              *(_DWORD *)(v9 + 24) += 2;
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
            if (!v9)
              return WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a3, v4, (uint64_t)a2);
          }
          if (*(_DWORD *)(v9 + 24) != 2)
          {
            *(_DWORD *)(v9 + 24) -= 2;
            goto LABEL_33;
          }
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          {
            v15 = (WebCore::Node *)v9;
LABEL_51:
            this = WebCore::Node::removedLastRef(v15);
            goto LABEL_33;
          }
        }
      }
      goto LABEL_33;
    }
  }
  if (*((_DWORD *)a2 + 6) != 2)
  {
    *((_DWORD *)a2 + 6) -= 2;
    goto LABEL_33;
  }
  if ((*((_WORD *)a2 + 15) & 0x400) == 0)
  {
    v15 = a2;
    goto LABEL_51;
  }
LABEL_33:
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return this;
}

unsigned int *WebCore::ContainerNode::insertChildrenBeforeWithoutPreInsertionValidityCheck@<X0>(WebCore::ContainerNode *a1@<X0>, WebCore::Node *this@<X2>, unsigned int *a3@<X1>, uint64_t a4@<X8>)
{
  WebCore::Node *v4;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WebCore::Node *v11;
  uint64_t v12;
  WebCore::Node *v13;
  unsigned int *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::ContainerNode *v19;
  WebCore::ContainerNode *v20;
  uint64_t v21;
  void *v23;
  const WebCore::Style::RuleSet *v24;
  WebCore::TreeScope *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  WebCore::Node *v29;
  __int16 v30;
  char v31;
  char v32;
  uint64_t v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  char v36;
  __int16 v37;
  WebCore::Style::Invalidator *v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  WebCore::TreeScope *v42;
  WebCore::Node *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  void *v49;
  WebCore::ChildListMutationAccumulator *v50;
  void *v51;
  const WebCore::Style::RuleSet *v52;
  int v53;
  WebCore::Node *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v60;
  int v61;
  WebCore::Node *v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Inspector::InspectorDebuggerAgent **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::ContainerNode *v83;
  WTF *v84;
  void *v85;
  uint64_t v86;
  _BOOL4 v87;
  _QWORD *v88;
  BOOL v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  WebCore::ChildListMutationAccumulator *v93;
  WebCore::ChildListMutationAccumulator *v94;
  WebCore::Style::Invalidator *v95[2];
  BOOL v96;
  BOOL v97;
  BOOL v98;
  WTF *v99;
  uint64_t v100;
  _BYTE v101[88];
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v4 = this;
  if (this)
    *((_DWORD *)this + 6) += 2;
  v8 = a3[3];
  if (!(_DWORD)v8)
  {
LABEL_33:
    v21 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
    *(_DWORD *)(v21 + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v73 = *(_QWORD *)(v21 + 528);
      if (v73)
      {
        v74 = *(_QWORD *)(v73 + 8);
        if (v74)
        {
          v75 = *(_QWORD *)(v74 + 24);
          if (v75)
          {
            v76 = *(_QWORD *)(v75 + 8);
            if (v76)
              goto LABEL_157;
          }
        }
      }
      v78 = *(_QWORD *)(v21 + 2632);
      if (v78)
      {
        v79 = *(_QWORD *)(v78 + 8);
        if (v79)
        {
          v80 = *(_QWORD *)(v79 + 528);
          if (v80)
          {
            v81 = *(_QWORD *)(v80 + 8);
            if (v81)
            {
              v82 = *(_QWORD *)(v81 + 24);
              if (v82)
              {
                v76 = *(_QWORD *)(v82 + 8);
                if (v76)
                {
LABEL_157:
                  v77 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v76 + 80) + 8) + 152);
                  if (v77)
                    WebCore::PageDOMDebuggerAgent::willInsertDOMNode(v77, a1);
                }
              }
            }
          }
        }
      }
    }
    v91 = (_QWORD *)a4;
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, a3);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
    WebCore::ChildListMutationScope::ChildListMutationScope(&v93, a1);
    v26 = a3[3];
    if (!(_DWORD)v26)
    {
LABEL_169:
      WebCore::Node::dispatchSubtreeModifiedEvent((uint64_t)a1);
      *v91 = 0;
      v91[1] = 0;
      v91[2] = 0;
      result = (unsigned int *)v93;
      v93 = 0;
      if (result)
      {
        if (*result == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator((WebCore::ChildListMutationAccumulator *)result, a3);
          result = (unsigned int *)WTF::fastFree(v84, v85);
        }
        else
        {
          --*result;
        }
      }
      goto LABEL_172;
    }
    v27 = *(uint64_t **)a3;
    v92 = *(_QWORD *)a3 + 8 * v26;
    v28 = (uint64_t *)((char *)a1 + 80);
    while (1)
    {
      if (v4 && *((WebCore::ContainerNode **)v4 + 4) != a1)
        goto LABEL_169;
      v29 = (WebCore::Node *)*v27;
      if (*(_QWORD *)(*v27 + 32))
        goto LABEL_169;
      v104 = 0;
      v102 = 0u;
      v103 = 0u;
      v30 = *((_WORD *)v29 + 14);
      if ((v30 & 2) != 0)
        v31 = 2;
      else
        v31 = 7;
      if ((v30 & 8) != 0)
        v32 = 0;
      else
        v32 = v31;
      if (v4)
      {
        if ((*((_WORD *)v4 + 14) & 8) != 0)
          v35 = v4;
        else
          v35 = 0;
        LOBYTE(v102) = v32;
        if ((v30 & 8) != 0)
          v62 = v29;
        else
          v62 = 0;
        *((_QWORD *)&v102 + 1) = v62;
        v33 = (uint64_t)v4;
        do
          v33 = *(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFLL;
        while (v33 && (*(_WORD *)(v33 + 28) & 8) == 0);
      }
      else
      {
        v33 = *((_QWORD *)a1 + 11);
        LOBYTE(v102) = v32;
        if ((v30 & 8) != 0)
          v34 = v29;
        else
          v34 = 0;
        *((_QWORD *)&v102 + 1) = v34;
        if (!v33)
        {
          v35 = 0;
          goto LABEL_56;
        }
        do
        {
          if ((*(_WORD *)(v33 + 28) & 8) != 0)
            break;
          v33 = *(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFLL;
        }
        while (v33);
        v35 = 0;
      }
      *(_QWORD *)&v103 = v33;
      if (v4 && !v35)
      {
        v35 = v4;
        do
          v35 = (WebCore::Node *)*((_QWORD *)v35 + 7);
        while (v35 && (*((_WORD *)v35 + 14) & 8) == 0);
      }
LABEL_56:
      *((_QWORD *)&v103 + 1) = v35;
      LOBYTE(v104) = 1;
      if ((v30 & 8) != 0)
        v36 = 2;
      else
        v36 = 1;
      BYTE1(v104) = v36;
      v99 = (WTF *)v101;
      v100 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      ++WebCore::ScriptDisallowedScope::s_count;
      v37 = *((_WORD *)a1 + 14);
      if ((v37 & 8) != 0)
        v38 = a1;
      else
        v38 = 0;
      v95[0] = v38;
      v95[1] = (WebCore::Style::Invalidator *)&v102;
      if ((v37 & 8) != 0)
      {
        v87 = WebCore::Element::needsStyleInvalidation(a1);
        v96 = v87;
        if (v87)
        {
          v88 = (_QWORD *)*((_QWORD *)v95[0] + 5);
          if (*v88)
            v89 = (*(_WORD *)(*v88 + 28) & 0x80) == 0;
          else
            v89 = 1;
          if (v89)
            v90 = v88[1] + 1328;
          else
            v90 = *v88 + 216;
          v40 = *(unsigned __int8 *)(*(_QWORD *)v90 + 236) != 0;
          v39 = 1;
        }
        else
        {
          v39 = 0;
          v40 = 0;
        }
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v96 = 0;
      }
      v97 = v40;
      v98 = *v28 == 0;
      if (v39 && v40)
        WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v95, (uint64_t)v23, v24);
      if ((*((_WORD *)a1 + 14) & 0x80) != 0 || (*((_BYTE *)a1 + 22) & 0x10) != 0)
      {
        v68 = **((_QWORD **)a1 + 5);
        if ((*(_WORD *)(v68 + 28) & 0x80) == 0)
          v68 = 0;
        v69 = *(_QWORD *)(v68 + 224);
        if (v69)
        {
          ++*(_DWORD *)(v69 + 12);
          *(_BYTE *)(v69 + 9) = 0;
        }
      }
      v41 = *v27;
      v42 = (WebCore::TreeScope *)*((_QWORD *)a1 + 5);
      v43 = *(WebCore::Node **)(*v27 + 40);
      if (v43 != v42)
      {
        WebCore::Node::moveTreeToNewScope(*v27, v43, v42, v25);
        v41 = *v27;
      }
      v44 = WebCore::ScriptDisallowedScope::s_count++;
      if (v4)
      {
        v45 = *((_QWORD *)v4 + 6);
        v46 = v45 & 0xFFFFFFFFFFFFLL;
        if ((v45 & 0xFFFFFFFFFFFFLL) != 0)
        {
          *(_DWORD *)((v45 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
          v47 = v45 & 0xFFFF000000000000 | v41;
          v48 = (uint64_t *)(v46 + 56);
        }
        else
        {
          v47 = v45 & 0xFFFF000000000000 | v41;
          v48 = (uint64_t *)((char *)a1 + 80);
        }
        *v48 = v41;
        *((_QWORD *)v4 + 6) = v47;
        *(_QWORD *)(v41 + 32) = a1;
        *(_DWORD *)(v41 + 24) |= 1u;
        *(_QWORD *)(v41 + 48) = v46 | ((unint64_t)*(unsigned __int16 *)(v41 + 54) << 48);
        *(_QWORD *)(v41 + 56) = v4;
        if (v46)
        {
          if (*(_DWORD *)(v46 + 24) == 2)
          {
            if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v46, v43);
              v44 = WebCore::ScriptDisallowedScope::s_count - 1;
            }
          }
          else
          {
            *(_DWORD *)(v46 + 24) -= 2;
          }
        }
      }
      else
      {
        *(_QWORD *)(v41 + 32) = a1;
        *(_DWORD *)(v41 + 24) |= 1u;
        v60 = *((_QWORD *)a1 + 11);
        if (v60)
        {
          v61 = *(_DWORD *)(v60 + 24);
          *(_DWORD *)(v60 + 24) = v61 + 2;
          *(_QWORD *)(v41 + 48) = v60 | ((unint64_t)*(unsigned __int16 *)(v41 + 54) << 48);
          *(_QWORD *)(v60 + 56) = v41;
          if (v61)
          {
            *(_DWORD *)(v60 + 24) = v61;
          }
          else if ((*(_WORD *)(v60 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v60, v43);
            v44 = WebCore::ScriptDisallowedScope::s_count - 1;
          }
        }
        else
        {
          *v28 = v41;
        }
        *((_QWORD *)a1 + 11) = v41;
      }
      WebCore::ScriptDisallowedScope::s_count = v44;
      WebCore::ChildListMutationScope::ChildListMutationScope(&v94, a1);
      v50 = v94;
      if (!v94)
        goto LABEL_78;
      if (!*((_QWORD *)v94 + 10))
      {
        v94 = 0;
LABEL_134:
        if (*(_DWORD *)v50 == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v50, v49);
          WTF::fastFree(v70, v71);
        }
        else
        {
          --*(_DWORD *)v50;
        }
        goto LABEL_78;
      }
      WebCore::ChildListMutationAccumulator::childAdded(v94, v29);
      v50 = v94;
      v94 = 0;
      if (v50)
        goto LABEL_134;
LABEL_78:
      WebCore::notifyChildNodeInserted((uint64_t)a1, (uint64_t)v29, (uint64_t)&v99);
      if (v96)
      {
        if (v97)
          WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v95, (uint64_t)v51, v52);
        WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v95);
      }
      --WebCore::ScriptDisallowedScope::s_count;
      v53 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
        && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
      {
        WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v95, v51);
        v53 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      }
      WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v53 - 1;
      (*(void (**)(WebCore::ContainerNode *, __int128 *))(*(_QWORD *)a1 + 376))(a1, &v102);
      if (HIDWORD(v100))
      {
        v55 = v99;
        v56 = 8 * HIDWORD(v100);
        do
        {
          v57 = *(_QWORD *)v55;
          v55 = (WTF *)((char *)v55 + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 280))(v57);
          v56 -= 8;
        }
        while (v56);
      }
      WebCore::dispatchChildInsertionEvents(v29, v54);
      if (HIDWORD(v100))
      {
        v63 = v99;
        v64 = 8 * HIDWORD(v100);
        do
        {
          v65 = *(_QWORD *)v63;
          *(_QWORD *)v63 = 0;
          if (v65)
          {
            if (*(_DWORD *)(v65 + 24) == 2)
            {
              if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v65, v23);
            }
            else
            {
              *(_DWORD *)(v65 + 24) -= 2;
            }
          }
          v63 = (WTF *)((char *)v63 + 8);
          v64 -= 8;
        }
        while (v64);
      }
      v58 = v99;
      if (v101 != (_BYTE *)v99 && v99 != 0)
      {
        v99 = 0;
        LODWORD(v100) = 0;
        WTF::fastFree(v58, v23);
      }
      if (++v27 == (uint64_t *)v92)
        goto LABEL_169;
    }
  }
  v9 = *(uint64_t **)a3;
  v10 = 8 * v8;
  while (1)
  {
    v11 = (WebCore::Node *)*v9;
    v12 = *(_QWORD *)(*v9 + 32);
    if (v12)
      break;
LABEL_12:
    ++v9;
    v10 -= 8;
    if (!v10)
    {
      v15 = a3[3];
      if (!(_DWORD)v15)
        goto LABEL_33;
      v16 = *(uint64_t **)a3;
      v17 = *(_QWORD *)a3 + 8 * v15;
LABEL_22:
      v18 = *v16;
      *((_DWORD *)a1 + 6) += 2;
      v19 = a1;
      while (1)
      {
        if (v19 == (WebCore::ContainerNode *)v18)
        {
          if (*(_DWORD *)(v18 + 24) == 2)
          {
            if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v18, a3);
          }
          else
          {
            *(_DWORD *)(v18 + 24) -= 2;
          }
          LOBYTE(v99) = 1;
          v101[0] = 1;
          v100 = 0;
          *(_BYTE *)a4 = 1;
          *(_QWORD *)(a4 + 8) = 0;
          *(_BYTE *)(a4 + 16) = 1;
          result = (unsigned int *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v99, (WTF::StringImpl *)a3);
          goto LABEL_172;
        }
        v20 = v19;
        v19 = (WebCore::ContainerNode *)*((_QWORD *)v19 + 4);
        if (!v19)
        {
          v67 = *((_WORD *)v20 + 14);
          if ((v67 & 0x80) != 0)
          {
            v72 = *((_QWORD *)v20 + 25);
            if (!v72)
            {
LABEL_138:
              v19 = 0;
              goto LABEL_26;
            }
            v19 = *(WebCore::ContainerNode **)(v72 + 8);
            if (!v19)
              goto LABEL_26;
          }
          else
          {
            if ((v67 & 0xF000) != 0xB000)
              goto LABEL_138;
            v83 = v20;
            if (!(*(unsigned int (**)(void))(*(_QWORD *)v20 + 392))() || (v86 = *((_QWORD *)v83 + 12)) == 0)
            {
              v19 = 0;
              v20 = v83;
              goto LABEL_26;
            }
            v19 = *(WebCore::ContainerNode **)(v86 + 8);
            v20 = v83;
            if (!v19)
              goto LABEL_26;
          }
        }
        *((_DWORD *)v19 + 6) += 2;
LABEL_26:
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20, a3);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
        if (!v19)
        {
          if (++v16 == (uint64_t *)v17)
            goto LABEL_33;
          goto LABEL_22;
        }
      }
    }
  }
  *(_DWORD *)(v12 + 24) += 2;
  if (v4 == v11)
  {
    v13 = (WebCore::Node *)*((_QWORD *)v4 + 7);
    if (v13)
      *((_DWORD *)v13 + 6) += 2;
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v4, a3);
        v4 = (WebCore::Node *)*v9;
      }
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  else
  {
    v13 = v4;
    v4 = v11;
  }
  result = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v12, v4, &v99);
  if (!v101[0])
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a3);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
    v4 = v13;
    goto LABEL_12;
  }
  v66 = v100;
  *(_BYTE *)a4 = (_BYTE)v99;
  *(_QWORD *)(a4 + 8) = v66;
  *(_BYTE *)(a4 + 16) = 1;
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v12, a3);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  v4 = v13;
LABEL_172:
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v4, a3);
    }
    else
    {
      *((_DWORD *)v4 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ContainerNode::firstElementChild(WebCore::ContainerNode *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  result = 0;
  while ((*(_WORD *)(v1 + 28) & 8) == 0)
  {
    v1 = *(_QWORD *)(v1 + 56);
    if (!v1)
      return result;
  }
  return v1;
}

uint64_t WebCore::ContainerNode::appendChild@<X0>(WebCore::Node *a1@<X2>, uint64_t a2@<X0>, int a3@<W1>, WTF::String *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  if (a3)
    return WebCore::ContainerNode::appendChild(a2, a1, (uint64_t)a5);
  result = WebCore::ContainerNode::parserAppendChild(a2, a1, a1, a4);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  return result;
}

uint64_t WebCore::notifyChildNodeInserted(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v12 = *(_QWORD *)(v6 + 528);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 24);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
            goto LABEL_18;
        }
      }
    }
    v17 = *(_QWORD *)(v6 + 2632);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 528);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_QWORD *)(v20 + 24);
            if (v21)
            {
              v15 = *(_QWORD *)(v21 + 8);
              if (v15)
              {
LABEL_18:
                v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v15 + 80) + 8) + 40);
                if (v16)
                  WebCore::InspectorDOMAgent::didInsertDOMNode(v16, (WebCore::Node *)a2);
              }
            }
          }
        }
      }
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  *(_DWORD *)(a2 + 24) += 2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (v9 & 0x18000000000000) == 0;
  if ((v9 & 0x8000000000000) != 0)
    result = WebCore::notifyNodeInsertedIntoDocument(a1, a2, v10, a3);
  else
    result = WebCore::notifyNodeInsertedIntoTree(a1, a2, v10);
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)a2);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ContainerNode::countChildNodes(WebCore::ContainerNode *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v1 = *(_QWORD *)(v1 + 56);
  }
  while (v1);
  return result;
}

uint64_t WebCore::ContainerNode::traverseToChildAt(WebCore::ContainerNode *this, int a2)
{
  uint64_t result;
  int v3;
  BOOL v5;

  result = *((_QWORD *)this + 10);
  if (a2 && result)
  {
    v3 = a2 - 1;
    do
    {
      result = *(_QWORD *)(result + 56);
      v5 = v3-- != 0;
    }
    while (result && v5);
  }
  return result;
}

_QWORD *WebCore::ContainerNode::getElementsByTagName@<X0>(WebCore::ContainerNode *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  WebCore::NodeListsNodeData **v25;
  WebCore::NodeListsNodeData *v26;
  WebCore::NodeListsNodeData *v27;
  WTF *v28;
  void *v29;
  uint64_t *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  WTF::StringImpl *v37;
  BOOL v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  WebCore::NodeListsNodeData *v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned __int8 *v64;
  int v65;
  WTF::StringImpl *v66;
  BOOL v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  char v78[8];
  WTF::StringImpl *v79;

  if (*(_QWORD *)a2 == WebCore::starAtomData)
  {
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
    if (!v5)
    {
      WebCore::Node::materializeRareData(this);
      v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
    }
    v6 = *v5;
    if (!*v5)
    {
      v6 = WTF::fastMalloc((WTF *)0x28);
      *(_OWORD *)v6 = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      *(_QWORD *)(v6 + 32) = 0;
      v7 = (WebCore::NodeListsNodeData *)*v5;
      *v5 = v6;
      if (v7)
      {
        WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
        WTF::fastFree(v8, v9);
        v6 = *v5;
      }
    }
    v10 = (uint64_t *)(v6 + 32);
    v11 = (WTF::StringImpl *)WebCore::starAtomData;
    if (WebCore::starAtomData)
      *(_DWORD *)WebCore::starAtomData += 2;
    v12 = *v10;
    if (*v10
      || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
    {
      v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = ((*((_DWORD *)v11 + 4) >> 8) + 25) & v13;
    v15 = (unsigned __int8 *)(v12 + 24 * v14);
    v16 = *v15;
    v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
    if (*v15)
      v18 = 0;
    else
      v18 = v17 == 0;
    if (!v18)
    {
      v19 = 0;
      v20 = 1;
      do
      {
        result = v19;
        v19 = v15;
        if (v16 != 255)
        {
          v19 = result;
          if (v16 == 25 && v17 == v11)
          {
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                result = (_QWORD *)WTF::StringImpl::destroy(v11, a2);
              else
                *(_DWORD *)v11 -= 2;
            }
            v22 = v12 + 24 * v14;
            goto LABEL_23;
          }
        }
        v14 = ((_DWORD)v14 + v20) & v13;
        v15 = (unsigned __int8 *)(v12 + 24 * v14);
        v16 = *v15;
        v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
        ++v20;
        if (*v15)
          v41 = 0;
        else
          v41 = v17 == 0;
      }
      while (!v41);
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        v19[2] = 0;
        --*(_DWORD *)(*v10 - 16);
        v15 = (unsigned __int8 *)v19;
      }
    }
    *v15 = 25;
    *((_QWORD *)v15 + 1) = v11;
    *((_QWORD *)v15 + 2) = 0;
    v42 = *v10;
    if (*v10)
      v43 = *(_DWORD *)(v42 - 12) + 1;
    else
      v43 = 1;
    *(_DWORD *)(v42 - 12) = v43;
    v44 = *v10;
    if (*v10)
      v45 = *(_DWORD *)(v44 - 12);
    else
      v45 = 0;
    v46 = (*(_DWORD *)(v44 - 16) + v45);
    v47 = *(unsigned int *)(v44 - 4);
    if (v47 > 0x400)
    {
      if (v47 > 2 * v46)
        goto LABEL_63;
    }
    else if (3 * v47 > 4 * v46)
    {
LABEL_63:
      result = (_QWORD *)bmalloc::api::isoAllocate();
      v23 = (uint64_t)result;
      result[1] = 0;
      *((_DWORD *)result + 4) = 1;
      *((_BYTE *)result + 20) = 0;
      *(_WORD *)((char *)result + 21) = *(_WORD *)((_BYTE *)result + 21) & 0xFC00 | 0x19;
      *((_DWORD *)this + 6) += 2;
      result[3] = this;
      *((_OWORD *)result + 2) = 0u;
      *((_OWORD *)result + 3) = 0u;
      *((_OWORD *)result + 4) = 0u;
      *((_BYTE *)result + 80) &= 0xFCu;
      *result = off_1E33A0598;
      *((_QWORD *)v15 + 2) = result;
      goto LABEL_25;
    }
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v10, (uint64_t)v15);
    goto LABEL_63;
  }
  v25 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3358) & 1) == 0)
  {
    if (!v25)
    {
      WebCore::Node::materializeRareData(this);
      v25 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
    }
    v57 = WebCore::NodeRareData::ensureNodeLists(v25);
    v59 = (uint64_t *)((char *)v57 + 32);
    v78[0] = 23;
    v60 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v60 += 2;
    v79 = v60;
    v61 = *v59;
    if (*v59
      || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand((uint64_t *)v57 + 4, 0), (v61 = *v59) != 0))
    {
      v62 = *(_DWORD *)(v61 - 8);
    }
    else
    {
      v62 = 0;
    }
    v63 = ((*((_DWORD *)v60 + 4) >> 8) + 23) & v62;
    v64 = (unsigned __int8 *)(v61 + 24 * v63);
    v65 = *v64;
    v66 = (WTF::StringImpl *)*((_QWORD *)v64 + 1);
    if (*v64)
      v67 = 0;
    else
      v67 = v66 == 0;
    if (!v67)
    {
      v68 = 0;
      v69 = 1;
      do
      {
        if (v65 == 255)
        {
          v68 = v64;
        }
        else if (v65 == 23 && v66 == v60)
        {
          v70 = 1;
          goto LABEL_107;
        }
        v63 = (v63 + v69) & v62;
        v64 = (unsigned __int8 *)(v61 + 24 * v63);
        v65 = *v64;
        v66 = (WTF::StringImpl *)*((_QWORD *)v64 + 1);
        ++v69;
        if (*v64)
          v71 = 0;
        else
          v71 = v66 == 0;
      }
      while (!v71);
      if (v68)
      {
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
        *((_QWORD *)v68 + 2) = 0;
        --*(_DWORD *)(*v59 - 16);
        v64 = v68;
      }
    }
    WTF::HashMapTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>::translate<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,std::pair<unsigned char,WTF::AtomString>,decltype(nullptr)>((uint64_t)v64, (WTF::StringImpl *)v78);
    v72 = *v59;
    if (*v59)
      v73 = *(_DWORD *)(v72 - 12) + 1;
    else
      v73 = 1;
    *(_DWORD *)(v72 - 12) = v73;
    v74 = *v59;
    if (*v59)
      v75 = *(_DWORD *)(v74 - 12);
    else
      v75 = 0;
    v76 = (*(_DWORD *)(v74 - 16) + v75);
    v77 = *(unsigned int *)(v74 - 4);
    if (v77 > 0x400)
    {
      if (v77 > 2 * v76)
        goto LABEL_130;
    }
    else if (3 * v77 > 4 * v76)
    {
      goto LABEL_130;
    }
    v64 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v59, (uint64_t)v64);
LABEL_130:
    v70 = 0;
LABEL_107:
    result = v79;
    v79 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v58);
      else
        *(_DWORD *)result -= 2;
    }
    if (!v70)
    {
      v23 = WebCore::TagCollection::operator new(96);
      result = (_QWORD *)WebCore::TagCollection::TagCollection(v23, (uint64_t)this, (_DWORD **)a2);
      *((_QWORD *)v64 + 2) = result;
      goto LABEL_25;
    }
    v23 = *((_QWORD *)v64 + 2);
    goto LABEL_24;
  }
  if (!v25)
  {
    WebCore::Node::materializeRareData(this);
    v25 = (WebCore::NodeListsNodeData **)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v26 = *v25;
  if (!*v25)
  {
    v26 = (WebCore::NodeListsNodeData *)WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v26 = 0u;
    *((_OWORD *)v26 + 1) = 0u;
    *((_QWORD *)v26 + 4) = 0;
    v27 = *v25;
    *v25 = v26;
    if (v27)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v27, a2);
      WTF::fastFree(v28, v29);
      v26 = *v25;
    }
  }
  v30 = (uint64_t *)((char *)v26 + 32);
  v31 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v31 += 2;
  v32 = *v30;
  if (*v30
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)v26 + 4, 8u, 0), (v32 = *v30) != 0))
  {
    v33 = *(_DWORD *)(v32 - 8);
  }
  else
  {
    v33 = 0;
  }
  v34 = ((*((_DWORD *)v31 + 4) >> 8) + 24) & v33;
  v35 = (unsigned __int8 *)(v32 + 24 * v34);
  v36 = *v35;
  v37 = (WTF::StringImpl *)*((_QWORD *)v35 + 1);
  if (*v35)
    v38 = 0;
  else
    v38 = v37 == 0;
  if (!v38)
  {
    v39 = 0;
    v40 = 1;
    while (1)
    {
      result = v39;
      v39 = v35;
      if (v36 != 255)
      {
        v39 = result;
        if (v36 == 24 && v37 == v31)
          break;
      }
      v34 = ((_DWORD)v34 + v40) & v33;
      v35 = (unsigned __int8 *)(v32 + 24 * v34);
      v36 = *v35;
      v37 = (WTF::StringImpl *)*((_QWORD *)v35 + 1);
      ++v40;
      if (*v35)
        v48 = 0;
      else
        v48 = v37 == 0;
      if (v48)
      {
        if (v39)
        {
          *v39 = 0;
          v39[1] = 0;
          v39[2] = 0;
          --*(_DWORD *)(*v30 - 16);
          v35 = (unsigned __int8 *)v39;
        }
        goto LABEL_78;
      }
    }
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        result = (_QWORD *)WTF::StringImpl::destroy(v31, a2);
      else
        *(_DWORD *)v31 -= 2;
    }
    v22 = v32 + 24 * v34;
LABEL_23:
    v23 = *(_QWORD *)(v22 + 16);
LABEL_24:
    ++*(_DWORD *)(v23 + 16);
    goto LABEL_25;
  }
LABEL_78:
  *v35 = 24;
  *((_QWORD *)v35 + 1) = v31;
  *((_QWORD *)v35 + 2) = 0;
  v49 = *v30;
  if (*v30)
    v50 = *(_DWORD *)(v49 - 12) + 1;
  else
    v50 = 1;
  *(_DWORD *)(v49 - 12) = v50;
  v51 = *v30;
  if (*v30)
    v52 = *(_DWORD *)(v51 - 12);
  else
    v52 = 0;
  v53 = (*(_DWORD *)(v51 - 16) + v52);
  v54 = *(unsigned int *)(v51 - 4);
  if (v54 > 0x400)
  {
    if (v54 > 2 * v53)
      goto LABEL_84;
LABEL_91:
    v35 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v30, (uint64_t)v35);
    goto LABEL_84;
  }
  if (3 * v54 <= 4 * v53)
    goto LABEL_91;
LABEL_84:
  v55 = bmalloc::api::isoAllocate();
  v23 = v55;
  *(_QWORD *)(v55 + 8) = 0;
  *(_DWORD *)(v55 + 16) = 1;
  *(_BYTE *)(v55 + 20) = 0;
  *(_WORD *)(v55 + 21) = *(_WORD *)(v55 + 21) & 0xFC00 | 0x18;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(v55 + 24) = this;
  *(_OWORD *)(v55 + 32) = 0u;
  *(_OWORD *)(v55 + 48) = 0u;
  *(_OWORD *)(v55 + 64) = 0u;
  *(_BYTE *)(v55 + 80) &= 0xFCu;
  *(_QWORD *)v55 = off_1E33A8010;
  v56 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v56 += 2;
  *(_QWORD *)(v55 + 88) = v56;
  result = (_QWORD *)WTF::AtomString::convertToASCIILowercase(a2);
  *((_QWORD *)v35 + 2) = v23;
LABEL_25:
  *a3 = v23;
  return result;
}

WebCore::NodeListsNodeData *WebCore::NodeRareData::ensureNodeLists(WebCore::NodeListsNodeData **this)
{
  WebCore::NodeListsNodeData *result;
  WTF::StringImpl *v3;
  WebCore::NodeListsNodeData *v4;
  WTF *v5;
  void *v6;

  result = *this;
  if (!result)
  {
    result = (WebCore::NodeListsNodeData *)WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_QWORD *)result + 4) = 0;
    v4 = *this;
    *this = result;
    if (v4)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v4, v3);
      WTF::fastFree(v5, v6);
      return *this;
    }
  }
  return result;
}

WTF::StringImpl **WebCore::ContainerNode::getElementsByTagNameNS@<X0>(WebCore::ContainerNode *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::StringImpl ***a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WebCore::NodeListsNodeData *v11;
  WTF *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  WTF::StringImpl ***v21;
  int i;
  unsigned int v23;
  WTF::StringImpl ***v24;
  int v25;
  WebCore::QualifiedName::QualifiedNameImpl *v26;
  uint64_t v27;
  WebCore::QualifiedName::QualifiedNameImpl *v28;
  WTF *v29;
  void *v30;
  unsigned int v31;
  WebCore::QualifiedName::QualifiedNameImpl *v32;
  int v33;
  uint64_t v34;
  WebCore::QualifiedName::QualifiedNameImpl *v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  char v44;
  WTF::StringImpl **result;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  void *v51;
  const WTF::AtomString *v52;
  const WTF::AtomString *v53;
  WTF::StringImpl ***v54;
  WebCore::ContainerNode *v55;
  WebCore::QualifiedName::QualifiedNameImpl *v56;

  v8 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v8)
  {
    WebCore::Node::materializeRareData(this);
    v8 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v9 = *v8;
  if (!*v8)
  {
    v9 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)(v9 + 32) = 0;
    v11 = (WebCore::NodeListsNodeData *)*v8;
    *v8 = v9;
    if (v11)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v11, v10);
      WTF::fastFree(v12, v13);
      v9 = *v8;
    }
  }
  if (!*a2 || !*((_DWORD *)*a2 + 1))
    a2 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v56, MEMORY[0x1E0CBF2F8], a3, a2);
  v16 = *(_QWORD *)(v9 + 24);
  v14 = (uint64_t *)(v9 + 24);
  v15 = v16;
  v55 = this;
  if (v16
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v14, 8u, 0), (v15 = *v14) != 0))
  {
    v17 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = v56;
  v19 = *((_DWORD *)v56 + 1);
  if (!v19)
  {
    v19 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(v56);
    *((_DWORD *)v18 + 1) = v19;
  }
  v20 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v52 = (const WTF::AtomString *)a2;
    v53 = (const WTF::AtomString *)a3;
    v54 = a4;
    v21 = 0;
    for (i = 1; ; ++i)
    {
      v23 = v19 & v17;
      v24 = (WTF::StringImpl ***)(v15 + 16 * (v19 & v17));
      if (v20)
      {
        v25 = (*(_DWORD *)v20)++;
        v26 = (WebCore::QualifiedName::QualifiedNameImpl *)*v24;
        if (v25)
        {
          *(_DWORD *)v20 = v25;
          v27 = (uint64_t)v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          WTF::fastFree(v29, v30);
          v27 = WebCore::nullName;
        }
      }
      else
      {
        v27 = 0;
        v26 = (WebCore::QualifiedName::QualifiedNameImpl *)*v24;
      }
      if (v26 == (WebCore::QualifiedName::QualifiedNameImpl *)v20)
        break;
      v28 = (WebCore::QualifiedName::QualifiedNameImpl *)*v24;
      if (*v24 == (WTF::StringImpl **)-1)
      {
        v21 = (WTF::StringImpl ***)(v15 + 16 * v23);
      }
      else if (v28 == v56)
      {
        v44 = 0;
        a3 = (WTF::StringImpl **)v53;
        a4 = v54;
        a2 = (WTF::StringImpl **)v52;
        goto LABEL_56;
      }
      v19 = i + v23;
      v20 = (WTF::StringImpl **)v27;
    }
    a3 = (WTF::StringImpl **)v53;
    a4 = v54;
    a2 = (WTF::StringImpl **)v52;
LABEL_34:
    if (v21)
    {
      v34 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *v21 = (WTF::StringImpl **)v34;
      v21[1] = 0;
      --*(_DWORD *)(*v14 - 16);
      v24 = v21;
    }
LABEL_38:
    v35 = v56;
    v56 = 0;
    v36 = *v24;
    *v24 = (WTF::StringImpl **)v35;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
        WTF::fastFree(v50, v51);
      }
      else
      {
        --*(_DWORD *)v36;
      }
    }
    v24[1] = 0;
    v37 = *v14;
    if (*v14)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v39 = *v14;
    if (*v14)
      v40 = *(_DWORD *)(v39 - 12);
    else
      v40 = 0;
    v41 = (*(_DWORD *)(v39 - 16) + v40);
    v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 > 2 * v41)
        goto LABEL_54;
    }
    else
    {
      if (3 * v42 > 4 * v41)
      {
LABEL_54:
        v44 = 1;
        goto LABEL_55;
      }
      if (!(_DWORD)v42)
      {
        v43 = 8;
        goto LABEL_53;
      }
    }
    v43 = (_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42));
LABEL_53:
    v24 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v14, v43, (WebCore::QualifiedName::QualifiedNameImpl **)v24);
    goto LABEL_54;
  }
  v31 = v19 & v17;
  v24 = (WTF::StringImpl ***)(v15 + 16 * (v19 & v17));
  v32 = (WebCore::QualifiedName::QualifiedNameImpl *)*v24;
  if (!*v24)
    goto LABEL_38;
  v21 = 0;
  v33 = 1;
  while (1)
  {
    if (v32 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
    {
      v21 = v24;
      goto LABEL_33;
    }
    if (v32 == v56)
      break;
LABEL_33:
    v31 = (v31 + v33) & v17;
    v24 = (WTF::StringImpl ***)(v15 + 16 * v31);
    v32 = (WebCore::QualifiedName::QualifiedNameImpl *)*v24;
    ++v33;
    if (!*v24)
      goto LABEL_34;
  }
  v44 = 0;
LABEL_55:
  v28 = v56;
LABEL_56:
  v56 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 != 1)
    {
      --*(_DWORD *)v28;
      goto LABEL_59;
    }
    WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v28);
    WTF::fastFree(v48, v49);
    if ((v44 & 1) == 0)
    {
LABEL_66:
      result = v24[1];
      ++*((_DWORD *)result + 4);
      goto LABEL_67;
    }
  }
  else
  {
LABEL_59:
    if ((v44 & 1) == 0)
      goto LABEL_66;
  }
  result = (WTF::StringImpl **)bmalloc::api::isoAllocate();
  *((_DWORD *)result + 4) = 1;
  *((_BYTE *)result + 20) = 0;
  *(_WORD *)((char *)result + 21) = *(_WORD *)((_BYTE *)result + 21) & 0xFC00 | 0x17;
  *((_DWORD *)v55 + 6) += 2;
  result[3] = v55;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_BYTE *)result + 80) &= 0xFCu;
  *result = (WTF::StringImpl *)off_1E33A7F40;
  result[1] = 0;
  v46 = *a2;
  if (*a2)
    *(_DWORD *)v46 += 2;
  result[11] = v46;
  v47 = *a3;
  if (*a3)
    *(_DWORD *)v47 += 2;
  result[12] = v47;
  v24[1] = result;
LABEL_67:
  *a4 = result;
  return result;
}

_QWORD *WebCore::ContainerNode::getElementsByClassName@<X0>(WebCore::ContainerNode *this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WebCore::NodeListsNodeData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  WTF::StringImpl *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v6)
  {
    WebCore::Node::materializeRareData(this);
    v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v7 = *v6;
  if (!*v6)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = (WebCore::NodeListsNodeData *)*v6;
    *v6 = v7;
    if (v8)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v8, a2);
      WTF::fastFree(v9, v10);
      v7 = *v6;
    }
  }
  v11 = (uint64_t *)(v7 + 32);
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v13 = *v11;
  if (*v11
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v7 + 32), 8u, 0), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = ((*((_DWORD *)v12 + 4) >> 8) + 22) & v14;
  v16 = (unsigned __int8 *)(v13 + 24 * v15);
  v17 = *v16;
  v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
  if (*v16)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (!v19)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      result = v20;
      v20 = v16;
      if (v17 != 255)
      {
        v20 = result;
        if (v17 == 22 && v18 == v12)
        {
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              result = (_QWORD *)WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
          v23 = *(_QWORD *)(v13 + 24 * v15 + 16);
          ++*(_DWORD *)(v23 + 16);
          goto LABEL_22;
        }
      }
      v15 = ((_DWORD)v15 + v21) & v14;
      v16 = (unsigned __int8 *)(v13 + 24 * v15);
      v17 = *v16;
      v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
      ++v21;
      if (*v16)
        v24 = 0;
      else
        v24 = v18 == 0;
    }
    while (!v24);
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = (unsigned __int8 *)v20;
    }
  }
  *v16 = 22;
  *((_QWORD *)v16 + 1) = v12;
  *((_QWORD *)v16 + 2) = 0;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v11;
  if (*v11)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_38;
LABEL_43:
    v16 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v11, (uint64_t)v16);
    goto LABEL_38;
  }
  if (3 * v30 <= 4 * v29)
    goto LABEL_43;
LABEL_38:
  result = (_QWORD *)WebCore::ClassCollection::create((uint64_t)this, 0x16u, a2, &v31);
  v23 = v31;
  *((_QWORD *)v16 + 2) = v31;
LABEL_22:
  *a3 = v23;
  return result;
}

uint64_t WebCore::ContainerNode::radioNodeList@<X0>(WebCore::ContainerNode *this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  WebCore::NodeListsNodeData *v8;
  WTF *v9;
  void *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  WTF::StringImpl *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t result;
  uint64_t v28;
  _DWORD *v29;
  BOOL v30;
  unsigned __int8 *v31;
  int v32;
  BOOL v33;
  char v34[8];
  WTF::StringImpl *v35;

  v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v6)
  {
    WebCore::Node::materializeRareData(this);
    v6 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v7 = *v6;
  if (!*v6)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_QWORD *)(v7 + 32) = 0;
    v8 = (WebCore::NodeListsNodeData *)*v6;
    *v6 = v7;
    if (v8)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v8, a2);
      WTF::fastFree(v9, v10);
      v7 = *v6;
    }
  }
  v11 = (uint64_t *)(v7 + 16);
  v34[0] = 1;
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v35 = v12;
  v13 = *v11;
  if (*v11
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand((uint64_t *)(v7 + 16), 0), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = ((*((_DWORD *)v12 + 4) >> 8) + 1) & v14;
  v16 = (unsigned __int8 *)(v13 + 24 * v15);
  v17 = *v16;
  v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
  if (*v16)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (!v19)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v17 == 255)
      {
        v31 = v16;
      }
      else if (v17 == 1 && v18 == v12)
      {
        v26 = 1;
        goto LABEL_25;
      }
      v15 = (v15 + v32) & v14;
      v16 = (unsigned __int8 *)(v13 + 24 * v15);
      v17 = *v16;
      v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
      ++v32;
      if (*v16)
        v33 = 0;
      else
        v33 = v18 == 0;
    }
    while (!v33);
    if (v31)
    {
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = v31;
    }
  }
  WTF::GenericHashTraits<std::pair<unsigned char,WTF::AtomString>>::assignToEmpty<std::pair<unsigned char,WTF::AtomString>,std::pair<unsigned char,WTF::AtomString>>((uint64_t)v16, (WTF::StringImpl *)v34);
  *((_QWORD *)v16 + 2) = 0;
  v20 = *v11;
  if (*v11)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v11;
  if (*v11)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_24;
LABEL_31:
    v16 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v11, v16);
    goto LABEL_24;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_31;
LABEL_24:
  v26 = 0;
LABEL_25:
  result = (uint64_t)v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      if (v26)
        goto LABEL_29;
      goto LABEL_33;
    }
    *(_DWORD *)result -= 2;
  }
  if (v26)
  {
LABEL_29:
    v28 = *((_QWORD *)v16 + 2);
    ++*(_DWORD *)(v28 + 16);
    *a3 = v28;
    return result;
  }
LABEL_33:
  result = bmalloc::api::isoAllocate();
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(result + 24) = this;
  *(_WORD *)(result + 32) = 5;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) &= 0xFCu;
  *(_QWORD *)result = off_1E33D7FD8;
  v29 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v29 += 2;
  *(_QWORD *)(result + 88) = v29;
  v30 = (*((_WORD *)this + 14) & 0x10) != 0
     && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::formTag + 24);
  *(_BYTE *)(result + 96) = v30;
  *a3 = result;
  *((_QWORD *)v16 + 2) = result;
  return result;
}

uint64_t WebCore::ContainerNode::children@<X0>(WebCore::ContainerNode *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  WebCore::NodeListsNodeData *v7;
  WTF *v8;
  void *v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  uint64_t result;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;

  v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  if (!v5)
  {
    WebCore::Node::materializeRareData(this);
    v5 = (uint64_t *)(*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL);
  }
  v6 = *v5;
  if (!*v5)
  {
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = 0;
    v7 = (WebCore::NodeListsNodeData *)*v5;
    *v5 = v6;
    if (v7)
    {
      WebCore::NodeListsNodeData::~NodeListsNodeData(v7, a2);
      WTF::fastFree(v8, v9);
      v6 = *v5;
    }
  }
  v10 = (uint64_t *)(v6 + 32);
  v11 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v6 + 32), 8u, 0), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((*((_DWORD *)v11 + 4) >> 8) + 11) & v13;
  v15 = (unsigned __int8 *)(v12 + 24 * v14);
  v16 = *v15;
  v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
  if (*v15)
    v18 = 0;
  else
    v18 = v17 == 0;
  if (!v18)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = v19;
      v19 = v15;
      if (v16 != 255)
      {
        v19 = v21;
        if (v16 == 11 && v17 == v11)
        {
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          result = *(_QWORD *)(v12 + 24 * v14 + 16);
          ++*(_DWORD *)(result + 16);
          goto LABEL_22;
        }
      }
      v14 = ((_DWORD)v14 + v20) & v13;
      v15 = (unsigned __int8 *)(v12 + 24 * v14);
      v16 = *v15;
      v17 = (WTF::StringImpl *)*((_QWORD *)v15 + 1);
      ++v20;
      if (*v15)
        v23 = 0;
      else
        v23 = v17 == 0;
    }
    while (!v23);
    if (v19)
    {
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = (unsigned __int8 *)v19;
    }
  }
  *v15 = 11;
  *((_QWORD *)v15 + 1) = v11;
  *((_QWORD *)v15 + 2) = 0;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v10;
  if (*v10)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_38;
LABEL_43:
    v15 = (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(v10, (uint64_t)v15);
    goto LABEL_38;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_43;
LABEL_38:
  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_WORD *)(result + 21) = *(_WORD *)(result + 21) & 0xFC00 | 0xB;
  *((_DWORD *)this + 6) += 2;
  *(_QWORD *)(result + 24) = this;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_BYTE *)(result + 80) &= 0xFCu;
  *(_QWORD *)result = off_1E33B3388;
  *(_QWORD *)(result + 8) = 0;
  *((_QWORD *)v15 + 2) = result;
LABEL_22:
  *a3 = result;
  return result;
}

uint64_t WebCore::ContainerNode::lastElementChild(WebCore::ContainerNode *this)
{
  uint64_t result;

  for (result = *((_QWORD *)this + 11); result; result = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL)
  {
    if ((*(_WORD *)(result + 28) & 8) != 0)
      break;
  }
  return result;
}

uint64_t WebCore::ContainerNode::childElementCount(WebCore::ContainerNode *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
    return 0;
  while ((*(_WORD *)(v1 + 28) & 8) == 0)
  {
    v1 = *(_QWORD *)(v1 + 56);
    if (!v1)
      return 0;
  }
  LODWORD(result) = 0;
LABEL_7:
  result = (result + 1);
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 56);
    if (!v1)
      return result;
    if ((*(_WORD *)(v1 + 28) & 8) != 0)
      goto LABEL_7;
  }
}

uint64_t WebCore::ContainerNode::append@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t result;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::ChildListMutationAccumulator *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[88];
  WebCore::Node *v27;
  void *__src;
  uint64_t v29;
  _BYTE v30[88];
  int v31;

  if (a1)
    *(_DWORD *)(a1 + 24) += 2;
  v27 = (WebCore::Node *)a1;
  WebCore::Node::convertNodesOrStringsOrTrustedScriptsIntoNodeVector(a1, &v27, a2, (uint64_t)&__src);
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (v31)
  {
    if (v31 != 1)
    {
      v22 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::ContainerNode::prepend(v22);
    }
    v21 = v29;
    v29 = 0;
    *(_BYTE *)a3 = (_BYTE)__src;
    *(_QWORD *)(a3 + 8) = v21;
    v12 = 1;
    *(_BYTE *)(a3 + 16) = 1;
    return ((uint64_t (*)(WTF **, void **))off_1E33A1750[v12])(&v24, &__src);
  }
  v24 = (WTF *)v26;
  v25 = 11;
  v7 = (WTF *)__src;
  if (__src == v30)
  {
    v8 = HIDWORD(v29);
    result = (uint64_t)memcpy(v26, __src, 8 * HIDWORD(v29));
    v7 = (WTF *)v26;
  }
  else
  {
    __src = v30;
    v24 = v7;
    v13 = v29;
    v8 = HIDWORD(v29);
    LODWORD(v29) = 11;
    LODWORD(v25) = v13;
  }
  HIDWORD(v29) = 0;
  HIDWORD(v25) = v8;
  if ((*(_WORD *)(a1 + 28) & 0xF000) != 0x9000)
  {
LABEL_10:
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        result = WebCore::checkAcceptChild(a3, (WebCore::Node *)a1, *(WebCore::Node **)v7, 0, 1, 1);
        if (*(_BYTE *)(a3 + 16))
          goto LABEL_21;
        v7 = (WTF *)((char *)v7 + 8);
        v9 -= 8;
      }
      while (v9);
    }
LABEL_14:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a1 + 24) += 2;
    WebCore::ChildListMutationScope::ChildListMutationScope(&v23, (WebCore::ContainerNode *)a1);
    WebCore::ContainerNode::insertChildrenBeforeWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a1, 0, (unsigned int *)&v24, a3);
    if (!*(_BYTE *)(a3 + 16))
    {
      WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary((_QWORD *)a1);
      WebCore::Node::dispatchSubtreeModifiedEvent(a1);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator((WebCore::ChildListMutationAccumulator *)result, v5);
        result = WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a1, v5);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
    goto LABEL_21;
  }
  if (!(_DWORD)v8)
    goto LABEL_14;
  v17 = 0;
  v18 = 8 * v8;
  v19 = v7;
  while (1)
  {
    v20 = *(_WORD *)(*(_QWORD *)v19 + 28);
    if ((v20 & 8) != 0 && (v17 & 1) != 0)
      break;
    v17 |= (v20 & 8) >> 3;
    v19 = (WTF *)((char *)v19 + 8);
    v18 -= 8;
    if (!v18)
      goto LABEL_10;
  }
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_21:
  v10 = v24;
  if (HIDWORD(v25))
  {
    v14 = 8 * HIDWORD(v25);
    do
    {
      result = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v10 = (WTF *)((char *)v10 + 8);
      v14 -= 8;
    }
    while (v14);
    v10 = v24;
  }
  if (v26 != (_BYTE *)v10 && v10 != 0)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    result = WTF::fastFree(v10, v5);
  }
  v12 = v31;
  if (v31 != -1)
    return ((uint64_t (*)(WTF **, void **))off_1E33A1750[v12])(&v24, &__src);
  return result;
}

uint64_t WebCore::ContainerNode::prepend@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  __int16 v21;
  uint64_t v22;
  WebCore::ChildListMutationAccumulator *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[88];
  WebCore::Node *v27;
  void *__src;
  uint64_t v29;
  _BYTE v30[88];
  int v31;

  if (a1)
    *(_DWORD *)(a1 + 24) += 2;
  v27 = (WebCore::Node *)a1;
  WebCore::Node::convertNodesOrStringsOrTrustedScriptsIntoNodeVector(a1, &v27, a2, (uint64_t)&__src);
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (!v31)
  {
    v8 = *(_QWORD *)(a1 + 80);
    if (v8)
      *(_DWORD *)(v8 + 24) += 2;
    v24 = (WTF *)v26;
    v25 = 11;
    v9 = (WTF *)__src;
    if (__src == v30)
    {
      v10 = HIDWORD(v29);
      result = (uint64_t)memcpy(v26, __src, 8 * HIDWORD(v29));
      v9 = (WTF *)v26;
    }
    else
    {
      __src = v30;
      v24 = v9;
      v14 = v29;
      v10 = HIDWORD(v29);
      LODWORD(v29) = 11;
      LODWORD(v25) = v14;
    }
    HIDWORD(v29) = 0;
    HIDWORD(v25) = v10;
    if ((*(_WORD *)(a1 + 28) & 0xF000) == 0x9000)
    {
      if ((_DWORD)v10)
      {
        v18 = 0;
        v19 = 8 * v10;
        v20 = v9;
        while (1)
        {
          v21 = *(_WORD *)(*(_QWORD *)v20 + 28);
          if ((v21 & 8) != 0 && (v18 & 1) != 0)
            break;
          v18 |= (v21 & 8) >> 3;
          v20 = (WTF *)((char *)v20 + 8);
          v19 -= 8;
          if (!v19)
            goto LABEL_14;
        }
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 16) = 1;
LABEL_25:
        v12 = v24;
        if (HIDWORD(v25))
        {
          v15 = 8 * HIDWORD(v25);
          do
          {
            result = *(_QWORD *)v12;
            *(_QWORD *)v12 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 24) == 2)
              {
                if ((*(_WORD *)(result + 30) & 0x400) == 0)
                  result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
              }
              else
              {
                *(_DWORD *)(result + 24) -= 2;
              }
            }
            v12 = (WTF *)((char *)v12 + 8);
            v15 -= 8;
          }
          while (v15);
          v12 = v24;
        }
        if (v26 == (_BYTE *)v12 || v12 == 0)
        {
          if (!v8)
            goto LABEL_34;
        }
        else
        {
          v24 = 0;
          LODWORD(v25) = 0;
          result = WTF::fastFree(v12, v5);
          if (!v8)
            goto LABEL_34;
        }
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v8, v5);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        goto LABEL_34;
      }
    }
    else
    {
LABEL_14:
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        do
        {
          result = WebCore::checkAcceptChild(a3, (WebCore::Node *)a1, *(WebCore::Node **)v9, v8, 1, 1);
          if (*(_BYTE *)(a3 + 16))
            goto LABEL_25;
          v9 = (WTF *)((char *)v9 + 8);
          v11 -= 8;
        }
        while (v11);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a1 + 24) += 2;
    WebCore::ChildListMutationScope::ChildListMutationScope(&v23, (WebCore::ContainerNode *)a1);
    WebCore::ContainerNode::insertChildrenBeforeWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a1, (WebCore::Node *)v8, (unsigned int *)&v24, a3);
    if (!*(_BYTE *)(a3 + 16))
    {
      WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary((_QWORD *)a1);
      WebCore::Node::dispatchSubtreeModifiedEvent(a1);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    result = (uint64_t)v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator((WebCore::ChildListMutationAccumulator *)result, v5);
        result = WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a1, v5);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
    goto LABEL_25;
  }
  if (v31 != 1)
  {
    v22 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::ContainerNode::replaceChildren(v22);
  }
  v7 = v29;
  v29 = 0;
  *(_BYTE *)a3 = (_BYTE)__src;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_34:
  if (v31 != -1)
    return ((uint64_t (*)(WTF **, void **))off_1E33A1750[v31])(&v24, &__src);
  return result;
}

uint64_t WebCore::ContainerNode::replaceChildren@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  WTF *v7;
  WTF *v8;
  void *v11;
  uint64_t result;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;
  void *v24;
  void *v25;
  const WebCore::Style::RuleSet *v26;
  Inspector::InspectorDebuggerAgent **v27;
  uint64_t v28;
  WebCore::Node *v29;
  WebCore::ChildListMutationAccumulator *v30;
  __int16 v31;
  WebCore::Style::Invalidator *v32;
  int v33;
  _BOOL4 v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  const WebCore::Style::RuleSet *v38;
  WebCore::TreeScope *v39;
  uint64_t v40;
  int v41;
  int v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WTF *v49;
  __int16 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  _BOOL4 v60;
  _QWORD *v61;
  BOOL v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v68;
  WebCore::TreeScope *v69;
  WebCore::Node *v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::WindowProxy *v75;
  WebCore::DOMWrapperWorld *v76;
  WebCore::DOMWrapperWorld **v77;
  WebCore::Document *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  WebCore::RenderView *v82;
  WebCore::Node *v83;
  WebCore::Element *RenderingAncestor;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  int v101;
  WTF *v104;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF *v115;
  uint64_t v116;
  _BYTE v117[88];
  WebCore::ChildListMutationAccumulator *v118;
  WTF *v119;
  uint64_t v120;
  _BYTE v121[88];
  WebCore::Node *v122;
  void *__src;
  uint64_t v124;
  _BYTE v125[88];
  int v126;
  WebCore::Style::Invalidator *v127[2];
  BOOL v128;
  BOOL v129;
  BOOL v130;
  _BYTE v131[32];
  uint64_t v132;
  WebCore::ChildListMutationAccumulator *v133[18];
  uint64_t v134[3];

  if (a1)
    *(_DWORD *)(a1 + 24) += 2;
  v122 = (WebCore::Node *)a1;
  WebCore::Node::convertNodesOrStringsOrTrustedScriptsIntoNodeVector(a1, &v122, a2, (uint64_t)&__src);
  result = (uint64_t)v122;
  v122 = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  if (v126)
  {
    if (v126 == 1)
    {
      v58 = v124;
      v124 = 0;
      *(_BYTE *)a3 = (_BYTE)__src;
      *(_QWORD *)(a3 + 8) = v58;
      v59 = 1;
      *(_BYTE *)(a3 + 16) = 1;
      return ((uint64_t (*)(WebCore::ChildListMutationAccumulator **, void **))off_1E33A1750[v59])(v133, &__src);
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_103;
  }
  v7 = (WTF *)v121;
  v119 = (WTF *)v121;
  v120 = 11;
  v13 = (WTF *)__src;
  if (__src == v125)
  {
    v14 = HIDWORD(v124);
    result = (uint64_t)memcpy(v121, __src, 8 * HIDWORD(v124));
    v13 = (WTF *)v121;
  }
  else
  {
    __src = v125;
    v119 = v13;
    v42 = v124;
    v14 = HIDWORD(v124);
    LODWORD(v124) = 11;
    LODWORD(v120) = v42;
  }
  HIDWORD(v124) = 0;
  HIDWORD(v120) = v14;
  if ((*(_WORD *)(a1 + 28) & 0xF000) != 0x9000)
    goto LABEL_10;
  if ((_DWORD)v14)
  {
    v47 = 0;
    v48 = 8 * v14;
    v49 = v13;
    do
    {
      v50 = *(_WORD *)(*(_QWORD *)v49 + 28);
      if ((v50 & 8) != 0 && (v47 & 1) != 0)
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 16) = 1;
        goto LABEL_213;
      }
      v47 |= (v50 & 8) >> 3;
      v49 = (WTF *)((char *)v49 + 8);
      v48 -= 8;
    }
    while (v48);
LABEL_10:
    if ((_DWORD)v14)
    {
      v15 = 8 * v14;
      do
      {
        result = WebCore::checkAcceptChild(a3, (WebCore::Node *)a1, *(WebCore::Node **)v13, 0, 1, 1);
        if (*(_BYTE *)(a3 + 16))
          goto LABEL_213;
        v13 = (WTF *)((char *)v13 + 8);
        v15 -= 8;
      }
      while (v15);
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a1 + 24) += 2;
  WebCore::ChildListMutationScope::ChildListMutationScope(&v118, (WebCore::ContainerNode *)a1);
  v8 = (WTF *)v117;
  v115 = (WTF *)v117;
  v116 = 11;
  v16 = *(_WORD *)(a1 + 28);
  if ((v16 & 4) != 0)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
    {
      v17 = 0;
      v4 = 16;
      v5 = (WTF *)v117;
      do
      {
        v6 = v17;
        if (v17 == (_DWORD)v116)
        {
          v19 = v17 + 1;
          v20 = v6 + (v6 >> 2);
          if (v20 >= 0x10)
            v21 = v20 + 1;
          else
            v21 = v4;
          if (v21 <= v19)
            v22 = v6 + 1;
          else
            v22 = v21;
          if (v22 < 0xC)
          {
LABEL_103:
            v115 = v8;
            LODWORD(v116) = 11;
            v23 = v8;
          }
          else
          {
            if (v22 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19595E22CLL);
            }
            v23 = (WTF *)WTF::fastMalloc((WTF *)(8 * v22));
            LODWORD(v116) = v22;
            v115 = v23;
          }
          memcpy(v23, v5, 8 * v6);
          if (v8 != v5 && v5)
          {
            if (v115 == v5)
            {
              v115 = 0;
              LODWORD(v116) = 0;
            }
            WTF::fastFree(v5, v24);
          }
          v17 = HIDWORD(v116);
          v5 = v115;
          v18 = (_QWORD *)((char *)v115 + 8 * HIDWORD(v116));
        }
        else
        {
          v18 = (_QWORD *)((char *)v5 + 8 * v17);
        }
        *(_DWORD *)(v3 + 24) += 2;
        *v18 = v3;
        HIDWORD(v116) = ++v17;
        v3 = *(_QWORD *)(v3 + 56);
      }
      while (v3);
      v16 = *(_WORD *)(a1 + 28);
    }
  }
  if ((v16 & 0xF200) == 0xB200)
  {
    v51 = WebCore::ScriptDisallowedScope::s_count++;
    if ((*(_QWORD *)(a1 + 72) & 0x3FFFFFFFFFFFFFFLL) != 0
      || (v52 = *(_QWORD *)(a1 + 8)) != 0 && (*(_BYTE *)(v52 + 8) & 3) == 0 && *(_QWORD *)v52)
    {
      __break(0xC471u);
      JUMPOUT(0x19595E1C0);
    }
    v53 = *(_QWORD *)(a1 + 80);
    if (v53)
    {
      do
      {
        *(_DWORD *)(v53 + 24) += 2;
        v55 = *(_QWORD *)(v53 + 56);
        if (v55)
        {
          *(_DWORD *)(v55 + 24) += 2;
          WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)a1, 0, (WebCore::Node *)v55, (WebCore::Node *)v53);
          if (*(_DWORD *)(v55 + 24) == 2)
          {
            if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v55, v54);
          }
          else
          {
            *(_DWORD *)(v55 + 24) -= 2;
          }
        }
        else
        {
          WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)a1, 0, 0, (WebCore::Node *)v53);
        }
        if (*(_DWORD *)(v53 + 24) == 2)
        {
          if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v53, v54);
        }
        else
        {
          *(_DWORD *)(v53 + 24) -= 2;
        }
        v53 = *(_QWORD *)(a1 + 80);
      }
      while (v53);
      v51 = WebCore::ScriptDisallowedScope::s_count - 1;
    }
    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(_QWORD *)(v56 + 1288) = ++WebCore::Document::s_globalTreeVersion;
    WebCore::ScriptDisallowedScope::s_count = v51;
    goto LABEL_199;
  }
  WebCore::ChildListMutationScope::ChildListMutationScope(v133, (WebCore::ContainerNode *)a1);
  if (HIDWORD(v116))
  {
    v27 = (Inspector::InspectorDebuggerAgent **)v115;
    v28 = 8 * HIDWORD(v116);
    do
    {
      v29 = *v27;
      if (v133[0] && *((_QWORD *)v133[0] + 10))
      {
        WebCore::ChildListMutationAccumulator::willRemoveChild(v133[0], v29);
        v29 = *v27;
      }
      WebCore::Node::notifyMutationObserversNodeWillDetach(v29);
      WebCore::dispatchChildRemovalEvents(v27++);
      v28 -= 8;
    }
    while (v28);
  }
  v30 = v133[0];
  v133[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v30, v25);
      WTF::fastFree(v43, v44);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  if ((*(_WORD *)(a1 + 78) & 0x3FF) != 0)
    WebCore::disconnectSubframes((WebCore::Node *)a1, 1);
  v132 = 1;
  memset(v131, 0, sizeof(v131));
  v131[0] = 5;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  v31 = *(_WORD *)(a1 + 28);
  if ((v31 & 8) != 0)
    v32 = (WebCore::Style::Invalidator *)a1;
  else
    v32 = 0;
  v127[0] = v32;
  v127[1] = (WebCore::Style::Invalidator *)v131;
  if ((v31 & 8) != 0)
  {
    v60 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)a1);
    v128 = v60;
    if (v60)
    {
      v61 = (_QWORD *)*((_QWORD *)v127[0] + 5);
      if (*v61)
        v62 = (*(_WORD *)(*v61 + 28) & 0x80) == 0;
      else
        v62 = 1;
      if (v62)
        v63 = v61[1] + 1328;
      else
        v63 = *v61 + 216;
      v34 = *(unsigned __int8 *)(*(_QWORD *)v63 + 236) != 0;
      v33 = 1;
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v128 = 0;
  }
  v129 = v34;
  v130 = *(_QWORD *)(a1 + 80) == 0;
  if (v33 && v34)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v127, (uint64_t)v25, v26);
  if ((*(_WORD *)(a1 + 28) & 0x80) != 0 || (*(_BYTE *)(a1 + 22) & 0x10) != 0)
  {
    v35 = *(_QWORD **)(a1 + 40);
    v45 = *v35;
    if ((*(_WORD *)(*v35 + 28) & 0x80) == 0)
      v45 = 0;
    v46 = *(_QWORD *)(v45 + 224);
    if (v46)
    {
      ++*(_DWORD *)(v46 + 12);
      *(_BYTE *)(v46 + 9) = 1;
    }
  }
  else
  {
    v35 = *(_QWORD **)(a1 + 40);
  }
  v36 = v35[1];
  *(_DWORD *)(v36 + 24) += 2;
  WebCore::Document::nodeChildrenWillBeRemoved((WebCore::Document *)v36, (WebCore::ContainerNode *)a1);
  if (*(_DWORD *)(v36 + 24) == 2)
  {
    if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v36, v37);
  }
  else
  {
    *(_DWORD *)(v36 + 24) -= 2;
  }
  v40 = *(_QWORD *)(a1 + 80);
  if (!v40)
  {
    v57 = 1;
    goto LABEL_192;
  }
  v41 = 0;
  do
  {
    *(_DWORD *)(v40 + 24) += 2;
    v64 = *(_WORD *)(v40 + 28);
    v65 = *(_QWORD *)(v40 + 56);
    if (!v65)
    {
      WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)a1, 0, 0, (WebCore::Node *)v40);
      goto LABEL_131;
    }
    *(_DWORD *)(v65 + 24) += 2;
    v66 = *(_QWORD *)(*(_QWORD *)(v40 + 40) + 8);
    *(_DWORD *)(v66 + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v86 = *(_QWORD *)(v66 + 528);
      if (v86)
      {
        v87 = *(_QWORD *)(v86 + 8);
        if (v87)
        {
          v88 = *(_QWORD *)(v87 + 24);
          if (v88)
          {
            v89 = *(_QWORD *)(v88 + 8);
            if (v89)
              goto LABEL_173;
          }
        }
      }
      v95 = *(_QWORD *)(v66 + 2632);
      if (v95)
      {
        v96 = *(_QWORD *)(v95 + 8);
        if (v96)
        {
          v97 = *(_QWORD *)(v96 + 528);
          if (v97)
          {
            v98 = *(_QWORD *)(v97 + 8);
            if (v98)
            {
              v99 = *(_QWORD *)(v98 + 24);
              if (v99)
              {
                v89 = *(_QWORD *)(v99 + 8);
                if (v89)
                {
LABEL_173:
                  v90 = *(_QWORD *)(*(_QWORD *)(v89 + 80) + 8);
                  v91 = *(_QWORD *)(v90 + 152);
                  if (v91)
                  {
                    v133[0] = (WebCore::ChildListMutationAccumulator *)v40;
                    v113 = v90;
                    v114 = v91;
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v91 + 168), (WTF::StringImpl *)v133);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v114 + 176), (WTF::StringImpl *)v133);
                    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>((uint64_t *)(v114 + 184), (WTF::StringImpl *)v133);
                    v90 = v113;
                  }
                  v92 = *(uint64_t **)(v90 + 40);
                  if (v92)
                    WebCore::InspectorDOMAgent::didRemoveDOMNode(v92, (WebCore::Node *)v40);
                }
              }
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v66 + 24) == 2)
    {
      if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v66, v37);
    }
    else
    {
      *(_DWORD *)(v66 + 24) -= 2;
    }
    ++WebCore::ScriptDisallowedScope::s_count;
    v68 = *(_WORD *)(v40 + 28);
    if ((*(_QWORD *)(v40 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((v68 & 8) == 0)
      {
        if ((v68 & 2) != 0)
          WebCore::RenderTreeUpdater::tearDownRenderer((WebCore::RenderTreeUpdater *)v40, (WebCore::Text *)v37);
        goto LABEL_126;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v40 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19595E808);
      }
LABEL_157:
      v82 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(v40 + 40) + 8) + 1944);
      if (v82)
      {
        WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v133, v82);
        WebCore::RenderTreeUpdater::tearDownRenderers(v40, 0);
        RenderingAncestor = (WebCore::Element *)WebCore::findRenderingAncestor((WebCore *)v40, v83);
        if (RenderingAncestor)
        {
          if ((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19595E84CLL);
          }
          if ((*(_QWORD *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1ELL) == 0x16)
            WebCore::Element::invalidateRenderer(RenderingAncestor);
        }
        WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v133, v85);
      }
      goto LABEL_126;
    }
    if ((v68 & 8) != 0 && (*(_QWORD *)(v40 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v81 = *(_QWORD *)((*(_QWORD *)(v40 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (v81)
      {
        if ((*(_QWORD *)(v81 + 16) & 0x1FLL) == 0x12)
          goto LABEL_157;
      }
    }
LABEL_126:
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v93 = (*(_WORD *)(a1 + 28) & 8) != 0 && (*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) != 0
          ? *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
          : 0;
      v94 = *(_QWORD *)(v93 + 224);
      if (v94)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 96))(v94, v40);
    }
    *(_QWORD *)(v65 + 48) = (unint64_t)*(unsigned __int16 *)(v65 + 54) << 48;
    *(_QWORD *)(v40 + 56) = 0;
    *(_QWORD *)(a1 + 80) = v65;
    *(_QWORD *)(v40 + 32) = 0;
    *(_DWORD *)(v40 + 24) &= ~1u;
    v69 = (WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 96);
    v70 = *(WebCore::Node **)(v40 + 40);
    if (v70 != v69)
      WebCore::Node::moveTreeToNewScope(v40, v70, v69, v39);
    --WebCore::ScriptDisallowedScope::s_count;
    if (*(_DWORD *)(v65 + 24) == 2)
    {
      if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v65, v70);
    }
    else
    {
      *(_DWORD *)(v65 + 24) -= 2;
    }
LABEL_131:
    v71 = (*(_BYTE *)(a1 + 22) & 0x18) == 0;
    if ((*(_BYTE *)(v40 + 22) & 8) != 0)
    {
      if (!WebCore::notifyNodeRemovedFromDocument(a1, v71, v40))
        goto LABEL_116;
    }
    else if (!WebCore::notifyNodeRemovedFromTree(a1, v71, v40))
    {
      goto LABEL_116;
    }
    v72 = *(_QWORD *)(v40 + 8);
    if ((!v72 || (*(_BYTE *)(v72 + 8) & 3) != 0 || !*(_QWORD *)v72) && (*(_WORD *)(v40 + 28) & 4) != 0)
    {
      if (*(_QWORD *)(v40 + 80))
      {
        v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 40) + 8) + 528);
        if (v73)
        {
          v74 = *(_QWORD *)(v73 + 8);
          if (v74)
          {
            v75 = *(WebCore::WindowProxy **)(v74 + 112);
            {
              v76 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
            }
            else
            {
              v112 = WebCore::g_commonVMOrNull;
              if (!WebCore::g_commonVMOrNull)
                v112 = WebCore::commonVMSlow(0);
              v76 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v112 + 41456) + 16);
              WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v76;
            }
            v77 = (WebCore::DOMWrapperWorld **)*((_QWORD *)WebCore::WindowProxy::jsWindowProxy(v75, v76) + 2);
            JSC::JSLockHolder::JSLockHolder();
            *(_DWORD *)(v40 + 24) += 2;
            v134[0] = v40;
            WebCore::createWrapper(v77, (JSC::VM *)v77, (WebCore::JSDOMGlobalObject *)v134, v78);
            v80 = v134[0];
            v134[0] = 0;
            if (v80)
            {
              if (*(_DWORD *)(v80 + 24) == 2)
              {
                if ((*(_WORD *)(v80 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v80, v79);
              }
              else
              {
                *(_DWORD *)(v80 + 24) -= 2;
              }
            }
            MEMORY[0x19AEA32A0](v133);
          }
        }
      }
    }
LABEL_116:
    if (*(_DWORD *)(v40 + 24) == 2)
    {
      if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v40, v37);
    }
    else
    {
      *(_DWORD *)(v40 + 24) -= 2;
    }
    v41 |= (v64 & 8) >> 3;
    v40 = *(_QWORD *)(a1 + 80);
  }
  while (v40);
  if ((v41 & 1) != 0)
    v57 = 2;
  else
    v57 = 1;
LABEL_192:
  BYTE1(v132) = v57;
  if (v128)
  {
    if (v129)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v127, (uint64_t)v37, v38);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v127);
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 376))(a1, v131);
  --WebCore::ScriptDisallowedScope::s_count;
  v101 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove != 0)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v133, v100);
    v101 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v101 - 1;
LABEL_199:
  WebCore::ContainerNode::insertChildrenBeforeWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a1, 0, (unsigned int *)&v119, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    WebCore::ContainerNode::rebuildSVGExtensionsElementsIfNecessary((_QWORD *)a1);
    WebCore::Node::dispatchSubtreeModifiedEvent(a1);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  if (HIDWORD(v116))
  {
    v107 = v115;
    v108 = 8 * HIDWORD(v116);
    do
    {
      v109 = *(_QWORD *)v107;
      *(_QWORD *)v107 = 0;
      if (v109)
      {
        if (*(_DWORD *)(v109 + 24) == 2)
        {
          if ((*(_WORD *)(v109 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v109, v11);
        }
        else
        {
          *(_DWORD *)(v109 + 24) -= 2;
        }
      }
      v107 = (WTF *)((char *)v107 + 8);
      v108 -= 8;
    }
    while (v108);
  }
  if (v8 != v115 && v115 != 0)
    WTF::fastFree(v115, v11);
  result = (uint64_t)v118;
  v118 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator((WebCore::ChildListMutationAccumulator *)result, v11);
      result = WTF::fastFree(v110, v111);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a1, v11);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
  }
LABEL_213:
  v104 = v119;
  if (HIDWORD(v120))
  {
    v106 = 8 * HIDWORD(v120);
    do
    {
      result = *(_QWORD *)v104;
      *(_QWORD *)v104 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v104 = (WTF *)((char *)v104 + 8);
      v106 -= 8;
    }
    while (v106);
    v104 = v119;
  }
  if (v7 != v104 && v104 != 0)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    result = WTF::fastFree(v104, v11);
  }
  v59 = v126;
  if (v126 != -1)
    return ((uint64_t (*)(WebCore::ChildListMutationAccumulator **, void **))off_1E33A1750[v59])(v133, &__src);
  return result;
}

uint64_t WebCore::NodeListsNodeData::cachedCollection<WebCore::HTMLCollection>(uint64_t a1, unsigned __int8 a2)
{
  WTF::StringImpl *v2;
  unsigned __int8 *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v2 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v3 = WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>>,std::pair<unsigned char,WTF::AtomString>>(*(_QWORD *)(a1 + 32), a2, (uint64_t)v2);
  if (v3)
    v5 = *((_QWORD *)v3 + 2);
  else
    v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v5;
}

uint64_t WebCore::notifyNodeInsertedIntoDocument(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;

  *(_DWORD *)(a2 + 24) += 2;
  if (a3)
    v7 = 1;
  else
    v7 = 257;
  v8 = a2;
  while (1)
  {
    v9 = v8;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 272))(v8, v7, a1);
    if ((_DWORD)result == 1)
      break;
    if ((*(_WORD *)(v8 + 28) & 8) == 0)
      goto LABEL_8;
LABEL_7:
    if ((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v16 = *(_QWORD *)((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v16)
      {
        *(_DWORD *)(v16 + 24) += 2;
        result = WebCore::notifyNodeInsertedIntoDocument(a1, v16, 1, a4);
        if (*(_DWORD *)(v16 + 24) != 2)
        {
          *(_DWORD *)(v16 + 24) -= 2;
          if ((*(_WORD *)(v9 + 28) & 4) == 0)
            goto LABEL_10;
          goto LABEL_9;
        }
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
    }
LABEL_8:
    if ((*(_WORD *)(v9 + 28) & 4) == 0)
      goto LABEL_10;
LABEL_9:
    v8 = *(_QWORD *)(v9 + 80);
    if (v8)
      goto LABEL_16;
LABEL_10:
    if (v9 == a2)
    {
      v8 = 0;
      v11 = *(_DWORD *)(v9 + 24) - 2;
      if (*(_DWORD *)(v9 + 24) != 2)
        goto LABEL_18;
      goto LABEL_12;
    }
    v8 = *(_QWORD *)(v9 + 56);
    if (v8)
    {
LABEL_16:
      *(_DWORD *)(v8 + 24) += 2;
      goto LABEL_17;
    }
    v14 = v9;
    while (1)
    {
      v14 = *(_QWORD *)(v14 + 32);
      if (!v14 || v14 == a2)
        break;
      v8 = *(_QWORD *)(v14 + 56);
      if (v8)
        goto LABEL_16;
    }
    v8 = 0;
LABEL_17:
    v11 = *(_DWORD *)(v9 + 24) - 2;
    if (*(_DWORD *)(v9 + 24) != 2)
    {
LABEL_18:
      *(_DWORD *)(v9 + 24) = v11;
      goto LABEL_19;
    }
LABEL_12:
    if ((*(_WORD *)(v9 + 30) & 0x400) != 0)
    {
LABEL_19:
      if (!v8)
        return result;
    }
    else
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v9);
      if (!v8)
        return result;
    }
  }
  v12 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v12 != *(_DWORD *)(a4 + 8))
  {
    v13 = (_QWORD *)(*(_QWORD *)a4 + 8 * v12);
    goto LABEL_23;
  }
  v18 = (void *)(a4 + 16);
  v17 = *(void **)a4;
  v19 = v12 + (v12 >> 2);
  if (v19 >= 0x10)
    v20 = v19 + 1;
  else
    v20 = 16;
  if (v20 <= v12 + 1)
    v21 = v12 + 1;
  else
    v21 = v20;
  if (v21 < 0xC)
  {
    *(_QWORD *)a4 = v18;
    *(_DWORD *)(a4 + 8) = 11;
    v22 = (void *)(a4 + 16);
LABEL_46:
    result = (uint64_t)memcpy(v22, v17, 8 * v12);
    if (v18 != v17 && v17)
    {
      if (*(void **)a4 == v17)
      {
        *(_QWORD *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v17, v23);
    }
    v12 = *(unsigned int *)(a4 + 12);
    v13 = (_QWORD *)(*(_QWORD *)a4 + 8 * v12);
LABEL_23:
    *(_DWORD *)(v9 + 24) += 2;
    *v13 = v9;
    *(_DWORD *)(a4 + 12) = v12 + 1;
    if ((*(_WORD *)(v9 + 28) & 8) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!(v21 >> 29))
  {
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
    *(_DWORD *)(a4 + 8) = v21;
    *(_QWORD *)a4 = v22;
    goto LABEL_46;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::disconnectSubframes(WebCore::Node *a1, char a2)
{
  uint64_t result;
  void *v4;
  WTF *v5;
  int v6;
  uint64_t v7;
  const WebCore::Node **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  WebCore::Node *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15[3];
  int v16;

  v13 = 0;
  v14 = 0;
  if ((a2 & 1) == 0 && (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a1 + 192))(a1))
  {
    *((_DWORD *)a1 + 6) += 2;
    v15[0] = (uint64_t)a1;
    WTF::Vector<WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>>((uint64_t)&v13, (unint64_t)v15);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(v15);
  }
  WebCore::collectFrameOwners((WebCore::Node *)&v13, (uint64_t)a1);
  if ((*((_WORD *)a1 + 14) & 8) != 0 && (*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v11 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v11)
      WebCore::collectFrameOwners((WebCore::Node *)&v13, v11);
  }
  v12 = a1;
  {
    WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes = 0;
  }
  v16 = 0;
  result = (uint64_t)WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes, (uint64_t *)&v12, &v16, (uint64_t)v15);
  ++*(_DWORD *)(v15[0] + 8);
  v5 = v13;
  v6 = HIDWORD(v14);
  v7 = 8 * HIDWORD(v14);
  if (HIDWORD(v14))
  {
    result = WebCore::HTMLFrameOwnerElement::disconnectContentFrame(*(_QWORD *)v13);
    if (v6 != 1)
    {
      v8 = (const WebCore::Node **)((char *)v5 + 8);
      v9 = v7 - 8;
      do
      {
        result = WebCore::Node::containsIncludingShadowDOM(a1, *v8);
        if ((_DWORD)result)
          result = WebCore::HTMLFrameOwnerElement::disconnectContentFrame((uint64_t)*v8);
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  if (v12)
  {
    {
      WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes = 0;
    }
    result = WTF::HashCountedSet<WebCore::ContainerNode *,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>>::remove(&WebCore::SubframeLoadingDisabler::disabledSubtreeRoots(void)::nodes, &v12);
  }
  if (v6)
  {
    v10 = (uint64_t *)v5;
    do
    {
      result = *v10;
      *v10 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      ++v10;
      v7 -= 8;
    }
    while (v7);
  }
  if (v5)
    return WTF::fastFree(v5, v4);
  return result;
}

WebCore::Node *WebCore::collectFrameOwners(WebCore::Node *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  WebCore::Node *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a2 + 80);
  if (v2)
  {
    v3 = (uint64_t)result;
    while ((*(_WORD *)(v2 + 28) & 8) == 0)
    {
      v2 = *(_QWORD *)(v2 + 56);
      if (!v2)
        return result;
    }
    v14 = a2;
    v15 = v2;
    do
    {
      if ((*(_WORD *)(v2 + 78) & 0x3FF) == 0)
      {
        result = (WebCore::Node *)WebCore::ElementIterator<WebCore::Element>::traverseNextSkippingChildren(&v14);
        v2 = v15;
        continue;
      }
      result = (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 192))(v2);
      if ((_DWORD)result)
      {
        *(_DWORD *)(v2 + 24) += 2;
        v13 = (WebCore::Node *)v2;
        v4 = *(unsigned int *)(v3 + 12);
        if ((_DWORD)v4 == *(_DWORD *)(v3 + 8))
        {
          v5 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v4 + 1, (unint64_t)&v13);
          v4 = *(unsigned int *)(v3 + 12);
          v6 = *(_QWORD *)v3;
          v7 = *v5;
          *v5 = 0;
          *(_QWORD *)(v6 + 8 * v4) = v7;
        }
        else
        {
          v12 = *(_QWORD *)v3;
          v13 = 0;
          *(_QWORD *)(v12 + 8 * v4) = v2;
        }
        *(_DWORD *)(v3 + 12) = v4 + 1;
        result = v13;
        v13 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
      }
      if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0
        && *(_QWORD *)((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
      {
        result = (WebCore::Node *)WebCore::collectFrameOwners(v3);
      }
      v8 = v15;
      v9 = *(_QWORD *)(v15 + 80);
      if (!v9)
      {
        if (v15 == v14)
          goto LABEL_39;
        while (1)
        {
          v9 = *(_QWORD *)(v8 + 56);
          if (v9)
            break;
          v8 = *(_QWORD *)(v8 + 32);
          if (v8)
            v11 = v8 == v14;
          else
            v11 = 1;
          if (v11)
            goto LABEL_39;
        }
      }
      if ((*(_WORD *)(v9 + 28) & 8) == 0)
      {
        while (v9 != v14)
        {
          while (1)
          {
            v2 = *(_QWORD *)(v9 + 56);
            if (v2)
              break;
            v9 = *(_QWORD *)(v9 + 32);
            if (v9)
              v10 = v9 == v14;
            else
              v10 = 1;
            if (v10)
              goto LABEL_39;
          }
          v9 = *(_QWORD *)(v9 + 56);
          if ((*(_WORD *)(v2 + 28) & 8) != 0)
            goto LABEL_29;
        }
LABEL_39:
        v2 = 0;
        goto LABEL_29;
      }
      v2 = v9;
LABEL_29:
      v15 = v2;
    }
    while (v2);
  }
  return result;
}

uint64_t WebCore::ContainerNode::absoluteEventHandlerBounds(WebCore::ContainerNode *this, BOOL *a2)
{
  return 0;
}

__n128 WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ElementAndTextDescendantIterator::AncestorSibling>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<WebCore::Node *,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContainerNode *&>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v12 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = *a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x15)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 20;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  WTF *v9;
  WTF *v11;
  WTF *v13;
  int v14;
  int v15;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(WTF **)a1;
  if (v4)
  {
    v6 = 0;
    v7 = 584 * v4;
    do
    {
      v8 = (char *)v5 + v6;
      v9 = *(WTF **)((char *)v5 + v6 + 296);
      if ((WTF *)((char *)v5 + v6 + 312) != v9 && v9 != 0)
      {
        *((_QWORD *)v8 + 37) = 0;
        *((_DWORD *)v8 + 76) = 0;
        WTF::fastFree(v9, a2);
        v8 = (char *)v5 + v6;
      }
      v11 = (WTF *)*((_QWORD *)v8 + 1);
      if (v8 + 24 != (char *)v11 && v11 != 0)
      {
        *((_QWORD *)v8 + 1) = 0;
        *(_DWORD *)((char *)v5 + v6 + 16) = 0;
        WTF::fastFree(v11, a2);
      }
      v6 += 584;
    }
    while (v7 != v6);
    v5 = *(WTF **)a1;
  }
  if (v5 != (WTF *)(a1 + 16))
  {
    if (v5)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
    *(_QWORD *)a1 = a1 + 16;
  }
  v13 = *(WTF **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    WTF::VectorMover<false,WebCore::ComposedTreeIterator::Context>::move(v13, (WTF *)((char *)v13 + 584 * a2[3]), a1 + 16);
    v14 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v13;
    v14 = a2[2];
    a2[2] = 8;
  }
  *(_DWORD *)(a1 + 8) = v14;
  v15 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v15;
  return a1;
}

WTF *WTF::VectorMover<false,WebCore::ComposedTreeIterator::Context>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  int v22;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = (char *)v5 + v6;
      v8 = a3 + v6;
      v9 = (void *)(a3 + v6 + 24);
      *(_QWORD *)v8 = *(_QWORD *)((char *)v5 + v6);
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)(v8 + 16) = 16;
      v10 = *(const void **)((char *)v5 + v6 + 8);
      v11 = (uint64_t)v5 + v6 + 24;
      if ((const void *)v11 == v10)
      {
        memcpy(v9, v10, 16 * *((unsigned int *)v7 + 5));
      }
      else
      {
        *((_QWORD *)v7 + 1) = v11;
        *(_QWORD *)(v8 + 8) = v10;
        v21 = *((_DWORD *)v7 + 4);
        *((_DWORD *)v7 + 4) = 16;
        *(_DWORD *)(v8 + 16) = v21;
      }
      v12 = (char *)v5 + v6;
      v13 = *(_DWORD *)((char *)v5 + v6 + 20);
      *(_DWORD *)((char *)v5 + v6 + 20) = 0;
      *(_DWORD *)(v8 + 20) = v13;
      v14 = a3 + v6;
      *(_DWORD *)(v14 + 280) = *(_DWORD *)((char *)v5 + v6 + 280);
      v15 = (void *)(a3 + v6 + 312);
      *(_QWORD *)(v14 + 288) = *(_QWORD *)((char *)v5 + v6 + 288);
      *(_QWORD *)(v14 + 296) = v15;
      *(_QWORD *)(v14 + 304) = 16;
      v16 = *(void **)((char *)v5 + v6 + 296);
      v17 = (uint64_t)v5 + v6 + 312;
      if ((void *)v17 == v16)
      {
        memcpy(v15, v16, 16 * *((unsigned int *)v12 + 77));
      }
      else
      {
        *((_QWORD *)v12 + 37) = v17;
        *(_QWORD *)(v14 + 296) = v16;
        v22 = *((_DWORD *)v12 + 76);
        *((_DWORD *)v12 + 76) = 16;
        *(_DWORD *)(v14 + 304) = v22;
      }
      v18 = *(_DWORD *)((char *)v5 + v6 + 308);
      *(_DWORD *)((char *)v5 + v6 + 308) = 0;
      *(_DWORD *)(v14 + 308) = v18;
      v19 = a3 + v6;
      *(_DWORD *)(v19 + 568) = *(_DWORD *)((char *)v5 + v6 + 568);
      *(_QWORD *)(v19 + 576) = *(_QWORD *)((char *)v5 + v6 + 576);
      v20 = (WTF *)*((_QWORD *)v12 + 37);
      if ((WTF *)v17 != v20 && v20)
      {
        *((_QWORD *)v12 + 37) = 0;
        *(_DWORD *)((char *)v5 + v6 + 304) = 0;
        WTF::fastFree(v20, v16);
      }
      result = (WTF *)*((_QWORD *)v7 + 1);
      if ((WTF *)v11 != result)
      {
        if (result)
        {
          *((_QWORD *)v7 + 1) = 0;
          *(_DWORD *)((char *)v5 + v6 + 16) = 0;
          result = (WTF *)WTF::fastFree(result, v16);
        }
      }
      v6 += 584;
    }
    while ((WTF *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t WebCore::ComposedTreeIterator::Context::Context(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  int v6;
  const void *v7;
  int v8;
  int v10;
  int v11;

  v4 = (void *)(a1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 16;
  v5 = *(const void **)(a2 + 8);
  if (v5 == (const void *)(a2 + 24))
  {
    memcpy(v4, v5, 16 * *(unsigned int *)(a2 + 20));
  }
  else
  {
    *(_QWORD *)(a2 + 8) = a2 + 24;
    *(_QWORD *)(a1 + 8) = v5;
    v10 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 16;
    *(_DWORD *)(a1 + 16) = v10;
  }
  v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 16;
  v7 = *(const void **)(a2 + 296);
  if (v7 == (const void *)(a2 + 312))
  {
    memcpy((void *)(a1 + 312), v7, 16 * *(unsigned int *)(a2 + 308));
  }
  else
  {
    *(_QWORD *)(a2 + 296) = a2 + 312;
    *(_QWORD *)(a1 + 296) = v7;
    v11 = *(_DWORD *)(a2 + 304);
    *(_DWORD *)(a2 + 304) = 16;
    *(_DWORD *)(a1 + 304) = v11;
  }
  v8 = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 308) = 0;
  *(_DWORD *)(a1 + 308) = v8;
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  return a1;
}

Inspector::InspectorDebuggerAgent **WebCore::dispatchChildRemovalEvents(Inspector::InspectorDebuggerAgent **result)
{
  const WebCore::Node **v1;
  WebCore::Node *v2;
  uint64_t v3;
  WebCore::NodeTraversal *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WebCore::Event *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  WebCore::Event *v21;
  WTF::StringImpl *v22;
  const WebCore::Node *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WebCore::Node *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore::NodeTraversal *v30;

  v1 = result;
  v2 = *result;
  v3 = *(_QWORD *)(*((_QWORD *)*result + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v6 = *(_QWORD *)(v3 + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
            goto LABEL_17;
        }
      }
    }
    v10 = *(_QWORD *)(v3 + 2632);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 528);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 24);
            if (v14)
            {
              v9 = *(_QWORD *)(v14 + 8);
              if (v9)
              {
LABEL_17:
                result = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 152);
                if (result)
                  result = (Inspector::InspectorDebuggerAgent **)WebCore::PageDOMDebuggerAgent::willRemoveDOMNode(result, v2);
              }
            }
          }
        }
      }
    }
  }
  if ((*((_BYTE *)*v1 + 22) & 0x10) != 0 || *(_BYTE *)(v3 + 3268))
    goto LABEL_8;
  if (*((_QWORD *)*v1 + 4) && (*(_WORD *)(v3 + 3292) & 4) != 0)
  {
    v27 = *v1;
    v15 = (_QWORD *)(WebCore::eventNames((WebCore *)result) + 40);
    v16 = *((_QWORD *)*v1 + 4);
    if (v16)
      *(_DWORD *)(v16 + 24) += 2;
    v29 = 0;
    v30 = 0;
    v17 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
    WebCore::MutationEvent::MutationEvent((uint64_t)v17, v15, 1, 0, v16, (_DWORD **)&v30, (_DWORD **)&v29);
    WebCore::Node::dispatchScopedEvent(v27, v17);
    if (*((_DWORD *)v17 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 4);
    v19 = v29;
    v29 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = (Inspector::InspectorDebuggerAgent **)v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (Inspector::InspectorDebuggerAgent **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      else
        *(_DWORD *)result -= 2;
    }
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 2)
      {
        if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
          result = (Inspector::InspectorDebuggerAgent **)WebCore::Node::removedLastRef((WebCore::Node *)v16);
      }
      else
      {
        *(_DWORD *)(v16 + 24) -= 2;
      }
    }
  }
  v5 = *v1;
  if ((*((_BYTE *)*v1 + 22) & 8) == 0 || (*(_WORD *)(v3 + 3292) & 8) == 0)
    goto LABEL_8;
  *((_DWORD *)v5 + 6) += 2;
  v29 = 0;
  v30 = v5;
  result = (Inspector::InspectorDebuggerAgent **)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v29);
  do
  {
    v20 = (_QWORD *)(WebCore::eventNames((WebCore *)result) + 48);
    v28 = 0;
    v29 = 0;
    v21 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
    WebCore::MutationEvent::MutationEvent((uint64_t)v21, v20, 0, 0, 0, (_DWORD **)&v29, (_DWORD **)&v28);
    WebCore::Node::dispatchScopedEvent(v5, v21);
    if (*((_DWORD *)v21 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)v21 + 8))(v21);
    else
      --*((_DWORD *)v21 + 4);
    v24 = v28;
    v28 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v22);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = WebCore::NodeTraversal::next(v30, *v1, v23);
    result = (Inspector::InspectorDebuggerAgent **)WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v30, v26);
    v5 = v30;
  }
  while (v30);
  if (v3)
  {
LABEL_8:
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (Inspector::InspectorDebuggerAgent **)WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::NodeTraversal::next(WebCore::NodeTraversal *this, const WebCore::Node *a2, const WebCore::Node *a3)
{
  uint64_t v3;
  BOOL v5;

  if ((*((_WORD *)this + 14) & 4) == 0 || (v3 = *((_QWORD *)this + 10)) == 0)
  {
    if (this == a2)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        v3 = *((_QWORD *)this + 7);
        if (v3)
          break;
        this = (WebCore::NodeTraversal *)*((_QWORD *)this + 4);
        if (this)
          v5 = this == a2;
        else
          v5 = 1;
        if (v5)
          return 0;
      }
    }
  }
  return v3;
}

uint64_t WebCore::makeChildChangeForRemoval(uint64_t result, uint64_t a2)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_WORD *)(a2 + 28);
  if ((v2 & 2) != 0)
    v3 = 3;
  else
    v3 = 6;
  if ((v2 & 8) != 0)
    v3 = 1;
  *(_BYTE *)result = v3;
  if ((v2 & 8) != 0)
    v4 = a2;
  else
    v4 = 0;
  *(_QWORD *)(result + 8) = v4;
  v5 = a2;
  do
    v5 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFLL;
  while (v5 && (*(_WORD *)(v5 + 28) & 8) == 0);
  *(_QWORD *)(result + 16) = v5;
  do
    a2 = *(_QWORD *)(a2 + 56);
  while (a2 && (*(_WORD *)(a2 + 28) & 8) == 0);
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = 0;
  if ((v2 & 8) != 0)
    v6 = 2;
  else
    v6 = 1;
  *(_BYTE *)(result + 33) = v6;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::NodeListsNodeData::~NodeListsNodeData(WebCore::NodeListsNodeData *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF *v16;
  void *v17;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF::StringImpl **)(v3 + 8);
      do
      {
        if (*((unsigned __int8 *)v9 - 8) != 255)
        {
          v10 = *v9;
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        v9 += 3;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v11 = *((_QWORD *)this + 3);
    v12 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl ***)*((_QWORD *)this + 3);
      do
      {
        v14 = *v13;
        if (*v13 != (WTF::StringImpl **)-1)
        {
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
            {
              v15 = v12;
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v14);
              WTF::fastFree(v16, v17);
              v12 = v15;
            }
            else
            {
              --*(_DWORD *)v14;
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
    WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::deallocateTable(v5, a2);
  v6 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = *(WTF **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
}

uint64_t WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 255)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(uint64_t *a1, unsigned int a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  WTF::StringImpl ***v20;
  WebCore::QualifiedName::QualifiedNameImpl *v21;
  WTF::StringImpl **v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WTF::StringImpl ***result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      v13 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(v12 - 1) = v13;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v14 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (WebCore::QualifiedName::QualifiedNameImpl **)v6;
    do
    {
      v17 = *v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v18 = (WTF::StringImpl **)WebCore::nullName;
        if (WebCore::nullName)
        {
          v19 = (*(_DWORD *)WebCore::nullName)++;
          if (v19)
          {
            *(_DWORD *)v18 = v19;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
            WTF::fastFree(v23, v24);
          }
        }
        if (v17 == (WebCore::QualifiedName::QualifiedNameImpl *)v18)
        {
          v22 = (WTF::StringImpl **)*v16;
          *v16 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v22);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*(_DWORD *)v22;
            }
          }
        }
        else
        {
          v20 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(a1, v16);
          v21 = *v16;
          *v16 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v21);
              WTF::fastFree(v25, v26);
            }
            else
            {
              --*(_DWORD *)v21;
            }
          }
          if (v16 == a3)
            v14 = v20;
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

WTF::StringImpl ***WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::reinsert(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  WebCore::QualifiedName::QualifiedNameImpl *v5;
  int v6;
  WTF::StringImpl **v7;
  int v8;
  int v9;
  WTF::StringImpl ***v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  BOOL v14;
  WTF *v15;
  void *v16;
  WTF::StringImpl **v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  WTF *v22;
  void *v23;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = *a2;
  v6 = *((_DWORD *)*a2 + 1);
  if (!v6)
  {
    v6 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v5 + 1) = v6;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v8 = 0;
    do
    {
      v9 = v6 & v4;
      v10 = (WTF::StringImpl ***)(v3 + 16 * (v6 & v4));
      if (v7)
      {
        v11 = (*(_DWORD *)v7)++;
        v12 = *v10;
        if (v11)
        {
          *(_DWORD *)v7 = v11;
          v13 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v10;
      }
      v6 = ++v8 + v9;
      v14 = v12 == v7;
      v7 = (WTF::StringImpl **)v13;
    }
    while (!v14);
    v17 = *v10;
    *v10 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v17);
        WTF::fastFree(v22, v23);
      }
      else
      {
        --*(_DWORD *)v17;
      }
    }
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = v6 & v4;
      v6 = ++v18 + v19;
    }
    while (*(_QWORD *)(v3 + 16 * v19));
    v10 = (WTF::StringImpl ***)(v3 + 16 * v19);
    *v10 = 0;
  }
  v20 = *(_OWORD *)a2;
  *a2 = 0;
  *(_OWORD *)v10 = v20;
  return v10;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore4NodeENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm11ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  result = *(WTF **)a2;
  if (a2 + 4 != *(_DWORD **)a2 && result != 0)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore4NodeENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm11ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::ElementIterator<WebCore::Element>::traverseNextSkippingChildren(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  v1 = *result;
  v2 = result[1];
  if (v2 == *result)
  {
LABEL_20:
    v5 = 0;
    goto LABEL_11;
  }
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
      break;
    v2 = *(_QWORD *)(v2 + 32);
    if (v2)
      v4 = v2 == v1;
    else
      v4 = 1;
    if (v4)
      goto LABEL_20;
  }
  if ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    while (v3 != v1)
    {
      while (1)
      {
        v5 = *(_QWORD *)(v3 + 56);
        if (v5)
          break;
        v3 = *(_QWORD *)(v3 + 32);
        if (v3)
          v6 = v3 == v1;
        else
          v6 = 1;
        if (v6)
          goto LABEL_20;
      }
      v3 = *(_QWORD *)(v3 + 56);
      if ((*(_WORD *)(v5 + 28) & 8) != 0)
        goto LABEL_11;
    }
    goto LABEL_20;
  }
  v5 = *(_QWORD *)(v2 + 56);
LABEL_11:
  result[1] = v5;
  return result;
}

uint64_t WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ContainerNode *>>,WebCore::ContainerNode *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + v6;
  }
  while (*(_QWORD *)(v2 + 16 * v6));
  return v2 + 16 * v6;
}

void *WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ComposedTreeIterator::Context>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  int v8;
  _QWORD *v9;
  void *result;
  const void *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v3 = WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 584 * v4;
  *(_QWORD *)v6 = *(_QWORD *)v3;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)(v6 + 16) = 16;
  v7 = *(const void **)(v3 + 8);
  if (v7 == (const void *)(v3 + 24))
  {
    memcpy((void *)(v6 + 24), v7, 16 * *(unsigned int *)(v3 + 20));
  }
  else
  {
    *(_QWORD *)(v3 + 8) = v3 + 24;
    *(_QWORD *)(v6 + 8) = v7;
    v14 = *(_DWORD *)(v3 + 16);
    *(_DWORD *)(v3 + 16) = 16;
    *(_DWORD *)(v6 + 16) = v14;
  }
  v8 = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v6 + 20) = v8;
  *(_DWORD *)(v6 + 280) = *(_DWORD *)(v3 + 280);
  v9 = (_QWORD *)(v5 + 584 * v4);
  result = v9 + 39;
  v9[36] = *(_QWORD *)(v3 + 288);
  v9[37] = v9 + 39;
  v9[38] = 16;
  v11 = *(const void **)(v3 + 296);
  if (v11 == (const void *)(v3 + 312))
  {
    result = memcpy(result, v11, 16 * *(unsigned int *)(v3 + 308));
  }
  else
  {
    *(_QWORD *)(v3 + 296) = v3 + 312;
    v9[37] = v11;
    v15 = *(_DWORD *)(v3 + 304);
    *(_DWORD *)(v3 + 304) = 16;
    *((_DWORD *)v9 + 76) = v15;
  }
  v12 = v5 + 584 * v4;
  v13 = *(_DWORD *)(v3 + 308);
  *(_DWORD *)(v3 + 308) = 0;
  *(_DWORD *)(v12 + 308) = v13;
  *(_DWORD *)(v12 + 568) = *(_DWORD *)(v3 + 568);
  *(_QWORD *)(v12 + 576) = *(_QWORD *)(v3 + 576);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF *)((char *)v5 + 584 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v9 < 9)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_28;
      }
      if (v9 < 0x70381D)
      {
        v10 = 584 * v9;
        v11 = WTF::fastMalloc((WTF *)(584 * v9));
        *(_DWORD *)(a1 + 8) = v10 / 0x248;
        *(_QWORD *)a1 = v11;
LABEL_28:
        WTF::VectorMover<false,WebCore::ComposedTreeIterator::Context>::move(v5, v6, v11);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v19);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x19596015CLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v14 = a2;
  if (v14 > v12)
  {
    v15 = *(_DWORD *)(a1 + 12);
    if (v14 < 9)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v14 >= 0x70381D)
        goto LABEL_35;
      v16 = 584 * v14;
      v17 = WTF::fastMalloc((WTF *)(584 * v14));
      *(_DWORD *)(a1 + 8) = v16 / 0x248;
      *(_QWORD *)a1 = v17;
    }
    WTF::VectorMover<false,WebCore::ComposedTreeIterator::Context>::move(v5, (WTF *)((char *)v5 + 584 * v15), v17);
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v18);
    }
  }
  return v3;
}

WTF::StringImpl **WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **result;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(WTF::StringImpl **)a2;
  v13 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl **)(v8 + 16 * v15);
    v17 = *v16;
    if (*v16 != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v8 + 16 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = *(WTF::StringImpl **)a2;
      v16 = v11;
    }
    if (v12)
      *(_DWORD *)v12 += 2;
    *v16 = v12;
    v18 = *a3;
    *a3 = 0;
    result = (WTF::StringImpl **)v16[1];
    v16[1] = v18;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl **)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
        goto LABEL_35;
    }
    else if (3 * v28 <= 4 * v27)
    {
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_37:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v29, v16);
        v16 = result;
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
        goto LABEL_41;
      }
LABEL_35:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_37;
    }
LABEL_41:
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (v17 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v20 = 0;
  else
    v20 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v20;
  *(_BYTE *)(a4 + 16) = 0;
  v21 = v8 + 16 * v15;
  v22 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl ***)(v21 + 8);
  *(_QWORD *)(v21 + 8) = v22;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl **)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = 0;
          v20 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v21 = v20 & v18;
            v20 = ++v19 + v21;
          }
          while (*(_QWORD *)(v17 + 16 * v21));
          v22 = v17 + 16 * v21;
          v23 = *(_DWORD **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            if (*v23 != 2)
            {
              *v23 -= 2;
              goto LABEL_19;
            }
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v10);
            v28 = *(WTF::StringImpl **)v22;
            *(_QWORD *)v22 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v10);
              else
                *(_DWORD *)v28 -= 2;
            }
          }
          else
          {
LABEL_19:
            *(_QWORD *)v22 = 0;
          }
          v24 = *v13;
          *v13 = 0;
          *(_QWORD *)v22 = v24;
          v25 = v6 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v26;
          v27 = *(_DWORD **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
          {
            if (*v27 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v10);
            else
              *v27 -= 2;
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v22;
          goto LABEL_36;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*v16 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v10);
            v14 = *v13;
          }
          else
          {
            *v16 -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_36:
      if (++v11 == v7)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(a1, v5, a2);
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>::translate<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,std::pair<unsigned char,WTF::AtomString>,decltype(nullptr)>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<std::pair<unsigned char,WTF::AtomString>>::assignToEmpty<std::pair<unsigned char,WTF::AtomString>,std::pair<unsigned char,WTF::AtomString>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  result = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::LiveNodeList *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::LiveNodeList *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (unsigned __int8 *)v6;
    do
    {
      if (*v14 != 255)
      {
        if (*v14)
          v15 = 0;
        else
          v15 = *((_QWORD *)v14 + 1) == 0;
        if (v15)
        {
          WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair((uint64_t)v14, v10);
        }
        else
        {
          WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::reinsert(a1, v14);
          v17 = v16;
          WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>::~KeyValuePair((uint64_t)v14, v18);
          if (v14 == a3)
            v11 = v17;
        }
      }
      v14 += 24;
      --v13;
    }
    while (v13);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *>>,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,WTF::AtomString>,WebCore::HTMLCollection *,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash,WTF::HashTraits<std::pair<unsigned char,WTF::AtomString>>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::NodeListsNodeData::NodeListCacheMapEntryHash>>,std::pair<unsigned char,WTF::AtomString>>(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  int v11;
  int v12;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 - 8);
  v4 = ((*(_DWORD *)(a3 + 16) >> 8) + a2) & v3;
  v5 = (unsigned __int8 *)(a1 + 24 * v4);
  v6 = *v5;
  v7 = *((_QWORD *)v5 + 1);
  if (!*v5 && v7 == 0)
    return 0;
  v11 = a2;
  v12 = 1;
  do
  {
    if (v6 != 255 && v6 == v11)
    {
      v9 = v5;
      if (v7 == a3)
        break;
    }
    v9 = 0;
    v4 = (v4 + v12) & v3;
    v5 = (unsigned __int8 *)(a1 + 24 * v4);
    v6 = *v5;
    v7 = *((_QWORD *)v5 + 1);
    ++v12;
  }
  while (*v5 || v7 != 0);
  return v9;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::HTMLFrameOwnerElement,WTF::RawPtrTraits<WebCore::HTMLFrameOwnerElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLFrameOwnerElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebCore::ContentVisibilityAutoStateChangeEvent::~ContentVisibilityAutoStateChangeEvent(WebCore::ContentVisibilityAutoStateChangeEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::IntersectionObserver *WebCore::ContentVisibilityDocumentState::intersectionObserver(WebCore::IntersectionObserver **this, WebCore::Document *a2)
{
  WebCore::IntersectionObserver *result;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  int v8;
  int v9;
  WebCore::IntersectionObserver *v10;
  WebCore::IntersectionObserver *v11;
  WTF::StringImpl *v12;
  bmalloc::api *v13;
  void *v14;
  _DWORD *v15;
  _QWORD v16[2];
  int v17;
  WebCore::Document *v18;
  int v19;
  char v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;

  result = *this;
  if (result)
    return result;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)v5 = &off_1E33A18C0;
  *(_QWORD *)(v5 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v5, (WebCore::Document *)((char *)a2 + 192));
  *(_QWORD *)v5 = &off_1E33A19D8;
  *((_DWORD *)a2 + 6) += 2;
  v18 = a2;
  v19 = 1;
  v20 = 1;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v15 = (_DWORD *)v5;
  WebCore::IntersectionObserver::create((uint64_t)a2, (uint64_t *)&v15, (uint64_t)&v18, (uint64_t)v16);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  v8 = v17;
  v9 = v17;
  if (v17)
  {
LABEL_4:
    if (v9 == -1)
      goto LABEL_10;
    goto LABEL_9;
  }
  v10 = (WebCore::IntersectionObserver *)v16[0];
  v16[0] = 0;
  v11 = *this;
  *this = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::IntersectionObserver::~IntersectionObserver(v11);
      bmalloc::api::isoDeallocate(v13, v14);
      v9 = v17;
      goto LABEL_4;
    }
    v9 = 0;
    --*(_DWORD *)v11;
  }
  else
  {
    v9 = 0;
  }
LABEL_9:
  ((void (*)(_DWORD **, _QWORD *))off_1E33A1A10[v9])(&v15, v16);
LABEL_10:
  if (v23 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E33A1A20[v23])(v16, &v22);
  v23 = -1;
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v20 && v19 != -1)
    ((void (*)(_QWORD *, WebCore::Document **))off_1E33A1A30[v19])(v16, &v18);
  if (v8)
    return 0;
  else
    return *this;
}

unsigned int *WebCore::ContentVisibilityDocumentState::unobserve(unsigned int *this, WebCore::Element *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t ***v4;
  uint64_t *v5;
  void *v6;
  WebCore::IntersectionObserver *v7;
  uint64_t **v8;
  uint64_t v9;
  bmalloc::api *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;

  v2 = this;
  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(uint64_t ****)(v3 + 1584);
  if (!v4)
  {
    this = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    v5 = *(uint64_t **)(v3 + 1584);
    *(_QWORD *)(v3 + 1584) = this;
    if (v5)
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v5 + 1, a2);
      v7 = (WebCore::IntersectionObserver *)*v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::IntersectionObserver::~IntersectionObserver(v7);
          bmalloc::api::isoDeallocate(v12, v13);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      this = (unsigned int *)WTF::fastFree((WTF *)v5, v6);
      v4 = *(uint64_t ****)(v3 + 1584);
    }
    else
    {
      v4 = (uint64_t ***)this;
    }
  }
  v8 = *v4;
  if (*v4)
  {
    ++*(_DWORD *)v8;
    WebCore::IntersectionObserver::unobserve(v8, (WebCore::Element *)v2);
    this = (unsigned int *)WTF::WeakHashMap<WebCore::Element,WebCore::ViewportProximity,WebCore::WeakPtrImplWithEventTargetData>::remove((uint64_t)(v4 + 1), v2);
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::IntersectionObserver::~IntersectionObserver((WebCore::IntersectionObserver *)v8);
      this = (unsigned int *)bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    this = (unsigned int *)WebCore::Node::materializeRareData((WebCore::Node *)v2);
    v9 = *((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL;
  }
  if (!*(_BYTE *)(v9 + 33))
    *(_BYTE *)(v9 + 33) = 1;
  *(_BYTE *)(v9 + 32) = 0;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::ContentVisibilityDocumentState::checkRelevancyOfContentVisibilityElement(uint64_t a1, WebCore::Node *this, char a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  int v33;
  WebCore::Node *v34;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  char v40;
  uint64_t v41;
  WebCore::Node *v43[2];
  WebCore::Node *v44;
  char v45;

  v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = *(_WORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20);
    LODWORD(v5) = HIBYTE(*(unsigned __int16 *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20));
  }
  else
  {
    v6 = 0;
  }
  v7 = v6 | ((_DWORD)v5 << 8);
  if (v7 <= 0x100)
    v8 = 0;
  else
    v8 = v6;
  v9 = v8;
  if ((a3 & 1) != 0)
  {
    v10 = *((_QWORD *)this + 2);
    ++*(_DWORD *)(a1 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (!v12)
        goto LABEL_25;
      v13 = *(_DWORD *)(v12 - 8);
      v14 = (v11 + ~(v10 << 32)) ^ ((unint64_t)(v11 + ~(v10 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      for (i = 1; ; ++i)
      {
        v19 = v17;
        v20 = *(_QWORD *)(v12 + 16 * v17);
        if (v20 != -1)
        {
          if (!v20)
          {
            v25 = *(unsigned int *)(v12 - 4);
            v21 = (_BYTE *)(v12 + 16 * v25);
            v26 = v21;
            goto LABEL_40;
          }
          if (v20 == v11)
            break;
        }
        v17 = (v19 + i) & v13;
      }
      v21 = (_BYTE *)(v12 + 16 * v19);
      v25 = *(unsigned int *)(v12 - 4);
      v26 = (_BYTE *)(v12 + 16 * v25);
LABEL_40:
      v27 = (_BYTE *)(v12 + 16 * v25);
      if (v21 != v27)
      {
        while (!*(_QWORD *)(*(_QWORD *)v21 + 8))
        {
          v28 = v21 + 16;
          v21 = v26;
          if (v28 != v26)
          {
            v21 = v28;
            while ((unint64_t)(*(_QWORD *)v21 + 1) <= 1)
            {
              v21 += 16;
              if (v21 == v26)
              {
                v21 = v26;
                break;
              }
            }
          }
          if (v21 == v27)
          {
            v21 = v27;
            break;
          }
        }
      }
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (!v12)
        goto LABEL_25;
      v21 = (_BYTE *)(v12 + 16 * *(unsigned int *)(v12 - 4));
    }
    if (v21 != (_BYTE *)(v12 + 16 * *(unsigned int *)(v12 - 4)) && v21[8])
    {
      v9 |= 1u;
      if ((a3 & 2) != 0)
        goto LABEL_26;
      goto LABEL_8;
    }
LABEL_25:
    v9 &= 0xFEu;
    if ((a3 & 2) != 0)
      goto LABEL_26;
LABEL_8:
    if ((a3 & 8) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
  if ((a3 & 2) == 0)
    goto LABEL_8;
LABEL_26:
  if ((*((_BYTE *)this + 54) & 2) != 0 && WebCore::Element::isUserActionElementHasFocusWithin(this))
  {
    v9 |= 2u;
    if ((a3 & 8) != 0)
      goto LABEL_28;
LABEL_9:
    if ((a3 & 4) == 0)
      goto LABEL_81;
    goto LABEL_57;
  }
  v9 &= ~2u;
  if ((a3 & 8) == 0)
    goto LABEL_9;
LABEL_28:
  WebCore::VisibleSelection::range((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3064) + 56), (uint64_t)v43);
  if (!v45)
    goto LABEL_56;
  v22 = WebCore::intersects<(WebCore::TreeType)2>((int *)v43, (uint64_t)this);
  if (!v45)
    goto LABEL_55;
  v23 = v44;
  v44 = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  v24 = v43[0];
  v43[0] = 0;
  if (!v24)
    goto LABEL_55;
  if (*((_DWORD *)v24 + 6) != 2)
  {
    *((_DWORD *)v24 + 6) -= 2;
    if ((v22 & 1) != 0)
      goto LABEL_36;
LABEL_56:
    v9 &= 0xF7u;
    if ((a3 & 4) == 0)
      goto LABEL_81;
LABEL_57:
    v29 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3096);
    if (!v29)
    {
LABEL_79:
      v9 &= 0xFBu;
      goto LABEL_81;
    }
    while (1)
    {
      v30 = *v29;
      v31 = *(_DWORD *)(*v29 + 24);
      *(_DWORD *)(*v29 + 24) = v31 + 2;
      v32 = *((_WORD *)this + 14);
      if ((v32 & 0xF000) == 0x9000)
      {
        if (**(WebCore::Node ***)(v30 + 40) != this || (*(_WORD *)(v30 + 28) & 0xF000) == 0x9000)
        {
LABEL_77:
          v33 = 0;
          goto LABEL_68;
        }
        v33 = (*(unsigned __int8 *)(v30 + 22) >> 3) & 1;
      }
      else
      {
        v33 = 0;
        if ((v32 & 4) != 0 && *((_QWORD *)this + 10))
        {
          if (((*(unsigned __int8 *)(v30 + 22) ^ *((unsigned __int8 *)this + 22)) & 8) != 0)
            goto LABEL_77;
          v34 = (WebCore::Node *)v30;
          do
          {
            v34 = (WebCore::Node *)*((_QWORD *)v34 + 4);
            v33 = v34 != 0;
          }
          while (v34 != this && v34 != 0);
        }
      }
LABEL_68:
      if (v31)
      {
        *(_DWORD *)(v30 + 24) = v31;
      }
      else if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v30);
      }
      if (v33)
      {
        v9 |= 4u;
        goto LABEL_81;
      }
      v29 = (_QWORD *)v29[2];
      if (!v29)
        goto LABEL_79;
    }
  }
  if ((*((_WORD *)v24 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v24);
    if ((v22 & 1) == 0)
      goto LABEL_56;
  }
  else
  {
LABEL_55:
    if (!v22)
      goto LABEL_56;
  }
LABEL_36:
  v9 |= 8u;
  if ((a3 & 4) != 0)
    goto LABEL_57;
LABEL_81:
  v36 = v7 >= 0x100 && v9 == v6;
  v37 = !v36;
  if (v36)
    return v37;
  v38 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  if (v38)
  {
    if (*(unsigned __int16 *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20) >= 0x100u)
    {
      v39 = *(_WORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20) == 0;
      goto LABEL_91;
    }
  }
  else
  {
    WebCore::Node::materializeRareData(this);
    v38 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL;
  }
  v39 = 1;
LABEL_91:
  if (!*(_BYTE *)(v38 + 33))
    *(_BYTE *)(v38 + 33) = 1;
  *(_BYTE *)(v38 + 32) = v9;
  v40 = (*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0
     || *(unsigned __int16 *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20) < 0x100u
     || *(_WORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x20) == 0;
  WebCore::Element::invalidateStyle(this);
  WebCore::ContentVisibilityDocumentState::updateAnimations((uint64_t)this, v39, v40);
  v41 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v41 = off_1E33A1B98;
  *(_BYTE *)(v41 + 8) = v40;
  *(_QWORD *)(v41 + 16) = this;
  v43[0] = (WebCore::Node *)v41;
  WebCore::Node::queueTaskKeepingThisNodeAlive((uint64_t)this, 0, (uint64_t *)v43);
  if (v43[0])
    (*(void (**)(WebCore::Node *))(*(_QWORD *)v43[0] + 8))(v43[0]);
  return v37;
}

uint64_t WebCore::ContentVisibilityDocumentState::updateAnimations(uint64_t result, int a2, char a3)
{
  WTF::StringImpl *v3;
  const WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;

  if (a2 && (a3 & 1) == 0)
  {
    {
      WebCore::WebAnimation::instances(void)::instances = 0;
      return result;
    }
    if (WebCore::WebAnimation::instances(void)::instances
      && *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12))
    {
      v4 = (const WebCore::Node *)result;
      v5 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
      if ((_DWORD)v5)
      {
        v6 = 8 * v5;
        for (i = (_QWORD *)WebCore::WebAnimation::instances(void)::instances; (unint64_t)(*i + 1) <= 1; ++i)
        {
          v6 -= 8;
          if (!v6)
            return result;
        }
      }
      else
      {
        i = (_QWORD *)WebCore::WebAnimation::instances(void)::instances;
      }
      v8 = WebCore::WebAnimation::instances(void)::instances + 8 * v5;
      if ((_QWORD *)v8 != i)
      {
LABEL_13:
        v9 = (_DWORD *)*i;
        if (*i)
          ++v9[6];
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 104))(v9);
        if ((result & 1) == 0 || (v10 = *((_QWORD *)v9 + 23)) == 0 || (result = *(_QWORD *)(v10 + 8)) == 0)
        {
LABEL_30:
          if (v9[6] == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 72))(v9);
          else
            --v9[6];
          while (1)
          {
            if (++i == (_QWORD *)v8)
              return result;
            if ((unint64_t)(*i + 1) > 1)
            {
              if (i != (_QWORD *)v8)
                goto LABEL_13;
              return result;
            }
          }
        }
        v11 = *((unsigned __int8 *)v9 + 208);
        if (*((_BYTE *)v9 + 208))
        {
          v3 = (WTF::StringImpl *)*((_QWORD *)v9 + 25);
          if (v3)
            *(_DWORD *)v3 += 2;
        }
        result = WebCore::Node::isDescendantOrShadowDescendantOf((const WebCore::Node ***)result, v4);
        if ((_DWORD)result)
        {
          v13 = (_DWORD *)*((_QWORD *)v9 + 8);
          if (v13)
          {
            ++v13[2];
            result = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(_QWORD *)v13 + 40))(v13, v9);
            if (v13[2] == 1)
            {
              result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
              if (!v11)
                goto LABEL_30;
LABEL_26:
              if (v3)
              {
                if (*(_DWORD *)v3 == 2)
                  result = WTF::StringImpl::destroy(v3, v12);
                else
                  *(_DWORD *)v3 -= 2;
                v3 = 0;
              }
              goto LABEL_30;
            }
            --v13[2];
          }
        }
        if (!v11)
          goto LABEL_30;
        goto LABEL_26;
      }
    }
  }
  return result;
}

uint64_t WebCore::ContentVisibilityDocumentState::updateRelevancyOfContentVisibilityElements(uint64_t a1, char a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(*(_QWORD *)a1 + 100);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v7 = 8 * v2;
    do
    {
      if (*(_QWORD *)v5)
      {
        v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (v8)
        {
          *(_DWORD *)(v8 + 24) += 2;
          v4 |= WebCore::ContentVisibilityDocumentState::checkRelevancyOfContentVisibilityElement(a1, (WebCore::Node *)v8, a2);
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
      }
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4 & 1;
}

uint64_t WebCore::ContentVisibilityDocumentState::determineInitialVisibleContentVisibility(WebCore::ContentVisibilityDocumentState *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  WTF *v21;
  uint64_t v22;
  char v24;
  WebCore::Node **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  WTF *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v39;
  uint64_t v40;
  WebCore::Node *v41;
  WTF *v42;
  WTF *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (v53 = 0, v54 = 0, v3 = *(unsigned int *)(v2 + 100), !(_DWORD)v3))
  {
    v24 = 0;
    return v24 & 1;
  }
  v5 = *(_QWORD *)(v2 + 88);
  v6 = v5 + 8 * v3;
  do
  {
    if (!*(_QWORD *)v5)
      goto LABEL_20;
    v7 = *(WTF **)(*(_QWORD *)v5 + 8);
    if (!v7)
      goto LABEL_20;
    v8 = *((_DWORD *)v7 + 6);
    *((_DWORD *)v7 + 6) = v8 + 2;
    ++*((_DWORD *)this + 4);
    v9 = *((_QWORD *)v7 + 2);
    v10 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v9 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v11 = *((_QWORD *)this + 1);
        if (v11)
        {
          v12 = *(_DWORD *)(v11 - 8);
          v13 = (v10 + ~(v9 << 32)) ^ ((unint64_t)(v10 + ~(v9 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          for (i = 1; ; ++i)
          {
            v18 = *(_QWORD *)(v11 + 16 * v16);
            if (v18 != -1)
            {
              if (!v18)
                goto LABEL_14;
              if (v18 == v10)
                break;
            }
            v16 = (v16 + i) & v12;
          }
LABEL_27:
          if (v8)
          {
LABEL_19:
            *((_DWORD *)v7 + 6) = v8;
            goto LABEL_20;
          }
          goto LABEL_28;
        }
      }
    }
LABEL_14:
    if ((*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) != 0
      && *(unsigned __int16 *)((*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) + 0x20) >= 0x100u
      && *(_WORD *)((*((_QWORD *)v7 + 9) & 0xFFFFFFFFFFFFLL) + 0x20) != 0)
    {
      goto LABEL_27;
    }
    v51 = v7;
    LODWORD(v19) = HIDWORD(v54);
    if (HIDWORD(v54) == (_DWORD)v54)
    {
      v20 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, HIDWORD(v54) + 1, (unint64_t)&v51);
      v19 = HIDWORD(v54);
      v21 = v53;
      v22 = *v20;
      *v20 = 0;
      *((_QWORD *)v21 + v19) = v22;
    }
    else
    {
      v51 = 0;
      *((_QWORD *)v53 + HIDWORD(v54)) = v7;
    }
    HIDWORD(v54) = v19 + 1;
    v7 = v51;
    v51 = 0;
    if (!v7)
      goto LABEL_20;
    v8 = *((_DWORD *)v7 + 6) - 2;
    if (*((_DWORD *)v7 + 6) != 2)
      goto LABEL_19;
LABEL_28:
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7, a2);
LABEL_20:
    v5 += 8;
  }
  while (v5 != v6);
  v25 = (WebCore::Node **)v53;
  if (!HIDWORD(v54))
    goto LABEL_54;
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 40) + 8);
  *(_DWORD *)(v26 + 24) += 2;
  v27 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
      goto LABEL_92;
    v28 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = v27;
    v48 = *(unsigned int **)(v27 + 8);
    *(_QWORD *)(v27 + 8) = v28;
    if (!v48)
      goto LABEL_92;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      WTF::fastFree((WTF *)v48, v47);
    }
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
LABEL_92:
      do
        v39 = __ldaxr((unsigned int *)v28);
      while (__stlxr(v39 + 1, (unsigned int *)v28));
    }
  }
  else
  {
    v28 = 0;
  }
  v52 = 1;
  v29 = (WTF *)WTF::fastMalloc((WTF *)8);
  v51 = v29;
  v30 = HIDWORD(v52);
  if (v28)
  {
    do
      v31 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v31 + 1, (unsigned int *)v28));
    v32 = HIDWORD(v52);
  }
  else
  {
    v32 = HIDWORD(v52);
  }
  *((_QWORD *)v29 + v30) = v28;
  HIDWORD(v52) = v32 + 1;
  WebCore::Document::updateIntersectionObservations(v26, &v51);
  if (HIDWORD(v52))
  {
    v42 = v51;
    v43 = (WTF *)((char *)v51 + 8 * HIDWORD(v52));
    do
    {
      v44 = *(unsigned int **)v42;
      *(_QWORD *)v42 = 0;
      if (v44)
      {
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v44);
          WTF::fastFree((WTF *)v44, a2);
        }
      }
      v42 = (WTF *)((char *)v42 + 8);
    }
    while (v42 != v43);
  }
  v33 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v33, a2);
    if (v28)
      goto LABEL_40;
  }
  else if (v28)
  {
    do
    {
LABEL_40:
      v34 = __ldaxr((unsigned int *)v28);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)v28));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)v28);
      WTF::fastFree((WTF *)v28, a2);
    }
  }
  if (v26)
  {
    if (*(_DWORD *)(v26 + 24) == 2)
    {
      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v26, a2);
    }
    else
    {
      *(_DWORD *)(v26 + 24) -= 2;
    }
  }
  v25 = (WebCore::Node **)v53;
  if (HIDWORD(v54))
  {
    v24 = 0;
    v36 = 8 * HIDWORD(v54);
    do
    {
      WebCore::ContentVisibilityDocumentState::checkRelevancyOfContentVisibilityElement((uint64_t)this, *v25, 1);
      v37 = *((_QWORD *)*v25 + 9) & 0xFFFFFFFFFFFFLL;
      if (v37)
        LOBYTE(v37) = *(unsigned __int16 *)((*((_QWORD *)*v25 + 9) & 0xFFFFFFFFFFFFLL) + 0x20) >= 0x100u
                   && *(_WORD *)((*((_QWORD *)*v25 + 9) & 0xFFFFFFFFFFFFLL) + 0x20) != 0;
      v24 |= v37;
      ++v25;
      v36 -= 8;
    }
    while (v36);
    v25 = (WebCore::Node **)v53;
    if (!HIDWORD(v54))
    {
      if (!v53)
        return v24 & 1;
LABEL_73:
      v53 = 0;
      LODWORD(v54) = 0;
      WTF::fastFree((WTF *)v25, a2);
      return v24 & 1;
    }
    v40 = 8 * HIDWORD(v54);
    do
    {
      v41 = *v25;
      *v25 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 6) == 2)
        {
          if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v41, a2);
        }
        else
        {
          *((_DWORD *)v41 + 6) -= 2;
        }
      }
      ++v25;
      v40 -= 8;
    }
    while (v40);
    v25 = (WebCore::Node **)v53;
    if (v53)
      goto LABEL_73;
  }
  else
  {
LABEL_54:
    v24 = 0;
    if (v25)
      goto LABEL_73;
  }
  return v24 & 1;
}

uint64_t WebCore::ContentVisibilityDocumentState::updateContentRelevancyForScrollIfNeeded(uint64_t this, const WebCore::Element *a2)
{
  const WebCore::Element *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WebCore::Element *v6;
  uint64_t v7;
  const WebCore::Element *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)this)
  {
    v2 = a2;
    if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195961AE4);
      }
      v3 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if ((*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 0x18) != 0)
          {
            v5 = this;
            v6 = 0;
            v7 = 0;
            *((_DWORD *)a2 + 6) += 2;
            while (1)
            {
              v8 = v2;
              this = v7;
              if ((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195961AC4);
                }
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFLL) + 0x58) + 40)
                                + 636) & 0xC0000) == 0x40000)
                {
                  *((_DWORD *)v2 + 6) += 2;
                  v6 = v2;
                  v7 = (uint64_t)v2;
                  if (this)
                  {
                    if (*(_DWORD *)(this + 24) == 2)
                    {
                      v6 = v2;
                      v7 = (uint64_t)v2;
                      if ((*(_WORD *)(this + 30) & 0x400) != 0)
                        goto LABEL_15;
                      this = WebCore::Node::removedLastRef((WebCore::Node *)this);
                    }
                    else
                    {
                      *(_DWORD *)(this + 24) -= 2;
                    }
                    v6 = v2;
                    v7 = (uint64_t)v2;
                  }
                }
              }
LABEL_15:
              v9 = *((_QWORD *)v2 + 4);
              if (v9)
              {
                if ((*(_WORD *)(v9 + 28) & 8) != 0)
                {
                  v10 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL;
                  if (v10)
                  {
                    v14 = *(_QWORD *)(v10 + 88);
                    if (v14)
                    {
                      this = *(_QWORD *)(v14 + 224);
                      if (this)
                      {
                        this = (*(uint64_t (**)(uint64_t, const WebCore::Element *))(*(_QWORD *)this + 16))(this, v2);
                        v2 = (const WebCore::Element *)this;
                        if (this)
                        {
LABEL_31:
                          v13 = 0;
                          *((_DWORD *)v2 + 6) += 2;
                          goto LABEL_32;
                        }
                      }
                    }
                  }
                }
              }
              if ((~*((unsigned __int16 *)v8 + 14) & 0x408) != 0
                || (this = (*(uint64_t (**)(const WebCore::Element *))(*(_QWORD *)v8 + 368))(v8),
                    !(_DWORD)this))
              {
                v2 = (const WebCore::Element *)*((_QWORD *)v8 + 4);
                if (!v2)
                  goto LABEL_27;
                v12 = *((_WORD *)v2 + 14);
                if ((v12 & 0x80) == 0)
                {
                  if ((v12 & 8) != 0)
                    goto LABEL_31;
LABEL_26:
                  v2 = 0;
                  goto LABEL_27;
                }
                v11 = *((_QWORD *)v2 + 25);
                if (!v11)
                  goto LABEL_26;
              }
              else
              {
                v11 = *((_QWORD *)v8 + 14);
                if (!v11)
                  goto LABEL_26;
              }
              v2 = *(const WebCore::Element **)(v11 + 8);
              if (v2)
                goto LABEL_31;
LABEL_27:
              v13 = 1;
LABEL_32:
              if (*((_DWORD *)v8 + 6) == 2)
              {
                if ((*((_WORD *)v8 + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef(v8);
              }
              else
              {
                *((_DWORD *)v8 + 6) -= 2;
              }
              if (v13)
              {
                if (v6)
                {
                  this = WebCore::ContentVisibilityDocumentState::updateViewportProximity(v5, v6, 1);
                  v15 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
                  v16 = *(_DWORD *)(v15 + 24);
                  *(_DWORD *)(v15 + 24) = v16 + 2;
                  v17 = *(uint64_t **)(v15 + 1584);
                  if (v17)
                  {
                    v21 = *v17;
                    if (v21)
                    {
                      if (*(_DWORD *)(v21 + 100))
                      {
                        *(_BYTE *)(v15 + 3368) |= 1u;
                        this = (uint64_t)WebCore::Document::scheduleRenderingUpdate((_QWORD *)v15, 64);
                        v16 = *(_DWORD *)(v15 + 24) - 2;
                      }
                    }
                  }
                  if (v16)
                  {
                    *(_DWORD *)(v15 + 24) = v16;
                  }
                  else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                  {
                    this = WebCore::Node::removedLastRef((WebCore::Node *)v15);
                  }
                  v18 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
                  v19 = *(_DWORD *)(v18 + 24);
                  *(_DWORD *)(v18 + 24) = v19 + 2;
                  v20 = *(_BYTE *)(v18 + 3368);
                  if (v20)
                  {
                    v22 = *(uint64_t **)(v18 + 1584);
                    if (v22)
                    {
                      v23 = *v22;
                      if (*v22)
                      {
                        v24 = *(unsigned int *)(v23 + 100);
                        if ((_DWORD)v24)
                        {
                          v25 = 0;
                          v26 = *(_QWORD *)(v23 + 88);
                          v27 = 8 * v24;
                          do
                          {
                            if (*(_QWORD *)v26)
                            {
                              v28 = *(_QWORD *)(*(_QWORD *)v26 + 8);
                              if (v28)
                              {
                                *(_DWORD *)(v28 + 24) += 2;
                                this = WebCore::ContentVisibilityDocumentState::checkRelevancyOfContentVisibilityElement((uint64_t)v22, (WebCore::Node *)v28, v20);
                                v25 |= this;
                                if (*(_DWORD *)(v28 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                                    this = WebCore::Node::removedLastRef((WebCore::Node *)v28);
                                }
                                else
                                {
                                  *(_DWORD *)(v28 + 24) -= 2;
                                }
                              }
                            }
                            v26 += 8;
                            v27 -= 8;
                          }
                          while (v27);
                          if ((v25 & 1) != 0)
                            this = WebCore::Document::updateLayoutIgnorePendingStylesheets(v18, 0, 0);
                          *(_BYTE *)(v18 + 3368) = 0;
                          v19 = *(_DWORD *)(v18 + 24) - 2;
                        }
                      }
                    }
                  }
                  if (v19)
                  {
                    *(_DWORD *)(v18 + 24) = v19;
                  }
                  else if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                  {
                    this = WebCore::Node::removedLastRef((WebCore::Node *)v18);
                  }
                  if (*((_DWORD *)v6 + 6) == 2)
                  {
                    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
                      return WebCore::Node::removedLastRef(v6);
                  }
                  else
                  {
                    *((_DWORD *)v6 + 6) -= 2;
                  }
                }
                return this;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ContentVisibilityDocumentState::updateViewportProximity(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int j;
  unsigned int v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v6 = (uint64_t *)(a1 + 8);
  ++*(_DWORD *)(a1 + 16);
  v7 = a2[2];
  v8 = v7 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v9 = *v6;
      if (*v6)
      {
        v10 = *(_DWORD *)(v9 - 8);
        v11 = (v8 + ~(v7 << 32)) ^ ((unint64_t)(v8 + ~(v7 << 32)) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        for (i = 1; ; ++i)
        {
          v16 = *(_QWORD *)(v9 + 16 * v14);
          if (v16 != -1)
          {
            if (!v16)
              goto LABEL_12;
            if (v16 == v8)
              break;
          }
          v14 = (v14 + i) & v10;
        }
        v17 = *(_QWORD *)(a2[5] + 8);
        v18 = *(_DWORD *)(v17 + 24) + 2;
        *(_DWORD *)(v17 + 24) = v18;
        v19 = *(uint64_t **)(v17 + 1584);
        if (v19)
        {
          v67 = v17;
          v65 = *v19;
          if (v65)
          {
            if (*(_DWORD *)(v65 + 100))
            {
              *(_BYTE *)(v17 + 3368) |= 1u;
              WebCore::Document::scheduleRenderingUpdate((_QWORD *)v17, 64);
              v17 = v67;
              v18 = *(_DWORD *)(v67 + 24);
            }
          }
        }
        v20 = v18 - 2;
        if (v20)
        {
          *(_DWORD *)(v17 + 24) = v20;
        }
        else if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v17);
        }
      }
    }
  }
LABEL_12:
  v21 = *(_DWORD *)(a1 + 16);
  v22 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 16) = v21 + 1;
  if (v21 > v22)
    WTF::WeakHashMap<WebCore::Element,WebCore::ViewportProximity,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)v6, a2);
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v23 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 8) = a2;
    *(_BYTE *)(v23 + 32) = 0;
    v24 = a2[2];
    a2[2] = v24 & 0xFFFF000000000000 | v23;
    v25 = v24 & 0xFFFFFFFFFFFFLL;
    if ((v24 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v26 = __ldaxr((unsigned int *)v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)v25));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)v25);
        v63 = *(unsigned int *)(v25 + 28);
        if ((_DWORD)v63)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v63));
        v64 = *(WTF **)(v25 + 16);
        if (v64)
        {
          *(_QWORD *)(v25 + 16) = 0;
          *(_DWORD *)(v25 + 24) = 0;
          WTF::fastFree(v64, a2);
        }
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  v28 = a2[2];
  v29 = v28 & 0xFFFFFFFFFFFFLL;
  do
    v30 = __ldaxr((unsigned int *)v29);
  while (__stlxr(v30 + 1, (unsigned int *)v29));
  do
    v31 = __ldaxr((unsigned int *)v29);
  while (__stlxr(v31 + 1, (unsigned int *)v29));
  if (v29)
  {
    do
    {
      v32 = __ldaxr((unsigned int *)v29);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)v29));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)v29);
      v61 = *(unsigned int *)((v28 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v61)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v28 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v61));
      v62 = *(WTF **)((v28 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v62)
      {
        *(_QWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v62, a2);
      }
      WTF::fastFree((WTF *)(v28 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v34 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v6, 8u, 0), (v34 = *v6) != 0))
  {
    v35 = 0;
    v36 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    v36 = 0;
    v35 = 1;
  }
  v37 = 0;
  v38 = (v29 + ~(v28 << 32)) ^ ((unint64_t)(v29 + ~(v28 << 32)) >> 22);
  v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
  v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
  v41 = (v40 >> 31) ^ v40;
  for (j = 1; ; ++j)
  {
    v43 = v41 & v36;
    v44 = v34 + 16 * v43;
    result = *(_QWORD *)v44;
    if (*(_QWORD *)v44 != -1)
      break;
    v37 = v34 + 16 * v43;
LABEL_33:
    v41 = j + v43;
  }
  if (!result)
  {
    if (v37)
    {
      *(_QWORD *)v37 = 0;
      *(_BYTE *)(v37 + 8) = 0;
      --*(_DWORD *)(*v6 - 16);
      *(_QWORD *)v37 = v29;
      v44 = v37;
    }
    else
    {
      *(_QWORD *)v44 = v29;
    }
    *(_BYTE *)(v44 + 8) = 0;
    v52 = *v6;
    if (*v6)
      v53 = *(_DWORD *)(v52 - 12) + 1;
    else
      v53 = 1;
    *(_DWORD *)(v52 - 12) = v53;
    v54 = *v6;
    if (*v6)
      v55 = *(_DWORD *)(v54 - 12);
    else
      v55 = 0;
    v56 = (*(_DWORD *)(v54 - 16) + v55);
    v57 = *(unsigned int *)(v54 - 4);
    if (v57 > 0x400)
    {
      if (v57 <= 2 * v56)
        goto LABEL_57;
    }
    else if (3 * v57 <= 4 * v56)
    {
      if (!(_DWORD)v57)
      {
        v58 = 8;
LABEL_60:
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v6, v58, (uint64_t *)v44);
        v44 = result;
        v54 = *v6;
        if (*v6)
          v57 = *(unsigned int *)(v54 - 4);
        else
          v57 = 0;
        goto LABEL_64;
      }
LABEL_57:
      v58 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
      goto LABEL_60;
    }
LABEL_64:
    v47 = v54 + 16 * v57;
    goto LABEL_65;
  }
  if (result != v29)
    goto LABEL_33;
  if ((v35 & 1) != 0)
    v46 = 0;
  else
    v46 = *(unsigned int *)(v34 - 4);
  v47 = v34 + 16 * v46;
  if (v29)
  {
    do
    {
      v48 = __ldaxr((unsigned int *)v29);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)v29));
    if (!v49)
    {
      v66 = v47;
      atomic_store(1u, (unsigned int *)v29);
      v50 = *(unsigned int *)(v29 + 28);
      if ((_DWORD)v50)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v29 + 16), (WTF::StringImpl *)(*(_QWORD *)(v29 + 16) + 32 * v50));
      v51 = *(WTF **)(v29 + 16);
      if (v51)
      {
        *(_QWORD *)(v29 + 16) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        WTF::fastFree(v51, a2);
      }
      result = WTF::fastFree((WTF *)v29, a2);
      v47 = v66;
    }
  }
LABEL_65:
  v59 = *v6;
  if (*v6)
    v59 += 16 * *(unsigned int *)(v59 - 4);
  if (v44 != v59)
  {
    while (!*(_QWORD *)(*(_QWORD *)v44 + 8))
    {
      v60 = v44 + 16;
      v44 = v47;
      if (v60 != v47)
      {
        v44 = v60;
        while ((unint64_t)(*(_QWORD *)v44 + 1) <= 1)
        {
          v44 += 16;
          if (v44 == v47)
          {
            v44 = v47;
            break;
          }
        }
      }
      if (v44 == v59)
      {
        v44 = v59;
        break;
      }
    }
  }
  *(_BYTE *)(v44 + 8) = a3;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Element,WebCore::ViewportProximity,WebCore::WeakPtrImplWithEventTargetData>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::Element,WebCore::ViewportProximity,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(a1, a2);
  v6 = a2[2];
  v7 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8))
    return 0;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (v7 + ~(v6 << 32)) ^ ((unint64_t)(v7 + ~(v6 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  for (i = 1; ; v13 = (v15 + i++) & v9)
  {
    v15 = v13;
    v16 = *(_QWORD *)(v8 + 16 * v13);
    if (v16 != -1)
    {
      if (!v16)
        return 0;
      if (v16 == v7)
        break;
    }
  }
  if ((_DWORD)v15 == *(_DWORD *)(v8 - 4))
    return 0;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)a1, (_QWORD *)(v8 + 16 * v15));
  return 1;
}

WebCore::ContextDestructionObserver *WebCore::ContextDestructionObserver::ContextDestructionObserver(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2)
{
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  return this;
}

{
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  return this;
}

uint64_t WebCore::ContextDestructionObserver::protectedScriptExecutionContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v2 = v3 - 96;
      v4 = *(unsigned __int8 *)(v3 + 178);
      if (*(_BYTE *)(v3 + 178))
      {
        if (v4 == 1 || v4 == 2)
          ++*(_DWORD *)(v3 + 216);
      }
      else
      {
        *(_DWORD *)(v3 - 264) += 2;
      }
    }
    else
    {
      v2 = 0;
    }
  }
  *a2 = v2;
  return this;
}

uint64_t WebCore::CustomElementDefaultARIA::setElementForAttribute(WebCore::CustomElementDefaultARIA *this, WebCore::QualifiedName::QualifiedNameImpl **a2, WebCore::Element *a3)
{
  uint64_t *v3;
  unsigned int *v4;
  void *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int v12;
  const WebCore::QualifiedName *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;

  v3 = (uint64_t *)((char *)this + 8);
  if (a3)
  {
    v13 = (const WebCore::QualifiedName *)a2;
    v15 = v3;
    v11 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
    v4 = v11;
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    a2 = (WebCore::QualifiedName::QualifiedNameImpl **)v13;
    v3 = v15;
  }
  else
  {
    v4 = 0;
  }
  v18 = (uint64_t)v4;
  WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName const&,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>(v3, a2, &v18, (uint64_t)v17);
  result = v18;
  v18 = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      v9 = *(unsigned int *)(result + 28);
      if ((_DWORD)v9)
      {
        v16 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
        result = v16;
      }
      v10 = *(WTF **)(result + 16);
      if (v10)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v14 = result;
        WTF::fastFree(v10, v5);
        result = v14;
      }
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

WTF *WebCore::CustomElementDefaultARIA::setElementsForAttribute(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  int v25;
  int *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  int i;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WebCore::QualifiedName::QualifiedNameImpl *v33;
  WTF::StringImpl **v34;
  int *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WebCore::QualifiedName::QualifiedNameImpl *v39;
  int v40;
  _DWORD *v41;
  WebCore::QualifiedName::QualifiedNameImpl *v42;
  WTF::StringImpl **v43;
  void *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  WTF *result;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  void *v61;
  uint64_t *v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    v5 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)a3;
      v7 = *(_QWORD *)a3 + 8 * v5;
      do
      {
        v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*v6);
        if (v8)
        {
          do
            v10 = __ldaxr(v8);
          while (__stlxr(v10 + 1, v8));
        }
        v63 = (WTF *)v8;
        LODWORD(v11) = HIDWORD(v65);
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          v12 = (uint64_t *)WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, HIDWORD(v65) + 1, (unint64_t)&v63);
          v11 = HIDWORD(v65);
          v13 = v64;
          v14 = *v12;
          *v12 = 0;
          *((_QWORD *)v13 + v11) = v14;
        }
        else
        {
          v63 = 0;
          *((_QWORD *)v64 + HIDWORD(v65)) = v8;
        }
        HIDWORD(v65) = v11 + 1;
        v15 = v63;
        v63 = 0;
        if (v15)
        {
          do
          {
            v16 = __ldaxr((unsigned int *)v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, (unsigned int *)v15));
          if (!v17)
          {
            atomic_store(1u, (unsigned int *)v15);
            v18 = *((unsigned int *)v15 + 7);
            if ((_DWORD)v18)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v15 + 2), (WTF::StringImpl *)(*((_QWORD *)v15 + 2) + 32 * v18));
            v19 = (WTF *)*((_QWORD *)v15 + 2);
            if (v19)
            {
              *((_QWORD *)v15 + 2) = 0;
              *((_DWORD *)v15 + 6) = 0;
              WTF::fastFree(v19, v9);
            }
            WTF::fastFree(v15, v9);
          }
        }
        ++v6;
      }
      while (v6 != (uint64_t *)v7);
    }
  }
  v22 = *(_QWORD *)(a1 + 8);
  v20 = (uint64_t *)(a1 + 8);
  v21 = v22;
  if (v22
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v20, 8u, 0), (v21 = *v20) != 0))
  {
    v23 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v23 = 0;
  }
  v24 = *a2;
  v25 = *((_DWORD *)*a2 + 1);
  if (!v25)
  {
    v25 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v24 + 1) = v25;
  }
  v26 = &webThreadDelegateMessageScopeCount;
  v27 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v62 = v20;
    v28 = 0;
    for (i = 1; ; ++i)
    {
      v30 = v25 & v23;
      v31 = v21 + 32 * v30;
      if (v27)
      {
        v32 = (*(_DWORD *)v27)++;
        v33 = *(WebCore::QualifiedName::QualifiedNameImpl **)v31;
        if (v32)
        {
          *(_DWORD *)v27 = v32;
          v34 = v27;
        }
        else
        {
          v35 = v26;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v27);
          WTF::fastFree(v36, v37);
          v26 = v35;
          v34 = (WTF::StringImpl **)*((_QWORD *)v35 + 254);
        }
      }
      else
      {
        v34 = 0;
        v33 = *(WebCore::QualifiedName::QualifiedNameImpl **)v31;
      }
      if (v33 == (WebCore::QualifiedName::QualifiedNameImpl *)v27)
        break;
      if (*(_QWORD *)v31 == -1)
      {
        v28 = v21 + 32 * v30;
      }
      else if (*(WebCore::QualifiedName::QualifiedNameImpl **)v31 == *a2)
      {
        goto LABEL_55;
      }
      v25 = i + v30;
      v27 = v34;
    }
LABEL_44:
    v20 = v62;
    if (v28)
    {
      v41 = (_DWORD *)*((_QWORD *)v26 + 254);
      if (v41)
        ++*v41;
      *(_QWORD *)v28 = v41;
      *(_QWORD *)(v28 + 8) = 0;
      *(_DWORD *)(v28 + 24) = 0;
      --*(_DWORD *)(*v62 - 16);
      v31 = v28;
    }
  }
  else
  {
    v38 = v25 & v23;
    v31 = v21 + 32 * v38;
    v39 = *(WebCore::QualifiedName::QualifiedNameImpl **)v31;
    if (*(_QWORD *)v31)
    {
      v62 = v20;
      v28 = 0;
      v40 = 1;
      while (1)
      {
        if (v39 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
        {
          v28 = v31;
        }
        else if (v39 == *a2)
        {
LABEL_55:
          std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unsigned int *)(v31 + 8), (_DWORD *)(v31 + 8), (uint64_t *)&v64);
          goto LABEL_67;
        }
        v38 = ((_DWORD)v38 + v40) & v23;
        v31 = v21 + 32 * v38;
        v39 = *(WebCore::QualifiedName::QualifiedNameImpl **)v31;
        ++v40;
        if (!*(_QWORD *)v31)
          goto LABEL_44;
      }
    }
  }
  v42 = *a2;
  if (*a2)
    ++*(_DWORD *)v42;
  v43 = *(WTF::StringImpl ***)v31;
  *(_QWORD *)v31 = v42;
  if (v43)
  {
    if (*(_DWORD *)v43 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v43);
      WTF::fastFree(v60, v61);
    }
    else
    {
      --*(_DWORD *)v43;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unsigned int *)(v31 + 8), (_DWORD *)(v31 + 8), (uint64_t *)&v64);
  v45 = *v20;
  if (*v20)
    v46 = *(_DWORD *)(v45 - 12) + 1;
  else
    v46 = 1;
  *(_DWORD *)(v45 - 12) = v46;
  v47 = *v20;
  if (*v20)
    v48 = *(_DWORD *)(v47 - 12);
  else
    v48 = 0;
  v49 = (*(_DWORD *)(v47 - 16) + v48);
  v50 = *(unsigned int *)(v47 - 4);
  if (v50 <= 0x400)
  {
    if (3 * v50 > 4 * v49)
      goto LABEL_67;
    if (!(_DWORD)v50)
    {
      v51 = 8;
      goto LABEL_66;
    }
LABEL_63:
    v51 = (_DWORD)v50 << (6 * *(_DWORD *)(v47 - 12) >= (2 * v50));
LABEL_66:
    WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v20, v51, (WebCore::QualifiedName::QualifiedNameImpl **)v31);
    goto LABEL_67;
  }
  if (v50 <= 2 * v49)
    goto LABEL_63;
LABEL_67:
  if (HIDWORD(v65))
  {
    v53 = v64;
    v54 = (WTF *)((char *)v64 + 8 * HIDWORD(v65));
    do
    {
      v55 = *(_QWORD *)v53;
      *(_QWORD *)v53 = 0;
      if (v55)
      {
        do
        {
          v56 = __ldaxr((unsigned int *)v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, (unsigned int *)v55));
        if (!v57)
        {
          atomic_store(1u, (unsigned int *)v55);
          v58 = *(unsigned int *)(v55 + 28);
          if ((_DWORD)v58)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v55 + 16), (WTF::StringImpl *)(*(_QWORD *)(v55 + 16) + 32 * v58));
          v59 = *(WTF **)(v55 + 16);
          if (v59)
          {
            *(_QWORD *)(v55 + 16) = 0;
            *(_DWORD *)(v55 + 24) = 0;
            WTF::fastFree(v59, v44);
          }
          WTF::fastFree((WTF *)v55, v44);
        }
      }
      v53 = (WTF *)((char *)v53 + 8);
    }
    while (v53 != v54);
  }
  result = v64;
  if (v64)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    return (WTF *)WTF::fastFree(result, v44);
  }
  return result;
}

WebCore::Element *WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(WebCore::Element *this, WebCore::Element *a2)
{
  WebCore::Element *v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::Element **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  WebCore::WindowEventLoop *v13;
  uint64_t v14;

  v2 = this;
  *((_QWORD *)this + 6) |= 0x4000000000000uLL;
  v3 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  if (WebCore::CustomElementReactionStack::s_currentProcessingStack)
  {
    v4 = *(unsigned int *)(WebCore::CustomElementReactionStack::s_currentProcessingStack + 12);
    if ((_DWORD)v4 != *(_DWORD *)(WebCore::CustomElementReactionStack::s_currentProcessingStack + 8))
    {
      v5 = (WebCore::Element **)(*(_QWORD *)WebCore::CustomElementReactionStack::s_currentProcessingStack + 8 * v4);
LABEL_4:
      *((_DWORD *)v2 + 6) += 2;
      *v5 = v2;
      *(_DWORD *)(v3 + 12) = v4 + 1;
      return this;
    }
    v6 = v4 + (v4 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v4 + 1)
      v8 = v4 + 1;
    else
      v8 = v7;
    v9 = *(void **)WebCore::CustomElementReactionStack::s_currentProcessingStack;
    if (v8 < 5)
    {
      v10 = (void *)(WebCore::CustomElementReactionStack::s_currentProcessingStack + 16);
      *(_QWORD *)WebCore::CustomElementReactionStack::s_currentProcessingStack = WebCore::CustomElementReactionStack::s_currentProcessingStack
                                                                               + 16;
      *(_DWORD *)(v3 + 8) = 4;
      goto LABEL_14;
    }
    if (!(v8 >> 29))
    {
      v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(v3 + 8) = v8;
      *(_QWORD *)v3 = v10;
LABEL_14:
      this = (WebCore::Element *)memcpy(v10, v9, 8 * v4);
      if ((void *)(v3 + 16) != v9 && v9 != 0)
      {
        if (*(void **)v3 == v9)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        this = (WebCore::Element *)WTF::fastFree((WTF *)v9, v11);
      }
      v4 = *(unsigned int *)(v3 + 12);
      v5 = (WebCore::Element **)(*(_QWORD *)v3 + 8 * v4);
      goto LABEL_4;
    }
    __break(0xC471u);
  }
  else
  {
    v13 = (WebCore::WindowEventLoop *)WebCore::Document::windowEventLoop(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), a2);
    v14 = WebCore::WindowEventLoop::backupElementQueue(v13);
    return (WebCore::Element *)WebCore::CustomElementQueue::add(v14, v2);
  }
  return this;
}

WebCore::Element *WebCore::CustomElementReactionQueue::tryToUpgradeElement(WebCore::Element *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  WebCore::JSCustomElementInterface *v12;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 696);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 24);
    v3 = *(_QWORD *)(v2 + 264);
    if (v3)
    {
      ++*(_DWORD *)(v3 + 16);
      v4 = *((_QWORD *)this + 12);
      if (*(_QWORD *)(v4 + 32) == WebCore::HTMLNames::xhtmlNamespaceURI)
      {
        v5 = *(_QWORD *)(v3 + 32);
        if (v5)
        {
          v6 = 0;
          v7 = *(_QWORD *)(v4 + 24);
          for (i = *(_DWORD *)(v7 + 16) >> 8; ; i = v6 + v9)
          {
            v9 = i & *(_DWORD *)(v5 - 8);
            v10 = *(_QWORD *)(v5 + 16 * v9);
            if (!v10)
              break;
            if (v10 != -1 && v10 == v7)
            {
              v12 = *(WebCore::JSCustomElementInterface **)(v5 + 16 * v9 + 8);
              if (v12)
              {
                ++*((_DWORD *)v12 + 4);
                this = WebCore::Element::enqueueToUpgrade(this, v12);
                if (*((_DWORD *)v12 + 4) == 1)
                  this = (WebCore::Element *)(*(uint64_t (**)(WebCore::JSCustomElementInterface *))(*(_QWORD *)v12 + 16))(v12);
                else
                  --*((_DWORD *)v12 + 4);
              }
              break;
            }
            ++v6;
          }
        }
      }
      if (*(_DWORD *)(v3 + 16) == 1)
        this = (WebCore::Element *)(*(uint64_t (**)(uint64_t, WebCore::Element *))(*(_QWORD *)v3 + 16))(v3, a2);
      else
        --*(_DWORD *)(v3 + 16);
    }
    if (*(_DWORD *)(v2 + 24) == 1)
      return (WebCore::Element *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    else
      --*(_DWORD *)(v2 + 24);
  }
  return this;
}

WebCore::Element *WebCore::CustomElementReactionQueue::enqueueAdoptedCallbackIfNeeded(WebCore::Element *this, WebCore::Element *a2, WebCore::Document *a3, WebCore::Document *a4)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v7;
  WebCore::Element *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  _BYTE v25[16];
  _QWORD v26[3];
  int v27;
  unsigned __int8 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 56);
  if (!v5 || !*(_QWORD *)v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
    return this;
  v7 = a2;
  v8 = this;
  v9 = (uint64_t *)(v4 + 16);
  *((_DWORD *)a2 + 6) += 2;
  *((_DWORD *)a3 + 6) += 2;
  *((_DWORD *)a2 + 6) += 2;
  *((_DWORD *)a3 + 6) += 2;
  v25[0] = 4;
  v25[8] = 0;
  *((_DWORD *)a2 + 6) += 2;
  *((_DWORD *)a3 + 6) += 2;
  v26[0] = a2;
  v26[1] = a3;
  v27 = 0;
  v28 = 1;
  v10 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v10 == *(_DWORD *)(v4 + 24))
  {
    v18 = WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)v25);
    v20 = *(_DWORD *)(v4 + 28);
    v21 = *(_QWORD *)(v4 + 16);
    v22 = (_BYTE *)(v21 + 56 * v20);
    *v22 = *(_BYTE *)v18;
    v22[8] = 0;
    v22[48] = 0;
    v13 = v22 + 48;
    if (!*(_BYTE *)(v18 + 48))
    {
LABEL_10:
      v17 = v28;
      ++*(_DWORD *)(v4 + 28);
      if (v17)
      {
        if (v27 != -1)
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v27])(&v24, v26);
        v27 = -1;
      }
      goto LABEL_15;
    }
    v23 = v21 + 56 * v20;
    *(_DWORD *)(v23 + 40) = -1;
    v15 = (_DWORD *)(v23 + 40);
    *((_BYTE *)v15 - 24) = 0;
    a2 = (WebCore::Element *)(v15 - 6);
    v16 = *(unsigned int *)(v18 + 40);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, WebCore::Element *, unint64_t, uint64_t))off_1E33A1B50[v16])(&v24, a2, v18 + 16, v19);
      goto LABEL_8;
    }
LABEL_9:
    *v13 = 1;
    goto LABEL_10;
  }
  v11 = *v9;
  v12 = (_BYTE *)(*v9 + 56 * v10);
  *v12 = 4;
  v12[8] = 0;
  v12[48] = 0;
  v13 = v12 + 48;
  if (v28)
  {
    v14 = v11 + 56 * v10;
    *(_DWORD *)(v14 + 40) = -1;
    v15 = (_DWORD *)(v14 + 40);
    *((_BYTE *)v15 - 24) = 0;
    a2 = (WebCore::Element *)(v15 - 6);
    LODWORD(v16) = v27;
    if (v27 != -1)
    {
      ((void (*)(char *, WebCore::Element *, _QWORD *, WebCore::Document *))off_1E33A1B50[v27])(&v24, a2, v26, a4);
LABEL_8:
      *v15 = v16;
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  ++*(_DWORD *)(v4 + 28);
LABEL_15:
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, a2);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7, a2);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  if (*((_DWORD *)a3 + 6) == 2)
  {
    if ((*((_WORD *)a3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a3, a2);
  }
  else
  {
    *((_DWORD *)a3 + 6) -= 2;
  }
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7, a2);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v8, a2);
}

uint64_t WebCore::CustomElementReactionQueueItem::CustomElementReactionQueueItem(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  char v6;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    v4 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *))off_1E33A1AE8[v4])(&v6);
      *(_DWORD *)(a1 + 40) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

WebCore::Element *WebCore::CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded(WebCore::Element *this, WTF::StringImpl ***a2, WTF::StringImpl **a3, WTF::StringImpl **a4, const WTF::AtomString *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  int v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WebCore::Element *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int *v29;
  int v30;
  WTF *v31;
  void *v32;
  char v33;
  _BYTE v34[16];
  _QWORD v35[3];
  int v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v6 + 136);
  if (v7)
  {
    v8 = *a2;
    v9 = *(_DWORD *)(v6 + 144);
    v10 = v9 - 1;
    v11 = *(_DWORD *)(v6 + 152);
    v12 = (*a2)[3];
    v13 = *((_DWORD *)v12 + 4);
    v14 = (v11 ^ (v13 >> 8)) & (v9 - 1);
    v15 = *(WTF::StringImpl **)(v7 + 8 * v14);
    if (v15)
    {
      v16 = this;
      v17 = v13 >> 8;
      v18 = -1;
      do
      {
        v19 = *((_DWORD *)v15 + 4);
        v20 = (WTF::StringImpl *)(v14 + v9);
        this = (WebCore::Element *)((v20 - ((v11 ^ (v19 >> 8)) & v10)) & v10);
        if (++v18 > this)
          break;
        if (v15 == v12 && v19 >> 8 == v17)
        {
          if (v8)
            ++*(_DWORD *)v8;
          v21 = *a3;
          if (*a3)
            *(_DWORD *)v21 += 2;
          v22 = *a4;
          if (*a4)
            *(_DWORD *)v22 += 2;
          v34[0] = 5;
          v34[8] = 0;
          if (v8)
            ++*(_DWORD *)v8;
          v35[0] = v8;
          if (v21)
            *(_DWORD *)v21 += 2;
          v35[1] = v21;
          if (v22)
            *(_DWORD *)v22 += 2;
          v23 = (uint64_t *)(v5 + 16);
          v35[2] = v22;
          v36 = 1;
          v37 = 1;
          v24 = *(_DWORD *)(v5 + 28);
          if (v24 == *(_DWORD *)(v5 + 24))
          {
            WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem>((uint64_t)v23, (unint64_t)v34);
          }
          else
          {
            v25 = *v23;
            v26 = (_BYTE *)(*v23 + 56 * v24);
            *v26 = 5;
            v26[8] = 0;
            v26[48] = 0;
            v27 = v26 + 48;
            if (v37)
            {
              v28 = v25 + 56 * v24;
              *(_DWORD *)(v28 + 40) = -1;
              v29 = (int *)(v28 + 40);
              *((_BYTE *)v29 - 24) = 0;
              v20 = (WTF::StringImpl *)(v29 - 6);
              v30 = v36;
              if (v36 != -1)
              {
                ((void (*)(char *, WTF::StringImpl *, _QWORD *))off_1E33A1B50[v36])(&v33, v20, v35);
                *v29 = v30;
              }
              *v27 = 1;
            }
            ++*(_DWORD *)(v5 + 28);
          }
          if (v37)
          {
            if (v36 != -1)
              ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v36])(&v33, v35);
            v36 = -1;
          }
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v20);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v20);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
              WTF::fastFree(v31, v32);
            }
            else
            {
              --*(_DWORD *)v8;
            }
          }
          return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v16, v20);
        }
        v14 = (v14 + 1) & v10;
        v15 = *(WTF::StringImpl **)(v7 + 8 * v14);
      }
      while (v15);
    }
  }
  return this;
}

WebCore::Element *WebCore::CustomElementReactionQueue::enqueueFormAssociatedCallbackIfNeeded(WebCore::Element *this, WebCore::Element *a2, WebCore::HTMLFormElement *a3)
{
  WebCore::Element *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  _BYTE v25[16];
  _QWORD v26[3];
  int v27;
  unsigned __int8 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 3448))
  {
    v3 = this;
    v4 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 72);
    if (v5)
    {
      if (*(_QWORD *)v5 && (*(_BYTE *)(v5 + 8) & 3) == 0)
      {
        v6 = a2;
        if (a2)
          *((_DWORD *)a2 + 6) += 6;
        v7 = (uint64_t *)(v4 + 16);
        v25[0] = 6;
        v25[8] = 0;
        v26[0] = a2;
        v27 = 2;
        v28 = 1;
        v8 = *(unsigned int *)(v4 + 28);
        if ((_DWORD)v8 == *(_DWORD *)(v4 + 24))
        {
          v19 = WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)v25);
          v20 = *(_DWORD *)(v4 + 28);
          v21 = *(_QWORD *)(v4 + 16);
          v22 = (_BYTE *)(v21 + 56 * v20);
          *v22 = *(_BYTE *)v19;
          v22[8] = 0;
          v22[48] = 0;
          v11 = v22 + 48;
          if (!*(_BYTE *)(v19 + 48))
          {
LABEL_13:
            v15 = v28;
            ++*(_DWORD *)(v4 + 28);
            if (v15)
            {
              if (v27 != -1)
                ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v27])(&v24, v26);
              v27 = -1;
            }
LABEL_18:
            if (!v6)
              return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v3, a2);
            v16 = *((_DWORD *)v6 + 6) - 2;
            if (*((_DWORD *)v6 + 6) == 2)
            {
              v18 = *((_WORD *)v6 + 15);
              if ((v18 & 0x400) != 0)
                goto LABEL_28;
              WebCore::Node::removedLastRef(v6, a2);
              v16 = *((_DWORD *)v6 + 6);
            }
            else
            {
              *((_DWORD *)v6 + 6) = v16;
            }
            v17 = v16 - 2;
            if (v17)
            {
              *((_DWORD *)v6 + 6) = v17;
              return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v3, a2);
            }
            v18 = *((_WORD *)v6 + 15);
LABEL_28:
            if ((v18 & 0x400) == 0)
              WebCore::Node::removedLastRef(v6, a2);
            return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v3, a2);
          }
          v23 = v21 + 56 * v20;
          *(_DWORD *)(v23 + 40) = -1;
          v13 = (_DWORD *)(v23 + 40);
          *((_BYTE *)v13 - 24) = 0;
          a2 = (WebCore::Element *)(v13 - 6);
          v14 = *(unsigned int *)(v19 + 40);
          if ((_DWORD)v14 == -1)
          {
LABEL_12:
            *v11 = 1;
            goto LABEL_13;
          }
          ((void (*)(char *, WebCore::Element *, unint64_t))off_1E33A1B50[v14])(&v24, a2, v19 + 16);
        }
        else
        {
          v9 = *v7;
          v10 = (_BYTE *)(*v7 + 56 * v8);
          *v10 = 6;
          v10[8] = 0;
          v10[48] = 0;
          v11 = v10 + 48;
          if (!v28)
          {
            ++*(_DWORD *)(v4 + 28);
            goto LABEL_18;
          }
          v12 = v9 + 56 * v8;
          *(_DWORD *)(v12 + 40) = -1;
          v13 = (_DWORD *)(v12 + 40);
          *((_BYTE *)v13 - 24) = 0;
          a2 = (WebCore::Element *)(v13 - 6);
          LODWORD(v14) = v27;
          if (v27 == -1)
            goto LABEL_12;
          ((void (*)(char *, WebCore::Element *, _QWORD *))off_1E33A1B50[v27])(&v24, a2, v26);
        }
        *v13 = v14;
        goto LABEL_12;
      }
    }
  }
  return this;
}

WebCore::Element *WebCore::CustomElementReactionQueue::enqueueFormResetCallbackIfNeeded(WebCore::Element *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Element *v10;

  v2 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 80);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v4 == *(_DWORD *)(v2 + 24))
    {
      v6 = v4 + (v4 >> 2);
      if (v6 >= 0x10)
        v7 = v6 + 1;
      else
        v7 = 16;
      if (v7 <= v4 + 1)
        v8 = v4 + 1;
      else
        v8 = v7;
      v9 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
      v10 = this;
      WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v2 + 16, v8);
      v2 = v9;
      this = v10;
      v5 = (_BYTE *)(*(_QWORD *)(v9 + 16) + 56 * *(unsigned int *)(v9 + 28));
    }
    else
    {
      v5 = (_BYTE *)(*(_QWORD *)(v2 + 16) + 56 * v4);
    }
    *v5 = 7;
    v5[8] = 0;
    v5[48] = 0;
    ++*(_DWORD *)(v2 + 28);
    return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(this, a2);
  }
  return this;
}

WebCore::Element *WebCore::CustomElementReactionQueue::enqueueFormDisabledCallbackIfNeeded(WebCore::Element *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Element *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  _BYTE v20[16];
  _BYTE v21[24];
  int v22;
  unsigned __int8 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 88);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = this;
    v5 = (uint64_t *)(v2 + 16);
    v20[0] = 8;
    v20[8] = 0;
    v21[0] = (_BYTE)a2;
    v22 = 3;
    v23 = 1;
    v6 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v6 == *(_DWORD *)(v2 + 24))
    {
      v14 = WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)v20);
      v15 = *(_DWORD *)(v2 + 28);
      v16 = *(_QWORD *)(v2 + 16);
      v17 = (_BYTE *)(v16 + 56 * v15);
      *v17 = *(_BYTE *)v14;
      v17[8] = 0;
      v17[48] = 0;
      v9 = v17 + 48;
      if (!*(_BYTE *)(v14 + 48))
      {
LABEL_10:
        v13 = v23;
        ++*(_DWORD *)(v2 + 28);
        if (v13)
        {
          if (v22 != -1)
            ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v22])(&v19, v21);
        }
        return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v4, a2);
      }
      v18 = v16 + 56 * v15;
      *(_DWORD *)(v18 + 40) = -1;
      v11 = (_DWORD *)(v18 + 40);
      *((_BYTE *)v11 - 24) = 0;
      a2 = (WebCore::Element *)(v11 - 6);
      v12 = *(unsigned int *)(v14 + 40);
      if ((_DWORD)v12 == -1)
      {
LABEL_9:
        *v9 = 1;
        goto LABEL_10;
      }
      ((void (*)(char *, WebCore::Element *, unint64_t))off_1E33A1B50[v12])(&v19, a2, v14 + 16);
    }
    else
    {
      v7 = *v5;
      v8 = (_BYTE *)(*v5 + 56 * v6);
      *v8 = 8;
      v8[8] = 0;
      v8[48] = 0;
      v9 = v8 + 48;
      if (!v23)
      {
        ++*(_DWORD *)(v2 + 28);
        return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v4, a2);
      }
      v10 = v7 + 56 * v6;
      *(_DWORD *)(v10 + 40) = -1;
      v11 = (_DWORD *)(v10 + 40);
      *((_BYTE *)v11 - 24) = 0;
      a2 = (WebCore::Element *)(v11 - 6);
      LODWORD(v12) = v22;
      if (v22 == -1)
        goto LABEL_9;
      ((void (*)(char *, WebCore::Element *, _BYTE *))off_1E33A1B50[v22])(&v19, a2, v21);
    }
    *v11 = v12;
    goto LABEL_9;
  }
  return this;
}

WebCore::Element *WebCore::CustomElementReactionQueue::enqueueFormStateRestoreCallbackIfNeeded(WebCore::Element *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Element *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  _BYTE v21[8];
  int v22;
  int v23;
  char v24;
  _BYTE v25[16];
  _BYTE v26[8];
  int v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x60);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 96);
  if (!v3 || !*(_QWORD *)v3 || (*(_BYTE *)(v3 + 8) & 3) != 0)
    return this;
  v4 = this;
  v21[0] = 0;
  v22 = -1;
  v5 = a2[2];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, unsigned int *))off_1E33A1B30[v5])(v25, v21, a2);
    v22 = v5;
  }
  v23 = 4;
  v24 = 1;
  v25[0] = 9;
  v25[8] = 0;
  v29 = 0;
  v26[0] = 0;
  v28 = -1;
  v27 = -1;
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_1E33A1B10[v5])(&v20, v26, v21);
    v27 = v5;
  }
  v6 = (uint64_t *)(v2 + 16);
  v28 = 4;
  v29 = 1;
  v7 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v7 == *(_DWORD *)(v2 + 24))
  {
    v15 = WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)v25);
    v16 = *(_DWORD *)(v2 + 28);
    v17 = *(_QWORD *)(v2 + 16);
    v18 = (_BYTE *)(v17 + 56 * v16);
    *v18 = *(_BYTE *)v15;
    v18[8] = 0;
    v18[48] = 0;
    v10 = v18 + 48;
    if (!*(_BYTE *)(v15 + 48))
    {
LABEL_14:
      v14 = v29;
      ++*(_DWORD *)(v2 + 28);
      if (v14)
      {
        if (v28 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v28])(&v20, v26);
        v28 = -1;
      }
      goto LABEL_19;
    }
    v19 = v17 + 56 * v16;
    *(_DWORD *)(v19 + 40) = -1;
    v12 = (_DWORD *)(v19 + 40);
    *((_BYTE *)v12 - 24) = 0;
    a2 = v12 - 6;
    v13 = *(unsigned int *)(v15 + 40);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, unsigned int *, unint64_t))off_1E33A1B50[v13])(&v20, a2, v15 + 16);
      goto LABEL_12;
    }
LABEL_13:
    *v10 = 1;
    goto LABEL_14;
  }
  v8 = *v6;
  v9 = (_BYTE *)(*v6 + 56 * v7);
  *v9 = v25[0];
  v9[8] = 0;
  v9[48] = 0;
  v10 = v9 + 48;
  if (v29)
  {
    v11 = v8 + 56 * v7;
    *(_DWORD *)(v11 + 40) = -1;
    v12 = (_DWORD *)(v11 + 40);
    *((_BYTE *)v12 - 24) = 0;
    a2 = v12 - 6;
    LODWORD(v13) = v28;
    if (v28 != -1)
    {
      ((void (*)(char *, unsigned int *, _BYTE *))off_1E33A1B50[v28])(&v20, a2, v26);
LABEL_12:
      *v12 = v13;
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  ++*(_DWORD *)(v2 + 28);
LABEL_19:
  if (v24)
  {
    if (v23 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v23])(&v20, v21);
    v23 = -1;
  }
  return WebCore::CustomElementReactionQueue::enqueueElementOnAppropriateElementQueue(v4, (WebCore::Element *)a2);
}

uint64_t WebCore::CustomElementReactionQueue::enqueuePostUpgradeReactions(uint64_t this, WebCore::Element *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _QWORD *v36;
  _DWORD **v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD v48[3];
  int v49;
  char v50;
  char v51[8];
  char v52[8];
  _QWORD v53[2];
  _DWORD *v54;
  int v55;
  char v56;
  uint64_t v57;

  v5 = this;
  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(this + 104);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 4) & 8) != 0)
      this = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)this, (unsigned __int8 *)a2, a5, a3, a4);
    if ((*(_WORD *)(v5 + 28) & 0x20) != 0)
      this = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v5);
    v6 = *(_QWORD *)(v5 + 104);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0 ? *(_DWORD *)(v6 + 52) : v7 >> 5)
        goto LABEL_13;
    }
  }
  if ((*(_BYTE *)(v5 + 22) & 8) != 0)
  {
LABEL_13:
    if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      v9 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x60);
    else
      v9 = 0;
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 4) & 8) != 0)
        this = (uint64_t)WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v5, (unsigned __int8 *)a2, a5, a3, a4);
      if ((*(_WORD *)(v5 + 28) & 0x20) != 0)
        this = (uint64_t)WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v5);
      v10 = *(_QWORD *)(v5 + 104);
      if (v10)
      {
        v11 = *(_DWORD *)(v10 + 4);
        if ((v11 & 1) != 0)
        {
          v13 = *(unsigned int *)(v10 + 52);
          if ((_DWORD)v13)
          {
            v12 = *(_QWORD *)(v10 + 40);
LABEL_24:
            if (*(_QWORD *)(*(_QWORD *)(v9 + 8) + 136))
            {
              v14 = 0;
              v15 = (_QWORD *)(v9 + 16);
              v16 = (_DWORD **)MEMORY[0x1E0CBF2F8];
              do
              {
                v17 = *(_QWORD *)(v9 + 8);
                v18 = *(_QWORD *)(v17 + 136);
                if (v18)
                {
                  v19 = *(_QWORD *)(v12 + 16 * v14);
                  v20 = *(_DWORD *)(v17 + 144);
                  v21 = v20 - 1;
                  v22 = *(_DWORD *)(v17 + 152);
                  v23 = *(_QWORD *)(v19 + 24);
                  v24 = *(_DWORD *)(v23 + 16);
                  v25 = (v22 ^ (v24 >> 8)) & (v20 - 1);
                  v26 = *(_QWORD *)(v18 + 8 * v25);
                  if (v26)
                  {
                    v27 = v24 >> 8;
                    v28 = -1;
                    do
                    {
                      this = *(unsigned int *)(v26 + 16);
                      if (++v28 > ((v25 + v20 - ((v22 ^ (this >> 8)) & v21)) & v21))
                        break;
                      if (v26 == v23 && this >> 8 == v27)
                      {
                        if (v19)
                          ++*(_DWORD *)v19;
                        v29 = *v16;
                        if (*v16)
                          *v29 += 2;
                        v30 = *(_DWORD **)(v12 + 16 * v14 + 8);
                        if (v30)
                          *v30 += 2;
                        v48[0] = v19;
                        v48[1] = v29;
                        v48[2] = v30;
                        v49 = 1;
                        v50 = 1;
                        v51[0] = 5;
                        v52[0] = 0;
                        LOBYTE(v53[0]) = 0;
                        if (v19)
                          ++*(_DWORD *)v19;
                        v53[0] = v19;
                        if (v29)
                          *v29 += 2;
                        v53[1] = v29;
                        if (v30)
                          *v30 += 2;
                        v54 = v30;
                        v55 = 1;
                        v56 = 1;
                        v31 = *(_DWORD *)(v9 + 28);
                        if (v31 == *(_DWORD *)(v9 + 24))
                        {
                          this = WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem>((uint64_t)v15, (unint64_t)v51);
                        }
                        else
                        {
                          v32 = *v15;
                          v33 = (_BYTE *)(*v15 + 56 * v31);
                          *v33 = 5;
                          v33[8] = 0;
                          v33[48] = 0;
                          v34 = v33 + 48;
                          if (v56)
                          {
                            v35 = v13;
                            v36 = v15;
                            v37 = v16;
                            v38 = v32 + 56 * v31;
                            *(_DWORD *)(v38 + 40) = -1;
                            v39 = (int *)(v38 + 40);
                            *((_BYTE *)v39 - 24) = 0;
                            v40 = v55;
                            if (v55 != -1)
                            {
                              this = ((uint64_t (*)(char *, int *, _QWORD *, uint64_t))off_1E33A1B50[v55])(&v47, v39 - 6, v53, 0xFFFFFFFFLL);
                              *v39 = v40;
                            }
                            *v34 = 1;
                            v16 = v37;
                            v15 = v36;
                            v13 = v35;
                          }
                          ++*(_DWORD *)(v9 + 28);
                        }
                        if (v56)
                        {
                          if (v55 != -1)
                            this = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v55])(&v47, v53);
                          v55 = -1;
                        }
                        if (v50)
                        {
                          if (v49 != -1)
                            this = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v49])(&v47, v48);
                          v49 = -1;
                        }
                        break;
                      }
                      v25 = (v25 + 1) & v21;
                      v26 = *(_QWORD *)(v18 + 8 * v25);
                    }
                    while (v26);
                  }
                }
                v41 = v14 + 1;
                v14 = (v14 + 1);
              }
              while ((_DWORD)v13 != v41);
            }
          }
        }
        else if (v11 >= 0x20)
        {
          v12 = v10 + 32;
          v13 = v11 >> 5;
          goto LABEL_24;
        }
      }
    }
    if ((*(_BYTE *)(v5 + 22) & 8) != 0)
    {
      v42 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 40);
      if (v42)
      {
        if (*(_QWORD *)v42 && (*(_BYTE *)(v42 + 8) & 3) == 0)
        {
          v43 = (_QWORD *)(v9 + 16);
          v46 = 2;
          v44 = *(_DWORD *)(v9 + 28);
          if (v44 == *(_DWORD *)(v9 + 24))
          {
            return WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem::Type>((uint64_t)v43, &v46);
          }
          else
          {
            v45 = *v43 + 56 * v44;
            v51[0] = 0;
            LOBYTE(v55) = 0;
            this = WebCore::CustomElementReactionQueueItem::CustomElementReactionQueueItem(v45, 2, (uint64_t)v51);
            if ((_BYTE)v55)
            {
              if ((_DWORD)v54 != -1)
                this = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v54])(&v47, v52);
            }
            ++*(_DWORD *)(v9 + 28);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::CustomElementReactionQueue::observesStyleAttribute(WebCore::CustomElementReactionQueue *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(v1 + 136);
  if (v2)
  {
    v3 = *(_DWORD *)(v1 + 144);
    v4 = v3 - 1;
    v5 = *(_DWORD *)(v1 + 152);
    v6 = *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24);
    v7 = *(_DWORD *)(v6 + 16);
    v8 = (v5 ^ (v7 >> 8)) & (v3 - 1);
    v9 = *(_QWORD *)(v2 + 8 * v8);
    if (v9)
    {
      v10 = v7 >> 8;
      v11 = -1;
      while (1)
      {
        v12 = *(_DWORD *)(v9 + 16);
        if (++v11 > ((v8 + v3 - ((v5 ^ (v12 >> 8)) & v4)) & v4))
          break;
        if (v9 == v6 && v12 >> 8 == v10)
          return 1;
        result = 0;
        v8 = (v8 + 1) & v4;
        v9 = *(_QWORD *)(v2 + 8 * v8);
        if (!v9)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *WebCore::CustomElementQueue::processQueue(WebCore::CustomElementQueue *this, JSC::JSGlobalObject *a2)
{
  uint64_t v3;
  unsigned int v4;
  void *v5;
  uint64_t *result;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  void *v11;
  _BYTE v12[8];

  if (!a2)
    return WebCore::CustomElementQueue::invokeAll((uint64_t *)this, 0);
  v3 = *((_QWORD *)a2 + 7);
  do
    v4 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v4 + 1, (unsigned int *)v3));
  MEMORY[0x19AEA3294](v12, v3);
  if (*(_QWORD *)(v3 + 16))
  {
    JSC::VM::clearException((JSC::VM *)v3);
    WebCore::CustomElementQueue::invokeAll((uint64_t *)this, v11);
    JSC::VM::throwException();
  }
  else
  {
    WebCore::CustomElementQueue::invokeAll((uint64_t *)this, v5);
  }
  result = (uint64_t *)MEMORY[0x19AEA32A0](v12);
  do
  {
    v7 = __ldaxr((unsigned int *)v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)v3));
  if (!v8)
  {
    atomic_store(1u, (unsigned int *)v3);
    v9 = (WTF *)MEMORY[0x19AEA3AF8](v3);
    return (uint64_t *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t *WebCore::CustomElementQueue::invokeAll(uint64_t *this, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  WTF *v18;
  unsigned int *v20;
  uint64_t v21;
  WebCore::JSCustomElementInterface *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  WebCore::ActiveDOMCallback *v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  _BYTE v46[56];
  WTF *v47;
  unint64_t v48;
  _BYTE v49[63];
  _BYTE v50[9];

  if (*((_BYTE *)this + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x19596432CLL);
  }
  v2 = (uint64_t)this;
  *((_BYTE *)this + 48) = 1;
  if (!*((_DWORD *)this + 3))
  {
    if (*((_DWORD *)this + 2))
      goto LABEL_73;
    goto LABEL_75;
  }
  v3 = 0;
  do
  {
    v4 = *(_QWORD *)(*(_QWORD *)v2 + 8 * v3);
    v5 = *(_DWORD *)(v4 + 24) + 2;
    *(_DWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 48) &= ~0x4000000000000uLL;
    if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      v6 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x60);
    else
      v6 = 0;
    v7 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v7)
    {
      v43 = (WTF *)(v6 + 32);
      while (1)
      {
        v44 = (WTF *)v46;
        v45 = 1;
        v47 = (WTF *)v49;
        v48 = 1;
        v8 = *(WTF **)(v6 + 16);
        if (v8 != v43)
        {
          *(_QWORD *)(v6 + 16) = v43;
          v47 = v8;
          v40 = *(_DWORD *)(v6 + 24);
          *(_QWORD *)(v6 + 24) = 1;
          v48 = __PAIR64__(v7, v40);
          goto LABEL_19;
        }
        v9 = 0;
        v10 = 56 * v7;
        do
        {
          v11 = v6 + v9;
          v12 = (char *)&v47 + v9;
          v12[16] = *(_BYTE *)(v6 + v9 + 32);
          v12[24] = 0;
          v12[64] = 0;
          if (!*(_BYTE *)(v6 + v9 + 80))
            goto LABEL_17;
          v12[32] = 0;
          a2 = v12 + 32;
          *((_DWORD *)v12 + 14) = -1;
          v13 = *(unsigned int *)(v11 + 72);
          if ((_DWORD)v13 == -1)
          {
            v12[64] = 1;
          }
          else
          {
            ((void (*)(_BYTE *, void *, uint64_t))off_1E33A1B50[v13])(v50, a2, v6 + v9 + 48);
            *((_DWORD *)v12 + 14) = v13;
            v14 = *(unsigned __int8 *)(v11 + 80);
            v12[64] = 1;
            if (!v14)
              goto LABEL_17;
            v15 = *(unsigned int *)(v11 + 72);
            if ((_DWORD)v15 != -1)
              ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v15])(v50, v6 + v9 + 48);
          }
          *(_DWORD *)(v11 + 72) = -1;
LABEL_17:
          v9 += 56;
        }
        while (v10 != v9);
        v16 = *(_DWORD *)(v6 + 28);
        v17 = *(WTF **)(v6 + 16);
        *(_DWORD *)(v6 + 28) = 0;
        HIDWORD(v48) = v16;
        if (v17 != v43)
        {
          if (v17)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
            WTF::fastFree(v17, a2);
          }
          *(_QWORD *)(v6 + 16) = v43;
        }
LABEL_19:
        v18 = v44;
        if (v44 != (WTF *)v46)
        {
          v44 = (WTF *)v46;
          *(_QWORD *)(v6 + 16) = v18;
          *(_QWORD *)(v6 + 24) = v45;
          goto LABEL_22;
        }
        if (!HIDWORD(v45))
        {
          *(_QWORD *)(v6 + 24) = v45;
          goto LABEL_22;
        }
        v26 = 0;
        v27 = 56 * HIDWORD(v45);
        while (2)
        {
          v28 = (char *)&v44 + v26;
          v29 = v6 + v26;
          *(_BYTE *)(v29 + 32) = v46[v26];
          *(_BYTE *)(v29 + 40) = 0;
          *(_BYTE *)(v29 + 80) = 0;
          if (v46[v26 + 48])
          {
            *(_BYTE *)(v29 + 48) = 0;
            a2 = (void *)(v29 + 48);
            *(_DWORD *)(v29 + 72) = -1;
            v30 = *((unsigned int *)v28 + 14);
            if ((_DWORD)v30 == -1)
            {
              *(_BYTE *)(v29 + 80) = 1;
              goto LABEL_54;
            }
            ((void (*)(_BYTE *, void *, _BYTE *))off_1E33A1B50[v30])(v50, a2, &v46[v26 + 16]);
            *(_DWORD *)(v29 + 72) = v30;
            v31 = v28[64];
            *(_BYTE *)(v29 + 80) = 1;
            if (v31)
            {
              v32 = *((unsigned int *)v28 + 14);
              if ((_DWORD)v32 != -1)
                ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v32])(v50, &v46[v26 + 16]);
LABEL_54:
              *((_DWORD *)v28 + 14) = -1;
            }
          }
          v26 += 56;
          if (v27 != v26)
            continue;
          break;
        }
        v33 = v44;
        v34 = v45;
        HIDWORD(v45) = 0;
        *(_QWORD *)(v6 + 24) = v34;
        if (v46 != (_BYTE *)v33 && v33 != 0)
        {
          v44 = 0;
          LODWORD(v45) = 0;
          WTF::fastFree(v33, a2);
        }
LABEL_22:
        this = (uint64_t *)v47;
        if (HIDWORD(v48))
        {
          v20 = (unsigned int *)((char *)v47 + 24);
          v21 = 56 * HIDWORD(v48);
          do
          {
            v22 = *(WebCore::JSCustomElementInterface **)(v6 + 8);
            if (*((_BYTE *)v20 - 24) == 5)
            {
              if (!*((_BYTE *)v20 + 24))
              {
LABEL_107:
                std::__throw_bad_optional_access[abi:sn180100]();
LABEL_108:
                this = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_109;
              }
              if (v20[4] != 1)
                goto LABEL_108;
              WebCore::JSCustomElementInterface::invokeAttributeChangedCallback(v22, (WebCore::Element *)v4, (const WebCore::QualifiedName *)(v20 - 2), (const WTF::AtomString *)v20, (const WTF::AtomString *)(v20 + 2));
            }
            else
            {
              switch(*((_BYTE *)v20 - 24))
              {
                case 1:
                  WebCore::JSCustomElementInterface::upgradeElement((uint64_t)v22, (WebCore::Element *)v4);
                  break;
                case 2:
                  WebCore::JSCustomElementInterface::invokeConnectedCallback(v22, (WebCore::Element *)v4);
                  break;
                case 3:
                  WebCore::JSCustomElementInterface::invokeDisconnectedCallback(v22, (WebCore::Element *)v4);
                  break;
                case 4:
                  if (!*((_BYTE *)v20 + 24))
                    goto LABEL_107;
                  if (v20[4])
                    goto LABEL_108;
                  WebCore::JSCustomElementInterface::invokeAdoptedCallback(v22, (WebCore::Element *)v4, *((WebCore::Document **)v20 - 1), *(WebCore::Document **)v20);
                  break;
                case 6:
                  if (!*((_BYTE *)v20 + 24))
                    goto LABEL_107;
                  if (v20[4] != 2)
                    goto LABEL_108;
                  WebCore::JSCustomElementInterface::invokeFormAssociatedCallback(v22, (WebCore::Element *)v4, *((WebCore::HTMLFormElement **)v20 - 1));
                  break;
                case 7:
                  WebCore::JSCustomElementInterface::invokeFormResetCallback(v22, (WebCore::Element *)v4);
                  break;
                case 8:
                  if (!*((_BYTE *)v20 + 24))
                    goto LABEL_107;
                  if (v20[4] != 3)
                    goto LABEL_108;
                  WebCore::JSCustomElementInterface::invokeFormDisabledCallback(v22, (WebCore::Element *)v4, *((unsigned __int8 *)v20 - 8));
                  break;
                case 9:
                  v42 = *(WebCore::ActiveDOMCallback **)(v6 + 8);
                  if (!*((_BYTE *)v20 + 24))
                    goto LABEL_107;
                  if (v20[4] != 4)
                    goto LABEL_108;
                  LOBYTE(v44) = 0;
                  LODWORD(v45) = -1;
                  v41 = *v20;
                  if ((_DWORD)v41 != -1)
                  {
                    ((void (*)(_BYTE *, WTF **, unsigned int *))off_1E33A1B10[v41])(v50, &v44, v20 - 2);
                    LODWORD(v45) = v41;
                  }
                  WebCore::JSCustomElementInterface::invokeFormStateRestoreCallback(v42, (void *)v4, (uint64_t)&v44);
                  if ((_DWORD)v45 != -1)
                    ((void (*)(_BYTE *, WTF **))off_1E33A1AC8[v45])(v50, &v44);
                  break;
                default:
                  break;
              }
            }
            v20 += 14;
            v21 -= 56;
          }
          while (v21);
          this = (uint64_t *)v47;
          if (HIDWORD(v48))
          {
            v23 = 56 * HIDWORD(v48);
            v24 = (unsigned int *)((char *)v47 + 40);
            do
            {
              if (*((_BYTE *)v24 + 8))
              {
                v25 = *v24;
                if ((_DWORD)v25 != -1)
                  ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v25])(&v44, v24 - 6);
                *v24 = -1;
              }
              v24 += 14;
              v23 -= 56;
            }
            while (v23);
            this = (uint64_t *)v47;
          }
        }
        if (v49 != (_BYTE *)this && this != 0)
        {
          v47 = 0;
          LODWORD(v48) = 0;
          this = (uint64_t *)WTF::fastFree((WTF *)this, a2);
        }
        v7 = *(unsigned int *)(v6 + 28);
        if (!(_DWORD)v7)
        {
          v5 = *(_DWORD *)(v4 + 24);
          break;
        }
      }
    }
    if (v5 == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        this = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) = v5 - 2;
    }
    ++v3;
    v36 = *(unsigned int *)(v2 + 12);
  }
  while (v3 < v36);
  if (*(_DWORD *)(v2 + 8))
  {
    if ((_DWORD)v36)
    {
      v37 = *(uint64_t **)v2;
      v38 = 8 * v36;
      do
      {
        v39 = *v37;
        *v37 = 0;
        if (v39)
        {
          if (*(_DWORD *)(v39 + 24) == 2)
          {
            if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v39, a2);
          }
          else
          {
            *(_DWORD *)(v39 + 24) -= 2;
          }
        }
        ++v37;
        v38 -= 8;
      }
      while (v38);
      *(_DWORD *)(v2 + 12) = 0;
    }
LABEL_73:
    v4 = v2 + 16;
    this = *(uint64_t **)v2;
    if (v2 + 16 == *(_QWORD *)v2)
    {
LABEL_74:
      if (this)
        goto LABEL_75;
    }
    else if (this)
    {
LABEL_109:
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree((WTF *)this, a2);
      this = *(uint64_t **)v2;
      goto LABEL_74;
    }
    *(_QWORD *)v2 = v4;
    *(_DWORD *)(v2 + 8) = 4;
  }
LABEL_75:
  *(_BYTE *)(v2 + 48) = 0;
  return this;
}

uint64_t WebCore::CustomElementQueue::add(uint64_t this, WebCore::Element *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = this;
  v4 = *(unsigned int *)(this + 12);
  if ((_DWORD)v4 != *(_DWORD *)(this + 8))
  {
    v5 = (_QWORD *)(*(_QWORD *)this + 8 * v4);
LABEL_3:
    *((_DWORD *)a2 + 6) += 2;
    *v5 = a2;
    *(_DWORD *)(v3 + 12) = v4 + 1;
    return this;
  }
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v4 + 1)
    v8 = v4 + 1;
  else
    v8 = v7;
  v9 = *(void **)this;
  if (v8 < 5)
  {
    v10 = (void *)(this + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 4;
LABEL_13:
    this = (uint64_t)memcpy(v10, v9, 8 * v4);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v9, v11);
    }
    v4 = *(unsigned int *)(v3 + 12);
    v5 = (_QWORD *)(*(_QWORD *)v3 + 8 * v4);
    goto LABEL_3;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    goto LABEL_13;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::CustomElementRegistry::visitJSCustomElementInterfaces<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 97);
  if (__ldaxr((unsigned __int8 *)(result + 97)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 97);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 40);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 16 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = v6;
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = v6;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 16;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v9 = v6 + 16 * v7;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = v6 + 16 * v7;
  if (v6)
  {
LABEL_12:
    v11 = v6 + 16 * *(unsigned int *)(v6 - 4);
    goto LABEL_13;
  }
  v11 = 0;
LABEL_13:
  while (v9 != v11)
  {
    result = WebCore::JSCustomElementInterface::visitJSFunctions<JSC::AbstractSlotVisitor>(*(_QWORD **)(v9 + 8), a2);
    v12 = v9 + 16;
    v9 = v8;
    if (v12 != v8)
    {
      v9 = v12;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 16;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::CustomElementRegistry::visitJSCustomElementInterfaces<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 97);
  if (__ldaxr((unsigned __int8 *)(result + 97)))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEA534C](result + 97);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = *(_QWORD **)(v3 + 40);
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
LABEL_29:
    v8 = &v6[2 * v7];
    goto LABEL_11;
  }
  v7 = *((unsigned int *)v6 - 1);
  v8 = &v6[2 * v7];
  if (!*((_DWORD *)v6 - 3))
  {
    v9 = &v6[2 * v7];
    goto LABEL_29;
  }
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = v6;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_11:
  if (v6)
    v11 = &v6[2 * *((unsigned int *)v6 - 1)];
  else
    v11 = 0;
  while (v9 != v11)
  {
    result = WebCore::JSCustomElementInterface::visitJSFunctions<JSC::SlotVisitor>(v9[1], a2);
    v12 = v9 + 2;
    v9 = v8;
    if (v12 != v8)
    {
      v9 = v12;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  v13 = __ldxr(v4);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void WebCore::CustomElementRegistry::~CustomElementRegistry(WebCore::CustomElementRegistry *this, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;

  *(_QWORD *)this = &off_1E33A18E8;
  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    v10 = *((unsigned int *)this + 20);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)*((_QWORD *)this + 9);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        ++v11;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 6);
  if (v4)
  {
    v13 = *((unsigned int *)this + 14);
    if ((_DWORD)v13)
    {
      v14 = (_DWORD **)((char *)v4 + 8);
      do
      {
        v15 = *v14;
        *v14 = 0;
        if (v15)
        {
          if (v15[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[4];
        }
        v16 = (WTF::StringImpl *)*(v14 - 1);
        *(v14 - 1) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 5);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *((_QWORD *)this + 4);
  if (v6)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v17 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v17)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v17));
      v18 = *(WTF **)(v7 + 16);
      if (v18)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        WTF::fastFree(v18, a2);
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CustomElementRegistry::~CustomElementRegistry(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::CustomElementRegistry::addElementDefinition@<X0>(uint64_t a1@<X0>, WebCore::ContainerNode **a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::ContainerNode *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  WTF::StringImpl **v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t *v26;
  WebCore::ContainerNode *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *result;
  _QWORD *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  WTF::StringImpl *v63;

  if ((_MergedGlobals_169 & 1) == 0)
  {
    v62[0] = "extends-li";
    v62[1] = 11;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE83188, (uint64_t)v62);
    _MergedGlobals_169 = 1;
  }
  v6 = *a2;
  v7 = *(WTF::StringImpl **)(*((_QWORD *)*a2 + 3) + 24);
  if (v7)
    *(_DWORD *)v7 += 2;
  v63 = v7;
  ++*((_DWORD *)v6 + 4);
  v9 = (uint64_t *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 32), 8u), (v8 = *v9) != 0))
  {
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
  v12 = *((_DWORD *)v7 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v10;
    v15 = (WTF::StringImpl **)(v8 + 16 * v14);
    v16 = *v15;
    if (!*v15)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*v9 - 16);
        v15 = v11;
      }
      if (v7)
        *(_DWORD *)v7 += 2;
      *v15 = v7;
      v17 = v15[1];
      v15[1] = v6;
      if (v17)
      {
        if (*((_DWORD *)v17 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 16))(v17);
        else
          --*((_DWORD *)v17 + 4);
      }
      v18 = *v9;
      if (*v9)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v9;
      if (*v9)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_25;
      }
      else
      {
        if (3 * v23 > 4 * v22)
          goto LABEL_25;
        if (!(_DWORD)v23)
        {
          v57 = 8;
          goto LABEL_84;
        }
      }
      v57 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_84:
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 32), v57);
      goto LABEL_25;
    }
    if (v16 != (WTF::StringImpl *)-1)
    {
      v15 = v11;
      if (v16 == v7)
        break;
    }
    v12 = i + v14;
    v11 = v15;
  }
  if (v6)
  {
    if (*((_DWORD *)v6 + 4) == 1)
      (*(void (**)(WebCore::ContainerNode *))(*(_QWORD *)v6 + 16))(v6);
    else
      --*((_DWORD *)v6 + 4);
  }
LABEL_25:
  v24 = (unsigned __int8 *)(a1 + 97);
  if (__ldaxr((unsigned __int8 *)(a1 + 97)))
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stxr(1u, v24))
LABEL_27:
    MEMORY[0x19AEA534C](a1 + 97);
  v26 = (uint64_t *)(a1 + 40);
  v27 = *a2;
  v28 = (uint64_t *)*((_QWORD *)*a2 + 4);
  if (!v28 || (v28[1] & 3) != 0)
    v29 = 0;
  else
    v29 = *v28;
  v30 = *v26;
  if (*v26
    || (WTF::HashTable<JSC::JSObject const*,WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>>,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashMap<JSC::JSObject const*,WebCore::JSCustomElementInterface *,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashTraits<JSC::JSObject const*>,WTF::HashTraits<WebCore::JSCustomElementInterface *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject const*>>::rehash((uint64_t *)(a1 + 40), 8u), (v30 = *v26) != 0))
  {
    v31 = *(_DWORD *)(v30 - 8);
  }
  else
  {
    v31 = 0;
  }
  v32 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
  v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
  v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
  v35 = v31 & ((v34 >> 31) ^ v34);
  v36 = (_QWORD *)(v30 + 16 * v35);
  v37 = *v36;
  if (*v36)
  {
    v55 = 0;
    v56 = 1;
    while (v37 != v29)
    {
      if (v37 == -1)
        v55 = v36;
      v35 = (v35 + v56) & v31;
      v36 = (_QWORD *)(v30 + 16 * v35);
      v37 = *v36;
      ++v56;
      if (!*v36)
      {
        if (v55)
        {
          *v55 = 0;
          v55[1] = 0;
          --*(_DWORD *)(*v26 - 16);
          v36 = v55;
        }
        goto LABEL_34;
      }
    }
    goto LABEL_40;
  }
LABEL_34:
  *v36 = v29;
  v36[1] = v27;
  v38 = *v26;
  if (*v26)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *v26;
  if (*v26)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 > 2 * v42)
      goto LABEL_40;
LABEL_75:
    v58 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
    goto LABEL_87;
  }
  if (3 * v43 > 4 * v42)
    goto LABEL_40;
  if ((_DWORD)v43)
    goto LABEL_75;
  v58 = 8;
LABEL_87:
  WTF::HashTable<JSC::JSObject const*,WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>>,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashMap<JSC::JSObject const*,WebCore::JSCustomElementInterface *,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashTraits<JSC::JSObject const*>,WTF::HashTraits<WebCore::JSCustomElementInterface *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject const*>>::rehash((uint64_t *)(a1 + 40), v58);
LABEL_40:
  v44 = __ldxr(v24);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, v24))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 97));
  if ((*((_BYTE *)*a2 + 160) & 2) != 0)
    WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)v62, a1 + 72, (uint64_t)&v63);
  v45 = *(_QWORD *)(a1 + 24);
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 72);
      if (v47)
      {
        v48 = *(_QWORD *)(v47 + 8);
        if (v48)
        {
          if (*(_BYTE *)(v48 + 178))
          {
            __break(0xC471u);
            JUMPOUT(0x195964F7CLL);
          }
          v49 = (_DWORD *)(v48 - 264);
          *(_DWORD *)(v48 - 264) += 2;
          if (v63 == (WTF::StringImpl *)qword_1ECE83188)
          {
            v61 = *(_QWORD *)(v48 + 400);
            if (!v61)
              v61 = WebCore::Document::ensureQuirks((WebCore::Document *)(v48 - 288));
            *(_BYTE *)(v61 + 65) = 1;
          }
          WebCore::enqueueUpgradeInShadowIncludingTreeOrder((_QWORD *)(v48 - 288), *a2, (WebCore::JSCustomElementInterface *)v36);
          if (*v49 == 2)
          {
            if ((*(_WORD *)(v48 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v48 - 288), v50);
          }
          else
          {
            *v49 -= 2;
          }
        }
      }
    }
  }
  v51 = *(_QWORD *)(a1 + 48);
  if (v51)
  {
    v59 = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>((uint64_t *)(a1 + 48), (uint64_t)v63);
    v52 = *(unsigned int *)(a1 + 56);
    if (v59)
      v53 = v59;
    else
      v53 = v51 + 16 * v52;
  }
  else
  {
    v52 = *(unsigned int *)(a1 + 56);
    v53 = 16 * v52;
  }
  if (v51 + 16 * v52 == v53)
  {
    *a3 = 0;
  }
  else
  {
    v60 = *(_QWORD *)(v53 + 8);
    if (v60)
    {
      *(_QWORD *)(v53 + 8) = 0;
      v51 = *(_QWORD *)(a1 + 48);
    }
    *a3 = v60;
    if (v51 + 16 * v52 != v53)
      WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(a1 + 48, (WTF::StringImpl **)v53);
  }
  result = v63;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v53);
    else
      *(_DWORD *)v63 -= 2;
  }
  return result;
}

_QWORD *WebCore::enqueueUpgradeInShadowIncludingTreeOrder(_QWORD *this, WebCore::ContainerNode *a2, WebCore::JSCustomElementInterface *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = this[10];
  if (v3)
  {
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        return this;
    }
    *(_DWORD *)(v3 + 24) += 2;
    do
    {
      v5 = v3;
      v6 = *(_QWORD *)(v3 + 72);
      if ((v6 & 0x3000000000000000) == 0x1000000000000000)
      {
        v13 = *(_QWORD *)(v3 + 96);
        v14 = *((_QWORD *)a2 + 3);
        if (v13 == v14
          || *(_QWORD *)(v13 + 24) == *(_QWORD *)(v14 + 24) && *(_QWORD *)(v13 + 32) == *(_QWORD *)(v14 + 32))
        {
          this = WebCore::Element::enqueueToUpgrade((WebCore::Element *)v3, a2);
          v6 = *(_QWORD *)(v3 + 72);
        }
      }
      v7 = v6 & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        v10 = *(_QWORD *)(v7 + 88);
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 24) + 2;
          *(_DWORD *)(v10 + 24) = v11;
          if (*(_BYTE *)(v10 + 193))
          {
            this = (_QWORD *)WebCore::enqueueUpgradeInShadowIncludingTreeOrder((WebCore *)v10, a2, a3);
            v11 = *(_DWORD *)(v10 + 24);
          }
          v12 = v11 - 2;
          if (v12)
          {
            *(_DWORD *)(v10 + 24) = v12;
          }
          else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          {
            this = WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
          }
        }
      }
      v8 = *(_QWORD *)(v5 + 80);
      if (v8 || (v8 = *(_QWORD *)(v5 + 56)) != 0)
      {
LABEL_10:
        if ((*(_WORD *)(v8 + 28) & 8) != 0)
        {
          v3 = v8;
        }
        else
        {
          do
          {
            while (1)
            {
              v3 = *(_QWORD *)(v8 + 56);
              if (v3)
                break;
              v8 = *(_QWORD *)(v8 + 32);
              if (!v8)
                goto LABEL_27;
            }
            v8 = *(_QWORD *)(v8 + 56);
          }
          while ((*(_WORD *)(v3 + 28) & 8) == 0);
        }
        *(_DWORD *)(v3 + 24) += 2;
      }
      else
      {
        v9 = v5;
        while (1)
        {
          v9 = *(_QWORD *)(v9 + 32);
          if (!v9)
            break;
          v8 = *(_QWORD *)(v9 + 56);
          if (v8)
            goto LABEL_10;
        }
LABEL_27:
        v3 = 0;
      }
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    while (v3);
  }
  return this;
}

uint64_t WebCore::CustomElementRegistry::findInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(*(_QWORD *)a2 + 32) == WebCore::HTMLNames::xhtmlNamespaceURI)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = 0;
      v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      for (i = *(_DWORD *)(v4 + 16) >> 8; ; i = v3 + v6)
      {
        v6 = i & *(_DWORD *)(v2 - 8);
        v7 = *(_QWORD *)(v2 + 16 * v6);
        if (!v7)
          break;
        if (v7 != -1 && v7 == v4)
          return *(_QWORD *)(v2 + 16 * v6 + 8);
        ++v3;
      }
    }
  }
  return 0;
}

{
  uint64_t v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v3 + v5)
    {
      v5 = i & *(_DWORD *)(v2 - 8);
      v6 = *(_QWORD *)(v2 + 16 * v5);
      if (!v6)
        break;
      if (v6 != -1 && v6 == *(_QWORD *)a2)
        return *(_QWORD *)(v2 + 16 * v5 + 8);
      ++v3;
    }
  }
  return 0;
}

uint64_t WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::HashTableTraits>::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v3 + v5)
    {
      v5 = i & *(_DWORD *)(v2 - 8);
      v6 = *(_QWORD *)(v2 + 16 * v5);
      if (!v6)
        break;
      if (v6 != -1 && v6 == *(_QWORD *)a2)
        return *(_QWORD *)(v2 + 16 * v5 + 8);
      ++v3;
    }
  }
  return 0;
}

uint64_t WebCore::CustomElementRegistry::findInterface@<X0>(uint64_t this@<X0>, const JSC::JSObject *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const JSC::JSObject *v14;
  int v15;
  int v16;

  v4 = this;
  v6 = (unsigned __int8 *)(this + 97);
  if (__ldaxr((unsigned __int8 *)(this + 97)))
  {
    __clrex();
LABEL_3:
    this = MEMORY[0x19AEA534C](this + 97);
    goto LABEL_4;
  }
  if (__stxr(1u, v6))
    goto LABEL_3;
LABEL_4:
  v8 = *(_QWORD *)(v4 + 40);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(const JSC::JSObject **)(v8 + 16 * v13);
    if (v14 == a2)
    {
LABEL_6:
      v8 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v8)
        ++*(_DWORD *)(v8 + 16);
    }
    else
    {
      v16 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v16) & v9;
        v14 = *(const JSC::JSObject **)(v8 + 16 * v13);
        ++v16;
        if (v14 == a2)
          goto LABEL_6;
      }
      v8 = 0;
    }
  }
  *a3 = v8;
  v15 = __ldxr(v6);
  if (v15 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return this;
}

_QWORD *WebCore::upgradeElementsInShadowIncludingDescendants(_QWORD *this, WebCore::ContainerNode *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;

  v2 = (_QWORD *)this[10];
  if (v2)
  {
    v3 = this;
    while ((*((_WORD *)v2 + 14) & 8) == 0)
    {
      v2 = (_QWORD *)v2[7];
      if (!v2)
        return this;
    }
    do
    {
LABEL_6:
      *((_DWORD *)v2 + 6) += 2;
      v4 = v2[9];
      if ((v4 & 0x3000000000000000) == 0x1000000000000000)
      {
        this = WebCore::CustomElementReactionQueue::tryToUpgradeElement((WebCore::Element *)v2, a2);
        v4 = v2[9];
      }
      v5 = v4 & 0xFFFFFFFFFFFFLL;
      if (v5)
      {
        v9 = *(_QWORD *)(v5 + 88);
        if (v9)
        {
          *(_DWORD *)(v9 + 24) += 2;
          this = (_QWORD *)WebCore::upgradeElementsInShadowIncludingDescendants((WebCore *)v9, a2);
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
      }
      if (*((_DWORD *)v2 + 6) == 2)
      {
        if ((*((_WORD *)v2 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
      }
      else
      {
        *((_DWORD *)v2 + 6) -= 2;
      }
      v6 = (_QWORD *)v2[10];
      if (!v6)
      {
        if (v2 == v3)
          return this;
        while (1)
        {
          v6 = (_QWORD *)v2[7];
          if (v6)
            break;
          v2 = (_QWORD *)v2[4];
          if (v2)
            v8 = v2 == v3;
          else
            v8 = 1;
          if (v8)
            return this;
        }
      }
      v2 = v6;
    }
    while ((*((_WORD *)v6 + 14) & 8) != 0);
    while (v6 != v3)
    {
      while (1)
      {
        v2 = (_QWORD *)v6[7];
        if (v2)
          break;
        v6 = (_QWORD *)v6[4];
        if (v6)
          v7 = v6 == v3;
        else
          v7 = 1;
        if (v7)
          return this;
      }
      v6 = (_QWORD *)v6[7];
      if ((*((_WORD *)v2 + 14) & 8) != 0)
        goto LABEL_6;
    }
  }
  return this;
}

void WebCore::CustomEvent::~CustomEvent(WebCore::Event *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 3;
    *((_QWORD *)this + 12) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 10) = 0;
  }
  WebCore::Event::~Event(this, a2);
}

_QWORD *WebCore::CustomEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v8 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  *(_QWORD *)(v8 + 8) = 0;
  if (a3)
    v14 = 1901056;
  else
    v14 = 1900544;
  v15 = v14 | (2 * v11) | (4 * v12) | (8 * v13) | (*a1 != 0) | *(_DWORD *)(v8 + 20) & 0xFFC00000;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v15;
  v16 = (_DWORD *)*a1;
  if (*a1)
  {
    *v16 += 2;
    v15 = *(_DWORD *)(v8 + 20);
  }
  *(_QWORD *)(v8 + 24) = v16;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 20) = v15 | 0x4000;
  *(_QWORD *)v8 = off_1E33A1910;
  v17 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  if ((v17 & 0xFFFE000000000002) != 0)
  {
    *(_QWORD *)(v8 + 72) = v17;
  }
  else
  {
    if (v17)
    {
      if ((v17 & 8) != 0)
        v20 = (v17 - 112) | 1;
      else
        v20 = v17 & 0xFFFFFFFFFFFFC000;
      if ((v20 & 1) != 0)
        v21 = v20 + 47;
      else
        v21 = *(_QWORD *)v20 + 32;
      result = *(_QWORD **)(v21 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v21 + 16) = *result;
      *result = v17;
      result[1] = 0;
      result[2] = 0;
    }
    else
    {
      result = 0;
    }
    __dmb(0xAu);
    v18 = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(v8 + 80) = result;
    if (v18)
      *(_QWORD *)(v18 + 8) = 3;
  }
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  __dmb(0xAu);
  v19 = *(_QWORD *)(v8 + 96);
  *(_QWORD *)(v8 + 96) = 0;
  if (v19)
    *(_QWORD *)(v19 + 8) = 3;
  *a4 = v8;
  return result;
}

uint64_t WebCore::CustomEvent::initCustomEvent(uint64_t result, const WTF::AtomString *a2, int a3, int a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(result + 21) & 0x30) == 0)
  {
    v6 = (_QWORD *)result;
    result = WebCore::Event::initEvent(result, a2, a3, a4);
    if ((a5 & 0xFFFE000000000002) != 0)
    {
      v6[9] = a5;
      v9 = v6[10];
      if (v9)
      {
        *(_QWORD *)(v9 + 8) = 3;
        v6[10] = 0;
      }
    }
    else
    {
      result = 0;
      v6[9] = 0;
      if (a5)
      {
        if ((a5 & 8) != 0)
          v10 = (a5 - 112) | 1;
        else
          v10 = a5 & 0xFFFFFFFFFFFFC000;
        if ((v10 & 1) != 0)
          v11 = v10 + 47;
        else
          v11 = *(_QWORD *)v10 + 32;
        result = *(_QWORD *)(v11 + 16);
        if (!result)
          result = JSC::WeakSet::findAllocator();
        *(_QWORD *)(v11 + 16) = *(_QWORD *)result;
        *(_QWORD *)result = a5;
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = 0;
      }
      __dmb(0xAu);
      v7 = v6[10];
      v6[10] = result;
      if (v7)
        *(_QWORD *)(v7 + 8) = 3;
    }
    v6[11] = 0;
    v8 = v6[12];
    if (v8)
    {
      *(_QWORD *)(v8 + 8) = 3;
      v6[12] = 0;
    }
  }
  return result;
}

BOOL WebCore::CustomStateSet::addToSetLike(WebCore::CustomStateSet *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  _DWORD v13[4];
  unsigned __int8 v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char v19;

  v15[0] = 0;
  v19 = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      LOBYTE(v12) = 72;
      v13[0] = 0;
      std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::AnyValueTag,void>((uint64_t)v15, v5, (unsigned __int8 *)&v12);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v12 = v7;
  WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add((uint64_t *)this + 2, (uint64_t *)&v12, (uint64_t)v13);
  v9 = v14;
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v19)
  {
    if (v15[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v16, &v18);
    if (v18)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v18, v8);
    if (v17)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v17, v8);
  }
  return v9 != 0;
}

uint64_t std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::AnyValueTag,void>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  char v19;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)a1)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 24));
    v6 = *(_QWORD *)(a1 + 24);
    if (v6)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v6, (void *)a2);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v7, (void *)a2);
    *(_BYTE *)(a1 + 32) = 0;
  }
  if ((*(_BYTE *)(a2 + 22) & 8) == 0)
    goto LABEL_28;
  v8 = *(uint64_t **)(a2 + 40);
  v9 = v8[1];
  if (!*(_QWORD *)(v9 + 1944) || *(_BYTE *)(v9 + 3405))
    goto LABEL_28;
  v10 = (WTF::StringImpl *)*a3;
  if ((*(_BYTE *)(a2 + 70) & 4) != 0)
  {
    v14 = *v8;
    v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0 || v14 == 0;
    v16 = v14 + 216;
    if (v15)
      v16 = v9 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v16 + 236))
      goto LABEL_28;
  }
  v11 = *(_QWORD *)(v9 + 1272);
  if (v11 && (*(_BYTE *)(v11 + 70) & 4) != 0)
  {
LABEL_28:
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    if (*(_BYTE *)(v9 + 3362)
      || (v12 = *(unsigned __int8 *)(v9 + 3390), !*(_BYTE *)(v9 + 3390))
      && (*(_BYTE *)(v9 + 70) & 8) == 0
      && !*(_QWORD *)(v9 + 1560)
      && (v13 = *(_QWORD *)(v9 + 1328), !*(_BYTE *)(v13 + 233))
      && !*(_BYTE *)(v13 + 234))
    {
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = a2;
LABEL_36:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)a1, v10, 2, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*(_QWORD *)(a1 + 8), (unsigned __int8 **)(a1 + 16));
      goto LABEL_37;
    }
    v17 = *(unsigned __int8 *)(v9 + 3391);
    if (v12)
      v18 = v17 == 0;
    else
      v18 = 0;
    v19 = !v18;
    *(_BYTE *)a1 = v19;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = a2;
    if (!v18)
      goto LABEL_36;
  }
LABEL_37:
  *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

uint64_t *WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t **v23;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ListHashSetNode<WTF::AtomString> *,WTF::ListHashSetNode<WTF::AtomString> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::AtomString>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *(_DWORD *)(*a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v11 = v9 & v7;
    v12 = (uint64_t *)(v6 + 8 * (v9 & v7));
    v13 = (_QWORD *)*v12;
    if (*v12 == -1)
    {
      v8 = (uint64_t *)(v6 + 8 * v11);
      goto LABEL_10;
    }
    if (!v13)
      break;
    if (*v13 == *a2)
    {
      v17 = 0;
      goto LABEL_26;
    }
LABEL_10:
    v9 = i + v11;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*v4 - 16);
    v12 = v8;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v14 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v14;
  *v12 = (uint64_t)result;
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 <= 2 * v20)
    {
LABEL_21:
      v12 = WTF::HashTable<WTF::ListHashSetNode<WTF::AtomString> *,WTF::ListHashSetNode<WTF::AtomString> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::AtomString>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>>::expand(v4, v12);
      result = (uint64_t *)*v12;
    }
  }
  else if (3 * v21 <= 4 * v20)
  {
    goto LABEL_21;
  }
  v22 = v4[2];
  result[1] = v22;
  result[2] = 0;
  if (v22)
    v23 = (uint64_t **)(v22 + 16);
  else
    v23 = (uint64_t **)(v4 + 1);
  *v23 = result;
  v4[2] = (uint64_t)result;
  v13 = (_QWORD *)*v12;
  v17 = 1;
LABEL_26:
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

uint64_t WebCore::CustomStateSet::removeFromSetLike(WebCore::CustomStateSet *this, const WTF::AtomString *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int i;
  unsigned int v12;
  WTF::StringImpl **v13;
  int v14;
  uint64_t v15;
  int j;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  unsigned __int8 v39;
  char v40[8];
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char v44;

  v40[0] = 0;
  v44 = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      *(_DWORD *)(v5 + 24) += 2;
      v39 = 72;
      std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::AnyValueTag,void>((uint64_t)v40, v5, &v39);
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
  }
  v6 = *(WTF::StringImpl **)a2;
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = *((_QWORD *)this + 2);
  if (!v7)
    goto LABEL_14;
  v8 = 0;
  v9 = *(_DWORD *)(v7 - 8);
  v10 = *((_DWORD *)v6 + 4) >> 8;
  for (i = v10; ; i = ++v8 + v12)
  {
    v12 = i & v9;
    v13 = *(WTF::StringImpl ***)(v7 + 8 * v12);
    if (v13 != (WTF::StringImpl **)-1)
    {
      if (!v13)
        goto LABEL_14;
      if (*v13 == v6)
        break;
    }
  }
  v14 = *(_DWORD *)(v7 - 4);
  if (v12 == v14)
  {
LABEL_14:
    v15 = 0;
    if (!v6)
      goto LABEL_17;
    goto LABEL_15;
  }
  for (j = 0; ; v10 = j + v18)
  {
    v18 = v10 & v9;
    v19 = *(WTF::StringImpl ***)(v7 + 8 * v18);
    if (v19 != (WTF::StringImpl **)-1)
    {
      if (!v19)
        goto LABEL_53;
      if (*v19 == v6)
        break;
    }
    ++j;
  }
  if (v14 != (_DWORD)v18)
  {
    *(_QWORD *)(v7 + 8 * v18) = -1;
    ++*(_DWORD *)(*((_QWORD *)this + 2) - 16);
    v20 = *((_QWORD *)this + 2);
    v21 = v20 ? *(_DWORD *)(v20 - 12) - 1 : -1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *((_QWORD *)this + 2);
    if (v22)
    {
      v23 = *(_DWORD *)(v22 - 12);
      v24 = *(unsigned int *)(v22 - 4);
      if (6 * v23 < v24 && v24 >= 9)
      {
        v26 = WTF::fastZeroedMalloc((WTF *)(8 * (v24 >> 1) + 16));
        v28 = 0;
        *((_QWORD *)this + 2) = v26 + 16;
        *(_DWORD *)(v26 + 12) = v24 >> 1;
        *(_DWORD *)(*((_QWORD *)this + 2) - 8) = (v24 >> 1) - 1;
        *(_DWORD *)(*((_QWORD *)this + 2) - 16) = 0;
        *(_DWORD *)(*((_QWORD *)this + 2) - 12) = v23;
        do
        {
          v29 = *(_QWORD *)(v22 + 8 * v28);
          if ((unint64_t)(v29 + 1) >= 2)
          {
            v30 = *((_QWORD *)this + 2);
            if (v30)
              v31 = *(_DWORD *)(v30 - 8);
            else
              v31 = 0;
            v32 = 0;
            v33 = *(_DWORD *)(*(_QWORD *)v29 + 16) >> 8;
            do
            {
              v34 = v33 & v31;
              v33 = ++v32 + v34;
            }
            while (*(_QWORD *)(v30 + 8 * v34));
            *(_QWORD *)(v30 + 8 * v34) = v29;
          }
          ++v28;
        }
        while (v28 != v24);
        WTF::fastFree((WTF *)(v22 - 16), v27);
      }
    }
  }
LABEL_53:
  v35 = v13[1];
  v36 = v13[2];
  if (v35)
  {
    *((_QWORD *)v35 + 2) = v36;
    v36 = v13[2];
  }
  else
  {
    *((_QWORD *)this + 3) = v36;
  }
  if (v36)
    v37 = (WTF::StringImpl **)((char *)v36 + 8);
  else
    v37 = (WTF::StringImpl **)((char *)this + 32);
  *v37 = v35;
  v38 = *v13;
  *v13 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, a2);
    else
      *(_DWORD *)v38 -= 2;
  }
  WTF::fastFree((WTF *)v13, a2);
  v15 = 1;
  if (v6)
  {
LABEL_15:
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
LABEL_17:
  if (v44)
  {
    if (v40[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v41, &v43);
    if (v43)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v43, a2);
    if (v42)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(v42, a2);
  }
  return v15;
}

_QWORD *WebCore::CustomStateSet::clearFromSetLike(_QWORD *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *i;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  unsigned __int8 v9;
  char v10[8];
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  char v14;

  v2 = this;
  v10[0] = 0;
  v14 = 0;
  v3 = this[5];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      v9 = 72;
      this = (_QWORD *)std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::AnyValueTag,void>((uint64_t)v10, v4, &v9);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  for (i = (WTF *)v2[3]; i; this = (_QWORD *)WTF::fastFree(v7, a2))
  {
    v7 = i;
    i = (WTF *)*((_QWORD *)i + 2);
    v8 = *(WTF::StringImpl **)v7;
    *(_QWORD *)v7 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v6 = v2[2];
  if (v6)
  {
    v2[2] = 0;
    this = (_QWORD *)WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v2[3] = 0;
  v2[4] = 0;
  if (v14)
  {
    if (v10[0])
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v11, &v13);
    if (v13)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v13, a2);
    this = v12;
    if (v12)
      return (_QWORD *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v12, a2);
  }
  return this;
}

void WebCore::ContentVisibilityIntersectionObserverCallback::~ContentVisibilityIntersectionObserverCallback(WebCore::ContentVisibilityIntersectionObserverCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::ContentVisibilityIntersectionObserverCallback::hasCallback(WebCore::ContentVisibilityIntersectionObserverCallback *this)
{
  return 1;
}

uint64_t WebCore::ContentVisibilityIntersectionObserverCallback::handleEvent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  WebCore::IntersectionObserver *v12;
  void *v13;
  bmalloc::api *v14;
  void *v15;

  v3 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a3;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 48);
      if (v6)
      {
        *(_DWORD *)(v6 + 24) += 2;
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
        v8 = *(_QWORD **)(v7 + 1584);
        if (!v8)
        {
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          v10 = *(uint64_t **)(v7 + 1584);
          *(_QWORD *)(v7 + 1584) = v8;
          if (v10)
          {
            WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v10 + 1, v9);
            v12 = (WebCore::IntersectionObserver *)*v10;
            *v10 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 1)
              {
                WebCore::IntersectionObserver::~IntersectionObserver(v12);
                bmalloc::api::isoDeallocate(v14, v15);
              }
              else
              {
                --*(_DWORD *)v12;
              }
            }
            WTF::fastFree((WTF *)v10, v11);
            v8 = *(_QWORD **)(v7 + 1584);
          }
        }
        WebCore::ContentVisibilityDocumentState::updateViewportProximity((uint64_t)v8, (_QWORD *)v6, *(_BYTE *)(*(_QWORD *)v4 + 56));
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6, v13);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS8_7WeakPtrIN7WebCore7ElementENSB_30WeakPtrImplWithEventTargetDataENS8_12RawPtrTraitsISD_EEEENS8_6VectorISG_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS9_SG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS8_7WeakPtrIN7WebCore7ElementENSB_30WeakPtrImplWithEventTargetDataENS8_12RawPtrTraitsISD_EEEENS8_6VectorISG_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS9_SG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)result));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)result);
      v5 = *(unsigned int *)(result + 28);
      if ((_DWORD)v5)
      {
        v8 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v5));
        result = v8;
      }
      v6 = *(WTF **)(result + 16);
      if (v6)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v7 = result;
        WTF::fastFree(v6, a2);
        result = v7;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS8_7WeakPtrIN7WebCore7ElementENSB_30WeakPtrImplWithEventTargetDataENS8_12RawPtrTraitsISD_EEEENS8_6VectorISG_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS9_SG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(const WebCore::Node *****a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  const WebCore::Node ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isDescendantOrShadowDescendantOf;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)a2)
    return MEMORY[0x1E0CBF2F8];
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (!v3)
    return MEMORY[0x1E0CBF2F8];
  v4 = **a1;
  *(_DWORD *)(v3 + 24) += 2;
  v5 = *(_QWORD *)(v3 + 16);
  if ((v5 & 0x8000000000000) != 0)
  {
    v6 = v5 & 0x18000000000000;
    if (v6 != 0x8000000000000)
    {
      if (v6)
      {
        v8 = **(_QWORD **)(v3 + 40);
      }
      else
      {
        v7 = v3;
        do
        {
          v8 = v7;
          v7 = *(_QWORD *)(v7 + 32);
        }
        while (v7);
      }
      *(_DWORD *)(v8 + 24) += 2;
      isDescendantOrShadowDescendantOf = WebCore::Node::isDescendantOrShadowDescendantOf(v4, (const WebCore::Node *)v8);
      v10 = isDescendantOrShadowDescendantOf;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) != 0)
        {
          if (!isDescendantOrShadowDescendantOf)
            goto LABEL_25;
        }
        else
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
          if (!v10)
            goto LABEL_25;
        }
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
        if (!isDescendantOrShadowDescendantOf)
          goto LABEL_25;
      }
    }
  }
  v11 = *(_QWORD *)(v3 + 104);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 4);
    if ((v12 & 1) == 0)
    {
      v13 = v11 + 32;
      LODWORD(v14) = v12 >> 5;
      if (!(_DWORD)v14)
        goto LABEL_25;
LABEL_16:
      v14 = v14;
      v2 = v13 + 8;
      while (1)
      {
        v15 = *(_QWORD *)(v2 - 8);
        if (v15 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          goto LABEL_26;
        }
        v2 += 16;
        if (!--v14)
        {
          v2 = MEMORY[0x1E0CBF2F8];
          goto LABEL_26;
        }
      }
    }
    v13 = *(_QWORD *)(v11 + 40);
    LODWORD(v14) = *(_DWORD *)(v11 + 52);
    if ((_DWORD)v14)
      goto LABEL_16;
  }
LABEL_25:
  v2 = MEMORY[0x1E0CBF2F8];
LABEL_26:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return v2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::valueForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::Node ***v12;
  _BOOL4 isDescendantOrShadowDescendantOf;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t result;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  char v31;
  char v32;

  v2 = *a1;
  v3 = *(_QWORD *)a2;
  v4 = a2[3];
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    v6 = v3 + 8 * v4;
    while (1)
    {
      if (*(_QWORD *)v3)
      {
        v7 = *(_QWORD *)(*(_QWORD *)v3 + 8);
        if (v7)
          break;
      }
LABEL_35:
      v3 += 8;
      if (v3 == v6)
      {
        v25 = v29;
        v29 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v28;
        v28 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v26 -= 2;
        }
        return MEMORY[0x1E0CBF2F8];
      }
    }
    *(_DWORD *)(v7 + 24) += 2;
    v8 = *(_QWORD *)(v7 + 16);
    if ((v8 & 0x8000000000000) != 0)
    {
      v9 = v8 & 0x18000000000000;
      if ((v8 & 0x18000000000000) != 0x8000000000000)
      {
        v10 = v7;
        if (v9)
        {
          v11 = **(_QWORD **)(v7 + 40);
        }
        else
        {
          do
          {
            v11 = v10;
            v10 = *(_QWORD *)(v10 + 32);
          }
          while (v10);
        }
        v12 = *(const WebCore::Node ****)(v2 + 8);
        *(_DWORD *)(v11 + 24) += 2;
        isDescendantOrShadowDescendantOf = WebCore::Node::isDescendantOrShadowDescendantOf(v12, (const WebCore::Node *)v11);
        v14 = isDescendantOrShadowDescendantOf;
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) != 0)
          {
            if (isDescendantOrShadowDescendantOf)
              goto LABEL_11;
          }
          else
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
            if (v14)
              goto LABEL_11;
          }
LABEL_33:
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
          goto LABEL_35;
        }
        *(_DWORD *)(v11 + 24) -= 2;
        if (!isDescendantOrShadowDescendantOf)
          goto LABEL_33;
      }
    }
LABEL_11:
    v15 = v30;
    if ((v30 & 0x80000000) != 0)
    {
      result = 268;
      __break(0xC471u);
      return result;
    }
    if (v30)
    {
      v32 = 32;
      if (v29 && (v30 < *((_DWORD *)v29 + 1) ? (v16 = v28 == 0) : (v16 = 0), v16))
      {
        v23 = *((_DWORD *)v29 + 4);
        v24 = *((_QWORD *)v29 + 1);
        ++v30;
        if ((v23 & 4) != 0)
          *(_BYTE *)(v24 + v15) = 32;
        else
          *(_WORD *)(v24 + 2 * v15) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
    }
    v17 = *(_QWORD *)(v7 + 104);
    if (!v17)
      goto LABEL_31;
    v18 = *(unsigned int *)(v17 + 4);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v17 + 40);
      v20 = *(unsigned int *)(v17 + 52);
      if (!v20)
      {
LABEL_31:
        v21 = v5;
LABEL_32:
        WTF::StringBuilder::append(&v28, v21);
        goto LABEL_33;
      }
    }
    else
    {
      v19 = v17 + 32;
      v20 = v18 >> 5;
      if (!(v18 >> 5))
        goto LABEL_31;
    }
    v21 = (WTF::StringImpl **)(v19 + 8);
    while (1)
    {
      v22 = (uint64_t)*(v21 - 1);
      if (v22 == WebCore::HTMLNames::idAttr
        || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
        && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
      {
        goto LABEL_32;
      }
      v21 += 2;
      if (!--v20)
        goto LABEL_31;
    }
  }
  return MEMORY[0x1E0CBF2F8];
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(unsigned int *result, const WTF::AtomString *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  const WebCore::TreeScope *v5;
  unsigned int *v6;
  unsigned int **v7;
  uint64_t v8;

  v2 = *(uint64_t **)result;
  v3 = **(_QWORD **)result;
  if ((*(_BYTE *)(v3 + 22) & 0x18) != 0)
  {
    if (*(_QWORD *)a2
      && *(_DWORD *)(*(_QWORD *)a2 + 4)
      && (v5 = *(const WebCore::TreeScope **)(v3 + 40), (v6 = (unsigned int *)*((_QWORD *)v5 + 3)) != 0))
    {
      WebCore::TreeScopeOrderedMap::getElementById(v6, a2, v5, &v8);
      v4 = v8;
    }
    else
    {
      v4 = 0;
    }
    v7 = (unsigned int **)v2[1];
    result = *v7;
    *v7 = (unsigned int *)v4;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WebCore::Node ***v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int **v10;

  if (!*(_QWORD *)a2)
    return result;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)result;
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(_QWORD *)(v2 + 16);
  if ((v4 & 0x8000000000000) == 0)
    goto LABEL_10;
  v5 = v4 & 0x18000000000000;
  if (v5 == 0x8000000000000)
    goto LABEL_10;
  v6 = *(const WebCore::Node ****)(v3 + 16);
  if (v5)
  {
    v8 = **(_QWORD **)(v2 + 40);
  }
  else
  {
    v7 = v2;
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 32);
    }
    while (v7);
  }
  *(_DWORD *)(v8 + 24) += 2;
  result = (unsigned int *)WebCore::Node::isDescendantOrShadowDescendantOf(v6, (const WebCore::Node *)v8);
  v9 = (char)result;
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) != 0)
    {
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    else
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      if ((v9 & 1) == 0)
        goto LABEL_18;
    }
LABEL_10:
    v10 = *(unsigned int ***)(v3 + 24);
    result = *v10;
    *v10 = (unsigned int *)v2;
    if (!result)
      return result;
    if (result[6] != 2)
    {
      result[6] -= 2;
      return result;
    }
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    return result;
  }
  *(_DWORD *)(v8 + 24) -= 2;
  if ((result & 1) != 0)
    goto LABEL_10;
LABEL_18:
  if (*(_DWORD *)(v2 + 24) != 2)
  {
    *(_DWORD *)(v2 + 24) -= 2;
    return result;
  }
  if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
  {
    result = (unsigned int *)v2;
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::elementForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>()
{
  __break(0xC471u);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(WTF::StringImpl *result, const WTF::AtomString *a2)
{
  _QWORD *v2;
  WTF::StringImpl *v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  const WTF::AtomString *v22;
  uint64_t v23;
  const WebCore::TreeScope *v24;
  unsigned int *v25;
  void *v26;
  WebCore::Node *v27;
  uint64_t v28;
  WebCore::Node *v29;
  uint64_t *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  _QWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;

  v2 = *(_QWORD **)result;
  if ((*(_BYTE *)(**(_QWORD **)result + 22) & 0x18) != 0)
  {
    v3 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2 && *((_DWORD *)v3 + 1))
    {
      *(_DWORD *)v3 += 2;
      v33 = v2;
      v34 = v3;
      WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v34, a2, &v36);
      result = v34;
      v34 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
      v18 = *v2;
      v34 = 0;
      v35 = 0;
      if (!v36)
        goto LABEL_37;
      v19 = *((unsigned int *)v36 + 3);
      if (!(_DWORD)v19)
        goto LABEL_37;
      if (v19 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v19));
      LODWORD(v35) = v19;
      v34 = v20;
      if (v36 && (v21 = *((unsigned int *)v36 + 3), (_DWORD)v21))
      {
        v22 = (WTF *)((char *)v36 + 16);
        v23 = 8 * v21;
        do
        {
          if (*(_QWORD *)v22)
          {
            if (*(_DWORD *)(*(_QWORD *)v22 + 4))
            {
              v24 = *(const WebCore::TreeScope **)(v18 + 40);
              v25 = (unsigned int *)*((_QWORD *)v24 + 3);
              if (v25)
              {
                WebCore::TreeScopeOrderedMap::getElementById(v25, v22, v24, (uint64_t *)&v38);
                v27 = v38;
                if (v38)
                {
                  v37 = v38;
                  v38 = 0;
                  LODWORD(v28) = HIDWORD(v35);
                  if (HIDWORD(v35) == (_DWORD)v35)
                  {
                    v30 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, HIDWORD(v35) + 1, (unint64_t)&v37);
                    v28 = HIDWORD(v35);
                    v31 = v34;
                    v32 = *v30;
                    *v30 = 0;
                    *((_QWORD *)v31 + v28) = v32;
                  }
                  else
                  {
                    v37 = 0;
                    *((_QWORD *)v34 + HIDWORD(v35)) = v27;
                  }
                  HIDWORD(v35) = v28 + 1;
                  v29 = v37;
                  v37 = 0;
                  if (v29)
                  {
                    if (*((_DWORD *)v29 + 6) == 2)
                    {
                      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v29, v26);
                    }
                    else
                    {
                      *((_DWORD *)v29 + 6) -= 2;
                    }
                  }
                }
              }
            }
          }
          v22 = (const WTF::AtomString *)((char *)v22 + 8);
          v23 -= 8;
        }
        while (v23);
        v4 = HIDWORD(v35);
      }
      else
      {
LABEL_37:
        v4 = 0;
      }
      v2 = v33;
    }
    else
    {
      v4 = 0;
      v35 = 0;
      v36 = 0;
      v34 = 0;
    }
    WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v34, v4);
    v6 = v2[1];
    v7 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(WTF **)v6;
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    v11 = *(WTF **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
      WTF::fastFree(v11, v5);
    }
    v12 = v34;
    v34 = 0;
    *(_QWORD *)v6 = v12;
    LODWORD(v12) = v35;
    LODWORD(v35) = 0;
    *(_DWORD *)(v6 + 8) = (_DWORD)v12;
    LODWORD(v12) = HIDWORD(v35);
    HIDWORD(v35) = 0;
    *(_DWORD *)(v6 + 12) = (_DWORD)v12;
    if (HIDWORD(v35))
    {
      v14 = v34;
      v15 = 8 * HIDWORD(v35);
      do
      {
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)(v16 + 24) == 2)
          {
            if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v16, v5);
          }
          else
          {
            *(_DWORD *)(v16 + 24) -= 2;
          }
        }
        v14 = (WTF::StringImpl *)((char *)v14 + 8);
        v15 -= 8;
      }
      while (v15);
    }
    v13 = v34;
    if (v34)
    {
      v34 = 0;
      LODWORD(v35) = 0;
      WTF::fastFree(v13, v5);
    }
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WTF::StringImpl *)WebCore::SpaceSplitStringData::destroy(result, (WTF::StringImpl *)v5);
      else
        --*((_DWORD *)result + 2);
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WebCore::Node ***v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;

  if (!*(_QWORD *)a2)
    return result;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (!v2)
    return result;
  v3 = *(_QWORD *)result;
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(_QWORD *)(v2 + 16);
  if ((v4 & 0x8000000000000) == 0)
    goto LABEL_10;
  v5 = v4 & 0x18000000000000;
  if (v5 == 0x8000000000000)
    goto LABEL_10;
  v6 = *(const WebCore::Node ****)(v3 + 16);
  if (v5)
  {
    v8 = **(_QWORD **)(v2 + 40);
  }
  else
  {
    v7 = v2;
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 32);
    }
    while (v7);
  }
  *(_DWORD *)(v8 + 24) += 2;
  result = (unsigned int *)WebCore::Node::isDescendantOrShadowDescendantOf(v6, (const WebCore::Node *)v8);
  v10 = (char)result;
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) != 0)
    {
      if (!(_DWORD)result)
        goto LABEL_18;
    }
    else
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
      if ((v10 & 1) == 0)
        goto LABEL_18;
    }
LABEL_10:
    v11 = *(_QWORD *)(v3 + 24);
    v18 = (WebCore::Node *)v2;
    v12 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v11 + 8))
    {
      v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v18);
      v15 = *(unsigned int *)(v11 + 12);
      v16 = *(_QWORD *)v11;
      v17 = *v13;
      *v13 = 0;
      *(_QWORD *)(v16 + 8 * v15) = v17;
      result = (unsigned int *)v18;
      *(_DWORD *)(v11 + 12) = v15 + 1;
      v18 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
        }
        else
        {
          result[6] -= 2;
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v2;
      *(_DWORD *)(v11 + 12) = v12 + 1;
    }
    return result;
  }
  *(_DWORD *)(v8 + 24) -= 2;
  if ((result & 1) != 0)
    goto LABEL_10;
LABEL_18:
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v9);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_0,WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_1,WebCore::CustomElementDefaultARIA::elementsForAttribute(WebCore::Element const&,WebCore::QualifiedName const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WTF::WeakPtr>>,WTF::Vector<WTF::RawPtrTraits<WTF::WeakPtr>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Node ***v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)(*(_QWORD *)result + 32);
    result = WTF::fastMalloc((WTF *)(8 * v2));
    *(_DWORD *)(v5 + 8) = v2;
    *(_QWORD *)v5 = result;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a2;
      v9 = *a2 + 8 * v7;
      while (1)
      {
        if (!*(_QWORD *)v8)
          goto LABEL_26;
        v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
        if (!v10)
          goto LABEL_26;
        *(_DWORD *)(v10 + 24) += 2;
        v11 = *(_QWORD *)(v10 + 16);
        if ((v11 & 0x8000000000000) == 0)
          break;
        v12 = v11 & 0x18000000000000;
        if ((v11 & 0x18000000000000) == 0x8000000000000)
          break;
        v13 = v10;
        if (v12)
        {
          v14 = **(_QWORD **)(v10 + 40);
        }
        else
        {
          do
          {
            v14 = v13;
            v13 = *(_QWORD *)(v13 + 32);
          }
          while (v13);
        }
        v15 = *(const WebCore::Node ****)(v4 + 40);
        *(_DWORD *)(v14 + 24) += 2;
        result = WebCore::Node::isDescendantOrShadowDescendantOf(v15, (const WebCore::Node *)v14);
        v16 = result;
        if (*(_DWORD *)(v14 + 24) == 2)
        {
          if ((*(_WORD *)(v14 + 30) & 0x400) != 0)
          {
            if ((_DWORD)result)
              break;
          }
          else
          {
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v14, v6);
            if ((v16 & 1) != 0)
              break;
          }
        }
        else
        {
          *(_DWORD *)(v14 + 24) -= 2;
          if ((result & 1) != 0)
            break;
        }
        if (*(_DWORD *)(v10 + 24) == 2)
        {
          if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          {
            result = v10;
LABEL_30:
            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
          }
        }
        else
        {
          *(_DWORD *)(v10 + 24) -= 2;
        }
LABEL_26:
        v8 += 8;
        if (v8 == v9)
          return result;
      }
      v17 = *(_QWORD *)(v4 + 32);
      v23 = v10;
      v18 = *(unsigned int *)(v17 + 12);
      if ((_DWORD)v18 == *(_DWORD *)(v17 + 8))
      {
        v20 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v23);
        v18 = *(unsigned int *)(v17 + 12);
        v21 = *(_QWORD *)v17;
        v22 = *v20;
        *v20 = 0;
        *(_QWORD *)(v21 + 8 * v18) = v22;
      }
      else
      {
        v19 = *(_QWORD *)v17;
        v23 = 0;
        *(_QWORD *)(v19 + 8 * v18) = v10;
      }
      *(_DWORD *)(v17 + 12) = v18 + 1;
      result = v23;
      v23 = 0;
      if (!result)
        goto LABEL_26;
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) != 0)
          goto LABEL_26;
        goto LABEL_30;
      }
      *(_DWORD *)(result + 24) -= 2;
      goto LABEL_26;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJSA_SF_SG_bSU_EEEEEEDcSY_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *result;

  v3 = a2[1];
  a2[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  result = (unsigned int *)*a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJSA_SF_SG_bSU_EEEEEEDcSY_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  WTF *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl ***)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJSA_SF_SG_bSU_EEEEEEDcSY_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSW_1EJSA_SF_SG_bSU_EEEEEEDcSY_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33A1AC8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS14_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEERKS1C_EEEDcS14_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(*a3 + 24) + 2;
  *a2 = v3;
  v4 = a3[1];
  *(_DWORD *)(v4 + 24) += 2;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS14_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEERKS1C_EEEDcS14_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    ++*v3;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
  v5 = *(_DWORD **)(a3 + 16);
  if (v5)
    *v5 += 2;
  a2[2] = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS14_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEERKS1C_EEEDcS14_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS14_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEERKS1C_EEEDcS14_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS14_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEERKS1C_EEEDcS14_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E33A1B10[v3])(&v6);
    *(_DWORD *)(a2 + 8) = v3;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6RefPtrIN7WebCore4FileENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringENS9_INSA_11DOMFormDataENSC_ISI_EENSE_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJDnSG_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS12_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEEOS1A_EEEDcS12_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(*a3 + 24) + 2;
  *a2 = v3;
  v4 = a3[1];
  *(_DWORD *)(v4 + 24) += 2;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS12_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEEOS1A_EEEDcS12_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
  v5 = a3[2];
  a3[2] = 0;
  a2[2] = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS12_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEEOS1A_EEEDcS12_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS12_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEEOS1A_EEEDcS12_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS8_13QualifiedNameEN3WTF10AtomStringESE_EEENS9_21FormAssociatedPayloadEbNS_7variantIJDnNSD_6RefPtrINS8_4FileENSD_12RawPtrTraitsISJ_EENSD_21DefaultRefDerefTraitsISJ_EEEENSD_6StringENSI_INS8_11DOMFormDataENSK_ISQ_EENSM_ISQ_EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISV_LNS0_6_TraitE1EEEEEvRSW_OT_EUlRS12_OT0_E_JRNS0_6__baseILSZ_1EJSA_SF_SG_bSU_EEEOS1A_EEEDcS12_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E33A1B30[v3])(&v6);
    *(_DWORD *)(a2 + 8) = v3;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_DWORD **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          if (v6[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
            v5 = *(WTF::StringImpl **)v4;
          }
          else
          {
            --v6[4];
          }
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WebCore::Style::RuleSet ***v6;
  uint64_t v7;
  WTF *v8;
  WebCore::Style::RuleSet **v10;
  uint64_t v11;
  WebCore::Style::RuleSet *v12;
  WTF *v13;
  void *v14;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(unsigned __int8 *)(a1 + 32 * i) != 254)
      {
        v5 = a1 + 32 * i;
        v6 = (WebCore::Style::RuleSet ***)(v5 + 8);
        v7 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v7)
        {
          v10 = *v6;
          v11 = 8 * v7;
          do
          {
            v12 = *v10;
            *v10 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 1)
              {
                WebCore::Style::RuleSet::~RuleSet(v12, a2);
                WTF::fastFree(v13, v14);
              }
              else
              {
                --*(_DWORD *)v12;
              }
            }
            ++v10;
            v11 -= 8;
          }
          while (v11);
        }
        v8 = (WTF *)*v6;
        if ((WebCore::Style::RuleSet **)(v5 + 24) != *v6 && v8 != 0)
        {
          *v6 = 0;
          *(_DWORD *)(a1 + 32 * i + 16) = 0;
          WTF::fastFree(v8, a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContentVisibilityDocumentState::checkRelevancyOfContentVisibilityElement(WebCore::Element &,WTF::OptionSet<WebCore::ContentRelevancy>)::$_3,void>::call(uint64_t result)
{
  _BYTE *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v1 = *(_BYTE **)(result + 16);
  if ((v1[22] & 8) != 0)
  {
    v2 = *(_BYTE *)(result + 8);
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
      v4 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v5 = *(_QWORD *)(v4 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
      v5 = *(_QWORD *)(v4 + 40);
    }
    v6 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | (*(_QWORD *)(v5 + 488) != 0) | 0x1C0000;
    *(_DWORD *)(v6 + 16) = 1;
    *(_DWORD *)(v6 + 20) = v8;
    v9 = *(_DWORD **)(v5 + 488);
    if (v9)
    {
      *v9 += 2;
      v8 = *(_DWORD *)(v6 + 20);
    }
    *(_QWORD *)(v6 + 24) = v9;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 20) = v8 | 0x4000;
    *(_QWORD *)v6 = off_1E33A17F8;
    *(_BYTE *)(v6 + 72) = v2;
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v1 + 48))(v1, v6);
    if (*(_DWORD *)(v6 + 16) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 16);
  }
  return result;
}

BOOL WTF::WeakHashMap<WebCore::Element,WebCore::ViewportProximity,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  _BOOL8 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;
  int v19;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      v12 = 0;
      goto LABEL_30;
    }
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      v7 = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
      {
        *v6 = 0;
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(unsigned int *)(v7 + 28);
          if ((_DWORD)v10)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
          v11 = *(WTF **)(v7 + 16);
          if (v11)
          {
            *(_QWORD *)(v7 + 16) = 0;
            *(_DWORD *)(v7 + 24) = 0;
            WTF::fastFree(v11, a2);
          }
          WTF::fastFree((WTF *)v7, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)a1;
    v12 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v14 = *(_DWORD *)(v13 - 12);
      else
        v14 = 0;
      *(_DWORD *)(v13 - 12) = v14 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v15 = *(_DWORD *)(v3 - 4);
      v16 = *(unsigned int *)(v3 - 12);
      if (v15 >= 9 && 6 * (int)v16 < v15)
      {
        v21 = (v16 - 1) | ((v16 - 1) >> 1) | ((((_DWORD)v16 - 1) | ((v16 - 1) >> 1)) >> 2);
        v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
        v23 = (v22 | HIWORD(v22)) + 1;
        if (v23 > 0x400)
        {
          if (v23 > 2 * v16)
            goto LABEL_41;
        }
        else if (3 * v23 > 4 * v16)
        {
LABEL_39:
          v24 = (double)v16;
          v25 = (double)v23;
          v26 = 0.604166667;
          goto LABEL_42;
        }
        LODWORD(v23) = 2 * v23;
        if (v23 <= 0x400)
          goto LABEL_39;
LABEL_41:
        v24 = (double)v16;
        v25 = (double)v23;
        v26 = 0.416666667;
LABEL_42:
        if (v25 * v26 <= v24)
          LODWORD(v23) = 2 * v23;
        if (v23 <= 8)
          v27 = 8;
        else
          v27 = v23;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v27, 0);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v18 = 0;
          goto LABEL_34;
        }
LABEL_31:
        v18 = *(_DWORD *)(v3 - 12);
        v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
          goto LABEL_35;
        goto LABEL_34;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_31;
    }
  }
  else
  {
    v12 = 0;
  }
  v18 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_34:
  v19 = v18;
LABEL_35:
  *(_DWORD *)(a1 + 12) = 2 * v19;
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_BYTE *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          *(_QWORD *)v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *(_QWORD *)v26 = v27;
          *(_BYTE *)(v26 + 8) = *(_BYTE *)(v6 + 16 * v13 + 8);
          v28 = *v15;
          *v15 = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr((unsigned int *)v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, (unsigned int *)v28));
            if (!v30)
            {
              atomic_store(1u, (unsigned int *)v28);
              v31 = *(unsigned int *)(v28 + 28);
              if ((_DWORD)v31)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v31));
              v32 = *(WTF **)(v28 + 16);
              if (v32)
              {
                *(_QWORD *)(v28 + 16) = 0;
                *(_DWORD *)(v28 + 24) = 0;
                WTF::fastFree(v32, v10);
              }
              WTF::fastFree((WTF *)v28, v10);
            }
          }
          if (v15 == a3)
            v14 = v26;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      v11 = *(unsigned int *)(v2 + 28);
      v16 = result;
      v15 = a2;
      if ((_DWORD)v11)
      {
        v14 = v2;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v2 + 16), (WTF::StringImpl *)(*(_QWORD *)(v2 + 16) + 32 * v11));
        v2 = v14;
      }
      v12 = *(WTF **)(v2 + 16);
      if (v12)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        v13 = v2;
        WTF::fastFree(v12, a2);
        v2 = v13;
      }
      WTF::fastFree((WTF *)v2, a2);
      result = v16;
      a2 = v15;
    }
  }
  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v5 = *result;
  if (*result)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *result;
  if (*result)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::ViewportProximity,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::ViewportProximity>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(result, v9 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName const&,WTF::AtomString const&>@<X0>(uint64_t *a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;
  uint64_t result;
  int *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WTF::StringImpl **v19;
  int *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  int v25;
  _DWORD *v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  _DWORD *v44;
  WTF *v45;
  void *v46;
  _DWORD **v47;
  uint64_t *v48;
  char v50;
  char v51;

  v6 = a1;
  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(a1, 8u, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *a2;
  result = *((unsigned int *)*a2 + 1);
  if (!(_DWORD)result)
  {
    result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v9 + 1) = result;
  }
  v11 = &webThreadDelegateMessageScopeCount;
  v12 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v47 = a3;
    v48 = v6;
    v13 = 0;
    for (i = 1; ; ++i)
    {
      v15 = result & v8;
      v16 = v7 + 32 * v15;
      if (v12)
      {
        v17 = (*(_DWORD *)v12)++;
        v18 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
        if (v17)
        {
          *(_DWORD *)v12 = v17;
          v19 = v12;
        }
        else
        {
          v20 = v11;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
          result = WTF::fastFree(v21, v22);
          v11 = v20;
          v19 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v19 = 0;
        v18 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
      }
      if (v18 == (WebCore::QualifiedName::QualifiedNameImpl *)v12)
        break;
      if (*(_QWORD *)v16 == -1)
      {
        v13 = v7 + 32 * v15;
      }
      else if (*(WebCore::QualifiedName::QualifiedNameImpl **)v16 == *a2)
      {
        goto LABEL_42;
      }
      result = (i + v15);
      v12 = v19;
    }
LABEL_26:
    a3 = v47;
    v6 = v48;
    if (v13)
    {
      v26 = (_DWORD *)*((_QWORD *)v11 + 254);
      if (v26)
        ++*v26;
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 24) = 0;
      --*(_DWORD *)(*v48 - 16);
      v16 = v13;
    }
LABEL_30:
    v27 = *a2;
    if (*a2)
      ++*(_DWORD *)v27;
    result = *(_QWORD *)v16;
    *(_QWORD *)v16 = v27;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v45, v46);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v28 = *(unsigned int *)(v16 + 24);
    if ((_DWORD)v28 != -1)
    {
      v29 = (WTF::StringImpl *)(v16 + 8);
      if (!(_DWORD)v28)
      {
        v30 = *a3;
        if (*a3)
          *v30 += 2;
        result = *(_QWORD *)v29;
        *(_QWORD *)v29 = v30;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v29);
          else
            *(_DWORD *)result -= 2;
        }
        goto LABEL_48;
      }
      result = ((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v28])(&v51, v29);
    }
    v33 = *a3;
    if (*a3)
      *v33 += 2;
    *(_QWORD *)(v16 + 8) = v33;
    *(_DWORD *)(v16 + 24) = 0;
LABEL_48:
    v34 = *v6;
    if (*v6)
      v35 = *(_DWORD *)(v34 - 12) + 1;
    else
      v35 = 1;
    *(_DWORD *)(v34 - 12) = v35;
    v36 = *v6;
    if (*v6)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 <= 2 * v38)
        goto LABEL_57;
    }
    else if (3 * v39 <= 4 * v38)
    {
      if (!(_DWORD)v39)
      {
        v40 = 8;
LABEL_68:
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v6, v40, (WebCore::QualifiedName::QualifiedNameImpl **)v16);
        v16 = result;
        v36 = *v6;
        if (*v6)
          v39 = *(unsigned int *)(v36 - 4);
        else
          v39 = 0;
        goto LABEL_76;
      }
LABEL_57:
      v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
      goto LABEL_68;
    }
LABEL_76:
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v36 + 32 * v39;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v23 = result & v8;
  v16 = v7 + 32 * v23;
  v24 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
  if (!*(_QWORD *)v16)
    goto LABEL_30;
  v47 = a3;
  v48 = v6;
  v13 = 0;
  v25 = 1;
  while (1)
  {
    if (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
    {
      v13 = v16;
      goto LABEL_25;
    }
    if (v24 == *a2)
      break;
LABEL_25:
    v23 = ((_DWORD)v23 + v25) & v8;
    v16 = v7 + 32 * v23;
    v24 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
    ++v25;
    if (!*(_QWORD *)v16)
      goto LABEL_26;
  }
LABEL_42:
  v31 = *v48;
  if (*v48)
    v32 = *(unsigned int *)(v31 - 4);
  else
    v32 = 0;
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v31 + 32 * v32;
  *(_BYTE *)(a4 + 16) = 0;
  v41 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v41 != -1)
  {
    v42 = (WTF::StringImpl *)(v16 + 8);
    if (!(_DWORD)v41)
    {
      v43 = *v47;
      if (*v47)
        *v43 += 2;
      result = *(_QWORD *)v42;
      *(_QWORD *)v42 = v43;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v42);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = ((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v41])(&v50, v42);
  }
  v44 = *v47;
  if (*v47)
    *v44 += 2;
  *(_QWORD *)(v16 + 8) = v44;
  *(_DWORD *)(v16 + 24) = 0;
  return result;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(uint64_t *a1, unsigned int a2, WebCore::QualifiedName::QualifiedNameImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::QualifiedName::QualifiedNameImpl **v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  WTF::StringImpl **v26;
  WebCore::QualifiedName::QualifiedNameImpl *v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  BOOL v37;
  WTF *v38;
  void *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WebCore::QualifiedName::QualifiedNameImpl *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  WebCore::QualifiedName::QualifiedNameImpl *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  void *v56;
  WTF *v57;
  void *v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v10 = &webThreadDelegateMessageScopeCount;
  if (a2)
  {
    v11 = v8 + 24;
    do
    {
      v12 = WebCore::nullName;
      if (WebCore::nullName)
        ++*(_DWORD *)WebCore::nullName;
      *(_QWORD *)(v11 - 8) = v12;
      *(_QWORD *)v11 = 0;
      *(_DWORD *)(v11 + 16) = 0;
      v11 += 32;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    v60 = v4;
    do
    {
      v16 = (WebCore::QualifiedName::QualifiedNameImpl **)(v4 + 32 * v13);
      v17 = (WTF::StringImpl **)*v16;
      if (*v16 != (WebCore::QualifiedName::QualifiedNameImpl *)-1)
      {
        v18 = (WTF::StringImpl **)*((_QWORD *)v10 + 254);
        if (v18)
        {
          v19 = (*(_DWORD *)v18)++;
          if (v19)
          {
            *(_DWORD *)v18 = v19;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
            WTF::fastFree(v51, v52);
          }
        }
        if (v17 == v18)
        {
          v22 = v4 + 32 * v13;
          v25 = *(_DWORD *)(v22 + 24);
          v24 = (_DWORD *)(v22 + 24);
          v23 = v25;
          if (v25 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v23])(&v64, v4 + 32 * v13 + 8);
          *v24 = -1;
          v26 = (WTF::StringImpl **)*v16;
          *v16 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v26);
              WTF::fastFree(v57, v58);
            }
            else
            {
              --*(_DWORD *)v26;
            }
          }
        }
        else
        {
          v63 = v14;
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v27 = *v16;
          v28 = *((_DWORD *)*v16 + 1);
          if (!v28)
          {
            v28 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*v16);
            *((_DWORD *)v27 + 1) = v28;
          }
          v29 = v15;
          v30 = (WTF::StringImpl **)*((_QWORD *)v10 + 254);
          if (v30)
          {
            v31 = 0;
            do
            {
              v32 = v28 & v21;
              v33 = v20 + 32 * v32;
              if (v30)
              {
                v34 = (*(_DWORD *)v30)++;
                v35 = *(WTF::StringImpl ***)v33;
                if (v34)
                {
                  *(_DWORD *)v30 = v34;
                  v36 = (uint64_t)v30;
                }
                else
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v30);
                  WTF::fastFree(v38, v39);
                  v36 = WebCore::nullName;
                }
              }
              else
              {
                v36 = 0;
                v35 = *(WTF::StringImpl ***)v33;
              }
              v28 = ++v31 + v32;
              v37 = v35 == v30;
              v30 = (WTF::StringImpl **)v36;
            }
            while (!v37);
          }
          else
          {
            v40 = 0;
            do
            {
              v41 = v28 & v21;
              v28 = ++v40 + v41;
            }
            while (*(_QWORD *)(v20 + 32 * v41));
            v33 = v20 + 32 * v41;
          }
          v42 = *(unsigned int *)(v33 + 24);
          if ((_DWORD)v42 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v42])(&v66, v33 + 8);
          *(_DWORD *)(v33 + 24) = -1;
          v43 = *(WTF::StringImpl ***)v33;
          *(_QWORD *)v33 = 0;
          v15 = v29;
          v4 = v60;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v43);
              WTF::fastFree(v53, v54);
            }
            else
            {
              --*(_DWORD *)v43;
            }
          }
          v44 = *v16;
          *v16 = 0;
          *(_QWORD *)v33 = v44;
          *(_BYTE *)(v33 + 8) = 0;
          v9 = (void *)(v33 + 8);
          *(_DWORD *)(v33 + 24) = -1;
          v45 = v60 + 32 * v13;
          v48 = *(_DWORD *)(v45 + 24);
          v46 = (_DWORD *)(v45 + 24);
          v47 = v48;
          if (v48 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_1E33A1BC0[v47])(&v67, v9, v60 + 32 * v13 + 8);
            *(_DWORD *)(v33 + 24) = v47;
            v49 = *v46;
            if ((_DWORD)v49 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v49])(&v65, v60 + 32 * v13 + 8);
          }
          *v46 = -1;
          v50 = *v16;
          *v16 = 0;
          v10 = &webThreadDelegateMessageScopeCount;
          v14 = v63;
          if (v50)
          {
            if (*(_DWORD *)v50 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v50);
              WTF::fastFree(v55, v56);
            }
            else
            {
              --*(_DWORD *)v50;
            }
          }
          if (v16 == a3)
            v14 = v33;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v14;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF10AtomStringENS8_7WeakPtrIN7WebCore7ElementENSB_30WeakPtrImplWithEventTargetDataENS8_12RawPtrTraitsISD_EEEENS8_6VectorISG_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS9_SG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF10AtomStringENS8_7WeakPtrIN7WebCore7ElementENSB_30WeakPtrImplWithEventTargetDataENS8_12RawPtrTraitsISD_EEEENS8_6VectorISG_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS9_SG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF10AtomStringENS8_7WeakPtrIN7WebCore7ElementENSB_30WeakPtrImplWithEventTargetDataENS8_12RawPtrTraitsISD_EEEENS8_6VectorISG_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS9_SG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::QualifiedName>>,WebCore::QualifiedName>(uint64_t *a1, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  uint64_t v2;
  unsigned int v5;
  WebCore::QualifiedName::QualifiedNameImpl *v6;
  int v7;
  WTF::StringImpl **v8;
  int v9;
  uint64_t v10;
  WebCore::QualifiedName::QualifiedNameImpl **v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  WebCore::QualifiedName::QualifiedNameImpl *v20;
  int i;
  WebCore::QualifiedName::QualifiedNameImpl *v23;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = *a2;
  v7 = *((_DWORD *)*a2 + 1);
  if (!v7)
  {
    v7 = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v6 + 1) = v7;
  }
  v8 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v9 = 0;
    while (1)
    {
      v10 = v7 & v5;
      v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v2 + 32 * v10);
      if (v8)
      {
        v12 = (*(_DWORD *)v8)++;
        v13 = (WTF::StringImpl **)*v11;
        if (v12)
        {
          *(_DWORD *)v8 = v12;
          v14 = (uint64_t)v8;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
          WTF::fastFree(v16, v17);
          v14 = WebCore::nullName;
        }
      }
      else
      {
        v14 = 0;
        v13 = (WTF::StringImpl **)*v11;
      }
      if (v13 == v8)
        break;
      if (*v11 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && *v11 == *a2)
        return (uint64_t)v11;
      v7 = ++v9 + v10;
      v8 = (WTF::StringImpl **)v14;
    }
    goto LABEL_32;
  }
  v18 = v7 & v5;
  v11 = (WebCore::QualifiedName::QualifiedNameImpl **)(v2 + 32 * v18);
  v19 = *v11;
  if (!*v11)
  {
LABEL_32:
    if (*a1)
      return *a1 + 32 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  v20 = *a2;
  if (v19 == (WebCore::QualifiedName::QualifiedNameImpl *)-1 || v19 != v20)
  {
    for (i = 1; ; ++i)
    {
      v18 = ((_DWORD)v18 + i) & v5;
      v23 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v2 + 32 * v18);
      if (!v23)
        break;
      if (v23 != (WebCore::QualifiedName::QualifiedNameImpl *)-1 && v23 == v20)
        return v2 + 32 * v18;
    }
    goto LABEL_32;
  }
  return (uint64_t)v11;
}

uint64_t WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::inlineSet<WebCore::QualifiedName const&,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>@<X0>(uint64_t *a1@<X0>, WebCore::QualifiedName::QualifiedNameImpl **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int v8;
  WebCore::QualifiedName::QualifiedNameImpl *v9;
  uint64_t result;
  int *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::QualifiedName::QualifiedNameImpl *v18;
  WTF::StringImpl **v19;
  int *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WebCore::QualifiedName::QualifiedNameImpl *v24;
  int v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::QualifiedName::QualifiedNameImpl *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WTF *v56;
  void *v57;
  _QWORD *v58;
  char v61;
  char v62;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *a2;
  result = *((unsigned int *)*a2 + 1);
  if (!(_DWORD)result)
  {
    result = WebCore::QualifiedName::QualifiedNameImpl::computeHash(*a2);
    *((_DWORD *)v9 + 1) = result;
  }
  v11 = &webThreadDelegateMessageScopeCount;
  v12 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
  {
    v58 = a3;
    v13 = 0;
    for (i = 1; ; ++i)
    {
      v15 = result & v8;
      v16 = v6 + 32 * v15;
      if (v12)
      {
        v17 = (*(_DWORD *)v12)++;
        v18 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
        if (v17)
        {
          *(_DWORD *)v12 = v17;
          v19 = v12;
        }
        else
        {
          v20 = v11;
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
          result = WTF::fastFree(v21, v22);
          v11 = v20;
          v19 = (WTF::StringImpl **)*((_QWORD *)v20 + 254);
        }
      }
      else
      {
        v19 = 0;
        v18 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
      }
      if (v18 == (WebCore::QualifiedName::QualifiedNameImpl *)v12)
        break;
      if (*(_QWORD *)v16 == -1)
      {
        v13 = v6 + 32 * v15;
      }
      else if (*(WebCore::QualifiedName::QualifiedNameImpl **)v16 == *a2)
      {
        goto LABEL_30;
      }
      result = (i + v15);
      v12 = v19;
    }
LABEL_26:
    a3 = v58;
    v26 = a1;
    if (v13)
    {
      v27 = (_DWORD *)*((_QWORD *)v11 + 254);
      if (v27)
        ++*v27;
      *(_QWORD *)v13 = v27;
      *(_QWORD *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 24) = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = v13;
    }
LABEL_34:
    v30 = *a2;
    if (*a2)
      ++*(_DWORD *)v30;
    result = *(_QWORD *)v16;
    *(_QWORD *)v16 = v30;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        result = WTF::fastFree(v56, v57);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v31 = *(unsigned int *)(v16 + 24);
    if ((_DWORD)v31 != -1)
    {
      v32 = (uint64_t *)(v16 + 8);
      if ((_DWORD)v31 == 1)
      {
        v33 = *a3;
        *a3 = 0;
        v34 = *v32;
        *v32 = v33;
        if (v34)
        {
          do
          {
            v35 = __ldaxr((unsigned int *)v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, (unsigned int *)v34));
          if (!v36)
          {
            atomic_store(1u, (unsigned int *)v34);
            v37 = *(unsigned int *)(v34 + 28);
            if ((_DWORD)v37)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v34 + 16), (WTF::StringImpl *)(*(_QWORD *)(v34 + 16) + 32 * v37));
            v38 = *(WTF **)(v34 + 16);
            if (v38)
            {
              *(_QWORD *)(v34 + 16) = 0;
              *(_DWORD *)(v34 + 24) = 0;
              WTF::fastFree(v38, v32);
            }
            result = WTF::fastFree((WTF *)v34, v32);
          }
        }
LABEL_51:
        v40 = *v26;
        if (*v26)
          v41 = *(_DWORD *)(v40 - 12) + 1;
        else
          v41 = 1;
        *(_DWORD *)(v40 - 12) = v41;
        v42 = *v26;
        if (*v26)
          v43 = *(_DWORD *)(v42 - 12);
        else
          v43 = 0;
        v44 = (*(_DWORD *)(v42 - 16) + v43);
        v45 = *(unsigned int *)(v42 - 4);
        if (v45 > 0x400)
        {
          if (v45 <= 2 * v44)
            goto LABEL_60;
        }
        else if (3 * v45 <= 4 * v44)
        {
          if (!(_DWORD)v45)
          {
            v46 = 8;
LABEL_73:
            result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<std::variant<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::rehash(v26, v46, (WebCore::QualifiedName::QualifiedNameImpl **)v16);
            v16 = result;
            v42 = *v26;
            if (*v26)
              v45 = *(unsigned int *)(v42 - 4);
            else
              v45 = 0;
            goto LABEL_79;
          }
LABEL_60:
          v46 = (_DWORD)v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45));
          goto LABEL_73;
        }
LABEL_79:
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v42 + 32 * v45;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v31])(&v62, v32);
    }
    v39 = *a3;
    *a3 = 0;
    *(_QWORD *)(v16 + 8) = v39;
    *(_DWORD *)(v16 + 24) = 1;
    goto LABEL_51;
  }
  v23 = result & v8;
  v16 = v6 + 32 * v23;
  v24 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
  if (!*(_QWORD *)v16)
  {
    v26 = a1;
    goto LABEL_34;
  }
  v58 = a3;
  v13 = 0;
  v25 = 1;
  while (1)
  {
    if (v24 == (WebCore::QualifiedName::QualifiedNameImpl *)-1)
    {
      v13 = v16;
      goto LABEL_25;
    }
    if (v24 == *a2)
      break;
LABEL_25:
    v23 = ((_DWORD)v23 + v25) & v8;
    v16 = v6 + 32 * v23;
    v24 = *(WebCore::QualifiedName::QualifiedNameImpl **)v16;
    ++v25;
    if (!*(_QWORD *)v16)
      goto LABEL_26;
  }
LABEL_30:
  v28 = *a1;
  if (*a1)
    v29 = *(unsigned int *)(v28 - 4);
  else
    v29 = 0;
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28 + 32 * v29;
  *(_BYTE *)(a4 + 16) = 0;
  v47 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v47 == -1)
    goto LABEL_77;
  v48 = (uint64_t *)(v16 + 8);
  if ((_DWORD)v47 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v47])(&v61, v48);
LABEL_77:
    v55 = *v58;
    *v58 = 0;
    *(_QWORD *)(v16 + 8) = v55;
    *(_DWORD *)(v16 + 24) = 1;
    return result;
  }
  v49 = *v58;
  *v58 = 0;
  v50 = *v48;
  *v48 = v49;
  if (v50)
  {
    do
    {
      v51 = __ldaxr((unsigned int *)v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, (unsigned int *)v50));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)v50);
      v53 = *(unsigned int *)(v50 + 28);
      if ((_DWORD)v53)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v50 + 16), (WTF::StringImpl *)(*(_QWORD *)(v50 + 16) + 32 * v53));
      v54 = *(WTF **)(v50 + 16);
      if (v54)
      {
        *(_QWORD *)(v50 + 16) = 0;
        *(_DWORD *)(v50 + 24) = 0;
        WTF::fastFree(v54, v48);
      }
      return WTF::fastFree((WTF *)v50, v48);
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::AtomString,WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned int *result, _DWORD *a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = result;
  v5 = result[4];
  if ((_DWORD)v5 == -1)
    goto LABEL_19;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF10AtomStringENS6_7WeakPtrIN7WebCore7ElementENS9_30WeakPtrImplWithEventTargetDataENS6_12RawPtrTraitsISB_EEEENS6_6VectorISE_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v5])(&v19, result);
LABEL_19:
    v4[4] = -1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v16 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v16;
    LODWORD(v16) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    v4[2] = v16;
    LODWORD(v16) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    v4[3] = v16;
    v4[4] = 2;
    return result;
  }
  v7 = a2[3];
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = *(_QWORD *)a2 + 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v13 = *(unsigned int *)(v10 + 28);
          if ((_DWORD)v13)
          {
            v18 = v10;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
            v10 = v18;
          }
          v14 = *(WTF **)(v10 + 16);
          if (v14)
          {
            *(_QWORD *)(v10 + 16) = 0;
            *(_DWORD *)(v10 + 24) = 0;
            v17 = v10;
            WTF::fastFree(v14, a2);
            v10 = v17;
          }
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      ++v8;
    }
    while (v8 != (uint64_t *)v9);
  }
  result = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v15;
  return result;
}

uint64_t WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem::Type>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = (_BYTE *)(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12));
  *v8 = *a2;
  v8[8] = 0;
  v8[48] = 0;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = result;
  v3 = *(WTF **)result;
  v4 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = result + 16;
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    if ((_DWORD)v4)
      goto LABEL_7;
    goto LABEL_16;
  }
  if (a2 < 0x4924925)
  {
    v5 = 56 * a2;
    v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *(_DWORD *)(v2 + 8) = v5 / 0x38;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
LABEL_7:
      v7 = 0;
      v8 = 56 * v4;
      do
      {
        v9 = (char *)v3 + v7;
        v10 = v6 + v7;
        *(_BYTE *)v10 = *((_BYTE *)v3 + v7);
        *(_BYTE *)(v10 + 8) = 0;
        *(_BYTE *)(v10 + 48) = 0;
        if (*((_BYTE *)v3 + v7 + 48))
        {
          *(_BYTE *)(v10 + 16) = 0;
          a2 = v10 + 16;
          *(_DWORD *)(v10 + 40) = -1;
          v11 = *((unsigned int *)v9 + 10);
          if ((_DWORD)v11 != -1)
          {
            ((void (*)(char *, unint64_t, char *))off_1E33A1B50[v11])(&v13, a2, (char *)v3 + v7 + 16);
            *(_DWORD *)(v10 + 40) = v11;
          }
          *(_BYTE *)(v10 + 48) = 1;
          if (v9[48])
          {
            v12 = *((unsigned int *)v9 + 10);
            if ((_DWORD)v12 != -1)
              ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore30CustomElementReactionQueueItem14AdoptedPayloadENS_5tupleIJNS6_13QualifiedNameEN3WTF10AtomStringESC_EEENS7_21FormAssociatedPayloadEbNS_7variantIJDnNSB_6RefPtrINS6_4FileENSB_12RawPtrTraitsISH_EENSB_21DefaultRefDerefTraitsISH_EEEENSB_6StringENSG_INS6_11DOMFormDataENSI_ISO_EENSK_ISO_EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSV_EEEDcOSW_DpOT0____fmatrix[v12])(&v14, (char *)v3 + v7 + 16);
            *((_DWORD *)v9 + 10) = -1;
          }
        }
        v7 += 56;
      }
      while (v8 != v7);
    }
LABEL_16:
    if ((WTF *)(v2 + 16) != v3 && v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, (void *)a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CustomElementReactionQueueItem>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  char v11;

  result = WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = (_BYTE *)(*(_QWORD *)a1 + 56 * v4);
  *v6 = *(_BYTE *)result;
  v6[8] = 0;
  v6[48] = 0;
  v7 = v6 + 48;
  if (*(_BYTE *)(result + 48))
  {
    v8 = v5 + 56 * v4;
    *(_DWORD *)(v8 + 40) = -1;
    v9 = (_DWORD *)(v8 + 40);
    *((_BYTE *)v9 - 24) = 0;
    v10 = *(unsigned int *)(result + 40);
    if ((_DWORD)v10 != -1)
    {
      result = ((uint64_t (*)(char *, _DWORD *, unint64_t))off_1E33A1B50[v10])(&v11, v9 - 6, result + 16);
      *v9 = v10;
    }
    *v7 = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CustomElementReactionQueueItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::JSCustomElementInterface,WTF::RawPtrTraits<WebCore::JSCustomElementInterface>,WTF::DefaultRefDerefTraits<WebCore::JSCustomElementInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = v4 + 16 * v9;
      v11 = *(WTF::StringImpl **)v10;
      if (!*(_QWORD *)v10)
      {
        v23 = *(_DWORD **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v23)
        {
          if (v23[4] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            v11 = *(WTF::StringImpl **)v10;
          }
          else
          {
            --v23[4];
          }
        }
        *(_QWORD *)v10 = 0;
        if (!v11)
          goto LABEL_21;
        if (*(_DWORD *)v11 == 2)
          goto LABEL_35;
        *(_DWORD *)v11 -= 2;
        goto LABEL_21;
      }
      if (v11 == (WTF::StringImpl *)-1)
        goto LABEL_21;
      v12 = *a1;
      if (*a1)
        v13 = *(_DWORD *)(v12 - 8);
      else
        v13 = 0;
      v14 = 0;
      v15 = *((_DWORD *)v11 + 4) >> 8;
      do
      {
        v16 = v15 & v13;
        v15 = ++v14 + v16;
      }
      while (*(_QWORD *)(v12 + 16 * v16));
      v17 = v12 + 16 * v16;
      v18 = *(_DWORD **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = 0;
      if (v18)
      {
        if (v18[4] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
          v24 = *(WTF::StringImpl **)v17;
          *(_QWORD *)v17 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v8);
            else
              *(_DWORD *)v24 -= 2;
          }
          goto LABEL_15;
        }
        --v18[4];
      }
      *(_QWORD *)v17 = 0;
LABEL_15:
      v19 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v17 = v19;
      v20 = v4 + 16 * v9;
      v21 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v21;
      v22 = *(_DWORD **)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      if (v22)
      {
        if (v22[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
        else
          --v22[4];
      }
      v11 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (!v11)
        goto LABEL_21;
      if (*(_DWORD *)v11 == 2)
      {
LABEL_35:
        WTF::StringImpl::destroy(v11, v8);
        goto LABEL_21;
      }
      *(_DWORD *)v11 -= 2;
LABEL_21:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  char v25;

  v5 = result;
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 12);
  if (10 * v7 >= (unint64_t)(9 * v6) || *(_BYTE *)(a2 + 20) && v6 <= 2 * (int)v7)
  {
    if ((_DWORD)v6)
      v8 = 2 * v6;
    else
      v8 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a2, v8);
    LODWORD(v6) = *(_DWORD *)(a2 + 8);
  }
  v9 = v6 - 1;
  v10 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD **)a3;
  v12 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v13 = (v10 ^ (v12 >> 8)) & ((_DWORD)v6 - 1);
  v14 = *(_QWORD *)a2;
  v15 = (_QWORD *)(*(_QWORD *)a2 + 8 * v13);
  v16 = (_DWORD *)*v15;
  if (*v15)
  {
    v17 = 0;
    v18 = v12 >> 8;
    do
    {
      result = v16[4];
      v19 = (v13 + v6 - ((v10 ^ (result >> 8)) & v9)) & v9;
      if (v17 > v19)
      {
        v15 = (_QWORD *)(v14 + 8 * v13);
        if (v17 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        *v15 = 0;
        v20 = *(_DWORD **)a3;
        if (*(_QWORD *)a3)
          *v20 += 2;
        *v15 = v20;
        v21 = (v13 + 1) & v9;
        v22 = *(_QWORD *)a2;
        while (1)
        {
          v23 = (_QWORD *)(v22 + 8 * v21);
          v24 = (_DWORD *)*v23;
          if (!*v23)
            break;
          ++v19;
          result = (v21 + (_DWORD)v6 - ((v10 ^ (v24[4] >> 8)) & v9)) & v9;
          if (v19 > result)
          {
            *v23 = v16;
            v22 = *(_QWORD *)a2;
            v19 = result;
            v16 = v24;
          }
          v21 = (v21 + 1) & v9;
        }
        *v23 = v16;
        LODWORD(v6) = *(_DWORD *)(a2 + 8);
        goto LABEL_29;
      }
      if (v16 == v11 && result >> 8 == v18)
      {
        v25 = 0;
        v15 = (_QWORD *)(v14 + 8 * v13);
        goto LABEL_31;
      }
      v13 = ((_DWORD)v13 + 1) & v9;
      ++v17;
      v16 = *(_DWORD **)(v14 + 8 * v13);
    }
    while (v16);
    v15 = (_QWORD *)(v14 + 8 * v13);
    if (v17 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    if (!v11)
      goto LABEL_18;
  }
  *v11 += 2;
LABEL_18:
  *v15 = v11;
LABEL_29:
  ++*(_DWORD *)(a2 + 12);
  v14 = *(_QWORD *)a2;
  v25 = 1;
LABEL_31:
  *(_QWORD *)v5 = v15;
  *(_QWORD *)(v5 + 8) = v14 + 8 * v6;
  *(_BYTE *)(v5 + 16) = v25;
  return result;
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  *a2 = 0;
  a2[1] = 0;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = (unint64_t)a2 - *(_QWORD *)a1;
  v11 = ((v10 >> 4) + 1) & (v6 - 1);
  v12 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v11);
  v13 = *v12;
  if (*v12)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v15 = (v10 >> 4);
    v16 = ((v10 >> 4) + 1) & v8;
    v17 = (WTF::StringImpl **)(v9 + 16 * v15);
    do
    {
      if (((v16 + v6 - ((v14 ^ (*((_DWORD *)v13 + 4) >> 8)) & v8)) & v8) == 0)
        break;
      *v12 = 0;
      v18 = *v17;
      *v17 = v13;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v9 + 16 * v15;
      v20 = v9 + 16 * v11;
      v22 = *(_QWORD *)(v20 + 8);
      v21 = (_QWORD *)(v20 + 8);
      *v21 = 0;
      v23 = *(_DWORD **)(v19 + 8);
      *(_QWORD *)(v19 + 8) = v22;
      if (v23)
      {
        if (v23[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
        else
          --v23[4];
      }
      v24 = (_DWORD *)*v21;
      *v21 = 0;
      if (v24)
      {
        if (v24[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
        else
          --v24[4];
      }
      result = *v12;
      *v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *v12 = 0;
      v12[1] = 0;
      v11 = (v16 + 1) & v8;
      v9 = *(_QWORD *)a1;
      v15 = v16;
      v17 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v16);
      v12 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v11);
      v13 = *v12;
      v16 = (v16 + 1) & v8;
    }
    while (*v12);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    return (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v6 >> 1);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v2 = *a1;
  if (*a1)
  {
    v3 = *((_DWORD *)a1 + 2);
    v4 = v3 - 1;
    v5 = *((_DWORD *)a1 + 4);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = (v5 ^ (v6 >> 8)) & (v3 - 1);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8)
    {
      v9 = v6 >> 8;
      v10 = -1;
      do
      {
        v11 = *(_DWORD *)(v8 + 16);
        if (++v10 > (((_DWORD)v7 + v3 - ((v5 ^ (v11 >> 8)) & v4)) & v4))
          break;
        if (v8 == a2 && v11 >> 8 == v9)
          return v2 + 16 * v7;
        v7 = ((_DWORD)v7 + 1) & v4;
        v8 = *(_QWORD *)(v2 + 16 * v7);
      }
      while (v8);
    }
  }
  return 0;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::AtomString> *,WTF::ListHashSetNode<WTF::AtomString> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::AtomString>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::AtomString> *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (!v5)
  {
    v11 = 0;
    if (!v4)
      return v11;
    goto LABEL_18;
  }
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = (uint64_t *)(v4 + 8 * v10);
    v13 = *v12;
    if ((unint64_t)(*v12 + 1) >= 2)
    {
      v14 = *a1;
      if (*a1)
        v15 = *(_DWORD *)(v14 - 8);
      else
        v15 = 0;
      v16 = 0;
      v17 = *(_DWORD *)(*(_QWORD *)v13 + 16) >> 8;
      do
      {
        v18 = v17 & v15;
        v17 = ++v16 + v18;
      }
      while (*(_QWORD *)(v14 + 8 * v18));
      v19 = (_QWORD *)(v14 + 8 * v18);
      *v19 = v13;
      if (v12 == a2)
        v11 = v19;
    }
    ++v10;
  }
  while (v10 != v5);
  if (v4)
LABEL_18:
    WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

char **WebCore::DOMException::description(unsigned int a1)
{
  if (a1 >= 0x20)
    return (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
  else
    return &(&WebCore::descriptions)[5 * a1];
}

WTF::StringImpl *WebCore::DOMException::create@<X0>(unsigned int a1@<W0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X8>)
{
  char **v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v8;
  char *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  char *v12;
  int v13;
  WTF::StringImpl *v14;

  if (a1 >= 0x20)
    v5 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
  else
    v5 = &(&WebCore::descriptions)[5 * a1];
  v7 = WTF::fastMalloc((WTF *)0x20);
  v8 = *((_BYTE *)v5 + 32);
  v9 = v5[1];
  if (v9)
  {
    v6 = (WTF::StringImpl *)(v9 - 1);
    if (v9 == (char *)1)
    {
      v10 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = v14;
    }
  }
  else
  {
    v10 = 0;
  }
  result = *a2;
  if (*a2 && *((_DWORD *)result + 1))
  {
LABEL_21:
    *(_DWORD *)result += 2;
    goto LABEL_11;
  }
  v12 = v5[3];
  if (v12)
  {
    v6 = (WTF::StringImpl *)(v12 - 1);
    if (v12 != (char *)1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = v14;
      goto LABEL_11;
    }
    result = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    goto LABEL_21;
  }
  result = 0;
LABEL_11:
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E334F098;
  *(_BYTE *)(v7 + 12) = v8;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v7 + 16) = v10;
  if (result)
  {
    v13 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(_QWORD *)(v7 + 24) = result;
    *a3 = v7;
    if (v13)
      *(_DWORD *)result = v13;
    else
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  }
  else
  {
    *(_QWORD *)(v7 + 24) = 0;
    *a3 = v7;
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMException::create@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  char **v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  char *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  char *v11;
  int v12;
  WTF::StringImpl *v13;

  if (*a1 >= 0x20u)
    v4 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
  else
    v4 = &(&WebCore::descriptions)[5 * *a1];
  v6 = WTF::fastMalloc((WTF *)0x20);
  v7 = *((_BYTE *)v4 + 32);
  v8 = v4[1];
  if (v8)
  {
    v5 = (WTF::StringImpl *)(v8 - 1);
    if (v8 == (char *)1)
    {
      v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v13;
    }
  }
  else
  {
    v9 = 0;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
  if (result && *((_DWORD *)result + 1))
  {
LABEL_21:
    *(_DWORD *)result += 2;
    goto LABEL_11;
  }
  v11 = v4[3];
  if (v11)
  {
    v5 = (WTF::StringImpl *)(v11 - 1);
    if (v11 != (char *)1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = v13;
      goto LABEL_11;
    }
    result = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    goto LABEL_21;
  }
  result = 0;
LABEL_11:
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E334F098;
  *(_BYTE *)(v6 + 12) = v7;
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)(v6 + 16) = v9;
  if (result)
  {
    v12 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(_QWORD *)(v6 + 24) = result;
    *a2 = v6;
    if (v12)
      *(_DWORD *)result = v12;
    else
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
  else
  {
    *(_QWORD *)(v6 + 24) = 0;
    *a2 = v6;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t WebCore::DOMImplementation::operator new(uint64_t this)
{
  if (this == 16)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WebCore::DOMImplementation *WebCore::DOMImplementation::DOMImplementation(WebCore::DOMImplementation *this, WebCore::Document *a2)
{
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)this = 0;
  v3 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *((_QWORD *)this + 1) = v3;
  return this;
}

uint64_t WebCore::DOMImplementation::createDocumentType@<X0>(WebCore::DOMImplementation *this@<X0>, const WTF::AtomString *a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  WebCore::DOMImplementation *v18;
  const WTF::AtomString *v19;
  const WTF::AtomString *v20;
  WebCore::DocumentType *v21;
  _BYTE v22[8];
  uint64_t v23;
  int v24;
  char v25;

  result = (uint64_t)WebCore::Document::parseQualifiedName(a2, (uint64_t)v22, a6);
  if (v24)
  {
    if (v24 != 1)
    {
      v18 = (WebCore::DOMImplementation *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::DOMImplementation::createDocument(v18, v19, v20, v21);
    }
    v12 = v23;
    v23 = 0;
    *(_BYTE *)a5 = v22[0];
    *(_QWORD *)(a5 + 8) = v12;
    *(_DWORD *)(a5 + 16) = 1;
  }
  else
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *(_DWORD *)(v13 + 24) += 2;
    result = bmalloc::api::isoAllocate();
    *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(result + 24) = 0xA00000000002;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = v13 + 96;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    ++*(_DWORD *)(v13 + 3324);
    *(_QWORD *)result = off_1E33A3E18;
    v15 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v15 += 2;
    *(_QWORD *)(result + 80) = v15;
    v16 = *(_DWORD **)a3;
    if (*(_QWORD *)a3 || (v16 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
      *v16 += 2;
    *(_QWORD *)(result + 88) = v16;
    v17 = *(_DWORD **)a4;
    if (*(_QWORD *)a4 || (v17 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
      *v17 += 2;
    *(_QWORD *)(result + 96) = v17;
    *(_QWORD *)a5 = result;
    *(_DWORD *)(a5 + 16) = 0;
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  if (v24 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF10AtomStringES8_EEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v24])(&v25, v22);
  return result;
}

void WebCore::DOMImplementation::createDocument(WebCore::DOMImplementation *this@<X0>, WTF **a2@<X1>, const WTF::AtomString *a3@<X2>, WebCore::DocumentType *a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v8;
  WebCore::LocalFrame *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  _QWORD *v17;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int32x4_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  WebCore::Node *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[8];
  WTF::StringImpl *v47;
  char v48;
  _BYTE v49[8];
  WTF::StringImpl *v50;
  char v51;
  WTF::StringImpl *v52[2];
  int v53;
  uint64_t v54[3];
  _QWORD *v55;

  v8 = this;
  v10 = *(WebCore::LocalFrame **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 680);
  ++*((_DWORD *)v10 + 57);
  if (WTF::equal(*a2, (const WTF::StringImpl *)WebCore::SVGNames::svgNamespaceURI, a3))
  {
    v52[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v52);
    WebCore::SVGDocument::create(0, v10, (const WebCore::Settings *)v52, v54);
    v12 = v54[0];
    v54[0] = 0;
    WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(v54);
    goto LABEL_17;
  }
  if (WTF::equal(*a2, (const WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI, v11))
  {
    v52[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v52);
    v14 = bmalloc::api::isoAllocate();
    v12 = v14;
    v15 = (uint64_t)v10;
    v16 = 130;
  }
  else
  {
    v52[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v52);
    v14 = bmalloc::api::isoAllocate();
    v12 = v14;
    v15 = (uint64_t)v10;
    v16 = 128;
  }
  v17 = WebCore::XMLDocument::XMLDocument(v14, 0, v15, (uint64_t)v52, v16) + 24;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_10:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v55 = v17;
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v12 + 416), (uint64_t *)&v55, (uint64_t)v54);
  v19 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
  v20 = v52[0];
  v52[0] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  *(_BYTE *)(v12 + 712) = 1;
  if (*((_DWORD *)v10 + 57) == 1)
    (*(void (**)(WebCore::LocalFrame *))(*(_QWORD *)v10 + 24))(v10);
  else
    --*((_DWORD *)v10 + 57);
  *(_BYTE *)(v12 + 712) = 1;
  v21 = *(_QWORD *)(*((_QWORD *)v8 + 1) + 8);
  v22 = *(_QWORD *)(v21 + 704);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
      v21 = v23;
  }
  *(_DWORD *)(v21 + 24) += 2;
  v24 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v21);
  v26 = v24;
  if (v24)
  {
    do
      v27 = __ldaxr(v24);
    while (__stlxr(v27 + 1, v24));
  }
  v28 = *(_QWORD *)(v12 + 704);
  *(_QWORD *)(v12 + 704) = v26;
  if (v28)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v28));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v28);
      v42 = *(unsigned int *)(v28 + 28);
      if (!(_DWORD)v42)
        goto LABEL_72;
      goto LABEL_76;
    }
  }
  while (1)
  {
    if (*(_DWORD *)(v21 + 24) == 2)
    {
      if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v25);
    }
    else
    {
      *(_DWORD *)(v21 + 24) -= 2;
    }
    v21 = v12 + 192;
    v31 = (WTF::StringImpl *)WebCore::SecurityContext::securityOriginPolicy((WebCore::SecurityContext *)(*(_QWORD *)(*((_QWORD *)v8 + 1) + 8) + 192));
    if (v31)
      ++*(_DWORD *)v31;
    v52[0] = v31;
    WebCore::SecurityContext::setSecurityOriginPolicy(v12 + 192, (WTF::StringImpl *)v52);
    v8 = v52[0];
    if (v52[0])
    {
      if (*(_DWORD *)v52[0] == 1)
      {
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v52[0] + 1, v32);
        WTF::fastFree(v8, v40);
      }
      else
      {
        --*(_DWORD *)v52[0];
      }
    }
    if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
    {
      v34 = 0;
      if (!a4)
        goto LABEL_43;
      goto LABEL_39;
    }
    WebCore::Document::createElementNS((const WTF::AtomString **)v12, a2, a3, (uint64_t)v52, v33);
    if (!v53)
      break;
    if (v53 == 1)
    {
      v39 = v52[1];
      *(_BYTE *)a5 = v52[0];
      *(_QWORD *)(a5 + 8) = v39;
      *(_DWORD *)(a5 + 16) = 1;
      if (*(_DWORD *)(v12 + 24) != 2)
      {
        *(_DWORD *)(v12 + 24) -= 2;
        return;
      }
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      {
        v41 = (WebCore::Node *)v12;
        goto LABEL_68;
      }
      return;
    }
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_76:
    v45 = v28;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v42));
    v28 = v45;
LABEL_72:
    v43 = *(WTF **)(v28 + 16);
    if (v43)
    {
      *(_QWORD *)(v28 + 16) = 0;
      *(_DWORD *)(v28 + 24) = 0;
      v44 = v28;
      WTF::fastFree(v43, v25);
      v28 = v44;
    }
    WTF::fastFree((WTF *)v28, v25);
  }
  v34 = v52[0];
  if (!a4)
    goto LABEL_43;
LABEL_39:
  WebCore::ContainerNode::appendChild(v12, a4, (uint64_t)v49);
  if (v51)
  {
    v36 = v50;
    v50 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
LABEL_43:
  if (!v34)
  {
    *(_QWORD *)a5 = v12;
    *(_DWORD *)(a5 + 16) = 0;
    return;
  }
  WebCore::ContainerNode::appendChild(v12, v34, (uint64_t)v46);
  if (v48)
  {
    v38 = v47;
    v47 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v37);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  *(_QWORD *)a5 = v12;
  *(_DWORD *)(a5 + 16) = 0;
  if (*((_DWORD *)v34 + 6) != 2)
  {
    *((_DWORD *)v34 + 6) -= 2;
    return;
  }
  if ((*((_WORD *)v34 + 15) & 0x400) == 0)
  {
    v41 = v34;
LABEL_68:
    WebCore::Node::removedLastRef(v41, v37);
  }
}

