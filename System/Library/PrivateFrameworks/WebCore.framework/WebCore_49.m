void `non-virtual thunk to'WebCore::MediaRecorder::~MediaRecorder(WebCore::MediaRecorder *this)
{
  WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)((char *)this - 32));
}

{
  WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)((char *)this - 56));
}

{
  WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)((char *)this - 72));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)((char *)this - 56));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)((char *)this - 72));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MediaRecorder::scriptExecutionContext(WebCore::MediaRecorder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::MediaRecorder::stop(WebCore::MediaRecorder *this)
{
  WTF *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  *((_BYTE *)this + 224) = 0;
  v2 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E335C860;
  v9 = (uint64_t)v2;
  if (!*((_DWORD *)this + 34))
    return WTF::fastFree(v2, v3);
  v4 = *((unsigned int *)this + 39);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 18);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v7 + 24, (_QWORD *)this + 9);
      v6 -= 8;
    }
    while (v6);
  }
  *((_DWORD *)this + 34) = 0;
  WebCore::MediaRecorderPrivate::stop(*((_QWORD **)this + 16), (uint64_t)&v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::MediaRecorder::suspend(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WebCore *v19;
  WTF::StringImpl *v20;
  uint64_t v21[7];

  if (a2 == 2)
  {
    v21[5] = v2;
    v21[6] = v3;
    v4 = result;
    if (*((_BYTE *)result + 224))
    {
      if (*((_DWORD *)result + 34))
      {
        v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v5 = off_1E335C860;
        v19 = v5;
        if (*((_DWORD *)v4 + 34))
        {
          v7 = *((unsigned int *)v4 + 39);
          if ((_DWORD)v7)
          {
            v8 = (uint64_t *)*((_QWORD *)v4 + 18);
            v9 = 8 * v7;
            do
            {
              v10 = *v8++;
              WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v10 + 24, (_QWORD *)v4 + 9);
              v9 -= 8;
            }
            while (v9);
          }
          *((_DWORD *)v4 + 34) = 0;
          WebCore::MediaRecorderPrivate::stop(*((_QWORD **)v4 + 16), (uint64_t)&v19);
          v11 = v19;
          v19 = 0;
          if (v11)
            v11 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v11 + 8))(v11);
        }
        else
        {
          v11 = (WebCore *)WTF::fastFree(v5, v6);
        }
        v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
          v13 = WebCore::threadGlobalDataSlow(v11);
        v14 = *(_QWORD *)(v13 + 40);
        if (!v14)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
          v14 = *(_QWORD *)(v13 + 40);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v19) = 24;
        v15 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 1;
        *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x90200 | (*(_QWORD *)(v14 + 784) != 0);
        v17 = *(_DWORD **)(v14 + 784);
        if (v17)
          *v17 += 2;
        *(_QWORD *)(v15 + 24) = v17;
        *(_QWORD *)(v15 + 32) = 0;
        *(_QWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = v16;
        *(_QWORD *)(v15 + 64) = 0;
        *(_QWORD *)v15 = off_1E335CE08;
        WebCore::DOMException::create((unsigned __int8 *)&v19, (uint64_t *)(v15 + 72));
        v21[0] = v15;
        WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v4, (uint64_t)v4 + 32, 11, v21);
        if (v21[0])
        {
          if (*(_DWORD *)(v21[0] + 16) == 1)
            (*(void (**)(void))(*(_QWORD *)v21[0] + 8))();
          else
            --*(_DWORD *)(v21[0] + 16);
        }
        result = v20;
        v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::MediaRecorder::startRecording@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  WTF::MonotonicTime *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  int v46;
  char v47;
  int v48;
  char v49;
  char v50;
  char v51;
  _QWORD v52[3];

  if (!*(_BYTE *)(a1 + 224) || *(_DWORD *)(a1 + 136))
  {
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 8;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v8 = WebCore::MediaRecorderPrivate::computeBitRates(a1 + 88, *(_QWORD *)(*(_QWORD *)(a1 + 120) + 96));
  *(_QWORD *)(a1 + 264) = v8;
  v45 = 0;
  v50 = 0;
  v51 = 0;
  v46 = v8;
  v47 = 1;
  v48 = HIDWORD(v8);
  v49 = 1;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (*(_BYTE *)(v9 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x19542E44CLL);
  }
  v10 = *(_QWORD *)(v9 + 240);
  if (v10
    && (v11 = *(_QWORD *)(v10 + 8)) != 0
    && (v12 = *(_QWORD *)(v11 + 24)) != 0
    && (v13 = *(_QWORD *)(v12 + 8)) != 0)
  {
    if (WebCore::MediaRecorder::m_customCreator)
    {
      WebCore::MediaRecorder::m_customCreator(&v42, *(_QWORD *)(*(_QWORD *)(a1 + 120) + 96), &v45);
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, WTF::StringImpl **))(**(_QWORD **)(v13 + 288) + 16))(v52, *(_QWORD *)(v13 + 288), *(_QWORD *)(*(_QWORD *)(a1 + 120) + 96), &v45);
      if (v52[0])
      {
        v42 = v52[0];
        v44 = 0;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v42) = 6;
        v44 = 1;
        v37 = v52[0];
        v52[0] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
    }
  }
  else
  {
    LOBYTE(v42) = 8;
    v43 = 0;
    v44 = 1;
  }
  if (!v44)
  {
    v3 = v42;
    v42 = 0;
    v16 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v3;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v3 = *(_QWORD *)(a1 + 128);
    }
    v52[0] = a1;
    if ((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_21;
    v17 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 8) = a1 + 32;
    *(_BYTE *)(v17 + 32) = 0;
    v19 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v19 & 0xFFFF000000000000 | v17;
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    if (!v20)
      goto LABEL_21;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (v22)
    {
LABEL_21:
      v23 = a1;
      v24 = (unsigned int *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL);
      if (v24)
      {
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        v23 = v52[0];
      }
      v26 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v26 = 1;
      ++*(_DWORD *)(a1 + 24);
      *(_QWORD *)(v26 + 8) = a1;
      ++*(_QWORD *)(a1 + 16);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v27 = off_1E335C888;
      v27[1] = v23;
      v27[2] = v24;
      v27[3] = v26;
      v52[1] = 0;
      v52[2] = 0;
      v41 = v27;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 72))(v3, &v41);
      v29 = v41;
      v41 = 0;
      if (v29)
        (*(void (**)(_QWORD *))(*v29 + 8))(v29);
      v30 = (WTF::MonotonicTime *)WebCore::MediaRecorder::startRecording(std::optional<unsigned int>)::$_0::~$_0((uint64_t)v52, v28);
      v32 = *(unsigned int *)(a1 + 156);
      if ((_DWORD)v32)
      {
        v33 = *(uint64_t **)(a1 + 144);
        v34 = 8 * v32;
        do
        {
          v35 = *v33++;
          v30 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v35 + 24, (_QWORD *)(a1 + 72), (uint64_t)v52);
          v34 -= 8;
        }
        while (v34);
      }
      *(_DWORD *)(a1 + 136) = 1;
      *(_DWORD *)(a1 + 160) = a2;
      *(_BYTE *)(a1 + 164) = BYTE4(a2);
      if ((a2 & 0xFF00000000) != 0)
      {
        *(_QWORD *)(a1 + 192) = 0;
        WTF::MonotonicTime::now(v30);
        WebCore::TimerBase::setNextFireTime(a1 + 168, (double)a2 / 1000.0 + v36);
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v15 = v44;
      if (v44 == -1)
        goto LABEL_33;
      goto LABEL_32;
    }
    atomic_store(1u, v20);
    v40 = (WTF *)v20;
    v38 = v20[7];
    if (!(_DWORD)v38)
    {
LABEL_44:
      v39 = (WTF *)*((_QWORD *)v40 + 2);
      if (v39)
      {
        *((_QWORD *)v40 + 2) = 0;
        *((_DWORD *)v40 + 6) = 0;
        WTF::fastFree(v39, v18);
      }
      WTF::fastFree(v40, v18);
      goto LABEL_21;
    }
LABEL_48:
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v40 + 2), (WTF::StringImpl *)(*((_QWORD *)v40 + 2) + 32 * v38));
    goto LABEL_44;
  }
  if (v44 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_48;
  }
  v14 = v43;
  v43 = 0;
  *(_BYTE *)a3 = v42;
  *(_QWORD *)(a3 + 8) = v14;
  v15 = 1;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_32:
  ((void (*)(_QWORD *, uint64_t *))off_1E335C738[v15])(v52, &v42);
LABEL_33:
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MediaRecorder::startRecording(std::optional<unsigned int>)::$_0::~$_0(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v8 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v8 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v8 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v8);
        bmalloc::api::isoDeallocate(v9, v10);
      }
      else
      {
        --*(_DWORD *)(v8 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v11)
      {
        v14 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v11));
        v4 = v14;
      }
      v12 = *(WTF **)(v4 + 16);
      if (v12)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v13 = v4;
        WTF::fastFree(v12, a2);
        v4 = v13;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

WTF *WebCore::MediaRecorder::stopRecording(WTF *this)
{
  uint64_t v1;
  WTF *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;

  if (*((_DWORD *)this + 34))
  {
    v1 = (uint64_t)this;
    *((_QWORD *)this + 33) = WebCore::MediaRecorderPrivate::computeBitRates((uint64_t)this + 88, *(_QWORD *)(*((_QWORD *)this + 15) + 96));
    v2 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E335C860;
    v10 = v2;
    if (*(_DWORD *)(v1 + 136))
    {
      v4 = *(unsigned int *)(v1 + 156);
      if ((_DWORD)v4)
      {
        v5 = *(uint64_t **)(v1 + 144);
        v6 = 8 * v4;
        do
        {
          v7 = *v5++;
          WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v7 + 24, (_QWORD *)(v1 + 72));
          v6 -= 8;
        }
        while (v6);
      }
      *(_DWORD *)(v1 + 136) = 0;
      WebCore::MediaRecorderPrivate::stop(*(_QWORD **)(v1 + 128), (uint64_t)&v10);
      v8 = (uint64_t)v10;
      v10 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::fastFree(v2, v3);
    }
    v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = off_1E335C900;
    *((_QWORD *)v9 + 1) = v1;
    v10 = v9;
    WebCore::MediaRecorder::fetchData(v1, (uint64_t *)&v10, 1);
    this = v10;
    if (v10)
      return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WebCore::MediaRecorder::fetchData(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v3 = result;
  v4 = *(_QWORD *)(result + 128);
  if (a3)
  {
    *(_QWORD *)(result + 128) = 0;
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = *a2;
  *a2 = 0;
  if (*(_BYTE *)(result + 225))
  {
    v7 = *(_QWORD *)(result + 232);
    v8 = *(_QWORD *)(result + 240);
    if (v7)
    {
      if (v8 + 1 == v7)
      {
        LODWORD(v9) = *(_DWORD *)(result + 256);
LABEL_15:
        v12 = v9;
        v13 = ((unint64_t)v9 >> 2) + v9;
        if (v13 <= 0xF)
          v13 = 15;
        if (v13 >= 0x1FFFFFFF)
        {
          __break(0xC471u);
          return result;
        }
        v14 = *(WTF **)(result + 248);
        v15 = v13 + 1;
        v16 = WTF::fastMalloc((WTF *)(8 * (v13 + 1)));
        v18 = (_QWORD *)v16;
        *(_DWORD *)(v3 + 256) = v15;
        *(_QWORD *)(v3 + 248) = v16;
        v19 = *(_QWORD *)(v3 + 232);
        v20 = *(_QWORD *)(v3 + 240);
        if (v19 <= v20)
        {
          if (v19 != v20)
          {
            v32 = (_QWORD *)(v16 + 8 * v19);
            v33 = (uint64_t *)((char *)v14 + 8 * v19);
            v34 = 8 * v20 - 8 * v19;
            do
            {
              v35 = *v33;
              *v33 = 0;
              *v32 = v35;
              v36 = *v33;
              *v33 = 0;
              if (v36)
                (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
              ++v32;
              ++v33;
              v34 -= 8;
            }
            while (v34);
          }
        }
        else
        {
          if (v20)
          {
            v21 = 8 * v20;
            v22 = v14;
            do
            {
              v23 = *(_QWORD *)v22;
              *(_QWORD *)v22 = 0;
              *v18 = v23;
              v24 = *(_QWORD *)v22;
              *(_QWORD *)v22 = 0;
              if (v24)
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
              ++v18;
              v22 = (WTF *)((char *)v22 + 8);
              v21 -= 8;
            }
            while (v21);
            v15 = *(_DWORD *)(v3 + 256);
            v19 = *(_QWORD *)(v3 + 232);
            v18 = *(_QWORD **)(v3 + 248);
          }
          v25 = v19 - v12 + v15;
          if (v19 != v12)
          {
            v26 = v15;
            v27 = (uint64_t *)((char *)v14 + 8 * v19);
            v28 = &v18[v26];
            v29 = 8 * v19 - 8 * v12;
            do
            {
              v30 = *v27;
              *v27 = 0;
              *(_QWORD *)((char *)v28 + v29) = v30;
              v31 = *v27;
              *v27 = 0;
              if (v31)
                (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
              ++v27;
              v29 += 8;
            }
            while (v29);
          }
          *(_QWORD *)(v3 + 232) = v25;
        }
        if (v14)
        {
          if (*(WTF **)(v3 + 248) == v14)
          {
            *(_QWORD *)(v3 + 248) = 0;
            *(_DWORD *)(v3 + 256) = 0;
          }
          WTF::fastFree(v14, v17);
        }
        v8 = *(_QWORD *)(v3 + 240);
      }
    }
    else
    {
      v9 = *(unsigned int *)(result + 256);
      if (v8)
      {
        if (v8 == v9 - 1)
          goto LABEL_15;
      }
      else
      {
        if (!(_DWORD)v9)
          goto LABEL_15;
        v8 = 0;
      }
    }
    v37 = *(_QWORD *)(v3 + 248);
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = &off_1E335CA18;
    *(_QWORD *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    *(_QWORD *)(v37 + 8 * v8) = result;
    v38 = *(_QWORD *)(v3 + 240);
    if (v38 == *(unsigned int *)(v3 + 256) - 1)
      v39 = 0;
    else
      v39 = v38 + 1;
    *(_QWORD *)(v3 + 240) = v39;
    return result;
  }
  *(_BYTE *)(result + 225) = 1;
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  ++*(_DWORD *)(v3 + 24);
  *(_QWORD *)(v10 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v11 = &off_1E335CA88;
  v11[1] = v3;
  v11[2] = v10;
  v11[3] = v3;
  v11[4] = v5;
  v11[5] = v6;
  v40 = v11;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 56))(v4, &v40);
  result = (uint64_t)v40;
  v40 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaRecorder::pauseRecording@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  double v9;
  uint64_t v10;
  BOOL v11;
  double v12;
  uint64_t v13;

  v3 = *(_DWORD *)(this + 136);
  if (v3 != 2)
  {
    if (!v3)
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 8;
      *(_BYTE *)(a2 + 16) = 1;
      return this;
    }
    v4 = this;
    *(_DWORD *)(this + 136) = 2;
    if ((*(_QWORD *)(this + 200) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(this + 200) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      v9 = 0.0;
      v10 = *(_QWORD *)(v4 + 200) & 0xFFFFFFFFFFFFLL;
      if (v10)
        v9 = *(double *)((*(_QWORD *)(v4 + 200) & 0xFFFFFFFFFFFFLL) + 8);
      v11 = v9 < v8;
      v12 = v9 - v8;
      if (v11)
        v12 = 0.0;
      if (!*(_BYTE *)(v4 + 280))
        *(_BYTE *)(v4 + 280) = 1;
      *(double *)(v4 + 272) = v12;
      if (v10)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 168));
    }
    v5 = *(_QWORD **)(v4 + 128);
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    ++*(_DWORD *)(v4 + 24);
    *(_QWORD *)(v6 + 8) = v4;
    ++*(_QWORD *)(v4 + 16);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E335C978;
    v7[1] = v4;
    v7[2] = v6;
    v13 = (uint64_t)v7;
    WebCore::MediaRecorderPrivate::pause(v5, (uint64_t)&v13);
    this = v13;
    v13 = 0;
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t WebCore::MediaRecorder::resumeRecording@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  double v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *(_DWORD *)(this + 136);
  if (v3 != 1)
  {
    if (!v3)
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 8;
      *(_BYTE *)(a2 + 16) = 1;
      return this;
    }
    v4 = this;
    *(_DWORD *)(this + 136) = 1;
    if (*(_BYTE *)(this + 280))
    {
      v5 = *(double *)(this + 272);
      *(_QWORD *)(this + 192) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      WebCore::TimerBase::setNextFireTime(v4 + 168, v5 + v6);
      *(_BYTE *)(v4 + 272) = 0;
      *(_BYTE *)(v4 + 280) = 0;
    }
    v7 = *(_QWORD **)(v4 + 128);
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    ++*(_DWORD *)(v4 + 24);
    *(_QWORD *)(v8 + 8) = v4;
    ++*(_QWORD *)(v4 + 16);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E335C9C8;
    v9[1] = v4;
    v9[2] = v8;
    v10 = (uint64_t)v9;
    WebCore::MediaRecorderPrivate::resume(v7, (uint64_t)&v10);
    this = v10;
    v10 = 0;
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return this;
}

WTF *WebCore::MediaRecorder::dispatchError(WTF *result, unsigned __int8 *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::EventTarget *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;

  if (*((_BYTE *)result + 224))
  {
    v3 = result;
    v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
      v5 = WebCore::threadGlobalDataSlow(result);
    v6 = (WTF *)((char *)v3 + 32);
    v7 = *(_QWORD *)(v5 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
      v7 = *(_QWORD *)(v5 + 40);
    }
    v8 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
    *(_QWORD *)(v8 + 8) = 0;
    v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x90200 | (*(_QWORD *)(v7 + 784) != 0);
    *(_DWORD *)(v8 + 16) = 1;
    *(_DWORD *)(v8 + 20) = v10;
    v11 = *(_DWORD **)(v7 + 784);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(v8 + 24) = v11;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = v9;
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)v8 = off_1E335CE08;
    WebCore::DOMException::create(a2, (uint64_t *)(v8 + 72));
    result = WebCore::EventTarget::dispatchEvent(v6, (WebCore::Event *)v8);
    if (*(_DWORD *)(v8 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 16);
  }
  return result;
}

uint64_t WebCore::MediaRecorder::trackEnded(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t v12;

  v2 = this;
  v3 = *(unsigned int *)(this + 156);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(this + 144);
    while (*(_BYTE *)(*(_QWORD *)v4 + 74))
    {
      v4 += 8;
      if (!--v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E335CB28;
    v5[1] = v2;
    v6 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    v7 = *(_DWORD *)(v2 + 24);
    *(_QWORD *)(v6 + 8) = v2;
    ++*(_QWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 24) = v7 + 2;
    this = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)this = off_1E335C950;
    *(_QWORD *)(this + 8) = v2;
    *(_QWORD *)(this + 16) = v6;
    *(_QWORD *)(this + 24) = v5;
    v12 = this;
    v8 = *(_QWORD *)(v2 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v10, 11, &v12);
        this = v12;
        v12 = 0;
        if (!this)
          return this;
      }
      else
      {
        v12 = 0;
      }
      v11 = *(uint64_t (***)())this;
    }
    else
    {
      v12 = 0;
      v11 = off_1E335C950;
    }
    return v11[1]();
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorder::trackEnded(WebCore::MediaRecorder *this, WebCore::MediaStreamTrackPrivate *a2)
{
  return WebCore::MediaRecorder::trackEnded((uint64_t)this - 72, a2);
}

uint64_t WebCore::MediaRecorder::trackMutedChanged(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  BOOL v6;
  char v7;

  v2 = *(_QWORD *)(result + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    if (v3 == *(_QWORD *)(v2 + 24))
    {
      if (*(_BYTE *)(a2 + 97))
        v4 = 1;
      else
        v4 = *(_BYTE *)(a2 + 73) == 0;
      v5 = v4;
      *(_BYTE *)(v2 + 20) = v5;
    }
    else if (v3 == *(_QWORD *)(v2 + 32))
    {
      if (*(_BYTE *)(a2 + 97))
        v6 = 1;
      else
        v6 = *(_BYTE *)(a2 + 73) == 0;
      v7 = v6;
      *(_BYTE *)(v2 + 21) = v7;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorder::trackMutedChanged(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  BOOL v6;
  char v7;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    if (v3 == *(_QWORD *)(v2 + 24))
    {
      if (*(_BYTE *)(a2 + 97))
        v4 = 1;
      else
        v4 = *(_BYTE *)(a2 + 73) == 0;
      v5 = v4;
      *(_BYTE *)(v2 + 20) = v5;
    }
    else if (v3 == *(_QWORD *)(v2 + 32))
    {
      if (*(_BYTE *)(a2 + 97))
        v6 = 1;
      else
        v6 = *(_BYTE *)(a2 + 73) == 0;
      v7 = v6;
      *(_BYTE *)(v2 + 21) = v7;
    }
  }
  return result;
}

uint64_t WebCore::MediaRecorder::trackEnabledChanged(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  BOOL v6;
  char v7;

  v2 = *(_QWORD *)(result + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    if (v3 == *(_QWORD *)(v2 + 24))
    {
      if (*(_BYTE *)(a2 + 97))
        v4 = 1;
      else
        v4 = *(_BYTE *)(a2 + 73) == 0;
      v5 = v4;
      *(_BYTE *)(v2 + 20) = v5;
    }
    else if (v3 == *(_QWORD *)(v2 + 32))
    {
      if (*(_BYTE *)(a2 + 97))
        v6 = 1;
      else
        v6 = *(_BYTE *)(a2 + 73) == 0;
      v7 = v6;
      *(_BYTE *)(v2 + 21) = v7;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorder::trackEnabledChanged(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  BOOL v6;
  char v7;

  v2 = *(_QWORD *)(result + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    if (v3 == *(_QWORD *)(v2 + 24))
    {
      if (*(_BYTE *)(a2 + 97))
        v4 = 1;
      else
        v4 = *(_BYTE *)(a2 + 73) == 0;
      v5 = v4;
      *(_BYTE *)(v2 + 20) = v5;
    }
    else if (v3 == *(_QWORD *)(v2 + 32))
    {
      if (*(_BYTE *)(a2 + 97))
        v6 = 1;
      else
        v6 = *(_BYTE *)(a2 + 73) == 0;
      v7 = v6;
      *(_BYTE *)(v2 + 21) = v7;
    }
  }
  return result;
}

BOOL WebCore::MediaRecorder::virtualHasPendingActivity(WebCore::MediaRecorder *this)
{
  return *((_DWORD *)this + 34) != 0;
}

uint64_t WebCore::MediaRecorderProvider::createMediaRecorderPrivate@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return WebCore::MediaRecorderPrivateAVFImpl::create(a1, a2, a3);
}

uint64_t WebCore::MediaRecorderProvider::isSupported(WebCore::MediaRecorderProvider *this, WTF::StringImpl **a2, double a3, double a4, float a5)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  unint64_t v8;
  float v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unsigned int v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v35;
  uint64_t v36;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  char v50;

  v5 = *a2;
  if (!*a2 || !*((_DWORD *)v5 + 1))
    return 1;
  *(_DWORD *)v5 += 2;
  v49 = v5;
  v50 = 0;
  WebCore::ContentType::containerType((WebCore::ContentType *)&v49, a3, a4, a5);
  v6 = 0;
  v10 = (unint64_t)v48;
  if (!v48)
    goto LABEL_6;
  if (*((_DWORD *)v48 + 1) != 9)
    goto LABEL_10;
  v12 = *((_QWORD *)v48 + 1);
  if ((*((_BYTE *)v48 + 16) & 4) != 0)
  {
    v13 = *(_BYTE *)v12 & 0xDF;
    if (v13 == 65)
    {
      if ((*(_BYTE *)(v12 + 1) & 0xDF) != 0x55
        || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x44
        || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x49)
      {
        goto LABEL_10;
      }
    }
    else if (v13 != 86
           || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x49
           || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x44
           || (*(_BYTE *)(v12 + 3) & 0xDF) != 0x45)
    {
      goto LABEL_10;
    }
    if ((*(_BYTE *)(v12 + 4) & 0xDF) == 0x4F
      && (*(_BYTE *)(v12 + 5) & 0xDF) == 0xF
      && (*(_BYTE *)(v12 + 6) & 0xDF) == 0x4D
      && (*(_BYTE *)(v12 + 7) & 0xDF) == 0x50)
    {
      v14 = *(unsigned __int8 *)(v12 + 8);
      goto LABEL_24;
    }
LABEL_10:
    v6 = 0;
    v48 = 0;
LABEL_11:
    if (*(_DWORD *)v10 == 2)
LABEL_99:
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v10 -= 2;
    goto LABEL_6;
  }
  v44 = *(_WORD *)v12 & 0xFFDF;
  if (v44 == 65)
  {
    if ((*(_WORD *)(v12 + 2) & 0xFFDF) != 0x55
      || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x44
      || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x49)
    {
      goto LABEL_10;
    }
  }
  else if (v44 != 86
         || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x49
         || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x44
         || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x45)
  {
    goto LABEL_10;
  }
  if ((*(_WORD *)(v12 + 8) & 0xFFDF) != 0x4F
    || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0xF
    || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x4D
    || (*(_WORD *)(v12 + 14) & 0xFFDF) != 0x50)
  {
    goto LABEL_10;
  }
  v14 = *(unsigned __int16 *)(v12 + 16);
LABEL_24:
  if ((v14 & 0xFFFFFFDF) != 0x14)
    goto LABEL_10;
  WebCore::ContentType::codecs((WebCore::ContentType *)&v49, (uint64_t)&v45, v9);
  v16 = v45;
  if (!v47)
  {
    v6 = 1;
    goto LABEL_109;
  }
  v17 = v45;
  while (1)
  {
    v18 = v15 & 0xFFFFFF0000000000;
    v19 = *(unsigned __int16 **)v17;
    if (!*(_QWORD *)v17)
    {
      v15 = v18 | 0x100000000;
      goto LABEL_68;
    }
    v20 = (unsigned __int16 *)*((_QWORD *)v19 + 1);
    v21 = *((unsigned int *)v19 + 1);
    v22 = ((unint64_t)*((unsigned int *)v19 + 4) >> 2) & 1;
    v15 = v18 | (v22 << 32) | v21;
    if ((_DWORD)v22)
    {
      if (!(_DWORD)v21)
        goto LABEL_67;
      v23 = 0;
      while (1)
      {
        v24 = *((unsigned __int8 *)v20 + v23);
        v25 = v24 > 0x20;
        v26 = (1 << v24) & 0x100003600;
        if (v25 || v26 == 0)
          break;
        if (v21 == ++v23)
          goto LABEL_100;
      }
      if ((_DWORD)v21 != 1)
      {
        v10 = (v21 - 1);
        while (v10 < v21)
        {
          v28 = *((unsigned __int8 *)v20 + v10);
          v25 = v28 > 0x20;
          v8 = (1 << v28) & 0x100003600;
          if (!v25 && v8 != 0)
          {
            if ((_DWORD)--v10)
              continue;
          }
          if (!(_DWORD)v23 && (_DWORD)v10 == (_DWORD)v21 - 1)
            goto LABEL_67;
          goto LABEL_47;
        }
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      if (!(_DWORD)v23)
        goto LABEL_67;
      v10 = 0;
LABEL_47:
      v30 = (v10 - v23 + 1);
      if (v21 - v23 < v30)
        goto LABEL_98;
      v19 = (unsigned __int16 *)((char *)v20 + v23);
      v31 = v30 | 0x100000000;
    }
    else
    {
      if (!(_DWORD)v21)
        goto LABEL_67;
      v32 = 0;
      v10 = (v21 - 1);
      v19 = v20;
      while (1)
      {
        v33 = *v19;
        v25 = v33 > 0x20;
        v8 = (1 << v33) & 0x100003600;
        if (v25 || v8 == 0)
          break;
        ++v32;
        ++v19;
        if (v21 == v32)
          goto LABEL_100;
      }
      if ((_DWORD)v21 != 1)
      {
        v8 = (v21 - 1);
        while (v8 < v21)
        {
          v35 = v20[v8];
          v25 = v35 > 0x20;
          v36 = (1 << v35) & 0x100003600;
          if (!v25 && v36 != 0)
          {
            if ((_DWORD)--v8)
              continue;
          }
          if ((_DWORD)v32 || (_DWORD)v8 != (_DWORD)v10)
            goto LABEL_97;
          goto LABEL_67;
        }
        goto LABEL_98;
      }
      if (!(_DWORD)v32)
      {
LABEL_67:
        v19 = v20;
LABEL_68:
        v31 = v15;
        goto LABEL_69;
      }
      v8 = 0;
LABEL_97:
      v31 = (v8 - v32 + 1);
      if (v21 - v32 < v31)
        goto LABEL_98;
    }
LABEL_69:
    if (v31 < 4uLL)
      goto LABEL_100;
    if ((v31 & 0xFF00000000) == 0)
      break;
    v38 = *(_BYTE *)v19 & 0xDF;
    if (v38 != 65)
    {
      if (v38 != 77 || (*((_BYTE *)v19 + 1) & 0xDF) != 0x50 || (v19[1] & 0xDF) != 0x14)
        goto LABEL_100;
      v40 = *((unsigned __int8 *)v19 + 3);
      goto LABEL_83;
    }
    if ((*((_BYTE *)v19 + 1) & 0xDF) != 0x56 || (v19[1] & 0xDF) != 0x43)
      goto LABEL_100;
    v39 = *((unsigned __int8 *)v19 + 3);
LABEL_75:
    if ((v39 & 0xFFFFFFDF) != 0x11)
      goto LABEL_100;
LABEL_76:
    v17 = (WTF *)((char *)v17 + 8);
    if (v17 == (WTF *)((char *)v45 + 8 * v47))
    {
      v6 = 1;
      goto LABEL_101;
    }
  }
  v41 = *v19 & 0xFFDF;
  if (v41 == 65)
  {
    if ((v19[1] & 0xFFDF) != 0x56 || (v19[2] & 0xFFDF) != 0x43)
      goto LABEL_100;
    v39 = v19[3];
    goto LABEL_75;
  }
  if (v41 == 77 && (v19[1] & 0xFFDF) == 0x50 && (v19[2] & 0xFFDF) == 0x14)
  {
    v40 = v19[3];
LABEL_83:
    if ((v40 & 0xFFFFFFDF) != 0x41)
      goto LABEL_100;
    goto LABEL_76;
  }
LABEL_100:
  v6 = 0;
LABEL_101:
  v42 = 8 * v47;
  do
  {
    v43 = *(WTF::StringImpl **)v16;
    *(_QWORD *)v16 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v43 -= 2;
    }
    v16 = (WTF *)((char *)v16 + 8);
    v42 -= 8;
  }
  while (v42);
  v16 = v45;
LABEL_109:
  if (v16)
  {
    v45 = 0;
    v46 = 0;
    WTF::fastFree(v16, (void *)v8);
  }
  v10 = (unint64_t)v48;
  v48 = 0;
  if (v10)
    goto LABEL_11;
LABEL_6:
  v11 = v49;
  v49 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v6;
}

_QWORD *WebCore::ArtworkImageLoader::ArtworkImageLoader(_QWORD *result, uint64_t a2, _DWORD **a3, uint64_t *a4)
{
  _DWORD *v4;
  uint64_t v5;

  *result = off_1E335C600;
  result[1] = 0;
  result[2] = a2;
  v4 = *a3;
  if (*a3)
    *v4 += 2;
  result[3] = v4;
  v5 = *a4;
  *a4 = 0;
  result[4] = v5;
  result[5] = 0;
  return result;
}

{
  _DWORD *v4;
  uint64_t v5;

  *result = off_1E335C600;
  result[1] = 0;
  result[2] = a2;
  v4 = *a3;
  if (*a3)
    *v4 += 2;
  result[3] = v4;
  v5 = *a4;
  *a4 = 0;
  result[4] = v5;
  result[5] = 0;
  return result;
}

void WebCore::ArtworkImageLoader::~ArtworkImageLoader(WebCore::ArtworkImageLoader *this, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  WebCore::CachedResource *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;

  v4 = (unsigned int **)((char *)this + 40);
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v5 = *(WebCore::CachedResource **)(v3 + 8);
    if (v5)
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, a2);
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v6);
      else
        --*(_DWORD *)v10;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ArtworkImageLoader::~ArtworkImageLoader(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::ArtworkImageLoader::requestImageResource(WebCore::ArtworkImageLoader *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v7;
  uint64_t v8;
  BOOL v9;
  WTF::StringImpl *v10;
  char v11;
  _DWORD *v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  WebCore::CachedResource *v27;
  uint64_t *v28;
  void *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  WTF::StringImpl **v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl **v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[5];
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD v65[19];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _WORD v72[76];
  uint64_t v73;
  WTF::StringImpl *v74[2];
  uint64_t v75;
  __int16 v76;
  _DWORD v77[2];
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  char v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  {
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
  }
  v77[0] = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
  *(_DWORD *)((char *)v77 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                        + 3);
  v2 = qword_1ECE90818;
  if (qword_1ECE90818)
    *(_DWORD *)qword_1ECE90818 += 2;
  v78 = v2;
  v79 = xmmword_1ECE90820;
  v80 = *(_OWORD *)algn_1ECE90830;
  v3 = dword_1ECE90854;
  v82 = 0;
  v83 = 0;
  v81 = qword_1ECE90840;
  v84 = dword_1ECE90854;
  if (dword_1ECE90854)
  {
    if (dword_1ECE90854 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v40 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
    v83 = v3;
    v82 = v40;
    if (dword_1ECE90854)
    {
      v41 = qword_1ECE90848;
      v42 = qword_1ECE90848 + 16 * dword_1ECE90854;
      do
      {
        v43 = *(_DWORD **)v41;
        if (*(_QWORD *)v41)
          *v43 += 2;
        *(_QWORD *)v40 = v43;
        *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
        v41 += 16;
        v40 += 16;
      }
      while (v41 != v42);
    }
  }
  v85 = dword_1ECE90858;
  v86 = byte_1ECE9085C;
  LOBYTE(v87) = 0;
  v90 = 0;
  if (byte_1ECE90878)
  {
    v87 = word_1ECE90860;
    v4 = qword_1ECE90868;
    if (qword_1ECE90868)
      *(_DWORD *)qword_1ECE90868 += 2;
    v88 = v4;
    v5 = qword_1ECE90870;
    if (qword_1ECE90870)
      *(_DWORD *)qword_1ECE90870 += 2;
    v89 = v5;
    v90 = 1;
  }
  v91 = xmmword_1ECE90880;
  v6 = qword_1ECE90890;
  if (qword_1ECE90890)
    *(_DWORD *)qword_1ECE90890 += 2;
  v92 = v6;
  v7 = (WebCore::Document *)*((_QWORD *)this + 2);
  v8 = **((_QWORD **)v7 + 5);
  if (v8)
    v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
  else
    v9 = 1;
  if (v9)
  {
    v35 = 256;
    v34 = *(_DWORD *)((char *)&v91 + 2);
  }
  else
  {
    v34 = *(_DWORD *)((char *)&v91 + 2);
    v35 = (*(_BYTE *)(v8 + 193) != 0) << 8;
  }
  *(_DWORD *)((char *)&v91 + 2) = v35 | v34 & 0xFFFFFEFF;
  WebCore::Document::completeURL(v7, (_QWORD *)this + 3, (uint64_t)v7 + 848, 0, (WTF::URL *)&v45);
  v10 = v45;
  if (v45)
    *(_DWORD *)v45 += 2;
  v49 = (WTF::StringImpl **)v10;
  v50 = v46;
  v51 = v47;
  v52[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v52);
  v53 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v54 = v65[0];
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0x10000;
  v11 = v59 & 0x80 | 4;
  v59 = v11;
  *(_QWORD *)&v60 = 0;
  v12 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v12 += 2;
    v11 = v59;
  }
  *((_QWORD *)&v60 + 1) = v12;
  v61 = 0;
  LOBYTE(v62) = 0;
  BYTE4(v62) = 0;
  v63 = v63 & 0xE0 | 5;
  v59 = v11 | 2;
  v64 = 0;
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v65, (uint64_t *)&v49);
  v13 = v60;
  v60 = 0u;
  v66 = v13;
  v67 = v61;
  v68 = v62;
  v69 = v63;
  v14 = v64;
  v61 = 0;
  v64 = 0;
  v70 = v14;
  v71 = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v72, (const WebCore::ResourceLoaderOptions *)v77);
  v72[72] = 0;
  v73 = 0;
  *(_OWORD *)v74 = 0u;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v65, &v75);
  v76 = 0;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v49, v15);
  v17 = v45;
  v45 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((_QWORD *)this + 2);
  v19 = *(unsigned int *)(v18 + 1168);
  if ((_DWORD)v19 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v49 = &v45;
  ((void (*)(WTF::StringImpl **__return_ptr, WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8Document11documentURIEvE3__0JZNKS9_11documentURIEvE3__1EEEEEJRKNS0_6__implIJNS6_6StringENS6_3URLEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v48, &v49, v18 + 1128);
  v21 = v48;
  v48 = 0;
  if (!v21)
    goto LABEL_61;
  v45 = v21;
  if ((*((_BYTE *)v21 + 16) & 0x10) != 0)
    goto LABEL_32;
  WTF::AtomStringImpl::addSlowCase();
  v22 = v45;
  v21 = (WTF::StringImpl *)v49;
  v49 = 0;
  v45 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v21)
  {
LABEL_32:
    v23 = 0;
    *(_DWORD *)v21 += 2;
  }
  else
  {
LABEL_61:
    v23 = 1;
  }
  v24 = v74[0];
  v74[0] = v21;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::destroy(v24, v20);
      if ((v23 & 1) != 0)
        goto LABEL_39;
      goto LABEL_37;
    }
    *(_DWORD *)v24 -= 2;
  }
  if ((v23 & 1) != 0)
    goto LABEL_39;
LABEL_37:
  if (*(_DWORD *)v21 == 2)
    WTF::StringImpl::destroy(v21, v20);
  else
    *(_DWORD *)v21 -= 2;
LABEL_39:
  v25 = v48;
  v48 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(_QWORD **)(*((_QWORD *)this + 2) + 720);
  if (!v26)
    v26 = (_QWORD *)WebCore::Document::ensureCachedResourceLoader(*((WebCore::Document **)this + 2), v20);
  WebCore::CachedResourceLoader::requestImage((WebCore::ResourceRequest *)v65, v26, 0, (uint64_t)&v49);
  if ((_DWORD)v53 || (v36 = v49) == 0)
  {
    v27 = 0;
    v44 = 0;
LABEL_46:
    v28 = (uint64_t *)((char *)this + 40);
    goto LABEL_47;
  }
  do
    v37 = __ldaxr((unsigned int *)v36);
  while (__stlxr(v37 + 1, (unsigned int *)v36));
  v44 = v36;
  v38 = v36[1];
  if (!v38)
  {
    v27 = 0;
    goto LABEL_46;
  }
  v48 = (WTF::StringImpl *)&v44;
  ++*((_DWORD *)v38 + 137);
  v39 = *((_QWORD *)v38 + 61);
  if (v39 && *(_QWORD *)(v39 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)v38 + 58, (uint64_t *)&v48, (uint64_t)&v45);
    v36 = v44;
    v28 = (uint64_t *)((char *)this + 40);
    if (!v44)
    {
      v27 = 0;
      goto LABEL_47;
    }
  }
  else
  {
    v28 = (uint64_t *)((char *)this + 40);
  }
  v27 = v36[1];
LABEL_47:
  WebCore::CachedResourceHandleBase::setResource(v28, v27);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v44, v29);
  if ((_DWORD)v53 != -1)
    (*(&off_1E335C748 + v53))((int)&v45, (WebCore::CachedResourceHandleBase *)&v49);
  v31 = *v28;
  if (*v28)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      if (WebCore::CachedResource::addClientToSet(*(WebCore::CachedResource **)(v31 + 8), this))
        (*(void (**)(uint64_t, WebCore::ArtworkImageLoader *))(*(_QWORD *)v32 + 88))(v32, this);
    }
  }
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v65, v30);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v77, v33);
}

uint64_t WebCore::ArtworkImageLoader::notifyFinished(WebCore::CachedImage *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  WTF *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WebCore::CachedImage *v12;
  WebCore::CachedImage *v13;
  WebCore::CachedImage *v14;
  WebCore::CachedImage *v15;
  WTF *v16[2];

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 400);
  if (v1)
  {
    v2 = (uint64_t *)(v1 + 320);
  }
  else
  {
    v12 = a1;
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v16);
    a1 = v12;
    v2 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v2 + 60))
    goto LABEL_6;
  v3 = *((_QWORD *)a1 + 5);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if ((*(_WORD *)(v4 + 557) >> 5) - 3 < 2)
    {
LABEL_6:
      v5 = *(uint64_t (**)(void))(**((_QWORD **)a1 + 4) + 16);
      return v5();
    }
  }
  else
  {
    if ((MEMORY[0x22D] >> 5) - 3 < 2)
      goto LABEL_6;
    v4 = 0;
  }
  if (*(_QWORD *)(v4 + 688))
  {
    if (!v3)
      goto LABEL_13;
    goto LABEL_12;
  }
  {
    v7 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
  }
  else
  {
    v14 = a1;
    WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v16);
    a1 = v14;
    v7 = v16[0];
    WebCore::Image::nullImage(void)::nullImage = (uint64_t)v16[0];
  }
  if (!v7)
    goto LABEL_6;
  v3 = *((_QWORD *)a1 + 5);
  if (v3)
LABEL_12:
    v3 = *(_QWORD *)(v3 + 8);
LABEL_13:
  if ((*(_WORD *)(v3 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v3 + 720) & 0x10) != 0)
  {
    v13 = a1;
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v16);
    v9 = (unsigned int *)v16[0];
    if (v16[0])
    {
      v16[0] = 0;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
    }
    a1 = v13;
  }
  {
    v15 = a1;
    WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v16);
    a1 = v15;
    WebCore::Image::nullImage(void)::nullImage = (uint64_t)v16[0];
  }
  v5 = *(uint64_t (**)(void))(**((_QWORD **)a1 + 4) + 16);
  return v5();
}

uint64_t WebCore::MediaMetadata::create@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  const WTF::StringImpl *v7;
  WTF **v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  char v11;
  const WTF::StringImpl *v12;
  int v13;
  WTF *v14;
  void *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  char v18;

  result = WTF::fastMalloc((WTF *)0x50);
  v8 = (WTF **)result;
  *(_DWORD *)result = 1;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 72) = 0;
  if (!*(_BYTE *)(a2 + 40))
    goto LABEL_11;
  result = WebCore::MediaMetadata::setTitle((WTF **)result, (const WTF::StringImpl **)a2, v7);
  if (!*(_BYTE *)(a2 + 40)
    || (result = WebCore::MediaMetadata::setArtist(v8, (const WTF::StringImpl **)(a2 + 8), v10), !*(_BYTE *)(a2 + 40))
    || (result = WebCore::MediaMetadata::setAlbum(v8, (const WTF::StringImpl **)(a2 + 16), v12), !*(_BYTE *)(a2 + 40)))
  {
    __break(1u);
    goto LABEL_16;
  }
  result = (uint64_t)WebCore::MediaMetadata::setArtwork((unsigned int *)v8, a1, (uint64_t *)(a2 + 24), (uint64_t)v16);
  if (!v18)
  {
LABEL_11:
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  v11 = v16[0];
  result = (uint64_t)v17;
  if (v17)
  {
    v13 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *(_BYTE *)a3 = v11;
    *(_QWORD *)(a3 + 8) = result;
    *(_DWORD *)(a3 + 16) = 1;
    if (v13)
      *(_DWORD *)result = v13;
    else
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    goto LABEL_9;
  }
LABEL_16:
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_9:
  if (*(_DWORD *)v8 == 1)
  {
    WebCore::MediaMetadata::~MediaMetadata((WebCore::MediaMetadata *)v8, v9);
    return WTF::fastFree(v14, v15);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return result;
}

uint64_t WebCore::MediaMetadata::setTitle(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  result = WTF::equal(this[2], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    result = (uint64_t)this[2];
    this[2] = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = this[1];
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 1);
      if (v9)
      {
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E335CBB0;
        v10[1] = v9;
        v11 = (uint64_t)v10;
        ++*(_DWORD *)(v9 + 24);
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v9 + 144), &v11);
        if (*(_DWORD *)(v9 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        else
          --*(_DWORD *)(v9 + 24);
        result = v11;
        v11 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaMetadata::setArtist(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  result = WTF::equal(this[3], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    result = (uint64_t)this[3];
    this[3] = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = this[1];
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 1);
      if (v9)
      {
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E335CBB0;
        v10[1] = v9;
        v11 = (uint64_t)v10;
        ++*(_DWORD *)(v9 + 24);
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v9 + 144), &v11);
        if (*(_DWORD *)(v9 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        else
          --*(_DWORD *)(v9 + 24);
        result = v11;
        v11 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaMetadata::setAlbum(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  result = WTF::equal(this[4], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    result = (uint64_t)this[4];
    this[4] = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = this[1];
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 1);
      if (v9)
      {
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E335CBB0;
        v10[1] = v9;
        v11 = (uint64_t)v10;
        ++*(_DWORD *)(v9 + 24);
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v9 + 144), &v11);
        if (*(_DWORD *)(v9 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        else
          --*(_DWORD *)(v9 + 24);
        result = v11;
        v11 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebCore::MediaMetadata::setArtwork@<X0>(unsigned int *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v4 = result;
  v47 = 0;
  v48 = 0;
  v6 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v6)
    goto LABEL_35;
  if (v6 < 0xAAAAAAB)
  {
    LODWORD(v48) = 24 * (int)v6 / 0x18u;
    v47 = WTF::fastMalloc((WTF *)(24 * v6));
    v9 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v9)
    {
      v10 = *a3;
      v11 = 24 * v9;
      do
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *, uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(&v45, a2, v10, 0);
        v12 = v46;
        if ((v46 & 1) != 0)
        {
          v13 = v45;
          if (v45)
            *(_DWORD *)v45 += 2;
          v42 = v13;
          v14 = *(WTF::StringImpl **)(v10 + 8);
          if (v14)
            *(_DWORD *)v14 += 2;
          v43 = v14;
          v15 = *(WTF::StringImpl **)(v10 + 16);
          if (v15)
            *(_DWORD *)v15 += 2;
          v44 = v15;
          v16 = HIDWORD(v48);
          if (HIDWORD(v48) == (_DWORD)v48)
          {
            v17 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, HIDWORD(v48) + 1, (unint64_t)&v42);
            v16 = HIDWORD(v48);
            v18 = (_QWORD *)(v47 + 24 * HIDWORD(v48));
            v19 = *(_QWORD *)v17;
            *(_QWORD *)v17 = 0;
            *v18 = v19;
            v20 = *((_QWORD *)v17 + 1);
            *((_QWORD *)v17 + 1) = 0;
            v18[1] = v20;
            v21 = (WTF::StringImpl **)(v18 + 2);
            v22 = (WTF::StringImpl **)(v17 + 16);
          }
          else
          {
            v23 = (WTF::StringImpl **)(v47 + 24 * HIDWORD(v48));
            v42 = 0;
            *v23 = v13;
            v24 = v43;
            v43 = 0;
            v23[1] = v24;
            v21 = v23 + 2;
            v22 = &v44;
          }
          v25 = *v22;
          *v22 = 0;
          *v21 = v25;
          HIDWORD(v48) = v16 + 1;
          v26 = v44;
          v44 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, a2);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v43;
          v43 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, a2);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = v42;
          v42 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, a2);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        else
        {
          *(_BYTE *)a4 = 33;
          *(_QWORD *)(a4 + 8) = 0;
          *(_BYTE *)(a4 + 16) = 1;
        }
        v29 = v45;
        v45 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, a2);
          else
            *(_DWORD *)v29 -= 2;
        }
        if ((v12 & 1) == 0)
          return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v47, a2);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
LABEL_35:
    v30 = v4[13];
    if ((_DWORD)v30)
    {
      v31 = 24 * v30;
      v32 = (WTF::StringImpl **)(*((_QWORD *)v4 + 5) + 16);
      do
      {
        v33 = *v32;
        *v32 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, a2);
          else
            *(_DWORD *)v33 -= 2;
        }
        v34 = *(v32 - 1);
        *(v32 - 1) = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, a2);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = *(v32 - 2);
        *(v32 - 2) = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, a2);
          else
            *(_DWORD *)v35 -= 2;
        }
        v32 += 3;
        v31 -= 24;
      }
      while (v31);
    }
    v36 = (WTF *)*((_QWORD *)v4 + 5);
    if (v36)
    {
      *((_QWORD *)v4 + 5) = 0;
      v4[12] = 0;
      WTF::fastFree(v36, a2);
    }
    *((_QWORD *)v4 + 5) = v47;
    v37 = v48;
    v47 = 0;
    v48 = 0;
    *((_QWORD *)v4 + 6) = v37;
    WebCore::MediaMetadata::refreshArtworkImage((WebCore::MediaMetadata *)v4, a2);
    v38 = *((_QWORD *)v4 + 1);
    if (v38)
    {
      v39 = *(_QWORD *)(v38 + 8);
      if (v39)
      {
        v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v40 = off_1E335CBB0;
        *((_QWORD *)v40 + 1) = v39;
        v45 = v40;
        ++*(_DWORD *)(v39 + 24);
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v39 + 144), &v45);
        if (*(_DWORD *)(v39 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        else
          --*(_DWORD *)(v39 + 24);
        v41 = v45;
        v45 = 0;
        if (v41)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
      }
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v47, a2);
  }
  __break(0xC471u);
  return result;
}

void WebCore::MediaMetadata::~MediaMetadata(WebCore::MediaMetadata *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WebCore::ArtworkImageLoader *v5;
  WTF *v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebCore::ArtworkImageLoader *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    WebCore::ArtworkImageLoader::~ArtworkImageLoader(v5, a2);
    WTF::fastFree(v6, v7);
  }
  WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 10, a2);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v8);
    }
  }
}

void WebCore::MediaMetadata::refreshArtworkImage(WebCore::MediaMetadata *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  WebCore::ArtworkImageLoader *v5;
  WTF *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t IgnoringASCIICase;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v52;
  unsigned int v53;
  double v54;
  int v55;
  double v56;
  WTF::StringImpl *v57;
  WTF *v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  int v62;
  int v63;
  int v64;
  WTF *v65;
  int v66;
  unsigned int v67;
  const char *v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  unsigned int v72;
  char v73;
  unsigned __int8 *v74;
  unint64_t v75;
  __int16 v76;
  char v77;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (WebCore::ArtworkImageLoader *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    WebCore::ArtworkImageLoader::~ArtworkImageLoader(v5, a2);
    WTF::fastFree(v6, v7);
  }
  v8 = *((unsigned int *)this + 13);
  if ((_DWORD)v8)
  {
    v9 = *((_QWORD *)this + 1);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 40);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 64);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 72);
                if (v15)
                {
                  v16 = *(_QWORD *)(v15 + 8);
                  if (v16)
                  {
                    if (*(_BYTE *)(v16 + 178))
                      goto LABEL_121;
                    if (v8 >> 28)
                    {
                      __break(0xC471u);
                      goto LABEL_125;
                    }
                    v17 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
                    v18 = 0;
                    v66 = v8;
                    v65 = v17;
                    v19 = MEMORY[0x1E0CBF868];
                    v63 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
                    v64 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
                    v62 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121);
                    v20 = *((unsigned int *)this + 13);
                    while (1)
                    {
                      if (v18 >= v20)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195430E08);
                      }
                      v21 = *(_QWORD *)(*((_QWORD *)this + 5) + 24 * v18 + 8);
                      v22 = -1.0;
                      if (!v21)
                        goto LABEL_23;
                      v25 = *(unsigned int *)(v21 + 4);
                      if (!(_DWORD)v25)
                        goto LABEL_23;
                      if ((_DWORD)v25 != 3)
                        break;
                      v26 = *(_DWORD *)(v21 + 16);
                      v27 = *(unsigned __int8 **)(v21 + 8);
                      if ((v26 & 4) != 0)
                      {
                        if (*(unsigned __int8 *)(v19 + *v27) != v64
                          || *(unsigned __int8 *)(v19 + v27[1]) != v63
                          || *(unsigned __int8 *)(v19 + v27[2]) != v62)
                        {
                          goto LABEL_31;
                        }
                      }
                      else if (v64 != (unsigned __int16)(*(_WORD *)v27 | (32
                                                                         * (*(unsigned __int16 *)v27 - 65 < 0x1A)))
                             || v63 != (unsigned __int16)(*((_WORD *)v27 + 1) | (32
                                                                               * (*((unsigned __int16 *)v27
                                                                                                + 1)
                                                                                - 65 < 0x1A)))
                             || v62 != (unsigned __int16)(*((_WORD *)v27 + 2) | (32
                                                                               * (*((unsigned __int16 *)v27
                                                                                                + 2)
                                                                                - 65 < 0x1A))))
                      {
                        goto LABEL_31;
                      }
                      v30 = 512;
                      v31 = 512;
LABEL_84:
                      if (v30 >= 1 && v31 >= 1)
                      {
                        v53 = v30 <= v31 ? v31 : v30;
                        v22 = 0.0;
                        if (v53 >= 0x81)
                        {
                          v54 = (double)(int)v53;
                          if (v31 >= v30)
                            v55 = v30;
                          else
                            v55 = v31;
                          if (v53 > 0x1FF)
                            v56 = 512.0 / v54;
                          else
                            v56 = (v54 + -128.0) * 0.8 / 384.0 + 0.2;
                          v22 = (double)v55 / v54 * v56;
                        }
                      }
LABEL_23:
                      v20 = *((unsigned int *)this + 13);
                      if (v18 >= v20)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195430E10);
                      }
                      v23 = *(_DWORD **)(*((_QWORD *)this + 5) + 24 * v18);
                      if (v23)
                        *v23 += 2;
                      v24 = (char *)v17 + 16 * v18;
                      *(float *)v24 = v22;
                      *((_QWORD *)v24 + 1) = v23;
                      if (++v18 == v8)
                      {
                        v67 = v8;
                        std::__introsort<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *,false>((uint64_t)v17, (WTF *)((char *)v17 + 16 * v8), 126 - 2 * __clz(v8), 1);
                        WebCore::MediaMetadata::tryNextArtworkImage((uint64_t)this, 0, (uint64_t *)&v65);
                        v58 = v65;
                        if (v67)
                        {
                          v59 = 16 * v67;
                          v60 = (WTF::StringImpl **)((char *)v65 + 8);
                          do
                          {
                            v61 = *v60;
                            *v60 = 0;
                            if (v61)
                            {
                              if (*(_DWORD *)v61 == 2)
                                WTF::StringImpl::destroy(v61, v57);
                              else
                                *(_DWORD *)v61 -= 2;
                            }
                            v60 += 2;
                            v59 -= 16;
                          }
                          while (v59);
                        }
                        if (v58)
                          WTF::fastFree(v58, v57);
                        return;
                      }
                    }
                    v26 = *(_DWORD *)(v21 + 16);
                    v27 = *(unsigned __int8 **)(v21 + 8);
LABEL_31:
                    v74 = v27;
                    v75 = v25 | ((unint64_t)((v26 >> 2) & 1) << 32);
                    v76 = 32;
                    v77 = 0;
                    v70 = (uint64_t *)&v74;
                    v71 = 0;
                    v73 = 0;
                    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v70);
                    v28 = v75;
                    v29 = v71;
                    if (v71 != (_DWORD)v75 || (v30 = 0, v31 = 0, !v73))
                    {
                      v31 = 0;
                      v30 = 0;
                      while (2)
                      {
                        v32 = *((unsigned int *)v70 + 2);
                        if (v32 <= v29)
                          goto LABEL_68;
                        LODWORD(v33) = v72;
                        if (v32 - v29 <= v72)
                        {
                          if (v29)
                          {
                            LODWORD(v33) = v32 - v29;
                            goto LABEL_36;
                          }
                          v36 = *v70;
                          v33 = v70[1];
                        }
                        else
                        {
LABEL_36:
                          v34 = v29;
                          v33 = v33;
                          v35 = v32 - v29;
                          if (*((_BYTE *)v70 + 12))
                          {
                            if (v35 < v33)
                              goto LABEL_120;
                            v36 = *v70 + v34;
                            v33 = v33 | 0x100000000;
                          }
                          else
                          {
                            if (v35 < v33)
                              goto LABEL_120;
                            v36 = *v70 + 2 * v34;
                          }
                        }
                        v68 = (const char *)v36;
                        v69 = v33;
                        if (!(_DWORD)v33)
                          goto LABEL_68;
                        IgnoringASCIICase = WTF::StringView::findIgnoringASCIICase();
                        if ((unint64_t)(IgnoringASCIICase - 1) > 0xFFFFFFFFFFFFFFFDLL)
                          goto LABEL_97;
                        v38 = IgnoringASCIICase;
                        if (!(_DWORD)v69)
                        {
                          v41 = 0;
                          v40 = "";
                          goto LABEL_52;
                        }
                        if (v69 <= IgnoringASCIICase)
                        {
                          v39 = v69;
                        }
                        else if (BYTE4(v69))
                        {
                          v39 = IgnoringASCIICase | 0x100000000;
                        }
                        else
                        {
                          v39 = IgnoringASCIICase;
                        }
                        v40 = v68;
                        v41 = v39;
                        if ((v39 & 0xFF00000000) != 0)
LABEL_52:
                          v42 = WTF::parseInteger<unsigned int,unsigned char>((uint64_t)v40, v41, 10, 0);
                        else
                          v42 = WTF::parseInteger<unsigned int,char16_t>((uint64_t)v68, v39, 10, 0);
                        v43 = v42;
                        v44 = v69 - v38;
                        if (v69 > v44)
                        {
                          if ((_DWORD)v69 == v38)
                          {
                            v45 = v68;
                            v46 = v69;
                          }
                          else
                          {
                            v46 = v38;
                            v52 = v69 - (unint64_t)v44;
                            if (BYTE4(v69))
                            {
                              if (v52 < v38)
                                goto LABEL_120;
                              v45 = &v68[v44];
                              v46 = v38 | 0x100000000;
                            }
                            else
                            {
                              if (v52 < v38)
                              {
LABEL_120:
                                __break(1u);
LABEL_121:
                                __break(0xC471u);
LABEL_125:
                                JUMPOUT(0x195430E00);
                              }
                              v45 = &v68[2 * v44];
                            }
                          }
                          v47 = v46;
                          if ((v46 & 0xFF00000000) != 0)
LABEL_57:
                            v48 = WTF::parseInteger<unsigned int,unsigned char>((uint64_t)v45, v47, 10, 0);
                          else
                            v48 = WTF::parseInteger<unsigned int,char16_t>((uint64_t)v45, v46, 10, 0);
                          if ((v43 & 0xFF00000000) == 0 || (v48 & 0xFF00000000) == 0)
                          {
LABEL_97:
                            v19 = MEMORY[0x1E0CBF868];
                            goto LABEL_23;
                          }
                          if (v30 <= v31)
                            v49 = v31;
                          else
                            v49 = v30;
                          if ((int)v43 <= (int)v48)
                            v50 = v48;
                          else
                            v50 = v43;
                          if (v49 < v50)
                          {
                            v30 = v43;
                            v31 = v48;
                          }
LABEL_68:
                          WTF::StringView::SplitResult::Iterator::operator++();
                          v29 = v71;
                          if (v71 == v28 && v73 != 0)
                            goto LABEL_83;
                          continue;
                        }
                        break;
                      }
                      v47 = 0;
                      v45 = "";
                      goto LABEL_57;
                    }
LABEL_83:
                    v19 = MEMORY[0x1E0CBF868];
                    goto LABEL_84;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebCore::MediaMetadata::tryNextArtworkImage(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ArtworkImageLoader *v15;
  uint64_t v16;
  void *v17;
  WebCore::ArtworkImageLoader *v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *v21;

  if (*((_DWORD *)a3 + 3) <= a2)
    goto LABEL_24;
  v5 = *a3;
  v6 = *(WTF::StringImpl **)(*a3 + 16 * a2 + 8);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 64);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 72);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
            {
              if (!*(_BYTE *)(v12 + 178))
              {
                v13 = v12 - 288;
                goto LABEL_13;
              }
LABEL_24:
              __break(0xC471u);
              JUMPOUT(0x195430FA0);
            }
          }
        }
      }
    }
  }
  v13 = 0;
LABEL_13:
  if (v6)
    *(_DWORD *)v6 += 2;
  v14 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v15 = (WebCore::ArtworkImageLoader *)WTF::fastMalloc((WTF *)0x30);
  v16 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = &off_1E335C768;
  *(_QWORD *)(v16 + 8) = a1;
  *(_DWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = v6;
  *(_QWORD *)(v16 + 32) = v5;
  *(_QWORD *)(v16 + 40) = v14;
  *(_QWORD *)v15 = off_1E335C600;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v13;
  if (v6)
    *(_DWORD *)v6 += 2;
  *((_QWORD *)v15 + 3) = v6;
  *((_QWORD *)v15 + 4) = v16;
  *((_QWORD *)v15 + 5) = 0;
  v18 = *(WebCore::ArtworkImageLoader **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v15;
  if (v18)
  {
    WebCore::ArtworkImageLoader::~ArtworkImageLoader(v18, v17);
    WTF::fastFree(v19, v20);
    v15 = *(WebCore::ArtworkImageLoader **)(a1 + 56);
  }
  WebCore::ArtworkImageLoader::requestImageResource(v15);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v21);
    else
      *(_DWORD *)v6 -= 2;
  }
}

WebCore::MediaSession *WebCore::MediaSession::MediaSession(WebCore::MediaSession *this, WebCore::Navigator *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];
  WebCore::MediaSession *v25;

  *((_DWORD *)this + 6) = 1;
  v4 = *((_QWORD *)a2 + 1);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 178))
    {
      v6 = v5 - 96;
    }
    else
    {
      v7 = v5 - 288;
      v8 = *(_QWORD *)(v5 + 416);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v7 = v9;
      }
      v6 = v7 + 192;
    }
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::ScriptExecutionContext *)v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_BYTE *)(v6 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195431184);
    }
    v25 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v6 + 128), (uint64_t *)&v25, (uint64_t)v24);
  }
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &off_1E335CED0;
  v10 = WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2);
  v11 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = 0;
  v13 = WebCore::Document::sharedLogger((WebCore::Document *)v10);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v13;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  if (byte_1ECE8203A == 1)
  {
    v20 = qword_1ECE82050;
  }
  else
  {
    v20 = WTF::cryptographicallyRandomNumber<unsigned int>();
    byte_1ECE8203A = 1;
  }
  v21 = v20 + 1;
  qword_1ECE82050 = v21;
  *((_QWORD *)this + 17) = v21;
  v22 = *((_QWORD *)this + 16);
  v24[0] = "MediaSession";
  v24[1] = 13;
  v24[2] = "MediaSession";
  v24[3] = v21;
  if (*(_BYTE *)(v22 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v24);
  return this;
}

void WebCore::MediaSession::~MediaSession(WebCore::MediaSession *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  WebCore::MediaMetadata *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t i;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  *(_QWORD *)this = &off_1E335CED0;
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    v22 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v22)
    {
      for (i = 0; i != v22; ++i)
      {
        v24 = *(unsigned int **)(v3 + 8 * i);
        if (v24 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((_QWORD *)this + 15);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (_DWORD **)(v8 + 8);
      do
      {
        if (*((unsigned __int8 *)v10 - 8) != 254)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (v11[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
            else
              --v11[4];
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v12 = (WebCore::MediaMetadata *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::MediaMetadata::~MediaMetadata(v12, (WTF::StringImpl *)a2);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v17 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaSession::~MediaSession(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaSession::setMetadata(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::ArtworkImageLoader *v10;
  WTF *v11;
  void *v12;
  _DWORD *v13;
  WebCore::MediaMetadata *v14;
  WebCore::MediaMetadata *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t result;
  WTF *v26;
  void *v27;
  _QWORD v28[4];

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  v28[0] = "MediaSession";
  v28[1] = 13;
  v28[2] = "setMetadata";
  v28[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v28);
  v6 = *(_QWORD **)(a1 + 48);
  if (v6)
  {
    v7 = (unsigned int *)v6[1];
    v6[1] = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
    v10 = (WebCore::ArtworkImageLoader *)v6[7];
    v6[7] = 0;
    if (v10)
    {
      WebCore::ArtworkImageLoader::~ArtworkImageLoader(v10, a2);
      WTF::fastFree(v11, v12);
    }
    v13 = (_DWORD *)v6[9];
    v6[9] = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
    }
  }
  v14 = (WebCore::MediaMetadata *)*a2;
  *a2 = 0;
  v15 = *(WebCore::MediaMetadata **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::MediaMetadata::~MediaMetadata(v15, (WTF::StringImpl *)a2);
      WTF::fastFree(v26, v27);
      v14 = *(WebCore::MediaMetadata **)(a1 + 48);
      if (!v14)
        goto LABEL_29;
      goto LABEL_17;
    }
    --*(_DWORD *)v15;
  }
  if (!v14)
    goto LABEL_29;
LABEL_17:
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
    goto LABEL_40;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = a1;
  v17 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v16;
  if (!v17)
    goto LABEL_40;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, a2);
  }
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
LABEL_40:
    do
      v20 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v20 + 1, (unsigned int *)v16));
  }
  v21 = (unsigned int *)*((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = v16;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  WebCore::MediaMetadata::refreshArtworkImage(v14, (WTF::StringImpl *)a2);
LABEL_29:
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = off_1E335CBB0;
  v24[1] = a1;
  v28[0] = v24;
  ++*(_DWORD *)(a1 + 24);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a1 + 144), v28);
  if (*(_DWORD *)(a1 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 24);
  result = v28[0];
  v28[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSession::setPlaybackState(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  double v39;
  WTF::MonotonicTime *v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  _QWORD v48[4];
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(result + 56) == a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(_QWORD *)(result + 128);
  v5 = *(_QWORD *)(result + 136);
  v48[0] = "MediaSession";
  v48[1] = 13;
  v48[2] = "setPlaybackState";
  v48[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
    {
      WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_0::operator() const(void)::impl;
      unk_1EE2F4840 = &WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_1::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_2::operator() const(void)::impl += 2;
      qword_1EE2F4848 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_2::operator() const(void)::impl;
    }
    v7 = WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::values[v2];
    if (v7)
      *(_DWORD *)v7 += 2;
    if (v51)
    {
      v8 = *((_DWORD *)v51 + 1);
      if (v7)
      {
LABEL_9:
        v9 = *(_DWORD *)(v7 + 4);
LABEL_10:
        if (((v9 | v8) & 0x80000000) == 0)
        {
          v10 = (v8 + v9);
          if (!__OFADD__(v8, v9))
          {
            if (v51)
            {
              v11 = *((_DWORD *)v51 + 4);
              v12 = (v11 >> 2) & 1;
              if (!v7 || (v11 & 4) == 0)
              {
LABEL_16:
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v51, v7, &v52);
                if (v52)
                {
                  if (v7)
                  {
                    if (*(_DWORD *)v7 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
                    else
                      *(_DWORD *)v7 -= 2;
                  }
                  goto LABEL_20;
                }
LABEL_105:
                __break(0xC471u);
                return result;
              }
LABEL_15:
              v12 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
              goto LABEL_16;
            }
            if (v7)
              goto LABEL_15;
            if (!(_DWORD)v10)
            {
              v46 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_101;
            }
            if ((v10 & 0x80000000) == 0)
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v10 + 20));
              v46 = buf;
              if ((_QWORD)buf)
              {
                *(_DWORD *)buf = 2;
                *(_DWORD *)(v46 + 4) = v10;
                *(_QWORD *)(v46 + 8) = v46 + 20;
                *(_DWORD *)(v46 + 16) = 4;
LABEL_101:
                v52 = (WTF::StringImpl *)v46;
LABEL_20:
                v13 = v51;
                v51 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2)
                    WTF::StringImpl::destroy(v13, v6);
                  else
                    *(_DWORD *)v13 -= 2;
                }
                v14 = qword_1ECE7C4A0;
                v15 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v15)
                {
                  WTF::String::utf8();
                  v17 = v49 ? (char *)v49 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v17;
                  _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v15 = (uint64_t)v49;
                  v49 = 0;
                  if (v15)
                  {
                    if (*(_DWORD *)v15 == 1)
                      v15 = WTF::fastFree((WTF *)v15, v16);
                    else
                      --*(_DWORD *)v15;
                  }
                }
                if (WebCore::LogMedia)
                {
                  v18 = v2;
                  v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v20 = *v19;
                    if ((v20 & 1) != 0)
                      break;
                    v21 = __ldaxr(v19);
                    if (v21 == v20)
                    {
                      if (!__stxr(v20 | 1, v19))
                      {
                        v47 = v2;
                        v22 = WTF::Logger::observers((WTF::Logger *)v15);
                        v23 = *(unsigned int *)(v22 + 12);
                        if ((_DWORD)v23)
                        {
                          v24 = *(uint64_t **)v22;
                          v25 = *(_QWORD *)v22 + 8 * v23;
                          do
                          {
                            v26 = *v24;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
                            v54 = 0;
                            {
                              WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_0::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_1::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_0::operator() const(void)::impl;
                              unk_1EE2F4840 = &WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_1::operator() const(void)::impl;
                              WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_2::operator() const(void)::impl += 2;
                              qword_1EE2F4848 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::$_2::operator() const(void)::impl;
                            }
                            v27 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaSessionPlaybackState)::values[v18];
                            if (v27)
                              *(_DWORD *)v27 += 2;
                            v55 = v27;
                            v49 = 0;
                            v50 = 0;
                            v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                            LODWORD(v50) = 2;
                            v49 = v28;
                            v29 = HIDWORD(v50);
                            *((_DWORD *)v28 + 4 * HIDWORD(v50)) = buf;
                            v30 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v28 + 2 * v29 + 1) = v30;
                            *((_DWORD *)v28 + 4 * (v29 + 1)) = v54;
                            v31 = v55;
                            if (v55)
                              *(_DWORD *)v55 += 2;
                            *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
                            HIDWORD(v50) = v29 + 2;
                            (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogMedia, 0, &v49);
                            v32 = v49;
                            if (HIDWORD(v50))
                            {
                              v33 = 16 * HIDWORD(v50);
                              v34 = (WTF::StringImpl **)((char *)v49 + 8);
                              do
                              {
                                v35 = *v34;
                                *v34 = 0;
                                if (v35)
                                {
                                  if (*(_DWORD *)v35 == 2)
                                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                                  else
                                    *(_DWORD *)v35 -= 2;
                                }
                                v34 += 2;
                                v33 -= 16;
                              }
                              while (v33);
                              v32 = v49;
                            }
                            if (v32)
                            {
                              v49 = 0;
                              LODWORD(v50) = 0;
                              WTF::fastFree(v32, v16);
                            }
                            v36 = v55;
                            v55 = 0;
                            if (v36)
                            {
                              if (*(_DWORD *)v36 == 2)
                                WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v16);
                              else
                                *(_DWORD *)v36 -= 2;
                            }
                            v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v37)
                            {
                              if (*(_DWORD *)v37 == 2)
                                WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
                              else
                                *(_DWORD *)v37 -= 2;
                            }
                            ++v24;
                          }
                          while (v24 != (uint64_t *)v25);
                        }
                        v38 = __ldxr(v19);
                        if (v38 == 1)
                        {
                          LOBYTE(v2) = v47;
                          if (!__stlxr(0, v19))
                            break;
                        }
                        else
                        {
                          __clrex();
                          LOBYTE(v2) = v47;
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                result = (uint64_t)v52;
                v52 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)result -= 2;
                }
                goto LABEL_75;
              }
            }
          }
        }
        v52 = 0;
        goto LABEL_105;
      }
    }
    else
    {
      v8 = 0;
      if (v7)
        goto LABEL_9;
    }
    v9 = 0;
    goto LABEL_10;
  }
LABEL_75:
  if (*(_BYTE *)(v3 + 88) && *(_BYTE *)(v3 + 104))
  {
    v39 = 0.0;
    if (*(_BYTE *)(v3 + 56) == 2)
      v39 = *(double *)(v3 + 72);
    v40 = (WTF::MonotonicTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    if (!*(_BYTE *)(v3 + 104) || !*(_BYTE *)(v3 + 88))
      __break(1u);
    v42 = *(double *)(v3 + 96) + v39 * (v41 - *(double *)(v3 + 112));
    if (*(double *)(v3 + 64) < v42)
      v42 = *(double *)(v3 + 64);
    v43 = fmax(v42, 0.0);
    *(double *)(v3 + 80) = v43;
    *(double *)(v3 + 96) = v43;
    *(_BYTE *)(v3 + 104) = 1;
    WTF::MonotonicTime::now(v40);
    *(_QWORD *)(v3 + 112) = v44;
  }
  *(_BYTE *)(v3 + 56) = v2;
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v45 = off_1E335CC00;
  v45[1] = v3;
  *(_QWORD *)&buf = v45;
  ++*(_DWORD *)(v3 + 24);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v3 + 144), &buf);
  if (*(_DWORD *)(v3 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    --*(_DWORD *)(v3 + 24);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSession::setActionHandler(unsigned __int8 *a1, unsigned int a2, _QWORD *a3)
{
  unsigned __int8 *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  WTF::StringImpl *v60;
  unsigned __int8 *v61;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  WebCore::PlatformMediaSessionManager *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  void (*v84)(void);
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  char v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  NSObject *v108;
  uint64_t v109;
  void *v110;
  char *v111;
  unsigned __int8 *v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::Logger *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::Logger *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  int v133;
  _QWORD *v134;
  uint64_t result;
  _QWORD *v136;
  unsigned int v137;
  unsigned __int8 *v138;
  const char *v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  WTF::Logger *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  __int128 buf;
  int v149;
  WTF::StringImpl *v150;
  int v151;
  WTF::StringImpl *v152;
  uint64_t v153;

  v4 = a1;
  v153 = *MEMORY[0x1E0C80C00];
  if (!*a3)
  {
    v18 = a1 + 160;
    if (__ldaxr(a1 + 160))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
LABEL_92:
      v53 = (uint64_t *)(v4 + 120);
      v52 = *((_QWORD *)v4 + 15);
      if (!v52)
        goto LABEL_151;
      v54 = *(_DWORD *)(v52 - 8);
      v55 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v56 = (v55 ^ (v55 >> 6)) + ~((v55 ^ (v55 >> 6)) << 11);
      v57 = v54 & (v56 ^ HIWORD(v56));
      v58 = *(unsigned __int8 *)(v52 + 16 * v57);
      if (v58 != a2)
      {
        v59 = 1;
        while (v58 != 255)
        {
          v57 = ((_DWORD)v57 + v59) & v54;
          v58 = *(unsigned __int8 *)(v52 + 16 * v57);
          ++v59;
          if (v58 == a2)
            goto LABEL_150;
        }
        v57 = *(unsigned int *)(v52 - 4);
      }
LABEL_150:
      if (v57 != *(_DWORD *)(v52 - 4))
      {
        v86 = v52 + 16 * v57;
        *(_BYTE *)v86 = -2;
        a1 = *(unsigned __int8 **)(v86 + 8);
        *(_QWORD *)(v86 + 8) = 0;
        if (a1)
        {
          if (*((_DWORD *)a1 + 4) == 1)
            a1 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 16))(a1);
          else
            --*((_DWORD *)a1 + 4);
        }
        ++*(_DWORD *)(*v53 - 16);
        v87 = *v53;
        if (*v53)
          v88 = *(_DWORD *)(v87 - 12) - 1;
        else
          v88 = -1;
        *(_DWORD *)(v87 - 12) = v88;
        v89 = *v53;
        if (*v53)
        {
          v90 = 6 * *(_DWORD *)(v89 - 12);
          v91 = *(_DWORD *)(v89 - 4);
          if (v90 < v91 && v91 >= 9)
            a1 = (unsigned __int8 *)WTF::HashTable<WebCore::MediaSessionAction,WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::HashMap<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>>::rehash((uint64_t *)v4 + 15, v91 >> 1);
        }
        v85 = 1;
      }
      else
      {
LABEL_151:
        v85 = 0;
      }
      v93 = __ldxr(v18);
      if (v93 == 1)
      {
        if (!__stlxr(0, v18))
        {
          if (!v85)
            goto LABEL_266;
LABEL_174:
          v94 = *((_QWORD *)v4 + 16);
          v95 = *((_QWORD *)v4 + 17);
          v139 = "MediaSession";
          v140 = 13;
          v141 = "setActionHandler";
          v142 = v95;
          if (*(_BYTE *)(v94 + 12))
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v139);
            WTF::String::String((WTF::String *)&v145, "removing ");
            {
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl += 2;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl += 2;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl += 2;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl += 2;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl += 2;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl += 2;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl;
              unk_1EE2F47F0 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl;
              qword_1EE2F47F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl;
              unk_1EE2F4800 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl;
              qword_1EE2F4808 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl;
              unk_1EE2F4810 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl += 2;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl += 2;
              qword_1EE2F4818 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl;
              unk_1EE2F4820 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl;
              WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl += 2;
              qword_1EE2F4828 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl;
            }
            v96 = WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::values[a2];
            if (v96)
              *(_DWORD *)v96 += 2;
            if (v146)
            {
              v97 = *((_DWORD *)v146 + 1);
              if (v145)
                goto LABEL_181;
            }
            else
            {
              v97 = 0;
              if (v145)
              {
LABEL_181:
                v98 = *((_DWORD *)v145 + 1);
                if (v96)
                {
LABEL_182:
                  v99 = *(_DWORD *)(v96 + 4);
LABEL_183:
                  if ((v99 | v98) < 0
                    || ((v13 = __OFADD__(v98, v99), v100 = v98 + v99, !v13) ? (v101 = 0) : (v101 = 1),
                        v97 < 0 || (v101 & 1) != 0 || (v102 = (v97 + v100), __OFADD__(v97, v100))))
                  {
                    v147 = 0;
                    goto LABEL_301;
                  }
                  if (!v146 || (*((_BYTE *)v146 + 16) & 4) != 0)
                  {
                    if (v145)
                    {
                      v104 = *((_DWORD *)v145 + 4);
                      v103 = (v104 >> 2) & 1;
                      if (!v96 || (v104 & 4) == 0)
                        goto LABEL_197;
                    }
                    else if (!v96)
                    {
                      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v102, 1, v146, 0, 0, &v147);
                      if (!v147)
                        goto LABEL_301;
LABEL_201:
                      v106 = v145;
                      v145 = 0;
                      if (v106)
                      {
                        if (*(_DWORD *)v106 == 2)
                          WTF::StringImpl::destroy(v106, v105);
                        else
                          *(_DWORD *)v106 -= 2;
                      }
                      v107 = v146;
                      v146 = 0;
                      if (v107)
                      {
                        if (*(_DWORD *)v107 == 2)
                          WTF::StringImpl::destroy(v107, v105);
                        else
                          *(_DWORD *)v107 -= 2;
                      }
                      v138 = v4;
                      v108 = qword_1ECE7C4A0;
                      v109 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                      if ((_DWORD)v109)
                      {
                        WTF::String::utf8();
                        v111 = v143 ? (char *)v143 + 16 : 0;
                        LODWORD(buf) = 136446210;
                        *(_QWORD *)((char *)&buf + 4) = v111;
                        _os_log_impl(&dword_1940B8000, v108, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                        v109 = (uint64_t)v143;
                        v143 = 0;
                        if (v109)
                        {
                          if (*(_DWORD *)v109 == 1)
                            v109 = WTF::fastFree((WTF *)v109, v110);
                          else
                            --*(_DWORD *)v109;
                        }
                      }
                      if (WebCore::LogMedia)
                      {
                        v112 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                        while (1)
                        {
                          v113 = *v112;
                          if ((v113 & 1) != 0)
                            break;
                          v114 = __ldaxr(v112);
                          if (v114 == v113)
                          {
                            if (!__stxr(v113 | 1, v112))
                            {
                              v115 = WTF::Logger::observers((WTF::Logger *)v109);
                              v116 = *(unsigned int *)(v115 + 12);
                              if ((_DWORD)v116)
                              {
                                v117 = *(uint64_t **)v115;
                                v118 = *(_QWORD *)v115 + 8 * v116;
                                do
                                {
                                  v119 = *v117;
                                  LODWORD(buf) = 0;
                                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v139);
                                  v149 = 0;
                                  WTF::String::String((WTF::String *)&v150, "removing ");
                                  v151 = 0;
                                  {
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl += 2;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl += 2;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl;
                                    unk_1EE2F47F0 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl += 2;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl += 2;
                                    qword_1EE2F47F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl;
                                    unk_1EE2F4800 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl += 2;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl += 2;
                                    qword_1EE2F4808 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl;
                                    unk_1EE2F4810 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl += 2;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl += 2;
                                    qword_1EE2F4818 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl;
                                    unk_1EE2F4820 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl;
                                    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl += 2;
                                    qword_1EE2F4828 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl;
                                  }
                                  v120 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::values[a2];
                                  if (v120)
                                    *(_DWORD *)v120 += 2;
                                  v152 = v120;
                                  v143 = 0;
                                  v144 = 0;
                                  v121 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                                  LODWORD(v144) = 3;
                                  v143 = v121;
                                  v122 = HIDWORD(v144);
                                  *((_DWORD *)v121 + 4 * HIDWORD(v144)) = buf;
                                  v123 = *((_QWORD *)&buf + 1);
                                  if (*((_QWORD *)&buf + 1))
                                    **((_DWORD **)&buf + 1) += 2;
                                  *((_QWORD *)v121 + 2 * v122 + 1) = v123;
                                  *((_DWORD *)v121 + 4 * (v122 + 1)) = v149;
                                  v124 = v150;
                                  if (v150)
                                    *(_DWORD *)v150 += 2;
                                  *((_QWORD *)v121 + 2 * (v122 + 1) + 1) = v124;
                                  *((_DWORD *)v121 + 4 * (v122 + 2)) = v151;
                                  v125 = v152;
                                  if (v152)
                                    *(_DWORD *)v152 += 2;
                                  *((_QWORD *)v121 + 2 * (v122 + 2) + 1) = v125;
                                  HIDWORD(v144) = v122 + 3;
                                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v119
                                                                                                  + 16))(v119, &WebCore::LogMedia, 0, &v143);
                                  v126 = v143;
                                  if (HIDWORD(v144))
                                  {
                                    v127 = 16 * HIDWORD(v144);
                                    v128 = (WTF::StringImpl **)((char *)v143 + 8);
                                    do
                                    {
                                      v129 = *v128;
                                      *v128 = 0;
                                      if (v129)
                                      {
                                        if (*(_DWORD *)v129 == 2)
                                          WTF::StringImpl::destroy(v129, (WTF::StringImpl *)v110);
                                        else
                                          *(_DWORD *)v129 -= 2;
                                      }
                                      v128 += 2;
                                      v127 -= 16;
                                    }
                                    while (v127);
                                    v126 = v143;
                                  }
                                  if (v126)
                                  {
                                    v143 = 0;
                                    LODWORD(v144) = 0;
                                    WTF::fastFree(v126, v110);
                                  }
                                  v130 = v152;
                                  v152 = 0;
                                  if (v130)
                                  {
                                    if (*(_DWORD *)v130 == 2)
                                      WTF::StringImpl::destroy(v130, (WTF::StringImpl *)v110);
                                    else
                                      *(_DWORD *)v130 -= 2;
                                  }
                                  v131 = v150;
                                  v150 = 0;
                                  if (v131)
                                  {
                                    if (*(_DWORD *)v131 == 2)
                                      WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v110);
                                    else
                                      *(_DWORD *)v131 -= 2;
                                  }
                                  v132 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                                  *((_QWORD *)&buf + 1) = 0;
                                  if (v132)
                                  {
                                    if (*(_DWORD *)v132 == 2)
                                      WTF::StringImpl::destroy(v132, (WTF::StringImpl *)v110);
                                    else
                                      *(_DWORD *)v132 -= 2;
                                  }
                                  ++v117;
                                }
                                while (v117 != (uint64_t *)v118);
                              }
                              v133 = __ldxr(v112);
                              if (v133 == 1)
                              {
                                if (!__stlxr(0, v112))
                                  break;
                              }
                              else
                              {
                                __clrex();
                              }
                              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                              break;
                            }
                          }
                          else
                          {
                            __clrex();
                          }
                        }
                      }
                      a1 = (unsigned __int8 *)v147;
                      v147 = 0;
                      v4 = v138;
                      if (a1)
                      {
                        if (*(_DWORD *)a1 == 2)
                          a1 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)a1, (WTF::StringImpl *)v110);
                        else
                          *(_DWORD *)a1 -= 2;
                      }
                      goto LABEL_266;
                    }
                    v103 = (*(unsigned __int8 *)(v96 + 16) >> 2) & 1;
                  }
                  else
                  {
                    v103 = 0;
                  }
LABEL_197:
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v102, v103, v146, (uint64_t)v145, v96, &v147);
                  if (!v147)
                    goto LABEL_301;
                  if (v96)
                  {
                    if (*(_DWORD *)v96 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v96, v105);
                    else
                      *(_DWORD *)v96 -= 2;
                  }
                  goto LABEL_201;
                }
LABEL_294:
                v99 = 0;
                goto LABEL_183;
              }
            }
            v98 = 0;
            if (v96)
              goto LABEL_182;
            goto LABEL_294;
          }
LABEL_266:
          v84 = *(void (**)(void))(*(_QWORD *)WebCore::PlatformMediaSessionManager::sharedManager((WebCore::PlatformMediaSessionManager *)a1)
                                 + 240);
          goto LABEL_267;
        }
      }
      else
      {
        __clrex();
      }
      a1 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 160));
      if (!v85)
        goto LABEL_266;
      goto LABEL_174;
    }
    a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 160);
    goto LABEL_92;
  }
  v5 = a3;
  v6 = *((_QWORD *)a1 + 16);
  v7 = *((_QWORD *)a1 + 17);
  v139 = "MediaSession";
  v140 = 13;
  v141 = "setActionHandler";
  v142 = v7;
  if (!*(_BYTE *)(v6 + 12))
    goto LABEL_103;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v139);
  WTF::String::String((WTF::String *)&v145, "adding ");
  v8 = WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::values;
  {
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl;
    unk_1EE2F47F0 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl;
    qword_1EE2F47F8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl;
    unk_1EE2F4800 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl;
    qword_1EE2F4808 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl;
    unk_1EE2F4810 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl += 2;
    qword_1EE2F4818 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl;
    unk_1EE2F4820 = &WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl += 2;
    qword_1EE2F4828 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::values[a2];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (v146)
  {
    v10 = *((_DWORD *)v146 + 1);
    if (v145)
      goto LABEL_9;
LABEL_280:
    v11 = 0;
    if (v9)
      goto LABEL_10;
LABEL_281:
    v12 = 0;
    goto LABEL_11;
  }
  v10 = 0;
  if (!v145)
    goto LABEL_280;
LABEL_9:
  v11 = *((_DWORD *)v145 + 1);
  if (!v9)
    goto LABEL_281;
LABEL_10:
  v12 = *(_DWORD *)(v9 + 4);
LABEL_11:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0 || (v15 & 1) != 0 || (v16 = (v10 + v14), __OFADD__(v10, v14))))
  {
    v147 = 0;
    goto LABEL_301;
  }
  if (v146 && (*((_BYTE *)v146 + 16) & 4) == 0)
  {
    v17 = 0;
    goto LABEL_27;
  }
  if (v145)
  {
    v20 = *((_DWORD *)v145 + 4);
    v17 = (v20 >> 2) & 1;
    if (!v9 || (v20 & 4) == 0)
    {
LABEL_27:
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v17, v146, (uint64_t)v145, v9, &v147);
      if (v147)
      {
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v21);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_31;
      }
LABEL_301:
      __break(0xC471u);
      JUMPOUT(0x195432EF8);
    }
LABEL_26:
    v17 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    goto LABEL_27;
  }
  if (v9)
    goto LABEL_26;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, 1, v146, 0, 0, &v147);
  if (!v147)
    goto LABEL_301;
LABEL_31:
  v22 = v145;
  v145 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v146;
  v146 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = qword_1ECE7C4A0;
  v25 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v25)
  {
    WTF::String::utf8();
    v27 = v143 ? (char *)v143 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v27;
    _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v25 = (uint64_t)v143;
    v143 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        v25 = WTF::fastFree((WTF *)v25, v26);
      else
        --*(_DWORD *)v25;
    }
  }
  if (WebCore::LogMedia)
  {
    v28 = a2;
    v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v30 = *v29;
      if ((v30 & 1) != 0)
        break;
      v31 = __ldaxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 | 1, v29))
        {
          v136 = v5;
          v137 = a2;
          v32 = WTF::Logger::observers((WTF::Logger *)v25);
          v33 = *(unsigned int *)(v32 + 12);
          if ((_DWORD)v33)
          {
            v34 = *(uint64_t **)v32;
            v35 = *(_QWORD *)v32 + 8 * v33;
            do
            {
              v36 = *v34;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v139);
              v149 = 0;
              WTF::String::String((WTF::String *)&v150, "adding ");
              v151 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl += 2;
                *v8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_0::operator() const(void)::impl;
                v8[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl += 2;
                v8[2] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_2::operator() const(void)::impl;
                v8[3] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl += 2;
                v8[4] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_4::operator() const(void)::impl;
                v8[5] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_5::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl += 2;
                v8[6] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_6::operator() const(void)::impl;
                v8[7] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_7::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl += 2;
                v8[8] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSessionAction)::$_8::operator() const(void)::impl;
              }
              v37 = (WTF::StringImpl *)v8[v28];
              if (v37)
                *(_DWORD *)v37 += 2;
              v152 = v37;
              v143 = 0;
              v144 = 0;
              v38 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v144) = 3;
              v143 = v38;
              v39 = HIDWORD(v144);
              *((_DWORD *)v38 + 4 * HIDWORD(v144)) = buf;
              v40 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v38 + 2 * v39 + 1) = v40;
              *((_DWORD *)v38 + 4 * (v39 + 1)) = v149;
              v41 = v150;
              if (v150)
                *(_DWORD *)v150 += 2;
              *((_QWORD *)v38 + 2 * (v39 + 1) + 1) = v41;
              *((_DWORD *)v38 + 4 * (v39 + 2)) = v151;
              v42 = v152;
              if (v152)
                *(_DWORD *)v152 += 2;
              *((_QWORD *)v38 + 2 * (v39 + 2) + 1) = v42;
              HIDWORD(v144) = v39 + 3;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v36 + 16))(v36, &WebCore::LogMedia, 0, &v143);
              v43 = v143;
              if (HIDWORD(v144))
              {
                v44 = v8;
                v45 = 16 * HIDWORD(v144);
                v46 = (WTF::StringImpl **)((char *)v143 + 8);
                do
                {
                  v47 = *v46;
                  *v46 = 0;
                  if (v47)
                  {
                    if (*(_DWORD *)v47 == 2)
                      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v26);
                    else
                      *(_DWORD *)v47 -= 2;
                  }
                  v46 += 2;
                  v45 -= 16;
                }
                while (v45);
                v43 = v143;
                v8 = v44;
              }
              if (v43)
              {
                v143 = 0;
                LODWORD(v144) = 0;
                WTF::fastFree(v43, v26);
              }
              v48 = v152;
              v152 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v150;
              v150 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v50 -= 2;
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v35);
          }
          v51 = __ldxr(v29);
          if (v51 == 1)
          {
            a2 = v137;
            v5 = v136;
            if (!__stlxr(0, v29))
              break;
          }
          else
          {
            __clrex();
            a2 = v137;
            v5 = v136;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v60 = v147;
  v147 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v60 -= 2;
  }
LABEL_103:
  v61 = v4 + 160;
  if (__ldaxr(v4 + 160))
  {
    __clrex();
LABEL_106:
    MEMORY[0x19AEA534C](v4 + 160);
    goto LABEL_107;
  }
  if (__stxr(1u, v61))
    goto LABEL_106;
LABEL_107:
  v64 = (uint64_t *)(v4 + 120);
  v63 = *((_QWORD *)v4 + 15);
  if (v63
    || (WTF::HashTable<WebCore::MediaSessionAction,WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::HashMap<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>>::rehash((uint64_t *)v4 + 15, 8u), (v63 = *v64) != 0))
  {
    v65 = *(_DWORD *)(v63 - 8);
  }
  else
  {
    v65 = 0;
  }
  v66 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v67 = (v66 ^ (v66 >> 6)) + ~((v66 ^ (v66 >> 6)) << 11);
  v68 = v65 & (v67 ^ HIWORD(v67));
  v69 = (unsigned __int8 *)(v63 + 16 * v68);
  v70 = *v69;
  if (v70 == 255)
  {
LABEL_118:
    *v69 = a2;
    v73 = *v5;
    if (*v5)
      ++*(_DWORD *)(v73 + 16);
    v74 = (WebCore::PlatformMediaSessionManager *)*((_QWORD *)v69 + 1);
    *((_QWORD *)v69 + 1) = v73;
    if (v74)
    {
      if (*((_DWORD *)v74 + 4) == 1)
        v74 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)v74 + 16))(v74);
      else
        --*((_DWORD *)v74 + 4);
    }
    v75 = *v64;
    if (*v64)
      v76 = *(_DWORD *)(v75 - 12) + 1;
    else
      v76 = 1;
    *(_DWORD *)(v75 - 12) = v76;
    v77 = *v64;
    if (*v64)
      v78 = *(_DWORD *)(v77 - 12);
    else
      v78 = 0;
    v79 = (*(_DWORD *)(v77 - 16) + v78);
    v80 = *(unsigned int *)(v77 - 4);
    if (v80 > 0x400)
    {
      if (v80 > 2 * v79)
        goto LABEL_141;
    }
    else
    {
      if (3 * v80 > 4 * v79)
        goto LABEL_141;
      if (!(_DWORD)v80)
      {
        v81 = 8;
        goto LABEL_140;
      }
    }
    v81 = (_DWORD)v80 << (6 * *(_DWORD *)(v77 - 12) >= (2 * v80));
LABEL_140:
    v74 = (WebCore::PlatformMediaSessionManager *)WTF::HashTable<WebCore::MediaSessionAction,WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::HashMap<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>>::rehash((uint64_t *)v4 + 15, v81);
    goto LABEL_141;
  }
  v71 = 0;
  v72 = 1;
  while (v70 != a2)
  {
    if (v70 == 254)
      v71 = v69;
    v68 = (v68 + v72) & v65;
    v69 = (unsigned __int8 *)(v63 + 16 * v68);
    v70 = *v69;
    ++v72;
    if (v70 == 255)
    {
      if (v71)
      {
        *v71 = -1;
        *((_QWORD *)v71 + 1) = 0;
        --*(_DWORD *)(*v64 - 16);
        v69 = v71;
      }
      goto LABEL_118;
    }
  }
  v82 = *v5;
  if (*v5)
    ++*(_DWORD *)(v82 + 16);
  v74 = (WebCore::PlatformMediaSessionManager *)*((_QWORD *)v69 + 1);
  *((_QWORD *)v69 + 1) = v82;
  if (v74)
  {
    if (*((_DWORD *)v74 + 4) == 1)
      v74 = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)v74 + 16))(v74);
    else
      --*((_DWORD *)v74 + 4);
  }
LABEL_141:
  v83 = __ldxr(v61);
  if (v83 != 1)
  {
    __clrex();
    goto LABEL_145;
  }
  if (__stlxr(0, v61))
LABEL_145:
    v74 = (WebCore::PlatformMediaSessionManager *)WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 160));
  if (a2 > 8 || !WebCore::platformCommandForMediaSessionAction(WebCore::MediaSessionAction)::mappings[2 * a2 + 1])
    goto LABEL_268;
  v84 = *(void (**)(void))(*(_QWORD *)WebCore::PlatformMediaSessionManager::sharedManager(v74) + 232);
LABEL_267:
  v84();
LABEL_268:
  v134 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v134 = off_1E335CC28;
  *(_QWORD *)&buf = v134;
  ++*((_DWORD *)v4 + 6);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)v4 + 18, &buf);
  if (*((_DWORD *)v4 + 6) == 1)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v4 + 16))(v4);
  else
    --*((_DWORD *)v4 + 6);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSession::callActionHandler(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[4];

  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(WTF::StringImpl **)(a1 + 136);
  v14[0] = (WTF::StringImpl *)"MediaSession";
  v14[1] = (WTF::StringImpl *)13;
  v14[2] = (WTF::StringImpl *)"callActionHandler";
  v14[3] = v7;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  result = WebCore::MediaSession::callActionHandler(a1, a2, 0);
  v9 = *a3;
  if ((result & 1) != 0)
  {
    v10 = *(_QWORD *)(v9 + 24);
    if (v10 && *(_QWORD *)v10 && (*(_BYTE *)(v10 + 8) & 3) == 0)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11 || (*(_BYTE *)(v11 + 8) & 3) != 0)
        v12 = 0;
      else
        v12 = *(uint64_t **)v11;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v9, v12, 0, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v14);
    }
  }
  else
  {
    v14[0] = 0;
    WebCore::DeferredPromise::reject(v9, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v14, 0);
    result = (uint64_t)v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::MediaSession::callActionHandler(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  _DWORD *v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  WebCore::Node *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t v39;
  WebCore::Node *v41;
  char v42;
  _DWORD v43[2];
  __int128 v44;
  unsigned __int8 v45;
  __int16 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int8 *)(a1 + 160);
  if (__ldaxr((unsigned __int8 *)(a1 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 160);
LABEL_5:
  v8 = *(_QWORD *)(a1 + 120);
  if (!v8)
  {
LABEL_12:
    v16 = 0;
    goto LABEL_13;
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a2;
  v11 = 9 * ((~(v10 << 15) + v10) ^ ((~(v10 << 15) + v10) >> 10));
  v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
  v13 = (v12 ^ HIWORD(v12)) & v9;
  v14 = *(unsigned __int8 *)(v8 + 16 * v13);
  if (v14 != v10)
  {
    v15 = 1;
    while (v14 != 255)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(unsigned __int8 *)(v8 + 16 * v13);
      ++v15;
      if (v14 == v10)
        goto LABEL_10;
    }
    goto LABEL_12;
  }
LABEL_10:
  v16 = *(_DWORD **)(v8 + 16 * v13 + 8);
  if (v16)
  {
    v17 = 0;
    ++v16[4];
    goto LABEL_14;
  }
LABEL_13:
  v17 = 1;
LABEL_14:
  v18 = __ldxr(v6);
  if (v18 != 1)
  {
    __clrex();
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v16)
      goto LABEL_17;
    goto LABEL_28;
  }
  if (__stlxr(0, v6))
    goto LABEL_27;
  if (v16)
  {
LABEL_17:
    LOBYTE(v41) = 0;
    v42 = 0;
    if (a3 == 1)
    {
      v19 = *(_QWORD *)(a1 + 40);
      if (v19
        && (v20 = *(_QWORD *)(v19 + 8)) != 0
        && (v21 = *(_QWORD *)(v20 + 64)) != 0
        && (v22 = *(_QWORD *)(v21 + 8)) != 0
        && (v23 = *(_QWORD *)(v22 + 72)) != 0
        && (v24 = *(_QWORD *)(v23 + 8)) != 0)
      {
        if (*(_BYTE *)(v24 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x1954334A0);
        }
        v25 = v24 - 288;
      }
      else
      {
        v25 = 0;
      }
      LOBYTE(v44) = 0;
      v45 = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator((uint64_t *)&v41, 257, v25, 1, 0, &v44, 1);
      v42 = 1;
    }
    (*(void (**)(_DWORD *, unsigned __int8 *))(*(_QWORD *)v16 + 40))(v16, a2);
    if (v42)
      WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v41);
    v39 = 1;
    goto LABEL_46;
  }
LABEL_28:
  v26 = *(_QWORD *)(a1 + 40);
  if (!v26)
    goto LABEL_40;
  v27 = *(_QWORD *)(v26 + 8);
  if (!v27)
    goto LABEL_40;
  v28 = *(_QWORD *)(v27 + 64);
  if (!v28)
    goto LABEL_40;
  v29 = *(_QWORD *)(v28 + 8);
  if (!v29)
    goto LABEL_40;
  v30 = *(_QWORD *)(v29 + 72);
  if (!v30)
    goto LABEL_40;
  v31 = *(_QWORD *)(v30 + 8);
  if (!v31)
    goto LABEL_40;
  if (*(_BYTE *)(v31 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x195433480);
  }
  *(_DWORD *)(v31 - 264) += 2;
  WebCore::HTMLMediaElement::bestMediaElementForRemoteControls((WebCore::PlatformMediaSessionManager *)2, v31 - 288, &v41);
  if (*(_DWORD *)(v31 - 264) == 2)
  {
    if ((*(_WORD *)(v31 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v31 - 288), v32);
  }
  else
  {
    *(_DWORD *)(v31 - 264) -= 2;
  }
  v33 = v41;
  if (v41)
  {
    LOBYTE(v34) = *a2;
    v35 = 1;
    LOBYTE(v36) = *a2;
    v37 = *a2;
    v38 = *a2;
    switch(*a2)
    {
      case 0u:
        goto LABEL_58;
      case 1u:
        LOBYTE(v34) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        LOBYTE(v35) = 2;
        goto LABEL_58;
      case 2u:
        LOBYTE(v34) = 0;
        LOBYTE(v36) = 0;
        v38 = a2[8];
        v43[0] = *(_DWORD *)(a2 + 9);
        *(_DWORD *)((char *)v43 + 3) = *((_DWORD *)a2 + 3);
        v37 = a2[16];
        LOBYTE(v35) = 11;
        goto LABEL_58;
      case 3u:
        LOBYTE(v34) = 0;
        LOBYTE(v36) = 0;
        v38 = a2[8];
        v43[0] = *(_DWORD *)(a2 + 9);
        *(_DWORD *)((char *)v43 + 3) = *((_DWORD *)a2 + 3);
        v37 = a2[16];
        LOBYTE(v35) = 10;
        goto LABEL_58;
      case 4u:
        LOBYTE(v34) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        LOBYTE(v35) = 13;
        goto LABEL_58;
      case 5u:
        LOBYTE(v34) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        LOBYTE(v35) = 12;
        goto LABEL_58;
      case 7u:
        LOBYTE(v34) = 0;
        LOBYTE(v36) = 0;
        v37 = 0;
        v38 = 0;
        LOBYTE(v35) = 3;
        goto LABEL_58;
      case 8u:
        v38 = a2[24];
        v43[0] = *(_DWORD *)(a2 + 25);
        *(_DWORD *)((char *)v43 + 3) = *((_DWORD *)a2 + 7);
        v37 = a2[32];
        v36 = *((unsigned __int16 *)a2 + 20);
        v34 = v36 >> 8;
        LOBYTE(v35) = 9;
LABEL_58:
        LOBYTE(v44) = v35;
        BYTE8(v44) = v38;
        *(_DWORD *)((char *)&v44 + 9) = v43[0];
        HIDWORD(v44) = *(_DWORD *)((char *)v43 + 3);
        v45 = v37;
        v46 = v36 | (v34 << 8);
        v39 = 1;
        v47 = 1;
        (*(void (**)(WebCore::Node *))(*(_QWORD *)v41 + 1912))(v41);
        break;
      default:
        v39 = 0;
        break;
    }
    if (*((_DWORD *)v33 + 6) == 2)
    {
      if ((*((_WORD *)v33 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v33, (void *)v35);
    }
    else
    {
      *((_DWORD *)v33 + 6) -= 2;
    }
  }
  else
  {
LABEL_40:
    v39 = 0;
  }
LABEL_46:
  if ((v17 & 1) == 0)
  {
    if (v16[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
    else
      --v16[4];
  }
  return v39;
}

WTF::StringImpl *WebCore::MediaSession::setPositionState@<X0>(WTF::StringImpl *result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  NSObject *v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::Logger *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::Logger *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int v69;
  double v70;
  BOOL v71;
  __int128 v72;
  uint64_t v73;
  _QWORD *v74;
  WTF::StringImpl *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  WTF::Logger *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  __int128 buf;
  int v86;
  WTF::StringImpl *v87[3];

  v4 = result;
  v87[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)result + 16);
  if (!*((_BYTE *)a2 + 24))
  {
    v23 = *((_QWORD *)result + 17);
    v76 = "MediaSession";
    v77 = 13;
    v78 = "setPositionState";
    v79 = v23;
    if (!*(_BYTE *)(v6 + 12))
      goto LABEL_127;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
    WTF::String::String((WTF::String *)&v82, "{ }");
    if (v83)
    {
      v24 = *((_DWORD *)v83 + 1);
      if (v82)
      {
LABEL_36:
        v25 = *((_DWORD *)v82 + 1);
LABEL_37:
        if ((v25 | v24) < 0 || (v26 = (v24 + v25), __OFADD__(v24, v25)))
        {
          v84 = 0;
          goto LABEL_166;
        }
        if (v83)
        {
          v27 = *((_DWORD *)v83 + 4);
          v28 = (v27 >> 2) & 1;
          if (v82 && (v27 & 4) != 0)
            goto LABEL_42;
        }
        else
        {
          if (v82)
          {
LABEL_42:
            v28 = (*((unsigned __int8 *)v82 + 16) >> 2) & 1;
            goto LABEL_43;
          }
          v28 = 1;
        }
LABEL_43:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v26, v28, (uint64_t)v83, (uint64_t)v82, &v84);
        if (v84)
        {
          v30 = v82;
          v82 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v29);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = v83;
          v83 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v29);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = qword_1ECE7C4A0;
          v33 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v33)
          {
            WTF::String::utf8();
            v34 = v80 ? (char *)v80 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v34;
            _os_log_impl(&dword_1940B8000, v32, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v33 = (uint64_t)v80;
            v80 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
                v33 = WTF::fastFree((WTF *)v33, v18);
              else
                --*(_DWORD *)v33;
            }
          }
          if (WebCore::LogMedia)
          {
            v35 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v36 = *v35;
              if ((v36 & 1) != 0)
                break;
              v37 = __ldaxr(v35);
              if (v37 == v36)
              {
                if (!__stxr(v36 | 1, v35))
                {
                  v75 = v4;
                  v54 = WTF::Logger::observers((WTF::Logger *)v33);
                  v55 = *(unsigned int *)(v54 + 12);
                  if ((_DWORD)v55)
                  {
                    v56 = *(uint64_t **)v54;
                    v57 = *(_QWORD *)v54 + 8 * v55;
                    do
                    {
                      v58 = *v56;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
                      v86 = 0;
                      WTF::String::String((WTF::String *)v87, "{ }");
                      v80 = 0;
                      v81 = 0;
                      v59 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v81) = 2;
                      v80 = v59;
                      v60 = HIDWORD(v81);
                      *((_DWORD *)v59 + 4 * HIDWORD(v81)) = buf;
                      v61 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v59 + 2 * v60 + 1) = v61;
                      *((_DWORD *)v59 + 4 * (v60 + 1)) = v86;
                      v62 = v87[0];
                      if (v87[0])
                        *(_DWORD *)v87[0] += 2;
                      *((_QWORD *)v59 + 2 * (v60 + 1) + 1) = v62;
                      HIDWORD(v81) = v60 + 2;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v58 + 16))(v58, &WebCore::LogMedia, 0, &v80);
                      v63 = v80;
                      if (HIDWORD(v81))
                      {
                        v64 = 16 * HIDWORD(v81);
                        v65 = (WTF::StringImpl **)((char *)v80 + 8);
                        do
                        {
                          v66 = *v65;
                          *v65 = 0;
                          if (v66)
                          {
                            if (*(_DWORD *)v66 == 2)
                              WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v18);
                            else
                              *(_DWORD *)v66 -= 2;
                          }
                          v65 += 2;
                          v64 -= 16;
                        }
                        while (v64);
                        v63 = v80;
                      }
                      if (v63)
                      {
                        v80 = 0;
                        LODWORD(v81) = 0;
                        WTF::fastFree(v63, v18);
                      }
                      v67 = v87[0];
                      v87[0] = 0;
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2)
                          WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v18);
                        else
                          *(_DWORD *)v67 -= 2;
                      }
                      v68 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v68)
                      {
                        if (*(_DWORD *)v68 == 2)
                          WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v18);
                        else
                          *(_DWORD *)v68 -= 2;
                      }
                      ++v56;
                    }
                    while (v56 != (uint64_t *)v57);
                  }
                  v69 = __ldxr(v35);
                  if (v69 == 1)
                  {
                    v4 = v75;
                    if (!__stlxr(0, v35))
                      goto LABEL_124;
                  }
                  else
                  {
LABEL_122:
                    __clrex();
                    v4 = v75;
                  }
LABEL_123:
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  goto LABEL_124;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          goto LABEL_124;
        }
LABEL_166:
        __break(0xC471u);
        JUMPOUT(0x195433DC8);
      }
    }
    else
    {
      v24 = 0;
      if (v82)
        goto LABEL_36;
    }
    v25 = 0;
    goto LABEL_37;
  }
  v7 = *((_QWORD *)result + 17);
  v76 = "MediaSession";
  v77 = 13;
  v78 = "setPositionState";
  v79 = v7;
  if (!*(_BYTE *)(v6 + 12))
    goto LABEL_127;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
  WebCore::MediaPositionState::toJSONString((WebCore::MediaPositionState *)&v82, (double *)a2);
  if (!v83)
  {
    v8 = 0;
    if (v82)
      goto LABEL_5;
LABEL_154:
    v9 = 0;
    goto LABEL_6;
  }
  v8 = *((_DWORD *)v83 + 1);
  if (!v82)
    goto LABEL_154;
LABEL_5:
  v9 = *((_DWORD *)v82 + 1);
LABEL_6:
  if ((v9 | v8) < 0 || (v10 = (v8 + v9), __OFADD__(v8, v9)))
  {
    v84 = 0;
    goto LABEL_166;
  }
  if (v83)
  {
    v11 = *((_DWORD *)v83 + 4);
    v12 = (v11 >> 2) & 1;
    if (v82 && (v11 & 4) != 0)
      goto LABEL_11;
  }
  else
  {
    if (v82)
    {
LABEL_11:
      v12 = (*((unsigned __int8 *)v82 + 16) >> 2) & 1;
      goto LABEL_12;
    }
    v12 = 1;
  }
LABEL_12:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v83, (uint64_t)v82, &v84);
  if (!v84)
    goto LABEL_166;
  v14 = v82;
  v82 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v83;
  v83 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = qword_1ECE7C4A0;
  v17 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v80 ? (char *)v80 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v80;
    v80 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (WebCore::LogMedia)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v75 = v4;
          v38 = WTF::Logger::observers((WTF::Logger *)v17);
          v39 = *(unsigned int *)(v38 + 12);
          if ((_DWORD)v39)
          {
            v40 = *(uint64_t **)v38;
            v41 = *(_QWORD *)v38 + 8 * v39;
            do
            {
              v42 = *v40;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
              v86 = 1;
              WebCore::MediaPositionState::toJSONString((WebCore::MediaPositionState *)v87, (double *)a2);
              v80 = 0;
              v81 = 0;
              v43 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v81) = 2;
              v80 = v43;
              v44 = HIDWORD(v81);
              *((_DWORD *)v43 + 4 * HIDWORD(v81)) = buf;
              v45 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v43 + 2 * v44 + 1) = v45;
              *((_DWORD *)v43 + 4 * (v44 + 1)) = v86;
              v46 = v87[0];
              if (v87[0])
                *(_DWORD *)v87[0] += 2;
              *((_QWORD *)v43 + 2 * (v44 + 1) + 1) = v46;
              HIDWORD(v81) = v44 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v42 + 16))(v42, &WebCore::LogMedia, 0, &v80);
              v47 = v80;
              if (HIDWORD(v81))
              {
                v48 = 16 * HIDWORD(v81);
                v49 = (WTF::StringImpl **)((char *)v80 + 8);
                do
                {
                  v50 = *v49;
                  *v49 = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  v49 += 2;
                  v48 -= 16;
                }
                while (v48);
                v47 = v80;
              }
              if (v47)
              {
                v80 = 0;
                LODWORD(v81) = 0;
                WTF::fastFree(v47, v18);
              }
              v51 = v87[0];
              v87[0] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v52 -= 2;
              }
              ++v40;
            }
            while (v40 != (uint64_t *)v41);
          }
          v53 = __ldxr(v20);
          if (v53 != 1)
            goto LABEL_122;
          v4 = v75;
          if (__stlxr(0, v20))
            goto LABEL_123;
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
LABEL_124:
  result = v84;
  v84 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_127:
  if (*((_BYTE *)a2 + 24))
  {
    if (*(double *)a2 < 0.0
      || ((v70 = *((double *)a2 + 2), v70 >= 0.0) ? (v71 = v70 > *(double *)a2) : (v71 = 1),
          v71 || (*((_QWORD *)a2 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 1) == 0.0))
    {
      *(_BYTE *)a3 = 33;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    v72 = *a2;
    *(_OWORD *)((char *)v4 + 73) = *(__int128 *)((char *)a2 + 9);
    *((_OWORD *)v4 + 4) = v72;
    if (!*((_BYTE *)v4 + 88))
      __break(1u);
    *((_QWORD *)v4 + 12) = *((_QWORD *)v4 + 10);
    *((_BYTE *)v4 + 104) = 1;
    WTF::MonotonicTime::now(result);
    *((_QWORD *)v4 + 14) = v73;
  }
  else if (*((_BYTE *)v4 + 88))
  {
    *((_BYTE *)v4 + 88) = 0;
  }
  v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v74 = off_1E335CBD8;
  v74[1] = v4;
  *(_QWORD *)&buf = v74;
  ++*((_DWORD *)v4 + 6);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)v4 + 18, &buf);
  if (*((_DWORD *)v4 + 6) == 1)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v4 + 16))(v4);
  else
    --*((_DWORD *)v4 + 6);
  result = (WTF::StringImpl *)buf;
  *(_QWORD *)&buf = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WebCore::MediaSession::currentPosition(WebCore::MediaSession *this)
{
  double v2;
  uint64_t result;
  double v4;
  double v5;

  if (!*((_BYTE *)this + 88) || !*((_BYTE *)this + 104))
    return 0;
  v2 = 0.0;
  if (*((_BYTE *)this + 56) == 2)
    v2 = *((double *)this + 9);
  result = WTF::MonotonicTime::now(this);
  if (*((_BYTE *)this + 104) && *((_BYTE *)this + 88))
  {
    v5 = *((double *)this + 12) + v2 * (v4 - *((double *)this + 14));
    if (*((double *)this + 8) < v5)
      v5 = *((double *)this + 8);
    return fmax(v5, 0.0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t **v4;
  void *v5;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int j;
  uint64_t v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (*result)
  {
    v2 = *((unsigned int *)*result - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
        v7 = *v4;
        if (*v4 && *((_DWORD *)v7 - 3))
        {
          v8 = *((unsigned int *)v7 - 1);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *v4; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return (uint64_t **)WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *v4;
          }
          v11 = &v7[v8];
          if (i != v11)
          {
            v12 = 0;
            v13 = *i;
LABEL_15:
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
            {
              v15 = *(_QWORD *)(v14 + 8);
              if (v15)
                goto LABEL_51;
              v15 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v15 = 1;
              *(_QWORD *)(v15 + 8) = v14;
              v16 = *(unsigned int **)(v14 + 8);
              *(_QWORD *)(v14 + 8) = v15;
              if (!v16)
                goto LABEL_51;
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                WTF::fastFree((WTF *)v16, v5);
              }
              v15 = *(_QWORD *)(v14 + 8);
              if (v15)
              {
LABEL_51:
                do
                  v19 = __ldaxr((unsigned int *)v15);
                while (__stlxr(v19 + 1, (unsigned int *)v15));
              }
            }
            else
            {
              v15 = 0;
            }
            v20 = v12 + 1;
            *((_QWORD *)v6 + v12) = v15;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v12;
                if (i != v11)
                  goto LABEL_15;
                break;
              }
            }
            if (v20)
            {
              v21 = (_QWORD *)((char *)v6 + 8 * v20);
              v22 = v6;
              do
              {
                v23 = *(_QWORD *)v22;
                if (*(_QWORD *)v22)
                {
                  v5 = *(void **)(v23 + 8);
                  if (v5)
                  {
                    v24 = *v4;
                    if (*v4)
                    {
                      v25 = *((_DWORD *)v24 - 2);
                      v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
                      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
                      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
                      v29 = v25 & ((v28 >> 31) ^ v28);
                      for (j = 1; ; ++j)
                      {
                        v31 = v24[v29];
                        if (v31 != -1)
                        {
                          if (!v31)
                            goto LABEL_40;
                          if (v31 == v23)
                            break;
                        }
                        v29 = (v29 + j) & v25;
                      }
                      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
                    }
                  }
                }
LABEL_40:
                v22 = (WTF *)((char *)v22 + 8);
              }
              while (v22 != (WTF *)v21);
              v32 = (unsigned int **)v6;
              do
              {
                v33 = *v32;
                *v32 = 0;
                if (v33)
                {
                  do
                  {
                    v34 = __ldaxr(v33);
                    v35 = v34 - 1;
                  }
                  while (__stlxr(v35, v33));
                  if (!v35)
                  {
                    atomic_store(1u, v33);
                    WTF::fastFree((WTF *)v33, v5);
                  }
                }
                ++v32;
              }
              while (v32 != v21);
            }
          }
        }
        return (uint64_t **)WTF::fastFree(v6, v5);
      }
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::MediaSession::willBeginPlayback(WebCore::MediaSession *this)
{
  double v2;
  WTF::MonotonicTime *result;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  WTF::MonotonicTime *v8;
  WTF::MonotonicTime *v9;

  if (*((_BYTE *)this + 88) && *((_BYTE *)this + 104))
  {
    v2 = 0.0;
    if (*((_BYTE *)this + 56) == 2)
      v2 = *((double *)this + 9);
    result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
    if (!*((_BYTE *)this + 104) || !*((_BYTE *)this + 88))
    {
      __break(1u);
      return result;
    }
    v5 = *((double *)this + 12) + v2 * (v4 - *((double *)this + 14));
    if (*((double *)this + 8) < v5)
      v5 = *((double *)this + 8);
    v6 = fmax(v5, 0.0);
    *((double *)this + 10) = v6;
    *((double *)this + 12) = v6;
    *((_BYTE *)this + 104) = 1;
    WTF::MonotonicTime::now(result);
    *((_QWORD *)this + 14) = v7;
  }
  *((_BYTE *)this + 56) = 2;
  v8 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E335CBD8;
  *((_QWORD *)v8 + 1) = this;
  v9 = v8;
  ++*((_DWORD *)this + 6);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 18, &v9);
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::MediaSession *))(*(_QWORD *)this + 16))(this);
  else
    --*((_DWORD *)this + 6);
  result = v9;
  v9 = 0;
  if (result)
    return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::MonotonicTime *WebCore::MediaSession::willPausePlayback(WebCore::MediaSession *this)
{
  double v2;
  WTF::MonotonicTime *result;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  WTF::MonotonicTime *v8;
  WTF::MonotonicTime *v9;

  if (*((_BYTE *)this + 88) && *((_BYTE *)this + 104))
  {
    v2 = 0.0;
    if (*((_BYTE *)this + 56) == 2)
      v2 = *((double *)this + 9);
    result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(this);
    if (!*((_BYTE *)this + 104) || !*((_BYTE *)this + 88))
    {
      __break(1u);
      return result;
    }
    v5 = *((double *)this + 12) + v2 * (v4 - *((double *)this + 14));
    if (*((double *)this + 8) < v5)
      v5 = *((double *)this + 8);
    v6 = fmax(v5, 0.0);
    *((double *)this + 10) = v6;
    *((double *)this + 12) = v6;
    *((_BYTE *)this + 104) = 1;
    WTF::MonotonicTime::now(result);
    *((_QWORD *)this + 14) = v7;
  }
  *((_BYTE *)this + 56) = 1;
  v8 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E335CBD8;
  *((_QWORD *)v8 + 1) = this;
  v9 = v8;
  ++*((_DWORD *)this + 6);
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 18, &v9);
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::MediaSession *))(*(_QWORD *)this + 16))(this);
  else
    --*((_DWORD *)this + 6);
  result = v9;
  v9 = 0;
  if (result)
    return (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSession::updateNowPlayingInfo(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  _DWORD *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29[2];
  _DWORD *v30;
  WTF::StringImpl *v31[2];
  _DWORD *v32;
  char v33;

  v3 = result;
  if (*(_BYTE *)(result + 88))
  {
    v4 = *(double *)(result + 72);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(result + 64);
    *(double *)(a2 + 80) = v4;
    if (*(_BYTE *)(result + 104))
    {
      if (*(_BYTE *)(result + 56) == 2)
        v5 = v4;
      else
        v5 = 0.0;
      result = WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      if (!*(_BYTE *)(v3 + 104) || !*(_BYTE *)(v3 + 88))
      {
        __break(1u);
        return result;
      }
      v7 = *(double *)(v3 + 96) + v5 * (v6 - *(double *)(v3 + 112));
      if (*(double *)(v3 + 64) < v7)
        v7 = *(double *)(v3 + 64);
      *(double *)(a2 + 72) = fmax(v7, 0.0);
    }
  }
  v8 = *(_QWORD *)(v3 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
    {
      v10 = *(WTF::StringImpl **)(v8 + 64);
      if (v10)
        *(_DWORD *)v10 += 2;
      v29[0] = v10;
      v11 = *(_QWORD *)(v9 + 32);
      if (v11 && (v12 = *(_DWORD **)(v11 + 8)) != 0)
      {
        v12[2] += 2;
        (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v12 + 24))(&v29[1], v12);
        v13 = v12[2] - 1;
        if (v12[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          v13 = v12[2];
        }
        else
        {
          v12[2] = v13;
        }
        v14 = v13 - 1;
        if (v14)
          v12[2] = v14;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      }
      else
      {
        v28 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v28 += 2;
        v29[1] = v28;
      }
      v15 = *(_DWORD **)(*(_QWORD *)(v3 + 48) + 72);
      if (v15)
        ++v15[2];
      v16 = *(_OWORD *)v29;
      v29[1] = 0;
      *(_OWORD *)v31 = v16;
      v30 = 0;
      v32 = v15;
      v33 = 1;
      std::__optional_storage_base<WebCore::NowPlayingInfoArtwork,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NowPlayingInfoArtwork,false>>(a2 + 32, (WTF::StringImpl *)v31);
      if (v33)
      {
        v18 = v32;
        v32 = 0;
        if (v18)
        {
          if (v18[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          else
            --v18[2];
        }
        v19 = v31[1];
        v31[1] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v17);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v31[0];
        v31[0] = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v17);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      v21 = v30;
      v30 = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      v22 = v29[1];
      v29[1] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v17);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = *(_DWORD **)(*(_QWORD *)(v3 + 48) + 16);
      if (v23)
        *v23 += 2;
      v24 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v17);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = *(_DWORD **)(*(_QWORD *)(v3 + 48) + 24);
      if (v25)
        *v25 += 2;
      v26 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v17);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = *(_DWORD **)(*(_QWORD *)(v3 + 48) + 32);
      if (v27)
        *v27 += 2;
      result = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v27;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::MediaPositionState::toJSONString(WebCore::MediaPositionState *this, double *a2)
{
  WTF::JSONImpl::Value *v3;
  WTF::JSONImpl::Value *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::JSONImpl::Value *v12;
  WTF::JSONImpl::Value *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::JSONImpl::Value *v21;
  WTF::JSONImpl::Value *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::JSONImpl::Value *result;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  WTF::JSONImpl::Value *v41;
  _DWORD *v42;
  _QWORD v43[2];
  char v44;

  WTF::JSONImpl::Object::create(this);
  v3 = v41;
  v4 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v4, *a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v41 + 2, &v40, (const WTF::StringImpl *)&v42, (uint64_t)v43);
  if (v44)
  {
    v6 = (uint64_t *)((char *)v3 + 24);
    v7 = *((unsigned int *)v3 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v3 + 8))
    {
      v31 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v40);
      v7 = *((unsigned int *)v3 + 9);
      v32 = *((_QWORD *)v3 + 3);
      v33 = *v31;
      if (*v31)
        *v33 += 2;
      *(_QWORD *)(v32 + 8 * v7) = v33;
    }
    else
    {
      v8 = *v6;
      v9 = v40;
      if (v40)
        *(_DWORD *)v40 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)v3 + 9) = v7 + 1;
  }
  v10 = v42;
  v42 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v40;
  v40 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v41;
  v13 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v40 = (WTF::StringImpl *)v43[0];
  WTF::JSONImpl::Value::create(v13, a2[1]);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v12 + 2, &v40, (const WTF::StringImpl *)&v42, (uint64_t)v43);
  if (v44)
  {
    v15 = (uint64_t *)((char *)v12 + 24);
    v16 = *((unsigned int *)v12 + 9);
    if ((_DWORD)v16 == *((_DWORD *)v12 + 8))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v40);
      v16 = *((unsigned int *)v12 + 9);
      v35 = *((_QWORD *)v12 + 3);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v16) = v36;
    }
    else
    {
      v17 = *v15;
      v18 = v40;
      if (v40)
        *(_DWORD *)v40 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *((_DWORD *)v12 + 9) = v16 + 1;
  }
  v19 = v42;
  v42 = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  v20 = v40;
  v40 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v41;
  v22 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v22, a2[2]);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v21 + 2, &v40, (const WTF::StringImpl *)&v42, (uint64_t)v43);
  if (v44)
  {
    v24 = (uint64_t *)((char *)v21 + 24);
    v25 = *((unsigned int *)v21 + 9);
    if ((_DWORD)v25 == *((_DWORD *)v21 + 8))
    {
      v37 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v40);
      v25 = *((unsigned int *)v21 + 9);
      v38 = *((_QWORD *)v21 + 3);
      v39 = *v37;
      if (*v37)
        *v39 += 2;
      *(_QWORD *)(v38 + 8 * v25) = v39;
    }
    else
    {
      v26 = *v24;
      v27 = v40;
      if (v40)
        *(_DWORD *)v40 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *((_DWORD *)v21 + 9) = v25 + 1;
  }
  v28 = v42;
  v42 = 0;
  if (v28)
  {
    if (*v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v28;
  }
  v29 = v40;
  v40 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v23);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::JSONImpl::Value::toJSONString(v41);
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::MediaRecorder::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::MediaRecorder *WebCore::MediaRecorder::deref(WebCore::MediaRecorder *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder(this);
    return (WebCore::MediaRecorder *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::MediaRecorder::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::MediaRecorder *WebCore::MediaRecorder::derefEventTarget(WebCore::MediaRecorder *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder(this);
    return (WebCore::MediaRecorder *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::MediaRecorder::eventTargetInterface(WebCore::MediaRecorder *this)
{
  return 5;
}

_QWORD *WebCore::MediaRecorder::didAddTrack(WebCore::MediaRecorder *this, WebCore::MediaStreamTrackPrivate *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E335CAB0;
  v3[1] = this;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this + 6);
  *(_QWORD *)(v4 + 8) = this;
  ++*((_QWORD *)this + 2);
  *((_DWORD *)this + 6) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E335C950;
  result[1] = this;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v11 = 0;
    v10 = off_1E335C950;
    return (_QWORD *)v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 11, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = (uint64_t (**)())*result;
    return (_QWORD *)v10[1]();
  }
  return result;
}

_QWORD *WebCore::MediaRecorder::didRemoveTrack(WebCore::MediaRecorder *this, WebCore::MediaStreamTrackPrivate *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E335CAB0;
  v3[1] = this;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this + 6);
  *(_QWORD *)(v4 + 8) = this;
  ++*((_QWORD *)this + 2);
  *((_DWORD *)this + 6) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E335C950;
  result[1] = this;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v11 = 0;
    v10 = off_1E335C950;
    return (_QWORD *)v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 11, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = (uint64_t (**)())*result;
    return (_QWORD *)v10[1]();
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorder::eventTargetInterface(WebCore::MediaRecorder *this)
{
  return 5;
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorder::scriptExecutionContext(WebCore::MediaRecorder *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorder::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaRecorder::derefEventTarget(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)(this - 32));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::MediaRecorder::didAddTrack(WebCore::MediaRecorder *this, WebCore::MediaStreamTrackPrivate *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  _QWORD *v12;

  v3 = (char *)this - 56;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E335CAB0;
  v4[1] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *((_DWORD *)this - 8);
  *(_QWORD *)(v5 + 8) = v3;
  ++*((_QWORD *)this - 5);
  *((_DWORD *)this - 8) = v6 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E335C950;
  result[1] = v3;
  result[2] = v5;
  result[3] = v4;
  v12 = result;
  v8 = *((_QWORD *)this - 6);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E335C950;
    return (_QWORD *)v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = (uint64_t (**)())*result;
    return (_QWORD *)v11[1]();
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::MediaRecorder::didRemoveTrack(WebCore::MediaRecorder *this, WebCore::MediaStreamTrackPrivate *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  _QWORD *v12;

  v3 = (char *)this - 56;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E335CAB0;
  v4[1] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *((_DWORD *)this - 8);
  *(_QWORD *)(v5 + 8) = v3;
  ++*((_QWORD *)this - 5);
  *((_DWORD *)this - 8) = v6 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E335C950;
  result[1] = v3;
  result[2] = v5;
  result[3] = v4;
  v12 = result;
  v8 = *((_QWORD *)this - 6);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E335C950;
    return (_QWORD *)v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = (uint64_t (**)())*result;
    return (_QWORD *)v11[1]();
  }
  return result;
}

uint64_t WebCore::CachedImageClient::canDestroyDecodedData(WebCore::CachedImageClient *this)
{
  return 1;
}

uint64_t WebCore::CachedImageClient::imageVisibleInViewport(WebCore::CachedImageClient *this, const WebCore::Document *a2)
{
  return 2;
}

uint64_t WebCore::MediaSession::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::MediaSession::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

void WebCore::BlobEvent::~BlobEvent(WebCore::BlobEvent *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::MediaRecorderErrorEvent::~MediaRecorderErrorEvent(WebCore::MediaRecorderErrorEvent *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::MediaControlsHost::displayNameForTrack(std::optional<std::variant<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>> const&>(WebCore::Page ***a1, _QWORD *a2)
{
  WebCore::Page *v3;
  uint64_t v4;
  WebCore::PageGroup *v5;
  WebCore::CaptionUserPreferencesMediaAF *v6;
  WebCore::CaptionUserPreferencesMediaAF *v7;
  _DWORD *v8;
  uint64_t v10;

  v3 = **a1;
  v4 = *((_QWORD *)v3 + 66);
  if (!v4 || (v5 = *(WebCore::PageGroup **)(v4 + 8)) == 0)
  {
    WebCore::Page::initGroup(**a1);
    v10 = *((_QWORD *)v3 + 66);
    if (v10)
      v5 = *(WebCore::PageGroup **)(v10 + 8);
    else
      v5 = 0;
  }
  v6 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v5 + 5);
  if (!v6)
  {
    v7 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
    v6 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v7, v5);
    v8 = (_DWORD *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = v6;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v6 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v5 + 5);
      }
      else
      {
        --v8[2];
      }
    }
  }
  return (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)v6 + 176))(v6, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::MediaControlsHost::displayNameForTrack(std::optional<std::variant<WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>>> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>>,WTF::RefPtr<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>>> const&>(WebCore::Page ***a1, _QWORD *a2)
{
  WebCore::Page *v3;
  uint64_t v4;
  WebCore::PageGroup *v5;
  WebCore::CaptionUserPreferencesMediaAF *v6;
  WebCore::CaptionUserPreferencesMediaAF *v7;
  _DWORD *v8;
  uint64_t v10;

  v3 = **a1;
  v4 = *((_QWORD *)v3 + 66);
  if (!v4 || (v5 = *(WebCore::PageGroup **)(v4 + 8)) == 0)
  {
    WebCore::Page::initGroup(**a1);
    v10 = *((_QWORD *)v3 + 66);
    if (v10)
      v5 = *(WebCore::PageGroup **)(v10 + 8);
    else
      v5 = 0;
  }
  v6 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v5 + 5);
  if (!v6)
  {
    v7 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
    v6 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v7, v5);
    v8 = (_DWORD *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = v6;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v6 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v5 + 5);
      }
      else
      {
        --v8[2];
      }
    }
  }
  return (*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *, _QWORD))(*(_QWORD *)v6 + 192))(v6, *a2);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::variant<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag,WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&<WebCore::TextTrack,WebCore::VoidCallback<WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>,WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&<WebCore::VTTCue,WebCore::VoidCallback<WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>,WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::PictureInPictureTag>>>>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>>,WTF::KeyValuePairKeyExtractor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed,WTF::KeyValuePairKeyExtractor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag>,WTF::HashTraits<unsigned long long>,WTF::DefaultHash<unsigned long long><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashMap>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v37;
  char v38;
  char v39;
  char v40;

  v1 = *a1;
  if (*a1)
  {
    v2 = *(_DWORD *)(v1 - 4);
    v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      v4 = v2 << (6 * v3 >= 2 * v2);
      goto LABEL_6;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v4 = 8;
LABEL_6:
  result = WTF::fastMalloc((WTF *)(24 * v4 + 16));
  if (v4)
  {
    v7 = v4;
    v8 = (_DWORD *)(result + 32);
    do
    {
      *((_QWORD *)v8 - 2) = 0;
      *(v8 - 2) = 0;
      *v8 = 0;
      v8 += 6;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    v9 = 0;
    v10 = v2;
    do
    {
      v11 = (uint64_t *)(v1 + 24 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = (_QWORD *)(v17 + 24 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (*v25);
          v26 = v24;
          v27 = v17 + 24 * v24;
          v30 = *(_DWORD *)(v27 + 16);
          v29 = (_DWORD *)(v27 + 16);
          v28 = v30;
          if (v30 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E335C6A8[v28])(&v38, v17 + 24 * v24 + 8);
            v12 = *v11;
          }
          v31 = v17 + 24 * v26;
          *(_BYTE *)(v31 + 8) = 0;
          v6 = (void *)(v31 + 8);
          *v25 = v12;
          *v29 = -1;
          v32 = v1 + 24 * v9;
          v34 = *(_DWORD *)(v32 + 16);
          v15 = (_DWORD *)(v32 + 16);
          v33 = v34;
          if (v34 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_1E335C6D8[v33])(&v39, v6, v1 + 24 * v9 + 8);
            *v29 = v33;
            v35 = *v15;
            if ((_DWORD)v35 != -1)
              ((void (*)(char *, uint64_t))off_1E335C6A8[v35])(&v40, v1 + 24 * v9 + 8);
          }
        }
        else
        {
          v13 = v1 + 24 * v9;
          v16 = *(_DWORD *)(v13 + 16);
          v15 = (_DWORD *)(v13 + 16);
          v14 = v16;
          if (v16 != -1)
            ((void (*)(char *, uint64_t))off_1E335C6A8[v14])(&v37, v1 + 24 * v9 + 8);
        }
        *v15 = -1;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v1)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v1 - 16), v6);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSN_SS_SW_S10_S11_S12_EEEEEEDcS16_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSN_SS_SW_S10_S11_S12_EEEEEEDcS16_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSN_SS_SW_S10_S11_S12_EEEEEEDcS16_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1A_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEEOS1I_EEEDcS1A_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1J_EEEDcS1B_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E335C6A8[v5])(&v6, v4);
  }
  v4[2] = -1;
  *v4 = *a3;
  v4[2] = 0;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1J_EEEDcS1B_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_DWORD *)*a3;
      if (*a3)
        ++v6[4];
      result = *a2;
      *a2 = v6;
      if (result)
      {
        if (result[4] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
      return result;
    }
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E335C6A8[v5])(&v8, v4);
  }
  v7 = (_DWORD *)*a3;
  if (*a3)
    ++v7[4];
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1J_EEEDcS1B_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v6 = (_DWORD *)*a3;
      if (*a3)
        ++v6[4];
      result = *a2;
      *a2 = v6;
      if (result)
      {
        if (result[4] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[4];
      }
      return result;
    }
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E335C6A8[v5])(&v8, v4);
  }
  v7 = (_DWORD *)*a3;
  if (*a3)
    ++v7[4];
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1J_EEEDcS1B_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = (_DWORD *)*a3;
      if (*a3)
        ++v6[6];
      result = *a2;
      *a2 = v6;
      if (result)
      {
        if (result[6] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
        else
          --result[6];
      }
      return result;
    }
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E335C6A8[v5])(&v8, v4);
  }
  v7 = (_DWORD *)*a3;
  if (*a3)
    ++v7[6];
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 8) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1J_EEEDcS1B_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E335C6A8[v5])(&v6, v4);
  }
  v4[2] = -1;
  *v4 = *a3;
  v4[2] = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS1B_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1J_EEEDcS1B_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E335C6A8[v5])(&v6, v4);
  }
  v4[2] = -1;
  *v4 = *a3;
  v4[2] = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN7WebCore20MediaRecorderPrivateENS_14default_deleteISA_EEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN7WebCore20MediaRecorderPrivateENS_14default_deleteISA_EEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_11CachedImageEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_11CachedImageEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *,false>(uint64_t result, WTF::StringImpl *a2, uint64_t a3, char a4)
{
  WTF::StringImpl *v6;
  float *v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  float *v31;
  float v32;
  float v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  BOOL v37;
  float *v38;
  float v39;
  WTF::StringImpl *v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  float *v47;
  float v48;
  float v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  float v52;
  uint64_t v53;
  float *v54;
  BOOL v56;
  uint64_t v57;
  float *v58;
  float *v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  float *v72;
  float *v73;
  float v74;
  float v75;
  float *v76;
  uint64_t v77;
  float *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  float *v88;
  float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  unint64_t v97;
  float *v98;
  float v99;
  float v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  WTF::StringImpl *v115;
  uint64_t *v117;
  float *v118;

  v6 = a2;
  v7 = (float *)result;
LABEL_2:
  v118 = (float *)((char *)v6 - 16);
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = v6 - (WTF::StringImpl *)v8;
    v10 = (v6 - (WTF::StringImpl *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *((float *)v6 - 4);
        v18 = *v8;
        if (v52 > *v8)
        {
          v9 = *((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = 0;
          *v8 = v52;
          v53 = *((_QWORD *)v6 - 1);
          *((_QWORD *)v6 - 1) = 0;
          v17 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = v53;
          if (!v17)
            goto LABEL_104;
          if (*(_DWORD *)v17 != 2)
          {
            *(_DWORD *)v17 -= 2;
            goto LABEL_104;
          }
          goto LABEL_216;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)v8, (WTF::StringImpl *)(v8 + 4), (uint64_t)v118);
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)v8, (WTF::StringImpl *)(v8 + 4), (uint64_t)(v8 + 8), (uint64_t)v118);
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *,0>((WTF::StringImpl *)v8, (WTF::StringImpl *)(v8 + 4), (uint64_t)(v8 + 8), (uint64_t)(v8 + 12), (uint64_t)v118);
      default:
        if ((uint64_t)v9 > 383)
        {
          if (!a3)
          {
            if (v8 == (float *)v6)
              return result;
            v68 = (unint64_t)(v10 - 2) >> 1;
            v69 = v68;
            do
            {
              v70 = v69;
              if (v68 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = &v7[4 * v71];
                if (2 * v70 + 2 < v10 && *v72 > v72[4])
                {
                  v72 += 4;
                  v71 = 2 * v70 + 2;
                }
                v73 = &v7[4 * v70];
                v74 = *v72;
                v75 = *v73;
                if (*v72 <= *v73)
                {
                  v76 = &v7[4 * v70];
                  v77 = *((_QWORD *)v76 + 1);
                  *((_QWORD *)v76 + 1) = 0;
                  do
                  {
                    v78 = v73;
                    v73 = v72;
                    *v78 = v74;
                    v79 = *((_QWORD *)v72 + 1);
                    *((_QWORD *)v73 + 1) = 0;
                    v80 = (WTF::StringImpl *)*((_QWORD *)v78 + 1);
                    *((_QWORD *)v78 + 1) = v79;
                    if (v80)
                    {
                      if (*(_DWORD *)v80 == 2)
                        WTF::StringImpl::destroy(v80, a2);
                      else
                        *(_DWORD *)v80 -= 2;
                    }
                    if (v68 < v71)
                      break;
                    v81 = 2 * v71;
                    v71 = (2 * v71) | 1;
                    v72 = &v7[4 * v71];
                    v82 = v81 + 2;
                    if (v82 < v10 && *v72 > v72[4])
                    {
                      v72 += 4;
                      v71 = v82;
                    }
                    v74 = *v72;
                  }
                  while (*v72 <= v75);
                  *v73 = v75;
                  v83 = (WTF::StringImpl *)*((_QWORD *)v73 + 1);
                  *((_QWORD *)v73 + 1) = v77;
                  if (v83)
                  {
                    if (*(_DWORD *)v83 == 2)
                      WTF::StringImpl::destroy(v83, a2);
                    else
                      *(_DWORD *)v83 -= 2;
                  }
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            v84 = v9 >> 4;
            while (1)
            {
              v85 = 0;
              v86 = *(_DWORD *)v7;
              v87 = *((_QWORD *)v7 + 1);
              *((_QWORD *)v7 + 1) = 0;
              v88 = v7;
              do
              {
                v89 = v88;
                v88 += 4 * v85 + 4;
                v90 = 2 * v85;
                v85 = (2 * v85) | 1;
                v91 = v90 + 2;
                if (v91 < v84 && *v88 > v88[4])
                {
                  v88 += 4;
                  v85 = v91;
                }
                *v89 = *v88;
                v92 = *((_QWORD *)v88 + 1);
                *((_QWORD *)v88 + 1) = 0;
                v93 = (WTF::StringImpl *)*((_QWORD *)v89 + 1);
                *((_QWORD *)v89 + 1) = v92;
                if (v93)
                {
                  if (*(_DWORD *)v93 == 2)
                    WTF::StringImpl::destroy(v93, a2);
                  else
                    *(_DWORD *)v93 -= 2;
                }
              }
              while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
              if (v88 == (float *)((char *)v6 - 16))
              {
                *(_DWORD *)v88 = v86;
                result = *((_QWORD *)v88 + 1);
                *((_QWORD *)v88 + 1) = v87;
                if (!result)
                  goto LABEL_191;
                goto LABEL_189;
              }
              *v88 = *((float *)v6 - 4);
              v94 = *((_QWORD *)v6 - 1);
              *((_QWORD *)v6 - 1) = 0;
              v95 = (WTF::StringImpl *)*((_QWORD *)v88 + 1);
              *((_QWORD *)v88 + 1) = v94;
              if (v95)
              {
                if (*(_DWORD *)v95 == 2)
                  WTF::StringImpl::destroy(v95, a2);
                else
                  *(_DWORD *)v95 -= 2;
              }
              *((_DWORD *)v6 - 4) = v86;
              result = *((_QWORD *)v6 - 1);
              *((_QWORD *)v6 - 1) = v87;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              v96 = (char *)(v88 + 4) - (char *)v7;
              if (v96 >= 17)
              {
                v97 = (((unint64_t)v96 >> 4) - 2) >> 1;
                v98 = &v7[4 * v97];
                v99 = *v98;
                v100 = *v88;
                if (*v98 > *v88)
                  break;
              }
LABEL_191:
              v6 = (WTF::StringImpl *)((char *)v6 - 16);
              if (v84-- <= 2)
                return result;
            }
            v101 = *((_QWORD *)v88 + 1);
            *((_QWORD *)v88 + 1) = 0;
            while (1)
            {
              v102 = v88;
              v88 = v98;
              *v102 = v99;
              v103 = *((_QWORD *)v98 + 1);
              *((_QWORD *)v88 + 1) = 0;
              v104 = (WTF::StringImpl *)*((_QWORD *)v102 + 1);
              *((_QWORD *)v102 + 1) = v103;
              if (!v104)
                goto LABEL_182;
              if (*(_DWORD *)v104 != 2)
                break;
              WTF::StringImpl::destroy(v104, a2);
              if (!v97)
              {
LABEL_186:
                *v88 = v100;
                result = *((_QWORD *)v88 + 1);
                *((_QWORD *)v88 + 1) = v101;
                if (!result)
                  goto LABEL_191;
LABEL_189:
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
                goto LABEL_191;
              }
LABEL_183:
              v97 = (v97 - 1) >> 1;
              v98 = &v7[4 * v97];
              v99 = *v98;
              if (*v98 <= v100)
                goto LABEL_186;
            }
            *(_DWORD *)v104 -= 2;
LABEL_182:
            if (!v97)
              goto LABEL_186;
            goto LABEL_183;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[4 * v11];
          if (v9 < 0x801)
          {
            v17 = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)&v7[4 * v11], (WTF::StringImpl *)v7, (uint64_t)v118);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)v7, (WTF::StringImpl *)&v7[4 * v11], (uint64_t)v118);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)(v7 + 4), (WTF::StringImpl *)(v12 - 4), (uint64_t)v6 - 32);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)(v7 + 8), (WTF::StringImpl *)&v7[4 * v11 + 4], (uint64_t)v6 - 48);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)(v12 - 4), (WTF::StringImpl *)&v7[4 * v11], (uint64_t)&v7[4 * v11 + 4]);
            v13 = *(_DWORD *)v7;
            v9 = *((_QWORD *)v7 + 1);
            *((_QWORD *)v7 + 1) = 0;
            *v7 = *v12;
            v14 = (WTF::StringImpl **)&v7[4 * v11 + 2];
            v15 = *v14;
            *v14 = 0;
            v16 = (WTF::StringImpl *)*((_QWORD *)v7 + 1);
            *((_QWORD *)v7 + 1) = v15;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, a2);
              else
                *(_DWORD *)v16 -= 2;
            }
            *(_DWORD *)v12 = v13;
            v17 = *v14;
            *v14 = (WTF::StringImpl *)v9;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
          }
          --a3;
          v18 = *v7;
          if ((a4 & 1) == 0 && *(v7 - 4) <= v18)
          {
            v9 = *((_QWORD *)v7 + 1);
            *((_QWORD *)v7 + 1) = 0;
            v38 = v7 + 4;
            if (v18 <= *v118)
            {
              do
              {
                v8 = v38;
                if (v38 >= (float *)v6)
                  break;
                v38 += 4;
              }
              while (v18 <= *v8);
            }
            else
            {
              do
              {
                if (v38 == (float *)v6)
                  goto LABEL_215;
                v39 = *v38;
                v38 += 4;
              }
              while (v18 <= v39);
              v8 = v38 - 4;
            }
            v40 = v6;
            if (v8 < (float *)v6)
            {
              v40 = v6;
              while (v40 != (WTF::StringImpl *)v7)
              {
                v41 = *((float *)v40 - 4);
                v40 = (WTF::StringImpl *)((char *)v40 - 16);
                if (v18 <= v41)
                  goto LABEL_70;
              }
              goto LABEL_215;
            }
LABEL_70:
            if (v8 < (float *)v40)
            {
              v42 = *v8;
              v43 = *(float *)v40;
              do
              {
                v44 = *((_QWORD *)v8 + 1);
                *((_QWORD *)v8 + 1) = 0;
                *v8 = v43;
                v45 = *((_QWORD *)v40 + 1);
                *((_QWORD *)v40 + 1) = 0;
                v46 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
                *((_QWORD *)v8 + 1) = v45;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, a2);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                *(float *)v40 = v42;
                v17 = (WTF::StringImpl *)*((_QWORD *)v40 + 1);
                *((_QWORD *)v40 + 1) = v44;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, a2);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                v47 = v8 + 4;
                do
                {
                  if (v47 == (float *)v6)
                    goto LABEL_215;
                  v48 = *v47;
                  v47 += 4;
                  v42 = v48;
                }
                while (v18 <= v48);
                v8 = v47 - 4;
                do
                {
                  if (v40 == (WTF::StringImpl *)v7)
                    goto LABEL_215;
                  v49 = *((float *)v40 - 4);
                  v40 = (WTF::StringImpl *)((char *)v40 - 16);
                  v43 = v49;
                }
                while (v18 > v49);
              }
              while (v8 < (float *)v40);
            }
            if (v8 - 4 != v7)
            {
              *v7 = *(v8 - 4);
              v50 = *((_QWORD *)v8 - 1);
              *((_QWORD *)v8 - 1) = 0;
              v51 = (WTF::StringImpl *)*((_QWORD *)v7 + 1);
              *((_QWORD *)v7 + 1) = v50;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, a2);
                else
                  *(_DWORD *)v51 -= 2;
              }
            }
            a4 = 0;
            *(v8 - 4) = v18;
            result = *((_QWORD *)v8 - 1);
            *((_QWORD *)v8 - 1) = v9;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                a4 = 0;
              }
              else
              {
                a4 = 0;
                *(_DWORD *)result -= 2;
              }
            }
            continue;
          }
          v19 = 0;
          v20 = *((_QWORD *)v7 + 1);
          *((_QWORD *)v7 + 1) = 0;
          do
          {
            v21 = (WTF::StringImpl *)&v7[v19 + 4];
            if (v21 == v6)
              goto LABEL_215;
            v22 = *(float *)v21;
            v19 += 4;
          }
          while (*(float *)v21 > v18);
          v23 = &v7[v19];
          v9 = (unint64_t)v6;
          if (v19 != 4)
          {
            while ((float *)v9 != v7)
            {
              v24 = *(float *)(v9 - 16);
              v9 -= 16;
              if (v24 > v18)
                goto LABEL_26;
            }
LABEL_215:
            __break(1u);
LABEL_216:
            WTF::StringImpl::destroy(v17, a2);
LABEL_104:
            *((float *)v6 - 4) = v18;
            result = *((_QWORD *)v6 - 1);
            *((_QWORD *)v6 - 1) = v9;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            return result;
          }
          v9 = (unint64_t)v6;
          do
          {
            if ((unint64_t)v23 >= v9)
              break;
            v25 = *(float *)(v9 - 16);
            v9 -= 16;
          }
          while (v25 <= v18);
LABEL_26:
          if ((unint64_t)v23 >= v9)
          {
            v8 = &v7[v19];
          }
          else
          {
            v26 = *(float *)v9;
            v8 = &v7[v19];
            v27 = v9;
            do
            {
              v28 = *((_QWORD *)v8 + 1);
              *((_QWORD *)v8 + 1) = 0;
              *v8 = v26;
              v29 = *(_QWORD *)(v27 + 8);
              *(_QWORD *)(v27 + 8) = 0;
              v30 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
              *((_QWORD *)v8 + 1) = v29;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, a2);
                else
                  *(_DWORD *)v30 -= 2;
              }
              *(float *)v27 = v22;
              v17 = *(WTF::StringImpl **)(v27 + 8);
              *(_QWORD *)(v27 + 8) = v28;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, a2);
                else
                  *(_DWORD *)v17 -= 2;
              }
              v31 = v8 + 4;
              do
              {
                if (v31 == (float *)v6)
                  goto LABEL_215;
                v32 = *v31;
                v31 += 4;
                v22 = v32;
              }
              while (v32 > v18);
              v8 = v31 - 4;
              do
              {
                if ((float *)v27 == v7)
                  goto LABEL_215;
                v33 = *(float *)(v27 - 16);
                v27 -= 16;
                v26 = v33;
              }
              while (v33 <= v18);
            }
            while ((unint64_t)v8 < v27);
          }
          if (v8 - 4 != v7)
          {
            *v7 = *(v8 - 4);
            v34 = *((_QWORD *)v8 - 1);
            *((_QWORD *)v8 - 1) = 0;
            v35 = (WTF::StringImpl *)*((_QWORD *)v7 + 1);
            *((_QWORD *)v7 + 1) = v34;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, a2);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
          *(v8 - 4) = v18;
          v36 = (WTF::StringImpl *)*((_QWORD *)v8 - 1);
          *((_QWORD *)v8 - 1) = v20;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, a2);
            else
              *(_DWORD *)v36 -= 2;
          }
          if ((unint64_t)v23 < v9)
          {
LABEL_55:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *,false>(v7, v8 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v37 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>(v7, (WTF::StringImpl *)(v8 - 4));
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>(v8, v6);
          if (!(_DWORD)result)
          {
            if (v37)
              continue;
            goto LABEL_55;
          }
          v6 = (WTF::StringImpl *)(v8 - 4);
          if (v37)
            return result;
          goto LABEL_2;
        }
        v54 = v8 + 4;
        v56 = v8 == (float *)v6 || v54 == (float *)v6;
        if ((a4 & 1) == 0)
        {
          if (v56)
            return result;
          v106 = 0;
          v9 = (unint64_t)(v8 + 6);
          v107 = -2;
          v108 = 1;
          v109 = v8;
          while (1)
          {
            v110 = v106;
            v106 = v108;
            v18 = *v54;
            if (*v54 > *v109)
            {
              v111 = *((_QWORD *)v109 + 3);
              *((_QWORD *)v109 + 3) = 0;
              v112 = v8[4 * v110];
              v113 = v107;
              v114 = (WTF::StringImpl **)v9;
              do
              {
                *((float *)v114 - 2) = v112;
                v115 = *(v114 - 2);
                *(v114 - 2) = 0;
                v17 = *v114;
                *v114 = v115;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, a2);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                if (__CFADD__(v113++, 1))
                  goto LABEL_215;
                v117 = (uint64_t *)(v114 - 2);
                v112 = *((float *)v114 - 10);
                v114 -= 2;
              }
              while (v18 > v112);
              *((float *)v117 - 2) = v18;
              result = *v117;
              *v117 = v111;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
            }
            v109 = &v8[4 * v106];
            v108 = v106 + 1;
            v54 = &v8[4 * v106 + 4];
            v9 += 16;
            --v107;
            if (v54 == (float *)v6)
              return result;
          }
        }
        if (v56)
          return result;
        v57 = 0;
        v58 = v8;
        do
        {
          v59 = v58;
          v58 = v54;
          v60 = v59[4];
          v61 = *v59;
          if (v60 <= *v59)
            goto LABEL_132;
          v62 = *((_QWORD *)v59 + 3);
          *((_QWORD *)v59 + 3) = 0;
          v63 = v57;
          while (1)
          {
            v64 = (float *)((char *)v8 + v63);
            v64[4] = v61;
            v65 = *(_QWORD *)((char *)v8 + v63 + 8);
            *((_QWORD *)v64 + 1) = 0;
            v66 = *(WTF::StringImpl **)((char *)v8 + v63 + 24);
            *((_QWORD *)v64 + 3) = v65;
            if (!v66)
              goto LABEL_124;
            if (*(_DWORD *)v66 == 2)
              break;
            *(_DWORD *)v66 -= 2;
LABEL_124:
            if (!v63)
              goto LABEL_128;
LABEL_125:
            v61 = *(float *)((char *)v8 + v63 - 16);
            v63 -= 16;
            if (v60 <= v61)
            {
              v67 = (uint64_t)v8 + v63 + 16;
              goto LABEL_129;
            }
          }
          WTF::StringImpl::destroy(v66, a2);
          if (v63)
            goto LABEL_125;
LABEL_128:
          v67 = (uint64_t)v8;
LABEL_129:
          *(float *)v67 = v60;
          result = *(_QWORD *)(v67 + 8);
          *(_QWORD *)(v67 + 8) = v62;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
LABEL_132:
          v54 = v58 + 4;
          v57 += 16;
        }
        while (v58 + 4 != (float *)v6);
        return result;
    }
  }
}

WTF::StringImpl *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *,0>(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  float v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>(a1, a2, a3, a4);
  v12 = *(float *)a5;
  v13 = *(float *)a4;
  if (*(float *)a5 > *(float *)a4)
  {
    v14 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(float *)a4 = v12;
    v15 = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = 0;
    v16 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    *(float *)a5 = v13;
    result = *(WTF::StringImpl **)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v14;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    v17 = *(float *)a4;
    v18 = *(float *)a3;
    if (*(float *)a4 > *(float *)a3)
    {
      v19 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(float *)a3 = v17;
      v20 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      v21 = *(WTF::StringImpl **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v11);
        else
          *(_DWORD *)v21 -= 2;
      }
      *(float *)a4 = v18;
      result = *(WTF::StringImpl **)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v19;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      v22 = *(float *)a3;
      v23 = *(_DWORD *)a2;
      if (*(float *)a3 > *(float *)a2)
      {
        v24 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
        *(float *)a2 = v22;
        v25 = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = 0;
        v26 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v11);
          else
            *(_DWORD *)v26 -= 2;
        }
        *(_DWORD *)a3 = v23;
        result = *(WTF::StringImpl **)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v24;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
        v27 = *(_DWORD *)a2;
        v28 = *(_DWORD *)a1;
        if (*(float *)a2 > *(float *)a1)
        {
          v29 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = 0;
          *(_DWORD *)a1 = v27;
          v30 = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = 0;
          v31 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = v30;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v11);
            else
              *(_DWORD *)v31 -= 2;
          }
          *(_DWORD *)a2 = v28;
          result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v29;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v5 = result;
  v6 = *(float *)a2;
  v7 = *(float *)result;
  v8 = *(float *)a3;
  if (*(float *)a2 <= *(float *)result)
  {
    if (v8 > v6)
    {
      v12 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(float *)a2 = v8;
      v13 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      *(float *)a3 = v6;
      result = *(WTF::StringImpl **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v15 = *(float *)a2;
      v16 = *(float *)v5;
      if (*(float *)a2 > *(float *)v5)
      {
        v17 = *((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        *(float *)v5 = v15;
        v18 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
        v19 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = v18;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, a2);
          else
            *(_DWORD *)v19 -= 2;
        }
        *(float *)a2 = v16;
        result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v17;
        if (result)
          goto LABEL_32;
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    if (v8 > v6)
    {
      *(float *)result = v8;
      v10 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v11 = (WTF::StringImpl *)*((_QWORD *)result + 1);
      *((_QWORD *)v5 + 1) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      *(float *)a3 = v7;
      result = *(WTF::StringImpl **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v9;
      if (!result)
        return result;
LABEL_32:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      *(_DWORD *)result -= 2;
      return result;
    }
    *(float *)result = v6;
    v20 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v21 = (WTF::StringImpl *)*((_QWORD *)result + 1);
    *((_QWORD *)v5 + 1) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    *(float *)a2 = v7;
    result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v9;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        v7 = *(float *)a2;
      }
      else
      {
        *(_DWORD *)result -= 2;
      }
    }
    v22 = *(float *)a3;
    if (*(float *)a3 > v7)
    {
      v23 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(float *)a2 = v22;
      v24 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v25 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v24;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      *(float *)a3 = v7;
      result = *(WTF::StringImpl **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v23;
      if (result)
        goto LABEL_32;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>(float *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  float *v12;
  WTF::StringImpl *v13;
  float *v14;
  uint64_t v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v4 = (a2 - (WTF::StringImpl *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((float *)a2 - 4);
      v7 = *a1;
      if (v6 > *a1)
      {
        v8 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = 0;
        *a1 = v6;
        v9 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = 0;
        v10 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = v9;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        *((float *)a2 - 4) = v7;
        v11 = (WTF::StringImpl *)*((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)a1, (WTF::StringImpl *)(a1 + 4), (uint64_t)a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)a1, (WTF::StringImpl *)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)a2 - 16);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *,0>((WTF::StringImpl *)a1, (WTF::StringImpl *)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a1 + 12), (uint64_t)a2 - 16);
      return 1;
    default:
      v12 = a1 + 8;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>((WTF::StringImpl *)a1, (WTF::StringImpl *)(a1 + 4), (uint64_t)(a1 + 8));
      v14 = a1 + 12;
      if (a1 + 12 == (float *)a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *v14;
    v18 = *v12;
    if (*v14 > *v12)
    {
      v19 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      v20 = v15;
      while (1)
      {
        v21 = (float *)((char *)a1 + v20);
        v21[12] = v18;
        v22 = *(_QWORD *)((char *)a1 + v20 + 40);
        *((_QWORD *)v21 + 5) = 0;
        v23 = *(WTF::StringImpl **)((char *)a1 + v20 + 56);
        *((_QWORD *)v21 + 7) = v22;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v13);
          else
            *(_DWORD *)v23 -= 2;
        }
        if (v20 == -32)
          break;
        v18 = *(float *)((char *)a1 + v20 + 16);
        v20 -= 16;
        if (v17 <= v18)
        {
          v24 = (uint64_t)a1 + v20 + 48;
          goto LABEL_21;
        }
      }
      v24 = (uint64_t)a1;
LABEL_21:
      *(float *)v24 = v17;
      v25 = *(WTF::StringImpl **)(v24 + 8);
      *(_QWORD *)(v24 + 8) = v19;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v13);
        else
          *(_DWORD *)v25 -= 2;
      }
      if (++v16 == 8)
        return v14 + 4 == (float *)a2;
    }
    v12 = v14;
    v15 += 16;
    v14 += 4;
    if (v14 == (float *)a2)
      return 1;
  }
}

WTF::StringImpl *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  float v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MediaMetadata::refreshArtworkImage(void)::$_1 &,WebCore::MediaMetadata::Pair *>(a1, a2, a3);
  v10 = *(float *)a4;
  v11 = *(float *)a3;
  if (*(float *)a4 > *(float *)a3)
  {
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(float *)a3 = v10;
    v13 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v14 = *(WTF::StringImpl **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    *(float *)a4 = v11;
    result = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    v15 = *(float *)a3;
    v16 = *(_DWORD *)a2;
    if (*(float *)a3 > *(float *)a2)
    {
      v17 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(float *)a2 = v15;
      v18 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      v19 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v18;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v9);
        else
          *(_DWORD *)v19 -= 2;
      }
      *(_DWORD *)a3 = v16;
      result = *(WTF::StringImpl **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v17;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
      v20 = *(_DWORD *)a2;
      v21 = *(_DWORD *)a1;
      if (*(float *)a2 > *(float *)a1)
      {
        v22 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = 0;
        *(_DWORD *)a1 = v20;
        v23 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
        v24 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v9);
          else
            *(_DWORD *)v24 -= 2;
        }
        *(_DWORD *)a2 = v21;
        result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v22;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaMetadata::tryNextArtworkImage(unsigned int,WTF::Vector<WebCore::MediaMetadata::Pair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::Image *>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)a1 = &off_1E335C768;
  v3 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 32) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaMetadata::tryNextArtworkImage(unsigned int,WTF::Vector<WebCore::MediaMetadata::Pair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::Image *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = &off_1E335C768;
  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = (WTF *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaMetadata::tryNextArtworkImage(unsigned int,WTF::Vector<WebCore::MediaMetadata::Pair,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::Image *>::call(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  float v5;
  int v6;
  WTF::StringImpl *v7;
  float v8;
  int v9;
  float v10;
  unsigned int v12;
  double v13;
  int v14;
  double v15;
  double v16;
  uint64_t v17;
  int v18;
  float v19;
  int v20;
  float v21;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  float v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;

  v3 = *(_QWORD **)(a1 + 8);
  if (!a2)
    goto LABEL_57;
  if (!*((_QWORD *)a2 + 3))
    goto LABEL_57;
  if ((*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0) == 0.0)
    goto LABEL_57;
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  if (v5 == 0.0)
    goto LABEL_57;
  v6 = (int)(*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 168))(a2, 0);
  v9 = (int)v8;
  v10 = -1.0;
  if (v6 >= 1 && v9 >= 1)
  {
    v12 = v6 <= v9 ? (int)v8 : v6;
    v10 = 0.0;
    if (v12 >= 0x81)
    {
      v13 = (double)(int)v12;
      if (v9 >= v6)
        v14 = v6;
      else
        v14 = v9;
      v15 = (double)v14 / v13;
      if (v12 > 0x1FF)
        v16 = 512.0 / v13;
      else
        v16 = (v13 + -128.0) * 0.8 / 384.0 + 0.2;
      v10 = v15 * v16;
    }
  }
  if (!*(_DWORD *)(a1 + 16))
    goto LABEL_37;
  v17 = v3[9];
  if (v17)
  {
    v18 = (int)(*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 168))(v17, 0);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v3[9] + 168))(v3[9], 0);
    v20 = (int)v19;
    v21 = -1.0;
    if (v18 >= 1 && v20 >= 1)
    {
      v23 = v18 <= v20 ? (int)v19 : v18;
      v21 = 0.0;
      if (v23 >= 0x81)
      {
        v24 = (double)(int)v23;
        if (v20 >= v18)
          v20 = v18;
        v25 = (double)v20 / v24;
        if (v23 > 0x1FF)
          v26 = 512.0 / v24;
        else
          v26 = (v24 + -128.0) * 0.8 / 384.0 + 0.2;
        v21 = v25 * v26;
      }
    }
    if (v21 < v10)
    {
LABEL_37:
      v27 = *(_DWORD **)(a1 + 24);
      if (v27)
        *v27 += 2;
      v28 = (WTF::StringImpl *)v3[8];
      v3[8] = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v7);
        else
          *(_DWORD *)v28 -= 2;
      }
      ++a2[2];
      v29 = (_DWORD *)v3[9];
      v3[9] = a2;
      if (v29)
      {
        if (v29[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
        else
          --v29[2];
      }
      v30 = v3[1];
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (v31)
        {
          v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v32 = off_1E335CBB0;
          v32[1] = v31;
          v38 = v32;
          ++*(_DWORD *)(v31 + 24);
          WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v31 + 144), &v38);
          if (*(_DWORD *)(v31 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
          else
            --*(_DWORD *)(v31 + 24);
          v33 = v38;
          v38 = 0;
          if (v33)
            (*(void (**)(_QWORD *))(*v33 + 8))(v33);
        }
      }
    }
  }
  v34 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a1 + 44) <= v34)
  {
    __break(0xC471u);
    return;
  }
  v35 = *(float *)(*(_QWORD *)(a1 + 32) + 16 * v34);
  v36 = v6 <= v9 ? v9 : v6;
  if (v35 < 0.0 && v36 <= 511)
  {
LABEL_57:
    v37 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 16) = v37;
    if (*(_DWORD *)(a1 + 44) > v37)
      WebCore::MediaMetadata::tryNextArtworkImage((uint64_t)v3, v37, (uint64_t *)(a1 + 32));
  }
}

unint64_t WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(WTF **)result;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)v7 = v8;
          *(_QWORD *)(v7 + 8) = v9;
          v10 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(v7 + 16) = v10;
          *(_BYTE *)(v7 + 24) = *(_BYTE *)(result + 24);
          *(_QWORD *)(v7 + 32) = 0;
          *(_QWORD *)(v7 + 40) = 0;
          v11 = *(_QWORD *)(result + 32);
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(v7 + 32) = v11;
          LODWORD(v11) = *(_DWORD *)(result + 40);
          *(_DWORD *)(result + 40) = 0;
          *(_DWORD *)(v7 + 40) = v11;
          LODWORD(v11) = *(_DWORD *)(result + 44);
          *(_DWORD *)(result + 44) = 0;
          *(_DWORD *)(v7 + 44) = v11;
          WebCore::MediaControlsContextMenuItem::~MediaControlsContextMenuItem((WebCore::MediaControlsContextMenuItem *)result, v6);
          result = v12 + 48;
          v7 += 48;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 48 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x5555556)
  {
    v5 = 48 * v3;
    v6 = WTF::fastMalloc((WTF *)(48 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    v7 = *(_DWORD *)(a2 + 12);
    if (v7)
    {
      v8 = *(_QWORD *)a2 + 48 * v7;
      v9 = v6 + 32;
      v10 = *(_QWORD *)a2 + 32;
      do
      {
        v11 = v10 - 32;
        *(_QWORD *)(v9 - 32) = *(_QWORD *)(v10 - 32);
        v12 = *(_DWORD **)(v10 - 24);
        if (v12)
          *v12 += 2;
        *(_QWORD *)(v9 - 24) = v12;
        v13 = *(_DWORD **)(v10 - 16);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v9 - 16) = v13;
        *(_BYTE *)(v9 - 8) = *(_BYTE *)(v10 - 8);
        v9 = WTF::Vector<WebCore::MediaControlsContextMenuItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector()
           + 48;
        v10 += 48;
      }
      while (v11 + 48 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  *a1 = &off_1E335C790;
  v3 = a1[2];
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1)
        {
          v6 = *(unsigned int *)(v5 + 8);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_1E335C6A8[v6])(&v11, v5);
          *(_DWORD *)(v5 + 8) = -1;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  *(_QWORD *)this = &off_1E335C790;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 8;
      do
      {
        if (*(_QWORD *)(v5 - 8) != -1)
        {
          v6 = *(unsigned int *)(v5 + 8);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_1E335C6A8[v6])(&v11, v5);
          *(_DWORD *)(v5 + 8) = -1;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,unsigned long long>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  WebCore::MediaControlsHost *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  void *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  WebCore::MediaControlsHost *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  WebCore::MediaControlsHost *v35;
  _QWORD v36[8];
  _QWORD *v37;
  __int128 v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return;
  v3 = *(WebCore::MediaControlsHost **)(v2 + 8);
  if (!v3)
    return;
  v5 = *(_DWORD *)v3;
  v35 = v3;
  *(_DWORD *)v3 = v5 + 2;
  if (a2)
  {
    v6 = *((_QWORD *)v3 + 2);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
        LOBYTE(v38) = 0;
        v39 = 0;
        WebCore::UserGestureIndicator::UserGestureIndicator(&v34, 257, v9, 1, 0, &v38, 1);
        v12 = *(_QWORD *)(a1 + 16);
        v11 = a1 + 16;
        v10 = v12;
        if (v12)
        {
          v13 = *(_DWORD *)(v10 - 8);
          v14 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = *(void **)(v10 + 24 * v17);
          if (v18 == a2)
          {
LABEL_11:
            v20 = v10 + 24 * v17;
            LOBYTE(v32) = 0;
            v21 = -1;
            v33 = -1;
            v22 = *(unsigned int *)(v20 + 16);
            if ((_DWORD)v22 != -1)
            {
              ((void (*)(_QWORD *, int *, uint64_t))off_1E335C7A8[v22])(v36, &v32, v20 + 8);
              v33 = v22;
              v21 = v22;
            }
            goto LABEL_14;
          }
          v19 = 1;
          while (v18)
          {
            v17 = (v17 + v19) & v13;
            v18 = *(void **)(v10 + 24 * v17);
            ++v19;
            if (v18 == a2)
              goto LABEL_11;
          }
        }
        v21 = 0;
        v32 = 0;
        v33 = 0;
LABEL_14:
        v36[2] = &v35;
        v36[3] = v11;
        v36[0] = v7;
        v36[1] = v11;
        v36[4] = v7;
        v36[5] = v7;
        v36[6] = v7;
        v36[7] = v7;
        if (v21 == -1)
        {
          v29 = std::__throw_bad_variant_access[abi:sn180100]();
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1K_EEEDcS1C_DpT0_(v29, v30, v31);
          return;
        }
        v37 = v36;
        ((void (*)(_QWORD **, int *))off_1E335C7D8[v21])(&v37, &v32);
        if (v33 != -1)
          ((void (*)(_QWORD *, int *))off_1E335C6A8[v33])(v36, &v32);
        WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v34);
      }
    }
  }
  v23 = (_DWORD *)*((_QWORD *)v3 + 5);
  *((_QWORD *)v3 + 5) = 0;
  if (v23)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 40))(v23);
    if (v23[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
    else
      --v23[4];
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::MediaControlsHost::~MediaControlsHost(v3, a2);
    WTF::fastFree(v25, v26);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v24 = v35;
  v35 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::MediaControlsHost::~MediaControlsHost(v24, a2);
      WTF::fastFree(v27, v28);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1K_EEEDcS1C_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 24);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1K_EEEDcS1C_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJZN7WebCore17MediaControlsHost28showMediaControlsContextMenuERNS8_11HTMLElementEON3WTF6StringEONSC_3RefINS8_12VoidCallbackENSC_12RawPtrTraitsISG_EENSC_21DefaultRefDerefTraitsISG_EEEEE19PictureInPictureTagNSC_6RefPtrINS8_10AudioTrackENSH_ISP_EENSJ_ISP_EEEENSO_INS8_9TextTrackENSH_IST_EENSJ_IST_EEEENSO_INS8_6VTTCueENSH_ISX_EENSJ_ISX_EEEEZNS9_28showMediaControlsContextMenuESB_SE_SM_E13PlaybackSpeedZNS9_28showMediaControlsContextMenuESB_SE_SM_E17ShowMediaStatsTagEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS17_1EJSN_SS_SW_S10_S11_S12_EEERKS1K_EEEDcS1C_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed> &>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD v5[4];
  unsigned int v6;

  v1 = **a1;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    v6 = 2;
    v2 = *(_QWORD *)(v1 + 1824);
    v3 = *(_QWORD *)(v1 + 1832);
    v5[0] = "HTMLMediaElement";
    v5[1] = 17;
    v5[2] = "webkitSetPresentationMode";
    v5[3] = v3;
    if (*(_BYTE *)(v2 + 12))
    {
      if (WebCore::LogMedia)
        v4 = byte_1ECE7C490 >= 3u;
      else
        v4 = 0;
      if (v4)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],WebCore::HTMLVideoElement::VideoPresentationMode>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v5, ", mode = ", &v6);
    }
    if (((*(unsigned int *)(v1 + 1265) | ((unint64_t)*(unsigned __int16 *)(v1 + 1269) << 32)) & 0x200000000) == 0)
      WebCore::HTMLVideoElement::setPresentationMode((WebCore::HTMLVideoElement *)v1, (void *)v6);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed> &>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = **(_QWORD **)(*(_QWORD *)result + 8);
  if (!v3)
  {
    v6 = 0;
    LODWORD(v4) = 0;
LABEL_10:
    v5 = v3 + 24 * v4;
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 24 * v4;
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + 24 * v4;
    goto LABEL_10;
  }
  v6 = **(_QWORD **)(*(_QWORD *)result + 8);
  if ((_DWORD)v4)
  {
    v7 = 24 * v4;
    v6 = **(_QWORD **)(*(_QWORD *)result + 8);
    while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
    {
      v6 += 24;
      v7 -= 24;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v8 = v3 + 24 * *(unsigned int *)(v3 - 4);
  else
    v8 = 0;
  while (v6 != v8)
  {
    if (*(_DWORD *)(v6 + 16) == 1)
    {
      v9 = *(_QWORD *)(v6 + 8);
      if (*(_BYTE *)(v9 + 176) != (v9 == *a2))
      {
        (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v9 + 168) + 120))(*(_QWORD *)(v9 + 168), v9 == *a2);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E33E9F78;
        v10[1] = v9;
        v12 = v10;
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v9 + 152), &v12);
        result = (uint64_t)v12;
        v12 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    v11 = v6 + 24;
    v6 = v5;
    if (v11 != v5)
    {
      v6 = v11;
      while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
      {
        v6 += 24;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed> &>(uint64_t *a1, WebCore::TextTrack **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Page *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  WebCore::PageGroup *v18;
  WebCore::CaptionUserPreferencesMediaAF *v19;
  WebCore::CaptionUserPreferencesMediaAF *v20;
  _DWORD *v21;
  WebCore::TextTrack *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::Page *v34;
  uint64_t v35;

  v3 = *a1;
  v4 = **(_QWORD **)(*a1 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    goto LABEL_50;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24)
    || *(_DWORD *)(v6 + 1080) != 4
    || *(_QWORD *)(v4 + 32))
  {
    goto LABEL_50;
  }
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528);
  if (!v7)
    goto LABEL_48;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_48;
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9)
    goto LABEL_48;
  v10 = *(WebCore::Page **)(v9 + 8);
  if (!v10)
    goto LABEL_48;
  v11 = *(_QWORD *)(v6 + 1352);
  if (!v11
    || (++*(_DWORD *)(v11 + 24),
        v12 = *(_DWORD *)(v11 + 108),
        v13 = *(unsigned int *)(v11 + 124),
        v14 = *(_DWORD *)(v11 + 68),
        !((_DWORD)v13 + v12 + v14)))
  {
LABEL_26:
    v17 = *((_QWORD *)v10 + 66);
    if (!v17 || (v18 = *(WebCore::PageGroup **)(v17 + 8)) == 0)
    {
      v34 = v10;
      WebCore::Page::initGroup(v10);
      v35 = *((_QWORD *)v34 + 66);
      if (v35)
        v18 = *(WebCore::PageGroup **)(v35 + 8);
      else
        v18 = 0;
    }
    v19 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v18 + 5);
    if (!v19)
    {
      v20 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
      v19 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v20, v18);
      v21 = (_DWORD *)*((_QWORD *)v18 + 5);
      *((_QWORD *)v18 + 5) = v19;
      if (v21)
      {
        if (v21[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
          v19 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v18 + 5);
        }
        else
        {
          --v21[2];
        }
      }
    }
    v22 = (WebCore::TextTrack *)(*(uint64_t (**)(WebCore::CaptionUserPreferencesMediaAF *))(*(_QWORD *)v19 + 16))(v19);
    if (((_DWORD)v22 - 1) >= 3)
    {
      if ((_DWORD)v22)
      {
LABEL_39:
        if (v11)
          goto LABEL_42;
        goto LABEL_48;
      }
      v23 = WebCore::TextTrack::captionMenuAutomaticItem(v22);
    }
    else
    {
      v23 = WebCore::TextTrack::captionMenuOffItem(v22);
    }
    v24 = v23;
    ++*(_DWORD *)(v23 + 16);
    v25 = *(_DWORD **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v24;
    if (v25)
    {
      if (v25[4] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
        if (v11)
          goto LABEL_42;
        goto LABEL_48;
      }
      --v25[4];
    }
    goto LABEL_39;
  }
  v15 = 0;
  while (1)
  {
    if (v15 < v13)
    {
      v16 = *(_DWORD **)(*(_QWORD *)(v11 + 112) + 8 * v15);
      if (v16)
      {
        if (v16[10] != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195437EBCLL);
        }
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    if (v12 <= (int)v15 - (int)v13)
      break;
    v16 = *(_DWORD **)(*(_QWORD *)(v11 + 96) + 8 * (v15 - v13));
    if (v16)
    {
      if (v16[10] != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195437EDCLL);
      }
      goto LABEL_24;
    }
LABEL_25:
    if ((_DWORD)v13 + v12 + v14 == ++v15)
      goto LABEL_26;
  }
  if (v14 <= -(int)v13 - v12 + v15)
    goto LABEL_25;
  v16 = *(_DWORD **)(*(_QWORD *)(v11 + 56) + 8 * (-(int)v13 - v12 + v15));
  if (!v16)
    goto LABEL_25;
  if (v16[10] != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195437EFCLL);
  }
LABEL_24:
  if (v16[56] != 2)
    goto LABEL_25;
  ++v16[4];
  *(_QWORD *)(v4 + 32) = v16;
LABEL_42:
  if (*(_DWORD *)(v11 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  else
    --*(_DWORD *)(v11 + 24);
LABEL_48:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
LABEL_50:
  v26 = **(_QWORD **)(v3 + 24);
  if (v26)
  {
    v27 = *(unsigned int *)(v26 - 4);
    v28 = v26 + 24 * v27;
    if (*(_DWORD *)(v26 - 12))
    {
      v29 = **(_QWORD **)(v3 + 24);
      if ((_DWORD)v27)
      {
        v30 = 24 * v27;
        v29 = **(_QWORD **)(v3 + 24);
        while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
        {
          v29 += 24;
          v30 -= 24;
          if (!v30)
          {
            v29 = v28;
            break;
          }
        }
      }
LABEL_57:
      v31 = v26 + 24 * *(unsigned int *)(v26 - 4);
      goto LABEL_62;
    }
    v29 = v26 + 24 * v27;
  }
  else
  {
    v29 = 0;
    LODWORD(v27) = 0;
  }
  v28 = v26 + 24 * v27;
  if (v26)
    goto LABEL_57;
  v31 = 0;
LABEL_62:
  while (v29 != v31)
  {
    if (*(_DWORD *)(v29 + 16) == 2)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v29 + 8) + 120))(*(_QWORD *)(v29 + 8), 0);
    v32 = v29 + 24;
    v29 = v28;
    if (v32 != v28)
    {
      v29 = v32;
      while ((unint64_t)(*(_QWORD *)v29 + 1) <= 1)
      {
        v29 += 24;
        if (v29 == v28)
        {
          v29 = v28;
          break;
        }
      }
    }
  }
  return WebCore::HTMLMediaElement::setSelectedTextTrack(*(_QWORD *)(v3 + 32), *a2);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed> &>(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::MediaTime *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = *(_QWORD *)(*(_QWORD *)result + 40);
  v7 = *(_OWORD *)(*(_QWORD *)a2 + 64);
  if (!*(_QWORD *)(v2 + 1416))
  {
    v3 = *(_QWORD *)(v2 + 1824);
    v4 = *(_QWORD *)(v2 + 1832);
    *(_QWORD *)&v8 = "HTMLMediaElement";
    *((_QWORD *)&v8 + 1) = 17;
    *(_QWORD *)&v9 = "seekInternal";
    *((_QWORD *)&v9 + 1) = v4;
    if (*(_BYTE *)(v3 + 12))
      result = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v8, (WTF::MediaTime *)&v7);
    v5 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
    v6 = (__int128 *)WTF::MediaTime::zeroTime(v5);
    v8 = v7;
    v9 = *(_OWORD *)v5;
    v10 = *v6;
    return WebCore::HTMLMediaElement::seekWithTolerance((unsigned int *)v2, (const WebCore::SeekTarget *)&v8, 0);
  }
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed> &>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;

  v2 = *result;
  switch(*a2)
  {
    case 0:
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v2 + 48) + 1400))(*(_QWORD *)(v2 + 48), 0.5);
      v3.n128_u64[0] = 0.5;
      result = (uint64_t *)(*(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 48) + 1416))(v3);
      break;
    case 1:
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v2 + 48) + 1400))(*(_QWORD *)(v2 + 48), 1.0);
      v4.n128_u64[0] = 1.0;
      result = (uint64_t *)(*(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 48) + 1416))(v4);
      break;
    case 2:
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v2 + 48) + 1400))(*(_QWORD *)(v2 + 48), 1.25);
      v5.n128_u64[0] = 1.25;
      result = (uint64_t *)(*(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 48) + 1416))(v5);
      break;
    case 3:
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v2 + 48) + 1400))(*(_QWORD *)(v2 + 48), 1.5);
      v6.n128_u64[0] = 1.5;
      result = (uint64_t *)(*(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 48) + 1416))(v6);
      break;
    case 4:
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v2 + 48) + 1400))(*(_QWORD *)(v2 + 48), 2.0);
      v7.n128_u64[0] = 2.0;
      result = (uint64_t *)(*(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 48) + 1416))(v7);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed)#1},WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::ShowMediaStatsTag)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::VTTCue,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag<WebCore::TextTrack,WebCore::VoidCallback<WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr<WebCore::AudioTrack,WebCore::VoidCallback<WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>,WTF::RawPtrTraits<WTF::Ref><WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &&,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2::operator() const(unsigned long long)::{lambda(WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PictureInPictureTag)#1}>> &>> &>> &,WebCore::MediaControlsHost::showMediaControlsContextMenu(WebCore::HTMLElement &,WTF::String &,WTF::Ref<WebCore::VoidCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::PlaybackSpeed> &>(uint64_t a1)
{
  WebCore::HTMLMediaElement *v1;
  char v2;
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(WebCore::HTMLMediaElement **)(*(_QWORD *)a1 + 56);
  v2 = *((_BYTE *)v1 + 1731);
  result = WebCore::HTMLMediaElement::ensureMediaControls(v1);
  if ((_DWORD)result)
  {
    v4 = v2 ^ 1;
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = off_1E33C5EB8;
    *(_QWORD *)(v5 + 8) = v1;
    *(_BYTE *)(v5 + 16) = v4;
    v6 = v5;
    *((_BYTE *)v1 + 1731) = WebCore::HTMLMediaElement::setupAndCallJS((uint64_t)v1, &v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::MediaRecorder(WebCore::Document &,WTF::Ref<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>> &&,WebCore::MediaRecorderPrivateOptions &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v1 + 136))
  {
    if ((*(_QWORD *)(v1 + 200) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v1 + 200) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 168));
    }
    v2 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E335C928;
    *((_QWORD *)v2 + 1) = v1;
    v5 = v2;
    WebCore::MediaRecorder::fetchData(v1, (uint64_t *)&v5, 0);
    result = v5;
    if (v5)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v5) = 8;
    v7 = 1;
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::startRecording(std::optional<unsigned int>)::$_0,void,WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E335C888;
  WebCore::MediaRecorder::startRecording(std::optional<unsigned int>)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::startRecording(std::optional<unsigned int>)::$_0,void,WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E335C888;
  WebCore::MediaRecorder::startRecording(std::optional<unsigned int>)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::MediaRecorder::startRecording(std::optional<unsigned int>)::$_0,void,WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int>::call(uint64_t (***result)(), char *a2, unsigned int a3, uint64_t a4))()
{
  uint64_t (**v4)();
  uint64_t (*v5)();
  uint64_t (**v6)();
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  bmalloc::api *v26;
  void *v27;
  uint64_t v28;
  WTF *v29;

  v4 = result[2];
  if (v4)
  {
    v5 = v4[1];
    if (v5)
    {
      v6 = result[1];
      ++*((_DWORD *)v5 - 2);
      if (!*((_BYTE *)v6 + 224))
        goto LABEL_22;
      if (*((_DWORD *)a2 + 4))
      {
        v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v8 = off_1E335C860;
        v29 = v8;
        if (*((_DWORD *)v6 + 34))
        {
          v10 = *((unsigned int *)v6 + 39);
          if ((_DWORD)v10)
          {
            v11 = v6[18];
            v12 = 8 * v10;
            do
            {
              v13 = *(_QWORD *)v11;
              v11 = (uint64_t (*)())((char *)v11 + 8);
              WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v13 + 24, v6 + 9);
              v12 -= 8;
            }
            while (v12);
          }
          *((_DWORD *)v6 + 34) = 0;
          WebCore::MediaRecorderPrivate::stop(v6[16], (uint64_t)&v29);
          v14 = (uint64_t)v29;
          v29 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        else
        {
          WTF::fastFree(v8, v9);
        }
        if (*((_DWORD *)a2 + 4) != 1)
        {
          v28 = std::__throw_bad_variant_access[abi:sn180100]();
          return (uint64_t (***)())_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder14startRecordingENSt3__18optionalIjEEEN3__0clINS2_11ExceptionOrINS_6StringEEEEEDaOT_jjEUlvE_vJEED1Ev(v28);
        }
        v19 = *a2;
        v16 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
        v17 = WTF::fastMalloc((WTF *)0x20);
        v18 = v17;
        *(_QWORD *)v17 = &off_1E335C8B0;
        *(_QWORD *)(v17 + 8) = v6;
        *(_BYTE *)(v17 + 16) = v19;
      }
      else
      {
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = 0;
        v16 = a3 | (unint64_t)(a4 << 32);
        v17 = WTF::fastMalloc((WTF *)0x20);
        v18 = v17;
        *(_QWORD *)v17 = &off_1E335C8D8;
        *(_QWORD *)(v17 + 8) = v6;
        *(_QWORD *)(v17 + 16) = v15;
      }
      *(_QWORD *)(v17 + 24) = v16;
      v20 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      v21 = *((_DWORD *)v6 + 6);
      *(_QWORD *)(v20 + 8) = v6;
      v6[2] = (uint64_t (*)())((char *)v6[2] + 1);
      *((_DWORD *)v6 + 6) = v21 + 2;
      result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
      *result = off_1E335C950;
      result[1] = v6;
      result[2] = (uint64_t (**)())v20;
      result[3] = (uint64_t (**)())v18;
      v29 = (WTF *)result;
      v22 = v6[1];
      if (v22)
      {
        v23 = *((_QWORD *)v22 + 1);
        if (v23)
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 - 96) + 104))(v23 - 96);
          WebCore::EventLoopTaskGroup::queueTask(v24, 11, (uint64_t *)&v29);
          result = (uint64_t (***)())v29;
          v29 = 0;
          if (!result)
          {
LABEL_22:
            if (*((_DWORD *)v5 - 2) == 1)
            {
              WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)((char *)v5 - 32));
              return (uint64_t (***)())bmalloc::api::isoDeallocate(v26, v27);
            }
            else
            {
              --*((_DWORD *)v5 - 2);
            }
            return result;
          }
        }
        else
        {
          v29 = 0;
        }
        v25 = *result;
      }
      else
      {
        v29 = 0;
        v25 = off_1E335C950;
      }
      result = (uint64_t (***)())v25[1]();
      goto LABEL_22;
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder14startRecordingENSt3__18optionalIjEEEN3__0clINS2_11ExceptionOrINS_6StringEEEEEDaOT_jjEUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E335C8B0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder14startRecordingENSt3__18optionalIjEEEN3__0clINS2_11ExceptionOrINS_6StringEEEEEDaOT_jjEUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E335C8B0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder14startRecordingENSt3__18optionalIjEEEN3__0clINS2_11ExceptionOrINS_6StringEEEEEDaOT_jjEUlvE_vJEE4callEv(uint64_t a1)
{
  WTF *result;

  result = *(WTF **)(a1 + 8);
  if (*((_BYTE *)result + 224))
    return WebCore::MediaRecorder::dispatchError(result, (unsigned __int8 *)(a1 + 16));
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder14startRecordingENSt3__18optionalIjEEEN3__0clINS2_11ExceptionOrINS_6StringEEEEEDaOT_jjEUlvE0_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E335C8D8;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder14startRecordingENSt3__18optionalIjEEEN3__0clINS2_11ExceptionOrINS_6StringEEEEEDaOT_jjEUlvE0_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E335C8D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder14startRecordingENSt3__18optionalIjEEEN3__0clINS2_11ExceptionOrINS_6StringEEEEEDaOT_jjEUlvE0_vJEE4callEv(WTF *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::EventTarget *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;

  v2 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v2 + 224))
  {
    v3 = result;
    v4 = *((_QWORD *)result + 2);
    *((_QWORD *)result + 2) = 0;
    v5 = *(WTF::StringImpl **)(v2 + 88);
    *(_QWORD *)(v2 + 88) = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        v5 = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    *(_DWORD *)(v2 + 96) = *((_DWORD *)v3 + 6);
    *(_BYTE *)(v2 + 100) = 1;
    *(_DWORD *)(v2 + 104) = *((_DWORD *)v3 + 7);
    *(_BYTE *)(v2 + 108) = 1;
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      v7 = WebCore::threadGlobalDataSlow(v5);
    v8 = (WebCore::EventTarget *)(v2 + 32);
    v9 = *(_QWORD *)(v7 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
      v9 = *(_QWORD *)(v7 + 40);
    }
    v10 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
    *(_QWORD *)v10 = off_1E33A4B48;
    *(_QWORD *)(v10 + 8) = 0;
    v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
    v13 = *(_QWORD *)(v9 + 1960) != 0;
    *(_DWORD *)(v10 + 16) = 1;
    *(_DWORD *)(v10 + 20) = v12 | v13;
    v14 = *(_DWORD **)(v9 + 1960);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(v10 + 24) = v14;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 64) = 0;
    result = WebCore::EventTarget::dispatchEvent(v8, (WebCore::Event *)v10);
    if (*(_DWORD *)(v10 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 16);
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::stopRecording(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double>::call(WTF *result, WebCore::FragmentedSharedBuffer **a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  WebCore::FragmentedSharedBuffer *v6;
  WebCore::EventTarget *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  WebCore::Event *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL4 v18;
  _DWORD *v19;
  WebCore::Event *v20;

  v4 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v4 + 224))
  {
    v6 = *a2;
    v7 = (WebCore::EventTarget *)(v4 + 32);
    v8 = *(_QWORD *)(v4 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      v10 = v9 ? (WebCore::ScriptExecutionContext *)(v9 - 96) : 0;
    }
    else
    {
      v10 = 0;
    }
    WebCore::createDataAvailableEvent((uint64_t *)&v20, v10, v6, a3, a4);
    v11 = v20;
    result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v4 + 32), v20);
    if (*((_DWORD *)v11 + 4) == 1)
      result = (WTF *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 4);
    if (*(_BYTE *)(v4 + 224))
    {
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(result);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      v15 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v15);
      *(_QWORD *)v15 = off_1E33A4B48;
      *(_QWORD *)(v15 + 8) = 0;
      v17 = *(_DWORD *)(v15 + 20) & 0xFFC00000 | 0x1E8200;
      v18 = *(_QWORD *)(v14 + 1992) != 0;
      *(_DWORD *)(v15 + 16) = 1;
      *(_DWORD *)(v15 + 20) = v17 | v18;
      v19 = *(_DWORD **)(v14 + 1992);
      if (v19)
        *v19 += 2;
      *(_QWORD *)(v15 + 24) = v19;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = v16;
      *(_QWORD *)(v15 + 64) = 0;
      result = WebCore::EventTarget::dispatchEvent(v7, (WebCore::Event *)v15);
      if (*(_DWORD *)(v15 + 16) == 1)
        return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      else
        --*(_DWORD *)(v15 + 16);
    }
  }
  return result;
}

uint64_t *WebCore::createDataAvailableEvent(uint64_t *result, WebCore::ScriptExecutionContext *a2, WebCore::FragmentedSharedBuffer *this, _QWORD *a4, double a5)
{
  uint64_t *v7;
  unsigned int v10;
  WebCore::Blob *v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  WebCore::Blob *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  unint64_t v23;
  WTF *v24;
  _QWORD *v25;
  _QWORD *v26;
  WTF *v27;
  uint64_t v28;
  _QWORD *v29;

  v7 = result;
  if (this)
  {
    v10 = atomic_load((unsigned int *)this);
    if (v10 == 1)
    {
      WebCore::FragmentedSharedBuffer::takeData(this, &v27);
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v23 = *((_QWORD *)this + 6);
      if (v23)
      {
        if (HIDWORD(v23))
        {
          __break(0xC471u);
          return result;
        }
        v24 = (WTF *)WTF::fastMalloc(*((WTF **)this + 6));
        LODWORD(v28) = v23;
        v27 = v24;
      }
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E3406E88;
      v25[1] = &v27;
      v29 = v25;
      WebCore::FragmentedSharedBuffer::forEachSegment((uint64_t)this, &v29);
      v26 = v29;
      v29 = 0;
      if (v26)
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
    }
    v11 = (WebCore::Blob *)bmalloc::api::isoAllocate();
    v12 = WebCore::Blob::Blob((uint64_t)v11, a2, (uint64_t)&v27, a4);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v12 + 24));
    v14 = v27;
    if (v27)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      v14 = (WTF *)WTF::fastFree(v14, v13);
    }
  }
  else
  {
    v11 = (WebCore::Blob *)bmalloc::api::isoAllocate();
    v15 = WebCore::Blob::Blob(v11, a2);
    v14 = (WTF *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v15 + 3);
  }
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 96)) == 0)
    v17 = WebCore::threadGlobalDataSlow(v14);
  v18 = *(_QWORD *)(v17 + 40);
  if (!v18)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v17);
    v18 = *(_QWORD *)(v17 + 40);
  }
  v19 = bmalloc::api::isoAllocate();
  result = (uint64_t *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v19);
  *(_QWORD *)(v19 + 8) = 0;
  *(_DWORD *)(v19 + 16) = 1;
  v21 = *(_DWORD *)(v19 + 20) & 0xFFC00000 | 0x88200 | (*(_QWORD *)(v18 + 568) != 0);
  *(_DWORD *)(v19 + 20) = v21;
  v22 = *(_DWORD **)(v18 + 568);
  if (v22)
  {
    *v22 += 2;
    v21 = *(_DWORD *)(v19 + 20);
  }
  *(_QWORD *)(v19 + 24) = v22;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = v20;
  *(_DWORD *)(v19 + 20) = v21 | 0x4000;
  *(_QWORD *)v19 = off_1E335C538;
  *(_QWORD *)(v19 + 64) = 0;
  *(_QWORD *)(v19 + 72) = v11;
  *(double *)(v19 + 80) = a5;
  *v7 = v19;
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::requestData(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double>::call(WTF *result, WebCore::FragmentedSharedBuffer **a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  WebCore::FragmentedSharedBuffer *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;
  WebCore::Event *v10;
  unint64_t v11;
  int v12;
  double v13;
  double v14;
  double v15;
  WebCore::Event *v16;

  v4 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v4 + 224))
  {
    v6 = *a2;
    v7 = *(_QWORD *)(v4 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
        v9 = (WebCore::ScriptExecutionContext *)(v8 - 96);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    WebCore::createDataAvailableEvent((uint64_t *)&v16, v9, v6, a3, a4);
    v10 = v16;
    result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v4 + 32), v16);
    if (*((_DWORD *)v10 + 4) == 1)
      result = (WTF *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 4);
    v12 = *(_DWORD *)(v4 + 136);
    if (v12 == 2)
    {
      if (*(_BYTE *)(v4 + 164))
      {
        LODWORD(v11) = *(_DWORD *)(v4 + 160);
        v15 = (double)v11 / 1000.0;
        if (!*(_BYTE *)(v4 + 280))
          *(_BYTE *)(v4 + 280) = 1;
        *(double *)(v4 + 272) = v15;
      }
    }
    else if (v12 == 1)
    {
      if (*(_BYTE *)(v4 + 164))
      {
        LODWORD(v11) = *(_DWORD *)(v4 + 160);
        *(_QWORD *)(v4 + 192) = 0;
        v13 = (double)v11 / 1000.0;
        WTF::MonotonicTime::now(result);
        return (WTF *)WebCore::TimerBase::setNextFireTime(v4 + 168, v13 + v14);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaRecorder>(WebCore::MediaRecorder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaRecorder>(WebCore::MediaRecorder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaRecorder>(WebCore::MediaRecorder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaRecorder>(WebCore::MediaRecorder &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::MediaRecorder *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E335C950;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v7);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::MediaRecorder *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::MediaRecorder::~MediaRecorder(v5);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::pauseRecording(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E335C978;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::pauseRecording(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E335C978;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::MediaRecorder::pauseRecording(void)::$_0,void>::call(uint64_t (***result)()))()
{
  uint64_t (**v1)();
  uint64_t (**v2)();
  uint64_t v3;
  int v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t (***v9)();

  v1 = result[1];
  if (*((_BYTE *)v1 + 224))
  {
    v2 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v2 = (uint64_t (*)())off_1E335C9A0;
    v2[1] = (uint64_t (*)())v1;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    v4 = *((_DWORD *)v1 + 6);
    *(_QWORD *)(v3 + 8) = v1;
    v1[2] = (uint64_t (*)())((char *)v1[2] + 1);
    *((_DWORD *)v1 + 6) = v4 + 2;
    result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *result = off_1E335C950;
    result[1] = v1;
    result[2] = (uint64_t (**)())v3;
    result[3] = v2;
    v9 = result;
    v5 = v1[1];
    if (v5)
    {
      v6 = *((_QWORD *)v5 + 1);
      if (v6)
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 104))(v6 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v7, 11, (uint64_t *)&v9);
        result = v9;
        v9 = 0;
        if (!result)
          return result;
      }
      else
      {
        v9 = 0;
      }
      v8 = *result;
    }
    else
    {
      v9 = 0;
      v8 = off_1E335C950;
    }
    return (uint64_t (***)())v8[1]();
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::pauseRecording(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(WTF *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::EventTarget *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 224))
  {
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
      v3 = WebCore::threadGlobalDataSlow(result);
    v4 = (WebCore::EventTarget *)(v1 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v5 = *(_QWORD *)(v3 + 40);
    }
    v6 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    *(_QWORD *)v6 = off_1E33A4B48;
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200;
    v9 = *(_QWORD *)(v5 + 1424) != 0;
    *(_DWORD *)(v6 + 16) = 1;
    *(_DWORD *)(v6 + 20) = v8 | v9;
    v10 = *(_DWORD **)(v5 + 1424);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v6 + 24) = v10;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = 0;
    result = WebCore::EventTarget::dispatchEvent(v4, (WebCore::Event *)v6);
    if (*(_DWORD *)(v6 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 16);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::resumeRecording(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E335C9C8;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::resumeRecording(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E335C9C8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::MediaRecorder::resumeRecording(void)::$_0,void>::call(uint64_t (***result)()))()
{
  uint64_t (**v1)();
  uint64_t (**v2)();
  uint64_t v3;
  int v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t (***v9)();

  v1 = result[1];
  if (*((_BYTE *)v1 + 224))
  {
    v2 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v2 = (uint64_t (*)())off_1E335C9F0;
    v2[1] = (uint64_t (*)())v1;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    v4 = *((_DWORD *)v1 + 6);
    *(_QWORD *)(v3 + 8) = v1;
    v1[2] = (uint64_t (*)())((char *)v1[2] + 1);
    *((_DWORD *)v1 + 6) = v4 + 2;
    result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *result = off_1E335C950;
    result[1] = v1;
    result[2] = (uint64_t (**)())v3;
    result[3] = v2;
    v9 = result;
    v5 = v1[1];
    if (v5)
    {
      v6 = *((_QWORD *)v5 + 1);
      if (v6)
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 104))(v6 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v7, 11, (uint64_t *)&v9);
        result = v9;
        v9 = 0;
        if (!result)
          return result;
      }
      else
      {
        v9 = 0;
      }
      v8 = *result;
    }
    else
    {
      v9 = 0;
      v8 = off_1E335C950;
    }
    return (uint64_t (***)())v8[1]();
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::resumeRecording(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(WTF *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::EventTarget *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 224))
  {
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
      v3 = WebCore::threadGlobalDataSlow(result);
    v4 = (WebCore::EventTarget *)(v1 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v5 = *(_QWORD *)(v3 + 40);
    }
    v6 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    *(_QWORD *)v6 = off_1E33A4B48;
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200;
    v9 = *(_QWORD *)(v5 + 1720) != 0;
    *(_DWORD *)(v6 + 16) = 1;
    *(_DWORD *)(v6 + 20) = v8 | v9;
    v10 = *(_DWORD **)(v5 + 1720);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v6 + 24) = v10;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = 0;
    result = WebCore::EventTarget::dispatchEvent(v4, (WebCore::Event *)v6);
    if (*(_DWORD *)(v6 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 16);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,WTF::String const,double>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E335CA18;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,WTF::String const,double>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E335CA18;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,WTF::String const,double>::call(uint64_t a1, uint64_t *a2, _DWORD **a3, double a4)
{
  return WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_0::operator()<WTF::String,double>((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t *WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_0::operator()<WTF::String,double>(uint64_t *a1, uint64_t *a2, _DWORD **a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t (**v18)();
  uint64_t v20[4];
  uint64_t (***v21)();

  v5 = *a1;
  v6 = *a2;
  *a2 = 0;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  v20[1] = (uint64_t)v7;
  *(double *)&v20[2] = a4;
  v8 = a1[2];
  a1[2] = 0;
  v9 = WTF::fastMalloc((WTF *)0x28);
  v10 = v9;
  *(_QWORD *)v9 = off_1E335CA40;
  *(_QWORD *)(v9 + 8) = v6;
  v20[0] = 0;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v9 + 16) = v7;
  *(double *)(v9 + 24) = a4;
  v20[3] = 0;
  *(_QWORD *)(v9 + 32) = v8;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  v12 = *(_DWORD *)(v5 + 24);
  *(_QWORD *)(v11 + 8) = v5;
  ++*(_QWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 24) = v12 + 2;
  v13 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v13 = off_1E335C950;
  v13[1] = (uint64_t (**)())v5;
  v13[2] = (uint64_t (**)())v11;
  v13[3] = (uint64_t (**)())v10;
  v21 = v13;
  v14 = *(_QWORD *)(v5 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v16, 11, (uint64_t *)&v21);
      v13 = v21;
      v21 = 0;
      if (!v13)
        return _ZZZN7WebCore13MediaRecorder9fetchDataEON3WTF8FunctionIFvONS1_6RefPtrINS_22FragmentedSharedBufferENS1_12RawPtrTraitsIS4_EENS1_21DefaultRefDerefTraitsIS4_EEEERKNS1_6StringEdEEENS0_19TakePrivateRecorderEEN3__0clISC_dEEDaSA_RT_T0_ENUlvE_D1Ev(v20, v17);
    }
    else
    {
      v21 = 0;
    }
    v18 = *v13;
  }
  else
  {
    v21 = 0;
    v18 = off_1E335C950;
  }
  v18[1]();
  return _ZZZN7WebCore13MediaRecorder9fetchDataEON3WTF8FunctionIFvONS1_6RefPtrINS_22FragmentedSharedBufferENS1_12RawPtrTraitsIS4_EENS1_21DefaultRefDerefTraitsIS4_EEEERKNS1_6StringEdEEENS0_19TakePrivateRecorderEEN3__0clISC_dEEDaSA_RT_T0_ENUlvE_D1Ev(v20, v17);
}

uint64_t *_ZZZN7WebCore13MediaRecorder9fetchDataEON3WTF8FunctionIFvONS1_6RefPtrINS_22FragmentedSharedBufferENS1_12RawPtrTraitsIS4_EENS1_21DefaultRefDerefTraitsIS4_EEEERKNS1_6StringEdEEENS0_19TakePrivateRecorderEEN3__0clISC_dEEDaSA_RT_T0_ENUlvE_D1Ev(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v5 + 8);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v18 = v11;
              v19 = v10;
              v20 = (WTF *)v12;
              v21 = v5;
              atomic_store(1u, v12);
              v15 = v12[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E335CA58[v15])(&v23, v12 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              v5 = v21;
              v11 = v18;
              v10 = v19;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v16 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v16 && v16 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v22 = v5;
        WTF::fastFree(v16, a2);
        v5 = v22;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder9fetchDataEONS_8FunctionIFvONS_6RefPtrINS2_22FragmentedSharedBufferENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEERKNS_6StringEdEEENS3_19TakePrivateRecorderEEN3__0clISE_dEEDaSC_RT_T0_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E335CA40;
  _ZZZN7WebCore13MediaRecorder9fetchDataEON3WTF8FunctionIFvONS1_6RefPtrINS_22FragmentedSharedBufferENS1_12RawPtrTraitsIS4_EENS1_21DefaultRefDerefTraitsIS4_EEEERKNS1_6StringEdEEENS0_19TakePrivateRecorderEEN3__0clISC_dEEDaSA_RT_T0_ENUlvE_D1Ev(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder9fetchDataEONS_8FunctionIFvONS_6RefPtrINS2_22FragmentedSharedBufferENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEERKNS_6StringEdEEENS3_19TakePrivateRecorderEEN3__0clISE_dEEDaSC_RT_T0_EUlvE_vJEED0Ev(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E335CA40;
  _ZZZN7WebCore13MediaRecorder9fetchDataEON3WTF8FunctionIFvONS1_6RefPtrINS_22FragmentedSharedBufferENS1_12RawPtrTraitsIS4_EENS1_21DefaultRefDerefTraitsIS4_EEEERKNS1_6StringEdEEENS0_19TakePrivateRecorderEEN3__0clISC_dEEDaSA_RT_T0_ENUlvE_D1Ev(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore13MediaRecorder9fetchDataEONS_8FunctionIFvONS_6RefPtrINS2_22FragmentedSharedBufferENS_12RawPtrTraitsIS6_EENS_21DefaultRefDerefTraitsIS6_EEEERKNS_6StringEdEEENS3_19TakePrivateRecorderEEN3__0clISE_dEEDaSC_RT_T0_EUlvE_vJEE4callEv(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, double))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a1 + 8, a1 + 16, *(double *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_1,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,WTF::String const,double>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;

  *a1 = &off_1E335CA88;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *((_QWORD *)v5 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v5 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v7);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_1,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,WTF::String const,double>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E335CA88;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *((_QWORD *)v5 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v5 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v7);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_1,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &,WTF::String const,double>::call(uint64_t a1, uint64_t *a2, _DWORD **a3, double a4)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  WTF *v11;
  unint64_t v12;
  unint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  char v35;

  v6 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v6 + 225) = 0;
  result = (uint64_t)WebCore::MediaRecorder::fetchData(WTF::Function<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&,WebCore::MediaRecorder::TakePrivateRecorder)::$_0::operator()<WTF::String,double>((uint64_t *)(a1 + 24), a2, a3, a4);
  v9 = *(_QWORD *)(v6 + 232);
  v10 = *(_QWORD *)(v6 + 240);
  v11 = *(WTF **)(v6 + 248);
  v12 = *(unsigned int *)(v6 + 256);
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 256) = 0;
  if (v9 != v10)
  {
    v13 = v9;
    do
    {
      v34 = 0;
      result = (*(uint64_t (**)(_QWORD, WTF **, _DWORD **, double))(**((_QWORD **)v11 + v13) + 16))(*((_QWORD *)v11 + v13), &v34, a3, a4);
      v14 = v34;
      v34 = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr((unsigned int *)v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)v14));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)v14);
          v17 = *((unsigned int *)v14 + 5);
          if ((_DWORD)v17)
          {
            v18 = *((_QWORD *)v14 + 1);
            v19 = v18 + 16 * v17;
            do
            {
              v20 = *(unsigned int **)(v18 + 8);
              *(_QWORD *)(v18 + 8) = 0;
              if (v20)
              {
                do
                {
                  v21 = __ldaxr(v20);
                  v22 = v21 - 1;
                }
                while (__stlxr(v22, v20));
                if (!v22)
                {
                  v32 = v19;
                  v33 = (WTF *)v20;
                  atomic_store(1u, v20);
                  v23 = v20[6];
                  if ((_DWORD)v23 != -1)
                    ((void (*)(char *, char *))off_1E335CA58[v23])(&v35, (char *)v33 + 8);
                  *((_DWORD *)v33 + 6) = -1;
                  WTF::fastFree(v33, v8);
                  v19 = v32;
                }
              }
              v18 += 16;
            }
            while (v18 != v19);
          }
          v24 = (WTF *)*((_QWORD *)v14 + 1);
          if ((WTF *)((char *)v14 + 24) != v24 && v24 != 0)
          {
            *((_QWORD *)v14 + 1) = 0;
            *((_DWORD *)v14 + 4) = 0;
            WTF::fastFree(v24, v8);
          }
          result = WTF::fastFree(v14, v8);
        }
      }
      v13 += v12 + 1;
      do
        v13 -= v12;
      while (v13 >= v12);
    }
    while (v10 != v13);
    if (v9 <= v10)
    {
      v30 = (uint64_t *)((char *)v11 + 8 * v9);
      v31 = 8 * v10 - 8 * v9;
      do
      {
        result = *v30;
        *v30 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        ++v30;
        v31 -= 8;
      }
      while (v31);
    }
    else
    {
      if (v10)
      {
        v26 = 8 * v10;
        v27 = (uint64_t *)v11;
        do
        {
          result = *v27;
          *v27 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v27;
          v26 -= 8;
        }
        while (v26);
      }
      if (v9 != v12)
      {
        v28 = (uint64_t *)((char *)v11 + 8 * v9);
        v29 = 8 * v12 - 8 * v9;
        do
        {
          result = *v28;
          *v28 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v28;
          v29 -= 8;
        }
        while (v29);
      }
    }
  }
  if (v11)
    return WTF::fastFree(v11, v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::handleTrackChange(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t (**v10)();
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  _QWORD *v18;
  uint64_t (***v19)();

  v1 = *(_QWORD *)(a1 + 8);
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v2 = 1;
  ++*(_DWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 8) = v1;
  ++*(_QWORD *)(v1 + 16);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E335CAD8;
  v3[1] = v1;
  v3[2] = v2;
  v18 = v3;
  if (!*(_DWORD *)(v1 + 136))
  {
    v9 = v3;
    v10 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v10 = (uint64_t (*)())off_1E335CB00;
    v10[1] = (uint64_t (*)())v1;
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    v12 = *(_DWORD *)(v1 + 24);
    *(_QWORD *)(v11 + 8) = v1;
    ++*(_QWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 24) = v12 + 2;
    v13 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v13 = off_1E335C950;
    v13[1] = (uint64_t (**)())v1;
    v13[2] = (uint64_t (**)())v11;
    v13[3] = v10;
    v19 = v13;
    v14 = *(_QWORD *)(v1 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v16, 11, (uint64_t *)&v19);
        v13 = v19;
        v19 = 0;
        if (!v13)
          return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
      }
      else
      {
        v19 = 0;
      }
      v17 = *v13;
    }
    else
    {
      v19 = 0;
      v17 = off_1E335C950;
    }
    v17[1]();
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v4 = *(unsigned int *)(v1 + 156);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 144);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v7 + 24, (_QWORD *)(v1 + 72));
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 136) = 0;
  result = WebCore::MediaRecorderPrivate::stop(*(_QWORD **)(v1 + 128), (uint64_t)&v18);
  v9 = v18;
  v18 = 0;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::handleTrackChange(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E335CAD8;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::handleTrackChange(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E335CAD8;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::MediaRecorder::handleTrackChange(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1))()
{
  uint64_t v1;
  uint64_t (**v2)();
  uint64_t v3;
  int v4;
  uint64_t (***result)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t (***v10)();

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v2 = (uint64_t (*)())off_1E335CB00;
  v2[1] = (uint64_t (*)())v1;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)(v3 + 8) = v1;
  ++*(_QWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 24) = v4 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E335C950;
  result[1] = (uint64_t (**)())v1;
  result[2] = (uint64_t (**)())v3;
  result[3] = v2;
  v10 = result;
  v6 = *(_QWORD *)(v1 + 8);
  if (!v6)
  {
    v10 = 0;
    v9 = off_1E335C950;
    return (uint64_t (***)())v9[1]();
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v8, 11, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
LABEL_6:
    v9 = *result;
    return (uint64_t (***)())v9[1]();
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::handleTrackChange(void)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WebCore::EventTarget *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  WebCore::Event *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WebCore::Event *v16;
  WTF::StringImpl *v17;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 224))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16) = 10;
    WebCore::MediaRecorder::dispatchError((WTF *)v1, (unsigned __int8 *)&v16);
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_BYTE *)(v1 + 224))
    {
      v3 = (WebCore::EventTarget *)(v1 + 32);
      v4 = *(_QWORD *)(v1 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          v6 = (WebCore::ScriptExecutionContext *)(v5 - 96);
        else
          v6 = 0;
      }
      else
      {
        v6 = 0;
      }
      v15 = 0;
      WebCore::createDataAvailableEvent((uint64_t *)&v16, v6, 0, &v15, 0.0);
      v7 = v16;
      WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 32), v16);
      if (*((_DWORD *)v7 + 4) == 1)
        (*(void (**)(WebCore::Event *))(*(_QWORD *)v7 + 8))(v7);
      else
        --*((_DWORD *)v7 + 4);
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      if (*(_BYTE *)(v1 + 224))
      {
        v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
          v10 = WebCore::threadGlobalDataSlow(result);
        v11 = *(_QWORD *)(v10 + 40);
        if (!v11)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
          v11 = *(_QWORD *)(v10 + 40);
        }
        v12 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
        *(_DWORD *)(v12 + 16) = 1;
        *(_QWORD *)v12 = off_1E33A4B48;
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v11 + 1992) != 0);
        v14 = *(_DWORD **)(v11 + 1992);
        if (v14)
          *v14 += 2;
        *(_QWORD *)(v12 + 24) = v14;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        *(_QWORD *)(v12 + 48) = 0;
        *(_QWORD *)(v12 + 56) = v13;
        *(_QWORD *)(v12 + 64) = 0;
        result = WebCore::EventTarget::dispatchEvent(v3, (WebCore::Event *)v12);
        if (*(_DWORD *)(v12 + 16) == 1)
          return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        else
          --*(_DWORD *)(v12 + 16);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::trackEnded(WebCore::MediaStreamTrackPrivate &)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t (**v10)();
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  _QWORD *v18;
  uint64_t (***v19)();

  v1 = *(_QWORD *)(a1 + 8);
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v2 = 1;
  ++*(_DWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 8) = v1;
  ++*(_QWORD *)(v1 + 16);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E335CB50;
  v3[1] = v1;
  v3[2] = v2;
  v18 = v3;
  if (!*(_DWORD *)(v1 + 136))
  {
    v9 = v3;
    v10 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v10 = (uint64_t (*)())off_1E335CB78;
    v10[1] = (uint64_t (*)())v1;
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    v12 = *(_DWORD *)(v1 + 24);
    *(_QWORD *)(v11 + 8) = v1;
    ++*(_QWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 24) = v12 + 2;
    v13 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v13 = off_1E335C950;
    v13[1] = (uint64_t (**)())v1;
    v13[2] = (uint64_t (**)())v11;
    v13[3] = v10;
    v19 = v13;
    v14 = *(_QWORD *)(v1 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v16, 11, (uint64_t *)&v19);
        v13 = v19;
        v19 = 0;
        if (!v13)
          return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
      }
      else
      {
        v19 = 0;
      }
      v17 = *v13;
    }
    else
    {
      v19 = 0;
      v17 = off_1E335C950;
    }
    v17[1]();
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  }
  v4 = *(unsigned int *)(v1 + 156);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 144);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v7 + 24, (_QWORD *)(v1 + 72));
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 136) = 0;
  result = WebCore::MediaRecorderPrivate::stop(*(_QWORD **)(v1 + 128), (uint64_t)&v18);
  v9 = v18;
  v18 = 0;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::trackEnded(WebCore::MediaStreamTrackPrivate &)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E335CB50;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaRecorder::trackEnded(WebCore::MediaStreamTrackPrivate &)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E335CB50;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaRecorder::~MediaRecorder((WebCore::MediaRecorder *)v5);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::MediaRecorder::trackEnded(WebCore::MediaStreamTrackPrivate &)::$_1::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1))()
{
  uint64_t v1;
  uint64_t (**v2)();
  uint64_t v3;
  int v4;
  uint64_t (***result)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t (***v10)();

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v2 = (uint64_t (*)())off_1E335CB78;
  v2[1] = (uint64_t (*)())v1;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)(v3 + 8) = v1;
  ++*(_QWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 24) = v4 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E335C950;
  result[1] = (uint64_t (**)())v1;
  result[2] = (uint64_t (**)())v3;
  result[3] = v2;
  v10 = result;
  v6 = *(_QWORD *)(v1 + 8);
  if (!v6)
  {
    v10 = 0;
    v9 = off_1E335C950;
    return (uint64_t (***)())v9[1]();
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v8, 11, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
LABEL_6:
    v9 = *result;
    return (uint64_t (***)())v9[1]();
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaRecorder::trackEnded(WebCore::MediaStreamTrackPrivate &)::$_1::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WebCore::EventTarget *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScriptExecutionContext *v5;
  WebCore::Event *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WebCore::Event *v15;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 224))
  {
    v2 = (WebCore::EventTarget *)(v1 + 32);
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        v5 = (WebCore::ScriptExecutionContext *)(v4 - 96);
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    v14 = 0;
    WebCore::createDataAvailableEvent((uint64_t *)&v15, v5, 0, &v14, 0.0);
    v6 = v15;
    WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 32), v15);
    if (*((_DWORD *)v6 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)v6 + 8))(v6);
    else
      --*((_DWORD *)v6 + 4);
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_BYTE *)(v1 + 224))
    {
      v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
        v9 = WebCore::threadGlobalDataSlow(result);
      v10 = *(_QWORD *)(v9 + 40);
      if (!v10)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
        v10 = *(_QWORD *)(v9 + 40);
      }
      v11 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      *(_DWORD *)(v11 + 16) = 1;
      *(_QWORD *)v11 = off_1E33A4B48;
      *(_QWORD *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v10 + 1992) != 0);
      v13 = *(_DWORD **)(v10 + 1992);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v11 + 24) = v13;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = v12;
      *(_QWORD *)(v11 + 64) = 0;
      result = WebCore::EventTarget::dispatchEvent(v2, (WebCore::Event *)v11);
      if (*(_DWORD *)(v11 + 16) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      else
        --*(_DWORD *)(v11 + 16);
    }
  }
  return result;
}

uint64_t WTF::parseInteger<unsigned int,unsigned char>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *i;
  unsigned int v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  int v25;
  uint64_t v26;
  int v27;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (a1 && a2)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(unsigned __int8 *)(a1 + v7);
      if ((v8 - 9) >= 5 && v8 != 32)
        break;
      if (a2 == ++v7)
        goto LABEL_57;
    }
    if (v8 == 43)
    {
      if (a2 - 1 == v7)
        goto LABEL_57;
      v10 = ~v7 + a2;
      v9 = (unsigned __int8 *)(a1 + v7 + 1);
      v8 = *v9;
    }
    else
    {
      v9 = (unsigned __int8 *)(a1 + v7);
      v10 = a2 - v7;
    }
    if ((v8 - 48) > 9)
    {
      if ((v8 | 0x20u) >= 0x61)
      {
        v25 = a3 >= 36 ? 36 : a3;
        v12 = v25 + 87;
        if (v25 + 87 > (v8 | 0x20u))
          goto LABEL_16;
      }
    }
    else if (v8 - 48 < a3)
    {
      if (a3 >= 36)
        v11 = 36;
      else
        v11 = a3;
      v12 = v11 + 87;
LABEL_16:
      v4 = 0;
      v13 = 0;
      v14 = &v9[v10];
      v15 = v10 - 1;
      for (i = v9 + 1; ; ++i)
      {
        v17 = v8 - 48;
        v18 = (v8 | 0x20) - 87;
        if (v17 < 0xA)
          v18 = v17;
        v19 = v4 * (unint64_t)a3;
        if ((v19 & 0xFFFFFFFF00000000) == 0)
          v4 *= a3;
        v20 = __CFADD__(v4, v18);
        v21 = v4 + v18;
        v22 = v20;
        if (!v20)
          v4 = v21;
        if ((v19 & 0xFFFFFFFF00000000) != 0 ? 1 : v22)
          v13 = 1;
        if (!v15)
          break;
        ++v9;
        v8 = *i;
        if ((v8 - 48) > 9)
        {
          if ((v8 | 0x20u) < 0x61 || v12 <= (v8 | 0x20u))
          {
            v14 = i;
            break;
          }
        }
        else if (v8 - 48 >= a3)
        {
          v14 = v9;
          break;
        }
        --v15;
      }
      if (!v13)
      {
        if (a4 || !v15)
        {
LABEL_42:
          v6 = v4 & 0xFFFFFF00;
          v4 = v4;
          v5 = 0x100000000;
          return v5 | v6 | v4;
        }
        v26 = 0;
        while (1)
        {
          v27 = v14[v26];
          if ((v27 - 9) >= 5 && v27 != 32)
            break;
          if (v15 == ++v26)
            goto LABEL_42;
        }
      }
    }
LABEL_57:
    v5 = 0;
    v4 = 0;
    v6 = 0;
  }
  return v5 | v6 | v4;
}

uint64_t WTF::parseInteger<unsigned int,char16_t>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  char v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  int v24;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (!a1 || !a2)
    return v5 | v6 | v4;
  v7 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v8 = *(v7 - 1);
    if ((v8 - 9) >= 5 && v8 != 32)
      break;
    ++v7;
    if (!--a2)
      goto LABEL_54;
  }
  if (v8 == 43)
  {
    if (!--a2)
      goto LABEL_54;
    v8 = *v7;
  }
  else
  {
    --v7;
  }
  if ((v8 - 48) <= 9)
  {
    if (v8 - 48 < a3)
    {
      if (a3 >= 36)
        v9 = 36;
      else
        v9 = a3;
      v10 = v9 + 87;
      goto LABEL_23;
    }
LABEL_54:
    v5 = 0;
    v4 = 0;
    v6 = 0;
    return v5 | v6 | v4;
  }
  if ((v8 | 0x20u) < 0x61)
    goto LABEL_54;
  v11 = a3 >= 36 ? 36 : a3;
  v10 = v11 + 87;
  if (v11 + 87 <= (v8 | 0x20u))
    goto LABEL_54;
LABEL_23:
  v4 = 0;
  v12 = 0;
  v13 = a2 - 1;
  v14 = v7 + 1;
  v15 = &v7[a2];
  while (1)
  {
    v16 = v8 - 48;
    v17 = (v8 | 0x20) - 87;
    if (v16 < 0xA)
      v17 = v16;
    v18 = v4 * (unint64_t)a3;
    if ((v18 & 0xFFFFFFFF00000000) == 0)
      v4 *= a3;
    v19 = __CFADD__(v4, v17);
    v20 = v4 + v17;
    v21 = v19;
    if (!v19)
      v4 = v20;
    if ((v18 & 0xFFFFFFFF00000000) != 0 ? 1 : v21)
      v12 = 1;
    if (!v13)
      break;
    ++v7;
    v8 = *v14;
    if ((v8 - 48) > 9)
    {
      if ((v8 | 0x20u) < 0x61 || v10 <= (v8 | 0x20u))
      {
        v15 = v14;
        break;
      }
    }
    else if (v8 - 48 >= a3)
    {
      v15 = v7;
      break;
    }
    --v13;
    ++v14;
  }
  if (v12)
    goto LABEL_54;
  if (!a4 && v13)
  {
    v23 = 0;
    do
    {
      v24 = v15[v23];
      if ((v24 - 9) >= 5 && v24 != 32)
        goto LABEL_54;
    }
    while (v13 != ++v23);
  }
  v6 = v4 & 0xFFFFFF00;
  v4 = v4;
  v5 = 0x100000000;
  return v5 | v6 | v4;
}

uint64_t WTF::HashTable<WebCore::MediaSessionAction,WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::HashMap<WebCore::MediaSessionAction,WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>,WTF::IntHash<WebCore::MediaSessionAction>,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaSessionActionHandler,WTF::RawPtrTraits<WebCore::MediaSessionActionHandler>,WTF::DefaultRefDerefTraits<WebCore::MediaSessionActionHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::MediaSessionAction>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 24);
    do
    {
      *((_BYTE *)v10 - 8) = -1;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (_BYTE *)(v4 + 16 * v11);
      v13 = *v12;
      if (v13 != 254)
      {
        if (v13 == 255)
        {
          v14 = v4 + 16 * v11;
          v15 = *(_DWORD **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            if (v15[4] == 1)
              goto LABEL_27;
            --v15[4];
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
          v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            v21 = v20 & v17;
            v20 = ++v18 + v21;
          }
          while (*(unsigned __int8 *)(v16 + 16 * v21) != 255);
          v22 = v16 + 16 * v21;
          v23 = *(_DWORD **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            if (v23[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[4];
          }
          *(_BYTE *)v22 = *v12;
          v24 = v4 + 16 * v11;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v25;
          v15 = *(_DWORD **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v15)
            goto LABEL_25;
          if (v15[4] == 1)
          {
LABEL_27:
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
            goto LABEL_25;
          }
          --v15[4];
        }
      }
LABEL_25:
      if (++v11 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSession::notifyMetadataObservers(void)::$_0,void,WebCore::MediaSessionObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8) + 48);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSession::notifyPositionStateObservers(void)::$_0,void,WebCore::MediaSessionObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8) + 64);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSession::notifyPlaybackStateObservers(void)::$_0,void,WebCore::MediaSessionObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 56));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSession::notifyActionHandlerObservers(void)::$_0,void,WebCore::MediaSessionObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

void sub_19543AE14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19543B120(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void drawPattern(CFStringRef *a1, CGContext *a2)
{
  __int128 v4;
  CTFontRef v5;
  const __CFDictionary *v6;
  const __CFAttributedString *v7;
  const __CTLine *v8;
  double v9;
  double v10;
  double v11;
  const WebCore::Color *v12;
  void *v13;
  CGFloat a;
  const WebCore::Color *v15;
  void *v16;
  CGFloat v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  CGAffineTransform matrix;
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v26[0] = *MEMORY[0x1E0CA8188];
  v4 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&matrix.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&matrix.c = v4;
  *(_OWORD *)&matrix.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v5 = CTFontCreateWithName(CFSTR("Helvetica"), 20.0, &matrix);
  v26[1] = *MEMORY[0x1E0CA8558];
  v27[0] = v5;
  v27[1] = MEMORY[0x1E0C9AAB0];
  v6 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 2);
  if (v5)
    CFRelease(v5);
  v7 = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1[3], v6);
  v8 = CTLineCreateWithAttributedString(v7);
  -[__CFString sizeWithAttributes:]((id)a1[3], "sizeWithAttributes:", v6);
  v10 = v9;
  CGContextScaleCTM(a2, 1.0, -1.0);
  v11 = v10 + 5.0;
  CGContextTranslateCTM(a2, 0.0, v11 * -2.0);
  CGContextSetTextDrawingMode(a2, kCGTextFill);
  CGContextSetTextPosition(a2, 0.0, 0.0);
  v24 = 0x11040000000000FFLL;
  WebCore::cachedCGColor((WebCore *)&v24, v12, &matrix);
  CGContextSetFillColorWithColor(a2, *(CGColorRef *)&matrix.a);
  a = matrix.a;
  matrix.a = 0.0;
  if (a != 0.0)
    CFRelease(*(CFTypeRef *)&a);
  if ((v24 & 0x8000000000000) != 0)
  {
    v18 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v13);
    }
  }
  CTLineDraw(v8, a2);
  CGContextSetTextPosition(a2, 0.0, v11);
  v24 = 0x11040000FFFFFFFFLL;
  WebCore::cachedCGColor((WebCore *)&v24, v15, &matrix);
  CGContextSetFillColorWithColor(a2, *(CGColorRef *)&matrix.a);
  v17 = matrix.a;
  matrix.a = 0.0;
  if (v17 != 0.0)
    CFRelease(*(CFTypeRef *)&v17);
  if ((v24 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v16);
    }
  }
  CTLineDraw(v8, a2);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
}

void sub_19543B3E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  const void *v11;
  const void *v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (cf)
    CFRelease(cf);
  if ((a10 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void WebCore::NavigatorMediaSession::~NavigatorMediaSession(WebCore::NavigatorMediaSession *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
}

void WebCore::NavigatorMediaSession::~NavigatorMediaSession(WebCore::NavigatorMediaSession *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  WTF::fastFree(this, a2);
}

WebCore::MediaSession *WebCore::NavigatorMediaSession::mediaSession(WebCore::NavigatorMediaSession *this, WebCore::Navigator *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  WebCore::MediaSession *v7;
  WebCore::Navigator *v8;
  WebCore::MediaSession *v9;
  _DWORD *v10;
  unsigned __int8 *v12[2];

  v3 = (uint64_t *)((char *)this + 72);
  v12[0] = "NavigatorMediaSession";
  v12[1] = (unsigned __int8 *)22;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 9, v12);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = off_1E335CF48;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = this;
    v12[0] = (unsigned __int8 *)v5;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v3, "NavigatorMediaSession", (unsigned __int8 *)0x16, (const char **)v12);
    v6 = v12[0];
    v12[0] = 0;
    if (v6)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *(WebCore::MediaSession **)(v5 + 8);
  if (!v7)
  {
    v8 = *(WebCore::Navigator **)(v5 + 16);
    v7 = (WebCore::MediaSession *)WTF::fastMalloc((WTF *)0xA8);
    v9 = WebCore::MediaSession::MediaSession(v7, v8);
    WebCore::ActiveDOMObject::suspendIfNeeded(v9);
    v10 = *(_DWORD **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v7;
    if (v10)
    {
      if (v10[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        return *(WebCore::MediaSession **)(v5 + 8);
      }
      else
      {
        --v10[6];
      }
    }
  }
  return v7;
}

void WebCore::BufferedChangeEvent::~BufferedChangeEvent(WebCore::BufferedChangeEvent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF **)(v3 + 8);
      if (v5)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v5, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *(WTF **)(v4 + 8);
      if (v6)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v6, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::BufferedChangeEvent::~BufferedChangeEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

_QWORD *WebCore::ManagedMediaSource::create@<X0>(WebCore::ManagedMediaSource *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  WebCore::MediaSource *v6;
  unint64_t StatusReg;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;

  v5 = bmalloc::api::isoAllocate();
  v6 = WebCore::MediaSource::MediaSource((WebCore::MediaSource *)v5, this);
  *(_QWORD *)v6 = &off_1E335DCD0;
  *((_QWORD *)v6 + 5) = &unk_1E335DD98;
  *((_QWORD *)v6 + 8) = &unk_1E335DE10;
  *((_QWORD *)v6 + 9) = &unk_1E335DE38;
  *((_QWORD *)v6 + 10) = &unk_1E335DE78;
  *((_BYTE *)v6 + 280) = 0;
  *((_BYTE *)v6 + 288) = 0;
  *((_BYTE *)v6 + 296) = 0;
  *((_BYTE *)v6 + 304) = 0;
  *((_BYTE *)v6 + 312) = 0;
  *((_QWORD *)v6 + 40) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)v6 + 328) = 0u;
  *(_OWORD *)((char *)v6 + 344) = 0u;
  v8 = *(unsigned int **)(StatusReg + 736);
  if (!v8)
    v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(v5 + 360) = v8;
  *(_QWORD *)(v5 + 320) = off_1E31F7378;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E335D630;
  v10[1] = WebCore::ManagedMediaSource::streamingTimerFired;
  v10[2] = 0;
  v10[3] = v5;
  *(_QWORD *)(v5 + 368) = v10;
  *(_BYTE *)(v5 + 376) = 1;
  *a2 = v5;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v5);
}

WebCore::MediaSource *WebCore::MediaSource::MediaSource(WebCore::MediaSource *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ScriptExecutionContext *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SourceBufferList *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::SourceBufferList *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  _QWORD *v45;
  int v46;
  _QWORD v47[3];
  WebCore::MediaSource *v48;

  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 4) = 0;
  v4 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v5 = (char *)a2 - 192;
    v6 = *((_QWORD *)a2 + 64);
    if (v6)
    {
      v7 = *(char **)(v6 + 8);
      if (v7)
        v5 = v7;
    }
    v4 = (WebCore::ScriptExecutionContext *)(v5 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v4);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v4 + 278))
  {
    __break(0xC471u);
    goto LABEL_63;
  }
  v48 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v4 + 16, (uint64_t *)&v48, (uint64_t)v47);
  *((_QWORD *)this + 10) = &unk_1E335D498;
  *(_QWORD *)this = &off_1E335D2F0;
  *((_QWORD *)this + 5) = &unk_1E335D3B8;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E335D430;
  *((_QWORD *)this + 9) = &unk_1E335D458;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WebCore::SourceBufferList *)(v9 - 96);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  WebCore::SourceBufferList::create(v10, v47);
  *((_QWORD *)this + 13) = v47[0];
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
      v13 = (WebCore::SourceBufferList *)(v12 - 96);
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  WebCore::SourceBufferList::create(v13, v47);
  *((_QWORD *)this + 14) = v47[0];
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 224) = 0;
  *((_WORD *)this + 116) = 0;
  *((_BYTE *)this + 234) = 0;
  *((_QWORD *)this + 30) = 0;
  if (*((_BYTE *)a2 + 274))
  {
    v32 = WTF::fastMalloc((WTF *)0x18);
    v14 = v32;
    *(_DWORD *)(v32 + 8) = 1;
    *(_QWORD *)v32 = off_1E335DEC0;
    *(_BYTE *)(v32 + 12) = 1;
    *(_QWORD *)(v32 + 16) = this;
    v33 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    if (__ldaxr(MEMORY[0x1E0CBF890]))
    {
      __clrex();
    }
    else if (!__stxr(1u, MEMORY[0x1E0CBF890]))
    {
LABEL_43:
      v35 = WTF::Logger::observers((WTF::Logger *)v32);
      v36 = v35;
      v37 = *(unsigned int *)(v35 + 12);
      if ((_DWORD)v37 != *(_DWORD *)(v35 + 8))
      {
        v45 = (_QWORD *)(*(_QWORD *)v35 + 8 * v37);
        goto LABEL_57;
      }
      v38 = v37 + (v37 >> 2);
      if (v38 >= 0x10)
        v39 = v38 + 1;
      else
        v39 = 16;
      if (v39 <= v37 + 1)
        v40 = v37 + 1;
      else
        v40 = v39;
      if (!(v40 >> 29))
      {
        v41 = *(void **)v35;
        v42 = v40;
        v43 = (void *)WTF::fastMalloc((WTF *)(8 * v40));
        *(_DWORD *)(v36 + 8) = v42;
        *(_QWORD *)v36 = v43;
        memcpy(v43, v41, 8 * v37);
        if (v41)
        {
          if (*(void **)v36 == v41)
          {
            *(_QWORD *)v36 = 0;
            *(_DWORD *)(v36 + 8) = 0;
          }
          WTF::fastFree((WTF *)v41, v44);
        }
        v37 = *(unsigned int *)(v36 + 12);
        v45 = (_QWORD *)(*(_QWORD *)v36 + 8 * v37);
LABEL_57:
        *v45 = (char *)this + 80;
        *(_DWORD *)(v36 + 12) = v37 + 1;
        v46 = __ldxr(v33);
        if (v46 == 1)
        {
          if (!__stlxr(0, v33))
            goto LABEL_20;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
        goto LABEL_20;
      }
      __break(0xC471u);
LABEL_63:
      JUMPOUT(0x19543BAF4);
    }
    v32 = MEMORY[0x19AEA534C](MEMORY[0x1E0CBF890]);
    goto LABEL_43;
  }
  *((_DWORD *)a2 - 42) += 2;
  v14 = WebCore::Document::logger((WebCore::ScriptExecutionContext *)((char *)a2 - 192));
  v15 = (unsigned int *)(v14 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  if (*((_DWORD *)a2 - 42) == 2)
  {
    if ((*((_WORD *)a2 - 81) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)a2 - 192));
  }
  else
  {
    *((_DWORD *)a2 - 42) -= 2;
  }
LABEL_20:
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = v14;
  v17 = WTF::fastMalloc((WTF *)0x50);
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_19689B170;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)v17 = off_1E335D4C0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = *((_QWORD *)this + 4);
  if (v19)
    goto LABEL_66;
  v19 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = this;
  v21 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v19;
  if (!v21)
    goto LABEL_66;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, v20);
  }
  v19 = *((_QWORD *)this + 4);
  if (v19)
  {
LABEL_66:
    do
      v24 = __ldaxr((unsigned int *)v19);
    while (__stlxr(v24 + 1, (unsigned int *)v19));
  }
  *(_QWORD *)(v17 + 16) = v19;
  v25 = *((_QWORD *)this + 1);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
      v25 = v26 - 96;
    else
      v25 = 0;
  }
  v27 = *(_OWORD *)(v25 + 240);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v25 + 224);
  *(_OWORD *)(v17 + 48) = v27;
  v28 = *((_QWORD *)this + 31);
  v29 = (unsigned int *)(v28 + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  *(_QWORD *)(v17 + 64) = v28;
  *((_QWORD *)this + 34) = v17;
  return this;
}

uint64_t WebCore::ManagedMediaSource::streamingTimerFired(WebCore::ManagedMediaSource *this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::String *v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::String *v30;
  double v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD v51[4];
  WTF::Logger *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  __int128 buf;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 31);
  v2 = *((_QWORD *)this + 32);
  v51[0] = "MediaSource";
  v51[1] = 12;
  v51[2] = "streamingTimerFired";
  v51[3] = v2;
  if (!*((_BYTE *)this + 312))
    __break(1u);
  if (*(_BYTE *)(v1 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v51);
    v4 = (WTF::String *)WTF::String::String((WTF::String *)&v55, "Disabling streaming due to policy ");
    result = WTF::String::number(v4, *((double *)this + 38));
    if (v56)
    {
      v6 = *((_DWORD *)v56 + 1);
      if (v55)
        goto LABEL_5;
    }
    else
    {
      v6 = 0;
      if (v55)
      {
LABEL_5:
        v7 = *((_DWORD *)v55 + 1);
        if (v54)
        {
LABEL_6:
          v8 = *((_DWORD *)v54 + 1);
LABEL_7:
          if ((v8 | v7) < 0
            || ((v9 = __OFADD__(v7, v8), v10 = v7 + v8, !v9) ? (v11 = 0) : (v11 = 1),
                v6 < 0 || (v11 & 1) != 0 || (result = (v6 + v10), __OFADD__(v6, v10))))
          {
            v57 = 0;
            goto LABEL_104;
          }
          if (v56 && (*((_BYTE *)v56 + 16) & 4) == 0)
          {
            v12 = 0;
            goto LABEL_21;
          }
          if (v55)
          {
            v13 = *((_DWORD *)v55 + 4);
            v12 = (v13 >> 2) & 1;
            if (v54 && (v13 & 4) != 0)
              goto LABEL_20;
          }
          else
          {
            if (v54)
            {
LABEL_20:
              v12 = (*((unsigned __int8 *)v54 + 16) >> 2) & 1;
              goto LABEL_21;
            }
            v12 = 1;
          }
LABEL_21:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, v56, (uint64_t)v55, (uint64_t)v54, &v57);
          if (v57)
          {
            v15 = v54;
            v54 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
            v16 = v55;
            v55 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v14);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v56;
            v56 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v14);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = qword_1ECE7CE80;
            v19 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v19)
            {
              WTF::String::utf8();
              v21 = v52 ? (char *)v52 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v21;
              _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v19 = (uint64_t)v52;
              v52 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 1)
                  v19 = WTF::fastFree((WTF *)v19, v20);
                else
                  --*(_DWORD *)v19;
              }
            }
            if (WebCore::LogMediaSource)
            {
              v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v23 = *v22;
                if ((v23 & 1) != 0)
                  break;
                v24 = __ldaxr(v22);
                if (v24 == v23)
                {
                  if (!__stxr(v23 | 1, v22))
                  {
                    v25 = WTF::Logger::observers((WTF::Logger *)v19);
                    v26 = *(unsigned int *)(v25 + 12);
                    if ((_DWORD)v26)
                    {
                      v27 = *(uint64_t **)v25;
                      v28 = *(_QWORD *)v25 + 8 * v26;
                      do
                      {
                        v29 = *v27;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v51);
                        v59 = 0;
                        v30 = (WTF::String *)WTF::String::String((WTF::String *)&v60, "Disabling streaming due to policy ");
                        v31 = *((double *)this + 38);
                        v61 = 0;
                        WTF::String::number(v30, v31);
                        v52 = 0;
                        v53 = 0;
                        v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v53) = 3;
                        v52 = v32;
                        v33 = HIDWORD(v53);
                        *((_DWORD *)v32 + 4 * HIDWORD(v53)) = buf;
                        v34 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                        *((_DWORD *)v32 + 4 * (v33 + 1)) = v59;
                        v35 = v60;
                        if (v60)
                          *(_DWORD *)v60 += 2;
                        *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                        *((_DWORD *)v32 + 4 * (v33 + 2)) = v61;
                        v36 = v62;
                        if (v62)
                          *(_DWORD *)v62 += 2;
                        *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                        HIDWORD(v53) = v33 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, &WebCore::LogMediaSource, 0, &v52);
                        v37 = v52;
                        if (HIDWORD(v53))
                        {
                          v38 = 16 * HIDWORD(v53);
                          v39 = (WTF::StringImpl **)((char *)v52 + 8);
                          do
                          {
                            v40 = *v39;
                            *v39 = 0;
                            if (v40)
                            {
                              if (*(_DWORD *)v40 == 2)
                                WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v20);
                              else
                                *(_DWORD *)v40 -= 2;
                            }
                            v39 += 2;
                            v38 -= 16;
                          }
                          while (v38);
                          v37 = v52;
                        }
                        if (v37)
                        {
                          v52 = 0;
                          LODWORD(v53) = 0;
                          WTF::fastFree(v37, v20);
                        }
                        v41 = v62;
                        v62 = 0;
                        if (v41)
                        {
                          if (*(_DWORD *)v41 == 2)
                            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v41 -= 2;
                        }
                        v42 = v60;
                        v60 = 0;
                        if (v42)
                        {
                          if (*(_DWORD *)v42 == 2)
                            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v42 -= 2;
                        }
                        v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v43)
                        {
                          if (*(_DWORD *)v43 == 2)
                            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v43 -= 2;
                        }
                        ++v27;
                      }
                      while (v27 != (uint64_t *)v28);
                    }
                    v44 = __ldxr(v22);
                    if (v44 == 1)
                    {
                      if (!__stlxr(0, v22))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v45 = v57;
            v57 = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v20);
              else
                *(_DWORD *)v45 -= 2;
            }
            goto LABEL_85;
          }
LABEL_104:
          __break(0xC471u);
          return result;
        }
LABEL_99:
        v8 = 0;
        goto LABEL_7;
      }
    }
    v7 = 0;
    if (v54)
      goto LABEL_6;
    goto LABEL_99;
  }
LABEL_85:
  *((_BYTE *)this + 376) = 0;
  v46 = *((_QWORD *)this + 11);
  if (v46)
    atomic_store(0, (unsigned __int8 *)(v46 + 121));
  v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v47 = off_1E335DB30;
  v48 = (unsigned int *)*((_QWORD *)this + 12);
  if (v48)
  {
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
  }
  v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v50 = &off_1E335DB58;
  v50[1] = v48;
  v50[2] = v47;
  *(_QWORD *)&buf = v50;
  WTF::ensureOnMainThread();
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::MediaSource::~MediaSource(WebCore::MediaSource *this)
{
  WebCore::MediaSource *v1;
  WebCore::EventTarget *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  void *v37;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  WTF *v51;
  void *v52;
  bmalloc::api *v53;
  void *v54;
  WTF *v55;
  void *v56;
  bmalloc::api *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[4];

  v1 = this;
  *(_QWORD *)this = &off_1E335D2F0;
  *((_QWORD *)this + 5) = &unk_1E335D3B8;
  v2 = (WebCore::MediaSource *)((char *)this + 40);
  *((_QWORD *)this + 8) = &unk_1E335D430;
  *((_QWORD *)this + 9) = &unk_1E335D458;
  *((_QWORD *)this + 10) = &unk_1E335D498;
  v3 = *((_QWORD *)this + 31);
  v4 = *((_QWORD *)this + 32);
  v61[0] = "MediaSource";
  v61[1] = 12;
  v61[2] = "~MediaSource";
  v61[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    this = (WebCore::MediaSource *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v61);
  if ((WTF::isMainThread(this) & 1) == 0)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E335D6F0;
    v7 = (unsigned int *)*((_QWORD *)v1 + 12);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E335DB58;
    v9[1] = v7;
    v9[2] = v6;
    v61[0] = v9;
    WTF::ensureOnMainThread();
    v10 = v61[0];
    v61[0] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WebCore::MediaSource::detachFromElement(v1);
  }
  v11 = *((_QWORD *)v1 + 34);
  *((_QWORD *)v1 + 34) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_14:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v60 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v60 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
        if (v15)
          goto LABEL_26;
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_26;
LABEL_22:
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (!v17)
      WTF::fastFree((WTF *)v12, v5);
  }
LABEL_26:
  v19 = (unsigned int *)*((_QWORD *)v1 + 31);
  *((_QWORD *)v1 + 31) = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  v23 = (_DWORD *)*((_QWORD *)v1 + 30);
  *((_QWORD *)v1 + 30) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  if (*((_BYTE *)v1 + 224))
    WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WebCore::MediaSource *)((char *)v1 + 176));
  v24 = *((_QWORD *)v1 + 14);
  *((_QWORD *)v1 + 14) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 1)
    {
      v43 = *(unsigned int *)(v24 + 68);
      if ((_DWORD)v43)
      {
        v44 = *(_DWORD ***)(v24 + 56);
        v45 = 8 * v43;
        do
        {
          v46 = *v44;
          *v44 = 0;
          if (v46)
          {
            if (v46[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
            else
              --v46[6];
          }
          ++v44;
          v45 -= 8;
        }
        while (v45);
      }
      v51 = *(WTF **)(v24 + 56);
      if (v51)
      {
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        WTF::fastFree(v51, v5);
      }
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v24 + 32), v5);
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v24, v52);
      bmalloc::api::isoDeallocate(v53, v54);
    }
    else
    {
      --*(_DWORD *)(v24 + 24);
    }
  }
  v25 = *((_QWORD *)v1 + 13);
  *((_QWORD *)v1 + 13) = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 24) == 1)
    {
      v47 = *(unsigned int *)(v25 + 68);
      if ((_DWORD)v47)
      {
        v48 = *(_DWORD ***)(v25 + 56);
        v49 = 8 * v47;
        do
        {
          v50 = *v48;
          *v48 = 0;
          if (v50)
          {
            if (v50[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 16))(v50);
            else
              --v50[6];
          }
          ++v48;
          v49 -= 8;
        }
        while (v49);
      }
      v55 = *(WTF **)(v25 + 56);
      if (v55)
      {
        *(_QWORD *)(v25 + 56) = 0;
        *(_DWORD *)(v25 + 64) = 0;
        WTF::fastFree(v55, v5);
      }
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v25 + 32), v5);
      WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v25, v56);
      bmalloc::api::isoDeallocate(v57, v58);
    }
    else
    {
      --*(_DWORD *)(v25 + 24);
    }
  }
  v26 = (unsigned int *)*((_QWORD *)v1 + 12);
  *((_QWORD *)v1 + 12) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v5);
    }
  }
  v29 = *((_QWORD *)v1 + 11);
  *((_QWORD *)v1 + 11) = 0;
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (__ldaxr((unsigned __int8 *)v30))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v30))
    {
      goto LABEL_51;
    }
    MEMORY[0x19AEA534C](v30);
LABEL_51:
    v32 = *(_QWORD *)(v30 + 8);
    v33 = v32 - 1;
    *(_QWORD *)(v30 + 8) = v32 - 1;
    if (v32 == 1)
    {
      v59 = *(_QWORD *)(v30 + 16);
      v34 = *(_QWORD *)(v30 + 24);
      *(_QWORD *)(v30 + 24) = 0;
      v35 = v59 != 0;
    }
    else
    {
      v34 = 0;
      v35 = 1;
    }
    v36 = __ldxr((unsigned __int8 *)v30);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v30))
      {
        if (v33)
          goto LABEL_63;
LABEL_59:
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        if (!v35)
          WTF::fastFree((WTF *)v30, v5);
        goto LABEL_63;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v30);
    if (v33)
      goto LABEL_63;
    goto LABEL_59;
  }
LABEL_63:
  WebCore::EventTarget::~EventTarget(v2, v5);
  WebCore::ActiveDOMObject::~ActiveDOMObject(v1, v37);
  v39 = *((_QWORD *)v1 + 4);
  if (v39)
  {
    *(_QWORD *)(v39 + 8) = 0;
    v40 = (unsigned int *)*((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = 0;
    if (v40)
    {
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, v38);
      }
    }
  }
  else
  {
    *((_QWORD *)v1 + 4) = 0;
  }
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaSource::~MediaSource(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::ManagedMediaSource::~ManagedMediaSource(WebCore::ManagedMediaSource *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 320);
  if ((*((_QWORD *)this + 44) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 320));
  *((_QWORD *)this + 40) = off_1E31F7378;
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource(this);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 320);
  if ((*((_QWORD *)this + 44) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 320));
  *((_QWORD *)this + 40) = off_1E31F7378;
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource(this);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::ManagedMediaSource::~ManagedMediaSource(WebCore::ManagedMediaSource *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 280);
  if ((*((_QWORD *)this + 39) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 280));
  *((_QWORD *)this + 35) = off_1E31F7378;
  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 40));
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 256);
  if ((*((_QWORD *)this + 36) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 256));
  *((_QWORD *)this + 32) = off_1E31F7378;
  v3 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 64));
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 248);
  if ((*((_QWORD *)this + 35) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 248));
  *((_QWORD *)this + 31) = off_1E31F7378;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 72));
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 240);
  if ((*((_QWORD *)this + 34) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 240));
  *((_QWORD *)this + 30) = off_1E31F7378;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 80));
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 280);
  if ((*((_QWORD *)this + 39) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 280));
  *((_QWORD *)this + 35) = off_1E31F7378;
  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 40));
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 256);
  if ((*((_QWORD *)this + 36) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 256));
  *((_QWORD *)this + 32) = off_1E31F7378;
  v3 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 64));
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 248);
  if ((*((_QWORD *)this + 35) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 248));
  *((_QWORD *)this + 31) = off_1E31F7378;
  v3 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 72));
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v2 = (WebCore::ManagedMediaSource *)((char *)this + 240);
  if ((*((_QWORD *)this + 34) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::ManagedMediaSource *)((char *)this + 240));
  *((_QWORD *)this + 30) = off_1E31F7378;
  v3 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::MediaSource::~MediaSource((WebCore::ManagedMediaSource *)((char *)this - 80));
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::MediaSource::isTypeSupported(uint64_t this, WebCore::ScriptExecutionContext *a2, const WTF::String *a3, double a4, double a5, float a6)
{
  uint64_t v7;
  WebCore::Node *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _BOOL8 isTypeSupported;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = this;
  v19 = 0;
  v20 = 0;
  if (*(_BYTE *)(this + 274))
    v8 = 0;
  else
    v8 = (WebCore::Node *)(this - 192);
  if (*(_BYTE *)(this + 274))
    goto LABEL_17;
  v9 = *(_DWORD *)(this - 168);
  *(_DWORD *)(this - 168) = v9 + 2;
  v10 = *(_QWORD *)(this + 488);
  v11 = *(unsigned int *)(v10 + 92);
  if (!(_DWORD)v11)
  {
LABEL_15:
    if (v9)
    {
      *(_DWORD *)(v7 - 168) = v9;
    }
    else if ((*((_WORD *)v8 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v8, a2);
    }
LABEL_17:
    isTypeSupported = WebCore::MediaSource::isTypeSupported(v7, (WTF::StringImpl **)a2, (uint64_t)&v19, a4, a5, a6);
    WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v18);
    return isTypeSupported;
  }
  if (v11 <= 0x10)
    v12 = 16;
  else
    v12 = *(unsigned int *)(v10 + 92);
  if (!(v12 >> 28))
  {
    v13 = *(_QWORD *)(v10 + 80);
    v14 = WTF::fastMalloc((WTF *)(16 * v12));
    LODWORD(v20) = v12;
    v19 = v14;
    v15 = v13 + 16 * v11;
    do
    {
      v16 = *(_DWORD **)v13;
      if (*(_QWORD *)v13)
        *v16 += 2;
      *(_QWORD *)v14 = v16;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v13 + 8);
      v13 += 16;
      v14 += 16;
    }
    while (v13 != v15);
    HIDWORD(v20) = v11;
    v9 = *(_DWORD *)(v7 - 168) - 2;
    goto LABEL_15;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::ManagedMediaSource::elementDetached(WebCore::ManagedMediaSource *this)
{
  return WebCore::ManagedMediaSource::setStreaming((uint64_t)this, 0);
}

uint64_t WebCore::ManagedMediaSource::setStreaming(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD v23[4];
  unsigned __int8 v24;

  v24 = a2;
  if (*(unsigned __int8 *)(this + 280) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 248);
    v4 = *(_QWORD *)(this + 256);
    v23[0] = "MediaSource";
    v23[1] = 12;
    v23[2] = "setStreaming";
    v23[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v23);
      a2 = v24;
    }
    *(_BYTE *)(v2 + 280) = a2;
    v5 = *(_QWORD *)(v2 + 88);
    if (v5)
      atomic_store(a2, (unsigned __int8 *)(v5 + 120));
    if (a2)
    {
      v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
        v7 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v8 = *(_QWORD *)(v7 + 40);
      if (!v8)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
        v8 = *(_QWORD *)(v7 + 40);
      }
      v9 = (double *)WebCore::MediaSource::scheduleEvent((WebCore::MediaSource *)v2, (WTF::StringImpl **)(v8 + 1976));
      if (*(_BYTE *)(v2 + 376))
      {
        if (*(_BYTE *)(v2 + 296) && *(_BYTE *)(v2 + 312))
        {
          v10 = *(double *)(v2 + 304);
        }
        else
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
          if (v14)
            v15 = v14 - 96;
          else
            v15 = 0;
          *(_QWORD *)(v2 + 288) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 400);
          *(_BYTE *)(v2 + 296) = 1;
          v16 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
          if (v16)
            v17 = v16 - 96;
          else
            v17 = 0;
          v9 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 136))(v17);
          v10 = v9[49];
          *(double *)(v2 + 304) = v10;
          *(_BYTE *)(v2 + 312) = 1;
        }
        *(_QWORD *)(v2 + 344) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
        WebCore::TimerBase::setNextFireTime(v2 + 320, v10 + v18);
      }
    }
    else
    {
      if ((*(_QWORD *)(v2 + 352) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v2 + 352) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
        this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 320));
      }
      v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
        v12 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v13 = *(_QWORD *)(v12 + 40);
      if (!v13)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
        v13 = *(_QWORD *)(v12 + 40);
      }
      WebCore::MediaSource::scheduleEvent((WebCore::MediaSource *)v2, (WTF::StringImpl **)(v13 + 760));
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E335DB30;
    v20 = *(unsigned int **)(v2 + 96);
    if (v20)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v22 = &off_1E335DB58;
    v22[1] = v20;
    v22[2] = v19;
    v23[0] = v22;
    WTF::ensureOnMainThread();
    this = v23[0];
    v23[0] = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::MediaSource::logger(WebCore::MediaSource *this)
{
  return *((_QWORD *)this + 31);
}

char *WebCore::MediaSource::logChannel(WebCore::MediaSource *this)
{
  return &WebCore::LogMediaSource;
}

const char *WebCore::MediaSource::logClassName(WebCore::MediaSource *this)
{
  return "MediaSource";
}

uint64_t WebCore::MediaSource::logIdentifier(WebCore::MediaSource *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t WebCore::MediaSource::scheduleEvent(WebCore::MediaSource *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[4];
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __int128 buf;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72[3];

  v72[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 31);
  v5 = *((_QWORD *)this + 32);
  v59[0] = "MediaSource";
  v59[1] = 12;
  v59[2] = "scheduleEvent";
  v59[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v59);
      WTF::String::String((WTF::String *)&v63, "scheduling '");
      v7 = *a2;
      if (*a2)
        *(_DWORD *)v7 += 2;
      result = WTF::String::String((WTF::String *)&v62, "'");
      if (v64)
        v9 = *((_DWORD *)v64 + 1);
      else
        v9 = 0;
      if (v63)
      {
        v10 = *((_DWORD *)v63 + 1);
        if (v7)
          goto LABEL_13;
      }
      else
      {
        v10 = 0;
        if (v7)
        {
LABEL_13:
          v11 = *((_DWORD *)v7 + 1);
          if (v62)
          {
LABEL_14:
            v12 = *((_DWORD *)v62 + 1);
LABEL_15:
            if ((v12 | v11) < 0
              || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
                  v10 < 0
               || (v15 & 1) != 0
               || ((v13 = __OFADD__(v10, v14), v16 = v10 + v14, !v13) ? (v17 = 0) : (v17 = 1),
                   v9 < 0 || (v17 & 1) != 0 || (result = (v9 + v16), __OFADD__(v9, v16)))))
            {
              v65 = 0;
              goto LABEL_133;
            }
            if (v64 && (*((_BYTE *)v64 + 16) & 4) == 0 || v63 && (*((_BYTE *)v63 + 16) & 4) == 0)
            {
              v18 = 0;
              goto LABEL_32;
            }
            if (v7)
            {
              v51 = *((_DWORD *)v7 + 4);
              v18 = (v51 >> 2) & 1;
              if (v62 && (v51 & 4) != 0)
                goto LABEL_106;
            }
            else
            {
              if (v62)
              {
LABEL_106:
                v18 = (*((unsigned __int8 *)v62 + 16) >> 2) & 1;
                goto LABEL_32;
              }
              v18 = 1;
            }
LABEL_32:
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v18, (uint64_t)v64, v63, (uint64_t)v7, (uint64_t)v62, &v65);
            if (v65)
            {
              v20 = v62;
              v62 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                {
                  WTF::StringImpl::destroy(v20, v19);
                  if (v7)
                  {
LABEL_37:
                    if (*(_DWORD *)v7 == 2)
                      WTF::StringImpl::destroy(v7, v19);
                    else
                      *(_DWORD *)v7 -= 2;
                  }
LABEL_39:
                  v21 = v63;
                  v63 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2)
                      WTF::StringImpl::destroy(v21, v19);
                    else
                      *(_DWORD *)v21 -= 2;
                  }
                  v22 = v64;
                  v64 = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WTF::StringImpl::destroy(v22, v19);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                  v23 = qword_1ECE7CE80;
                  v24 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v24)
                  {
                    WTF::String::utf8();
                    v26 = v60 ? (char *)v60 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v26;
                    _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v24 = (uint64_t)v60;
                    v60 = 0;
                    if (v24)
                    {
                      if (*(_DWORD *)v24 == 1)
                        v24 = WTF::fastFree((WTF *)v24, v25);
                      else
                        --*(_DWORD *)v24;
                    }
                  }
                  if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
                  {
                    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v28 = *v27;
                      if ((v28 & 1) != 0)
                        break;
                      v29 = __ldaxr(v27);
                      if (v29 == v28)
                      {
                        if (!__stxr(v28 | 1, v27))
                        {
                          v30 = WTF::Logger::observers((WTF::Logger *)v24);
                          v31 = *(unsigned int *)(v30 + 12);
                          if ((_DWORD)v31)
                          {
                            v32 = *(uint64_t **)v30;
                            v33 = *(_QWORD *)v30 + 8 * v31;
                            do
                            {
                              v34 = *v32;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v59);
                              v67 = 0;
                              WTF::String::String((WTF::String *)&v68, "scheduling '");
                              v69 = 0;
                              v35 = *a2;
                              if (*a2)
                                *(_DWORD *)v35 += 2;
                              v70 = v35;
                              v71 = 0;
                              WTF::String::String((WTF::String *)v72, "'");
                              v60 = 0;
                              v61 = 0;
                              v36 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                              LODWORD(v61) = 4;
                              v60 = v36;
                              v37 = HIDWORD(v61);
                              *((_DWORD *)v36 + 4 * HIDWORD(v61)) = buf;
                              v38 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v36 + 2 * v37 + 1) = v38;
                              *((_DWORD *)v36 + 4 * (v37 + 1)) = v67;
                              v39 = v68;
                              if (v68)
                                *(_DWORD *)v68 += 2;
                              *((_QWORD *)v36 + 2 * (v37 + 1) + 1) = v39;
                              *((_DWORD *)v36 + 4 * (v37 + 2)) = v69;
                              v40 = v70;
                              if (v70)
                                *(_DWORD *)v70 += 2;
                              *((_QWORD *)v36 + 2 * (v37 + 2) + 1) = v40;
                              *((_DWORD *)v36 + 4 * (v37 + 3)) = v71;
                              v41 = v72[0];
                              if (v72[0])
                                *(_DWORD *)v72[0] += 2;
                              *((_QWORD *)v36 + 2 * (v37 + 3) + 1) = v41;
                              HIDWORD(v61) = v37 + 4;
                              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, &WebCore::LogMediaSource, 4, &v60);
                              v42 = v60;
                              if (HIDWORD(v61))
                              {
                                v43 = 16 * HIDWORD(v61);
                                v44 = (WTF::StringImpl **)((char *)v60 + 8);
                                do
                                {
                                  v45 = *v44;
                                  *v44 = 0;
                                  if (v45)
                                  {
                                    if (*(_DWORD *)v45 == 2)
                                      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                                    else
                                      *(_DWORD *)v45 -= 2;
                                  }
                                  v44 += 2;
                                  v43 -= 16;
                                }
                                while (v43);
                                v42 = v60;
                              }
                              if (v42)
                              {
                                v60 = 0;
                                LODWORD(v61) = 0;
                                WTF::fastFree(v42, v25);
                              }
                              v46 = v72[0];
                              v72[0] = 0;
                              if (v46)
                              {
                                if (*(_DWORD *)v46 == 2)
                                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                                else
                                  *(_DWORD *)v46 -= 2;
                              }
                              v47 = v70;
                              v70 = 0;
                              if (v47)
                              {
                                if (*(_DWORD *)v47 == 2)
                                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v25);
                                else
                                  *(_DWORD *)v47 -= 2;
                              }
                              v48 = v68;
                              v68 = 0;
                              if (v48)
                              {
                                if (*(_DWORD *)v48 == 2)
                                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                                else
                                  *(_DWORD *)v48 -= 2;
                              }
                              v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v49)
                              {
                                if (*(_DWORD *)v49 == 2)
                                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v25);
                                else
                                  *(_DWORD *)v49 -= 2;
                              }
                              ++v32;
                            }
                            while (v32 != (uint64_t *)v33);
                          }
                          v50 = __ldxr(v27);
                          if (v50 == 1)
                          {
                            if (!__stlxr(0, v27))
                              break;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  v52 = v65;
                  v65 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  goto LABEL_112;
                }
                *(_DWORD *)v20 -= 2;
              }
              if (v7)
                goto LABEL_37;
              goto LABEL_39;
            }
LABEL_133:
            __break(0xC471u);
            return result;
          }
LABEL_129:
          v12 = 0;
          goto LABEL_15;
        }
      }
      v11 = 0;
      if (v62)
        goto LABEL_14;
      goto LABEL_129;
    }
  }
LABEL_112:
  v53 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v53);
  *(_DWORD *)(v53 + 16) = 1;
  *(_QWORD *)v53 = off_1E33A4B48;
  *(_QWORD *)(v53 + 8) = 0;
  *(_DWORD *)(v53 + 20) = *(_DWORD *)(v53 + 20) & 0xFFC00000 | (*a2 != 0) | 0x1E8200;
  v55 = *a2;
  if (*a2)
    *(_DWORD *)v55 += 2;
  *(_QWORD *)(v53 + 24) = v55;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  *(_QWORD *)(v53 + 48) = 0;
  *(_QWORD *)(v53 + 56) = v54;
  *(_QWORD *)(v53 + 64) = 0;
  *(_QWORD *)&buf = v53;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(this, (uint64_t)this + 40, 9, (uint64_t *)&buf);
  result = buf;
  if ((_QWORD)buf)
  {
    if (*(_DWORD *)(buf + 16) == 1)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)buf + 8))(buf, v56, v57, v58);
    else
      --*(_DWORD *)(buf + 16);
  }
  return result;
}

uint64_t WebCore::MediaSource::scriptExecutionContext(WebCore::MediaSource *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

WTF *WebCore::ManagedMediaSource::monitorSourceBuffers(WebCore::ManagedMediaSource *this)
{
  WTF *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int isBuffered;
  uint64_t v15;
  __int128 *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  result = WebCore::MediaSource::monitorSourceBuffers(this);
  v3 = *((_QWORD *)this + 14);
  if (!v3 || !*(_DWORD *)(v3 + 68))
    return (WTF *)WebCore::ManagedMediaSource::setStreaming((uint64_t)this, 1);
  if (*((_BYTE *)this + 168))
  {
    v4 = *((_QWORD *)this + 15);
    v5 = *((_QWORD *)this + 16);
  }
  else
  {
    v6 = *((_QWORD *)this + 11);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v6 + 16))(&v21);
      if ((_QWORD)v21)
      {
        v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 344))(v21);
        v5 = v7;
        result = (WTF *)v21;
        *(_QWORD *)&v21 = 0;
        if (result)
          result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 24))(result);
        goto LABEL_13;
      }
      result = (WTF *)WTF::MediaTime::invalidTime(0);
    }
    else
    {
      result = (WTF *)WTF::MediaTime::zeroTime(0);
    }
    v4 = *(_QWORD *)result;
    v5 = *((_QWORD *)result + 1);
  }
LABEL_13:
  *(_QWORD *)&v21 = v4;
  *((_QWORD *)&v21 + 1) = v5;
  if (!*((_BYTE *)this + 296) || !*((_BYTE *)this + 312))
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (v8)
      v9 = v8 - 96;
    else
      v9 = 0;
    *((_QWORD *)this + 36) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 400);
    *((_BYTE *)this + 296) = 1;
    v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (v10)
      v11 = v10 - 96;
    else
      v11 = 0;
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v11);
    *((_QWORD *)this + 38) = *((_QWORD *)result + 49);
    *((_BYTE *)this + 312) = 1;
  }
  if (*((_BYTE *)this + 280))
  {
    *(_QWORD *)&v20 = WebCore::ManagedMediaSource::monitorSourceBuffers(void)::$_0::operator()((WTF::MediaTime *)&v21, (uint64_t)this, *((double *)this + 38));
    *((_QWORD *)&v20 + 1) = v12;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v21, (const WTF::MediaTime *)&v20) != -1)
      return (WTF *)WebCore::ManagedMediaSource::setStreaming((uint64_t)this, 0);
    v18 = 0;
    v19 = 0;
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v18, &v21, &v20, 0);
    isBuffered = WebCore::MediaSource::isBuffered(this, (const WebCore::PlatformTimeRanges *)&v18);
    result = v18;
    if (v18)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      result = (WTF *)WTF::fastFree(result, v13);
    }
    if (isBuffered)
      return (WTF *)WebCore::ManagedMediaSource::setStreaming((uint64_t)this, 0);
  }
  else if (*((_BYTE *)this + 296))
  {
    v18 = (WTF *)WebCore::ManagedMediaSource::monitorSourceBuffers(void)::$_0::operator()((WTF::MediaTime *)&v21, (uint64_t)this, *((double *)this + 36));
    v19 = v15;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v21, (const WTF::MediaTime *)&v18) == -1)
      v16 = (__int128 *)&v18;
    else
      v16 = &v21;
    v20 = 0uLL;
    WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v20, &v21, v16, 0);
    if ((WebCore::MediaSource::isBuffered(this, (const WebCore::PlatformTimeRanges *)&v20) & 1) == 0)
      WebCore::ManagedMediaSource::setStreaming((uint64_t)this, 1);
    result = (WTF *)v20;
    if ((_QWORD)v20)
    {
      *(_QWORD *)&v20 = 0;
      DWORD2(v20) = 0;
      return (WTF *)WTF::fastFree(result, v17);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF *WebCore::MediaSource::monitorSourceBuffers(WebCore::MediaSource *this)
{
  uint64_t v2;
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t hasBufferedTime;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  void *v20;
  WebCore::MediaSourcePrivate *v21;
  void (*v22)(WebCore::MediaSourcePrivate *, uint64_t);
  WebCore::MediaSourcePrivate *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::MediaTime *v26;
  __int128 v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  WTF::MediaTime *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  WTF::MediaTime *v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  int hasFutureTime;
  __int128 v46;
  WTF *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v2 = **((_QWORD **)this + 11);
  if (!*((_QWORD *)this + 14))
    return (WTF *)(*(uint64_t (**)(void))(v2 + 88))();
  result = (WTF *)(*(uint64_t (**)(void))(v2 + 80))();
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 168))
    {
      v4 = *((_QWORD *)this + 15);
      v5 = *((_QWORD *)this + 16);
      goto LABEL_13;
    }
    v6 = *((_QWORD *)this + 11);
    if (v6)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 16))(&v51);
      if (v51)
      {
        v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 344))(v51);
        v5 = v7;
        v8 = v51;
        v51 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
LABEL_13:
        v51 = v4;
        v52 = v5;
        hasBufferedTime = WebCore::MediaSource::hasBufferedTime(this, (const WTF::MediaTime *)&v51);
        if ((hasBufferedTime & 1) == 0)
          return (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 11) + 88))(*((_QWORD *)this + 11), 1);
        if (*((_BYTE *)this + 168))
        {
          v11 = *((_QWORD *)this + 15);
          v12 = *((_QWORD *)this + 16);
          goto LABEL_24;
        }
        v13 = *((_QWORD *)this + 11);
        if (v13)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v13 + 16))(&v51);
          if (v51)
          {
            v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 344))(v51);
            v12 = v14;
            hasBufferedTime = v51;
            v51 = 0;
            if (hasBufferedTime)
              hasBufferedTime = (*(uint64_t (**)(uint64_t))(*(_QWORD *)hasBufferedTime + 24))(hasBufferedTime);
LABEL_24:
            *(_QWORD *)&v49 = v11;
            *((_QWORD *)&v49 + 1) = v12;
            *(_QWORD *)&v50 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)hasBufferedTime, 3.0);
            *((_QWORD *)&v50 + 1) = v15;
            v16 = WTF::MediaTime::operator+();
            v18 = v17;
            v51 = v16;
            v52 = v17;
            if (*((_BYTE *)this + 232))
              goto LABEL_25;
            v25 = *((_QWORD *)this + 11);
            if (!v25)
              goto LABEL_25;
            v26 = (WTF::MediaTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 112))(v25);
            if ((_DWORD)v26 != 2)
              goto LABEL_25;
            if (*((_BYTE *)this + 232)
              || (v26 = (WTF::MediaTime *)*((_QWORD *)this + 11)) == 0
              || (v26 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v26 + 112))(v26),
                  !(_DWORD)v26))
            {
              v27 = *(_OWORD *)WTF::MediaTime::invalidTime(v26);
              goto LABEL_43;
            }
            v34 = *((_QWORD *)this + 11);
            v35 = (unsigned __int8 *)(v34 + 64);
            if (__ldaxr((unsigned __int8 *)(v34 + 64)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v35))
            {
LABEL_69:
              v27 = *(_OWORD *)(v34 + 72);
              v44 = __ldxr(v35);
              if (v44 == 1)
              {
                if (!__stlxr(0, v35))
                  goto LABEL_43;
              }
              else
              {
                __clrex();
              }
              v46 = v27;
              WTF::Lock::unlockSlow((WTF::Lock *)(v34 + 64));
              v27 = v46;
LABEL_43:
              v50 = v27;
              v28 = WTF::MediaTime::compare((WTF::MediaTime *)&v51, (const WTF::MediaTime *)&v50);
              if (v28 == -1)
                v29 = &v51;
              else
                v29 = (uint64_t *)&v50;
              v16 = *v29;
              v30 = &v52;
              if (v28 != -1)
                v30 = (uint64_t *)&v50 + 1;
              v18 = *v30;
LABEL_25:
              v51 = v16;
              v52 = v18;
              if (WTF::MediaTime::compare((WTF::MediaTime *)&v49, (const WTF::MediaTime *)&v51) == -1)
                v19 = (__int128 *)&v51;
              else
                v19 = &v49;
              v47 = 0;
              v48 = 0;
              WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v47, &v49, v19, 0);
              if (WebCore::MediaSource::isBuffered(this, (const WebCore::PlatformTimeRanges *)&v47))
              {
                (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 11) + 88))(*((_QWORD *)this + 11), 4);
LABEL_34:
                if (*((_BYTE *)this + 168))
                  WebCore::MediaSource::completeSeek((unsigned int *)this);
                result = v47;
                if (v47)
                {
                  v47 = 0;
                  LODWORD(v48) = 0;
                  return (WTF *)WTF::fastFree(result, v20);
                }
                return result;
              }
              v21 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 11);
              if (*((_BYTE *)this + 232)
                || (v31 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 112))(*((_QWORD *)this + 11)),
                    v21 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 11),
                    !(_DWORD)v31))
              {
                v22 = *(void (**)(WebCore::MediaSourcePrivate *, uint64_t))(*(_QWORD *)v21 + 88);
                goto LABEL_32;
              }
              if (*((_BYTE *)this + 168))
              {
                v32 = *((_QWORD *)this + 15);
                v33 = *((_QWORD *)this + 16);
                goto LABEL_63;
              }
              if (v21)
              {
                (*(void (**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)v21 + 16))(&v51, *((_QWORD *)this + 11));
                if (v51)
                {
                  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 344))(v51);
                  v33 = v37;
                  v38 = v51;
                  v51 = 0;
                  if (v38)
                    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
LABEL_63:
                  v51 = v32;
                  v52 = v33;
                  (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 11) + 16))(&v50);
                  if ((_QWORD)v50)
                  {
                    v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v50 + 360))(v50);
                    v41 = (WTF::MediaTime *)v50;
                    *(_QWORD *)&v50 = 0;
                    if (v41)
                    {
                      v41 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v41 + 24))(v41);
                      if ((v40 & 1) != 0)
                      {
LABEL_66:
                        v42 = (_QWORD *)WTF::MediaTime::zeroTime(v41);
                        v43 = *(_QWORD *)((char *)v42 + 5);
                        *(_QWORD *)&v50 = *v42;
                        *(_QWORD *)((char *)&v50 + 5) = v43;
                        goto LABEL_76;
                      }
                    }
                    else if (v40)
                    {
                      goto LABEL_66;
                    }
                  }
                  v50 = xmmword_1968A1610;
LABEL_76:
                  hasFutureTime = WebCore::MediaSourcePrivate::hasFutureTime(v21, (const WTF::MediaTime *)&v51, (const WTF::MediaTime *)&v50);
                  v21 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 11);
                  v22 = *(void (**)(WebCore::MediaSourcePrivate *, uint64_t))(*(_QWORD *)v21 + 88);
                  if (hasFutureTime)
                  {
                    v23 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 11);
                    v24 = 3;
                    goto LABEL_33;
                  }
LABEL_32:
                  v23 = v21;
                  v24 = 2;
LABEL_33:
                  v22(v23, v24);
                  goto LABEL_34;
                }
                v39 = (uint64_t *)WTF::MediaTime::invalidTime(0);
              }
              else
              {
                v39 = (uint64_t *)WTF::MediaTime::zeroTime(v31);
              }
              v32 = *v39;
              v33 = v39[1];
              goto LABEL_63;
            }
            MEMORY[0x19AEA534C](v34 + 64);
            goto LABEL_69;
          }
          hasBufferedTime = WTF::MediaTime::invalidTime(0);
        }
        else
        {
          hasBufferedTime = WTF::MediaTime::zeroTime(0);
        }
        v11 = *(_QWORD *)hasBufferedTime;
        v12 = *(_QWORD *)(hasBufferedTime + 8);
        goto LABEL_24;
      }
      v9 = (uint64_t *)WTF::MediaTime::invalidTime(0);
    }
    else
    {
      v9 = (uint64_t *)WTF::MediaTime::zeroTime(0);
    }
    v4 = *v9;
    v5 = v9[1];
    goto LABEL_13;
  }
  return result;
}

uint64_t WebCore::ManagedMediaSource::monitorSourceBuffers(void)::$_0::operator()(WTF::MediaTime *a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WTF::MediaTime *v9;
  __int128 v10;
  __int128 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];

  *(_QWORD *)&v17 = WTF::MediaTime::createWithDouble(a1, a3);
  *((_QWORD *)&v17 + 1) = v4;
  v5 = WTF::MediaTime::operator+();
  v18[0] = v5;
  v18[1] = v6;
  if (*(_BYTE *)(a2 + 232))
    return v5;
  v8 = *(_QWORD *)(a2 + 88);
  if (!v8)
    return v5;
  v9 = (WTF::MediaTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
  if ((_DWORD)v9 != 2)
    return v5;
  if (*(_BYTE *)(a2 + 232)
    || (v9 = *(WTF::MediaTime **)(a2 + 88)) == 0
    || (v9 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v9 + 112))(v9), !(_DWORD)v9))
  {
    v10 = *(_OWORD *)WTF::MediaTime::invalidTime(v9);
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(a2 + 88);
  v13 = (unsigned __int8 *)(v12 + 64);
  if (__ldaxr((unsigned __int8 *)(v12 + 64)))
  {
    __clrex();
LABEL_16:
    MEMORY[0x19AEA534C](v12 + 64);
    goto LABEL_17;
  }
  if (__stxr(1u, v13))
    goto LABEL_16;
LABEL_17:
  v10 = *(_OWORD *)(v12 + 72);
  v15 = __ldxr(v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_7;
  }
  else
  {
    __clrex();
  }
  v16 = v10;
  WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 64));
  v10 = v16;
LABEL_7:
  v17 = v10;
  if (WTF::MediaTime::compare((WTF::MediaTime *)v18, (const WTF::MediaTime *)&v17) == -1)
    v11 = (__int128 *)v18;
  else
    v11 = &v17;
  return *(_QWORD *)v11;
}

uint64_t WebCore::MediaSource::isBuffered(WebCore::MediaSource *this, const WebCore::PlatformTimeRanges *a2)
{
  _BOOL8 v3;
  uint64_t result;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  WTF *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::MediaTime *v24;
  int v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::MediaTime *v30;
  WTF *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  WTF::MediaTime *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  WTF *v43;
  int v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (!*((_DWORD *)a2 + 3))
    return 1;
  if (*((_BYTE *)this + 232))
    return 1;
  v5 = *((_QWORD *)this + 11);
  if (!v5)
    return 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
  if (!(_DWORD)result)
    return 1;
  v8 = *((_QWORD *)this + 11);
  v9 = (unsigned __int8 *)(v8 + 64);
  if (__ldaxr((unsigned __int8 *)(v8 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_11;
  }
  result = MEMORY[0x19AEA534C](v8 + 64);
LABEL_11:
  v11 = *(unsigned int *)(v8 + 100);
  v43 = 0;
  v44 = 0;
  v45 = v11;
  if (!(_DWORD)v11)
    goto LABEL_16;
  if (!(v11 >> 27))
  {
    v12 = (WTF *)WTF::fastMalloc((WTF *)(32 * v11));
    v44 = v11;
    v43 = v12;
    v13 = *(unsigned int *)(v8 + 100);
    if ((_DWORD)v13)
    {
      v14 = *(__int128 **)(v8 + 88);
      v15 = 32 * v13;
      do
      {
        v16 = *v14;
        v17 = v14[1];
        v14 += 2;
        *(_OWORD *)v12 = v16;
        *((_OWORD *)v12 + 1) = v17;
        v12 = (WTF *)((char *)v12 + 32);
        v15 -= 32;
      }
      while (v15);
    }
LABEL_16:
    v18 = __ldxr(v9);
    if (v18 == 1)
    {
      if (!__stlxr(0, v9))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v8 + 64));
    if (!v45)
      goto LABEL_31;
    v19 = WebCore::PlatformTimeRanges::intersectWith((WTF *)&v43, (__int128 **)a2);
    if (!v45)
      goto LABEL_31;
LABEL_21:
    v20 = *((_DWORD *)a2 + 3) ? *(__int128 **)a2 : (__int128 *)WTF::MediaTime::invalidTime(v19);
    v42 = *v20;
    *(_QWORD *)&v47 = WebCore::PlatformTimeRanges::nearest((WebCore::PlatformTimeRanges *)&v43, (const WTF::MediaTime *)&v42);
    *((_QWORD *)&v47 + 1) = v21;
    v48 = WTF::MediaTime::operator-();
    v49 = v22;
    v50 = WTF::abs();
    v51 = v23;
    v46 = *(_OWORD *)(*((_QWORD *)this + 11) + 128);
    v24 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v50, (const WTF::MediaTime *)&v46);
    if ((int)v24 > 0)
      goto LABEL_31;
    v25 = *((_DWORD *)a2 + 3);
    v26 = (__int128 *)(v25 ? *(_QWORD *)a2 + 32 * (v25 - 1) + 16 : WTF::MediaTime::invalidTime(v24));
    v41 = *v26;
    *(_QWORD *)&v47 = WebCore::PlatformTimeRanges::nearest((WebCore::PlatformTimeRanges *)&v43, (const WTF::MediaTime *)&v41);
    *((_QWORD *)&v47 + 1) = v27;
    v48 = WTF::MediaTime::operator-();
    v49 = v28;
    v50 = WTF::abs();
    v51 = v29;
    v46 = *(_OWORD *)(*((_QWORD *)this + 11) + 128);
    v30 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v50, (const WTF::MediaTime *)&v46);
    if ((int)v30 < 1)
    {
      v32 = v45;
      if (v45 >= 2)
      {
        v33 = 1;
        v34 = 48;
        do
        {
          if (v33 >= v32)
          {
            v35 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v30);
            v36 = (uint64_t *)((char *)v35 + 8);
            v32 = v45;
          }
          else
          {
            v35 = (WTF *)((char *)v43 + v34);
            v36 = (uint64_t *)((char *)v43 + v34 + 8);
          }
          v37 = *v36;
          v48 = *(_QWORD *)v35;
          v49 = v37;
          v38 = v33 - 1;
          if (v32 <= v38)
            v39 = (__int128 *)WTF::MediaTime::zeroTime(v35);
          else
            v39 = (__int128 *)((char *)v43 + v34 - 48);
          v47 = *v39;
          v50 = WTF::MediaTime::operator-();
          v51 = v40;
          v46 = *(_OWORD *)(*((_QWORD *)this + 11) + 128);
          v30 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v50, (const WTF::MediaTime *)&v46);
          v3 = (_DWORD)v30 != 1;
          if ((_DWORD)v30 == 1)
            break;
          v32 = v45;
          v34 += 32;
          v33 = v38 + 2;
        }
        while (v33 < v45);
      }
      else
      {
        v3 = 1;
      }
    }
    else
    {
LABEL_31:
      v3 = 0;
    }
    v31 = v43;
    if (v43)
    {
      v43 = 0;
      v44 = 0;
      WTF::fastFree(v31, v7);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void `non-virtual thunk to'WebCore::ManagedSourceBuffer::~ManagedSourceBuffer(WebCore::ManagedSourceBuffer *this, void *a2)
{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 40), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 64), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 80), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 96), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 64), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 80), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 96), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::ManagedSourceBuffer *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::ManagedSourceBuffer::~ManagedSourceBuffer(WebCore::ManagedSourceBuffer *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::MediaSource::detachFromElement(WebCore::MediaSource *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  char v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;

  v2 = *((_QWORD *)this + 31);
  v3 = *((_QWORD *)this + 32);
  v39 = "MediaSource";
  v40 = 12;
  v41 = "detachFromElement";
  v42 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v39);
  if (!*((_BYTE *)this + 232))
  {
    v12 = *((_QWORD *)this + 11);
    if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 112))(v12);
      if (v13)
      {
        v14 = v13;
        v15 = *((_QWORD *)this + 11);
        if (v15)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 120))(v15, 0);
        WebCore::MediaSource::onReadyStateChange((uint64_t)this, v14, 0);
      }
    }
  }
  (*(void (**)(WebCore::MediaSource *))(*(_QWORD *)this + 144))(this);
  while (1)
  {
    v5 = *((_QWORD *)this + 14);
    if (!*(_DWORD *)(v5 + 68))
      break;
    WebCore::MediaSource::removeSourceBuffer(this, **(WebCore::SourceBuffer ***)(v5 + 56), &v36);
    if (v38)
    {
      v6 = v37;
      v37 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  while (1)
  {
    v8 = *((_QWORD *)this + 13);
    if (!*(_DWORD *)(v8 + 68))
      break;
    WebCore::MediaSource::removeSourceBuffer(this, **(WebCore::SourceBuffer ***)(v8 + 56), &v33);
    if (v35)
    {
      v7 = v34;
      v34 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v4);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_27;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_27:
    v16 = *(_QWORD *)(v10 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v10 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v31 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v19 = v31 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v10);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
        if (v17)
          goto LABEL_39;
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v17)
      goto LABEL_39;
LABEL_35:
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (!v19)
      WTF::fastFree((WTF *)v10, v4);
  }
LABEL_39:
  result = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)result));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v4);
    }
  }
  *((_BYTE *)this + 234) = 0;
  if (*((_BYTE *)this + 224))
  {
    v24 = (uint64_t *)((char *)this + 176);
    v32 = 7;
    v39 = 0;
    v40 = 0;
    v41 = "detachFromElement";
    v42 = 0;
    v25 = *((_QWORD *)this + 22);
    if (!v25)
    {
      v28 = 0;
      goto LABEL_56;
    }
    v26 = (unsigned __int8 *)(v25 + 48);
    if (__ldaxr((unsigned __int8 *)(v25 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_50;
    }
    result = MEMORY[0x19AEA534C](v25 + 48);
LABEL_50:
    v29 = *(_DWORD *)(v25 + 80);
    v30 = __ldxr(v26);
    if (v30 == 1)
    {
      if (!__stlxr(0, v26))
      {
LABEL_55:
        v28 = *v24;
        if (!v29)
        {
          result = (uint64_t)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*v24, &v32, (WTF::Logger::LogSiteIdentifier *)&v39);
LABEL_60:
          if (*((_BYTE *)this + 224))
          {
            result = WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WebCore::MediaSource *)((char *)this + 176));
            *((_BYTE *)this + 224) = 0;
          }
          return result;
        }
LABEL_56:
        result = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)result);
        if (*(_BYTE *)result && *(unsigned __int8 *)(result + 16) >= 4u)
          result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(result, (WTF::Logger::LogSiteIdentifier *)&v39, v28);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v26);
    goto LABEL_55;
  }
  return result;
}

void `non-virtual thunk to'WebCore::MediaSource::~MediaSource(WebCore::MediaSource *this)
{
  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 40));
}

{
  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 64));
}

{
  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 72));
}

{
  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 80));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 40));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 64));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 72));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaSource::~MediaSource((WebCore::MediaSource *)((char *)this - 80));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MediaSource::openIfDeferredOpen(WebCore::MediaSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[4];

  v2 = *((_QWORD *)this + 31);
  v3 = *((_QWORD *)this + 32);
  v13[0] = "MediaSource";
  v13[1] = 12;
  v13[2] = "openIfDeferredOpen";
  v13[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  v4 = *((_QWORD *)this + 34);
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_7:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E335DAB8;
  v8[1] = v4;
  v8[2] = this;
  v9 = (unsigned int *)*((_QWORD *)this + 12);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E335DB58;
  v11[1] = v9;
  v11[2] = v8;
  v13[0] = v11;
  WTF::ensureOnMainThread();
  result = v13[0];
  v13[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::MediaSource::buffered(WebCore::MediaSource *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  char v23;
  char **v24;
  char *v25;

  if (!*((_BYTE *)this + 232))
  {
    v11 = *((_QWORD *)this + 11);
    if (v11)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11))
      {
        v12 = *((_QWORD *)this + 11);
        v13 = (unsigned __int8 *)(v12 + 64);
        if (__ldaxr((unsigned __int8 *)(v12 + 64)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v13))
        {
LABEL_16:
          v15 = *(unsigned int *)(v12 + 100);
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 12) = v15;
          if (!(_DWORD)v15)
            goto LABEL_21;
          if (!(v15 >> 27))
          {
            v16 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v15));
            *(_DWORD *)(a2 + 8) = v15;
            *(_QWORD *)a2 = v16;
            v17 = *(unsigned int *)(v12 + 100);
            if ((_DWORD)v17)
            {
              v18 = *(__int128 **)(v12 + 88);
              v19 = 32 * v17;
              do
              {
                v20 = *v18;
                v21 = v18[1];
                v18 += 2;
                *v16 = v20;
                v16[1] = v21;
                v16 += 2;
                v19 -= 32;
              }
              while (v19);
            }
LABEL_21:
            v22 = __ldxr(v13);
            if (v22 == 1)
            {
              if (!__stlxr(0, v13))
                return;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 64));
            return;
          }
          __break(0xC471u);
LABEL_28:
          JUMPOUT(0x19543E69CLL);
        }
        MEMORY[0x19AEA534C](v12 + 64);
        goto LABEL_16;
      }
    }
  }
  v3 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v3 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  v4 = dword_1EE2F8C6C;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      goto LABEL_28;
    }
    v5 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v4));
    *(_DWORD *)(a2 + 8) = v4;
    *(_QWORD *)a2 = v5;
    if (dword_1EE2F8C6C)
    {
      v6 = (__int128 *)WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
      v7 = 32 * dword_1EE2F8C6C;
      do
      {
        v8 = *v6;
        v9 = v6[1];
        v6 += 2;
        *v5 = v8;
        v5[1] = v9;
        v5 += 2;
        v7 -= 32;
      }
      while (v7);
    }
  }
}

uint64_t WebCore::MediaSource::hasBufferedTime(WebCore::MediaSource *this, const WTF::MediaTime *a2)
{
  _BOOL8 v2;
  uint64_t result;
  uint64_t v5;
  WTF::MediaTime *v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;

  if (*((_BYTE *)this + 232))
    return 0;
  v5 = *((_QWORD *)this + 11);
  if (!v5)
    return 0;
  v7 = (WTF::MediaTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
  if (!(_DWORD)v7 || (*((_BYTE *)a2 + 12) & 1) == 0)
    return 0;
  if (*((_BYTE *)this + 232)
    || (v7 = (WTF::MediaTime *)*((_QWORD *)this + 11)) == 0
    || (v7 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v7 + 112))(v7), !(_DWORD)v7))
  {
    v8 = *(_OWORD *)WTF::MediaTime::invalidTime(v7);
    goto LABEL_9;
  }
  v13 = *((_QWORD *)this + 11);
  v14 = (unsigned __int8 *)(v13 + 64);
  if (__ldaxr((unsigned __int8 *)(v13 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v13 + 64);
LABEL_35:
  v8 = *(_OWORD *)(v13 + 72);
  v28 = __ldxr(v14);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, v14))
  {
LABEL_39:
    v29 = v8;
    WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 64));
    v8 = v29;
  }
LABEL_9:
  v36 = v8;
  result = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v36);
  if ((_DWORD)result == 1)
    return 0;
  v10 = *((_QWORD *)this + 11);
  v11 = (unsigned __int8 *)(v10 + 64);
  if (__ldaxr((unsigned __int8 *)(v10 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_18;
  }
  result = MEMORY[0x19AEA534C](v10 + 64);
LABEL_18:
  v16 = *(unsigned int *)(v10 + 100);
  *(_QWORD *)&v36 = 0;
  DWORD2(v36) = 0;
  HIDWORD(v36) = v16;
  if (!(_DWORD)v16)
    goto LABEL_23;
  if (!(v16 >> 27))
  {
    v17 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v16));
    DWORD2(v36) = v16;
    *(_QWORD *)&v36 = v17;
    v18 = *(unsigned int *)(v10 + 100);
    if ((_DWORD)v18)
    {
      v19 = *(__int128 **)(v10 + 88);
      v20 = 32 * v18;
      do
      {
        v21 = *v19;
        v22 = v19[1];
        v19 += 2;
        *v17 = v21;
        v17[1] = v22;
        v17 += 2;
        v20 -= 32;
      }
      while (v20);
    }
LABEL_23:
    v23 = __ldxr(v11);
    if (v23 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_28;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 64));
LABEL_28:
    if (HIDWORD(v36))
    {
      v31 = WebCore::PlatformTimeRanges::nearest((WebCore::PlatformTimeRanges *)&v36, a2);
      v32 = v24;
      v33 = WTF::MediaTime::operator-();
      v34 = v25;
      v35[0] = WTF::abs();
      v35[1] = v26;
      v30 = *(_OWORD *)(*((_QWORD *)this + 11) + 128);
      v2 = (int)WTF::MediaTime::compare((WTF::MediaTime *)v35, (const WTF::MediaTime *)&v30) < 1;
    }
    else
    {
      v2 = 0;
    }
    v27 = (WTF *)v36;
    if ((_QWORD)v36)
    {
      *(_QWORD *)&v36 = 0;
      DWORD2(v36) = 0;
      WTF::fastFree(v27, v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::MediaSource::completeSeek(unsigned int *this)
{
  _OWORD *v1;
  WTF::NativePromiseBase **v2;
  __int128 *v3;
  unsigned int *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::NativePromiseBase *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  __int128 v37;
  uint64_t v39;
  __int128 v40;
  _BYTE *v41;
  void *v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  WTF *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  WTF *v54;
  __int128 v55;
  uint64_t v56;
  unsigned int v57;
  _BYTE *v58;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  WTF::NativePromiseBase *v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned int *v69;
  unsigned int v70;
  void *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  WTF *v85;
  uint64_t v86;
  void *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  WTF::FunctionDispatcher *v96;
  int v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  WTF *v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  char v109;
  __int128 v110;
  __int128 v111;
  unsigned int *v112;
  unsigned int v113;
  void *v114;
  uint64_t *v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  WTF::NativePromiseBase *v124;
  void *v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int *v130;
  WTF *v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  WTF::NativePromiseBase **v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  void *v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  __int128 *v161;
  WTF::NativePromiseBase **v162;
  char v163;
  WTF *v164;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  WTF *v170;
  __int128 v171;
  __int128 v172;
  char v173;
  WTF *v174;
  _BYTE v175[21];
  unsigned int *v176;
  __int128 v177;
  __int128 v178;
  char v179;
  _OWORD v180[3];
  __int128 v181;
  __int128 v182;
  _QWORD v183[5];
  char v184;
  uint64_t v185;
  _BYTE v186[21];
  uint64_t v187;
  unsigned int *v188;
  unsigned int *v189;
  __int128 v190;
  const char *v191;
  uint64_t v192;
  WTF::NativePromiseBase *v193;
  uint64_t v194;
  _BYTE v195[24];
  __int128 v196;
  char v197;
  uint64_t v198;
  _BYTE v199[21];
  uint64_t v200;

  if (*((_BYTE *)this + 232))
    return this;
  v4 = this;
  this = (unsigned int *)*((_QWORD *)this + 11);
  if (!this)
    return this;
  this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 112))(this);
  if (!(_DWORD)this)
    return this;
  v6 = *((_QWORD *)v4 + 31);
  v7 = *((_QWORD *)v4 + 32);
  v193 = (WTF::NativePromiseBase *)"MediaSource";
  v194 = 12;
  *(_QWORD *)v195 = "completeSeek";
  *(_QWORD *)&v195[8] = v7;
  if (!*((_BYTE *)v4 + 168))
    goto LABEL_197;
  v1 = v4 + 30;
  if (*(_BYTE *)(v6 + 12))
  {
    this = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v193, (WTF::MediaTime *)(v4 + 30));
    if (!*((_BYTE *)v4 + 168))
      goto LABEL_197;
  }
  v8 = *(_OWORD *)(v4 + 34);
  v180[0] = *v1;
  v180[1] = v8;
  v180[2] = *(_OWORD *)(v4 + 38);
  *((_BYTE *)v4 + 168) = 0;
  LOBYTE(v182) = 3;
  v193 = 0;
  v194 = 0;
  *(_QWORD *)v195 = "completeSeek";
  *(_QWORD *)&v195[8] = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v176, &v182, (WTF::Logger::LogSiteIdentifier *)&v193);
  v9 = v176;
  if (v176)
  {
    v10 = v176 + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = *((_QWORD *)v4 + 1);
  v165 = v9;
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v3 = (__int128 *)(v13 - 96);
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v14 = *((_QWORD *)v4 + 14);
  v15 = *(unsigned int *)(v14 + 68);
  v161 = v3;
  v166 = v4;
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
      goto LABEL_203;
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    v17 = *(unsigned int *)(v14 + 68);
    if ((_DWORD)v17)
    {
      v1 = 0;
      v18 = *(uint64_t **)(v14 + 56);
      v168 = v17;
      v19 = &v18[v17];
      do
      {
        v20 = v16;
        v21 = *v18;
        v22 = *(_QWORD *)(*v18 + 384);
        v23 = *(_QWORD *)(*v18 + 392);
        v193 = (WTF::NativePromiseBase *)"SourceBuffer";
        v194 = 13;
        *(_QWORD *)v195 = "computeSeekTime";
        *(_QWORD *)&v195[8] = v23;
        if (*(_BYTE *)(v22 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v193, (WebCore::SeekTarget *)v180);
        (*(void (**)(WTF::NativePromiseBase **__return_ptr, _QWORD, _OWORD *))(**(_QWORD **)(v21 + 120)
                                                                                        + 264))(&v193, *(_QWORD *)(v21 + 120), v180);
        v24 = v193;
        v193 = 0;
        v16 = v20;
        *(_QWORD *)(v20 + 8 * (_QWORD)v1) = v24;
        v25 = (unsigned int *)v193;
        v193 = 0;
        if (v25)
        {
          v26 = v25 + 2;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v25 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
          }
        }
        v1 = (_OWORD *)((char *)v1 + 1);
        ++v18;
      }
      while (v18 != v19);
      if ((_DWORD)v1)
      {
        v29 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)v29 = 1;
        *(_BYTE *)(v29 + 4) = 0;
        v30 = (unsigned __int8 *)(v29 + 4);
        *(_QWORD *)(v29 + 8) = 0;
        v31 = (uint64_t *)(v29 + 8);
        *(_QWORD *)(v29 + 16) = 0;
        v32 = WTF::fastMalloc((WTF *)0x28);
        v182 = 0uLL;
        v183[0] = "make_unique";
        v183[1] = 0;
        v33 = WTF::fastMalloc((WTF *)0x88);
        *(_DWORD *)(v33 + 8) = 1;
        *(_QWORD *)v33 = off_1E335D768;
        v34 = *(_OWORD *)v183;
        *(_OWORD *)(v33 + 16) = v182;
        *(_OWORD *)(v33 + 32) = v34;
        *(_BYTE *)(v33 + 48) = 0;
        v35 = (unsigned __int8 *)(v33 + 48);
        *(_DWORD *)(v33 + 80) = 0;
        *(_QWORD *)(v33 + 88) = v33 + 104;
        *(_QWORD *)(v33 + 96) = 1;
        *(_QWORD *)(v33 + 112) = 0;
        *(_QWORD *)(v33 + 120) = 0;
        *(_WORD *)(v33 + 128) = 0;
        v36 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v33);
        if (*v36 && v36[16] >= 4u)
          v36 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v36, v33);
        *(_QWORD *)v32 = v33;
        v37 = v182;
        *(_OWORD *)(v32 + 24) = *(_OWORD *)v183;
        *(_OWORD *)(v32 + 8) = v37;
        if (__ldaxr(v35))
        {
          __clrex();
        }
        else if (!__stxr(1u, v35))
        {
LABEL_42:
          v43 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v36);
          if (*v43 && v43[16] >= 4u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v43, (WTF::Logger::LogSiteIdentifier *)&v182, " runSynchronouslyOnTarget ", v33);
          atomic_store(0, (unsigned __int8 *)(v33 + 129));
          v44 = __ldxr(v35);
          if (v44 == 1)
          {
            v16 = v20;
            if (!__stlxr(0, v35))
              goto LABEL_50;
          }
          else
          {
            __clrex();
            v16 = v20;
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_50:
          *(_QWORD *)(v29 + 24) = v32;
          *(_QWORD *)(v29 + 32) = v1;
          v45 = *(unsigned int *)(v29 + 16);
          v46 = *(WTF **)(v29 + 8);
          if (v45 >= v1)
          {
            v56 = v168;
            goto LABEL_67;
          }
          v47 = v45 + (v45 >> 2);
          if (v47 >= 0x10)
            v48 = v47 + 1;
          else
            v48 = 16;
          if (v48 <= v1)
            v48 = v1;
          if (v48 < 0xAAAAAAB)
          {
            v49 = *(unsigned int *)(v29 + 20);
            v50 = 24 * v48;
            v51 = WTF::fastMalloc((WTF *)(24 * v48));
            *(_DWORD *)(v29 + 16) = (v50 & 0xFFFFFFF8) / 0x18;
            *(_QWORD *)(v29 + 8) = v51;
            if ((_DWORD)v49)
            {
              v53 = 24 * v49;
              v54 = v46;
              do
              {
                v55 = *(_OWORD *)v54;
                *(_QWORD *)(v51 + 16) = *((_QWORD *)v54 + 2);
                *(_OWORD *)v51 = v55;
                v51 += 24;
                v54 = (WTF *)((char *)v54 + 24);
                v53 -= 24;
              }
              while (v53);
              v51 = *v31;
            }
            v56 = v168;
            if (v46)
            {
              if ((WTF *)v51 == v46)
              {
                *(_QWORD *)(v29 + 8) = 0;
                *(_DWORD *)(v29 + 16) = 0;
              }
              WTF::fastFree(v46, v52);
              v46 = (WTF *)*v31;
            }
            else
            {
              v46 = (WTF *)v51;
            }
LABEL_67:
            if (v46)
            {
              v57 = *(_DWORD *)(v29 + 20);
              if (v57 != (_DWORD)v1)
              {
                v58 = (char *)v46 + 24 * v57;
                do
                {
                  *v58 = 0;
                  v58[16] = 0;
                  v58 += 24;
                }
                while (v58 != (char *)v46 + 24 * v1);
              }
            }
            *(_DWORD *)(v29 + 20) = (_DWORD)v1;
            if (__ldaxr(v30))
            {
              __clrex();
            }
            else if (!__stxr(1u, v30))
            {
              goto LABEL_75;
            }
            MEMORY[0x19AEA534C](v30);
LABEL_75:
            v60 = **(_QWORD **)(v29 + 24);
            if (v60)
            {
              v61 = (unsigned int *)(v60 + 8);
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 + 1, v61));
            }
            v63 = __ldxr(v30);
            v169 = v60;
            if (v63 == 1)
            {
              if (!__stlxr(0, v30))
              {
LABEL_83:
                v64 = 0;
                do
                {
                  v65 = *(WTF::NativePromiseBase **)(v16 + 8 * v64);
                  do
                    v66 = __ldaxr((unsigned int *)v29);
                  while (__stlxr(v66 + 1, (unsigned int *)v29));
                  v182 = 0uLL;
                  v67 = WTF::fastMalloc((WTF *)0x50);
                  v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                  *v68 = &off_1E335D828;
                  v68[1] = v29;
                  v68[2] = v64;
                  *(_DWORD *)(v67 + 8) = 1;
                  *(_QWORD *)(v67 + 16) = 0;
                  *(_QWORD *)(v67 + 24) = 0;
                  *(_QWORD *)(v67 + 32) = 0;
                  *(_QWORD *)(v67 + 40) = "all";
                  *(_QWORD *)(v67 + 48) = 0;
                  *(_WORD *)(v67 + 56) = 0;
                  *(_QWORD *)(v67 + 64) = 0;
                  *(_QWORD *)(v67 + 72) = v68;
                  v69 = (unsigned int *)((char *)v65 + 8);
                  *(_QWORD *)v67 = &off_1E3205A10;
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 + 1, v69));
                  *(_OWORD *)v195 = v182;
                  *(_QWORD *)&v195[16] = "all";
                  *(_QWORD *)&v196 = 0;
                  v193 = v65;
                  v194 = 0;
                  v170 = (WTF *)v67;
                  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v65, &v170, (WTF::Logger::LogSiteIdentifier *)v195);
                  v72 = (unsigned int *)v170;
                  v170 = 0;
                  v16 = v20;
                  if (v72)
                  {
                    v73 = v72 + 2;
                    do
                    {
                      v74 = __ldaxr(v73);
                      v75 = v74 - 1;
                    }
                    while (__stlxr(v75, v73));
                    if (!v75)
                    {
                      atomic_store(1u, v72 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
                    }
                  }
                  v76 = (unsigned int *)v194;
                  v194 = 0;
                  if (v76)
                  {
                    v77 = v76 + 2;
                    do
                    {
                      v78 = __ldaxr(v77);
                      v79 = v78 - 1;
                    }
                    while (__stlxr(v79, v77));
                    if (!v79)
                    {
                      atomic_store(1u, v76 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v76 + 8))(v76);
                    }
                  }
                  v80 = (unsigned int *)v193;
                  v193 = 0;
                  if (v80)
                  {
                    v81 = v80 + 2;
                    do
                    {
                      v82 = __ldaxr(v81);
                      v83 = v82 - 1;
                    }
                    while (__stlxr(v83, v81));
                    if (!v83)
                    {
                      atomic_store(1u, v80 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 16))(v80);
                    }
                  }
                }
                while (v64++ != ((v56 - 1) & 0x1FFFFFFFFFFFFFFFLL));
                WTF::ThreadSafeRefCounted<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::AllPromiseProducer,(WTF::DestructionThread)0>::deref(v29, v71);
                v163 = 0;
                v4 = v166;
                v39 = v169;
                v3 = v161;
                goto LABEL_106;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v30);
            goto LABEL_83;
          }
LABEL_203:
          __break(0xC471u);
          JUMPOUT(0x19543F718);
        }
        v36 = (unsigned __int8 *)MEMORY[0x19AEA534C](v35);
        goto LABEL_42;
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v170 = 0;
  *(_QWORD *)&v171 = 0;
  v182 = 0uLL;
  v183[0] = "all";
  v183[1] = 0;
  v39 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v39 + 8) = 1;
  *(_QWORD *)v39 = off_1E335D768;
  v40 = *(_OWORD *)v183;
  *(_OWORD *)(v39 + 16) = v182;
  *(_OWORD *)(v39 + 32) = v40;
  *(_BYTE *)(v39 + 48) = 0;
  *(_DWORD *)(v39 + 80) = 0;
  *(_QWORD *)(v39 + 88) = v39 + 104;
  *(_QWORD *)(v39 + 96) = 1;
  *(_QWORD *)(v39 + 112) = 0;
  *(_QWORD *)(v39 + 120) = 0;
  *(_WORD *)(v39 + 128) = 0;
  v41 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v39);
  if (*v41 && v41[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v41, v39);
  WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(v39, (uint64_t *)&v170, (WTF::Logger::LogSiteIdentifier *)&v182);
  if (v170)
    WTF::fastFree(v170, v42);
  LODWORD(v1) = 0;
  v163 = 1;
LABEL_106:
  v85 = (WTF *)v176;
  v176 = 0;
  v170 = v85;
  v171 = v177;
  v172 = v178;
  v173 = v179;
  v86 = *((_QWORD *)v4 + 4);
  if (v86)
    goto LABEL_207;
  v86 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v86 = 1;
  *(_QWORD *)(v86 + 8) = v4;
  v88 = (unsigned int *)*((_QWORD *)v4 + 4);
  *((_QWORD *)v4 + 4) = v86;
  if (!v88)
    goto LABEL_207;
  do
  {
    v89 = __ldaxr(v88);
    v90 = v89 - 1;
  }
  while (__stlxr(v90, v88));
  if (!v90)
  {
    atomic_store(1u, v88);
    WTF::fastFree((WTF *)v88, v87);
  }
  v86 = *((_QWORD *)v4 + 4);
  if (v86)
  {
LABEL_207:
    do
      v91 = __ldaxr((unsigned int *)v86);
    while (__stlxr(v91 + 1, (unsigned int *)v86));
  }
  v174 = (WTF *)v86;
  *(_QWORD *)v175 = v4;
  *(_QWORD *)&v175[8] = *(_QWORD *)&v180[0];
  *(_QWORD *)&v175[13] = *(_QWORD *)((char *)v180 + 5);
  v2 = (WTF::NativePromiseBase **)WTF::fastMalloc((WTF *)0x10);
  *v2 = 0;
  v2[1] = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v92 = 1;
  *(_QWORD *)(v92 + 8) = v2;
  this = (unsigned int *)*v2;
  *v2 = (WTF::NativePromiseBase *)v92;
  v164 = (WTF *)v16;
  v167 = (unsigned int *)v39;
  v162 = v2;
  if (!this)
    goto LABEL_117;
  do
  {
    v93 = __ldaxr(this);
    v94 = v93 - 1;
  }
  while (__stlxr(v94, this));
  if (!v94)
    goto LABEL_198;
  while (1)
  {
    v92 = (uint64_t)*v2;
    if (*v2)
    {
      do
LABEL_117:
        v95 = __ldaxr((unsigned int *)v92);
      while (__stlxr(v95 + 1, (unsigned int *)v92));
    }
    v96 = (WTF::FunctionDispatcher *)*((_QWORD *)v3 + 36);
    if (!v96)
    {
      v96 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
      v97 = 1;
      *((_DWORD *)v96 + 2) = 1;
      v98 = WTF::FunctionDispatcher::FunctionDispatcher(v96);
      *(_QWORD *)v98 = off_1E33A7800;
      v99 = v3[15];
      *(_OWORD *)(v98 + 16) = v3[14];
      *(_OWORD *)(v98 + 32) = v99;
      if ((*(unsigned int (**)(__int128 *))(*(_QWORD *)v3 + 64))(v3))
      {
        v100 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v100)
          v100 = WTF::Thread::initializeCurrentTLS(0);
        v97 = *(_DWORD *)(v100 + 48);
      }
      *((_DWORD *)v96 + 12) = v97;
      v101 = *((_QWORD *)v3 + 36);
      *((_QWORD *)v3 + 36) = v96;
      if (v101)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v101 + 40))(v101);
        v96 = (WTF::FunctionDispatcher *)*((_QWORD *)v3 + 36);
      }
    }
    v102 = *((_QWORD *)v3 + 13);
    if (v102)
      goto LABEL_208;
    v102 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v102 = 1;
    *(_QWORD *)(v102 + 8) = v3 + 6;
    v158 = (unsigned int *)*((_QWORD *)v3 + 13);
    *((_QWORD *)v3 + 13) = v102;
    if (!v158)
      goto LABEL_208;
    do
    {
      v159 = __ldaxr(v158);
      v160 = v159 - 1;
    }
    while (__stlxr(v160, v158));
    if (!v160)
    {
      atomic_store(1u, v158);
      WTF::fastFree((WTF *)v158, v157);
    }
    v102 = *((_QWORD *)v3 + 13);
    if (v102)
    {
LABEL_208:
      do
        v103 = __ldaxr((unsigned int *)v102);
      while (__stlxr(v103 + 1, (unsigned int *)v102));
    }
    *(_OWORD *)&v183[1] = v171;
    *(_OWORD *)&v183[3] = v172;
    *(_OWORD *)v186 = *(_OWORD *)v175;
    BYTE8(v182) = 9;
    v184 = v173;
    v104 = v170;
    v105 = v174;
    v170 = 0;
    v174 = 0;
    *(_QWORD *)&v186[13] = *(_QWORD *)&v175[13];
    v181 = 0uLL;
    *(_QWORD *)&v182 = 0;
    LOBYTE(v194) = 9;
    v183[0] = 0;
    *(_OWORD *)&v195[8] = v171;
    v196 = v172;
    v197 = v173;
    *(_OWORD *)v199 = *(_OWORD *)v175;
    *(_QWORD *)&v199[13] = *(_QWORD *)&v175[13];
    v185 = 0;
    v187 = 0;
    v2 = &v193;
    v106 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v96 + 32))(v96);
    v107 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)v107 = off_1E335D850;
    *(_QWORD *)(v107 + 8) = v102;
    *(_BYTE *)(v107 + 16) = 9;
    v193 = 0;
    *(_QWORD *)v195 = 0;
    *(_QWORD *)(v107 + 24) = v104;
    v109 = v197;
    v110 = v196;
    *(_OWORD *)(v107 + 32) = *(_OWORD *)&v195[8];
    *(_OWORD *)(v107 + 48) = v110;
    *(_BYTE *)(v107 + 64) = v109;
    *(_QWORD *)(v107 + 72) = v105;
    v111 = *(_OWORD *)v199;
    *(_QWORD *)(v107 + 93) = *(_QWORD *)&v199[13];
    *(_OWORD *)(v107 + 80) = v111;
    v198 = 0;
    v200 = 0;
    *(_QWORD *)(v107 + 104) = v162;
    *(_DWORD *)(v106 + 8) = 1;
    *(_QWORD *)(v106 + 16) = v96;
    *(_QWORD *)(v106 + 24) = 0;
    *(_QWORD *)(v106 + 32) = 0;
    *(_QWORD *)(v106 + 40) = "enqueueTaskWhenSettled";
    *(_QWORD *)(v106 + 48) = 0;
    *(_WORD *)(v106 + 56) = 0;
    *(_QWORD *)v106 = &off_1E335D8A0;
    v112 = v167 + 2;
    *(_QWORD *)(v106 + 64) = 0;
    *(_QWORD *)(v106 + 72) = v107;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 + 1, v112));
    v188 = v167;
    v189 = (unsigned int *)v106;
    v3 = &v190;
    v190 = v181;
    v191 = "enqueueTaskWhenSettled";
    v192 = 0;
    WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WebCore::MediaSource::completeSeek(void)::$_1>(WTF::Ref<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::MediaSource::completeSeek(void)::$_1 &&)::{lambda(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)&v193, v108);
    WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WebCore::MediaSource::completeSeek(void)::$_1>(WTF::Ref<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::MediaSource::completeSeek(void)::$_1 &&)::{lambda(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)&v182, v114);
    if (!v92)
      goto LABEL_144;
    v115 = *(uint64_t **)(v92 + 8);
    if (!v115)
      goto LABEL_144;
    WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>((uint64_t)v161 + 296, v115, (uint64_t)&v193);
    v116 = *(_QWORD *)(v92 + 8);
    v117 = v189;
    v118 = v189 + 2;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 + 1, v118));
    v120 = *(unsigned int **)(v116 + 8);
    *(_QWORD *)(v116 + 8) = v117;
    if (v120)
    {
      v121 = v120 + 2;
      do
      {
        v122 = __ldaxr(v121);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, v121));
      if (!v123)
      {
        atomic_store(1u, v120 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v120 + 8))(v120);
      }
    }
    v124 = (WTF::NativePromiseBase *)v189;
    v189 = 0;
    v193 = v124;
    WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v188, &v193, (WTF::Logger::LogSiteIdentifier *)&v190);
    v126 = (unsigned int *)v193;
    v193 = 0;
    if (v126)
    {
      v127 = v126 + 2;
      do
      {
        v128 = __ldaxr(v127);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, v127));
      if (!v129)
      {
        atomic_store(1u, v126 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v126 + 8))(v126);
      }
    }
    v106 = (uint64_t)v189;
    if (!v189)
    {
      v189 = 0;
      v131 = v164;
    }
    else
    {
LABEL_144:
      v189 = 0;
      v193 = (WTF::NativePromiseBase *)v106;
      WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v188, &v193, (WTF::Logger::LogSiteIdentifier *)&v190);
      v130 = (unsigned int *)v193;
      v193 = 0;
      v131 = v164;
      if (v130)
      {
        v132 = v130 + 2;
        do
        {
          v133 = __ldaxr(v132);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, v132));
        if (!v134)
        {
          atomic_store(1u, v130 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v130 + 8))(v130);
        }
      }
      v135 = v189;
      v189 = 0;
      if (v135)
      {
        v136 = v135 + 2;
        do
        {
          v137 = __ldaxr(v136);
          v138 = v137 - 1;
        }
        while (__stlxr(v138, v136));
        if (!v138)
        {
          atomic_store(1u, v135 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v135 + 8))(v135);
        }
      }
    }
    v139 = v188;
    v188 = 0;
    if (!v139)
      goto LABEL_158;
    v140 = v139 + 2;
    do
    {
      v141 = __ldaxr(v140);
      v142 = v141 - 1;
    }
    while (__stlxr(v142, v140));
    if (!v142)
    {
      atomic_store(1u, v139 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v139 + 16))(v139);
      if (!v92)
        goto LABEL_162;
    }
    else
    {
LABEL_158:
      if (!v92)
        goto LABEL_162;
    }
    do
    {
      v143 = __ldaxr((unsigned int *)v92);
      v144 = v143 - 1;
    }
    while (__stlxr(v144, (unsigned int *)v92));
    if (!v144)
    {
      atomic_store(1u, (unsigned int *)v92);
      WTF::fastFree((WTF *)v92, v125);
    }
LABEL_162:
    v145 = (unsigned int *)v174;
    v174 = 0;
    if (v145)
    {
      do
      {
        v146 = __ldaxr(v145);
        v147 = v146 - 1;
      }
      while (__stlxr(v147, v145));
      if (!v147)
      {
        atomic_store(1u, v145);
        WTF::fastFree((WTF *)v145, v125);
      }
    }
    this = (unsigned int *)WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v170);
    if (v167)
    {
      do
      {
        v148 = __ldaxr(v112);
        v149 = v148 - 1;
      }
      while (__stlxr(v149, v112));
      if (!v149)
      {
        atomic_store(1u, v167 + 2);
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v167 + 16))(v167);
      }
    }
    if ((v163 & 1) == 0)
    {
      v153 = (WTF::NativePromiseBase **)((char *)v131 + 8 * v1);
      LODWORD(v1) = 1;
      v2 = (WTF::NativePromiseBase **)v131;
      do
      {
        this = (unsigned int *)*v2;
        *v2 = 0;
        if (this)
        {
          v154 = this + 2;
          do
          {
            v155 = __ldaxr(v154);
            v156 = v155 - 1;
          }
          while (__stlxr(v156, v154));
          if (!v156)
          {
            atomic_store(1u, this + 2);
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
          }
        }
        ++v2;
      }
      while (v2 != v153);
    }
    if (v131)
      this = (unsigned int *)WTF::fastFree(v131, v5);
    if (*((_BYTE *)v166 + 224))
      break;
LABEL_197:
    __break(1u);
LABEL_198:
    atomic_store(1u, this);
    WTF::fastFree((WTF *)this, v5);
  }
  v193 = 0;
  v194 = 0;
  *(_QWORD *)v195 = "completeSeek";
  *(_QWORD *)&v195[8] = 0;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::chainTo<WTF::MediaTime,WebCore::PlatformMediaError,16u>((unsigned __int8 *)v165, (uint64_t)(v166 + 44), (WTF::Logger::LogSiteIdentifier *)&v193);
  if (*((_BYTE *)v166 + 224))
  {
    WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(v166 + 44));
    *((_BYTE *)v166 + 224) = 0;
  }
  if (v165)
  {
    v150 = v165 + 2;
    do
    {
      v151 = __ldaxr(v150);
      v152 = v151 - 1;
    }
    while (__stlxr(v152, v150));
    if (!v152)
    {
      atomic_store(1u, v165 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v165 + 16))(v165);
    }
  }
  return (unsigned int *)WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v176);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::chainTo<WTF::MediaTime,WebCore::PlatformMediaError,16u>(unsigned __int8 *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  WTF *v25;
  void *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF *v45;
  WTF::Logger::LogSiteIdentifier *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned __int8 *v64;
  _BYTE *v66;
  int v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  __int128 v84;
  const char *v85;
  uint64_t v86;
  WTF::Logger *v87[2];
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::NativePromiseBase *v101;
  _BYTE buf[24];
  __int128 v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::Logger *v112;
  int v113;
  _QWORD v114[5];

  v5 = (uint64_t)a1;
  v114[2] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    v7 = v6 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_8;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 48);
LABEL_8:
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  a1 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 48));
LABEL_13:
  v12 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v12)
    goto LABEL_125;
  v13 = v12;
  if (v12[16] < 4u)
    goto LABEL_125;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v93, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(v5, &v92);
  WTF::String::String((WTF::String *)&v91, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v6, &v90);
  WTF::String::String((WTF::String *)&v89, " isSettled:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = *(WTF::StringImpl **)buf;
  WTF::String::String((WTF::String *)&v88, "]");
  *(_QWORD *)buf = v94;
  v87[0] = v93;
  v100 = v91;
  v101 = v92;
  v98 = v89;
  v99 = v90;
  v96 = v88;
  v97 = v14;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v87, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, (uint64_t *)&v97, (uint64_t *)&v96, &v95);
  if (!v95)
  {
    __break(0xC471u);
    return result;
  }
  v17 = v88;
  v88 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v16);
      if (!v14)
        goto LABEL_22;
      goto LABEL_20;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (!v14)
    goto LABEL_22;
LABEL_20:
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v16);
  else
    *(_DWORD *)v14 -= 2;
LABEL_22:
  v18 = v89;
  v89 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v90;
  v90 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v91;
  v91 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v92;
  v92 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v93;
  v93 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v94;
  v94 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v16);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *((_QWORD *)v13 + 4);
  v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v25)
  {
    WTF::String::utf8();
    v27 = v87[0] ? (char *)v87[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v27;
    _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v25 = v87[0];
    v87[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        v25 = (WTF *)WTF::fastFree(v25, v26);
      else
        --*(_DWORD *)v25;
    }
  }
  if (*v13 && v13[16] >= 4u)
  {
    v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v29 = *v28;
      if ((v29 & 1) != 0)
        break;
      v30 = __ldaxr(v28);
      if (v30 == v29)
      {
        if (!__stxr(v29 | 1, v28))
        {
          v83 = v13;
          v31 = WTF::Logger::observers(v25);
          v32 = *(unsigned int *)(v31 + 12);
          if ((_DWORD)v32)
          {
            v33 = *(uint64_t **)v31;
            v82 = *(_QWORD *)v31 + 8 * v32;
            do
            {
              v34 = *v33;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              *(_DWORD *)&buf[16] = 0;
              WTF::String::String((WTF::String *)&v103, " invoking chainTo() [");
              DWORD2(v103) = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(v5, &v104);
              v105 = 0;
              WTF::String::String((WTF::String *)&v106, " chainedPromise:");
              v107 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v6, &v108);
              v109 = 0;
              WTF::String::String((WTF::String *)&v110, " isSettled:");
              v111 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v112 = v87[0];
              v113 = 0;
              WTF::String::String((WTF::String *)v114, "]");
              v87[0] = 0;
              v87[1] = 0;
              v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v87[1]) = 8;
              v87[0] = v35;
              v36 = HIDWORD(v87[1]);
              *((_DWORD *)v35 + 4 * HIDWORD(v87[1])) = *(_DWORD *)buf;
              v37 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v35 + 2 * v36 + 1) = v37;
              *((_DWORD *)v35 + 4 * (v36 + 1)) = *(_DWORD *)&buf[16];
              v38 = v103;
              if ((_QWORD)v103)
                *(_DWORD *)v103 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
              *((_DWORD *)v35 + 4 * (v36 + 2)) = DWORD2(v103);
              v39 = v104;
              if (v104)
                *(_DWORD *)v104 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
              *((_DWORD *)v35 + 4 * (v36 + 3)) = v105;
              v40 = v106;
              if (v106)
                *(_DWORD *)v106 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 3) + 1) = v40;
              *((_DWORD *)v35 + 4 * (v36 + 4)) = v107;
              v41 = v108;
              if (v108)
                *(_DWORD *)v108 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 4) + 1) = v41;
              *((_DWORD *)v35 + 4 * (v36 + 5)) = v109;
              v42 = v110;
              if (v110)
                *(_DWORD *)v110 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 5) + 1) = v42;
              *((_DWORD *)v35 + 4 * (v36 + 6)) = v111;
              v43 = v112;
              if (v112)
                *(_DWORD *)v112 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 6) + 1) = v43;
              *((_DWORD *)v35 + 4 * (v36 + 7)) = v113;
              v44 = v114[0];
              if (v114[0])
                *(_DWORD *)v114[0] += 2;
              *((_QWORD *)v35 + 2 * (v36 + 7) + 1) = v44;
              HIDWORD(v87[1]) = v36 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, v83, 4, v87);
              v45 = v87[0];
              if (HIDWORD(v87[1]))
              {
                v46 = a3;
                v47 = 16 * HIDWORD(v87[1]);
                v48 = (WTF::StringImpl **)((char *)v87[0] + 8);
                do
                {
                  v49 = *v48;
                  *v48 = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v26);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  v48 += 2;
                  v47 -= 16;
                }
                while (v47);
                v45 = v87[0];
                a3 = v46;
              }
              if (v45)
              {
                v87[0] = 0;
                LODWORD(v87[1]) = 0;
                WTF::fastFree(v45, v26);
              }
              v50 = (WTF::StringImpl *)v114[0];
              v114[0] = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v112;
              v112 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v110;
              v110 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v108;
              v108 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v106;
              v106 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = v104;
              v104 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = (WTF::StringImpl *)v103;
              *(_QWORD *)&v103 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v57 -= 2;
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v82);
          }
          v58 = __ldxr(v28);
          if (v58 == 1)
          {
            if (!__stlxr(0, v28))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v12 = (unsigned __int8 *)v95;
  v95 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      v12 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v12, (WTF::StringImpl *)v26);
      if (!v6)
        goto LABEL_130;
      goto LABEL_126;
    }
    *(_DWORD *)v12 -= 2;
  }
LABEL_125:
  if (!v6)
    goto LABEL_130;
LABEL_126:
  v59 = v6 + 2;
  do
  {
    v60 = __ldaxr(v59);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v59));
  if (!v61)
  {
    atomic_store(1u, v6 + 2);
    v12 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
  }
LABEL_130:
  v62 = atomic_load((unsigned __int8 *)(v5 + 129));
  v63 = *(_QWORD *)a2;
  v64 = (unsigned __int8 *)(*(_QWORD *)a2 + 48);
  if (__ldaxr(v64))
  {
    __clrex();
LABEL_133:
    v12 = (unsigned __int8 *)MEMORY[0x19AEA534C](v64);
    goto LABEL_134;
  }
  if (__stxr(1u, v64))
    goto LABEL_133;
LABEL_134:
  v66 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v12);
  if (*v66 && v66[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v66, 4u, a3, " runSynchronouslyOnTarget ", v63);
  atomic_store(v62, (unsigned __int8 *)(v63 + 129));
  v67 = __ldxr(v64);
  if (v67 != 1)
  {
    __clrex();
    goto LABEL_141;
  }
  if (__stlxr(0, v64))
LABEL_141:
    WTF::Lock::unlockSlow((WTF::Lock *)v64);
  v68 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 8);
  v103 = *(_OWORD *)(a2 + 24);
  LOBYTE(v104) = *(_BYTE *)(a2 + 40);
  v87[0] = 0;
  v87[1] = 0;
  v69 = WTF::fastMalloc((WTF *)0x50);
  v70 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v70 = off_1E335D690;
  *(_QWORD *)(v70 + 8) = v68;
  *(_QWORD *)buf = 0;
  v71 = *(_OWORD *)&buf[8];
  v72 = v103;
  *(_BYTE *)(v70 + 48) = (_BYTE)v104;
  *(_OWORD *)(v70 + 16) = v71;
  *(_OWORD *)(v70 + 32) = v72;
  *(_DWORD *)(v69 + 8) = 1;
  *(_QWORD *)(v69 + 16) = 0;
  *(_QWORD *)(v69 + 24) = 0;
  *(_QWORD *)(v69 + 32) = 0;
  *(_QWORD *)(v69 + 40) = "chainTo";
  *(_QWORD *)(v69 + 48) = 0;
  *(_WORD *)(v69 + 56) = 0;
  *(_QWORD *)v69 = &off_1E3205A10;
  v73 = (unsigned int *)(v5 + 8);
  *(_QWORD *)(v69 + 64) = 0;
  *(_QWORD *)(v69 + 72) = v70;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 + 1, v73));
  v84 = *(_OWORD *)v87;
  v85 = "chainTo";
  v86 = 0;
  v101 = (WTF::NativePromiseBase *)v69;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(v5, &v101, (WTF::Logger::LogSiteIdentifier *)&v84);
  v75 = (unsigned int *)v101;
  v101 = 0;
  if (v75)
  {
    v76 = v75 + 2;
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      atomic_store(1u, v75 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 8))(v75);
    }
  }
  if (v5)
  {
    v79 = (unsigned int *)(v5 + 8);
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, (unsigned int *)(v5 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  return WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)buf);
}

uint64_t WebCore::MediaSource::seekable@<X0>(WebCore::MediaSource *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::MediaSourcePrivate *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  WTF *v13;
  int v14;
  unsigned int v15;

  v3 = (WebCore::MediaSourcePrivate *)*((_QWORD *)this + 11);
  if (!v3)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *a2 = result;
    return result;
  }
  WebCore::MediaSourcePrivate::seekable(v3, (uint64_t)&v13);
  result = WTF::fastMalloc((WTF *)0x18);
  v6 = result;
  *(_DWORD *)result = 1;
  v7 = v15;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    v8 = WTF::fastMalloc((WTF *)(32 * v7));
    *(_DWORD *)(v6 + 16) = v7;
    *(_QWORD *)(v6 + 8) = v8;
    result = (uint64_t)v13;
    if (v15)
    {
      v9 = 0;
      v10 = 32 * v15;
      do
      {
        v11 = (_OWORD *)(v8 + v9);
        v12 = *(_OWORD *)(result + v9 + 16);
        *v11 = *(_OWORD *)(result + v9);
        v11[1] = v12;
        v9 += 32;
      }
      while (v10 != v9);
    }
  }
  else
  {
    result = (uint64_t)v13;
  }
  *a2 = v6;
  if (result)
  {
    v13 = 0;
    v14 = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

WTF::MediaTime *WebCore::MediaSource::setLiveSeekableRange@<X0>(WTF::MediaTime *this@<X0>, double a2@<D0>, double a3@<D1>, uint64_t a4@<X8>)
{
  WTF::MediaTime *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unsigned __int8 *v14;
  void *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  WTF *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  double v24;
  double v25;

  v4 = this;
  v24 = a3;
  v25 = a2;
  v6 = *((_QWORD *)this + 31);
  v7 = *((_QWORD *)this + 32);
  v20 = (WTF *)"MediaSource";
  v21 = 12;
  v22 = "setLiveSeekableRange";
  v23 = v7;
  if (*(_BYTE *)(v6 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],double,char [9],double>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v20, "start = ", &v25, ", end = ", &v24);
  if (*((_BYTE *)v4 + 232)
    || (this = (WTF::MediaTime *)*((_QWORD *)v4 + 11)) == 0
    || (this = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)this + 112))(this),
        (_DWORD)this != 1))
  {
    v8 = 8;
LABEL_5:
    *(_BYTE *)a4 = v8;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return this;
  }
  if (v25 < 0.0 || v25 > v24)
  {
    v8 = 33;
    goto LABEL_5;
  }
  v10 = *((_QWORD *)v4 + 11);
  *(_QWORD *)&v19 = WTF::MediaTime::createWithDouble(this, v25);
  *((_QWORD *)&v19 + 1) = v11;
  *(_QWORD *)&v18 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v19, v24);
  *((_QWORD *)&v18 + 1) = v12;
  v20 = 0;
  v21 = 0;
  v13 = WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v20, &v19, &v18, 0);
  v14 = (unsigned __int8 *)(v10 + 64);
  if (__ldaxr((unsigned __int8 *)(v10 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v10 + 64, v13);
LABEL_18:
  WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(v10 + 104), (WTF *)&v20);
  v17 = __ldxr(v14);
  if (v17 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 64));
LABEL_23:
  this = v20;
  if (v20)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    this = (WTF::MediaTime *)WTF::fastFree(this, v16);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return this;
}

WTF *WebCore::MediaSource::clearLiveSeekableRange@<X0>(WTF *this@<X0>, _QWORD *a2@<X8>)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  _QWORD v11[4];

  v2 = this;
  v4 = *((_QWORD *)this + 31);
  v5 = *((_QWORD *)this + 32);
  v11[0] = "MediaSource";
  v11[1] = 12;
  v11[2] = "clearLiveSeekableRange";
  v11[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    this = (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  if (!*((_BYTE *)v2 + 232))
  {
    this = (WTF *)*((_QWORD *)v2 + 11);
    if (this)
    {
      this = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 112))(this);
      if ((_DWORD)this == 1)
      {
        v7 = *((_QWORD *)v2 + 11);
        v8 = (unsigned __int8 *)(v7 + 64);
        if (__ldaxr((unsigned __int8 *)(v7 + 64)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v8))
        {
          goto LABEL_12;
        }
        this = (WTF *)MEMORY[0x19AEA534C](v7 + 64);
LABEL_12:
        if (*(_DWORD *)(v7 + 112))
        {
          if (*(_DWORD *)(v7 + 116))
            *(_DWORD *)(v7 + 116) = 0;
          this = *(WTF **)(v7 + 104);
          if (this)
          {
            *(_QWORD *)(v7 + 104) = 0;
            *(_DWORD *)(v7 + 112) = 0;
            this = (WTF *)WTF::fastFree(this, v6);
          }
        }
        v10 = __ldxr(v8);
        if (v10 == 1)
        {
          if (!__stlxr(0, v8))
            goto LABEL_22;
        }
        else
        {
          __clrex();
        }
        this = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 64));
LABEL_22:
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        return this;
      }
    }
  }
  *(_BYTE *)a2 = 8;
  a2[1] = 0;
  *((_BYTE *)a2 + 16) = 1;
  return this;
}

uint64_t WebCore::MediaSource::contentTypeShouldGenerateTimestamps(WebCore::MediaSource *this, const WebCore::ContentType *a2, double a3, double a4, float a5)
{
  WTF::StringImpl *v6;
  double v7;
  double v8;
  float v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WebCore::ContentType::containerType(this, a3, a4, a5);
  if ((MEMORY[0x19AEA53F4](v13, "audio/aac", 9) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    WebCore::ContentType::containerType(this, v7, v8, v9);
    v10 = MEMORY[0x19AEA53F4](v12, "audio/mpeg", 10);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v10;
}

WTF::MediaTime *WebCore::MediaSource::setDuration@<X0>(WTF::MediaTime *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  double v17;

  v3 = (uint64_t)this;
  v17 = a2;
  v5 = *((_QWORD *)this + 31);
  v6 = *((_QWORD *)this + 32);
  v13 = "MediaSource";
  v14 = 12;
  v15 = "setDuration";
  v16 = v6;
  if (*(_BYTE *)(v5 + 12))
  {
    this = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v13, &v17);
    a2 = v17;
  }
  if (a2 < 0.0)
  {
    v7 = 33;
LABEL_7:
    *(_BYTE *)a3 = v7;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  if (*(_BYTE *)(v3 + 232)
    || (this = *(WTF::MediaTime **)(v3 + 88)) == 0
    || (this = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)this + 112))(this),
        (_DWORD)this != 1))
  {
LABEL_6:
    v7 = 8;
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(v3 + 104);
  v9 = *(unsigned int *)(v8 + 68);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(v8 + 56);
    v11 = 8 * v9;
    while (!*(_BYTE *)(*(_QWORD *)v10 + 320))
    {
      v10 += 8;
      v11 -= 8;
      if (!v11)
        goto LABEL_14;
    }
    goto LABEL_6;
  }
LABEL_14:
  v13 = (const char *)WTF::MediaTime::createWithDouble(this, v17);
  v14 = v12;
  return (WTF::MediaTime *)WebCore::MediaSource::setDurationInternal((WebCore::MediaSource *)v3, (const WTF::MediaTime *)&v13, a3);
}

uint64_t WebCore::MediaSource::setDurationInternal@<X0>(WebCore::MediaSource *this@<X0>, const WTF::MediaTime *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::MediaSource *v4;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::MediaTime *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v25;
  __int128 v26;
  __int128 v27;
  const char *v28;
  uint64_t v29;
  __int128 v30;
  _BYTE v31[13];
  _BYTE v32[13];

  v4 = this;
  if (*((_BYTE *)this + 232)
    || (this = (WebCore::MediaSource *)*((_QWORD *)this + 11)) == 0
    || (this = (WebCore::MediaSource *)(*(uint64_t (**)(WebCore::MediaSource *))(*(_QWORD *)this + 112))(this),
        !(_DWORD)this))
  {
    v6 = *(_OWORD *)WTF::MediaTime::invalidTime(this);
    goto LABEL_3;
  }
  v22 = *((_QWORD *)v4 + 11);
  v23 = (unsigned __int8 *)(v22 + 64);
  if (__ldaxr((unsigned __int8 *)(v22 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_33;
  }
  MEMORY[0x19AEA534C](v22 + 64);
LABEL_33:
  v6 = *(_OWORD *)(v22 + 72);
  v25 = __ldxr(v23);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, v23))
  {
LABEL_37:
    v26 = v6;
    WTF::Lock::unlockSlow((WTF::Lock *)(v22 + 64));
    v6 = v26;
  }
LABEL_3:
  v27 = v6;
  result = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v27);
  if ((_DWORD)result)
  {
    *(_QWORD *)v32 = 0;
    *(_DWORD *)&v32[8] = 10000000;
    v32[12] = 1;
    *(_QWORD *)v31 = 0;
    *(_DWORD *)&v31[8] = 10000000;
    v31[12] = 1;
    v8 = *((_QWORD *)v4 + 13);
    v9 = *(unsigned int *)(v8 + 68);
    if (!(_DWORD)v9)
      goto LABEL_40;
    v10 = *(_QWORD *)(v8 + 56);
    v11 = 8 * v9;
    do
    {
      v27 = *(_OWORD *)(*(_QWORD *)v10 + 280);
      v12 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)v32, (const WTF::MediaTime *)&v27);
      if ((_DWORD)v12 == -1)
        v13 = &v27;
      else
        v13 = (__int128 *)v32;
      v14 = *(_QWORD *)((char *)v13 + 5);
      *(_QWORD *)v32 = *(_QWORD *)v13;
      *(_QWORD *)&v32[5] = v14;
      v15 = *(_QWORD *)(*(_QWORD *)v10 + 328);
      v16 = *(_DWORD *)(v15 + 20);
      if (v16)
        v17 = (__int128 *)(*(_QWORD *)(v15 + 8) + 32 * (v16 - 1) + 16);
      else
        v17 = (__int128 *)WTF::MediaTime::invalidTime(v12);
      v27 = *v17;
      if (WTF::MediaTime::compare((WTF::MediaTime *)v31, (const WTF::MediaTime *)&v27) == -1)
        v18 = &v27;
      else
        v18 = (__int128 *)v31;
      v19 = *(_QWORD *)((char *)v18 + 5);
      *(_QWORD *)v31 = *(_QWORD *)v18;
      *(_QWORD *)&v31[5] = v19;
      v10 += 8;
      v11 -= 8;
    }
    while (v11);
    if ((v32[12] & 1) != 0)
    {
LABEL_40:
      result = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)v32);
      if ((_DWORD)result == -1)
      {
        *(_BYTE *)a3 = 8;
        *(_QWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 16) = 1;
        return result;
      }
    }
    if ((v31[12] & 1) != 0 && WTF::MediaTime::compare(a2, (const WTF::MediaTime *)v31) == -1)
      a2 = (const WTF::MediaTime *)v31;
    v30 = *(_OWORD *)a2;
    v20 = *((_QWORD *)v4 + 31);
    v21 = *((_QWORD *)v4 + 32);
    *(_QWORD *)&v27 = "MediaSource";
    *((_QWORD *)&v27 + 1) = 12;
    v28 = "setDurationInternal";
    v29 = v21;
    if (*(_BYTE *)(v20 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v27, (WTF::MediaTime *)&v30);
    (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)v4 + 11) + 56))(*((_QWORD *)v4 + 11), &v30);
    result = (*(uint64_t (**)(WebCore::MediaSource *))(*(_QWORD *)v4 + 72))(v4);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WebCore::MediaSource::onReadyStateChange(uint64_t this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  _QWORD v76[4];
  WTF::Logger *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  __int128 buf;
  const char *v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;

  v5 = this;
  v95 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(this + 248);
  v7 = *(_QWORD *)(this + 256);
  v76[0] = "MediaSource";
  v76[1] = 12;
  v76[2] = "onReadyStateChange";
  v76[3] = v7;
  if (!*(_BYTE *)(v6 + 12))
    goto LABEL_100;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v76);
  WTF::String::String((WTF::String *)&v80, "old state = ");
  {
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4878 = &WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4880 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl;
  }
  v8 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[a2];
  if (v8)
    *(_DWORD *)v8 += 2;
  WTF::String::String((WTF::String *)&v79, ", new state = ");
  {
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4878 = &WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4880 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl;
  }
  v9 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[a3];
  if (v9)
    *(_DWORD *)v9 += 2;
  v85 = v8;
  *(_QWORD *)&buf = v81;
  v77 = v80;
  v83 = v9;
  v84 = v79;
  this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v77, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, &v82);
  if (!v82)
  {
    __break(0xC471u);
    return this;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = v79;
  v79 = 0;
  if (!v11)
  {
LABEL_17:
    if (v8)
      goto LABEL_18;
    goto LABEL_20;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v11, v10);
  if (v8)
  {
LABEL_18:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v10);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_20:
  v12 = v80;
  v80 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v81;
  v81 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = qword_1ECE7CE80;
  v15 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v15)
  {
    WTF::String::utf8();
    v17 = v77 ? (char *)v77 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v15 = (uint64_t)v77;
    v77 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        v15 = WTF::fastFree((WTF *)v15, v16);
      else
        --*(_DWORD *)v15;
    }
  }
  if (WebCore::LogMediaSource)
  {
    v18 = a2;
    v19 = a3;
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v74 = a2;
          v75 = a3;
          v23 = WTF::Logger::observers((WTF::Logger *)v15);
          v24 = *(unsigned int *)(v23 + 12);
          v25 = &unk_1EE2F4000;
          if ((_DWORD)v24)
          {
            v26 = *(uint64_t **)v23;
            v27 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v28 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v76);
              LODWORD(v87) = 0;
              WTF::String::String((WTF::String *)&v88, "old state = ");
              v89 = 0;
              if ((v25[2184] & 1) == 0)
              {
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F4878 = &WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl += 2;
                qword_1EE2F4880 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl;
                v25[2184] = 1;
              }
              v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[v18];
              if (v29)
                *(_DWORD *)v29 += 2;
              v90 = v29;
              v91 = 0;
              WTF::String::String((WTF::String *)&v92, ", new state = ");
              v93 = 0;
              if ((v25[2184] & 1) == 0)
              {
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F4878 = &WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl += 2;
                qword_1EE2F4880 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::$_2::operator() const(void)::impl;
                v25[2184] = 1;
              }
              v30 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaSourceReadyState)::values[v19];
              if (v30)
                *(_DWORD *)v30 += 2;
              v94 = v30;
              v77 = 0;
              v78 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
              LODWORD(v78) = 5;
              v77 = v31;
              v32 = HIDWORD(v78);
              *((_DWORD *)v31 + 4 * HIDWORD(v78)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = (_DWORD)v87;
              v34 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v89;
              v35 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v91;
              v36 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v93;
              v37 = v94;
              if (v94)
                *(_DWORD *)v94 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              HIDWORD(v78) = v32 + 5;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMediaSource, 0, &v77);
              v38 = v77;
              if (HIDWORD(v78))
              {
                v39 = 16 * HIDWORD(v78);
                v40 = (WTF::StringImpl **)((char *)v77 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v77;
                v25 = (_BYTE *)&unk_1EE2F4000;
              }
              if (v38)
              {
                v77 = 0;
                LODWORD(v78) = 0;
                WTF::fastFree(v38, v16);
              }
              v42 = v94;
              v94 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v92;
              v92 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v90;
              v90 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v88;
              v88 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v47 = __ldxr(v20);
          if (v47 == 1)
          {
            a3 = v75;
            a2 = v74;
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
            a3 = v75;
            a2 = v74;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  this = (uint64_t)v82;
  v82 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_100:
  if (!*(_BYTE *)(v5 + 232))
  {
    this = *(_QWORD *)(v5 + 88);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 112))(this);
      if ((_DWORD)this == 1)
      {
        *(_BYTE *)(v5 + 233) = 0;
        v56 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v56 || (v57 = *(_QWORD *)(v56 + 96)) == 0)
          v57 = WebCore::threadGlobalDataSlow((WebCore *)this);
        v58 = *(_QWORD *)(v57 + 40);
        if (!v58)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v57);
          v58 = *(_QWORD *)(v57 + 40);
        }
        WebCore::MediaSource::scheduleEvent((WebCore::MediaSource *)v5, (WTF::StringImpl **)(v58 + 1904));
        v59 = *(_QWORD *)(v5 + 104);
        v60 = *(unsigned int *)(v59 + 68);
        if ((_DWORD)v60)
        {
          v61 = *(uint64_t **)(v59 + 56);
          v62 = 8 * v60;
          do
          {
            v63 = *v61++;
            *(_BYTE *)(v63 + 325) = 0;
            WebCore::SourceBuffer::updateBuffered((WebCore::SourceBuffer *)v63);
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v63 + 120) + 104))(*(_QWORD *)(v63 + 120), 0);
            v62 -= 8;
          }
          while (v62);
        }
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
      }
    }
  }
  if (a2 || a3 != 1)
  {
    if (a2 == 1 && a3 == 2)
    {
      v48 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v48 || (v49 = *(_QWORD *)(v48 + 96)) == 0)
        v49 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v50 = *(_QWORD *)(v49 + 40);
      if (!v50)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v49);
        v50 = *(_QWORD *)(v49 + 40);
      }
      WebCore::MediaSource::scheduleEvent((WebCore::MediaSource *)v5, (WTF::StringImpl **)(v50 + 1896));
      v51 = *(_QWORD *)(v5 + 104);
      v52 = *(unsigned int *)(v51 + 68);
      if ((_DWORD)v52)
      {
        v53 = *(uint64_t **)(v51 + 56);
        v54 = 8 * v52;
        do
        {
          v55 = *v53++;
          *(_BYTE *)(v55 + 325) = 1;
          WebCore::SourceBuffer::updateBuffered((WebCore::SourceBuffer *)v55);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v55 + 120) + 104))(*(_QWORD *)(v55 + 120), 1);
          v54 -= 8;
        }
        while (v54);
      }
      WebCore::MediaSource::updateBufferedIfNeeded((WTF *)v5, 1);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
    }
    if (!*(_BYTE *)(v5 + 224))
    {
LABEL_151:
      v71 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v71 || (v72 = *(_QWORD *)(v71 + 96)) == 0)
        v72 = WebCore::threadGlobalDataSlow((WebCore *)this);
      v73 = *(_QWORD *)(v72 + 40);
      if (!v73)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v72);
        v73 = *(_QWORD *)(v72 + 40);
      }
      WebCore::MediaSource::scheduleEvent((WebCore::MediaSource *)v5, (WTF::StringImpl **)(v73 + 1888));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
    }
    v64 = (uint64_t *)(v5 + 176);
    LOBYTE(v76[0]) = 7;
    buf = 0uLL;
    v87 = "onReadyStateChange";
    v88 = 0;
    v65 = *(_QWORD *)(v5 + 176);
    if (!v65)
    {
      v68 = 0;
      goto LABEL_145;
    }
    v66 = (unsigned __int8 *)(v65 + 48);
    if (__ldaxr((unsigned __int8 *)(v65 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v66))
    {
      goto LABEL_139;
    }
    this = MEMORY[0x19AEA534C](v65 + 48);
LABEL_139:
    v69 = *(_DWORD *)(v65 + 80);
    v70 = __ldxr(v66);
    if (v70 == 1)
    {
      if (!__stlxr(0, v66))
      {
LABEL_144:
        v68 = *v64;
        if (!v69)
        {
          this = (uint64_t)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*v64, (char *)v76, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_149:
          if (*(_BYTE *)(v5 + 224))
          {
            this = WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(v5 + 176));
            *(_BYTE *)(v5 + 224) = 0;
          }
          goto LABEL_151;
        }
LABEL_145:
        this = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)this);
        if (*(_BYTE *)this && *(unsigned __int8 *)(this + 16) >= 4u)
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(this, (WTF::Logger::LogSiteIdentifier *)&buf, v68);
        goto LABEL_149;
      }
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v66);
    goto LABEL_144;
  }
  return this;
}

WTF::StringImpl *WebCore::MediaSource::streamEndedWithError(WTF::StringImpl *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  void (*v46)(void);
  int v47;
  _BOOL4 v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int128 *p_buf;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  unsigned int *v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69[8];
  WTF::StringImpl *v70;
  char v71;
  __int128 v72;
  const char *v73;
  uint64_t v74;
  WTF::Logger *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 buf;
  const char *v80;
  WTF::StringImpl *v81;
  uint64_t v82;

  v2 = a2;
  v3 = (uint64_t)result;
  v82 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 31);
  v5 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)result + 32);
    *(_QWORD *)&buf = "MediaSource";
    *((_QWORD *)&buf + 1) = 12;
    v80 = "streamEndedWithError";
    v81 = v24;
    if (*(_BYTE *)(v4 + 12))
      result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
    goto LABEL_77;
  }
  v6 = *((_QWORD *)result + 32);
  *(_QWORD *)&v72 = "MediaSource";
  *((_QWORD *)&v72 + 1) = 12;
  v73 = "streamEndedWithError";
  v74 = v6;
  if (!*(_BYTE *)(v4 + 12))
    goto LABEL_77;
  result = (WTF::StringImpl *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
  v8 = WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::values;
  {
    WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_0::operator() const(void)::impl;
    unk_1EE2F4860 = &WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_1::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::values[v2];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (v77)
  {
    v10 = *((_DWORD *)v77 + 1);
    if (v9)
    {
LABEL_9:
      v11 = *(_DWORD *)(v9 + 4);
      goto LABEL_10;
    }
  }
  else
  {
    v10 = 0;
    if (v9)
      goto LABEL_9;
  }
  v11 = 0;
LABEL_10:
  if ((v11 | v10) < 0)
    goto LABEL_130;
  v12 = (v10 + v11);
  if (__OFADD__(v10, v11))
    goto LABEL_130;
  if (v77)
  {
    v13 = *((_DWORD *)v77 + 4);
    v14 = (v13 >> 2) & 1;
    if (!v9 || (v13 & 4) == 0)
    {
LABEL_16:
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v12, v14, (uint64_t)v77, v9, &v78);
      if (v78)
      {
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v7);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_20;
      }
LABEL_131:
      __break(0xC471u);
      return result;
    }
LABEL_15:
    v14 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    goto LABEL_16;
  }
  if (v9)
    goto LABEL_15;
  if (!(_DWORD)v12)
  {
    v65 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_127;
  }
  if ((v12 & 0x80000000) != 0
    || (result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v12 + 20)), (v65 = buf) == 0))
  {
LABEL_130:
    v78 = 0;
    goto LABEL_131;
  }
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v65 + 4) = v12;
  *(_QWORD *)(v65 + 8) = v65 + 20;
  *(_DWORD *)(v65 + 16) = 4;
LABEL_127:
  v78 = (WTF::StringImpl *)v65;
LABEL_20:
  v15 = v77;
  v77 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v7);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = qword_1ECE7CE80;
  v17 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v75 ? (char *)v75 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v75;
    v75 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (WebCore::LogMediaSource)
  {
    v20 = v2;
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v66 = v3;
          v67 = v5;
          v68 = v2;
          v25 = WTF::Logger::observers((WTF::Logger *)v17);
          v26 = *(unsigned int *)(v25 + 12);
          if ((_DWORD)v26)
          {
            v27 = *(uint64_t **)v25;
            v28 = *(_QWORD *)v25 + 8 * v26;
            do
            {
              v29 = *v27;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
              LODWORD(v80) = 0;
              {
                WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_1::operator() const(void)::impl += 2;
                *v8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_0::operator() const(void)::impl;
                v8[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaSource::EndOfStreamError)::$_1::operator() const(void)::impl;
              }
              v30 = (WTF::StringImpl *)v8[v20];
              if (v30)
                *(_DWORD *)v30 += 2;
              v81 = v30;
              v75 = 0;
              v76 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v76) = 2;
              v75 = v31;
              v32 = HIDWORD(v76);
              *((_DWORD *)v31 + 4 * HIDWORD(v76)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = (_DWORD)v80;
              v34 = v81;
              if (v81)
                *(_DWORD *)v81 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              HIDWORD(v76) = v32 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, &WebCore::LogMediaSource, 0, &v75);
              v35 = v75;
              if (HIDWORD(v76))
              {
                v36 = v8;
                v37 = 16 * HIDWORD(v76);
                v38 = (WTF::StringImpl **)((char *)v75 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v35 = v75;
                v8 = v36;
              }
              if (v35)
              {
                v75 = 0;
                LODWORD(v76) = 0;
                WTF::fastFree(v35, v18);
              }
              v40 = v81;
              v81 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v28);
          }
          v42 = __ldxr(v21);
          if (v42 == 1)
          {
            v5 = v67;
            v2 = v68;
            v3 = v66;
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
            v5 = v67;
            v2 = v68;
            v3 = v66;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v78;
  v78 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_77:
  if (*(_BYTE *)(v3 + 232))
    return result;
  result = *(WTF::StringImpl **)(v3 + 88);
  if (!result)
    return result;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 112))(result);
  if (!(_DWORD)result)
    return result;
  v43 = *(_QWORD *)(v3 + 88);
  if (*(_BYTE *)(v3 + 232))
  {
    v44 = 0;
    if (v43)
LABEL_83:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 120))(v43, 2);
  }
  else
  {
    if (!v43)
    {
      v44 = 0;
      goto LABEL_92;
    }
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 112))(v43);
    if (v45 == 2)
      goto LABEL_93;
    v44 = v45;
    v43 = *(_QWORD *)(v3 + 88);
    if (v43)
      goto LABEL_83;
  }
LABEL_92:
  WebCore::MediaSource::onReadyStateChange(v3, v44, 2);
LABEL_93:
  if (v5)
  {
    v46 = *(void (**)(void))(**(_QWORD **)(v3 + 88) + 96);
    if (v2)
    {
      v46();
      v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 88) + 80))(*(_QWORD *)(v3 + 88));
      v48 = v47 != 0;
      if (v47)
        v49 = 6;
      else
        v49 = 4;
    }
    else
    {
      v46();
      v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 88) + 80))(*(_QWORD *)(v3 + 88)) != 0;
      v49 = 5;
    }
    v59 = WTF::fastMalloc((WTF *)0x10);
    v60 = v59;
    *(_QWORD *)v59 = off_1E335D900;
    if (v48)
      v61 = 256;
    else
      v61 = 0;
    *(_WORD *)(v59 + 8) = v61 | v49;
    v62 = *(unsigned int **)(v3 + 96);
    if (v62)
    {
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
    }
    v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v64 = &off_1E335DB58;
    v64[1] = v62;
    v64[2] = v60;
    *(_QWORD *)&buf = v64;
    WTF::ensureOnMainThread();
    result = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_QWORD *)&buf = 0;
    DWORD2(buf) = 10000000;
    BYTE12(buf) = 1;
    v50 = *(_QWORD *)(v3 + 104);
    v51 = *(unsigned int *)(v50 + 68);
    if ((_DWORD)v51)
    {
      v52 = *(_QWORD *)(v50 + 56);
      v53 = 8 * v51;
      do
      {
        v54 = *(_QWORD *)(*(_QWORD *)v52 + 328);
        v55 = *(_DWORD *)(v54 + 20);
        if (v55)
        {
          v72 = *(_OWORD *)(*(_QWORD *)(v54 + 8) + 32 * (v55 - 1) + 16);
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v72, (const WTF::MediaTime *)&buf) == -1)
            p_buf = &buf;
          else
            p_buf = &v72;
          v57 = *(_QWORD *)((char *)p_buf + 5);
          *(_QWORD *)&buf = *(_QWORD *)p_buf;
          *(_QWORD *)((char *)&buf + 5) = v57;
        }
        v52 += 8;
        v53 -= 8;
      }
      while (v53);
    }
    WebCore::MediaSource::setDurationInternal((WebCore::MediaSource *)v3, (const WTF::MediaTime *)&buf, (uint64_t)v69);
    if (v71 && v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v58);
      else
        *(_DWORD *)v70 -= 2;
    }
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 88) + 96))(*(_QWORD *)(v3 + 88), 0);
  }
  return result;
}

WebCore::MediaSource *WebCore::MediaSource::addSourceBuffer@<X0>(WebCore::MediaSource *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WebCore::MediaSource *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;
  int *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  void *v27;
  char v28;
  uint64_t v29;
  double v30;
  double v31;
  float v32;
  WTF::StringImpl *v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  _BOOL8 v57;
  int v58;
  void *v59;
  char v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  WebCore::ContextDestructionObserver *v68;
  WTF::StringImpl *v69;
  const WebCore::ContentType *v70;
  double v71;
  double v72;
  float v73;
  int v74;
  _DWORD *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t Timestamps;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  int v84;
  int v85;
  _DWORD *v86;
  int v87;
  WebCore::Document *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  unsigned int v91;
  WTF::StringImpl *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  WTF::StringImpl *v100;

  v7 = this;
  v9 = *((_QWORD *)this + 31);
  v10 = *((_QWORD *)this + 32);
  v96 = (WTF::StringImpl *)"MediaSource";
  v97 = 12;
  v98 = "addSourceBuffer";
  v99 = v10;
  if (*(_BYTE *)(v9 + 12))
  {
    v11 = WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u;
    if (v11)
      this = (WebCore::MediaSource *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::String>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)&v96, (uint64_t *)a2);
  }
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v12 = 33;
LABEL_10:
    *(_BYTE *)a3 = v12;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  v13 = *((_QWORD *)v7 + 1);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0)
  {
    v12 = 31;
    goto LABEL_10;
  }
  v94 = 0;
  v95 = 0;
  v88 = (WebCore::Document *)(v14 - 288);
  if (*(_BYTE *)(v14 + 178))
    v15 = 0;
  else
    v15 = (WebCore::Node *)(v14 - 288);
  if (!*(_BYTE *)(v14 + 178))
  {
    v16 = (int *)(v14 - 264);
    v17 = *(_DWORD *)(v14 - 264) + 2;
    *(_DWORD *)(v14 - 264) = v17;
    v18 = *(_QWORD *)(v14 + 392);
    v19 = *(unsigned int *)(v18 + 92);
    if ((_DWORD)v19)
    {
      v20 = v14;
      if (v19 <= 0x10)
        v21 = 16;
      else
        v21 = *(unsigned int *)(v18 + 92);
      if (v21 >> 28)
        goto LABEL_168;
      v22 = *(_QWORD *)(v18 + 80);
      v23 = WTF::fastMalloc((WTF *)(16 * v21));
      LODWORD(v95) = v21;
      v94 = v23;
      v24 = v22 + 16 * v19;
      v14 = v20;
      do
      {
        v25 = *(_DWORD **)v22;
        if (*(_QWORD *)v22)
          *v25 += 2;
        *(_QWORD *)v23 = v25;
        *(_BYTE *)(v23 + 8) = *(_BYTE *)(v22 + 8);
        v22 += 16;
        v23 += 16;
      }
      while (v22 != v24);
      HIDWORD(v95) = v19;
      v17 = *v16;
    }
    v26 = v17 - 2;
    if (v26)
    {
      *v16 = v26;
    }
    else if ((*((_WORD *)v15 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v15, a2);
    }
  }
  if (WebCore::MediaSource::isTypeSupported(v14 - 96, (WTF::StringImpl **)a2, (uint64_t)&v94, a4, a5, a6))
  {
    if (!*((_BYTE *)v7 + 232))
    {
      v29 = *((_QWORD *)v7 + 11);
      if (v29)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 112))(v29) == 1)
        {
          v33 = *(WTF::StringImpl **)a2;
          if (*(_QWORD *)a2)
            *(_DWORD *)v33 += 2;
          v92 = v33;
          v93 = 0;
          v34 = *(_BYTE *)(v14 + 178);
          if (v34)
            goto LABEL_48;
          *(_DWORD *)(v14 - 264) += 2;
          v35 = *(_QWORD *)(v14 + 400);
          if (!v35)
            v35 = WebCore::Document::ensureQuirks(v88);
          v36 = *(_QWORD **)v35;
          if (*(_QWORD *)v35)
          {
            v36 = (_QWORD *)v36[1];
            if (v36)
            {
              v37 = v36[85];
              if (*(_BYTE *)(v37 + 243))
              {
                if (!*(_BYTE *)(v37 + 242))
                  goto LABEL_48;
              }
              else if ((*(_QWORD *)(v37 + 688) & 0x80000) == 0)
              {
LABEL_48:
                LOBYTE(v36) = 0;
                goto LABEL_60;
              }
              if (*(_BYTE *)(v35 + 32))
              {
                LOBYTE(v36) = *(_BYTE *)(v35 + 31);
                if (!(_BYTE)v36)
                  goto LABEL_60;
              }
              else
              {
                v38 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v36 + 92));
                v40 = WTF::operator==(v38, v39, "www.youtube.com", 16);
                *(_WORD *)(v35 + 31) = v40 | 0x100;
                if (!v40)
                  goto LABEL_48;
              }
              WebCore::addVP9FullRangeVideoFlagToContentType((WebCore *)&v96, (const WebCore::ContentType *)&v92, v30, v31, v32);
              v42 = v96;
              v96 = 0;
              v92 = v42;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v41);
                else
                  *(_DWORD *)v33 -= 2;
              }
              LOBYTE(v36) = v97;
              v93 = v97;
              v33 = v42;
            }
          }
LABEL_60:
          if (v33)
            *(_DWORD *)v33 += 2;
          v96 = v33;
          LOBYTE(v97) = (_BYTE)v36;
          v43 = *((_QWORD *)v7 + 1);
          if (!v43 || (v44 = *(_QWORD *)(v43 + 8)) == 0)
          {
            v45 = 0;
            v47 = 0;
            v51 = 1;
            goto LABEL_83;
          }
          v45 = v44 - 96;
          v46 = *(unsigned __int8 *)(v44 + 178);
          if (*(_BYTE *)(v44 + 178))
          {
            if (v46 == 1)
            {
              v84 = *(_DWORD *)(v44 + 216);
              *(_DWORD *)(v44 + 216) = v84 + 2;
              v11 = __CFADD__(v84, 1);
              v85 = v84 + 1;
              if (!v11)
              {
                v51 = 0;
                v47 = 0;
                *(_DWORD *)(v44 + 216) = v85;
                goto LABEL_83;
              }
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v44 - 96);
            }
            else if (v46 == 2)
            {
              v87 = *(_DWORD *)(v44 + 216);
              v86 = (_DWORD *)(v44 + 216);
              *v86 = v87 + 2;
              WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(v86);
            }
            v51 = 0;
            v47 = 0;
          }
          else
          {
            *(_DWORD *)(v44 - 264) += 4;
            v47 = v44 - 288;
            v48 = *(_BYTE **)(v44 + 400);
            if (!v48)
              v48 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v44 - 288));
            if (!*(_QWORD *)v48)
              goto LABEL_71;
            v49 = *(_QWORD *)(*(_QWORD *)v48 + 8);
            if (!v49)
              goto LABEL_71;
            v50 = *(_QWORD *)(v49 + 680);
            if (*(_BYTE *)(v50 + 243))
            {
              if (!*(_BYTE *)(v50 + 242))
                goto LABEL_71;
            }
            else if ((*(_QWORD *)(v50 + 688) & 0x80000) == 0)
            {
LABEL_71:
              v51 = 0;
              goto LABEL_83;
            }
            if (v48[32])
            {
              if (!v48[31])
                goto LABEL_71;
            }
            else
            {
              v52 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v49 + 736));
              v54 = WTF::operator==(v52, v53, "www.youtube.com", 16);
              *(_WORD *)(v48 + 31) = v54 | 0x100;
              if (!v54)
                goto LABEL_71;
            }
            WebCore::addVP9FullRangeVideoFlagToContentType((WebCore *)&v89, (const WebCore::ContentType *)&v92, v30, v31, v32);
            v96 = v89;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v55);
              else
                *(_DWORD *)v33 -= 2;
            }
            v51 = 0;
            LOBYTE(v97) = v90;
          }
LABEL_83:
          v100 = 0;
          v56 = *((_QWORD *)v7 + 11);
          {
            v57 = (_BYTE)qword_1ECE90A60 != 0;
          }
          else
          {
            v57 = 0;
            WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
            *(_OWORD *)&byte_1ECE90A50 = 0u;
            qword_1ECE90A60 = 0;
            LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
            *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
            *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
            byte_1ECE90A56 = 1;
            *(_DWORD *)&algn_1ECE90A57 = 0;
            unk_1ECE90A5B = 0;
            byte_1ECE90A5D = 1;
            byte_1ECE90A5F = 1;
          }
          v58 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, _BOOL8, WTF::StringImpl **))(*(_QWORD *)v56 + 32))(v56, &v96, v57, &v100);
          if (v58 != 2)
          {
            if (v58 == 1)
            {
              v60 = 6;
LABEL_91:
              LOBYTE(v89) = v60;
              v90 = 0;
              v91 = 1;
              v61 = v100;
              v100 = 0;
              if (v61)
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((unsigned __int8 **)v61 + 1));
              goto LABEL_93;
            }
            if (!v58)
            {
              v89 = v100;
              v91 = 0;
LABEL_93:
              if (v47)
              {
                if (*(_DWORD *)(v47 + 24) == 2)
                {
                  if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v47, v59);
                }
                else
                {
                  *(_DWORD *)(v47 + 24) -= 2;
                }
              }
              if ((v51 & 1) == 0)
              {
                v62 = *(unsigned __int8 *)(v45 + 274);
                if (*(_BYTE *)(v45 + 274))
                {
                  if (v62 == 1)
                  {
                    if (*(_DWORD *)(v45 + 312) == 1)
                      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
                    else
                      --*(_DWORD *)(v45 + 312);
                  }
                  else if (v62 == 2)
                  {
                    WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v45 + 312));
                  }
                }
                else if (*(_DWORD *)(v45 - 168) == 2)
                {
                  if ((*(_WORD *)(v45 - 162) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)(v45 - 192), v59);
                }
                else
                {
                  *(_DWORD *)(v45 - 168) -= 2;
                }
              }
              v63 = v96;
              v96 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v59);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v64 = v91;
              if (!v91)
              {
                if ((*(unsigned int (**)(WebCore::MediaSource *))(*(_QWORD *)v7 + 128))(v7))
                {
                  v66 = v89;
                  v89 = 0;
                  v96 = v66;
                  if (((*(uint64_t (**)(WebCore::MediaSource *))(*(_QWORD *)v7 + 128))(v7) & 1) == 0)
                    goto LABEL_168;
                  v67 = bmalloc::api::isoAllocate();
                  v68 = WebCore::SourceBuffer::SourceBuffer((WebCore::ContextDestructionObserver *)v67, (uint64_t *)&v96, (uint64_t)v7);
                  *(_QWORD *)v68 = &off_1E335D030;
                  *((_QWORD *)v68 + 5) = &unk_1E335D128;
                  *((_QWORD *)v68 + 8) = &unk_1E335D1A0;
                  *((_QWORD *)v68 + 10) = &unk_1E335D1F0;
                  *((_QWORD *)v68 + 12) = &unk_1E335D240;
                  *((_QWORD *)v68 + 14) = &unk_1E335D2B0;
                }
                else
                {
                  v69 = v89;
                  v89 = 0;
                  v96 = v69;
                  v67 = bmalloc::api::isoAllocate();
                  v68 = WebCore::SourceBuffer::SourceBuffer((WebCore::ContextDestructionObserver *)v67, (uint64_t *)&v96, (uint64_t)v7);
                }
                WebCore::ActiveDOMObject::suspendIfNeeded(v68);
                v75 = (_DWORD *)(v67 + 24);
                v74 = *(_DWORD *)(v67 + 24);
                *(_DWORD *)(v67 + 24) = v74 + 1;
                if (v74)
                  *v75 = v74;
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
                v76 = v96;
                v96 = 0;
                if (v76)
                  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((unsigned __int8 **)v76 + 1));
                v77 = *((_QWORD *)v7 + 31);
                v78 = *((_QWORD *)v7 + 32);
                v96 = (WTF::StringImpl *)"MediaSource";
                v97 = 12;
                v98 = "addSourceBuffer";
                v99 = v78;
                if (*(_BYTE *)(v77 + 12) && WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
                  WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogMediaSource, 4u, (WTF::Logger::LogSiteIdentifier *)&v96, "created SourceBuffer");
                Timestamps = WebCore::MediaSource::contentTypeShouldGenerateTimestamps((WebCore::MediaSource *)&v92, v70, v71, v72, v73);
                *(_BYTE *)(v67 + 323) = Timestamps;
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v67 + 120) + 176))(*(_QWORD *)(v67 + 120), Timestamps);
                if ((Timestamps & 1) != 0 || !*(_BYTE *)(v67 + 323))
                {
                  v80 = *(_QWORD *)(v67 + 136);
                  if (v80)
                  {
                    if (!*(_BYTE *)(v67 + 320))
                    {
                      if (!*(_BYTE *)(v80 + 232))
                      {
                        v81 = *(_QWORD *)(v80 + 88);
                        if (v81)
                        {
                          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 112))(v81) == 2)
                            WebCore::MediaSource::openIfInEndedState(*(_QWORD *)(v67 + 136));
                        }
                      }
                      if (*(_DWORD *)(v67 + 296) != 2)
                      {
                        if ((Timestamps & 1) != 0)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)(v67 + 120) + 168))(*(_QWORD *)(v67 + 120));
                          *(_DWORD *)(v67 + 144) = 1;
                        }
                        else
                        {
                          *(_DWORD *)(v67 + 144) = Timestamps;
                        }
                        (*(void (**)(void))(**(_QWORD **)(v67 + 120) + 112))();
                      }
                    }
                  }
                }
                v82 = *((_QWORD *)v7 + 13);
                ++*v75;
                v96 = (WTF::StringImpl *)v67;
                WebCore::SourceBufferList::add(v82, (uint64_t *)&v96);
                if (v96)
                {
                  if (*((_DWORD *)v96 + 6) == 1)
                    (*(void (**)(void))(*(_QWORD *)v96 + 16))();
                  else
                    --*((_DWORD *)v96 + 6);
                }
                WebCore::MediaSource::regenerateActiveSourceBuffers(v7);
                *(_QWORD *)a3 = v67;
                goto LABEL_141;
              }
              if (v91 == 1)
              {
                v65 = v90;
                v90 = 0;
                *(_BYTE *)a3 = (_BYTE)v89;
                *(_QWORD *)(a3 + 8) = v65;
LABEL_141:
                *(_DWORD *)(a3 + 16) = v64;
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E335D5F0[v64])(&v96, &v89);
                if (!v34)
                {
                  if (*(_DWORD *)(v14 - 264) == 2)
                  {
                    if ((*(_WORD *)(v14 - 258) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v88, v27);
                  }
                  else
                  {
                    *(_DWORD *)(v14 - 264) -= 2;
                  }
                }
                v83 = v92;
                v92 = 0;
                if (v83)
                {
                  if (*(_DWORD *)v83 == 2)
                    WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v27);
                  else
                    *(_DWORD *)v83 -= 2;
                }
                return (WebCore::MediaSource *)WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, (WTF::StringImpl *)v27);
              }
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_168:
              __break(0xC471u);
              JUMPOUT(0x1954424E0);
            }
          }
          v60 = 18;
          goto LABEL_91;
        }
      }
    }
    v28 = 8;
  }
  else
  {
    v28 = 6;
  }
  *(_BYTE *)a3 = v28;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
  return (WebCore::MediaSource *)WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, (WTF::StringImpl *)v27);
}

BOOL WebCore::MediaSource::isTypeSupported(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, double a4, double a5, float a6)
{
  WTF::StringImpl *v6;
  int v9;
  WebCore::Node *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  float v21;
  WTF::StringImpl *v22;
  double v23;
  double v24;
  float v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v32;
  WTF::StringImpl *v33;
  double v34;
  double v35;
  float v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  WebCore::Node *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  WTF *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unsigned __int8 v75;
  WTF::StringImpl *v76;
  char v77;
  uint64_t v78[5];
  __int16 v79;
  char v80;
  WTF *v81;
  unint64_t v82;
  unsigned int v83[4];
  char v84;
  char v85;
  char v86;
  WTF *v87;
  int v88;
  int v89;
  char v90;
  WTF *v91;
  int v92;
  int v93;
  char v94;
  WTF *v95;
  int v96;
  int v97;
  char v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  char v102;

  v6 = *a2;
  if (!*a2 || !*((_DWORD *)v6 + 1))
    return 0;
  *(_DWORD *)v6 += 2;
  v101 = v6;
  v102 = 0;
  v9 = *(unsigned __int8 *)(a1 + 274);
  v10 = (WebCore::Node *)(a1 - 192);
  if (!*(_BYTE *)(a1 + 274))
  {
    *(_DWORD *)(a1 - 168) += 2;
    v11 = *(_BYTE **)(a1 + 496);
    if (!v11)
      v11 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(a1 - 192));
    if (*(_QWORD *)v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 680);
        if (*(_BYTE *)(v13 + 243))
        {
          if (!*(_BYTE *)(v13 + 242))
            goto LABEL_19;
        }
        else if ((*(_QWORD *)(v13 + 688) & 0x80000) == 0)
        {
          goto LABEL_19;
        }
        if (v11[32])
        {
          if (!v11[31])
            goto LABEL_19;
        }
        else
        {
          v15 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v12 + 736));
          v17 = WTF::operator==(v15, v16, "www.youtube.com", 16);
          *(_WORD *)(v11 + 31) = v17 | 0x100;
          if (!v17)
            goto LABEL_19;
        }
        WebCore::addVP9FullRangeVideoFlagToContentType((WebCore *)&v76, (const WebCore::ContentType *)&v101, a4, a5, a6);
        v19 = v76;
        v76 = 0;
        v20 = v101;
        v101 = v19;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v18);
          else
            *(_DWORD *)v20 -= 2;
        }
        v102 = v77;
      }
    }
  }
LABEL_19:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v99 = v76;
  WebCore::ContentType::parameter((uint64_t *)&v101, (const WTF::String *)&v99, &v100, v21);
  v26 = v99;
  v99 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v22);
    else
      *(_DWORD *)v26 -= 2;
  }
  WebCore::ContentType::containerType((WebCore::ContentType *)&v101, v23, v24, v25);
  v28 = v76;
  if (!v76)
    goto LABEL_23;
  v32 = *((_DWORD *)v76 + 1);
  v76 = 0;
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    if (v32)
      goto LABEL_36;
LABEL_23:
    v14 = 0;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v28, v27);
  if (!v32)
    goto LABEL_23;
LABEL_36:
  v76 = 0;
  v77 = 0;
  v78[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v78);
  v79 = 0;
  v80 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  LOBYTE(v87) = 0;
  v90 = 0;
  LOBYTE(v91) = 0;
  v94 = 0;
  LOBYTE(v95) = 0;
  v98 = 0;
  v81 = 0;
  v82 = 0;
  LOBYTE(v83[0]) = 0;
  v37 = v101;
  if (v101)
    *(_DWORD *)v101 += 2;
  v38 = v76;
  v76 = v37;
  if (!v38)
    goto LABEL_41;
  if (*(_DWORD *)v38 != 2)
  {
    *(_DWORD *)v38 -= 2;
LABEL_41:
    v77 = v102;
    LOBYTE(v79) = 1;
    goto LABEL_42;
  }
  WTF::StringImpl::destroy(v38, v33);
  v72 = v81;
  v77 = v102;
  LOBYTE(v79) = 1;
  if (HIDWORD(v82))
  {
    v73 = 16 * HIDWORD(v82);
    do
    {
      v74 = *(WTF::StringImpl **)v72;
      *(_QWORD *)v72 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v71);
        else
          *(_DWORD *)v74 -= 2;
      }
      v72 = (WTF *)((char *)v72 + 16);
      v73 -= 16;
    }
    while (v73);
    v72 = v81;
  }
  if (v72)
  {
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree(v72, v71);
  }
LABEL_42:
  v81 = *(WTF **)a3;
  v39 = *(_DWORD *)(a3 + 8);
  v40 = *(_DWORD *)(a3 + 12);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v82 = __PAIR64__(v40, v39);
  if (*(_BYTE *)(a1 + 274))
    v41 = 0;
  else
    v41 = v10;
  if (*(_BYTE *)(a1 + 274))
    goto LABEL_99;
  *(_DWORD *)(a1 - 168) += 2;
  if (!WebCore::contentTypeMeetsContainerAndCodecTypeRequirements((WebCore::ContentType *)&v101, *(_QWORD *)(a1 + 488) + 96, *(_QWORD *)(a1 + 488) + 120, v34, v35, v36))
  {
    if (*(_DWORD *)(a1 - 168) == 2)
    {
      if ((*(_WORD *)(a1 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v42);
      v14 = 0;
    }
    else
    {
      v14 = 0;
      *(_DWORD *)(a1 - 168) -= 2;
    }
    goto LABEL_104;
  }
  std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(v83, (unsigned int *)(*(_QWORD *)(a1 + 488) + 96));
  v44 = *(_QWORD *)(a1 + 488);
  if (v90 == *(_BYTE *)(v44 + 160))
  {
    if (v90)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v87, (WTF *)(v44 + 144));
  }
  else if (v90)
  {
    v45 = v87;
    if (v87)
    {
      v87 = 0;
      v88 = 0;
      WTF::fastFree(v45, v43);
    }
    v90 = 0;
  }
  else
  {
    v46 = *(unsigned int *)(v44 + 156);
    v87 = 0;
    v88 = 0;
    v89 = v46;
    if ((_DWORD)v46)
    {
      if (v46 >> 30)
        goto LABEL_127;
      v47 = (WTF *)WTF::fastMalloc((WTF *)(4 * v46));
      v88 = v46;
      v87 = v47;
      v48 = *(unsigned int *)(v44 + 156);
      if ((_DWORD)v48)
      {
        v49 = *(int **)(v44 + 144);
        v50 = 4 * v48;
        do
        {
          v51 = *v49++;
          *(_DWORD *)v47 = v51;
          v47 = (WTF *)((char *)v47 + 4);
          v50 -= 4;
        }
        while (v50);
      }
    }
    v90 = 1;
  }
  v52 = *(_QWORD *)(a1 + 488);
  if (v94 == *(_BYTE *)(v52 + 184))
  {
    if (v94)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v91, (WTF *)(v52 + 168));
  }
  else if (v94)
  {
    v53 = v91;
    if (v91)
    {
      v91 = 0;
      v92 = 0;
      WTF::fastFree(v53, v43);
    }
    v94 = 0;
  }
  else
  {
    v54 = *(unsigned int *)(v52 + 180);
    v91 = 0;
    v92 = 0;
    v93 = v54;
    if ((_DWORD)v54)
    {
      if (v54 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x195442C0CLL);
      }
      v55 = (WTF *)WTF::fastMalloc((WTF *)(4 * v54));
      v92 = v54;
      v91 = v55;
      v56 = *(unsigned int *)(v52 + 180);
      if ((_DWORD)v56)
      {
        v57 = *(int **)(v52 + 168);
        v58 = 4 * v56;
        do
        {
          v59 = *v57++;
          *(_DWORD *)v55 = v59;
          v55 = (WTF *)((char *)v55 + 4);
          v58 -= 4;
        }
        while (v58);
      }
    }
    v94 = 1;
  }
  v60 = *(_QWORD *)(a1 + 488);
  if (v98 == *(_BYTE *)(v60 + 208))
  {
    if (v98)
      WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)&v95, (WTF *)(v60 + 192));
    goto LABEL_97;
  }
  if (v98)
  {
    v61 = v95;
    if (v95)
    {
      v95 = 0;
      v96 = 0;
      WTF::fastFree(v61, v43);
    }
    v98 = 0;
    goto LABEL_97;
  }
  v62 = *(unsigned int *)(v60 + 204);
  v95 = 0;
  v96 = 0;
  v97 = v62;
  if ((_DWORD)v62)
  {
    if (!(v62 >> 30))
    {
      v63 = (WTF *)WTF::fastMalloc((WTF *)(4 * v62));
      v96 = v62;
      v95 = v63;
      v64 = *(unsigned int *)(v60 + 204);
      if ((_DWORD)v64)
      {
        v65 = *(int **)(v60 + 192);
        v66 = 4 * v64;
        do
        {
          v67 = *v65++;
          *(_DWORD *)v63 = v67;
          v63 = (WTF *)((char *)v63 + 4);
          v66 -= 4;
        }
        while (v66);
      }
      goto LABEL_96;
    }
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x195442C04);
  }
LABEL_96:
  v98 = 1;
LABEL_97:
  if (*(_DWORD *)(a1 - 168) == 2)
  {
    if ((*((_WORD *)v41 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v41, v43);
  }
  else
  {
    *(_DWORD *)(a1 - 168) -= 2;
  }
LABEL_99:
  v75 = 0;
  v68 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v68 = off_1E335DA90;
  *((_QWORD *)v68 + 1) = &v75;
  *((_QWORD *)v68 + 2) = &v76;
  v99 = v68;
  WTF::callOnMainThreadAndWait();
  v69 = v99;
  v99 = 0;
  if (v69)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v69 + 8))(v69);
  if (v100)
  {
    v70 = v75;
    v14 = v75 == 1;
    if (*((_DWORD *)v100 + 1))
      goto LABEL_104;
  }
  else
  {
    v70 = v75;
  }
  v14 = v70 != 0;
LABEL_104:
  WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v76, v42);
LABEL_24:
  v29 = v100;
  v100 = 0;
  if (!v29)
    goto LABEL_27;
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
LABEL_27:
    if (!v9)
      goto LABEL_28;
    goto LABEL_30;
  }
  WTF::StringImpl::destroy(v29, v27);
  if (!v9)
  {
LABEL_28:
    if (*(_DWORD *)(a1 - 168) == 2)
    {
      if ((*(_WORD *)(a1 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v27);
    }
    else
    {
      *(_DWORD *)(a1 - 168) -= 2;
    }
  }
LABEL_30:
  v30 = v101;
  v101 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v27);
    else
      *(_DWORD *)v30 -= 2;
  }
  return v14;
}

uint64_t WebCore::addVP9FullRangeVideoFlagToContentType(WebCore *this, const WebCore::ContentType *a2, double a3, double a4, float a5)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  char v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int16x8_t *v34;
  int16x8_t v35;
  int8x16_t v36;
  int16x8_t *v37;
  __int8 *v38;
  uint64_t v39;
  int16x8_t v40;
  _DWORD *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  unsigned int v52;

  result = (uint64_t)WebCore::ContentType::codecs(a2, (uint64_t)&v50, a5);
  v7 = v50;
  if (!v52)
    goto LABEL_88;
  v8 = (WTF *)((char *)v50 + 8 * v52);
  v48 = v8;
  while (1)
  {
    v9 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
      break;
LABEL_81:
    v7 = (WTF *)((char *)v7 + 8);
    if (v7 == v8)
    {
      v7 = v50;
      if (v52)
      {
        v42 = 8 * v52;
        do
        {
          result = *(_QWORD *)v7;
          *(_QWORD *)v7 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *(_DWORD *)result -= 2;
          }
          v7 = (WTF *)((char *)v7 + 8);
          v42 -= 8;
        }
        while (v42);
        v7 = v50;
        if (!v50)
          goto LABEL_89;
        goto LABEL_101;
      }
LABEL_88:
      if (!v7)
      {
LABEL_89:
        v41 = *(_DWORD **)a2;
        if (*(_QWORD *)a2)
          *v41 += 2;
        *(_QWORD *)this = v41;
        *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
        return result;
      }
LABEL_101:
      v50 = 0;
      v51 = 0;
      result = WTF::fastFree(v7, v6);
      goto LABEL_89;
    }
  }
  *(_DWORD *)v9 += 2;
  result = WTF::StringImpl::startsWith();
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4);
    if ((*(_DWORD *)(v9 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *(unsigned int *)(v9 + 4);
        v14 = *(_QWORD *)(v9 + 8);
        while (1)
        {
          if (v13 >= 0x10)
            v15 = 16;
          else
            v15 = v13;
          v16 = v11 - v12;
          if ((unint64_t)(v11 - v12) >= 0x10)
            v17 = 16;
          else
            v17 = v11 - v12;
          if (v17)
          {
            result = v14;
            while (*(_BYTE *)result != 46)
            {
              ++result;
              if (!--v15)
                goto LABEL_18;
            }
          }
          else
          {
LABEL_18:
            if (v16 < 0x11 || (result = (uint64_t)memchr((void *)(v10 + v12 + v17), 46, v16 - v17)) == 0)
            {
LABEL_23:
              LODWORD(v18) = v12;
              goto LABEL_24;
            }
          }
          if (result - v10 == -1)
            goto LABEL_23;
          ++v12;
          ++v14;
          --v13;
          if (v12 == v11)
            goto LABEL_22;
        }
      }
      goto LABEL_77;
    }
    if ((_DWORD)v11)
    {
      v18 = 0;
      v32 = v10 + 2 * v11;
      v33 = 2 * v11;
      do
      {
        if (v18 == v11 + 1)
          goto LABEL_109;
        v34 = (int16x8_t *)(v10 + 2 * v18);
        if (v32 - (unint64_t)v34 <= 0x3E)
        {
          v39 = v33;
          while (v34->i16[0] != 46)
          {
            v34 = (int16x8_t *)((char *)v34 + 2);
            v39 -= 2;
            if (!v39)
              goto LABEL_24;
          }
        }
        else
        {
          if ((unint64_t)&v34->u64[1] + 6 >= v32)
          {
            v37 = (int16x8_t *)(v10 + 2 * v18);
LABEL_70:
            if ((unint64_t)v37 >= v32)
              goto LABEL_24;
            v40.i64[0] = 0x2E002E002E002ELL;
            v40.i64[1] = 0x2E002E002E002ELL;
            v36 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v32 - 16), v40);
            v40.i16[0] = vmaxvq_u16((uint16x8_t)v36);
            v34 = (int16x8_t *)(v32 - 16);
            if (!v40.i32[0])
              goto LABEL_24;
          }
          else
          {
            while (1)
            {
              v35.i64[0] = 0x2E002E002E002ELL;
              v35.i64[1] = 0x2E002E002E002ELL;
              v36 = (int8x16_t)vceqq_s16(*v34, v35);
              v35.i16[0] = vmaxvq_u16((uint16x8_t)v36);
              if (v35.i32[0])
                break;
              v37 = v34 + 1;
              v38 = &v34[1].i8[14];
              ++v34;
              if ((unint64_t)v38 >= v32)
                goto LABEL_70;
            }
          }
          v34 = (int16x8_t *)((char *)v34
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v36)));
        }
        if (v34 == (int16x8_t *)v32 || (int16x8_t *)((char *)v34 - v10) == (int16x8_t *)-2)
          goto LABEL_24;
        ++v18;
        v33 -= 2;
      }
      while (v18 != v11);
LABEL_22:
      LODWORD(v18) = v11;
LABEL_24:
      if ((_DWORD)v18 != 7 || (v19 = *(_QWORD *)a2) == 0)
      {
        v30 = 3;
LABEL_48:
        v8 = v48;
        goto LABEL_78;
      }
      *(_DWORD *)v19 += 2;
      result = WTF::StringImpl::find();
      if (result == -1)
      {
        v30 = 3;
LABEL_46:
        if (*(_DWORD *)v19 == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)v19, v6);
        else
          *(_DWORD *)v19 -= 2;
        goto LABEL_48;
      }
      v20 = *(char **)(v19 + 8);
      v21 = *(unsigned int *)(v19 + 4);
      v22 = (*(_DWORD *)(v9 + 4) + result);
      v23 = v21 | ((unint64_t)((*(_DWORD *)(v19 + 16) & 4) != 0) << 32);
      if ((_DWORD)v21)
      {
        v24 = *(char **)(v19 + 8);
        v25 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) & 4) != 0) << 32);
        if (v21 > v22)
        {
          if ((*(_DWORD *)(v19 + 16) & 4) != 0)
            v25 = v22 | 0x100000000;
          else
            v25 = (*(_DWORD *)(v9 + 4) + result);
          v24 = *(char **)(v19 + 8);
        }
      }
      else
      {
        v25 = 0x100000000;
        v24 = "";
      }
      if (v21 <= v22)
      {
        LODWORD(v23) = 0;
        v26 = 0x100000000;
        v20 = "";
LABEL_36:
        v27 = __OFADD__((_DWORD)v23, 3);
        v28 = v23 + 3;
        v29 = v27;
        if ((v25 & 0x80000000) == 0 && (v29 & 1) == 0)
        {
          result = (v25 + v28);
          if (!__OFADD__((_DWORD)v25, v28))
          {
            result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(result, HIDWORD(v25) & HIDWORD(v26), v24, v25, ".00", 0x100000003, v20, v26, &v49);
            if (v49)
            {
              *(_QWORD *)this = v49;
              *((_BYTE *)this + 8) = 0;
              v30 = 1;
              goto LABEL_46;
            }
LABEL_111:
            __break(0xC471u);
            return result;
          }
        }
LABEL_110:
        v49 = 0;
        goto LABEL_111;
      }
      if (!(_DWORD)v22)
      {
LABEL_35:
        v26 = v23;
        if ((v23 & 0x80000000) != 0)
          goto LABEL_110;
        goto LABEL_36;
      }
      v23 = (v21 - v22);
      v31 = v21 - v22;
      if ((*(_DWORD *)(v19 + 16) & 4) != 0)
      {
        if (v31 >= v23)
        {
          v20 += v22;
          v23 |= 0x100000000uLL;
          goto LABEL_35;
        }
      }
      else if (v31 >= v23)
      {
        v20 += 2 * v22;
        goto LABEL_35;
      }
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
  }
LABEL_77:
  v30 = 3;
LABEL_78:
  if (*(_DWORD *)v9 == 2)
    result = WTF::StringImpl::destroy((WTF::StringImpl *)v9, v6);
  else
    *(_DWORD *)v9 -= 2;
  if (v30 == 3)
    goto LABEL_81;
  if (v52)
  {
    v43 = v50;
    v44 = 8 * v52;
    do
    {
      v45 = *(WTF::StringImpl **)v43;
      *(_QWORD *)v43 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v6);
        else
          *(_DWORD *)v45 -= 2;
      }
      v43 = (WTF *)((char *)v43 + 8);
      v44 -= 8;
    }
    while (v44);
  }
  result = (uint64_t)v50;
  if (v50)
  {
    v50 = 0;
    v51 = 0;
    return WTF::fastFree((WTF *)result, v6);
  }
  return result;
}

WTF *WebCore::MediaSource::regenerateActiveSourceBuffers(WebCore::MediaSource *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *result;
  WTF *v26;
  uint64_t v27;
  _QWORD *v28;

  v26 = 0;
  v27 = 0;
  v2 = *((_QWORD *)this + 13);
  v3 = *(unsigned int *)(v2 + 68);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 56);
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      if (*(_BYTE *)(*(_QWORD *)v6 + 322))
      {
        if (v5 == (_DWORD)v27)
        {
          v9 = *(_QWORD *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v26, v5 + 1, v6);
          if (v9)
            ++*(_DWORD *)(v9 + 24);
          v5 = HIDWORD(v27);
          v4 = v26;
          *((_QWORD *)v26 + HIDWORD(v27)) = v9;
        }
        else
        {
          ++*(_DWORD *)(v8 + 24);
          *((_QWORD *)v4 + v5) = v8;
        }
        HIDWORD(v27) = ++v5;
      }
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  WebCore::SourceBufferList::swap(*((WebCore **)this + 14), (uint64_t)&v26);
  v10 = *((_QWORD *)this + 14);
  v11 = *(unsigned int *)(v10 + 68);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)(v10 + 56);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      if (!*(_BYTE *)(*v12 + 300))
      {
        *(_BYTE *)(v14 + 300) = 1;
        v15 = *(WTF **)(v14 + 136);
        if (v15)
          WebCore::MediaSource::updateBufferedIfNeeded(v15, 0);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = off_1E335DB30;
  v17 = (unsigned int *)*((_QWORD *)this + 12);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E335DB58;
  v19[1] = v17;
  v19[2] = v16;
  v28 = v19;
  WTF::ensureOnMainThread();
  v20 = v28;
  v28 = 0;
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  WebCore::MediaSource::updateBufferedIfNeeded(this, 0);
  if (HIDWORD(v27))
  {
    v22 = v26;
    v23 = 8 * HIDWORD(v27);
    do
    {
      v24 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (v24)
      {
        if (v24[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
        else
          --v24[6];
      }
      v22 = (WTF *)((char *)v22 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  result = v26;
  if (v26)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return (WTF *)WTF::fastFree(result, v21);
  }
  return result;
}

_QWORD *WebCore::MediaSource::removeSourceBuffer@<X0>(_QWORD *this@<X0>, WebCore::SourceBuffer *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::SourceBuffer **v12;
  WebCore *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  _QWORD *v38;
  unsigned int *v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  void *v54;
  _QWORD *v55;
  unsigned int *v56;
  unsigned int v57;
  _QWORD *v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  _QWORD *v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned int *v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD v78[4];

  v4 = this;
  v6 = this[31];
  v7 = this[32];
  v78[0] = "MediaSource";
  v78[1] = 12;
  v78[2] = "removeSourceBuffer";
  v78[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    v8 = WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u;
    if (v8)
      this = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)v78);
  }
  v9 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v9 + 1;
  v10 = v4[13];
  v11 = *(unsigned int *)(v10 + 68);
  if ((_DWORD)v11)
  {
    v12 = *(WebCore::SourceBuffer ***)(v10 + 56);
    while (*v12 != a2)
    {
      ++v12;
      if (!--v11)
        goto LABEL_12;
    }
    v13 = WebCore::SourceBuffer::abortIfUpdating(a2, a2);
    v14 = *(_QWORD *)(v4[1] + 8);
    if (v14)
      v15 = v14 - 96;
    else
      v15 = 0;
    if (*(_BYTE *)(v15 + 276))
    {
LABEL_67:
      WebCore::SourceBufferList::remove((_DWORD *)v4[14], a2);
      WebCore::SourceBufferList::remove((_DWORD *)v4[13], a2);
      if (*((_QWORD *)a2 + 17))
      {
        *((_BYTE *)a2 + 360) = 0;
        WebCore::SourceBuffer::abortIfUpdating(a2, v54);
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 15) + 144))(*((_QWORD *)a2 + 15), 0);
        (*(void (**)(_QWORD))(**((_QWORD **)a2 + 15) + 88))(*((_QWORD *)a2 + 15));
        *((_QWORD *)a2 + 17) = 0;
        *((_QWORD *)a2 + 39) = 0;
      }
      v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v55 = off_1E335DB30;
      v56 = (unsigned int *)v4[12];
      if (v56)
      {
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 + 1, v56));
      }
      v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v58 = &off_1E335DB58;
      v58[1] = v56;
      v58[2] = v55;
      v78[0] = v58;
      WTF::ensureOnMainThread();
      this = (_QWORD *)v78[0];
      v78[0] = 0;
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v9 = *((_DWORD *)a2 + 6) - 1;
      if (*((_DWORD *)a2 + 6) == 1)
        return (_QWORD *)(*(uint64_t (**)(WebCore::SourceBuffer *))(*(_QWORD *)a2 + 16))(a2);
LABEL_13:
      *((_DWORD *)a2 + 6) = v9;
      return this;
    }
    v77 = a3;
    v16 = *((_QWORD *)a2 + 23);
    if (v16)
    {
      ++*(_DWORD *)(v16 + 24);
      v17 = *(_DWORD *)(v16 + 68);
      if (v17)
      {
        v18 = 0;
        do
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * (v17 - 1));
          if (*(_DWORD *)(v19 + 40) != 2)
          {
LABEL_102:
            __break(0xC471u);
            JUMPOUT(0x195443ABCLL);
          }
          *(_QWORD *)(v19 + 32) = 0;
          v20 = *(_BYTE *)(v19 + 176) != 0;
          if (WTF::isMainThread(v13))
          {
            ++*(_DWORD *)(v19 + 16);
            v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v21 = &off_1E335D928;
            v21[1] = v19;
            v22 = (unsigned int *)v4[12];
            if (v22)
            {
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 + 1, v22));
            }
            v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v24 = &off_1E335DB58;
            v24[1] = v22;
          }
          else
          {
            v25 = *(_QWORD *)(v19 + 56);
            v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v21 = off_1E335D950;
            v21[1] = v25;
            v26 = (unsigned int *)v4[12];
            if (v26)
            {
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 + 1, v26));
            }
            v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v24 = &off_1E335DB58;
            v24[1] = v26;
          }
          v24[2] = v21;
          v78[0] = v24;
          WTF::ensureOnMainThread();
          v28 = v78[0];
          v78[0] = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v18 |= v20;
          v13 = WebCore::AudioTrackList::remove((WebCore::AudioTrackList *)v16, (WebCore::TrackBase *)v19, 1);
          v17 = *(_DWORD *)(v16 + 68);
        }
        while (v17);
        if ((v18 & 1) != 0)
        {
          v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v29 = off_1E335D978;
          v30 = (unsigned int *)v4[12];
          if (v30)
          {
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 + 1, v30));
          }
          v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v32 = &off_1E335DB58;
          v32[1] = v30;
          v32[2] = v29;
          v78[0] = v32;
          WTF::ensureOnMainThread();
          v13 = (WebCore *)v78[0];
          v78[0] = 0;
          if (v13)
            v13 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
        }
      }
    }
    v33 = *((_QWORD *)a2 + 22);
    if (v33)
    {
      ++*(_DWORD *)(v33 + 24);
      v34 = *(_DWORD *)(v33 + 68);
      if (v34)
      {
        v35 = 0;
        do
        {
          v36 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * (v34 - 1));
          if (*(_DWORD *)(v36 + 40) != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x195443ADCLL);
          }
          *(_QWORD *)(v36 + 32) = 0;
          v37 = *(_BYTE *)(v36 + 184) != 0;
          if (WTF::isMainThread(v13))
          {
            ++*(_DWORD *)(v36 + 16);
            v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v38 = &off_1E335D9A0;
            v38[1] = v36;
            v39 = (unsigned int *)v4[12];
            if (v39)
            {
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 + 1, v39));
            }
            v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v41 = &off_1E335DB58;
            v41[1] = v39;
          }
          else
          {
            v42 = *(_QWORD *)(v36 + 56);
            v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v38 = off_1E335D9C8;
            v38[1] = v42;
            v43 = (unsigned int *)v4[12];
            if (v43)
            {
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 + 1, v43));
            }
            v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v41 = &off_1E335DB58;
            v41[1] = v43;
          }
          v41[2] = v38;
          v78[0] = v41;
          WTF::ensureOnMainThread();
          v45 = v78[0];
          v78[0] = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          v35 |= v37;
          v13 = WebCore::TrackListBase::remove((WebCore *)v33, (WebCore::TrackBase *)v36, 1);
          v34 = *(_DWORD *)(v33 + 68);
        }
        while (v34);
        if ((v35 & 1) != 0)
        {
          v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v46 = off_1E335D9F0;
          v47 = (unsigned int *)v4[12];
          if (v47)
          {
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
          }
          v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v49 = &off_1E335DB58;
          v49[1] = v47;
          v49[2] = v46;
          v78[0] = v49;
          WTF::ensureOnMainThread();
          v13 = (WebCore *)v78[0];
          v78[0] = 0;
          if (v13)
            v13 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v13 + 8))(v13);
        }
      }
    }
    v50 = *((_QWORD *)a2 + 24);
    if (v50)
    {
      ++*(_DWORD *)(v50 + 24);
      v51 = *(_DWORD *)(v50 + 108);
      v52 = *(_DWORD *)(v50 + 124);
      v53 = v52 + v51 + *(_DWORD *)(v50 + 68);
      if (v53)
      {
        v59 = 0;
        do
        {
          v60 = v53 - 1;
          v8 = v60 >= v52;
          v61 = v60 - v52;
          if (v8)
          {
            v8 = v61 >= v51;
            v63 = v61 - v51;
            if (v8)
            {
              v62 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v63);
              if (*(_DWORD *)(v62 + 40) != 1)
                goto LABEL_102;
            }
            else
            {
              v62 = *(_QWORD *)(*(_QWORD *)(v50 + 96) + 8 * v61);
              if (*(_DWORD *)(v62 + 40) != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x195443B1CLL);
              }
            }
          }
          else
          {
            v62 = *(_QWORD *)(*(_QWORD *)(v50 + 112) + 8 * v60);
            if (*(_DWORD *)(v62 + 40) != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195443AFCLL);
            }
          }
          *(_QWORD *)(v62 + 32) = 0;
          v64 = (*(_DWORD *)(v62 + 224) - 1) < 2;
          if (WTF::isMainThread(v13))
          {
            ++*(_DWORD *)(v62 + 16);
            v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v65 = &off_1E335DA18;
            v65[1] = v62;
            v66 = (unsigned int *)v4[12];
            if (v66)
            {
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 + 1, v66));
            }
          }
          else
          {
            v68 = *(_QWORD *)(v62 + 56);
            v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v65 = off_1E335DA40;
            v65[1] = v68;
            v66 = (unsigned int *)v4[12];
            if (v66)
            {
              do
                v69 = __ldaxr(v66);
              while (__stlxr(v69 + 1, v66));
            }
          }
          v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v70 = &off_1E335DB58;
          v70[1] = v66;
          v70[2] = v65;
          v78[0] = v70;
          WTF::ensureOnMainThread();
          v71 = v78[0];
          v78[0] = 0;
          if (v71)
            (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
          v59 |= v64;
          v13 = WebCore::TextTrackList::remove((WebCore *)v50, (WebCore::TrackBase *)v62, 1);
          v51 = *(_DWORD *)(v50 + 108);
          v52 = *(_DWORD *)(v50 + 124);
          v53 = v52 + v51 + *(_DWORD *)(v50 + 68);
        }
        while (v53);
        if ((v59 & 1) != 0)
        {
          v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v72 = off_1E335DA68;
          v73 = (unsigned int *)v4[12];
          if (v73)
          {
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 + 1, v73));
          }
          v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v75 = &off_1E335DB58;
          v75[1] = v73;
          v75[2] = v72;
          v78[0] = v75;
          WTF::ensureOnMainThread();
          v76 = v78[0];
          v78[0] = 0;
          if (v76)
            (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        }
      }
      if (*(_DWORD *)(v50 + 24) == 1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 72))(v50);
        if (!v33)
          goto LABEL_64;
        goto LABEL_62;
      }
      --*(_DWORD *)(v50 + 24);
    }
    if (!v33)
      goto LABEL_64;
LABEL_62:
    if (*(_DWORD *)(v33 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
    else
      --*(_DWORD *)(v33 + 24);
LABEL_64:
    a3 = v77;
    if (v16)
    {
      if (*(_DWORD *)(v16 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
      else
        --*(_DWORD *)(v16 + 24);
    }
    goto LABEL_67;
  }
LABEL_12:
  *(_BYTE *)a3 = 5;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  if (v9)
    goto LABEL_13;
  return (_QWORD *)(*(uint64_t (**)(WebCore::SourceBuffer *))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WebCore::MediaSource::openIfInEndedState(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  if (*(_BYTE *)(this + 232))
    return this;
  v1 = this;
  this = *(_QWORD *)(this + 88);
  if (!this)
    return this;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 112))(this);
  if ((_DWORD)this != 2)
    return this;
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(_QWORD *)(v1 + 256);
  v12[0] = "MediaSource";
  v12[1] = 12;
  v12[2] = "openIfInEndedState";
  v12[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  v4 = *(_QWORD *)(v1 + 88);
  if (*(_BYTE *)(v1 + 232))
  {
    v5 = 0;
    if (v4)
LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, 1);
  }
  else
  {
    if (!v4)
    {
      v5 = 0;
      goto LABEL_15;
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    if (v6 == 1)
      goto LABEL_16;
    v5 = v6;
    v4 = *(_QWORD *)(v1 + 88);
    if (v4)
      goto LABEL_9;
  }
LABEL_15:
  WebCore::MediaSource::onReadyStateChange(v1, v5, 1);
LABEL_16:
  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 88) + 104))(*(_QWORD *)(v1 + 88));
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(unsigned int *)(v7 + 68);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(v7 + 56);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      *(_BYTE *)(v11 + 325) = 0;
      WebCore::SourceBuffer::updateBuffered((WebCore::SourceBuffer *)v11);
      this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 120) + 104))(*(_QWORD *)(v11 + 120), 0);
      v10 -= 8;
    }
    while (v10);
  }
  return this;
}

BOOL WebCore::MediaSource::virtualHasPendingActivity(WebCore::MediaSource *this)
{
  unint64_t v2;

  if (*((_BYTE *)this + 233) || *((_QWORD *)this + 11))
    return 1;
  v2 = atomic_load((unint64_t *)this + 33);
  return v2 != 0;
}

uint64_t WebCore::MediaSource::stop(WebCore::MediaSource *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  void *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _QWORD v19[4];

  v2 = *((_QWORD *)this + 31);
  v3 = *((_QWORD *)this + 32);
  v19[0] = "MediaSource";
  v19[1] = 12;
  v19[2] = "stop";
  v19[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v19);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E335DB08;
  v5 = (unsigned int *)*((_QWORD *)this + 12);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E335DB58;
  v7[1] = v5;
  v7[2] = v4;
  v19[0] = v7;
  WTF::ensureOnMainThread();
  result = v19[0];
  v19[0] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*((_BYTE *)this + 224))
  {
    result = WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WebCore::MediaSource *)((char *)this + 176));
    *((_BYTE *)this + 224) = 0;
  }
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_14;
    }
    result = MEMORY[0x19AEA534C](v11);
LABEL_14:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (v14)
          return result;
LABEL_22:
        if (v15)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        if (!v16)
          return WTF::fastFree((WTF *)v11, v8);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (v14)
      return result;
    goto LABEL_22;
  }
  return result;
}

WTF *WebCore::MediaSource::updateBufferedIfNeeded(WTF *this, char a2)
{
  WTF *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::MediaTime *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  int v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __n128 v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  int v54;
  unint64_t v55;
  WTF *v56;
  BOOL v57;
  const WTF::MediaTime *v58;
  WTF::MediaTime *v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  WTF *v68;
  uint64_t v69;

  if (*((_BYTE *)this + 232))
    return this;
  v2 = this;
  this = (WTF *)*((_QWORD *)this + 11);
  if (!this)
    return this;
  this = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 112))(this);
  if (!(_DWORD)this)
    return this;
  v5 = *((_QWORD *)v2 + 14);
  v6 = *(unsigned int *)(v5 + 68);
  if ((a2 & 1) == 0)
  {
    if (!(_DWORD)v6)
    {
LABEL_47:
      v68 = 0;
      v69 = 0;
      goto LABEL_48;
    }
    v7 = *(uint64_t **)(v5 + 56);
    v8 = 8 * v6 - 8;
    do
    {
      v9 = *v7++;
      v10 = *(unsigned __int8 *)(v9 + 300);
      if (*(_BYTE *)(v9 + 300))
        v11 = 1;
      else
        v11 = v8 == 0;
      v8 -= 8;
    }
    while (!v11);
    if (!v10)
      return this;
  }
  if (!(_DWORD)v6)
    goto LABEL_47;
  v12 = *(_QWORD *)(v5 + 56);
  v13 = 8 * v6;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)v12 + 300))
      *(_BYTE *)(*(_QWORD *)v12 + 300) = 0;
    v12 += 8;
    v13 -= 8;
  }
  while (v13);
  v68 = 0;
  v69 = 0;
  if (v6 >> 28)
  {
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x19544428CLL);
  }
  v15 = (WTF *)WTF::fastMalloc((WTF *)(16 * v6));
  v16 = *(unsigned int *)(v5 + 68);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = *(_QWORD *)(v5 + 56);
    v19 = v18 + 8 * v16;
    v20 = 16;
    do
    {
      v21 = v20;
      v22 = *(_QWORD *)(*(_QWORD *)v18 + 328);
      v23 = *(unsigned int *)(v22 + 20);
      if ((_DWORD)v23)
      {
        if (v23 >> 27)
          goto LABEL_90;
        v24 = (WTF::MediaTime *)WTF::fastMalloc((WTF *)(32 * v23));
        v25 = *(unsigned int *)(v22 + 20);
        if ((_DWORD)v25)
        {
          v26 = 0;
          v27 = *(_QWORD *)(v22 + 8);
          v28 = 32 * v25;
          do
          {
            v29 = (_OWORD *)((char *)v24 + v26);
            v30 = *(_OWORD *)(v27 + v26 + 16);
            *v29 = *(_OWORD *)(v27 + v26);
            v29[1] = v30;
            v26 += 32;
          }
          while (v28 != v26);
        }
      }
      else
      {
        v24 = 0;
      }
      v31 = (char *)v15 + 16 * v17;
      *(_QWORD *)v31 = v24;
      *((_DWORD *)v31 + 2) = v23;
      *((_DWORD *)v31 + 3) = v23;
      ++v17;
      v18 += 8;
      v20 = v21 + 16;
    }
    while (v18 != v19);
    if ((_DWORD)v17)
    {
      v32 = 0;
      v67 = *(_OWORD *)WTF::MediaTime::zeroTime(v24);
      do
      {
        v33 = *(_DWORD *)((char *)v15 + v32 + 12);
        if (v33)
        {
          v66 = *(_OWORD *)(*(_QWORD *)((char *)v15 + v32) + 32 * (v33 - 1) + 16);
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v67, (const WTF::MediaTime *)&v66) == -1)
            v34 = &v66;
          else
            v34 = &v67;
          v35 = *(_QWORD *)((char *)v34 + 5);
          *(_QWORD *)&v67 = *(_QWORD *)v34;
          *(_QWORD *)((char *)&v67 + 5) = v35;
        }
        v32 += 16;
      }
      while (v21 != v32);
      v36 = WTF::MediaTime::operator!();
      if ((v36 & 1) == 0)
      {
        v37 = (__int128 *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v36);
        v38 = WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v68, v37, &v67, 0);
        if (!*((_BYTE *)v2 + 232)
          && (v63 = *((_QWORD *)v2 + 11)) != 0
          && (*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v63 + 112))(v63, v38) == 2)
        {
          v64 = 0;
          do
          {
            v65 = *(_DWORD *)((char *)v15 + v64 + 12);
            if (v65)
            {
              v66 = *(_OWORD *)(*(_QWORD *)((char *)v15 + v64) + 32 * (v65 - 1));
              WebCore::PlatformTimeRanges::add((WTF *)((char *)v15 + v64), &v66, &v67, 0);
            }
            WebCore::PlatformTimeRanges::intersectWith((WTF *)&v68, (__int128 **)((char *)v15 + v64));
            v64 += 16;
          }
          while (v21 != v64);
        }
        else
        {
          v39 = 0;
          do
          {
            WebCore::PlatformTimeRanges::intersectWith((WTF *)&v68, (__int128 **)((char *)v15 + v39));
            v39 += 16;
          }
          while (v21 != v39);
        }
      }
      v40 = v15;
      do
      {
        v41 = *(WTF **)v40;
        if (*(_QWORD *)v40)
        {
          *(_QWORD *)v40 = 0;
          *((_DWORD *)v40 + 2) = 0;
          WTF::fastFree(v41, v14);
        }
        v40 = (WTF *)((char *)v40 + 16);
        v21 -= 16;
      }
      while (v21);
    }
  }
  WTF::fastFree(v15, v14);
LABEL_48:
  v42 = *((_QWORD *)v2 + 11);
  v43 = (unsigned __int8 *)(v42 + 64);
  if (__ldaxr((unsigned __int8 *)(v42 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v43))
  {
    goto LABEL_52;
  }
  MEMORY[0x19AEA534C](v42 + 64);
LABEL_52:
  v45 = *(unsigned int *)(v42 + 100);
  if ((_DWORD)v45)
  {
    if (v45 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195444294);
    }
    v46 = WTF::fastMalloc((WTF *)(32 * v45));
    v47 = v46;
    v48 = *(unsigned int *)(v42 + 100);
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = *(_QWORD *)(v42 + 88);
      v51 = 32 * v48;
      do
      {
        v52 = (_OWORD *)(v46 + v49);
        v53 = *(_OWORD *)(v50 + v49 + 16);
        *v52 = *(_OWORD *)(v50 + v49);
        v52[1] = v53;
        v49 += 32;
      }
      while (v51 != v49);
    }
  }
  else
  {
    v47 = 0;
  }
  v54 = __ldxr(v43);
  if (v54 != 1)
  {
    __clrex();
    goto LABEL_63;
  }
  if (__stlxr(0, v43))
LABEL_63:
    WTF::Lock::unlockSlow((WTF::Lock *)(v42 + 64));
  v55 = HIDWORD(v69);
  if (HIDWORD(v69) == (_DWORD)v45)
  {
    if (!(_DWORD)v45)
    {
      v57 = 1;
      goto LABEL_69;
    }
    v56 = v68;
    if (!WTF::MediaTime::compare(v68, (const WTF::MediaTime *)v47)
      && !WTF::MediaTime::compare((WTF *)((char *)v56 + 16), (const WTF::MediaTime *)(v47 + 16)))
    {
      v58 = (const WTF::MediaTime *)(v47 + 48);
      v59 = (WTF *)((char *)v56 + 48);
      v60 = 1;
      do
      {
        v61 = v60;
        if (v55 == v60)
          break;
        if (WTF::MediaTime::compare((WTF::MediaTime *)((char *)v59 - 16), (const WTF::MediaTime *)((char *)v58 - 16)))break;
        v62 = WTF::MediaTime::compare(v59, v58);
        v60 = v61 + 1;
        v58 = (const WTF::MediaTime *)((char *)v58 + 32);
        v59 = (WTF::MediaTime *)((char *)v59 + 32);
      }
      while (!v62);
      v57 = v61 >= v55;
      goto LABEL_69;
    }
  }
  v57 = 0;
LABEL_69:
  if (v47)
    WTF::fastFree((WTF *)v47, v4);
  if (!v57)
  {
    (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v2 + 11) + 64))(*((_QWORD *)v2 + 11), &v68);
    (*(void (**)(WTF *))(*(_QWORD *)v2 + 72))(v2);
  }
  this = v68;
  if (v68)
  {
    v68 = 0;
    LODWORD(v69) = 0;
    return (WTF *)WTF::fastFree(this, v4);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaSource::scriptExecutionContext(WebCore::MediaSource *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::MediaSource::eventTargetInterface(WebCore::MediaSource *this)
{
  return 9;
}

uint64_t `non-virtual thunk to'WebCore::MediaSource::eventTargetInterface(WebCore::MediaSource *this)
{
  return 9;
}

void *WebCore::MediaSource::registry(WebCore::MediaSource *this)
{
  WebCore::URLRegistry *v2;

  {
    v2 = WebCore::URLRegistry::URLRegistry((WebCore::URLRegistry *)&WebCore::MediaSourceRegistry::registry(void)::instance);
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    *(_QWORD *)v2 = off_1E335E040;
    *(_QWORD *)((char *)v2 + 21) = 0;
    *((_QWORD *)v2 + 4) = 0;
    WebCore::MediaSource::s_registry = (uint64_t)v2;
  }
  return &WebCore::MediaSourceRegistry::registry(void)::instance;
}

void *`non-virtual thunk to'WebCore::MediaSource::registry(WebCore::MediaSource *this)
{
  WebCore::URLRegistry *v2;

  {
    v2 = WebCore::URLRegistry::URLRegistry((WebCore::URLRegistry *)&WebCore::MediaSourceRegistry::registry(void)::instance);
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    *(_QWORD *)v2 = off_1E335E040;
    *(_QWORD *)((char *)v2 + 21) = 0;
    *((_QWORD *)v2 + 4) = 0;
    WebCore::MediaSource::s_registry = (uint64_t)v2;
  }
  return &WebCore::MediaSourceRegistry::registry(void)::instance;
}

char *`non-virtual thunk to'WebCore::MediaSource::logChannel(WebCore::MediaSource *this)
{
  return &WebCore::LogMediaSource;
}

_DWORD *WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v8;
  int v9;
  int v10;
  _DWORD *result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  if (a2)
  {
    v8 = a2 - 1;
    v16 = a1;
    if ((unint64_t)(a2 - 1) >> 31)
    {
      __break(0xC471u);
      goto LABEL_16;
    }
  }
  else
  {
    v8 = 0;
    v16 = a1;
  }
  v17 = v8;
  if (a4)
  {
    v9 = a4 - 1;
    v14 = a3;
    if ((unint64_t)(a4 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19544447CLL);
    }
  }
  else
  {
    v9 = 0;
    v14 = a3;
  }
  v15 = v9;
  if (a6)
  {
    v10 = a6 - 1;
    v12 = a5;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1954444ACLL);
    }
  }
  else
  {
    v10 = 0;
    v12 = a5;
  }
  v13 = v10;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v16, (uint64_t)&v14, (uint64_t)&v12, a7);
  if (!*a7)
  {
    __break(0xC471u);
LABEL_16:
    JUMPOUT(0x19544444CLL);
  }
  return result;
}

uint64_t WebCore::PlatformStrategies::mediaStrategy(WebCore::PlatformStrategies *this)
{
  unint64_t *v2;
  unint64_t v3;
  WebCore::PlatformStrategies *v5;
  WebCore::PlatformStrategies ***v6;
  WebCore::PlatformStrategies **v7;

  v2 = (unint64_t *)((char *)this + 24);
  v5 = this;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformStrategies::mediaStrategy(void)::{lambda(void)#1} &&>>);
  }
  return *((_QWORD *)this + 4);
}

_QWORD *WebCore::MediaSource::handle@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;

  v3 = this[30];
  if (v3)
    goto LABEL_20;
  v4 = this;
  v5 = this[34];
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_14;
  }
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_6;
LABEL_7:
  if (*(_QWORD *)(v6 + 24))
  {
    ++*(_QWORD *)(v6 + 16);
    v8 = v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_14:
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E335DC98;
  v10[1] = v8;
  v10[2] = v5;
  v14 = v10;
  v11 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E335DEA0;
  *(_BYTE *)(v11 + 12) = 0;
  v12 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)(v11 + 16) = WebCore::MediaSourceHandle::SharedPrivate::SharedPrivate(v12, v4, (uint64_t *)&v14);
  v13 = (_DWORD *)v4[30];
  v4[30] = v11;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  this = v14;
  v14 = 0;
  if (this)
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  v3 = v4[30];
LABEL_20:
  ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
  return this;
}

void WebCore::MediaSourceHandle::~MediaSourceHandle(WebCore::MediaSourceHandle *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E335DEA0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::MediaSourceHandle::SharedPrivate::~SharedPrivate((WebCore::MediaSourceHandle::SharedPrivate *)v3, a2);
      WTF::fastFree(v6, v7);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E335DEA0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::MediaSourceHandle::SharedPrivate::~SharedPrivate((WebCore::MediaSourceHandle::SharedPrivate *)v3, a2);
      WTF::fastFree(v6, v7);
    }
  }
  bmalloc::api::isoDeallocate(this, a2);
}

BOOL WebCore::MediaSourceHandle::canDetach(WebCore::MediaSourceHandle *this)
{
  unsigned __int8 v2;

  if (*((_BYTE *)this + 12))
    return 0;
  v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 2) + 24));
  return (v2 & 1) == 0;
}

uint64_t WebCore::MediaSourceHandle::detach@<X0>(WebCore::MediaSourceHandle *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E335DEA0;
  *(_BYTE *)(result + 12) = 0;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(result + 16) = v5;
  *((_BYTE *)this + 12) = 1;
  *a2 = result;
  return result;
}

uint64_t WebCore::MediaSource::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::MediaSource::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::ManagedMediaSource::isManaged(WebCore::ManagedMediaSource *this)
{
  return 1;
}

uint64_t WebCore::ManagedMediaSource::streaming(WebCore::ManagedMediaSource *this)
{
  return *((unsigned __int8 *)this + 280);
}

uint64_t WebCore::MediaSource::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::MediaSource::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaSource::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 16);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaSource::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 40) + 16))(this - 40);
  --*(_DWORD *)(this - 16);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaSource::logger(WebCore::MediaSource *this)
{
  return *((_QWORD *)this + 22);
}

const char *`non-virtual thunk to'WebCore::MediaSource::logClassName(WebCore::MediaSource *this)
{
  return "MediaSource";
}

uint64_t `non-virtual thunk to'WebCore::MediaSource::logIdentifier(WebCore::MediaSource *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t WebCore::SourceBuffer::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::SourceBuffer::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::SourceBuffer::scriptExecutionContext(WebCore::SourceBuffer *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::SourceBuffer::logger(WebCore::SourceBuffer *this)
{
  return *((_QWORD *)this + 48);
}

uint64_t WebCore::SourceBuffer::logIdentifier(WebCore::SourceBuffer *this)
{
  return *((_QWORD *)this + 49);
}

const char *WebCore::SourceBuffer::logClassName(WebCore::SourceBuffer *this)
{
  return "SourceBuffer";
}

uint64_t WebCore::ManagedSourceBuffer::isManaged(WebCore::ManagedSourceBuffer *this)
{
  return 1;
}

uint64_t WebCore::SourceBuffer::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::SourceBuffer::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::SourceBuffer::eventTargetInterface(WebCore::SourceBuffer *this)
{
  return 10;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::eventTargetInterface(WebCore::SourceBuffer *this)
{
  return 10;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::scriptExecutionContext(WebCore::SourceBuffer *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 16);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 40) + 16))(this - 40);
  --*(_DWORD *)(this - 16);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::logger(WebCore::SourceBuffer *this)
{
  return *((_QWORD *)this + 34);
}

const char *`non-virtual thunk to'WebCore::SourceBuffer::logClassName(WebCore::SourceBuffer *this)
{
  return "SourceBuffer";
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::logIdentifier(WebCore::SourceBuffer *this)
{
  return *((_QWORD *)this + 35);
}

uint64_t WebCore::MediaSource::isManaged(WebCore::MediaSource *this)
{
  return 0;
}

uint64_t WebCore::MediaSource::streaming(WebCore::MediaSource *this)
{
  return 0;
}

void WebCore::MediaSourceClientImpl::~MediaSourceClientImpl(WebCore::MediaSourceClientImpl *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaSourceClientImpl::setPrivateAndOpen(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E335D538;
  v4[1] = v3;
  v5 = *(unsigned int **)(a1 + 16);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a1 + 48);
  v17[0] = *(_OWORD *)(a1 + 32);
  v17[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = &off_1E335D510;
  *(_QWORD *)(v8 + 8) = v4;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = 1;
  v15 = v8;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v10[4]) & 1) != 0)
      {
        v12 = 1;
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 336))(v11, &v15);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_13:
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v12)
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v11);
LABEL_17:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSourceClientImpl::waitForTarget@<X0>(WebCore::MediaSourceClientImpl *this@<X0>, const WebCore::SeekTarget *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  char v39;
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  LOBYTE(v40[0]) = 3;
  v27 = 0;
  *(_QWORD *)&v28 = 0;
  *((_QWORD *)&v28 + 1) = "waitForTarget";
  *(_QWORD *)&v29 = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v34, v40, (WTF::Logger::LogSiteIdentifier *)&v27);
  v6 = v34;
  if (v34)
  {
    v7 = (unsigned int *)(v34 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = v34;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v6;
  v34 = 0;
  v28 = v35;
  v29 = v36;
  v30 = v37;
  v10 = *((_OWORD *)a2 + 1);
  v31 = *(_OWORD *)a2;
  v32 = v10;
  v33 = *((_OWORD *)a2 + 2);
  v11 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v11 = off_1E335D560;
  *(_QWORD *)(v11 + 8) = v9;
  v27 = 0;
  v12 = v28;
  v13 = v29;
  *(_BYTE *)(v11 + 48) = v30;
  *(_OWORD *)(v11 + 16) = v12;
  *(_OWORD *)(v11 + 32) = v13;
  v15 = v31;
  v14 = v32;
  *(_OWORD *)(v11 + 88) = v33;
  *(_OWORD *)(v11 + 56) = v15;
  *(_OWORD *)(v11 + 72) = v14;
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v18 = *((_OWORD *)this + 3);
  v40[0] = *((_OWORD *)this + 2);
  v40[1] = v18;
  v19 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v19 = &off_1E335D510;
  *(_QWORD *)(v19 + 8) = v11;
  *(_QWORD *)(v19 + 16) = v16;
  *(_BYTE *)(v19 + 24) = 0;
  v38 = v19;
  v39 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_11:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v21 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v40);
  if (v21)
  {
    v22 = v21[4];
    if (v22)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 88))(v21[4]) & 1) != 0)
      {
        v23 = 1;
        goto LABEL_17;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 336))(v22, &v38);
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = 0;
LABEL_17:
  v24 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v24 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v23)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v23)
LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v22);
LABEL_21:
  v25 = v38;
  v38 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v27);
  return WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v34);
}

WTF::NativePromiseBase *WebCore::MediaSourceClientImpl::seekToTime@<X0>(WebCore::MediaSourceClientImpl *this@<X0>, const WTF::MediaTime *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  char v34;
  _OWORD v35[2];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  LOBYTE(v35[0]) = 3;
  v24 = 0;
  *(_QWORD *)&v25 = 0;
  *((_QWORD *)&v25 + 1) = "seekToTime";
  *(_QWORD *)&v26 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v29, v35, 0, (WTF::Logger::LogSiteIdentifier *)&v24);
  v6 = v29;
  if (v29)
  {
    v7 = (unsigned int *)(v29 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = v29;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v6;
  v29 = 0;
  v25 = v30;
  v26 = v31;
  v27 = v32;
  *(_QWORD *)&v28 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v28 + 5) = *(_QWORD *)((char *)a2 + 5);
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v10 = off_1E335D588;
  *(_QWORD *)(v10 + 8) = v9;
  v24 = 0;
  v11 = v25;
  v12 = v26;
  *(_BYTE *)(v10 + 48) = v27;
  *(_OWORD *)(v10 + 16) = v11;
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 56) = v28;
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = *((_OWORD *)this + 3);
  v35[0] = *((_OWORD *)this + 2);
  v35[1] = v15;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v16 = &off_1E335D510;
  *(_QWORD *)(v16 + 8) = v10;
  *(_QWORD *)(v16 + 16) = v13;
  *(_BYTE *)(v16 + 24) = 0;
  v33 = v16;
  v34 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_11:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v18 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v35);
  if (v18)
  {
    v19 = v18[4];
    if (v19)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v18[4]) & 1) != 0)
      {
        v20 = 1;
        goto LABEL_17;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 336))(v19, &v33);
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
LABEL_17:
  v21 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v21 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v20)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v20)
LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v19);
LABEL_21:
  v22 = v33;
  v33 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v24);
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v29);
}

uint64_t WebCore::MediaSourceClientImpl::setLogIdentifier(WebCore::MediaSourceClientImpl *this, const void *a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E335D5B0;
  v4[1] = a2;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *((_OWORD *)this + 3);
  v17[0] = *((_OWORD *)this + 2);
  v17[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = &off_1E335D510;
  *(_QWORD *)(v8 + 8) = v4;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = 0;
  v15 = v8;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v10[4]) & 1) != 0)
      {
        v12 = 1;
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 336))(v11, &v15);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_13:
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v12)
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v11);
LABEL_17:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSourcePrivateClient::logger(WebCore::MediaSourcePrivateClient *this)
{
  return 0;
}

uint64_t WebCore::MediaSourceClientImpl::failedToCreateRenderer(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E335D5D8;
  *(_DWORD *)(v4 + 8) = a2;
  v5 = *(unsigned int **)(a1 + 16);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a1 + 48);
  v17[0] = *(_OWORD *)(a1 + 32);
  v17[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = &off_1E335D510;
  *(_QWORD *)(v8 + 8) = v4;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = 0;
  v15 = v8;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v10[4]) & 1) != 0)
      {
        v12 = 1;
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 336))(v11, &v15);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_13:
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v12)
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v11);
LABEL_17:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK7WebCore21MediaSourceClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_11MediaSourceEEEEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E335D510;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK7WebCore21MediaSourceClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_11MediaSourceEEEEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E335D510;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK7WebCore21MediaSourceClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_11MediaSourceEEEEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESE_(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = result[2];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      ++*(_DWORD *)(v2 + 24);
      if (!*(_BYTE *)(v2 + 232)
        && (result = *(_QWORD **)(v2 + 88)) != 0
        && (result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 112))(result), (_DWORD)result)
        || *((_BYTE *)v3 + 24))
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v3[1] + 16))(v3[1], v2);
      }
      if (*(_DWORD *)(v2 + 24) == 1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      else
        --*(_DWORD *)(v2 + 24);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::setPrivateAndOpen(WTF::Ref<WebCore::MediaSourcePrivate,WTF::RawPtrTraits<WebCore::MediaSourcePrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaSourcePrivate>> &&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = a1[1];
  *a1 = &off_1E335D538;
  a1[1] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::setPrivateAndOpen(WTF::Ref<WebCore::MediaSourcePrivate,WTF::RawPtrTraits<WebCore::MediaSourcePrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaSourcePrivate>> &&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335D538;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::setPrivateAndOpen(WTF::Ref<WebCore::MediaSourcePrivate,WTF::RawPtrTraits<WebCore::MediaSourcePrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaSourcePrivate>> &&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  unsigned int *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD v49[4];

  v4 = *(_QWORD *)(a2 + 248);
  v5 = *(_QWORD *)(a2 + 256);
  v49[0] = "MediaSource";
  v49[1] = 12;
  v49[2] = "setPrivateAndOpen";
  v49[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)v49);
  }
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v7;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_13:
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v9 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v48 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v14 = v48 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          goto LABEL_25;
LABEL_21:
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          WTF::fastFree((WTF *)v9, (void *)a2);
        goto LABEL_25;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      goto LABEL_25;
    goto LABEL_21;
  }
LABEL_25:
  v16 = *(_QWORD *)(a2 + 88);
  if ((_MergedGlobals_142 & 1) == 0)
  {
    qword_1ECE82068 = 2002;
    dword_1ECE82070 = 24000;
    byte_1ECE82074 = 1;
    _MergedGlobals_142 = 1;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 128))(v16, &qword_1ECE82068);
  if (*(_BYTE *)(a2 + 232)
    || (v23 = *(_QWORD *)(a2 + 88)) == 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 112))(v23))
  {
    v18 = *(_QWORD *)(a2 + 240);
    if (!v18)
      goto LABEL_69;
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(v18 + 16) + 24));
    v19 = *(_QWORD *)(a2 + 88);
    v20 = *(_QWORD *)(*(_QWORD *)(a2 + 240) + 16);
    v21 = (unsigned __int8 *)(v20 + 4);
    if (__ldaxr((unsigned __int8 *)(v20 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_39;
    }
    MEMORY[0x19AEA534C](v20 + 4);
LABEL_39:
    v29 = *(_QWORD *)(v19 + 8);
    if (!v29)
    {
      v31 = 0;
      goto LABEL_51;
    }
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v29))
    {
      goto LABEL_44;
    }
    MEMORY[0x19AEA534C](v29);
LABEL_44:
    if (*(_QWORD *)(v29 + 24))
    {
      ++*(_QWORD *)(v29 + 16);
      v31 = v29;
    }
    else
    {
      v31 = 0;
    }
    v32 = __ldxr((unsigned __int8 *)v29);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
      {
LABEL_51:
        v33 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = v31;
        if (!v33)
          goto LABEL_64;
        if (__ldaxr((unsigned __int8 *)v33))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v33))
        {
          goto LABEL_56;
        }
        MEMORY[0x19AEA534C](v33);
LABEL_56:
        v35 = *(_QWORD *)(v33 + 16) - 1;
        *(_QWORD *)(v33 + 16) = v35;
        if (!v35)
        {
          v36 = *(_QWORD *)(v33 + 8);
          v37 = __ldxr((unsigned __int8 *)v33);
          if (v37 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v33))
            {
              if (v36)
                goto LABEL_64;
LABEL_63:
              WTF::fastFree((WTF *)v33, v17);
              goto LABEL_64;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v33);
          if (v36)
            goto LABEL_64;
          goto LABEL_63;
        }
        v47 = __ldxr((unsigned __int8 *)v33);
        if (v47 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v33))
          {
LABEL_64:
            *(_QWORD *)(v20 + 16) = v19;
            v38 = __ldxr(v21);
            if (v38 == 1)
            {
              if (!__stlxr(0, v21))
              {
LABEL_69:
                v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v39 = off_1E335D740;
                v40 = *(unsigned int **)(a2 + 96);
                if (v40)
                {
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 + 1, v40));
                }
                v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v42 = &off_1E335DB58;
                v42[1] = v40;
                v42[2] = v39;
                v49[0] = v42;
                WTF::ensureOnMainThread();
                v43 = v49[0];
                v49[0] = 0;
                if (v43)
                  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2))
                {
                  v44 = 0;
                  *(_BYTE *)(a2 + 232) = 1;
                }
                else if (*(_BYTE *)(a2 + 232))
                {
                  v44 = 0;
                }
                else
                {
                  v46 = *(_QWORD *)(a2 + 88);
                  if (!v46)
                  {
                    v44 = 0;
LABEL_79:
                    WebCore::MediaSource::onReadyStateChange(a2, v44, 1);
                    return WebCore::MediaSource::openIfDeferredOpen((WebCore::MediaSource *)a2);
                  }
                  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 112))(v46);
                  if (v44 == 1)
                    return WebCore::MediaSource::openIfDeferredOpen((WebCore::MediaSource *)a2);
                }
                v45 = *(_QWORD *)(a2 + 88);
                if (v45)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 120))(v45, 1);
                goto LABEL_79;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v20 + 4));
            goto LABEL_69;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v33);
        goto LABEL_64;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    goto LABEL_51;
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v24 = off_1E335D718;
  v25 = *(unsigned int **)(a2 + 96);
  if (v25)
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E335DB58;
  v27[1] = v25;
  v27[2] = v24;
  v49[0] = v27;
  WTF::ensureOnMainThread();
  result = v49[0];
  v49[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::waitForTarget(WebCore::SeekTarget const&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E335D560;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::waitForTarget(WebCore::SeekTarget const&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E335D560;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::waitForTarget(WebCore::SeekTarget const&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::call(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::MediaTime *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject v36;
  WTF::Logger *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  int v59;
  __int128 v60;
  __int128 v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  WTF::StringImpl *v72;
  _QWORD v73[4];
  WTF::Logger *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  __int128 buf;
  const char *v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87[3];

  v4 = a1;
  v87[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v5 = (WTF::StringImpl *)((char *)a1 + 56);
  v6 = *(_QWORD *)(a2 + 248);
  v7 = *(WTF::StringImpl **)(a2 + 256);
  *(_QWORD *)&buf = "MediaSource";
  *((_QWORD *)&buf + 1) = 12;
  v82 = "waitForTarget";
  v83 = v7;
  if (*(_BYTE *)(v6 + 12))
    a1 = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v5);
  v8 = (uint64_t *)(a2 + 176);
  if (!*(_BYTE *)(a2 + 224))
  {
    LOBYTE(v73[0]) = 3;
    goto LABEL_122;
  }
  v9 = *(_QWORD *)(a2 + 248);
  v10 = *(_QWORD *)(a2 + 256);
  v73[0] = "MediaSource";
  v73[1] = 12;
  v73[2] = "waitForTarget";
  v73[3] = v10;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_157;
  if (*(_BYTE *)(v9 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v73);
    WTF::String::String((WTF::String *)&v78, "Previous seeking to ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)(a2 + 120));
    result = WTF::String::String((WTF::String *)&v76, "pending, cancelling it");
    if (v79)
      v12 = *((_DWORD *)v79 + 1);
    else
      v12 = 0;
    if (v78)
    {
      v13 = *((_DWORD *)v78 + 1);
      if (v77)
        goto LABEL_10;
    }
    else
    {
      v13 = 0;
      if (v77)
      {
LABEL_10:
        v14 = *((_DWORD *)v77 + 1);
        if (v76)
        {
LABEL_11:
          v15 = *((_DWORD *)v76 + 1);
LABEL_12:
          if ((v15 | v14) < 0
            || ((v16 = __OFADD__(v14, v15), v17 = v14 + v15, !v16) ? (v18 = 0) : (v18 = 1),
                v13 < 0
             || (v18 & 1) != 0
             || ((v16 = __OFADD__(v13, v17), v19 = v13 + v17, !v16) ? (v20 = 0) : (v20 = 1),
                 v12 < 0 || (v20 & 1) != 0 || (result = (v12 + v19), __OFADD__(v12, v19)))))
          {
            v80 = 0;
            goto LABEL_160;
          }
          if (v79 && (*((_BYTE *)v79 + 16) & 4) == 0 || v78 && (*((_BYTE *)v78 + 16) & 4) == 0)
          {
            v21 = 0;
            goto LABEL_29;
          }
          if (v77)
          {
            v71 = *((_DWORD *)v77 + 4);
            v21 = (v71 >> 2) & 1;
            if (v76 && (v71 & 4) != 0)
              goto LABEL_144;
          }
          else
          {
            if (v76)
            {
LABEL_144:
              v21 = (*((unsigned __int8 *)v76 + 16) >> 2) & 1;
              goto LABEL_29;
            }
            v21 = 1;
          }
LABEL_29:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v21, (uint64_t)v79, v78, (uint64_t)v77, (uint64_t)v76, &v80);
          if (v80)
          {
            v23 = v76;
            v76 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
            v24 = v77;
            v77 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v22);
              else
                *(_DWORD *)v24 -= 2;
            }
            v25 = v78;
            v78 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v22);
              else
                *(_DWORD *)v25 -= 2;
            }
            v26 = v79;
            v79 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v22);
              else
                *(_DWORD *)v26 -= 2;
            }
            v2 = qword_1ECE7CE80;
            v27 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v27)
            {
              WTF::String::utf8();
              v29 = v74 ? (char *)v74 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v29;
              _os_log_impl(&dword_1940B8000, (os_log_t)v2, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v27 = (uint64_t)v74;
              v74 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 1)
                  v27 = WTF::fastFree((WTF *)v27, v28);
                else
                  --*(_DWORD *)v27;
              }
            }
            if (WebCore::LogMediaSource)
            {
              v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v31 = *v30;
                if ((v31 & 1) != 0)
                  break;
                v32 = __ldaxr(v30);
                if (v32 == v31)
                {
                  if (!__stxr(v31 | 1, v30))
                  {
                    v72 = v4;
                    v33 = WTF::Logger::observers((WTF::Logger *)v27);
                    v34 = *(unsigned int *)(v33 + 12);
                    if ((_DWORD)v34)
                    {
                      v2 = *(_QWORD *)v33;
                      v35 = *(_QWORD *)v33 + 8 * v34;
                      do
                      {
                        v36.isa = *(Class *)v2;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v73);
                        LODWORD(v82) = 0;
                        WTF::String::String((WTF::String *)&v83, "Previous seeking to ");
                        v84 = 1;
                        WTF::MediaTime::toJSONString((WTF::MediaTime *)(a2 + 120));
                        v86 = 0;
                        WTF::String::String((WTF::String *)v87, "pending, cancelling it");
                        v74 = 0;
                        v75 = 0;
                        v37 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                        LODWORD(v75) = 4;
                        v74 = v37;
                        v38 = HIDWORD(v75);
                        *((_DWORD *)v37 + 4 * HIDWORD(v75)) = buf;
                        v39 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v37 + 2 * v38 + 1) = v39;
                        *((_DWORD *)v37 + 4 * (v38 + 1)) = (_DWORD)v82;
                        v40 = v83;
                        if (v83)
                          *(_DWORD *)v83 += 2;
                        *((_QWORD *)v37 + 2 * (v38 + 1) + 1) = v40;
                        *((_DWORD *)v37 + 4 * (v38 + 2)) = v84;
                        v41 = v85;
                        if (v85)
                          *(_DWORD *)v85 += 2;
                        *((_QWORD *)v37 + 2 * (v38 + 2) + 1) = v41;
                        *((_DWORD *)v37 + 4 * (v38 + 3)) = v86;
                        v42 = v87[0];
                        if (v87[0])
                          *(_DWORD *)v87[0] += 2;
                        *((_QWORD *)v37 + 2 * (v38 + 3) + 1) = v42;
                        HIDWORD(v75) = v38 + 4;
                        (*(void (**)(NSObject, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v36.isa + 16))(v36, &WebCore::LogMediaSource, 0, &v74);
                        v43 = v74;
                        if (HIDWORD(v75))
                        {
                          v44 = 16 * HIDWORD(v75);
                          v45 = (WTF::StringImpl **)((char *)v74 + 8);
                          do
                          {
                            v46 = *v45;
                            *v45 = 0;
                            if (v46)
                            {
                              if (*(_DWORD *)v46 == 2)
                                WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v28);
                              else
                                *(_DWORD *)v46 -= 2;
                            }
                            v45 += 2;
                            v44 -= 16;
                          }
                          while (v44);
                          v43 = v74;
                        }
                        if (v43)
                        {
                          v74 = 0;
                          LODWORD(v75) = 0;
                          WTF::fastFree(v43, v28);
                        }
                        v47 = v87[0];
                        v87[0] = 0;
                        if (v47)
                        {
                          if (*(_DWORD *)v47 == 2)
                            WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v28);
                          else
                            *(_DWORD *)v47 -= 2;
                        }
                        v48 = v85;
                        v85 = 0;
                        if (v48)
                        {
                          if (*(_DWORD *)v48 == 2)
                            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v28);
                          else
                            *(_DWORD *)v48 -= 2;
                        }
                        v49 = v83;
                        v83 = 0;
                        if (v49)
                        {
                          if (*(_DWORD *)v49 == 2)
                            WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v28);
                          else
                            *(_DWORD *)v49 -= 2;
                        }
                        v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v50)
                        {
                          if (*(_DWORD *)v50 == 2)
                            WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v28);
                          else
                            *(_DWORD *)v50 -= 2;
                        }
                        v2 += 8;
                      }
                      while (v2 != v35);
                    }
                    v51 = __ldxr(v30);
                    if (v51 == 1)
                    {
                      v8 = (uint64_t *)(a2 + 176);
                      v4 = v72;
                      if (!__stlxr(0, v30))
                        break;
                    }
                    else
                    {
                      __clrex();
                      v8 = (uint64_t *)(a2 + 176);
                      v4 = v72;
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            a1 = v80;
            v80 = 0;
            if (a1)
            {
              if (*(_DWORD *)a1 == 2)
                a1 = (WTF::StringImpl *)WTF::StringImpl::destroy(a1, (WTF::StringImpl *)v28);
              else
                *(_DWORD *)a1 -= 2;
            }
            if (!*(_BYTE *)(a2 + 224))
              goto LABEL_157;
            goto LABEL_104;
          }
LABEL_160:
          __break(0xC471u);
          return result;
        }
LABEL_154:
        v15 = 0;
        goto LABEL_12;
      }
    }
    v14 = 0;
    if (v76)
      goto LABEL_11;
    goto LABEL_154;
  }
LABEL_104:
  LOBYTE(v73[0]) = 7;
  buf = 0uLL;
  v82 = "waitForTarget";
  v83 = 0;
  v52 = *v8;
  if (!*v8)
  {
    v2 = 0;
LABEL_116:
    v57 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
    if (*v57 && v57[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v57, (WTF::Logger::LogSiteIdentifier *)&buf, v2);
    goto LABEL_120;
  }
  v53 = (unsigned __int8 *)(v52 + 48);
  if (__ldaxr((unsigned __int8 *)(v52 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v53))
  {
    goto LABEL_110;
  }
  a1 = (WTF::StringImpl *)MEMORY[0x19AEA534C](v52 + 48);
LABEL_110:
  v55 = *(_DWORD *)(v52 + 80);
  v56 = __ldxr(v53);
  if (v56 != 1)
  {
    __clrex();
    goto LABEL_114;
  }
  if (__stlxr(0, v53))
LABEL_114:
    a1 = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v53);
  v2 = *v8;
  if (v55)
    goto LABEL_116;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*v8, (char *)v73, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_120:
  v58 = *(unsigned __int8 *)(a2 + 224);
  LOBYTE(v73[0]) = 3;
  if (v58)
  {
    WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)v8);
    *(_BYTE *)(a2 + 224) = 0;
  }
LABEL_122:
  buf = 0uLL;
  v82 = "construct_at";
  v83 = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)v8, v73, (WTF::Logger::LogSiteIdentifier *)&buf);
  *(_BYTE *)(a2 + 224) = 1;
  v59 = *(unsigned __int8 *)(a2 + 168);
  v61 = *((_OWORD *)v5 + 1);
  v60 = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 136) = v61;
  *(_OWORD *)(a2 + 152) = v60;
  if (!v59)
    *(_BYTE *)(a2 + 168) = 1;
  if ((WebCore::MediaSource::hasBufferedTime((WebCore::MediaSource *)a2, v5) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 224))
    {
      v2 = *v8;
      if (*v8)
      {
        v62 = (unsigned int *)(v2 + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 + 1, v62));
      }
      WebCore::MediaSource::completeSeek((unsigned int *)a2);
      goto LABEL_136;
    }
LABEL_157:
    __break(1u);
LABEL_158:
    atomic_store(1u, (unsigned int *)(v2 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  v64 = *(_QWORD *)(a2 + 248);
  v65 = *(WTF::StringImpl **)(a2 + 256);
  *(_QWORD *)&buf = "MediaSource";
  *((_QWORD *)&buf + 1) = 12;
  v82 = "waitForTarget";
  v83 = v65;
  if (*(_BYTE *)(v64 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "No data at seeked time, waiting");
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 88) + 88))(*(_QWORD *)(a2 + 88), 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  if (!*(_BYTE *)(a2 + 224))
    goto LABEL_157;
  v2 = *v8;
  if (*v8)
  {
    v66 = (unsigned int *)(v2 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
  }
LABEL_136:
  buf = 0uLL;
  v82 = "operator()";
  v83 = 0;
  result = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::chainTo<WTF::MediaTime,WebCore::PlatformMediaError,16u>((unsigned __int8 *)v2, (uint64_t)v4 + 8, (WTF::Logger::LogSiteIdentifier *)&buf);
  if (v2)
  {
    v68 = (unsigned int *)(v2 + 8);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
      goto LABEL_158;
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, _BYTE *a2, unsigned __int8 a3, WTF::Logger::LogSiteIdentifier *a4)
{
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  __int128 v12;
  _BYTE *v14;
  int v15;

  v8 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E3207198;
  v9 = *((_OWORD *)a4 + 1);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 48) = 0;
  v10 = (unsigned __int8 *)(v8 + 48);
  *(_DWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v8 + 88;
  *(_QWORD *)(v8 + 80) = 1;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_WORD *)(v8 + 112) = 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v11 && v11[16] >= 4u)
    v11 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v11, 4u, "creating ", v8);
  *(_QWORD *)a1 = v8;
  v12 = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a4 + 1);
  *(_OWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 40) = *a2;
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_7:
    v11 = (unsigned __int8 *)MEMORY[0x19AEA534C](v10);
    goto LABEL_8;
  }
  if (__stxr(1u, v10))
    goto LABEL_7;
LABEL_8:
  v14 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v14 && v14[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v14, 4u, a4, " runSynchronouslyOnTarget ", v8);
  atomic_store(a3, (unsigned __int8 *)(v8 + 113));
  v15 = __ldxr(v10);
  if (v15 == 1)
  {
    if (!__stlxr(0, v10))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::seekToTime(WTF::MediaTime const&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E335D588;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::seekToTime(WTF::MediaTime const&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E335D588;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::NativePromiseBase *WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::seekToTime(WTF::MediaTime const&)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::MediaTime *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  __int128 v13;
  _BYTE *v14;
  WTF::NativePromiseBase *result;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a2 + 112);
  v4 = *(unsigned int *)(v3 + 68);
  if ((_DWORD)v4)
  {
    v5 = (WTF::MediaTime *)(a1 + 56);
    v6 = *(uint64_t **)(v3 + 56);
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      v9 = *(_QWORD *)(*v6 + 384);
      v10 = *(_QWORD *)(*v6 + 392);
      *(_QWORD *)&v18 = "SourceBuffer";
      *((_QWORD *)&v18 + 1) = 13;
      *(_QWORD *)&v19 = "seekToTime";
      *((_QWORD *)&v19 + 1) = v10;
      if (*(_BYTE *)(v9 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v18, v5);
      (*(void (**)(_QWORD, WTF::MediaTime *))(**(_QWORD **)(v8 + 120) + 272))(*(_QWORD *)(v8 + 120), v5);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v18 = 0uLL;
  *(_QWORD *)&v19 = "seekToTime";
  *((_QWORD *)&v19 + 1) = 0;
  v11 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v11 + 8) = 1;
  v12 = (unsigned int *)(v11 + 8);
  *(_QWORD *)v11 = off_1E3207198;
  v13 = v19;
  *(_OWORD *)(v11 + 16) = v18;
  *(_OWORD *)(v11 + 32) = v13;
  *(_BYTE *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = v11 + 88;
  *(_QWORD *)(v11 + 80) = 1;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_WORD *)(v11 + 112) = 0;
  v14 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v14 && v14[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v14, 4u, "creating ", v11);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v11, (WTF::Logger::LogSiteIdentifier *)&v18);
  v18 = 0uLL;
  *(_QWORD *)&v19 = "operator()";
  *((_QWORD *)&v19 + 1) = 0;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>((unsigned __int8 *)v11, v2, (WTF::Logger::LogSiteIdentifier *)&v18);
  do
  {
    v16 = __ldaxr(v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v12));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)(v11 + 8));
    return (WTF::NativePromiseBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  return result;
}

WTF::NativePromiseBase *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(unsigned __int8 *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _BYTE *v21;
  int v22;
  unsigned int *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;
  unsigned int *v48;
  unsigned int *v49;
  __int128 v50;
  const char *v51;
  uint64_t v52;
  WTF::NativePromiseBase *v53;

  v5 = (uint64_t)a1;
  v6 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    v7 = v6 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_8;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 48);
LABEL_8:
  v11 = *(_DWORD *)(v5 + 64);
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  a1 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 48));
LABEL_13:
  LOBYTE(v44) = v11 != 0;
  v13 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v13 && v13[16] >= 4u)
    v13 = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [17],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [12],BOOL,char [2]>((uint64_t)v13, 4u, a3, " invoking chainTo() [", v5, " chainedPromise:", (uint64_t)v6, " isSettled:", (uint64_t)&v44, "]");
  if (v6)
  {
    v14 = v6 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v6 + 2);
      v13 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v17 = atomic_load((unsigned __int8 *)(v5 + 113));
  v18 = *(_QWORD *)a2;
  v19 = (unsigned __int8 *)(*(_QWORD *)a2 + 48);
  if (__ldaxr(v19))
  {
    __clrex();
LABEL_24:
    v13 = (unsigned __int8 *)MEMORY[0x19AEA534C](v19);
    goto LABEL_25;
  }
  if (__stxr(1u, v19))
    goto LABEL_24;
LABEL_25:
  v21 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
  if (*v21 && v21[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v21, 4u, a3, " runSynchronouslyOnTarget ", v18);
  atomic_store(v17, (unsigned __int8 *)(v18 + 113));
  v22 = __ldxr(v19);
  if (v22 == 1)
  {
    if (!__stlxr(0, v19))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_33:
  v23 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  v24 = *(_OWORD *)(a2 + 24);
  v45 = *(_OWORD *)(a2 + 8);
  v46 = v24;
  v47 = *(_BYTE *)(a2 + 40);
  v25 = WTF::fastMalloc((WTF *)0x50);
  v26 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v26 = off_1E335DF08;
  *(_QWORD *)(v26 + 8) = v23;
  v44 = 0;
  v27 = v45;
  v28 = v46;
  *(_BYTE *)(v26 + 48) = v47;
  *(_OWORD *)(v26 + 16) = v27;
  *(_OWORD *)(v26 + 32) = v28;
  *(_DWORD *)(v25 + 8) = 1;
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = "chainTo";
  *(_QWORD *)(v25 + 48) = 0;
  *(_WORD *)(v25 + 56) = 0;
  *(_QWORD *)v25 = &off_1E32059B0;
  v29 = (unsigned int *)(v5 + 8);
  *(_QWORD *)(v25 + 64) = 0;
  *(_QWORD *)(v25 + 72) = v26;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 + 1, v29));
  v50 = 0uLL;
  v51 = "chainTo";
  v52 = 0;
  v48 = (unsigned int *)v5;
  v49 = 0;
  v53 = (WTF::NativePromiseBase *)v25;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v5, &v53, (WTF::Logger::LogSiteIdentifier *)&v50);
  v31 = (unsigned int *)v53;
  v53 = 0;
  if (v31)
  {
    v32 = v31 + 2;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v31 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
    }
  }
  v35 = v49;
  v49 = 0;
  if (v35)
  {
    v36 = v35 + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v35 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
    }
  }
  v39 = v48;
  v48 = 0;
  if (v39)
  {
    v40 = v39 + 2;
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 16))(v39);
    }
  }
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v44);
}

_QWORD *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E335DF08;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E335DF08;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

WTF *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&>::call(uint64_t a1, char *a2)
{
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1}::operator()<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>((WTF::NativePromiseBase *)(a1 + 8), a2);
}

WTF *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1}::operator()<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(WTF::NativePromiseBase *a1, char *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  int v11;
  int v12;
  WTF *result;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v2 = (uint64_t *)a1;
  if (a2[1])
  {
    v17 = 0;
    v18 = 0;
    v19 = "operator()";
    v20 = 0;
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v5 = (unsigned __int8 *)(v3 + 48);
      if (__ldaxr((unsigned __int8 *)(v3 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v5))
      {
        goto LABEL_11;
      }
      a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v3 + 48);
LABEL_11:
      v11 = *(_DWORD *)(v3 + 64);
      v12 = __ldxr(v5);
      if (v12 == 1)
      {
        if (!__stlxr(0, v5))
        {
LABEL_16:
          v10 = *v2;
          if (!v11)
            return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v10, a2, (WTF::Logger::LogSiteIdentifier *)&v17);
          goto LABEL_26;
        }
      }
      else
      {
        __clrex();
      }
      a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_16;
    }
    goto LABEL_8;
  }
  v17 = 0;
  v18 = 0;
  v19 = "operator()";
  v20 = 0;
  v7 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
LABEL_8:
    v10 = 0;
    goto LABEL_26;
  }
  v8 = (unsigned __int8 *)(v7 + 48);
  if (__ldaxr((unsigned __int8 *)(v7 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_20;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v7 + 48);
LABEL_20:
  v14 = *(_DWORD *)(v7 + 64);
  v15 = __ldxr(v8);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v8))
LABEL_24:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v10 = *v2;
  if (!v14)
    return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v10, (WTF::Logger::LogSiteIdentifier *)&v17);
LABEL_26:
  result = (WTF *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v16 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v16 = 0;
  if (v16)
    return (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, (WTF::Logger::LogSiteIdentifier *)&v17, " ignored already resolved or rejected ", v10);
  return result;
}

WTF::NativePromiseBase *WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer(WTF::NativePromiseBase *a1)
{
  WTF::NativePromiseBase *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v21[4];

  v1 = a1;
  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_37;
  v3 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v2 + 48);
LABEL_6:
  v5 = *(_DWORD *)(v2 + 64);
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v5)
        goto LABEL_31;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v5)
    goto LABEL_31;
LABEL_12:
  v7 = *(_QWORD *)v1;
  v8 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
  if (*v8 && v8[16] >= 4u)
    v8 = (unsigned __int8 *)WTF::Logger::log<char [58],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, "Non settled AutoRejectProducer, reject with default value", v7);
  v9 = *(_QWORD *)v1;
  v21[0] = 0;
  v21[1] = 0;
  v21[2] = "~NativePromiseProducer";
  v21[3] = 0;
  if (!v9)
  {
    v12 = 0;
    goto LABEL_27;
  }
  v10 = (unsigned __int8 *)(v9 + 48);
  if (__ldaxr((unsigned __int8 *)(v9 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_21;
  }
  v8 = (unsigned __int8 *)MEMORY[0x19AEA534C](v9 + 48);
LABEL_21:
  v13 = *(_DWORD *)(v9 + 64);
  v14 = __ldxr(v10);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v10))
LABEL_25:
    v8 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  v12 = *(_QWORD *)v1;
  if (!v13)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*(_QWORD *)v1, (char *)v1 + 40, (WTF::Logger::LogSiteIdentifier *)v21);
    goto LABEL_31;
  }
LABEL_27:
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v15 && v15[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v15, 4u, (WTF::Logger::LogSiteIdentifier *)v21, " ignored already resolved or rejected ", v12);
LABEL_31:
  if (!*(_QWORD *)v1)
  {
LABEL_37:
    *(_QWORD *)v1 = 0;
    return v1;
  }
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*(_QWORD *)v1);
  v16 = *(unsigned int **)v1;
  *(_QWORD *)v1 = 0;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
    }
  }
  return v1;
}

uint64_t WTF::Logger::log<char [58],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t buf[4];
  _BYTE v45[12];
  int v46;
  WTF::StringImpl *v47[3];

  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v43 = 0;
    goto LABEL_76;
  }
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &v43);
  if (!v43)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v45 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&v45[4], a3);
              v46 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, v47);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v45[4];
              if (*(_QWORD *)&v45[4])
                **(_DWORD **)&v45[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
              v30 = v47[0];
              if (v47[0])
                *(_DWORD *)v47[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v47[0];
              v47[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v45[4];
              *(_QWORD *)&v45[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::setLogIdentifier(void const*)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(a2 + 256) = v2;
  v3 = *(_QWORD *)(a2 + 248);
  v4[0] = "MediaSource";
  v4[1] = 12;
  v4[2] = "setLogIdentifier";
  v4[3] = v2;
  if (*(_BYTE *)(v3 + 12))
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v4);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaSourceClientImpl::failedToCreateRenderer(WebCore::MediaSourcePrivateClient::RendererType)::{lambda(WebCore::MediaSource &)#1},void,WebCore::MediaSource &>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const char *v7;
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = "audio";
      if (*((_DWORD *)result + 2) == 1)
        v4 = "video";
      v11 = "MediaSource ";
      v12 = 12;
      v9 = v4;
      v10 = 5;
      v7 = " renderer creation failed.";
      v8 = 26;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v11, (uint64_t)&v9, (uint64_t)&v7, &v6);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x195447630);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)(v3 - 96) + 248))(v3 - 96, 1, 2, &v6, 0);
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD v25[2];

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v25[0];
        if (v25[0])
        {
          v18 = (char *)(v25[0] + 20);
          *(_DWORD *)v25[0] = 2;
          *(_DWORD *)(v17 + 4) = v15;
          *(_QWORD *)(v17 + 8) = v17 + 20;
          *(_DWORD *)(v17 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v18, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_10;
      }
LABEL_12:
      v17 = 0;
      goto LABEL_10;
    }
LABEL_11:
    v17 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_10;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v25[0];
  if (v25[0])
  {
    v19 = v25[0] + 20;
    *(_DWORD *)v25[0] = 2;
    *(_DWORD *)(v17 + 4) = v15;
    *(_QWORD *)(v17 + 8) = v17 + 20;
    *(_DWORD *)(v17 + 16) = 0;
    v21 = a3;
    v22 = a4;
    WTF::StringView::getCharacters<char16_t>(&v21, (char *)(v17 + 20));
    v20 = (char *)(v19 + 2 * v22);
    v23 = a5;
    v24 = a6;
    WTF::StringView::getCharacters<char16_t>(&v23, v20);
    v25[0] = a7;
    v25[1] = a8;
    result = (uint64_t)WTF::StringView::getCharacters<char16_t>(v25, &v20[2 * v24]);
  }
LABEL_10:
  *a9 = v17;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(char *__dst, char *a2, uint64_t a3, char *__src, uint64_t a5, char *a6, uint64_t a7)
{
  int v11;
  char *v13;
  char *result;
  char *v15;
  unsigned __int128 *v16;
  unsigned __int128 v17;
  char v18;
  char *v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  char *v22;
  char *v23;
  unsigned __int128 v24;
  char v25;
  char v26;

  v11 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
        *__dst = *a2;
      else
        memcpy(__dst, a2, a3);
    }
  }
  else
  {
    v15 = __dst;
    if (a3 >= 0x10)
    {
      v15 = &__dst[a3 & 0xFFFFFFF0];
      v16 = (unsigned __int128 *)__dst;
      do
      {
        v17 = (unsigned __int128)vld2q_s8(a2);
        a2 += 32;
        *v16++ = v17;
      }
      while (v16 != (unsigned __int128 *)v15);
    }
    while (v15 != &__dst[a3])
    {
      v18 = *a2;
      a2 += 2;
      *v15++ = v18;
    }
  }
  v13 = &__dst[v11];
  if ((a5 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a5)
    {
      if ((_DWORD)a5 == 1)
        *v13 = *__src;
      else
        memcpy(v13, __src, a5);
    }
  }
  else
  {
    if (a5 < 0x10)
    {
      v19 = v13;
    }
    else
    {
      v19 = &v13[a5 & 0xFFFFFFF0];
      v20 = (unsigned __int128 *)v13;
      do
      {
        v21 = (unsigned __int128)vld2q_s8(__src);
        __src += 32;
        *v20++ = v21;
      }
      while (v20 != (unsigned __int128 *)v19);
    }
    while (v19 != &v13[a5])
    {
      v26 = *__src;
      __src += 2;
      *v19++ = v26;
    }
  }
  result = &v13[a5];
  if ((a7 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a7)
    {
      if ((_DWORD)a7 == 1)
        *result = *a6;
      else
        return (char *)memcpy(result, a6, a7);
    }
  }
  else
  {
    v22 = &result[a7];
    if (a7 >= 0x10)
    {
      v23 = &result[a7 & 0xFFFFFFF0];
      do
      {
        v24 = (unsigned __int128)vld2q_s8(a6);
        a6 += 32;
        *(_OWORD *)result = v24;
        result += 16;
      }
      while (result != v23);
      result = v23;
    }
    while (result != v22)
    {
      v25 = *a6;
      a6 += 2;
      *result++ = v25;
    }
  }
  return result;
}

unsigned __int8 *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19SourceBufferPrivateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19SourceBufferPrivateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  int v15;
  WTF *v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  int *v20;
  uint64_t v21;
  int v22;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_20:
    v16 = *(WTF **)v2;
    if (v5)
    {
      memmove(v16, *(const void **)a2, 4 * v5);
      v17 = *((_DWORD *)v2 + 3);
      v16 = *(WTF **)v2;
    }
    else
    {
      v17 = 0;
    }
    v18 = *((unsigned int *)a2 + 3);
    if (v17 != (_DWORD)v18)
    {
      v19 = (_DWORD *)((char *)v16 + 4 * v17);
      v20 = (int *)(*(_QWORD *)a2 + 4 * v17);
      v21 = 4 * v18 - 4 * v17;
      do
      {
        v22 = *v20++;
        *v19++ = v22;
        v21 -= 4;
      }
      while (v21);
      v17 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)v2 + 3) = v17;
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_19;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_19:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_20;
  }
  if (!(v7 >> 30))
  {
    v8 = *(WTF **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = WTF::fastMalloc((WTF *)(4 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    if ((_DWORD)v9)
    {
      v12 = 4 * v9;
      v13 = (_DWORD *)v10;
      v14 = v8;
      do
      {
        v15 = *(_DWORD *)v14;
        v14 = (WTF *)((char *)v14 + 4);
        *v13++ = v15;
        v12 -= 4;
      }
      while (v12);
    }
    if (v8)
    {
      if ((WTF *)v10 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v8, v11);
    }
    goto LABEL_19;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MediaSourceHandle::SharedPrivate::SharedPrivate(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v23;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v6 = a2[34];
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_5:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v10 = *(_QWORD *)(v6 + 8);
  if (!v10)
  {
    v12 = 0;
    goto LABEL_22;
  }
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEA534C](v10);
LABEL_15:
  if (*(_QWORD *)(v10 + 24))
  {
    ++*(_QWORD *)(v10 + 16);
    v12 = v10;
  }
  else
  {
    v12 = 0;
  }
  v13 = __ldxr((unsigned __int8 *)v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_22:
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v6;
  v14 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_26:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v23 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v23 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        goto LABEL_38;
      goto LABEL_34;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    goto LABEL_38;
LABEL_34:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, a2);
LABEL_38:
  *(_BYTE *)(a1 + 48) = (*(uint64_t (**)(_QWORD *))(*a2 + 128))(a2);
  v21 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 56) = v21;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ManagedMediaSource::*&)(void),WebCore::ManagedMediaSource*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, _BYTE *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  _BYTE *v12;
  int v13;

  v6 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E335DEE0;
  v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 48) = 0;
  v8 = (unsigned __int8 *)(v6 + 48);
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = v6 + 104;
  *(_QWORD *)(v6 + 96) = 1;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_WORD *)(v6 + 128) = 0;
  v9 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v9 && v9[16] >= 4u)
    v9 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v9, 4u, "creating ", v6);
  *(_QWORD *)a1 = v6;
  v10 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 40) = *a2;
  if (__ldaxr(v8))
  {
    __clrex();
LABEL_7:
    v9 = (unsigned __int8 *)MEMORY[0x19AEA534C](v8);
    goto LABEL_8;
  }
  if (__stxr(1u, v8))
    goto LABEL_7;
LABEL_8:
  v12 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
  if (*v12 && v12[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v12, 4u, a3, " runSynchronouslyOnTarget ", v6);
  atomic_store(0, (unsigned __int8 *)(v6 + 129));
  v13 = __ldxr(v8);
  if (v13 == 1)
  {
    if (!__stlxr(0, v8))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return a1;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  char v24;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(a1);
  v5 = *(_DWORD *)(a1 + 124);
  if (v5)
  {
    v6 = *(uint64_t **)(a1 + 112);
    v7 = &v6[5 * v5];
    do
    {
      if (*v6)
      {
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(*v6);
        v8 = (unsigned int *)*v6;
        *v6 = 0;
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            atomic_store(1u, v8 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
          }
        }
      }
      else
      {
        *v6 = 0;
      }
      v6 += 5;
    }
    while (v6 != v7);
  }
  v12 = *(WTF **)(a1 + 112);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v12, v4);
  }
  v13 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v13)
  {
    v14 = *(unsigned int ***)(a1 + 88);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v20 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v20 && v20 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v20, v4);
  }
  v22 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E335D668[v22])(&v24, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t buf[4];
  _BYTE v45[12];
  int v46;
  WTF::StringImpl *v47[3];

  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v43 = 0;
    goto LABEL_76;
  }
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &v43);
  if (!v43)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v45 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&v45[4], a3);
              v46 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a4, v47);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v45[4];
              if (*(_QWORD *)&v45[4])
                **(_DWORD **)&v45[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
              v30 = v47[0];
              if (v47[0])
                *(_DWORD *)v47[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v47[0];
              v47[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v45[4];
              *(_QWORD *)&v45[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  char *v47;
  uint64_t v48;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint8_t buf[4];
  _BYTE v57[12];
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61[3];

  v61[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v47 = (char *)a4;
  WTF::String::String((WTF::String *)&v53, a4);
  v48 = a5;
  result = WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a5, &v52);
  if (v54)
  {
    v10 = *((_DWORD *)v54 + 1);
    if (v53)
      goto LABEL_3;
LABEL_91:
    v11 = 0;
    if (v52)
      goto LABEL_4;
LABEL_92:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!v53)
    goto LABEL_91;
LABEL_3:
  v11 = *((_DWORD *)v53 + 1);
  if (!v52)
    goto LABEL_92;
LABEL_4:
  v12 = *((_DWORD *)v52 + 1);
LABEL_5:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0 || (v15 & 1) != 0 || (result = (v10 + v14), __OFADD__(v10, v14))))
  {
    v55 = 0;
    goto LABEL_96;
  }
  if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_19;
  }
  if (v53)
  {
    v17 = *((_DWORD *)v53 + 4);
    v16 = (v17 >> 2) & 1;
    if (v52 && (v17 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v52)
    {
LABEL_18:
      v16 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v16 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v54, (uint64_t)v53, (uint64_t)v52, &v55);
  if (!v55)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v19 = v52;
  v52 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v53;
  v53 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v54;
  v54 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v50 ? (char *)v50 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v57 = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = (uint64_t)v50;
    v50 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v33 = *v31;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v58 = 0;
              WTF::String::String((WTF::String *)&v59, v47);
              v60 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(v48, v61);
              v50 = 0;
              v51 = 0;
              v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v51) = 3;
              v50 = v34;
              v35 = HIDWORD(v51);
              *((_DWORD *)v34 + 4 * HIDWORD(v51)) = *(_DWORD *)buf;
              v36 = *(_QWORD *)&v57[4];
              if (*(_QWORD *)&v57[4])
                **(_DWORD **)&v57[4] += 2;
              *((_QWORD *)v34 + 2 * v35 + 1) = v36;
              *((_DWORD *)v34 + 4 * (v35 + 1)) = v58;
              v37 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
              *((_DWORD *)v34 + 4 * (v35 + 2)) = v60;
              v38 = v61[0];
              if (v61[0])
                *(_DWORD *)v61[0] += 2;
              *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
              HIDWORD(v51) = v35 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v50);
              v39 = v50;
              if (HIDWORD(v51))
              {
                v40 = 16 * HIDWORD(v51);
                v41 = (WTF::StringImpl **)((char *)v50 + 8);
                do
                {
                  v42 = *v41;
                  *v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  v41 += 2;
                  v40 -= 16;
                }
                while (v40);
                v39 = v50;
              }
              if (v39)
              {
                v50 = 0;
                LODWORD(v51) = 0;
                WTF::fastFree(v39, v24);
              }
              v43 = v61[0];
              v61[0] = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = v59;
              v59 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = *(WTF::StringImpl **)&v57[4];
              *(_QWORD *)&v57[4] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v46 = __ldxr(v26);
          if (v46 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer(WTF::NativePromiseBase *a1)
{
  WTF::NativePromiseBase *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t result;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v44;
  int v45;
  int v46;
  _BYTE *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  WTF::Logger *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  __int128 buf;
  const char *v58;
  WTF::StringImpl *v59[3];

  v1 = a1;
  v59[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_101;
  v3 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v2 + 48);
LABEL_6:
  v5 = *(_DWORD *)(v2 + 80);
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (v5)
        goto LABEL_95;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v5)
    goto LABEL_95;
LABEL_12:
  v7 = *(_QWORD *)v1;
  v8 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
  if (!*v8)
    goto LABEL_79;
  v9 = v8;
  if (v8[16] < 4u)
    goto LABEL_79;
  WTF::String::String((WTF::String *)&v55, "Non settled AutoRejectProducer, reject with default value");
  result = WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(v7, &v54);
  if (!v55)
  {
    v11 = 0;
    if (v54)
      goto LABEL_16;
LABEL_108:
    v12 = 0;
    goto LABEL_17;
  }
  v11 = *((_DWORD *)v55 + 1);
  if (!v54)
    goto LABEL_108;
LABEL_16:
  v12 = *((_DWORD *)v54 + 1);
LABEL_17:
  if ((v12 | v11) < 0 || (result = (v11 + v12), __OFADD__(v11, v12)))
  {
    v56 = 0;
    goto LABEL_112;
  }
  if (v55)
  {
    v13 = *((_DWORD *)v55 + 4);
    v14 = (v13 >> 2) & 1;
    if (v54 && (v13 & 4) != 0)
      goto LABEL_22;
  }
  else
  {
    if (v54)
    {
LABEL_22:
      v14 = (*((unsigned __int8 *)v54 + 16) >> 2) & 1;
      goto LABEL_23;
    }
    v14 = 1;
  }
LABEL_23:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, (uint64_t)v55, (uint64_t)v54, &v56);
  if (v56)
  {
    v16 = v54;
    v54 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v55;
    v55 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *((_QWORD *)v9 + 4);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v19)
    {
      WTF::String::utf8();
      v21 = v52 ? (char *)v52 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v21;
      _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v19 = (uint64_t)v52;
      v52 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          v19 = WTF::fastFree((WTF *)v19, v20);
        else
          --*(_DWORD *)v19;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v23 = *v22;
        if ((v23 & 1) != 0)
          break;
        v24 = __ldaxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 | 1, v22))
          {
            v25 = WTF::Logger::observers((WTF::Logger *)v19);
            v26 = *(unsigned int *)(v25 + 12);
            if ((_DWORD)v26)
            {
              v27 = *(uint64_t **)v25;
              v28 = *(_QWORD *)v25 + 8 * v26;
              do
              {
                v29 = *v27;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), "Non settled AutoRejectProducer, reject with default value");
                LODWORD(v58) = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(v7, v59);
                v52 = 0;
                v53 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                LODWORD(v53) = 2;
                v52 = v30;
                v31 = HIDWORD(v53);
                *((_DWORD *)v30 + 4 * HIDWORD(v53)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = (_DWORD)v58;
                v33 = v59[0];
                if (v59[0])
                  *(_DWORD *)v59[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                HIDWORD(v53) = v31 + 2;
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, v9, 4, &v52);
                v34 = v52;
                if (HIDWORD(v53))
                {
                  v35 = 16 * HIDWORD(v53);
                  v36 = (WTF::StringImpl **)((char *)v52 + 8);
                  do
                  {
                    v37 = *v36;
                    *v36 = 0;
                    if (v37)
                    {
                      if (*(_DWORD *)v37 == 2)
                        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v37 -= 2;
                    }
                    v36 += 2;
                    v35 -= 16;
                  }
                  while (v35);
                  v34 = v52;
                }
                if (v34)
                {
                  v52 = 0;
                  LODWORD(v53) = 0;
                  WTF::fastFree(v34, v20);
                }
                v38 = v59[0];
                v59[0] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v28);
            }
            v40 = __ldxr(v22);
            if (v40 == 1)
            {
              if (!__stlxr(0, v22))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v8 = (unsigned __int8 *)v56;
    v56 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        v8 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v8, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v8 -= 2;
    }
LABEL_79:
    v41 = *(_QWORD *)v1;
    buf = 0uLL;
    v58 = "~NativePromiseProducer";
    v59[0] = 0;
    if (!v41)
    {
      v44 = 0;
      goto LABEL_91;
    }
    v42 = (unsigned __int8 *)(v41 + 48);
    if (__ldaxr((unsigned __int8 *)(v41 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v42))
    {
      goto LABEL_85;
    }
    v8 = (unsigned __int8 *)MEMORY[0x19AEA534C](v41 + 48);
LABEL_85:
    v45 = *(_DWORD *)(v41 + 80);
    v46 = __ldxr(v42);
    if (v46 == 1)
    {
      if (!__stlxr(0, v42))
      {
LABEL_90:
        v44 = *(_QWORD *)v1;
        if (!v45)
        {
          WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(*(_QWORD *)v1, (char *)v1 + 40, (WTF::Logger::LogSiteIdentifier *)&buf);
          goto LABEL_95;
        }
LABEL_91:
        v47 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
        if (*v47 && v47[16] >= 4u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v47, (WTF::Logger::LogSiteIdentifier *)&buf, v44);
LABEL_95:
        if (*(_QWORD *)v1)
        {
          WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(*(_QWORD *)v1);
          v48 = *(unsigned int **)v1;
          *(_QWORD *)v1 = 0;
          if (v48)
          {
            v49 = v48 + 2;
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              atomic_store(1u, v48 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 16))(v48);
            }
          }
          return (uint64_t)v1;
        }
LABEL_101:
        *(_QWORD *)v1 = 0;
        return (uint64_t)v1;
      }
    }
    else
    {
      __clrex();
    }
    v8 = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v42);
    goto LABEL_90;
  }
LABEL_112:
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::chainTo<WTF::MediaTime,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(WTF::MediaTime&&)#1},void,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E335D690;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::chainTo<WTF::MediaTime,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(WTF::MediaTime&&)#1},void,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E335D690;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<void WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::chainTo<WTF::MediaTime,WebCore::PlatformMediaError,16u>(WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(WTF::MediaTime&&)#1},void,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&>::call(WTF::NativePromiseBase *a1, uint64_t a2)
{
  WTF::NativePromiseBase *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int8 *result;
  int v15;
  int v16;
  BOOL v17;
  WTF::NativePromiseBase *v18;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WTF::Logger::LogSiteIdentifier *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  WTF::Lock *v30;
  char v31;
  char v32;

  v3 = a1;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (v4 != 1)
    {
      v23 = std::__throw_bad_variant_access[abi:sn180100]();
      return (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(v23, v24, v25);
    }
    v26 = 0;
    v27 = 0;
    v28 = "operator()";
    v29 = 0;
    v5 = *((_QWORD *)a1 + 1);
    if (!v5)
    {
      v11 = 0;
      goto LABEL_19;
    }
    v6 = (unsigned __int8 *)(v5 + 48);
    if (__ldaxr((unsigned __int8 *)(v5 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_13;
    }
    a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v5 + 48);
LABEL_13:
    v12 = *(_DWORD *)(v5 + 80);
    v13 = __ldxr(v6);
    if (v13 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_18:
        v11 = *((_QWORD *)v3 + 1);
        if (!v12)
          return (unsigned __int8 *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v11, (char *)a2, (WTF::Logger::LogSiteIdentifier *)&v26);
LABEL_19:
        result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
        if (!*result || result[16] < 4u)
          return result;
        return (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v26, v11);
      }
    }
    else
    {
      __clrex();
    }
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_18;
  }
  v26 = 0;
  v27 = 0;
  v28 = "operator()";
  v29 = 0;
  v8 = *((_QWORD *)a1 + 1);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_30;
  }
  v9 = (unsigned __int8 *)(v8 + 48);
  if (__ldaxr((unsigned __int8 *)(v8 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_24;
  }
  a1 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v8 + 48);
LABEL_24:
  v15 = *(_DWORD *)(v8 + 80);
  v16 = __ldxr(v9);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v9))
LABEL_28:
    a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v11 = *((_QWORD *)v3 + 1);
  if (!v15)
  {
    v18 = (WTF::NativePromiseBase *)(v11 + 48);
    v30 = (WTF::Lock *)(v11 + 48);
    v31 = 1;
    if (__ldaxr((unsigned __int8 *)(v11 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
LABEL_41:
      v20 = (_BYTE *)WTF::NativePromiseBase::logChannel(v18);
      if (*v20 && v20[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v20, 4u, (WTF::Logger::LogSiteIdentifier *)&v26, " resolving ", v11);
      v21 = *(unsigned int *)(v11 + 80);
      if ((_DWORD)v21 != -1)
        ((void (*)(char *, uint64_t))off_1E335D668[v21])(&v32, v11 + 56);
      *(_DWORD *)(v11 + 80) = -1;
      *(_OWORD *)(v11 + 56) = *(_OWORD *)a2;
      *(_DWORD *)(v11 + 72) = 0;
      *(_DWORD *)(v11 + 80) = 1;
      result = (unsigned __int8 *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(v11, (unsigned __int8 **)&v30);
      if (v31)
      {
        result = (unsigned __int8 *)v30;
        v22 = __ldxr((unsigned __int8 *)v30);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v30))
            return result;
        }
        else
        {
          __clrex();
        }
        return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
      }
      return result;
    }
    v18 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C]();
    goto LABEL_41;
  }
LABEL_30:
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
  if (*result)
    v17 = result[16] >= 4u;
  else
    v17 = 0;
  if (v17)
    return (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v26, v11);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint8_t buf[4];
  _BYTE v52[12];
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56[3];

  v56[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v48, " ignored already resolved or rejected ");
  v44 = a3;
  result = WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a3, &v47);
  if (v49)
  {
    v7 = *((_DWORD *)v49 + 1);
    if (v48)
      goto LABEL_3;
LABEL_91:
    v8 = 0;
    if (v47)
      goto LABEL_4;
LABEL_92:
    v9 = 0;
    goto LABEL_5;
  }
  v7 = 0;
  if (!v48)
    goto LABEL_91;
LABEL_3:
  v8 = *((_DWORD *)v48 + 1);
  if (!v47)
    goto LABEL_92;
LABEL_4:
  v9 = *((_DWORD *)v47 + 1);
LABEL_5:
  if ((v9 | v8) < 0
    || ((v10 = __OFADD__(v8, v9), v11 = v8 + v9, !v10) ? (v12 = 0) : (v12 = 1),
        v7 < 0 || (v12 & 1) != 0 || (result = (v7 + v11), __OFADD__(v7, v11))))
  {
    v50 = 0;
    goto LABEL_96;
  }
  if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v13 = 0;
    goto LABEL_19;
  }
  if (v48)
  {
    v14 = *((_DWORD *)v48 + 4);
    v13 = (v14 >> 2) & 1;
    if (v47 && (v14 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v47)
    {
LABEL_18:
      v13 = (*((unsigned __int8 *)v47 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v13 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v49, (uint64_t)v48, (uint64_t)v47, &v50);
  if (!v50)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v16 = v47;
  v47 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v48;
  v48 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v49;
  v49 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(NSObject **)(a1 + 32);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v20)
  {
    WTF::String::utf8();
    v22 = v45 ? (char *)v45 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v52 = v22;
    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v20 = (uint64_t)v45;
    v45 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        v20 = WTF::fastFree((WTF *)v20, v21);
      else
        --*(_DWORD *)v20;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v24 = *v23;
      if ((v24 & 1) != 0)
        break;
      v25 = __ldaxr(v23);
      if (v25 == v24)
      {
        if (!__stxr(v24 | 1, v23))
        {
          v26 = WTF::Logger::observers((WTF::Logger *)v20);
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)v26;
            v29 = *(_QWORD *)v26 + 8 * v27;
            do
            {
              v30 = *v28;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v53 = 0;
              WTF::String::String((WTF::String *)&v54, " ignored already resolved or rejected ");
              v55 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(v44, v56);
              v45 = 0;
              v46 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v46) = 3;
              v45 = v31;
              v32 = HIDWORD(v46);
              *((_DWORD *)v31 + 4 * HIDWORD(v46)) = *(_DWORD *)buf;
              v33 = *(_QWORD *)&v52[4];
              if (*(_QWORD *)&v52[4])
                **(_DWORD **)&v52[4] += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v53;
              v34 = v54;
              if (v54)
                *(_DWORD *)v54 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v55;
              v35 = v56[0];
              if (v56[0])
                *(_DWORD *)v56[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v46) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, 4, &v45);
              v36 = v45;
              if (HIDWORD(v46))
              {
                v37 = 16 * HIDWORD(v46);
                v38 = (WTF::StringImpl **)((char *)v45 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v36 = v45;
              }
              if (v36)
              {
                v45 = 0;
                LODWORD(v46) = 0;
                WTF::fastFree(v36, v21);
              }
              v40 = v56[0];
              v56[0] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v54;
              v54 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = *(WTF::StringImpl **)&v52[4];
              *(_QWORD *)&v52[4] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v42 -= 2;
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v29);
          }
          v43 = __ldxr(v23);
          if (v43 == 1)
          {
            if (!__stlxr(0, v23))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 88);
  if (v4 == (WTF::NativePromiseBase **)(result + 104))
  {
    v5 = *(unsigned int *)(result + 100);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 88) = result + 104;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 100);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 96) = 1;
  v6 = *(WTF **)(v3 + 112);
  v7 = *(_DWORD *)(v3 + 124);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E335D668[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E335D6A8[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E335D668[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335D668[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(uint64_t result, __int128 *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;
  _BOOL4 v15;
  __int128 *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;
  char v25;

  v4 = result;
  v5 = *(unsigned int *)(result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))off_1E335D668[v5])(&v23, result);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    v12 = *a3;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v12;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v21 = *a3;
  v6 = *((_QWORD *)a3 + 2);
  v22[0] = v6;
  v7 = a2 + 1;
  v8 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6 != -1 || (_DWORD)v8 != -1)
  {
    v10 = v6 == -1;
    if ((_DWORD)v6 == -1)
      v11 = -1;
    else
      v11 = v6;
    if ((_DWORD)v8 != -1)
      v10 = v11 == v8;
    if (v10)
    {
      return ((uint64_t (*)(__int128 *, __int128 *, __int128 *))off_1E335D6C0[v11])(&v23, &v21, a2);
    }
    else
    {
      v13 = v8 + 1;
      v15 = (v6 - 2) < 0xFFFFFFFD || v13 < 3;
      if (v15)
        v16 = &v21;
      else
        v16 = a2;
      if (!v15)
        a2 = &v21;
      v23 = *a2;
      v24 = *((_QWORD *)a2 + 2);
      if (v15)
        v17 = v7;
      else
        v17 = v22;
      *((_DWORD *)a2 + 4) = -1;
      if (v15)
        v18 = v22;
      else
        v18 = v7;
      v19 = *((unsigned int *)v16 + 4);
      if ((_DWORD)v19 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E335D6D0[v19])(&v25);
        *v17 = v19;
      }
      *v18 = -1;
      v20 = v24;
      if ((_DWORD)v24 != -1)
      {
        result = ((uint64_t (*)(char *, __int128 *, __int128 *))off_1E335D6D0[v24])(&v25, v16, &v23);
        *v18 = v20;
      }
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __n128 result;
  uint64_t v4;
  _BYTE v5[13];

  result = *(__n128 *)a2;
  v4 = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 5) = v4;
  *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)&v5[5];
  *a3 = *(_QWORD *)v5;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void WTF::Detail::CallableWrapper<WebCore::MediaSource::~MediaSource()::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  WebCore::HTMLMediaElement::userCancelledLoad(a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::MediaSource::setPrivateAndOpen(WTF::Ref<WebCore::MediaSourcePrivate,WTF::RawPtrTraits<WebCore::MediaSourcePrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaSourcePrivate>> &&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  return WebCore::HTMLMediaElement::mediaLoadingFailedFatally(a2, 5);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::MediaSource::setPrivateAndOpen(WTF::Ref<WebCore::MediaSourcePrivate,WTF::RawPtrTraits<WebCore::MediaSourcePrivate>,WTF::DefaultRefDerefTraits<WebCore::MediaSourcePrivate>> &&)::$_1,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, unsigned int *a2)
{
  return WebCore::HTMLMediaElement::setShouldDelayLoadEvent(a2, 0);
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E335D668[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " resolving ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E335D780[v10])(&v16, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 64) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 68) = v11;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64[3];

  v64[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v59, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v58, a1);
    if (v59)
    {
      v6 = *((_DWORD *)v59 + 1);
      if (v58)
      {
LABEL_8:
        v7 = *((_DWORD *)v58 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v60 = 0;
          goto LABEL_108;
        }
        if (v59)
        {
          v8 = *((_DWORD *)v59 + 4);
          v9 = (v8 >> 2) & 1;
          if (v58 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v58)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v59, (uint64_t)v58, &v60);
        if (v60)
        {
          v11 = v58;
          v58 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v59;
          v59 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v56 ? (char *)v56 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v62 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v56;
            v56 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v62[4], "destroying ");
                      v63 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v64, a1);
                      v56 = 0;
                      v57 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v57) = 2;
                      v56 = v25;
                      v26 = HIDWORD(v57);
                      *((_DWORD *)v25 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v62[4];
                      if (*(_QWORD *)&v62[4])
                        **(_DWORD **)&v62[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v63;
                      v28 = v64[0];
                      if (v64[0])
                        *(_DWORD *)v64[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v57) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v56);
                      v29 = v56;
                      if (HIDWORD(v57))
                      {
                        v30 = 16 * HIDWORD(v57);
                        v31 = (WTF::StringImpl **)((char *)v56 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v56;
                      }
                      if (v29)
                      {
                        v56 = 0;
                        LODWORD(v57) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v64[0];
                      v64[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v62[4];
                      *(_QWORD *)&v62[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v58)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 124);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 112);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 112);
  if (v45)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 88);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 88);
  if ((WTF *)(a1 + 104) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E335D780[v55])(buf, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint8_t buf[4];
  _BYTE v41[12];
  int v42;
  WTF::StringImpl *v43[3];

  v43[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v38, "creating ");
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v37, a2);
  if (!v38)
  {
    v5 = 0;
    if (v37)
      goto LABEL_3;
LABEL_72:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = *((_DWORD *)v38 + 1);
  if (!v37)
    goto LABEL_72;
LABEL_3:
  v6 = *((_DWORD *)v37 + 1);
LABEL_4:
  if ((v6 | v5) < 0 || (result = (v5 + v6), __OFADD__(v5, v6)))
  {
    v39 = 0;
    goto LABEL_76;
  }
  if (v38)
  {
    v7 = *((_DWORD *)v38 + 4);
    v8 = (v7 >> 2) & 1;
    if (v37 && (v7 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v37)
    {
LABEL_9:
      v8 = (*((unsigned __int8 *)v37 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v8 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (uint64_t)v38, (uint64_t)v37, &v39);
  if (!v39)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v10 = v37;
  v37 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v38;
  v38 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(NSObject **)(a1 + 32);
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v35 ? (char *)v35 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v41 = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = (uint64_t)v35;
    v35 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&v41[4], "creating ");
              v42 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v43, a2);
              v35 = 0;
              v36 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v36) = 2;
              v35 = v24;
              v25 = HIDWORD(v36);
              *((_DWORD *)v24 + 4 * HIDWORD(v36)) = *(_DWORD *)buf;
              v26 = *(_QWORD *)&v41[4];
              if (*(_QWORD *)&v41[4])
                **(_DWORD **)&v41[4] += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v42;
              v27 = v43[0];
              if (v43[0])
                *(_DWORD *)v43[0] += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v36) = v25 + 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, a1, 4, &v35);
              v28 = v35;
              if (HIDWORD(v36))
              {
                v29 = 16 * HIDWORD(v36);
                v30 = (WTF::StringImpl **)((char *)v35 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v35;
              }
              if (v28)
              {
                v35 = 0;
                LODWORD(v36) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v43[0];
              v43[0] = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = *(WTF::StringImpl **)&v41[4];
              *(_QWORD *)&v41[4] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  if (v15)
  {
    v5 = *((_DWORD *)v15 + 1);
    if (v14)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v14)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v14 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a1 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0) && (!v14 || (*((_BYTE *)v14 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v15, 60, v14, 62, a1);
  if (!*a1)
    goto LABEL_31;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = (uint64_t)v15;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      return WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E335D798[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  char *v46;
  uint64_t v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[4];
  _BYTE v55[12];
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v46 = (char *)a3;
  WTF::String::String((WTF::String *)&v51, a3);
  v47 = a4;
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v50, a4);
  if (v52)
  {
    v9 = *((_DWORD *)v52 + 1);
    if (v51)
      goto LABEL_3;
LABEL_91:
    v10 = 0;
    if (v50)
      goto LABEL_4;
LABEL_92:
    v11 = 0;
    goto LABEL_5;
  }
  v9 = 0;
  if (!v51)
    goto LABEL_91;
LABEL_3:
  v10 = *((_DWORD *)v51 + 1);
  if (!v50)
    goto LABEL_92;
LABEL_4:
  v11 = *((_DWORD *)v50 + 1);
LABEL_5:
  if ((v11 | v10) < 0
    || ((v12 = __OFADD__(v10, v11), v13 = v10 + v11, !v12) ? (v14 = 0) : (v14 = 1),
        v9 < 0 || (v14 & 1) != 0 || (result = (v9 + v13), __OFADD__(v9, v13))))
  {
    v53 = 0;
    goto LABEL_96;
  }
  if (v52 && (*((_BYTE *)v52 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_19;
  }
  if (v51)
  {
    v16 = *((_DWORD *)v51 + 4);
    v15 = (v16 >> 2) & 1;
    if (v50 && (v16 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v50)
    {
LABEL_18:
      v15 = (*((unsigned __int8 *)v50 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v15 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v52, (uint64_t)v51, (uint64_t)v50, &v53);
  if (!v53)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v18 = v50;
  v50 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v51;
  v51 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v52;
  v52 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v48 ? (char *)v48 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v55 = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v22 = (uint64_t)v48;
    v48 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, v46);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v59, v47);
              v48 = 0;
              v49 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v49) = 3;
              v48 = v33;
              v34 = HIDWORD(v49);
              *((_DWORD *)v33 + 4 * HIDWORD(v49)) = *(_DWORD *)buf;
              v35 = *(_QWORD *)&v55[4];
              if (*(_QWORD *)&v55[4])
                **(_DWORD **)&v55[4] += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v56;
              v36 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v58;
              v37 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v49) = v34 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, a1, 4, &v48);
              v38 = v48;
              if (HIDWORD(v49))
              {
                v39 = 16 * HIDWORD(v49);
                v40 = (WTF::StringImpl **)((char *)v48 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v48;
              }
              if (v38)
              {
                v48 = 0;
                LODWORD(v49) = 0;
                WTF::fastFree(v38, v23);
              }
              v42 = v59[0];
              v59[0] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v57;
              v57 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = *(WTF::StringImpl **)&v55[4];
              *(_QWORD *)&v55[4] = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v45 = __ldxr(v25);
          if (v45 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 88);
  if (v4 == (WTF::NativePromiseBase **)(result + 104))
  {
    v5 = *(unsigned int *)(result + 100);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 88) = result + 104;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 100);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 96) = 1;
  v6 = *(WTF **)(v3 + 112);
  v7 = *(_DWORD *)(v3 + 124);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::Logger::LogSiteIdentifier *v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  char v34;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E335D7C8;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v32[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v32);
      result = (unsigned __int8 *)v32[0];
      v32[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v32[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)v32, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 80);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 80) != 1)
      goto LABEL_65;
    LOBYTE(v32[0]) = 0;
    v33 = -1;
    v24 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E335D7A8[v24])(&v34, v32, a2 + 56);
      v33 = v24;
    }
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
        if (v33 != -1)
          ((void (*)(char *, _QWORD *))off_1E335D798[v33])(&v34, v32);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
LABEL_65:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(v27, v28, v29, v30);
  }
  v31 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v31 + 16))(v32, v31);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v32);
  if (v33 != -1)
    ((void (*)(char *, _QWORD *))off_1E335D798[v33])(&v34, v32);
  v33 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_60:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  WTF::Logger::LogSiteIdentifier *v50;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __int128 buf;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78[3];

  v78[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v59, "ThenCallback disconnected from ");
  v49 = a2;
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v58, a2);
  WTF::String::String((WTF::String *)&v57, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v55, " callSite:");
  v50 = a4;
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v53, "]");
  v51 = v58;
  v65 = v57;
  *(_QWORD *)&buf = v59;
  v63 = v55;
  v64 = v56;
  v61 = v53;
  v62 = v54;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v51, (uint64_t *)&v65, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, &v60);
  if (v60)
  {
    v9 = v53;
    v53 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v54;
    v54 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v55;
    v55 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v56;
    v56 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v57;
    v57 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v58;
    v58 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v59;
    v59 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v17)
    {
      WTF::String::utf8();
      v19 = v51 ? (char *)v51 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v19;
      _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v17 = (uint64_t)v51;
      v51 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          v17 = WTF::fastFree((WTF *)v17, v18);
        else
          --*(_DWORD *)v17;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v21 = *v20;
        if ((v21 & 1) != 0)
          break;
        v22 = __ldaxr(v20);
        if (v22 == v21)
        {
          if (!__stxr(v21 | 1, v20))
          {
            v23 = WTF::Logger::observers((WTF::Logger *)v17);
            v24 = *(unsigned int *)(v23 + 12);
            if ((_DWORD)v24)
            {
              v25 = *(uint64_t **)v23;
              v48 = *(_QWORD *)v23 + 8 * v24;
              do
              {
                v26 = *v25;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), "ThenCallback disconnected from ");
                v67 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v68, v49);
                v69 = 0;
                WTF::String::String((WTF::String *)&v70, " aborting [callback:");
                v71 = 0;
                WTF::LogArgument<void const*>::toString();
                v73 = 0;
                WTF::String::String((WTF::String *)&v74, " callSite:");
                v75 = 0;
                WTF::Logger::LogSiteIdentifier::toString(v50);
                v77 = 0;
                WTF::String::String((WTF::String *)v78, "]");
                v51 = 0;
                v52 = 0;
                v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v52) = 7;
                v51 = v27;
                v28 = HIDWORD(v52);
                *((_DWORD *)v27 + 4 * HIDWORD(v52)) = buf;
                v29 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                *((_DWORD *)v27 + 4 * (v28 + 1)) = v67;
                v30 = v68;
                if (v68)
                  *(_DWORD *)v68 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                *((_DWORD *)v27 + 4 * (v28 + 2)) = v69;
                v31 = v70;
                if (v70)
                  *(_DWORD *)v70 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
                *((_DWORD *)v27 + 4 * (v28 + 3)) = v71;
                v32 = v72;
                if (v72)
                  *(_DWORD *)v72 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
                *((_DWORD *)v27 + 4 * (v28 + 4)) = v73;
                v33 = v74;
                if (v74)
                  *(_DWORD *)v74 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
                *((_DWORD *)v27 + 4 * (v28 + 5)) = v75;
                v34 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 5) + 1) = v34;
                *((_DWORD *)v27 + 4 * (v28 + 6)) = v77;
                v35 = v78[0];
                if (v78[0])
                  *(_DWORD *)v78[0] += 2;
                *((_QWORD *)v27 + 2 * (v28 + 6) + 1) = v35;
                HIDWORD(v52) = v28 + 7;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 4, &v51);
                v36 = v51;
                if (HIDWORD(v52))
                {
                  v37 = 16 * HIDWORD(v52);
                  v38 = (WTF::StringImpl **)((char *)v51 + 8);
                  do
                  {
                    v39 = *v38;
                    *v38 = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2)
                        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                      else
                        *(_DWORD *)v39 -= 2;
                    }
                    v38 += 2;
                    v37 -= 16;
                  }
                  while (v37);
                  v36 = v51;
                }
                if (v36)
                {
                  v51 = 0;
                  LODWORD(v52) = 0;
                  WTF::fastFree(v36, v18);
                }
                v40 = v78[0];
                v78[0] = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = v76;
                v76 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = v74;
                v74 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v72;
                v72 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v70;
                v70 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v68;
                v68 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                ++v25;
              }
              while (v25 != (uint64_t *)v48);
            }
            v47 = __ldxr(v20);
            if (v47 == 1)
            {
              if (!__stlxr(0, v20))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v60;
    v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E335D7C8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335D7C8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::Logger::LogSiteIdentifier *v21;
  _QWORD v22[2];
  int v23;
  char v24;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v22[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v22, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 80);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 80) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v22, v15);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
      if (v23 != -1)
        ((void (*)(char *, _QWORD *))off_1E335D798[v23])(&v24, v22);
      v23 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(v19, v20, v21);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 80) != 1)
    goto LABEL_46;
  LOBYTE(v22[0]) = 0;
  v23 = -1;
  v17 = *(unsigned int *)(v10 + 72);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E335D7A8[v17])(&v24, v22, v10 + 56);
    v23 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
  if (v23 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E335D798[v23])(&v24, v22);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E335D780[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E335D7E0[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E335D780[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[16];
  int v20;
  _BYTE v21[16];
  int v22;
  char v23;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 == -1)
      {
        v8 = *(_DWORD *)(a2 + 16);
        if (v8 == -1)
        {
LABEL_41:
          if (v20 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E335D798[v20])(v21, v19);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E335D7A8[v7])(v21, v19, a3);
        v20 = v7;
        v8 = *((_DWORD *)v6 + 4);
        if (v8 != -1 && (_DWORD)v7 == v8)
        {
          result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E335D7F8[v7])(v21, v19, v6);
          goto LABEL_41;
        }
        if ((_DWORD)v7 != 1)
        {
          v14 = v19;
LABEL_32:
          v21[0] = 0;
          v22 = -1;
          if (v8 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335D7A8[v8])(&v23, v21, v6);
            v22 = v8;
            v15 = *((unsigned int *)v6 + 4);
            if ((_DWORD)v15 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E335D798[v15])(&v23, v6);
          }
          *((_DWORD *)v6 + 4) = -1;
          v16 = *((unsigned int *)v14 + 4);
          if ((_DWORD)v16 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335D808[v16])(&v23, v6, v14);
            *((_DWORD *)v6 + 4) = v16;
            v17 = *((unsigned int *)v14 + 4);
            if ((_DWORD)v17 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E335D798[v17])(&v23, v14);
          }
          *((_DWORD *)v14 + 4) = -1;
          v18 = v22;
          if (v22 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335D808[v22])(&v23, v14, v21);
            *((_DWORD *)v14 + 4) = v18;
            if (v22 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E335D798[v22])(&v23, v21);
          }
          goto LABEL_41;
        }
      }
      v10 = v19;
      if (v8 == 1)
        v11 = 1;
      else
        v11 = v7;
      if (v8 == 1)
        v12 = v19;
      else
        v12 = v6;
      if (v8 == 1)
        v10 = v6;
      v13 = v8 == -1;
      if (v8 == -1)
        v8 = -1;
      else
        v8 = v11;
      if (v13)
        v14 = v19;
      else
        v14 = v12;
      if (!v13)
        v6 = v10;
      goto LABEL_32;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E335D780[v5])(v21, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 16) = -1;
  v9 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v9 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E335D7A8[v9])(v21, v4, a3);
    *(_DWORD *)(v4 + 16) = v9;
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335D780[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_9MediaTimeELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_9MediaTimeELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_9MediaTimeELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::all(WTF::Vector<WTF::Ref<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)#1},void,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E335D828;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::AllPromiseProducer,(WTF::DestructionThread)0>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::all(WTF::Vector<WTF::Ref<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)#1},void,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335D828;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::AllPromiseProducer,(WTF::DestructionThread)0>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::NativePromiseBase *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::all(WTF::Vector<WTF::Ref<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)#1},void,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &>::call(WTF::NativePromiseBase *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 v19;
  int v20;
  int v21;
  void *v22;
  unsigned __int8 *v23;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v28;
  _BYTE *v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  _BYTE *v40;
  BOOL v41;
  uint64_t *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  WTF::Lock *v52;
  uint64_t v53;
  char v54;

  v3 = a2;
  v4 = *((_DWORD *)a2 + 4);
  if (v4 != 1)
  {
    if (v4)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_109;
    }
    v6 = *((_QWORD *)result + 1);
    v5 = *((_QWORD *)result + 2);
    v7 = (unsigned __int8 *)(v6 + 4);
    if (__ldaxr((unsigned __int8 *)(v6 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
LABEL_9:
      if (!*(_QWORD *)(v6 + 24))
        goto LABEL_103;
      if (v5 < *(unsigned int *)(v6 + 20))
      {
        v10 = *(_QWORD *)(v6 + 8) + 24 * v5;
        if (*(_BYTE *)(v10 + 16))
        {
          v11 = *v3;
          *(_QWORD *)(v10 + 5) = *(uint64_t *)((char *)v3 + 5);
          *(_QWORD *)v10 = v11;
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v3;
          *(_BYTE *)(v10 + 16) = 1;
        }
        v16 = *(_QWORD *)(v6 + 32) - 1;
        *(_QWORD *)(v6 + 32) = v16;
        if (v16)
          goto LABEL_103;
        v12 = *(uint64_t **)(v6 + 24);
        v3 = *(uint64_t **)(v6 + 8);
        v13 = (unsigned __int8 *)*(unsigned int *)(v6 + 20);
        *(_QWORD *)(v6 + 8) = 0;
        *(_QWORD *)(v6 + 16) = 0;
        v52 = 0;
        v53 = 0;
        if (!(_DWORD)v13)
        {
LABEL_43:
          v48 = 0;
          v49 = 0;
          v50 = "resolve";
          v51 = 0;
          v25 = *v12;
          if (!*v12)
          {
            v28 = 0;
            goto LABEL_82;
          }
          v26 = (unsigned __int8 *)(v25 + 48);
          if (__ldaxr((unsigned __int8 *)(v25 + 48)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v26))
          {
            goto LABEL_76;
          }
          result = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v25 + 48);
LABEL_76:
          v38 = *(_DWORD *)(v25 + 80);
          v39 = __ldxr(v26);
          if (v39 == 1)
          {
            if (!__stlxr(0, v26))
            {
LABEL_81:
              v28 = *v12;
              if (!v38)
              {
                WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::resolve<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::enable_if<true,void>>(*v12, (uint64_t *)&v52, (WTF::Logger::LogSiteIdentifier *)&v48);
                goto LABEL_89;
              }
LABEL_82:
              v40 = (_BYTE *)WTF::NativePromiseBase::logChannel(result);
              if (*v40)
                v41 = v40[16] >= 4u;
              else
                v41 = 0;
              if (v41)
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v40, (WTF::Logger::LogSiteIdentifier *)&v48, v28);
LABEL_89:
              result = v52;
              if (v52)
                result = (WTF::NativePromiseBase *)WTF::fastFree(v52, v22);
              if (v3)
                result = (WTF::NativePromiseBase *)WTF::fastFree((WTF *)v3, v22);
              v42 = *(uint64_t **)(v6 + 24);
              *(_QWORD *)(v6 + 24) = 0;
              if (v42)
              {
                if (*v42)
                {
                  WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(*v42);
                  v43 = (unsigned int *)*v42;
                  *v42 = 0;
                  if (v43)
                  {
                    v44 = v43 + 2;
                    do
                    {
                      v45 = __ldaxr(v44);
                      v46 = v45 - 1;
                    }
                    while (__stlxr(v46, v44));
                    if (!v46)
                    {
                      atomic_store(1u, v43 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
                    }
                  }
                }
                else
                {
                  *v42 = 0;
                }
                result = (WTF::NativePromiseBase *)v42;
                goto LABEL_102;
              }
              goto LABEL_103;
            }
          }
          else
          {
            __clrex();
          }
          result = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v26);
          goto LABEL_81;
        }
        if (!(v13 >> 28))
        {
          result = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)(16 * (_QWORD)v13));
          LODWORD(v53) = (_DWORD)v13;
          v52 = result;
          if (*((_BYTE *)v3 + 16))
          {
            v17 = 0;
            v18 = v3;
            while (1)
            {
              v19 = *(_OWORD *)v18;
              v18 += 3;
              *((_OWORD *)result + v17) = v19;
              if (v18 == &v3[3 * v13])
                break;
              ++v17;
              if (!*((_BYTE *)v18 + 16))
                goto LABEL_28;
            }
            HIDWORD(v53) = v17 + 1;
            goto LABEL_43;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
      }
LABEL_109:
      __break(0xC471u);
      JUMPOUT(0x19544CBACLL);
    }
    result = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v6 + 4);
    goto LABEL_9;
  }
  v6 = *((_QWORD *)result + 1);
  v7 = (unsigned __int8 *)(v6 + 4);
  if (__ldaxr((unsigned __int8 *)(v6 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_15;
  }
  result = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v6 + 4);
LABEL_15:
  v12 = *(uint64_t **)(v6 + 24);
  if (!v12)
    goto LABEL_103;
  v48 = 0;
  v49 = 0;
  v50 = "reject";
  v51 = 0;
  v2 = *v12;
  if (!*v12)
  {
    v15 = 0;
LABEL_37:
    result = (WTF::NativePromiseBase *)WTF::NativePromiseBase::logChannel(result);
    if (*(_BYTE *)result && *((unsigned __int8 *)result + 16) >= 4u)
      result = (WTF::NativePromiseBase *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v48, v15);
    goto LABEL_60;
  }
  v13 = (unsigned __int8 *)(v2 + 48);
  if (!__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
LABEL_29:
    if (!__stxr(1u, v13))
      goto LABEL_31;
    goto LABEL_30;
  }
  __clrex();
LABEL_30:
  result = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v13);
LABEL_31:
  v20 = *(_DWORD *)(v2 + 80);
  v21 = __ldxr(v13);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v13))
LABEL_35:
    result = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
  v15 = *v12;
  if (v20)
    goto LABEL_37;
  v23 = (unsigned __int8 *)(v15 + 48);
  v52 = (WTF::Lock *)(v15 + 48);
  LOBYTE(v53) = 1;
  if (__ldaxr((unsigned __int8 *)(v15 + 48)))
  {
    __clrex();
LABEL_48:
    v23 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_49;
  }
  if (__stxr(1u, v23))
    goto LABEL_48;
LABEL_49:
  v29 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
  if (*v29 && v29[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v29, (WTF::Logger::LogSiteIdentifier *)&v48, " rejecting ", v15);
  v30 = *(_BYTE *)v3;
  v31 = *(unsigned int *)(v15 + 80);
  if ((_DWORD)v31 != -1)
    ((void (*)(char *, uint64_t))off_1E335D780[v31])(&v54, v15 + 56);
  *(_BYTE *)(v15 + 56) = v30;
  *(_DWORD *)(v15 + 72) = 1;
  *(_DWORD *)(v15 + 80) = 1;
  result = (WTF::NativePromiseBase *)WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(v15, (unsigned __int8 **)&v52);
  if ((_BYTE)v53)
  {
    result = v52;
    v32 = __ldxr((unsigned __int8 *)v52);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v52))
        goto LABEL_60;
    }
    else
    {
      __clrex();
    }
    result = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow(result);
  }
LABEL_60:
  v33 = *(uint64_t **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = 0;
  if (v33)
  {
    if (*v33)
    {
      WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(*v33);
      v34 = (unsigned int *)*v33;
      *v33 = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
        }
      }
    }
    else
    {
      *v33 = 0;
    }
    result = (WTF::NativePromiseBase *)WTF::fastFree((WTF *)v33, v22);
  }
  if (*(_DWORD *)(v6 + 16))
  {
    if (*(_DWORD *)(v6 + 20))
      *(_DWORD *)(v6 + 20) = 0;
    result = *(WTF::NativePromiseBase **)(v6 + 8);
    if (result)
    {
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
LABEL_102:
      result = (WTF::NativePromiseBase *)WTF::fastFree(result, v22);
    }
  }
LABEL_103:
  v47 = __ldxr(v7);
  if (v47 != 1)
  {
    __clrex();
    return (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  if (__stlxr(0, v7))
    return (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint8_t buf[4];
  _BYTE v52[12];
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56[3];

  v56[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v48, " ignored already resolved or rejected ");
  v44 = a3;
  result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v47, a3);
  if (v49)
  {
    v7 = *((_DWORD *)v49 + 1);
    if (v48)
      goto LABEL_3;
LABEL_91:
    v8 = 0;
    if (v47)
      goto LABEL_4;
LABEL_92:
    v9 = 0;
    goto LABEL_5;
  }
  v7 = 0;
  if (!v48)
    goto LABEL_91;
LABEL_3:
  v8 = *((_DWORD *)v48 + 1);
  if (!v47)
    goto LABEL_92;
LABEL_4:
  v9 = *((_DWORD *)v47 + 1);
LABEL_5:
  if ((v9 | v8) < 0
    || ((v10 = __OFADD__(v8, v9), v11 = v8 + v9, !v10) ? (v12 = 0) : (v12 = 1),
        v7 < 0 || (v12 & 1) != 0 || (result = (v7 + v11), __OFADD__(v7, v11))))
  {
    v50 = 0;
    goto LABEL_96;
  }
  if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v13 = 0;
    goto LABEL_19;
  }
  if (v48)
  {
    v14 = *((_DWORD *)v48 + 4);
    v13 = (v14 >> 2) & 1;
    if (v47 && (v14 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v47)
    {
LABEL_18:
      v13 = (*((unsigned __int8 *)v47 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v13 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v49, (uint64_t)v48, (uint64_t)v47, &v50);
  if (!v50)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v16 = v47;
  v47 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v48;
  v48 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v49;
  v49 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(NSObject **)(a1 + 32);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v20)
  {
    WTF::String::utf8();
    v22 = v45 ? (char *)v45 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v52 = v22;
    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v20 = (uint64_t)v45;
    v45 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        v20 = WTF::fastFree((WTF *)v20, v21);
      else
        --*(_DWORD *)v20;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v24 = *v23;
      if ((v24 & 1) != 0)
        break;
      v25 = __ldaxr(v23);
      if (v25 == v24)
      {
        if (!__stxr(v24 | 1, v23))
        {
          v26 = WTF::Logger::observers((WTF::Logger *)v20);
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)v26;
            v29 = *(_QWORD *)v26 + 8 * v27;
            do
            {
              v30 = *v28;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v53 = 0;
              WTF::String::String((WTF::String *)&v54, " ignored already resolved or rejected ");
              v55 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v56, v44);
              v45 = 0;
              v46 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v46) = 3;
              v45 = v31;
              v32 = HIDWORD(v46);
              *((_DWORD *)v31 + 4 * HIDWORD(v46)) = *(_DWORD *)buf;
              v33 = *(_QWORD *)&v52[4];
              if (*(_QWORD *)&v52[4])
                **(_DWORD **)&v52[4] += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v53;
              v34 = v54;
              if (v54)
                *(_DWORD *)v54 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v55;
              v35 = v56[0];
              if (v56[0])
                *(_DWORD *)v56[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v46) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, 4, &v45);
              v36 = v45;
              if (HIDWORD(v46))
              {
                v37 = 16 * HIDWORD(v46);
                v38 = (WTF::StringImpl **)((char *)v45 + 8);
                do
                {
                  v39 = *v38;
                  *v38 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v38 += 2;
                  v37 -= 16;
                }
                while (v37);
                v36 = v45;
              }
              if (v36)
              {
                v45 = 0;
                LODWORD(v46) = 0;
                WTF::fastFree(v36, v21);
              }
              v40 = v56[0];
              v56[0] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v54;
              v54 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = *(WTF::StringImpl **)&v52[4];
              *(_QWORD *)&v52[4] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v42 -= 2;
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v29);
          }
          v43 = __ldxr(v23);
          if (v43 == 1)
          {
            if (!__stlxr(0, v23))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::AllPromiseProducer,(WTF::DestructionThread)0>::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = *(uint64_t **)(this + 24);
    *(_QWORD *)(this + 24) = 0;
    if (v5)
    {
      if (*v5)
      {
        WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(*v5);
        v6 = (unsigned int *)*v5;
        *v5 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v5 = 0;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
    v10 = *(WTF **)(v2 + 8);
    if (v10)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v10, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WebCore::MediaSource::completeSeek(void)::$_1>(WTF::Ref<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::MediaSource::completeSeek(void)::$_1 &&)::{lambda(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *(WTF **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v11 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 16));
  v15 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v14);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_9MediaTimeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS8_22ScriptExecutionContext22enqueueTaskWhenSettledISA_ZNS8_11MediaSource12completeSeekEvE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS8_10TaskSourceEOT0_EUlOSH_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESR_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS7_S9_EEE_vJS14_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E335D850;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WebCore::MediaSource::completeSeek(void)::$_1>(WTF::Ref<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::MediaSource::completeSeek(void)::$_1 &&)::{lambda(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_9MediaTimeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS8_22ScriptExecutionContext22enqueueTaskWhenSettledISA_ZNS8_11MediaSource12completeSeekEvE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS8_10TaskSourceEOT0_EUlOSH_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESR_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS7_S9_EEE_vJS14_EED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E335D850;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WebCore::MediaSource::completeSeek(void)::$_1>(WTF::Ref<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::MediaSource::completeSeek(void)::$_1 &&)::{lambda(WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_9MediaTimeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS8_22ScriptExecutionContext22enqueueTaskWhenSettledISA_ZNS8_11MediaSource12completeSeekEvE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS8_10TaskSourceEOT0_EUlOSH_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESR_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS7_S9_EEE_vJS14_EE4callES14_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  WTF *v35;
  _BYTE v36[21];
  _BYTE v37[16];
  int v38;
  uint64_t v39;
  char v40;

  v4 = *(_QWORD *)(a1 + 104);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v11 == 1 || v11 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v12 = (*(uint64_t (**)(void))(*(_QWORD *)(v10 - 96) + 104))();
      v13 = *(_OWORD *)(a1 + 48);
      v32 = *(_OWORD *)(a1 + 32);
      v33 = v13;
      v14 = *(_BYTE *)(a1 + 16);
      v15 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      v31 = v15;
      v34 = *(_BYTE *)(a1 + 64);
      v16 = *(WTF **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      v35 = v16;
      *(_OWORD *)v36 = *(_OWORD *)(a1 + 80);
      *(_QWORD *)&v36[13] = *(_QWORD *)(a1 + 93);
      v37[0] = 0;
      v38 = -1;
      v17 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v17 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E335D7A8[v17])(&v39, v37, a2);
        v38 = v17;
      }
      v18 = WTF::fastMalloc((WTF *)0x70);
      *(_QWORD *)v18 = off_1E335D878;
      *(_QWORD *)(v18 + 8) = v31;
      v19 = v34;
      v20 = v33;
      *(_OWORD *)(v18 + 16) = v32;
      *(_OWORD *)(v18 + 32) = v20;
      *(_BYTE *)(v18 + 48) = v19;
      v21 = v35;
      v31 = 0;
      v35 = 0;
      *(_QWORD *)(v18 + 56) = v21;
      v22 = *(_QWORD *)&v36[13];
      *(_OWORD *)(v18 + 64) = *(_OWORD *)v36;
      *(_QWORD *)(v18 + 77) = v22;
      *(_BYTE *)(v18 + 88) = 0;
      *(_DWORD *)(v18 + 104) = -1;
      v23 = v38;
      if (v38 != -1)
      {
        ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E335D7A8[v38])(&v39, v18 + 88, v37);
        *(_DWORD *)(v18 + 104) = v23;
      }
      v39 = v18;
      WebCore::EventLoopTaskGroup::queueTask(v12, v14, &v39);
      v25 = v39;
      v39 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      if (v38 != -1)
        ((void (*)(char *, _BYTE *))off_1E335D798[v38])(&v40, v37);
      v38 = -1;
      v26 = (unsigned int *)v35;
      v35 = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v24);
        }
      }
      result = (unsigned int *)WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v31);
      v30 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v30 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v30 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v29);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorINS_9MediaTimeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS2_18PlatformMediaErrorELj0EEEZNS2_11MediaSource12completeSeekEvE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS2_10TaskSourceEOT0_ENUlOSG_E_clINSt12experimental15fundamentals_v38expectedISA_SB_EEEEDaSQ_EUlvE_vJEED1Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  *(_QWORD *)a1 = off_1E335D878;
  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E335D798[v3])(&v8, a1 + 88);
  *(_DWORD *)(a1 + 104) = -1;
  v4 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorINS_9MediaTimeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS2_18PlatformMediaErrorELj0EEEZNS2_11MediaSource12completeSeekEvE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS2_10TaskSourceEOT0_ENUlOSG_E_clINSt12experimental15fundamentals_v38expectedISA_SB_EEEEDaSQ_EUlvE_vJEED0Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  char v9;

  *(_QWORD *)a1 = off_1E335D878;
  v3 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E335D798[v3])(&v9, a1 + 88);
  *(_DWORD *)(a1 + 104) = -1;
  v4 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v7);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseINS_6VectorINS_9MediaTimeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS2_18PlatformMediaErrorELj0EEEZNS2_11MediaSource12completeSeekEvE3__1EEvONS_3RefIT_NS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS2_10TaskSourceEOT0_ENUlOSG_E_clINSt12experimental15fundamentals_v38expectedISA_SB_EEEEDaSQ_EUlvE_vJEE4callEv(unsigned __int8 *result)
{
  uint64_t v1;
  _DWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::NativePromiseBase *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  WTF::NativePromiseBase *v27;
  _BYTE *v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _OWORD *v34;
  WTF::Logger::LogSiteIdentifier *v35;
  _QWORD v36[2];
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  __int128 v42;

  v1 = *((_QWORD *)result + 7);
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *((_QWORD *)result + 8);
      ++v2[6];
      if (*(_BYTE *)(v4 + 232))
        goto LABEL_4;
      result = *(unsigned __int8 **)(v4 + 88);
      if (!result)
        goto LABEL_4;
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 112))(result);
      if (!(_DWORD)result)
        goto LABEL_4;
      v5 = *((_DWORD *)v3 + 26);
      if (v5)
      {
        if (v5 != 1)
        {
          v33 = std::__throw_bad_variant_access[abi:sn180100]();
          return (unsigned __int8 *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::resolve<WTF::MediaTime&,std::enable_if<true,void>>(v33, v34, v35);
        }
        v38 = 0;
        v39 = 0;
        v40 = "operator()";
        v41 = 0;
        v6 = *((_QWORD *)v3 + 1);
        if (!v6)
        {
          v21 = 0;
          goto LABEL_33;
        }
        v7 = (unsigned __int8 *)(v6 + 48);
        if (__ldaxr((unsigned __int8 *)(v6 + 48)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v7))
        {
          goto LABEL_27;
        }
        result = (unsigned __int8 *)MEMORY[0x19AEA534C](v6 + 48);
LABEL_27:
        v22 = *(_DWORD *)(v6 + 80);
        v23 = __ldxr(v7);
        if (v23 == 1)
        {
          if (!__stlxr(0, v7))
          {
LABEL_32:
            v21 = *((_QWORD *)v3 + 1);
            if (v22)
            {
LABEL_33:
              result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)result);
              if (!*result || result[16] < 4u)
                goto LABEL_4;
              v24 = v21;
              goto LABEL_47;
            }
            v27 = (WTF::NativePromiseBase *)(v21 + 48);
            *(_QWORD *)&v42 = v21 + 48;
            BYTE8(v42) = 1;
            if (__ldaxr((unsigned __int8 *)(v21 + 48)))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v27))
            {
LABEL_53:
              v29 = (_BYTE *)WTF::NativePromiseBase::logChannel(v27);
              if (*v29 && v29[16] >= 4u)
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v29, 4u, (WTF::Logger::LogSiteIdentifier *)&v38, " rejecting ", v21);
              v30 = v3[88];
              v31 = *(unsigned int *)(v21 + 80);
              if ((_DWORD)v31 != -1)
                ((void (*)(_QWORD *, uint64_t))off_1E335D668[v31])(v37, v21 + 56);
              *(_BYTE *)(v21 + 56) = v30;
              *(_DWORD *)(v21 + 72) = 1;
              *(_DWORD *)(v21 + 80) = 1;
              result = (unsigned __int8 *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(v21, (unsigned __int8 **)&v42);
              if (!BYTE8(v42))
                goto LABEL_4;
              result = (unsigned __int8 *)v42;
              v32 = __ldxr((unsigned __int8 *)v42);
              if (v32 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v42))
                {
LABEL_4:
                  if (v2[6] == 1)
                    return (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
                  --v2[6];
                  return result;
                }
              }
              else
              {
                __clrex();
              }
              result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
              goto LABEL_4;
            }
            v27 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C]();
            goto LABEL_53;
          }
        }
        else
        {
          __clrex();
        }
        result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
        goto LABEL_32;
      }
      v42 = *(_OWORD *)(v3 + 72);
      v9 = *((unsigned int *)v3 + 25);
      if ((_DWORD)v9)
      {
        v10 = (uint64_t *)*((_QWORD *)v3 + 11);
        v11 = 16 * v9;
        do
        {
          v37[0] = WTF::MediaTime::operator-();
          v37[1] = v12;
          v38 = WTF::abs();
          v39 = v13;
          WTF::MediaTime::operator-();
          v36[0] = WTF::abs();
          v36[1] = v14;
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v38, (const WTF::MediaTime *)v36) == 1)
          {
            v15 = *v10;
            *(_QWORD *)((char *)&v42 + 5) = *(uint64_t *)((char *)v10 + 5);
            *(_QWORD *)&v42 = v15;
          }
          v10 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      v16 = (WTF::NativePromiseBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      v38 = 0;
      v39 = 0;
      v40 = "operator()";
      v41 = 0;
      v17 = *((_QWORD *)v3 + 1);
      if (!v17)
      {
        v20 = 0;
        goto LABEL_44;
      }
      v18 = (unsigned __int8 *)(v17 + 48);
      if (__ldaxr((unsigned __int8 *)(v17 + 48)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v18))
      {
        goto LABEL_38;
      }
      v16 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v17 + 48);
LABEL_38:
      v25 = *(_DWORD *)(v17 + 80);
      v26 = __ldxr(v18);
      if (v26 == 1)
      {
        if (!__stlxr(0, v18))
        {
LABEL_43:
          v20 = *((_QWORD *)v3 + 1);
          if (!v25)
          {
            result = (unsigned __int8 *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::resolve<WTF::MediaTime&,std::enable_if<true,void>>(v20, &v42, (WTF::Logger::LogSiteIdentifier *)&v38);
            goto LABEL_4;
          }
LABEL_44:
          result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v16);
          if (!*result || result[16] < 4u)
            goto LABEL_4;
          v24 = v20;
LABEL_47:
          result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v38, v24);
          goto LABEL_4;
        }
      }
      else
      {
        __clrex();
      }
      v16 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_43;
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::resolve<WTF::MediaTime&,std::enable_if<true,void>>(uint64_t a1, _OWORD *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  WTF::Lock *result;
  int v12;
  WTF::Lock *v13;
  char v14;
  char v15;

  v6 = (WTF::Lock *)(a1 + 48);
  v13 = v6;
  v14 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " resolving ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E335D668[v10])(&v15, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 56) = *a2;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v13);
  if (v14)
  {
    result = v13;
    v12 = __ldxr((unsigned __int8 *)v13);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

_QWORD *WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E335D8A0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335D8D0;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E335D8A0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335D8D0;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 16);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v81, a2);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v101, a2);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 128) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v70, a1);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v84, a1);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 80))
  {
    result = WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 96))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 88), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 100);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 88);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 88);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 100) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],double,char [9],double>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, double *a5, const char *a6, double *a7)
{
  WTF::String *v12;
  WTF::String *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::String *v32;
  double v33;
  WTF::String *v34;
  double v35;
  WTF::Logger *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  char *v55;
  double *v56;
  char *v57;
  double *v58;
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  __int128 buf;
  int v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v55 = (char *)a4;
  v12 = (WTF::String *)WTF::String::String((WTF::String *)&v65, a4);
  v56 = a5;
  WTF::String::number(v12, *a5);
  v57 = (char *)a6;
  v13 = (WTF::String *)WTF::String::String((WTF::String *)&v63, a6);
  v58 = a7;
  WTF::String::number(v13, *a7);
  v60 = v65;
  v70 = v64;
  *(_QWORD *)&buf = v66;
  v68 = v62;
  v69 = v63;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v60, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v67);
  if (v67)
  {
    v16 = v62;
    v62 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v63;
    v63 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v64;
    v64 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v65;
    v65 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v66;
    v66 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v15);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(NSObject **)(a1 + 32);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v60 ? (char *)v60 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v60;
      v60 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v53 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v72 = 0;
                v32 = (WTF::String *)WTF::String::String((WTF::String *)&v73, v55);
                v33 = *v56;
                v74 = 0;
                WTF::String::number(v32, v33);
                v76 = 0;
                v34 = (WTF::String *)WTF::String::String((WTF::String *)&v77, v57);
                v35 = *v58;
                v78 = 0;
                WTF::String::number(v34, v35);
                v60 = 0;
                v61 = 0;
                v36 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v61) = 5;
                v60 = v36;
                v37 = HIDWORD(v61);
                *((_DWORD *)v36 + 4 * HIDWORD(v61)) = buf;
                v38 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v36 + 2 * v37 + 1) = v38;
                *((_DWORD *)v36 + 4 * (v37 + 1)) = v72;
                v39 = v73;
                if (v73)
                  *(_DWORD *)v73 += 2;
                *((_QWORD *)v36 + 2 * (v37 + 1) + 1) = v39;
                *((_DWORD *)v36 + 4 * (v37 + 2)) = v74;
                v40 = v75;
                if (v75)
                  *(_DWORD *)v75 += 2;
                *((_QWORD *)v36 + 2 * (v37 + 2) + 1) = v40;
                *((_DWORD *)v36 + 4 * (v37 + 3)) = v76;
                v41 = v77;
                if (v77)
                  *(_DWORD *)v77 += 2;
                *((_QWORD *)v36 + 2 * (v37 + 3) + 1) = v41;
                *((_DWORD *)v36 + 4 * (v37 + 4)) = v78;
                v42 = v79;
                if (v79)
                  *(_DWORD *)v79 += 2;
                *((_QWORD *)v36 + 2 * (v37 + 4) + 1) = v42;
                HIDWORD(v61) = v37 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v60);
                v43 = v60;
                if (HIDWORD(v61))
                {
                  v44 = 16 * HIDWORD(v61);
                  v45 = (WTF::StringImpl **)((char *)v60 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v43 = v60;
                }
                if (v43)
                {
                  v60 = 0;
                  LODWORD(v61) = 0;
                  WTF::fastFree(v43, v23);
                }
                v47 = v79;
                v79 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v77;
                v77 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v75;
                v75 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v73;
                v73 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v53);
            }
            v52 = __ldxr(v25);
            if (v52 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::MediaSource::streamEndedWithError(std::optional<WebCore::MediaSource::EndOfStreamError>)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  void *v3;

  v3 = (void *)*(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 9))
    return WebCore::HTMLMediaElement::mediaLoadingFailedFatally(a2, (int)v3);
  else
    return (unsigned int *)WebCore::HTMLMediaElement::mediaLoadingFailed(a2, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335D928;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335D928;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WebCore *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_0,void,WebCore::HTMLMediaElement &>::call(WebCore *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v5;
  uint64_t v6;
  _QWORD *i;

  v2 = *(_QWORD *)(a2 + 1344);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v3)
    {
      v5 = result;
      v6 = *((_QWORD *)result + 1);
      for (i = *(_QWORD **)(v2 + 56); *i != v6; ++i)
      {
        if (!--v3)
          return result;
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v6 + 152, (_QWORD *)(a2 + 224));
      return WebCore::AudioTrackList::remove(*(WebCore::AudioTrackList **)(a2 + 1344), *((WebCore::TrackBase **)v5 + 1), 1);
    }
  }
  return result;
}

WebCore *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_1,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore *a2)
{
  return WebCore::HTMLMediaElement::removeAudioTrack(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_2,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  WebCore::TrackListBase *v2;

  v2 = (WebCore::TrackListBase *)WebCore::HTMLMediaElement::ensureAudioTracks(a2);
  return WebCore::TrackListBase::scheduleChangeEvent(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_3,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335D9A0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_3,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335D9A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WebCore *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_3,void,WebCore::HTMLMediaElement &>::call(WebCore *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore *v5;
  uint64_t v6;
  _QWORD *i;
  WebCore *v8;

  v2 = *(_QWORD *)(a2 + 1360);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v3)
    {
      v5 = result;
      v6 = *((_QWORD *)result + 1);
      for (i = *(_QWORD **)(v2 + 56); *i != v6; ++i)
      {
        if (!--v3)
          return result;
      }
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v6 + 152, (_QWORD *)(a2 + 256));
      v8 = *(WebCore **)(a2 + 1360);
      if (v8)
      {
        ++*((_DWORD *)v8 + 6);
        result = WebCore::TrackListBase::remove(v8, *((WebCore::TrackBase **)v5 + 1), 1);
        if (*((_DWORD *)v8 + 6) == 1)
          return (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 72))(v8);
        else
          --*((_DWORD *)v8 + 6);
      }
      else
      {
        return WebCore::TrackListBase::remove(0, *((WebCore::TrackBase **)v5 + 1), 1);
      }
    }
  }
  return result;
}

WebCore *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_4,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore *a2)
{
  return WebCore::HTMLMediaElement::removeVideoTrack(a2, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_5,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  WebCore::TrackListBase *v2;

  v2 = (WebCore::TrackListBase *)WebCore::HTMLMediaElement::ensureVideoTracks(a2);
  return WebCore::TrackListBase::scheduleChangeEvent(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_6,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335DA18;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_6,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DA18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t (**WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_6,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t (**a2)()))()
{
  return WebCore::HTMLMediaElement::removeTextTrack(a2, *(WebCore::TextTrack **)(a1 + 8), 1);
}

uint64_t (**WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_7,void,WebCore::HTMLMediaElement &>::call(uint64_t (**result)(), uint64_t a2))()
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a2 + 1352))
  {
    v2 = *(_QWORD *)(a2 + 1344);
    v3 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = *(_QWORD *)(v2 + 56);
      while (1)
      {
        v6 = *(_QWORD *)(v5 + 8 * v4);
        if (*(uint64_t (**)())(v6 + 56) == result[1])
          break;
        if (v3 == ++v4)
          return result;
      }
      if (v4 >= v3 || (++*(_DWORD *)(v6 + 16), *(_DWORD *)(v6 + 40) != 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19544FA50);
      }
      result = WebCore::HTMLMediaElement::removeTextTrack((uint64_t (**)())a2, (WebCore::TextTrack *)v6, 1);
      if (*(_DWORD *)(v6 + 16) == 1)
        return (uint64_t (**)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::removeSourceBuffer(WebCore::SourceBuffer &)::$_8,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  WebCore::TrackListBase *v2;

  v2 = (WebCore::TrackListBase *)WebCore::HTMLMediaElement::ensureTextTracks(a2);
  return WebCore::TrackListBase::scheduleChangeEvent(v2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::isTypeSupported(WebCore::ScriptExecutionContext &,WTF::String const&,WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1, const WebCore::MediaEngineSupportParameters *a2, double a3, double a4, float a5)
{
  uint64_t result;

  result = WebCore::MediaPlayer::supportsType(*(WebCore::MediaPlayer **)(a1 + 16), a2, a3, a4, a5);
  **(_BYTE **)(a1 + 8) = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::openIfDeferredOpen(void)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = a1[1];
  *a1 = &off_1E335DAB8;
  a1[1] = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::openIfDeferredOpen(void)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DAB8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return WTF::fastFree(this, a2);
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return WTF::fastFree(this, a2);
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::openIfDeferredOpen(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 680) + 712) & 0x8000) == 0
    || *(_BYTE *)(a2 + 1696)
    || (result = WebCore::HTMLMediaElement::hasWirelessPlaybackTargetAlternative((WebCore::HTMLMediaElement *)a2, a5, a2, a3, a4), (_DWORD)result))
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E335DAE0;
    v9[1] = v6;
    v10 = *(unsigned int **)(v8 + 16);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v12 = *(_OWORD *)(v8 + 48);
    v21[0] = *(_OWORD *)(v8 + 32);
    v21[1] = v12;
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = &off_1E335D510;
    *(_QWORD *)(v13 + 8) = v9;
    *(_QWORD *)(v13 + 16) = v10;
    *(_BYTE *)(v13 + 24) = 1;
    v19 = v13;
    v20 = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_10:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v15 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v21);
    if (v15)
    {
      v16 = v15[4];
      if (v16)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v15[4]) & 1) != 0)
        {
          v17 = 1;
          goto LABEL_16;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 336))(v16, &v19);
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = 0;
LABEL_16:
    v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v18 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      {
        if (!v17)
          goto LABEL_20;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
    if (!v17)
    {
LABEL_20:
      result = v19;
      v19 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    }
LABEL_19:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v16);
    goto LABEL_20;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore11MediaSource18openIfDeferredOpenEvENK3__0clINS2_16HTMLMediaElementEEEDaRT_EUlRS3_E_vJSA_EE4callESA_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(result + 232))
  {
    *(_BYTE *)(result + 232) = 0;
    return WebCore::MediaSource::onReadyStateChange(result, 0, 1);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::stop(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t result;

  v2 = *(_DWORD **)(a2 + 1152);
  *(_QWORD *)(a2 + 1152) = 0;
  if (v2)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 80))(v2);
    result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v2 + 104))(v2, 0);
    if (v2[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::MediaSource::notifyElementUpdateMediaState(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  return WebCore::HTMLMediaElement::updateMediaState(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::ensureWeakOnHTMLMediaElementContext(WTF::Function<void ()(WebCore::HTMLMediaElement &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E335DB58;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::ensureWeakOnHTMLMediaElementContext(WTF::Function<void ()(WebCore::HTMLMediaElement &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E335DB58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::MediaSource::ensureWeakOnHTMLMediaElementContext(WTF::Function<void ()(WebCore::HTMLMediaElement &)> &&)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)result + 2) + 16))(*((_QWORD *)result + 2), v2);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::MediaSource::incrementDroppedFrameCount(void)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 1160);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addAudioTrackToElement(WTF::Ref<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335DBA8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::addAudioTrackToElement(WTF::Ref<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DBA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addAudioTrackToElement(WTF::Ref<WebCore::AudioTrack,WTF::RawPtrTraits<WebCore::AudioTrack>,WTF::DefaultRefDerefTraits<WebCore::AudioTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  return WebCore::HTMLMediaElement::addAudioTrack(a2, (uint64_t *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addTextTrackToElement(WTF::Ref<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335DBD0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::addTextTrackToElement(WTF::Ref<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DBD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WebCore::LoadableTextTrack *WTF::Detail::CallableWrapper<WebCore::MediaSource::addTextTrackToElement(WTF::Ref<WebCore::TextTrack,WTF::RawPtrTraits<WebCore::TextTrack>,WTF::DefaultRefDerefTraits<WebCore::TextTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::HTMLMediaElement::addTextTrack(a2, (WebCore::LoadableTextTrack **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addVideoTrackToElement(WTF::Ref<WebCore::VideoTrack,WTF::RawPtrTraits<WebCore::VideoTrack>,WTF::DefaultRefDerefTraits<WebCore::VideoTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335DBF8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::addVideoTrackToElement(WTF::Ref<WebCore::VideoTrack,WTF::RawPtrTraits<WebCore::VideoTrack>,WTF::DefaultRefDerefTraits<WebCore::VideoTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DBF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addVideoTrackToElement(WTF::Ref<WebCore::VideoTrack,WTF::RawPtrTraits<WebCore::VideoTrack>,WTF::DefaultRefDerefTraits<WebCore::VideoTrack>> &&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  return WebCore::HTMLMediaElement::addVideoTrack(a2, (uint64_t *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addAudioTrackMirrorToElement(WTF::Ref<WebCore::AudioTrackPrivate,WTF::RawPtrTraits<WebCore::AudioTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivate>> &&,BOOL)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E335DC20;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::addAudioTrackMirrorToElement(WTF::Ref<WebCore::AudioTrackPrivate,WTF::RawPtrTraits<WebCore::AudioTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivate>> &&,BOOL)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DC20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::AudioTrack *WTF::Detail::CallableWrapper<WebCore::MediaSource::addAudioTrackMirrorToElement(WTF::Ref<WebCore::AudioTrackPrivate,WTF::RawPtrTraits<WebCore::AudioTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivate>> &&,BOOL)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  WebCore::AudioTrackPrivate *v8;
  uint64_t **v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  WebCore::AudioTrack *result;
  WebCore::AudioTrack *v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v5 = *(_QWORD *)(v4 + 704);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v4 = v6;
  }
  v7 = (WebCore::ScriptExecutionContext *)(v4 + 192);
  v8 = *(WebCore::AudioTrackPrivate **)(a1 + 8);
  v9 = (uint64_t **)WTF::fastMalloc((WTF *)0xC0);
  v14 = WebCore::AudioTrack::AudioTrack((WebCore::AudioTrack *)v9, v7, v8);
  v10 = *(unsigned __int8 *)(a1 + 16);
  if (*((unsigned __int8 *)v14 + 176) != v10)
  {
    (*(void (**)(uint64_t *, BOOL))(*v9[21] + 120))(v9[21], v10 != 0);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E33E9F78;
    v11[1] = v9;
    v15 = v11;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v9 + 19, &v15);
    v12 = v15;
    v15 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  WebCore::HTMLMediaElement::addAudioTrack(a2, (uint64_t *)&v14);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (WebCore::AudioTrack *)(*(uint64_t (**)(WebCore::AudioTrack *))(*(_QWORD *)result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addTextTrackMirrorToElement(WTF::Ref<WebCore::InbandTextTrackPrivate,WTF::RawPtrTraits<WebCore::InbandTextTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::InbandTextTrackPrivate>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E335DC48;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::addTextTrackMirrorToElement(WTF::Ref<WebCore::InbandTextTrackPrivate,WTF::RawPtrTraits<WebCore::InbandTextTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::InbandTextTrackPrivate>> &&)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DC48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::LoadableTextTrack *WTF::Detail::CallableWrapper<WebCore::MediaSource::addTextTrackMirrorToElement(WTF::Ref<WebCore::InbandTextTrackPrivate,WTF::RawPtrTraits<WebCore::InbandTextTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::InbandTextTrackPrivate>> &&)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::LoadableTextTrack *result;
  WebCore::InbandTextTrack *v7;
  WebCore::LoadableTextTrack *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  v4 = *(_QWORD *)(v3 + 704);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v3 = v5;
  }
  WebCore::InbandTextTrack::create((WebCore::InbandTextTrack *)(v3 + 192), *(WebCore::ScriptExecutionContext **)(a1 + 8), &v7);
  v8 = v7;
  WebCore::HTMLMediaElement::addTextTrack(a2, &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (WebCore::LoadableTextTrack *)(*(uint64_t (**)(WebCore::LoadableTextTrack *))(*(_QWORD *)result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::addVideoTrackMirrorToElement(WTF::Ref<WebCore::VideoTrackPrivate,WTF::RawPtrTraits<WebCore::VideoTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::VideoTrackPrivate>> &&,BOOL)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E335DC70;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::addVideoTrackMirrorToElement(WTF::Ref<WebCore::VideoTrackPrivate,WTF::RawPtrTraits<WebCore::VideoTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::VideoTrackPrivate>> &&,BOOL)::$_0,void,WebCore::HTMLMediaElement &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DC70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::VideoTrack *WTF::Detail::CallableWrapper<WebCore::MediaSource::addVideoTrackMirrorToElement(WTF::Ref<WebCore::VideoTrackPrivate,WTF::RawPtrTraits<WebCore::VideoTrackPrivate>,WTF::DefaultRefDerefTraits<WebCore::VideoTrackPrivate>> &&,BOOL)::$_0,void,WebCore::HTMLMediaElement &>::call(uint64_t a1, WebCore::HTMLMediaElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  WebCore::VideoTrackPrivate *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  WebCore::VideoTrack *result;
  WebCore::VideoTrack *v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v5 = *(_QWORD *)(v4 + 704);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v4 = v6;
  }
  v7 = (WebCore::ScriptExecutionContext *)(v4 + 192);
  v8 = *(WebCore::VideoTrackPrivate **)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0xC0);
  v14 = WebCore::VideoTrack::VideoTrack((WebCore::VideoTrack *)v9, v7, v8);
  v10 = *(unsigned __int8 *)(a1 + 16);
  if (*((unsigned __int8 *)v14 + 184) != v10)
  {
    *(_BYTE *)(v9 + 184) = v10;
    (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v9 + 168) + 120))(*(_QWORD *)(v9 + 168), v10 != 0);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E33ED008;
    v11[1] = v9;
    v15 = v11;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v9 + 152), &v15);
    v12 = v15;
    v15 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  WebCore::HTMLMediaElement::addVideoTrack(a2, (uint64_t *)&v14);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      return (WebCore::VideoTrack *)(*(uint64_t (**)(WebCore::VideoTrack *))(*(_QWORD *)result + 16))(result);
    else
      --*((_DWORD *)result + 4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::handle(void)::$_0,void,WTF::Function<void ()(WebCore::MediaSource&)>,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E335DC98;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSource::handle(void)::$_0,void,WTF::Function<void ()(WebCore::MediaSource&)>,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335DC98;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSource::handle(void)::$_0,void,WTF::Function<void ()(WebCore::MediaSource&)>,BOOL>::call(_QWORD *result, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = result[1];
  if (!v3)
    return result;
  v6 = result[2];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v3);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
    return result;
LABEL_15:
  v9 = *a2;
  *a2 = 0;
  v10 = *(unsigned int **)(v6 + 16);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = *(_OWORD *)(v6 + 48);
  v30[0] = *(_OWORD *)(v6 + 32);
  v30[1] = v12;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = &off_1E335D510;
  *(_QWORD *)(v13 + 8) = v9;
  *(_QWORD *)(v13 + 16) = v10;
  *(_BYTE *)(v13 + 24) = a3;
  v28 = (_QWORD *)v13;
  v29 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_21:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v15 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v30);
  if (v15)
  {
    v17 = v15[4];
    if (v17)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 88))(v15[4]) & 1) != 0)
      {
        v18 = 1;
        goto LABEL_27;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v17 + 336))(v17, &v28);
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = 0;
LABEL_27:
  v19 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v19 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v18)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v18)
LABEL_30:
    (*(void (**)(_QWORD *, uint64_t))(*v28 + 16))(v28, v17);
LABEL_31:
  result = v28;
  v28 = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  v20 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_40;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v20);
LABEL_40:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v27 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v27 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 != 1)
  {
    __clrex();
LABEL_47:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v20);
    if (v23)
      return result;
    goto LABEL_48;
  }
  if (__stlxr(0, (unsigned __int8 *)v20))
    goto LABEL_47;
  if (v23)
    return result;
LABEL_48:
  if (v24)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!v25)
    return (_QWORD *)WTF::fastFree((WTF *)v20, v16);
  return result;
}

void WebCore::MediaSourceHandle::SharedPrivate::~SharedPrivate(WebCore::MediaSourceHandle::SharedPrivate *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_8:
    v6 = *(_QWORD *)(v4 + 16) - 1;
    *(_QWORD *)(v4 + 16) = v6;
    if (!v6)
    {
      v7 = *(_QWORD *)(v4 + 8);
      v8 = __ldxr((unsigned __int8 *)v4);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
        {
          if (v7)
            goto LABEL_16;
LABEL_15:
          WTF::fastFree((WTF *)v4, a2);
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v7)
        goto LABEL_16;
      goto LABEL_15;
    }
    v14 = __ldxr((unsigned __int8 *)v4);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
LABEL_16:
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v9)
    return;
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_21:
  v11 = *(_QWORD *)(v9 + 16) - 1;
  *(_QWORD *)(v9 + 16) = v11;
  if (!v11)
  {
    v12 = *(_QWORD *)(v9 + 8);
    v13 = __ldxr((unsigned __int8 *)v9);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v12)
          return;
LABEL_28:
        WTF::fastFree((WTF *)v9, a2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return;
    goto LABEL_28;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
}

uint64_t WebCore::MediaSourceInterfaceMainThread::client@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(*(_QWORD *)(this + 24) + 272);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a2 = v3;
  return this;
}

uint64_t WebCore::MediaSourceInterfaceMainThread::monitorSourceBuffers(WebCore::MediaSourceInterfaceMainThread *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3));
}

BOOL WebCore::MediaSourceInterfaceMainThread::isClosed(WebCore::MediaSourceInterfaceMainThread *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v1 + 232))
    return 1;
  v3 = *(_QWORD *)(v1 + 88);
  return !v3 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3) == 0;
}

uint64_t WebCore::MediaSourceInterfaceMainThread::duration(WebCore::MediaSourceInterfaceMainThread *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;

  v1 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v1 + 232))
    return *(_QWORD *)WTF::MediaTime::invalidTime(this);
  this = *(WebCore::MediaSourceInterfaceMainThread **)(v1 + 88);
  if (!this)
    return *(_QWORD *)WTF::MediaTime::invalidTime(this);
  this = (WebCore::MediaSourceInterfaceMainThread *)(*(uint64_t (**)(WebCore::MediaSourceInterfaceMainThread *))(*(_QWORD *)this + 112))(this);
  if (!(_DWORD)this)
    return *(_QWORD *)WTF::MediaTime::invalidTime(this);
  v4 = *(_QWORD *)(v1 + 88);
  v5 = (unsigned __int8 *)(v4 + 64);
  if (__ldaxr((unsigned __int8 *)(v4 + 64)))
  {
    __clrex();
LABEL_9:
    MEMORY[0x19AEA534C](v4 + 64);
    goto LABEL_10;
  }
  if (__stxr(1u, v5))
    goto LABEL_9;
LABEL_10:
  v2 = *(_QWORD *)(v4 + 72);
  v7 = __ldxr(v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, v5))
      return v2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return v2;
}

void WebCore::MediaSourceInterfaceMainThread::buffered(WebCore::MediaSource **this@<X0>, uint64_t a2@<X8>)
{
  WebCore::MediaSource::buffered(this[3], a2);
}

uint64_t WebCore::MediaSourceInterfaceMainThread::seekable@<X0>(WebCore::MediaSource **this@<X0>, uint64_t *a2@<X8>)
{
  return WebCore::MediaSource::seekable(this[3], a2);
}

BOOL WebCore::MediaSourceInterfaceMainThread::isStreamingContent(WebCore::MediaSourceInterfaceMainThread *this)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  ++*(_DWORD *)(v2 + 24);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 376))
      v3 = *(_BYTE *)(v2 + 280) != 0;
    else
      v3 = 0;
    if (*(_DWORD *)(v2 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      --*(_DWORD *)(v2 + 24);
  }
  else
  {
    if (*(_DWORD *)(v2 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    else
      --*(_DWORD *)(v2 + 24);
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
    return v4 && *(_DWORD *)(v4 + 68) != 0;
  }
  return v3;
}

uint64_t WebCore::MediaSourceInterfaceMainThread::attachToElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 234))
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return 0;
  v5 = *a2;
  *a2 = 0;
  v6 = *(unsigned int **)(v2 + 96);
  *(_QWORD *)(v2 + 96) = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v9 = v2;
      WTF::fastFree((WTF *)v6, a2);
      v2 = v9;
    }
  }
  result = 1;
  *(_BYTE *)(v2 + 234) = 1;
  return result;
}

uint64_t WebCore::MediaSourceInterfaceMainThread::detachFromElement(WebCore::MediaSource **this)
{
  return WebCore::MediaSource::detachFromElement(this[3]);
}

uint64_t WebCore::MediaSourceInterfaceMainThread::openIfDeferredOpen(WebCore::MediaSource **this)
{
  return WebCore::MediaSource::openIfDeferredOpen(this[3]);
}

uint64_t WebCore::MediaSourceInterfaceMainThread::isManaged(WebCore::MediaSourceInterfaceMainThread *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 128))(*((_QWORD *)this + 3));
}

uint64_t WebCore::MediaSourceInterfaceMainThread::setAsSrcObject(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 24) + 233) = a2;
  return this;
}

uint64_t WebCore::MediaSourceInterfaceMainThread::memoryPressure(WebCore::MediaSourceInterfaceMainThread *this)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WebCore::SourceBuffer **v5;
  uint64_t v6;
  WebCore::SourceBuffer *v7;

  v1 = (_QWORD *)*((_QWORD *)this + 3);
  result = (*(uint64_t (**)(_QWORD *))(*v1 + 128))(v1);
  if ((_DWORD)result)
  {
    v3 = v1[13];
    v4 = *(unsigned int *)(v3 + 68);
    if ((_DWORD)v4)
    {
      v5 = *(WebCore::SourceBuffer ***)(v3 + 56);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        result = WebCore::SourceBuffer::memoryPressure(v7);
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t WebCore::MediaSourceInterfaceWorker::client@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 32);
  if (!v3)
    goto LABEL_11;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    this = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *a2 = v3;
  return this;
}

uint64_t WebCore::MediaSourceInterfaceWorker::monitorSourceBuffers(WebCore::MediaSourceInterfaceWorker *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E335EAB8;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 56);
  v5 = (uint64_t)v2;
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::MediaSourceInterfaceWorker::isClosed(WebCore::MediaSourceInterfaceWorker *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  _QWORD *v5;
  int v7;
  int v8;
  void *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v19;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  v2 = (unsigned __int8 *)(v1 + 4);
  if (__ldaxr((unsigned __int8 *)(v1 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v1 + 4);
LABEL_5:
  v4 = *(_QWORD *)(v1 + 8);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_19;
  }
  v5 = *(_QWORD **)(v1 + 16);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_11:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_19:
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
    {
      if (v5)
        goto LABEL_22;
      return 1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return 1;
LABEL_22:
  v10 = (*(unsigned int (**)(_QWORD *))(*v5 + 112))(v5) == 0;
  v11 = v5[1];
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_29;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_29:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v19 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v19 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (v14)
        return v10;
      goto LABEL_37;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (v14)
    return v10;
LABEL_37:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v16)
    WTF::fastFree((WTF *)v11, v9);
  return v10;
}

unsigned __int8 *WebCore::MediaSourceInterfaceWorker::duration(uint64_t this)
{
  WebCore::MediaSourceInterfaceWorker *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  void *v10;
  int v11;
  unsigned __int8 *v12;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v23;

  v1 = (WebCore::MediaSourceInterfaceWorker *)this;
  v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 16);
  v3 = (unsigned __int8 *)(v2 + 4);
  if (__ldaxr((unsigned __int8 *)(v2 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2 + 4);
LABEL_5:
  v5 = *(_QWORD *)(v2 + 8);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_19;
  }
  v6 = *(_QWORD *)(v2 + 16);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_11;
  }
  this = MEMORY[0x19AEA534C](v5);
LABEL_11:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_18:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_19:
  v9 = __ldxr(v3);
  if (v9 == 1)
  {
    if (!__stlxr(0, v3))
    {
      if (!v6)
        return *(unsigned __int8 **)WTF::MediaTime::invalidTime((WTF::MediaTime *)this);
      goto LABEL_25;
    }
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 4));
  if (!v6)
    return *(unsigned __int8 **)WTF::MediaTime::invalidTime((WTF::MediaTime *)this);
LABEL_25:
  this = WebCore::MediaSourceInterfaceWorker::isClosed(v1);
  v11 = this;
  if ((this & 1) != 0)
    goto LABEL_35;
  v12 = (unsigned __int8 *)(v6 + 64);
  if (__ldaxr((unsigned __int8 *)(v6 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_30;
  }
  this = MEMORY[0x19AEA534C](v6 + 64);
LABEL_30:
  v3 = *(unsigned __int8 **)(v6 + 72);
  v14 = __ldxr(v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, v12))
LABEL_34:
    this = WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 64));
LABEL_35:
  v15 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_39;
  }
  this = MEMORY[0x19AEA534C](v15);
LABEL_39:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v23 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v23 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 != 1)
  {
    __clrex();
LABEL_46:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      goto LABEL_51;
    goto LABEL_47;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_46;
  if (v18)
    goto LABEL_51;
LABEL_47:
  if (v19)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (!v20)
    this = WTF::fastFree((WTF *)v15, v10);
LABEL_51:
  if (v11)
    return *(unsigned __int8 **)WTF::MediaTime::invalidTime((WTF::MediaTime *)this);
  return v3;
}

void WebCore::MediaSourceInterfaceWorker::buffered(WebCore::MediaSourceInterfaceWorker *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  void *v12;
  _BOOL4 isClosed;
  unsigned __int8 *v14;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char **v40;
  char *v41;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  v5 = (unsigned __int8 *)(v4 + 4);
  if (__ldaxr((unsigned __int8 *)(v4 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4 + 4);
LABEL_5:
  v7 = *(_QWORD *)(v4 + 8);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(v4 + 16);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_19:
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (!v8)
      goto LABEL_57;
    goto LABEL_25;
  }
  if (__stlxr(0, v5))
    goto LABEL_24;
  if (!v8)
    goto LABEL_57;
LABEL_25:
  isClosed = WebCore::MediaSourceInterfaceWorker::isClosed(this);
  if (isClosed)
    goto LABEL_40;
  v14 = (unsigned __int8 *)(v8 + 64);
  if (__ldaxr((unsigned __int8 *)(v8 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v8 + 64);
LABEL_30:
  v16 = *(unsigned int *)(v8 + 100);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v16;
  if ((_DWORD)v16)
  {
    if (v16 >> 27)
    {
      __break(0xC471u);
      goto LABEL_68;
    }
    v17 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v16));
    *(_DWORD *)(a2 + 8) = v16;
    *(_QWORD *)a2 = v17;
    v18 = *(unsigned int *)(v8 + 100);
    if ((_DWORD)v18)
    {
      v19 = *(__int128 **)(v8 + 88);
      v20 = 32 * v18;
      do
      {
        v21 = *v19;
        v22 = v19[1];
        v19 += 2;
        *v17 = v21;
        v17[1] = v22;
        v17 += 2;
        v20 -= 32;
      }
      while (v20);
    }
  }
  v23 = __ldxr(v14);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, v14))
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)(v8 + 64));
LABEL_40:
  v24 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_44;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_44:
  v26 = *(_QWORD *)(v24 + 8);
  v27 = v26 - 1;
  *(_QWORD *)(v24 + 8) = v26 - 1;
  if (v26 == 1)
  {
    v38 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    *(_QWORD *)(v24 + 24) = 0;
    v29 = v38 != 0;
  }
  else
  {
    v28 = 0;
    v29 = 1;
  }
  v30 = __ldxr((unsigned __int8 *)v24);
  if (v30 != 1)
  {
    __clrex();
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    if (v27)
      goto LABEL_56;
    goto LABEL_52;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
    goto LABEL_51;
  if (v27)
    goto LABEL_56;
LABEL_52:
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (!v29)
    WTF::fastFree((WTF *)v24, v12);
LABEL_56:
  if (!isClosed)
    return;
LABEL_57:
  v31 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v31 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  v32 = dword_1EE2F8C6C;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v32;
  if ((_DWORD)v32)
  {
    if (!(v32 >> 27))
    {
      v33 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v32));
      *(_DWORD *)(a2 + 8) = v32;
      *(_QWORD *)a2 = v33;
      if (dword_1EE2F8C6C)
      {
        v34 = (__int128 *)WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
        v35 = 32 * dword_1EE2F8C6C;
        do
        {
          v36 = *v34;
          v37 = v34[1];
          v34 += 2;
          *v33 = v36;
          v33[1] = v37;
          v33 += 2;
          v35 -= 32;
        }
        while (v35);
      }
      return;
    }
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x1954518F8);
  }
}

uint64_t WebCore::MediaSourceInterfaceWorker::seekable@<X0>(WebCore::MediaSourceInterfaceWorker *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  WebCore::MediaSourcePrivate *v8;
  int v10;
  int v11;
  uint64_t result;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  unsigned int v32;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  v5 = (unsigned __int8 *)(v4 + 4);
  if (__ldaxr((unsigned __int8 *)(v4 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4 + 4);
LABEL_5:
  v7 = *(_QWORD *)(v4 + 8);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_19;
  }
  v8 = *(WebCore::MediaSourcePrivate **)(v4 + 16);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_11:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_19:
  v11 = __ldxr(v5);
  if (v11 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (!v8)
        goto LABEL_52;
LABEL_25:
      result = WebCore::MediaSourceInterfaceWorker::isClosed(this);
      v14 = result;
      if ((result & 1) == 0)
      {
        WebCore::MediaSourcePrivate::seekable(v8, (uint64_t)&v30);
        result = WTF::fastMalloc((WTF *)0x18);
        v15 = result;
        *(_DWORD *)result = 1;
        v16 = v32;
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 20) = v16;
        if ((_DWORD)v16)
        {
          if (v16 >> 27)
          {
            __break(0xC471u);
            return result;
          }
          v17 = WTF::fastMalloc((WTF *)(32 * v16));
          *(_DWORD *)(v15 + 16) = v16;
          *(_QWORD *)(v15 + 8) = v17;
          result = (uint64_t)v30;
          if (v32)
          {
            v18 = 0;
            v19 = 32 * v32;
            do
            {
              v20 = (_OWORD *)(v17 + v18);
              v21 = *(_OWORD *)(result + v18 + 16);
              *v20 = *(_OWORD *)(result + v18);
              v20[1] = v21;
              v18 += 32;
            }
            while (v19 != v18);
          }
        }
        else
        {
          result = (uint64_t)v30;
        }
        *a2 = v15;
        if (result)
        {
          v30 = 0;
          v31 = 0;
          result = WTF::fastFree((WTF *)result, v13);
        }
      }
      v22 = *((_QWORD *)v8 + 1);
      if (__ldaxr((unsigned __int8 *)v22))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v22))
      {
        goto LABEL_39;
      }
      result = MEMORY[0x19AEA534C](v22);
LABEL_39:
      v24 = *(_QWORD *)(v22 + 8);
      v25 = v24 - 1;
      *(_QWORD *)(v22 + 8) = v24 - 1;
      if (v24 == 1)
      {
        v29 = *(_QWORD *)(v22 + 16);
        v26 = *(_QWORD *)(v22 + 24);
        *(_QWORD *)(v22 + 24) = 0;
        v27 = v29 != 0;
      }
      else
      {
        v26 = 0;
        v27 = 1;
      }
      v28 = __ldxr((unsigned __int8 *)v22);
      if (v28 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v22))
        {
          if (v25)
            goto LABEL_51;
LABEL_47:
          if (v26)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          if (!v27)
            result = WTF::fastFree((WTF *)v22, v13);
LABEL_51:
          if (!v14)
            return result;
          goto LABEL_52;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v22);
      if (v25)
        goto LABEL_51;
      goto LABEL_47;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v8)
    goto LABEL_25;
LABEL_52:
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::MediaSourceInterfaceWorker::isStreamingContent(WebCore::MediaSourceInterfaceWorker *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v22;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  v4 = (unsigned __int8 *)(v3 + 4);
  if (__ldaxr((unsigned __int8 *)(v3 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3 + 4);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 8);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_19;
  }
  v7 = *(_QWORD *)(v3 + 16);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_11:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_19:
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_22;
    return 0;
  }
  if (__stlxr(0, v4))
    goto LABEL_26;
  if (!v7)
    return 0;
LABEL_22:
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 48)
    && (v11 = atomic_load((unsigned __int8 *)(v7 + 121)), (v11 & 1) != 0))
  {
    v13 = atomic_load((unsigned __int8 *)(v7 + 120));
    v12 = v13 & 1;
  }
  else
  {
    v12 = 0;
  }
  v14 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_33;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_33:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v12;
      goto LABEL_41;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v12;
LABEL_41:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, a2);
  return v12;
}

BOOL WebCore::MediaSourceInterfaceWorker::attachToElement(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;

  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 24));
  if ((v2 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 24));
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *a2;
    *a2 = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E335EAE0;
    v5[1] = v4;
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 56);
    v9 = v5;
    (*(void (**)(uint64_t, _QWORD **, uint64_t))(*(_QWORD *)v6 + 16))(v6, &v9, 1);
    v7 = v9;
    v9 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return (v2 & 1) == 0;
}

uint64_t WebCore::MediaSourceInterfaceWorker::detachFromElement(WebCore::MediaSourceInterfaceWorker *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E335EB08;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 56);
  v5 = (uint64_t)v2;
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSourceInterfaceWorker::openIfDeferredOpen(WebCore::MediaSourceInterfaceWorker *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E335EB30;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 56);
  v5 = (uint64_t)v2;
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSourceInterfaceWorker::isManaged(WebCore::MediaSourceInterfaceWorker *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 48);
}

uint64_t WebCore::MediaSourceInterfaceWorker::setAsSrcObject(WebCore::MediaSourceInterfaceWorker *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *((_QWORD *)this + 3);
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E335EB58;
  *(_BYTE *)(v4 + 8) = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 56);
  v7 = v4;
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v5 + 16))(v5, &v7, 0);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSourceInterfaceWorker::memoryPressure(WebCore::MediaSourceInterfaceWorker *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E335EB80;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 56);
  v5 = (uint64_t)v2;
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v5, 0);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::MediaSourceRegistry::registerURL(WebCore::MediaSourceRegistry *this, const WebCore::ScriptExecutionContext *a2, WTF::StringImpl **a3, WebCore::URLRegistrable *a4)
{
  WebCore::MediaSourceRegistry *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  int v28;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  const WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  WTF **v56;
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t result;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  WTF **v75;
  WTF::StringImpl *i;
  unsigned int v77;
  int v78;
  uint64_t v79;
  WTF *v80;
  unsigned int v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  uint64_t v92;
  WTF *v93;
  WebCore::URLRegistrable *v94;
  uint64_t v95;
  WebCore::MediaSourceRegistry *v96;
  char *v97;
  int v98;
  uint64_t *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  const char *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v6 = this;
  v107 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)((char *)this + 32);
  v7 = *((_QWORD *)this + 4);
  v10 = *((_QWORD *)a2 + 28);
  v11 = *((_QWORD *)a2 + 29);
  v9 = (__int128 *)((char *)a2 + 224);
  v12 = *((_QWORD *)a2 + 30);
  if (v7
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash((uint64_t *)this + 4, 8u, 0), (v7 = *v8) != 0))
  {
    v13 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = (v11 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v11 - 1640531527) << 16) ^ ((unsigned __int16)v11
                                                                                             - 1640531527);
  v15 = (v11 >> 37) & 0x7FFF800 ^ ((v14 + WORD2(v11) + (v14 >> 11)) << 16) ^ (v14 + WORD2(v11) + (v14 >> 11));
  v16 = (v10 >> 5) & 0x7FFF800 ^ ((v15 + (unsigned __int16)v10 + (v15 >> 11)) << 16) ^ (v15 + (unsigned __int16)v10 + (v15 >> 11));
  v17 = (v10 >> 37) & 0x7FFF800 ^ ((v16 + WORD2(v10) + (v16 >> 11)) << 16) ^ (v16 + WORD2(v10) + (v16 >> 11));
  v18 = (v17 + (v17 >> 11)) ^ (8 * (v17 + (v17 >> 11)));
  v19 = (v18 + (v18 >> 5)) ^ (4 * (v18 + (v18 >> 5)));
  v20 = (v19 + (v19 >> 15)) ^ ((v19 + (v19 >> 15)) << 10);
  if (!v20)
    v20 = 0x800000;
  v21 = v13 & v20;
  v22 = (_QWORD *)(v7 + 48 * (v13 & v20));
  v24 = *v22;
  v23 = v22[1];
  v25 = v22[2];
  if (*(_OWORD *)v22 != 0 || v25 != 0)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v23 == v11 && v24 == v10 && v25 == v12)
      {
        v34 = a3;
        goto LABEL_43;
      }
      if (v25 == -1)
        v27 = v22;
      v21 = (v21 + v28) & v13;
      v22 = (_QWORD *)(v7 + 48 * v21);
      v24 = *v22;
      v23 = v22[1];
      v25 = v22[2];
      ++v28;
    }
    while (*(_OWORD *)v22 != 0 || v25 != 0);
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      v27[4] = 0;
      --*(_DWORD *)(*v8 - 16);
      v22 = v27;
    }
  }
  *v22 = v10;
  v22[1] = v11;
  v22[2] = v12;
  v32 = (WTF::StringImpl **)v22[4];
  v22[4] = 0;
  if (v32)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v32, a2);
  v33 = *v8;
  v34 = a3;
  if (*v8)
    v35 = *(_DWORD *)(v33 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v33 - 12) = v35;
  v36 = *v8;
  if (*v8)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 > 0x400)
  {
    if (v39 > 2 * v38)
      goto LABEL_43;
    goto LABEL_38;
  }
  if (3 * v39 <= 4 * v38)
  {
    if (!(_DWORD)v39)
    {
      v40 = 8;
      goto LABEL_42;
    }
LABEL_38:
    v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_42:
    v22 = (_QWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v8, v40, v22);
  }
LABEL_43:
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v22 + 4, v34, (const WTF::StringImpl *)a3, (uint64_t)&v104);
  v43 = *((_QWORD *)a4 + 23);
  v44 = *((_QWORD *)a4 + 24);
  v104 = "MediaSource";
  *(_QWORD *)&v105 = 12;
  *((_QWORD *)&v105 + 1) = "addedToRegistry";
  *(_QWORD *)&v106 = v44;
  if (*(_BYTE *)(v43 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)&v104);
  }
  v46 = (unint64_t *)((char *)a4 + 200);
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 + 1, v46));
  v99 = (uint64_t *)((char *)v6 + 8);
  ++*((_DWORD *)a4 - 10);
  v100 = *v9;
  v101 = v9[1];
  v49 = *((unsigned int *)v6 + 4);
  v48 = *((unsigned int *)v6 + 5);
  v97 = (char *)a4 - 64;
  if (10 * v48 >= (unint64_t)(9 * v49) || v49 <= 2 * (int)v48 && *((_BYTE *)v6 + 28))
  {
    if ((_DWORD)v49)
      v50 = 2 * v49;
    else
      v50 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v99, v50);
    LODWORD(v49) = *((_DWORD *)v6 + 4);
  }
  v51 = v49 - 1;
  v98 = *((_DWORD *)v6 + 6);
  v52 = *((_DWORD *)*v34 + 4);
  v94 = a4;
  if (v52 < 0x100)
    v53 = WTF::StringImpl::hashSlowCase(*v34);
  else
    v53 = v52 >> 8;
  v54 = (v53 ^ v98) & v51;
  v55 = *v99;
  v56 = (WTF **)(*v99 + (v54 << 6));
  v57 = *v56;
  if (*v56)
  {
    v96 = v6;
    v58 = 0;
    while (1)
    {
      v59 = *((_DWORD *)v57 + 4);
      v60 = v59 < 0x100 ? WTF::StringImpl::hashSlowCase(v57) : v59 >> 8;
      v61 = (v54 + v49 - ((v60 ^ v98) & v51)) & v51;
      if (v58 > v61)
        break;
      if (v60 == v53)
      {
        result = WTF::equal(*v56, *v34, v42);
        if ((result & 1) != 0)
        {
          if (*((_DWORD *)v94 - 10) == 1)
            return (*(uint64_t (**)(char *))(*(_QWORD *)v97 + 16))(v97);
          --*((_DWORD *)v94 - 10);
          return result;
        }
      }
      v55 = *v99;
      v54 = ((_DWORD)v54 + 1) & v51;
      ++v58;
      v56 = (WTF **)(*v99 + (v54 << 6));
      v57 = *v56;
      if (!*v56)
      {
        if (v58 < 0x80)
        {
          v6 = v96;
        }
        else
        {
          v6 = v96;
          *((_BYTE *)v96 + 28) = 1;
        }
        goto LABEL_104;
      }
    }
    if (v58 >= 0x80)
      *((_BYTE *)v96 + 28) = 1;
    v63 = *v56;
    *v56 = 0;
    v64 = v55 + (v54 << 6);
    v67 = *(_QWORD *)(v64 + 16);
    v66 = v64 + 16;
    v65 = v67;
    v68 = (_QWORD *)(v66 + 16);
    v102 = *(_OWORD *)(v66 + 16);
    v103 = *(_OWORD *)(v66 + 32);
    *(_QWORD *)v66 = 0;
    v69 = *v56;
    *v56 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
      {
        v95 = v65;
        v91 = v63;
        WTF::StringImpl::destroy(v69, v41);
        v63 = v91;
        v65 = v95;
      }
      else
      {
        *(_DWORD *)v69 -= 2;
      }
    }
    *v56 = 0;
    *(_QWORD *)v66 = 0;
    *v68 = 0;
    *(_QWORD *)(v66 + 24) = 0;
    *(_QWORD *)(v66 + 32) = 0;
    v70 = *v34;
    if (*v34)
    {
      *(_DWORD *)v70 += 2;
      v71 = *v56;
      *v56 = v70;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          v92 = v65;
          v93 = v63;
          WTF::StringImpl::destroy(v71, v41);
          v63 = v93;
          v65 = v92;
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
    }
    else
    {
      *v56 = 0;
    }
    v72 = *(_DWORD **)v66;
    *(_QWORD *)v66 = v97;
    if (v72)
    {
      if (v72[6] == 1)
      {
        v89 = v65;
        v90 = v63;
        (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 16))(v72);
        v63 = v90;
        v65 = v89;
      }
      else
      {
        --v72[6];
      }
    }
    *(_OWORD *)v68 = v100;
    v68[2] = v101;
    v73 = ((_DWORD)v54 + 1) & v51;
    v74 = *v99;
    v75 = (WTF **)(*v99 + (v73 << 6));
    for (i = *v75; *v75; i = *v75)
    {
      v77 = *((_DWORD *)i + 4);
      if (v77 < 0x100)
      {
        v79 = v65;
        v80 = v63;
        v78 = WTF::StringImpl::hashSlowCase(i);
        v63 = v80;
        v65 = v79;
      }
      else
      {
        v78 = v77 >> 8;
      }
      ++v61;
      v81 = (v73 + v49 - ((v78 ^ v98) & v51)) & v51;
      if (v61 > v81)
      {
        v105 = v102;
        v106 = v103;
        v82 = *v75;
        *v75 = 0;
        v83 = v74 + (v73 << 6);
        v84 = *(_QWORD *)(v83 + 16);
        *(_QWORD *)(v83 + 16) = 0;
        v102 = *(_OWORD *)(v83 + 32);
        *(_QWORD *)&v103 = *(_QWORD *)(v83 + 48);
        *v75 = v63;
        v85 = *(_DWORD **)(v83 + 16);
        *(_QWORD *)(v83 + 16) = v65;
        if (v85)
        {
          if (v85[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 16))(v85);
          else
            --v85[6];
        }
        *(_OWORD *)(v83 + 32) = v105;
        *(_QWORD *)(v83 + 48) = v106;
        v65 = v84;
        v63 = v82;
        v61 = v81;
      }
      v73 = ((_DWORD)v73 + 1) & v51;
      v74 = *v99;
      v75 = (WTF **)(*v99 + (v73 << 6));
    }
    *v75 = v63;
    v86 = v74 + (v73 << 6);
    result = *(_QWORD *)(v86 + 16);
    *(_QWORD *)(v86 + 16) = v65;
    v6 = v96;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 24);
    }
    *(_OWORD *)(v86 + 32) = v102;
    v87 = v103;
  }
  else
  {
LABEL_104:
    v88 = *v34;
    if (*v34)
      *(_DWORD *)v88 += 2;
    *v56 = v88;
    v86 = v55 + (v54 << 6);
    result = *(_QWORD *)(v86 + 16);
    *(_QWORD *)(v86 + 16) = v97;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 24);
    }
    *(_OWORD *)(v86 + 32) = v100;
    v87 = v101;
  }
  *(_QWORD *)(v86 + 48) = v87;
  ++*((_DWORD *)v6 + 5);
  return result;
}

uint64_t WebCore::MediaSourceRegistry::unregisterURL(WebCore::MediaSourceRegistry *this, WTF::StringImpl **a2, const WebCore::SecurityOriginData *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v31[4];

  result = WTF::isMainThread(this);
  if ((_DWORD)result)
  {
    result = (uint64_t)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 1, a2, v6);
    v8 = *((unsigned int *)this + 4);
    if (*((_QWORD *)this + 1) + (v8 << 6) != result)
    {
      v9 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = 0;
      v11 = *(_QWORD *)(result + 32);
      v10 = *(_QWORD *)(result + 40);
      v12 = *(_QWORD *)(result + 48);
      if (*((_QWORD *)this + 1) + (v8 << 6) != result)
        result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 8, (WTF::StringImpl **)result);
      if (v9)
      {
        v13 = *(_QWORD *)(v9 + 248);
        v14 = *(_QWORD *)(v9 + 256);
        v31[0] = "MediaSource";
        v31[1] = 12;
        v31[2] = "removedFromRegistry";
        v31[3] = v14;
        if (*(_BYTE *)(v13 + 12))
        {
          if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)v31);
        }
        v16 = (unint64_t *)(v9 + 264);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        v20 = *((_QWORD *)this + 4);
        v18 = (uint64_t *)((char *)this + 32);
        v19 = v20;
        if (v20)
        {
          v21 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v19, v11, v10, v12);
          if (v21)
            v22 = v21;
          else
            v22 = (uint64_t *)(v19 + 48 * *(unsigned int *)(v19 - 4));
        }
        else
        {
          v22 = 0;
        }
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(v22 + 4, a2, v7);
        result = v22[4];
        if (result && *(_DWORD *)(result - 12))
          goto LABEL_41;
        if (*v18)
        {
          v24 = *v18 + 48 * *(unsigned int *)(*v18 - 4);
          if ((uint64_t *)v24 == v22)
          {
LABEL_41:
            if (*(_DWORD *)(v9 + 24) == 1)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
            --*(_DWORD *)(v9 + 24);
            return result;
          }
        }
        else
        {
          if (!v22)
            goto LABEL_41;
          v24 = 0;
        }
        if ((uint64_t *)v24 != v22)
        {
          *v22 = 1;
          v22[1] = 0;
          v22[2] = -1;
          if (result)
            result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, v23);
          ++*(_DWORD *)(*v18 - 16);
          v25 = *v18;
          if (*v18)
            v26 = *(_DWORD *)(v25 - 12) - 1;
          else
            v26 = -1;
          *(_DWORD *)(v25 - 12) = v26;
          v27 = *v18;
          if (*v18)
          {
            v28 = 6 * *(_DWORD *)(v27 - 12);
            v29 = *(_DWORD *)(v27 - 4);
            if (v28 < v29 && v29 >= 9)
              result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v18, v29 >> 1, 0);
          }
        }
        goto LABEL_41;
      }
    }
  }
  return result;
}

uint64_t WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v3 + 8 * v10);
    if (!v11)
    {
      v13 = (WTF::StringImpl **)*a1;
      if (!*a1)
        return 0;
      v14 = *((unsigned int *)v13 - 1);
      v12 = &v13[v14];
      goto LABEL_12;
    }
    if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0)
      break;
    ++i;
  }
  v12 = (WTF::StringImpl **)(v3 + 8 * v10);
  v13 = (WTF::StringImpl **)*a1;
  if (!*a1)
    goto LABEL_13;
  v14 = *((unsigned int *)v13 - 1);
LABEL_12:
  v13 += v14;
  if (v13 == v12)
    return 0;
LABEL_13:
  if (v13 != v12)
  {
    v15 = *v12;
    *v12 = (WTF::StringImpl *)-1;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    ++*(_DWORD *)(*a1 - 16);
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) - 1;
    else
      v17 = -1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *a1;
    if (*a1)
    {
      v20 = 6 * *(_DWORD *)(v18 - 12);
      v21 = *(_DWORD *)(v18 - 4);
      if (v20 < v21 && v21 >= 9)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v21 >> 1, 0);
    }
  }
  return 1;
}

WTF::StringImpl **WebCore::MediaSourceRegistry::unregisterURLsForContext(WebCore::MediaSourceRegistry *this, const WebCore::ScriptExecutionContext *a2)
{
  WTF::StringImpl **result;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  WTF **v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl **v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;

  result = (WTF::StringImpl **)WTF::isMainThread(this);
  if ((_DWORD)result)
  {
    v5 = (uint64_t **)((char *)this + 32);
    v6 = *((_QWORD *)this + 4);
    if (!v6)
      goto LABEL_11;
    v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(*((_QWORD *)this + 4), *((_QWORD *)a2 + 28), *((_QWORD *)a2 + 29), *((_QWORD *)a2 + 30));
    v8 = *(_DWORD *)(v6 - 4);
    if (!v7)
      v7 = (uint64_t *)(v6 + 48 * v8);
    if ((uint64_t *)(v6 + 48 * v8) == v7)
    {
LABEL_11:
      v32 = 0;
    }
    else
    {
      v9 = (WTF::StringImpl **)v7[4];
      v7[4] = 0;
      v32 = v9;
      v10 = *v5;
      if (!*v5 || (v10 += 6 * *((unsigned int *)v10 - 1), v10 != v7))
      {
        if (v10 != v7)
        {
          *v7 = 1;
          v7[1] = 0;
          v7[2] = -1;
          ++*((_DWORD *)*v5 - 4);
          v11 = *v5;
          v12 = *v5 ? *((_DWORD *)v11 - 3) - 1 : -1;
          *((_DWORD *)v11 - 3) = v12;
          v28 = *v5;
          if (*v5)
          {
            v29 = 6 * *((_DWORD *)v28 - 3);
            v30 = *((_DWORD *)v28 - 1);
            if (v29 < v30 && v30 >= 9)
              WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash((uint64_t *)this + 4, v30 >> 1, 0);
          }
        }
      }
    }
    v15 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v32);
    v16 = (WTF::StringImpl **)v13;
    result = v32;
    if (v32)
      v17 = &v32[*((unsigned int *)v32 - 1)];
    else
      v17 = 0;
    if (v17 != v15)
    {
      do
      {
        v18 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 1, v15, v14);
        v19 = *((unsigned int *)this + 4);
        if ((WTF **)(*((_QWORD *)this + 1) + (v19 << 6)) == v18)
        {
          v33 = "MediaSource";
          v34 = 12;
          v35 = "removedFromRegistry";
          v36 = MEMORY[0x100];
          if (*(_BYTE *)(MEMORY[0xF8] + 12))
          {
            if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)&v33);
          }
          do
            v27 = __ldaxr((unint64_t *)0x108);
          while (__stlxr(v27 - 1, (unint64_t *)0x108));
        }
        else
        {
          v13 = (WTF::StringImpl *)v18;
          v20 = v18[2];
          v18[2] = 0;
          if ((WTF **)(*((_QWORD *)this + 1) + (v19 << 6)) != v18)
            WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)this + 8, v18);
          v21 = *((_QWORD *)v20 + 31);
          v22 = *((_QWORD *)v20 + 32);
          v33 = "MediaSource";
          v34 = 12;
          v35 = "removedFromRegistry";
          v36 = v22;
          if (*(_BYTE *)(v21 + 12))
          {
            if (WebCore::LogMediaSource)
              v23 = byte_1ECE7CE70 >= 4u;
            else
              v23 = 0;
            if (v23)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)&v33);
          }
          v24 = (unint64_t *)((char *)v20 + 264);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (*((_DWORD *)v20 + 6) == 1)
            (*(void (**)(WTF *, WTF::StringImpl *))(*(_QWORD *)v20 + 16))(v20, v13);
          else
            --*((_DWORD *)v20 + 6);
        }
        while (++v15 != v16)
        {
          if ((unint64_t)*v15 + 1 > 1)
            goto LABEL_41;
        }
        v15 = v16;
LABEL_41:
        ;
      }
      while (v15 != v17);
      result = v32;
    }
    if (result)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v13);
  }
  return result;
}

uint64_t WebCore::MediaSourceRegistry::lookup(WebCore::MediaSourceRegistry *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 4);
  if (v3)
  {
    v7 = v4 - 1;
    v8 = *((_DWORD *)this + 6);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 < 0x100)
    {
      v10 = WTF::StringImpl::hashSlowCase(*a2);
      v3 = *((_QWORD *)this + 1);
    }
    else
    {
      v10 = v9 >> 8;
    }
    v12 = (v10 ^ v8) & v7;
    v11 = v3 + (v12 << 6);
    v13 = *(WTF **)v11;
    if (*(_QWORD *)v11)
    {
      v14 = -1;
      while (1)
      {
        v15 = *((_DWORD *)v13 + 4);
        v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
        if (++v14 > (((_DWORD)v12 + (_DWORD)v4 - ((v16 ^ v8) & v7)) & v7))
          break;
        if (v16 == v10)
        {
          v17 = WTF::equal(*(WTF **)v11, *a2, a3);
          v3 = *((_QWORD *)this + 1);
          if ((v17 & 1) != 0)
          {
            v4 = *((unsigned int *)this + 4);
            goto LABEL_20;
          }
        }
        else
        {
          v3 = *((_QWORD *)this + 1);
        }
        v12 = ((_DWORD)v12 + 1) & v7;
        v11 = v3 + (v12 << 6);
        v13 = *(WTF **)v11;
        if (!*(_QWORD *)v11)
          goto LABEL_19;
      }
      v3 = *((_QWORD *)this + 1);
    }
LABEL_19:
    v4 = *((unsigned int *)this + 4);
    v11 = v3 + (v4 << 6);
  }
  else
  {
    v11 = v4 << 6;
  }
LABEL_20:
  if (v3 + (v4 << 6) == v11)
    return 0;
  v18 = *(_QWORD *)(v11 + 16);
  if (v18)
    return v18 + 64;
  else
    return 0;
}

BOOL WebCore::SampleMap::empty(WebCore::SampleMap *this)
{
  return *((_QWORD *)this + 5) == 0;
}

uint64_t WebCore::SampleMap::clear(WTF **this)
{
  WTF *v2;
  uint64_t result;

  v2 = (WTF *)(this + 4);
  std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)(this + 3), this[4]);
  this[3] = v2;
  this[5] = 0;
  *(_QWORD *)v2 = 0;
  result = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy((uint64_t)this, this[1]);
  *this = (WTF *)(this + 1);
  this[2] = 0;
  this[1] = 0;
  this[6] = 0;
  return result;
}

unsigned int *WebCore::SampleMap::addSample(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  WTF::MediaTime *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *result;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  unsigned int *v38;
  uint64_t v39;

  v4 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a2 + 16))(*a2);
  v6 = v5;
  *(_QWORD *)(a1 + 48) += (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a2 + 48))(*a2);
  *(_QWORD *)&v36 = v4;
  *((_QWORD *)&v36 + 1) = v6;
  v7 = *a2;
  v8 = *a2 + 2;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)&v37 = v7;
  v11 = (uint64_t *)(a1 + 32);
  v10 = *(uint64_t **)(a1 + 32);
  if (!v10)
  {
    v12 = (uint64_t *)(a1 + 32);
LABEL_11:
    v14 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)(v14 + 32) = v36;
    v15 = v37;
    *(_QWORD *)&v37 = 0;
    *(_QWORD *)(v14 + 48) = v15;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = v12;
    *v11 = v14;
    v16 = **(_QWORD **)(a1 + 24);
    if (v16)
    {
      *(_QWORD *)(a1 + 24) = v16;
      v17 = *v11;
    }
    else
    {
      v17 = v14;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(a1 + 32), v17);
    ++*(_QWORD *)(a1 + 40);
    goto LABEL_15;
  }
  while (1)
  {
    while (1)
    {
      v12 = v10;
      v13 = (WTF::MediaTime *)(v10 + 4);
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v36, (const WTF::MediaTime *)(v10 + 4)) != -1)
        break;
      v10 = (uint64_t *)*v12;
      v11 = v12;
      if (!*v12)
        goto LABEL_11;
    }
    if (WTF::MediaTime::compare(v13, (const WTF::MediaTime *)&v36) != -1)
      break;
    v11 = v12 + 1;
    v10 = (uint64_t *)v12[1];
    if (!v10)
      goto LABEL_11;
  }
  if (!*v11)
    goto LABEL_11;
LABEL_15:
  v18 = (unsigned int *)v37;
  *(_QWORD *)&v37 = 0;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  *(_QWORD *)&v36 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a2 + 24))(*a2);
  *((_QWORD *)&v36 + 1) = v22;
  *(_QWORD *)&v37 = v4;
  *((_QWORD *)&v37 + 1) = v6;
  v23 = *a2;
  *a2 = 0;
  v38 = v23;
  v24 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>(a1, &v39, (WTF::MediaTime *)&v36);
  if (!*v24)
  {
    v25 = v24;
    v26 = WTF::fastMalloc((WTF *)0x48);
    v27 = v37;
    *(_OWORD *)(v26 + 32) = v36;
    *(_OWORD *)(v26 + 48) = v27;
    v28 = v38;
    v38 = 0;
    *(_QWORD *)(v26 + 64) = v28;
    v29 = v39;
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = v29;
    *v25 = v26;
    v30 = **(_QWORD **)a1;
    if (v30)
    {
      *(_QWORD *)a1 = v30;
      v31 = *v25;
    }
    else
    {
      v31 = v26;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(a1 + 8), v31);
    ++*(_QWORD *)(a1 + 16);
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    v33 = result + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WebCore::SampleMap::removeSample(WebCore::SampleMap *this, const WebCore::MediaSample *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  void *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;

  *(_QWORD *)&v20 = (*(uint64_t (**)(const WebCore::MediaSample *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)&v20 + 1) = v4;
  *((_QWORD *)this + 6) -= (*(uint64_t (**)(const WebCore::MediaSample *))(*(_QWORD *)a2 + 48))(a2);
  v18[0] = (*(uint64_t (**)(const WebCore::MediaSample *))(*(_QWORD *)a2 + 24))(a2);
  v18[1] = v5;
  v19 = v20;
  std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__erase_unique<WTF::MediaTime>((uint64_t **)this + 3, (WTF::MediaTime *)&v20);
  result = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this, (WTF::MediaTime *)v18);
  if ((uint64_t *)((char *)this + 8) != result)
  {
    v7 = result;
    v8 = (uint64_t *)result[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (uint64_t *)*v8;
      }
      while (v8);
    }
    else
    {
      v10 = result;
      do
      {
        v9 = (uint64_t *)v10[2];
        v11 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v11);
    }
    if (*(uint64_t **)this == result)
      *(_QWORD *)this = v9;
    v12 = (uint64_t *)*((_QWORD *)this + 1);
    --*((_QWORD *)this + 2);
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v12, v7);
    v14 = (unsigned int *)v7[8];
    v7[8] = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
    return (uint64_t *)WTF::fastFree((WTF *)v7, v13);
  }
  return result;
}

char *WebCore::PresentationOrderSampleMap::findSampleWithPresentationTime(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2)
{
  char *v2;
  char *v3;
  char *v5;
  int v6;
  char *v7;
  char *v8;

  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 1);
  if (!v3)
  {
    v8 = (char *)this + 8;
    v5 = (char *)this + 8;
    goto LABEL_13;
  }
  v5 = (char *)this + 8;
  while (1)
  {
    if (WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v3 + 32)) == -1)
    {
      v7 = v3;
      v5 = v3;
      goto LABEL_7;
    }
    v6 = WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 32), a2);
    v7 = v3 + 8;
    if (v6 != -1)
      break;
LABEL_7:
    v3 = *(char **)v7;
    v8 = v5;
    if (!v3)
      goto LABEL_13;
  }
  while (1)
  {
    v7 = *(char **)v7;
    if (!v7)
      break;
    v5 = v7;
  }
  v8 = v3;
LABEL_13:
  if (v8 == v5)
    return v2;
  else
    return v8;
}

char *WebCore::PresentationOrderSampleMap::findSampleContainingPresentationTime(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[2];

  v4 = (char *)this + 8;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)((char *)this + 8);
  if (v5)
  {
    v6 = (uint64_t *)((char *)this + 8);
    do
    {
      v7 = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v5 + 4));
      v8 = v5 + 1;
      if (v7 == -1)
      {
        v8 = v5;
        v6 = v5;
      }
      v5 = (_QWORD *)*v8;
    }
    while (*v8);
  }
  if (v6 != *(uint64_t **)this)
  {
    v9 = *v6;
    if (*v6)
    {
      do
      {
        v10 = v9;
        v9 = *(_QWORD *)(v9 + 8);
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = v6[2];
        v11 = *(_QWORD *)v10 == (_QWORD)v6;
        v6 = (uint64_t *)v10;
      }
      while (v11);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 48) + 16))(*(_QWORD *)(v10 + 48));
    (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 48) + 32))(*(_QWORD *)(v10 + 48));
    v14[0] = WTF::MediaTime::operator+();
    v14[1] = v12;
    if (WTF::MediaTime::compare((WTF::MediaTime *)v14, a2) == 1)
      return (char *)v10;
  }
  return v4;
}

_QWORD *WebCore::PresentationOrderSampleMap::findSampleContainingOrAfterPresentationTime(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2)
{
  _QWORD *v2;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[2];

  v2 = (_QWORD *)((char *)this + 8);
  if (*((_QWORD *)this + 2))
  {
    v5 = (_QWORD *)*v2;
    if (*v2)
    {
      do
      {
        v6 = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v5 + 4));
        v7 = v5 + 1;
        if (v6 == -1)
        {
          v7 = v5;
          v2 = v5;
        }
        v5 = (_QWORD *)*v7;
      }
      while (*v7);
    }
    if (v2 != *(_QWORD **)this)
    {
      v8 = (_QWORD *)*v2;
      if (*v2)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v2[2];
          v10 = *v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (v10);
      }
      (*(void (**)(_QWORD))(*(_QWORD *)v9[6] + 16))(v9[6]);
      (*(void (**)(_QWORD))(*(_QWORD *)v9[6] + 32))(v9[6]);
      v14[0] = WTF::MediaTime::operator+();
      v14[1] = v11;
      if (WTF::MediaTime::compare((WTF::MediaTime *)v14, a2) == 1)
      {
        return v9;
      }
      else
      {
        v12 = (_QWORD *)v9[1];
        if (v12)
        {
          do
          {
            v2 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v2 = (_QWORD *)v9[2];
            v10 = *v2 == (_QWORD)v9;
            v9 = v2;
          }
          while (!v10);
        }
      }
    }
  }
  return v2;
}

char *WebCore::PresentationOrderSampleMap::findSampleStartingOnOrAfterPresentationTime(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2)
{
  char *v2;
  _QWORD *v3;
  int v5;
  _QWORD *v6;

  v2 = (char *)this + 8;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
    {
      v5 = WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 4), a2);
      v6 = v3 + 1;
      if (v5 != -1)
      {
        v6 = v3;
        v2 = (char *)v3;
      }
      v3 = (_QWORD *)*v6;
    }
    while (*v6);
  }
  return v2;
}

char *WebCore::PresentationOrderSampleMap::findSampleStartingAfterPresentationTime(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2)
{
  char *v2;
  _QWORD *v3;
  int v5;
  _QWORD *v6;

  v2 = (char *)this + 8;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    do
    {
      v5 = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v3 + 4));
      v6 = v3 + 1;
      if (v5 == -1)
      {
        v6 = v3;
        v2 = (char *)v3;
      }
      v3 = (_QWORD *)*v6;
    }
    while (*v6);
  }
  return v2;
}

_QWORD *WebCore::DecodeOrderSampleMap::findSampleAfterDecodeKey(uint64_t a1, WTF::MediaTime *this)
{
  _QWORD *v2;
  _QWORD *v3;
  WTF::MediaTime *v5;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    v5 = (WTF::MediaTime *)((char *)this + 16);
    while (WTF::MediaTime::compare(this, (const WTF::MediaTime *)(v3 + 4)) != -1)
    {
      if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 4), this) != -1)
      {
        if (WTF::MediaTime::compare(v5, (const WTF::MediaTime *)(v3 + 6)) == -1)
          break;
        WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 6), v5);
      }
      ++v3;
LABEL_9:
      v3 = (_QWORD *)*v3;
      if (!v3)
        return v2;
    }
    v2 = v3;
    goto LABEL_9;
  }
  return v2;
}

WebCore::PresentationOrderSampleMap *WebCore::PresentationOrderSampleMap::reverseFindSampleContainingPresentationTime(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2)
{
  char *v3;
  _QWORD *v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  v3 = (char *)this + 8;
  v4 = *(_QWORD **)this;
  if ((WebCore::PresentationOrderSampleMap *)((char *)this + 8) == *(WebCore::PresentationOrderSampleMap **)this)
    return *(WebCore::PresentationOrderSampleMap **)this;
  v6 = 0;
  v7 = (_QWORD *)((char *)this + 8);
  do
  {
    v8 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v7[2];
        v10 = *v9 == (_QWORD)v7;
        v7 = v9;
      }
      while (v10);
    }
    ++v6;
    v7 = v9;
  }
  while (v9 != v4);
  v11 = (_QWORD *)((char *)this + 8);
  while (1)
  {
    v12 = v6 >> 1;
    v13 = v11;
    if (v6 != 1)
    {
      v14 = v11;
      v15 = v6 >> 1;
      do
      {
        v16 = (_QWORD *)*v14;
        if (*v14)
        {
          do
          {
            v13 = v16;
            v16 = (_QWORD *)v16[1];
          }
          while (v16);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v14[2];
            v10 = *v13 == (_QWORD)v14;
            v14 = v13;
          }
          while (v10);
        }
        v14 = v13;
        v17 = v15-- <= 1;
      }
      while (!v17);
    }
    v18 = *v13;
    v19 = v13;
    if (*v13)
    {
      do
      {
        v20 = v18;
        v18 = *(_QWORD *)(v18 + 8);
      }
      while (v18);
    }
    else
    {
      do
      {
        v20 = v19[2];
        v10 = *(_QWORD *)v20 == (_QWORD)v19;
        v19 = (_QWORD *)v20;
      }
      while (v10);
    }
    v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v20 + 48) + 16))(*(_QWORD *)(v20 + 48));
    v59 = v21;
    v22 = WTF::MediaTime::compare((WTF::MediaTime *)&v58, a2);
    v23 = (_QWORD *)*v13;
    if (v22 == 1)
    {
      if (v23)
      {
        do
        {
          v11 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v13[2];
          v10 = *v11 == (_QWORD)v13;
          v13 = v11;
        }
        while (v10);
      }
      v12 = v6 + ~v12;
      goto LABEL_33;
    }
    v24 = v13;
    if (v23)
    {
      do
      {
        v25 = v23;
        v23 = (_QWORD *)v23[1];
      }
      while (v23);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v24[2];
        v10 = *v25 == (_QWORD)v24;
        v24 = v25;
      }
      while (v10);
    }
    (*(void (**)(_QWORD))(*(_QWORD *)v25[6] + 16))(v25[6]);
    (*(void (**)(_QWORD))(*(_QWORD *)v25[6] + 32))(v25[6]);
    v58 = WTF::MediaTime::operator+();
    v59 = v26;
    if ((WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v58) & 0x80000000) != 0)
      break;
    v4 = v13;
LABEL_33:
    v6 = v12;
    if (!v12)
      return *(WebCore::PresentationOrderSampleMap **)this;
  }
  if (v11 != v13)
  {
    v28 = 0;
    v29 = v11;
    do
    {
      v30 = (_QWORD *)*v29;
      if (*v29)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)v30[1];
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v29[2];
          v10 = *v31 == (_QWORD)v29;
          v29 = v31;
        }
        while (v10);
      }
      ++v28;
      v29 = v31;
    }
    while (v31 != v13);
    do
    {
      v32 = v28 >> 1;
      v33 = v11;
      if (v28 != 1)
      {
        v34 = v11;
        v35 = v28 >> 1;
        do
        {
          v36 = (_QWORD *)*v34;
          if (*v34)
          {
            do
            {
              v33 = v36;
              v36 = (_QWORD *)v36[1];
            }
            while (v36);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v34[2];
              v10 = *v33 == (_QWORD)v34;
              v34 = v33;
            }
            while (v10);
          }
          v34 = v33;
          v17 = v35-- <= 1;
        }
        while (!v17);
      }
      v37 = *v33;
      v38 = v33;
      if (*v33)
      {
        do
        {
          v39 = v37;
          v37 = *(_QWORD *)(v37 + 8);
        }
        while (v37);
      }
      else
      {
        do
        {
          v39 = v38[2];
          v10 = *(_QWORD *)v39 == (_QWORD)v38;
          v38 = (_QWORD *)v39;
        }
        while (v10);
      }
      v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v39 + 48) + 16))(*(_QWORD *)(v39 + 48));
      v59 = v40;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v58, a2) == 1)
      {
        v41 = (_QWORD *)*v33;
        if (*v33)
        {
          do
          {
            v11 = v41;
            v41 = (_QWORD *)v41[1];
          }
          while (v41);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v33[2];
            v10 = *v11 == (_QWORD)v33;
            v33 = v11;
          }
          while (v10);
        }
        v32 = v28 + ~v32;
      }
      v28 = v32;
    }
    while (v32);
  }
  v42 = (_QWORD *)*v13;
  if (*v13)
  {
    do
    {
      v43 = v42;
      v42 = (_QWORD *)v42[1];
    }
    while (v42);
  }
  else
  {
    do
    {
      v43 = (_QWORD *)v13[2];
      v10 = *v43 == (_QWORD)v13;
      v13 = v43;
    }
    while (v10);
  }
  if (v43 != v4)
  {
    v44 = 0;
    v45 = v43;
    do
    {
      v46 = (_QWORD *)*v45;
      if (*v45)
      {
        do
        {
          v47 = v46;
          v46 = (_QWORD *)v46[1];
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (_QWORD *)v45[2];
          v10 = *v47 == (_QWORD)v45;
          v45 = v47;
        }
        while (v10);
      }
      ++v44;
      v45 = v47;
    }
    while (v47 != v4);
    do
    {
      v48 = v44 >> 1;
      v49 = v43;
      if (v44 != 1)
      {
        v50 = v43;
        v51 = v44 >> 1;
        do
        {
          v52 = (_QWORD *)*v50;
          if (*v50)
          {
            do
            {
              v49 = v52;
              v52 = (_QWORD *)v52[1];
            }
            while (v52);
          }
          else
          {
            do
            {
              v49 = (_QWORD *)v50[2];
              v10 = *v49 == (_QWORD)v50;
              v50 = v49;
            }
            while (v10);
          }
          v50 = v49;
          v17 = v51-- <= 1;
        }
        while (!v17);
      }
      v53 = *v49;
      v54 = v49;
      if (*v49)
      {
        do
        {
          v55 = v53;
          v53 = *(_QWORD *)(v53 + 8);
        }
        while (v53);
      }
      else
      {
        do
        {
          v55 = v54[2];
          v10 = *(_QWORD *)v55 == (_QWORD)v54;
          v54 = (_QWORD *)v55;
        }
        while (v10);
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(v55 + 48) + 16))(*(_QWORD *)(v55 + 48));
      (*(void (**)(_QWORD))(**(_QWORD **)(v55 + 48) + 32))(*(_QWORD *)(v55 + 48));
      v58 = WTF::MediaTime::operator+();
      v59 = v56;
      if ((WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v58) & 0x80000000) != 0)
      {
        v57 = (_QWORD *)*v49;
        if (*v49)
        {
          do
          {
            v43 = v57;
            v57 = (_QWORD *)v57[1];
          }
          while (v57);
        }
        else
        {
          do
          {
            v43 = (_QWORD *)v49[2];
            v10 = *v43 == (_QWORD)v49;
            v49 = v43;
          }
          while (v10);
        }
        v48 = v44 + ~v48;
      }
      v44 = v48;
    }
    while (v48);
  }
  if (v43 == v11)
    return *(WebCore::PresentationOrderSampleMap **)this;
  return (WebCore::PresentationOrderSampleMap *)v3;
}

char *WebCore::PresentationOrderSampleMap::reverseFindSampleBeforePresentationTime(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2)
{
  char *v3;
  _QWORD *v4;
  char *v6;
  int v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v13;
  char *v14;

  if (!*((_QWORD *)this + 2))
    return *(char **)this;
  v3 = (char *)this + 8;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
  {
    v6 = (char *)this + 8;
    do
    {
      v7 = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v4 + 4));
      v8 = v4 + 1;
      if (v7 == -1)
      {
        v8 = v4;
        v6 = (char *)v4;
      }
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v6 != v3)
    {
      if (v6 == *(char **)this)
        return v6;
      v9 = *(char **)v6;
      if (*(_QWORD *)v6)
      {
        do
        {
          v6 = v9;
          v9 = (char *)*((_QWORD *)v9 + 1);
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = v6;
          v6 = (char *)*((_QWORD *)v6 + 2);
        }
        while (*(char **)v6 == v10);
        v11 = (_QWORD *)*((_QWORD *)v6 + 1);
        if (v11)
        {
          do
            v11 = (_QWORD *)*v11;
          while (v11);
          return v6;
        }
      }
      v13 = v6;
      do
      {
        v14 = v13;
        v13 = (char *)*((_QWORD *)v13 + 2);
      }
      while (*(char **)v13 != v14);
      return v6;
    }
  }
  return v3;
}

_QWORD *WebCore::DecodeOrderSampleMap::reverseFindSampleWithDecodeKey(uint64_t a1, WTF::MediaTime *a2)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  result = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>(a1, a2);
  if ((_QWORD *)(a1 + 8) == result)
    return *(_QWORD **)a1;
  v4 = (_QWORD *)result[1];
  if (v4)
  {
    do
      v4 = (_QWORD *)*v4;
    while (v4);
  }
  else
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)v5[2] == (_QWORD)v5;
      v5 = (_QWORD *)v5[2];
    }
    while (!v6);
  }
  return result;
}

_QWORD *WebCore::DecodeOrderSampleMap::findSyncSamplePriorToPresentationTime(WebCore::DecodeOrderSampleMap *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!*((_QWORD *)this + 5))
    return *(_QWORD **)this;
  v5 = (_QWORD *)((char *)this + 32);
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v6)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 3);
    goto LABEL_19;
  }
  v7 = (_QWORD *)((char *)this + 32);
  do
  {
    v8 = WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v6 + 4));
    v9 = v6 + 1;
    if (v8 == -1)
    {
      v9 = v6;
      v7 = v6;
    }
    v6 = (_QWORD *)*v9;
  }
  while (*v9);
  v10 = (_QWORD *)*((_QWORD *)this + 3);
  if (v7 != v5)
  {
    if (v7 == v10)
      return *(_QWORD **)this;
    v11 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v7 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
LABEL_11:
      v5 = v7;
      do
      {
        v12 = v5;
        v5 = (_QWORD *)v5[2];
      }
      while ((_QWORD *)*v5 != v12);
      goto LABEL_19;
    }
    do
    {
      v13 = v7;
      v7 = (_QWORD *)v7[2];
    }
    while ((_QWORD *)*v7 == v13);
    v14 = (_QWORD *)v7[1];
    if (!v14)
      goto LABEL_11;
    do
    {
      v5 = v14;
      v14 = (_QWORD *)*v14;
    }
    while (v14);
  }
LABEL_19:
  if (v5 == v10)
    return *(_QWORD **)this;
  v15 = *v5;
  if (*v5)
  {
    do
    {
      v16 = v15;
      v15 = *(_QWORD *)(v15 + 8);
    }
    while (v15);
  }
  else
  {
    do
    {
      v16 = v5[2];
      v17 = *(_QWORD *)v16 == (_QWORD)v5;
      v5 = (_QWORD *)v16;
    }
    while (v17);
  }
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 48) + 24))(*(_QWORD *)(v16 + 48));
  v20 = v19;
  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 48) + 16))(*(_QWORD *)(v16 + 48));
  v41 = v18;
  v42 = v20;
  v43 = v21;
  v44 = v22;
  v23 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this, (WTF::MediaTime *)&v41);
  if ((_QWORD *)((char *)this + 8) == v23)
  {
    v24 = *(_QWORD **)this;
    v26 = *(_QWORD **)this;
  }
  else
  {
    v24 = v23;
    v25 = (_QWORD *)v23[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
    }
    else
    {
      v26 = v23;
      do
      {
        v27 = v26;
        v26 = (_QWORD *)v26[2];
      }
      while ((_QWORD *)*v26 != v27);
    }
  }
  v28 = *(_QWORD **)this;
  if (*(_QWORD **)this == v26)
    return v26;
  while (1)
  {
    v29 = *v26;
    v30 = v26;
    if (*v26)
    {
      do
      {
        v31 = v29;
        v29 = *(_QWORD *)(v29 + 8);
      }
      while (v29);
    }
    else
    {
      do
      {
        v31 = v30[2];
        v17 = *(_QWORD *)v31 == (_QWORD)v30;
        v30 = (_QWORD *)v31;
      }
      while (v17);
    }
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 64) + 104))(*(_QWORD *)(v31 + 64)) & 1) != 0)
      break;
    v32 = (_QWORD *)*v26;
    if (*v26)
    {
      do
      {
        v33 = v32;
        v32 = (_QWORD *)v32[1];
      }
      while (v32);
    }
    else
    {
      do
      {
        v33 = (_QWORD *)v26[2];
        v17 = *v33 == (_QWORD)v26;
        v26 = v33;
      }
      while (v17);
    }
    v26 = v33;
    if (v33 == v28)
    {
      v26 = v28;
      break;
    }
  }
  if (v26 == *(_QWORD **)this)
    return *(_QWORD **)this;
  v34 = *v26;
  if (*v26)
  {
    do
    {
      v35 = v34;
      v34 = *(_QWORD *)(v34 + 8);
    }
    while (v34);
  }
  else
  {
    v36 = v26;
    do
    {
      v35 = v36[2];
      v17 = *(_QWORD *)v35 == (_QWORD)v36;
      v36 = (_QWORD *)v35;
    }
    while (v17);
  }
  v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 64) + 16))(*(_QWORD *)(v35 + 64));
  v42 = v37;
  v40[0] = WTF::MediaTime::operator-();
  v40[1] = v38;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v41, (const WTF::MediaTime *)v40) == -1)
    return *(_QWORD **)this;
  return v24;
}

uint64_t WebCore::DecodeOrderSampleMap::findSyncSamplePriorToDecodeIterator(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a3)
  {
    v5 = a3;
    do
    {
      v6 = *v5;
      v7 = v5;
      if (*v5)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (_QWORD *)v8;
        }
        while (v9);
      }
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 64) + 104))(*(_QWORD *)(v8 + 64)) & 1) != 0)
        break;
      v10 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v9 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (v9);
      }
      v5 = v11;
    }
    while (v11 != v4);
  }
  return a2;
}

char *WebCore::DecodeOrderSampleMap::findSyncSampleAfterPresentationTime(WebCore::DecodeOrderSampleMap *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  char *v4;
  _QWORD *v5;
  char *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (char *)this + 32;
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v5)
    return (char *)this + 8;
  v7 = (char *)this + 32;
  do
  {
    v8 = WTF::MediaTime::compare((WTF::MediaTime *)(v5 + 4), a2);
    v9 = v5 + 1;
    if (v8 != -1)
    {
      v9 = v5;
      v7 = (char *)v5;
    }
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v4)
    return (char *)this + 8;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 6) + 24))(*((_QWORD *)v7 + 6));
  v12 = v11;
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 6) + 16))(*((_QWORD *)v7 + 6));
  v24 = v10;
  v25 = v12;
  v26 = v13;
  v27 = v14;
  v15 = (char *)std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this, (WTF::MediaTime *)&v24);
  v24 = WTF::MediaTime::operator+();
  v25 = v16;
  v17 = (char *)this + 8;
  if (v17 != v15)
  {
    while (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v15 + 8) + 104))(*((_QWORD *)v15 + 8)) & 1) == 0)
    {
      v18 = (char *)*((_QWORD *)v15 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (char *)*((_QWORD *)v15 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v20);
      }
      v15 = v19;
      if (v19 == v17)
        return v17;
    }
    if (v15 != v17)
    {
      v23[0] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v15 + 8) + 16))(*((_QWORD *)v15 + 8));
      v23[1] = v22;
      if (WTF::MediaTime::compare((WTF::MediaTime *)v23, (const WTF::MediaTime *)&v24) != 1)
        return v15;
    }
  }
  return v17;
}

_QWORD *WebCore::DecodeOrderSampleMap::findSyncSampleAfterDecodeIterator(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  if ((_QWORD *)(a1 + 8) == a2)
    return a2;
  v3 = (_QWORD *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    do
    {
      v4 = (_QWORD *)a2[2];
      v5 = *v4 == (_QWORD)a2;
      a2 = v4;
    }
    while (!v5);
  }
  if (v4 != v2)
  {
    while (((*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4[8] + 104))(v4[8], a2) & 1) == 0)
    {
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v5 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v5);
      }
      v4 = v7;
      if (v7 == v2)
        return v2;
    }
    return v4;
  }
  return v2;
}

char *WebCore::PresentationOrderSampleMap::findSamplesBetweenPresentationTimes(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  char *v3;
  _QWORD *v4;
  char *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  int v12;
  _QWORD *v13;

  v3 = (char *)this + 8;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
  {
    v7 = (char *)this + 8;
    do
    {
      v8 = WTF::MediaTime::compare((WTF::MediaTime *)(v4 + 4), a2);
      v9 = v4 + 1;
      if (v8 != -1)
      {
        v9 = v4;
        v7 = (char *)v4;
      }
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    v10 = *(_QWORD **)v3;
    v11 = v3;
    if (*(_QWORD *)v3)
    {
      v11 = v3;
      do
      {
        v12 = WTF::MediaTime::compare((WTF::MediaTime *)(v10 + 4), a3);
        v13 = v10 + 1;
        if (v12 != -1)
        {
          v13 = v10;
          v11 = (char *)v10;
        }
        v10 = (_QWORD *)*v13;
      }
      while (*v13);
    }
    if (v7 != v11)
      return v7;
  }
  return v3;
}

WebCore::PresentationOrderSampleMap *WebCore::PresentationOrderSampleMap::findSamplesBetweenPresentationTimesFromEnd(WebCore::PresentationOrderSampleMap *this, const WTF::MediaTime *a2, const WTF::MediaTime *a3)
{
  char *v3;
  WebCore::PresentationOrderSampleMap *v4;
  WebCore::PresentationOrderSampleMap *v8;
  WebCore::PresentationOrderSampleMap *v9;
  WebCore::PresentationOrderSampleMap *v10;
  WebCore::PresentationOrderSampleMap **v11;
  BOOL v12;
  WebCore::PresentationOrderSampleMap *v13;
  WebCore::PresentationOrderSampleMap *v14;
  WebCore::PresentationOrderSampleMap *v15;
  WebCore::PresentationOrderSampleMap *v16;
  WebCore::PresentationOrderSampleMap **v17;
  WebCore::PresentationOrderSampleMap *v18;
  WebCore::PresentationOrderSampleMap **v19;
  WebCore::PresentationOrderSampleMap **v20;
  WebCore::PresentationOrderSampleMap *v21;

  v3 = (char *)this + 8;
  v4 = *(WebCore::PresentationOrderSampleMap **)this;
  if ((WebCore::PresentationOrderSampleMap *)((char *)this + 8) == *(WebCore::PresentationOrderSampleMap **)this)
    return (WebCore::PresentationOrderSampleMap *)v3;
  v8 = (WebCore::PresentationOrderSampleMap *)((char *)this + 8);
  while (1)
  {
    v9 = *(WebCore::PresentationOrderSampleMap **)v8;
    v10 = v8;
    if (*(_QWORD *)v8)
    {
      do
      {
        v11 = (WebCore::PresentationOrderSampleMap **)v9;
        v9 = (WebCore::PresentationOrderSampleMap *)*((_QWORD *)v9 + 1);
      }
      while (v9);
    }
    else
    {
      do
      {
        v11 = (WebCore::PresentationOrderSampleMap **)*((_QWORD *)v10 + 2);
        v12 = *v11 == v10;
        v10 = (WebCore::PresentationOrderSampleMap *)v11;
      }
      while (v12);
    }
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v11 + 4), a3) == -1)
      break;
    v13 = *(WebCore::PresentationOrderSampleMap **)v8;
    if (*(_QWORD *)v8)
    {
      do
      {
        v14 = v13;
        v13 = (WebCore::PresentationOrderSampleMap *)*((_QWORD *)v13 + 1);
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (WebCore::PresentationOrderSampleMap *)*((_QWORD *)v8 + 2);
        v12 = *(_QWORD *)v14 == (_QWORD)v8;
        v8 = v14;
      }
      while (v12);
    }
    v8 = v14;
    if (v14 == v4)
    {
      v8 = v4;
      break;
    }
  }
  v15 = *(WebCore::PresentationOrderSampleMap **)this;
  if (v8 == v15)
    return (WebCore::PresentationOrderSampleMap *)v3;
  v16 = v8;
  while (1)
  {
    v17 = *(WebCore::PresentationOrderSampleMap ***)v16;
    v18 = v16;
    if (*(_QWORD *)v16)
    {
      do
      {
        v19 = v17;
        v17 = (WebCore::PresentationOrderSampleMap **)v17[1];
      }
      while (v17);
    }
    else
    {
      do
      {
        v19 = (WebCore::PresentationOrderSampleMap **)*((_QWORD *)v18 + 2);
        v12 = *v19 == v18;
        v18 = (WebCore::PresentationOrderSampleMap *)v19;
      }
      while (v12);
    }
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v19 + 4), a2) == -1)
      break;
    v20 = *(WebCore::PresentationOrderSampleMap ***)v16;
    if (*(_QWORD *)v16)
    {
      do
      {
        v21 = (WebCore::PresentationOrderSampleMap *)v20;
        v20 = (WebCore::PresentationOrderSampleMap **)v20[1];
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (WebCore::PresentationOrderSampleMap *)*((_QWORD *)v16 + 2);
        v12 = *(_QWORD *)v21 == (_QWORD)v16;
        v16 = v21;
      }
      while (v12);
    }
    v16 = v21;
    if (v21 == v15)
    {
      v16 = v15;
      break;
    }
  }
  if (v16 == v8)
    return (WebCore::PresentationOrderSampleMap *)v3;
  else
    return v16;
}

uint64_t WebCore::DecodeOrderSampleMap::findDependentSamples@<X0>(WebCore::DecodeOrderSampleMap *this@<X0>, const WebCore::MediaSample *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v24[4];

  v6 = (*(uint64_t (**)(const WebCore::MediaSample *))(*(_QWORD *)a2 + 24))(a2);
  v8 = v7;
  v9 = (*(uint64_t (**)(const WebCore::MediaSample *))(*(_QWORD *)a2 + 16))(a2);
  v24[0] = v6;
  v24[1] = v8;
  v24[2] = v9;
  v24[3] = v10;
  result = (uint64_t)std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>((uint64_t)this, (WTF::MediaTime *)v24);
  if ((WebCore::DecodeOrderSampleMap *)((char *)this + 8) == (WebCore::DecodeOrderSampleMap *)result)
  {
    v15 = *(_QWORD **)this;
    v12 = (uint64_t)v15;
    v14 = v15;
  }
  else
  {
    v12 = result;
    v13 = *(_QWORD **)(result + 8);
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      v16 = result;
      do
      {
        v14 = *(_QWORD **)(v16 + 16);
        v17 = *v14 == v16;
        v16 = (uint64_t)v14;
      }
      while (!v17);
    }
    v15 = *(_QWORD **)this;
  }
  if (v15 != v14)
  {
    v18 = v14;
    while (1)
    {
      v19 = *v18;
      v20 = v18;
      if (*v18)
      {
        do
        {
          v21 = v19;
          v19 = *(_QWORD *)(v19 + 8);
        }
        while (v19);
      }
      else
      {
        do
        {
          v21 = v20[2];
          v17 = *(_QWORD *)v21 == (_QWORD)v20;
          v20 = (_QWORD *)v21;
        }
        while (v17);
      }
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 64) + 104))(*(_QWORD *)(v21 + 64));
      if ((result & 1) != 0)
        break;
      v22 = (_QWORD *)*v18;
      if (*v18)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v18[2];
          v17 = *v23 == (_QWORD)v18;
          v18 = v23;
        }
        while (v17);
      }
      v18 = v23;
      if (v23 == v15)
        goto LABEL_24;
    }
    v15 = v18;
  }
LABEL_24:
  *a3 = v12;
  a3[1] = (uint64_t)v14;
  a3[2] = v12;
  a3[3] = (uint64_t)v15;
  return result;
}

_QWORD *WebCore::DecodeOrderSampleMap::findSamplesBetweenDecodeKeys(uint64_t a1, WTF::MediaTime *this, WTF::MediaTime *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  if (WTF::MediaTime::compare(this, a3) != -1
    && (WTF::MediaTime::compare(a3, this) == -1
     || WTF::MediaTime::compare((WTF::MediaTime *)((char *)this + 16), (WTF::MediaTime *)((char *)a3 + 16)) != -1&& WTF::MediaTime::compare((WTF::MediaTime *)((char *)a3 + 16), (WTF::MediaTime *)((char *)this + 16)) == -1))
  {
    return (_QWORD *)(a1 + 8);
  }
  v8 = *(_QWORD **)(a1 + 8);
  v6 = (_QWORD *)(a1 + 8);
  v7 = v8;
  if (v8)
  {
    v9 = v6;
    while (WTF::MediaTime::compare((WTF::MediaTime *)(v7 + 4), this) != -1)
    {
      if (WTF::MediaTime::compare(this, (const WTF::MediaTime *)(v7 + 4)) != -1)
      {
        if (WTF::MediaTime::compare((WTF::MediaTime *)(v7 + 6), (WTF::MediaTime *)((char *)this + 16)) == -1)
          break;
        WTF::MediaTime::compare((WTF::MediaTime *)((char *)this + 16), (const WTF::MediaTime *)(v7 + 6));
      }
      v9 = v7;
LABEL_13:
      v7 = (_QWORD *)*v7;
      if (!v7)
      {
        v10 = (_QWORD *)*v6;
        v11 = v6;
        if (*v6)
        {
          v11 = v6;
          while (WTF::MediaTime::compare((WTF::MediaTime *)(v10 + 4), a3) != -1)
          {
            if (WTF::MediaTime::compare(a3, (const WTF::MediaTime *)(v10 + 4)) != -1)
            {
              if (WTF::MediaTime::compare((WTF::MediaTime *)(v10 + 6), (WTF::MediaTime *)((char *)a3 + 16)) == -1)break;
              WTF::MediaTime::compare((WTF::MediaTime *)((char *)a3 + 16), (const WTF::MediaTime *)(v10 + 6));
            }
            v11 = v10;
LABEL_22:
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
          ++v10;
          goto LABEL_22;
        }
LABEL_23:
        if (v9 != v11)
          return v9;
        return v6;
      }
    }
    ++v7;
    goto LABEL_13;
  }
  return v6;
}

WebCore::ContextDestructionObserver *WebCore::SourceBuffer::SourceBuffer(WebCore::ContextDestructionObserver *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  WTF::MediaTime *v24;
  WTF::MediaTime *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  unint64_t v47;
  unsigned int *v48;
  _QWORD v49[4];
  WebCore::ContextDestructionObserver *v50;

  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 4) = 0;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    if (*(_BYTE *)(v7 + 178))
    {
      v8 = v7 - 96;
    }
    else
    {
      v9 = v7 - 288;
      v10 = *(_QWORD *)(v7 + 416);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
          v9 = v11;
      }
      v8 = v9 + 192;
    }
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::ScriptExecutionContext *)v8);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195454C54);
    }
    v50 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v8 + 128), (uint64_t *)&v50, (uint64_t)v49);
  }
  *(_QWORD *)this = &off_1E335E080;
  *((_QWORD *)this + 5) = &unk_1E335E178;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E335E1F0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = &unk_1E335E240;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = &unk_1E335E290;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = &unk_1E335E300;
  v12 = *a2;
  *a2 = 0;
  *((_QWORD *)this + 15) = v12;
  v13 = WTF::fastMalloc((WTF *)0x40);
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v14 = 0;
  *(_OWORD *)(v14 + 8) = xmmword_19689B170;
  *(_QWORD *)(v14 + 24) = v13;
  *(_QWORD *)v13 = off_1E335E880;
  *(_QWORD *)(v13 + 8) = v14;
  v15 = *((_QWORD *)this + 4);
  if (v15)
    goto LABEL_59;
  v15 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = this;
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v15;
  if (!v17)
    goto LABEL_59;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
LABEL_59:
    do
      v20 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v20 + 1, (unsigned int *)v15));
  }
  *(_QWORD *)(v13 + 16) = v15;
  v21 = *((_QWORD *)this + 1);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
      v21 = v22 - 96;
    else
      v21 = 0;
  }
  v23 = *(_OWORD *)(v21 + 240);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v21 + 224);
  *(_OWORD *)(v13 + 48) = v23;
  *((_QWORD *)this + 16) = v13;
  *((_QWORD *)this + 17) = a3;
  *((_DWORD *)this + 36) = 0;
  v24 = (WTF::MediaTime *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v24 = off_1E335EBD8;
  *((_QWORD *)v24 + 1) = this;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = v24;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  v25 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v24);
  *(_OWORD *)((char *)this + 248) = *(_OWORD *)v25;
  *(_OWORD *)((char *)this + 264) = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime(v25);
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 10000000;
  *((_BYTE *)this + 292) = 1;
  *((_DWORD *)this + 74) = 0;
  *((_BYTE *)this + 300) = 1;
  *(_QWORD *)((char *)this + 318) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  v26 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v26 = 1;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *((_DWORD *)this + 89) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_BYTE *)this + 376) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 41) = v26;
  *((_BYTE *)this + 352) = 0;
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  if (v27)
    v28 = v27 - 96;
  else
    v28 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 64))(v28))
    v29 = *(_QWORD *)(a3 + 248);
  else
    v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 368))(*((_QWORD *)this + 15));
  v30 = (unsigned int *)(v29 + 8);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *((_QWORD *)this + 48) = v29;
  v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 376))(*((_QWORD *)this + 15));
  *((_QWORD *)this + 49) = v32;
  v33 = *((_QWORD *)this + 48);
  v49[0] = "SourceBuffer";
  v49[1] = 13;
  v49[2] = "SourceBuffer";
  v49[3] = v32;
  if (*(_BYTE *)(v33 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v49);
  WTF::ThreadSafeWeakPtr<WebCore::WebTransportSessionClient>::operator=<WebCore::WebTransportSessionClient,(void *)0>((uint64_t *)(*((_QWORD *)this + 15) + 80), *((_QWORD **)this + 16));
  v34 = *((_QWORD *)this + 15);
  if (*((_QWORD *)this + 17) && (v35 = *((_QWORD *)this + 1)) != 0 && *(_QWORD *)(v35 + 8))
  {
    if (*((_BYTE *)this + 376))
    {
      v36 = *((_QWORD *)this + 46);
    }
    else
    {
      v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 312))(*((_QWORD *)this + 15));
      if (!v36)
      {
        v42 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
        v43 = v42 ? v42 - 96 : 0;
        v44 = (float)*(unsigned int *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 136))(v43, 0)
                                     + 408);
        v36 = (unint64_t)(float)(v44 * 0.05);
        v45 = *((_QWORD *)this + 22);
        if (v45)
        {
          v46 = v44 * 0.95;
          if (*(_DWORD *)(v45 + 68))
            v47 = (unint64_t)v46;
          else
            v47 = 0;
          v36 += v47;
        }
      }
    }
  }
  else
  {
    v36 = 0;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v34 + 320))(&v48, v34, v36);
  v37 = v48;
  v48 = 0;
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v37 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
    }
  }
  return this;
}

char *WebCore::SourceBuffer::logChannel(WebCore::SourceBuffer *this)
{
  return &WebCore::LogMediaSource;
}

void WebCore::SourceBuffer::~SourceBuffer(WebCore::SourceBuffer *this, void *a2)
{
  WebCore::EventTarget *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  void *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl **v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl **v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (**v71)();
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t (**v75)();
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[4];

  *(_QWORD *)this = &off_1E335E080;
  *((_QWORD *)this + 5) = &unk_1E335E178;
  v3 = (WebCore::SourceBuffer *)((char *)this + 40);
  *((_QWORD *)this + 8) = &unk_1E335E1F0;
  *((_QWORD *)this + 10) = &unk_1E335E240;
  *((_QWORD *)this + 12) = &unk_1E335E290;
  *((_QWORD *)this + 14) = &unk_1E335E300;
  v4 = *((_QWORD *)this + 48);
  v5 = *((_QWORD *)this + 49);
  v84[0] = "SourceBuffer";
  v84[1] = 13;
  v84[2] = "~SourceBuffer";
  v84[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v84);
    v4 = *((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = 0;
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    *((_QWORD *)this + 48) = 0;
  }
  v6 = (unsigned int *)(v4 + 8);
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, (unsigned int *)(v4 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
LABEL_9:
  v9 = *((unsigned int *)this + 87);
  v10 = (WTF *)*((_QWORD *)this + 42);
  if ((_DWORD)v9)
  {
    v11 = 16 * v9;
    do
    {
      v12 = *(WTF **)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)v10 = 0;
        *((_DWORD *)v10 + 2) = 0;
        WTF::fastFree(v12, a2);
      }
      v10 = (WTF *)((char *)v10 + 16);
      v11 -= 16;
    }
    while (v11);
    v10 = (WTF *)*((_QWORD *)this + 42);
  }
  if (v10)
  {
    *((_QWORD *)this + 42) = 0;
    *((_DWORD *)this + 86) = 0;
    WTF::fastFree(v10, a2);
  }
  v13 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      v58 = *(WTF **)(v13 + 8);
      if (v58)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v58, a2);
      }
      WTF::fastFree((WTF *)v13, a2);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = *((unsigned int *)this + 61);
  if ((_DWORD)v14)
  {
    v59 = (WTF::StringImpl **)*((_QWORD *)this + 29);
    v60 = 8 * v14;
    do
    {
      v61 = *v59;
      *v59 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v61 -= 2;
      }
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  v15 = (WTF *)*((_QWORD *)this + 29);
  if (v15)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((unsigned int *)this + 57);
  if ((_DWORD)v16)
  {
    v62 = (WTF::StringImpl **)*((_QWORD *)this + 27);
    v63 = 8 * v16;
    do
    {
      v64 = *v62;
      *v62 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v64 -= 2;
      }
      ++v62;
      v63 -= 8;
    }
    while (v63);
  }
  v17 = (WTF *)*((_QWORD *)this + 27);
  if (v17)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *((unsigned int *)this + 53);
  if ((_DWORD)v18)
  {
    v65 = (WTF::StringImpl **)*((_QWORD *)this + 25);
    v66 = 8 * v18;
    do
    {
      v67 = *v65;
      *v65 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v67 -= 2;
      }
      ++v65;
      v66 -= 8;
    }
    while (v66);
  }
  v19 = (WTF *)*((_QWORD *)this + 25);
  if (v19)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v19, a2);
  }
  v20 = (_DWORD *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v20)
  {
    if (v20[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 72))(v20);
    else
      --v20[6];
  }
  v21 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v21)
  {
    if (v21[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 72))(v21);
    else
      --v21[6];
  }
  v22 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v22)
  {
    if (v22[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 72))(v22);
    else
      --v22[6];
  }
  v23 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      v68 = *(unsigned int *)(v23 + 20);
      if ((_DWORD)v68)
      {
        v69 = *(_QWORD *)(v23 + 8);
        v70 = v69 + 16 * v68;
        v71 = off_1E335EB98;
        do
        {
          v72 = *(unsigned int **)(v69 + 8);
          *(_QWORD *)(v69 + 8) = 0;
          if (v72)
          {
            do
            {
              v73 = __ldaxr(v72);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v72));
            if (!v74)
            {
              v75 = v71;
              v82 = v69;
              v83 = v70;
              v76 = v23;
              atomic_store(1u, v72);
              v77 = v72[6];
              if ((_DWORD)v77 != -1)
                ((void (*)(_QWORD *, unsigned int *))v71[v77])(v84, v72 + 2);
              v72[6] = -1;
              WTF::fastFree((WTF *)v72, a2);
              v23 = v76;
              v69 = v82;
              v70 = v83;
              v71 = v75;
            }
          }
          v69 += 16;
        }
        while (v69 != v70);
      }
      v78 = *(WTF **)(v23 + 8);
      if ((WTF *)(v23 + 24) != v78 && v78 != 0)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        v81 = v23;
        WTF::fastFree(v78, a2);
        v23 = v81;
      }
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v26 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 19);
  if (v27)
  {
    *(_QWORD *)(v27 + 8) = 0;
    v28 = (unsigned int *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 19) = 0;
  }
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v31)
  {
    v32 = *(_QWORD *)(v31 + 8);
    if (__ldaxr((unsigned __int8 *)v32))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v32))
    {
      goto LABEL_54;
    }
    MEMORY[0x19AEA534C](v32);
LABEL_54:
    v34 = *(_QWORD *)(v32 + 8);
    v35 = v34 - 1;
    *(_QWORD *)(v32 + 8) = v34 - 1;
    if (v34 == 1)
    {
      v80 = *(_QWORD *)(v32 + 16);
      v36 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = 0;
      v37 = v80 != 0;
    }
    else
    {
      v36 = 0;
      v37 = 1;
    }
    v38 = __ldxr((unsigned __int8 *)v32);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v32))
      {
        if (v35)
          goto LABEL_66;
LABEL_62:
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        if (!v37)
          WTF::fastFree((WTF *)v32, a2);
        goto LABEL_66;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v32);
    if (v35)
      goto LABEL_66;
    goto LABEL_62;
  }
LABEL_66:
  v39 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v39)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v39 + 8));
  v40 = *((_QWORD *)this + 13);
  if (v40)
  {
    *(_QWORD *)(v40 + 8) = 0;
    v41 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v41)
    {
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v41);
        WTF::fastFree((WTF *)v41, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  v44 = *((_QWORD *)this + 11);
  if (v44)
  {
    *(_QWORD *)(v44 + 8) = 0;
    v45 = (unsigned int *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
  }
  v48 = *((_QWORD *)this + 9);
  if (v48)
  {
    *(_QWORD *)(v48 + 8) = 0;
    v49 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v49)
    {
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v52);
  v54 = *((_QWORD *)this + 4);
  if (v54)
  {
    *(_QWORD *)(v54 + 8) = 0;
    v55 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v55)
    {
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v53);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::SourceBuffer::~SourceBuffer(WebCore::SourceBuffer *this, void *a2)
{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 40), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 64), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 80), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 96), a2);
}

{
  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 64), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 80), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 96), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SourceBuffer::~SourceBuffer((WebCore::SourceBuffer *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::NativePromiseBase *WebCore::SourceBuffer::appendBufferInternal@<X0>(WTF::NativePromiseBase *result@<X0>, WTF *a2@<X1>, WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::NativePromiseBase *v5;
  char v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF::String *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  WTF::String *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  unint64_t StatusReg;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  void *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int **v108;
  void *v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  _QWORD *v115;
  WTF::FunctionDispatcher *v116;
  int v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  void *v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  int v165;
  unsigned int *v166;
  unsigned int v167;
  __int128 v168;
  WTF::StringImpl *v169;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  void *v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  WTF *v187;
  WTF::NativePromiseBase *v189;
  WTF::String *v190;
  uint64_t v191;
  const char *v192;
  __int128 v193;
  __int128 v194;
  char v195;
  WTF::StringImpl *v196;
  char v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  __int128 v213;
  __int128 v214;
  _BYTE buf[40];
  WTF::StringImpl *v216;
  WTF::NativePromiseBase *v217;
  WTF::StringImpl *v218;
  int v219;
  WTF::StringImpl *v220;
  int v221;
  WTF::StringImpl *v222;
  int v223;
  WTF::StringImpl *v224;
  int v225;
  WTF::StringImpl *v226;
  int v227;
  WTF::StringImpl *v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)result + 17) || (v5 = result, *((_BYTE *)result + 320)))
  {
    v6 = 8;
LABEL_4:
    *(_BYTE *)a4 = v6;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v10 = *((_QWORD *)result + 48);
  v9 = *((_QWORD *)result + 49);
  v192 = "SourceBuffer";
  *(_QWORD *)&v193 = 13;
  *((_QWORD *)&v193 + 1) = "appendBufferInternal";
  *(_QWORD *)&v194 = v9;
  v11 = *((_QWORD *)result + 1);
  if (v11 && *(_QWORD *)(v11 + 8))
  {
    if (*((_BYTE *)result + 376))
    {
      v12 = *((_QWORD *)result + 46);
    }
    else
    {
      v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 15) + 312))(*((_QWORD *)result + 15));
      if (!v12)
      {
        v13 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 8);
        v14 = v13 ? v13 - 96 : 0;
        v15 = (float)*(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 136))(v14) + 408);
        v12 = (unint64_t)(float)(v15 * 0.05);
        v16 = *((_QWORD *)v5 + 22);
        if (v16)
        {
          v17 = v15 * 0.95;
          if (*(_DWORD *)(v16 + 68))
            v18 = (unint64_t)v17;
          else
            v18 = 0;
          v12 += v18;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v190 = (WTF::String *)v12;
  v19 = *((_QWORD *)v5 + 41);
  (*(void (**)(_QWORD))(**((_QWORD **)v5 + 17) + 136))(*((_QWORD *)v5 + 17));
  v189 = v5;
  if (*(_BYTE *)(v10 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v192);
    WTF::String::String((WTF::String *)&v204, "size = ");
    WTF::String::number(a3);
    WTF::String::String((WTF::String *)&v202, " maximumBufferSize = ");
    WTF::String::number(v190);
    WTF::String::String((WTF::String *)&v200, " buffered = ");
    WebCore::PlatformTimeRanges::toString((WebCore::PlatformTimeRanges *)(v19 + 8), &v199);
    WTF::String::String((WTF::String *)&v198, " streaming = ");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = v205;
    v196 = v203;
    v212 = v202;
    *(_QWORD *)&v213 = v204;
    v210 = v200;
    v211 = v201;
    v208 = v198;
    v209 = v199;
    v207 = v20;
    result = (WTF::NativePromiseBase *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)&v213, (uint64_t *)&v196, (uint64_t *)&v212, (uint64_t *)&v211, (uint64_t *)&v210, (uint64_t *)&v209, (uint64_t *)&v208, &v206, (uint64_t *)&v207);
    if (!v206)
    {
      __break(0xC471u);
      return result;
    }
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    v22 = v198;
    v198 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v199;
    v199 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v21);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v200;
    v200 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v21);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v201;
    v201 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v21);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v202;
    v202 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v21);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v203;
    v203 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v21);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = v204;
    v204 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v21);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v205;
    v205 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v21);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = qword_1ECE7CE80;
    v31 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v31)
    {
      WTF::String::utf8();
      v33 = (_QWORD)v213 ? v213 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v33;
      _os_log_impl(&dword_1940B8000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v31 = v213;
      *(_QWORD *)&v213 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          v31 = WTF::fastFree((WTF *)v31, v32);
        else
          --*(_DWORD *)v31;
      }
    }
    v34 = v190;
    if (WebCore::LogMediaSource)
    {
      v35 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v36 = *v35;
        if ((v36 & 1) != 0)
          break;
        v37 = __ldaxr(v35);
        if (v37 == v36)
        {
          if (!__stxr(v36 | 1, v35))
          {
            v38 = WTF::Logger::observers((WTF::Logger *)v31);
            v39 = *(unsigned int *)(v38 + 12);
            if ((_DWORD)v39)
            {
              v40 = *(uint64_t **)v38;
              v191 = *(_QWORD *)v38 + 8 * v39;
              do
              {
                v41 = *v40;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v192);
                *(_DWORD *)&buf[16] = 0;
                WTF::String::String((WTF::String *)&buf[24], "size = ");
                *(_DWORD *)&buf[32] = 0;
                WTF::String::number(a3);
                LODWORD(v217) = 0;
                WTF::String::String((WTF::String *)&v218, " maximumBufferSize = ");
                v219 = 0;
                WTF::String::number(v34);
                v221 = 0;
                WTF::String::String((WTF::String *)&v222, " buffered = ");
                v223 = 0;
                WebCore::PlatformTimeRanges::toString((WebCore::PlatformTimeRanges *)(v19 + 8), &v224);
                v225 = 0;
                WTF::String::String((WTF::String *)&v226, " streaming = ");
                v227 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v228 = (WTF::StringImpl *)v213;
                v213 = 0uLL;
                v42 = WTF::fastMalloc((WTF *)0x90);
                DWORD2(v213) = 9;
                *(_QWORD *)&v213 = v42;
                v43 = HIDWORD(v213);
                *(_DWORD *)(v42 + 16 * HIDWORD(v213)) = *(_DWORD *)buf;
                v44 = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                  **(_DWORD **)&buf[8] += 2;
                *(_QWORD *)(v42 + 16 * v43 + 8) = v44;
                *(_DWORD *)(v42 + 16 * (v43 + 1)) = *(_DWORD *)&buf[16];
                v45 = *(_QWORD *)&buf[24];
                if (*(_QWORD *)&buf[24])
                  **(_DWORD **)&buf[24] += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 1) + 8) = v45;
                *(_DWORD *)(v42 + 16 * (v43 + 2)) = *(_DWORD *)&buf[32];
                v46 = v216;
                if (v216)
                  *(_DWORD *)v216 += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 2) + 8) = v46;
                *(_DWORD *)(v42 + 16 * (v43 + 3)) = (_DWORD)v217;
                v47 = v218;
                if (v218)
                  *(_DWORD *)v218 += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 3) + 8) = v47;
                *(_DWORD *)(v42 + 16 * (v43 + 4)) = v219;
                v48 = v220;
                if (v220)
                  *(_DWORD *)v220 += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 4) + 8) = v48;
                *(_DWORD *)(v42 + 16 * (v43 + 5)) = v221;
                v49 = v222;
                if (v222)
                  *(_DWORD *)v222 += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 5) + 8) = v49;
                *(_DWORD *)(v42 + 16 * (v43 + 6)) = v223;
                v50 = v224;
                if (v224)
                  *(_DWORD *)v224 += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 6) + 8) = v50;
                *(_DWORD *)(v42 + 16 * (v43 + 7)) = v225;
                v51 = v226;
                if (v226)
                  *(_DWORD *)v226 += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 7) + 8) = v51;
                *(_DWORD *)(v42 + 16 * (v43 + 8)) = v227;
                v52 = v228;
                if (v228)
                  *(_DWORD *)v228 += 2;
                *(_QWORD *)(v42 + 16 * (v43 + 8) + 8) = v52;
                HIDWORD(v213) = v43 + 9;
                (*(void (**)(uint64_t, char *, _QWORD, __int128 *))(*(_QWORD *)v41 + 16))(v41, &WebCore::LogMediaSource, 0, &v213);
                v53 = (WTF *)v213;
                if (HIDWORD(v213))
                {
                  v54 = a3;
                  v55 = 16 * HIDWORD(v213);
                  v56 = (WTF::StringImpl **)(v213 + 8);
                  do
                  {
                    v57 = *v56;
                    *v56 = 0;
                    if (v57)
                    {
                      if (*(_DWORD *)v57 == 2)
                        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v32);
                      else
                        *(_DWORD *)v57 -= 2;
                    }
                    v56 += 2;
                    v55 -= 16;
                  }
                  while (v55);
                  v53 = (WTF *)v213;
                  a3 = v54;
                  v34 = v190;
                }
                if (v53)
                {
                  *(_QWORD *)&v213 = 0;
                  DWORD2(v213) = 0;
                  WTF::fastFree(v53, v32);
                }
                v58 = v228;
                v228 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v59 = v226;
                v226 = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v59 -= 2;
                }
                v60 = v224;
                v224 = 0;
                if (v60)
                {
                  if (*(_DWORD *)v60 == 2)
                    WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v60 -= 2;
                }
                v61 = v222;
                v222 = 0;
                if (v61)
                {
                  if (*(_DWORD *)v61 == 2)
                    WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v61 -= 2;
                }
                v62 = v220;
                v220 = 0;
                if (v62)
                {
                  if (*(_DWORD *)v62 == 2)
                    WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v62 -= 2;
                }
                v63 = v218;
                v218 = 0;
                if (v63)
                {
                  if (*(_DWORD *)v63 == 2)
                    WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v63 -= 2;
                }
                v64 = v216;
                v216 = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2)
                    WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v64 -= 2;
                }
                v65 = *(WTF::StringImpl **)&buf[24];
                *(_QWORD *)&buf[24] = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2)
                    WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v65 -= 2;
                }
                v66 = *(WTF::StringImpl **)&buf[8];
                *(_QWORD *)&buf[8] = 0;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2)
                    WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v32);
                  else
                    *(_DWORD *)v66 -= 2;
                }
                ++v40;
              }
              while (v40 != (uint64_t *)v191);
            }
            v67 = __ldxr(v35);
            if (v67 == 1)
            {
              if (!__stlxr(0, v35))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v68 = v206;
    v206 = 0;
    v5 = v189;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  WebCore::MediaSource::openIfInEndedState(*((_QWORD *)v5 + 17));
  v69 = *((_QWORD *)v5 + 15);
  v70 = *((_QWORD *)v5 + 17);
  if (*(_BYTE *)(v70 + 168))
  {
    v71 = *(_QWORD *)(v70 + 120);
    v72 = *(_QWORD *)(v70 + 128);
    goto LABEL_147;
  }
  v73 = *(_QWORD *)(v70 + 88);
  if (!v73)
  {
    v76 = (uint64_t *)WTF::MediaTime::zeroTime(0);
LABEL_146:
    v71 = *v76;
    v72 = v76[1];
    goto LABEL_147;
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v73 + 16))(buf);
  if (!*(_QWORD *)buf)
  {
    v76 = (uint64_t *)WTF::MediaTime::invalidTime(0);
    goto LABEL_146;
  }
  v71 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 344))(*(_QWORD *)buf);
  v72 = v74;
  v75 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75);
LABEL_147:
  *(_QWORD *)buf = v71;
  *(_QWORD *)&buf[8] = v72;
  result = (WTF::NativePromiseBase *)(*(uint64_t (**)(uint64_t, WTF::String *, _BYTE *))(*(_QWORD *)v69 + 192))(v69, a3, buf);
  if ((_DWORD)result)
  {
    v77 = *((_QWORD *)v5 + 48);
    v78 = *((_QWORD *)v5 + 49);
    *(_QWORD *)buf = "SourceBuffer";
    *(_QWORD *)&buf[8] = 13;
    *(_QWORD *)&buf[16] = "appendBufferInternal";
    *(_QWORD *)&buf[24] = v78;
    if (*(_BYTE *)(v77 + 12))
      result = (WTF::NativePromiseBase *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [66]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)buf, "buffer full, failing with ExceptionCode::QuotaExceededError error");
    v6 = 18;
    goto LABEL_4;
  }
  v79 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v79 = 1;
  *(_QWORD *)(v79 + 8) = v79 + 24;
  *(_QWORD *)(v79 + 16) = 1;
  *(_BYTE *)(v79 + 40) = 0;
  *(_QWORD *)(v79 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v79, a2, a3);
  *(_QWORD *)buf = v79;
  v80 = WTF::fastMalloc((WTF *)0x38);
  v192 = (const char *)WebCore::SharedBuffer::SharedBuffer(v80, (uint64_t *)buf);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)buf, v81);
  v83 = v192;
  v192 = 0;
  v84 = *((_QWORD *)v5 + 21);
  *((_QWORD *)v5 + 21) = v83;
  if (v84)
  {
    do
    {
      v85 = __ldaxr((unsigned int *)v84);
      v86 = v85 - 1;
    }
    while (__stlxr(v86, (unsigned int *)v84));
    if (!v86)
    {
      v179 = a4;
      atomic_store(1u, (unsigned int *)v84);
      v180 = *(unsigned int *)(v84 + 20);
      if ((_DWORD)v180)
      {
        v181 = *(_QWORD *)(v84 + 8);
        v182 = v181 + 16 * v180;
        do
        {
          v183 = *(unsigned int **)(v181 + 8);
          *(_QWORD *)(v181 + 8) = 0;
          if (v183)
          {
            do
            {
              v184 = __ldaxr(v183);
              v185 = v184 - 1;
            }
            while (__stlxr(v185, v183));
            if (!v185)
            {
              atomic_store(1u, v183);
              v186 = v183[6];
              if ((_DWORD)v186 != -1)
                ((void (*)(_BYTE *, unsigned int *))off_1E335EB98[v186])(buf, v183 + 2);
              v183[6] = -1;
              WTF::fastFree((WTF *)v183, v82);
            }
          }
          v181 += 16;
        }
        while (v181 != v182);
      }
      v187 = *(WTF **)(v84 + 8);
      if ((WTF *)(v84 + 24) != v187 && v187 != 0)
      {
        *(_QWORD *)(v84 + 8) = 0;
        *(_DWORD *)(v84 + 16) = 0;
        WTF::fastFree(v187, v82);
      }
      WTF::fastFree((WTF *)v84, v82);
      a4 = v179;
      v5 = v189;
    }
  }
  v87 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v192, v82);
  *((_BYTE *)v5 + 320) = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v89 = *(_QWORD *)(StatusReg + 736);
  if (!v89 || (v90 = *(_QWORD *)(v89 + 96)) == 0)
    v90 = WebCore::threadGlobalDataSlow((WebCore *)v87);
  v91 = *(_QWORD *)(v90 + 40);
  if (!v91)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v90);
    v91 = *(_QWORD *)(v90 + 40);
  }
  v92 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v92);
  *(_DWORD *)(v92 + 16) = 1;
  *(_QWORD *)v92 = off_1E33A4B48;
  *(_QWORD *)(v92 + 8) = 0;
  *(_DWORD *)(v92 + 20) = *(_DWORD *)(v92 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v91 + 2216) != 0);
  v94 = *(_DWORD **)(v91 + 2216);
  if (v94)
    *v94 += 2;
  *(_QWORD *)(v92 + 24) = v94;
  *(_QWORD *)(v92 + 32) = 0;
  *(_QWORD *)(v92 + 40) = 0;
  *(_QWORD *)(v92 + 48) = 0;
  *(_QWORD *)(v92 + 56) = v93;
  *(_QWORD *)(v92 + 64) = 0;
  *(_QWORD *)buf = v92;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v5, (uint64_t)v5 + 40, 9, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if (*(_DWORD *)(*(_QWORD *)buf + 16) == 1)
      (*(void (**)(void))(**(_QWORD **)buf + 8))();
    else
      --*(_DWORD *)(*(_QWORD *)buf + 16);
  }
  *((_BYTE *)v5 + 352) = 1;
  LOBYTE(v213) = 2;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = "appendBufferInternal";
  *(_QWORD *)&buf[24] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v192, &v213, 0, (WTF::Logger::LogSiteIdentifier *)buf);
  v95 = *((_QWORD *)v5 + 1);
  if (v95)
  {
    v96 = *(_QWORD *)(v95 + 8);
    if (v96)
      v97 = v96 - 96;
    else
      v97 = 0;
  }
  else
  {
    v97 = 0;
  }
  v98 = (unsigned int *)v192;
  if (v192)
  {
    v99 = (unsigned int *)(v192 + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 + 1, v99));
  }
  v101 = *((_QWORD *)v5 + 4);
  if (v101)
    goto LABEL_294;
  v101 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v101 = 1;
  *(_QWORD *)(v101 + 8) = v5;
  v103 = (unsigned int *)*((_QWORD *)v5 + 4);
  *((_QWORD *)v5 + 4) = v101;
  if (!v103)
    goto LABEL_294;
  do
  {
    v104 = __ldaxr(v103);
    v105 = v104 - 1;
  }
  while (__stlxr(v105, v103));
  if (!v105)
  {
    atomic_store(1u, v103);
    WTF::fastFree((WTF *)v103, v102);
  }
  v101 = *((_QWORD *)v5 + 4);
  if (v101)
  {
LABEL_294:
    do
      v106 = __ldaxr((unsigned int *)v101);
    while (__stlxr(v106 + 1, (unsigned int *)v101));
  }
  v107 = *((_DWORD *)v5 + 89) + 1;
  *((_DWORD *)v5 + 89) = v107;
  v108 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
  *v108 = 0;
  v108[1] = 0;
  v110 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v110 = 1;
  *(_QWORD *)(v110 + 8) = v108;
  v111 = *v108;
  *v108 = (unsigned int *)v110;
  if (!v111)
    goto LABEL_295;
  do
  {
    v112 = __ldaxr(v111);
    v113 = v112 - 1;
  }
  while (__stlxr(v113, v111));
  if (!v113)
  {
    atomic_store(1u, v111);
    WTF::fastFree((WTF *)v111, v109);
  }
  v110 = (uint64_t)*v108;
  if (*v108)
  {
LABEL_295:
    do
      v114 = __ldaxr((unsigned int *)v110);
    while (__stlxr(v114 + 1, (unsigned int *)v110));
  }
  v115 = (_QWORD *)a4;
  v116 = *(WTF::FunctionDispatcher **)(v97 + 288);
  if (!v116)
  {
    v116 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
    v117 = 1;
    *((_DWORD *)v116 + 2) = 1;
    v118 = WTF::FunctionDispatcher::FunctionDispatcher(v116);
    *(_QWORD *)v118 = off_1E33A7800;
    v119 = *(_OWORD *)(v97 + 240);
    *(_OWORD *)(v118 + 16) = *(_OWORD *)(v97 + 224);
    *(_OWORD *)(v118 + 32) = v119;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 64))(v97))
    {
      v120 = *(_QWORD *)(StatusReg + 736);
      if (!v120)
        v120 = WTF::Thread::initializeCurrentTLS(0);
      v117 = *(_DWORD *)(v120 + 48);
    }
    *((_DWORD *)v116 + 12) = v117;
    v121 = *(_QWORD *)(v97 + 288);
    *(_QWORD *)(v97 + 288) = v116;
    if (v121)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v121 + 40))(v121);
      v116 = *(WTF::FunctionDispatcher **)(v97 + 288);
    }
  }
  v122 = *(_QWORD *)(v97 + 104);
  if (v122)
    goto LABEL_296;
  v122 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v122 = 1;
  *(_QWORD *)(v122 + 8) = v97 + 96;
  v176 = *(unsigned int **)(v97 + 104);
  *(_QWORD *)(v97 + 104) = v122;
  if (!v176)
    goto LABEL_296;
  do
  {
    v177 = __ldaxr(v176);
    v178 = v177 - 1;
  }
  while (__stlxr(v178, v176));
  if (!v178)
  {
    atomic_store(1u, v176);
    WTF::fastFree((WTF *)v176, v175);
  }
  v122 = *(_QWORD *)(v97 + 104);
  if (v122)
  {
LABEL_296:
    do
      v123 = __ldaxr((unsigned int *)v122);
    while (__stlxr(v123 + 1, (unsigned int *)v122));
  }
  v213 = 0uLL;
  v124 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v116 + 32))(v116);
  v125 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v125 = off_1E335EC78;
  *(_QWORD *)(v125 + 8) = v122;
  *(_BYTE *)(v125 + 16) = 9;
  *(_QWORD *)(v125 + 24) = v101;
  *(_QWORD *)(v125 + 32) = v189;
  *(_DWORD *)(v125 + 40) = v107;
  *(_QWORD *)(v125 + 48) = v108;
  *(_DWORD *)(v124 + 8) = 1;
  *(_QWORD *)(v124 + 16) = v116;
  *(_QWORD *)(v124 + 24) = 0;
  *(_QWORD *)(v124 + 32) = 0;
  *(_QWORD *)(v124 + 40) = "enqueueTaskWhenSettled";
  *(_QWORD *)(v124 + 48) = 0;
  *(_WORD *)(v124 + 56) = 0;
  *(_QWORD *)v124 = &off_1E32059B0;
  v126 = v98 + 2;
  *(_QWORD *)(v124 + 64) = 0;
  *(_QWORD *)(v124 + 72) = v125;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 + 1, v126));
  *(_QWORD *)buf = v98;
  *(_QWORD *)&buf[8] = v124;
  *(_OWORD *)&buf[16] = v213;
  *(_QWORD *)&buf[32] = "enqueueTaskWhenSettled";
  v216 = 0;
  if (v110)
  {
    v128 = *(uint64_t **)(v110 + 8);
    v129 = (uint64_t)v98;
    if (v128)
    {
      WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>(v97 + 296, v128, (uint64_t)&v213);
      v130 = *(_QWORD *)(v110 + 8);
      v131 = *(_QWORD *)&buf[8];
      v132 = (unsigned int *)(*(_QWORD *)&buf[8] + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 + 1, v132));
      v134 = *(unsigned int **)(v130 + 8);
      *(_QWORD *)(v130 + 8) = v131;
      if (v134)
      {
        v135 = v134 + 2;
        do
        {
          v136 = __ldaxr(v135);
          v137 = v136 - 1;
        }
        while (__stlxr(v137, v135));
        if (!v137)
        {
          atomic_store(1u, v134 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v134 + 8))(v134);
        }
      }
      v138 = *(_QWORD *)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&v213 = v138;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(*(uint64_t *)buf, (WTF::NativePromiseBase **)&v213, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
      v140 = (unsigned int *)v213;
      *(_QWORD *)&v213 = 0;
      if (v140)
      {
        v141 = v140 + 2;
        do
        {
          v142 = __ldaxr(v141);
          v143 = v142 - 1;
        }
        while (__stlxr(v143, v141));
        if (!v143)
        {
          atomic_store(1u, v140 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v140 + 8))(v140);
        }
      }
      v124 = *(_QWORD *)&buf[8];
      if (!*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[8] = 0;
        goto LABEL_222;
      }
      v129 = *(_QWORD *)buf;
    }
  }
  else
  {
    v129 = (uint64_t)v98;
  }
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&v213 = v124;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v129, (WTF::NativePromiseBase **)&v213, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
  v144 = (unsigned int *)v213;
  *(_QWORD *)&v213 = 0;
  if (v144)
  {
    v145 = v144 + 2;
    do
    {
      v146 = __ldaxr(v145);
      v147 = v146 - 1;
    }
    while (__stlxr(v147, v145));
    if (!v147)
    {
      atomic_store(1u, v144 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v144 + 8))(v144);
    }
  }
  v148 = *(unsigned int **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v148)
  {
    v149 = v148 + 2;
    do
    {
      v150 = __ldaxr(v149);
      v151 = v150 - 1;
    }
    while (__stlxr(v151, v149));
    if (!v151)
    {
      atomic_store(1u, v148 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v148 + 8))(v148);
    }
  }
LABEL_222:
  v152 = *(unsigned int **)buf;
  *(_QWORD *)buf = 0;
  if (!v152)
    goto LABEL_226;
  v153 = v152 + 2;
  do
  {
    v154 = __ldaxr(v153);
    v155 = v154 - 1;
  }
  while (__stlxr(v155, v153));
  if (!v155)
  {
    atomic_store(1u, v152 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v152 + 16))(v152);
    if (!v110)
      goto LABEL_230;
  }
  else
  {
LABEL_226:
    if (!v110)
      goto LABEL_230;
  }
  do
  {
    v156 = __ldaxr((unsigned int *)v110);
    v157 = v156 - 1;
  }
  while (__stlxr(v157, (unsigned int *)v110));
  if (!v157)
  {
    atomic_store(1u, (unsigned int *)v110);
    WTF::fastFree((WTF *)v110, v139);
  }
LABEL_230:
  if (v98)
  {
    do
    {
      v158 = __ldaxr(v126);
      v159 = v158 - 1;
    }
    while (__stlxr(v159, v126));
    if (!v159)
    {
      atomic_store(1u, v98 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 16))(v98);
    }
  }
  v160 = *((_QWORD *)v189 + 16);
  v161 = v192;
  v192 = 0;
  *(_OWORD *)&buf[8] = v193;
  *(_OWORD *)&buf[24] = v194;
  LOBYTE(v216) = v195;
  v217 = v189;
  LODWORD(v218) = *((_DWORD *)v189 + 89);
  v162 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v162 = off_1E335ECC8;
  *(_QWORD *)(v162 + 8) = v161;
  *(_QWORD *)buf = 0;
  v163 = *(_OWORD *)&buf[8];
  v164 = *(_OWORD *)&buf[24];
  *(_BYTE *)(v162 + 48) = (_BYTE)v216;
  *(_OWORD *)(v162 + 16) = v163;
  *(_OWORD *)(v162 + 32) = v164;
  v165 = (int)v218;
  *(_QWORD *)(v162 + 56) = v217;
  *(_DWORD *)(v162 + 64) = v165;
  v166 = *(unsigned int **)(v160 + 16);
  if (v166)
  {
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 + 1, v166));
  }
  v168 = *(_OWORD *)(v160 + 48);
  v213 = *(_OWORD *)(v160 + 32);
  v214 = v168;
  v169 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v169 = &off_1E335EA00;
  *((_QWORD *)v169 + 1) = v162;
  *((_QWORD *)v169 + 2) = v166;
  v196 = v169;
  v197 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_240;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_240:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v171 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)&v213);
  if (v171)
  {
    v172 = v171[4];
    if (v172)
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v172 + 336))(v172, &v196);
  }
  v173 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v173 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_250;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_250:
  v174 = (uint64_t)v196;
  v196 = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)buf);
  *v115 = 0;
  v115[1] = 0;
  v115[2] = 0;
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v192);
}

_QWORD *WebCore::SourceBuffer::abort@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF::MediaTime *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::MediaTime *v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = this[17];
  if (v3
    && !*(_BYTE *)(v3 + 232)
    && (v4 = (uint64_t)this, (this = *(_QWORD **)(v3 + 88)) != 0)
    && (this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 112))(this), (_DWORD)this == 1)
    && !*(_BYTE *)(v4 + 360))
  {
    WebCore::SourceBuffer::abortIfUpdating((WebCore *)v4, v5);
    (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 120) + 136))(*(_QWORD *)(v4 + 120));
    *(_DWORD *)(v4 + 296) = 0;
    v6 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 120) + 80))(*(_QWORD *)(v4 + 120));
    v7 = (_QWORD *)WTF::MediaTime::zeroTime(v6);
    v8 = *(_QWORD *)((char *)v7 + 5);
    *(_QWORD *)(v4 + 248) = *v7;
    *(_QWORD *)(v4 + 253) = v8;
    v9 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 120) + 248))(*(_QWORD *)(v4 + 120), v4 + 248);
    v10 = (uint64_t *)WTF::MediaTime::positiveInfiniteTime(v9);
    v11 = *v10;
    *(_QWORD *)(v4 + 269) = *(uint64_t *)((char *)v10 + 5);
    *(_QWORD *)(v4 + 264) = v11;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 120) + 256))(*(_QWORD *)(v4 + 120), v4 + 264);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *(_BYTE *)a2 = 8;
    a2[1] = 0;
    *((_BYTE *)a2 + 16) = 1;
  }
  return this;
}

WebCore *WebCore::SourceBuffer::abortIfUpdating(WebCore *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WebCore *v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WebCore *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t (**v28)();
  uint64_t v29;
  WTF *v30;
  WebCore *v32;

  if (*((_BYTE *)this + 320))
  {
    v2 = (uint64_t)this;
    ++*((_DWORD *)this + 89);
    *((_BYTE *)this + 352) = 0;
    v3 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        atomic_store(1u, (unsigned int *)v3);
        v21 = *(unsigned int *)(v3 + 20);
        if ((_DWORD)v21)
        {
          v22 = *(_QWORD *)(v3 + 8);
          v23 = v22 + 16 * v21;
          v24 = off_1E335EB98;
          do
          {
            v25 = *(unsigned int **)(v22 + 8);
            *(_QWORD *)(v22 + 8) = 0;
            if (v25)
            {
              do
              {
                v26 = __ldaxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
              {
                v28 = v24;
                atomic_store(1u, v25);
                v29 = v25[6];
                if ((_DWORD)v29 != -1)
                  ((void (*)(WebCore **, unsigned int *))v28[v29])(&v32, v25 + 2);
                v25[6] = -1;
                WTF::fastFree((WTF *)v25, a2);
                v24 = v28;
              }
            }
            v22 += 16;
          }
          while (v22 != v23);
        }
        v30 = *(WTF **)(v3 + 8);
        if ((WTF *)(v3 + 24) != v30 && v30 != 0)
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 16) = 0;
          WTF::fastFree(v30, a2);
        }
        WTF::fastFree((WTF *)v3, a2);
      }
    }
    v6 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 120) + 72))(*(_QWORD *)(v2 + 120));
    *(_BYTE *)(v2 + 320) = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = *(_QWORD *)(StatusReg + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(v6);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    v11 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
    *(_DWORD *)(v11 + 16) = 1;
    *(_QWORD *)v11 = off_1E33A4B48;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v10 + 64) != 0);
    v13 = *(_DWORD **)(v10 + 64);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(v11 + 24) = v13;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 64) = 0;
    v32 = (WebCore *)v11;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&v32);
    v14 = v32;
    if (v32)
    {
      if (*((_DWORD *)v32 + 4) == 1)
        v14 = (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
      else
        --*((_DWORD *)v32 + 4);
    }
    v15 = *(_QWORD *)(StatusReg + 736);
    if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
      v16 = WebCore::threadGlobalDataSlow(v14);
    v17 = *(_QWORD *)(v16 + 40);
    if (!v17)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
      v17 = *(_QWORD *)(v16 + 40);
    }
    v18 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
    *(_DWORD *)(v18 + 16) = 1;
    *(_QWORD *)v18 = off_1E33A4B48;
    *(_QWORD *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v17 + 2192) != 0);
    v20 = *(_DWORD **)(v17 + 2192);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v18 + 24) = v20;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 56) = v19;
    *(_QWORD *)(v18 + 64) = 0;
    v32 = (WebCore *)v18;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&v32);
    this = v32;
    if (v32)
    {
      if (*((_DWORD *)v32 + 4) == 1)
        return (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
      else
        --*((_DWORD *)v32 + 4);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::SourceBuffer::remove@<X0>(WTF::StringImpl *this@<X0>, const WTF::MediaTime *a2@<X1>, const WTF::MediaTime *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  const WTF::MediaTime *v45;
  uint64_t v46;
  __int128 v47;
  WebCore *v48;
  unint64_t StatusReg;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int **v68;
  void *v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  WTF::FunctionDispatcher *v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  void *v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  unsigned int *v135;
  unsigned int v136;
  __int128 v137;
  WTF::StringImpl *v138;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  void *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  const char *v162;
  __int128 v163;
  __int128 v164;
  char v165;
  WTF::StringImpl *v166;
  char v167;
  _BYTE buf[40];
  WTF::StringImpl *v169;
  _BYTE v170[37];
  _OWORD v171[2];
  uint64_t v172;

  v4 = (uint64_t)this;
  v172 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 48);
  v7 = *((_QWORD *)this + 49);
  v162 = "SourceBuffer";
  *(_QWORD *)&v163 = 13;
  *((_QWORD *)&v163 + 1) = "remove";
  *(_QWORD *)&v164 = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v162);
      WTF::String::String((WTF::String *)&v157, "start = ");
      WTF::MediaTime::toJSONString(a2);
      WTF::String::String((WTF::String *)&v155, ", end = ");
      WTF::MediaTime::toJSONString(a3);
      *(_QWORD *)buf = v158;
      *(_QWORD *)&v171[0] = v157;
      v166 = v156;
      v160 = v154;
      v161 = v155;
      this = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v171, (uint64_t *)&v166, (uint64_t *)&v161, (uint64_t *)&v160, &v159);
      if (!v159)
      {
        __break(0xC471u);
        return this;
      }
      if (v154)
      {
        if (*(_DWORD *)v154 == 2)
          WTF::StringImpl::destroy(v154, v9);
        else
          *(_DWORD *)v154 -= 2;
      }
      v10 = v155;
      v155 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v156;
      v156 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v157;
      v157 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v158;
      v158 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = qword_1ECE7CE80;
      v15 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v15)
      {
        WTF::String::utf8();
        v17 = *(_QWORD *)&v171[0] ? *(_QWORD *)&v171[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v15 = *(_QWORD *)&v171[0];
        *(_QWORD *)&v171[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
            v15 = WTF::fastFree((WTF *)v15, v16);
          else
            --*(_DWORD *)v15;
        }
      }
      if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
      {
        v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v19 = *v18;
          if ((v19 & 1) != 0)
            break;
          v20 = __ldaxr(v18);
          if (v20 == v19)
          {
            if (!__stxr(v19 | 1, v18))
            {
              v149 = a4;
              v21 = WTF::Logger::observers((WTF::Logger *)v15);
              v22 = *(unsigned int *)(v21 + 12);
              if ((_DWORD)v22)
              {
                v23 = *(uint64_t **)v21;
                v150 = *(_QWORD *)v21 + 8 * v22;
                do
                {
                  v24 = *v23;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v162);
                  *(_DWORD *)&buf[16] = 0;
                  WTF::String::String((WTF::String *)&buf[24], "start = ");
                  *(_DWORD *)&buf[32] = 1;
                  WTF::MediaTime::toJSONString(a2);
                  *(_DWORD *)v170 = 0;
                  WTF::String::String((WTF::String *)&v170[8], ", end = ");
                  *(_DWORD *)&v170[16] = 1;
                  WTF::MediaTime::toJSONString(a3);
                  v171[0] = 0uLL;
                  v25 = WTF::fastMalloc((WTF *)0x50);
                  DWORD2(v171[0]) = 5;
                  *(_QWORD *)&v171[0] = v25;
                  v26 = HIDWORD(v171[0]);
                  *(_DWORD *)(v25 + 16 * HIDWORD(v171[0])) = *(_DWORD *)buf;
                  v27 = *(_QWORD *)&buf[8];
                  if (*(_QWORD *)&buf[8])
                    **(_DWORD **)&buf[8] += 2;
                  *(_QWORD *)(v25 + 16 * v26 + 8) = v27;
                  *(_DWORD *)(v25 + 16 * (v26 + 1)) = *(_DWORD *)&buf[16];
                  v28 = *(_QWORD *)&buf[24];
                  if (*(_QWORD *)&buf[24])
                    **(_DWORD **)&buf[24] += 2;
                  *(_QWORD *)(v25 + 16 * (v26 + 1) + 8) = v28;
                  *(_DWORD *)(v25 + 16 * (v26 + 2)) = *(_DWORD *)&buf[32];
                  v29 = v169;
                  if (v169)
                    *(_DWORD *)v169 += 2;
                  *(_QWORD *)(v25 + 16 * (v26 + 2) + 8) = v29;
                  *(_DWORD *)(v25 + 16 * (v26 + 3)) = *(_DWORD *)v170;
                  v30 = *(_QWORD *)&v170[8];
                  if (*(_QWORD *)&v170[8])
                    **(_DWORD **)&v170[8] += 2;
                  *(_QWORD *)(v25 + 16 * (v26 + 3) + 8) = v30;
                  *(_DWORD *)(v25 + 16 * (v26 + 4)) = *(_DWORD *)&v170[16];
                  v31 = *(_QWORD *)&v170[24];
                  if (*(_QWORD *)&v170[24])
                    **(_DWORD **)&v170[24] += 2;
                  *(_QWORD *)(v25 + 16 * (v26 + 4) + 8) = v31;
                  HIDWORD(v171[0]) = v26 + 5;
                  (*(void (**)(uint64_t, char *, uint64_t, _OWORD *))(*(_QWORD *)v24 + 16))(v24, &WebCore::LogMediaSource, 4, v171);
                  v32 = *(WTF **)&v171[0];
                  if (HIDWORD(v171[0]))
                  {
                    v33 = 16 * HIDWORD(v171[0]);
                    v34 = (WTF::StringImpl **)(*(_QWORD *)&v171[0] + 8);
                    do
                    {
                      v35 = *v34;
                      *v34 = 0;
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 2)
                          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                        else
                          *(_DWORD *)v35 -= 2;
                      }
                      v34 += 2;
                      v33 -= 16;
                    }
                    while (v33);
                    v32 = *(WTF **)&v171[0];
                  }
                  if (v32)
                  {
                    *(_QWORD *)&v171[0] = 0;
                    DWORD2(v171[0]) = 0;
                    WTF::fastFree(v32, v16);
                  }
                  v36 = *(WTF::StringImpl **)&v170[24];
                  *(_QWORD *)&v170[24] = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  v37 = *(WTF::StringImpl **)&v170[8];
                  *(_QWORD *)&v170[8] = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v38 = v169;
                  v169 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v39 = *(WTF::StringImpl **)&buf[24];
                  *(_QWORD *)&buf[24] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v40 = *(WTF::StringImpl **)&buf[8];
                  *(_QWORD *)&buf[8] = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  ++v23;
                }
                while (v23 != (uint64_t *)v150);
              }
              v41 = __ldxr(v18);
              if (v41 == 1)
              {
                a4 = v149;
                if (!__stlxr(0, v18))
                  break;
              }
              else
              {
                __clrex();
                a4 = v149;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      this = v159;
      v159 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v16);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  v42 = *(_QWORD *)(v4 + 136);
  if (!v42 || *(_BYTE *)(v4 + 320))
  {
    v43 = 8;
LABEL_161:
    *(_BYTE *)a4 = v43;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return this;
  }
  if (*(_BYTE *)(v42 + 232)
    || (this = *(WTF::StringImpl **)(v42 + 88)) == 0
    || (this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 112))(this),
        !(_DWORD)this))
  {
    this = (WTF::StringImpl *)WTF::MediaTime::invalidTime(this);
    v44 = *((_QWORD *)this + 1);
    goto LABEL_95;
  }
  v104 = *(_QWORD *)(v42 + 88);
  v105 = (unsigned __int8 *)(v104 + 64);
  if (__ldaxr((unsigned __int8 *)(v104 + 64)))
  {
    __clrex();
LABEL_174:
    this = (WTF::StringImpl *)MEMORY[0x19AEA534C](v104 + 64);
    goto LABEL_175;
  }
  if (__stxr(1u, v105))
    goto LABEL_174;
LABEL_175:
  v44 = *(_QWORD *)(v104 + 80);
  v107 = __ldxr(v105);
  if (v107 == 1)
  {
    if (!__stlxr(0, v105))
      goto LABEL_95;
  }
  else
  {
    __clrex();
  }
  this = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v105);
LABEL_95:
  if ((v44 & 0x100000000) == 0)
    goto LABEL_160;
  if ((*((_BYTE *)a3 + 12) & 1) == 0)
    goto LABEL_160;
  if ((*((_BYTE *)a2 + 12) & 1) == 0)
    goto LABEL_160;
  v45 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(this);
  this = (WTF::StringImpl *)WTF::MediaTime::compare(a2, v45);
  if ((_DWORD)this == -1)
    goto LABEL_160;
  v46 = *(_QWORD *)(v4 + 136);
  if (*(_BYTE *)(v46 + 232)
    || (this = *(WTF::StringImpl **)(v46 + 88)) == 0
    || (this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 112))(this),
        !(_DWORD)this))
  {
    v47 = *(_OWORD *)WTF::MediaTime::invalidTime(this);
    goto LABEL_101;
  }
  v108 = *(_QWORD *)(v46 + 88);
  v109 = (unsigned __int8 *)(v108 + 64);
  if (__ldaxr((unsigned __int8 *)(v108 + 64)))
  {
    __clrex();
LABEL_227:
    MEMORY[0x19AEA534C](v108 + 64);
    goto LABEL_228;
  }
  if (__stxr(1u, v109))
    goto LABEL_227;
LABEL_228:
  v47 = *(_OWORD *)(v108 + 72);
  v144 = __ldxr(v109);
  if (v144 == 1)
  {
    if (!__stlxr(0, v109))
      goto LABEL_101;
  }
  else
  {
    __clrex();
  }
  v151 = v47;
  WTF::Lock::unlockSlow((WTF::Lock *)(v108 + 64));
  v47 = v151;
LABEL_101:
  *(_OWORD *)buf = v47;
  this = (WTF::StringImpl *)WTF::MediaTime::compare(a2, (const WTF::MediaTime *)buf);
  if ((_DWORD)this == 1 || (this = (WTF::StringImpl *)WTF::MediaTime::compare(a3, a2), (int)this < 1))
  {
LABEL_160:
    v43 = 33;
    goto LABEL_161;
  }
  v48 = (WebCore *)WebCore::MediaSource::openIfInEndedState(*(_QWORD *)(v4 + 136));
  *(_BYTE *)(v4 + 320) = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v50 = *(_QWORD *)(StatusReg + 736);
  if (!v50 || (v51 = *(_QWORD *)(v50 + 96)) == 0)
    v51 = WebCore::threadGlobalDataSlow(v48);
  v52 = *(_QWORD *)(v51 + 40);
  if (!v52)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v51);
    v52 = *(_QWORD *)(v51 + 40);
  }
  v53 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v53);
  *(_DWORD *)(v53 + 16) = 1;
  *(_QWORD *)v53 = off_1E33A4B48;
  *(_QWORD *)(v53 + 8) = 0;
  *(_DWORD *)(v53 + 20) = *(_DWORD *)(v53 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v52 + 2216) != 0);
  v55 = *(_DWORD **)(v52 + 2216);
  if (v55)
    *v55 += 2;
  *(_QWORD *)(v53 + 24) = v55;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  *(_QWORD *)(v53 + 48) = 0;
  *(_QWORD *)(v53 + 56) = v54;
  *(_QWORD *)(v53 + 64) = 0;
  *(_QWORD *)buf = v53;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v4, v4 + 40, 9, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if (*(_DWORD *)(*(_QWORD *)buf + 16) == 1)
      (*(void (**)(void))(**(_QWORD **)buf + 8))();
    else
      --*(_DWORD *)(*(_QWORD *)buf + 16);
  }
  *(_BYTE *)(v4 + 360) = 1;
  LOBYTE(v171[0]) = 2;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = "rangeRemoval";
  *(_QWORD *)&buf[24] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v162, v171, 0, (WTF::Logger::LogSiteIdentifier *)buf);
  v56 = *(_QWORD *)(v4 + 8);
  if (v56)
  {
    v57 = *(_QWORD *)(v56 + 8);
    if (v57)
      v58 = v57 - 96;
    else
      v58 = 0;
  }
  else
  {
    v58 = 0;
  }
  v59 = (unsigned int *)v162;
  if (v162)
  {
    v60 = (unsigned int *)(v162 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 + 1, v60));
  }
  v62 = *(_QWORD *)(v4 + 32);
  if (v62)
    goto LABEL_247;
  v62 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v62 = 1;
  *(_QWORD *)(v62 + 8) = v4;
  v64 = *(unsigned int **)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v62;
  if (!v64)
    goto LABEL_247;
  do
  {
    v65 = __ldaxr(v64);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v64));
  if (!v66)
  {
    atomic_store(1u, v64);
    WTF::fastFree((WTF *)v64, v63);
  }
  v62 = *(_QWORD *)(v4 + 32);
  if (v62)
  {
LABEL_247:
    do
      v67 = __ldaxr((unsigned int *)v62);
    while (__stlxr(v67 + 1, (unsigned int *)v62));
  }
  v68 = (unsigned int **)WTF::fastMalloc((WTF *)0x10);
  *v68 = 0;
  v68[1] = 0;
  v70 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v70 = 1;
  *(_QWORD *)(v70 + 8) = v68;
  v71 = *v68;
  *v68 = (unsigned int *)v70;
  if (!v71)
    goto LABEL_248;
  do
  {
    v72 = __ldaxr(v71);
    v73 = v72 - 1;
  }
  while (__stlxr(v73, v71));
  if (!v73)
  {
    atomic_store(1u, v71);
    WTF::fastFree((WTF *)v71, v69);
  }
  v70 = (uint64_t)*v68;
  if (*v68)
  {
LABEL_248:
    do
      v74 = __ldaxr((unsigned int *)v70);
    while (__stlxr(v74 + 1, (unsigned int *)v70));
  }
  v75 = *(WTF::FunctionDispatcher **)(v58 + 288);
  if (!v75)
  {
    v75 = (WTF::FunctionDispatcher *)WTF::fastMalloc((WTF *)0x40);
    v76 = 1;
    *((_DWORD *)v75 + 2) = 1;
    v77 = WTF::FunctionDispatcher::FunctionDispatcher(v75);
    *(_QWORD *)v77 = off_1E33A7800;
    v78 = *(_OWORD *)(v58 + 240);
    *(_OWORD *)(v77 + 16) = *(_OWORD *)(v58 + 224);
    *(_OWORD *)(v77 + 32) = v78;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 64))(v58))
    {
      v79 = *(_QWORD *)(StatusReg + 736);
      if (!v79)
        v79 = WTF::Thread::initializeCurrentTLS(0);
      v76 = *(_DWORD *)(v79 + 48);
    }
    *((_DWORD *)v75 + 12) = v76;
    v80 = *(_QWORD *)(v58 + 288);
    *(_QWORD *)(v58 + 288) = v75;
    if (v80)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 40))(v80);
      v75 = *(WTF::FunctionDispatcher **)(v58 + 288);
    }
  }
  v81 = v4;
  v82 = *(_QWORD *)(v58 + 104);
  if (v82)
    goto LABEL_249;
  v82 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v82 = 1;
  *(_QWORD *)(v82 + 8) = v58 + 96;
  v146 = *(unsigned int **)(v58 + 104);
  *(_QWORD *)(v58 + 104) = v82;
  if (!v146)
    goto LABEL_249;
  do
  {
    v147 = __ldaxr(v146);
    v148 = v147 - 1;
  }
  while (__stlxr(v148, v146));
  if (!v148)
  {
    atomic_store(1u, v146);
    WTF::fastFree((WTF *)v146, v145);
  }
  v82 = *(_QWORD *)(v58 + 104);
  if (v82)
  {
LABEL_249:
    do
      v83 = __ldaxr((unsigned int *)v82);
    while (__stlxr(v83 + 1, (unsigned int *)v82));
  }
  v171[0] = 0uLL;
  v84 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(WTF::FunctionDispatcher *))(*(_QWORD *)v75 + 32))(v75);
  v85 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v85 = off_1E335EC00;
  *(_QWORD *)(v85 + 8) = v82;
  *(_BYTE *)(v85 + 16) = 9;
  *(_QWORD *)(v85 + 24) = v62;
  *(_QWORD *)(v85 + 32) = v81;
  *(_QWORD *)(v85 + 40) = v68;
  *(_DWORD *)(v84 + 8) = 1;
  *(_QWORD *)(v84 + 16) = v75;
  *(_QWORD *)(v84 + 24) = 0;
  *(_QWORD *)(v84 + 32) = 0;
  *(_QWORD *)(v84 + 40) = "enqueueTaskWhenSettled";
  *(_QWORD *)(v84 + 48) = 0;
  *(_WORD *)(v84 + 56) = 0;
  *(_QWORD *)v84 = &off_1E32059B0;
  v86 = v59 + 2;
  *(_QWORD *)(v84 + 64) = 0;
  *(_QWORD *)(v84 + 72) = v85;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 + 1, v86));
  *(_QWORD *)buf = v59;
  *(_QWORD *)&buf[8] = v84;
  *(_OWORD *)&buf[16] = v171[0];
  *(_QWORD *)&buf[32] = "enqueueTaskWhenSettled";
  v169 = 0;
  if (v70)
  {
    v88 = *(uint64_t **)(v70 + 8);
    v89 = (uint64_t)v59;
    if (v88)
    {
      WTF::WeakHashSet<WTF::NativePromiseRequest,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::NativePromiseRequest>(v58 + 296, v88, (uint64_t)v171);
      v90 = *(_QWORD *)(v70 + 8);
      v91 = *(_QWORD *)&buf[8];
      v92 = (unsigned int *)(*(_QWORD *)&buf[8] + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 + 1, v92));
      v94 = *(unsigned int **)(v90 + 8);
      *(_QWORD *)(v90 + 8) = v91;
      if (v94)
      {
        v95 = v94 + 2;
        do
        {
          v96 = __ldaxr(v95);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, v95));
        if (!v97)
        {
          atomic_store(1u, v94 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 8))(v94);
        }
      }
      v98 = *(_QWORD *)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&v171[0] = v98;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(*(uint64_t *)buf, (WTF::NativePromiseBase **)v171, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
      v100 = *(unsigned int **)&v171[0];
      *(_QWORD *)&v171[0] = 0;
      if (v100)
      {
        v101 = v100 + 2;
        do
        {
          v102 = __ldaxr(v101);
          v103 = v102 - 1;
        }
        while (__stlxr(v103, v101));
        if (!v103)
        {
          atomic_store(1u, v100 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 8))(v100);
        }
      }
      v84 = *(_QWORD *)&buf[8];
      if (!*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[8] = 0;
        goto LABEL_195;
      }
      v89 = *(_QWORD *)buf;
    }
  }
  else
  {
    v89 = (uint64_t)v59;
  }
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&v171[0] = v84;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v89, (WTF::NativePromiseBase **)v171, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
  v111 = *(unsigned int **)&v171[0];
  *(_QWORD *)&v171[0] = 0;
  if (v111)
  {
    v112 = v111 + 2;
    do
    {
      v113 = __ldaxr(v112);
      v114 = v113 - 1;
    }
    while (__stlxr(v114, v112));
    if (!v114)
    {
      atomic_store(1u, v111 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v111 + 8))(v111);
    }
  }
  v115 = *(unsigned int **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v115)
  {
    v116 = v115 + 2;
    do
    {
      v117 = __ldaxr(v116);
      v118 = v117 - 1;
    }
    while (__stlxr(v118, v116));
    if (!v118)
    {
      atomic_store(1u, v115 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v115 + 8))(v115);
    }
  }
LABEL_195:
  v119 = *(unsigned int **)buf;
  *(_QWORD *)buf = 0;
  if (!v119)
    goto LABEL_199;
  v120 = v119 + 2;
  do
  {
    v121 = __ldaxr(v120);
    v122 = v121 - 1;
  }
  while (__stlxr(v122, v120));
  if (!v122)
  {
    atomic_store(1u, v119 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v119 + 16))(v119);
    if (!v70)
      goto LABEL_203;
  }
  else
  {
LABEL_199:
    if (!v70)
      goto LABEL_203;
  }
  do
  {
    v123 = __ldaxr((unsigned int *)v70);
    v124 = v123 - 1;
  }
  while (__stlxr(v124, (unsigned int *)v70));
  if (!v124)
  {
    atomic_store(1u, (unsigned int *)v70);
    WTF::fastFree((WTF *)v70, v99);
  }
LABEL_203:
  if (v59)
  {
    do
    {
      v125 = __ldaxr(v86);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, v86));
    if (!v126)
    {
      atomic_store(1u, v59 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 16))(v59);
    }
  }
  v127 = *(_QWORD *)(v81 + 128);
  v128 = v162;
  v162 = 0;
  *(_OWORD *)&buf[8] = v163;
  *(_OWORD *)&buf[24] = v164;
  LOBYTE(v169) = v165;
  v129 = *(_QWORD *)a2;
  *(_QWORD *)v170 = v81;
  *(_QWORD *)&v170[8] = v129;
  *(_QWORD *)&v170[13] = *(_QWORD *)((char *)a2 + 5);
  *(_QWORD *)&v170[24] = *(_QWORD *)a3;
  *(_QWORD *)&v170[29] = *(_QWORD *)((char *)a3 + 5);
  v130 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v130 = off_1E335EC50;
  *(_QWORD *)(v130 + 8) = v128;
  *(_QWORD *)buf = 0;
  v131 = *(_OWORD *)&buf[8];
  v132 = *(_OWORD *)&buf[24];
  *(_BYTE *)(v130 + 48) = (_BYTE)v169;
  *(_OWORD *)(v130 + 16) = v131;
  *(_OWORD *)(v130 + 32) = v132;
  v133 = *(_QWORD *)&v170[29];
  v134 = *(_OWORD *)v170;
  *(_OWORD *)(v130 + 72) = *(_OWORD *)&v170[16];
  *(_OWORD *)(v130 + 56) = v134;
  *(_QWORD *)(v130 + 85) = v133;
  v135 = *(unsigned int **)(v127 + 16);
  if (v135)
  {
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 + 1, v135));
  }
  v137 = *(_OWORD *)(v127 + 48);
  v171[0] = *(_OWORD *)(v127 + 32);
  v171[1] = v137;
  v138 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v138 = &off_1E335EA00;
  *((_QWORD *)v138 + 1) = v130;
  *((_QWORD *)v138 + 2) = v135;
  v166 = v138;
  v167 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_213;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_213:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v140 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v171);
  if (v140)
  {
    v141 = v140[4];
    if (v141)
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v141 + 336))(v141, &v166);
  }
  v142 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v142 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      goto LABEL_223;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
LABEL_223:
  v143 = (uint64_t)v166;
  v166 = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)buf);
  this = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v162);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return this;
}

WTF::StringImpl *WebCore::SourceBuffer::changeType@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  void *v13;
  double v14;
  const WebCore::ContentType *v15;
  double v16;
  float v17;
  uint64_t Timestamps;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;

  v7 = *a2;
  if (!*a2 || !*((_DWORD *)v7 + 1))
  {
    v8 = 33;
LABEL_3:
    *(_BYTE *)a3 = v8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  v9 = this;
  if (!*((_QWORD *)this + 17) || *((_BYTE *)this + 320))
  {
    v8 = 8;
    goto LABEL_3;
  }
  *(_DWORD *)v7 += 2;
  v21 = v7;
  v22 = 0;
  v10 = *((_QWORD *)this + 1);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      if (!*(_BYTE *)(v11 + 178))
      {
        v12 = (_DWORD *)(v11 - 264);
        *(_DWORD *)(v11 - 264) += 2;
        if ((WebCore::contentTypeMeetsContainerAndCodecTypeRequirements((WebCore::ContentType *)&v21, *(_QWORD *)(v11 + 392) + 96, *(_QWORD *)(v11 + 392) + 120, a4, a5, a6) & 1) == 0)
        {
          *(_BYTE *)a3 = 6;
          *(_QWORD *)(a3 + 8) = 0;
          *(_BYTE *)(a3 + 16) = 1;
          if (*v12 == 2)
          {
            if ((*(_WORD *)(v11 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v11 - 288), v13);
          }
          else
          {
            *v12 -= 2;
          }
          goto LABEL_26;
        }
        if (*v12 == 2)
        {
          if ((*(_WORD *)(v11 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v11 - 288), v13);
        }
        else
        {
          *v12 -= 2;
        }
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v9 + 15) + 96))(*((_QWORD *)v9 + 15), &v21) & 1) != 0)
  {
    WebCore::MediaSource::openIfInEndedState(*((_QWORD *)v9 + 17));
    (*(void (**)(_QWORD))(**((_QWORD **)v9 + 15) + 136))(*((_QWORD *)v9 + 15));
    *((_DWORD *)v9 + 74) = 0;
    v14 = (*(double (**)(_QWORD))(**((_QWORD **)v9 + 15) + 80))(*((_QWORD *)v9 + 15));
    Timestamps = WebCore::MediaSource::contentTypeShouldGenerateTimestamps((WebCore::MediaSource *)&v21, v15, v14, v16, v17);
    *((_BYTE *)v9 + 323) = Timestamps;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v9 + 15) + 176))(*((_QWORD *)v9 + 15), Timestamps);
    if (*((_BYTE *)v9 + 323))
    {
      v19 = *((_QWORD *)v9 + 17);
      if (v19)
      {
        if (!*((_BYTE *)v9 + 320))
        {
          if (!*(_BYTE *)(v19 + 232))
          {
            v20 = *(_QWORD *)(v19 + 88);
            if (v20)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 112))(v20) == 2)
                WebCore::MediaSource::openIfInEndedState(*((_QWORD *)v9 + 17));
            }
          }
          if (*((_DWORD *)v9 + 74) != 2)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)v9 + 15) + 168))(*((_QWORD *)v9 + 15));
            *((_DWORD *)v9 + 36) = 1;
            (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v9 + 15) + 112))(*((_QWORD *)v9 + 15), 1);
          }
        }
      }
    }
    *((_BYTE *)v9 + 324) = 1;
    (*(void (**)(_QWORD))(**((_QWORD **)v9 + 15) + 232))(*((_QWORD *)v9 + 15));
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 6;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
LABEL_26:
  this = v21;
  v21 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::SourceBuffer::setShouldGenerateTimestamps(WebCore::SourceBuffer *this, char a2)
{
  *((_BYTE *)this + 323) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 176))(*((_QWORD *)this + 15));
}

BOOL WebCore::SourceBuffer::virtualHasPendingActivity(WebCore::SourceBuffer *this)
{
  return *((_QWORD *)this + 17) != 0;
}

uint64_t WebCore::SourceBuffer::videoTracks(WebCore::SourceBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  _QWORD *v24;

  if (!*((_QWORD *)this + 22))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        v4 = v3 - 96;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    v5 = bmalloc::api::isoAllocate();
    v6 = v5;
    *(_DWORD *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &unk_1E33A4FC0;
    v7 = (_QWORD *)(v5 + 32);
    if (v4 && !*(_BYTE *)(v4 + 274))
    {
      v8 = v4 - 192;
      v9 = *(_QWORD *)(v4 + 512);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
          v8 = v10;
      }
      v4 = v8 + 192;
    }
    *(_QWORD *)(v5 + 32) = &off_1E33A18C0;
    *(_QWORD *)(v5 + 40) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 32), (WebCore::ScriptExecutionContext *)v4);
    *(_QWORD *)(v6 + 32) = &off_1E33A0540;
    *(_QWORD *)(v6 + 48) = 0;
    if (v4)
    {
      if (*(_BYTE *)(v4 + 278))
      {
        __break(0xC471u);
        JUMPOUT(0x195457EFCLL);
      }
      v24 = v7;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v4 + 128), (uint64_t *)&v24, (uint64_t)&v23);
    }
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 72) = 3;
    *(_QWORD *)(v6 + 80) = 0;
    *(_BYTE *)(v6 + 88) = 0;
    *(_QWORD *)v6 = off_1E33ED4A8;
    *(_QWORD *)(v6 + 32) = &unk_1E33ED560;
    WebCore::ActiveDOMObject::suspendIfNeeded(v7);
    v12 = (_DWORD *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v6;
    if (v12)
    {
      if (v12[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 72))(v12);
        v6 = *((_QWORD *)this + 22);
      }
      else
      {
        --v12[6];
      }
    }
    v14 = (unsigned int **)((char *)this + 152);
    v13 = *((_QWORD *)this + 19);
    if (v13)
      goto LABEL_36;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = v14;
    v15 = *v14;
    *v14 = (unsigned int *)v13;
    if (!v15)
      goto LABEL_36;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v11);
    }
    v13 = (uint64_t)*v14;
    if (*v14)
    {
LABEL_36:
      do
        v18 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v18 + 1, (unsigned int *)v13));
    }
    v19 = *(unsigned int **)(v6 + 80);
    *(_QWORD *)(v6 + 80) = v13;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v11);
      }
    }
  }
  return *((_QWORD *)this + 22);
}

uint64_t WebCore::SourceBuffer::audioTracks(WebCore::SourceBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  _QWORD *v24;

  if (!*((_QWORD *)this + 23))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        v4 = v3 - 96;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    v5 = bmalloc::api::isoAllocate();
    v6 = v5;
    *(_DWORD *)(v5 + 24) = 1;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &unk_1E33A4FC0;
    v7 = (_QWORD *)(v5 + 32);
    if (v4 && !*(_BYTE *)(v4 + 274))
    {
      v8 = v4 - 192;
      v9 = *(_QWORD *)(v4 + 512);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
          v8 = v10;
      }
      v4 = v8 + 192;
    }
    *(_QWORD *)(v5 + 32) = &off_1E33A18C0;
    *(_QWORD *)(v5 + 40) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 32), (WebCore::ScriptExecutionContext *)v4);
    *(_QWORD *)(v6 + 32) = &off_1E33A0540;
    *(_QWORD *)(v6 + 48) = 0;
    if (v4)
    {
      if (*(_BYTE *)(v4 + 278))
      {
        __break(0xC471u);
        JUMPOUT(0x195458118);
      }
      v24 = v7;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v4 + 128), (uint64_t *)&v24, (uint64_t)&v23);
    }
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 72) = 3;
    *(_QWORD *)(v6 + 80) = 0;
    *(_BYTE *)(v6 + 88) = 0;
    *(_QWORD *)v6 = off_1E33EA040;
    *(_QWORD *)(v6 + 32) = &unk_1E33EA0F8;
    WebCore::ActiveDOMObject::suspendIfNeeded(v7);
    v12 = (_DWORD *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v6;
    if (v12)
    {
      if (v12[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 72))(v12);
        v6 = *((_QWORD *)this + 23);
      }
      else
      {
        --v12[6];
      }
    }
    v14 = (unsigned int **)((char *)this + 152);
    v13 = *((_QWORD *)this + 19);
    if (v13)
      goto LABEL_36;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = v14;
    v15 = *v14;
    *v14 = (unsigned int *)v13;
    if (!v15)
      goto LABEL_36;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v11);
    }
    v13 = (uint64_t)*v14;
    if (*v14)
    {
LABEL_36:
      do
        v18 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v18 + 1, (unsigned int *)v13));
    }
    v19 = *(unsigned int **)(v6 + 80);
    *(_QWORD *)(v6 + 80) = v13;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v11);
      }
    }
  }
  return *((_QWORD *)this + 23);
}

uint64_t WebCore::SourceBuffer::textTracks(WebCore::SourceBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ScriptExecutionContext *v4;
  WebCore::TextTrackList *v5;
  WebCore::TextTrackList *v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (!*((_QWORD *)this + 24))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        v4 = (WebCore::ScriptExecutionContext *)(v3 - 96);
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    v5 = (WebCore::TextTrackList *)bmalloc::api::isoAllocate();
    v6 = WebCore::TextTrackList::TextTrackList(v5, v4);
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6 + 4);
    v8 = (_DWORD *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v5;
    if (v8)
    {
      if (v8[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 72))(v8);
        v5 = (WebCore::TextTrackList *)*((_QWORD *)this + 24);
      }
      else
      {
        --v8[6];
      }
    }
    v10 = (unsigned int **)((char *)this + 152);
    v9 = *((_QWORD *)this + 19);
    if (v9)
      goto LABEL_25;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v10;
    v11 = *v10;
    *v10 = (unsigned int *)v9;
    if (!v11)
      goto LABEL_25;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v7);
    }
    v9 = (uint64_t)*v10;
    if (*v10)
    {
LABEL_25:
      do
        v14 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v14 + 1, (unsigned int *)v9));
    }
    v15 = (unsigned int *)*((_QWORD *)v5 + 10);
    *((_QWORD *)v5 + 10) = v9;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v7);
      }
    }
  }
  return *((_QWORD *)this + 24);
}

WebCore::TrackListBase *WebCore::SourceBuffer::videoTrackSelectedChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WebCore::MediaSource *v17;
  WebCore::TrackListBase *result;
  uint64_t v19;
  WebCore::VideoTrack **i;

  if (!*((_BYTE *)a2 + 184))
  {
    v5 = *((_QWORD *)this + 22);
    if (v5 && (v6 = *(unsigned int *)(v5 + 68), (_DWORD)v6))
    {
      v7 = *(_QWORD **)(v5 + 56);
      v8 = 8 * v6;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 48))(*v7) & 1) == 0)
      {
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v9 = *((_QWORD *)this + 23);
      if (v9 && (v10 = *(unsigned int *)(v9 + 68), (_DWORD)v10))
      {
        v11 = *(_QWORD **)(v9 + 56);
        v12 = 8 * v10;
        while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 48))(*v11) & 1) == 0)
        {
          ++v11;
          v12 -= 8;
          if (!v12)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        v13 = *((_QWORD *)this + 24);
        if (!v13 || (v14 = *(unsigned int *)(v13 + 68), !(_DWORD)v14))
        {
LABEL_19:
          if (!*((_BYTE *)this + 322))
            goto LABEL_23;
          *((_BYTE *)this + 322) = 0;
          v4 = *(void (**)(void))(**((_QWORD **)this + 15) + 56);
          goto LABEL_21;
        }
        v15 = *(_QWORD **)(v13 + 56);
        v16 = 8 * v14;
        while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 48))(*v15) & 1) == 0)
        {
          ++v15;
          v16 -= 8;
          if (!v16)
            goto LABEL_19;
        }
      }
    }
    if (!*((_BYTE *)a2 + 184))
      goto LABEL_23;
  }
  if (*((_BYTE *)this + 322))
    goto LABEL_23;
  *((_BYTE *)this + 322) = 1;
  v4 = *(void (**)(void))(**((_QWORD **)this + 15) + 56);
LABEL_21:
  v4();
  v17 = (WebCore::MediaSource *)*((_QWORD *)this + 17);
  if (v17)
    WebCore::MediaSource::regenerateActiveSourceBuffers(v17);
LABEL_23:
  result = (WebCore::TrackListBase *)*((_QWORD *)this + 22);
  if (result)
  {
    v19 = *((unsigned int *)result + 17);
    if ((_DWORD)v19)
    {
      for (i = (WebCore::VideoTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v19)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::videoTrackSelectedChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  return WebCore::SourceBuffer::videoTrackSelectedChanged((WebCore::SourceBuffer *)((char *)this - 80), a2);
}

WebCore::TrackListBase *WebCore::SourceBuffer::videoTrackKindChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::VideoTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 22);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::VideoTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::videoTrackKindChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::VideoTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 12);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::VideoTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *WebCore::SourceBuffer::videoTrackLabelChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::VideoTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 22);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::VideoTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::videoTrackLabelChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::VideoTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 12);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::VideoTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *WebCore::SourceBuffer::videoTrackLanguageChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::VideoTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 22);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::VideoTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::videoTrackLanguageChanged(WebCore::SourceBuffer *this, WebCore::VideoTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::VideoTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 12);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::VideoTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *WebCore::SourceBuffer::audioTrackEnabledChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WebCore::MediaSource *v17;
  WebCore::TrackListBase *result;
  uint64_t v19;
  WebCore::AudioTrack **i;

  if (!*((_BYTE *)a2 + 176))
  {
    v5 = *((_QWORD *)this + 22);
    if (v5 && (v6 = *(unsigned int *)(v5 + 68), (_DWORD)v6))
    {
      v7 = *(_QWORD **)(v5 + 56);
      v8 = 8 * v6;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 48))(*v7) & 1) == 0)
      {
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v9 = *((_QWORD *)this + 23);
      if (v9 && (v10 = *(unsigned int *)(v9 + 68), (_DWORD)v10))
      {
        v11 = *(_QWORD **)(v9 + 56);
        v12 = 8 * v10;
        while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 48))(*v11) & 1) == 0)
        {
          ++v11;
          v12 -= 8;
          if (!v12)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        v13 = *((_QWORD *)this + 24);
        if (!v13 || (v14 = *(unsigned int *)(v13 + 68), !(_DWORD)v14))
        {
LABEL_19:
          if (!*((_BYTE *)this + 322))
            goto LABEL_23;
          *((_BYTE *)this + 322) = 0;
          v4 = *(void (**)(void))(**((_QWORD **)this + 15) + 56);
          goto LABEL_21;
        }
        v15 = *(_QWORD **)(v13 + 56);
        v16 = 8 * v14;
        while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 48))(*v15) & 1) == 0)
        {
          ++v15;
          v16 -= 8;
          if (!v16)
            goto LABEL_19;
        }
      }
    }
    if (!*((_BYTE *)a2 + 176))
      goto LABEL_23;
  }
  if (*((_BYTE *)this + 322))
    goto LABEL_23;
  *((_BYTE *)this + 322) = 1;
  v4 = *(void (**)(void))(**((_QWORD **)this + 15) + 56);
LABEL_21:
  v4();
  v17 = (WebCore::MediaSource *)*((_QWORD *)this + 17);
  if (v17)
    WebCore::MediaSource::regenerateActiveSourceBuffers(v17);
LABEL_23:
  result = (WebCore::TrackListBase *)*((_QWORD *)this + 23);
  if (result)
  {
    v19 = *((unsigned int *)result + 17);
    if ((_DWORD)v19)
    {
      for (i = (WebCore::AudioTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v19)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::audioTrackEnabledChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  return WebCore::SourceBuffer::audioTrackEnabledChanged((WebCore::SourceBuffer *)((char *)this - 64), a2);
}

WebCore::TrackListBase *WebCore::SourceBuffer::audioTrackKindChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::AudioTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 23);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::AudioTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::audioTrackKindChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::AudioTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 15);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::AudioTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *WebCore::SourceBuffer::audioTrackLabelChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::AudioTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 23);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::AudioTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::audioTrackLabelChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::AudioTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 15);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::AudioTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *WebCore::SourceBuffer::audioTrackLanguageChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::AudioTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 23);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::AudioTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

WebCore::TrackListBase *`non-virtual thunk to'WebCore::SourceBuffer::audioTrackLanguageChanged(WebCore::SourceBuffer *this, WebCore::AudioTrack *a2)
{
  WebCore::TrackListBase *result;
  uint64_t v3;
  WebCore::AudioTrack **i;

  result = (WebCore::TrackListBase *)*((_QWORD *)this + 15);
  if (result)
  {
    v3 = *((unsigned int *)result + 17);
    if ((_DWORD)v3)
    {
      for (i = (WebCore::AudioTrack **)*((_QWORD *)result + 7); *i != a2; ++i)
      {
        if (!--v3)
          return result;
      }
      return (WebCore::TrackListBase *)WebCore::TrackListBase::scheduleChangeEvent(result);
    }
  }
  return result;
}

uint64_t WebCore::SourceBuffer::textTrackModeChanged(WebCore::SourceBuffer *this, WebCore::TextTrack *a2)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WebCore::MediaSource *v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::TextTrack **i;

  if (*((_DWORD *)a2 + 56))
  {
LABEL_2:
    if (*((_BYTE *)this + 322))
      goto LABEL_23;
    *((_BYTE *)this + 322) = 1;
    v4 = *(void (**)(void))(**((_QWORD **)this + 15) + 56);
    goto LABEL_21;
  }
  v5 = *((_QWORD *)this + 22);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 68);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD **)(v5 + 56);
      v8 = 8 * v6;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 48))(*v7) & 1) == 0)
      {
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_9;
      }
      goto LABEL_2;
    }
  }
LABEL_9:
  v9 = *((_QWORD *)this + 23);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 68);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD **)(v9 + 56);
      v12 = 8 * v10;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 48))(*v11) & 1) == 0)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_14;
      }
      goto LABEL_2;
    }
  }
LABEL_14:
  v13 = *((_QWORD *)this + 24);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 + 68);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD **)(v13 + 56);
      v16 = 8 * v14;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 48))(*v15) & 1) == 0)
      {
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_19;
      }
      goto LABEL_2;
    }
  }
LABEL_19:
  if (!*((_BYTE *)this + 322))
    goto LABEL_23;
  *((_BYTE *)this + 322) = 0;
  v4 = *(void (**)(void))(**((_QWORD **)this + 15) + 56);
LABEL_21:
  v4();
  v17 = (WebCore::MediaSource *)*((_QWORD *)this + 17);
  if (v17)
    WebCore::MediaSource::regenerateActiveSourceBuffers(v17);
LABEL_23:
  result = *((_QWORD *)this + 24);
  if (result)
  {
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v19 = *((_DWORD *)a2 + 58);
      v20 = result + 56;
      v21 = result + 96;
      v22 = result + 112;
      if (v19)
        v22 = 0;
      if (v19 != 1)
        v21 = v22;
      if (v19 != 2)
        v20 = v21;
      v23 = *(unsigned int *)(v20 + 12);
      if ((_DWORD)v23)
      {
        for (i = *(WebCore::TextTrack ***)v20; *i != a2; ++i)
        {
          if (!--v23)
            return result;
        }
        return (uint64_t)WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)result);
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::textTrackModeChanged(WebCore::SourceBuffer *this, WebCore::TextTrack *a2)
{
  return WebCore::SourceBuffer::textTrackModeChanged((WebCore::SourceBuffer *)((char *)this - 96), a2);
}

uint64_t WebCore::SourceBuffer::textTrackKindChanged(WebCore::SourceBuffer *this, WebCore::TextTrack *a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::TextTrack **i;

  result = *((_QWORD *)this + 24);
  if (result)
  {
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v3 = *((_DWORD *)a2 + 58);
      v4 = result + 56;
      v5 = result + 96;
      v6 = result + 112;
      if (v3)
        v6 = 0;
      if (v3 != 1)
        v5 = v6;
      if (v3 != 2)
        v4 = v5;
      v7 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v7)
      {
        for (i = *(WebCore::TextTrack ***)v4; *i != a2; ++i)
        {
          if (!--v7)
            return result;
        }
        return (uint64_t)WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)result);
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::textTrackKindChanged(WebCore::SourceBuffer *this, WebCore::TextTrack *a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::TextTrack **i;

  result = *((_QWORD *)this + 12);
  if (result)
  {
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v3 = *((_DWORD *)a2 + 58);
      v4 = result + 56;
      v5 = result + 96;
      v6 = result + 112;
      if (v3)
        v6 = 0;
      if (v3 != 1)
        v5 = v6;
      if (v3 != 2)
        v4 = v5;
      v7 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v7)
      {
        for (i = *(WebCore::TextTrack ***)v4; *i != a2; ++i)
        {
          if (!--v7)
            return result;
        }
        return (uint64_t)WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)result);
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::SourceBuffer::textTrackLanguageChanged(WebCore::SourceBuffer *this, WebCore::TextTrack *a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::TextTrack **i;

  result = *((_QWORD *)this + 24);
  if (result)
  {
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v3 = *((_DWORD *)a2 + 58);
      v4 = result + 56;
      v5 = result + 96;
      v6 = result + 112;
      if (v3)
        v6 = 0;
      if (v3 != 1)
        v5 = v6;
      if (v3 != 2)
        v4 = v5;
      v7 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v7)
      {
        for (i = *(WebCore::TextTrack ***)v4; *i != a2; ++i)
        {
          if (!--v7)
            return result;
        }
        return (uint64_t)WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)result);
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SourceBuffer::textTrackLanguageChanged(WebCore::SourceBuffer *this, WebCore::TextTrack *a2)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::TextTrack **i;

  result = *((_QWORD *)this + 12);
  if (result)
  {
    if (*((_DWORD *)a2 + 10) == 1)
    {
      v3 = *((_DWORD *)a2 + 58);
      v4 = result + 56;
      v5 = result + 96;
      v6 = result + 112;
      if (v3)
        v6 = 0;
      if (v3 != 1)
        v5 = v6;
      if (v3 != 2)
        v4 = v5;
      v7 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v7)
      {
        for (i = *(WebCore::TextTrack ***)v4; *i != a2; ++i)
        {
          if (!--v7)
            return result;
        }
        return (uint64_t)WebCore::TrackListBase::scheduleChangeEvent((WebCore::TrackListBase *)result);
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::SourceBuffer::bufferedSamplesForTrackId(WebCore::SourceBuffer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 336))(*((_QWORD *)this + 15));
}

uint64_t WebCore::SourceBuffer::enqueuedSamplesForTrackID(WebCore::SourceBuffer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 344))(*((_QWORD *)this + 15));
}

uint64_t WebCore::SourceBuffer::minimumUpcomingPresentationTimeForTrackID(WebCore::SourceBuffer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 352))(*((_QWORD *)this + 15));
}

uint64_t WebCore::SourceBuffer::setMaximumQueueDepthForTrackID(WebCore::SourceBuffer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 360))(*((_QWORD *)this + 15));
}

uint64_t WebCore::SourceBuffer::setMaximumSourceBufferSize(WebCore::SourceBuffer *this, uint64_t a2)
{
  *((_QWORD *)this + 46) = a2;
  *((_BYTE *)this + 376) = 1;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 320))(*((_QWORD *)this + 15));
}

void WebCore::SourceBuffer::updateBuffered(WebCore::SourceBuffer *this)
{
  WebCore::SourceBuffer *v1;
  uint64_t v2;
  unint64_t v3;
  WebCore::SourceBuffer *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  WTF::MediaTime *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF **v16;
  WTF *v17;
  __int128 *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  WTF *v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  WTF *v32;
  WTF *v33;
  const WTF::MediaTime *v34;
  WTF::MediaTime *v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  WTF *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const WTF::MediaTime *v50;
  WTF::MediaTime *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  WTF::MediaTime *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  WTF *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  WTF *v74;
  WebCore::SourceBuffer *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  WTF::MediaTime *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  WTF *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  WebCore *v89;
  WebCore *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  WTF *v98;
  WTF *v99;
  WebCore *v100;
  __int128 v101;
  WTF *v102;
  int v103;
  int v104;
  WTF *v105[2];
  WTF *v106[2];

  v1 = this;
  v2 = *((_QWORD *)this + 41);
  v3 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195459324);
    }
    this = (WebCore::SourceBuffer *)WTF::fastMalloc((WTF *)(32 * v3));
    v4 = this;
    v5 = *(unsigned int *)(v2 + 20);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(v2 + 8);
      v8 = 32 * v5;
      do
      {
        v9 = (_OWORD *)((char *)this + v6);
        v10 = *(_OWORD *)(v7 + v6 + 16);
        *v9 = *(_OWORD *)(v7 + v6);
        v9[1] = v10;
        v6 += 32;
      }
      while (v8 != v6);
    }
  }
  else
  {
    v4 = 0;
  }
  v11 = (WTF::MediaTime *)WTF::MediaTime::negativeInfiniteTime(this);
  *(_OWORD *)v106 = *(_OWORD *)v11;
  v12 = *((unsigned int *)v1 + 87);
  if ((_DWORD)v12)
  {
    v13 = *((_QWORD *)v1 + 42);
    v14 = 16 * v12;
    do
    {
      v15 = *(_DWORD *)(v13 + 12);
      if (v15)
      {
        *(_OWORD *)v105 = *(_OWORD *)(*(_QWORD *)v13 + 32 * (v15 - 1) + 16);
        v11 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)v106, (const WTF::MediaTime *)v105);
        if ((_DWORD)v11 == -1)
          v16 = v105;
        else
          v16 = v106;
        v17 = *(WTF **)((char *)v16 + 5);
        v106[0] = *v16;
        *(WTF **)((char *)v106 + 5) = v17;
      }
      v13 += 16;
      v14 -= 16;
    }
    while (v14);
  }
  if ((BYTE4(v106[1]) & 8) != 0)
  {
    v47 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v47 = 1;
    *(_QWORD *)(v47 + 8) = 0;
    *(_QWORD *)(v47 + 16) = 0;
    v33 = (WTF *)*((_QWORD *)v1 + 41);
    *((_QWORD *)v1 + 41) = v47;
    if (!v33)
      goto LABEL_56;
    if (*(_DWORD *)v33 != 1)
    {
      --*(_DWORD *)v33;
      goto LABEL_56;
    }
    v98 = (WTF *)*((_QWORD *)v33 + 1);
    if (v98)
    {
      *((_QWORD *)v33 + 1) = 0;
      *((_DWORD *)v33 + 4) = 0;
      WTF::fastFree(v98, v19);
    }
    goto LABEL_52;
  }
  v18 = (__int128 *)WTF::MediaTime::zeroTime(v11);
  v105[0] = 0;
  v105[1] = 0;
  WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)v105, v18, (__int128 *)v106, 0);
  v20 = *((unsigned int *)v1 + 87);
  if ((_DWORD)v20)
  {
    v21 = *((_QWORD *)v1 + 42);
    v22 = v21 + 16 * v20;
    do
    {
      v23 = *(unsigned int *)(v21 + 12);
      if ((_DWORD)v23)
      {
        v102 = 0;
        v103 = 0;
        v104 = v23;
        if (v23 >> 27)
          goto LABEL_125;
        v24 = (WTF *)WTF::fastMalloc((WTF *)(32 * v23));
        v103 = v23;
        v102 = v24;
        v25 = *(unsigned int *)(v21 + 12);
        if ((_DWORD)v25)
        {
          v26 = *(__int128 **)v21;
          v27 = 32 * v25;
          v28 = v24;
          do
          {
            v29 = *v26;
            v30 = v26[1];
            v26 += 2;
            *(_OWORD *)v28 = v29;
            *((_OWORD *)v28 + 1) = v30;
            v28 = (WTF *)((char *)v28 + 32);
            v27 -= 32;
          }
          while (v27);
        }
        if (*((_BYTE *)v1 + 325))
        {
          if (v104)
            v31 = (__int128 *)((char *)v24 + 32 * (v104 - 1) + 16);
          else
            v31 = (__int128 *)WTF::MediaTime::invalidTime(v24);
          v101 = *v31;
          WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v102, &v101, (__int128 *)v106, 0);
        }
        WebCore::PlatformTimeRanges::intersectWith((WTF *)v105, (__int128 **)&v102);
        v32 = v102;
        if (v102)
        {
          v102 = 0;
          v103 = 0;
          WTF::fastFree(v32, v19);
        }
      }
      v21 += 16;
    }
    while (v21 != v22);
  }
  if ((_DWORD)v3 != HIDWORD(v105[1]))
    goto LABEL_41;
  v33 = v105[0];
  if (!(_DWORD)v3)
    goto LABEL_50;
  if (WTF::MediaTime::compare(v4, v105[0])
    || WTF::MediaTime::compare((WebCore::SourceBuffer *)((char *)v4 + 16), (WTF *)((char *)v33 + 16)))
  {
    goto LABEL_41;
  }
  v34 = (WTF *)((char *)v33 + 48);
  v35 = (WebCore::SourceBuffer *)((char *)v4 + 48);
  v36 = 1;
  do
  {
    v37 = v36;
    if (v3 == v36)
      break;
    if (WTF::MediaTime::compare((WTF::MediaTime *)((char *)v35 - 16), (const WTF::MediaTime *)((char *)v34 - 16)))break;
    v38 = WTF::MediaTime::compare(v35, v34);
    v36 = v37 + 1;
    v34 = (const WTF::MediaTime *)((char *)v34 + 32);
    v35 = (WTF::MediaTime *)((char *)v35 + 32);
  }
  while (!v38);
  if (v37 < v3)
  {
LABEL_41:
    v39 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v39 = 1;
    v40 = HIDWORD(v105[1]);
    *(_QWORD *)(v39 + 8) = 0;
    *(_QWORD *)(v39 + 16) = 0;
    *(_DWORD *)(v39 + 20) = v40;
    if ((_DWORD)v40)
    {
      if (v40 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19545932CLL);
      }
      v41 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v40));
      *(_DWORD *)(v39 + 16) = v40;
      *(_QWORD *)(v39 + 8) = v41;
      if (HIDWORD(v105[1]))
      {
        v42 = v105[0];
        v43 = 32 * HIDWORD(v105[1]);
        do
        {
          v44 = *(_OWORD *)v42;
          v45 = *((_OWORD *)v42 + 1);
          v42 = (WTF *)((char *)v42 + 32);
          *v41 = v44;
          v41[1] = v45;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
      }
    }
    v46 = *((_QWORD *)v1 + 41);
    *((_QWORD *)v1 + 41) = v39;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
      {
        v99 = *(WTF **)(v46 + 8);
        if (v99)
        {
          *(_QWORD *)(v46 + 8) = 0;
          *(_DWORD *)(v46 + 16) = 0;
          WTF::fastFree(v99, v19);
        }
        WTF::fastFree((WTF *)v46, v19);
      }
      else
      {
        --*(_DWORD *)v46;
      }
    }
  }
  v33 = v105[0];
LABEL_50:
  if (v33)
  {
    v105[0] = 0;
    LODWORD(v105[1]) = 0;
LABEL_52:
    WTF::fastFree(v33, v19);
  }
LABEL_56:
  v48 = *((_QWORD *)v1 + 41);
  if ((_DWORD)v3 != *(_DWORD *)(v48 + 20))
    goto LABEL_134;
  if ((_DWORD)v3)
  {
    v49 = *(_QWORD *)(v48 + 8);
    if (WTF::MediaTime::compare(v4, (const WTF::MediaTime *)v49)
      || WTF::MediaTime::compare((WebCore::SourceBuffer *)((char *)v4 + 16), (const WTF::MediaTime *)(v49 + 16)))
    {
      goto LABEL_134;
    }
    v50 = (const WTF::MediaTime *)(v49 + 48);
    v51 = (WebCore::SourceBuffer *)((char *)v4 + 48);
    v52 = 1;
    do
    {
      v53 = v52;
      if (v3 == v52)
        break;
      if (WTF::MediaTime::compare((WTF::MediaTime *)((char *)v51 - 16), (const WTF::MediaTime *)((char *)v50 - 16)))break;
      v54 = WTF::MediaTime::compare(v51, v50);
      v52 = v53 + 1;
      v50 = (const WTF::MediaTime *)((char *)v50 + 32);
      v51 = (WTF::MediaTime *)((char *)v51 + 32);
    }
    while (!v54);
    if (v53 < v3)
    {
LABEL_134:
      if (!*((_BYTE *)v1 + 300))
      {
        *((_BYTE *)v1 + 300) = 1;
        v55 = (WTF *)*((_QWORD *)v1 + 17);
        if (v55)
          WebCore::MediaSource::updateBufferedIfNeeded(v55, 0);
      }
      if ((*(unsigned int (**)(WebCore::SourceBuffer *))(*(_QWORD *)v1 + 112))(v1))
      {
        v56 = *((_QWORD *)v1 + 41);
        v57 = *(unsigned int *)(v56 + 20);
        v106[0] = 0;
        LODWORD(v106[1]) = 0;
        HIDWORD(v106[1]) = v57;
        if ((_DWORD)v57)
        {
          if (v57 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x195459334);
          }
          v58 = (WTF *)WTF::fastMalloc((WTF *)(32 * v57));
          LODWORD(v106[1]) = v57;
          v106[0] = v58;
          v59 = *(unsigned int *)(v56 + 20);
          if ((_DWORD)v59)
          {
            v60 = *(__int128 **)(v56 + 8);
            v61 = 32 * v59;
            do
            {
              v62 = *v60;
              v63 = v60[1];
              v60 += 2;
              *(_OWORD *)v58 = v62;
              *((_OWORD *)v58 + 1) = v63;
              v58 = (WTF *)((char *)v58 + 32);
              v61 -= 32;
            }
            while (v61);
          }
        }
        if ((_DWORD)v3)
        {
          v64 = 32 * v3;
          v65 = v4;
          do
          {
            WebCore::PlatformTimeRanges::operator-=((_QWORD **)v106, v65);
            v65 = (WTF::MediaTime *)((char *)v65 + 32);
            v64 -= 32;
          }
          while (v64);
        }
        v66 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v66 = 1;
        v67 = HIDWORD(v106[1]);
        *(_QWORD *)(v66 + 8) = 0;
        *(_QWORD *)(v66 + 16) = 0;
        *(_DWORD *)(v66 + 20) = v67;
        if ((_DWORD)v67)
        {
          if (v67 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x19545933CLL);
          }
          v68 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v67));
          *(_DWORD *)(v66 + 16) = v67;
          *(_QWORD *)(v66 + 8) = v68;
          if (HIDWORD(v106[1]))
          {
            v69 = v106[0];
            v70 = 32 * HIDWORD(v106[1]);
            do
            {
              v71 = *(_OWORD *)v69;
              v72 = *((_OWORD *)v69 + 1);
              v69 = (WTF *)((char *)v69 + 32);
              *v68 = v71;
              v68[1] = v72;
              v68 += 2;
              v70 -= 32;
            }
            while (v70);
          }
        }
        v105[0] = 0;
        LODWORD(v105[1]) = 0;
        HIDWORD(v105[1]) = v3;
        if ((_DWORD)v3)
        {
          if (v3 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x195459344);
          }
          v73 = 32 * v3;
          v74 = (WTF *)WTF::fastMalloc((WTF *)(32 * v3));
          LODWORD(v105[1]) = v3;
          v105[0] = v74;
          v75 = v4;
          do
          {
            v76 = *(_OWORD *)v75;
            v77 = *((_OWORD *)v75 + 1);
            v75 = (WebCore::SourceBuffer *)((char *)v75 + 32);
            *(_OWORD *)v74 = v76;
            *((_OWORD *)v74 + 1) = v77;
            v74 = (WTF *)((char *)v74 + 32);
            v73 -= 32;
          }
          while (v73);
        }
        v78 = *((_QWORD *)v1 + 41);
        v79 = *(unsigned int *)(v78 + 20);
        if ((_DWORD)v79)
        {
          v80 = *(WTF::MediaTime **)(v78 + 8);
          v81 = 32 * v79;
          do
          {
            WebCore::PlatformTimeRanges::operator-=((_QWORD **)v105, v80);
            v80 = (WTF::MediaTime *)((char *)v80 + 32);
            v81 -= 32;
          }
          while (v81);
        }
        v82 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v82 = 1;
        v83 = HIDWORD(v105[1]);
        *(_QWORD *)(v82 + 8) = 0;
        *(_QWORD *)(v82 + 16) = 0;
        *(_DWORD *)(v82 + 20) = v83;
        if ((_DWORD)v83)
        {
          if (v83 >> 27)
          {
LABEL_125:
            __break(0xC471u);
            JUMPOUT(0x19545931CLL);
          }
          v84 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v83));
          *(_DWORD *)(v82 + 16) = v83;
          *(_QWORD *)(v82 + 8) = v84;
          if (HIDWORD(v105[1]))
          {
            v85 = v105[0];
            v86 = 32 * HIDWORD(v105[1]);
            do
            {
              v87 = *(_OWORD *)v85;
              v88 = *((_OWORD *)v85 + 1);
              v85 = (WTF *)((char *)v85 + 32);
              *v84 = v87;
              v84[1] = v88;
              v84 += 2;
              v86 -= 32;
            }
            while (v86);
          }
        }
        v89 = (WebCore *)bmalloc::api::isoAllocate();
        v90 = v89;
        v91 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v91 || (v89 = *(WebCore **)(v91 + 96)) == 0)
          v89 = (WebCore *)WebCore::threadGlobalDataSlow(v89);
        v92 = *((_QWORD *)v89 + 5);
        if (!v92)
        {
          v100 = v89;
          v89 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v89);
          v92 = *((_QWORD *)v100 + 5);
        }
        WTF::MonotonicTime::now(v89);
        *((_QWORD *)v90 + 1) = 0;
        *((_DWORD *)v90 + 4) = 1;
        *((_DWORD *)v90 + 5) = *((_DWORD *)v90 + 5) & 0xFFC00000 | 0x98200 | (*(_QWORD *)(v92 + 328) != 0);
        v94 = *(_DWORD **)(v92 + 328);
        if (v94)
          *v94 += 2;
        *((_QWORD *)v90 + 3) = v94;
        *((_QWORD *)v90 + 4) = 0;
        *((_QWORD *)v90 + 5) = 0;
        *((_QWORD *)v90 + 6) = 0;
        *((_QWORD *)v90 + 7) = v93;
        *(_QWORD *)v90 = off_1E335CF68;
        *((_QWORD *)v90 + 8) = 0;
        *((_QWORD *)v90 + 9) = v66;
        *((_QWORD *)v90 + 10) = v82;
        v102 = v90;
        WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v1, (uint64_t)v1 + 40, 9, (uint64_t *)&v102);
        if (v102)
        {
          if (*((_DWORD *)v102 + 4) == 1)
            (*(void (**)(void))(*(_QWORD *)v102 + 8))();
          else
            --*((_DWORD *)v102 + 4);
        }
        v95 = v105[0];
        if (v105[0])
        {
          v105[0] = 0;
          LODWORD(v105[1]) = 0;
          WTF::fastFree(v95, v19);
        }
        v96 = v106[0];
        if (v106[0])
        {
          v106[0] = 0;
          LODWORD(v106[1]) = 0;
          WTF::fastFree(v96, v19);
        }
      }
      v97 = *((_QWORD *)v1 + 17);
      if (v97)
        (*(void (**)(uint64_t))(*(_QWORD *)v97 + 72))(v97);
    }
  }
  if (v4)
    WTF::fastFree(v4, v19);
}

uint64_t WebCore::SourceBuffer::memoryPressure(WebCore::SourceBuffer *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WTF::MediaTime *v5;
  WTF::MediaTime *v6;
  uint64_t v7;
  WTF::MediaTime *v8;
  WTF::MediaTime *v9;
  uint64_t v10;
  WTF::MediaTime *v11[2];

  result = (*(uint64_t (**)(WebCore::SourceBuffer *))(*(_QWORD *)this + 112))(this);
  if ((_DWORD)result)
  {
    v3 = *((_QWORD *)this + 15);
    v4 = *((_QWORD *)this + 17);
    if (*(_BYTE *)(v4 + 168))
    {
      v5 = *(WTF::MediaTime **)(v4 + 120);
      v6 = *(WTF::MediaTime **)(v4 + 128);
    }
    else
    {
      v7 = *(_QWORD *)(v4 + 88);
      if (v7)
      {
        (*(void (**)(WTF::MediaTime **__return_ptr))(*(_QWORD *)v7 + 16))(v11);
        if (v11[0])
        {
          v5 = (WTF::MediaTime *)(*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v11[0] + 344))(v11[0]);
          v6 = v8;
          v9 = v11[0];
          v11[0] = 0;
          if (v9)
            (*(void (**)(WTF::MediaTime *))(*(_QWORD *)v9 + 24))(v9);
          goto LABEL_11;
        }
        v10 = WTF::MediaTime::invalidTime(0);
      }
      else
      {
        v10 = WTF::MediaTime::zeroTime(0);
      }
      v5 = *(WTF::MediaTime **)v10;
      v6 = *(WTF::MediaTime **)(v10 + 8);
    }
LABEL_11:
    v11[0] = v5;
    v11[1] = v6;
    return (*(uint64_t (**)(uint64_t, WTF::MediaTime **))(*(_QWORD *)v3 + 328))(v3, v11);
  }
  return result;
}

char *`non-virtual thunk to'WebCore::SourceBuffer::logChannel(WebCore::SourceBuffer *this)
{
  return &WebCore::LogMediaSource;
}

uint64_t WebCore::SourceBuffer::evictableSize(WebCore::SourceBuffer *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 15) + 48);
}

uint64_t WebCore::SourceBufferList::create@<X0>(WebCore::SourceBufferList *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;

  v5 = bmalloc::api::isoAllocate();
  v6 = (_QWORD *)v5;
  *(_DWORD *)(v5 + 24) = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = &unk_1E33A4FC0;
  v7 = (_QWORD *)(v5 + 32);
  if (this && !*((_BYTE *)this + 274))
  {
    v8 = (char *)this - 192;
    v9 = *((_QWORD *)this + 64);
    if (v9)
    {
      v10 = *(char **)(v9 + 8);
      if (v10)
        v8 = v10;
    }
    this = (WebCore::SourceBufferList *)(v8 + 192);
  }
  *(_QWORD *)(v5 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v5 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v5 + 32), this);
  v6[4] = &off_1E33A0540;
  v6[6] = 0;
  if (!this)
    goto LABEL_10;
  if (!*((_BYTE *)this + 278))
  {
    v13 = v7;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 16, (uint64_t *)&v13, (uint64_t)&v12);
LABEL_10:
    *v6 = off_1E335E340;
    v6[4] = &unk_1E335E3C8;
    v6[7] = 0;
    v6[8] = 0;
    *a2 = v6;
    return (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded(v7);
  }
  result = 422;
  __break(0xC471u);
  return result;
}

void WebCore::SourceBufferList::~SourceBufferList(WebCore::SourceBufferList *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  void *v8;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 7);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::SourceBufferList *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v8);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 7);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::SourceBufferList *)((char *)this + 32), a2);
  WebCore::EventTarget::~EventTarget(this, v8);
  bmalloc::api::isoDeallocate(v9, v10);
}

void `non-virtual thunk to'WebCore::SourceBufferList::~SourceBufferList(WebCore::SourceBufferList *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  void *v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  WebCore::EventTarget::~EventTarget((WebCore::SourceBufferList *)((char *)this - 32), v8);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  WebCore::EventTarget::~EventTarget((WebCore::SourceBufferList *)((char *)this - 32), v8);
  bmalloc::api::isoDeallocate(v9, v10);
}

uint64_t WebCore::SourceBufferList::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  _DWORD *v20;
  _DWORD *v21;

  v3 = result;
  v4 = *(unsigned int *)(result + 68);
  if ((_DWORD)v4 == *(_DWORD *)(result + 64))
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= v4 + 1)
      v7 = v4 + 1;
    else
      v7 = v6;
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = *(void **)(result + 56);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v3 + 64) = v7;
    *(_QWORD *)(v3 + 56) = v9;
    result = (uint64_t)memcpy(v9, v8, 8 * v4);
    if (v8)
    {
      if (*(void **)(v3 + 56) == v8)
      {
        *(_QWORD *)(v3 + 56) = 0;
        *(_DWORD *)(v3 + 64) = 0;
      }
      result = WTF::fastFree((WTF *)v8, v10);
    }
    v4 = *(unsigned int *)(v3 + 68);
    v11 = (_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  }
  else
  {
    v11 = (_QWORD *)(*(_QWORD *)(result + 56) + 8 * v4);
  }
  v12 = *a2;
  *a2 = 0;
  *v11 = v12;
  *(_DWORD *)(v3 + 68) = v4 + 1;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow((WebCore *)result);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD *)(v14 + 40);
  }
  v16 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
  *(_QWORD *)v16 = off_1E33A4B48;
  *(_QWORD *)(v16 + 8) = 0;
  v18 = *(_DWORD *)(v16 + 20) & 0xFFC00000 | 0x1E8200;
  v19 = *(_QWORD *)(v15 + 88) != 0;
  *(_DWORD *)(v16 + 16) = 1;
  *(_DWORD *)(v16 + 20) = v18 | v19;
  v20 = *(_DWORD **)(v15 + 88);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v16 + 24) = v20;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = 0;
  v21 = (_DWORD *)v16;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v3 + 32), v3, 9, (uint64_t *)&v21);
  result = (uint64_t)v21;
  if (v21)
  {
    if (v21[4] == 1)
      return (*(uint64_t (**)(void))(*(_QWORD *)v21 + 8))();
    else
      --v21[4];
  }
  return result;
}

_DWORD *WebCore::SourceBufferList::remove(_DWORD *this, WebCore::SourceBuffer *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::SourceBuffer **v4;
  WebCore::SourceBuffer **v5;
  uint64_t v6;
  WebCore *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  _DWORD *v15;
  _DWORD *v16;

  v2 = this[17];
  if ((_DWORD)v2)
  {
    v3 = (uint64_t)this;
    v4 = (WebCore::SourceBuffer **)*((_QWORD *)this + 7);
    v5 = v4 + 1;
    v6 = this[17];
    while (*v4 != a2)
    {
      ++v4;
      ++v5;
      if (!--v6)
        return this;
    }
    *v4 = 0;
    if (*((_DWORD *)a2 + 6) == 1)
    {
      (*(void (**)(WebCore::SourceBuffer *))(*(_QWORD *)a2 + 16))(a2);
      v2 = *(unsigned int *)(v3 + 68);
    }
    else
    {
      --*((_DWORD *)a2 + 6);
    }
    v7 = (WebCore *)memmove(v4, v4 + 1, *(_QWORD *)(v3 + 56) + 8 * v2 - (_QWORD)v5);
    --*(_DWORD *)(v3 + 68);
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(v7);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    v11 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
    *(_QWORD *)v11 = off_1E33A4B48;
    *(_QWORD *)(v11 + 8) = 0;
    v13 = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200;
    v14 = *(_QWORD *)(v10 + 1664) != 0;
    *(_DWORD *)(v11 + 16) = 1;
    *(_DWORD *)(v11 + 20) = v13 | v14;
    v15 = *(_DWORD **)(v10 + 1664);
    if (v15)
      *v15 += 2;
    *(_QWORD *)(v11 + 24) = v15;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 64) = 0;
    v16 = (_DWORD *)v11;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v3 + 32), v3, 9, (uint64_t *)&v16);
    this = v16;
    if (v16)
    {
      if (v16[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 8))();
      else
        --v16[4];
    }
  }
  return this;
}

WebCore *WebCore::SourceBufferList::swap(WebCore *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WebCore *v25;

  v2 = (uint64_t)result;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = *((unsigned int *)result + 17);
  v5 = *(_QWORD **)a2;
  if ((_DWORD)v3)
  {
    v6 = *((_QWORD *)result + 7);
    if ((_DWORD)v4)
    {
      v7 = 0;
      v8 = *(_QWORD **)a2;
      do
      {
        v9 = 0;
        while (*(_QWORD *)(v6 + v9) != *v8)
        {
          v9 += 8;
          if (8 * v4 == v9)
          {
            ++v7;
            break;
          }
        }
        ++v8;
      }
      while (v8 != &v5[v3]);
    }
    else
    {
      v7 = *(_DWORD *)(a2 + 12);
    }
  }
  else
  {
    v7 = 0;
    v6 = *((_QWORD *)result + 7);
  }
  v10 = v3 - v4;
  *((_QWORD *)result + 7) = v5;
  *(_QWORD *)a2 = v6;
  v11 = *((_DWORD *)result + 16);
  *((_DWORD *)result + 16) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v11;
  v12 = *((_DWORD *)result + 17);
  *((_DWORD *)result + 17) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v12;
  if (v7)
  {
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
      v14 = WebCore::threadGlobalDataSlow(result);
    v15 = *(_QWORD *)(v14 + 40);
    if (!v15)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
      v15 = *(_QWORD *)(v14 + 40);
    }
    v16 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
    *(_DWORD *)(v16 + 16) = 1;
    *(_QWORD *)v16 = off_1E33A4B48;
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 20) = *(_DWORD *)(v16 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v15 + 88) != 0);
    v18 = *(_DWORD **)(v15 + 88);
    if (v18)
      *v18 += 2;
    *(_QWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 56) = v17;
    *(_QWORD *)(v16 + 64) = 0;
    v25 = (WebCore *)v16;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v2 + 32), v2, 9, (uint64_t *)&v25);
    result = v25;
    if (v25)
    {
      if (*((_DWORD *)v25 + 4) == 1)
        result = (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)v25 + 8))();
      else
        --*((_DWORD *)v25 + 4);
    }
  }
  if (v7 != v10)
  {
    v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
      v20 = WebCore::threadGlobalDataSlow(result);
    v21 = *(_QWORD *)(v20 + 40);
    if (!v21)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
      v21 = *(_QWORD *)(v20 + 40);
    }
    v22 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v22);
    *(_DWORD *)(v22 + 16) = 1;
    *(_QWORD *)v22 = off_1E33A4B48;
    *(_QWORD *)(v22 + 8) = 0;
    *(_DWORD *)(v22 + 20) = *(_DWORD *)(v22 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v21 + 1664) != 0);
    v24 = *(_DWORD **)(v21 + 1664);
    if (v24)
      *v24 += 2;
    *(_QWORD *)(v22 + 24) = v24;
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 56) = v23;
    *(_QWORD *)(v22 + 64) = 0;
    v25 = (WebCore *)v22;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v2 + 32), v2, 9, (uint64_t *)&v25);
    result = v25;
    if (v25)
    {
      if (*((_DWORD *)v25 + 4) == 1)
        return (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)v25 + 8))();
      else
        --*((_DWORD *)v25 + 4);
    }
  }
  return result;
}

unsigned __int8 *WebCore::CanvasCaptureMediaStreamTrack::create@<X0>(WebCore::Document *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, WebCore::ContextDestructionObserver **a4@<X8>)
{
  WebCore::ContextDestructionObserver *v7;
  WebCore::ContextDestructionObserver *v8;
  unsigned __int8 *result;
  uint64_t v10;

  WebCore::CanvasCaptureMediaStreamTrack::Source::create(*a2, a3, &v10);
  v7 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v8 = WebCore::CanvasCaptureMediaStreamTrack::CanvasCaptureMediaStreamTrack(v7, a1, a2, &v10);
  *a4 = v8;
  result = (unsigned __int8 *)WebCore::ActiveDOMObject::suspendIfNeeded(v8);
  if (v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CanvasCaptureMediaStreamTrack::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v10 + 336));
  return result;
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::create@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;

  v6 = WTF::fastMalloc((WTF *)0x260);
  v7 = (_BYTE *)WebCore::CanvasCaptureMediaStreamTrack::Source::Source(v6, a1, a2);
  *a3 = v7;
  WebCore::RealtimeMediaSource::start(v7);
  v8 = *(_QWORD *)(v6 + 336);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_5:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E335ED10;
  v11[1] = v6;
  v13 = v11;
  WTF::callOnMainThread();
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

WebCore::ContextDestructionObserver *WebCore::CanvasCaptureMediaStreamTrack::CanvasCaptureMediaStreamTrack(WebCore::ContextDestructionObserver *a1, WebCore::Document *a2, uint64_t *a3, uint64_t *a4)
{
  WebCore::LocalDOMWindow **v7;
  WTF *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  WebCore::MediaStreamTrackPrivate *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  WebCore::MediaStreamTrackPrivate *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v28;
  void *v29;
  uint64_t v30;
  unsigned int *v31;
  WebCore::MediaStreamTrackPrivate *v32;
  WTF::StringImpl *v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = (WebCore::LocalDOMWindow **)((char *)a2 + 192);
  v8 = (WTF *)WebCore::Document::logger(a2);
  v9 = (unsigned int *)((char *)v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v31 = (unsigned int *)v8;
  v11 = *a4;
  v12 = *(_QWORD *)(*a4 + 336);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_7;
  }
  v8 = (WTF *)MEMORY[0x19AEA534C](v12);
LABEL_7:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_11:
    v8 = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v30 = v11;
  v35 = 0;
  WTF::createVersion4UUIDString(v8);
  v15 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v32 = (WebCore::MediaStreamTrackPrivate *)WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v15, (uint64_t *)&v31, &v30, (uint64_t *)&v33, (uint64_t)v34);
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*((WebCore::MediaStreamTrackPrivateSourceObserver **)v32 + 5), v15);
  v17 = v33;
  v33 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  WebCore::MediaStreamTrack::MediaStreamTrack(a1, v7, (uint64_t *)&v32);
  v19 = v32;
  v32 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v19, v18);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*((_DWORD *)v19 + 2);
    }
  }
  v20 = v35;
  if (v35 == v34)
  {
    v21 = 4;
    v20 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_23;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_23:
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 144))(v30);
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  *(_QWORD *)a1 = &off_1E335E420;
  *((_QWORD *)a1 + 4) = &unk_1E335E508;
  *((_QWORD *)a1 + 7) = &unk_1E335E580;
  *((_QWORD *)a1 + 9) = &unk_1E335E5D8;
  *((_QWORD *)a1 + 11) = &unk_1E335E608;
  v26 = *a3;
  *a3 = 0;
  *((_QWORD *)a1 + 154) = v26;
  return a1;
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::Source(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v25;
  v25 = 0;
  v26 = 3;
  if (v6)
    *(_DWORD *)v6 += 2;
  v27 = v6;
  v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v7 += 2;
  v28 = v7;
  v29 = 0;
  v23 = 0;
  v24 = 0;
  WebCore::RealtimeMediaSource::RealtimeMediaSource(a1, (uint64_t)&v25, (uint64_t *)&v23, 0);
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v23;
  v23 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v28;
  v28 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v27;
  v27 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v25;
  v25 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v8);
      if (!v6)
        goto LABEL_23;
      goto LABEL_21;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v6)
    goto LABEL_23;
LABEL_21:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v8);
  else
    *(_DWORD *)v6 -= 2;
LABEL_23:
  *(_QWORD *)(a1 + 304) = off_1E335EA28;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = off_1E335EA68;
  *(_QWORD *)(a1 + 328) = 0;
  v14 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v14 = 0;
  *(_OWORD *)(v14 + 8) = xmmword_19689B170;
  *(_QWORD *)(v14 + 24) = a1;
  *(_QWORD *)(a1 + 336) = v14;
  *(_QWORD *)a1 = off_1E335E648;
  *(_QWORD *)(a1 + 304) = &unk_1E335E818;
  *(_QWORD *)(a1 + 320) = &unk_1E335E858;
  *(_BYTE *)(a1 + 344) = 1;
  *(_OWORD *)(a1 + 352) = *a3;
  *(_QWORD *)(a1 + 368) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  v16 = *(unsigned int **)(StatusReg + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(a1 + 408) = v16;
  *(_QWORD *)(a1 + 368) = off_1E31F7378;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E335ED38;
  v18[1] = WebCore::CanvasCaptureMediaStreamTrack::Source::requestFrameTimerFired;
  v18[2] = 0;
  v18[3] = a1;
  *(_QWORD *)(a1 + 416) = v18;
  *(_QWORD *)(a1 + 424) = off_1E3407128;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  v19 = *(unsigned int **)(StatusReg + 736);
  if (!v19)
    v19 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(a1 + 464) = v19;
  *(_QWORD *)(a1 + 424) = off_1E31F7378;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v21 = off_1E335ED38;
  v21[1] = WebCore::CanvasCaptureMediaStreamTrack::Source::captureCanvas;
  v21[2] = 0;
  v21[3] = a1;
  *(_QWORD *)(a1 + 472) = v21;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = a2;
  *(_QWORD *)(a1 + 600) = 0;
  return a1;
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::requestFrameTimerFired(uint64_t this)
{
  *(_BYTE *)(this + 344) = 1;
  return this;
}

void WebCore::CanvasCaptureMediaStreamTrack::Source::captureCanvas(WebCore::CanvasCaptureMediaStreamTrack::Source *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::MonotonicTime *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE v10[16];
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  WebCore::VideoFrame *v17;

  if (*((_BYTE *)this + 292))
  {
    if (*((_BYTE *)this + 360))
    {
      if (!*((_BYTE *)this + 344))
        return;
      *((_BYTE *)this + 344) = 0;
    }
    v2 = *((_QWORD *)this + 74);
    if (*(_BYTE *)(v2 + 184))
    {
      v3 = *(_QWORD *)(v2 + 248);
      if (v3)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 32))(*(_QWORD *)(v2 + 248)) & 1) != 0
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) != 0)
        {
          if (*(_BYTE *)(v3 + 356))
            return;
          v4 = (WTF::MonotonicTime *)(*(_QWORD *(**)(WebCore::VideoFrame **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v3 + 80) + 2264))(&v17, *(_QWORD *)(v3 + 80), 1);
          goto LABEL_13;
        }
        v2 = *((_QWORD *)this + 74);
      }
      WebCore::HTMLCanvasElement::toVideoFrame((WebCore::HTMLCanvasElement *)v2, (uint64_t *)&v17);
LABEL_13:
      if (v17)
      {
        WTF::MonotonicTime::now(v4);
        v10[0] = 0;
        v10[8] = 0;
        v11 = v5;
        v12 = 1;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        WebCore::RealtimeMediaSource::videoFrameAvailable((uint64_t)this, v17, (uint64_t)v10);
        v6 = (unsigned int *)v17;
        v17 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          }
        }
      }
    }
  }
}

unsigned int *WebCore::CanvasCaptureMediaStreamTrack::Source::startProducingData(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  double v3;
  double v4;
  double v5;
  _BYTE v6[24];

  v1 = *((_QWORD *)this + 74);
  if (v1)
  {
    v2 = this;
    WebCore::CanvasBase::addObserver((WebCore::CanvasBase *)(v1 + 112), (WebCore::CanvasObserver *)(this + 76));
    this = WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*((_QWORD *)v2 + 74) + 208, (_QWORD *)v2 + 40, (uint64_t)v6);
    if (*((_BYTE *)v2 + 360))
    {
      v3 = *((double *)v2 + 44);
      if (v3 != 0.0)
      {
        v4 = 1.0 / v3;
        *((double *)v2 + 49) = 1.0 / v3;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        return (unsigned int *)WebCore::TimerBase::setNextFireTime((uint64_t)(v2 + 92), v4 + v5);
      }
    }
  }
  return this;
}

_QWORD *WebCore::CanvasCaptureMediaStreamTrack::Source::stopProducingData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = this;
  if ((this[50] & 0xFFFFFFFFFFFFLL) != 0)
    this = (_QWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 46));
  v2 = v1[74];
  if (v2)
  {
    WebCore::CanvasBase::removeObserver((WebCore::CanvasBase *)(v2 + 112), (WebCore::CanvasObserver *)(v1 + 38));
    return (_QWORD *)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v1[74] + 208, v1 + 40);
  }
  return this;
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::canvasDestroyed(uint64_t this, WebCore::CanvasBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v2 = this;
  if (*(_BYTE *)(this + 292))
  {
    v3 = *(_QWORD *)(this + 40);
    if (v3)
    {
      v4 = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *))(*(_QWORD *)this + 24))(this, a2);
      v5 = *(_QWORD *)(v2 + 48);
      v6[0] = v4;
      v6[1] = a2;
      v6[2] = "stop";
      v6[3] = v5;
      if (*(_BYTE *)(v3 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    }
    *(_BYTE *)(v2 + 292) = 0;
    this = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *))(*(_QWORD *)v2 + 368))(v2, a2);
  }
  *(_QWORD *)(v2 + 592) = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CanvasCaptureMediaStreamTrack::Source::canvasDestroyed(uint64_t this, WebCore::CanvasBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  v2 = this;
  if (*(_BYTE *)(this - 12))
  {
    v3 = this - 304;
    v4 = *(_QWORD *)(this - 264);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *))(*(_QWORD *)v3 + 24))(this - 304, a2);
      v6 = *(_QWORD *)(v2 - 256);
      v7[0] = v5;
      v7[1] = a2;
      v7[2] = "stop";
      v7[3] = v6;
      if (*(_BYTE *)(v4 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v7);
    }
    *(_BYTE *)(v2 - 12) = 0;
    this = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *))(*(_QWORD *)v3 + 368))(v2 - 304, a2);
  }
  *(_QWORD *)(v2 + 288) = 0;
  return this;
}

char *WebCore::CanvasCaptureMediaStreamTrack::Source::settings(WebCore::CanvasCaptureMediaStreamTrack::Source *this)
{
  char *v1;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  _QWORD v21[3];

  v1 = (char *)this + 480;
  if (*((_BYTE *)this + 584))
    return v1;
  v11 = 0;
  v10 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 4;
  v19 = 0;
  v20 = 0x3FF0000000000000;
  v21[0] = 0x101000000;
  v9 = *(_QWORD *)(*((_QWORD *)this + 74) + 120);
  memset((char *)v21 + 5, 0, 17);
  std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>((uint64_t)this + 480, (uint64_t)&v9);
  if (*((_BYTE *)this + 584))
  {
    v4 = v17;
    v17 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = v16;
    v16 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v15;
    v15 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    return v1;
  }
  v8 = std::__throw_bad_optional_access[abi:sn180100]();
  return (char *)WebCore::CanvasCaptureMediaStreamTrack::Source::settingsDidChange(v8);
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::settingsDidChange(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if ((a2 & 3) != 0)
  {
    v2 = result;
    if (*(_BYTE *)(result + 584))
    {
      v3 = *(WTF::StringImpl **)(result + 536);
      *(_QWORD *)(v2 + 536) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      v4 = *(WTF::StringImpl **)(v2 + 528);
      *(_QWORD *)(v2 + 528) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *(_QWORD *)(v2 + 520);
      *(_QWORD *)(v2 + 520) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      *(_BYTE *)(v2 + 584) = 0;
    }
  }
  return result;
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::canvasResized(uint64_t this, WebCore::CanvasBase *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[4];

  v2 = *(_QWORD *)(this + 592);
  v4 = *(_DWORD *)(v2 + 120);
  v3 = *(_DWORD *)(v2 + 124);
  v11 = __PAIR64__(v3, v4);
  if (v4 != *(_DWORD *)(this + 216) || v3 != *(_DWORD *)(this + 220))
  {
    v6 = this;
    v7 = *(_QWORD *)(this + 40);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *))(*(_QWORD *)this + 24))(this, a2);
      v9 = *(_QWORD *)(v6 + 48);
      v12[0] = v8;
      v12[1] = v10;
      v12[2] = "setSize";
      v12[3] = v9;
      if (*(_BYTE *)(v7 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v12, (WebCore::IntSize *)&v11);
    }
    *(_QWORD *)(v6 + 216) = v11;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v6, 3u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CanvasCaptureMediaStreamTrack::Source::canvasResized(uint64_t this, WebCore::CanvasBase *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[4];

  v2 = *(_QWORD *)(this + 288);
  v4 = *(_DWORD *)(v2 + 120);
  v3 = *(_DWORD *)(v2 + 124);
  v12 = __PAIR64__(v3, v4);
  if (v4 != *(_DWORD *)(this - 88) || v3 != *(_DWORD *)(this - 84))
  {
    v6 = this;
    v7 = this - 304;
    v8 = *(_QWORD *)(this - 264);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *))(*(_QWORD *)v7 + 24))(this - 304, a2);
      v10 = *(_QWORD *)(v6 - 256);
      v13[0] = v9;
      v13[1] = v11;
      v13[2] = "setSize";
      v13[3] = v10;
      if (*(_BYTE *)(v8 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v13, (WebCore::IntSize *)&v12);
    }
    *(_QWORD *)(v6 - 88) = v12;
    return WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v7, 3u);
  }
  return this;
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::canvasChanged(WebCore::CanvasCaptureMediaStreamTrack::Source *this, WebCore::CanvasBase *a2, const WebCore::FloatRect *a3)
{
  uint64_t result;
  double v5;

  result = *(_QWORD *)(*((_QWORD *)this + 74) + 248);
  if (!result
    || (result = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *, const WebCore::FloatRect *))(*(_QWORD *)result + 176))(result, a2, a3), (result & 1) == 0))
  {
    if ((*((_QWORD *)this + 57) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 57) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 56) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      return WebCore::TimerBase::setNextFireTime((uint64_t)this + 424, v5 + 0.0);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::CanvasCaptureMediaStreamTrack::Source::canvasChanged(WebCore::CanvasCaptureMediaStreamTrack::Source *this, WebCore::CanvasBase *a2, const WebCore::FloatRect *a3)
{
  uint64_t result;
  double v5;

  result = *(_QWORD *)(*((_QWORD *)this + 36) + 248);
  if (!result
    || (result = (*(uint64_t (**)(uint64_t, WebCore::CanvasBase *, const WebCore::FloatRect *))(*(_QWORD *)result + 176))(result, a2, a3), (result & 1) == 0))
  {
    if ((*((_QWORD *)this + 19) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 19) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 18) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      return WebCore::TimerBase::setNextFireTime((uint64_t)this + 120, v5 + 0.0);
    }
  }
  return result;
}

double WebCore::CanvasCaptureMediaStreamTrack::Source::canvasDisplayBufferPrepared(WebCore::CanvasCaptureMediaStreamTrack::Source *this, WebCore::CanvasBase *a2)
{
  char *v2;
  double v3;
  double result;

  if ((*((_QWORD *)this + 57) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 57) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v2 = (char *)this + 424;
    *((_QWORD *)this + 56) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v2, v3 + 0.0);
  }
  return result;
}

double `non-virtual thunk to'WebCore::CanvasCaptureMediaStreamTrack::Source::canvasDisplayBufferPrepared(WebCore::CanvasCaptureMediaStreamTrack::Source *this, WebCore::CanvasBase *a2)
{
  char *v2;
  double v3;
  double result;

  if ((*((_QWORD *)this + 17) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 17) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v2 = (char *)this + 104;
    *((_QWORD *)this + 16) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v2, v3 + 0.0);
  }
  return result;
}

_QWORD *WebCore::CanvasCaptureMediaStreamTrack::clone@<X0>(_QWORD *this@<X0>, WebCore::ContextDestructionObserver **a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  WebCore::ContextDestructionObserver *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WebCore::MediaStreamTrackPrivate *v11;
  WTF *v12;
  void *v13;
  WebCore::MediaStreamTrackPrivate *v14;

  v3 = this[1];
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = this;
    v5 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v6 = v4[1];
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = v7 - 96;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    if (*(_BYTE *)(v8 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x19545AD08);
    }
    v9 = v4[154];
    *(_DWORD *)(v9 + 24) += 2;
    WebCore::MediaStreamTrackPrivate::clone((WebCore::MediaStreamTrackPrivate *)v4[12], (uint64_t *)&v14);
    WebCore::MediaStreamTrack::MediaStreamTrack(v5, (WebCore::LocalDOMWindow **)v8, (uint64_t *)&v14);
    *(_QWORD *)v5 = &off_1E335E420;
    *((_QWORD *)v5 + 4) = &unk_1E335E508;
    *((_QWORD *)v5 + 7) = &unk_1E335E580;
    *((_QWORD *)v5 + 9) = &unk_1E335E5D8;
    *((_QWORD *)v5 + 11) = &unk_1E335E608;
    *((_QWORD *)v5 + 154) = v9;
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 2) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v11, v10);
        WTF::fastFree(v12, v13);
      }
      else
      {
        --*((_DWORD *)v11 + 2);
      }
    }
    this = WebCore::ActiveDOMObject::suspendIfNeeded(v5);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return this;
}

uint64_t WebCore::MediaStreamTrack::scriptExecutionContext(WebCore::MediaStreamTrack *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void WebCore::MediaSourceInterfaceMainThread::~MediaSourceInterfaceMainThread(WebCore::MediaSourceInterfaceMainThread *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E335DF30;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E335DF30;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

void WebCore::MediaSourceInterfaceWorker::~MediaSourceInterfaceWorker(WebCore::MediaSourceInterfaceWorker *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::MediaSourceInterfaceWorker::~MediaSourceInterfaceWorker(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E335DFB8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v16 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v16 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::MediaSourceRegistry::~MediaSourceRegistry(WebCore::MediaSourceRegistry *this, WTF::StringImpl *a2)
{
  WebCore::MediaSourceRegistry::~MediaSourceRegistry(this, a2);
}

{
  WebCore::MediaSourceRegistry::~MediaSourceRegistry(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl ***v7;
  _DWORD **v8;
  _DWORD *v9;
  WTF::StringImpl *v10;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v7 = (WTF::StringImpl ***)(v3 + 32);
      do
      {
        if (*(v7 - 2) != (WTF::StringImpl **)-1 && *v7)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v7, a2);
        v7 += 6;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *((unsigned int *)this + 4);
    if ((_DWORD)v6)
    {
      v8 = (_DWORD **)((char *)v5 + 16);
      do
      {
        v9 = *v8;
        *v8 = 0;
        if (v9)
        {
          if (v9[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
          else
            --v9[6];
        }
        v10 = (WTF::StringImpl *)*(v8 - 2);
        *(v8 - 2) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        v8 += 8;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree(v5, a2);
  }
  WebCore::URLRegistry::~URLRegistry(this);
}

uint64_t WebCore::SourceBuffer::isManaged(WebCore::SourceBuffer *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferList::eventTargetInterface(WebCore::SourceBufferList *this)
{
  return 11;
}

uint64_t WebCore::SourceBufferList::scriptExecutionContext(WebCore::SourceBufferList *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::SourceBufferList::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::SourceBufferList::derefEventTarget(WebCore::SourceBufferList *this, void *a2)
{
  return WTF::RefCounted<WebCore::SourceBufferList>::deref((uint64_t)this + 24, a2);
}

uint64_t WebCore::SourceBufferList::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::SourceBufferList::deref(WebCore::SourceBufferList *this, void *a2)
{
  return WTF::RefCounted<WebCore::SourceBufferList>::deref((uint64_t)this + 24, a2);
}

uint64_t `non-virtual thunk to'WebCore::SourceBufferList::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::SourceBufferList::deref(WebCore::SourceBufferList *this, void *a2)
{
  return WTF::RefCounted<WebCore::SourceBufferList>::deref((uint64_t)this - 8, a2);
}

void WebCore::CanvasCaptureMediaStreamTrack::~CanvasCaptureMediaStreamTrack(WebCore::CanvasCaptureMediaStreamTrack *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack(this);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack(this);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::MediaStreamTrack::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::MediaStreamTrack::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::MediaStreamTrack::stop(WebCore::MediaStreamTrack *this)
{
  return WebCore::MediaStreamTrack::stopTrack((uint64_t)this, 0);
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::isCanvas(WebCore::CanvasCaptureMediaStreamTrack *this)
{
  return 1;
}

uint64_t WebCore::MediaStreamTrack::logger(WebCore::MediaStreamTrack *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 12) + 80);
}

uint64_t WebCore::MediaStreamTrack::logIdentifier(WebCore::MediaStreamTrack *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 12) + 88);
}

uint64_t WebCore::MediaStreamTrack::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::MediaStreamTrack::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::MediaStreamTrack::eventTargetInterface(WebCore::MediaStreamTrack *this)
{
  return 14;
}

const char *WebCore::MediaStreamTrack::logClassName(WebCore::MediaStreamTrack *this)
{
  return "MediaStreamTrack";
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrack::eventTargetInterface(WebCore::MediaStreamTrack *this)
{
  return 14;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrack::scriptExecutionContext(WebCore::MediaStreamTrack *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

void `non-virtual thunk to'WebCore::CanvasCaptureMediaStreamTrack::~CanvasCaptureMediaStreamTrack(WebCore::CanvasCaptureMediaStreamTrack *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 32));
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 56));
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 56));
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 72));
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 72));
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 88));
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::CanvasCaptureMediaStreamTrack *)((char *)this - 88));
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrack::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrack::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 16))(this - 32);
  --*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrack::logger(WebCore::MediaStreamTrack *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 80);
}

const char *`non-virtual thunk to'WebCore::MediaStreamTrack::logClassName(WebCore::MediaStreamTrack *this)
{
  return "MediaStreamTrack";
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrack::logIdentifier(WebCore::MediaStreamTrack *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 88);
}

void WebCore::CanvasCaptureMediaStreamTrack::Source::~Source(WebCore::CanvasCaptureMediaStreamTrack::Source *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CanvasCaptureMediaStreamTrack::Source::~Source(this, a2);
  WTF::fastFree(v2, v3);
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = (_DWORD *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  if (*((_BYTE *)this + 584))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 67);
    *((_QWORD *)this + 67) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 65);
    *((_QWORD *)this + 65) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  *((_QWORD *)this + 53) = off_1E31F7378;
  v7 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebCore::CanvasCaptureMediaStreamTrack::Source *)((char *)this + 424));
  *((_QWORD *)this + 46) = off_1E31F7378;
  v8 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebCore::CanvasCaptureMediaStreamTrack::Source *)((char *)this + 368));
  v10 = *((_QWORD *)this + 41);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 41);
    *((_QWORD *)this + 41) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 41) = 0;
  }
  v14 = *((_QWORD *)this + 39);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v9);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 39) = 0;
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, (WTF::StringImpl *)v9);
}

const char *WebCore::RealtimeMediaSource::logClassName(WebCore::RealtimeMediaSource *this)
{
  return "RealtimeMediaSource";
}

__int128 *WebCore::CanvasCaptureMediaStreamTrack::Source::capabilities(WebCore::CanvasCaptureMediaStreamTrack::Source *this)
{
  {
    xmmword_1EE2E0E70 = 0u;
    unk_1EE2E0E80 = 0u;
    xmmword_1EE2E0E50 = 0u;
    unk_1EE2E0E60 = 0u;
    xmmword_1EE2E0E30 = 0u;
    unk_1EE2E0E40 = 0u;
    xmmword_1EE2E0E10 = 0u;
    unk_1EE2E0E20 = 0u;
    xmmword_1EE2E0DF0 = 0u;
    unk_1EE2E0E00 = 0u;
    WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities = 0u;
    unk_1EE2E0DE0 = 0u;
  }
  return &WebCore::RealtimeMediaSourceCapabilities::emptyCapabilities(void)::emptyCapabilities;
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 336);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::CanvasCaptureMediaStreamTrack::Source::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CanvasCaptureMediaStreamTrack::Source,(WTF::DestructionThread)2>(this[42]);
}

uint64_t WebCore::CanvasCaptureMediaStreamTrack::Source::controlBlock(WebCore::CanvasCaptureMediaStreamTrack::Source *this)
{
  return *((_QWORD *)this + 42);
}

void `non-virtual thunk to'WebCore::CanvasCaptureMediaStreamTrack::Source::~Source(WebCore::CanvasCaptureMediaStreamTrack::Source *this, WTF::StringImpl *a2)
{
  WebCore::CanvasCaptureMediaStreamTrack::Source::~Source((WebCore::CanvasCaptureMediaStreamTrack::Source *)((char *)this - 304), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CanvasCaptureMediaStreamTrack::Source::~Source((WebCore::CanvasCaptureMediaStreamTrack::Source *)((char *)this - 304), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::CanvasCaptureMediaStreamTrack::Source::~Source((WebCore::CanvasCaptureMediaStreamTrack::Source *)((char *)this - 320), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CanvasCaptureMediaStreamTrack::Source::~Source((WebCore::CanvasCaptureMediaStreamTrack::Source *)((char *)this - 320), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CanvasObserver::isStyleCanvasImage(WebCore::CanvasObserver *this)
{
  return 0;
}

void WebCore::SourceBufferClientImpl::~SourceBufferClientImpl(WebCore::SourceBufferClientImpl *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

WTF::NativePromiseBase *WebCore::SourceBufferClientImpl::sourceBufferPrivateDidReceiveInitializationSegment@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t *v24;
  void *v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char v45;
  _QWORD *v46;
  char v47;
  _OWORD v48[2];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  LOBYTE(v48[0]) = 2;
  v31 = 0;
  *(_QWORD *)&v32 = 0;
  *((_QWORD *)&v32 + 1) = "sourceBufferPrivateDidReceiveInitializationSegment";
  *(_QWORD *)&v33 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v42, v48, 0, (WTF::Logger::LogSiteIdentifier *)&v31);
  v6 = v42;
  if (v42)
  {
    v7 = (unsigned int *)(v42 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = v42;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v6;
  v42 = 0;
  v32 = v43;
  v33 = v44;
  v34 = v45;
  v35 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v11 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v12 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v13 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v14 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v15 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  v16 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v16 = off_1E335E8D8;
  *(_QWORD *)(v16 + 8) = v9;
  v17 = v32;
  v18 = v33;
  *(_BYTE *)(v16 + 48) = v34;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = v18;
  *(_OWORD *)(v16 + 56) = v35;
  v31 = 0;
  v36 = 0;
  *(_QWORD *)(v16 + 72) = v10;
  v37 = 0;
  *(_QWORD *)(v16 + 80) = v13;
  v38 = 0;
  *(_QWORD *)(v16 + 88) = v11;
  v39 = 0;
  *(_QWORD *)(v16 + 96) = v14;
  v40 = 0;
  *(_QWORD *)(v16 + 104) = v12;
  v41 = 0;
  *(_QWORD *)(v16 + 112) = v15;
  v19 = *(unsigned int **)(a1 + 16);
  if (v19)
  {
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v21 = *(_OWORD *)(a1 + 48);
  v48[0] = *(_OWORD *)(a1 + 32);
  v48[1] = v21;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v22 = &off_1E335E9D8;
  v22[1] = v16;
  v22[2] = v19;
  v46 = v22;
  v47 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_11:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v24 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v48);
  if (v24)
  {
    v26 = v24[4];
    if (v26)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v24[4]) & 1) != 0)
      {
        v27 = 1;
        goto LABEL_17;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v26 + 336))(v26, &v46);
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = 0;
LABEL_17:
  v28 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v27)
    (*(void (**)(_QWORD *, uint64_t))(*v46 + 16))(v46, v26);
  v29 = v46;
  v46 = 0;
  if (v29)
    (*(void (**)(_QWORD *))(*v29 + 8))(v29);
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)&v35, v25);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v31);
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v42);
}

WTF::NativePromiseBase *WebCore::SourceBufferClientImpl::sourceBufferPrivateBufferedChanged@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  unsigned int *v27;
  unsigned int v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  int v35;
  int v36;
  _QWORD *v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  char v52;
  _QWORD *v53;
  char v54;
  _OWORD v55[2];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  LOBYTE(v55[0]) = 2;
  v43 = 0;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = "sourceBufferPrivateBufferedChanged";
  *(_QWORD *)&v45 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v49, v55, 0, (WTF::Logger::LogSiteIdentifier *)&v43);
  v6 = v49;
  if (v49)
  {
    v7 = (unsigned int *)(v49 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = v49;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v6;
  v49 = 0;
  v44 = v50;
  v45 = v51;
  v46 = v52;
  v10 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
    {
LABEL_50:
      __break(0xC471u);
      JUMPOUT(0x19545BB78);
    }
    v11 = WTF::fastMalloc((WTF *)(16 * v10));
    v12 = v11;
    v13 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v13)
    {
      v14 = *a2;
      v15 = v14 + 16 * v13;
      v16 = v11;
      do
      {
        v17 = *(unsigned int *)(v14 + 12);
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 12) = v17;
        if ((_DWORD)v17)
        {
          if (v17 >> 27)
            goto LABEL_50;
          v18 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v17));
          *(_DWORD *)(v16 + 8) = v17;
          *(_QWORD *)v16 = v18;
          v19 = *(unsigned int *)(v14 + 12);
          if ((_DWORD)v19)
          {
            v20 = *(__int128 **)v14;
            v21 = 32 * v19;
            do
            {
              v22 = *v20;
              v23 = v20[1];
              v20 += 2;
              *v18 = v22;
              v18[1] = v23;
              v18 += 2;
              v21 -= 32;
            }
            while (v21);
          }
        }
        v16 += 16;
        v14 += 16;
      }
      while (v14 != v15);
    }
  }
  else
  {
    v12 = 0;
  }
  v24 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v24 = off_1E335E900;
  *(_QWORD *)(v24 + 8) = v9;
  v26 = v44;
  v25 = v45;
  *(_BYTE *)(v24 + 48) = v46;
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 32) = v25;
  v43 = 0;
  *(_QWORD *)(v24 + 56) = v12;
  v47 = 0;
  v48 = 0;
  *(_DWORD *)(v24 + 64) = v10;
  *(_DWORD *)(v24 + 68) = v10;
  v27 = *(unsigned int **)(a1 + 16);
  if (v27)
  {
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  v29 = *(_OWORD *)(a1 + 48);
  v55[0] = *(_OWORD *)(a1 + 32);
  v55[1] = v29;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v30 = &off_1E335E9D8;
  v30[1] = v24;
  v30[2] = v27;
  v53 = v30;
  v54 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_23:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v32 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v55);
  if (v32)
  {
    v34 = v32[4];
    if (v34)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 88))(v32[4]) & 1) != 0)
      {
        v35 = 1;
        goto LABEL_29;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v34 + 336))(v34, &v53);
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = 0;
LABEL_29:
  v36 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v36 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v35)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v35)
LABEL_32:
    (*(void (**)(_QWORD *, uint64_t))(*v53 + 16))(v53, v34);
LABEL_33:
  v37 = v53;
  v53 = 0;
  if (v37)
    (*(void (**)(_QWORD *))(*v37 + 8))(v37);
  v38 = v47;
  if (HIDWORD(v48))
  {
    v39 = 16 * HIDWORD(v48);
    v40 = v47;
    do
    {
      v41 = *(WTF **)v40;
      if (*(_QWORD *)v40)
      {
        *(_QWORD *)v40 = 0;
        *((_DWORD *)v40 + 2) = 0;
        WTF::fastFree(v41, v33);
      }
      v40 = (WTF *)((char *)v40 + 16);
      v39 -= 16;
    }
    while (v39);
  }
  if (v38)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree(v38, v33);
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v43);
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v49);
}

WTF::NativePromiseBase *WebCore::SourceBufferClientImpl::sourceBufferPrivateDurationChanged@<X0>(WebCore::SourceBufferClientImpl *this@<X0>, const WTF::MediaTime *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _QWORD *v33;
  char v34;
  _OWORD v35[2];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  LOBYTE(v35[0]) = 2;
  v24 = 0;
  *(_QWORD *)&v25 = 0;
  *((_QWORD *)&v25 + 1) = "sourceBufferPrivateDurationChanged";
  *(_QWORD *)&v26 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::NativePromiseProducer<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t)&v29, v35, 0, (WTF::Logger::LogSiteIdentifier *)&v24);
  v6 = v29;
  if (v29)
  {
    v7 = (unsigned int *)(v29 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = v29;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v6;
  v29 = 0;
  v25 = v30;
  v26 = v31;
  v27 = v32;
  *(_QWORD *)&v28 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v28 + 5) = *(_QWORD *)((char *)a2 + 5);
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v10 = off_1E335E928;
  *(_QWORD *)(v10 + 8) = v9;
  v24 = 0;
  v11 = v25;
  v12 = v26;
  *(_BYTE *)(v10 + 48) = v27;
  *(_OWORD *)(v10 + 16) = v11;
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 56) = v28;
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = *((_OWORD *)this + 3);
  v35[0] = *((_OWORD *)this + 2);
  v35[1] = v15;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E335E9D8;
  v16[1] = v10;
  v16[2] = v13;
  v33 = v16;
  v34 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_11:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v18 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v35);
  if (v18)
  {
    v19 = v18[4];
    if (v19)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v18[4]) & 1) != 0)
      {
        v20 = 1;
        goto LABEL_17;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v19 + 336))(v19, &v33);
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
LABEL_17:
  v21 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v21 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v20)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v20)
LABEL_20:
    (*(void (**)(_QWORD *, uint64_t))(*v33 + 16))(v33, v19);
LABEL_21:
  v22 = v33;
  v33 = 0;
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v24);
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)&v29);
}

uint64_t WebCore::SourceBufferClientImpl::sourceBufferPrivateHighestPresentationTimestampChanged(WebCore::SourceBufferClientImpl *this, const WTF::MediaTime *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v14 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v14 + 5) = *(_QWORD *)((char *)a2 + 5);
  v3 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v3 = off_1E335E950;
  *(_OWORD *)(v3 + 8) = v14;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *((_OWORD *)this + 3);
  v17[0] = *((_OWORD *)this + 2);
  v17[1] = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E335E9D8;
  v7[1] = v3;
  v7[2] = v4;
  v15 = (uint64_t)v7;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v9)
  {
    v10 = v9[4];
    if (v10)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v9[4]) & 1) != 0)
      {
        v11 = 1;
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 336))(v10, &v15);
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
LABEL_13:
  v12 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v12 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v11)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v11)
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v10);
LABEL_17:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::SourceBufferClientImpl::sourceBufferPrivateDidDropSample(WebCore::SourceBufferClientImpl *this)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E335E978;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *((_OWORD *)this + 3);
  v15[0] = *((_OWORD *)this + 2);
  v15[1] = v5;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E335E9D8;
  v6[1] = v2;
  v6[2] = v3;
  v13 = (uint64_t)v6;
  v14 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v15);
  if (v8)
  {
    v9 = v8[4];
    if (v9)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v8[4]) & 1) != 0)
      {
        v10 = 1;
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 336))(v9, &v13);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_13:
  v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v11 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v10)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v10)
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v9);
LABEL_17:
  result = v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::SourceBufferClientImpl::sourceBufferPrivateDidReceiveRenderingError(WebCore::SourceBufferClientImpl *this, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E335E9A0;
  v4[1] = a2;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *((_OWORD *)this + 3);
  v17[0] = *((_OWORD *)this + 2);
  v17[1] = v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E335E9D8;
  v8[1] = v4;
  v8[2] = v5;
  v15 = (uint64_t)v8;
  v16 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_7:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v17);
  if (v10)
  {
    v11 = v10[4];
    if (v11)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 88))(v10[4]) & 1) != 0)
      {
        v12 = 1;
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 336))(v11, &v15);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_13:
  v13 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v13 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v12)
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v11);
LABEL_17:
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDidReceiveInitializationSegment(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E335E8D8;
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)(a1 + 7), a2);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDidReceiveInitializationSegment(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer>::~CallableWrapper(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E335E8D8;
  WebCore::SourceBufferPrivateClient::InitializationSegment::~InitializationSegment((WebCore::SourceBufferPrivateClient::InitializationSegment *)(a1 + 56), a2);
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::NativePromiseBase *WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDidReceiveInitializationSegment(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer>::call(uint64_t a1, uint64_t a2)
{
  uint64_t TrackById;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::MediaTime *v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  _BYTE *v64;
  WTF::NativePromiseBase *result;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  WTF::StringImpl *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl **v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  WTF::StringImpl *v99;
  __int128 v100;
  uint64_t v101;
  WebCore::InbandTextTrackPrivate **v102;
  uint64_t v103;
  _DWORD *v104;
  int v105;
  uint64_t v106;
  WebCore::TextTrackList *v107;
  uint64_t v108;
  WebCore::InbandTextTrackPrivate *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  WTF::StringImpl *v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unint64_t v124;
  uint64_t v125;
  int *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unint64_t v134;
  uint64_t v135;
  int *v136;
  int v137;
  __int128 v138;
  _BYTE *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  WebCore::ScriptExecutionContext *v144;
  WebCore::AudioTrackPrivate *v145;
  uint64_t v146;
  uint64_t **v147;
  int v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  WTF *v152;
  int isMainThread;
  uint64_t v154;
  _QWORD *v155;
  unsigned int *v156;
  unsigned int v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  WebCore::ScriptExecutionContext *v183;
  WebCore::VideoTrackPrivate *v184;
  uint64_t v185;
  uint64_t **v186;
  int v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  WTF *v191;
  int v192;
  uint64_t v193;
  _QWORD *v194;
  unsigned int *v195;
  unsigned int v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  unsigned int *v200;
  unsigned int v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  uint64_t v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WebCore::ScriptExecutionContext **v219;
  unsigned int *v220;
  uint64_t v221;
  WebCore::InbandTextTrack *v222;
  WTF::StringImpl *v223;
  BOOL v224;
  WebCore::TextTrackList *v225;
  WTF *v226;
  int v227;
  uint64_t v228;
  _QWORD *v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  WebCore::MediaSource *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  _BYTE *v266;
  uint64_t v267;
  uint64_t v268;
  float v269;
  uint64_t v270;
  float v271;
  unint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  WebCore::ScriptExecutionContext **v276;
  __int128 v277;
  char v278[8];
  WTF::StringImpl *v279;
  char v280;
  WTF::StringImpl *v281[2];
  __int128 v282;

  v4 = a1;
  v5 = *(_QWORD *)(a2 + 384);
  v6 = *(_QWORD *)(a2 + 392);
  v281[0] = (WTF::StringImpl *)"SourceBuffer";
  v281[1] = (WTF::StringImpl *)13;
  v7 = "sourceBufferPrivateDidReceiveInitializationSegment";
  *(_QWORD *)&v282 = "sourceBufferPrivateDidReceiveInitializationSegment";
  *((_QWORD *)&v282 + 1) = v6;
  if (*(_BYTE *)(v5 + 12))
    a1 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v281);
  v8 = *(_QWORD *)(a2 + 136);
  if (*(_BYTE *)(v8 + 232)
    || (a1 = *(_QWORD *)(v8 + 88)) == 0
    || (a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1), !(_DWORD)a1))
  {
    a1 = WTF::MediaTime::invalidTime((WTF::MediaTime *)a1);
    v12 = *(_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  v14 = *(_QWORD *)(v8 + 88);
  TrackById = v14 + 64;
  if (__ldaxr((unsigned __int8 *)(v14 + 64)))
  {
    __clrex();
LABEL_51:
    a1 = MEMORY[0x19AEA534C](v14 + 64);
    goto LABEL_52;
  }
  if (__stxr(1u, (unsigned __int8 *)TrackById))
    goto LABEL_51;
LABEL_52:
  v12 = *(_QWORD *)(v14 + 80);
  v34 = __ldxr((unsigned __int8 *)TrackById);
  if (v34 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)TrackById))
      goto LABEL_5;
  }
  else
  {
    __clrex();
  }
  a1 = WTF::Lock::unlockSlow((WTF::Lock *)TrackById);
LABEL_5:
  if ((v12 & 0x100000000) == 0)
  {
    TrackById = *(_QWORD *)(a2 + 136);
    v13 = (const WTF::MediaTime *)((*(_BYTE *)(v4 + 68) & 0x11) == 1
                                 ? v4 + 56
                                 : WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)a1));
    a1 = WebCore::MediaSource::setDurationInternal((WebCore::MediaSource *)TrackById, v13, (uint64_t)v278);
    if (v280)
    {
      a1 = (uint64_t)v279;
      v279 = 0;
      if (a1)
      {
        if (*(_DWORD *)a1 == 2)
          a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, v9);
        else
          *(_DWORD *)a1 -= 2;
      }
    }
  }
  v16 = *(_DWORD *)(v4 + 84);
  if (!v16 && !*(_DWORD *)(v4 + 100) && !*(_DWORD *)(v4 + 116))
    goto LABEL_109;
  if (!*(_BYTE *)(a2 + 321))
  {
LABEL_187:
    v116 = *(_QWORD *)(a2 + 8);
    if (!v116)
      goto LABEL_232;
    v117 = *(_QWORD *)(v116 + 8);
    if (!v117 || *(_BYTE *)(v117 + 178))
      goto LABEL_232;
    v118 = (_DWORD *)(v117 - 264);
    *(_DWORD *)(v117 - 264) += 2;
    v119 = *(_QWORD *)(v117 + 392);
    if (*(_BYTE *)(v119 + 184) && (v120 = *(unsigned int *)(v4 + 84), (_DWORD)v120))
    {
      TrackById = *(_QWORD *)(v4 + 72);
      v121 = TrackById + 16 * v120;
      while (*(_QWORD *)TrackById)
      {
        if (!*(_BYTE *)(v119 + 184))
          goto LABEL_405;
        v122 = *(_QWORD *)(*(_QWORD *)TrackById + 16);
        if (v122)
        {
          v123 = *(unsigned __int8 **)(v122 + 8);
          v124 = *(unsigned int *)(v122 + 4) | ((unint64_t)((*(_DWORD *)(v122 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v123 = 0;
          v124 = 0x100000000;
        }
        a1 = WebCore::FourCC::fromString(v123, v124);
        v125 = *(unsigned int *)(v119 + 180);
        if (!(_DWORD)v125 || (a1 & 0xFF00000000) == 0)
          break;
        v126 = *(int **)(v119 + 168);
        while (1)
        {
          v127 = *v126++;
          if (v127 == (_DWORD)a1)
            break;
          if (!--v125)
            goto LABEL_224;
        }
        TrackById += 16;
        if (TrackById == v121)
        {
          v119 = *(_QWORD *)(v117 + 392);
          goto LABEL_208;
        }
      }
    }
    else
    {
LABEL_208:
      if (!*(_BYTE *)(v119 + 160) || (v128 = *(unsigned int *)(v4 + 100), !(_DWORD)v128))
      {
        v131 = 1;
        goto LABEL_229;
      }
      v129 = *(_QWORD *)(v4 + 88);
      v130 = v129 + 16 * v128;
      v131 = 1;
      while (*(_QWORD *)v129)
      {
        if (!*(_BYTE *)(v119 + 160))
          goto LABEL_405;
        v132 = *(_QWORD *)(*(_QWORD *)v129 + 16);
        if (v132)
        {
          v133 = *(unsigned __int8 **)(v132 + 8);
          v134 = *(unsigned int *)(v132 + 4) | ((unint64_t)((*(_DWORD *)(v132 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v133 = 0;
          v134 = 0x100000000;
        }
        a1 = WebCore::FourCC::fromString(v133, v134);
        v135 = *(unsigned int *)(v119 + 156);
        if (!(_DWORD)v135 || (a1 & 0xFF00000000) == 0)
          break;
        v136 = *(int **)(v119 + 144);
        while (1)
        {
          v137 = *v136++;
          if (v137 == (_DWORD)a1)
            break;
          if (!--v135)
            goto LABEL_224;
        }
        v129 += 16;
        if (v129 == v130)
          goto LABEL_229;
      }
    }
LABEL_224:
    LOBYTE(v277) = 0;
    v281[0] = 0;
    v281[1] = 0;
    v282 = (unint64_t)"sourceBufferPrivateDidReceiveInitializationSegment";
    TrackById = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(TrackById + 8) = 1;
    *(_QWORD *)TrackById = off_1E3207198;
    v138 = v282;
    *(_OWORD *)(TrackById + 16) = *(_OWORD *)v281;
    *(_OWORD *)(TrackById + 32) = v138;
    *(_BYTE *)(TrackById + 48) = 0;
    *(_DWORD *)(TrackById + 64) = 0;
    *(_QWORD *)(TrackById + 72) = TrackById + 88;
    *(_QWORD *)(TrackById + 80) = 1;
    *(_QWORD *)(TrackById + 96) = 0;
    *(_QWORD *)(TrackById + 104) = 0;
    *(_WORD *)(TrackById + 112) = 0;
    v139 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)TrackById);
    if (*v139 && v139[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v139, 4u, "creating ", TrackById);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(TrackById, (char *)&v277, (WTF::Logger::LogSiteIdentifier *)v281);
    v131 = 0;
LABEL_229:
    if (*v118 == 2)
    {
      if ((*(_WORD *)(v117 - 258) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v117 - 288), v9);
    }
    else
    {
      *v118 -= 2;
    }
    if (!v131)
      goto LABEL_113;
LABEL_232:
    v140 = *(unsigned int *)(v4 + 84);
    v273 = v4;
    LOBYTE(v7) = 0;
    if ((_DWORD)v140)
    {
      v141 = *(_QWORD **)(v4 + 72);
      v274 = &v141[2 * v140];
      do
      {
        v142 = *(_QWORD *)(a2 + 8);
        if (v142)
        {
          v143 = *(_QWORD *)(v142 + 8);
          if (v143)
            v144 = (WebCore::ScriptExecutionContext *)(v143 - 96);
          else
            v144 = 0;
        }
        else
        {
          v144 = 0;
        }
        v145 = (WebCore::AudioTrackPrivate *)v141[1];
        v146 = WTF::fastMalloc((WTF *)0xC0);
        v147 = (uint64_t **)((char *)WebCore::AudioTrack::AudioTrack((WebCore::AudioTrack *)v146, v144, v145) + 152);
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v147, (_QWORD *)(a2 + 64), (uint64_t)v281);
        *(_QWORD *)(v146 + 32) = a2;
        v148 = *(_DWORD *)(WebCore::SourceBuffer::audioTracks((WebCore::SourceBuffer *)a2) + 68);
        if (!v148)
        {
          if (!*(_BYTE *)(v146 + 176))
          {
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v146 + 168) + 120))(*(_QWORD *)(v146 + 168), 1);
            v149 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v149 = off_1E33E9F78;
            *((_QWORD *)v149 + 1) = v146;
            v281[0] = v149;
            WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v147, v281);
            v150 = v281[0];
            v281[0] = 0;
            if (v150)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v150 + 8))(v150);
          }
          LOBYTE(v7) = 1;
        }
        v151 = WebCore::SourceBuffer::audioTracks((WebCore::SourceBuffer *)a2);
        ++*(_DWORD *)(v146 + 16);
        v281[0] = (WTF::StringImpl *)v146;
        WebCore::AudioTrackList::append(v151, (uint64_t *)v281);
        v152 = v281[0];
        v281[0] = 0;
        if (v152)
        {
          if (*((_DWORD *)v152 + 4) == 1)
            v152 = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v152 + 16))(v152);
          else
            --*((_DWORD *)v152 + 4);
        }
        isMainThread = WTF::isMainThread(v152);
        v154 = *(_QWORD *)(a2 + 136);
        if (isMainThread)
        {
          v155 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v155 = &off_1E335DBA8;
          v155[1] = v146;
          v156 = *(unsigned int **)(v154 + 96);
          if (v156)
          {
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 + 1, v156));
          }
          v158 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v158 = &off_1E335DB58;
          *((_QWORD *)v158 + 1) = v156;
          *((_QWORD *)v158 + 2) = v155;
          v281[0] = v158;
          WTF::ensureOnMainThread();
          v159 = v281[0];
          v281[0] = 0;
          if (v159)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v159 + 8))(v159);
          v146 = 0;
        }
        else
        {
          v160 = v141[1];
          v161 = (unsigned int *)(v160 + 8);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 + 1, v161));
          v163 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v163 = &off_1E335DC20;
          *(_QWORD *)(v163 + 8) = v160;
          *(_BYTE *)(v163 + 16) = v148 == 0;
          v164 = *(unsigned int **)(v154 + 96);
          if (v164)
          {
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 + 1, v164));
          }
          v166 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v166 = &off_1E335DB58;
          *((_QWORD *)v166 + 1) = v164;
          *((_QWORD *)v166 + 2) = v163;
          v281[0] = v166;
          WTF::ensureOnMainThread();
          v167 = v281[0];
          v281[0] = 0;
          if (v167)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v167 + 8))(v167);
        }
        v168 = *(_QWORD *)(*v141 + 16);
        if (v168 && (*(_BYTE *)(v168 + 16) & 4) == 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v170 = v281[0];
        v171 = *(unsigned int *)(a2 + 228);
        if ((_DWORD)v171 == *(_DWORD *)(a2 + 224))
        {
          v176 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 216, v171 + 1, (unint64_t)v281);
          v171 = *(unsigned int *)(a2 + 228);
          v177 = *(_QWORD *)(a2 + 216);
          v178 = *v176;
          *v176 = 0;
          *(_QWORD *)(v177 + 8 * v171) = v178;
        }
        else
        {
          v172 = *(_QWORD *)(a2 + 216);
          v281[0] = 0;
          *(_QWORD *)(v172 + 8 * v171) = v170;
        }
        *(_DWORD *)(a2 + 228) = v171 + 1;
        v173 = v281[0];
        v281[0] = 0;
        if (v173)
        {
          if (*(_DWORD *)v173 == 2)
            WTF::StringImpl::destroy(v173, v169);
          else
            *(_DWORD *)v173 -= 2;
        }
        v174 = *(_QWORD *)(a2 + 120);
        v175 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v141[1] + 48))(v141[1]);
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v174 + 128))(v174, v175, v141);
        if (v146)
        {
          if (*(_DWORD *)(v146 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v146 + 16))(v146);
          else
            --*(_DWORD *)(v146 + 16);
        }
        v141 += 2;
      }
      while (v141 != v274);
    }
    v179 = *(unsigned int *)(v273 + 100);
    if ((_DWORD)v179)
    {
      v180 = *(_QWORD **)(v273 + 88);
      v275 = &v180[2 * v179];
      do
      {
        v181 = *(_QWORD *)(a2 + 8);
        if (v181)
        {
          v182 = *(_QWORD *)(v181 + 8);
          if (v182)
            v183 = (WebCore::ScriptExecutionContext *)(v182 - 96);
          else
            v183 = 0;
        }
        else
        {
          v183 = 0;
        }
        v184 = (WebCore::VideoTrackPrivate *)v180[1];
        v185 = WTF::fastMalloc((WTF *)0xC0);
        v186 = (uint64_t **)((char *)WebCore::VideoTrack::VideoTrack((WebCore::VideoTrack *)v185, v183, v184) + 152);
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v186, (_QWORD *)(a2 + 80), (uint64_t)v281);
        *(_QWORD *)(v185 + 32) = a2;
        v187 = *(_DWORD *)(WebCore::SourceBuffer::videoTracks((WebCore::SourceBuffer *)a2) + 68);
        if (!v187)
        {
          if (!*(_BYTE *)(v185 + 184))
          {
            *(_BYTE *)(v185 + 184) = 1;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v185 + 168) + 120))(*(_QWORD *)(v185 + 168), 1);
            v188 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v188 = off_1E33ED008;
            *((_QWORD *)v188 + 1) = v185;
            v281[0] = v188;
            WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v186, v281);
            v189 = v281[0];
            v281[0] = 0;
            if (v189)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v189 + 8))(v189);
          }
          LOBYTE(v7) = 1;
        }
        v190 = WebCore::SourceBuffer::videoTracks((WebCore::SourceBuffer *)a2);
        ++*(_DWORD *)(v185 + 16);
        v281[0] = (WTF::StringImpl *)v185;
        WebCore::VideoTrackList::append(v190, (uint64_t *)v281);
        v191 = v281[0];
        v281[0] = 0;
        if (v191)
        {
          if (*((_DWORD *)v191 + 4) == 1)
            v191 = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v191 + 16))(v191);
          else
            --*((_DWORD *)v191 + 4);
        }
        v192 = WTF::isMainThread(v191);
        v193 = *(_QWORD *)(a2 + 136);
        if (v192)
        {
          v194 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v194 = &off_1E335DBF8;
          v194[1] = v185;
          v195 = *(unsigned int **)(v193 + 96);
          if (v195)
          {
            do
              v196 = __ldaxr(v195);
            while (__stlxr(v196 + 1, v195));
          }
          v197 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v197 = &off_1E335DB58;
          *((_QWORD *)v197 + 1) = v195;
          *((_QWORD *)v197 + 2) = v194;
          v281[0] = v197;
          WTF::ensureOnMainThread();
          v198 = v281[0];
          v281[0] = 0;
          if (v198)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v198 + 8))(v198);
          v185 = 0;
        }
        else
        {
          v199 = v180[1];
          v200 = (unsigned int *)(v199 + 8);
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 + 1, v200));
          v202 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v202 = &off_1E335DC70;
          *(_QWORD *)(v202 + 8) = v199;
          *(_BYTE *)(v202 + 16) = v187 == 0;
          v203 = *(unsigned int **)(v193 + 96);
          if (v203)
          {
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 + 1, v203));
          }
          v205 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v205 = &off_1E335DB58;
          *((_QWORD *)v205 + 1) = v203;
          *((_QWORD *)v205 + 2) = v202;
          v281[0] = v205;
          WTF::ensureOnMainThread();
          v206 = v281[0];
          v281[0] = 0;
          if (v206)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v206 + 8))(v206);
        }
        v207 = *(_QWORD *)(*v180 + 16);
        if (v207 && (*(_BYTE *)(v207 + 16) & 4) == 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v209 = v281[0];
        v210 = *(unsigned int *)(a2 + 212);
        if ((_DWORD)v210 == *(_DWORD *)(a2 + 208))
        {
          v215 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 200, v210 + 1, (unint64_t)v281);
          v210 = *(unsigned int *)(a2 + 212);
          v216 = *(_QWORD *)(a2 + 200);
          v217 = *v215;
          *v215 = 0;
          *(_QWORD *)(v216 + 8 * v210) = v217;
        }
        else
        {
          v211 = *(_QWORD *)(a2 + 200);
          v281[0] = 0;
          *(_QWORD *)(v211 + 8 * v210) = v209;
        }
        *(_DWORD *)(a2 + 212) = v210 + 1;
        v212 = v281[0];
        v281[0] = 0;
        if (v212)
        {
          if (*(_DWORD *)v212 == 2)
            WTF::StringImpl::destroy(v212, v208);
          else
            *(_DWORD *)v212 -= 2;
        }
        v213 = *(_QWORD *)(a2 + 120);
        v214 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v180[1] + 48))(v180[1]);
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v213 + 128))(v213, v214, v180);
        if (v185)
        {
          if (*(_DWORD *)(v185 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v185 + 16))(v185);
          else
            --*(_DWORD *)(v185 + 16);
        }
        v180 += 2;
      }
      while (v180 != v275);
    }
    v218 = *(unsigned int *)(v273 + 116);
    if ((_DWORD)v218)
    {
      v219 = *(WebCore::ScriptExecutionContext ***)(v273 + 104);
      v276 = &v219[2 * v218];
      do
      {
        v220 = (unsigned int *)v219[1];
        v221 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
        if (v221)
          v222 = (WebCore::InbandTextTrack *)(v221 - 96);
        else
          v222 = 0;
        WebCore::InbandTextTrack::create(v222, v219[1], (WebCore::InbandTextTrack **)&v277);
        v223 = (WTF::StringImpl *)v277;
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v277 + 200, (_QWORD *)(a2 + 96), (uint64_t)v281);
        v224 = (*(unsigned int (**)(unsigned int *))(*(_QWORD *)v220 + 128))(v220) != 0;
        v225 = (WebCore::TextTrackList *)WebCore::SourceBuffer::textTracks((WebCore::SourceBuffer *)a2);
        ++*((_DWORD *)v223 + 4);
        v281[0] = v223;
        WebCore::TextTrackList::append(v225, v281);
        v226 = v281[0];
        v281[0] = 0;
        if (v226)
        {
          if (*((_DWORD *)v226 + 4) == 1)
            v226 = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v226 + 16))(v226);
          else
            --*((_DWORD *)v226 + 4);
        }
        v227 = WTF::isMainThread(v226);
        v228 = *(_QWORD *)(a2 + 136);
        if (v227)
        {
          *(_QWORD *)&v277 = 0;
          v229 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v229 = &off_1E335DBD0;
          v229[1] = v223;
          v230 = *(unsigned int **)(v228 + 96);
          if (v230)
          {
            do
              v231 = __ldaxr(v230);
            while (__stlxr(v231 + 1, v230));
          }
        }
        else
        {
          v232 = v220 + 2;
          do
            v233 = __ldaxr(v232);
          while (__stlxr(v233 + 1, v232));
          v229 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v229 = &off_1E335DC48;
          v229[1] = v220;
          v230 = *(unsigned int **)(v228 + 96);
          if (v230)
          {
            do
              v234 = __ldaxr(v230);
            while (__stlxr(v234 + 1, v230));
          }
        }
        v235 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v235 = &off_1E335DB58;
        *((_QWORD *)v235 + 1) = v230;
        *((_QWORD *)v235 + 2) = v229;
        v281[0] = v235;
        WTF::ensureOnMainThread();
        v236 = v281[0];
        v281[0] = 0;
        if (v236)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v236 + 8))(v236);
        v237 = *((_QWORD *)*v219 + 2);
        if (v237 && (*(_BYTE *)(v237 + 16) & 4) == 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v239 = v281[0];
        v240 = *(unsigned int *)(a2 + 244);
        if ((_DWORD)v240 == *(_DWORD *)(a2 + 240))
        {
          v245 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 232, v240 + 1, (unint64_t)v281);
          v240 = *(unsigned int *)(a2 + 244);
          v246 = *(_QWORD *)(a2 + 232);
          v247 = *v245;
          *v245 = 0;
          *(_QWORD *)(v246 + 8 * v240) = v247;
        }
        else
        {
          v241 = *(_QWORD *)(a2 + 232);
          v281[0] = 0;
          *(_QWORD *)(v241 + 8 * v240) = v239;
        }
        *(_DWORD *)(a2 + 244) = v240 + 1;
        v242 = v281[0];
        v281[0] = 0;
        if (v242)
        {
          if (*(_DWORD *)v242 == 2)
            WTF::StringImpl::destroy(v242, v238);
          else
            *(_DWORD *)v242 -= 2;
        }
        v243 = *(_QWORD *)(a2 + 120);
        v244 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v220 + 48))(v220);
        (*(void (**)(uint64_t, uint64_t, WebCore::ScriptExecutionContext **))(*(_QWORD *)v243 + 128))(v243, v244, v219);
        if ((_QWORD)v277)
        {
          if (*(_DWORD *)(v277 + 16) == 1)
            (*(void (**)(void))(*(_QWORD *)v277 + 16))();
          else
            --*(_DWORD *)(v277 + 16);
        }
        LOBYTE(v7) = v224 | v7;
        v219 += 2;
      }
      while (v219 != v276);
    }
    if ((v7 & 1) != 0 && !*(_BYTE *)(a2 + 322))
    {
      *(_BYTE *)(a2 + 322) = 1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 120) + 56))(*(_QWORD *)(a2 + 120), 1);
      v248 = *(WebCore::MediaSource **)(a2 + 136);
      if (v248)
        WebCore::MediaSource::regenerateActiveSourceBuffers(v248);
    }
    *(_BYTE *)(a2 + 321) = 1;
    v249 = *(_QWORD *)(a2 + 176);
    if (v249 && *(_DWORD *)(v249 + 68))
    {
      v250 = *(_QWORD *)(a2 + 120);
      if (*(_QWORD *)(a2 + 136) && (v251 = *(_QWORD *)(a2 + 8)) != 0 && *(_QWORD *)(v251 + 8))
      {
        if (*(_BYTE *)(a2 + 376))
        {
          v252 = *(_QWORD *)(a2 + 368);
        }
        else
        {
          v252 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v250 + 312))(*(_QWORD *)(a2 + 120));
          if (!v252)
          {
            v267 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
            v268 = v267 ? v267 - 96 : 0;
            v269 = (float)*(unsigned int *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v268 + 136))(v268, 0)+ 408);
            v252 = (unint64_t)(float)(v269 * 0.05);
            v270 = *(_QWORD *)(a2 + 176);
            if (v270)
            {
              v271 = v269 * 0.95;
              if (*(_DWORD *)(v270 + 68))
                v272 = (unint64_t)v271;
              else
                v272 = 0;
              v252 += v272;
            }
          }
        }
      }
      else
      {
        v252 = 0;
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v250 + 320))(&v277, v250, v252);
      a1 = v277;
      *(_QWORD *)&v277 = 0;
      if (a1)
      {
        v253 = (unsigned int *)(a1 + 8);
        do
        {
          v254 = __ldaxr(v253);
          v255 = v254 - 1;
        }
        while (__stlxr(v255, v253));
        if (!v255)
          goto LABEL_406;
      }
    }
    goto LABEL_377;
  }
  if (v16 != *(_DWORD *)(WebCore::SourceBuffer::audioTracks((WebCore::SourceBuffer *)a2) + 68))
    goto LABEL_109;
  v17 = *(_DWORD *)(v4 + 100);
  if (v17 != *(_DWORD *)(WebCore::SourceBuffer::videoTracks((WebCore::SourceBuffer *)a2) + 68))
    goto LABEL_109;
  v18 = *(_DWORD *)(v4 + 116);
  v19 = (_DWORD *)WebCore::SourceBuffer::textTracks((WebCore::SourceBuffer *)a2);
  if (v18 != v19[31] + v19[27] + v19[17])
    goto LABEL_109;
  v20 = *(unsigned int *)(v4 + 84);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(v4 + 72);
    v22 = v21 + 16 * v20;
    TrackById = a2 + 216;
    while (1)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v21 + 16);
      if (v23 && (*(_BYTE *)(v23 + 16) & 4) == 0)
        WTF::AtomStringImpl::add();
      else
        WTF::AtomStringImpl::add();
      v25 = v281[0];
      v26 = *(unsigned int *)(a2 + 228);
      if ((_DWORD)v26)
      {
        v27 = *(WTF::StringImpl ***)TrackById;
        v28 = *(unsigned int *)(a2 + 228);
        while (*v27 != v281[0])
        {
          ++v27;
          if (!--v28)
            goto LABEL_33;
        }
        v30 = 3;
      }
      else
      {
LABEL_33:
        if (*(_BYTE *)(a2 + 324))
        {
          if ((_DWORD)v26 == *(_DWORD *)(a2 + 224))
          {
            v31 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 216, v26 + 1, (unint64_t)v281);
            v26 = *(unsigned int *)(a2 + 228);
            v32 = *(_QWORD *)(a2 + 216);
            v33 = *v31;
            *v31 = 0;
            *(_QWORD *)(v32 + 8 * v26) = v33;
          }
          else
          {
            v29 = *(WTF::StringImpl ***)TrackById;
            v281[0] = 0;
            v29[v26] = v25;
          }
          v30 = 0;
          *(_DWORD *)(a2 + 228) = v26 + 1;
          v25 = v281[0];
        }
        else
        {
          v30 = 1;
        }
      }
      v281[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      if (v30 != 3 && v30)
        break;
      v21 += 16;
      if (v21 == v22)
        goto LABEL_57;
    }
LABEL_109:
    LOBYTE(v277) = 0;
    v281[0] = 0;
    v281[1] = 0;
    v282 = (unint64_t)"sourceBufferPrivateDidReceiveInitializationSegment";
    TrackById = WTF::fastMalloc((WTF *)0x78);
    *(_DWORD *)(TrackById + 8) = 1;
    *(_QWORD *)TrackById = off_1E3207198;
    v63 = v282;
    *(_OWORD *)(TrackById + 16) = *(_OWORD *)v281;
    *(_OWORD *)(TrackById + 32) = v63;
    *(_BYTE *)(TrackById + 48) = 0;
    *(_DWORD *)(TrackById + 64) = 0;
    *(_QWORD *)(TrackById + 72) = TrackById + 88;
    *(_QWORD *)(TrackById + 80) = 1;
    *(_QWORD *)(TrackById + 96) = 0;
    *(_QWORD *)(TrackById + 104) = 0;
    *(_WORD *)(TrackById + 112) = 0;
    v64 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)TrackById);
    if (*v64 && v64[16] >= 4u)
      WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v64, 4u, "creating ", TrackById);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(TrackById, (char *)&v277, (WTF::Logger::LogSiteIdentifier *)v281);
    goto LABEL_113;
  }
LABEL_57:
  v35 = *(unsigned int *)(v4 + 100);
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD *)(v4 + 88);
    v37 = v36 + 16 * v35;
    TrackById = a2 + 200;
    do
    {
      v38 = *(_QWORD *)(*(_QWORD *)v36 + 16);
      if (v38 && (*(_BYTE *)(v38 + 16) & 4) == 0)
        WTF::AtomStringImpl::add();
      else
        WTF::AtomStringImpl::add();
      v40 = v281[0];
      v41 = *(unsigned int *)(a2 + 212);
      if ((_DWORD)v41)
      {
        v42 = *(WTF::StringImpl ***)TrackById;
        v43 = *(unsigned int *)(a2 + 212);
        while (*v42 != v281[0])
        {
          ++v42;
          if (!--v43)
            goto LABEL_66;
        }
        v45 = 5;
      }
      else
      {
LABEL_66:
        if (*(_BYTE *)(a2 + 324))
        {
          if ((_DWORD)v41 == *(_DWORD *)(a2 + 208))
          {
            v46 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 200, v41 + 1, (unint64_t)v281);
            v41 = *(unsigned int *)(a2 + 212);
            v47 = *(_QWORD *)(a2 + 200);
            v48 = *v46;
            *v46 = 0;
            *(_QWORD *)(v47 + 8 * v41) = v48;
          }
          else
          {
            v44 = *(WTF::StringImpl ***)TrackById;
            v281[0] = 0;
            v44[v41] = v40;
          }
          v45 = 0;
          *(_DWORD *)(a2 + 212) = v41 + 1;
          v40 = v281[0];
        }
        else
        {
          v45 = 1;
        }
      }
      v281[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v39);
        else
          *(_DWORD *)v40 -= 2;
      }
      if (v45 != 5 && v45)
        goto LABEL_109;
      v36 += 16;
    }
    while (v36 != v37);
  }
  v49 = *(unsigned int *)(v4 + 116);
  if ((_DWORD)v49)
  {
    v50 = *(_QWORD *)(v4 + 104);
    v51 = v50 + 16 * v49;
    TrackById = a2 + 232;
    do
    {
      v52 = *(_QWORD *)(*(_QWORD *)v50 + 16);
      if (v52 && (*(_BYTE *)(v52 + 16) & 4) == 0)
        WTF::AtomStringImpl::add();
      else
        WTF::AtomStringImpl::add();
      v54 = v281[0];
      v55 = *(unsigned int *)(a2 + 244);
      if ((_DWORD)v55)
      {
        v56 = *(WTF::StringImpl ***)TrackById;
        v57 = *(unsigned int *)(a2 + 244);
        while (*v56 != v281[0])
        {
          ++v56;
          if (!--v57)
            goto LABEL_92;
        }
        v59 = 7;
      }
      else
      {
LABEL_92:
        if (*(_BYTE *)(a2 + 324))
        {
          if ((_DWORD)v55 == *(_DWORD *)(a2 + 240))
          {
            v60 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 232, v55 + 1, (unint64_t)v281);
            v55 = *(unsigned int *)(a2 + 244);
            v61 = *(_QWORD *)(a2 + 232);
            v62 = *v60;
            *v60 = 0;
            *(_QWORD *)(v61 + 8 * v55) = v62;
          }
          else
          {
            v58 = *(WTF::StringImpl ***)TrackById;
            v281[0] = 0;
            v58[v55] = v54;
          }
          v59 = 0;
          *(_DWORD *)(a2 + 244) = v55 + 1;
          v54 = v281[0];
        }
        else
        {
          v59 = 1;
        }
      }
      v281[0] = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      if (v59 != 7 && v59)
        goto LABEL_109;
      v50 += 16;
    }
    while (v50 != v51);
  }
  v281[0] = 0;
  v281[1] = 0;
  v69 = *(unsigned int *)(v4 + 84);
  if ((_DWORD)v69)
  {
    v70 = *(_QWORD *)(v4 + 72);
    v71 = v70 + 16 * v69;
    while (1)
    {
      v72 = *(_DWORD *)(WebCore::SourceBuffer::audioTracks((WebCore::SourceBuffer *)a2) + 68);
      v73 = WebCore::SourceBuffer::audioTracks((WebCore::SourceBuffer *)a2);
      TrackById = v73;
      if (v72 == 1)
        break;
      v74 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v70 + 8) + 48))(*(_QWORD *)(v70 + 8));
      v75 = *(unsigned int *)(TrackById + 68);
      if ((_DWORD)v75)
      {
        v76 = *(WTF::StringImpl ***)(TrackById + 56);
        v77 = 8 * v75;
        while (1)
        {
          v78 = *v76;
          if (*((_DWORD *)*v76 + 10) != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x19545CD5CLL);
          }
          if (*((_QWORD *)v78 + 7) == v74)
            break;
          ++v76;
          v77 -= 8;
          if (!v77)
            goto LABEL_128;
        }
      }
      else
      {
LABEL_128:
        v78 = 0;
      }
      WebCore::AudioTrack::setPrivate(v78, *(WebCore::AudioTrackPrivate **)(v70 + 8));
      v70 += 16;
      if (v70 == v71)
        goto LABEL_139;
    }
    TrackById = **(_QWORD **)(v73 + 56);
    if (*(_DWORD *)(TrackById + 40) != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x19545DD20);
    }
    ++*(_DWORD *)(TrackById + 16);
    v79 = *(_QWORD *)(TrackById + 56);
    v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v70 + 8) + 48))(*(_QWORD *)(v70 + 8));
    WebCore::AudioTrack::setPrivate((WTF::StringImpl *)TrackById, *(WebCore::AudioTrackPrivate **)(v70 + 8));
    if (v80 != v79)
    {
      *(_QWORD *)&v277 = v79;
      *((_QWORD *)&v277 + 1) = v80;
      v81 = HIDWORD(v281[1]);
      if (HIDWORD(v281[1]) == LODWORD(v281[1]))
      {
        v82 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v281, HIDWORD(v281[1]) + 1, (unint64_t)&v277);
        v81 = HIDWORD(v281[1]);
        v83 = v281[0];
        v84 = *(_OWORD *)v82;
      }
      else
      {
        v83 = v281[0];
        v84 = v277;
      }
      *((_OWORD *)v83 + v81) = v84;
      ++HIDWORD(v281[1]);
    }
    if (*(_DWORD *)(TrackById + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)TrackById + 16))(TrackById);
    else
      --*(_DWORD *)(TrackById + 16);
  }
LABEL_139:
  v85 = *(unsigned int *)(v4 + 100);
  if ((_DWORD)v85)
  {
    v86 = *(_QWORD *)(v4 + 88);
    v87 = v86 + 16 * v85;
    while (1)
    {
      v88 = *(_DWORD *)(WebCore::SourceBuffer::videoTracks((WebCore::SourceBuffer *)a2) + 68);
      v89 = WebCore::SourceBuffer::videoTracks((WebCore::SourceBuffer *)a2);
      TrackById = v89;
      if (v88 == 1)
        break;
      v90 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v86 + 8) + 48))(*(_QWORD *)(v86 + 8));
      v91 = *(unsigned int *)(TrackById + 68);
      if ((_DWORD)v91)
      {
        v92 = *(WTF::StringImpl ***)(TrackById + 56);
        v93 = 8 * v91;
        while (1)
        {
          v94 = *v92;
          if (*((_DWORD *)*v92 + 10) != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x19545CD7CLL);
          }
          if (*((_QWORD *)v94 + 7) == v90)
            break;
          ++v92;
          v93 -= 8;
          if (!v93)
            goto LABEL_147;
        }
      }
      else
      {
LABEL_147:
        v94 = 0;
      }
      WebCore::VideoTrack::setPrivate(v94, *(WebCore::VideoTrackPrivate **)(v86 + 8));
      v86 += 16;
      if (v86 == v87)
        goto LABEL_158;
    }
    TrackById = **(_QWORD **)(v89 + 56);
    if (*(_DWORD *)(TrackById + 40) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19545DD60);
    }
    ++*(_DWORD *)(TrackById + 16);
    v95 = *(_QWORD *)(TrackById + 56);
    v96 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v86 + 8) + 48))(*(_QWORD *)(v86 + 8));
    WebCore::VideoTrack::setPrivate((WTF::StringImpl *)TrackById, *(WebCore::VideoTrackPrivate **)(v86 + 8));
    if (v96 != v95)
    {
      *(_QWORD *)&v277 = v95;
      *((_QWORD *)&v277 + 1) = v96;
      v97 = HIDWORD(v281[1]);
      if (HIDWORD(v281[1]) == LODWORD(v281[1]))
      {
        v98 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v281, HIDWORD(v281[1]) + 1, (unint64_t)&v277);
        v97 = HIDWORD(v281[1]);
        v99 = v281[0];
        v100 = *(_OWORD *)v98;
      }
      else
      {
        v99 = v281[0];
        v100 = v277;
      }
      *((_OWORD *)v99 + v97) = v100;
      ++HIDWORD(v281[1]);
    }
    if (*(_DWORD *)(TrackById + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)TrackById + 16))(TrackById);
    else
      --*(_DWORD *)(TrackById + 16);
  }
LABEL_158:
  v101 = *(unsigned int *)(v4 + 116);
  if (!(_DWORD)v101)
  {
LABEL_181:
    if (HIDWORD(v281[1]))
      (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a2 + 120) + 280))(*(_QWORD *)(a2 + 120), v281);
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 120) + 152))(*(_QWORD *)(a2 + 120));
    a1 = (uint64_t)v281[0];
    if (v281[0])
    {
      v281[0] = 0;
      LODWORD(v281[1]) = 0;
      a1 = WTF::fastFree((WTF *)a1, v9);
    }
    if (*(_BYTE *)(a2 + 321))
    {
      v273 = v4;
      LOBYTE(v7) = 0;
      goto LABEL_377;
    }
    goto LABEL_187;
  }
  v102 = (WebCore::InbandTextTrackPrivate **)(*(_QWORD *)(v4 + 104) + 8);
  v103 = 16 * v101;
  while (1)
  {
    v104 = (_DWORD *)WebCore::SourceBuffer::textTracks((WebCore::SourceBuffer *)a2);
    v105 = v104[31] + v104[27] + v104[17];
    v106 = WebCore::SourceBuffer::textTracks((WebCore::SourceBuffer *)a2);
    v107 = (WebCore::TextTrackList *)v106;
    if (v105 == 1)
    {
      if (*(_DWORD *)(v106 + 124))
      {
        TrackById = **(_QWORD **)(v106 + 112);
        if (*(_DWORD *)(TrackById + 40) != 1)
          goto LABEL_410;
      }
      else if (*(_DWORD *)(v106 + 108))
      {
        TrackById = **(_QWORD **)(v106 + 96);
        if (*(_DWORD *)(TrackById + 40) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19545CD3CLL);
        }
      }
      else
      {
        TrackById = **(_QWORD **)(v106 + 56);
        if (*(_DWORD *)(TrackById + 40) != 1)
        {
LABEL_410:
          __break(0xC471u);
          JUMPOUT(0x19545CD00);
        }
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)TrackById + 184))(TrackById) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19545DD40);
      }
      ++*(_DWORD *)(TrackById + 16);
      v110 = *(_QWORD *)(TrackById + 56);
      v111 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)*v102 + 48))(*v102);
      WebCore::InbandTextTrack::setPrivate(TrackById, *v102);
      if (v111 != v110)
      {
        *(_QWORD *)&v277 = v110;
        *((_QWORD *)&v277 + 1) = v111;
        v112 = HIDWORD(v281[1]);
        if (HIDWORD(v281[1]) == LODWORD(v281[1]))
        {
          v113 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v281, HIDWORD(v281[1]) + 1, (unint64_t)&v277);
          v112 = HIDWORD(v281[1]);
          v114 = v281[0];
          v115 = *(_OWORD *)v113;
        }
        else
        {
          v114 = v281[0];
          v115 = v277;
        }
        *((_OWORD *)v114 + v112) = v115;
        ++HIDWORD(v281[1]);
      }
      if (*(_DWORD *)(TrackById + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)TrackById + 16))(TrackById);
      else
        --*(_DWORD *)(TrackById + 16);
      goto LABEL_181;
    }
    v108 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)*v102 + 48))(*v102);
    TrackById = WebCore::TextTrackList::getTrackById(v107, v108);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)TrackById + 184))(TrackById) & 1) == 0)
      break;
    v109 = *v102;
    v102 += 2;
    WebCore::InbandTextTrack::setPrivate(TrackById, v109);
    v103 -= 16;
    if (!v103)
      goto LABEL_181;
  }
  v9 = (WTF::StringImpl *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/wtf/TypeCasts.h";
  v10 = "match_constness_t<Source, Target> &WTF::downcast(Source &) [Target = WebCore::InbandTextTrack, Source = WebCore::TextTrack]";
  a1 = 96;
  v11 = 1;
  __break(0xC471u);
LABEL_405:
  __break(1u);
LABEL_406:
  atomic_store(1u, (unsigned int *)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl *, const char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v9, v10, v11);
LABEL_377:
  *(_BYTE *)(a2 + 324) = 0;
  v256 = *(_QWORD *)(a2 + 136);
  v257 = *(_QWORD *)(v256 + 88);
  if (v257 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v257 + 80))(v257))
  {
    v258 = *(_QWORD *)(v256 + 104);
    v259 = *(unsigned int *)(v258 + 68);
    if ((_DWORD)v259)
    {
      v260 = *(_QWORD *)(v258 + 56);
      v261 = 8 * v259;
      while (*(_BYTE *)(*(_QWORD *)v260 + 321))
      {
        v260 += 8;
        v261 -= 8;
        if (!v261)
          goto LABEL_383;
      }
    }
    else
    {
LABEL_383:
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v256 + 88) + 88))(*(_QWORD *)(v256 + 88), 1);
    }
  }
  v262 = *(_QWORD *)(a2 + 136);
  v263 = *(_QWORD *)(v262 + 88);
  if (v263 != 0
    && (v7 & 1) != 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v263 + 80))(v263) >= 3)
  {
    v264 = *(_QWORD *)(v262 + 88);
    if (v264)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v264 + 88))(v264, 1);
  }
  v281[0] = 0;
  v281[1] = 0;
  *(_QWORD *)&v282 = "sourceBufferPrivateDidReceiveInitializationSegment";
  *((_QWORD *)&v282 + 1) = 0;
  TrackById = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(TrackById + 8) = 1;
  *(_QWORD *)TrackById = off_1E3207198;
  v265 = v282;
  *(_OWORD *)(TrackById + 16) = *(_OWORD *)v281;
  *(_OWORD *)(TrackById + 32) = v265;
  *(_BYTE *)(TrackById + 48) = 0;
  *(_DWORD *)(TrackById + 64) = 0;
  *(_QWORD *)(TrackById + 72) = TrackById + 88;
  *(_QWORD *)(TrackById + 80) = 1;
  *(_QWORD *)(TrackById + 96) = 0;
  *(_QWORD *)(TrackById + 104) = 0;
  *(_WORD *)(TrackById + 112) = 0;
  v266 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)TrackById);
  v4 = v273;
  if (*v266 && v266[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v266, 4u, "creating ", TrackById);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(TrackById, (WTF::Logger::LogSiteIdentifier *)v281);
LABEL_113:
  v281[0] = 0;
  v281[1] = 0;
  *(_QWORD *)&v282 = "operator()";
  *((_QWORD *)&v282 + 1) = 0;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>((unsigned __int8 *)TrackById, v4 + 8, (WTF::Logger::LogSiteIdentifier *)v281);
  if (TrackById)
  {
    v66 = (unsigned int *)(TrackById + 8);
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)(TrackById + 8));
      return (WTF::NativePromiseBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)TrackById + 16))(TrackById);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateBufferedChanged(WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  *(_QWORD *)a1 = off_1E335E900;
  v3 = *(unsigned int *)(a1 + 68);
  v4 = *(WTF **)(a1 + 56);
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
    v4 = *(WTF **)(a1 + 56);
  }
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return a1;
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)a1 = off_1E335E900;
  v3 = *(unsigned int *)(a1 + 68);
  v4 = *(WTF **)(a1 + 56);
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
    v4 = *(WTF **)(a1 + 56);
  }
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v7);
}

WTF::NativePromiseBase *WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateBufferedChanged(WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::call(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  __int128 v23;
  _BYTE *v24;
  WTF::NativePromiseBase *result;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 120) + 216))(*(_QWORD *)(a2 + 120));
  v6 = *(_QWORD *)(a2 + 168);
  if (v6)
    v4 += *(_QWORD *)(v6 + 48);
  *(_QWORD *)(a2 + 312) = v4;
  v7 = *(_QWORD *)(a2 + 304);
  v8 = v4 - v7;
  if (v4 > v7)
  {
    *(_QWORD *)(a2 + 304) = v4;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    if (v9)
      v10 = v9 - 96;
    else
      v10 = 0;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 344))(v10);
    MEMORY[0x19AEA3294](&v28, v11);
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
    if (v12)
      v13 = v12 - 96;
    else
      v13 = 0;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 344))(v13);
    if (v8 >= 0x101)
      JSC::Heap::deprecatedReportExtraMemorySlowCase((JSC::Heap *)(v14 + 192));
    MEMORY[0x19AEA32A0](&v28);
  }
  v15 = *(unsigned int *)(a2 + 348);
  v16 = *(WTF **)(a2 + 336);
  if ((_DWORD)v15)
  {
    v17 = 16 * v15;
    do
    {
      v18 = *(WTF **)v16;
      if (*(_QWORD *)v16)
      {
        *(_QWORD *)v16 = 0;
        *((_DWORD *)v16 + 2) = 0;
        WTF::fastFree(v18, v5);
      }
      v16 = (WTF *)((char *)v16 + 16);
      v17 -= 16;
    }
    while (v17);
    v16 = *(WTF **)(a2 + 336);
  }
  v19 = a1 + 8;
  if (v16)
  {
    *(_QWORD *)(a2 + 336) = 0;
    *(_DWORD *)(a2 + 344) = 0;
    WTF::fastFree(v16, v5);
  }
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a2 + 336) = v20;
  LODWORD(v20) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a2 + 344) = v20;
  LODWORD(v20) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a2 + 348) = v20;
  WebCore::SourceBuffer::updateBuffered((WebCore::SourceBuffer *)a2);
  v28 = 0uLL;
  *(_QWORD *)&v29 = "sourceBufferPrivateBufferedChanged";
  *((_QWORD *)&v29 + 1) = 0;
  v21 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v21 + 8) = 1;
  v22 = (unsigned int *)(v21 + 8);
  *(_QWORD *)v21 = off_1E3207198;
  v23 = v29;
  *(_OWORD *)(v21 + 16) = v28;
  *(_OWORD *)(v21 + 32) = v23;
  *(_BYTE *)(v21 + 48) = 0;
  *(_DWORD *)(v21 + 64) = 0;
  *(_QWORD *)(v21 + 72) = v21 + 88;
  *(_QWORD *)(v21 + 80) = 1;
  *(_QWORD *)(v21 + 96) = 0;
  *(_QWORD *)(v21 + 104) = 0;
  *(_WORD *)(v21 + 112) = 0;
  v24 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v21);
  if (*v24 && v24[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v24, 4u, "creating ", v21);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v21, (WTF::Logger::LogSiteIdentifier *)&v28);
  v28 = 0uLL;
  *(_QWORD *)&v29 = "operator()";
  *((_QWORD *)&v29 + 1) = 0;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>((unsigned __int8 *)v21, v19, (WTF::Logger::LogSiteIdentifier *)&v28);
  do
  {
    v26 = __ldaxr(v22);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v22));
  if (!v27)
  {
    atomic_store(1u, (unsigned int *)(v21 + 8));
    return (WTF::NativePromiseBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDurationChanged(WTF::MediaTime const&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E335E928;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDurationChanged(WTF::MediaTime const&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E335E928;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::NativePromiseBase *WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDurationChanged(WTF::MediaTime const&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  __int128 v11;
  _BYTE *v12;
  WTF::NativePromiseBase *result;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[8];
  WTF::StringImpl *v19;
  char v20;

  WebCore::MediaSource::setDurationInternal(*(WebCore::MediaSource **)(a2 + 136), (const WTF::MediaTime *)(a1 + 56), (uint64_t)v18);
  if (v20)
  {
    v5 = v19;
    v19 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = a1 + 8;
  v7 = *(_QWORD *)(a2 + 192);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v7 + 128) = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(v7 + 136) = v8;
    *(_BYTE *)(v7 + 140) = BYTE4(v8);
  }
  v16 = 0uLL;
  *(_QWORD *)&v17 = "sourceBufferPrivateDurationChanged";
  *((_QWORD *)&v17 + 1) = 0;
  v9 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v9 + 8) = 1;
  v10 = (unsigned int *)(v9 + 8);
  *(_QWORD *)v9 = off_1E3207198;
  v11 = v17;
  *(_OWORD *)(v9 + 16) = v16;
  *(_OWORD *)(v9 + 32) = v11;
  *(_BYTE *)(v9 + 48) = 0;
  *(_DWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = v9 + 88;
  *(_QWORD *)(v9 + 80) = 1;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_WORD *)(v9 + 112) = 0;
  v12 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v9);
  if (*v12 && v12[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v12, 4u, "creating ", v9);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v9, (WTF::Logger::LogSiteIdentifier *)&v16);
  v16 = 0uLL;
  *(_QWORD *)&v17 = "operator()";
  *((_QWORD *)&v17 + 1) = 0;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>((unsigned __int8 *)v9, v6, (WTF::Logger::LogSiteIdentifier *)&v16);
  do
  {
    v14 = __ldaxr(v10);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v10));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)(v9 + 8));
    return (WTF::NativePromiseBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateHighestPresentationTimestampChanged(WTF::MediaTime const&)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(a2 + 285) = *(_QWORD *)(result + 13);
  *(_QWORD *)(a2 + 280) = v2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDidDropSample(void)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 136);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E335DB80;
  v4 = *(unsigned int **)(v2 + 96);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E335DB58;
  v6[1] = v4;
  v6[2] = v3;
  v8 = v6;
  WTF::ensureOnMainThread();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBufferClientImpl::sourceBufferPrivateDidReceiveRenderingError(long long)::{lambda(WebCore::SourceBuffer &)#1},void,WebCore::SourceBuffer &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF::String *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  _QWORD v39[4];
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  _BYTE v46[12];
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v2 = a2;
  v49 = *MEMORY[0x1E0C80C00];
  v3 = *(WTF::String **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 384);
  v5 = *(_QWORD *)(a2 + 392);
  v39[0] = "SourceBuffer";
  v39[1] = 13;
  v39[2] = "sourceBufferPrivateDidReceiveRenderingError";
  v39[3] = v5;
  if (!*(_BYTE *)(v4 + 12))
    return (uint64_t)WebCore::MediaSource::streamEndedWithError(*(WTF::StringImpl **)(v2 + 136), 0x100000001);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
  result = WTF::String::number(v3);
  if (!v43)
  {
    v7 = 0;
    if (v42)
      goto LABEL_4;
LABEL_73:
    v8 = 0;
    goto LABEL_5;
  }
  v7 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_73;
LABEL_4:
  v8 = *((_DWORD *)v42 + 1);
LABEL_5:
  if ((v8 | v7) < 0 || (result = (v7 + v8), __OFADD__(v7, v8)))
  {
    v44 = 0;
    goto LABEL_77;
  }
  if (v43)
  {
    v9 = *((_DWORD *)v43 + 4);
    v10 = (v9 >> 2) & 1;
    if (v42 && (v9 & 4) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v42)
    {
LABEL_10:
      v10 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_11;
    }
    v10 = 1;
  }
LABEL_11:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v10, (uint64_t)v43, (uint64_t)v42, &v44);
  if (v44)
  {
    v12 = v42;
    v42 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v43;
    v43 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = qword_1ECE7CE80;
    v15 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v15)
    {
      WTF::String::utf8();
      v17 = v40 ? (char *)v40 + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v46 = v17;
      _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v15 = (uint64_t)v40;
      v40 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          v15 = WTF::fastFree((WTF *)v15, v16);
        else
          --*(_DWORD *)v15;
      }
    }
    if (WebCore::LogMediaSource && byte_1ECE7CE70)
    {
      v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v19 = *v18;
        if ((v19 & 1) != 0)
          break;
        v20 = __ldaxr(v18);
        if (v20 == v19)
        {
          if (!__stxr(v19 | 1, v18))
          {
            v38 = v2;
            v21 = WTF::Logger::observers((WTF::Logger *)v15);
            v22 = *(unsigned int *)(v21 + 12);
            if ((_DWORD)v22)
            {
              v23 = *(uint64_t **)v21;
              v24 = *(_QWORD *)v21 + 8 * v22;
              do
              {
                v25 = *v23;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v39);
                v47 = 0;
                WTF::String::number(v3);
                v40 = 0;
                v41 = 0;
                v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                LODWORD(v41) = 2;
                v40 = v26;
                v27 = HIDWORD(v41);
                *((_DWORD *)v26 + 4 * HIDWORD(v41)) = *(_DWORD *)buf;
                v28 = *(_QWORD *)&v46[4];
                if (*(_QWORD *)&v46[4])
                  **(_DWORD **)&v46[4] += 2;
                *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                *((_DWORD *)v26 + 4 * (v27 + 1)) = v47;
                v29 = v48;
                if (v48)
                  *(_DWORD *)v48 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                HIDWORD(v41) = v27 + 2;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogMediaSource, 1, &v40);
                v30 = v40;
                if (HIDWORD(v41))
                {
                  v31 = 16 * HIDWORD(v41);
                  v32 = (WTF::StringImpl **)((char *)v40 + 8);
                  do
                  {
                    v33 = *v32;
                    *v32 = 0;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 2)
                        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
                      else
                        *(_DWORD *)v33 -= 2;
                    }
                    v32 += 2;
                    v31 -= 16;
                  }
                  while (v31);
                  v30 = v40;
                }
                if (v30)
                {
                  v40 = 0;
                  LODWORD(v41) = 0;
                  WTF::fastFree(v30, v16);
                }
                v34 = v48;
                v48 = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                v35 = *(WTF::StringImpl **)&v46[4];
                *(_QWORD *)&v46[4] = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                ++v23;
              }
              while (v23 != (uint64_t *)v24);
            }
            v36 = __ldxr(v18);
            if (v36 == 1)
            {
              v2 = v38;
              if (!__stlxr(0, v18))
                break;
            }
            else
            {
              __clrex();
              v2 = v38;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v37 = v44;
    v44 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v37 -= 2;
    }
    return (uint64_t)WebCore::MediaSource::streamEndedWithError(*(WTF::StringImpl **)(v2 + 136), 0x100000001);
  }
LABEL_77:
  __break(0xC471u);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK7WebCore22SourceBufferClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_12SourceBufferEEEEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E335E9D8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK7WebCore22SourceBufferClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_12SourceBufferEEEEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E335E9D8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK7WebCore22SourceBufferClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_12SourceBufferEEEEbEUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESE_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v3 + 1;
      if (*(_QWORD *)(v2 + 136))
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), v2);
        v3 = *(_DWORD *)(v2 + 24) - 1;
      }
      if (v3)
        *(_DWORD *)(v2 + 24) = v3;
      else
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK7WebCore22SourceBufferClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_12SourceBufferEEEEbEUlRT_E0_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E335EA00;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK7WebCore22SourceBufferClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_12SourceBufferEEEEbEUlRT_E0_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E335EA00;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK7WebCore22SourceBufferClientImpl22ensureWeakOnDispatcherEONS_8FunctionIFvRNS2_12SourceBufferEEEEbEUlRT_E0_vJRNS2_22ScriptExecutionContextEEE4callESE_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 24);
      *(_DWORD *)(v2 + 24) = v3 + 1;
      if (*(_QWORD *)(v2 + 136))
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), v2);
        v3 = *(_DWORD *)(v2 + 24) - 1;
      }
      if (v3)
        *(_DWORD *)(v2 + 24) = v3;
      else
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return result;
}

uint64_t WTF::RefCounted<WebCore::SourceBufferList>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  void *v8;
  bmalloc::api *v9;
  void *v10;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(unsigned int *)(result + 44);
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD ***)(result + 32);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (v6[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
          else
            --v6[6];
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    v7 = *(WTF **)(v2 + 32);
    if (v7)
    {
      *(_QWORD *)(v2 + 32) = 0;
      *(_DWORD *)(v2 + 40) = 0;
      WTF::fastFree(v7, a2);
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v2 + 8), a2);
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)(v2 - 24), v8);
    return bmalloc::api::isoDeallocate(v9, v10);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CanvasCaptureMediaStreamTrack::Source,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E335EA90;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

WebCore::CanvasCaptureMediaStreamTrack::Source *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CanvasCaptureMediaStreamTrack::Source,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::CanvasCaptureMediaStreamTrack::Source *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(WebCore::CanvasCaptureMediaStreamTrack::Source **)(a1 + 16);
  if (result)
  {
    WebCore::CanvasCaptureMediaStreamTrack::Source::~Source(result, a2);
    result = (WebCore::CanvasCaptureMediaStreamTrack::Source *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebCore::CanvasCaptureMediaStreamTrack::Source *)WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::monitorSourceBuffers(void)::$_0,void,WebCore::MediaSource &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::attachToElement(WTF::WeakPtr<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0,void,WebCore::MediaSource &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E335EAE0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::attachToElement(WTF::WeakPtr<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0,void,WebCore::MediaSource &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335EAE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::attachToElement(WTF::WeakPtr<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&)::$_0,void,WebCore::MediaSource &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (!*(_BYTE *)(a2 + 234))
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 8))
      {
        v3 = *(_QWORD *)(result + 8);
        *(_QWORD *)(result + 8) = 0;
        result = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 96) = v3;
        if (result)
        {
          do
          {
            v4 = __ldaxr((unsigned int *)result);
            v5 = v4 - 1;
          }
          while (__stlxr(v5, (unsigned int *)result));
          if (!v5)
          {
            atomic_store(1u, (unsigned int *)result);
            v6 = a2;
            result = WTF::fastFree((WTF *)result, (void *)a2);
            a2 = v6;
          }
        }
        *(_BYTE *)(a2 + 234) = 1;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::detachFromElement(void)::$_0,void,WebCore::MediaSource &>::call(int a1, WebCore::MediaSource *this)
{
  return WebCore::MediaSource::detachFromElement(this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::openIfDeferredOpen(void)::$_0,void,WebCore::MediaSource &>::call(int a1, WebCore::MediaSource *this)
{
  return WebCore::MediaSource::openIfDeferredOpen(this);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::setAsSrcObject(BOOL)::$_0,void,WebCore::MediaSource &>::call(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(a2 + 233) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSourceInterfaceWorker::memoryPressure(void)::$_0,void,WebCore::MediaSource &>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WebCore::SourceBuffer **v6;
  uint64_t v7;
  WebCore::SourceBuffer *v8;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 128))(a2);
  if ((_DWORD)result)
  {
    v4 = a2[13];
    v5 = *(unsigned int *)(v4 + 68);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::SourceBuffer ***)(v4 + 56);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        result = WebCore::SourceBuffer::memoryPressure(v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  WTF::StringImpl **v36;
  _QWORD *v37;
  WTF::StringImpl **v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 48);
    do
    {
      *(v12 - 4) = 0;
      *(v12 - 3) = 0;
      *(v12 - 2) = 0;
      *v12 = 0;
      v12 += 6;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v6 + 48 * v13);
      v16 = v15[2];
      if (v16 != -1)
      {
        v17 = *v15;
        v18 = v15[1];
        if (v16)
          v19 = 0;
        else
          v19 = *(_OWORD *)v15 == 0;
        if (v19)
        {
          v22 = *(WTF::StringImpl ***)(v6 + 48 * v13 + 32);
          if (v22)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v10);
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v23 = 0;
          v24 = (v18 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v18 - 1640531527) << 16) ^ ((unsigned __int16)v18 - 1640531527);
          v25 = (v18 >> 37) & 0x7FFF800 ^ ((v24 + WORD2(v18) + (v24 >> 11)) << 16) ^ (v24 + WORD2(v18) + (v24 >> 11));
          v26 = (v17 >> 5) & 0x7FFF800 ^ ((v25 + (unsigned __int16)v17 + (v25 >> 11)) << 16) ^ (v25 + (unsigned __int16)v17 + (v25 >> 11));
          v27 = (v17 >> 37) & 0x7FFF800 ^ ((v26 + WORD2(v17) + (v26 >> 11)) << 16) ^ (v26 + WORD2(v17) + (v26 >> 11));
          v28 = (v27 + (v27 >> 11)) ^ (8 * (v27 + (v27 >> 11)));
          v29 = (v28 + (v28 >> 5)) ^ (4 * (v28 + (v28 >> 5)));
          v30 = (v29 + (v29 >> 15)) ^ ((v29 + (v29 >> 15)) << 10);
          if (v30)
            v31 = v30;
          else
            v31 = 0x800000;
          do
          {
            v32 = v31 & v21;
            v33 = v20 + 48 * (v31 & v21);
            v31 = ++v23 + (v31 & v21);
          }
          while (*(_OWORD *)v33 != 0 || *(_QWORD *)(v33 + 16) != 0);
          v35 = v20 + 48 * v32;
          v38 = *(WTF::StringImpl ***)(v35 + 32);
          v37 = (_QWORD *)(v35 + 32);
          v36 = v38;
          if (v38)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v10);
          v39 = *((_OWORD *)v15 + 1);
          *(_OWORD *)v33 = *(_OWORD *)v15;
          *(_OWORD *)(v33 + 16) = v39;
          v40 = v6 + 48 * v13;
          *v37 = 0;
          v41 = *(_QWORD *)(v40 + 32);
          *(_QWORD *)(v40 + 32) = 0;
          *v37 = v41;
          v42 = *(WTF::StringImpl ***)(v40 + 32);
          if (v42)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v42, v10);
          if (v15 == a3)
            v14 = v33;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  WTF *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  char *v24;
  _QWORD *v25;
  _OWORD *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  __int128 v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _DWORD *v46;
  __int128 v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  int v54;
  int v55;
  char *v56;
  __int128 v57;
  __int128 v58;

  v51 = *((unsigned int *)a1 + 2);
  v3 = (WTF *)*a1;
  result = WTF::fastMalloc((WTF *)((unint64_t)a2 << 6));
  if (a2)
  {
    v6 = a2;
    v7 = (_QWORD *)(result + 32);
    do
    {
      *(v7 - 4) = 0;
      *(v7 - 2) = 0;
      v7[1] = 0;
      v7[2] = 0;
      *v7 = 0;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  v8 = a1;
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v9 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v11 >> 31) ^ v11;
  *((_BYTE *)a1 + 20) = 0;
  if ((_DWORD)v51)
  {
    v12 = 0;
    v50 = v3;
    do
    {
      v56 = (char *)v3 + 64 * v12;
      v13 = *(WTF::StringImpl **)v56;
      if (*(_QWORD *)v56)
      {
        v14 = *((_DWORD *)v8 + 2);
        v15 = *((_DWORD *)v8 + 4);
        v16 = *((_DWORD *)v13 + 4);
        v54 = v15;
        v55 = v14;
        v52 = v12;
        if (v16 < 0x100)
        {
          v17 = WTF::StringImpl::hashSlowCase(v13);
          v15 = v54;
          v14 = v55;
          v8 = a1;
        }
        else
        {
          v17 = v16 >> 8;
        }
        v18 = v14 - 1;
        v19 = (v17 ^ v15) & (v14 - 1);
        v20 = *v8;
        v21 = (WTF::StringImpl **)(*v8 + (v19 << 6));
        v22 = *v21;
        if (*v21)
        {
          v23 = 0;
          v24 = (char *)v3 + 64 * v52;
          v25 = v24 + 16;
          v26 = v24 + 32;
          do
          {
            v27 = *((_DWORD *)v22 + 4);
            if (v27 < 0x100)
            {
              v28 = WTF::StringImpl::hashSlowCase(v22);
              v15 = v54;
              v14 = v55;
              v8 = a1;
            }
            else
            {
              v28 = v27 >> 8;
            }
            v29 = (v19 + v14 - ((v28 ^ v15) & v18)) & v18;
            if (v23 > v29)
            {
              v30 = *(WTF::StringImpl **)v56;
              *(_QWORD *)v56 = 0;
              v31 = (_DWORD *)*v25;
              *v25 = 0;
              v57 = *v26;
              v58 = v26[1];
              v32 = *v21;
              *v21 = 0;
              v33 = *(WTF::StringImpl **)v56;
              *(_QWORD *)v56 = v32;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                {
                  WTF::StringImpl::destroy(v33, v5);
                  v15 = v54;
                  v14 = v55;
                  v8 = a1;
                }
                else
                {
                  *(_DWORD *)v33 -= 2;
                }
              }
              v34 = v20 + (v19 << 6);
              v36 = *(_QWORD *)(v34 + 16);
              v35 = (_DWORD **)(v34 + 16);
              *(_QWORD *)(v34 + 16) = 0;
              v37 = (_DWORD *)*v25;
              *v25 = v36;
              if (v37)
              {
                if (v37[6] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
                  v15 = v54;
                  v14 = v55;
                  v8 = a1;
                }
                else
                {
                  --v37[6];
                }
              }
              v38 = *(_OWORD *)(v34 + 32);
              *((_QWORD *)v26 + 2) = *(_QWORD *)(v34 + 48);
              *v26 = v38;
              v39 = *v21;
              *v21 = v30;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::destroy(v39, v5);
                  v15 = v54;
                  v14 = v55;
                  v8 = a1;
                }
                else
                {
                  *(_DWORD *)v39 -= 2;
                }
              }
              v40 = *v35;
              *v35 = v31;
              if (v40)
              {
                if (v40[6] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 16))(v40);
                  v15 = v54;
                  v14 = v55;
                  v8 = a1;
                }
                else
                {
                  --v40[6];
                }
              }
              *(_OWORD *)(v34 + 32) = v57;
              *(_QWORD *)(v34 + 48) = v58;
              v23 = v29;
            }
            v19 = ((_DWORD)v19 + 1) & v18;
            ++v23;
            v20 = *v8;
            v21 = (WTF::StringImpl **)(*v8 + (v19 << 6));
            v22 = *v21;
          }
          while (*v21);
        }
        v41 = *(WTF::StringImpl **)v56;
        *(_QWORD *)v56 = 0;
        v42 = *v21;
        *v21 = v41;
        v3 = v50;
        v12 = v52;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::destroy(v42, v5);
            v8 = a1;
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
        v43 = v20 + (v19 << 6);
        v44 = (char *)v50 + 64 * v52;
        v45 = *((_QWORD *)v44 + 2);
        *((_QWORD *)v44 + 2) = 0;
        v46 = *(_DWORD **)(v43 + 16);
        *(_QWORD *)(v43 + 16) = v45;
        if (v46)
        {
          if (v46[6] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
            v8 = a1;
          }
          else
          {
            --v46[6];
          }
        }
        v47 = *((_OWORD *)v44 + 2);
        *(_QWORD *)(v43 + 48) = *((_QWORD *)v44 + 6);
        *(_OWORD *)(v43 + 32) = v47;
      }
      v48 = (_DWORD *)*((_QWORD *)v56 + 2);
      *((_QWORD *)v56 + 2) = 0;
      if (v48)
      {
        if (v48[6] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
          v8 = a1;
        }
        else
        {
          --v48[6];
        }
      }
      v49 = *(WTF::StringImpl **)v56;
      *(_QWORD *)v56 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::destroy(v49, v5);
          v8 = a1;
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
      ++v12;
    }
    while (v12 != v51);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree(v3, v5);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD **v25;
  _DWORD *v26;
  __int128 v27;
  _DWORD *v28;
  WTF::StringImpl *v29;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a2[2];
  a2[2] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5);
    else
      --*((_DWORD *)v5 + 6);
  }
  *a2 = 0;
  a2[2] = 0;
  a2[5] = 0;
  a2[6] = 0;
  a2[4] = 0;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = (unint64_t)a2 - *(_QWORD *)a1;
  v11 = (v10 >> 6) + 1;
  v12 = v11 & (v6 - 1);
  v13 = (uint64_t *)(*(_QWORD *)a1 + (v12 << 6));
  result = *v13;
  if (*v13)
  {
    v15 = *(_DWORD *)(a1 + 16);
    v16 = (v10 >> 6);
    v17 = (WTF::StringImpl **)(v9 + (v16 << 6));
    v18 = v11 & v8;
    do
    {
      v19 = *(_DWORD *)(result + 16);
      if (v19 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v19 >> 8;
      if (((v18 + v6 - ((result ^ v15) & v8)) & v8) == 0)
        break;
      v20 = (WTF::StringImpl *)*v13;
      *v13 = 0;
      v21 = *v17;
      *v17 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v9 + (v16 << 6);
      v23 = v9 + (v12 << 6);
      v25 = (_DWORD **)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(v23 + 16) = 0;
      v26 = *(_DWORD **)(v22 + 16);
      *(_QWORD *)(v22 + 16) = v24;
      if (v26)
      {
        if (v26[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
        else
          --v26[6];
      }
      v27 = *(_OWORD *)(v23 + 32);
      *(_QWORD *)(v22 + 48) = *(_QWORD *)(v23 + 48);
      *(_OWORD *)(v22 + 32) = v27;
      v28 = *v25;
      *v25 = 0;
      if (v28)
      {
        if (v28[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
        else
          --v28[6];
      }
      v29 = (WTF::StringImpl *)*v13;
      *v13 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      *v13 = 0;
      *v25 = 0;
      *(_QWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 32) = 0;
      v12 = (v18 + 1) & v8;
      v9 = *(_QWORD *)a1;
      v16 = v18;
      v17 = (WTF::StringImpl **)(*(_QWORD *)a1 + ((unint64_t)v18 << 6));
      v13 = (uint64_t *)(*(_QWORD *)a1 + (v12 << 6));
      result = *v13;
      v18 = (v18 + 1) & v8;
    }
    while (*v13);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a1, v6 >> 1);
  return result;
}

WTF **WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RefPtr<WebCore::MediaSource,WTF::RawPtrTraits<WebCore::MediaSource>,WTF::DefaultRefDerefTraits<WebCore::MediaSource>>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return (WTF **)(v4 << 6);
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v12 = (v10 ^ v8) & v7;
  v11 = (WTF **)(v3 + (v12 << 6));
  v13 = *v11;
  if (*v11)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > (((_DWORD)v12 + (_DWORD)v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v11, *a2, a3) & 1) != 0)
        return v11;
      v3 = *a1;
      v12 = ((_DWORD)v12 + 1) & v7;
      v11 = (WTF **)(*a1 + (v12 << 6));
      v13 = *v11;
      if (!*v11)
        return (WTF **)(v3 + ((unint64_t)*((unsigned int *)a1 + 2) << 6));
    }
    v3 = *a1;
  }
  return (WTF **)(v3 + ((unint64_t)*((unsigned int *)a1 + 2) << 6));
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v19;
  BOOL v20;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = (a3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a3 - 1640531527) << 16) ^ ((unsigned __int16)a3
                                                                                          - 1640531527);
  v6 = (a3 >> 37) & 0x7FFF800 ^ ((v5 + WORD2(a3) + (v5 >> 11)) << 16) ^ (v5 + WORD2(a3) + (v5 >> 11));
  v7 = (a2 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)a2 + (v6 >> 11)) << 16) ^ (v6
                                                                                               + (unsigned __int16)a2
                                                                                               + (v6 >> 11));
  v8 = (a2 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(a2) + (v7 >> 11)) << 16) ^ (v7 + WORD2(a2) + (v7 >> 11));
  v9 = (v8 + (v8 >> 11)) ^ (8 * (v8 + (v8 >> 11)));
  v10 = (v9 + (v9 >> 5)) ^ (4 * (v9 + (v9 >> 5)));
  v11 = (v10 + (v10 >> 15)) ^ ((v10 + (v10 >> 15)) << 10);
  if (!v11)
    v11 = 0x800000;
  v12 = v4 & v11;
  v13 = (uint64_t *)(a1 + 48 * (v4 & v11));
  v14 = *v13;
  v15 = v13[1];
  v16 = v15 == a3 && v14 == a2;
  v17 = v13[2];
  if (!v16 || v17 != a4)
  {
    v19 = 1;
    while (v14 | v15 || v17)
    {
      v12 = (v12 + v19) & v4;
      v13 = (uint64_t *)(a1 + 48 * v12);
      v14 = *v13;
      v15 = v13[1];
      v20 = v15 == a3 && v14 == a2;
      v17 = v13[2];
      ++v19;
      if (v20 && v17 == a4)
        return v13;
    }
    return 0;
  }
  return v13;
}

uint64_t std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__erase_unique<WTF::MediaTime>(uint64_t **a1, WTF::MediaTime *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  int v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  void *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v2 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (uint64_t *)(a1 + 1);
  do
  {
    v7 = WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 4), a2);
    v8 = (uint64_t **)(v3 + 1);
    if (v7 != -1)
    {
      v8 = (uint64_t **)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v6 + 4)) == -1)
    return 0;
  v9 = (uint64_t *)v6[1];
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  else
  {
    v12 = v6;
    do
    {
      v10 = (uint64_t *)v12[2];
      v13 = *v10 == (_QWORD)v12;
      v12 = v10;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v10;
  v14 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v14, v6);
  v16 = (unsigned int *)v6[6];
  v6[6] = 0;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  WTF::fastFree((WTF *)v6, v15);
  return 1;
}

_QWORD *std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::find<std::pair<WTF::MediaTime,WTF::MediaTime>>(uint64_t a1, WTF::MediaTime *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  WTF::MediaTime *v5;
  _QWORD *v6;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (WTF::MediaTime *)((char *)a2 + 16);
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 4), a2) != -1)
    {
      if (WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v3 + 4)) == -1)
        goto LABEL_7;
      if (WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 6), v5) != -1)
      {
        WTF::MediaTime::compare(v5, (const WTF::MediaTime *)(v3 + 6));
LABEL_7:
        v6 = v3;
        goto LABEL_9;
      }
    }
    ++v3;
LABEL_9:
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  if (v6 != v2 && WTF::MediaTime::compare(a2, (const WTF::MediaTime *)(v6 + 4)) != -1)
  {
    if (WTF::MediaTime::compare((WTF::MediaTime *)(v6 + 4), a2) == -1)
      return v6;
    if (WTF::MediaTime::compare(v5, (const WTF::MediaTime *)(v6 + 6)) != -1)
    {
      WTF::MediaTime::compare((WTF::MediaTime *)(v6 + 6), v5);
      return v6;
    }
  }
  return v2;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBuffer::SourceBuffer(WTF::Ref<WebCore::SourceBufferPrivate,WTF::RawPtrTraits<WebCore::SourceBufferPrivate>,WTF::DefaultRefDerefTraits<WebCore::SourceBufferPrivate>> &&,WebCore::MediaSource &)::$_0,WebCore::WebCoreOpaqueRoot>::call(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_0>(WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_0 &&)::{lambda(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *(WTF **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v11 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS5_ZNS3_12SourceBuffer12rangeRemovalERKNS_9MediaTimeESC_E3__0EEvONS_3RefIT_NS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEENS3_10TaskSourceEOT0_EUlOSF_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESP_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJS12_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E335EC00;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_0>(WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_0 &&)::{lambda(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS5_ZNS3_12SourceBuffer12rangeRemovalERKNS_9MediaTimeESC_E3__0EEvONS_3RefIT_NS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEENS3_10TaskSourceEOT0_EUlOSF_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESP_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJS12_EED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E335EC00;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_0>(WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_0 &&)::{lambda(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS5_ZNS3_12SourceBuffer12rangeRemovalERKNS_9MediaTimeESC_E3__0EEvONS_3RefIT_NS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEENS3_10TaskSourceEOT0_EUlOSF_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESP_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJS12_EE4callES12_(uint64_t a1, __int16 *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  void *v17;
  int v18;
  __int128 v19;
  unsigned int *v20;

  v4 = *(_QWORD *)(a1 + 40);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = v10 - 96;
      v12 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v10 - 96);
      v14 = *(_BYTE *)(a1 + 16);
      v19 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      v15 = *a2;
      v16 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v16 = &off_1E335EC28;
      *(_OWORD *)(v16 + 8) = v19;
      *(_WORD *)(v16 + 24) = v15;
      v20 = (unsigned int *)v16;
      WebCore::EventLoopTaskGroup::queueTask(v13, v14, (uint64_t *)&v20);
      result = v20;
      v20 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v18 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v18 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v18 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v17);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIvNS2_18PlatformMediaErrorELj0EEEZNS2_12SourceBuffer12rangeRemovalERKNS_9MediaTimeESB_E3__0EEvONS_3RefIT_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENS2_10TaskSourceEOT0_ENUlOSE_E_clINSt12experimental15fundamentals_v38expectedIvS6_EEEEDaSO_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E335EC28;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIvNS2_18PlatformMediaErrorELj0EEEZNS2_12SourceBuffer12rangeRemovalERKNS_9MediaTimeESB_E3__0EEvONS_3RefIT_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENS2_10TaskSourceEOT0_ENUlOSE_E_clINSt12experimental15fundamentals_v38expectedIvS6_EEEEDaSO_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335EC28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIvNS2_18PlatformMediaErrorELj0EEEZNS2_12SourceBuffer12rangeRemovalERKNS_9MediaTimeESB_E3__0EEvONS_3RefIT_NS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEENS2_10TaskSourceEOT0_ENUlOSE_E_clINSt12experimental15fundamentals_v38expectedIvS6_EEEEDaSO_EUlvE_vJEE4callEv(WebCore *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WebCore *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WebCore *v17;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *((_QWORD *)result + 2);
      if (*(_QWORD *)(v2 + 136))
      {
        *(_BYTE *)(v2 + 360) = 0;
        *(_BYTE *)(v2 + 320) = 0;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v4 = *(_QWORD *)(StatusReg + 736);
        if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
          v5 = WebCore::threadGlobalDataSlow(result);
        v6 = *(_QWORD *)(v5 + 40);
        if (!v6)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
          v6 = *(_QWORD *)(v5 + 40);
        }
        v7 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
        *(_DWORD *)(v7 + 16) = 1;
        *(_QWORD *)v7 = off_1E33A4B48;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 20) = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v6 + 2184) != 0);
        v9 = *(_DWORD **)(v6 + 2184);
        if (v9)
          *v9 += 2;
        *(_QWORD *)(v7 + 24) = v9;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = v8;
        *(_QWORD *)(v7 + 64) = 0;
        v17 = (WebCore *)v7;
        WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&v17);
        v10 = v17;
        if (v17)
        {
          if (*((_DWORD *)v17 + 4) == 1)
            v10 = (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)v17 + 8))();
          else
            --*((_DWORD *)v17 + 4);
        }
        v11 = *(_QWORD *)(StatusReg + 736);
        if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
          v12 = WebCore::threadGlobalDataSlow(v10);
        v13 = *(_QWORD *)(v12 + 40);
        if (!v13)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
          v13 = *(_QWORD *)(v12 + 40);
        }
        v14 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
        *(_DWORD *)(v14 + 16) = 1;
        *(_QWORD *)v14 = off_1E33A4B48;
        *(_QWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 20) = *(_DWORD *)(v14 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v13 + 2192) != 0);
        v16 = *(_DWORD **)(v13 + 2192);
        if (v16)
          *v16 += 2;
        *(_QWORD *)(v14 + 24) = v16;
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 40) = 0;
        *(_QWORD *)(v14 + 48) = 0;
        *(_QWORD *)(v14 + 56) = v15;
        *(_QWORD *)(v14 + 64) = 0;
        v17 = (WebCore *)v14;
        WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&v17);
        if (v17)
        {
          if (*((_DWORD *)v17 + 4) == 1)
            (*(void (**)(void))(*(_QWORD *)v17 + 8))();
          else
            --*((_DWORD *)v17 + 4);
        }
        return (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 72))(*(_QWORD *)(v2 + 136));
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_1,void,WebCore::SourceBuffer&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E335EC50;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_1,void,WebCore::SourceBuffer&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E335EC50;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::SourceBuffer::rangeRemoval(WTF::MediaTime const&,WTF::MediaTime const&)::$_1,void,WebCore::SourceBuffer&>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::MediaTime *v11;
  uint64_t *v12;
  unsigned int *result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::MediaTime *v17[4];
  _QWORD v18[2];
  unsigned __int8 *v19;

  v1 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v2 + 120);
  v4 = a1 + 64;
  v5 = a1 + 80;
  v6 = *(_QWORD *)(v2 + 136);
  if (*(_BYTE *)(v6 + 168))
  {
    v7 = *(_QWORD *)(v6 + 120);
    v8 = *(_QWORD *)(v6 + 128);
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v6 + 88);
  if (!v9)
  {
    v12 = (uint64_t *)WTF::MediaTime::zeroTime(0);
LABEL_9:
    v7 = *v12;
    v8 = v12[1];
    goto LABEL_10;
  }
  (*(void (**)(WTF::MediaTime **__return_ptr))(*(_QWORD *)v9 + 16))(v17);
  if (!v17[0])
  {
    v12 = (uint64_t *)WTF::MediaTime::invalidTime(0);
    goto LABEL_9;
  }
  v7 = (*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)v17[0] + 344))(v17[0]);
  v8 = v10;
  v11 = v17[0];
  v17[0] = 0;
  if (v11)
    (*(void (**)(WTF::MediaTime *))(*(_QWORD *)v11 + 24))(v11);
LABEL_10:
  v18[0] = v7;
  v18[1] = v8;
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v3 + 184))(&v19, v3, v4, v5, v18);
  v17[0] = 0;
  v17[1] = 0;
  v17[2] = (WTF::MediaTime *)"operator()";
  v17[3] = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(v19, v1, (WTF::Logger::LogSiteIdentifier *)v17);
  result = (unsigned int *)v19;
  v19 = 0;
  if (result)
  {
    v14 = result + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::SeekTarget *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t buf[4];
  _BYTE v45[12];
  int v46;
  WTF::StringImpl *v47[3];

  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WebCore::SeekTarget::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v43 = 0;
    goto LABEL_76;
  }
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &v43);
  if (!v43)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v45 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v46 = 0;
              WebCore::SeekTarget::toString(a4, v47);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v45[4];
              if (*(_QWORD *)&v45[4])
                **(_DWORD **)&v45[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
              v30 = v47[0];
              if (v47[0])
                *(_DWORD *)v47[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v47[0];
              v47[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v45[4];
              *(_QWORD *)&v45[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_0>(WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_0 &&)::{lambda(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *(WTF **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v8 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    WTF::fastFree(v3, a2);
  }
  v11 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS5_ZNS3_12SourceBuffer20appendBufferInternalENSt3__14spanIKhLm18446744073709551615EEEE3__0EEvONS_3RefIT_NS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS3_10TaskSourceEOT0_EUlOSG_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESQ_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJS13_EED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E335EC78;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_0>(WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_0 &&)::{lambda(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS5_ZNS3_12SourceBuffer20appendBufferInternalENSt3__14spanIKhLm18446744073709551615EEEE3__0EEvONS_3RefIT_NS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS3_10TaskSourceEOT0_EUlOSG_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESQ_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJS13_EED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E335EC78;
  WebCore::ScriptExecutionContext::enqueueTaskWhenSettled<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_0>(WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>> &&,WebCore::TaskSource,WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_0 &&)::{lambda(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&&)#1}::~TaskSource((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22ScriptExecutionContext22enqueueTaskWhenSettledIS5_ZNS3_12SourceBuffer20appendBufferInternalENSt3__14spanIKhLm18446744073709551615EEEE3__0EEvONS_3RefIT_NS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS3_10TaskSourceEOT0_EUlOSG_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESQ_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJS13_EE4callES13_(uint64_t a1, __int16 *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;

  v4 = *(_QWORD *)(a1 + 48);
  result = *(unsigned int **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = v10 - 96;
      v12 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v12 == 1 || v12 == 2)
          ++*(_DWORD *)(v10 + 216);
      }
      else
      {
        *(_DWORD *)(v10 - 264) += 2;
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v10 - 96);
      v14 = *(_BYTE *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      v15 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = 0;
      v21 = v15;
      v22 = *(_DWORD *)(a1 + 40);
      v17 = *a2;
      v18 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v18 = &off_1E335ECA0;
      *(_QWORD *)(v18 + 8) = v16;
      *(_QWORD *)(v18 + 16) = v21;
      *(_DWORD *)(v18 + 24) = v22;
      *(_WORD *)(v18 + 32) = v17;
      v23 = (unsigned int *)v18;
      WebCore::EventLoopTaskGroup::queueTask(v13, v14, (uint64_t *)&v23);
      result = v23;
      v23 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v20 = *(unsigned __int8 *)(v10 + 178);
      if (*(_BYTE *)(v10 + 178))
      {
        if (v20 == 1)
        {
          if (*(_DWORD *)(v10 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v10 - 96);
          else
            --*(_DWORD *)(v10 + 216);
        }
        else if (v20 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v10 + 216));
        }
      }
      else if (*(_DWORD *)(v10 - 264) == 2)
      {
        if ((*(_WORD *)(v10 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v10 - 288), v19);
      }
      else
      {
        *(_DWORD *)(v10 - 264) -= 2;
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIvNS2_18PlatformMediaErrorELj0EEEZNS2_12SourceBuffer20appendBufferInternalENSt3__14spanIKhLm18446744073709551615EEEE3__0EEvONS_3RefIT_NS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEENS2_10TaskSourceEOT0_ENUlOSF_E_clINSt12experimental15fundamentals_v38expectedIvS6_EEEEDaSP_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E335ECA0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIvNS2_18PlatformMediaErrorELj0EEEZNS2_12SourceBuffer20appendBufferInternalENSt3__14spanIKhLm18446744073709551615EEEE3__0EEvONS_3RefIT_NS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEENS2_10TaskSourceEOT0_ENUlOSF_E_clINSt12experimental15fundamentals_v38expectedIvS6_EEEEDaSP_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335ECA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22ScriptExecutionContext22enqueueTaskWhenSettledINS_13NativePromiseIvNS2_18PlatformMediaErrorELj0EEEZNS2_12SourceBuffer20appendBufferInternalENSt3__14spanIKhLm18446744073709551615EEEE3__0EEvONS_3RefIT_NS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEENS2_10TaskSourceEOT0_ENUlOSF_E_clINSt12experimental15fundamentals_v38expectedIvS6_EEEEDaSP_EUlvE_vJEE4callEv(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore *v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WebCore *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  WebCore *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::String *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  char *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  WTF::Logger *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::Logger *v71;
  WTF::String *v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  uint64_t v82;
  WebCore::PlatformTimeRanges *v83;
  _QWORD v84[4];
  WTF::Logger *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int128 buf;
  const char *v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  if (!*(_QWORD *)(v1 + 8))
    return result;
  v2 = *((_QWORD *)result + 2);
  if (*((_DWORD *)result + 6) != *(_DWORD *)(v2 + 356))
    return result;
  v3 = *((unsigned __int8 *)result + 33);
  *(_BYTE *)(v2 + 352) = 0;
  if (!*(_QWORD *)(v2 + 136))
    return result;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 384);
    v5 = *(WTF::StringImpl **)(v2 + 392);
    *(_QWORD *)&buf = "SourceBuffer";
    *((_QWORD *)&buf + 1) = 13;
    v97 = "sourceBufferPrivateAppendComplete";
    v98 = v5;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "ParsingFailed");
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 120) + 136))(*(_QWORD *)(v2 + 120));
    *(_DWORD *)(v2 + 296) = 0;
    v6 = (WebCore *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 120) + 80))(*(_QWORD *)(v2 + 120));
    *(_BYTE *)(v2 + 320) = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = *(_QWORD *)(StatusReg + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(v6);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    v11 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
    *(_DWORD *)(v11 + 16) = 1;
    *(_QWORD *)v11 = off_1E33A4B48;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v10 + 784) != 0);
    v13 = *(_DWORD **)(v10 + 784);
    if (v13)
      *v13 += 2;
    *(_QWORD *)(v11 + 24) = v13;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)&buf = v11;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&buf);
    v14 = (WebCore *)buf;
    if ((_QWORD)buf)
    {
      if (*(_DWORD *)(buf + 16) == 1)
        v14 = (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)buf + 8))();
      else
        --*(_DWORD *)(buf + 16);
    }
    v15 = *(_QWORD *)(StatusReg + 736);
    if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
      v16 = WebCore::threadGlobalDataSlow(v14);
    v17 = *(_QWORD *)(v16 + 40);
    if (!v17)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
      v17 = *(_QWORD *)(v16 + 40);
    }
    v18 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
    *(_DWORD *)(v18 + 16) = 1;
    *(_QWORD *)v18 = off_1E33A4B48;
    *(_QWORD *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v17 + 2192) != 0);
    v20 = *(_DWORD **)(v17 + 2192);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v18 + 24) = v20;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 56) = v19;
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)&buf = v18;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&buf);
    if ((_QWORD)buf)
    {
      if (*(_DWORD *)(buf + 16) == 1)
        (*(void (**)(void))(*(_QWORD *)buf + 8))();
      else
        --*(_DWORD *)(buf + 16);
    }
    result = *(WTF::StringImpl **)(v2 + 136);
    if (result)
      return WebCore::MediaSource::streamEndedWithError(result, 0x100000001);
    return result;
  }
  *(_BYTE *)(v2 + 320) = 0;
  v21 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = *(_QWORD *)(v21 + 736);
  if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
    v23 = WebCore::threadGlobalDataSlow(result);
  v24 = *(_QWORD *)(v23 + 40);
  if (!v24)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v23);
    v24 = *(_QWORD *)(v23 + 40);
  }
  v25 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v25);
  *(_DWORD *)(v25 + 16) = 1;
  *(_QWORD *)v25 = off_1E33A4B48;
  *(_QWORD *)(v25 + 8) = 0;
  *(_DWORD *)(v25 + 20) = *(_DWORD *)(v25 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v24 + 2184) != 0);
  v27 = *(_DWORD **)(v24 + 2184);
  if (v27)
    *v27 += 2;
  *(_QWORD *)(v25 + 24) = v27;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = v26;
  *(_QWORD *)(v25 + 64) = 0;
  *(_QWORD *)&buf = v25;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&buf);
  v28 = (WebCore *)buf;
  if ((_QWORD)buf)
  {
    if (*(_DWORD *)(buf + 16) == 1)
      v28 = (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)buf + 8))();
    else
      --*(_DWORD *)(buf + 16);
  }
  v29 = *(_QWORD *)(v21 + 736);
  if (!v29 || (v30 = *(_QWORD *)(v29 + 96)) == 0)
    v30 = WebCore::threadGlobalDataSlow(v28);
  v31 = *(_QWORD *)(v30 + 40);
  if (!v31)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v30);
    v31 = *(_QWORD *)(v30 + 40);
  }
  v32 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v32);
  *(_DWORD *)(v32 + 16) = 1;
  *(_QWORD *)v32 = off_1E33A4B48;
  *(_QWORD *)(v32 + 8) = 0;
  *(_DWORD *)(v32 + 20) = *(_DWORD *)(v32 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v31 + 2192) != 0);
  v34 = *(_DWORD **)(v31 + 2192);
  if (v34)
    *v34 += 2;
  *(_QWORD *)(v32 + 24) = v34;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)(v32 + 48) = 0;
  *(_QWORD *)(v32 + 56) = v33;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)&buf = v32;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v2, v2 + 40, 9, (uint64_t *)&buf);
  if ((_QWORD)buf)
  {
    if (*(_DWORD *)(buf + 16) == 1)
      (*(void (**)(void))(*(_QWORD *)buf + 8))();
    else
      --*(_DWORD *)(buf + 16);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 136) + 72))(*(_QWORD *)(v2 + 136));
  v35 = *(_QWORD *)(v2 + 120);
  v36 = *(_QWORD *)(v2 + 136);
  if (*(_BYTE *)(v36 + 168))
  {
    v37 = *(_QWORD *)(v36 + 120);
    v38 = *(_QWORD *)(v36 + 128);
    goto LABEL_61;
  }
  v39 = *(_QWORD *)(v36 + 88);
  if (!v39)
  {
    v42 = (uint64_t *)WTF::MediaTime::zeroTime(0);
LABEL_60:
    v37 = *v42;
    v38 = v42[1];
    goto LABEL_61;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v39 + 16))(&buf);
  if (!(_QWORD)buf)
  {
    v42 = (uint64_t *)WTF::MediaTime::invalidTime(0);
    goto LABEL_60;
  }
  v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)buf + 344))(buf);
  v38 = v40;
  v41 = buf;
  *(_QWORD *)&buf = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
LABEL_61:
  *(_QWORD *)&buf = v37;
  *((_QWORD *)&buf + 1) = v38;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v35 + 120))(v35, &buf);
  v44 = *(_QWORD *)(v2 + 384);
  v43 = *(_QWORD *)(v2 + 392);
  v84[0] = "SourceBuffer";
  v84[1] = 13;
  v84[2] = "sourceBufferPrivateAppendComplete";
  v84[3] = v43;
  v45 = *(_QWORD *)(v2 + 328);
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 120) + 216))(*(_QWORD *)(v2 + 120));
  if (*(_BYTE *)(v44 + 12))
  {
    v46 = result;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v84);
    WTF::String::String((WTF::String *)&v90, "buffered = ");
    v83 = (WebCore::PlatformTimeRanges *)(v45 + 8);
    WebCore::PlatformTimeRanges::toString((WebCore::PlatformTimeRanges *)(v45 + 8), &v89);
    WTF::String::String((WTF::String *)&v88, ", totalBufferSize: ");
    WTF::String::number(v46);
    v85 = v90;
    v95 = v89;
    *(_QWORD *)&buf = v91;
    v93 = v87;
    v94 = v88;
    result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v85, (uint64_t *)&v95, (uint64_t *)&v94, (uint64_t *)&v93, &v92);
    if (v92)
    {
      v48 = v87;
      v87 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v47);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = v88;
      v88 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v47);
        else
          *(_DWORD *)v49 -= 2;
      }
      v50 = v89;
      v89 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v47);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = v90;
      v90 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v47);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = v91;
      v91 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v47);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = qword_1ECE7CE80;
      v54 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v54)
      {
        WTF::String::utf8();
        v56 = v85 ? (char *)v85 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v56;
        _os_log_impl(&dword_1940B8000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v54 = (uint64_t)v85;
        v85 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 1)
            v54 = WTF::fastFree((WTF *)v54, v55);
          else
            --*(_DWORD *)v54;
        }
      }
      if (WebCore::LogMediaSource)
      {
        v57 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v58 = *v57;
          if ((v58 & 1) != 0)
            break;
          v59 = __ldaxr(v57);
          if (v59 == v58)
          {
            if (!__stxr(v58 | 1, v57))
            {
              v60 = WTF::Logger::observers((WTF::Logger *)v54);
              v61 = *(unsigned int *)(v60 + 12);
              if ((_DWORD)v61)
              {
                v62 = *(uint64_t **)v60;
                v82 = *(_QWORD *)v60 + 8 * v61;
                do
                {
                  v63 = *v62;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v84);
                  LODWORD(v97) = 0;
                  WTF::String::String((WTF::String *)&v98, "buffered = ");
                  v99 = 0;
                  WebCore::PlatformTimeRanges::toString(v83, &v100);
                  v101 = 0;
                  WTF::String::String((WTF::String *)&v102, ", totalBufferSize: ");
                  v103 = 0;
                  WTF::String::number(v46);
                  v85 = 0;
                  v86 = 0;
                  v64 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v86) = 5;
                  v85 = v64;
                  v65 = HIDWORD(v86);
                  *((_DWORD *)v64 + 4 * HIDWORD(v86)) = buf;
                  v66 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v64 + 2 * v65 + 1) = v66;
                  *((_DWORD *)v64 + 4 * (v65 + 1)) = (_DWORD)v97;
                  v67 = v98;
                  if (v98)
                    *(_DWORD *)v98 += 2;
                  *((_QWORD *)v64 + 2 * (v65 + 1) + 1) = v67;
                  *((_DWORD *)v64 + 4 * (v65 + 2)) = v99;
                  v68 = v100;
                  if (v100)
                    *(_DWORD *)v100 += 2;
                  *((_QWORD *)v64 + 2 * (v65 + 2) + 1) = v68;
                  *((_DWORD *)v64 + 4 * (v65 + 3)) = v101;
                  v69 = v102;
                  if (v102)
                    *(_DWORD *)v102 += 2;
                  *((_QWORD *)v64 + 2 * (v65 + 3) + 1) = v69;
                  *((_DWORD *)v64 + 4 * (v65 + 4)) = v103;
                  v70 = v104;
                  if (v104)
                    *(_DWORD *)v104 += 2;
                  *((_QWORD *)v64 + 2 * (v65 + 4) + 1) = v70;
                  HIDWORD(v86) = v65 + 5;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v63 + 16))(v63, &WebCore::LogMediaSource, 0, &v85);
                  v71 = v85;
                  if (HIDWORD(v86))
                  {
                    v72 = v46;
                    v73 = 16 * HIDWORD(v86);
                    v74 = (WTF::StringImpl **)((char *)v85 + 8);
                    do
                    {
                      v75 = *v74;
                      *v74 = 0;
                      if (v75)
                      {
                        if (*(_DWORD *)v75 == 2)
                          WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v55);
                        else
                          *(_DWORD *)v75 -= 2;
                      }
                      v74 += 2;
                      v73 -= 16;
                    }
                    while (v73);
                    v71 = v85;
                    v46 = v72;
                  }
                  if (v71)
                  {
                    v85 = 0;
                    LODWORD(v86) = 0;
                    WTF::fastFree(v71, v55);
                  }
                  v76 = v104;
                  v104 = 0;
                  if (v76)
                  {
                    if (*(_DWORD *)v76 == 2)
                      WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v55);
                    else
                      *(_DWORD *)v76 -= 2;
                  }
                  v77 = v102;
                  v102 = 0;
                  if (v77)
                  {
                    if (*(_DWORD *)v77 == 2)
                      WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v55);
                    else
                      *(_DWORD *)v77 -= 2;
                  }
                  v78 = v100;
                  v100 = 0;
                  if (v78)
                  {
                    if (*(_DWORD *)v78 == 2)
                      WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v55);
                    else
                      *(_DWORD *)v78 -= 2;
                  }
                  v79 = v98;
                  v98 = 0;
                  if (v79)
                  {
                    if (*(_DWORD *)v79 == 2)
                      WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v55);
                    else
                      *(_DWORD *)v79 -= 2;
                  }
                  v80 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v80)
                  {
                    if (*(_DWORD *)v80 == 2)
                      WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v55);
                    else
                      *(_DWORD *)v80 -= 2;
                  }
                  ++v62;
                }
                while (v62 != (uint64_t *)v82);
              }
              v81 = __ldxr(v57);
              if (v81 == 1)
              {
                if (!__stlxr(0, v57))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = v92;
      v92 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v55);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_1,void,WebCore::SourceBuffer&>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E335ECC8;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_1,void,WebCore::SourceBuffer&>::~CallableWrapper(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E335ECC8;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,16u>::~NativePromiseProducer((WTF::NativePromiseBase *)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::SourceBuffer::appendBufferInternal(std::span<unsigned char const,18446744073709551615ul>)::$_1,void,WebCore::SourceBuffer&>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *result;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;

  v1 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(v2 + 356))
  {
    v3 = *(_QWORD *)(v2 + 168);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 48))
      {
        v4 = *(_QWORD *)(v2 + 120);
        v18 = *(_QWORD *)(v2 + 168);
        *(_QWORD *)(v2 + 168) = 0;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 64))(&v19, v4, &v18);
        v20 = 0;
        v21 = 0;
        v22 = "operator()";
        v23 = 0;
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo<void,WebCore::PlatformMediaError,16u>(v19, (uint64_t)v1, (WTF::Logger::LogSiteIdentifier *)&v20);
        v6 = (unsigned int *)v19;
        v19 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
        return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v18, v5);
      }
    }
  }
  v20 = 0;
  v21 = 0;
  v22 = "operator()";
  v23 = 0;
  v11 = *v1;
  if (*v1)
  {
    v12 = (unsigned __int8 *)(v11 + 48);
    if (__ldaxr((unsigned __int8 *)(v11 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_16;
    }
    a1 = MEMORY[0x19AEA534C](v11 + 48);
LABEL_16:
    v15 = *(_DWORD *)(v11 + 64);
    v16 = __ldxr(v12);
    if (v16 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_21:
        v14 = *v1;
        if (!v15)
          return (uint64_t *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::resolve<std::enable_if<true,void>>(v14, (WTF::Logger::LogSiteIdentifier *)&v20);
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    a1 = WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_21;
  }
  v14 = 0;
LABEL_22:
  result = (uint64_t *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(_BYTE *)result)
    v17 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v17 = 0;
  if (v17)
    return (uint64_t *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, (WTF::Logger::LogSiteIdentifier *)&v20, " ignored already resolved or rejected ", v14);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CanvasCaptureMediaStreamTrack::Source::create(WebCore::HTMLCanvasElement &,std::optional<double> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E335ED10;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CanvasCaptureMediaStreamTrack::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 336));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CanvasCaptureMediaStreamTrack::Source::create(WebCore::HTMLCanvasElement &,std::optional<double> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335ED10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::CanvasCaptureMediaStreamTrack::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 336));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CanvasCaptureMediaStreamTrack::Source::create(WebCore::HTMLCanvasElement &,std::optional<double> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::CanvasCaptureMediaStreamTrack::Source *v1;

  v1 = *(WebCore::CanvasCaptureMediaStreamTrack::Source **)(a1 + 8);
  if (*((_QWORD *)v1 + 74))
    WebCore::CanvasCaptureMediaStreamTrack::Source::captureCanvas(v1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CanvasCaptureMediaStreamTrack::Source::*&)(void),WebCore::CanvasCaptureMediaStreamTrack::Source*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::ImageCapture::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD v20[4];
  _QWORD *v21;

  v6 = *a2;
  if (!*(_QWORD *)(*a2 + 1216))
  {
    WTF::AtomStringImpl::add();
    v19 = *(WTF::StringImpl **)(v6 + 1216);
    *(_QWORD *)(v6 + 1216) = v20[0];
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  if ((MEMORY[0x19AEA53F4]() & 1) != 0)
  {
    v7 = bmalloc::api::isoAllocate();
    v8 = (_QWORD *)v7;
    v9 = *a2;
    ++*(_DWORD *)(v9 + 24);
    *(_DWORD *)(v7 + 24) = 1;
    v10 = *(_QWORD *)(a1 + 704);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        a1 = v11;
    }
    *(_QWORD *)v7 = &off_1E33A18C0;
    *(_QWORD *)(v7 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v7, (WebCore::ScriptExecutionContext *)(a1 + 192));
    *v8 = &off_1E33A0540;
    v8[2] = 0;
    if (*(_BYTE *)(a1 + 470))
    {
      __break(0xC471u);
      JUMPOUT(0x195461E58);
    }
    v21 = v8;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 320), (uint64_t *)&v21, (uint64_t)v20);
    *v8 = &off_1E335FA98;
    ++*(_DWORD *)(v9 + 24);
    v8[4] = v9;
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 80);
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v8[5] = v12;
    v15 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 88);
    v8[6] = v15;
    v20[0] = "ImageCapture";
    v20[1] = 13;
    v20[2] = "ImageCapture";
    v20[3] = v15;
    if (*(_BYTE *)(v12 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v20);
    if (*(_DWORD *)(v9 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      --*(_DWORD *)(v9 + 24);
    result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded(v8);
    v17 = 0;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 6;
    v17 = 1;
  }
  *(_DWORD *)(a3 + 16) = v17;
  return result;
}

void WebCore::ImageCapture::~ImageCapture(WebCore::ImageCapture *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;

  *(_QWORD *)this = &off_1E335FA98;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[6];
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E335FA98;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[6];
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

unsigned int *WebCore::ImageCapture::takePhoto(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *result;
  uint64_t v14;
  WTF::RunLoop *v15;
  WTF::RunLoop *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  __int128 v27;
  _BYTE *v29;
  void *v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  WTF::StringImpl *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  WTF::RunLoop *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned __int8 *v73;
  WTF::NativePromiseBase *v75;
  _BYTE *v76;
  _BYTE *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  NSObject *v87;
  WTF *v88;
  void *v89;
  char *v90;
  unsigned __int8 *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF *v108;
  _BYTE *v109;
  WTF::NativePromiseBase *v110;
  uint64_t v111;
  WTF::StringImpl **v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  char *v125;
  int v126;
  uint64_t v127;
  WTF::NativePromiseBase *v128;
  WTF::Lock *v129;
  int v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  WTF::RunLoop *v145[2];
  unsigned int *v146;
  unsigned int *v147;
  __int128 v148;
  const char *v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  WTF::NativePromiseBase *v153;
  WTF::StringImpl *v154[2];
  __int128 v155;
  __int128 v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  __int128 buf;
  __int128 v172;
  const char *v173;
  WTF::StringImpl *v174;
  int v175;
  WTF::StringImpl *v176;
  int v177;
  WTF::StringImpl *v178;
  int v179;
  WTF::StringImpl *v180;
  int v181;
  WTF::StringImpl *v182;
  int v183;
  _QWORD v184[5];

  v184[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v151 = "ImageCapture";
  *((_QWORD *)&v151 + 1) = 13;
  v7 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v152 = "takePhoto";
  *((_QWORD *)&v152 + 1) = v6;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v151);
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v8 + 1200) == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v151, "rejecting promise, track has ended");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = *a3;
    LOBYTE(v154[0]) = 8;
    *(_QWORD *)&v156 = 0;
    LOBYTE(buf) = 8;
    v10 = v154[1];
    if (v154[1])
      *(_DWORD *)v154[1] += 2;
    *((_QWORD *)&buf + 1) = v10;
    WebCore::DeferredPromise::reject(v9, (unsigned __int8 *)&buf, 0, (objc_class **)&v156);
    v12 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = (unsigned int *)v154[1];
    v154[1] = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
      else
        *result -= 2;
    }
    return result;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 96) + 40) + 8);
  v15 = (WTF::RunLoop *)(*(_QWORD *(**)(WTF::RunLoop **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 160))(v145, v14, a2);
  v16 = v145[0];
  v17 = WTF::RunLoop::main(v15);
  ++*(_DWORD *)(v8 + 24);
  v156 = 0uLL;
  v18 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = &off_1E335F378;
  v19[1] = v8;
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v18 + 40) = "takePhoto";
  *(_QWORD *)(v18 + 48) = 0;
  *(_WORD *)(v18 + 56) = 0;
  *(_QWORD *)v18 = &off_1E335F440;
  v20 = (unsigned int *)((char *)v16 + 8);
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 72) = v19;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  *(_QWORD *)&buf = v16;
  *((_QWORD *)&buf + 1) = v18;
  v172 = v156;
  v173 = "takePhoto";
  v174 = 0;
  v154[0] = 0;
  v154[1] = 0;
  *(_QWORD *)&v155 = "<completion promise>";
  *((_QWORD *)&v155 + 1) = 0;
  v22 = WTF::fastMalloc((WTF *)0x28);
  v23 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)v23 = off_1E335F3A0;
  v24 = v155;
  *(_OWORD *)(v23 + 16) = *(_OWORD *)v154;
  *(_OWORD *)(v23 + 32) = v24;
  *(_BYTE *)(v23 + 48) = 0;
  v25 = (unsigned __int8 *)(v23 + 48);
  *(_DWORD *)(v23 + 88) = 0;
  *(_QWORD *)(v23 + 96) = v23 + 112;
  *(_QWORD *)(v23 + 104) = 1;
  *(_QWORD *)(v23 + 120) = 0;
  *(_QWORD *)(v23 + 128) = 0;
  *(_WORD *)(v23 + 136) = 0;
  v26 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
  if (*v26 && v26[16] >= 4u)
    v26 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v26, v23);
  *(_QWORD *)v22 = v23;
  v27 = *(_OWORD *)v154;
  *(_OWORD *)(v22 + 24) = v155;
  *(_OWORD *)(v22 + 8) = v27;
  if (__ldaxr(v25))
  {
    __clrex();
LABEL_22:
    v26 = (unsigned __int8 *)MEMORY[0x19AEA534C](v25);
    goto LABEL_23;
  }
  if (__stxr(1u, v25))
    goto LABEL_22;
LABEL_23:
  v29 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v26);
  if (*v29 && v29[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v29, (WTF::Logger::LogSiteIdentifier *)v154, " runSynchronouslyOnTarget ", v23);
  atomic_store(0, (unsigned __int8 *)(v23 + 137));
  v31 = __ldxr(v25);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v25))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
  v32 = *(_QWORD *)v22;
  if (*(_QWORD *)v22)
  {
    v33 = (unsigned int *)(v32 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v35 = *((_QWORD *)&buf + 1);
  v36 = (unsigned __int8 *)(*((_QWORD *)&buf + 1) + 57);
  if (__ldaxr((unsigned __int8 *)(*((_QWORD *)&buf + 1) + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v36))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](v35 + 57);
LABEL_38:
  v38 = *(uint64_t **)(v35 + 64);
  *(_QWORD *)(v35 + 64) = v22;
  if (v38)
  {
    if (*v38)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(*v38);
      v39 = (unsigned int *)*v38;
      *v38 = 0;
      if (v39)
      {
        v40 = v39 + 2;
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          atomic_store(1u, v39 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 16))(v39);
        }
      }
    }
    else
    {
      *v38 = 0;
    }
    WTF::fastFree((WTF *)v38, v30);
  }
  v43 = __ldxr(v36);
  if (v43 == 1)
  {
    if (!__stlxr(0, v36))
      goto LABEL_52;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v35 + 57));
LABEL_52:
  v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  v154[0] = v44;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(buf, v154, (WTF::Logger::LogSiteIdentifier *)&v172);
  v45 = (unsigned int *)v154[0];
  v154[0] = 0;
  if (v45)
  {
    v46 = v45 + 2;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v45 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
    }
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    *((_QWORD *)&buf + 1) = 0;
    v154[0] = v49;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(buf, v154, (WTF::Logger::LogSiteIdentifier *)&v172);
    v50 = (unsigned int *)v154[0];
    v154[0] = 0;
    if (v50)
    {
      v51 = v50 + 2;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v50 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
      }
    }
    v54 = (unsigned int *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v54)
    {
      v55 = v54 + 2;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v54 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
      }
    }
  }
  else
  {
    *((_QWORD *)&buf + 1) = 0;
  }
  v58 = (unsigned int *)buf;
  *(_QWORD *)&buf = 0;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 16))(v58);
    }
  }
  v62 = v145[0];
  v145[0] = 0;
  if (v62)
  {
    v63 = (unsigned int *)((char *)v62 + 8);
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, (unsigned int *)v62 + 2);
      v62 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v62 + 16))(v62);
    }
  }
  v66 = WTF::RunLoop::main(v62);
  ++*(_DWORD *)(a1 + 24);
  v67 = *a3;
  *a3 = 0;
  buf = v151;
  v172 = v152;
  v145[0] = 0;
  v145[1] = 0;
  v68 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v66 + 32))(v66);
  v69 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v69 = &off_1E335F080;
  *(_QWORD *)(v69 + 8) = a1;
  *(_QWORD *)(v69 + 16) = a1;
  *(_QWORD *)(v69 + 24) = v67;
  v70 = v172;
  *(_OWORD *)(v69 + 32) = buf;
  *(_OWORD *)(v69 + 48) = v70;
  *(_DWORD *)(v68 + 8) = 1;
  *(_QWORD *)(v68 + 16) = v66;
  *(_QWORD *)(v68 + 24) = 0;
  *(_QWORD *)(v68 + 32) = 0;
  *(_QWORD *)(v68 + 40) = "takePhoto";
  *(_QWORD *)(v68 + 48) = 0;
  *(_WORD *)(v68 + 56) = 0;
  *(_QWORD *)v68 = &off_1E335F118;
  v71 = (unsigned int *)(v32 + 8);
  *(_QWORD *)(v68 + 64) = 0;
  *(_QWORD *)(v68 + 72) = v69;
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 + 1, v71));
  v148 = *(_OWORD *)v145;
  v149 = "takePhoto";
  v150 = 0;
  v146 = (unsigned int *)v32;
  v147 = 0;
  v153 = (WTF::NativePromiseBase *)v68;
  v73 = (unsigned __int8 *)(v32 + 48);
  *(_QWORD *)&v156 = v32 + 48;
  BYTE8(v156) = 1;
  if (__ldaxr((unsigned __int8 *)(v32 + 48)))
  {
    __clrex();
LABEL_84:
    v73 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_85;
  }
  if (__stxr(1u, v73))
    goto LABEL_84;
LABEL_85:
  *(_BYTE *)(v32 + 136) = 1;
  v75 = v153;
  v76 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v73);
  if (!*v76)
    goto LABEL_197;
  v77 = v76;
  if (v76[16] < 4u)
    goto LABEL_197;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v148);
  WTF::String::String((WTF::String *)&v162, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v161, v32);
  WTF::String::String((WTF::String *)&v160, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v158, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v157, "]");
  v154[0] = v162;
  v170 = v161;
  *(_QWORD *)&buf = v163;
  v169 = v160;
  v167 = v158;
  v168 = v159;
  v165 = v157;
  v166 = v78;
  result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)v154, (uint64_t *)&v170, (uint64_t *)&v169, (uint64_t *)&v168, (uint64_t *)&v167, (uint64_t *)&v166, (uint64_t *)&v165, &v164);
  if (!v164)
  {
    __break(0xC471u);
    return result;
  }
  v80 = v157;
  v157 = 0;
  if (!v80)
  {
LABEL_91:
    if (v78)
      goto LABEL_92;
    goto LABEL_94;
  }
  if (*(_DWORD *)v80 != 2)
  {
    *(_DWORD *)v80 -= 2;
    goto LABEL_91;
  }
  WTF::StringImpl::destroy(v80, v79);
  if (v78)
  {
LABEL_92:
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v79);
    else
      *(_DWORD *)v78 -= 2;
  }
LABEL_94:
  v81 = v158;
  v158 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v79);
    else
      *(_DWORD *)v81 -= 2;
  }
  v82 = v159;
  v159 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v79);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = v160;
  v160 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v79);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = v161;
  v161 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v79);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = v162;
  v162 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v79);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = v163;
  v163 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v79);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = *((_QWORD *)v77 + 4);
  v88 = (WTF *)os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v88)
  {
    WTF::String::utf8();
    v90 = v154[0] ? (char *)v154[0] + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v90;
    _os_log_impl(&dword_1940B8000, v87, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v88 = v154[0];
    v154[0] = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 1)
        v88 = (WTF *)WTF::fastFree(v88, v89);
      else
        --*(_DWORD *)v88;
    }
  }
  if (*v77 && v77[16] >= 4u)
  {
    v91 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v92 = *v91;
      if ((v92 & 1) != 0)
        break;
      v93 = __ldaxr(v91);
      if (v93 == v92)
      {
        if (!__stxr(v92 | 1, v91))
        {
          v94 = WTF::Logger::observers(v88);
          v95 = *(unsigned int *)(v94 + 12);
          if ((_DWORD)v95)
          {
            v96 = *(uint64_t **)v94;
            v144 = *(_QWORD *)v94 + 8 * v95;
            do
            {
              v97 = *v96;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v148);
              LODWORD(v172) = 0;
              WTF::String::String((WTF::String *)((char *)&v172 + 8), " invoking maybeSettle() [");
              LODWORD(v173) = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v174, v32);
              v175 = 0;
              WTF::String::String((WTF::String *)&v176, " callback:");
              v177 = 0;
              WTF::LogArgument<void const*>::toString();
              v179 = 0;
              WTF::String::String((WTF::String *)&v180, " isNothing:");
              v181 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v182 = v154[0];
              v183 = 0;
              WTF::String::String((WTF::String *)v184, "]");
              v154[0] = 0;
              v154[1] = 0;
              v98 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v154[1]) = 8;
              v154[0] = v98;
              v99 = HIDWORD(v154[1]);
              *((_DWORD *)v98 + 4 * HIDWORD(v154[1])) = buf;
              v100 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v98 + 2 * v99 + 1) = v100;
              *((_DWORD *)v98 + 4 * (v99 + 1)) = v172;
              v101 = *((_QWORD *)&v172 + 1);
              if (*((_QWORD *)&v172 + 1))
                **((_DWORD **)&v172 + 1) += 2;
              *((_QWORD *)v98 + 2 * (v99 + 1) + 1) = v101;
              *((_DWORD *)v98 + 4 * (v99 + 2)) = (_DWORD)v173;
              v102 = v174;
              if (v174)
                *(_DWORD *)v174 += 2;
              *((_QWORD *)v98 + 2 * (v99 + 2) + 1) = v102;
              *((_DWORD *)v98 + 4 * (v99 + 3)) = v175;
              v103 = v176;
              if (v176)
                *(_DWORD *)v176 += 2;
              *((_QWORD *)v98 + 2 * (v99 + 3) + 1) = v103;
              *((_DWORD *)v98 + 4 * (v99 + 4)) = v177;
              v104 = v178;
              if (v178)
                *(_DWORD *)v178 += 2;
              *((_QWORD *)v98 + 2 * (v99 + 4) + 1) = v104;
              *((_DWORD *)v98 + 4 * (v99 + 5)) = v179;
              v105 = v180;
              if (v180)
                *(_DWORD *)v180 += 2;
              *((_QWORD *)v98 + 2 * (v99 + 5) + 1) = v105;
              *((_DWORD *)v98 + 4 * (v99 + 6)) = v181;
              v106 = v182;
              if (v182)
                *(_DWORD *)v182 += 2;
              *((_QWORD *)v98 + 2 * (v99 + 6) + 1) = v106;
              *((_DWORD *)v98 + 4 * (v99 + 7)) = v183;
              v107 = v184[0];
              if (v184[0])
                *(_DWORD *)v184[0] += 2;
              *((_QWORD *)v98 + 2 * (v99 + 7) + 1) = v107;
              HIDWORD(v154[1]) = v99 + 8;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v97 + 16))(v97, v77, 4, v154);
              v108 = v154[0];
              if (HIDWORD(v154[1]))
              {
                v109 = v77;
                v110 = v75;
                v111 = 16 * HIDWORD(v154[1]);
                v112 = (WTF::StringImpl **)((char *)v154[0] + 8);
                do
                {
                  v113 = *v112;
                  *v112 = 0;
                  if (v113)
                  {
                    if (*(_DWORD *)v113 == 2)
                      WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v89);
                    else
                      *(_DWORD *)v113 -= 2;
                  }
                  v112 += 2;
                  v111 -= 16;
                }
                while (v111);
                v108 = v154[0];
                v75 = v110;
                v77 = v109;
              }
              if (v108)
              {
                v154[0] = 0;
                LODWORD(v154[1]) = 0;
                WTF::fastFree(v108, v89);
              }
              v114 = (WTF::StringImpl *)v184[0];
              v184[0] = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v114 -= 2;
              }
              v115 = v182;
              v182 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                  WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v115 -= 2;
              }
              v116 = v180;
              v180 = 0;
              if (v116)
              {
                if (*(_DWORD *)v116 == 2)
                  WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v116 -= 2;
              }
              v117 = v178;
              v178 = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                  WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v117 -= 2;
              }
              v118 = v176;
              v176 = 0;
              if (v118)
              {
                if (*(_DWORD *)v118 == 2)
                  WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v118 -= 2;
              }
              v119 = v174;
              v174 = 0;
              if (v119)
              {
                if (*(_DWORD *)v119 == 2)
                  WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v119 -= 2;
              }
              v120 = (WTF::StringImpl *)*((_QWORD *)&v172 + 1);
              *((_QWORD *)&v172 + 1) = 0;
              if (v120)
              {
                if (*(_DWORD *)v120 == 2)
                  WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v120 -= 2;
              }
              v121 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v121)
              {
                if (*(_DWORD *)v121 == 2)
                  WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v89);
                else
                  *(_DWORD *)v121 -= 2;
              }
              ++v96;
            }
            while (v96 != (uint64_t *)v144);
          }
          v122 = __ldxr(v91);
          if (v122 == 1)
          {
            if (!__stlxr(0, v91))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v123 = v164;
  v164 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v89);
    else
      *(_DWORD *)v123 -= 2;
  }
LABEL_197:
  if (*(_DWORD *)(v32 + 88))
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v153, v32, (unsigned __int8 **)&v156);
  }
  else
  {
    v124 = *(unsigned int *)(v32 + 108);
    if ((_DWORD)v124 == *(_DWORD *)(v32 + 104))
    {
      v125 = WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v32 + 96), v124 + 1, (unint64_t)&v153);
      v124 = *(unsigned int *)(v32 + 108);
      v126 = v124 + 1;
      v127 = *(_QWORD *)(v32 + 96);
      v128 = *(WTF::NativePromiseBase **)v125;
      *(_QWORD *)v125 = 0;
    }
    else
    {
      v126 = v124 + 1;
      v127 = *(_QWORD *)(v32 + 96);
      v128 = v153;
      v153 = 0;
    }
    *(_QWORD *)(v127 + 8 * v124) = v128;
    *(_DWORD *)(v32 + 108) = v126;
  }
  if (!BYTE8(v156))
    goto LABEL_209;
  v129 = (WTF::Lock *)v156;
  v130 = __ldxr((unsigned __int8 *)v156);
  if (v130 != 1)
  {
    __clrex();
    goto LABEL_208;
  }
  if (__stlxr(0, (unsigned __int8 *)v156))
LABEL_208:
    WTF::Lock::unlockSlow(v129);
LABEL_209:
  v131 = (unsigned int *)v153;
  v153 = 0;
  if (v131)
  {
    v132 = v131 + 2;
    do
    {
      v133 = __ldaxr(v132);
      v134 = v133 - 1;
    }
    while (__stlxr(v134, v132));
    if (!v134)
    {
      atomic_store(1u, v131 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v131 + 8))(v131);
    }
  }
  v135 = v147;
  v147 = 0;
  if (v135)
  {
    v136 = v135 + 2;
    do
    {
      v137 = __ldaxr(v136);
      v138 = v137 - 1;
    }
    while (__stlxr(v138, v136));
    if (!v138)
    {
      atomic_store(1u, v135 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v135 + 8))(v135);
    }
  }
  result = v146;
  v146 = 0;
  if (result)
  {
    v139 = result + 2;
    do
    {
      v140 = __ldaxr(v139);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, v139));
    if (!v141)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  do
  {
    v142 = __ldaxr(v71);
    v143 = v142 - 1;
  }
  while (__stlxr(v143, v71));
  if (!v143)
  {
    atomic_store(1u, (unsigned int *)(v32 + 8));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  }
  return result;
}

unsigned int *WebCore::ImageCapture::getPhotoCapabilities(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  WTF::RunLoop *v12;
  WTF::RunLoop *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  __int128 v24;
  _BYTE *v26;
  void *v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WTF::RunLoop *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned __int8 *v70;
  WTF::NativePromiseBase *v72;
  _BYTE *v73;
  _BYTE *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  NSObject *v84;
  WTF *v85;
  void *v86;
  char *v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF *v105;
  _BYTE *v106;
  WTF::NativePromiseBase *v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  int v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  char *v122;
  int v123;
  uint64_t v124;
  WTF::NativePromiseBase *v125;
  WTF::Lock *v126;
  int v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  WTF::RunLoop *v142[2];
  unsigned int *v143;
  unsigned int *v144;
  __int128 v145;
  const char *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  WTF::NativePromiseBase *v150;
  WTF::StringImpl *v151[2];
  __int128 v152;
  __int128 v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  __int128 buf;
  __int128 v169;
  const char *v170;
  WTF::StringImpl *v171;
  int v172;
  WTF::StringImpl *v173;
  int v174;
  WTF::StringImpl *v175;
  int v176;
  WTF::StringImpl *v177;
  int v178;
  WTF::StringImpl *v179;
  int v180;
  _QWORD v181[5];

  v181[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v148 = "ImageCapture";
  *((_QWORD *)&v148 + 1) = 13;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v149 = "getPhotoCapabilities";
  *((_QWORD *)&v149 + 1) = v4;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v148);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v6 + 1200) == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v148, "rejecting promise, track has ended");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *a2;
    LOBYTE(v151[0]) = 8;
    *(_QWORD *)&v153 = 0;
    LOBYTE(buf) = 8;
    v8 = v151[1];
    if (v151[1])
      *(_DWORD *)v151[1] += 2;
    *((_QWORD *)&buf + 1) = v8;
    WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)&buf, 0, (objc_class **)&v153);
    v10 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = (unsigned int *)v151[1];
    v151[1] = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *result -= 2;
    }
    return result;
  }
  v12 = (WTF::RunLoop *)(*(_QWORD *(**)(WTF::RunLoop **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + 96) + 40)
                                                                                             + 8)
                                                                               + 168))(v142);
  v13 = v142[0];
  v14 = WTF::RunLoop::main(v12);
  ++*(_DWORD *)(v6 + 24);
  v153 = 0uLL;
  v15 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E335F470;
  v16[1] = v6;
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = "getPhotoCapabilities";
  *(_QWORD *)(v15 + 48) = 0;
  *(_WORD *)(v15 + 56) = 0;
  *(_QWORD *)v15 = &off_1E335F538;
  v17 = (unsigned int *)((char *)v13 + 8);
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = v16;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)&buf = v13;
  *((_QWORD *)&buf + 1) = v15;
  v169 = v153;
  v170 = "getPhotoCapabilities";
  v171 = 0;
  v151[0] = 0;
  v151[1] = 0;
  *(_QWORD *)&v152 = "<completion promise>";
  *((_QWORD *)&v152 + 1) = 0;
  v19 = WTF::fastMalloc((WTF *)0x28);
  v20 = WTF::fastMalloc((WTF *)0x110);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = off_1E335F498;
  v21 = v152;
  *(_OWORD *)(v20 + 16) = *(_OWORD *)v151;
  *(_OWORD *)(v20 + 32) = v21;
  *(_BYTE *)(v20 + 48) = 0;
  v22 = (unsigned __int8 *)(v20 + 48);
  *(_DWORD *)(v20 + 216) = 0;
  *(_QWORD *)(v20 + 224) = v20 + 240;
  *(_QWORD *)(v20 + 232) = 1;
  *(_QWORD *)(v20 + 248) = 0;
  *(_QWORD *)(v20 + 256) = 0;
  *(_WORD *)(v20 + 264) = 0;
  v23 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v20);
  if (*v23 && v23[16] >= 4u)
    v23 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v23, v20);
  *(_QWORD *)v19 = v20;
  v24 = *(_OWORD *)v151;
  *(_OWORD *)(v19 + 24) = v152;
  *(_OWORD *)(v19 + 8) = v24;
  if (__ldaxr(v22))
  {
    __clrex();
LABEL_22:
    v23 = (unsigned __int8 *)MEMORY[0x19AEA534C](v22);
    goto LABEL_23;
  }
  if (__stxr(1u, v22))
    goto LABEL_22;
LABEL_23:
  v26 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
  if (*v26 && v26[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v26, (WTF::Logger::LogSiteIdentifier *)v151, " runSynchronouslyOnTarget ", v20);
  atomic_store(0, (unsigned __int8 *)(v20 + 265));
  v28 = __ldxr(v22);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v22))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
  v29 = *(_QWORD *)v19;
  if (*(_QWORD *)v19)
  {
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v32 = *((_QWORD *)&buf + 1);
  v33 = (unsigned __int8 *)(*((_QWORD *)&buf + 1) + 57);
  if (__ldaxr((unsigned __int8 *)(*((_QWORD *)&buf + 1) + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v33))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](v32 + 57);
LABEL_38:
  v35 = *(uint64_t **)(v32 + 64);
  *(_QWORD *)(v32 + 64) = v19;
  if (v35)
  {
    if (*v35)
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(*v35);
      v36 = (unsigned int *)*v35;
      *v35 = 0;
      if (v36)
      {
        v37 = v36 + 2;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
    }
    else
    {
      *v35 = 0;
    }
    WTF::fastFree((WTF *)v35, v27);
  }
  v40 = __ldxr(v33);
  if (v40 == 1)
  {
    if (!__stlxr(0, v33))
      goto LABEL_52;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v32 + 57));
LABEL_52:
  v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  v151[0] = v41;
  WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::maybeSettle(buf, v151, (WTF::Logger::LogSiteIdentifier *)&v169);
  v42 = (unsigned int *)v151[0];
  v151[0] = 0;
  if (v42)
  {
    v43 = v42 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v42 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    *((_QWORD *)&buf + 1) = 0;
    v151[0] = v46;
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::maybeSettle(buf, v151, (WTF::Logger::LogSiteIdentifier *)&v169);
    v47 = (unsigned int *)v151[0];
    v151[0] = 0;
    if (v47)
    {
      v48 = v47 + 2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v47 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
      }
    }
    v51 = (unsigned int *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v51)
    {
      v52 = v51 + 2;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v51 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
      }
    }
  }
  else
  {
    *((_QWORD *)&buf + 1) = 0;
  }
  v55 = (unsigned int *)buf;
  *(_QWORD *)&buf = 0;
  if (v55)
  {
    v56 = v55 + 2;
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v55 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 16))(v55);
    }
  }
  v59 = v142[0];
  v142[0] = 0;
  if (v59)
  {
    v60 = (unsigned int *)((char *)v59 + 8);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, (unsigned int *)v59 + 2);
      v59 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v59 + 16))(v59);
    }
  }
  v63 = WTF::RunLoop::main(v59);
  ++*(_DWORD *)(a1 + 24);
  v64 = *a2;
  *a2 = 0;
  buf = v148;
  v169 = v149;
  v142[0] = 0;
  v142[1] = 0;
  v65 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
  v66 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v66 = &off_1E335F178;
  *(_QWORD *)(v66 + 8) = a1;
  *(_QWORD *)(v66 + 16) = a1;
  *(_QWORD *)(v66 + 24) = v64;
  v67 = v169;
  *(_OWORD *)(v66 + 32) = buf;
  *(_OWORD *)(v66 + 48) = v67;
  *(_DWORD *)(v65 + 8) = 1;
  *(_QWORD *)(v65 + 16) = v63;
  *(_QWORD *)(v65 + 24) = 0;
  *(_QWORD *)(v65 + 32) = 0;
  *(_QWORD *)(v65 + 40) = "getPhotoCapabilities";
  *(_QWORD *)(v65 + 48) = 0;
  *(_WORD *)(v65 + 56) = 0;
  *(_QWORD *)v65 = &off_1E335F1E8;
  v68 = (unsigned int *)(v29 + 8);
  *(_QWORD *)(v65 + 64) = 0;
  *(_QWORD *)(v65 + 72) = v66;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 + 1, v68));
  v145 = *(_OWORD *)v142;
  v146 = "getPhotoCapabilities";
  v147 = 0;
  v143 = (unsigned int *)v29;
  v144 = 0;
  v150 = (WTF::NativePromiseBase *)v65;
  v70 = (unsigned __int8 *)(v29 + 48);
  *(_QWORD *)&v153 = v29 + 48;
  BYTE8(v153) = 1;
  if (__ldaxr((unsigned __int8 *)(v29 + 48)))
  {
    __clrex();
LABEL_84:
    v70 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_85;
  }
  if (__stxr(1u, v70))
    goto LABEL_84;
LABEL_85:
  *(_BYTE *)(v29 + 264) = 1;
  v72 = v150;
  v73 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v70);
  if (!*v73)
    goto LABEL_197;
  v74 = v73;
  if (v73[16] < 4u)
    goto LABEL_197;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v145);
  WTF::String::String((WTF::String *)&v159, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v158, v29);
  WTF::String::String((WTF::String *)&v157, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v155, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v75 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v154, "]");
  v151[0] = v159;
  v167 = v158;
  *(_QWORD *)&buf = v160;
  v166 = v157;
  v164 = v155;
  v165 = v156;
  v162 = v154;
  v163 = v75;
  result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)v151, (uint64_t *)&v167, (uint64_t *)&v166, (uint64_t *)&v165, (uint64_t *)&v164, (uint64_t *)&v163, (uint64_t *)&v162, &v161);
  if (!v161)
  {
    __break(0xC471u);
    return result;
  }
  v77 = v154;
  v154 = 0;
  if (!v77)
  {
LABEL_91:
    if (v75)
      goto LABEL_92;
    goto LABEL_94;
  }
  if (*(_DWORD *)v77 != 2)
  {
    *(_DWORD *)v77 -= 2;
    goto LABEL_91;
  }
  WTF::StringImpl::destroy(v77, v76);
  if (v75)
  {
LABEL_92:
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v76);
    else
      *(_DWORD *)v75 -= 2;
  }
LABEL_94:
  v78 = v155;
  v155 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v76);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = v156;
  v156 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v76);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = v157;
  v157 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v76);
    else
      *(_DWORD *)v80 -= 2;
  }
  v81 = v158;
  v158 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v76);
    else
      *(_DWORD *)v81 -= 2;
  }
  v82 = v159;
  v159 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v76);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = v160;
  v160 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v76);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = *((_QWORD *)v74 + 4);
  v85 = (WTF *)os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v85)
  {
    WTF::String::utf8();
    v87 = v151[0] ? (char *)v151[0] + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v87;
    _os_log_impl(&dword_1940B8000, v84, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v85 = v151[0];
    v151[0] = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 1)
        v85 = (WTF *)WTF::fastFree(v85, v86);
      else
        --*(_DWORD *)v85;
    }
  }
  if (*v74 && v74[16] >= 4u)
  {
    v88 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v89 = *v88;
      if ((v89 & 1) != 0)
        break;
      v90 = __ldaxr(v88);
      if (v90 == v89)
      {
        if (!__stxr(v89 | 1, v88))
        {
          v91 = WTF::Logger::observers(v85);
          v92 = *(unsigned int *)(v91 + 12);
          if ((_DWORD)v92)
          {
            v93 = *(uint64_t **)v91;
            v141 = *(_QWORD *)v91 + 8 * v92;
            do
            {
              v94 = *v93;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v145);
              LODWORD(v169) = 0;
              WTF::String::String((WTF::String *)((char *)&v169 + 8), " invoking maybeSettle() [");
              LODWORD(v170) = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v171, v29);
              v172 = 0;
              WTF::String::String((WTF::String *)&v173, " callback:");
              v174 = 0;
              WTF::LogArgument<void const*>::toString();
              v176 = 0;
              WTF::String::String((WTF::String *)&v177, " isNothing:");
              v178 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v179 = v151[0];
              v180 = 0;
              WTF::String::String((WTF::String *)v181, "]");
              v151[0] = 0;
              v151[1] = 0;
              v95 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v151[1]) = 8;
              v151[0] = v95;
              v96 = HIDWORD(v151[1]);
              *((_DWORD *)v95 + 4 * HIDWORD(v151[1])) = buf;
              v97 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v95 + 2 * v96 + 1) = v97;
              *((_DWORD *)v95 + 4 * (v96 + 1)) = v169;
              v98 = *((_QWORD *)&v169 + 1);
              if (*((_QWORD *)&v169 + 1))
                **((_DWORD **)&v169 + 1) += 2;
              *((_QWORD *)v95 + 2 * (v96 + 1) + 1) = v98;
              *((_DWORD *)v95 + 4 * (v96 + 2)) = (_DWORD)v170;
              v99 = v171;
              if (v171)
                *(_DWORD *)v171 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 2) + 1) = v99;
              *((_DWORD *)v95 + 4 * (v96 + 3)) = v172;
              v100 = v173;
              if (v173)
                *(_DWORD *)v173 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 3) + 1) = v100;
              *((_DWORD *)v95 + 4 * (v96 + 4)) = v174;
              v101 = v175;
              if (v175)
                *(_DWORD *)v175 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 4) + 1) = v101;
              *((_DWORD *)v95 + 4 * (v96 + 5)) = v176;
              v102 = v177;
              if (v177)
                *(_DWORD *)v177 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 5) + 1) = v102;
              *((_DWORD *)v95 + 4 * (v96 + 6)) = v178;
              v103 = v179;
              if (v179)
                *(_DWORD *)v179 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 6) + 1) = v103;
              *((_DWORD *)v95 + 4 * (v96 + 7)) = v180;
              v104 = v181[0];
              if (v181[0])
                *(_DWORD *)v181[0] += 2;
              *((_QWORD *)v95 + 2 * (v96 + 7) + 1) = v104;
              HIDWORD(v151[1]) = v96 + 8;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v94 + 16))(v94, v74, 4, v151);
              v105 = v151[0];
              if (HIDWORD(v151[1]))
              {
                v106 = v74;
                v107 = v72;
                v108 = 16 * HIDWORD(v151[1]);
                v109 = (WTF::StringImpl **)((char *)v151[0] + 8);
                do
                {
                  v110 = *v109;
                  *v109 = 0;
                  if (v110)
                  {
                    if (*(_DWORD *)v110 == 2)
                      WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v86);
                    else
                      *(_DWORD *)v110 -= 2;
                  }
                  v109 += 2;
                  v108 -= 16;
                }
                while (v108);
                v105 = v151[0];
                v72 = v107;
                v74 = v106;
              }
              if (v105)
              {
                v151[0] = 0;
                LODWORD(v151[1]) = 0;
                WTF::fastFree(v105, v86);
              }
              v111 = (WTF::StringImpl *)v181[0];
              v181[0] = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v112 = v179;
              v179 = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                  WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v112 -= 2;
              }
              v113 = v177;
              v177 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v114 = v175;
              v175 = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v114 -= 2;
              }
              v115 = v173;
              v173 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                  WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v115 -= 2;
              }
              v116 = v171;
              v171 = 0;
              if (v116)
              {
                if (*(_DWORD *)v116 == 2)
                  WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v116 -= 2;
              }
              v117 = (WTF::StringImpl *)*((_QWORD *)&v169 + 1);
              *((_QWORD *)&v169 + 1) = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                  WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v117 -= 2;
              }
              v118 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v118)
              {
                if (*(_DWORD *)v118 == 2)
                  WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v118 -= 2;
              }
              ++v93;
            }
            while (v93 != (uint64_t *)v141);
          }
          v119 = __ldxr(v88);
          if (v119 == 1)
          {
            if (!__stlxr(0, v88))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v120 = v161;
  v161 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v86);
    else
      *(_DWORD *)v120 -= 2;
  }
LABEL_197:
  if (*(_DWORD *)(v29 + 216))
  {
    WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v150, v29, (unsigned __int8 **)&v153);
  }
  else
  {
    v121 = *(unsigned int *)(v29 + 236);
    if ((_DWORD)v121 == *(_DWORD *)(v29 + 232))
    {
      v122 = WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v29 + 224), v121 + 1, (unint64_t)&v150);
      v121 = *(unsigned int *)(v29 + 236);
      v123 = v121 + 1;
      v124 = *(_QWORD *)(v29 + 224);
      v125 = *(WTF::NativePromiseBase **)v122;
      *(_QWORD *)v122 = 0;
    }
    else
    {
      v123 = v121 + 1;
      v124 = *(_QWORD *)(v29 + 224);
      v125 = v150;
      v150 = 0;
    }
    *(_QWORD *)(v124 + 8 * v121) = v125;
    *(_DWORD *)(v29 + 236) = v123;
  }
  if (!BYTE8(v153))
    goto LABEL_209;
  v126 = (WTF::Lock *)v153;
  v127 = __ldxr((unsigned __int8 *)v153);
  if (v127 != 1)
  {
    __clrex();
    goto LABEL_208;
  }
  if (__stlxr(0, (unsigned __int8 *)v153))
LABEL_208:
    WTF::Lock::unlockSlow(v126);
LABEL_209:
  v128 = (unsigned int *)v150;
  v150 = 0;
  if (v128)
  {
    v129 = v128 + 2;
    do
    {
      v130 = __ldaxr(v129);
      v131 = v130 - 1;
    }
    while (__stlxr(v131, v129));
    if (!v131)
    {
      atomic_store(1u, v128 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v128 + 8))(v128);
    }
  }
  v132 = v144;
  v144 = 0;
  if (v132)
  {
    v133 = v132 + 2;
    do
    {
      v134 = __ldaxr(v133);
      v135 = v134 - 1;
    }
    while (__stlxr(v135, v133));
    if (!v135)
    {
      atomic_store(1u, v132 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v132 + 8))(v132);
    }
  }
  result = v143;
  v143 = 0;
  if (result)
  {
    v136 = result + 2;
    do
    {
      v137 = __ldaxr(v136);
      v138 = v137 - 1;
    }
    while (__stlxr(v138, v136));
    if (!v138)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  do
  {
    v139 = __ldaxr(v68);
    v140 = v139 - 1;
  }
  while (__stlxr(v140, v68));
  if (!v140)
  {
    atomic_store(1u, (unsigned int *)(v29 + 8));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  }
  return result;
}

unsigned int *WebCore::ImageCapture::getPhotoSettings(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *result;
  WTF::RunLoop *v12;
  WTF::RunLoop *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  __int128 v24;
  _BYTE *v26;
  void *v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WTF::RunLoop *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned __int8 *v70;
  WTF::NativePromiseBase *v72;
  _BYTE *v73;
  _BYTE *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  NSObject *v84;
  WTF *v85;
  void *v86;
  char *v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF *v105;
  _BYTE *v106;
  WTF::NativePromiseBase *v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  int v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  char *v122;
  int v123;
  uint64_t v124;
  WTF::NativePromiseBase *v125;
  WTF::Lock *v126;
  int v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  WTF::RunLoop *v142[2];
  unsigned int *v143;
  unsigned int *v144;
  __int128 v145;
  const char *v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  WTF::NativePromiseBase *v150;
  WTF::StringImpl *v151[2];
  __int128 v152;
  __int128 v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  __int128 buf;
  __int128 v169;
  const char *v170;
  WTF::StringImpl *v171;
  int v172;
  WTF::StringImpl *v173;
  int v174;
  WTF::StringImpl *v175;
  int v176;
  WTF::StringImpl *v177;
  int v178;
  WTF::StringImpl *v179;
  int v180;
  _QWORD v181[5];

  v181[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v148 = "ImageCapture";
  *((_QWORD *)&v148 + 1) = 13;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v149 = "getPhotoSettings";
  *((_QWORD *)&v149 + 1) = v4;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v148);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v6 + 1200) == 1)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v148, "rejecting promise, track has ended");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v7 = *a2;
    LOBYTE(v151[0]) = 8;
    *(_QWORD *)&v153 = 0;
    LOBYTE(buf) = 8;
    v8 = v151[1];
    if (v151[1])
      *(_DWORD *)v151[1] += 2;
    *((_QWORD *)&buf + 1) = v8;
    WebCore::DeferredPromise::reject(v7, (unsigned __int8 *)&buf, 0, (objc_class **)&v153);
    v10 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = (unsigned int *)v151[1];
    v151[1] = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *result -= 2;
    }
    return result;
  }
  v12 = (WTF::RunLoop *)(*(_QWORD *(**)(WTF::RunLoop **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + 96) + 40)
                                                                                             + 8)
                                                                               + 176))(v142);
  v13 = v142[0];
  v14 = WTF::RunLoop::main(v12);
  ++*(_DWORD *)(v6 + 24);
  v153 = 0uLL;
  v15 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E335F598;
  v16[1] = v6;
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = "getPhotoSettings";
  *(_QWORD *)(v15 + 48) = 0;
  *(_WORD *)(v15 + 56) = 0;
  *(_QWORD *)v15 = &off_1E335F660;
  v17 = (unsigned int *)((char *)v13 + 8);
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = v16;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)&buf = v13;
  *((_QWORD *)&buf + 1) = v15;
  v169 = v153;
  v170 = "getPhotoSettings";
  v171 = 0;
  v151[0] = 0;
  v151[1] = 0;
  *(_QWORD *)&v152 = "<completion promise>";
  *((_QWORD *)&v152 + 1) = 0;
  v19 = WTF::fastMalloc((WTF *)0x28);
  v20 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)v20 = off_1E335F5C0;
  v21 = v152;
  *(_OWORD *)(v20 + 16) = *(_OWORD *)v151;
  *(_OWORD *)(v20 + 32) = v21;
  *(_BYTE *)(v20 + 48) = 0;
  v22 = (unsigned __int8 *)(v20 + 48);
  *(_DWORD *)(v20 + 120) = 0;
  *(_QWORD *)(v20 + 128) = v20 + 144;
  *(_QWORD *)(v20 + 136) = 1;
  *(_QWORD *)(v20 + 152) = 0;
  *(_QWORD *)(v20 + 160) = 0;
  *(_WORD *)(v20 + 168) = 0;
  v23 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v20);
  if (*v23 && v23[16] >= 4u)
    v23 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v23, v20);
  *(_QWORD *)v19 = v20;
  v24 = *(_OWORD *)v151;
  *(_OWORD *)(v19 + 24) = v152;
  *(_OWORD *)(v19 + 8) = v24;
  if (__ldaxr(v22))
  {
    __clrex();
LABEL_22:
    v23 = (unsigned __int8 *)MEMORY[0x19AEA534C](v22);
    goto LABEL_23;
  }
  if (__stxr(1u, v22))
    goto LABEL_22;
LABEL_23:
  v26 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
  if (*v26 && v26[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v26, (WTF::Logger::LogSiteIdentifier *)v151, " runSynchronouslyOnTarget ", v20);
  atomic_store(0, (unsigned __int8 *)(v20 + 169));
  v28 = __ldxr(v22);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v22))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
  v29 = *(_QWORD *)v19;
  if (*(_QWORD *)v19)
  {
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v32 = *((_QWORD *)&buf + 1);
  v33 = (unsigned __int8 *)(*((_QWORD *)&buf + 1) + 57);
  if (__ldaxr((unsigned __int8 *)(*((_QWORD *)&buf + 1) + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v33))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](v32 + 57);
LABEL_38:
  v35 = *(uint64_t **)(v32 + 64);
  *(_QWORD *)(v32 + 64) = v19;
  if (v35)
  {
    if (*v35)
    {
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(*v35);
      v36 = (unsigned int *)*v35;
      *v35 = 0;
      if (v36)
      {
        v37 = v36 + 2;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v36 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 16))(v36);
        }
      }
    }
    else
    {
      *v35 = 0;
    }
    WTF::fastFree((WTF *)v35, v27);
  }
  v40 = __ldxr(v33);
  if (v40 == 1)
  {
    if (!__stlxr(0, v33))
      goto LABEL_52;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v32 + 57));
LABEL_52:
  v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  v151[0] = v41;
  WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::maybeSettle(buf, v151, (WTF::Logger::LogSiteIdentifier *)&v169);
  v42 = (unsigned int *)v151[0];
  v151[0] = 0;
  if (v42)
  {
    v43 = v42 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v42 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    *((_QWORD *)&buf + 1) = 0;
    v151[0] = v46;
    WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::maybeSettle(buf, v151, (WTF::Logger::LogSiteIdentifier *)&v169);
    v47 = (unsigned int *)v151[0];
    v151[0] = 0;
    if (v47)
    {
      v48 = v47 + 2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v47 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
      }
    }
    v51 = (unsigned int *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (v51)
    {
      v52 = v51 + 2;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v51 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
      }
    }
  }
  else
  {
    *((_QWORD *)&buf + 1) = 0;
  }
  v55 = (unsigned int *)buf;
  *(_QWORD *)&buf = 0;
  if (v55)
  {
    v56 = v55 + 2;
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v55 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 16))(v55);
    }
  }
  v59 = v142[0];
  v142[0] = 0;
  if (v59)
  {
    v60 = (unsigned int *)((char *)v59 + 8);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, (unsigned int *)v59 + 2);
      v59 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v59 + 16))(v59);
    }
  }
  v63 = WTF::RunLoop::main(v59);
  ++*(_DWORD *)(a1 + 24);
  v64 = *a2;
  *a2 = 0;
  buf = v148;
  v169 = v149;
  v142[0] = 0;
  v142[1] = 0;
  v65 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
  v66 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v66 = &off_1E335F248;
  *(_QWORD *)(v66 + 8) = a1;
  *(_QWORD *)(v66 + 16) = a1;
  *(_QWORD *)(v66 + 24) = v64;
  v67 = v169;
  *(_OWORD *)(v66 + 32) = buf;
  *(_OWORD *)(v66 + 48) = v67;
  *(_DWORD *)(v65 + 8) = 1;
  *(_QWORD *)(v65 + 16) = v63;
  *(_QWORD *)(v65 + 24) = 0;
  *(_QWORD *)(v65 + 32) = 0;
  *(_QWORD *)(v65 + 40) = "getPhotoSettings";
  *(_QWORD *)(v65 + 48) = 0;
  *(_WORD *)(v65 + 56) = 0;
  *(_QWORD *)v65 = &off_1E335F2B8;
  v68 = (unsigned int *)(v29 + 8);
  *(_QWORD *)(v65 + 64) = 0;
  *(_QWORD *)(v65 + 72) = v66;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 + 1, v68));
  v145 = *(_OWORD *)v142;
  v146 = "getPhotoSettings";
  v147 = 0;
  v143 = (unsigned int *)v29;
  v144 = 0;
  v150 = (WTF::NativePromiseBase *)v65;
  v70 = (unsigned __int8 *)(v29 + 48);
  *(_QWORD *)&v153 = v29 + 48;
  BYTE8(v153) = 1;
  if (__ldaxr((unsigned __int8 *)(v29 + 48)))
  {
    __clrex();
LABEL_84:
    v70 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_85;
  }
  if (__stxr(1u, v70))
    goto LABEL_84;
LABEL_85:
  *(_BYTE *)(v29 + 168) = 1;
  v72 = v150;
  v73 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v70);
  if (!*v73)
    goto LABEL_197;
  v74 = v73;
  if (v73[16] < 4u)
    goto LABEL_197;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v145);
  WTF::String::String((WTF::String *)&v159, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v158, v29);
  WTF::String::String((WTF::String *)&v157, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v155, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v75 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v154, "]");
  v151[0] = v159;
  v167 = v158;
  *(_QWORD *)&buf = v160;
  v166 = v157;
  v164 = v155;
  v165 = v156;
  v162 = v154;
  v163 = v75;
  result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)v151, (uint64_t *)&v167, (uint64_t *)&v166, (uint64_t *)&v165, (uint64_t *)&v164, (uint64_t *)&v163, (uint64_t *)&v162, &v161);
  if (!v161)
  {
    __break(0xC471u);
    return result;
  }
  v77 = v154;
  v154 = 0;
  if (!v77)
  {
LABEL_91:
    if (v75)
      goto LABEL_92;
    goto LABEL_94;
  }
  if (*(_DWORD *)v77 != 2)
  {
    *(_DWORD *)v77 -= 2;
    goto LABEL_91;
  }
  WTF::StringImpl::destroy(v77, v76);
  if (v75)
  {
LABEL_92:
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v76);
    else
      *(_DWORD *)v75 -= 2;
  }
LABEL_94:
  v78 = v155;
  v155 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v76);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = v156;
  v156 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v76);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = v157;
  v157 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v76);
    else
      *(_DWORD *)v80 -= 2;
  }
  v81 = v158;
  v158 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v76);
    else
      *(_DWORD *)v81 -= 2;
  }
  v82 = v159;
  v159 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v76);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = v160;
  v160 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v76);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = *((_QWORD *)v74 + 4);
  v85 = (WTF *)os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v85)
  {
    WTF::String::utf8();
    v87 = v151[0] ? (char *)v151[0] + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v87;
    _os_log_impl(&dword_1940B8000, v84, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v85 = v151[0];
    v151[0] = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 1)
        v85 = (WTF *)WTF::fastFree(v85, v86);
      else
        --*(_DWORD *)v85;
    }
  }
  if (*v74 && v74[16] >= 4u)
  {
    v88 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v89 = *v88;
      if ((v89 & 1) != 0)
        break;
      v90 = __ldaxr(v88);
      if (v90 == v89)
      {
        if (!__stxr(v89 | 1, v88))
        {
          v91 = WTF::Logger::observers(v85);
          v92 = *(unsigned int *)(v91 + 12);
          if ((_DWORD)v92)
          {
            v93 = *(uint64_t **)v91;
            v141 = *(_QWORD *)v91 + 8 * v92;
            do
            {
              v94 = *v93;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v145);
              LODWORD(v169) = 0;
              WTF::String::String((WTF::String *)((char *)&v169 + 8), " invoking maybeSettle() [");
              LODWORD(v170) = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v171, v29);
              v172 = 0;
              WTF::String::String((WTF::String *)&v173, " callback:");
              v174 = 0;
              WTF::LogArgument<void const*>::toString();
              v176 = 0;
              WTF::String::String((WTF::String *)&v177, " isNothing:");
              v178 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v179 = v151[0];
              v180 = 0;
              WTF::String::String((WTF::String *)v181, "]");
              v151[0] = 0;
              v151[1] = 0;
              v95 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v151[1]) = 8;
              v151[0] = v95;
              v96 = HIDWORD(v151[1]);
              *((_DWORD *)v95 + 4 * HIDWORD(v151[1])) = buf;
              v97 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v95 + 2 * v96 + 1) = v97;
              *((_DWORD *)v95 + 4 * (v96 + 1)) = v169;
              v98 = *((_QWORD *)&v169 + 1);
              if (*((_QWORD *)&v169 + 1))
                **((_DWORD **)&v169 + 1) += 2;
              *((_QWORD *)v95 + 2 * (v96 + 1) + 1) = v98;
              *((_DWORD *)v95 + 4 * (v96 + 2)) = (_DWORD)v170;
              v99 = v171;
              if (v171)
                *(_DWORD *)v171 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 2) + 1) = v99;
              *((_DWORD *)v95 + 4 * (v96 + 3)) = v172;
              v100 = v173;
              if (v173)
                *(_DWORD *)v173 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 3) + 1) = v100;
              *((_DWORD *)v95 + 4 * (v96 + 4)) = v174;
              v101 = v175;
              if (v175)
                *(_DWORD *)v175 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 4) + 1) = v101;
              *((_DWORD *)v95 + 4 * (v96 + 5)) = v176;
              v102 = v177;
              if (v177)
                *(_DWORD *)v177 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 5) + 1) = v102;
              *((_DWORD *)v95 + 4 * (v96 + 6)) = v178;
              v103 = v179;
              if (v179)
                *(_DWORD *)v179 += 2;
              *((_QWORD *)v95 + 2 * (v96 + 6) + 1) = v103;
              *((_DWORD *)v95 + 4 * (v96 + 7)) = v180;
              v104 = v181[0];
              if (v181[0])
                *(_DWORD *)v181[0] += 2;
              *((_QWORD *)v95 + 2 * (v96 + 7) + 1) = v104;
              HIDWORD(v151[1]) = v96 + 8;
              (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v94 + 16))(v94, v74, 4, v151);
              v105 = v151[0];
              if (HIDWORD(v151[1]))
              {
                v106 = v74;
                v107 = v72;
                v108 = 16 * HIDWORD(v151[1]);
                v109 = (WTF::StringImpl **)((char *)v151[0] + 8);
                do
                {
                  v110 = *v109;
                  *v109 = 0;
                  if (v110)
                  {
                    if (*(_DWORD *)v110 == 2)
                      WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v86);
                    else
                      *(_DWORD *)v110 -= 2;
                  }
                  v109 += 2;
                  v108 -= 16;
                }
                while (v108);
                v105 = v151[0];
                v72 = v107;
                v74 = v106;
              }
              if (v105)
              {
                v151[0] = 0;
                LODWORD(v151[1]) = 0;
                WTF::fastFree(v105, v86);
              }
              v111 = (WTF::StringImpl *)v181[0];
              v181[0] = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v112 = v179;
              v179 = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                  WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v112 -= 2;
              }
              v113 = v177;
              v177 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v114 = v175;
              v175 = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v114 -= 2;
              }
              v115 = v173;
              v173 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                  WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v115 -= 2;
              }
              v116 = v171;
              v171 = 0;
              if (v116)
              {
                if (*(_DWORD *)v116 == 2)
                  WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v116 -= 2;
              }
              v117 = (WTF::StringImpl *)*((_QWORD *)&v169 + 1);
              *((_QWORD *)&v169 + 1) = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                  WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v117 -= 2;
              }
              v118 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v118)
              {
                if (*(_DWORD *)v118 == 2)
                  WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v86);
                else
                  *(_DWORD *)v118 -= 2;
              }
              ++v93;
            }
            while (v93 != (uint64_t *)v141);
          }
          v119 = __ldxr(v88);
          if (v119 == 1)
          {
            if (!__stlxr(0, v88))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v120 = v161;
  v161 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v86);
    else
      *(_DWORD *)v120 -= 2;
  }
LABEL_197:
  if (*(_DWORD *)(v29 + 120))
  {
    WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v150, v29, (unsigned __int8 **)&v153);
  }
  else
  {
    v121 = *(unsigned int *)(v29 + 140);
    if ((_DWORD)v121 == *(_DWORD *)(v29 + 136))
    {
      v122 = WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v29 + 128), v121 + 1, (unint64_t)&v150);
      v121 = *(unsigned int *)(v29 + 140);
      v123 = v121 + 1;
      v124 = *(_QWORD *)(v29 + 128);
      v125 = *(WTF::NativePromiseBase **)v122;
      *(_QWORD *)v122 = 0;
    }
    else
    {
      v123 = v121 + 1;
      v124 = *(_QWORD *)(v29 + 128);
      v125 = v150;
      v150 = 0;
    }
    *(_QWORD *)(v124 + 8 * v121) = v125;
    *(_DWORD *)(v29 + 140) = v123;
  }
  if (!BYTE8(v153))
    goto LABEL_209;
  v126 = (WTF::Lock *)v153;
  v127 = __ldxr((unsigned __int8 *)v153);
  if (v127 != 1)
  {
    __clrex();
    goto LABEL_208;
  }
  if (__stlxr(0, (unsigned __int8 *)v153))
LABEL_208:
    WTF::Lock::unlockSlow(v126);
LABEL_209:
  v128 = (unsigned int *)v150;
  v150 = 0;
  if (v128)
  {
    v129 = v128 + 2;
    do
    {
      v130 = __ldaxr(v129);
      v131 = v130 - 1;
    }
    while (__stlxr(v131, v129));
    if (!v131)
    {
      atomic_store(1u, v128 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v128 + 8))(v128);
    }
  }
  v132 = v144;
  v144 = 0;
  if (v132)
  {
    v133 = v132 + 2;
    do
    {
      v134 = __ldaxr(v133);
      v135 = v134 - 1;
    }
    while (__stlxr(v135, v133));
    if (!v135)
    {
      atomic_store(1u, v132 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v132 + 8))(v132);
    }
  }
  result = v143;
  v143 = 0;
  if (result)
  {
    v136 = result + 2;
    do
    {
      v137 = __ldaxr(v136);
      v138 = v137 - 1;
    }
    while (__stlxr(v138, v136));
    if (!v138)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  do
  {
    v139 = __ldaxr(v68);
    v140 = v139 - 1;
  }
  while (__stlxr(v140, v68));
  if (!v140)
  {
    atomic_store(1u, (unsigned int *)(v29 + 8));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  }
  return result;
}

void WebCore::MediaDevices::~MediaDevices(WebCore::MediaDevices *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 17);
  if (v4)
  {
    v12 = *((unsigned int *)this + 36);
    if ((_DWORD)v12)
    {
      v13 = (WTF::StringImpl **)((char *)v4 + 8);
      do
      {
        v14 = *v13;
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = *(v13 - 1);
        *(v13 - 1) = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_QWORD *)this + 7) = off_1E32051C0;
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::RunLoop::TimerBase::~TimerBase((WebCore::MediaDevices *)((char *)this + 56));
  WebCore::EventTarget::~EventTarget((WebCore::MediaDevices *)((char *)this + 32), v10);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v11);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MediaDevices::~MediaDevices(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::MediaDevices::~MediaDevices(WebCore::MediaDevices *this, WTF::StringImpl *a2)
{
  WebCore::MediaDevices::~MediaDevices((WebCore::MediaDevices *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MediaDevices::~MediaDevices((WebCore::MediaDevices *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::MediaDevices::stop(WebCore::MediaDevices *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char **v7;
  uint64_t result;
  const char *v9;
  const char *v10[2];

  if (!*((_QWORD *)this + 11))
    return WTF::RunLoop::TimerBase::stop((WebCore::MediaDevices *)((char *)this + 56));
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!*(_BYTE *)(v2 + 178))
  {
    v3 = *(_QWORD *)(v2 + 240);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            v10[0] = "UserMediaController";
            v10[1] = (const char *)20;
            v7 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v6 + 8), v10);
            if (v7)
            {
              v9 = v7[2];
              if (v9)
                (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v9 + 1) + 40))(*((_QWORD *)v9 + 1), *((_QWORD *)this + 11));
            }
          }
        }
      }
    }
    return WTF::RunLoop::TimerBase::stop((WebCore::MediaDevices *)((char *)this + 56));
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MediaDevices::scriptExecutionContext(WebCore::MediaDevices *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

BOOL WebCore::MediaDevices::computeUserGesturePriviledge(uint64_t a1, int a2)
{
  void *v4;
  WebCore::UserGestureToken *v5;
  int v6;
  char v7;
  uint64_t v8;
  WebCore::UserGestureToken *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL8 result;
  WTF *v19;
  void *v20;

  if (!WTF::isMainThread((WTF *)a1))
  {
    v5 = 0;
LABEL_31:
    v7 = 1;
    goto LABEL_6;
  }
  {
    v5 = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
    if (WebCore::currentToken(void)::token)
    {
      v6 = (*(_DWORD *)WebCore::currentToken(void)::token)++;
      if (v6)
      {
        v7 = 0;
        *(_DWORD *)v5 = v6;
      }
      else
      {
        WebCore::UserGestureToken::~UserGestureToken(v5, v4);
        WTF::fastFree(v19, v20);
        v7 = 0;
      }
      goto LABEL_6;
    }
    goto LABEL_31;
  }
  v5 = 0;
  WebCore::currentToken(void)::token = 0;
  v7 = 1;
LABEL_6:
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
    v9 = *(WebCore::UserGestureToken **)(v8 + 8);
  else
    v9 = 0;
  if (v9 != v5)
  {
    if ((v7 & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      v10 = *((_QWORD *)v5 + 1);
      if (v10)
        goto LABEL_35;
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v5;
      v11 = (unsigned int *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = v10;
      if (!v11)
        goto LABEL_35;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v4);
      }
      v10 = *((_QWORD *)v5 + 1);
      if (v10)
      {
LABEL_35:
        do
          v14 = __ldaxr((unsigned int *)v10);
        while (__stlxr(v14 + 1, (unsigned int *)v10));
      }
    }
    v15 = *(unsigned int **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v10;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v4);
      }
    }
    *(_DWORD *)(a1 + 120) = 0;
    v8 = *(_QWORD *)(a1 + 128);
  }
  result = v8 && *(_QWORD *)(v8 + 8) && (*(_DWORD *)(a1 + 120) & a2) == 0;
  *(_DWORD *)(a1 + 120) |= a2;
  return result;
}

void WebCore::MediaDevices::getUserMedia(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::AudioSession *isFullyActive;
  WebCore::AudioSessionIOS *v15;
  int v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t (**v21)();
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (**v92)();
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (**v97)();
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  char v101;
  _OWORD v102[2];
  char v103;
  void (**v104)(WebCore::IntConstraint *__hidden);
  char v105;
  _BYTE v106[29];
  char v107;
  void (**v108)(WebCore::IntConstraint *__hidden);
  char v109;
  _OWORD v110[2];
  char v111;
  void (**v112)(WebCore::IntConstraint *__hidden);
  char v113;
  _OWORD v114[2];
  char v115;
  void (**v116)(WebCore::DoubleConstraint *__hidden);
  char v117;
  __int128 v118;
  __int128 v119;
  _OWORD v120[2];
  char v121;
  void (**v122)(WebCore::DoubleConstraint *__hidden);
  char v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  char v127;
  void (**v128)(WebCore::DoubleConstraint *__hidden);
  char v129;
  __int128 v130;
  __int128 v131;
  _OWORD v132[2];
  char v133;
  void (**v134)(WebCore::BooleanConstraint *__hidden);
  char v135;
  int v136;
  char v137;
  void (**v138)(WebCore::BooleanConstraint *__hidden);
  char v139;
  int v140;
  char v141;
  void (**v142)(WebCore::BooleanConstraint *__hidden);
  char v143;
  int v144;
  char v145;
  void (**v146)(WebCore::StringConstraint *__hidden);
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  void (**v153)(WebCore::StringConstraint *__hidden);
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  void (**v160)(WebCore::StringConstraint *__hidden);
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  void (**v167)(WebCore::StringConstraint *__hidden);
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  void (**v174)(WebCore::DoubleConstraint *__hidden);
  char v175;
  __int128 v176;
  __int128 v177;
  _OWORD v178[2];
  char v179;
  void (**v180)(WebCore::BooleanConstraint *__hidden);
  char v181;
  int v182;
  char v183;
  void (**v184)(WebCore::BooleanConstraint *__hidden);
  char v185;
  int v186;
  char v187;
  void (**v188)(WebCore::BooleanConstraint *__hidden);
  char v189;
  int v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v194;
  void (**v195)(WebCore::IntConstraint *__hidden);
  char v196;
  _BYTE v197[29];
  char v198;
  void (**v199)(WebCore::IntConstraint *__hidden);
  char v200;
  _OWORD v201[2];
  char v202;
  void (**v203)(WebCore::IntConstraint *__hidden);
  char v204;
  _OWORD v205[2];
  char v206;
  void (**v207)(WebCore::IntConstraint *__hidden);
  char v208;
  _BYTE v209[29];
  char v210;
  void (**v211)(WebCore::DoubleConstraint *__hidden);
  char v212;
  __int128 v213;
  __int128 v214;
  _OWORD v215[2];
  char v216;
  void (**v217)(WebCore::DoubleConstraint *__hidden);
  char v218;
  __int128 v219;
  __int128 v220;
  _OWORD v221[2];
  char v222;
  void (**v223)(WebCore::DoubleConstraint *__hidden);
  char v224;
  __int128 v225;
  __int128 v226;
  _OWORD v227[2];
  char v228;
  void (**v229)(WebCore::BooleanConstraint *__hidden);
  char v230;
  int v231;
  char v232;
  void (**v233)(WebCore::BooleanConstraint *__hidden);
  char v234;
  int v235;
  char v236;
  void (**v237)(WebCore::BooleanConstraint *__hidden);
  char v238;
  int v239;
  char v240;
  void (**v241)(WebCore::StringConstraint *__hidden);
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  void (**v248)(WebCore::StringConstraint *__hidden);
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  void (**v255)(WebCore::StringConstraint *__hidden);
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  void (**v262)(WebCore::StringConstraint *__hidden);
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  void (**v269)(WebCore::DoubleConstraint *__hidden);
  char v270;
  __int128 v271;
  __int128 v272;
  _OWORD v273[2];
  char v274;
  void (**v275)(WebCore::BooleanConstraint *__hidden);
  char v276;
  int v277;
  char v278;
  void (**v279)(WebCore::BooleanConstraint *__hidden);
  char v280;
  int v281;
  char v282;
  void (**v283)(WebCore::BooleanConstraint *__hidden);
  char v284;
  int v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  unsigned __int8 v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  _OWORD v294[2];
  char v295;
  char v296;
  _OWORD v297[2];
  char v298;
  char v299;
  _OWORD v300[2];
  char v301;
  char v302;
  _OWORD v303[2];
  char v304;
  char v305;
  __int128 v306;
  __int128 v307;
  _OWORD v308[2];
  char v309;
  char v310;
  __int128 v311;
  __int128 v312;
  _OWORD v313[2];
  char v314;
  char v315;
  __int128 v316;
  __int128 v317;
  _OWORD v318[2];
  char v319;
  char v320;
  int v321;
  char v322;
  char v323;
  int v324;
  char v325;
  char v326;
  int v327;
  char v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char v340;
  char v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char v352;
  char v353;
  __int128 v354;
  __int128 v355;
  _OWORD v356[2];
  char v357;
  char v358;
  int v359;
  char v360;
  char v361;
  int v362;
  char v363;
  char v364;
  int v365;
  char v366;
  uint64_t v367;
  uint64_t v368;
  unsigned __int8 v369;
  uint64_t v370;
  char v371;
  _BYTE v372[29];
  char v373;
  char v374;
  _OWORD v375[2];
  char v376;
  char v377;
  _OWORD v378[2];
  char v379;
  char v380;
  _BYTE v381[29];
  char v382;
  char v383;
  __int128 v384;
  __int128 v385;
  _OWORD v386[2];
  char v387;
  char v388;
  __int128 v389;
  __int128 v390;
  _OWORD v391[2];
  char v392;
  char v393;
  __int128 v394;
  __int128 v395;
  _OWORD v396[2];
  char v397;
  char v398;
  int v399;
  char v400;
  char v401;
  int v402;
  char v403;
  char v404;
  int v405;
  char v406;
  char v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char v412;
  char v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char v418;
  char v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char v424;
  char v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char v430;
  char v431;
  __int128 v432;
  __int128 v433;
  _OWORD v434[2];
  char v435;
  char v436;
  int v437;
  char v438;
  char v439;
  int v440;
  char v441;
  char v442;
  int v443;
  char v444;
  uint64_t v445;
  uint64_t v446;
  unsigned __int8 v447;
  char v448;
  WTF::StringImpl *v449;
  objc_class *v450[2];

  v3 = *(unsigned int *)(a2 + 2168);
  if ((_DWORD)v3 == -1)
    goto LABEL_163;
  v99 = (WTF::StringImpl *)&v292;
  ((void (*)(uint64_t *__return_ptr, WTF::StringImpl **, uint64_t))*(&off_1E335F330 + v3))(&v370, &v99, a2 + 1096);
  v7 = *(unsigned int *)(a2 + 1080);
  if ((_DWORD)v7 == -1)
    goto LABEL_163;
  v99 = (WTF::StringImpl *)&v448;
  ((void (*)(uint64_t *__return_ptr, WTF::StringImpl **, uint64_t))*(&off_1E335F330 + v7))(&v292, &v99, a2 + 8);
  if (!(v447 | v369))
  {
    v8 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::DeferredPromise::reject(v8, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v99, 0);
    v10 = v99;
    v99 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    goto LABEL_30;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
    v13 = 0;
    v22 = 1;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(v12 + 178))
  {
    v13 = v12 - 288;
    *(_DWORD *)(v12 - 264) += 2;
    isFullyActive = (WebCore::AudioSession *)WebCore::Document::isFullyActive((WebCore::Document *)(v12 - 288));
    if ((isFullyActive & 1) != 0)
    {
      if (!v447)
        goto LABEL_31;
      v15 = WebCore::AudioSession::sharedSession(isFullyActive);
      v16 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v15 + 48))(v15);
      if (v16 && v16 != 5)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = *a3;
        v448 = 8;
        v450[0] = 0;
        LOBYTE(v99) = 8;
        v33 = v449;
        if (v449)
          *(_DWORD *)v449 += 2;
        v100 = v33;
        WebCore::DeferredPromise::reject(v32, (unsigned __int8 *)&v99, 0, v450);
        v34 = v100;
        v100 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v9);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = v449;
        v449 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v9);
          else
            *(_DWORD *)v35 -= 2;
        }
        goto LABEL_28;
      }
      if (!v447)
      {
LABEL_31:
        v28 = 0;
        goto LABEL_32;
      }
      v448 = 1;
      LOBYTE(v450[0]) = 0;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v17 = off_1E3418498;
      v17[1] = v450;
      v17[2] = &v448;
      v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v18 = &off_1E3418380;
      *((_QWORD *)v18 + 1) = v17;
      v99 = v18;
      WebCore::MediaTrackConstraintSetMap::filter((uint64_t)&v370, &v99);
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
      if (LOBYTE(v450[0]))
      {
        v19 = *a3;
        *a3 = 0;
        v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        v21 = &off_1E335F710;
        goto LABEL_35;
      }
      v28 = WebCore::MediaDevices::computeUserGesturePriviledge(a1, 1);
      v91 = WTF::fastMalloc((WTF *)0x10);
      v92 = off_1E34183F8;
      *(_QWORD *)v91 = off_1E34183F8;
      if (!v400)
      {
        if (!HIDWORD(v446))
        {
          v97 = off_1E34183F8;
LABEL_159:
          ((void (*)(uint64_t))v97[1])(v91);
          LOBYTE(v100) = 2;
          v99 = (WTF::StringImpl *)&off_1E335FF78;
          *(_DWORD *)((char *)&v100 + 1) = 16842752;
          WebCore::MediaTrackConstraintSetMap::set((uint64_t)&v370, (WTF::StringImpl *)9, (uint64_t)&v99);
LABEL_32:
          if (v369)
          {
            v448 = 0;
            LOBYTE(v450[0]) = 0;
            v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v29 = off_1E3418498;
            v29[1] = v450;
            v29[2] = &v448;
            v30 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v30 = &off_1E3418380;
            *((_QWORD *)v30 + 1) = v29;
            v99 = v30;
            WebCore::MediaTrackConstraintSetMap::filter((uint64_t)&v292, &v99);
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
            if (LOBYTE(v450[0]))
            {
              v19 = *a3;
              *a3 = 0;
              v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              v21 = &off_1E335F738;
LABEL_35:
              *(_QWORD *)v20 = v21;
              *((_QWORD *)v20 + 1) = v19;
              v99 = v20;
              WTF::callOnMainThread();
              v31 = v99;
              v99 = 0;
              if (v31)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
              goto LABEL_28;
            }
            v28 |= WebCore::MediaDevices::computeUserGesturePriviledge(a1, 2);
            WebCore::MediaConstraints::setDefaultVideoConstraints((WebCore::MediaConstraints *)&v292);
          }
          LOBYTE(v99) = 0;
          LOBYTE(v100) = 0;
          v103 = 0;
          if (v373)
          {
            v101 = v371;
            v102[0] = *(_OWORD *)v372;
            *(_OWORD *)((char *)v102 + 13) = *(_OWORD *)&v372[13];
            v100 = (WTF::StringImpl *)&off_1E335FF28;
            v103 = 1;
          }
          LOBYTE(v104) = 0;
          v107 = 0;
          if (v376)
          {
            v105 = v374;
            *(_OWORD *)v106 = v375[0];
            *(_OWORD *)&v106[13] = *(_OWORD *)((char *)v375 + 13);
            v104 = &off_1E335FF28;
            v107 = 1;
          }
          LOBYTE(v108) = 0;
          v111 = 0;
          if (v379)
          {
            v109 = v377;
            v110[0] = v378[0];
            *(_OWORD *)((char *)v110 + 13) = *(_OWORD *)((char *)v378 + 13);
            v108 = &off_1E335FF28;
            v111 = 1;
          }
          LOBYTE(v112) = 0;
          v115 = 0;
          if (v382)
          {
            v113 = v380;
            v114[0] = *(_OWORD *)v381;
            *(_OWORD *)((char *)v114 + 13) = *(_OWORD *)&v381[13];
            v112 = &off_1E335FF28;
            v115 = 1;
          }
          LOBYTE(v116) = 0;
          v121 = 0;
          if (v387)
          {
            v119 = v385;
            v120[0] = v386[0];
            *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)((char *)v386 + 9);
            v117 = v383;
            v118 = v384;
            v116 = &off_1E335FF50;
            v121 = 1;
          }
          LOBYTE(v122) = 0;
          v127 = 0;
          if (v392)
          {
            v123 = v388;
            *(_OWORD *)((char *)v126 + 9) = *(_OWORD *)((char *)v391 + 9);
            v124 = v389;
            v125 = v390;
            v126[0] = v391[0];
            v122 = &off_1E335FF50;
            v127 = 1;
          }
          LOBYTE(v128) = 0;
          v133 = 0;
          if (v397)
          {
            v129 = v393;
            v130 = v394;
            v131 = v395;
            v132[0] = v396[0];
            *(_OWORD *)((char *)v132 + 9) = *(_OWORD *)((char *)v396 + 9);
            v128 = &off_1E335FF50;
            v133 = 1;
          }
          LOBYTE(v134) = 0;
          v137 = 0;
          if (v400)
          {
            v135 = v398;
            v134 = &off_1E335FF78;
            v136 = v399;
            v137 = 1;
          }
          LOBYTE(v138) = 0;
          v141 = 0;
          if (v403)
          {
            v139 = v401;
            v138 = &off_1E335FF78;
            v140 = v402;
            v141 = 1;
          }
          LOBYTE(v142) = 0;
          v145 = 0;
          if (v406)
          {
            v143 = v404;
            v142 = &off_1E335FF78;
            v144 = v405;
            v145 = 1;
          }
          LOBYTE(v146) = 0;
          v152 = 0;
          if (v412)
          {
            v147 = v407;
            v146 = &off_1E335FFA0;
            v36 = v408;
            v408 = 0;
            v148 = v36;
            v37 = v409;
            v409 = 0;
            v149 = v37;
            v38 = v410;
            v410 = 0;
            v150 = v38;
            v39 = v411;
            v411 = 0;
            v151 = v39;
            v152 = 1;
          }
          LOBYTE(v153) = 0;
          v159 = 0;
          if (v418)
          {
            v154 = v413;
            v153 = &off_1E335FFA0;
            v40 = v414;
            v414 = 0;
            v155 = v40;
            v41 = v415;
            v415 = 0;
            v156 = v41;
            v42 = v416;
            v416 = 0;
            v157 = v42;
            v43 = v417;
            v417 = 0;
            v158 = v43;
            v159 = 1;
          }
          LOBYTE(v160) = 0;
          v166 = 0;
          if (v424)
          {
            v161 = v419;
            v160 = &off_1E335FFA0;
            v44 = v420;
            v420 = 0;
            v162 = v44;
            v45 = v421;
            v421 = 0;
            v163 = v45;
            v46 = v422;
            v422 = 0;
            v164 = v46;
            v47 = v423;
            v423 = 0;
            v165 = v47;
            v166 = 1;
          }
          LOBYTE(v167) = 0;
          v173 = 0;
          if (v430)
          {
            v168 = v425;
            v167 = &off_1E335FFA0;
            v48 = v426;
            v426 = 0;
            v169 = v48;
            v49 = v427;
            v427 = 0;
            v170 = v49;
            v50 = v428;
            v428 = 0;
            v171 = v50;
            v51 = v429;
            v429 = 0;
            v172 = v51;
            v173 = 1;
          }
          LOBYTE(v174) = 0;
          v179 = 0;
          if (v435)
          {
            v175 = v431;
            v176 = v432;
            v177 = v433;
            v178[0] = v434[0];
            *(_OWORD *)((char *)v178 + 9) = *(_OWORD *)((char *)v434 + 9);
            v174 = &off_1E335FF50;
            v179 = 1;
          }
          LOBYTE(v180) = 0;
          v183 = 0;
          if (v438)
          {
            v181 = v436;
            v180 = &off_1E335FF78;
            v182 = v437;
            v183 = 1;
          }
          LOBYTE(v184) = 0;
          v187 = 0;
          if (v441)
          {
            v185 = v439;
            v184 = &off_1E335FF78;
            v186 = v440;
            v187 = 1;
          }
          LOBYTE(v188) = 0;
          v191 = 0;
          if (v444)
          {
            v189 = v442;
            v188 = &off_1E335FF78;
            v190 = v443;
            v191 = 1;
          }
          v52 = v445;
          v445 = 0;
          v192 = v52;
          v53 = v446;
          v446 = 0;
          v193 = v53;
          v194 = v447;
          LOBYTE(v195) = 0;
          v198 = 0;
          if (v295)
          {
            v196 = v293;
            *(_OWORD *)v197 = v294[0];
            *(_OWORD *)&v197[13] = *(_OWORD *)((char *)v294 + 13);
            v195 = &off_1E335FF28;
            v198 = 1;
          }
          LOBYTE(v199) = 0;
          v202 = 0;
          if (v298)
          {
            v200 = v296;
            v201[0] = v297[0];
            *(_OWORD *)((char *)v201 + 13) = *(_OWORD *)((char *)v297 + 13);
            v199 = &off_1E335FF28;
            v202 = 1;
          }
          LOBYTE(v203) = 0;
          v206 = 0;
          if (v301)
          {
            v204 = v299;
            v205[0] = v300[0];
            *(_OWORD *)((char *)v205 + 13) = *(_OWORD *)((char *)v300 + 13);
            v203 = &off_1E335FF28;
            v206 = 1;
          }
          LOBYTE(v207) = 0;
          v210 = 0;
          if (v304)
          {
            v208 = v302;
            *(_OWORD *)v209 = v303[0];
            *(_OWORD *)&v209[13] = *(_OWORD *)((char *)v303 + 13);
            v207 = &off_1E335FF28;
            v210 = 1;
          }
          LOBYTE(v211) = 0;
          v216 = 0;
          if (v309)
          {
            *(_OWORD *)((char *)v215 + 9) = *(_OWORD *)((char *)v308 + 9);
            v213 = v306;
            v212 = v305;
            v214 = v307;
            v215[0] = v308[0];
            v211 = &off_1E335FF50;
            v216 = 1;
          }
          LOBYTE(v217) = 0;
          v222 = 0;
          if (v314)
          {
            v218 = v310;
            v219 = v311;
            v220 = v312;
            v221[0] = v313[0];
            *(_OWORD *)((char *)v221 + 9) = *(_OWORD *)((char *)v313 + 9);
            v217 = &off_1E335FF50;
            v222 = 1;
          }
          LOBYTE(v223) = 0;
          v228 = 0;
          if (v319)
          {
            *(_OWORD *)((char *)v227 + 9) = *(_OWORD *)((char *)v318 + 9);
            v225 = v316;
            v224 = v315;
            v226 = v317;
            v227[0] = v318[0];
            v223 = &off_1E335FF50;
            v228 = 1;
          }
          LOBYTE(v229) = 0;
          v232 = 0;
          if (v322)
          {
            v230 = v320;
            v229 = &off_1E335FF78;
            v231 = v321;
            v232 = 1;
          }
          LOBYTE(v233) = 0;
          v236 = 0;
          if (v325)
          {
            v234 = v323;
            v233 = &off_1E335FF78;
            v235 = v324;
            v236 = 1;
          }
          LOBYTE(v237) = 0;
          v240 = 0;
          if (v328)
          {
            v238 = v326;
            v237 = &off_1E335FF78;
            v239 = v327;
            v240 = 1;
          }
          LOBYTE(v241) = 0;
          v247 = 0;
          if (v334)
          {
            v242 = v329;
            v241 = &off_1E335FFA0;
            v54 = v330;
            v330 = 0;
            v243 = v54;
            v55 = v331;
            v331 = 0;
            v244 = v55;
            v56 = v332;
            v332 = 0;
            v245 = v56;
            v57 = v333;
            v333 = 0;
            v246 = v57;
            v247 = 1;
          }
          LOBYTE(v248) = 0;
          v254 = 0;
          if (v340)
          {
            v249 = v335;
            v248 = &off_1E335FFA0;
            v58 = v336;
            v336 = 0;
            v250 = v58;
            v59 = v337;
            v337 = 0;
            v251 = v59;
            v60 = v338;
            v338 = 0;
            v252 = v60;
            v61 = v339;
            v339 = 0;
            v253 = v61;
            v254 = 1;
          }
          LOBYTE(v255) = 0;
          v261 = 0;
          if (v346)
          {
            v256 = v341;
            v255 = &off_1E335FFA0;
            v62 = v342;
            v342 = 0;
            v257 = v62;
            v63 = v343;
            v343 = 0;
            v258 = v63;
            v64 = v344;
            v344 = 0;
            v259 = v64;
            v65 = v345;
            v345 = 0;
            v260 = v65;
            v261 = 1;
          }
          LOBYTE(v262) = 0;
          v268 = 0;
          if (v352)
          {
            v263 = v347;
            v262 = &off_1E335FFA0;
            v66 = v348;
            v348 = 0;
            v264 = v66;
            v67 = v349;
            v349 = 0;
            v265 = v67;
            v68 = v350;
            v350 = 0;
            v266 = v68;
            v69 = v351;
            v351 = 0;
            v267 = v69;
            v268 = 1;
          }
          LOBYTE(v269) = 0;
          v274 = 0;
          if (v357)
          {
            *(_OWORD *)((char *)v273 + 9) = *(_OWORD *)((char *)v356 + 9);
            v271 = v354;
            v270 = v353;
            v272 = v355;
            v273[0] = v356[0];
            v269 = &off_1E335FF50;
            v274 = 1;
          }
          LOBYTE(v275) = 0;
          v278 = 0;
          if (v360)
          {
            v276 = v358;
            v275 = &off_1E335FF78;
            v277 = v359;
            v278 = 1;
          }
          LOBYTE(v279) = 0;
          v282 = 0;
          if (v363)
          {
            v280 = v361;
            v279 = &off_1E335FF78;
            v281 = v362;
            v282 = 1;
          }
          LOBYTE(v283) = 0;
          v286 = 0;
          if (v366)
          {
            v284 = v364;
            v283 = &off_1E335FF78;
            v285 = v365;
            v286 = 1;
          }
          v70 = v367;
          v367 = 0;
          v287 = v70;
          v71 = v368;
          v368 = 0;
          v288 = v71;
          v289 = v369;
          v290 = v28;
          v72 = *(_QWORD *)(v12 + 240);
          if (v72)
          {
            v73 = *(_QWORD *)(v72 + 8);
            if (v73)
            {
              v74 = *(_QWORD *)(v73 + 24);
              if (v74)
              {
                v75 = *(_QWORD *)(v74 + 8);
                if (v75)
                {
                  if (*(_BYTE *)(v75 + 40))
                  {
                    v291 = *(_QWORD *)(v75 + 32);
                    v76 = WTF::fastMalloc((WTF *)0x1080);
                    v77 = (_QWORD *)WebCore::UserMediaRequest::UserMediaRequest((WebCore::ContextDestructionObserver *)v76, v12 - 288, (uint64_t)&v99, a2 + 1088, a2, a3);
                    WebCore::ActiveDOMObject::suspendIfNeeded(v77);
                    WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v195, v78);
                    WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v100, v79);
                    if ((*(_QWORD *)(*(_QWORD *)(v12 + 392) + 712) & 0x40000) == 0)
                    {
                      WebCore::UserMediaRequest::start((WebCore::UserMediaRequest *)v76);
                      if (*(_DWORD *)(v76 + 24) == 1)
                        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
                      else
                        --*(_DWORD *)(v76 + 24);
                      goto LABEL_28;
                    }
                    v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    v81 = v80;
                    *(_QWORD *)v80 = &off_1E335F760;
                    *((_QWORD *)v80 + 1) = v76;
                    v99 = v80;
                    v82 = *(_QWORD *)(v12 + 240);
                    if (v82
                      && (v83 = *(_QWORD *)(v82 + 8)) != 0
                      && (v84 = *(_QWORD *)(v83 + 24)) != 0
                      && (v85 = *(_QWORD *)(v84 + 8)) != 0
                      && !*(_BYTE *)(v12 + 3149)
                      && (*(_WORD *)(v85 + 658) & 4) != 0)
                    {
                      v93 = *(_QWORD *)(v76 + 8);
                      if (v93)
                      {
                        v94 = *(_QWORD *)(v93 + 8);
                        if (v94)
                        {
                          if (!*(_BYTE *)(v94 + 180))
                            WebCore::UserMediaRequest::start((WebCore::UserMediaRequest *)v76);
                        }
                      }
                      v99 = 0;
                    }
                    else
                    {
                      v86 = *(unsigned int *)(v12 + 2876);
                      if ((_DWORD)v86 != *(_DWORD *)(v12 + 2872))
                      {
                        *(_QWORD *)(*(_QWORD *)(v12 + 2864) + 8 * v86) = v80;
                        *(_DWORD *)(v12 + 2876) = v86 + 1;
                        goto LABEL_28;
                      }
                      v87 = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 2864, v86 + 1, (unint64_t)&v99);
                      v88 = *(unsigned int *)(v12 + 2876);
                      v89 = *(_QWORD *)(v12 + 2864);
                      v90 = *v87;
                      *v87 = 0;
                      *(_QWORD *)(v89 + 8 * v88) = v90;
                      *(_DWORD *)(v12 + 2876) = v88 + 1;
                      v81 = v99;
                      v99 = 0;
                      if (!v81)
                      {
LABEL_28:
                        if (*(_DWORD *)(v13 + 24) == 2)
                        {
                          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v13);
                        }
                        else
                        {
                          *(_DWORD *)(v13 + 24) -= 2;
                        }
                        goto LABEL_30;
                      }
                    }
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v81 + 8))(v81);
                    goto LABEL_28;
                  }
                }
              }
            }
          }
          goto LABEL_162;
        }
        v95 = v445;
        v96 = 944 * HIDWORD(v446);
        while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v95))
        {
          v95 += 944;
          v96 -= 944;
          if (!v96)
          {
            v97 = *(uint64_t (***)())v91;
            goto LABEL_159;
          }
        }
        v92 = *(uint64_t (***)())v91;
      }
      ((void (*)(uint64_t))v92[1])(v91);
      goto LABEL_32;
    }
    v22 = 0;
LABEL_19:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = *a3;
    v448 = 8;
    v450[0] = 0;
    LOBYTE(v99) = 8;
    v24 = v449;
    if (v449)
      *(_DWORD *)v449 += 2;
    v100 = v24;
    WebCore::DeferredPromise::reject(v23, (unsigned __int8 *)&v99, 0, v450);
    v25 = v100;
    v100 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v9);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v449;
    v449 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v9);
        if ((v22 & 1) == 0)
          goto LABEL_28;
LABEL_30:
        WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v292, v9);
        WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v370, v27);
        return;
      }
      *(_DWORD *)v26 -= 2;
    }
    if ((v22 & 1) == 0)
      goto LABEL_28;
    goto LABEL_30;
  }
  __break(0xC471u);
LABEL_162:
  __break(1u);
LABEL_163:
  v98 = std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::MediaDevices::getDisplayMedia(v98);
}

void WebCore::MediaDevices::getDisplayMedia(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::Node *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  objc_class **v12;
  objc_class **v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebCore::Node *i;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::ContextDestructionObserver *v57;
  _QWORD *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  objc_class **v68;
  WTF::StringImpl *v69[121];
  void (**v70)(WebCore::IntConstraint *__hidden);
  char v71;
  _OWORD v72[2];
  char v73;
  void (**v74)(WebCore::IntConstraint *__hidden);
  char v75;
  _OWORD v76[2];
  char v77;
  void (**v78)(WebCore::IntConstraint *__hidden);
  char v79;
  _OWORD v80[2];
  char v81;
  void (**v82)(WebCore::IntConstraint *__hidden);
  char v83;
  _OWORD v84[2];
  char v85;
  void (**v86)(WebCore::DoubleConstraint *__hidden);
  char v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];
  char v91;
  void (**v92)(WebCore::DoubleConstraint *__hidden);
  char v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  char v97;
  void (**v98)(WebCore::DoubleConstraint *__hidden);
  char v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[2];
  char v103;
  void (**v104)(WebCore::BooleanConstraint *__hidden);
  char v105;
  int v106;
  char v107;
  void (**v108)(WebCore::BooleanConstraint *__hidden);
  char v109;
  int v110;
  char v111;
  void (**v112)(WebCore::BooleanConstraint *__hidden);
  char v113;
  int v114;
  char v115;
  void (**v116)(WebCore::StringConstraint *__hidden);
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  void (**v123)(WebCore::StringConstraint *__hidden);
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  void (**v130)(WebCore::StringConstraint *__hidden);
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  void (**v137)(WebCore::StringConstraint *__hidden);
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  void (**v144)(WebCore::DoubleConstraint *__hidden);
  char v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[2];
  char v149;
  void (**v150)(WebCore::BooleanConstraint *__hidden);
  char v151;
  int v152;
  char v153;
  void (**v154)(WebCore::BooleanConstraint *__hidden);
  char v155;
  int v156;
  char v157;
  void (**v158)(WebCore::BooleanConstraint *__hidden);
  char v159;
  int v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD v168[5];
  char v169;
  char v170;
  _OWORD v171[2];
  char v172;
  char v173;
  _OWORD v174[2];
  char v175;
  char v176;
  _OWORD v177[2];
  char v178;
  char v179;
  __int128 v180;
  __int128 v181;
  _OWORD v182[2];
  char v183;
  char v184;
  __int128 v185;
  __int128 v186;
  _OWORD v187[2];
  char v188;
  char v189;
  __int128 v190;
  __int128 v191;
  _OWORD v192[2];
  char v193;
  char v194;
  int v195;
  char v196;
  char v197;
  int v198;
  char v199;
  char v200;
  int v201;
  char v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  char v227;
  __int128 v228;
  __int128 v229;
  _OWORD v230[2];
  char v231;
  char v232;
  int v233;
  char v234;
  char v235;
  int v236;
  char v237;
  char v238;
  int v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  objc_class *v244;
  WTF::StringImpl *v245;
  objc_class *v246;

  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if (*(_BYTE *)(v9 + 178))
      {
        __break(0xC471u);
        goto LABEL_101;
      }
      v4 = a3;
      v5 = a2;
      v3 = (WebCore::Node *)(v9 - 288);
      v7 = (_DWORD *)(v9 - 264);
      *(_DWORD *)(v9 - 264) += 2;
      v10 = WebCore::MediaDevices::computeUserGesturePriviledge(a1, 4);
      if (!v10)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v21 = *v4;
        LOBYTE(v167) = 8;
        v244 = 0;
        LOBYTE(v68) = 8;
        v22 = (WTF::StringImpl *)v168[0];
        if (v168[0])
          *(_DWORD *)v168[0] += 2;
        v69[0] = v22;
        WebCore::DeferredPromise::reject(v21, (unsigned __int8 *)&v68, 0, &v244);
        v23 = v69[0];
        v69[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v20);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = (WTF::StringImpl *)v168[0];
        v168[0] = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
LABEL_29:
        if (*v7 == 2)
        {
          if ((*(_WORD *)(v9 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef(v3, v20);
        }
        else
        {
          *v7 -= 2;
        }
        return;
      }
      v11 = *(unsigned int *)(v5 + 1080);
      if ((_DWORD)v11 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v6 = v10;
        v68 = &v244;
        ((void (*)(uint64_t *__return_ptr, objc_class ***, uint64_t))*(&off_1E335F330 + v11))(&v167, &v68, v5 + 8);
        if (!v243 || HIDWORD(v242))
          goto LABEL_11;
        LOBYTE(v244) = 0;
        v12 = (objc_class **)WTF::fastMalloc((WTF *)0x10);
        *v12 = (objc_class *)off_1E335F350;
        v12[1] = (objc_class *)&v244;
        v68 = v12;
        WebCore::MediaTrackConstraintSetMap::filter((uint64_t)&v167, &v68);
        v13 = v68;
        v68 = 0;
        if (v13)
          (*((void (**)(objc_class **))*v13 + 1))(v13);
        if ((_BYTE)v244)
        {
LABEL_11:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v14 = *v4;
          v15 = 33;
          goto LABEL_12;
        }
        if (!WebCore::Document::isFullyActive((WebCore::Document *)(v9 - 288)))
        {
LABEL_49:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v14 = *v4;
          v15 = 8;
LABEL_12:
          LOBYTE(v244) = v15;
          v246 = 0;
          LOBYTE(v68) = v15;
          v16 = v245;
          if (v245)
            *(_DWORD *)v245 += 2;
          v69[0] = v16;
          WebCore::DeferredPromise::reject(v14, (unsigned __int8 *)&v68, 0, &v246);
          v18 = v69[0];
          v69[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v17);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = v245;
          v245 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v17);
            else
              *(_DWORD *)v19 -= 2;
          }
LABEL_20:
          WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v167, v17);
          goto LABEL_29;
        }
        if (*(_BYTE *)(v9 + 3074) || *(_BYTE *)(v9 + 3117))
          goto LABEL_102;
        v25 = *(_QWORD *)(v9 + 240);
        i = (WebCore::Node *)(v9 - 288);
        if (!v25
          || (v27 = *(_QWORD *)(v25 + 8), i = (WebCore::Node *)(v9 - 288), !v27)
          || ((v28 = *(_QWORD *)(*(_QWORD *)(v27 + 128) + 8)) != 0 ? (v29 = *(_BYTE *)(v28 + 144) == 0) : (v29 = 0),
              (i = (WebCore::Node *)(v9 - 288), !v29)
           || (v30 = *(WebCore::Node **)(v28 + 296), i = (WebCore::Node *)(v9 - 288), !v30)))
        {
LABEL_43:
          while (1)
          {
            v31 = *((_QWORD *)i + 66);
            if (!v31)
              goto LABEL_49;
            v32 = *(_QWORD *)(v31 + 8);
            if (!v32)
              goto LABEL_49;
            v33 = *(_QWORD *)(v32 + 24);
            if (!v33)
              goto LABEL_49;
            v34 = *(_QWORD *)(v33 + 8);
            if (!v34 || *((_BYTE *)i + 3437) || (*(_WORD *)(v34 + 658) & 4) == 0)
              goto LABEL_49;
            LOBYTE(v68) = 1;
            LOBYTE(v70) = 0;
            v73 = 0;
            bzero(v69, 0x3C1uLL);
            if (v169)
            {
              v71 = v168[0];
              v72[0] = *(_OWORD *)((char *)v168 + 4);
              *(_OWORD *)((char *)v72 + 13) = *(_OWORD *)((char *)&v168[2] + 1);
              v70 = &off_1E335FF28;
              v73 = 1;
            }
            LOBYTE(v74) = 0;
            v77 = 0;
            if (v172)
            {
              v75 = v170;
              v76[0] = v171[0];
              *(_OWORD *)((char *)v76 + 13) = *(_OWORD *)((char *)v171 + 13);
              v74 = &off_1E335FF28;
              v77 = 1;
            }
            LOBYTE(v78) = 0;
            v81 = 0;
            if (v175)
            {
              v79 = v173;
              v80[0] = v174[0];
              *(_OWORD *)((char *)v80 + 13) = *(_OWORD *)((char *)v174 + 13);
              v78 = &off_1E335FF28;
              v81 = 1;
            }
            LOBYTE(v82) = 0;
            v85 = 0;
            if (v178)
            {
              v83 = v176;
              v84[0] = v177[0];
              *(_OWORD *)((char *)v84 + 13) = *(_OWORD *)((char *)v177 + 13);
              v82 = &off_1E335FF28;
              v85 = 1;
            }
            LOBYTE(v86) = 0;
            v91 = 0;
            if (v183)
            {
              *(_OWORD *)((char *)v90 + 9) = *(_OWORD *)((char *)v182 + 9);
              v88 = v180;
              v87 = v179;
              v89 = v181;
              v90[0] = v182[0];
              v86 = &off_1E335FF50;
              v91 = 1;
            }
            LOBYTE(v92) = 0;
            v97 = 0;
            if (v188)
            {
              v93 = v184;
              v94 = v185;
              v95 = v186;
              v96[0] = v187[0];
              *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v187 + 9);
              v92 = &off_1E335FF50;
              v97 = 1;
            }
            LOBYTE(v98) = 0;
            v103 = 0;
            if (v193)
            {
              *(_OWORD *)((char *)v102 + 9) = *(_OWORD *)((char *)v192 + 9);
              v100 = v190;
              v99 = v189;
              v101 = v191;
              v102[0] = v192[0];
              v98 = &off_1E335FF50;
              v103 = 1;
            }
            LOBYTE(v104) = 0;
            v107 = 0;
            if (v196)
            {
              v105 = v194;
              v104 = &off_1E335FF78;
              v106 = v195;
              v107 = 1;
            }
            LOBYTE(v108) = 0;
            v111 = 0;
            if (v199)
            {
              v109 = v197;
              v108 = &off_1E335FF78;
              v110 = v198;
              v111 = 1;
            }
            LOBYTE(v112) = 0;
            v115 = 0;
            if (v202)
            {
              v113 = v200;
              v112 = &off_1E335FF78;
              v114 = v201;
              v115 = 1;
            }
            LOBYTE(v116) = 0;
            v122 = 0;
            if (v208)
            {
              v117 = v203;
              v116 = &off_1E335FFA0;
              v35 = v204;
              v204 = 0;
              v118 = v35;
              v36 = v205;
              v205 = 0;
              v119 = v36;
              v37 = v206;
              v206 = 0;
              v120 = v37;
              v38 = v207;
              v207 = 0;
              v121 = v38;
              v122 = 1;
            }
            LOBYTE(v123) = 0;
            v129 = 0;
            if (v214)
            {
              v124 = v209;
              v123 = &off_1E335FFA0;
              v39 = v210;
              v210 = 0;
              v125 = v39;
              v40 = v211;
              v211 = 0;
              v126 = v40;
              v41 = v212;
              v212 = 0;
              v127 = v41;
              v42 = v213;
              v213 = 0;
              v128 = v42;
              v129 = 1;
            }
            LOBYTE(v130) = 0;
            v136 = 0;
            if (v220)
            {
              v131 = v215;
              v130 = &off_1E335FFA0;
              v43 = v216;
              v216 = 0;
              v132 = v43;
              v44 = v217;
              v217 = 0;
              v133 = v44;
              v45 = v218;
              v218 = 0;
              v134 = v45;
              v46 = v219;
              v219 = 0;
              v135 = v46;
              v136 = 1;
            }
            LOBYTE(v137) = 0;
            v143 = 0;
            if (v226)
            {
              v138 = v221;
              v137 = &off_1E335FFA0;
              v47 = v222;
              v222 = 0;
              v139 = v47;
              v48 = v223;
              v223 = 0;
              v140 = v48;
              v49 = v224;
              v224 = 0;
              v141 = v49;
              v50 = v225;
              v225 = 0;
              v142 = v50;
              v143 = 1;
            }
            LOBYTE(v144) = 0;
            v149 = 0;
            if (v231)
            {
              *(_OWORD *)((char *)v148 + 9) = *(_OWORD *)((char *)v230 + 9);
              v146 = v228;
              v145 = v227;
              v147 = v229;
              v148[0] = v230[0];
              v144 = &off_1E335FF50;
              v149 = 1;
            }
            LOBYTE(v150) = 0;
            v153 = 0;
            if (v234)
            {
              v151 = v232;
              v150 = &off_1E335FF78;
              v152 = v233;
              v153 = 1;
            }
            LOBYTE(v154) = 0;
            v157 = 0;
            if (v237)
            {
              v155 = v235;
              v154 = &off_1E335FF78;
              v156 = v236;
              v157 = 1;
            }
            LOBYTE(v158) = 0;
            v161 = 0;
            if (v240)
            {
              v159 = v238;
              v158 = &off_1E335FF78;
              v160 = v239;
              v161 = 1;
            }
            v51 = v241;
            v241 = 0;
            v162 = v51;
            v52 = v242;
            v242 = 0;
            v163 = v52;
            v164 = v243;
            v165 = v6;
            v53 = *(_QWORD *)(v9 + 240);
            if (v53)
            {
              v54 = *(_QWORD *)(v53 + 8);
              if (v54)
              {
                v55 = *(_QWORD *)(v54 + 24);
                if (v55)
                {
                  v56 = *(_QWORD *)(v55 + 8);
                  if (v56)
                  {
                    if (*(_BYTE *)(v56 + 40))
                    {
                      v166 = *(_QWORD *)(v56 + 32);
                      v57 = (WebCore::ContextDestructionObserver *)WTF::fastMalloc((WTF *)0x1080);
                      v58 = (_QWORD *)WebCore::UserMediaRequest::UserMediaRequest(v57, (uint64_t)v3, (uint64_t)&v68, v5 + 1088, v5, v4);
                      WebCore::ActiveDOMObject::suspendIfNeeded(v58);
                      WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)&v70, v59);
                      WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)v69, v60);
                      WebCore::UserMediaRequest::start(v57);
                      if (*((_DWORD *)v57 + 6) == 1)
                        (*(void (**)(WebCore::ContextDestructionObserver *))(*(_QWORD *)v57 + 16))(v57);
                      else
                        --*((_DWORD *)v57 + 6);
                      goto LABEL_20;
                    }
                  }
                }
              }
            }
LABEL_101:
            __break(1u);
LABEL_102:
            v61 = *(_QWORD *)(v9 + 240);
            i = v3;
            if (v61)
            {
              v62 = *(_QWORD *)(v61 + 8);
              i = v3;
              if (v62)
              {
                v63 = *(_QWORD *)(v62 + 120);
                i = v3;
                if (v63)
                {
                  v64 = *(_QWORD *)(v63 + 8);
                  for (i = v3; v64; v64 = *(_QWORD *)(v67 + 8))
                  {
                    i = *(WebCore::Node **)(*(_QWORD *)(v64 + 40) + 8);
                    v65 = *((_QWORD *)i + 66);
                    if (!v65)
                      break;
                    v66 = *(_QWORD *)(v65 + 8);
                    if (!v66)
                      break;
                    v67 = *(_QWORD *)(v66 + 120);
                    if (!v67)
                      break;
                  }
                }
              }
            }
          }
        }
      }
      i = v30;
      goto LABEL_43;
    }
  }
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::String const&>@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  WTF **v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unsigned int v51;
  const WTF::StringImpl *v52;
  uint64_t v53;
  int v54;

  v4 = a3;
  v5 = a1;
  v8 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  if (10 * v7 >= (unint64_t)(9 * v8) || *(_BYTE *)(a1 + 20) && v8 <= 2 * (int)v7)
  {
    if ((_DWORD)v8)
      v51 = 2 * v8;
    else
      v51 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v51);
    v8 = *(unsigned int *)(v5 + 8);
  }
  v9 = v8 - 1;
  v10 = *(_DWORD *)(v5 + 16);
  v11 = *((_DWORD *)*a2 + 4);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v12 = v11 >> 8;
  v13 = (v12 ^ v10) & v9;
  v14 = *(_QWORD *)v5;
  v15 = *(_QWORD *)v5 + 16 * v13;
  v16 = *(WTF **)v15;
  if (*(_QWORD *)v15)
  {
    v52 = v4;
    v53 = a4;
    v17 = 0;
    while (1)
    {
      v18 = *((_DWORD *)v16 + 4);
      v19 = v18 < 0x100 ? WTF::StringImpl::hashSlowCase(v16) : v18 >> 8;
      v20 = (v13 + v8 - ((v19 ^ v10) & v9)) & v9;
      if (v17 > v20)
        break;
      if (v19 == v12)
      {
        result = (WTF::StringImpl *)WTF::equal(*(WTF **)v15, *a2, a3);
        v14 = *(_QWORD *)v5;
        if ((result & 1) != 0)
        {
          v49 = 0;
          a4 = v53;
          goto LABEL_28;
        }
      }
      else
      {
        v14 = *(_QWORD *)v5;
      }
      v13 = ((_DWORD)v13 + 1) & v9;
      ++v17;
      v15 = v14 + 16 * v13;
      v16 = *(WTF **)v15;
      if (!*(_QWORD *)v15)
      {
        if (v17 >= 0x80)
          *(_BYTE *)(v5 + 20) = 1;
        v4 = v52;
        a4 = v53;
        goto LABEL_20;
      }
    }
    if (v17 >= 0x80)
      *(_BYTE *)(v5 + 20) = 1;
    v27 = *(WTF **)v15;
    *(_QWORD *)v15 = 0;
    v28 = v14 + 16 * v13;
    v31 = *(_QWORD *)(v28 + 8);
    v29 = (WTF::StringImpl **)(v28 + 8);
    v30 = v31;
    *v29 = 0;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    v32 = *a2;
    if (*a2)
      *(_DWORD *)v32 += 2;
    *(_QWORD *)v15 = v32;
    v33 = *(WTF::StringImpl **)v52;
    if (*(_QWORD *)v52)
      *(_DWORD *)v33 += 2;
    v34 = *v29;
    *v29 = v33;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        v50 = v30;
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
        v30 = v50;
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = ((_DWORD)v13 + 1) & v9;
    v36 = *(_QWORD *)v5;
    v37 = (WTF **)(*(_QWORD *)v5 + 16 * v35);
    v38 = *v37;
    if (*v37)
    {
      v54 = v10;
      do
      {
        v39 = *((_DWORD *)v38 + 4);
        if (v39 < 0x100)
        {
          v41 = v5;
          v42 = v8;
          v43 = v27;
          v44 = v30;
          v40 = WTF::StringImpl::hashSlowCase(v38);
          v30 = v44;
          v27 = v43;
          v8 = v42;
          v5 = v41;
          v10 = v54;
        }
        else
        {
          v40 = v39 >> 8;
        }
        if (++v20 > (((_DWORD)v35 + (_DWORD)v8 - ((v40 ^ v10) & v9)) & v9))
        {
          v45 = *v37;
          *v37 = 0;
          v46 = v36 + 16 * v35;
          v47 = *(_QWORD *)(v46 + 8);
          *v37 = v27;
          *(_QWORD *)(v46 + 8) = v30;
          v30 = v47;
          v27 = v45;
          v20 = (v35 + v8 - ((v40 ^ v10) & v9)) & v9;
        }
        v35 = ((_DWORD)v35 + 1) & v9;
        v36 = *(_QWORD *)v5;
        v37 = (WTF **)(*(_QWORD *)v5 + 16 * v35);
        v38 = *v37;
      }
      while (*v37);
    }
    *v37 = v27;
    v48 = v36 + 16 * v35;
    result = *(WTF::StringImpl **)(v48 + 8);
    *(_QWORD *)(v48 + 8) = v30;
    if (!result)
    {
      a4 = v53;
      goto LABEL_27;
    }
    v25 = *(_DWORD *)result - 2;
    a4 = v53;
    if (*(_DWORD *)result != 2)
      goto LABEL_26;
LABEL_48:
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    goto LABEL_27;
  }
LABEL_20:
  v22 = *a2;
  if (*a2)
    *(_DWORD *)v22 += 2;
  *(_QWORD *)v15 = v22;
  v23 = (WTF::StringImpl **)(v14 + 16 * v13 + 8);
  v24 = *(WTF::StringImpl **)v4;
  if (*(_QWORD *)v4)
    *(_DWORD *)v24 += 2;
  result = *v23;
  *v23 = v24;
  if (!result)
    goto LABEL_27;
  v25 = *(_DWORD *)result - 2;
  if (*(_DWORD *)result == 2)
    goto LABEL_48;
LABEL_26:
  *(_DWORD *)result = v25;
LABEL_27:
  ++*(_DWORD *)(v5 + 12);
  v14 = *(_QWORD *)v5;
  v49 = 1;
LABEL_28:
  v26 = v14 + 16 * *(unsigned int *)(v5 + 8);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v49;
  return result;
}

uint64_t WebCore::MediaDevices::enumerateDevices(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  void *v12;
  WebCore::UserMediaController *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v5 = (_DWORD *)(v3 - 264);
      *(_DWORD *)(v3 - 264) += 2;
      v6 = *(_QWORD *)(v3 + 240);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 8);
            if (v9)
            {
              v10 = result;
              v19 = "UserMediaController";
              v20 = 20;
              v11 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v9 + 8), &v19);
              if (v11)
              {
                v13 = (WebCore::UserMediaController *)v11[2];
                if (v13)
                {
                  if ((WebCore::PermissionsPolicy::isFeatureEnabled(0, (_QWORD *)(v3 - 288), 0) & 1) != 0
                    || (WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v3 - 288), 0) & 1) != 0)
                  {
                    v14 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(v10);
                    v15 = v14;
                    if (v14)
                    {
                      do
                        v16 = __ldaxr(v14);
                      while (__stlxr(v16 + 1, v14));
                    }
                    v17 = *a2;
                    *a2 = 0;
                    v18 = WTF::fastMalloc((WTF *)0x20);
                    *(_QWORD *)v18 = &off_1E335F7A8;
                    *(_QWORD *)(v18 + 8) = v10;
                    *(_QWORD *)(v18 + 16) = v15;
                    *(_QWORD *)(v18 + 24) = v17;
                    v19 = (const char *)v18;
                    (*(void (**)(_QWORD *, uint64_t, const char **))(**((_QWORD **)v13 + 1) + 24))(*((_QWORD **)v13 + 1), v3 - 288, &v19);
                    result = (uint64_t)v19;
                    v19 = 0;
                    if (result)
                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                    goto LABEL_10;
                  }
                  WebCore::UserMediaController::logEnumerateDevicesDenial(v13, (WebCore::Document *)(v3 - 288));
                }
              }
            }
          }
        }
      }
      v19 = 0;
      v20 = 0;
      result = WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::MediaDeviceInfo>,WebCore::IDLInterface<WebCore::InputDeviceInfo>>>>(*a2, (uint64_t *)&v19);
LABEL_10:
      if (*v5 == 2)
      {
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v12);
      }
      else
      {
        *v5 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaDevices::scheduledEventTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        this = 105;
        __break(0xC471u);
        return this;
      }
      v3 = this;
      v4 = (_DWORD *)(v2 - 264);
      *(_DWORD *)(v2 - 264) += 2;
      v5 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v5 = 1;
      ++*(_DWORD *)(v3 + 24);
      *(_QWORD *)(v5 + 8) = v3;
      ++*(_QWORD *)(v3 + 16);
      this = WTF::fastMalloc((WTF *)0x18);
      v6 = this;
      *(_QWORD *)this = &off_1E335F7D0;
      *(_QWORD *)(this + 8) = v5;
      *(_QWORD *)(this + 16) = v3;
      v15 = this;
      v7 = *(_QWORD *)(v2 + 240);
      if (v7
        && (v8 = *(_QWORD *)(v7 + 8)) != 0
        && (v9 = *(_QWORD *)(v8 + 24)) != 0
        && (v10 = *(_QWORD *)(v9 + 8)) != 0
        && !*(_BYTE *)(v2 + 3149)
        && (*(_WORD *)(v10 + 658) & 4) != 0)
      {
        WTF::Detail::CallableWrapper<WebCore::MediaDevices::scheduledEventTimerFired(void)::$_0,void>::call((WebCore *)this);
        v15 = 0;
      }
      else
      {
        v11 = *(unsigned int *)(v2 + 2876);
        if ((_DWORD)v11 != *(_DWORD *)(v2 + 2872))
        {
          *(_QWORD *)(*(_QWORD *)(v2 + 2864) + 8 * v11) = this;
          *(_DWORD *)(v2 + 2876) = v11 + 1;
          goto LABEL_16;
        }
        this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 2864, v11 + 1, (unint64_t)&v15);
        v12 = *(unsigned int *)(v2 + 2876);
        v13 = *(_QWORD *)(v2 + 2864);
        v14 = *(_QWORD *)this;
        *(_QWORD *)this = 0;
        *(_QWORD *)(v13 + 8 * v12) = v14;
        *(_DWORD *)(v2 + 2876) = v12 + 1;
        v6 = v15;
        v15 = 0;
        if (!v6)
        {
LABEL_16:
          if (*v4 == 2)
          {
            if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288));
          }
          else
          {
            *v4 -= 2;
          }
          return this;
        }
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      goto LABEL_16;
    }
  }
  return this;
}

uint64_t WebCore::MediaDevices::listenForDeviceChanges(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isFeatureEnabled;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16[2];

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v4 = (_DWORD *)(v3 - 264);
        *(_DWORD *)(v3 - 264) += 2;
        v5 = *(_QWORD *)(v3 + 240);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 24);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 8);
              if (v8)
              {
                v9 = this;
                v16[0] = "UserMediaController";
                v16[1] = (const char *)20;
                this = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v8 + 8), v16);
                if (this)
                {
                  v10 = *(_QWORD *)(this + 16);
                  if (v10)
                  {
                    isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(0, (_QWORD *)(v3 - 288), 0);
                    this = WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v3 - 288), 0);
                    if (!*(_BYTE *)(v9 + 104))
                    {
                      if (isFeatureEnabled | this)
                      {
                        *(_BYTE *)(v9 + 104) = 1;
                        v12 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(v9);
                        v13 = v12;
                        if (v12)
                        {
                          do
                            v14 = __ldaxr(v12);
                          while (__stlxr(v14 + 1, v12));
                        }
                        v15 = WTF::fastMalloc((WTF *)0x18);
                        *(_QWORD *)v15 = &off_1E335F7F8;
                        *(_QWORD *)(v15 + 8) = v13;
                        *(_QWORD *)(v15 + 16) = v9;
                        v16[0] = (const char *)v15;
                        *(_QWORD *)(v9 + 88) = (*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(v10 + 8)
                                                                                                + 32))(*(_QWORD *)(v10 + 8), v16);
                        this = (uint64_t)v16[0];
                        v16[0] = 0;
                        if (this)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (*v4 == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
        }
        else
        {
          *v4 -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::MediaDevices::addEventListener(WebCore::MediaDevices *this, _QWORD *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(this);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  if (*a2 == *(_QWORD *)(v10 + 600))
    WebCore::MediaDevices::listenForDeviceChanges((uint64_t)this, a2);
  return WebCore::EventTarget::addEventListener((WebCore::MediaDevices *)((char *)this + 32), (WTF::StringImpl **)a2, a3, a4);
}

uint64_t `non-virtual thunk to'WebCore::MediaDevices::addEventListener(WebCore *a1, _QWORD *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
    v9 = WebCore::threadGlobalDataSlow(a1);
  v10 = *(_QWORD *)(v9 + 40);
  if (!v10)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
    v10 = *(_QWORD *)(v9 + 40);
  }
  if (*a2 == *(_QWORD *)(v10 + 600))
    WebCore::MediaDevices::listenForDeviceChanges((uint64_t)a1 - 32, a2);
  return WebCore::EventTarget::addEventListener(a1, (WTF::StringImpl **)a2, a3, a4);
}

void *WebCore::MediaStream::bisoHeap(WebCore::MediaStream *this)
{
  return &WebCore::MediaStream::bisoHeap(void)::heap;
}

uint64_t WebCore::MediaStream::operator new(uint64_t this)
{
  if (this == 136)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

unsigned int *WebCore::MediaStream::create@<X0>(WebCore::MediaStream *this@<X0>, uint64_t *a2@<X8>)
{
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::MediaStreamPrivate *v12;
  WTF::StringImpl *v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  _QWORD v21[2];
  unsigned int *v22;
  WebCore::MediaStreamPrivate *v23;

  v5 = (WTF *)WebCore::Document::logger(this);
  v6 = (unsigned int *)((char *)v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v21[1] = 0;
  v22 = (unsigned int *)v5;
  v21[0] = 0;
  WTF::createVersion4UUIDString(v5);
  v8 = WTF::fastMalloc((WTF *)0x70);
  v23 = (WebCore::MediaStreamPrivate *)WebCore::MediaStreamPrivate::MediaStreamPrivate(v8, (uint64_t *)&v22, (uint64_t)v21, (uint64_t *)&v20);
  v9 = bmalloc::api::isoAllocate();
  v10 = WebCore::MediaStream::MediaStream(v9, (uint64_t)this, (uint64_t *)&v23);
  *a2 = v10;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v10 + 24));
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v12, v11);
      WTF::fastFree(v18, v19);
    }
    else
    {
      --*((_DWORD *)v12 + 4);
    }
  }
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    v15 = result + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

_QWORD *WebCore::MediaStream::create@<X0>(WebCore::MediaStream *this@<X0>, WebCore::Document *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  WTF *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t v25;

  result = (_QWORD *)bmalloc::api::isoAllocate();
  v8 = result;
  v9 = *((unsigned int *)a2 + 29);
  if (!(_DWORD)v9)
  {
    v24 = 0;
    v25 = 0;
    WebCore::MediaStream::MediaStream(result, this, &v24);
    *a3 = v8;
    return WebCore::ActiveDOMObject::suspendIfNeeded(v8 + 3);
  }
  v10 = (_QWORD *)*((_QWORD *)a2 + 13);
  v11 = *((unsigned int *)a2 + 28);
  v12 = &v10[2 * v11];
  if ((_DWORD)v11)
  {
    v13 = 16 * v11;
    while (!*v10)
    {
      v10 += 2;
      v13 -= 16;
      if (!v13)
      {
        v10 = v12;
        break;
      }
    }
  }
  v25 = 0;
  if (!(v9 >> 29))
  {
    v14 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v9));
    v15 = (WTF *)v14;
    LODWORD(v25) = v9;
    v24 = v14;
    if (v10 == v12)
    {
      WebCore::MediaStream::MediaStream(v8, this, &v24);
      *a3 = v8;
    }
    else
    {
      v16 = 0;
      v17 = 1;
LABEL_10:
      v18 = v17;
      v19 = v10[1];
      ++*(_DWORD *)(v19 + 24);
      v14[v16++] = v19;
      while (1)
      {
        v10 += 2;
        if (v10 == v12)
          break;
        if (*v10)
        {
          v17 = v18 + 1;
          if (v10 != v12)
            goto LABEL_10;
          break;
        }
      }
      HIDWORD(v25) = v16;
      WebCore::MediaStream::MediaStream(v8, this, &v24);
      *a3 = v8;
      if (v16)
      {
        v21 = 8 * v18;
        v22 = v15;
        do
        {
          v23 = *(_DWORD **)v22;
          *(_QWORD *)v22 = 0;
          if (v23)
          {
            if (v23[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[6];
          }
          v22 = (WTF *)((char *)v22 + 8);
          v21 -= 8;
        }
        while (v21);
      }
    }
    WTF::fastFree(v15, v20);
    return WebCore::ActiveDOMObject::suspendIfNeeded(v8 + 3);
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MediaStream::MediaStream(_QWORD *a1, WebCore::Document *a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Document *v8;
  WebCore::Document *v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  WebCore::MediaStreamTrackPrivate *v25;
  WTF *v26;
  void *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  WTF *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  _DWORD *v59;
  int i;
  uint64_t v61;
  uint64_t v62;
  WTF **v63;
  WTF::StringImpl *v64;
  unsigned int v65;
  int v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unsigned int *v82;
  WTF *v83;
  uint64_t v84;

  v5 = (uint64_t)a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E33A4FC0;
  v6 = (uint64_t)(a1 + 3);
  v7 = *((_QWORD *)a2 + 88);
  v8 = a2;
  if (v7)
  {
    v9 = *(WebCore::Document **)(v7 + 8);
    if (v9)
      v8 = v9;
    else
      v8 = a2;
  }
  a1[3] = &off_1E33A18C0;
  a1[4] = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 3), (WebCore::Document *)((char *)v8 + 192));
  *(_QWORD *)(v5 + 24) = &off_1E33A0540;
  *(_QWORD *)(v5 + 40) = 0;
  if (*((_BYTE *)v8 + 470))
  {
    __break(0xC471u);
    goto LABEL_91;
  }
  v82 = (unsigned int *)v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v8 + 40, (uint64_t *)&v82, (uint64_t)&v83);
  *(_QWORD *)(v5 + 48) = &unk_1E335FD60;
  *(_DWORD *)(v5 + 88) = 1;
  *(_QWORD *)v5 = off_1E335FC28;
  *(_QWORD *)(v5 + 24) = &unk_1E335FD08;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = &unk_1E335FDA0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = &unk_1E335FDC8;
  v10 = (WTF *)WebCore::Document::logger(a2);
  v11 = (unsigned int *)((char *)v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v82 = (unsigned int *)v10;
  v83 = 0;
  v84 = 0;
  v13 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v13)
  {
    v14 = 0;
    goto LABEL_16;
  }
  if (v13 >> 29)
  {
    __break(0xC471u);
LABEL_91:
    JUMPOUT(0x195468010);
  }
  v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
  v14 = v10;
  LODWORD(v84) = v13;
  v83 = v10;
  v15 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v15)
  {
    v13 = 0;
    v16 = *a3;
    v17 = 8 * v15;
    do
    {
      v18 = *(_QWORD *)(v16[v13] + 96);
      ++*(_DWORD *)(v18 + 8);
      *((_QWORD *)v10 + v13++) = v18;
      v17 -= 8;
    }
    while (v17);
    HIDWORD(v84) = v13;
  }
  else
  {
    LODWORD(v13) = 0;
  }
LABEL_16:
  WTF::createVersion4UUIDString(v10);
  v19 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)(v5 + 96) = WebCore::MediaStreamPrivate::MediaStreamPrivate(v19, (uint64_t *)&v82, (uint64_t)&v83, (uint64_t *)&v81);
  v22 = v81;
  v81 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      if (!(_DWORD)v13)
        goto LABEL_28;
      goto LABEL_20;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (!(_DWORD)v13)
    goto LABEL_28;
LABEL_20:
  v23 = 8 * v13;
  v24 = v14;
  do
  {
    v25 = *(WebCore::MediaStreamTrackPrivate **)v24;
    *(_QWORD *)v24 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 2) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v25, v20);
        WTF::fastFree(v26, v27);
      }
      else
      {
        --*((_DWORD *)v25 + 2);
      }
    }
    v24 = (WTF *)((char *)v24 + 8);
    v23 -= 8;
  }
  while (v23);
LABEL_28:
  if (v14)
    WTF::fastFree(v14, v20);
  v28 = v82;
  v82 = 0;
  if (v28)
  {
    v29 = v28 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  v76 = (_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  v32 = (uint64_t *)(v5 + 104);
  *(_QWORD *)(v5 + 117) = 0;
  *(_DWORD *)(v5 + 128) = 0;
  *(_DWORD *)(v5 + 131) = 0;
  v33 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v33)
  {
    v34 = *a3;
    v77 = (uint64_t)&(*a3)[v33];
    v78 = v5;
    while (1)
    {
      v79 = v34;
      v80 = *(_QWORD *)(*v34 + 96);
      v36 = *(unsigned int *)(v5 + 112);
      v35 = *(unsigned int *)(v5 + 116);
      if (10 * v35 >= (unint64_t)(9 * v36)
        || (v36 <= 2 * (int)v35 ? (v37 = *(_BYTE *)(v5 + 124) == 0) : (v37 = 1), !v37))
      {
        if ((_DWORD)v36)
          v38 = 2 * v36;
        else
          v38 = 8;
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v32, v38);
        LODWORD(v36) = *(_DWORD *)(v5 + 112);
      }
      v39 = *(_DWORD *)(v5 + 120);
      v40 = *(WTF::StringImpl **)(v80 + 48);
      v41 = *((_DWORD *)v40 + 4);
      v42 = v41 < 0x100 ? WTF::StringImpl::hashSlowCase(v40) : v41 >> 8;
      v43 = v36 - 1;
      v44 = (v42 ^ v39) & (v36 - 1);
      v45 = *v32;
      v46 = *v32 + 16 * v44;
      v47 = *(WTF **)v46;
      if (*(_QWORD *)v46)
        break;
LABEL_78:
      v72 = *(_DWORD **)(v80 + 48);
      if (v72)
        *v72 += 2;
      *(_QWORD *)v46 = v72;
      v73 = v45 + 16 * v44;
      v74 = *v79;
      *(_DWORD *)(v74 + 24) = *(_DWORD *)(*v79 + 24) + 1;
      v71 = *(_DWORD **)(v73 + 8);
      *(_QWORD *)(v73 + 8) = v74;
      if (v71)
        goto LABEL_81;
LABEL_83:
      ++*(_DWORD *)(v5 + 116);
LABEL_84:
      v5 = v78;
      v34 = v79 + 1;
      if (v79 + 1 == (uint64_t *)v77)
        goto LABEL_88;
    }
    v48 = 0;
    while (1)
    {
      v49 = *((_DWORD *)v47 + 4);
      v50 = v49 < 0x100 ? WTF::StringImpl::hashSlowCase(v47) : v49 >> 8;
      v51 = (v44 + v36 - ((v50 ^ v39) & v43)) & v43;
      if (v48 > v51)
        break;
      if (v50 == v42 && (WTF::equal(*(WTF **)v46, *(const WTF::StringImpl **)(v80 + 48), v21) & 1) != 0)
        goto LABEL_84;
      v45 = *v32;
      v44 = ((_DWORD)v44 + 1) & v43;
      ++v48;
      v46 = *v32 + 16 * v44;
      v47 = *(WTF **)v46;
      if (!*(_QWORD *)v46)
      {
        if (v48 < 0x80)
        {
          v5 = v78;
        }
        else
        {
          v5 = v78;
          *(_BYTE *)(v78 + 124) = 1;
        }
        goto LABEL_78;
      }
    }
    if (v48 >= 0x80)
      *(_BYTE *)(v78 + 124) = 1;
    v52 = *(WTF **)v46;
    *(_QWORD *)v46 = 0;
    v53 = v45 + 16 * v44;
    v56 = *(_QWORD *)(v53 + 8);
    v54 = (_QWORD *)(v53 + 8);
    v55 = v56;
    *v54 = 0;
    *(_QWORD *)v46 = 0;
    *(_QWORD *)(v46 + 8) = 0;
    v57 = *(_DWORD **)(v80 + 48);
    if (v57)
      *v57 += 2;
    *(_QWORD *)v46 = v57;
    v58 = *v79;
    *(_DWORD *)(v58 + 24) = *(_DWORD *)(*v79 + 24) + 1;
    v59 = (_DWORD *)*v54;
    *v54 = v58;
    if (v59)
    {
      if (v59[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 16))(v59);
      else
        --v59[6];
    }
    for (i = v44 + 1; ; i = v61 + 1)
    {
      v61 = i & v43;
      v62 = *v32;
      v63 = (WTF **)(*v32 + 16 * v61);
      v64 = *v63;
      if (!*v63)
        break;
      v65 = *((_DWORD *)v64 + 4);
      if (v65 < 0x100)
        v66 = WTF::StringImpl::hashSlowCase(v64);
      else
        v66 = v65 >> 8;
      if (++v51 > (((_DWORD)v61 + (_DWORD)v36 - ((v66 ^ v39) & v43)) & v43))
      {
        v67 = *v63;
        *v63 = 0;
        v68 = v62 + 16 * v61;
        v69 = *(_QWORD *)(v68 + 8);
        *v63 = v52;
        *(_QWORD *)(v68 + 8) = v55;
        v55 = v69;
        v52 = v67;
        v51 = (v61 + v36 - ((v66 ^ v39) & v43)) & v43;
      }
    }
    *v63 = v52;
    v70 = v62 + 16 * v61;
    v71 = *(_DWORD **)(v70 + 8);
    *(_QWORD *)(v70 + 8) = v55;
    v5 = v78;
    if (!v71)
      goto LABEL_83;
LABEL_81:
    if (v71[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 16))(v71);
    else
      --v71[6];
    goto LABEL_83;
  }
LABEL_88:
  WebCore::MediaStream::setIsActive(v5, *(unsigned __int8 *)(*(_QWORD *)(v5 + 96) + 88));
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(v5 + 96) + 32, v76, (uint64_t)&v83);
  return v5;
}

uint64_t WebCore::MediaStreamTrack::id(WebCore::MediaStreamTrack *this)
{
  return *((_QWORD *)this + 12) + 48;
}

uint64_t WebCore::MediaStream::setIsActive(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  _QWORD v10[4];
  unsigned __int8 v11;

  v11 = a2;
  if (*(unsigned __int8 *)(this + 132) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 96);
    v5 = *(_QWORD *)(v3 + 96);
    v4 = *(_QWORD *)(v3 + 104);
    v10[0] = "MediaStream";
    v10[1] = 12;
    v10[2] = "setIsActive";
    v10[3] = v4;
    if (*(_BYTE *)(v5 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
      a2 = v11;
    }
    *(_BYTE *)(v2 + 132) = a2;
    v6 = *(_QWORD *)(v2 + 32);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 178))
        {
          this = 105;
          __break(0xC471u);
        }
        else
        {
          v8 = (int *)(v7 - 264);
          v9 = *(_DWORD *)(v7 - 264);
          *(_DWORD *)(v7 - 264) = v9 + 2;
          if (a2)
          {
            this = (uint64_t)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v7 - 288));
            v9 = *v8 - 2;
          }
          if (v9)
          {
            *v8 = v9;
          }
          else if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
          {
            return WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288));
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::MediaStream::MediaStream(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::ContextDestructionObserver *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::MediaStreamTrackPrivate *v28;
  WTF::StringImpl **v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  WebCore::MediaStreamTrackPrivate *v34;
  WTF *v35;
  void *v36;
  WebCore::MediaStreamTrackPrivate *v38;
  _QWORD v39[4];
  WebCore::ContextDestructionObserver *v40;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  v6 = (WebCore::ContextDestructionObserver *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 704);
  v8 = a2;
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (v9)
      v8 = v9;
    else
      v8 = a2;
  }
  *(_QWORD *)(a1 + 24) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 32) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 24), (WebCore::ScriptExecutionContext *)(v8 + 192));
  *(_QWORD *)(a1 + 24) = &off_1E33A0540;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_BYTE *)(v8 + 470))
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  v40 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v8 + 320), (uint64_t *)&v40, (uint64_t)v39);
  *(_QWORD *)(a1 + 48) = &unk_1E335FD60;
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)a1 = off_1E335FC28;
  *(_QWORD *)(a1 + 24) = &unk_1E335FD08;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = &unk_1E335FDA0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &unk_1E335FDC8;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 117) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 131) = 0;
  v11 = *(_QWORD *)(v10 + 96);
  v12 = *(_QWORD *)(v10 + 104);
  v39[0] = "MediaStream";
  v39[1] = 12;
  v39[2] = "MediaStream";
  v39[3] = v12;
  if (*(_BYTE *)(v11 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v39);
    v10 = *(_QWORD *)(a1 + 96);
  }
  v13 = *(unsigned int *)(v10 + 76);
  if (!(_DWORD)v13)
    goto LABEL_40;
  v14 = *(_QWORD **)(v10 + 64);
  v15 = *(unsigned int *)(v10 + 72);
  v16 = &v14[2 * v15];
  if ((_DWORD)v15)
  {
    v17 = 16 * v15;
    while (!*v14)
    {
      v14 += 2;
      v17 -= 16;
      if (!v17)
      {
        v14 = v16;
        break;
      }
    }
  }
  if (v13 >> 29)
  {
    __break(0xC471u);
LABEL_43:
    JUMPOUT(0x19546846CLL);
  }
  v18 = WTF::fastMalloc((WTF *)(8 * v13));
  v20 = (WTF *)v18;
  if (v14 != v16)
  {
    v21 = 0;
    v22 = 1;
LABEL_17:
    v23 = v22;
    v24 = v14[1];
    ++*(_DWORD *)(v24 + 8);
    *(_QWORD *)(v18 + 8 * v21++) = v24;
    while (1)
    {
      v14 += 2;
      if (v14 == v16)
        break;
      if (*v14)
      {
        v22 = v23 + 1;
        if (v14 != v16)
          goto LABEL_17;
        break;
      }
    }
    if (v21)
    {
      v25 = a2 + 192;
      v26 = 8 * v23;
      v27 = v18;
      do
      {
        v28 = *(WebCore::MediaStreamTrackPrivate **)v27;
        v29 = (WTF::StringImpl **)(*(_QWORD *)v27 + 48);
        *((_DWORD *)v28 + 2) = *(_DWORD *)(*(_QWORD *)v27 + 8) + 1;
        v38 = v28;
        WebCore::MediaStreamTrack::create(v25, (uint64_t *)&v38, 1, &v40);
        WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>((uint64_t)v39, a1 + 104, v29, &v40);
        if (v40)
        {
          if (*((_DWORD *)v40 + 6) == 1)
            (*(void (**)(void))(*(_QWORD *)v40 + 16))();
          else
            --*((_DWORD *)v40 + 6);
        }
        if (v38)
        {
          if (*((_DWORD *)v38 + 2) == 1)
          {
            WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v38, v19);
            WTF::fastFree(v30, v31);
          }
          else
          {
            --*((_DWORD *)v38 + 2);
          }
        }
        v27 += 8;
        v26 -= 8;
      }
      while (v26);
      v32 = 8 * v23;
      v33 = v20;
      do
      {
        v34 = *(WebCore::MediaStreamTrackPrivate **)v33;
        *(_QWORD *)v33 = 0;
        if (v34)
        {
          if (*((_DWORD *)v34 + 2) == 1)
          {
            WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v34, v19);
            WTF::fastFree(v35, v36);
          }
          else
          {
            --*((_DWORD *)v34 + 2);
          }
        }
        v33 = (WTF *)((char *)v33 + 8);
        v32 -= 8;
      }
      while (v32);
    }
  }
  WTF::fastFree(v20, v19);
  v10 = *(_QWORD *)(a1 + 96);
LABEL_40:
  WebCore::MediaStream::setIsActive(a1, *(unsigned __int8 *)(v10 + 88));
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(a1 + 96) + 32, (_QWORD *)(a1 + 48), (uint64_t)v39);
  return a1;
}

uint64_t WebCore::MediaStream::logger(WebCore::MediaStream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 12) + 96);
}

char *WebCore::MediaStream::logChannel(WebCore::MediaStream *this)
{
  return &WebCore::LogWebRTC;
}

const char *WebCore::MediaStream::logClassName(WebCore::MediaStream *this)
{
  return "MediaStream";
}

uint64_t WebCore::MediaStream::logIdentifier(WebCore::MediaStream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 12) + 104);
}

uint64_t WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t result;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  WTF **v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;

  v5 = a2;
  v8 = *(unsigned int *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 12);
  if (10 * v7 >= (unint64_t)(9 * v8)
    || (v8 <= 2 * (int)v7 ? (v9 = *(_BYTE *)(a2 + 20) == 0) : (v9 = 1), !v9))
  {
    if ((_DWORD)v8)
      v10 = 2 * v8;
    else
      v10 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)v5, v10);
    LODWORD(v8) = *(_DWORD *)(v5 + 8);
  }
  v11 = v8 - 1;
  v12 = *(unsigned int *)(v5 + 16);
  v13 = *((_DWORD *)*a3 + 4);
  if (v13 < 0x100)
    v14 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v14 = v13 >> 8;
  v15 = (v14 ^ v12) & v11;
  v16 = *(_QWORD *)v5;
  v17 = *(_QWORD *)v5 + 16 * v15;
  v18 = *(WTF **)v17;
  if (*(_QWORD *)v17)
  {
    v52 = a4;
    v53 = a1;
    v19 = 0;
    while (1)
    {
      v20 = *((_DWORD *)v18 + 4);
      v21 = v20 < 0x100 ? WTF::StringImpl::hashSlowCase(v18) : v20 >> 8;
      v22 = (v15 + v8 - ((v21 ^ v12) & v11)) & v11;
      if (v19 > v22)
        break;
      if (v21 == v14)
      {
        result = WTF::equal(*(WTF **)v17, *a3, (const WTF::StringImpl *)a3);
        v16 = *(_QWORD *)v5;
        if ((result & 1) != 0)
        {
          v50 = 0;
          a1 = v53;
          goto LABEL_33;
        }
      }
      else
      {
        v16 = *(_QWORD *)v5;
      }
      v15 = ((_DWORD)v15 + 1) & v11;
      ++v19;
      v17 = v16 + 16 * v15;
      v18 = *(WTF **)v17;
      if (!*(_QWORD *)v17)
      {
        if (v19 >= 0x80)
          *(_BYTE *)(v5 + 20) = 1;
        a4 = v52;
        a1 = v53;
        goto LABEL_27;
      }
    }
    if (v19 >= 0x80)
      *(_BYTE *)(v5 + 20) = 1;
    v29 = *(WTF **)v17;
    *(_QWORD *)v17 = 0;
    v30 = v16 + 16 * v15;
    v33 = *(_QWORD *)(v30 + 8);
    v31 = (_QWORD *)(v30 + 8);
    v32 = v33;
    *v31 = 0;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    v34 = *a3;
    if (*a3)
      *(_DWORD *)v34 += 2;
    *(_QWORD *)v17 = v34;
    v35 = *v52;
    *v52 = 0;
    v36 = (_DWORD *)*v31;
    *v31 = v35;
    if (v36)
    {
      if (v36[6] == 1)
      {
        v51 = v32;
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
        v32 = v51;
      }
      else
      {
        --v36[6];
      }
    }
    v37 = ((_DWORD)v15 + 1) & v11;
    v38 = *(_QWORD *)v5;
    v39 = (WTF **)(*(_QWORD *)v5 + 16 * v37);
    v40 = *v39;
    if (*v39)
    {
      v54 = v8;
      do
      {
        v41 = *((_DWORD *)v40 + 4);
        if (v41 < 0x100)
        {
          v8 = v5;
          v43 = v12;
          v44 = v29;
          v45 = v32;
          v42 = WTF::StringImpl::hashSlowCase(v40);
          v32 = v45;
          v29 = v44;
          v12 = v43;
          v5 = v8;
          LODWORD(v8) = v54;
        }
        else
        {
          v42 = v41 >> 8;
        }
        if (++v22 > (((_DWORD)v37 + (_DWORD)v8 - ((v42 ^ v12) & v11)) & v11))
        {
          v46 = *v39;
          *v39 = 0;
          v47 = v38 + 16 * v37;
          v48 = *(_QWORD *)(v47 + 8);
          *v39 = v29;
          *(_QWORD *)(v47 + 8) = v32;
          v32 = v48;
          v29 = v46;
          v22 = (v37 + v8 - ((v42 ^ v12) & v11)) & v11;
        }
        v37 = ((_DWORD)v37 + 1) & v11;
        v38 = *(_QWORD *)v5;
        v39 = (WTF **)(*(_QWORD *)v5 + 16 * v37);
        v40 = *v39;
      }
      while (*v39);
    }
    *v39 = v29;
    v49 = v38 + 16 * v37;
    result = *(_QWORD *)(v49 + 8);
    *(_QWORD *)(v49 + 8) = v32;
    if (!result)
    {
      a1 = v53;
      goto LABEL_32;
    }
    v27 = *(_DWORD *)(result + 24) - 1;
    a1 = v53;
    if (*(_DWORD *)(result + 24) != 1)
      goto LABEL_31;
LABEL_51:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    goto LABEL_32;
  }
LABEL_27:
  v24 = *a3;
  if (*a3)
    *(_DWORD *)v24 += 2;
  *(_QWORD *)v17 = v24;
  v25 = v16 + 16 * v15;
  v26 = *a4;
  *a4 = 0;
  result = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v26;
  if (!result)
    goto LABEL_32;
  v27 = *(_DWORD *)(result + 24) - 1;
  if (*(_DWORD *)(result + 24) == 1)
    goto LABEL_51;
LABEL_31:
  *(_DWORD *)(result + 24) = v27;
LABEL_32:
  ++*(_DWORD *)(v5 + 12);
  v16 = *(_QWORD *)v5;
  v50 = 1;
LABEL_33:
  v28 = v16 + 16 * *(unsigned int *)(v5 + 8);
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v50;
  return result;
}

uint64_t WebCore::MediaStreamTrack::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, WebCore::ContextDestructionObserver **a4@<X8>)
{
  uint64_t v8;
  WebCore::ContextDestructionObserver *v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  WebCore::Page *v13;
  uint64_t v14;
  WebCore::RealtimeMediaSource *v15;
  WebCore::Page *v16;

  v8 = bmalloc::api::isoAllocate();
  v9 = WebCore::MediaStreamTrack::MediaStreamTrack((WebCore::ContextDestructionObserver *)v8, (WebCore::LocalDOMWindow **)a1, a2);
  *a4 = v9;
  result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded(v9);
  if (*(_BYTE *)(v8 + 1206) && !*(_BYTE *)(v8 + 1205))
  {
    v11 = *(_QWORD *)(v8 + 96);
    if (*(_BYTE *)(v11 + 74))
      v12 = 1;
    else
      v12 = a3 == 0;
    if (!v12)
    {
      if (*(_BYTE *)(a1 + 274))
      {
        result = 96;
        __break(0xC471u);
      }
      else
      {
        v13 = *(WebCore::Page **)(*(_QWORD *)(v11 + 40) + 8);
        (*(void (**)(WebCore::Page *))(*(_QWORD *)v13 + 136))(v13);
        v16 = v13;
        WebCore::Document::addCaptureSource((uint64_t *)(a1 - 192), &v16, v14, v15);
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
      }
    }
  }
  return result;
}

void WebCore::MediaStream::~MediaStream(WebCore::MediaStream *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WebCore::MediaStreamPrivate *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  WTF *v29;

  *((_BYTE *)this + 132) = 0;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 12) + 32, (_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195468ADCLL);
      }
      v5 = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4 - 288);
      if (v5)
      {
        v6 = v5;
        do
          v7 = __ldaxr((unsigned int *)v5);
        while (__stlxr(v7 + 1, (unsigned int *)v5));
        v8 = *(_QWORD *)(v5 + 8);
        if (v8 && *((_BYTE *)this + 134))
          WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v8 + 1960, (_QWORD *)this + 8);
        do
        {
          v9 = __ldaxr((unsigned int *)v6);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, (unsigned int *)v6));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v6);
          v28 = *(unsigned int *)(v6 + 28);
          if ((_DWORD)v28)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v28));
          v29 = *(WTF **)(v6 + 16);
          if (v29)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
            WTF::fastFree(v29, v2);
          }
          WTF::fastFree((WTF *)v6, v2);
        }
      }
    }
  }
  v11 = (WTF *)*((_QWORD *)this + 13);
  if (v11)
  {
    v12 = *((unsigned int *)this + 28);
    if ((_DWORD)v12)
    {
      v13 = (_DWORD **)((char *)v11 + 8);
      do
      {
        v14 = *v13;
        *v13 = 0;
        if (v14)
        {
          if (v14[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          else
            --v14[6];
        }
        v15 = (WTF::StringImpl *)*(v13 - 1);
        *(v13 - 1) = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v2);
          else
            *(_DWORD *)v15 -= 2;
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11, v2);
  }
  v16 = (WebCore::MediaStreamPrivate *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v16, v2);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*((_DWORD *)v16 + 4);
    }
  }
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  v21 = *((_QWORD *)this + 7);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::MediaStream *)((char *)this + 24), v2);
  WebCore::EventTarget::~EventTarget(this, v25);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStream::~MediaStream(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaStream::~MediaStream(WebCore::MediaStream *this)
{
  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 24));
}

{
  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 48));
}

{
  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 64));
}

{
  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 80));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 24));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 48));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 64));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)((char *)this - 80));
  bmalloc::api::isoDeallocate(v1, v2);
}

WTF *WebCore::MediaStream::clone@<X0>(WebCore::MediaStream *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Document *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  WTF *result;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v22;
  WTF *v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v4 = *((_QWORD *)this + 12);
  v6 = *(_QWORD *)(v4 + 96);
  v5 = *(_QWORD *)(v4 + 104);
  v32 = (WTF *)"MediaStream";
  v33 = 12;
  v34 = "clone";
  v35 = v5;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v32);
  v32 = 0;
  v33 = 0;
  v7 = *((unsigned int *)this + 29);
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      goto LABEL_46;
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v33) = v7;
    v32 = v8;
    if (*((_DWORD *)this + 29))
    {
      v9 = *((unsigned int *)this + 28);
      if ((_DWORD)v9)
      {
        v10 = 16 * v9;
        v11 = *((_QWORD *)this + 13);
        while (!*(_QWORD *)v11)
        {
          v11 += 16;
          v10 -= 16;
          if (!v10)
            goto LABEL_10;
        }
      }
      else
      {
        v11 = *((_QWORD *)this + 13);
      }
      v19 = *((_QWORD *)this + 13) + 16 * v9;
LABEL_21:
      if (v11 != v19)
      {
        (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(v11 + 8) + 80))(&v31);
        v20 = v31;
        if (v31)
        {
          v30 = v31;
          v31 = 0;
          LODWORD(v21) = HIDWORD(v33);
          if (HIDWORD(v33) == (_DWORD)v33)
          {
            v22 = WTF::Vector<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v32, HIDWORD(v33) + 1, (unint64_t)&v30);
            v21 = HIDWORD(v33);
            v23 = v32;
            v24 = *(_QWORD *)v22;
            *(_QWORD *)v22 = 0;
            *((_QWORD *)v23 + v21) = v24;
          }
          else
          {
            v30 = 0;
            *((_QWORD *)v32 + HIDWORD(v33)) = v20;
          }
          HIDWORD(v33) = v21 + 1;
          v25 = v30;
          v30 = 0;
          if (v25)
          {
            if (v25[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
            else
              --v25[6];
          }
          v26 = v31;
          v31 = 0;
          if (v26)
          {
            if (v26[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
            else
              --v26[6];
          }
        }
        while (1)
        {
          v11 += 16;
          if (v11 == v19)
            break;
          if (*(_QWORD *)v11)
            goto LABEL_21;
        }
      }
    }
  }
LABEL_10:
  v12 = *((_QWORD *)this + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      if (!*(_BYTE *)(v13 + 178))
      {
        v14 = (WebCore::Document *)(v13 - 288);
        goto LABEL_15;
      }
      __break(0xC471u);
LABEL_46:
      JUMPOUT(0x195468DECLL);
    }
  }
  v14 = 0;
LABEL_15:
  v15 = (_QWORD *)bmalloc::api::isoAllocate();
  v16 = WebCore::MediaStream::MediaStream(v15, v14, (uint64_t **)&v32);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v16 + 24));
  *a2 = v15;
  if (HIDWORD(v33))
  {
    v27 = v32;
    v28 = 8 * HIDWORD(v33);
    do
    {
      v29 = *(_DWORD **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (v29[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
        else
          --v29[6];
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  result = v32;
  if (v32)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

WebCore::MediaStreamTrackPrivate *WebCore::MediaStream::addTrack(WebCore::MediaStream *this, WebCore::MediaStreamTrack *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  WebCore::MediaStreamTrackPrivate *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BOOL4 v12;
  WebCore::MediaStreamTrackPrivate *result;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WebCore::MediaStreamTrackPrivate *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  WebCore::MediaStreamTrack *v27;
  WebCore::MediaStreamTrackPrivate *v28[4];

  v5 = *((_QWORD *)this + 12);
  v7 = *(_QWORD *)(v5 + 96);
  v6 = *(WebCore::MediaStreamTrackPrivate **)(v5 + 104);
  v28[0] = (WebCore::MediaStreamTrackPrivate *)"MediaStream";
  v28[1] = (WebCore::MediaStreamTrackPrivate *)12;
  v28[2] = (WebCore::MediaStreamTrackPrivate *)"addTrack";
  v28[3] = v6;
  v8 = *((_QWORD *)a2 + 12);
  v27 = *(WebCore::MediaStreamTrack **)(v8 + 88);
  if (*(_BYTE *)(v7 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v28);
    v8 = *((_QWORD *)a2 + 12);
  }
  v9 = *(WTF::StringImpl **)(v8 + 48);
  if (v9)
    *(_DWORD *)v9 += 2;
  v26 = v9;
  v10 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 13, &v26, a3);
  v12 = *((_QWORD *)this + 13) + 16 * *((unsigned int *)this + 28) == v10 || *(_QWORD *)(v10 + 8) == 0;
  result = v26;
  v26 = 0;
  if (!result)
  {
LABEL_11:
    if (!v12)
      return result;
    goto LABEL_12;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_11;
  }
  result = (WebCore::MediaStreamTrackPrivate *)WTF::StringImpl::destroy(result, v11);
  if (!v12)
    return result;
LABEL_12:
  ++*((_DWORD *)a2 + 6);
  v27 = a2;
  WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>((uint64_t)v28, (uint64_t)this + 104, (WTF::StringImpl **)(*((_QWORD *)a2 + 12) + 48), &v27);
  if (*((_DWORD *)this + 29))
  {
    v15 = *((unsigned int *)this + 28);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      v17 = (_QWORD *)*((_QWORD *)this + 13);
      while (!*v17)
      {
        v17 += 2;
        v16 -= 16;
        if (!v16)
          goto LABEL_26;
      }
    }
    else
    {
      v17 = (_QWORD *)*((_QWORD *)this + 13);
    }
    v18 = *((_QWORD *)this + 13) + 16 * v15;
    if (v17 != (_QWORD *)v18)
    {
LABEL_20:
      v19 = v17[1];
      if (!*(_BYTE *)(v19 + 1205) && !*(_BYTE *)(*(_QWORD *)(v19 + 96) + 74))
      {
        v20 = 1;
        goto LABEL_27;
      }
      while (1)
      {
        v17 += 2;
        if (v17 == (_QWORD *)v18)
          break;
        if (*v17)
        {
          v20 = 0;
          if (v17 != (_QWORD *)v18)
            goto LABEL_20;
          goto LABEL_27;
        }
      }
    }
  }
LABEL_26:
  v20 = 0;
LABEL_27:
  if (*((unsigned __int8 *)this + 132) != v20)
    WebCore::MediaStream::setIsActive((uint64_t)this, v20);
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) == 1)
      (*(void (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)v27 + 16))(v27);
    else
      --*((_DWORD *)v27 + 6);
  }
  v21 = *((_QWORD *)this + 12);
  v22 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)a2 + 12);
  ++*((_DWORD *)v22 + 2);
  v28[0] = v22;
  WebCore::MediaStreamPrivate::addTrack(v21, (uint64_t *)v28, v14);
  result = v28[0];
  v28[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(result, v23);
      return (WebCore::MediaStreamTrackPrivate *)WTF::fastFree(v24, v25);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::MediaStream::removeTrack(WebCore::MediaStream *this, WebCore::MediaStreamTrack *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const WTF::StringImpl *v10;
  _DWORD *v11;
  _QWORD v12[4];

  v5 = *((_QWORD *)this + 12);
  v7 = *(_QWORD *)(v5 + 96);
  v6 = *(_QWORD *)(v5 + 104);
  v12[0] = "MediaStream";
  v12[1] = 12;
  v12[2] = "removeTrack";
  v12[3] = v6;
  v8 = *((_QWORD *)a2 + 12);
  if (*(_BYTE *)(v7 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v12);
    v8 = *((_QWORD *)a2 + 12);
  }
  result = WebCore::MediaStream::internalTakeTrack(this, (WTF::StringImpl **)(v8 + 48), a3, v12);
  v11 = (_DWORD *)v12[0];
  if (v12[0])
  {
    result = WebCore::MediaStreamPrivate::removeTrack(*((_QWORD *)this + 12), *((WebCore::MediaStreamTrackPrivate **)a2 + 12), v10);
    if (v11[6] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[6];
  }
  return result;
}

uint64_t WebCore::MediaStream::internalTakeTrack@<X0>(WebCore::MediaStream *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  WebCore::MediaStream *v4;
  uint64_t *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl **v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WebCore::MediaStream *v46;

  v4 = this;
  v6 = (uint64_t *)((char *)this + 104);
  result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 13, a2, a3);
  v9 = *((_QWORD *)v4 + 13);
  v10 = *((unsigned int *)v4 + 28);
  if (v9 + 16 * v10 == result)
  {
    *a4 = 0;
    return result;
  }
  v11 = (_QWORD *)result;
  v12 = *(_QWORD *)(result + 8);
  if (v12)
  {
    *(_QWORD *)(result + 8) = 0;
    v9 = *v6;
  }
  *a4 = v12;
  if (v9 + 16 * v10 != result)
  {
    v13 = *(WTF::StringImpl **)result;
    *v11 = -1;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = (_DWORD *)v11[1];
    v11[1] = 0;
    if (v14)
    {
      if (v14[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[6];
    }
    *v11 = 0;
    v11[1] = 0;
    v15 = *((_DWORD *)v4 + 28);
    v16 = *((_DWORD *)v4 + 29) - 1;
    *((_DWORD *)v4 + 29) = v16;
    v17 = v15 - 1;
    v18 = *((_QWORD *)v4 + 13);
    v19 = (unint64_t)v11 - v18;
    v20 = ((unint64_t)v11 - v18) >> 4;
    v21 = ((_DWORD)v20 + 1) & (v15 - 1);
    v22 = (uint64_t *)(v18 + 16 * v21);
    result = *v22;
    if (*v22)
    {
      v45 = v12;
      v46 = v4;
      v23 = *((_DWORD *)v4 + 30);
      v24 = (v19 >> 4);
      v25 = (v20 + 1) & v17;
      v26 = (WTF::StringImpl **)(v18 + 16 * v20);
      do
      {
        v27 = *(_DWORD *)(result + 16);
        if (v27 < 0x100)
          result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
        else
          result = v27 >> 8;
        if (((v25 + v15 - ((result ^ v23) & v17)) & v17) == 0)
          break;
        v28 = *v22;
        *v22 = 0;
        v29 = *v26;
        *v26 = (WTF::StringImpl *)v28;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v8);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = v18 + 16 * v24;
        v31 = v18 + 16 * v21;
        v33 = *(_QWORD *)(v31 + 8);
        v32 = (_QWORD *)(v31 + 8);
        *v32 = 0;
        v34 = *(_DWORD **)(v30 + 8);
        *(_QWORD *)(v30 + 8) = v33;
        if (v34)
        {
          if (v34[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
          else
            --v34[6];
        }
        v35 = (_DWORD *)*v32;
        *v32 = 0;
        if (v35)
        {
          if (v35[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
          else
            --v35[6];
        }
        v36 = (WTF::StringImpl *)*v22;
        *v22 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v8);
          else
            *(_DWORD *)v36 -= 2;
        }
        *v22 = 0;
        v22[1] = 0;
        v21 = (v25 + 1) & v17;
        v18 = *v6;
        v24 = v25;
        v26 = (WTF::StringImpl **)(*v6 + 16 * v25);
        v22 = (uint64_t *)(*v6 + 16 * v21);
        result = *v22;
        v25 = (v25 + 1) & v17;
      }
      while (*v22);
      v12 = v45;
      v4 = v46;
      v15 = *((_DWORD *)v46 + 28);
      v16 = *((_DWORD *)v46 + 29);
    }
    v37 = 6 * v16;
    if (v15 >= 9 && v37 < v15)
      result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v6, v15 >> 1);
  }
  if (v12)
  {
    if (*((_DWORD *)v4 + 29))
    {
      v39 = *((unsigned int *)v4 + 28);
      if ((_DWORD)v39)
      {
        v40 = 16 * v39;
        v41 = (_QWORD *)*((_QWORD *)v4 + 13);
        while (!*v41)
        {
          v41 += 2;
          v40 -= 16;
          if (!v40)
            goto LABEL_57;
        }
      }
      else
      {
        v41 = (_QWORD *)*((_QWORD *)v4 + 13);
      }
      v42 = *((_QWORD *)v4 + 13) + 16 * v39;
      if (v41 != (_QWORD *)v42)
      {
LABEL_51:
        v43 = v41[1];
        if (!*(_BYTE *)(v43 + 1205) && !*(_BYTE *)(*(_QWORD *)(v43 + 96) + 74))
        {
          v44 = 1;
LABEL_58:
          if (*((unsigned __int8 *)v4 + 132) != v44)
            return WebCore::MediaStream::setIsActive((uint64_t)v4, v44);
          return result;
        }
        while (1)
        {
          v41 += 2;
          if (v41 == (_QWORD *)v42)
            break;
          if (*v41)
          {
            v44 = 0;
            if (v41 != (_QWORD *)v42)
              goto LABEL_51;
            goto LABEL_58;
          }
        }
      }
    }
LABEL_57:
    v44 = 0;
    goto LABEL_58;
  }
  return result;
}

char *WebCore::MediaStream::filteredTracks@<X0>(char *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (*((_DWORD *)result + 29))
  {
    v5 = *((unsigned int *)result + 28);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      for (i = (_QWORD *)*((_QWORD *)result + 13); !*i; i += 2)
      {
        v6 -= 16;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)result + 13);
    }
    v8 = *((_QWORD *)result + 13) + 16 * v5;
LABEL_9:
    if (i != (_QWORD *)v8)
    {
      v9 = i + 1;
      result = (char *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, i[1]);
      if ((_DWORD)result)
      {
        v10 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
        {
          result = WTF::Vector<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)(i + 1));
          v10 = *(unsigned int *)(a3 + 12);
          v11 = *(char **)a3;
          v12 = *(_QWORD *)result;
          ++*(_DWORD *)(*(_QWORD *)result + 24);
        }
        else
        {
          v11 = *(char **)a3;
          v12 = *v9;
          ++*(_DWORD *)(*v9 + 24);
        }
        *(_QWORD *)&v11[8 * v10] = v12;
        *(_DWORD *)(a3 + 12) = v10 + 1;
      }
      while (1)
      {
        i += 2;
        if (i == (_QWORD *)v8)
          break;
        if (*i)
          goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaStream::activeStatusChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (!*(_DWORD *)(this + 116))
    goto LABEL_15;
  v1 = *(unsigned int *)(this + 112);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = *(_QWORD **)(this + 104);
    while (!*v3)
    {
      v3 += 2;
      v2 -= 16;
      if (!v2)
        goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD **)(this + 104);
  }
  v4 = *(_QWORD *)(this + 104) + 16 * v1;
  if (v3 == (_QWORD *)v4)
    goto LABEL_15;
LABEL_9:
  v5 = v3[1];
  if (*(_BYTE *)(v5 + 1205) || *(_BYTE *)(*(_QWORD *)(v5 + 96) + 74))
  {
    while (1)
    {
      v3 += 2;
      if (v3 == (_QWORD *)v4)
        break;
      if (*v3)
      {
        v6 = 0;
        if (v3 != (_QWORD *)v4)
          goto LABEL_9;
        goto LABEL_16;
      }
    }
LABEL_15:
    v6 = 0;
    goto LABEL_16;
  }
  v6 = 1;
LABEL_16:
  if (*(unsigned __int8 *)(this + 132) != v6)
    return WebCore::MediaStream::setIsActive(this, v6);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::activeStatusChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (!*(_DWORD *)(this + 68))
    goto LABEL_15;
  v1 = *(unsigned int *)(this + 64);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = *(_QWORD **)(this + 56);
    while (!*v3)
    {
      v3 += 2;
      v2 -= 16;
      if (!v2)
        goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD **)(this + 56);
  }
  v4 = *(_QWORD *)(this + 56) + 16 * v1;
  if (v3 == (_QWORD *)v4)
    goto LABEL_15;
LABEL_9:
  v5 = v3[1];
  if (*(_BYTE *)(v5 + 1205) || *(_BYTE *)(*(_QWORD *)(v5 + 96) + 74))
  {
    while (1)
    {
      v3 += 2;
      if (v3 == (_QWORD *)v4)
        break;
      if (*v3)
      {
        v6 = 0;
        if (v3 != (_QWORD *)v4)
          goto LABEL_9;
        goto LABEL_16;
      }
    }
LABEL_15:
    v6 = 0;
    goto LABEL_16;
  }
  v6 = 1;
LABEL_16:
  if (*(unsigned __int8 *)(this + 84) != v6)
    return WebCore::MediaStream::setIsActive(this - 48, v6);
  return this;
}

uint64_t *WebCore::MediaStream::didAddTrack(uint64_t *this, WebCore::MediaStreamTrackPrivate *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  WebCore::ContextDestructionObserver *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WebCore *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF *v26;
  void *v27;
  WebCore *v28;
  WebCore::ContextDestructionObserver *v29;
  WTF::StringImpl *v30;
  WebCore::MediaStreamTrackPrivate *v31[3];

  v3 = this[4];
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return this;
  v6 = (uint64_t)this;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  if (v7)
    *(_DWORD *)v7 += 2;
  v30 = v7;
  v8 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(this + 13, &v30, a3);
  if (*(_QWORD *)(v6 + 104) + 16 * *(unsigned int *)(v6 + 112) == v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 8);
  this = (uint64_t *)v30;
  v30 = 0;
  if (!this)
    goto LABEL_11;
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
LABEL_11:
    if (v10)
      return this;
    goto LABEL_12;
  }
  this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
  if (v10)
    return this;
LABEL_12:
  ++*((_DWORD *)a2 + 2);
  v31[0] = a2;
  WebCore::MediaStreamTrack::create(v4 - 96, (uint64_t *)v31, 1, &v29);
  if (v31[0])
  {
    if (*((_DWORD *)v31[0] + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v31[0], v11);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*((_DWORD *)v31[0] + 2);
    }
  }
  v12 = v29;
  ++*((_DWORD *)v29 + 6);
  v28 = v12;
  WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>((uint64_t)v31, v6 + 104, (WTF::StringImpl **)(*((_QWORD *)v12 + 12) + 48), &v28);
  if (*(_DWORD *)(v6 + 116))
  {
    v13 = *(unsigned int *)(v6 + 112);
    if ((_DWORD)v13)
    {
      v14 = 16 * v13;
      v15 = *(_QWORD **)(v6 + 104);
      while (!*v15)
      {
        v15 += 2;
        v14 -= 16;
        if (!v14)
          goto LABEL_29;
      }
    }
    else
    {
      v15 = *(_QWORD **)(v6 + 104);
    }
    v16 = *(_QWORD *)(v6 + 104) + 16 * v13;
    if (v15 != (_QWORD *)v16)
    {
LABEL_23:
      v17 = v15[1];
      if (!*(_BYTE *)(v17 + 1205) && !*(_BYTE *)(*(_QWORD *)(v17 + 96) + 74))
      {
        v18 = 1;
        goto LABEL_30;
      }
      while (1)
      {
        v15 += 2;
        if (v15 == (_QWORD *)v16)
          break;
        if (*v15)
        {
          v18 = 0;
          if (v15 != (_QWORD *)v16)
            goto LABEL_23;
          goto LABEL_30;
        }
      }
    }
  }
LABEL_29:
  v18 = 0;
LABEL_30:
  if (*(unsigned __int8 *)(v6 + 132) != v18)
    WebCore::MediaStream::setIsActive(v6, v18);
  v19 = v28;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 1)
      v19 = (WebCore *)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 16))();
    else
      --*((_DWORD *)v28 + 6);
  }
  v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
    v21 = WebCore::threadGlobalDataSlow(v19);
  v22 = *(_QWORD *)(v21 + 40);
  if (!v22)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v21);
    v22 = *(_QWORD *)(v21 + 40);
  }
  v23 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
  *(_QWORD *)(v23 + 8) = 0;
  *(_DWORD *)(v23 + 16) = 1;
  *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0xA0200 | (*(_QWORD *)(v22 + 104) != 0);
  v25 = *(_DWORD **)(v22 + 104);
  if (v25)
    *v25 += 2;
  *(_QWORD *)(v23 + 24) = v25;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  *(_QWORD *)(v23 + 56) = v24;
  *(_QWORD *)v23 = off_1E335FE08;
  *(_QWORD *)(v23 + 64) = 0;
  *(_QWORD *)(v23 + 72) = v12;
  this = (uint64_t *)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v6, (WebCore::Event *)v23);
  if (*(_DWORD *)(v23 + 16) == 1)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  --*(_DWORD *)(v23 + 16);
  return this;
}

uint64_t WebCore::MediaStream::scriptExecutionContext(WebCore::MediaStream *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t *`non-virtual thunk to'WebCore::MediaStream::didAddTrack(WebCore::MediaStream *this, WebCore::MediaStreamTrackPrivate *a2, const WTF::StringImpl *a3)
{
  return WebCore::MediaStream::didAddTrack((uint64_t *)this - 6, a2, a3);
}

WebCore *WebCore::MediaStream::didRemoveTrack(WebCore::MediaStream *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebCore *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;

  result = (WebCore *)WebCore::MediaStream::internalTakeTrack(this, a2 + 6, a3, &v13);
  v5 = v13;
  if (v13)
  {
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      v7 = WebCore::threadGlobalDataSlow(result);
    v8 = *(_QWORD *)(v7 + 40);
    if (!v8)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
      v8 = *(_QWORD *)(v7 + 40);
    }
    v9 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
    *(_QWORD *)(v9 + 8) = 0;
    v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0xA0200 | (*(_QWORD *)(v8 + 1680) != 0);
    *(_DWORD *)(v9 + 16) = 1;
    *(_DWORD *)(v9 + 20) = v11;
    v12 = *(_DWORD **)(v8 + 1680);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(v9 + 24) = v12;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = v10;
    *(_QWORD *)v9 = off_1E335FE08;
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = v5;
    result = WebCore::EventTarget::dispatchEvent(this, (WebCore::Event *)v9);
    if (*(_DWORD *)(v9 + 16) == 1)
      return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    else
      --*(_DWORD *)(v9 + 16);
  }
  return result;
}

WebCore *`non-virtual thunk to'WebCore::MediaStream::didRemoveTrack(WebCore::MediaStream *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  return WebCore::MediaStream::didRemoveTrack((WebCore::MediaStream *)((char *)this - 48), a2, a3);
}

WTF *WebCore::MediaStream::addTrackFromPlatform(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WebCore::MediaStreamTrackPrivate *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  WebCore::MediaStreamTrackPrivate *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF *result;
  WTF *v27;
  void *v28;
  _DWORD *v29;
  WebCore::MediaStreamTrackPrivate *v30[4];

  v4 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(v4 + 96);
  v5 = *(WebCore::MediaStreamTrackPrivate **)(v4 + 104);
  v30[0] = (WebCore::MediaStreamTrackPrivate *)"MediaStream";
  v30[1] = (WebCore::MediaStreamTrackPrivate *)12;
  v30[2] = (WebCore::MediaStreamTrackPrivate *)"addTrackFromPlatform";
  v30[3] = v5;
  v7 = (_DWORD *)*a2;
  v8 = *(_QWORD *)(*a2 + 96);
  v29 = *(_DWORD **)(v8 + 88);
  if (*(_BYTE *)(v6 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v30);
    v7 = (_DWORD *)*a2;
    v8 = *(_QWORD *)(*a2 + 96);
  }
  ++v7[6];
  v29 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>((uint64_t)v30, a1 + 104, (WTF::StringImpl **)(v8 + 48), &v29);
  if (!*(_DWORD *)(a1 + 116))
    goto LABEL_17;
  v10 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    v12 = *(_QWORD **)(a1 + 104);
    while (!*v12)
    {
      v12 += 2;
      v11 -= 16;
      if (!v11)
        goto LABEL_17;
    }
  }
  else
  {
    v12 = *(_QWORD **)(a1 + 104);
  }
  v13 = *(_QWORD *)(a1 + 104) + 16 * v10;
  if (v12 == (_QWORD *)v13)
    goto LABEL_17;
LABEL_11:
  v14 = v12[1];
  if (*(_BYTE *)(v14 + 1205) || *(_BYTE *)(*(_QWORD *)(v14 + 96) + 74))
  {
    while (1)
    {
      v12 += 2;
      if (v12 == (_QWORD *)v13)
        break;
      if (*v12)
      {
        v15 = 0;
        if (v12 != (_QWORD *)v13)
          goto LABEL_11;
        goto LABEL_18;
      }
    }
LABEL_17:
    v15 = 0;
    goto LABEL_18;
  }
  v15 = 1;
LABEL_18:
  if (*(unsigned __int8 *)(a1 + 132) != v15)
    WebCore::MediaStream::setIsActive(a1, v15);
  if (v29)
  {
    if (v29[6] == 1)
      (*(void (**)(void))(*(_QWORD *)v29 + 16))();
    else
      --v29[6];
  }
  v16 = *(_QWORD *)(a1 + 96);
  ++*(_DWORD *)(v8 + 8);
  v30[0] = (WebCore::MediaStreamTrackPrivate *)v8;
  WebCore::MediaStreamPrivate::addTrack(v16, (uint64_t *)v30, v9);
  v18 = v30[0];
  v30[0] = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v18, v17);
      v18 = (WebCore::MediaStreamTrackPrivate *)WTF::fastFree(v27, v28);
    }
    else
    {
      --*((_DWORD *)v18 + 2);
    }
  }
  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
    v20 = WebCore::threadGlobalDataSlow(v18);
  v21 = *(_QWORD *)(v20 + 40);
  if (!v21)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
    v21 = *(_QWORD *)(v20 + 40);
  }
  v22 = *a2;
  *a2 = 0;
  v23 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
  *(_QWORD *)(v23 + 8) = 0;
  *(_DWORD *)(v23 + 16) = 1;
  *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0xA0200 | (*(_QWORD *)(v21 + 104) != 0);
  v25 = *(_DWORD **)(v21 + 104);
  if (v25)
    *v25 += 2;
  *(_QWORD *)(v23 + 24) = v25;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = 0;
  *(_QWORD *)(v23 + 56) = v24;
  *(_QWORD *)v23 = off_1E335FE08;
  *(_QWORD *)(v23 + 64) = 0;
  *(_QWORD *)(v23 + 72) = v22;
  result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)a1, (WebCore::Event *)v23);
  if (*(_DWORD *)(v23 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  --*(_DWORD *)(v23 + 16);
  return result;
}

uint64_t WebCore::MediaStream::mediaCanStart(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v2 = this;
  v3 = *(_QWORD *)(this + 96);
  v5 = *(_QWORD *)(v3 + 96);
  v4 = *(_QWORD *)(v3 + 104);
  v6[0] = "MediaStream";
  v6[1] = 12;
  v6[2] = "mediaCanStart";
  v6[3] = v4;
  if (*(_BYTE *)(v5 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  if (*(_BYTE *)(v2 + 134))
  {
    *(_BYTE *)(v2 + 134) = 0;
    return WebCore::MediaStream::startProducingData(v2);
  }
  return this;
}

uint64_t WebCore::MediaStream::startProducingData(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v3 = *(_QWORD *)(v2 + 240);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(v4 + 24);
            if (v5)
            {
              if (*(_QWORD *)(v5 + 8))
              {
                v6 = this;
                v7 = *(_QWORD *)(this + 96);
                v9 = *(_QWORD *)(v7 + 96);
                v8 = *(_QWORD *)(v7 + 104);
                v13 = "MediaStream";
                v14 = 12;
                v15 = "startProducingData";
                v16 = v8;
                if (*(_BYTE *)(v9 + 12))
                {
                  this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v13);
                  v3 = *(_QWORD *)(v2 + 240);
                }
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 8) + 544))
                {
                  if (!*(_BYTE *)(v6 + 133))
                  {
                    *(_BYTE *)(v6 + 133) = 1;
                    return (uint64_t)WebCore::MediaStreamPrivate::startProducingData(*(_QWORD **)(v6 + 96));
                  }
                }
                else
                {
                  v10 = *(_QWORD *)(v6 + 96);
                  v12 = *(_QWORD *)(v10 + 96);
                  v11 = *(_QWORD *)(v10 + 104);
                  v13 = "MediaStream";
                  v14 = 12;
                  v15 = "startProducingData";
                  v16 = v11;
                  if (*(_BYTE *)(v12 + 12))
                    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "not allowed to start in background, waiting");
                  if (!*(_BYTE *)(v6 + 134))
                  {
                    *(_BYTE *)(v6 + 134) = 1;
                    return (uint64_t)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v2 + 1672, (_QWORD *)(v6 + 64), (uint64_t)&v13);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::mediaCanStart(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v2 = this;
  v3 = *(_QWORD *)(this + 32);
  v5 = *(_QWORD *)(v3 + 96);
  v4 = *(_QWORD *)(v3 + 104);
  v6[0] = "MediaStream";
  v6[1] = 12;
  v6[2] = "mediaCanStart";
  v6[3] = v4;
  if (*(_BYTE *)(v5 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  if (*(_BYTE *)(v2 + 70))
  {
    *(_BYTE *)(v2 + 70) = 0;
    return WebCore::MediaStream::startProducingData(v2 - 64);
  }
  return this;
}

uint64_t WebCore::MediaStream::mediaState(WebCore::MediaStream *this, const WebCore::RealtimeMediaSource *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  if (!*((_BYTE *)this + 132))
    return 0;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(v3 + 178))
  {
    v4 = *(_QWORD *)(v3 + 240);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          if (*(_QWORD *)(v6 + 8) && *((_DWORD *)this + 29))
          {
            v7 = *((unsigned int *)this + 28);
            if ((_DWORD)v7)
            {
              v8 = 16 * v7;
              v9 = (_QWORD *)*((_QWORD *)this + 13);
              v10 = 0;
              while (!*v9)
              {
                v9 += 2;
                v8 -= 16;
                if (!v8)
                  return v10;
              }
            }
            else
            {
              v9 = (_QWORD *)*((_QWORD *)this + 13);
            }
            v11 = *((_QWORD *)this + 13) + 16 * v7;
            if (v9 != (_QWORD *)v11)
            {
              LODWORD(v10) = 0;
LABEL_18:
              v12 = v9[1];
              if (!*(_BYTE *)(v12 + 1205)
                && *(_BYTE *)(v12 + 1206)
                && (v14 = *(_QWORD *)(v12 + 8)) != 0
                && (v15 = *(_QWORD *)(v14 + 8)) != 0
                && !*(_BYTE *)(v15 + 178))
              {
                v16 = (int *)(v15 - 264);
                v17 = *(_DWORD *)(v15 - 264);
                *(_DWORD *)(v15 - 264) = v17 + 2;
                v18 = *(_QWORD *)(v15 + 240);
                if (v18
                  && (v19 = *(_QWORD *)(v18 + 8)) != 0
                  && (v20 = *(_QWORD *)(v19 + 24)) != 0
                  && *(_QWORD *)(v20 + 8))
                {
                  v13 = WebCore::MediaStreamTrack::captureState(*(WebCore::MediaStreamTrack **)(*(_QWORD *)(*(_QWORD *)(v12 + 96) + 40) + 8), a2);
                  v17 = *v16 - 2;
                }
                else
                {
                  v13 = 0;
                }
                if (v17)
                {
                  *v16 = v17;
                }
                else if ((*(_WORD *)(v15 - 258) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 288), a2);
                }
              }
              else
              {
                v13 = 0;
              }
              v10 = v13 | v10;
              while (1)
              {
                v9 += 2;
                if (v9 == (_QWORD *)v11)
                  return v10;
                if (*v9)
                {
                  if (v9 != (_QWORD *)v11)
                    goto LABEL_18;
                  return v10;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MediaStream::characteristicsChanged(WebCore::MediaStream *this, const WebCore::RealtimeMediaSource *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;

  result = WebCore::MediaStream::mediaState(this, a2);
  if (*((_DWORD *)this + 32) != (_DWORD)result)
  {
    *((_DWORD *)this + 32) = result;
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 178))
        {
          result = 105;
          __break(0xC471u);
        }
        else
        {
          v7 = (int *)(v6 - 264);
          v8 = *(_DWORD *)(v6 - 264);
          *(_DWORD *)(v6 - 264) = v8 + 2;
          if (*((_BYTE *)this + 132))
          {
            result = (uint64_t)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v6 - 288));
            v8 = *v7 - 2;
          }
          if (v8)
          {
            *v7 = v8;
          }
          else if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          {
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v4);
          }
        }
      }
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::characteristicsChanged(WebCore::MediaStream *this, const WebCore::RealtimeMediaSource *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;

  result = WebCore::MediaStream::mediaState((WebCore::MediaStream *)((char *)this - 48), a2);
  if (*((_DWORD *)this + 20) != (_DWORD)result)
  {
    *((_DWORD *)this + 20) = result;
    v5 = *((_QWORD *)this - 2);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 178))
        {
          result = 105;
          __break(0xC471u);
        }
        else
        {
          v7 = (int *)(v6 - 264);
          v8 = *(_DWORD *)(v6 - 264);
          *(_DWORD *)(v6 - 264) = v8 + 2;
          if (*((_BYTE *)this + 84))
          {
            result = (uint64_t)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v6 - 288));
            v8 = *v7 - 2;
          }
          if (v8)
          {
            *v7 = v8;
          }
          else if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
          {
            return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v4);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaStream::stop(uint64_t this)
{
  *(_BYTE *)(this + 132) = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::stop(uint64_t this)
{
  *(_BYTE *)(this + 108) = 0;
  return this;
}

uint64_t WebCore::MediaStream::virtualHasPendingActivity(WebCore::MediaStream *this)
{
  return *((unsigned __int8 *)this + 132);
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::virtualHasPendingActivity(WebCore::MediaStream *this)
{
  return *((unsigned __int8 *)this + 108);
}

char *`non-virtual thunk to'WebCore::MediaStream::logChannel(WebCore::MediaStream *this)
{
  return &WebCore::LogWebRTC;
}

WebCore::ContextDestructionObserver *WebCore::MediaStreamTrack::MediaStreamTrack(WebCore::ContextDestructionObserver *this, WebCore::LocalDOMWindow **a2, uint64_t *a3)
{
  WebCore::ScriptExecutionContext *v6;
  WebCore::LocalDOMWindow **v7;
  WebCore::LocalDOMWindow *v8;
  WebCore::LocalDOMWindow **v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::LocalDOMWindow *v16;
  WebCore::NavigatorMediaDevices *v17;
  WebCore::Navigator *v18;
  WebCore::NavigatorMediaDevices *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  bmalloc::api *v28;
  void *v29;
  WTF::StringImpl *v30[4];
  WebCore::ContextDestructionObserver *v31;

  *((_DWORD *)this + 6) = 1;
  v6 = (WebCore::ScriptExecutionContext *)a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v7 = a2 - 24;
    v8 = a2[64];
    if (v8)
    {
      v9 = (WebCore::LocalDOMWindow **)*((_QWORD *)v8 + 1);
      if (v9)
        v7 = v9;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v7 + 24);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x19546A69CLL);
  }
  v31 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, (uint64_t *)&v31, (uint64_t)v30);
  v10 = 0;
  *((_QWORD *)this + 7) = &unk_1E335EEC0;
  *((_QWORD *)this + 9) = &unk_1E335EF18;
  *((_QWORD *)this + 4) = &unk_1E335EE48;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = &off_1E335ED60;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = &unk_1E335EF48;
  v11 = *a3;
  *a3 = 0;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 164) = 0;
  *((_BYTE *)this + 204) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 288) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 376) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_BYTE *)this + 464) = 0;
  *((_BYTE *)this + 472) = 0;
  *((_BYTE *)this + 552) = 0;
  *((_BYTE *)this + 560) = 0;
  *((_BYTE *)this + 600) = 0;
  *((_BYTE *)this + 604) = 0;
  *((_BYTE *)this + 644) = 0;
  *((_BYTE *)this + 648) = 0;
  *((_BYTE *)this + 660) = 0;
  *((_BYTE *)this + 664) = 0;
  *((_BYTE *)this + 744) = 0;
  *((_BYTE *)this + 752) = 0;
  *((_BYTE *)this + 832) = 0;
  *((_BYTE *)this + 840) = 0;
  *((_BYTE *)this + 920) = 0;
  *((_BYTE *)this + 928) = 0;
  *((_BYTE *)this + 940) = 0;
  *((_BYTE *)this + 944) = 0;
  *((_BYTE *)this + 1024) = 0;
  *((_BYTE *)this + 1032) = 0;
  *((_BYTE *)this + 1112) = 0;
  *((_BYTE *)this + 1120) = 0;
  *((_BYTE *)this + 1132) = 0;
  *((_BYTE *)this + 1136) = 0;
  *((_BYTE *)this + 1148) = 0;
  *((_BYTE *)this + 1152) = 0;
  *((_BYTE *)this + 1164) = 0;
  *((_BYTE *)this + 1168) = 0;
  *((_BYTE *)this + 1184) = 0;
  *((_QWORD *)this + 149) = 0;
  *((_DWORD *)this + 300) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = v11;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 1204) = *(_BYTE *)(v11 + 97);
  *((_BYTE *)this + 1205) = 0;
  if (!*((_BYTE *)a2 + 274))
    v10 = *(_BYTE *)(v11 + 72) != 0;
  *((_BYTE *)this + 1206) = v10;
  *(_WORD *)((char *)this + 1207) = 0;
  *((_BYTE *)this + 1209) = 0;
  *((_OWORD *)this + 76) = 0u;
  v12 = *(_QWORD *)(v11 + 80);
  v13 = *(WTF::StringImpl **)(v11 + 88);
  v30[0] = (WTF::StringImpl *)"MediaStreamTrack";
  v30[1] = (WTF::StringImpl *)17;
  v30[2] = (WTF::StringImpl *)"MediaStreamTrack";
  v30[3] = v13;
  if (*(_BYTE *)(v12 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v30);
    v11 = *((_QWORD *)this + 12);
  }
  v14 = (WTF::StringImpl *)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v11 + 24, (_QWORD *)this + 7, (uint64_t)v30);
  if (*((_BYTE *)this + 1206))
  {
    v15 = *((_QWORD *)this + 12);
    if (!*(_BYTE *)(v15 + 197))
      goto LABEL_25;
    if (*((_BYTE *)a2 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x19546A6C4);
    }
    v16 = a2[63];
    if (!v16)
      goto LABEL_25;
    ++*((_DWORD *)v16 + 6);
    v17 = (WebCore::NavigatorMediaDevices *)WebCore::LocalDOMWindow::navigator(v16);
    v19 = (WebCore::NavigatorMediaDevices *)WebCore::NavigatorMediaDevices::from(v17, v18);
    v14 = (WTF::StringImpl *)WebCore::NavigatorMediaDevices::mediaDevices(v19);
    if (!v14)
    {
LABEL_23:
      if (*((_DWORD *)v16 + 6) == 1)
        v14 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v16 + 72))(v16);
      else
        --*((_DWORD *)v16 + 6);
LABEL_25:
      v25 = *((_QWORD *)this + 12);
      *((_BYTE *)this + 1207) = *(_BYTE *)(v25 + 98);
      if (!*(_BYTE *)(v25 + 64))
      {
        v26 = WebCore::PlatformMediaSessionManager::sharedManager(v14);
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v26 + 64, (_QWORD *)this + 9, (uint64_t)v30);
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 288))(v26);
      }
      return this;
    }
    v20 = v14;
    ++*((_DWORD *)v14 + 6);
    v21 = (WTF *)(v15 + 152);
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    WebCore::RealtimeMediaSourceCenter::hashStringWithSalt(v21, (WTF::StringImpl *)((char *)v20 + 112), (WTF::String *)v30);
    v23 = v30[0];
    v30[0] = 0;
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 149);
    *((_QWORD *)this + 149) = v23;
    if (v14)
    {
      v24 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
      {
LABEL_20:
        *(_DWORD *)v14 = v24;
        goto LABEL_21;
      }
      WTF::StringImpl::destroy(v14, v22);
      v14 = v30[0];
      v30[0] = 0;
      if (v14)
      {
        v24 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 != 2)
          goto LABEL_20;
        v14 = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v22);
      }
    }
LABEL_21:
    if (*((_DWORD *)v20 + 6) == 1)
    {
      WebCore::MediaDevices::~MediaDevices(v20, v22);
      v14 = (WTF::StringImpl *)bmalloc::api::isoDeallocate(v28, v29);
    }
    else
    {
      --*((_DWORD *)v20 + 6);
    }
    goto LABEL_23;
  }
  return this;
}

char *WebCore::MediaStreamTrack::logChannel(WebCore::MediaStreamTrack *this)
{
  return &WebCore::LogWebRTC;
}

void WebCore::MediaStreamTrack::~MediaStreamTrack(WebCore::MediaStreamTrack *this)
{
  WebCore::EventTarget *v2;
  _QWORD *v3;
  WebCore::PlatformMediaSessionManager *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF *v12;
  WebCore::MediaStreamTrackPrivate *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  WTF *v23;
  void *v24;
  _QWORD *v25;

  *(_QWORD *)this = &off_1E335ED60;
  *((_QWORD *)this + 4) = &unk_1E335EE48;
  v2 = (WebCore::MediaStreamTrack *)((char *)this + 32);
  *((_QWORD *)this + 7) = &unk_1E335EEC0;
  *((_QWORD *)this + 9) = &unk_1E335EF18;
  v3 = (_QWORD *)((char *)this + 72);
  *((_QWORD *)this + 11) = &unk_1E335EF48;
  v4 = (WebCore::PlatformMediaSessionManager *)WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 12) + 24, (_QWORD *)this + 7);
  if (*((_BYTE *)this + 1206))
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 12) + 64))
    {
      v6 = WebCore::PlatformMediaSessionManager::sharedManager(v4);
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v6 + 64, v3);
      if (!*(_BYTE *)(v6 + 80))
      {
        *(_BYTE *)(v6 + 80) = 1;
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v7 = off_1E3408070;
        v7[1] = v6;
        v25 = v7;
        WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(v6, (uint64_t *)&v25);
        if (v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      }
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaStreamTrack *)((char *)this + 120), v5);
  v12 = (WTF *)*((_QWORD *)this + 13);
  if (v12)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v12, v11);
  }
  v13 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v13, v11);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*((_DWORD *)v13 + 2);
    }
  }
  v14 = *((_QWORD *)this + 10);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
  }
  v18 = *((_QWORD *)this + 8);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::EventTarget::~EventTarget(v2, v11);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v22);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamTrack::~MediaStreamTrack(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaStreamTrack::~MediaStreamTrack(WebCore::MediaStreamTrack *this)
{
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 32));
}

{
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 56));
}

{
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 72));
}

{
  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 88));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 56));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 72));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamTrack::~MediaStreamTrack((WebCore::MediaStreamTrack *)((char *)this - 88));
  bmalloc::api::isoDeallocate(v1, v2);
}

WTF::StringImpl **WebCore::MediaStreamTrack::contentHint(WebCore::MediaStreamTrack *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  v2 = (WTF::StringImpl **)((char *)this + 1224);
  if (!*((_QWORD *)this + 153))
  {
    switch(*(_BYTE *)(*((_QWORD *)this + 12) + 77))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        WTF::AtomStringImpl::add();
        v3 = v6;
        break;
      default:
        v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
        if (*MEMORY[0x1E0CBF3B8])
          *(_DWORD *)v3 += 2;
        break;
    }
    v4 = *v2;
    *v2 = v3;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return v2;
}

uint64_t WebCore::MediaStreamTrack::setContentHint(WebCore::MediaStreamTrack *this, const WTF::String *a2)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  v4 = *(unsigned __int8 *)(*((_QWORD *)this + 12) + 64);
  v5 = *(_QWORD *)a2;
  if (!v4)
  {
    if (v5 && *(_DWORD *)(v5 + 4))
    {
      if ((MEMORY[0x19AEA53F4]() & 1) != 0)
      {
        v6 = 1;
      }
      else
      {
        result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "music", 5);
        if ((result & 1) == 0)
          return result;
        v6 = 2;
      }
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!v5 || !*(_DWORD *)(v5 + 4))
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  if ((MEMORY[0x19AEA53F4]() & 1) != 0)
  {
    v6 = 4;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "motion", 6) & 1) != 0)
  {
    v6 = 3;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "text", 4);
    if (!(_DWORD)result)
      return result;
    v6 = 5;
  }
LABEL_8:
  result = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)(*((_QWORD *)this + 12) + 77) = v6;
  return result;
}

WebCore::MediaStreamTrackPrivate *WebCore::MediaStreamTrack::clone@<X0>(WebCore::MediaStreamTrackPrivate *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::MediaStreamTrackPrivate *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LocalDOMWindow **v10;
  uint64_t v11;
  WebCore::ContextDestructionObserver *v12;
  void *v13;
  int v14;
  BOOL v15;
  WTF *v16;
  void *v17;
  WebCore::MediaStreamTrackPrivate *v18[4];

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v11 = 0;
    goto LABEL_22;
  }
  v5 = (uint64_t)this;
  v6 = *((_QWORD *)this + 12);
  v8 = *(_QWORD *)(v6 + 80);
  v7 = *(WebCore::MediaStreamTrackPrivate **)(v6 + 88);
  v18[0] = (WebCore::MediaStreamTrackPrivate *)"MediaStreamTrack";
  v18[1] = (WebCore::MediaStreamTrackPrivate *)17;
  v18[2] = (WebCore::MediaStreamTrackPrivate *)"clone";
  v18[3] = v7;
  if (*(_BYTE *)(v8 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v18);
    v9 = *(_QWORD *)(v5 + 8);
    if (!v9)
    {
      v10 = 0;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(v9 + 8);
  }
  if (v4)
    v10 = (WebCore::LocalDOMWindow **)(v4 - 96);
  else
    v10 = 0;
LABEL_9:
  WebCore::MediaStreamTrackPrivate::clone(*(WebCore::MediaStreamTrackPrivate **)(v5 + 96), (uint64_t *)v18);
  v11 = bmalloc::api::isoAllocate();
  v12 = WebCore::MediaStreamTrack::MediaStreamTrack((WebCore::ContextDestructionObserver *)v11, v10, (uint64_t *)v18);
  WebCore::ActiveDOMObject::suspendIfNeeded(v12);
  this = v18[0];
  v18[0] = 0;
  if (this)
  {
    if (*((_DWORD *)this + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(this, v13);
      this = (WebCore::MediaStreamTrackPrivate *)WTF::fastFree(v16, v17);
    }
    else
    {
      --*((_DWORD *)this + 2);
    }
  }
  v14 = *(_DWORD *)(v5 + 1200);
  *(_DWORD *)(v11 + 1200) = v14;
  if (*(_BYTE *)(v11 + 1205))
  {
    if (!v14)
LABEL_21:
      this = (WebCore::MediaStreamTrackPrivate *)WebCore::MediaStreamTrack::trackEnded((uint64_t **)v5, (WebCore::MediaStreamTrackPrivate *)v13);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(v11 + 96) + 74))
      v15 = v14 == 0;
    else
      v15 = 0;
    if (v15)
      goto LABEL_21;
  }
LABEL_22:
  *a2 = v11;
  return this;
}

unsigned int *WebCore::MediaStreamTrack::trackEnded(uint64_t **this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32[4];

  if (*((_BYTE *)this + 1206))
  {
    if (!*((_BYTE *)this[12] + 64))
    {
      v3 = WebCore::PlatformMediaSessionManager::sharedManager((WebCore::PlatformMediaSessionManager *)this);
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v3 + 64, this + 9);
      if (!*(_BYTE *)(v3 + 80))
      {
        *(_BYTE *)(v3 + 80) = 1;
        v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v4 = off_1E3408070;
        *((_QWORD *)v4 + 1) = v3;
        v32[0] = v4;
        WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(v3, (uint64_t *)v32);
        if (v32[0])
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32[0] + 8))(v32[0]);
      }
    }
  }
  v5 = this[12];
  v6 = v5[10];
  v7 = (WTF::StringImpl *)v5[11];
  v32[0] = (WTF::StringImpl *)"MediaStreamTrack";
  v32[1] = (WTF::StringImpl *)17;
  v32[2] = (WTF::StringImpl *)"trackEnded";
  v32[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v32);
    v5 = this[12];
  }
  if (*((_BYTE *)this + 1206) && *((_BYTE *)v5 + 75) && *((_DWORD *)this + 300) != 1)
  {
    v8 = this[1];
    if (v8)
    {
      v9 = v8[1];
      if (v9)
        v10 = v9 - 96;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v10 + 248))(v10, 1, 2, v32, 0);
    v12 = v32[0];
    v32[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v5 = this[12];
  }
  v13 = *((_BYTE *)v5 + 97);
  v14 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v14 = off_1E335F908;
  *(_QWORD *)(v14 + 8) = this;
  *(_BYTE *)(v14 + 16) = v13;
  v15 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  v16 = *((_DWORD *)this + 6);
  *(_QWORD *)(v15 + 8) = this;
  this[2] = (uint64_t *)((char *)this[2] + 1);
  *((_DWORD *)this + 6) = v16 + 2;
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = &off_1E335F8E0;
  *((_QWORD *)result + 1) = this;
  *((_QWORD *)result + 2) = v15;
  *((_QWORD *)result + 3) = v14;
  v32[0] = (WTF::StringImpl *)result;
  v21 = this[1];
  if (!v21)
  {
    v32[0] = 0;
    v24 = &off_1E335F8E0;
    goto LABEL_25;
  }
  v22 = v21[1];
  if (!v22)
  {
    v32[0] = 0;
    goto LABEL_24;
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v22 - 96) + 104))(v22 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v23, 11, (uint64_t *)v32);
  result = (unsigned int *)v32[0];
  v32[0] = 0;
  if (result)
  {
LABEL_24:
    v24 = *(uint64_t (***)())result;
LABEL_25:
    result = (unsigned int *)((uint64_t (*)(unsigned int *, uint64_t, uint64_t, uint64_t))v24[1])(result, v18, v19, v20);
  }
  if (!*((_BYTE *)this + 1205))
  {
    v25 = *((unsigned int *)this + 29);
    if ((_DWORD)v25)
    {
      v26 = this[13];
      v27 = 8 * v25;
      do
      {
        v28 = *v26++;
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v27 -= 8;
      }
      while (v27);
    }
    v29 = this[1];
    if (v29)
    {
      v30 = v29[1];
      if (v30)
      {
        if (!*(_BYTE *)(v30 + 178))
        {
          *(_DWORD *)(v30 - 264) += 2;
          result = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v30 - 288));
          if (*(_DWORD *)(v30 - 264) == 2)
          {
            if ((*(_WORD *)(v30 - 258) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)(v30 - 288), v31);
          }
          else
          {
            *(_DWORD *)(v30 - 264) -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaStreamTrack::stopTrack(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD v10[4];

  if (!*(_BYTE *)(result + 1205))
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 96);
    if (!*(_BYTE *)(v3 + 74))
    {
      v6 = *(_QWORD *)(v3 + 80);
      v5 = *(_QWORD *)(v3 + 88);
      v10[0] = "MediaStreamTrack";
      v10[1] = 17;
      v10[2] = "stopTrack";
      v10[3] = v5;
      v9 = a2;
      if (*(_BYTE *)(v6 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,int>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10, &v9);
      if (!a2)
      {
        *(_BYTE *)(v2 + 1205) = 1;
        *(_DWORD *)(v2 + 1200) = 1;
      }
      result = WebCore::MediaStreamTrackPrivate::endTrack(*(_QWORD *)(v2 + 96));
      *(_BYTE *)(v2 + 1205) = 1;
      v7 = *(_QWORD *)(v2 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (!*(_BYTE *)(v8 + 178))
          {
            *(_DWORD *)(v8 - 264) += 2;
            result = (uint64_t)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v8 - 288));
            if (*(_DWORD *)(v8 - 264) == 2)
            {
              if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
                return WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288));
            }
            else
            {
              *(_DWORD *)(v8 - 264) -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

int *WebCore::MediaStreamTrack::getSettings@<X0>(int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  float v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;

  v2 = *((_QWORD *)this + 12);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 76) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 84) = 0;
  *(_WORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_DWORD *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_WORD *)(a2 + 148) = 0;
  v3 = *(unsigned __int8 *)(v2 + 187);
  if (*(_BYTE *)(v2 + 187))
  {
    v4 = *(_DWORD *)(v2 + 104);
    *(_BYTE *)(a2 + 4) = 1;
    *(_DWORD *)a2 = v4;
  }
  if (*(_BYTE *)(v2 + 188))
  {
    v5 = *(_DWORD *)(v2 + 108);
    *(_BYTE *)(a2 + 12) = 1;
    *(_DWORD *)(a2 + 8) = v5;
    if (v3)
    {
      if (*(_BYTE *)(v2 + 189))
      {
        *(double *)(a2 + 16) = (double)*(int *)a2 / (double)v5;
        *(_BYTE *)(a2 + 24) = 1;
      }
    }
  }
  if (*(_BYTE *)(v2 + 190))
  {
    v6 = *(float *)(v2 + 112);
    *(_BYTE *)(a2 + 40) = 1;
    *(double *)(a2 + 32) = v6;
  }
  if (*(_BYTE *)(v2 + 191))
  {
    v7 = *(unsigned __int8 *)(v2 + 116);
    {
      WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl;
      unk_1EE2F8DC0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl;
      qword_1EE2F8DC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl;
      unk_1EE2F8DD0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl += 2;
      qword_1EE2F8DD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl;
    }
    v8 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[v7];
    if (v8)
      *v8 += 2;
    *(_QWORD *)(a2 + 48) = v8;
  }
  if (*(_BYTE *)(v2 + 192))
  {
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(v2 + 120);
    *(_BYTE *)(a2 + 64) = 1;
  }
  if (*(_BYTE *)(v2 + 193))
  {
    v9 = *(_DWORD *)(v2 + 128);
    *(_BYTE *)(a2 + 76) = 1;
    *(_DWORD *)(a2 + 72) = v9;
  }
  if (*(_BYTE *)(v2 + 194))
  {
    v10 = *(_DWORD *)(v2 + 132);
    *(_BYTE *)(a2 + 84) = 1;
    *(_DWORD *)(a2 + 80) = v10;
  }
  if (*(_BYTE *)(v2 + 195))
    *(_WORD *)(a2 + 88) = *(unsigned __int8 *)(v2 + 136) | 0x100;
  if (*(_BYTE *)(v2 + 196))
  {
    v11 = *(_DWORD **)(v2 + 144);
    if (v11)
      *v11 += 2;
    *(_QWORD *)(a2 + 104) = v11;
  }
  if (*(_BYTE *)(v2 + 197))
  {
    v12 = (_DWORD *)*((_QWORD *)this + 149);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(a2 + 112) = v12;
  }
  if (*(_BYTE *)(v2 + 198))
  {
    v13 = *(unsigned __int8 *)(v2 + 168);
    if (v13 != 4)
    {
      {
        this = &WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_1::operator() const(void)::impl;
        WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_0::operator() const(void)::impl += 2;
        WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_1::operator() const(void)::impl += 2;
        WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_2::operator() const(void)::impl += 2;
        WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_3::operator() const(void)::impl += 2;
        WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::values[0] = (uint64_t)&WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_0::operator() const(void)::impl;
        unk_1EE2F8DF0 = &WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_1::operator() const(void)::impl;
        qword_1EE2F8DF8 = (uint64_t)&WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_2::operator() const(void)::impl;
        unk_1EE2F8E00 = &WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_3::operator() const(void)::impl;
        WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_4::operator() const(void)::impl += 2;
        qword_1EE2F8E08 = (uint64_t)&WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_4::operator() const(void)::impl;
      }
      v14 = (_DWORD *)WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::values[v13];
      if (v14)
        *v14 += 2;
      *(_QWORD *)(a2 + 96) = v14;
    }
  }
  if (*(_BYTE *)(v2 + 201))
  {
    v15 = *(unsigned __int8 *)(v2 + 170);
    {
      WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_2::operator() const(void)::impl += 2;
      this = (int *)(WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_3::operator() const(void)::impl
                                 + 2);
      WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MeteringMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F4898 = &WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl;
      qword_1EE2F48A0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_2::operator() const(void)::impl;
      unk_1EE2F48A8 = &WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_3::operator() const(void)::impl;
    }
    v16 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::MeteringMode)::values[v15];
    if (v16)
      *v16 += 2;
    *(_QWORD *)(a2 + 120) = v16;
  }
  if (*(_BYTE *)(v2 + 202))
  {
    *(_QWORD *)(a2 + 128) = *(_QWORD *)(v2 + 176);
    *(_BYTE *)(a2 + 136) = 1;
  }
  if (*(_BYTE *)(v2 + 203))
    *(_WORD *)(a2 + 144) = *(unsigned __int8 *)(v2 + 184) | 0x100;
  if (*(_BYTE *)(v2 + 204))
    *(_WORD *)(a2 + 146) = *(unsigned __int8 *)(v2 + 185) | 0x100;
  if (*(_BYTE *)(v2 + 205))
    *(_WORD *)(a2 + 148) = *(unsigned __int8 *)(v2 + 186) | 0x100;
  return this;
}

WTF::StringImpl *WebCore::MediaStreamTrack::getCapabilities@<X0>(WebCore::MediaStreamTrack *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  BOOL v11;
  _DWORD *v12;

  result = (WTF::StringImpl *)WebCore::toMediaTrackCapabilities((int *)(*((_QWORD *)this + 12) + 208), (uint64_t)this + 1192, a2);
  v6 = *((_QWORD *)this + 12);
  v7 = *(WTF::StringImpl **)(v6 + 144);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *(WTF::StringImpl **)(v6 + 152);
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = *(WTF::StringImpl **)(v6 + 160);
  if (v9)
    *(_DWORD *)v9 += 2;
  v10 = *(unsigned __int8 *)(v6 + 168);
  if (*(_BYTE *)(v6 + 198))
    v11 = (_DWORD)v10 == 4;
  else
    v11 = 1;
  if (!v11)
  {
    {
      WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_0::operator() const(void)::impl += 2;
      WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_1::operator() const(void)::impl += 2;
      WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_2::operator() const(void)::impl += 2;
      WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_3::operator() const(void)::impl += 2;
      WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::values[0] = (uint64_t)&WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_0::operator() const(void)::impl;
      unk_1EE2F8DF0 = &WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_1::operator() const(void)::impl;
      qword_1EE2F8DF8 = (uint64_t)&WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_2::operator() const(void)::impl;
      unk_1EE2F8E00 = &WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_3::operator() const(void)::impl;
      WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_4::operator() const(void)::impl += 2;
      qword_1EE2F8E08 = (uint64_t)&WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::$_4::operator() const(void)::impl;
    }
    v12 = (_DWORD *)WebCore::RealtimeMediaSourceSettings::displaySurface(WebCore::DisplaySurfaceType)::values[v10];
    if (v12)
      *v12 += 2;
    result = *(WTF::StringImpl **)(a2 + 264);
    *(_QWORD *)(a2 + 264) = v12;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (!v9)
          goto LABEL_21;
        goto LABEL_19;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v9)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v9 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v5);
  else
    *(_DWORD *)v9 -= 2;
LABEL_21:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v5);
      if (!v7)
        return result;
      goto LABEL_25;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return result;
LABEL_25:
  if (*(_DWORD *)v7 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v5);
  *(_DWORD *)v7 -= 2;
  return result;
}

void WebCore::MediaStreamTrack::applyConstraints(uint64_t a1, WebCore *this, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  void *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _BYTE v31[944];
  __int128 v32;
  char v33;
  uint64_t v34;
  _DWORD *v35;
  _BYTE v36[1048];
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  char v41;
  _DWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 1205))
  {
    v4 = *a3;
    v5 = *(_QWORD *)(*a3 + 24);
    if (v5 && *(_QWORD *)v5 && (*(_BYTE *)(v5 + 8) & 3) == 0)
    {
      v6 = *(_QWORD *)(v4 + 32);
      if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
        v7 = 0;
      else
        v7 = *(uint64_t **)v6;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v4, v7, 0, (objc_class *)0xA);
      MEMORY[0x19AEA32A0](&v34);
    }
    return;
  }
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *((unsigned __int8 *)this + 1072);
  if (*((_BYTE *)this + 1072))
  {
    WebCore::createMediaConstraints(this, (uint64_t)v31);
    v11 = *((unsigned __int8 *)this + 1072);
  }
  else
  {
    v33 = 1;
    v31[0] = 0;
    v31[48] = 0;
    v31[56] = 0;
    v31[104] = 0;
    v31[112] = 0;
    v31[160] = 0;
    v31[168] = 0;
    v31[216] = 0;
    v31[224] = 0;
    v31[304] = 0;
    v31[312] = 0;
    v31[392] = 0;
    v31[400] = 0;
    v31[480] = 0;
    v31[488] = 0;
    v31[504] = 0;
    v31[512] = 0;
    v31[528] = 0;
    v31[536] = 0;
    v31[552] = 0;
    v31[560] = 0;
    v31[608] = 0;
    v31[616] = 0;
    v31[664] = 0;
    v31[672] = 0;
    v31[720] = 0;
    v31[728] = 0;
    v31[776] = 0;
    v31[784] = 0;
    v31[864] = 0;
    v31[872] = 0;
    v31[888] = 0;
    v31[896] = 0;
    v31[912] = 0;
    v31[920] = 0;
    v31[936] = 0;
    v32 = 0u;
  }
  ++*(_DWORD *)(a1 + 24);
  v34 = a1;
  v35 = (_DWORD *)a1;
  v36[0] = 0;
  v41 = 0;
  if (v11)
  {
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)v36, (uint64_t)this);
    LOBYTE(v37) = 0;
    v40 = 0;
    if (*((_BYTE *)this + 1064))
    {
      v12 = *((_DWORD *)this + 265);
      v37 = 0;
      v38 = 0;
      v39 = v12;
      if (v12)
      {
        if (v12 >= 0x3E88CC)
          goto LABEL_45;
        v13 = 1048 * v12;
        v14 = WTF::fastMalloc((WTF *)(1048 * v12));
        v38 = (v13 & 0xFFFFFFF8) / 0x418;
        v37 = v14;
        v15 = *((_DWORD *)this + 265);
        if (v15)
        {
          v16 = *((_QWORD *)this + 131);
          v17 = 1048 * v15;
          do
          {
            v14 = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v14, v16) + 1048;
            v16 += 1048;
            v17 -= 1048;
          }
          while (v17);
        }
      }
      v40 = 1;
    }
    v41 = 1;
  }
  v18 = *a3;
  *a3 = 0;
  v42 = (_DWORD *)v18;
  v19 = WTF::fastMalloc((WTF *)0x458);
  *(_QWORD *)v19 = &off_1E335F890;
  *(_QWORD *)(v19 + 8) = v34;
  v20 = v35;
  v35 = 0;
  *(_QWORD *)(v19 + 16) = v20;
  *(_BYTE *)(v19 + 24) = 0;
  *(_BYTE *)(v19 + 1096) = 0;
  if (v41)
  {
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v19 + 24, (uint64_t)v36);
    *(_BYTE *)(v19 + 1072) = 0;
    *(_BYTE *)(v19 + 1088) = 0;
    if (!v40)
    {
LABEL_29:
      *(_BYTE *)(v19 + 1096) = 1;
      goto LABEL_30;
    }
    v21 = v39;
    *(_QWORD *)(v19 + 1072) = 0;
    *(_QWORD *)(v19 + 1080) = 0;
    *(_DWORD *)(v19 + 1084) = v21;
    if (!v21)
    {
LABEL_28:
      *(_BYTE *)(v19 + 1088) = 1;
      goto LABEL_29;
    }
    if (v21 < 0x3E88CC)
    {
      v22 = 1048 * v21;
      v23 = WTF::fastMalloc((WTF *)(1048 * v21));
      *(_DWORD *)(v19 + 1080) = (v22 & 0xFFFFFFF8) / 0x418;
      *(_QWORD *)(v19 + 1072) = v23;
      if (v39)
      {
        v24 = v37;
        v25 = 1048 * v39;
        do
        {
          v23 = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v23, v24) + 1048;
          v24 += 1048;
          v25 -= 1048;
        }
        while (v25);
      }
      goto LABEL_28;
    }
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x19546BAA4);
  }
LABEL_30:
  v26 = v42;
  v42 = 0;
  *(_QWORD *)(v19 + 1104) = v26;
  v30 = v19;
  WebCore::MediaStreamTrackPrivate::applyConstraints(v10, (uint64_t)v31, &v30);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v28 = v42;
  v42 = 0;
  if (v28)
  {
    if (v28[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[4];
  }
  if (v41)
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)v36, v27);
  v29 = v35;
  v35 = 0;
  if (v29)
  {
    if (v29[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
    else
      --v29[6];
  }
  WebCore::MediaConstraints::~MediaConstraints((WebCore::MediaConstraints *)v31, (WTF::StringImpl *)v27);
}

uint64_t WebCore::MediaStreamTrack::captureState(WebCore::MediaStreamTrack *this, const WebCore::RealtimeMediaSource *a2)
{
  uint64_t result;

  switch((*(unsigned int (**)(WebCore::MediaStreamTrack *, const WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 208))(this, a2))
  {
    case 1u:
      if (*((_BYTE *)this + 289))
      {
        result = 0x2000;
      }
      else if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 88))(this) & 1) != 0)
      {
        result = 0x8000;
      }
      else
      {
        if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 64))(this) & 1) == 0)
          goto LABEL_26;
        result = 2048;
      }
      break;
    case 3u:
      if (*((_BYTE *)this + 289))
      {
        result = 0x4000;
      }
      else if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 88))(this) & 1) != 0)
      {
        result = 0x10000;
      }
      else
      {
        if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 64))(this) & 1) == 0)
          goto LABEL_26;
        result = 4096;
      }
      break;
    case 4u:
      if (*((_BYTE *)this + 289))
      {
        result = 0x80000;
      }
      else if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 88))(this) & 1) != 0)
      {
        result = 0x100000;
      }
      else
      {
        if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 64))(this) & 1) == 0)
          goto LABEL_26;
        result = 0x40000;
      }
      break;
    case 5u:
      if (*((_BYTE *)this + 289))
      {
        result = 0x400000;
      }
      else if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 88))(this) & 1) != 0)
      {
        result = 0x800000;
      }
      else
      {
        if (((*(uint64_t (**)(WebCore::MediaStreamTrack *))(*(_QWORD *)this + 64))(this) & 1) == 0)
          goto LABEL_26;
        result = 0x200000;
      }
      break;
    default:
LABEL_26:
      result = 0;
      break;
  }
  return result;
}

unsigned int *WebCore::MediaStreamTrack::trackStarted(unsigned int *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];

  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 12);
  v5 = *(_QWORD *)(v3 + 80);
  v4 = *(_QWORD *)(v3 + 88);
  v9[0] = "MediaStreamTrack";
  v9[1] = 17;
  v9[2] = "trackStarted";
  v9[3] = v4;
  if (*(_BYTE *)(v5 + 12))
    this = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  v6 = *(_QWORD *)(v2 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (!*(_BYTE *)(v7 + 178))
      {
        *(_DWORD *)(v7 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v7 - 288));
        if (*(_DWORD *)(v7 - 264) == 2)
        {
          if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), v8);
        }
        else
        {
          *(_DWORD *)(v7 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::MediaStreamTrack::trackStarted(unsigned int *this, WebCore::MediaStreamTrackPrivate *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];

  v2 = this;
  v3 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v3 + 80);
  v4 = *(_QWORD *)(v3 + 88);
  v9[0] = "MediaStreamTrack";
  v9[1] = 17;
  v9[2] = "trackStarted";
  v9[3] = v4;
  if (*(_BYTE *)(v5 + 12))
    this = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  v6 = *((_QWORD *)v2 - 6);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if (!*(_BYTE *)(v7 + 178))
      {
        *(_DWORD *)(v7 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v7 - 288));
        if (*(_DWORD *)(v7 - 264) == 2)
        {
          if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), v8);
        }
        else
        {
          *(_DWORD *)(v7 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::MediaStreamTrack::trackEnded(uint64_t **this, WebCore::MediaStreamTrackPrivate *a2)
{
  return WebCore::MediaStreamTrack::trackEnded(this - 7, a2);
}

void WebCore::MediaStreamTrack::trackMutedChanged(WebCore::MediaStreamTrack *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t (***v25)();

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v3)
  {
    v4 = v3 - 96;
    v5 = *(unsigned __int8 *)(v3 + 178);
    if (*(_BYTE *)(v3 + 178))
    {
      if (v5 == 1 || v5 == 2)
        ++*(_DWORD *)(v3 + 216);
    }
    else
    {
      *(_DWORD *)(v3 - 264) += 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = v3 - 96;
  if (!v3)
    v6 = 0;
  if (!*(_BYTE *)(v6 + 276) && !*((_BYTE *)this + 1205))
  {
    v7 = *(_BYTE *)(*((_QWORD *)this + 12) + 97);
    v8 = WTF::fastMalloc((WTF *)0x18);
    v10 = v8;
    *(_QWORD *)v8 = off_1E335F930;
    *(_QWORD *)(v8 + 8) = this;
    *(_BYTE *)(v8 + 16) = v7;
    if (*((_BYTE *)this + 1208))
    {
      WTF::Detail::CallableWrapper<WebCore::MediaStreamTrack::trackMutedChanged(WebCore::MediaStreamTrackPrivate &)::$_0,void>::call((unsigned int *)v8, v9);
      goto LABEL_19;
    }
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    v12 = *((_DWORD *)this + 6);
    *(_QWORD *)(v11 + 8) = this;
    ++*((_QWORD *)this + 2);
    *((_DWORD *)this + 6) = v12 + 2;
    v13 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v13 = &off_1E335F8E0;
    v13[1] = (uint64_t (**)())this;
    v13[2] = (uint64_t (**)())v11;
    v13[3] = (uint64_t (**)())v10;
    v25 = v13;
    v14 = *((_QWORD *)this + 1);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v16, 11, (uint64_t *)&v25);
        v13 = v25;
        v25 = 0;
        if (!v13)
          goto LABEL_18;
      }
      else
      {
        v25 = 0;
      }
      v17 = *v13;
    }
    else
    {
      v25 = 0;
      v17 = &off_1E335F8E0;
    }
    v17[1]();
LABEL_18:
    v10 = 0;
LABEL_19:
    v18 = *((_QWORD *)this + 1);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        if (!*(_BYTE *)(v19 + 178))
        {
          *(_DWORD *)(v19 - 264) += 2;
          WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v19 - 288));
          if (*(_DWORD *)(v19 - 264) == 2)
          {
            if ((*(_WORD *)(v19 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v19 - 288), a2);
          }
          else
          {
            *(_DWORD *)(v19 - 264) -= 2;
          }
        }
      }
    }
    v20 = *((unsigned __int8 *)this + 1207);
    v21 = *((_QWORD *)this + 12);
    v22 = *(unsigned __int8 *)(v21 + 98);
    *((_BYTE *)this + 1207) = v22;
    v23 = v20 == v22 || *((_BYTE *)this + 1206) == 0;
    if (!v23
      && !*(_BYTE *)(v21 + 64)
      && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v4) + 480) & 0x8000000) != 0)
    {
      if (*(_BYTE *)(v4 + 274))
      {
        if (*(unsigned __int8 *)(v4 + 274) - 1 <= 1)
          ++*(_DWORD *)(v4 + 312);
        __break(0xC471u);
        JUMPOUT(0x19546C0C8);
      }
      *(_DWORD *)(v4 - 168) += 2;
      WebCore::Document::updateVideoCaptureStateForMicrophoneInterruption((WebCore::Document *)(v4 - 192), *((unsigned __int8 *)this + 1207));
      if (*(_DWORD *)(v4 - 168) == 2)
      {
        if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
      }
      else
      {
        *(_DWORD *)(v4 - 168) -= 2;
      }
    }
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (v3)
  {
    v24 = *(unsigned __int8 *)(v4 + 274);
    if (*(_BYTE *)(v4 + 274))
    {
      if (v24 == 1)
      {
        if (*(_DWORD *)(v4 + 312) == 1)
          (*(void (**)(uint64_t, WebCore::MediaStreamTrackPrivate *))(*(_QWORD *)v4 + 40))(v4, a2);
        else
          --*(_DWORD *)(v4 + 312);
      }
      else if (v24 == 2)
      {
        WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 312));
      }
    }
    else if (*(_DWORD *)(v4 - 168) == 2)
    {
      if ((*(_WORD *)(v4 - 162) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v4 - 168) -= 2;
    }
  }
}

void `non-virtual thunk to'WebCore::MediaStreamTrack::trackMutedChanged(WebCore::MediaStreamTrack *this, WebCore::MediaStreamTrackPrivate *a2)
{
  WebCore::MediaStreamTrack::trackMutedChanged((WebCore::MediaStreamTrack *)((char *)this - 56), a2);
}

unsigned int *WebCore::MediaStreamTrack::trackSettingsChanged(unsigned int *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v3 - 288));
        if (*(_DWORD *)(v3 - 264) == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v4);
        }
        else
        {
          *(_DWORD *)(v3 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::MediaStreamTrack::trackSettingsChanged(unsigned int *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this - 6);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v3 - 288));
        if (*(_DWORD *)(v3 - 264) == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v4);
        }
        else
        {
          *(_DWORD *)(v3 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

_QWORD *WebCore::MediaStreamTrack::trackConfigurationChanged(WebCore::MediaStreamTrack *this, WebCore::MediaStreamTrackPrivate *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E335F958;
  v3[1] = this;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this + 6);
  *(_QWORD *)(v4 + 8) = this;
  ++*((_QWORD *)this + 2);
  *((_DWORD *)this + 6) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E335F8E0;
  result[1] = this;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this + 1);
  if (!v7)
  {
    v11 = 0;
    v10 = &off_1E335F8E0;
    return (_QWORD *)v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 11, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = (uint64_t (**)())*result;
    return (_QWORD *)v10[1]();
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::MediaStreamTrack::trackConfigurationChanged(WebCore::MediaStreamTrack *this, WebCore::MediaStreamTrackPrivate *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  _QWORD *v12;

  v3 = (char *)this - 56;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E335F958;
  v4[1] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *((_DWORD *)this - 8);
  *(_QWORD *)(v5 + 8) = v3;
  ++*((_QWORD *)this - 5);
  *((_DWORD *)this - 8) = v6 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E335F8E0;
  result[1] = v3;
  result[2] = v5;
  result[3] = v4;
  v12 = result;
  v8 = *((_QWORD *)this - 6);
  if (!v8)
  {
    v12 = 0;
    v11 = &off_1E335F8E0;
    return (_QWORD *)v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = (uint64_t (**)())*result;
    return (_QWORD *)v11[1]();
  }
  return result;
}

unsigned int *WebCore::MediaStreamTrack::trackEnabledChanged(unsigned int *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v3 - 288));
        if (*(_DWORD *)(v3 - 264) == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v4);
        }
        else
        {
          *(_DWORD *)(v3 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::MediaStreamTrack::trackEnabledChanged(unsigned int *this, WebCore::MediaStreamTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this - 6);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateIsPlayingMedia((WebCore::Document *)(v3 - 288));
        if (*(_DWORD *)(v3 - 264) == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v4);
        }
        else
        {
          *(_DWORD *)(v3 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::MediaStreamTrack::suspend(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  _DWORD *v13;
  uint64_t v14[7];

  if (a2 == 2)
  {
    v14[5] = v2;
    v14[6] = v3;
    v4 = (_QWORD *)result;
    if (!*(_BYTE *)(result + 1205))
    {
      if (*(_BYTE *)(result + 1206))
      {
        v5 = (WebCore *)WebCore::MediaStreamTrack::stopTrack(result, 0);
        v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
          v7 = WebCore::threadGlobalDataSlow(v5);
        v8 = *(_QWORD *)(v7 + 40);
        if (!v8)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
          v8 = *(_QWORD *)(v7 + 40);
        }
        v9 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
        *(_QWORD *)v9 = off_1E33A4B48;
        *(_QWORD *)(v9 + 8) = 0;
        v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x1E8200;
        v12 = *(_QWORD *)(v8 + 752) != 0;
        *(_DWORD *)(v9 + 16) = 1;
        *(_DWORD *)(v9 + 20) = v11 | v12;
        v13 = *(_DWORD **)(v8 + 752);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v9 + 24) = v13;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0;
        *(_QWORD *)(v9 + 56) = v10;
        *(_QWORD *)(v9 + 64) = 0;
        v14[0] = v9;
        WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v4, (uint64_t)(v4 + 4), 11, v14);
        result = v14[0];
        if (v14[0])
        {
          if (*(_DWORD *)(v14[0] + 16) == 1)
            return (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 8))();
          else
            --*(_DWORD *)(v14[0] + 16);
        }
      }
    }
  }
  return result;
}

BOOL WebCore::MediaStreamTrack::virtualHasPendingActivity(WebCore::MediaStreamTrack *this)
{
  return *((_BYTE *)this + 1205) == 0;
}

BOOL WebCore::MediaStreamTrack::isCapturingAudio(WebCore::MediaStreamTrack *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 1205))
    return 0;
  v1 = *((_QWORD *)this + 12);
  return !*(_BYTE *)(v1 + 74) && *(_BYTE *)(v1 + 97) == 0;
}

BOOL `non-virtual thunk to'WebCore::MediaStreamTrack::isCapturingAudio(WebCore::MediaStreamTrack *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 1133))
    return 0;
  v1 = *((_QWORD *)this + 3);
  return !*(_BYTE *)(v1 + 74) && *(_BYTE *)(v1 + 97) == 0;
}

BOOL WebCore::MediaStreamTrack::wantsToCaptureAudio(WebCore::MediaStreamTrack *this)
{
  _BYTE *v1;

  if (*((_BYTE *)this + 1205))
    return 0;
  v1 = (_BYTE *)*((_QWORD *)this + 12);
  if (v1[74])
    return 0;
  if (v1[97])
    return v1[98] != 0;
  return 1;
}

BOOL `non-virtual thunk to'WebCore::MediaStreamTrack::wantsToCaptureAudio(WebCore::MediaStreamTrack *this)
{
  _BYTE *v1;

  if (*((_BYTE *)this + 1133))
    return 0;
  v1 = (_BYTE *)*((_QWORD *)this + 3);
  if (v1[74])
    return 0;
  if (v1[97])
    return v1[98] != 0;
  return 1;
}

WTF::StringImpl *WebCore::MediaStreamTrack::detach@<X0>(WebCore::MediaStreamTrack *this@<X0>, uint64_t *a2@<X8>)
{
  *((_BYTE *)this + 1209) = 1;
  return WebCore::MediaStreamTrackPrivate::toDataHolder(*((_QWORD *)this + 12), 0, a2);
}

WebCore::MediaStreamTrackPrivate *WebCore::MediaStreamTrack::create@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, WebCore::ContextDestructionObserver **a3@<X8>)
{
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  WebCore::MediaStreamTrackPrivate *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WebCore::ContextDestructionObserver *v16;
  WebCore::ContextDestructionObserver *v17;
  void *v18;
  WebCore::MediaStreamTrackPrivate *result;
  WTF *v20;
  void *v21;
  unsigned int *v22;
  WebCore::MediaStreamTrackPrivate *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E335DEC0;
  *(_BYTE *)(v6 + 12) = 1;
  *(_QWORD *)(v6 + 16) = a1;
  v22 = (unsigned int *)v6;
  v7 = operator new(0x30uLL);
  *(_QWORD *)v7 = &off_1E335F980;
  v8 = *(_OWORD *)(a1 + 240);
  v7[1] = *(_OWORD *)(a1 + 224);
  v7[2] = v8;
  v25 = v7;
  v9 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v23 = (WebCore::MediaStreamTrackPrivate *)WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v9, (uint64_t *)&v22, a2, (uint64_t)v24);
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*((WebCore::MediaStreamTrackPrivateSourceObserver **)v23 + 5), v9);
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
    goto LABEL_5;
  }
  if (v25)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v16 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v17 = WebCore::MediaStreamTrack::MediaStreamTrack(v16, (WebCore::LocalDOMWindow **)a1, (uint64_t *)&v23);
  *a3 = v17;
  WebCore::ActiveDOMObject::suspendIfNeeded(v17);
  result = v23;
  if (v23)
  {
    if (*((_DWORD *)v23 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v23, v18);
      return (WebCore::MediaStreamTrackPrivate *)WTF::fastFree(v20, v21);
    }
    else
    {
      --*((_DWORD *)v23 + 2);
    }
  }
  return result;
}

char *`non-virtual thunk to'WebCore::MediaStreamTrack::logChannel(WebCore::MediaStreamTrack *this)
{
  return &WebCore::LogWebRTC;
}

void WebCore::MediaStreamTrackEvent::~MediaStreamTrackEvent(WebCore::MediaStreamTrackEvent *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::MediaStreamTrackProcessor::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  _WORD *v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  if (!*(_BYTE *)(v4 + 64) || *(_BYTE *)(*(_QWORD *)a2 + 1205) || *(_BYTE *)(v4 + 74))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    v6 = 1;
  }
  else
  {
    v7 = a2;
    v9 = bmalloc::api::isoAllocate();
    v10 = *(_QWORD *)v7;
    ++*(_DWORD *)(*(_QWORD *)v7 + 24);
    LOWORD(v7) = v7[4];
    *(_DWORD *)(v9 + 16) = 1;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)v9 = &off_1E33A18C0;
    *(_QWORD *)(v9 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v9, a1);
    *(_QWORD *)v9 = &off_1E335FED0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    v11 = *((_OWORD *)a1 + 15);
    v16[0] = *((_OWORD *)a1 + 14);
    v16[1] = v11;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 96) + 40) + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12);
    v14 = v12;
    v13 = WebCore::MediaStreamTrackProcessor::VideoFrameObserverWrapper::create(v16, v9, &v14, (__int16)v7, &v15);
    result = v14;
    *(_QWORD *)(v9 + 48) = v15;
    if (result)
      result = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 144))(result, v13);
    v6 = 0;
    *(_QWORD *)(v9 + 56) = v10;
    *(_QWORD *)a3 = v9;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

double WebCore::MediaStreamTrackProcessor::VideoFrameObserverWrapper::create@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, __int16 a4@<W3>, uint64_t *a5@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  double result;
  __int128 v22;
  __int128 v23;

  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 208))(*a3);
  v11 = WTF::fastMalloc((WTF *)0x10);
  v22 = *a1;
  v23 = a1[1];
  *(_DWORD *)v11 = 1;
  v12 = WTF::fastMalloc((WTF *)0x70);
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
    goto LABEL_14;
  v13 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = a2;
  v15 = *(unsigned int **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v13;
  if (!v15)
    goto LABEL_14;
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v14);
  }
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
LABEL_14:
    do
      v18 = __ldaxr((unsigned int *)v13);
    while (__stlxr(v18 + 1, (unsigned int *)v13));
  }
  if (v10 == 3)
    v19 = 1;
  else
    v19 = a4;
  *(_QWORD *)v12 = off_1E335EF88;
  *(_BYTE *)(v12 + 8) = 0;
  *(_OWORD *)(v12 + 16) = v22;
  *(_OWORD *)(v12 + 32) = v23;
  *(_QWORD *)(v12 + 48) = v13;
  v20 = *a3;
  *a3 = 0;
  *(_QWORD *)(v12 + 56) = v20;
  *(_BYTE *)(v12 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_WORD *)(v12 + 104) = v19;
  *(_QWORD *)(v11 + 8) = v12;
  *a5 = v11;
  return result;
}

void WebCore::MediaStreamTrackProcessor::~MediaStreamTrackProcessor(WebCore::MediaStreamTrackProcessor *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::MediaStreamTrackProcessor::Source *v10;
  bmalloc::api *v11;
  void *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  *(_QWORD *)this = &off_1E335FED0;
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E335FA10;
      v20[1] = v3;
      v22 = v20;
      WTF::ensureOnMainThread();
      if (v22)
        (*(void (**)(_QWORD *))(*v22 + 8))(v22);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[6];
  }
  v7 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v21 = off_1E335FA10;
      v21[1] = v7;
      v23 = v21;
      WTF::ensureOnMainThread();
      if (v23)
        (*(void (**)(_QWORD *))(*v23 + 8))(v23);
    }
  }
  v10 = (WebCore::MediaStreamTrackProcessor::Source *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    WebCore::MediaStreamTrackProcessor::Source::~Source(v10);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  v13 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      v19 = (_DWORD *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v19)
      {
        if (v19[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
        else
          --v19[4];
      }
      WTF::fastFree(v13, a2);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v14);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MediaStreamTrackProcessor::~MediaStreamTrackProcessor(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::MediaStreamTrackProcessor::Source *WebCore::MediaStreamTrackProcessor::readable@<X0>(WebCore::MediaStreamTrackProcessor::Source *this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  WebCore::MediaStreamTrackProcessor::Source *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::MediaStreamTrackProcessor::Source *v15;
  bmalloc::api *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  int v21;
  bmalloc::api *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WebCore::MediaStreamTrackProcessor *v31;
  WTF::StringImpl *v32;
  _QWORD v33[2];
  int v34;

  v4 = (_DWORD *)*((_QWORD *)this + 4);
  if (v4)
  {
LABEL_2:
    ++*v4;
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 16) = 0;
    return this;
  }
  v6 = this;
  v7 = *((_QWORD *)this + 7);
  v8 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
  ++*(_DWORD *)(v7 + 24);
  *((_BYTE *)v8 + 16) = 0;
  *((_BYTE *)v8 + 24) = 0;
  *((_QWORD *)v8 + 4) = &unk_1E335F028;
  *((_QWORD *)v8 + 5) = 0;
  *(_QWORD *)v8 = off_1E335EFB0;
  *((_QWORD *)v8 + 1) = 0;
  *((_WORD *)v8 + 24) = 0;
  *((_QWORD *)v8 + 7) = v7;
  v9 = *((_QWORD *)v6 + 3);
  if (v9)
    goto LABEL_37;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = v6;
  v11 = (unsigned int *)*((_QWORD *)v6 + 3);
  *((_QWORD *)v6 + 3) = v9;
  if (!v11)
    goto LABEL_37;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *((_QWORD *)v6 + 3);
  if (v9)
  {
LABEL_37:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  *((_QWORD *)v8 + 8) = v9;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(*((_QWORD *)v8 + 7) + 96) + 24, (_QWORD *)v8 + 4, (uint64_t)v33);
  v15 = (WebCore::MediaStreamTrackProcessor::Source *)*((_QWORD *)v6 + 5);
  *((_QWORD *)v6 + 5) = v8;
  if (v15)
  {
    WebCore::MediaStreamTrackProcessor::Source::~Source(v15);
    bmalloc::api::isoDeallocate(v16, v17);
    v8 = (WTF::StringImpl *)*((_QWORD *)v6 + 5);
  }
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 16))(v8);
  v32 = v8;
  v18 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>((uint64_t)a2, &v32);
  WebCore::ReadableStream::createFromJSValues(a2, v18, 0xAuLL, (uint64_t)v33);
  v20 = v32;
  v32 = 0;
  if (v20)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 24))(v20);
  v21 = v34;
  if (!v34)
  {
    v25 = v33[0];
    v33[0] = 0;
    v26 = (WTF *)*((_QWORD *)v6 + 4);
    *((_QWORD *)v6 + 4) = v25;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
      {
        v30 = (_DWORD *)*((_QWORD *)v26 + 1);
        *((_QWORD *)v26 + 1) = 0;
        if (v30)
        {
          if (v30[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
          else
            --v30[4];
        }
        WTF::fastFree(v26, v19);
      }
      else
      {
        --*(_DWORD *)v26;
      }
    }
    v27 = (unsigned int *)*((_QWORD *)v6 + 6);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = &off_1E335FA38;
    *((_QWORD *)v29 + 1) = v27;
    v32 = v29;
    WTF::callOnMainThreadAndWait();
    this = v32;
    v32 = 0;
    if (this)
      this = (WebCore::MediaStreamTrackProcessor::Source *)(*(uint64_t (**)(WebCore::MediaStreamTrackProcessor::Source *))(*(_QWORD *)this + 8))(this);
    if (v34 != -1)
      this = (WebCore::MediaStreamTrackProcessor::Source *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E335F6B0[v34])(&v32, v33);
    v4 = (_DWORD *)*((_QWORD *)v6 + 4);
    goto LABEL_2;
  }
  this = (WebCore::MediaStreamTrackProcessor::Source *)*((_QWORD *)v6 + 5);
  *((_QWORD *)v6 + 5) = 0;
  if (this)
  {
    WebCore::MediaStreamTrackProcessor::Source::~Source(this);
    this = (WebCore::MediaStreamTrackProcessor::Source *)bmalloc::api::isoDeallocate(v22, v23);
  }
  if (v21 == 1)
  {
    v24 = v33[1];
    *(_BYTE *)a3 = v33[0];
    *(_QWORD *)(a3 + 8) = v24;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    v31 = (WebCore::MediaStreamTrackProcessor *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::MediaStreamTrackProcessor::Source *)WebCore::MediaStreamTrackProcessor::contextDestroyed(v31);
  }
  return this;
}

WebCore::MediaStreamTrackProcessor::Source *WebCore::MediaStreamTrackProcessor::contextDestroyed(WebCore::MediaStreamTrackProcessor *this)
{
  WebCore::MediaStreamTrackProcessor::Source *result;
  bmalloc::api *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::MediaStreamTrackProcessor::Source *v8;
  WebCore::MediaStreamTrackProcessor::Source *v9;

  result = (WebCore::MediaStreamTrackProcessor::Source *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
  {
    WebCore::MediaStreamTrackProcessor::Source::~Source(result);
    result = (WebCore::MediaStreamTrackProcessor::Source *)bmalloc::api::isoDeallocate(v3, v4);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (WebCore::MediaStreamTrackProcessor::Source *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = off_1E335FA10;
      *((_QWORD *)v8 + 1) = v5;
      v9 = v8;
      WTF::ensureOnMainThread();
      result = v9;
      if (v9)
        return (WebCore::MediaStreamTrackProcessor::Source *)(*(uint64_t (**)(WebCore::MediaStreamTrackProcessor::Source *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return result;
}

void WebCore::MediaStreamTrackProcessor::tryEnqueueingVideoFrame(WebCore::MediaStreamTrackProcessor *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  float v27;
  double v28;
  unsigned int *v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  WebCore::MediaStreamTrackProcessor::VideoFrameObserver *v43;
  void *v44;
  unsigned int *v45;
  __int128 v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  WTF *v53;
  int v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  char v63;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return;
  v5 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v5 == 1 || v5 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 48))
      {
        v8 = *(_QWORD *)(v6 + 8);
        v9 = (unsigned __int8 *)(v8 + 64);
        if (__ldaxr((unsigned __int8 *)(v8 + 64)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v9))
        {
          goto LABEL_12;
        }
        MEMORY[0x19AEA534C](v8 + 64);
LABEL_12:
        v11 = *(_QWORD *)(v8 + 72);
        v12 = *(_QWORD *)(v8 + 80);
        if (v11 == v12)
        {
          v13 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(v8 + 88);
          v13 = *(_QWORD *)(v14 + 8 * v11);
          *(_QWORD *)(v14 + 8 * v11) = 0;
          v15 = *(_QWORD *)(v8 + 88);
          v16 = *(unsigned int **)(v15 + 8 * v11);
          *(_QWORD *)(v15 + 8 * v11) = 0;
          if (v16)
          {
            v17 = v16 + 2;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v16 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
            }
          }
          v20 = *(_QWORD *)(v8 + 72);
          if (v20 == *(unsigned int *)(v8 + 96) - 1)
            v21 = 0;
          else
            v21 = v20 + 1;
          *(_QWORD *)(v8 + 72) = v21;
        }
        v22 = __ldxr(v9);
        if (v22 == 1)
        {
          if (!__stlxr(0, v9))
          {
LABEL_28:
            if (v11 == v12)
            {
              if (v13)
              {
                v23 = (unsigned int *)(v13 + 8);
                do
                {
                  v24 = __ldaxr(v23);
                  v25 = v24 - 1;
                }
                while (__stlxr(v25, v23));
                if (!v25)
                {
                  atomic_store(1u, (unsigned int *)(v13 + 8));
                  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
                }
              }
            }
            else
            {
              v47 = 0;
              v52 = 0;
              LOBYTE(v53) = 0;
              v55 = 0;
              v56 = 0;
              v57 = 0;
              v58 = 0;
              v59 = 0;
              v60 = 0;
              v61 = 0;
              v51 = 0;
              v48 = (unint64_t)(*(float (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
              v26 = *(_QWORD *)(v13 + 36);
              v63 = 1;
              v49 = (unint64_t)v27;
              v62 = v26;
              v46 = *(_OWORD *)(v13 + 16);
              WTF::MediaTime::toDouble((WTF::MediaTime *)&v46);
              v50 = (uint64_t)(v28 * 1000.0 * 1000.0);
              v45 = (unsigned int *)v13;
              WebCore::WebCodecsVideoFrame::create((WebCore::ScriptExecutionContext *)(v3 - 96), (uint64_t *)&v45, (uint64_t)&v47, (uint64_t *)&v46);
              v29 = v45;
              v30 = (WTF *)v46;
              v45 = 0;
              *(_QWORD *)&v46 = 0;
              if (v29)
              {
                v31 = v29 + 2;
                do
                {
                  v32 = __ldaxr(v31);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, v31));
                if (!v33)
                {
                  atomic_store(1u, v29 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
                }
              }
              if (v55)
              {
                v34 = v53;
                if (v53)
                {
                  v53 = 0;
                  v54 = 0;
                  WTF::fastFree(v34, a2);
                }
              }
              if (v30)
              {
                v35 = *((_QWORD *)this + 5);
                v36 = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v3 - 96));
                if (v36)
                {
                  v37 = v36;
                  MEMORY[0x19AEA3294](&v47, *(_QWORD *)(v36 + 56));
                  *(_BYTE *)(v35 + 48) = 0;
                  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 64) + 8) + 16);
                  if (!*(_BYTE *)(v35 + 49))
                  {
                    if (!*(_BYTE *)(v35 + 24))
                    {
                      v43 = (WebCore::MediaStreamTrackProcessor::VideoFrameObserver *)std::__throw_bad_optional_access[abi:sn180100]();
                      WebCore::MediaStreamTrackProcessor::VideoFrameObserver::~VideoFrameObserver(v43, v44);
                      return;
                    }
                    v38 = WebCore::wrap<WebCore::WebCodecsVideoFrame>(v37, v37, v30);
                    if (WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v35 + 16), v38))
                      WebCore::ReadableStreamSource::startFinished((WebCore::ReadableStreamSource *)v35, v39);
                  }
                  v40 = *(_QWORD *)(v35 + 64);
                  if (v40)
                    v41 = *(_DWORD **)(v40 + 8);
                  else
                    v41 = 0;
                  if (v41[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 16))(v41);
                  else
                    --v41[4];
                  MEMORY[0x19AEA32A0](&v47);
                }
                if (*((_DWORD *)v30 + 4) == 1)
                  (*(void (**)(WTF *))(*(_QWORD *)v30 + 16))(v30);
                else
                  --*((_DWORD *)v30 + 4);
              }
            }
            goto LABEL_56;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v8 + 64));
        goto LABEL_28;
      }
    }
  }
LABEL_56:
  v42 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v42 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v42 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
}

void WebCore::MediaStreamTrackProcessor::VideoFrameObserver::~VideoFrameObserver(WebCore::MediaStreamTrackProcessor::VideoFrameObserver *this, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  if (*((_BYTE *)this + 8))
    WebCore::RealtimeMediaSource::removeVideoFrameObserver(*((_QWORD *)this + 7), (uint64_t)this);
  v3 = *((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  v5 = (WTF *)*((_QWORD *)this + 11);
  v6 = (unsigned int **)((char *)v5 + 8 * v4);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_23;
    v11 = (unsigned int **)((char *)v5 + 8 * v3);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        v13 = v12 + 2;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v12 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    if (v4)
    {
      do
      {
        v7 = *(unsigned int **)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v7 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
          }
        }
        v5 = (WTF *)((char *)v5 + 8);
      }
      while (v5 != (WTF *)v6);
      v5 = (WTF *)*((_QWORD *)this + 11);
      v3 = *((_QWORD *)this + 9);
    }
    v16 = *((unsigned int *)this + 24);
    if (v3 != v16)
    {
      v21 = (unsigned int **)((char *)v5 + 8 * v16);
      v22 = (unsigned int **)((char *)v5 + 8 * v3);
      do
      {
        v23 = *v22;
        *v22 = 0;
        if (v23)
        {
          v24 = v23 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v23 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
          }
        }
        ++v22;
      }
      while (v22 != v21);
    }
  }
  v5 = (WTF *)*((_QWORD *)this + 11);
LABEL_23:
  if (v5)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v5, a2);
  }
  v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 144))(v17);
  v18 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaStreamTrackProcessor::VideoFrameObserver::~VideoFrameObserver(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaStreamTrackProcessor::VideoFrameObserver::videoFrameAvailable(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  __int128 v41;
  unsigned int *v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t result;
  _QWORD *v50;
  char v51;
  _OWORD v52[2];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(a1 + 64);
  if (__ldaxr((unsigned __int8 *)(a1 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 64);
LABEL_5:
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v6)
  {
    if (v7 + 1 != v6)
      goto LABEL_22;
    LODWORD(v8) = *(_DWORD *)(a1 + 96);
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 96);
    if (v7)
    {
      if (v7 != v8 - 1)
        goto LABEL_22;
    }
    else if ((_DWORD)v8)
    {
      goto LABEL_22;
    }
  }
  v9 = v8;
  v10 = ((unint64_t)v8 >> 2) + v8;
  if (v10 <= 0xF)
    v10 = 15;
  if (v10 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    goto LABEL_72;
  }
  v11 = *(char **)(a1 + 88);
  v12 = v10 + 1;
  v13 = (char *)WTF::fastMalloc((WTF *)(8 * (v10 + 1)));
  *(_DWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  v15 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (v15 <= v14)
  {
    memcpy(&v13[8 * v15], &v11[8 * v15], 8 * v14 - 8 * v15);
    if (!v11)
      goto LABEL_22;
  }
  else
  {
    memcpy(v13, v11, 8 * v14);
    v16 = *(_QWORD *)(a1 + 72);
    v17 = v16 - v9 + *(unsigned int *)(a1 + 96);
    memcpy((void *)(*(_QWORD *)(a1 + 88) + 8 * v17), &v11[8 * v16], 8 * v9 - 8 * v16);
    *(_QWORD *)(a1 + 72) = v17;
    if (!v11)
      goto LABEL_22;
  }
  if (*(char **)(a1 + 88) == v11)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  WTF::fastFree((WTF *)v11, v18);
LABEL_22:
  v20 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a1 + 88);
  v21 = (unsigned int *)(a2 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *(_QWORD *)(v19 + 8 * v20) = a2;
  v23 = *(unsigned int *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 80);
  if (v24 == v23 - 1)
    v26 = 0;
  else
    v26 = v24 + 1;
  *(_QWORD *)(a1 + 80) = v26;
  if (v25 <= v26)
    v23 = 0;
  if (v26 + v23 - v25 > *(unsigned __int16 *)(a1 + 104))
  {
    v27 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v50) = 0;
      _os_log_debug_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEBUG, "MediaStreamTrackProcessor::VideoFrameObserver::videoFrameAvailable buffer is full", (uint8_t *)&v50, 2u);
      v25 = *(_QWORD *)(a1 + 72);
      v26 = *(_QWORD *)(a1 + 80);
    }
    if (v25 != v26)
    {
      v28 = *(_QWORD *)(a1 + 88);
      v29 = *(unsigned int **)(v28 + 8 * v25);
      *(_QWORD *)(v28 + 8 * v25) = 0;
      v30 = *(_QWORD *)(a1 + 88);
      v31 = *(unsigned int **)(v30 + 8 * v25);
      *(_QWORD *)(v30 + 8 * v25) = 0;
      if (v31)
      {
        v32 = v31 + 2;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v31 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
        }
      }
      v35 = *(_QWORD *)(a1 + 72);
      if (v35 == *(unsigned int *)(a1 + 96) - 1)
        v36 = 0;
      else
        v36 = v35 + 1;
      *(_QWORD *)(a1 + 72) = v36;
      if (v29)
      {
        v37 = v29 + 2;
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v29 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
        }
      }
      goto LABEL_46;
    }
    __break(0xC471u);
LABEL_72:
    JUMPOUT(0x19546DB38);
  }
LABEL_46:
  v40 = __ldxr(v4);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, v4))
LABEL_50:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v41 = *(_OWORD *)(a1 + 32);
  v52[0] = *(_OWORD *)(a1 + 16);
  v52[1] = v41;
  v42 = *(unsigned int **)(a1 + 48);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v44 = &off_1E335FA60;
  v44[1] = v42;
  v50 = v44;
  v51 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_57;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_57:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v46 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v52);
  if (v46)
  {
    v47 = v46[4];
    if (v47)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v47 + 336))(v47, &v50);
  }
  v48 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_66;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_66:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::MediaStreamTrackProcessor::Source::~Source(WebCore::MediaStreamTrackProcessor::Source *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  _DWORD *v12;

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(*((_QWORD *)this + 7) + 96) + 24, (_QWORD *)this + 4);
  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[6];
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  v11 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33676C0;
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    v12 = *(_DWORD **)v11;
    *(_QWORD *)v11 = 0;
    if (v12)
    {
      if (v12[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
      else
        --v12[4];
    }
    WTF::fastFree(v11, v2);
  }
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamTrackProcessor::Source::~Source(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaStreamTrackProcessor::Source::~Source(WebCore::MediaStreamTrackProcessor::Source *this)
{
  WebCore::MediaStreamTrackProcessor::Source::~Source((WebCore::MediaStreamTrackProcessor::Source *)((char *)this - 32));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaStreamTrackProcessor::Source::~Source((WebCore::MediaStreamTrackProcessor::Source *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::MediaStreamTrackProcessor::Source::trackEnded(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  JSC::Structure *v2;
  WebCore::MediaStreamTrackProcessor::Source *v3;
  WebCore::MediaStreamTrackPrivate *v4;
  uint64_t v5;
  WTF *v6;
  _OWORD v7[4];
  uint64_t v8;

  if (!*(_BYTE *)(this + 49))
  {
    if (*(_BYTE *)(this + 24))
    {
      v6 = (WTF *)((char *)v7 + 8);
      memset(v7, 0, sizeof(v7));
      v8 = 0;
      *((_QWORD *)&v7[0] + 1) = *(_QWORD *)(this + 16);
      v5 = 0x800000001;
      v2 = *(JSC::Structure **)(16 * (**((_DWORD **)&v7[0] + 1) & 0xFFFFFFFE) + 0x28);
      WebCore::invokeReadableStreamDefaultControllerFunction(v2, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v2 + 7) + 41456) + 4008));
      return (uint64_t)v7 + 8;
    }
    else
    {
      v3 = (WebCore::MediaStreamTrackProcessor::Source *)std::__throw_bad_optional_access[abi:sn180100]();
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStreamTrackProcessor::Source::trackEnded(uint64_t this, WebCore::MediaStreamTrackPrivate *a2)
{
  JSC::Structure *v2;
  WebCore::MediaStreamTrackProcessor::Source *v3;
  uint64_t v4;
  WTF *v5;
  _OWORD v6[4];
  uint64_t v7;

  if (!*(_BYTE *)(this + 17))
  {
    if (*(_BYTE *)(this - 8))
    {
      v5 = (WTF *)((char *)v6 + 8);
      memset(v6, 0, sizeof(v6));
      v7 = 0;
      *((_QWORD *)&v6[0] + 1) = *(_QWORD *)(this - 16);
      v4 = 0x800000001;
      v2 = *(JSC::Structure **)(16 * (**((_DWORD **)&v6[0] + 1) & 0xFFFFFFFE) + 0x28);
      WebCore::invokeReadableStreamDefaultControllerFunction(v2, (unint64_t *)(*(_QWORD *)(*((_QWORD *)v2 + 7) + 41456) + 4008));
      return (uint64_t)v6 + 8;
    }
    else
    {
      v3 = (WebCore::MediaStreamTrackProcessor::Source *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebCore::MediaStreamTrackProcessor::Source::doStart(v3);
    }
  }
  return this;
}

void WebCore::MediaStreamTrackProcessor::Source::doPull(WebCore::MediaStreamTrackProcessor::Source *this, void *a2)
{
  uint64_t v2;
  WebCore::MediaStreamTrackProcessor *v3;

  *((_BYTE *)this + 48) = 1;
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *(WebCore::MediaStreamTrackProcessor **)(v2 + 8);
    if (v3)
    {
      ++*((_DWORD *)v3 + 4);
      WebCore::MediaStreamTrackProcessor::tryEnqueueingVideoFrame(v3, a2);
      if (*((_DWORD *)v3 + 4) == 1)
        (*(void (**)(WebCore::MediaStreamTrackProcessor *))(*(_QWORD *)v3 + 16))(v3);
      else
        --*((_DWORD *)v3 + 4);
    }
  }
}

uint64_t WebCore::MediaStreamTrackProcessor::Source::doCancel(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;

  *(_BYTE *)(this + 49) = 1;
  v1 = *(_QWORD *)(this + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)(v2 + 16);
      v3 = *(unsigned int **)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      if (v3)
      {
        do
        {
          v4 = __ldaxr(v3);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, v3));
        if (!v5)
        {
          atomic_store(1u, v3);
          v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v6 = off_1E335FA10;
          v6[1] = v3;
          v7 = (uint64_t)v6;
          WTF::ensureOnMainThread();
          this = v7;
          if (v7)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
      }
      if (*(_DWORD *)(v2 + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      else
        --*(_DWORD *)(v2 + 16);
    }
  }
  return this;
}

uint64_t WebCore::ImageCapture::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::ImageCapture::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::MediaDevices::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::MediaDevices *WebCore::MediaDevices::deref(WebCore::MediaDevices *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::MediaDevices::~MediaDevices(this, a2);
    return (WebCore::MediaDevices *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::MediaDevices::eventTargetInterface(WebCore::MediaDevices *this)
{
  return 12;
}

uint64_t WebCore::MediaDevices::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::MediaDevices *WebCore::MediaDevices::derefEventTarget(WebCore::MediaDevices *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::MediaDevices::~MediaDevices(this, a2);
    return (WebCore::MediaDevices *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaDevices::eventTargetInterface(WebCore::MediaDevices *this)
{
  return 12;
}

uint64_t `non-virtual thunk to'WebCore::MediaDevices::scriptExecutionContext(WebCore::MediaDevices *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::MediaDevices::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t WebCore::MediaStream::eventTargetInterface(WebCore::MediaStream *this)
{
  return 13;
}

uint64_t WebCore::MediaStream::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 88);
  return this;
}

WebCore::MediaStream *WebCore::MediaStream::derefEventTarget(WebCore::MediaStream *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 22) == 1)
  {
    WebCore::MediaStream::~MediaStream(this);
    return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 22);
  }
  return this;
}

uint64_t WebCore::MediaStream::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 88);
  return this;
}

WebCore::MediaStream *WebCore::MediaStream::deref(WebCore::MediaStream *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 22) == 1)
  {
    WebCore::MediaStream::~MediaStream(this);
    return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 22);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 64);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::deref(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this + 64) == 1)
  {
    WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)(this - 24));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this + 64);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::logger(WebCore::MediaStream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 96);
}

const char *`non-virtual thunk to'WebCore::MediaStream::logClassName(WebCore::MediaStream *this)
{
  return "MediaStream";
}

uint64_t `non-virtual thunk to'WebCore::MediaStream::logIdentifier(WebCore::MediaStream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 104);
}

uint64_t WebCore::MediaStreamTrack::isCanvas(WebCore::MediaStreamTrack *this)
{
  return 0;
}

uint64_t WebCore::MediaStreamTrackProcessor::Source::ref(uint64_t this)
{
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 64) + 8) + 16);
  return this;
}

_DWORD *WebCore::MediaStreamTrackProcessor::Source::deref(WebCore::MediaStreamTrackProcessor::Source *this)
{
  uint64_t v1;
  _DWORD *result;

  v1 = *((_QWORD *)this + 8);
  if (v1)
    result = *(_DWORD **)(v1 + 8);
  else
    result = 0;
  if (result[4] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
  --result[4];
  return result;
}

void WebCore::InputDeviceInfo::~InputDeviceInfo(WebCore::InputDeviceInfo *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::InputDeviceInfo::~InputDeviceInfo(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v3 = (WTF *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v6, a2);
  }
  *(_QWORD *)this = off_1E335FB10;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::MediaDeviceInfo::~MediaDeviceInfo(WebCore::MediaDeviceInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E335FB10;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E335FB10;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEN7WebCore9ExceptionELj0EE11whenSettledIZNSB_12ImageCapture9takePhotoEONSB_13PhotoSettingsEONSB_18DOMPromiseDeferredINSB_12IDLInterfaceINSB_4BlobEEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_SC_EEE_vJS12_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E335F080;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEN7WebCore9ExceptionELj0EE11whenSettledIZNSB_12ImageCapture9takePhotoEONSB_13PhotoSettingsEONSB_18DOMPromiseDeferredINSB_12IDLInterfaceINSB_4BlobEEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_SC_EEE_vJS12_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E335F080;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEEN7WebCore9ExceptionELj0EE11whenSettledIZNSB_12ImageCapture9takePhotoEONSB_13PhotoSettingsEONSB_18DOMPromiseDeferredINSB_12IDLInterfaceINSB_4BlobEEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_SC_EEE_vJS12_EE4callES12_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v18;
  _BYTE v19[24];
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t (***v23)();

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v18 = v4;
  v19[0] = 0;
  v20 = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E335F0D0[v5])(&v23, v19, a2);
    v20 = v5;
  }
  v6 = *(_OWORD *)(a1 + 48);
  v21 = *(_OWORD *)(a1 + 32);
  v22 = v6;
  v7 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v7 = &off_1E335F0F0;
  *(_QWORD *)(v7 + 8) = v3;
  *(_QWORD *)(v7 + 16) = v18;
  *(_BYTE *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 48) = -1;
  v8 = v20;
  if (v20 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E335F0D0[v20])(&v23, v7 + 24, v19);
    *(_DWORD *)(v7 + 48) = v8;
  }
  v9 = v21;
  *(_OWORD *)(v7 + 72) = v22;
  *(_OWORD *)(v7 + 56) = v9;
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  v11 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)(v10 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 24) = v11 + 2;
  v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v12 = &off_1E335F0A8;
  v12[1] = (uint64_t (**)())v3;
  v12[2] = (uint64_t (**)())v10;
  v12[3] = (uint64_t (**)())v7;
  v23 = v12;
  v13 = *(_QWORD *)(v3 + 8);
  if (!v13)
  {
    v23 = 0;
    v16 = &off_1E335F0A8;
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
  {
    v23 = 0;
    goto LABEL_10;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v15, 7, (uint64_t *)&v23);
  v12 = v23;
  v23 = 0;
  if (v12)
  {
LABEL_10:
    v16 = *v12;
LABEL_11:
    v16[1]();
  }
  if (v20 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E335F0C0[v20])(&v23, v19);
  v20 = -1;
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::ImageCapture>(WebCore::ImageCapture &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E335F0A8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::ImageCapture>(WebCore::ImageCapture &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E335F0A8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::ImageCapture>(WebCore::ImageCapture &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF *result;

  v3 = *(WTF::StringImpl **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture9takePhotoEONS2_13PhotoSettingsEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_4BlobEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEENS2_9ExceptionEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  char v5;

  *(_QWORD *)a1 = &off_1E335F0F0;
  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E335F0C0[v2])(&v5, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v3 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture9takePhotoEONS2_13PhotoSettingsEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_4BlobEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEENS2_9ExceptionEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  char v6;

  *(_QWORD *)this = &off_1E335F0F0;
  v3 = *((unsigned int *)this + 12);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E335F0C0[v3])(&v6, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture9takePhotoEONS2_13PhotoSettingsEONS2_18DOMPromiseDeferredINS2_12IDLInterfaceINS2_4BlobEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEENS2_9ExceptionEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  uint64_t v10;
  WebCore::ScriptExecutionContext *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::Logger::LogSiteIdentifier *v14;
  uint64_t *v15;
  unsigned __int8 v16[8];
  WTF::StringImpl *v17;
  objc_class *v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    if (v3 == 1)
    {
      if (!*(_BYTE *)(*(_QWORD *)(v2 + 40) + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],WTF::String>((WTF::Logger::LogSiteIdentifier *)(a1 + 56), (uint64_t *)(a1 + 32)), *(_DWORD *)(a1 + 48) == 1))
      {
        v4 = *(_QWORD *)(a1 + 16);
        v5 = *(_BYTE *)(a1 + 24);
        v6 = *(WTF::StringImpl **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        v18 = 0;
        v16[0] = v5;
        if (v6)
          *(_DWORD *)v6 += 2;
        v17 = v6;
        WebCore::DeferredPromise::reject(v4, v16, 0, &v18);
        result = v17;
        v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
            if (!v6)
              return result;
            goto LABEL_11;
          }
          *(_DWORD *)result -= 2;
        }
        if (!v6)
          return result;
LABEL_11:
        if (*(_DWORD *)v6 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v7);
        *(_DWORD *)v6 -= 2;
        return result;
      }
    }
LABEL_28:
    v14 = (WTF::Logger::LogSiteIdentifier *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],WTF::String>(v14, v15);
  }
  if (*(_BYTE *)(*(_QWORD *)(v2 + 40) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 56), "resolving promise");
  v9 = *(_QWORD *)(v2 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v11 = (WebCore::ScriptExecutionContext *)(v10 - 96);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  if (*(_DWORD *)(a1 + 48))
    goto LABEL_28;
  v12 = (_DWORD *)bmalloc::api::isoAllocate();
  v13 = WebCore::Blob::Blob((uint64_t)v12, v11, a1 + 24, (_QWORD *)(a1 + 40));
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v13 + 24));
  result = (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::Blob>>(*(_QWORD *)(a1 + 16), (uint64_t)v12);
  if (v12[4] == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  --v12[4];
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],WTF::String>(WTF::Logger::LogSiteIdentifier *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint8_t buf[4];
  _BYTE v49[12];
  int v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  result = WTF::String::String((WTF::String *)&v45, "rejecting promise: ");
  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  if (v46)
  {
    v6 = *((_DWORD *)v46 + 1);
    if (v45)
      goto LABEL_5;
LABEL_95:
    v7 = 0;
    if (v5)
      goto LABEL_6;
LABEL_96:
    v8 = 0;
    goto LABEL_7;
  }
  v6 = 0;
  if (!v45)
    goto LABEL_95;
LABEL_5:
  v7 = *((_DWORD *)v45 + 1);
  if (!v5)
    goto LABEL_96;
LABEL_6:
  v8 = *(_DWORD *)(v5 + 4);
LABEL_7:
  if ((v8 | v7) < 0
    || ((v9 = __OFADD__(v7, v8), v10 = v7 + v8, !v9) ? (v11 = 0) : (v11 = 1),
        v6 < 0 || (v11 & 1) != 0 || (result = (v6 + v10), __OFADD__(v6, v10))))
  {
    v47 = 0;
    goto LABEL_101;
  }
  if (v46 && (*((_BYTE *)v46 + 16) & 4) == 0)
  {
    v12 = 0;
    goto LABEL_21;
  }
  if (v45)
  {
    v13 = *((_DWORD *)v45 + 4);
    v12 = (v13 >> 2) & 1;
    if (!v5 || (v13 & 4) == 0)
    {
LABEL_21:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, v46, (uint64_t)v45, v5, &v47);
      if (v47)
      {
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v5, v14);
          else
            *(_DWORD *)v5 -= 2;
        }
        goto LABEL_25;
      }
LABEL_101:
      __break(0xC471u);
      return result;
    }
LABEL_20:
    v12 = (*(unsigned __int8 *)(v5 + 16) >> 2) & 1;
    goto LABEL_21;
  }
  if (v5)
    goto LABEL_20;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, v46, 0, 0, &v47);
  if (!v47)
    goto LABEL_101;
LABEL_25:
  v15 = v45;
  v45 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v46;
  v46 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = qword_1ECE7CD60;
  v18 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v43 ? (char *)v43 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v49 = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v18 = (uint64_t)v43;
    v43 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (WebCore::LogWebRTC && byte_1ECE7CD50)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v50 = 0;
              WTF::String::String((WTF::String *)&v51, "rejecting promise: ");
              v52 = 0;
              v29 = (WTF::StringImpl *)*a2;
              if (*a2)
                *(_DWORD *)v29 += 2;
              v53 = v29;
              v43 = 0;
              v44 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v44) = 3;
              v43 = v30;
              v31 = HIDWORD(v44);
              *((_DWORD *)v30 + 4 * HIDWORD(v44)) = *(_DWORD *)buf;
              v32 = *(_QWORD *)&v49[4];
              if (*(_QWORD *)&v49[4])
                **(_DWORD **)&v49[4] += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v50;
              v33 = v51;
              if (v51)
                *(_DWORD *)v51 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              *((_DWORD *)v30 + 4 * (v31 + 2)) = v52;
              v34 = v53;
              if (v53)
                *(_DWORD *)v53 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
              HIDWORD(v44) = v31 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogWebRTC, 1, &v43);
              v35 = v43;
              if (HIDWORD(v44))
              {
                v36 = 16 * HIDWORD(v44);
                v37 = (WTF::StringImpl **)((char *)v43 + 8);
                do
                {
                  v38 = *v37;
                  *v37 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v37 += 2;
                  v36 -= 16;
                }
                while (v36);
                v35 = v43;
              }
              if (v35)
              {
                v43 = 0;
                LODWORD(v44) = 0;
                WTF::fastFree(v35, v19);
              }
              v39 = v53;
              v53 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v51;
              v51 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = *(WTF::StringImpl **)&v49[4];
              *(_QWORD *)&v49[4] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v42 = __ldxr(v21);
          if (v42 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E335F118;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335F148;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E335F118;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335F148;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 24);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v81, a2);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v101, a2);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS3_9ExceptionELj0EE11whenSettledIZNS3_12ImageCapture20getPhotoCapabilitiesEONS3_18DOMPromiseDeferredINS3_13IDLDictionaryIS4_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSS_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E335F178;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS3_9ExceptionELj0EE11whenSettledIZNS3_12ImageCapture20getPhotoCapabilitiesEONS3_18DOMPromiseDeferredINS3_13IDLDictionaryIS4_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSS_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E335F178;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS3_9ExceptionELj0EE11whenSettledIZNS3_12ImageCapture20getPhotoCapabilitiesEONS3_18DOMPromiseDeferredINS3_13IDLDictionaryIS4_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  _DWORD *result;
  uint64_t (***v19)();
  uint64_t v20;
  _DWORD *v21;
  _BYTE v22[144];
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v20 = v3;
  v21 = v4;
  v22[0] = 0;
  v23 = -1;
  v5 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E335F1A0[v5])(&v19, v22, a2 + 8);
    v23 = v5;
  }
  v6 = *(_OWORD *)(a1 + 48);
  v24 = *(_OWORD *)(a1 + 32);
  v25 = v6;
  v7 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v7 = &off_1E335F1C0;
  *(_QWORD *)(v7 + 8) = v20;
  v8 = v21;
  v21 = 0;
  *(_QWORD *)(v7 + 16) = v8;
  *(_BYTE *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 176) = -1;
  v9 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E335F1A0[v23])(&v19, v7 + 32, v22);
    *(_DWORD *)(v7 + 176) = v9;
  }
  v10 = v24;
  *(_OWORD *)(v7 + 200) = v25;
  *(_OWORD *)(v7 + 184) = v10;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  v12 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)(v11 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 24) = v12 + 2;
  v13 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v13 = &off_1E335F0A8;
  v13[1] = (uint64_t (**)())v3;
  v13[2] = (uint64_t (**)())v11;
  v13[3] = (uint64_t (**)())v7;
  v19 = v13;
  v14 = *(_QWORD *)(v3 + 8);
  if (!v14)
  {
    v19 = 0;
    v17 = &off_1E335F0A8;
    goto LABEL_11;
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
  {
    v19 = 0;
    goto LABEL_10;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v16, 7, (uint64_t *)&v19);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
LABEL_10:
    v17 = *v13;
LABEL_11:
    ((void (*)(uint64_t (***)()))v17[1])(v13);
  }
  if (v23 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E335F190[v23])(&v19, v22);
  v23 = -1;
  result = v21;
  v21 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v2;

  if (*(_BYTE *)(a2 + 136))
  {
    v2 = *(WTF **)(a2 + 120);
    if (v2)
    {
      *(_QWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 128) = 0;
      WTF::fastFree(v2, (void *)a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*((_BYTE *)a3 + 136))
  {
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    v9 = *((_QWORD *)a3 + 15);
    *((_QWORD *)a3 + 15) = 0;
    *(_QWORD *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(_BYTE *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture20getPhotoCapabilitiesEONS2_18DOMPromiseDeferredINS2_13IDLDictionaryINS2_17PhotoCapabilitiesEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedIS6_NS2_9ExceptionEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  char v5;

  *(_QWORD *)a1 = &off_1E335F1C0;
  v2 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E335F190[v2])(&v5, a1 + 32);
  *(_DWORD *)(a1 + 176) = -1;
  v3 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture20getPhotoCapabilitiesEONS2_18DOMPromiseDeferredINS2_13IDLDictionaryINS2_17PhotoCapabilitiesEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedIS6_NS2_9ExceptionEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  char v6;

  *(_QWORD *)this = &off_1E335F1C0;
  v3 = *((unsigned int *)this + 44);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E335F190[v3])(&v6, (char *)this + 32);
  *((_DWORD *)this + 44) = -1;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture20getPhotoCapabilitiesEONS2_18DOMPromiseDeferredINS2_13IDLDictionaryINS2_17PhotoCapabilitiesEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedIS6_NS2_9ExceptionEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22[8];
  WTF::StringImpl *v23;
  objc_class *v24;

  v4 = result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_DWORD *)(result + 176);
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_BYTE *)(*(_QWORD *)(v5 + 40) + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],WTF::String>((WTF::Logger::LogSiteIdentifier *)(result + 184), (uint64_t *)(result + 40)), *(_DWORD *)(v4 + 176) == 1))
      {
        v7 = *(_QWORD *)(v4 + 16);
        v8 = *(_BYTE *)(v4 + 32);
        v9 = *(WTF::StringImpl **)(v4 + 40);
        *(_QWORD *)(v4 + 40) = 0;
        v24 = 0;
        v22[0] = v8;
        if (v9)
          *(_DWORD *)v9 += 2;
        v23 = v9;
        WebCore::DeferredPromise::reject(v7, v22, 0, &v24);
        result = (uint64_t)v23;
        v23 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
            if (!v9)
              return result;
LABEL_11:
            if (*(_DWORD *)v9 == 2)
              return WTF::StringImpl::destroy(v9, v10);
            *(_DWORD *)v9 -= 2;
            return result;
          }
          *(_DWORD *)result -= 2;
        }
        if (!v9)
          return result;
        goto LABEL_11;
      }
    }
    goto LABEL_31;
  }
  if (*(_BYTE *)(*(_QWORD *)(v5 + 40) + 12))
  {
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)(result + 184), "resolving promise");
    if (*(_DWORD *)(v4 + 176))
    {
LABEL_31:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_32;
    }
  }
  v1 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
  {
    v12 = (unsigned __int8 *)(v4 + 32);
    v13 = *(_QWORD *)(v1 + 32);
    if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(_QWORD *)v13;
    v2 = *(_QWORD *)(v4 + 56);
    MEMORY[0x19AEA3294](v22, v2);
    v14 = (objc_class *)WebCore::convertDictionaryToJS(v4, **(_QWORD **)(v1 + 32), v12);
    v15 = *(_QWORD *)(v2 + 16);
    if (!v15)
    {
      WebCore::DeferredPromise::callFunction(v1, (uint64_t *)v4, 0, v14);
      v15 = *(_QWORD *)(v2 + 16);
      if (!v15)
        return MEMORY[0x19AEA32A0](v22);
    }
    v21 = v15;
    v3 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v4);
    if (!(*(unsigned int (**)(_QWORD *))(*v3 + 64))(v3))
      goto LABEL_29;
LABEL_32:
    v16 = v3[43];
    if (*(_QWORD *)(v2 + 24) == v21)
    {
LABEL_44:
      *(_BYTE *)(*(_QWORD *)(v16 + 8) + 93442) = 1;
      *(_BYTE *)(v1 + 44) = 1;
      goto LABEL_29;
    }
    if (!v16)
    {
LABEL_29:
      WebCore::reportException((JSC::JSGlobalObject *)v4, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v22);
    }
    v17 = (unsigned __int8 *)(v16 + 40);
    if (__ldaxr((unsigned __int8 *)(v16 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v16 + 40);
LABEL_38:
    v19 = *(unsigned __int8 *)(v16 + 41);
    v20 = __ldxr(v17);
    if (v20 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_43:
        if (v19)
          goto LABEL_44;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v16 + 40));
    goto LABEL_43;
  }
  return result;
}

_QWORD *WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E335F1E8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335F218;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E335F1E8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335F218;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 152);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v81, a2);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v101, a2);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS3_9ExceptionELj0EE11whenSettledIZNS3_12ImageCapture16getPhotoSettingsEONS3_18DOMPromiseDeferredINS3_13IDLDictionaryIS4_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSS_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E335F248;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS3_9ExceptionELj0EE11whenSettledIZNS3_12ImageCapture16getPhotoSettingsEONS3_18DOMPromiseDeferredINS3_13IDLDictionaryIS4_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSS_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E335F248;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS3_9ExceptionELj0EE11whenSettledIZNS3_12ImageCapture16getPhotoSettingsEONS3_18DOMPromiseDeferredINS3_13IDLDictionaryIS4_EEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  _DWORD *result;
  uint64_t (***v19)();
  uint64_t v20;
  _DWORD *v21;
  _BYTE v22[48];
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v20 = v3;
  v21 = v4;
  v22[0] = 0;
  v23 = -1;
  v5 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E335F270[v5])(&v19, v22, a2 + 8);
    v23 = v5;
  }
  v6 = *(_OWORD *)(a1 + 48);
  v24 = *(_OWORD *)(a1 + 32);
  v25 = v6;
  v7 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v7 = &off_1E335F290;
  *(_QWORD *)(v7 + 8) = v20;
  v8 = v21;
  v21 = 0;
  *(_QWORD *)(v7 + 16) = v8;
  *(_BYTE *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 80) = -1;
  v9 = v23;
  if (v23 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E335F270[v23])(&v19, v7 + 32, v22);
    *(_DWORD *)(v7 + 80) = v9;
  }
  v10 = v24;
  *(_OWORD *)(v7 + 104) = v25;
  *(_OWORD *)(v7 + 88) = v10;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  v12 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)(v11 + 8) = v3;
  ++*(_QWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 24) = v12 + 2;
  v13 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v13 = &off_1E335F0A8;
  v13[1] = (uint64_t (**)())v3;
  v13[2] = (uint64_t (**)())v11;
  v13[3] = (uint64_t (**)())v7;
  v19 = v13;
  v14 = *(_QWORD *)(v3 + 8);
  if (!v14)
  {
    v19 = 0;
    v17 = &off_1E335F0A8;
    goto LABEL_11;
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
  {
    v19 = 0;
    goto LABEL_10;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v16, 7, (uint64_t *)&v19);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
LABEL_10:
    v17 = *v13;
LABEL_11:
    ((void (*)(uint64_t (***)()))v17[1])(v13);
  }
  if (v23 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E335F260[v23])(&v19, v22);
  v23 = -1;
  result = v21;
  v21 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13PhotoSettingsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture16getPhotoSettingsEONS2_18DOMPromiseDeferredINS2_13IDLDictionaryINS2_13PhotoSettingsEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedIS6_NS2_9ExceptionEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  char v5;

  *(_QWORD *)a1 = &off_1E335F290;
  v2 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E335F260[v2])(&v5, a1 + 32);
  *(_DWORD *)(a1 + 80) = -1;
  v3 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture16getPhotoSettingsEONS2_18DOMPromiseDeferredINS2_13IDLDictionaryINS2_13PhotoSettingsEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedIS6_NS2_9ExceptionEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  char v6;

  *(_QWORD *)this = &off_1E335F290;
  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E335F260[v3])(&v6, (char *)this + 32);
  *((_DWORD *)this + 20) = -1;
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12ImageCapture16getPhotoSettingsEONS2_18DOMPromiseDeferredINS2_13IDLDictionaryINS2_13PhotoSettingsEEEEEEN3__0clINSt12experimental15fundamentals_v38expectedIS6_NS2_9ExceptionEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22[8];
  WTF::StringImpl *v23;
  objc_class *v24;

  v4 = result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_DWORD *)(result + 80);
  if (v6)
  {
    if (v6 == 1)
    {
      if (!*(_BYTE *)(*(_QWORD *)(v5 + 40) + 12)
        || (WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],WTF::String>((WTF::Logger::LogSiteIdentifier *)(result + 88), (uint64_t *)(result + 40)), *(_DWORD *)(v4 + 80) == 1))
      {
        v7 = *(_QWORD *)(v4 + 16);
        v8 = *(_BYTE *)(v4 + 32);
        v9 = *(WTF::StringImpl **)(v4 + 40);
        *(_QWORD *)(v4 + 40) = 0;
        v24 = 0;
        v22[0] = v8;
        if (v9)
          *(_DWORD *)v9 += 2;
        v23 = v9;
        WebCore::DeferredPromise::reject(v7, v22, 0, &v24);
        result = (uint64_t)v23;
        v23 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
            if (!v9)
              return result;
LABEL_11:
            if (*(_DWORD *)v9 == 2)
              return WTF::StringImpl::destroy(v9, v10);
            *(_DWORD *)v9 -= 2;
            return result;
          }
          *(_DWORD *)result -= 2;
        }
        if (!v9)
          return result;
        goto LABEL_11;
      }
    }
    goto LABEL_31;
  }
  if (*(_BYTE *)(*(_QWORD *)(v5 + 40) + 12))
  {
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)(result + 88), "resolving promise");
    if (*(_DWORD *)(v4 + 80))
    {
LABEL_31:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_32;
    }
  }
  v1 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
  {
    v12 = (double *)(v4 + 32);
    v13 = *(_QWORD *)(v1 + 32);
    if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(_QWORD *)v13;
    v2 = *(_QWORD *)(v4 + 56);
    MEMORY[0x19AEA3294](v22, v2);
    v14 = (objc_class *)WebCore::convertDictionaryToJS(v4, **(_QWORD **)(v1 + 32), v12);
    v15 = *(_QWORD *)(v2 + 16);
    if (!v15)
    {
      WebCore::DeferredPromise::callFunction(v1, (uint64_t *)v4, 0, v14);
      v15 = *(_QWORD *)(v2 + 16);
      if (!v15)
        return MEMORY[0x19AEA32A0](v22);
    }
    v21 = v15;
    v3 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v4);
    if (!(*(unsigned int (**)(_QWORD *))(*v3 + 64))(v3))
      goto LABEL_29;
LABEL_32:
    v16 = v3[43];
    if (*(_QWORD *)(v2 + 24) == v21)
    {
LABEL_44:
      *(_BYTE *)(*(_QWORD *)(v16 + 8) + 93442) = 1;
      *(_BYTE *)(v1 + 44) = 1;
      goto LABEL_29;
    }
    if (!v16)
    {
LABEL_29:
      WebCore::reportException((JSC::JSGlobalObject *)v4, v21, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v22);
    }
    v17 = (unsigned __int8 *)(v16 + 40);
    if (__ldaxr((unsigned __int8 *)(v16 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v16 + 40);
LABEL_38:
    v19 = *(unsigned __int8 *)(v16 + 41);
    v20 = __ldxr(v17);
    if (v20 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_43:
        if (v19)
          goto LABEL_44;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v16 + 40));
    goto LABEL_43;
  }
  return result;
}

_QWORD *WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E335F2B8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335F2E8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E335F2B8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335F2E8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned __int8 *v57;
  uint64_t *v59;
  int v60;
  WTF::NativePromiseBase *v61;
  void *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  int v67;
  int v68;
  _BYTE *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  __int128 buf;
  const char *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107[3];

  v107[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 56);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v75 = (char *)v10;
    WTF::String::String((WTF::String *)&v85, v10);
    WTF::String::String((WTF::String *)&v84, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v82, "[");
    WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v81, a2);
    WTF::String::String((WTF::String *)&v80, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v78, "]");
    v76 = v84;
    v92 = v83;
    *(_QWORD *)&buf = v85;
    v90 = v81;
    v91 = v82;
    v88 = v79;
    v89 = v80;
    v87 = v78;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v76, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
    if (!v86)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v78;
    v78 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v79;
    v79 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v81;
    v81 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v82;
    v82 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v83;
    v83 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v84;
    v84 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v85;
    v85 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v76 ? (char *)v76 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v76;
      v76 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v74 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v75);
                LODWORD(v94) = 0;
                WTF::String::String((WTF::String *)&v95, " then() call made from ");
                v96 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v98 = 0;
                WTF::String::String((WTF::String *)&v99, "[");
                v100 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v101, a2);
                v102 = 0;
                WTF::String::String((WTF::String *)&v103, " callback:");
                v104 = 0;
                WTF::LogArgument<void const*>::toString();
                v106 = 0;
                WTF::String::String((WTF::String *)v107, "]");
                v76 = 0;
                v77 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v77) = 8;
                v76 = v32;
                v33 = HIDWORD(v77);
                *((_DWORD *)v32 + 4 * HIDWORD(v77)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v94;
                v35 = v95;
                if (v95)
                  *(_DWORD *)v95 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v96;
                v36 = v97;
                if (v97)
                  *(_DWORD *)v97 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v98;
                v37 = v99;
                if (v99)
                  *(_DWORD *)v99 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v100;
                v38 = v101;
                if (v101)
                  *(_DWORD *)v101 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v102;
                v39 = v103;
                if (v103)
                  *(_DWORD *)v103 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v104;
                v40 = v105;
                if (v105)
                  *(_DWORD *)v105 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v106;
                v41 = v107[0];
                if (v107[0])
                  *(_DWORD *)v107[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v77) = v33 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, v9, 4, &v76);
                v42 = v76;
                if (HIDWORD(v77))
                {
                  v43 = a2;
                  v44 = 16 * HIDWORD(v77);
                  v45 = (WTF::StringImpl **)((char *)v76 + 8);
                  do
                  {
                    v46 = *v45;
                    *v45 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v45 += 2;
                    v44 -= 16;
                  }
                  while (v44);
                  v42 = v76;
                  a2 = v43;
                }
                if (v42)
                {
                  v76 = 0;
                  LODWORD(v77) = 0;
                  WTF::fastFree(v42, v23);
                }
                v47 = v107[0];
                v107[0] = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v105;
                v105 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v103;
                v103 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v101;
                v101 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v99;
                v99 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v97;
                v97 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v95;
                v95 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v74);
            }
            v55 = __ldxr(v25);
            if (v55 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v56 = v86;
    v86 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  v57 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v57))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_123:
  v59 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v60 = __ldxr(v57);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v57))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v61 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v59)
    goto LABEL_145;
  buf = 0uLL;
  v94 = "<chained completion promise>";
  v95 = 0;
  v63 = *v59;
  if (!*v59)
  {
    v66 = 0;
LABEL_141:
    v69 = (_BYTE *)WTF::NativePromiseBase::logChannel(v61);
    if (*v69 && v69[16] >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v69, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, " ignored already resolved or rejected ", v66);
    goto LABEL_145;
  }
  v64 = (unsigned __int8 *)(v63 + 48);
  if (__ldaxr((unsigned __int8 *)(v63 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v64))
  {
    goto LABEL_135;
  }
  v61 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v63 + 48);
LABEL_135:
  v67 = *(_DWORD *)(v63 + 64);
  v68 = __ldxr(v64);
  if (v68 == 1)
  {
    if (!__stlxr(0, v64))
      goto LABEL_140;
  }
  else
  {
    __clrex();
  }
  v61 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_140:
  v66 = *v59;
  if (v67)
    goto LABEL_141;
  WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v59, (WTF::Logger::LogSiteIdentifier *)&buf);
LABEL_145:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v59)
  {
    if (*v59)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v59);
      v70 = (unsigned int *)*v59;
      *v59 = 0;
      if (v70)
      {
        v71 = v70 + 2;
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v70 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 16))(v70);
        }
      }
    }
    else
    {
      *v59 = 0;
    }
    return WTF::fastFree((WTF *)v59, v62);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

WebCore::MediaDevices *WebCore::MediaDevices::MediaDevices(WebCore::MediaDevices *this, WebCore::Document *a2)
{
  WebCore::Document *v2;
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t *v6;
  WTF::RunLoop *v7;
  _QWORD *v8;
  WebCore *v9;
  uint64_t v10;
  WebCore *v11;
  uint64_t v12;
  uint64_t v14;
  WebCore::MediaDevices *v15;

  v2 = a2;
  *((_DWORD *)this + 6) = 1;
  v4 = *((_QWORD *)a2 + 88);
  if (v4)
  {
    v5 = *(WebCore::Document **)(v4 + 8);
    if (v5)
      v2 = v5;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::Document *)((char *)v2 + 192));
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v2 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195472308);
  }
  v15 = this;
  v6 = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v2 + 40, (uint64_t *)&v15, (uint64_t)&v14);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &off_1E335FB30;
  *((_QWORD *)this + 4) = &unk_1E335FBB0;
  v7 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E335F318;
  v8[1] = WebCore::MediaDevices::scheduledEventTimerFired;
  v8[2] = 0;
  v8[3] = this;
  v9 = (WebCore *)WTF::RunLoop::TimerBase::TimerBase((WebCore::MediaDevices *)((char *)this + 56), v7);
  *((_QWORD *)this + 7) = off_1E32051C0;
  *((_QWORD *)this + 10) = v8;
  *((_QWORD *)this + 11) = 0;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(WebCore **)(v10 + 96)) == 0)
  {
    v9 = (WebCore *)WebCore::threadGlobalDataSlow(v9);
    v11 = v9;
  }
  v12 = *((_QWORD *)v11 + 5);
  if (!v12)
  {
    v9 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *((_QWORD *)v11 + 5);
  }
  *((_QWORD *)this + 12) = v12;
  *((_BYTE *)this + 104) = 0;
  WTF::createVersion4UUIDString(v9);
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_QWORD *)((char *)this + 149) = 0;
  return this;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaDevices::*&)(void),WebCore::MediaDevices*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::createMediaConstraints(std::variant<BOOL,WebCore::MediaTrackConstraints> const&)::$_0,WebCore::createMediaConstraints(std::variant<BOOL,WebCore::MediaTrackConstraints> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,BOOL,WebCore::MediaTrackConstraints> const&>@<D0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  char v2;
  double result;

  v2 = *a1;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 312) = 0;
  *(_BYTE *)(a2 + 392) = 0;
  *(_BYTE *)(a2 + 400) = 0;
  *(_BYTE *)(a2 + 480) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_BYTE *)(a2 + 504) = 0;
  *(_BYTE *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 528) = 0;
  *(_BYTE *)(a2 + 536) = 0;
  *(_BYTE *)(a2 + 552) = 0;
  *(_BYTE *)(a2 + 560) = 0;
  *(_BYTE *)(a2 + 608) = 0;
  *(_BYTE *)(a2 + 616) = 0;
  *(_BYTE *)(a2 + 664) = 0;
  *(_BYTE *)(a2 + 672) = 0;
  *(_BYTE *)(a2 + 720) = 0;
  *(_BYTE *)(a2 + 728) = 0;
  *(_BYTE *)(a2 + 776) = 0;
  *(_BYTE *)(a2 + 784) = 0;
  *(_BYTE *)(a2 + 864) = 0;
  *(_BYTE *)(a2 + 872) = 0;
  *(_BYTE *)(a2 + 888) = 0;
  *(_BYTE *)(a2 + 896) = 0;
  *(_BYTE *)(a2 + 912) = 0;
  *(_BYTE *)(a2 + 920) = 0;
  *(_BYTE *)(a2 + 936) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 944) = 0u;
  *(_BYTE *)(a2 + 960) = v2;
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::createMediaConstraints(std::variant<BOOL,WebCore::MediaTrackConstraints> const&)::$_0,WebCore::createMediaConstraints(std::variant<BOOL,WebCore::MediaTrackConstraints> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,BOOL,WebCore::MediaTrackConstraints> const&>@<X0>(WebCore *this@<X1>, uint64_t a2@<X8>)
{
  return WebCore::createMediaConstraints(this, a2);
}

void WebCore::IntConstraint::~IntConstraint(WebCore::IntConstraint *this)
{
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::NumericConstraint<int>::isRequired(_BYTE *a1)
{
  return a1[16] || a1[24] || a1[32] != 0;
}

void WebCore::DoubleConstraint::~DoubleConstraint(WebCore::DoubleConstraint *this)
{
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::NumericConstraint<double>::isRequired(_BYTE *a1)
{
  return a1[24] || a1[40] || a1[56] != 0;
}

void WebCore::BooleanConstraint::~BooleanConstraint(WebCore::BooleanConstraint *this)
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::BooleanConstraint::isRequired(WebCore::BooleanConstraint *this)
{
  return *((unsigned __int8 *)this + 10);
}

void WebCore::StringConstraint::~StringConstraint(WebCore::StringConstraint *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  *(_QWORD *)this = &off_1E335FFA0;
  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v11 = 8 * v5;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v6 = (WTF *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  *(_QWORD *)this = &off_1E335FFA0;
  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v7 = (WTF::StringImpl **)*((_QWORD *)this + 4);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v11 = 8 * v5;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v6 = (WTF *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::StringConstraint::isRequired(WebCore::StringConstraint *this)
{
  return *((_DWORD *)this + 7) != 0;
}

void WebCore::MediaConstraints::~MediaConstraints(WebCore::MediaConstraints *this, WTF::StringImpl *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = *((_DWORD *)this + 239);
  if (v3)
  {
    v4 = 944 * v3;
    v5 = *((_QWORD *)this + 118) + 560;
    do
    {
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + 168, a2);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + 112, v6);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5 + 56, v7);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v5, v8);
      v5 += 944;
      v4 -= 944;
    }
    while (v4);
  }
  v9 = (WTF *)*((_QWORD *)this + 118);
  if (v9)
  {
    *((_QWORD *)this + 118) = 0;
    *((_DWORD *)this + 238) = 0;
    WTF::fastFree(v9, a2);
  }
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 728, a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 672, v10);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 616, v11);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 560, v12);
}

uint64_t std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)a1 = &off_1E335FFA0;
    v3 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v3)
    {
      v8 = *(WTF::StringImpl ***)(a1 + 32);
      v9 = 8 * v3;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    v4 = *(WTF **)(a1 + 32);
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v5)
    {
      v11 = *(WTF::StringImpl ***)(a1 + 16);
      v12 = 8 * v5;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    v6 = *(WTF **)(a1 + 16);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::hasInvalidGetDisplayMediaConstraint(WebCore::MediaConstraints const&)::$_0,BOOL,WebCore::MediaConstraintType,WebCore::MediaConstraint const&>::call(uint64_t a1, int a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  int v7;
  char v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;

  switch(a2)
  {
    case 1:
    case 2:
      if (*(_BYTE *)(a3 + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x1954729B4);
      }
      if (*(_BYTE *)(a3 + 32))
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(a3 + 16);
      goto LABEL_17;
    case 3:
    case 4:
      if (*(_BYTE *)(a3 + 8) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1954729D4);
      }
      if (*(_BYTE *)(a3 + 56))
      {
LABEL_12:
        v8 = 1;
      }
      else
      {
        v7 = *(unsigned __int8 *)(a3 + 24);
LABEL_17:
        v8 = v7 != 0;
      }
      goto LABEL_18;
    case 5:
    case 10:
    case 11:
      if (*(_BYTE *)(a3 + 8) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x195472994);
      }
      v12 = 0;
      v13 = 0;
      if (*(_DWORD *)(a3 + 28))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v12, (unsigned int *)(a3 + 16));
        v5 = HIDWORD(v13);
        v6 = v12;
        **(_BYTE **)(a1 + 8) = 1;
        if (!(_DWORD)v5)
        {
          if (!v6)
            return **(unsigned __int8 **)(a1 + 8);
          goto LABEL_6;
        }
        v10 = 8 * v5;
        do
        {
          v11 = *(WTF::StringImpl **)v6;
          *(_QWORD *)v6 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v4);
            else
              *(_DWORD *)v11 -= 2;
          }
          v6 = (WTF *)((char *)v6 + 8);
          v10 -= 8;
        }
        while (v10);
        v6 = v12;
        if (v12)
        {
LABEL_6:
          v12 = 0;
          LODWORD(v13) = 0;
          WTF::fastFree(v6, v4);
        }
      }
      else
      {
        **(_BYTE **)(a1 + 8) = 0;
      }
      return **(unsigned __int8 **)(a1 + 8);
    case 12:
    case 13:
      if (*(_BYTE *)(a3 + 8) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1954729F4);
      }
      v8 = *(_BYTE *)(a3 + 10);
LABEL_18:
      **(_BYTE **)(a1 + 8) = v8;
      return **(unsigned __int8 **)(a1 + 8);
    default:
      return **(unsigned __int8 **)(a1 + 8);
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZN7WebCore16MediaStreamTrack9takePhotoEONSD_13PhotoSettingsEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_ISA_NSD_9ExceptionELj0EEENS_12RawPtrTraitsISZ_EENS_21DefaultRefDerefTraitsISZ_EEEEJSV_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335F378;
  a1[1] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZN7WebCore16MediaStreamTrack9takePhotoEONSD_13PhotoSettingsEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_ISA_NSD_9ExceptionELj0EEENS_12RawPtrTraitsISZ_EENS_21DefaultRefDerefTraitsISZ_EEEEJSV_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F378;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZN7WebCore16MediaStreamTrack9takePhotoEONSD_13PhotoSettingsEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_ISA_NSD_9ExceptionELj0EEENS_12RawPtrTraitsISZ_EENS_21DefaultRefDerefTraitsISZ_EEEEJSV_EE4callESV_@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int128 v8;
  _BYTE *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  _BYTE *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  _BYTE *v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;
  char *v37;
  WTF::Logger::LogSiteIdentifier *v38;
  __int128 v39;
  __int128 v40;
  WTF *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::Lock *v44;
  char v45;
  char v46;

  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      LOBYTE(v41) = 24;
      v42 = v6;
      v39 = 0uLL;
      *(_QWORD *)&v40 = "operator()";
      *((_QWORD *)&v40 + 1) = 0;
      v7 = WTF::fastMalloc((WTF *)0x90);
      *(_DWORD *)(v7 + 8) = 1;
      *(_QWORD *)v7 = off_1E335F3A0;
      v8 = v40;
      *(_OWORD *)(v7 + 16) = v39;
      *(_OWORD *)(v7 + 32) = v8;
      *(_BYTE *)(v7 + 48) = 0;
      *(_DWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 96) = v7 + 112;
      *(_QWORD *)(v7 + 104) = 1;
      *(_QWORD *)(v7 + 120) = 0;
      *(_QWORD *)(v7 + 128) = 0;
      *(_WORD *)(v7 + 136) = 0;
      v9 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
      if (*v9 && v9[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v9, v7);
      *a3 = v7;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v7, (char *)&v41, (WTF::Logger::LogSiteIdentifier *)&v39);
      result = v42;
      v42 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v36 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v36, v37, v38);
    }
    return result;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = v14 - 96;
      v16 = *(unsigned __int8 *)(v14 + 178);
      if (*(_BYTE *)(v14 + 178))
      {
        if (v16 == 1 || v16 == 2)
          ++*(_DWORD *)(v14 + 216);
      }
      else
      {
        *(_DWORD *)(v14 - 264) += 2;
      }
      if (*(_BYTE *)(v14 + 180) || *(_BYTE *)(v12 + 1205))
      {
        v17 = 0;
        goto LABEL_17;
      }
      v39 = 0uLL;
      *(_QWORD *)&v40 = "operator()";
      *((_QWORD *)&v40 + 1) = 0;
      v23 = WTF::fastMalloc((WTF *)0x90);
      *(_DWORD *)(v23 + 8) = 1;
      *(_QWORD *)v23 = off_1E335F3A0;
      v24 = v40;
      *(_OWORD *)(v23 + 16) = v39;
      *(_OWORD *)(v23 + 32) = v24;
      *(_BYTE *)(v23 + 48) = 0;
      v25 = (unsigned __int8 *)(v23 + 48);
      *(_DWORD *)(v23 + 88) = 0;
      *(_QWORD *)(v23 + 96) = v23 + 112;
      *(_QWORD *)(v23 + 104) = 1;
      *(_QWORD *)(v23 + 120) = 0;
      *(_QWORD *)(v23 + 128) = 0;
      *(_WORD *)(v23 + 136) = 0;
      v26 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
      if (*v26 && v26[16] >= 4u)
        v26 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v26, v23);
      *a3 = v23;
      v44 = (WTF::Lock *)(v23 + 48);
      v45 = 1;
      if (__ldaxr(v25))
      {
        __clrex();
      }
      else if (!__stxr(1u, v25))
      {
LABEL_40:
        v28 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v26);
        if (*v28 && v28[16] >= 4u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v28, (WTF::Logger::LogSiteIdentifier *)&v39, " resolving ", v23);
        v29 = *(WTF **)a2;
        v30 = *(_DWORD *)(a2 + 8);
        v31 = *(_DWORD *)(a2 + 12);
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        WTF::String::isolatedCopy();
        v41 = v29;
        v42 = (WTF::StringImpl *)__PAIR64__(v31, v30);
        v32 = *(unsigned int *)(v23 + 88);
        if ((_DWORD)v32 != -1)
        {
          ((void (*)(char *, uint64_t))off_1E335F3B8[v32])(&v46, v23 + 56);
          v29 = v41;
          v30 = v42;
          v31 = HIDWORD(v42);
        }
        v41 = 0;
        v42 = 0;
        *(_QWORD *)(v23 + 56) = v29;
        *(_DWORD *)(v23 + 64) = v30;
        *(_DWORD *)(v23 + 68) = v31;
        v33 = v43;
        v43 = 0;
        *(_QWORD *)(v23 + 72) = v33;
        *(_DWORD *)(v23 + 80) = 0;
        *(_DWORD *)(v23 + 88) = 1;
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::dispatchAll(v23, (unsigned __int8 **)&v44);
        v34 = v43;
        v43 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v21);
          else
            *(_DWORD *)v34 -= 2;
        }
        result = v41;
        if (v41)
        {
          v41 = 0;
          LODWORD(v42) = 0;
          result = (WTF::StringImpl *)WTF::fastFree(result, v21);
        }
        if (!v45)
          goto LABEL_24;
        result = v44;
        v35 = __ldxr((unsigned __int8 *)v44);
        if (v35 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v44))
            goto LABEL_24;
        }
        else
        {
          __clrex();
        }
        result = (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
        goto LABEL_24;
      }
      v26 = (unsigned __int8 *)MEMORY[0x19AEA534C](v25);
      goto LABEL_40;
    }
  }
  v15 = 0;
  v17 = 1;
LABEL_17:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v41) = 30;
  v39 = 0uLL;
  *(_QWORD *)&v40 = "operator()";
  *((_QWORD *)&v40 + 1) = 0;
  v18 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)v18 = off_1E335F3A0;
  v19 = v40;
  *(_OWORD *)(v18 + 16) = v39;
  *(_OWORD *)(v18 + 32) = v19;
  *(_BYTE *)(v18 + 48) = 0;
  *(_DWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = v18 + 112;
  *(_QWORD *)(v18 + 104) = 1;
  *(_QWORD *)(v18 + 120) = 0;
  *(_QWORD *)(v18 + 128) = 0;
  *(_WORD *)(v18 + 136) = 0;
  v20 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v18);
  if (*v20 && v20[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v20, v18);
  *a3 = v18;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v18, (char *)&v41, (WTF::Logger::LogSiteIdentifier *)&v39);
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      if ((v17 & 1) != 0)
        return result;
      goto LABEL_24;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v17 & 1) != 0)
    return result;
LABEL_24:
  v22 = *(unsigned __int8 *)(v15 + 274);
  if (*(_BYTE *)(v15 + 274))
  {
    if (v22 == 1)
    {
      if (*(_DWORD *)(v15 + 312) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      else
        --*(_DWORD *)(v15 + 312);
    }
    else if (v22 == 2)
    {
      return (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
    }
  }
  else if (*(_DWORD *)(v15 - 168) == 2)
  {
    if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), v21);
  }
  else
  {
    *(_DWORD *)(v15 - 168) -= 2;
  }
  return result;
}

WTF::Lock *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::StringImpl *v14;
  WTF::Lock *v15;
  char v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v15 = v6;
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " rejecting ", a1);
  v10 = *a2;
  WTF::String::isolatedCopy();
  v11 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E335F3B8[v11])(&v17, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = 1;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::dispatchAll(a1, (unsigned __int8 **)&v15);
  result = 0;
  if (v16)
  {
    result = v15;
    v13 = __ldxr((unsigned __int8 *)v15);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64[3];

  v64[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v59, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v58, a1);
    if (v59)
    {
      v6 = *((_DWORD *)v59 + 1);
      if (v58)
      {
LABEL_8:
        v7 = *((_DWORD *)v58 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v60 = 0;
          goto LABEL_108;
        }
        if (v59)
        {
          v8 = *((_DWORD *)v59 + 4);
          v9 = (v8 >> 2) & 1;
          if (v58 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v58)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v59, (uint64_t)v58, &v60);
        if (v60)
        {
          v11 = v58;
          v58 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v59;
          v59 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v56 ? (char *)v56 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v62 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v56;
            v56 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v62[4], "destroying ");
                      v63 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v64, a1);
                      v56 = 0;
                      v57 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v57) = 2;
                      v56 = v25;
                      v26 = HIDWORD(v57);
                      *((_DWORD *)v25 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v62[4];
                      if (*(_QWORD *)&v62[4])
                        **(_DWORD **)&v62[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v63;
                      v28 = v64[0];
                      if (v64[0])
                        *(_DWORD *)v64[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v57) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v56);
                      v29 = v56;
                      if (HIDWORD(v57))
                      {
                        v30 = 16 * HIDWORD(v57);
                        v31 = (WTF::StringImpl **)((char *)v56 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v56;
                      }
                      if (v29)
                      {
                        v56 = 0;
                        LODWORD(v57) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v64[0];
                      v64[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v62[4];
                      *(_QWORD *)&v62[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v58)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 132);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 120);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 120);
  if (v45)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 96);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E335F3B8[v55])(buf, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEN7WebCore9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SI_EENS8_8FunctionIFSP_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSL_SP_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F0C0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEN7WebCore9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SI_EENS8_8FunctionIFSP_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSL_SP_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 96);
  if (v4 == (WTF::NativePromiseBase **)(result + 112))
  {
    v5 = *(unsigned int *)(result + 108);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 96) = result + 112;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 108);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 104) = 1;
  v6 = *(WTF **)(v3 + 120);
  v7 = *(_DWORD *)(v3 + 132);
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[3];
  int v30;
  char v31;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 137));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E335F3E0;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v29[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v29);
      result = (unsigned __int8 *)v29[0];
      v29[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v29[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)v29, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 88);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 88) != 1)
      goto LABEL_65;
    LOBYTE(v29[0]) = 0;
    v30 = -1;
    v24 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(char *, _QWORD *, uint64_t))off_1E335F0D0[v24])(&v31, v29, a2 + 56);
      v30 = v24;
    }
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
        if (v30 != -1)
          ((void (*)(char *, _QWORD *))off_1E335F0C0[v30])(&v31, v29);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 88) != 2)
  {
LABEL_65:
    v27 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v27);
  }
  v28 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v28 + 16))(v29, v28);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v29);
  if (v30 != -1)
    ((void (*)(char *, _QWORD *))off_1E335F0C0[v30])(&v31, v29);
  v30 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
LABEL_60:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E335F3E0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335F3E0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::Logger::LogSiteIdentifier *v21;
  _QWORD v22[3];
  int v23;
  char v24;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v22[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v22, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 88);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 88) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(v22, v15);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
      if (v23 != -1)
        ((void (*)(char *, _QWORD *))off_1E335F0C0[v23])(&v24, v22);
      v23 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::Storage>(v19, v20, v21);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 88) != 1)
    goto LABEL_46;
  LOBYTE(v22[0]) = 0;
  v23 = -1;
  v17 = *(unsigned int *)(v10 + 80);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))off_1E335F0D0[v17])(&v24, v22, v10 + 56);
    v23 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v22);
  if (v23 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E335F0C0[v23])(&v24, v22);
  return result;
}

WTF::Lock *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 88);
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E335F3B8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 88) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E335F3F8[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEN7WebCore9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SI_EENS8_8FunctionIFSP_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSL_SP_SS_EEEOS17_EEEDcSZ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F3B8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEN7WebCore9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SI_EENS8_8FunctionIFSP_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSL_SP_SS_EEEOS17_EEEDcSZ_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[24];
  int v17;
  _WORD v18[12];
  int v19;
  char v20;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (_BYTE *)a2;
      v16[0] = 0;
      v17 = -1;
      v7 = *(unsigned int *)(a3 + 24);
      if ((_DWORD)v7 == -1)
      {
        v9 = *(_DWORD *)(a2 + 24);
        if (v9 == -1)
        {
LABEL_29:
          if (v17 != -1)
            return ((uint64_t (*)(_WORD *, _BYTE *))off_1E335F0C0[v17])(v18, v16);
          return result;
        }
        v18[0] = 0;
      }
      else
      {
        result = ((uint64_t (*)(_WORD *, _BYTE *, uint64_t))off_1E335F0D0[v7])(v18, v16, a3);
        v17 = v7;
        v8 = v6 + 24;
        v9 = *((_DWORD *)v6 + 6);
        if (v9 != -1 && v9 == (_DWORD)v7)
        {
          result = ((uint64_t (*)(_WORD *, _BYTE *, _BYTE *))off_1E335F410[v7])(v18, v16, v6);
          goto LABEL_29;
        }
        v18[0] = 0;
        if (!*((_BYTE *)v18 + v7))
        {
          v11 = v16;
LABEL_19:
          LOBYTE(v18[0]) = 0;
          v19 = -1;
          v8 = v6 + 24;
          if (v9 != -1)
          {
LABEL_20:
            result = ((uint64_t (*)(char *, _WORD *, _BYTE *))off_1E335F0D0[v9])(&v20, v18, v6);
            v19 = v9;
            v12 = *((unsigned int *)v6 + 6);
            if ((_DWORD)v12 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E335F0C0[v12])(&v20, v6);
          }
LABEL_23:
          *((_DWORD *)v6 + 6) = -1;
          v13 = *((unsigned int *)v11 + 6);
          if ((_DWORD)v13 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335F420[v13])(&v20, v6, v11);
            *v8 = v13;
            v14 = *((unsigned int *)v11 + 6);
            if ((_DWORD)v14 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E335F0C0[v14])(&v20, v11);
          }
          *((_DWORD *)v11 + 6) = -1;
          v15 = v19;
          if (v19 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _WORD *))off_1E335F420[v19])(&v20, v11, v18);
            *((_DWORD *)v11 + 6) = v15;
            if (v19 != -1)
              result = ((uint64_t (*)(char *, _WORD *))off_1E335F0C0[v19])(&v20, v18);
          }
          goto LABEL_29;
        }
        v18[0] = 0;
        if (v9 == -1)
        {
          LOBYTE(v18[0]) = 0;
          v19 = -1;
          v11 = v16;
          goto LABEL_23;
        }
      }
      if (*((_BYTE *)v18 + v9))
      {
        LOBYTE(v18[0]) = 0;
        v19 = -1;
        v8 = v6 + 24;
        v11 = v16;
        goto LABEL_20;
      }
      v9 = v7;
      v11 = v6;
      v6 = v16;
      goto LABEL_19;
    }
    result = ((uint64_t (*)(_WORD *, uint64_t))off_1E335F3B8[v5])(v18, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  v10 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v10 != -1)
  {
    result = ((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1E335F0D0[v10])(v18, v4, a3);
    *(_DWORD *)(v4 + 24) = v10;
  }
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEN7WebCore9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SI_EENS8_8FunctionIFSP_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIST_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSX_1EJSL_SP_SS_EEEOS17_EEEDcSZ_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F3B8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEN7WebCore9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SG_EEESS_EEEDcSJ_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
  v4 = a2[2];
  a2[2] = a3[2];
  a3[2] = v4;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEN7WebCore9ExceptionEEE6__swapB8sn180100ERSH_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SG_EEESS_EEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJSF_SH_EEEEEvRSJ_OT_EUlRSO_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SH_EEEOSX_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E335F440;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335FEF8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E335F440;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335FEF8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>>::processResult(WTF::NativePromiseBase *a1, uint64_t a2, uint64_t a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  unint64_t v12;
  int v13;
  WTF::NativePromiseBase *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  BOOL v23;
  unsigned __int8 *v24;
  WTF::StringImpl *v25;
  uint64_t result;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::Logger *v54;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  _BYTE *v76;
  int v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unsigned int *v91;
  __int128 v92;
  int v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  WTF::NativePromiseBase *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  _QWORD v105[4];
  uint64_t v106;
  WTF::Logger *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  __int128 buf;
  const char *v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  int v128;
  WTF::StringImpl *v129;
  int v130;
  WTF::StringImpl *v131;
  int v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::Logger *v135;
  int v136;
  _QWORD v137[3];

  v5 = a1;
  v137[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)&buf = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::NativePromiseBase *)((char *)v5 + 24), "[", a2, " callback:", (uint64_t)&buf, "]");
  }
  v10 = (unsigned __int8 *)v5 + 57;
  if (__ldaxr((unsigned __int8 *)v5 + 57))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C]((char *)v5 + 57);
LABEL_14:
  v12 = *((_QWORD *)v5 + 8);
  *((_QWORD *)v5 + 8) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::NativePromiseBase *)((char *)v5 + 57));
  v14 = (WTF::NativePromiseBase *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v5 + 9) + 16))(&v106, *((_QWORD *)v5 + 9), a3);
  if (!v12)
    goto LABEL_180;
  v16 = v106;
  v105[0] = 0;
  v105[1] = 0;
  v105[2] = "<chained completion promise>";
  v105[3] = 0;
  v17 = (unsigned __int8 *)(v106 + 48);
  if (__ldaxr((unsigned __int8 *)(v106 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_24;
  }
  v14 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v17);
LABEL_24:
  *(_BYTE *)(v16 + 136) = 1;
  v19 = *(unsigned int **)v12;
  if (*(_QWORD *)v12)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v14);
  if (*v22)
    v23 = v22[16] >= 4u;
  else
    v23 = 0;
  if (!v23)
    goto LABEL_142;
  v24 = v22;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v105);
  WTF::String::String((WTF::String *)&v114, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v113, v16);
  WTF::String::String((WTF::String *)&v112, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v111, (uint64_t)v19);
  WTF::String::String((WTF::String *)&v110, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v109, "]");
  v107 = v114;
  v122 = v113;
  *(_QWORD *)&buf = v115;
  v121 = v112;
  v119 = v110;
  v120 = v111;
  v117 = v109;
  v118 = v25;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v107, (uint64_t *)&v122, (uint64_t *)&v121, (uint64_t *)&v120, (uint64_t *)&v119, (uint64_t *)&v118, (uint64_t *)&v117, &v116);
  if (!v116)
  {
    __break(0xC471u);
    return result;
  }
  v28 = v109;
  v109 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::destroy(v28, v27);
      if (!v25)
        goto LABEL_39;
      goto LABEL_37;
    }
    *(_DWORD *)v28 -= 2;
  }
  if (!v25)
    goto LABEL_39;
LABEL_37:
  if (*(_DWORD *)v25 == 2)
    WTF::StringImpl::destroy(v25, v27);
  else
    *(_DWORD *)v25 -= 2;
LABEL_39:
  v29 = v110;
  v110 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v27);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v111;
  v111 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v27);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v112;
  v112 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v27);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v113;
  v113 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v27);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v114;
  v114 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v27);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v115;
  v115 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v27);
    else
      *(_DWORD *)v34 -= 2;
  }
  v103 = v17;
  v35 = *((_QWORD *)v24 + 4);
  v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v36)
  {
    WTF::String::utf8();
    v38 = v107 ? (char *)v107 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v38;
    _os_log_impl(&dword_1940B8000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v36 = (uint64_t)v107;
    v107 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        v36 = WTF::fastFree((WTF *)v36, v37);
      else
        --*(_DWORD *)v36;
    }
  }
  if (*v24 && v24[16] >= 4u)
  {
    v39 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v40 = *v39;
      if ((v40 & 1) != 0)
        break;
      v41 = __ldaxr(v39);
      if (v41 == v40)
      {
        if (!__stxr(v40 | 1, v39))
        {
          v102 = v5;
          v42 = WTF::Logger::observers((WTF::Logger *)v36);
          v43 = *(unsigned int *)(v42 + 12);
          if ((_DWORD)v43)
          {
            v44 = *(uint64_t **)v42;
            v104 = *(_QWORD *)v42 + 8 * v43;
            do
            {
              v45 = *v44;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v105);
              LODWORD(v124) = 0;
              WTF::String::String((WTF::String *)&v125, " invoking chainTo() [");
              v126 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v127, v16);
              v128 = 0;
              WTF::String::String((WTF::String *)&v129, " chainedPromise:");
              v130 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v131, (uint64_t)v19);
              v132 = 0;
              WTF::String::String((WTF::String *)&v133, " isNothing:");
              v134 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v135 = v107;
              v136 = 0;
              WTF::String::String((WTF::String *)v137, "]");
              v107 = 0;
              v108 = 0;
              v46 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v108) = 8;
              v107 = v46;
              v47 = HIDWORD(v108);
              *((_DWORD *)v46 + 4 * HIDWORD(v108)) = buf;
              v48 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v46 + 2 * v47 + 1) = v48;
              *((_DWORD *)v46 + 4 * (v47 + 1)) = (_DWORD)v124;
              v49 = v125;
              if (v125)
                *(_DWORD *)v125 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 1) + 1) = v49;
              *((_DWORD *)v46 + 4 * (v47 + 2)) = v126;
              v50 = v127;
              if (v127)
                *(_DWORD *)v127 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 2) + 1) = v50;
              *((_DWORD *)v46 + 4 * (v47 + 3)) = v128;
              v51 = v129;
              if (v129)
                *(_DWORD *)v129 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 3) + 1) = v51;
              *((_DWORD *)v46 + 4 * (v47 + 4)) = v130;
              v52 = v131;
              if (v131)
                *(_DWORD *)v131 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 4) + 1) = v52;
              *((_DWORD *)v46 + 4 * (v47 + 5)) = v132;
              v53 = v133;
              if (v133)
                *(_DWORD *)v133 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 5) + 1) = v53;
              *((_DWORD *)v46 + 4 * (v47 + 6)) = v134;
              v54 = v135;
              if (v135)
                *(_DWORD *)v135 += 2;
              *((_QWORD *)v46 + 2 * (v47 + 6) + 1) = v54;
              *((_DWORD *)v46 + 4 * (v47 + 7)) = v136;
              v55 = v137[0];
              if (v137[0])
                *(_DWORD *)v137[0] += 2;
              *((_QWORD *)v46 + 2 * (v47 + 7) + 1) = v55;
              HIDWORD(v108) = v47 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, v24, 4, &v107);
              v56 = v107;
              if (HIDWORD(v108))
              {
                v57 = 16 * HIDWORD(v108);
                v58 = (WTF::StringImpl **)((char *)v107 + 8);
                do
                {
                  v59 = *v58;
                  *v58 = 0;
                  if (v59)
                  {
                    if (*(_DWORD *)v59 == 2)
                      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v37);
                    else
                      *(_DWORD *)v59 -= 2;
                  }
                  v58 += 2;
                  v57 -= 16;
                }
                while (v57);
                v56 = v107;
              }
              if (v56)
              {
                v107 = 0;
                LODWORD(v108) = 0;
                WTF::fastFree(v56, v37);
              }
              v60 = (WTF::StringImpl *)v137[0];
              v137[0] = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v135;
              v135 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = v133;
              v133 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v62 -= 2;
              }
              v63 = v131;
              v131 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v64 = v129;
              v129 = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v64 -= 2;
              }
              v65 = v127;
              v127 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                  WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v65 -= 2;
              }
              v66 = v125;
              v125 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v66 -= 2;
              }
              v67 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v37);
                else
                  *(_DWORD *)v67 -= 2;
              }
              ++v44;
            }
            while (v44 != (uint64_t *)v104);
          }
          v68 = __ldxr(v39);
          if (v68 == 1)
          {
            v5 = v102;
            if (!__stlxr(0, v39))
              break;
          }
          else
          {
            __clrex();
            v5 = v102;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v22 = (unsigned __int8 *)v116;
  v116 = 0;
  v17 = v103;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      v22 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v22, (WTF::StringImpl *)v37);
      if (!v19)
        goto LABEL_147;
      goto LABEL_143;
    }
    *(_DWORD *)v22 -= 2;
  }
LABEL_142:
  if (!v19)
    goto LABEL_147;
LABEL_143:
  v69 = v19 + 2;
  do
  {
    v70 = __ldaxr(v69);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, v69));
  if (!v71)
  {
    atomic_store(1u, v19 + 2);
    v22 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  }
LABEL_147:
  v72 = atomic_load((unsigned __int8 *)(v16 + 137));
  v73 = *(_QWORD *)v12;
  v74 = (unsigned __int8 *)(*(_QWORD *)v12 + 48);
  if (__ldaxr(v74))
  {
    __clrex();
LABEL_150:
    v22 = (unsigned __int8 *)MEMORY[0x19AEA534C](v74);
    goto LABEL_151;
  }
  if (__stxr(1u, v74))
    goto LABEL_150;
LABEL_151:
  v76 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v22);
  if (*v76 && v76[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v76, (WTF::Logger::LogSiteIdentifier *)v105, " runSynchronouslyOnTarget ", v73);
  atomic_store(v72, (unsigned __int8 *)(v73 + 137));
  v77 = __ldxr(v74);
  if (v77 != 1)
  {
    __clrex();
    goto LABEL_158;
  }
  if (__stlxr(0, v74))
LABEL_158:
    WTF::Lock::unlockSlow((WTF::Lock *)v74);
  if (*(_DWORD *)(v16 + 88))
  {
    v78 = *(unsigned int **)v12;
    *(_QWORD *)v12 = 0;
    if (v78)
    {
      v79 = v78 + 2;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 + 1, v79));
      buf = 0uLL;
      v124 = "<chained promise>";
      v125 = 0;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::Storage>((uint64_t)v78, v16 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
      do
      {
        v81 = __ldaxr(v79);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v79));
      if (!v82)
      {
        atomic_store(1u, v78 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 16))(v78);
      }
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead((uint64_t)v78);
      do
      {
        v83 = __ldaxr(v79);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v79));
      if (!v84)
      {
        atomic_store(1u, v78 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 16))(v78);
      }
    }
    else
    {
      buf = 0uLL;
      v124 = "<chained promise>";
      v125 = 0;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::Storage>(0, v16 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
    }
  }
  else
  {
    v85 = *(unsigned int *)(v16 + 132);
    if ((_DWORD)v85 == *(_DWORD *)(v16 + 128))
    {
      v86 = WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v16 + 120), v85 + 1, v12);
      v87 = *(_QWORD *)(v16 + 120) + 40 * *(unsigned int *)(v16 + 132);
      v88 = *(_QWORD *)v86;
      *(_QWORD *)v86 = 0;
      *(_QWORD *)v87 = v88;
      v89 = *(_OWORD *)(v86 + 24);
      *(_OWORD *)(v87 + 8) = *(_OWORD *)(v86 + 8);
      *(_OWORD *)(v87 + 24) = v89;
    }
    else
    {
      v90 = *(_QWORD *)(v16 + 120) + 40 * v85;
      v91 = *(unsigned int **)v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)v90 = v91;
      v92 = *(_OWORD *)(v12 + 8);
      *(_OWORD *)(v90 + 24) = *(_OWORD *)(v12 + 24);
      *(_OWORD *)(v90 + 8) = v92;
    }
    ++*(_DWORD *)(v16 + 132);
  }
  v93 = __ldxr(v17);
  if (v93 != 1)
  {
    __clrex();
    goto LABEL_179;
  }
  if (__stlxr(0, v17))
LABEL_179:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_180:
  v94 = (unsigned int *)v106;
  v106 = 0;
  if (v94)
  {
    v95 = v94 + 2;
    do
    {
      v96 = __ldaxr(v95);
      v97 = v96 - 1;
    }
    while (__stlxr(v97, v95));
    if (!v97)
    {
      atomic_store(1u, v94 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 16))(v94);
    }
  }
  result = *((_QWORD *)v5 + 9);
  *((_QWORD *)v5 + 9) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*(_QWORD *)v12)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead(*(_QWORD *)v12);
      v98 = *(unsigned int **)v12;
      *(_QWORD *)v12 = 0;
      if (v98)
      {
        v99 = v98 + 2;
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          atomic_store(1u, v98 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 16))(v98);
        }
      }
    }
    else
    {
      *(_QWORD *)v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v15);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>(uint64_t a1, unsigned int a2, char *a3, const char *a4, WTF::Logger::LogSiteIdentifier *a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WTF::Logger *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::Logger *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  char *v63;
  WTF::Logger *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  __int128 buf;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  int v95;
  _QWORD v96[3];

  v96[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v74, a3);
  WTF::String::String((WTF::String *)&v73, a4);
  WTF::Logger::LogSiteIdentifier::toString(a5);
  WTF::String::String((WTF::String *)&v71, a6);
  WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a7, &v70);
  v63 = (char *)a8;
  WTF::String::String((WTF::String *)&v69, a8);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, a10);
  *(_QWORD *)&buf = v74;
  v65 = v73;
  v80 = v71;
  v81 = v72;
  v78 = v69;
  v79 = v70;
  v76 = v67;
  v77 = v68;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v65, (uint64_t *)&v81, (uint64_t *)&v80, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, &v75);
  if (v75)
  {
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v68;
    v68 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v69;
    v69 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v70;
    v70 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v71;
    v71 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v72;
    v72 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v73;
    v73 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v74;
    v74 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *(NSObject **)(a1 + 32);
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v27)
    {
      WTF::String::utf8();
      v29 = v65 ? (char *)v65 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v29;
      _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v27 = (uint64_t)v65;
      v65 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          v27 = WTF::fastFree((WTF *)v27, v28);
        else
          --*(_DWORD *)v27;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v31 = *v30;
        if ((v31 & 1) != 0)
          break;
        v32 = __ldaxr(v30);
        if (v32 == v31)
        {
          if (!__stxr(v31 | 1, v30))
          {
            v33 = WTF::Logger::observers((WTF::Logger *)v27);
            v34 = *(unsigned int *)(v33 + 12);
            if ((_DWORD)v34)
            {
              v35 = *(uint64_t **)v33;
              v61 = *(_QWORD *)v33 + 8 * v34;
              do
              {
                v36 = *v35;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v83 = 0;
                WTF::String::String((WTF::String *)&v84, a4);
                v85 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a5);
                v87 = 0;
                WTF::String::String((WTF::String *)&v88, a6);
                v89 = 0;
                WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a7, &v90);
                v91 = 0;
                WTF::String::String((WTF::String *)&v92, v63);
                v93 = 0;
                WTF::LogArgument<void const*>::toString();
                v95 = 0;
                WTF::String::String((WTF::String *)v96, a10);
                v65 = 0;
                v66 = 0;
                v37 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v66) = 8;
                v65 = v37;
                v38 = HIDWORD(v66);
                *((_DWORD *)v37 + 4 * HIDWORD(v66)) = buf;
                v39 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v37 + 2 * v38 + 1) = v39;
                *((_DWORD *)v37 + 4 * (v38 + 1)) = v83;
                v40 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v37 + 2 * (v38 + 1) + 1) = v40;
                *((_DWORD *)v37 + 4 * (v38 + 2)) = v85;
                v41 = v86;
                if (v86)
                  *(_DWORD *)v86 += 2;
                *((_QWORD *)v37 + 2 * (v38 + 2) + 1) = v41;
                *((_DWORD *)v37 + 4 * (v38 + 3)) = v87;
                v42 = v88;
                if (v88)
                  *(_DWORD *)v88 += 2;
                *((_QWORD *)v37 + 2 * (v38 + 3) + 1) = v42;
                *((_DWORD *)v37 + 4 * (v38 + 4)) = v89;
                v43 = v90;
                if (v90)
                  *(_DWORD *)v90 += 2;
                *((_QWORD *)v37 + 2 * (v38 + 4) + 1) = v43;
                *((_DWORD *)v37 + 4 * (v38 + 5)) = v91;
                v44 = v92;
                if (v92)
                  *(_DWORD *)v92 += 2;
                *((_QWORD *)v37 + 2 * (v38 + 5) + 1) = v44;
                *((_DWORD *)v37 + 4 * (v38 + 6)) = v93;
                v45 = v94;
                if (v94)
                  *(_DWORD *)v94 += 2;
                *((_QWORD *)v37 + 2 * (v38 + 6) + 1) = v45;
                *((_DWORD *)v37 + 4 * (v38 + 7)) = v95;
                v46 = v96[0];
                if (v96[0])
                  *(_DWORD *)v96[0] += 2;
                *((_QWORD *)v37 + 2 * (v38 + 7) + 1) = v46;
                HIDWORD(v66) = v38 + 8;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v36 + 16))(v36, a1, a2, &v65);
                v47 = v65;
                if (HIDWORD(v66))
                {
                  v48 = a1;
                  v49 = 16 * HIDWORD(v66);
                  v50 = (WTF::StringImpl **)((char *)v65 + 8);
                  do
                  {
                    v51 = *v50;
                    *v50 = 0;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v28);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    v50 += 2;
                    v49 -= 16;
                  }
                  while (v49);
                  v47 = v65;
                  a1 = v48;
                }
                if (v47)
                {
                  v65 = 0;
                  LODWORD(v66) = 0;
                  WTF::fastFree(v47, v28);
                }
                v52 = (WTF::StringImpl *)v96[0];
                v96[0] = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = v94;
                v94 = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                v54 = v92;
                v92 = 0;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                v55 = v90;
                v90 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v55 -= 2;
                }
                v56 = v88;
                v88 = 0;
                if (v56)
                {
                  if (*(_DWORD *)v56 == 2)
                    WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v56 -= 2;
                }
                v57 = v86;
                v86 = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v57 -= 2;
                }
                v58 = v84;
                v84 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v59 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v59)
                {
                  if (*(_DWORD *)v59 == 2)
                    WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v28);
                  else
                    *(_DWORD *)v59 -= 2;
                }
                ++v35;
              }
              while (v35 != (uint64_t *)v61);
            }
            v60 = __ldxr(v30);
            if (v60 == 1)
            {
              if (!__stlxr(0, v30))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v75;
    v75 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  unsigned int *v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = v3;
        do
        {
          v9 = *(unsigned int **)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)v7 = v9;
          v10 = *(_OWORD *)((char *)v8 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v8 + 24);
          *(_OWORD *)(v7 + 2) = v10;
          result = *(unsigned int **)v8;
          if (*(_QWORD *)v8)
          {
            WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WebCore::Exception,0u>::assertIsDead((uint64_t)result);
            result = *(unsigned int **)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              v11 = result + 2;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
          }
          else
          {
            *(_QWORD *)v8 = 0;
          }
          v7 += 10;
          v8 = (WTF *)((char *)v8 + 40);
        }
        while (v8 != (WTF *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledIZNS3_16MediaStreamTrack20getPhotoCapabilitiesEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_NS_3RefINS2_IS4_NS3_9ExceptionELj0EEENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEJSN_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335F470;
  a1[1] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledIZNS3_16MediaStreamTrack20getPhotoCapabilitiesEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_NS_3RefINS2_IS4_NS3_9ExceptionELj0EEENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEJSN_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F470;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledIZNS3_16MediaStreamTrack20getPhotoCapabilitiesEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_NS_3RefINS2_IS4_NS3_9ExceptionELj0EEENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEJSN_EE4callESN_@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  _BYTE *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  _BYTE *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  char *v41;
  WTF::Logger::LogSiteIdentifier *v42;
  WTF::StringImpl *v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  WTF::StringImpl *v53;
  char v54;
  char v55;

  v6 = *(_DWORD *)(a2 + 152);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      LOBYTE(v43[0]) = 24;
      v43[1] = v7;
      v45 = 0uLL;
      *(_QWORD *)&v46 = "operator()";
      *((_QWORD *)&v46 + 1) = 0;
      v8 = WTF::fastMalloc((WTF *)0x110);
      *(_DWORD *)(v8 + 8) = 1;
      *(_QWORD *)v8 = off_1E335F498;
      v9 = v46;
      *(_OWORD *)(v8 + 16) = v45;
      *(_OWORD *)(v8 + 32) = v9;
      *(_BYTE *)(v8 + 48) = 0;
      *(_DWORD *)(v8 + 216) = 0;
      *(_QWORD *)(v8 + 224) = v8 + 240;
      *(_QWORD *)(v8 + 232) = 1;
      *(_QWORD *)(v8 + 248) = 0;
      *(_QWORD *)(v8 + 256) = 0;
      *(_WORD *)(v8 + 264) = 0;
      v10 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
      if (*v10 && v10[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v10, v8);
      *a3 = v8;
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v8, (char *)v43, (WTF::Logger::LogSiteIdentifier *)&v45);
      result = v43[1];
      v43[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v40 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v40, v41, v42);
    }
    return result;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(v13 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = v15 - 96;
      v17 = *(unsigned __int8 *)(v15 + 178);
      if (*(_BYTE *)(v15 + 178))
      {
        if (v17 == 1 || v17 == 2)
          ++*(_DWORD *)(v15 + 216);
      }
      else
      {
        *(_DWORD *)(v15 - 264) += 2;
      }
      if (*(_BYTE *)(v15 + 180) || *(_BYTE *)(v13 + 1205))
      {
        v18 = 0;
        goto LABEL_17;
      }
      v43[0] = 0;
      v43[1] = 0;
      *(_QWORD *)&v44 = "operator()";
      *((_QWORD *)&v44 + 1) = 0;
      v24 = WTF::fastMalloc((WTF *)0x110);
      *(_DWORD *)(v24 + 8) = 1;
      *(_QWORD *)v24 = off_1E335F498;
      v25 = v44;
      *(_OWORD *)(v24 + 16) = *(_OWORD *)v43;
      *(_OWORD *)(v24 + 32) = v25;
      *(_BYTE *)(v24 + 48) = 0;
      v26 = (unsigned __int8 *)(v24 + 48);
      *(_DWORD *)(v24 + 216) = 0;
      *(_QWORD *)(v24 + 224) = v24 + 240;
      *(_QWORD *)(v24 + 232) = 1;
      *(_QWORD *)(v24 + 248) = 0;
      *(_QWORD *)(v24 + 256) = 0;
      *(_WORD *)(v24 + 264) = 0;
      v27 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v24);
      if (*v27 && v27[16] >= 4u)
        v27 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v27, v24);
      *a3 = v24;
      v53 = (WTF::StringImpl *)(v24 + 48);
      v54 = 1;
      if (__ldaxr(v26))
      {
        __clrex();
      }
      else if (!__stxr(1u, v26))
      {
LABEL_40:
        v29 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v27);
        if (*v29 && v29[16] >= 4u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v29, (WTF::Logger::LogSiteIdentifier *)v43, " resolving ", v24);
        v30 = *(_OWORD *)(a2 + 88);
        v49 = *(_OWORD *)(a2 + 72);
        v50 = v30;
        v51 = *(_OWORD *)(a2 + 104);
        v52 = *(_BYTE *)(a2 + 120);
        v31 = *(_OWORD *)(a2 + 24);
        v45 = *(_OWORD *)(a2 + 8);
        v46 = v31;
        v32 = *(_OWORD *)(a2 + 56);
        v47 = *(_OWORD *)(a2 + 40);
        v48 = v32;
        v33 = *(unsigned __int8 *)(a2 + 144);
        if (*(_BYTE *)(a2 + 144))
        {
          v34 = *(_QWORD *)(a2 + 128);
          v3 = *(_QWORD *)(a2 + 136);
          *(_QWORD *)(a2 + 128) = 0;
          *(_QWORD *)(a2 + 136) = 0;
        }
        else
        {
          v34 = 0;
        }
        v35 = *(unsigned int *)(v24 + 216);
        if ((_DWORD)v35 != -1)
          ((void (*)(char *, uint64_t))off_1E335F4B0[v35])(&v55, v24 + 56);
        v36 = v50;
        *(_OWORD *)(v24 + 128) = v49;
        *(_OWORD *)(v24 + 144) = v36;
        *(_OWORD *)(v24 + 160) = v51;
        *(_BYTE *)(v24 + 176) = v52;
        v37 = v46;
        *(_OWORD *)(v24 + 64) = v45;
        *(_OWORD *)(v24 + 80) = v37;
        v38 = v48;
        *(_OWORD *)(v24 + 96) = v47;
        *(_OWORD *)(v24 + 112) = v38;
        *(_BYTE *)(v24 + 184) = 0;
        *(_BYTE *)(v24 + 200) = 0;
        if (v33)
        {
          *(_QWORD *)(v24 + 184) = v34;
          *(_QWORD *)(v24 + 192) = v3;
          *(_BYTE *)(v24 + 200) = 1;
        }
        *(_DWORD *)(v24 + 208) = 0;
        *(_DWORD *)(v24 + 216) = 1;
        result = (WTF::StringImpl *)WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::dispatchAll(v24, (unsigned __int8 **)&v53);
        if (!v54)
          goto LABEL_24;
        result = v53;
        v39 = __ldxr((unsigned __int8 *)v53);
        if (v39 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v53))
            goto LABEL_24;
        }
        else
        {
          __clrex();
        }
        result = (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
        goto LABEL_24;
      }
      v27 = (unsigned __int8 *)MEMORY[0x19AEA534C](v26);
      goto LABEL_40;
    }
  }
  v16 = 0;
  v18 = 1;
LABEL_17:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v43[0]) = 30;
  v45 = 0uLL;
  *(_QWORD *)&v46 = "operator()";
  *((_QWORD *)&v46 + 1) = 0;
  v19 = WTF::fastMalloc((WTF *)0x110);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)v19 = off_1E335F498;
  v20 = v46;
  *(_OWORD *)(v19 + 16) = v45;
  *(_OWORD *)(v19 + 32) = v20;
  *(_BYTE *)(v19 + 48) = 0;
  *(_DWORD *)(v19 + 216) = 0;
  *(_QWORD *)(v19 + 224) = v19 + 240;
  *(_QWORD *)(v19 + 232) = 1;
  *(_QWORD *)(v19 + 248) = 0;
  *(_QWORD *)(v19 + 256) = 0;
  *(_WORD *)(v19 + 264) = 0;
  v21 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v19);
  if (*v21 && v21[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v21, v19);
  *a3 = v19;
  WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v19, (char *)v43, (WTF::Logger::LogSiteIdentifier *)&v45);
  result = v43[1];
  v43[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      if ((v18 & 1) != 0)
        return result;
      goto LABEL_24;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v18 & 1) != 0)
    return result;
LABEL_24:
  v23 = *(unsigned __int8 *)(v16 + 274);
  if (*(_BYTE *)(v16 + 274))
  {
    if (v23 == 1)
    {
      if (*(_DWORD *)(v16 + 312) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      else
        --*(_DWORD *)(v16 + 312);
    }
    else if (v23 == 2)
    {
      return (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v16 + 312));
    }
  }
  else if (*(_DWORD *)(v16 - 168) == 2)
  {
    if ((*(_WORD *)(v16 - 162) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v16 - 192), v22);
  }
  else
  {
    *(_DWORD *)(v16 - 168) -= 2;
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::StringImpl *v14;
  WTF::Lock *v15;
  char v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v15 = v6;
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " rejecting ", a1);
  v10 = *a2;
  WTF::String::isolatedCopy();
  v11 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E335F4B0[v11])(&v17, a1 + 56);
  *(_BYTE *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v14;
  *(_DWORD *)(a1 + 208) = 1;
  *(_DWORD *)(a1 + 216) = 1;
  WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::dispatchAll(a1, (unsigned __int8 **)&v15);
  result = 0;
  if (v16)
  {
    result = v15;
    v13 = __ldxr((unsigned __int8 *)v15);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 260);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 248);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64[3];

  v64[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v59, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v58, a1);
    if (v59)
    {
      v6 = *((_DWORD *)v59 + 1);
      if (v58)
      {
LABEL_8:
        v7 = *((_DWORD *)v58 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v60 = 0;
          goto LABEL_108;
        }
        if (v59)
        {
          v8 = *((_DWORD *)v59 + 4);
          v9 = (v8 >> 2) & 1;
          if (v58 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v58)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v59, (uint64_t)v58, &v60);
        if (v60)
        {
          v11 = v58;
          v58 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v59;
          v59 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v56 ? (char *)v56 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v62 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v56;
            v56 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v62[4], "destroying ");
                      v63 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v64, a1);
                      v56 = 0;
                      v57 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v57) = 2;
                      v56 = v25;
                      v26 = HIDWORD(v57);
                      *((_DWORD *)v25 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v62[4];
                      if (*(_QWORD *)&v62[4])
                        **(_DWORD **)&v62[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v63;
                      v28 = v64[0];
                      if (v64[0])
                        *(_DWORD *)v64[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v57) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v56);
                      v29 = v56;
                      if (HIDWORD(v57))
                      {
                        v30 = 16 * HIDWORD(v57);
                        v31 = (WTF::StringImpl **)((char *)v56 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v56;
                      }
                      if (v29)
                      {
                        v56 = 0;
                        LODWORD(v57) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v64[0];
                      v64[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v62[4];
                      *(_QWORD *)&v62[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v58)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 260);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 248);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 248);
  if (v45)
  {
    *(_QWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 256) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 236);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 224);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 224);
  if ((WTF *)(a1 + 240) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E335F4B0[v55])(buf, a1 + 56);
  *(_DWORD *)(a1 + 216) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F190[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 152) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 224);
  if (v4 == (WTF::NativePromiseBase **)(result + 240))
  {
    v5 = *(unsigned int *)(result + 236);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 224) = result + 240;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 236);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 232) = 1;
  v6 = *(WTF **)(v3 + 248);
  v7 = *(_DWORD *)(v3 + 260);
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v29;
  char v30;
  unsigned __int8 *v31;
  _BYTE v32[144];
  int v33;
  uint64_t v34;

  v5 = a1;
  v34 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 265));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E335F4D8;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v31 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v31);
      result = v31;
      v31 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v31 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v31, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 216);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 216) != 1)
      goto LABEL_65;
    v32[0] = 0;
    v33 = -1;
    v25 = *(unsigned int *)(a2 + 208);
    if ((_DWORD)v25 != -1)
    {
      v26 = *(_DWORD *)(a2 + 208);
      ((void (*)(char *, _BYTE *, uint64_t))off_1E335F1A0[v25])(&v30, v32, a2 + 64);
      v33 = v26;
    }
    v27 = __ldxr(v17);
    if (v27 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v31);
        if (v33 != -1)
          ((void (*)(char *, _BYTE *))off_1E335F190[v33])(&v30, v32);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 216) != 2)
  {
LABEL_65:
    v29 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v29);
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v31, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v31);
  if (v33 != -1)
    ((void (*)(char *, _BYTE *))off_1E335F190[v33])(&v30, v32);
  v33 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_60:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E335F4D8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335F4D8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::Logger::LogSiteIdentifier *v21;
  char v22;
  uint64_t v23;
  _BYTE v24[144];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v23 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v23, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 216);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 216) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v23, v15);
      (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v23);
      if (v25 != -1)
        ((void (*)(char *, _BYTE *))off_1E335F190[v25])(&v22, v24);
      v25 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::Storage>(v19, v20, v21);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 216) != 1)
    goto LABEL_46;
  v24[0] = 0;
  v25 = -1;
  v17 = *(unsigned int *)(v10 + 208);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E335F1A0[v17])(&v22, v24, v10 + 64);
    v25 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v23);
  if (v25 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E335F190[v25])(&v22, v24);
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 216);
  v11 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E335F4B0[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 216) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E335F4F0[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F4B0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 160) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  _BYTE v18[8];
  _BYTE v19[144];
  int v20;
  _WORD v21[72];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v19[0] = 0;
      v20 = -1;
      v7 = *(unsigned int *)(a3 + 152);
      if ((_DWORD)v7 == -1)
      {
        v9 = *(_DWORD *)(a2 + 152);
        if (v9 == -1)
        {
LABEL_29:
          if (v20 != -1)
            return ((uint64_t (*)(_WORD *, _BYTE *))off_1E335F190[v20])(v21, v19);
          return result;
        }
        v10 = (_BYTE *)(a2 + 8);
        v21[0] = 0;
      }
      else
      {
        result = ((uint64_t (*)(_WORD *, _BYTE *, uint64_t))off_1E335F1A0[v7])(v21, v19, a3 + 8);
        v20 = v7;
        v8 = (_DWORD *)(a2 + 152);
        v9 = *(_DWORD *)(a2 + 152);
        v10 = (_BYTE *)(a2 + 8);
        if (v9 != -1 && v9 == (_DWORD)v7)
        {
          result = ((uint64_t (*)(_WORD *, _BYTE *, uint64_t))off_1E335F508[v7])(v21, v19, a2 + 8);
          goto LABEL_29;
        }
        v21[0] = 0;
        if (!*((_BYTE *)v21 + v7))
        {
          v12 = v19;
LABEL_19:
          LOBYTE(v21[0]) = 0;
          v22 = -1;
          v8 = v10 + 144;
          if (v9 != -1)
          {
LABEL_20:
            result = ((uint64_t (*)(char *, _WORD *, _BYTE *))off_1E335F1A0[v9])(&v17, v21, v10);
            v22 = v9;
            v13 = *v8;
            if ((_DWORD)v13 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E335F190[v13])(&v17, v10);
          }
LABEL_23:
          *v8 = -1;
          v14 = *((unsigned int *)v12 + 36);
          if ((_DWORD)v14 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335F518[v14])(&v17, v10, v12);
            *v8 = v14;
            v15 = *((unsigned int *)v12 + 36);
            if ((_DWORD)v15 != -1)
              result = ((uint64_t (*)(char *, _BYTE *))off_1E335F190[v15])(&v17, v12);
          }
          *((_DWORD *)v12 + 36) = -1;
          v16 = v22;
          if (v22 != -1)
          {
            result = ((uint64_t (*)(char *, _BYTE *, _WORD *))off_1E335F518[v22])(&v17, v12, v21);
            *((_DWORD *)v12 + 36) = v16;
            if (v22 != -1)
              result = ((uint64_t (*)(char *, _WORD *))off_1E335F190[v22])(&v17, v21);
          }
          goto LABEL_29;
        }
        v21[0] = 0;
        if (v9 == -1)
        {
          LOBYTE(v21[0]) = 0;
          v22 = -1;
          v12 = v19;
          goto LABEL_23;
        }
      }
      if (*((_BYTE *)v21 + v9))
      {
        LOBYTE(v21[0]) = 0;
        v22 = -1;
        v8 = (_DWORD *)(a2 + 152);
        v12 = v19;
        goto LABEL_20;
      }
      v9 = v7;
      v12 = v10;
      v10 = v19;
      goto LABEL_19;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E335F4B0[v5])(v18, v4);
  }
  *(_BYTE *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 160) = -1;
  *(_DWORD *)(v4 + 152) = -1;
  v11 = *(unsigned int *)(a3 + 152);
  if ((_DWORD)v11 != -1)
  {
    result = ((uint64_t (*)(_BYTE *))off_1E335F1A0[v11])(v18);
    *(_DWORD *)(v4 + 152) = v11;
  }
  *(_DWORD *)(v4 + 160) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F4B0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 160) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesENS7_9ExceptionEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::swap[abi:sn180100]<WebCore::PhotoCapabilities>(a2, a3);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesENS7_9ExceptionEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*((_BYTE *)a3 + 136))
  {
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    v9 = *((_QWORD *)a3 + 15);
    *((_QWORD *)a3 + 15) = 0;
    *(_QWORD *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(_BYTE *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E335F538;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335F568;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E335F538;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335F568;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>>::processResult(WTF::NativePromiseBase *a1, uint64_t a2, uint64_t a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::String *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  unsigned __int8 *v55;
  unint64_t v57;
  int v58;
  WTF::NativePromiseBase *v59;
  void *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  BOOL v68;
  unsigned __int8 *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  NSObject *v79;
  uint64_t v80;
  void *v81;
  char *v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  WTF::Logger *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::Logger *v98;
  uint64_t v99;
  WTF::Logger *v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned __int8 v116;
  uint64_t v117;
  unsigned __int8 *v118;
  _BYTE *v120;
  int v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  unsigned int *v135;
  __int128 v136;
  int v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t result;
  unsigned int *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned __int8 *v147;
  unint64_t v148;
  WTF::NativePromiseBase *v149;
  WTF::String *v150;
  char *v151;
  char *v152;
  WTF::Logger::LogSiteIdentifier *v153;
  WTF::Logger *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  WTF::Logger *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  __int128 buf;
  const char *v176;
  WTF::StringImpl *v177;
  int v178;
  WTF::StringImpl *v179;
  int v180;
  WTF::StringImpl *v181;
  int v182;
  WTF::StringImpl *v183;
  int v184;
  WTF::StringImpl *v185;
  int v186;
  WTF::Logger *v187;
  int v188;
  _QWORD v189[5];

  v5 = a1;
  v189[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 152);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  v149 = v5;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v151 = (char *)v10;
    WTF::String::String((WTF::String *)&v168, v10);
    WTF::String::String((WTF::String *)&v167, " then() call made from ");
    v153 = (WTF::NativePromiseBase *)((char *)v5 + 24);
    WTF::Logger::LogSiteIdentifier::toString((WTF::NativePromiseBase *)((char *)v5 + 24));
    WTF::String::String((WTF::String *)&v165, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a2, &v164);
    WTF::String::String((WTF::String *)&v163, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v161, "]");
    *(_QWORD *)&buf = v168;
    v154 = v167;
    v159 = v166;
    v173 = v164;
    v174 = v165;
    v171 = v162;
    v172 = v163;
    v170 = v161;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v154, (uint64_t *)&v159, (uint64_t *)&v174, (uint64_t *)&v173, (uint64_t *)&v172, (uint64_t *)&v171, (uint64_t *)&v170, &v169);
    if (!v169)
      goto LABEL_329;
    v12 = v161;
    v161 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v162;
    v162 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v163;
    v163 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v164;
    v164 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v165;
    v165 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v166;
    v166 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v167;
    v167 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v168;
    v168 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v11);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *((_QWORD *)v9 + 4);
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v23 = v154 ? (char *)v154 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v21 = (uint64_t)v154;
      v154 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = WTF::fastFree((WTF *)v21, v22);
        else
          --*(_DWORD *)v21;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v25 = *v24;
        if ((v25 & 1) != 0)
          break;
        v26 = __ldaxr(v24);
        if (v26 == v25)
        {
          if (!__stxr(v25 | 1, v24))
          {
            v27 = WTF::Logger::observers((WTF::Logger *)v21);
            v28 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v28)
            {
              v29 = *(WTF::String **)v27;
              v150 = (WTF::String *)(*(_QWORD *)v27 + 8 * v28);
              do
              {
                v30 = *(_QWORD *)v29;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v151);
                LODWORD(v176) = 0;
                WTF::String::String((WTF::String *)&v177, " then() call made from ");
                v178 = 0;
                WTF::Logger::LogSiteIdentifier::toString(v153);
                v180 = 0;
                WTF::String::String((WTF::String *)&v181, "[");
                v182 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a2, &v183);
                v184 = 0;
                WTF::String::String((WTF::String *)&v185, " callback:");
                v186 = 0;
                WTF::LogArgument<void const*>::toString();
                v188 = 0;
                WTF::String::String((WTF::String *)v189, "]");
                v154 = 0;
                v155 = 0;
                v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v155) = 8;
                v154 = v31;
                v32 = HIDWORD(v155);
                *((_DWORD *)v31 + 4 * HIDWORD(v155)) = buf;
                v33 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                *((_DWORD *)v31 + 4 * (v32 + 1)) = (_DWORD)v176;
                v34 = v177;
                if (v177)
                  *(_DWORD *)v177 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                *((_DWORD *)v31 + 4 * (v32 + 2)) = v178;
                v35 = v179;
                if (v179)
                  *(_DWORD *)v179 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                *((_DWORD *)v31 + 4 * (v32 + 3)) = v180;
                v36 = v181;
                if (v181)
                  *(_DWORD *)v181 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                *((_DWORD *)v31 + 4 * (v32 + 4)) = v182;
                v37 = v183;
                if (v183)
                  *(_DWORD *)v183 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                *((_DWORD *)v31 + 4 * (v32 + 5)) = v184;
                v38 = v185;
                if (v185)
                  *(_DWORD *)v185 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
                *((_DWORD *)v31 + 4 * (v32 + 6)) = v186;
                v39 = v187;
                if (v187)
                  *(_DWORD *)v187 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
                *((_DWORD *)v31 + 4 * (v32 + 7)) = v188;
                v40 = v189[0];
                if (v189[0])
                  *(_DWORD *)v189[0] += 2;
                *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
                HIDWORD(v155) = v32 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v9, 4, &v154);
                v41 = v154;
                if (HIDWORD(v155))
                {
                  v42 = 16 * HIDWORD(v155);
                  v43 = (WTF::StringImpl **)((char *)v154 + 8);
                  do
                  {
                    v44 = *v43;
                    *v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v43 += 2;
                    v42 -= 16;
                  }
                  while (v42);
                  v41 = v154;
                  v5 = v149;
                }
                if (v41)
                {
                  v154 = 0;
                  LODWORD(v155) = 0;
                  WTF::fastFree(v41, v22);
                }
                v45 = (WTF::StringImpl *)v189[0];
                v189[0] = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v187;
                v187 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v185;
                v185 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v183;
                v183 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v181;
                v181 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v179;
                v179 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v177;
                v177 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v29 = (WTF::String *)((char *)v29 + 8);
              }
              while (v29 != v150);
            }
            v53 = __ldxr(v24);
            if (v53 == 1)
            {
              if (!__stlxr(0, v24))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v54 = v169;
    v169 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v55 = (unsigned __int8 *)v5 + 57;
  if (__ldaxr((unsigned __int8 *)v5 + 57))
  {
    __clrex();
  }
  else if (!__stxr(1u, v55))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C]((char *)v5 + 57);
LABEL_123:
  v57 = *((_QWORD *)v5 + 8);
  *((_QWORD *)v5 + 8) = 0;
  v58 = __ldxr(v55);
  if (v58 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v55))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::NativePromiseBase *)((char *)v5 + 57));
  v59 = (WTF::NativePromiseBase *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v5 + 9) + 16))(&v158, *((_QWORD *)v5 + 9), a3);
  if (!v57)
    goto LABEL_289;
  v61 = v158;
  v154 = 0;
  v155 = 0;
  v156 = "<chained completion promise>";
  v157 = 0;
  v62 = (unsigned __int8 *)(v158 + 48);
  if (__ldaxr((unsigned __int8 *)(v158 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v62))
  {
    goto LABEL_133;
  }
  v59 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v62);
LABEL_133:
  *(_BYTE *)(v61 + 264) = 1;
  v64 = *(unsigned int **)v57;
  if (*(_QWORD *)v57)
  {
    v65 = v64 + 2;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 + 1, v65));
  }
  v67 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v59);
  if (*v67)
    v68 = v67[16] >= 4u;
  else
    v68 = 0;
  if (!v68)
    goto LABEL_251;
  v69 = v67;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v154);
  WTF::String::String((WTF::String *)&v166, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v165, v61);
  WTF::String::String((WTF::String *)&v164, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v163, (uint64_t)v64);
  WTF::String::String((WTF::String *)&v162, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v70 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v161, "]");
  *(_QWORD *)&buf = v167;
  v159 = v166;
  v173 = v164;
  v174 = v165;
  v171 = v162;
  v172 = v163;
  v169 = v161;
  v170 = v70;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v159, (uint64_t *)&v174, (uint64_t *)&v173, (uint64_t *)&v172, (uint64_t *)&v171, (uint64_t *)&v170, (uint64_t *)&v169, &v168);
  if (!v168)
  {
LABEL_329:
    __break(0xC471u);
    JUMPOUT(0x195479204);
  }
  v72 = v161;
  v161 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::destroy(v72, v71);
      if (!v70)
        goto LABEL_148;
      goto LABEL_146;
    }
    *(_DWORD *)v72 -= 2;
  }
  if (!v70)
    goto LABEL_148;
LABEL_146:
  if (*(_DWORD *)v70 == 2)
    WTF::StringImpl::destroy(v70, v71);
  else
    *(_DWORD *)v70 -= 2;
LABEL_148:
  v73 = v162;
  v162 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v71);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = v163;
  v163 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v71);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = v164;
  v164 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v71);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = v165;
  v165 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v71);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = v166;
  v166 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v71);
    else
      *(_DWORD *)v77 -= 2;
  }
  v148 = v57;
  v78 = v167;
  v167 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v71);
    else
      *(_DWORD *)v78 -= 2;
  }
  v147 = v62;
  v79 = *((_QWORD *)v69 + 4);
  v80 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v80)
  {
    WTF::String::utf8();
    v82 = v159 ? (char *)v159 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v82;
    _os_log_impl(&dword_1940B8000, v79, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v80 = (uint64_t)v159;
    v159 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
        v80 = WTF::fastFree((WTF *)v80, v81);
      else
        --*(_DWORD *)v80;
    }
  }
  if (*v69 && v69[16] >= 4u)
  {
    v83 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v84 = *v83;
      if ((v84 & 1) != 0)
        break;
      v85 = __ldaxr(v83);
      if (v85 == v84)
      {
        if (!__stxr(v84 | 1, v83))
        {
          v86 = WTF::Logger::observers((WTF::Logger *)v80);
          v87 = *(unsigned int *)(v86 + 12);
          if ((_DWORD)v87)
          {
            v88 = *(char **)v86;
            v152 = (char *)(*(_QWORD *)v86 + 8 * v87);
            do
            {
              v89 = *(_QWORD *)v88;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v154);
              LODWORD(v176) = 0;
              WTF::String::String((WTF::String *)&v177, " invoking chainTo() [");
              v178 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v179, v61);
              v180 = 0;
              WTF::String::String((WTF::String *)&v181, " chainedPromise:");
              v182 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v183, (uint64_t)v64);
              v184 = 0;
              WTF::String::String((WTF::String *)&v185, " isNothing:");
              v186 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v187 = v159;
              v188 = 0;
              WTF::String::String((WTF::String *)v189, "]");
              v159 = 0;
              v160 = 0;
              v90 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v160) = 8;
              v159 = v90;
              v91 = HIDWORD(v160);
              *((_DWORD *)v90 + 4 * HIDWORD(v160)) = buf;
              v92 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v90 + 2 * v91 + 1) = v92;
              *((_DWORD *)v90 + 4 * (v91 + 1)) = (_DWORD)v176;
              v93 = v177;
              if (v177)
                *(_DWORD *)v177 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 1) + 1) = v93;
              *((_DWORD *)v90 + 4 * (v91 + 2)) = v178;
              v94 = v179;
              if (v179)
                *(_DWORD *)v179 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 2) + 1) = v94;
              *((_DWORD *)v90 + 4 * (v91 + 3)) = v180;
              v95 = v181;
              if (v181)
                *(_DWORD *)v181 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 3) + 1) = v95;
              *((_DWORD *)v90 + 4 * (v91 + 4)) = v182;
              v96 = v183;
              if (v183)
                *(_DWORD *)v183 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 4) + 1) = v96;
              *((_DWORD *)v90 + 4 * (v91 + 5)) = v184;
              v97 = v185;
              if (v185)
                *(_DWORD *)v185 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 5) + 1) = v97;
              *((_DWORD *)v90 + 4 * (v91 + 6)) = v186;
              v98 = v187;
              if (v187)
                *(_DWORD *)v187 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 6) + 1) = v98;
              *((_DWORD *)v90 + 4 * (v91 + 7)) = v188;
              v99 = v189[0];
              if (v189[0])
                *(_DWORD *)v189[0] += 2;
              *((_QWORD *)v90 + 2 * (v91 + 7) + 1) = v99;
              HIDWORD(v160) = v91 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v89 + 16))(v89, v69, 4, &v159);
              v100 = v159;
              if (HIDWORD(v160))
              {
                v101 = 16 * HIDWORD(v160);
                v102 = (WTF::StringImpl **)((char *)v159 + 8);
                do
                {
                  v103 = *v102;
                  *v102 = 0;
                  if (v103)
                  {
                    if (*(_DWORD *)v103 == 2)
                      WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v81);
                    else
                      *(_DWORD *)v103 -= 2;
                  }
                  v102 += 2;
                  v101 -= 16;
                }
                while (v101);
                v100 = v159;
              }
              if (v100)
              {
                v159 = 0;
                LODWORD(v160) = 0;
                WTF::fastFree(v100, v81);
              }
              v104 = (WTF::StringImpl *)v189[0];
              v189[0] = 0;
              if (v104)
              {
                if (*(_DWORD *)v104 == 2)
                  WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v104 -= 2;
              }
              v105 = v187;
              v187 = 0;
              if (v105)
              {
                if (*(_DWORD *)v105 == 2)
                  WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v105 -= 2;
              }
              v106 = v185;
              v185 = 0;
              if (v106)
              {
                if (*(_DWORD *)v106 == 2)
                  WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v106 -= 2;
              }
              v107 = v183;
              v183 = 0;
              if (v107)
              {
                if (*(_DWORD *)v107 == 2)
                  WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v107 -= 2;
              }
              v108 = v181;
              v181 = 0;
              if (v108)
              {
                if (*(_DWORD *)v108 == 2)
                  WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v108 -= 2;
              }
              v109 = v179;
              v179 = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                  WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v109 -= 2;
              }
              v110 = v177;
              v177 = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v110 -= 2;
              }
              v111 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v88 += 8;
            }
            while (v88 != v152);
          }
          v112 = __ldxr(v83);
          if (v112 == 1)
          {
            v5 = v149;
            if (!__stlxr(0, v83))
              break;
          }
          else
          {
            __clrex();
            v5 = v149;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v67 = (unsigned __int8 *)v168;
  v168 = 0;
  v62 = v147;
  v57 = v148;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      v67 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v67, (WTF::StringImpl *)v81);
      if (!v64)
        goto LABEL_256;
      goto LABEL_252;
    }
    *(_DWORD *)v67 -= 2;
  }
LABEL_251:
  if (!v64)
    goto LABEL_256;
LABEL_252:
  v113 = v64 + 2;
  do
  {
    v114 = __ldaxr(v113);
    v115 = v114 - 1;
  }
  while (__stlxr(v115, v113));
  if (!v115)
  {
    atomic_store(1u, v64 + 2);
    v67 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
  }
LABEL_256:
  v116 = atomic_load((unsigned __int8 *)(v61 + 265));
  v117 = *(_QWORD *)v57;
  v118 = (unsigned __int8 *)(*(_QWORD *)v57 + 48);
  if (__ldaxr(v118))
  {
    __clrex();
LABEL_259:
    v67 = (unsigned __int8 *)MEMORY[0x19AEA534C](v118);
    goto LABEL_260;
  }
  if (__stxr(1u, v118))
    goto LABEL_259;
LABEL_260:
  v120 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v67);
  if (*v120 && v120[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v120, (WTF::Logger::LogSiteIdentifier *)&v154, " runSynchronouslyOnTarget ", v117);
  atomic_store(v116, (unsigned __int8 *)(v117 + 265));
  v121 = __ldxr(v118);
  if (v121 == 1)
  {
    if (!__stlxr(0, v118))
      goto LABEL_268;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v118);
LABEL_268:
  if (*(_DWORD *)(v61 + 216))
  {
    v122 = *(unsigned int **)v57;
    *(_QWORD *)v57 = 0;
    if (v122)
    {
      v123 = v122 + 2;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 + 1, v123));
      buf = 0uLL;
      v176 = "<chained promise>";
      v177 = 0;
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::Storage>((uint64_t)v122, v61 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
      do
      {
        v125 = __ldaxr(v123);
        v126 = v125 - 1;
      }
      while (__stlxr(v126, v123));
      if (!v126)
      {
        atomic_store(1u, v122 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 16))(v122);
      }
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead((uint64_t)v122);
      do
      {
        v127 = __ldaxr(v123);
        v128 = v127 - 1;
      }
      while (__stlxr(v128, v123));
      if (!v128)
      {
        atomic_store(1u, v122 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 16))(v122);
      }
    }
    else
    {
      buf = 0uLL;
      v176 = "<chained promise>";
      v177 = 0;
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::Storage>(0, v61 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
    }
  }
  else
  {
    v129 = *(unsigned int *)(v61 + 260);
    if ((_DWORD)v129 == *(_DWORD *)(v61 + 256))
    {
      v130 = WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v61 + 248), v129 + 1, v57);
      v131 = *(_QWORD *)(v61 + 248) + 40 * *(unsigned int *)(v61 + 260);
      v132 = *(_QWORD *)v130;
      *(_QWORD *)v130 = 0;
      *(_QWORD *)v131 = v132;
      v133 = *(_OWORD *)(v130 + 24);
      *(_OWORD *)(v131 + 8) = *(_OWORD *)(v130 + 8);
      *(_OWORD *)(v131 + 24) = v133;
    }
    else
    {
      v134 = *(_QWORD *)(v61 + 248) + 40 * v129;
      v135 = *(unsigned int **)v57;
      *(_QWORD *)v57 = 0;
      *(_QWORD *)v134 = v135;
      v136 = *(_OWORD *)(v57 + 8);
      *(_OWORD *)(v134 + 24) = *(_OWORD *)(v57 + 24);
      *(_OWORD *)(v134 + 8) = v136;
    }
    ++*(_DWORD *)(v61 + 260);
  }
  v137 = __ldxr(v62);
  if (v137 == 1)
  {
    if (!__stlxr(0, v62))
      goto LABEL_289;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v62);
LABEL_289:
  v138 = (unsigned int *)v158;
  v158 = 0;
  if (v138)
  {
    v139 = v138 + 2;
    do
    {
      v140 = __ldaxr(v139);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, v139));
    if (!v141)
    {
      atomic_store(1u, v138 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 16))(v138);
    }
  }
  result = *((_QWORD *)v5 + 9);
  *((_QWORD *)v5 + 9) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v57)
  {
    if (*(_QWORD *)v57)
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead(*(_QWORD *)v57);
      v143 = *(unsigned int **)v57;
      *(_QWORD *)v57 = 0;
      if (v143)
      {
        v144 = v143 + 2;
        do
        {
          v145 = __ldaxr(v144);
          v146 = v145 - 1;
        }
        while (__stlxr(v146, v144));
        if (!v146)
        {
          atomic_store(1u, v143 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v143 + 16))(v143);
        }
      }
    }
    else
    {
      *(_QWORD *)v57 = 0;
    }
    return WTF::fastFree((WTF *)v57, v60);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  unsigned int *v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = v3;
        do
        {
          v9 = *(unsigned int **)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)v7 = v9;
          v10 = *(_OWORD *)((char *)v8 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v8 + 24);
          *(_OWORD *)(v7 + 2) = v10;
          result = *(unsigned int **)v8;
          if (*(_QWORD *)v8)
          {
            WTF::NativePromise<WebCore::PhotoCapabilities,WebCore::Exception,0u>::assertIsDead((uint64_t)result);
            result = *(unsigned int **)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              v11 = result + 2;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
          }
          else
          {
            *(_QWORD *)v8 = 0;
          }
          v7 += 10;
          v8 = (WTF *)((char *)v8 + 40);
        }
        while (v8 != (WTF *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZNS3_16MediaStreamTrack16getPhotoSettingsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_NS_3RefINS2_IS4_NS3_9ExceptionELj0EEENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEJSN_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335F598;
  a1[1] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZNS3_16MediaStreamTrack16getPhotoSettingsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_NS_3RefINS2_IS4_NS3_9ExceptionELj0EEENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEJSN_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F598;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZNS3_16MediaStreamTrack16getPhotoSettingsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_NS_3RefINS2_IS4_NS3_9ExceptionELj0EEENS_12RawPtrTraitsISR_EENS_21DefaultRefDerefTraitsISR_EEEEJSN_EE4callESN_@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  __int128 v8;
  _BYTE *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  _BYTE *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  _BYTE *v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  char *v34;
  WTF::Logger::LogSiteIdentifier *v35;
  WTF::StringImpl *v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  char v42;
  char v43;

  v5 = *(_DWORD *)(a2 + 56);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      LOBYTE(v36[0]) = 24;
      v36[1] = v6;
      v38 = 0uLL;
      *(_QWORD *)&v39 = "operator()";
      *((_QWORD *)&v39 + 1) = 0;
      v7 = WTF::fastMalloc((WTF *)0xB0);
      *(_DWORD *)(v7 + 8) = 1;
      *(_QWORD *)v7 = off_1E335F5C0;
      v8 = v39;
      *(_OWORD *)(v7 + 16) = v38;
      *(_OWORD *)(v7 + 32) = v8;
      *(_BYTE *)(v7 + 48) = 0;
      *(_DWORD *)(v7 + 120) = 0;
      *(_QWORD *)(v7 + 128) = v7 + 144;
      *(_QWORD *)(v7 + 136) = 1;
      *(_QWORD *)(v7 + 152) = 0;
      *(_QWORD *)(v7 + 160) = 0;
      *(_WORD *)(v7 + 168) = 0;
      v9 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
      if (*v9 && v9[16] >= 4u)
        WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v9, v7);
      *a3 = v7;
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v7, (char *)v36, (WTF::Logger::LogSiteIdentifier *)&v38);
      result = v36[1];
      v36[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v33 = std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v33, v34, v35);
    }
    return result;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(v12 + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = v14 - 96;
      v16 = *(unsigned __int8 *)(v14 + 178);
      if (*(_BYTE *)(v14 + 178))
      {
        if (v16 == 1 || v16 == 2)
          ++*(_DWORD *)(v14 + 216);
      }
      else
      {
        *(_DWORD *)(v14 - 264) += 2;
      }
      if (*(_BYTE *)(v14 + 180) || *(_BYTE *)(v12 + 1205))
      {
        v17 = 0;
        goto LABEL_17;
      }
      v36[0] = 0;
      v36[1] = 0;
      *(_QWORD *)&v37 = "operator()";
      *((_QWORD *)&v37 + 1) = 0;
      v23 = WTF::fastMalloc((WTF *)0xB0);
      *(_DWORD *)(v23 + 8) = 1;
      *(_QWORD *)v23 = off_1E335F5C0;
      v24 = v37;
      *(_OWORD *)(v23 + 16) = *(_OWORD *)v36;
      *(_OWORD *)(v23 + 32) = v24;
      *(_BYTE *)(v23 + 48) = 0;
      v25 = (unsigned __int8 *)(v23 + 48);
      *(_DWORD *)(v23 + 120) = 0;
      *(_QWORD *)(v23 + 128) = v23 + 144;
      *(_QWORD *)(v23 + 136) = 1;
      *(_QWORD *)(v23 + 152) = 0;
      *(_QWORD *)(v23 + 160) = 0;
      *(_WORD *)(v23 + 168) = 0;
      v26 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v23);
      if (*v26 && v26[16] >= 4u)
        v26 = (unsigned __int8 *)WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v26, v23);
      *a3 = v23;
      v41 = (WTF::StringImpl *)(v23 + 48);
      v42 = 1;
      if (__ldaxr(v25))
      {
        __clrex();
      }
      else if (!__stxr(1u, v25))
      {
LABEL_40:
        v28 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v26);
        if (*v28 && v28[16] >= 4u)
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v28, (WTF::Logger::LogSiteIdentifier *)v36, " resolving ", v23);
        v29 = *(_OWORD *)(a2 + 24);
        v38 = *(_OWORD *)(a2 + 8);
        v39 = v29;
        v40 = *(_OWORD *)(a2 + 40);
        v30 = *(unsigned int *)(v23 + 120);
        if ((_DWORD)v30 != -1)
          ((void (*)(char *, uint64_t))off_1E335F5D8[v30])(&v43, v23 + 56);
        v31 = v39;
        *(_OWORD *)(v23 + 64) = v38;
        *(_OWORD *)(v23 + 80) = v31;
        *(_OWORD *)(v23 + 96) = v40;
        *(_DWORD *)(v23 + 112) = 0;
        *(_DWORD *)(v23 + 120) = 1;
        result = (WTF::StringImpl *)WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::dispatchAll(v23, (unsigned __int8 **)&v41);
        if (!v42)
          goto LABEL_24;
        result = v41;
        v32 = __ldxr((unsigned __int8 *)v41);
        if (v32 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v41))
            goto LABEL_24;
        }
        else
        {
          __clrex();
        }
        result = (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
        goto LABEL_24;
      }
      v26 = (unsigned __int8 *)MEMORY[0x19AEA534C](v25);
      goto LABEL_40;
    }
  }
  v15 = 0;
  v17 = 1;
LABEL_17:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v36[0]) = 30;
  v38 = 0uLL;
  *(_QWORD *)&v39 = "operator()";
  *((_QWORD *)&v39 + 1) = 0;
  v18 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)v18 = off_1E335F5C0;
  v19 = v39;
  *(_OWORD *)(v18 + 16) = v38;
  *(_OWORD *)(v18 + 32) = v19;
  *(_BYTE *)(v18 + 48) = 0;
  *(_DWORD *)(v18 + 120) = 0;
  *(_QWORD *)(v18 + 128) = v18 + 144;
  *(_QWORD *)(v18 + 136) = 1;
  *(_QWORD *)(v18 + 152) = 0;
  *(_QWORD *)(v18 + 160) = 0;
  *(_WORD *)(v18 + 168) = 0;
  v20 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v18);
  if (*v20 && v20[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v20, v18);
  *a3 = v18;
  WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(v18, (char *)v36, (WTF::Logger::LogSiteIdentifier *)&v38);
  result = v36[1];
  v36[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      if ((v17 & 1) != 0)
        return result;
      goto LABEL_24;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v17 & 1) != 0)
    return result;
LABEL_24:
  v22 = *(unsigned __int8 *)(v15 + 274);
  if (*(_BYTE *)(v15 + 274))
  {
    if (v22 == 1)
    {
      if (*(_DWORD *)(v15 + 312) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      else
        --*(_DWORD *)(v15 + 312);
    }
    else if (v22 == 2)
    {
      return (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v15 + 312));
    }
  }
  else if (*(_DWORD *)(v15 - 168) == 2)
  {
    if ((*(_WORD *)(v15 - 162) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v15 - 192), v21);
  }
  else
  {
    *(_DWORD *)(v15 - 168) -= 2;
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::reject<WebCore::Exception,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::StringImpl *v14;
  WTF::Lock *v15;
  char v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v15 = v6;
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " rejecting ", a1);
  v10 = *a2;
  WTF::String::isolatedCopy();
  v11 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E335F5D8[v11])(&v17, a1 + 56);
  *(_BYTE *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v14;
  *(_DWORD *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 120) = 1;
  WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::dispatchAll(a1, (unsigned __int8 **)&v15);
  result = 0;
  if (v16)
  {
    result = v15;
    v13 = __ldxr((unsigned __int8 *)v15);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 164);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 152);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  _BYTE *v4;
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  unsigned int **v47;
  unsigned int **v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint8_t buf[4];
  _BYTE v62[12];
  int v63;
  WTF::StringImpl *v64[3];

  v64[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
  {
    v4 = v2;
    WTF::String::String((WTF::String *)&v59, "destroying ");
    result = WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v58, a1);
    if (v59)
    {
      v6 = *((_DWORD *)v59 + 1);
      if (v58)
      {
LABEL_8:
        v7 = *((_DWORD *)v58 + 1);
LABEL_9:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v60 = 0;
          goto LABEL_108;
        }
        if (v59)
        {
          v8 = *((_DWORD *)v59 + 4);
          v9 = (v8 >> 2) & 1;
          if (v58 && (v8 & 4) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v58)
          {
LABEL_14:
            v9 = (*((unsigned __int8 *)v58 + 16) >> 2) & 1;
            goto LABEL_15;
          }
          v9 = 1;
        }
LABEL_15:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v59, (uint64_t)v58, &v60);
        if (v60)
        {
          v11 = v58;
          v58 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v59;
          v59 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *((_QWORD *)v4 + 4);
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v56 ? (char *)v56 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v62 = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v56;
            v56 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*v4 && v4[16] >= 4u)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers((WTF::Logger *)v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::String::String((WTF::String *)&v62[4], "destroying ");
                      v63 = 0;
                      WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(v64, a1);
                      v56 = 0;
                      v57 = 0;
                      v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v57) = 2;
                      v56 = v25;
                      v26 = HIDWORD(v57);
                      *((_DWORD *)v25 + 4 * HIDWORD(v57)) = *(_DWORD *)buf;
                      v27 = *(_QWORD *)&v62[4];
                      if (*(_QWORD *)&v62[4])
                        **(_DWORD **)&v62[4] += 2;
                      *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                      *((_DWORD *)v25 + 4 * (v26 + 1)) = v63;
                      v28 = v64[0];
                      if (v64[0])
                        *(_DWORD *)v64[0] += 2;
                      *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                      HIDWORD(v57) = v26 + 2;
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, v4, 4, &v56);
                      v29 = v56;
                      if (HIDWORD(v57))
                      {
                        v30 = 16 * HIDWORD(v57);
                        v31 = (WTF::StringImpl **)((char *)v56 + 8);
                        do
                        {
                          v32 = *v31;
                          *v31 = 0;
                          if (v32)
                          {
                            if (*(_DWORD *)v32 == 2)
                              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v32 -= 2;
                          }
                          v31 += 2;
                          v30 -= 16;
                        }
                        while (v30);
                        v29 = v56;
                      }
                      if (v29)
                      {
                        v56 = 0;
                        LODWORD(v57) = 0;
                        WTF::fastFree(v29, v15);
                      }
                      v33 = v64[0];
                      v64[0] = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v34 = *(WTF::StringImpl **)&v62[4];
                      *(_QWORD *)&v62[4] = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v35 = __ldxr(v17);
                  if (v35 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v36 -= 2;
          }
          goto LABEL_71;
        }
LABEL_108:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v58)
        goto LABEL_8;
    }
    v7 = 0;
    goto LABEL_9;
  }
LABEL_71:
  WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(a1);
  v38 = *(_DWORD *)(a1 + 164);
  if (v38)
  {
    v39 = *(uint64_t **)(a1 + 152);
    v40 = &v39[5 * v38];
    do
    {
      if (*v39)
      {
        WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(*v39);
        v41 = (unsigned int *)*v39;
        *v39 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        *v39 = 0;
      }
      v39 += 5;
    }
    while (v39 != v40);
  }
  v45 = *(WTF **)(a1 + 152);
  if (v45)
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    WTF::fastFree(v45, v37);
  }
  v46 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v46)
  {
    v47 = *(unsigned int ***)(a1 + 128);
    v48 = &v47[v46];
    do
    {
      v49 = *v47;
      *v47 = 0;
      if (v49)
      {
        v50 = v49 + 2;
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          atomic_store(1u, v49 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      ++v47;
    }
    while (v47 != v48);
  }
  v53 = *(WTF **)(a1 + 128);
  if ((WTF *)(a1 + 144) != v53 && v53 != 0)
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    WTF::fastFree(v53, v37);
  }
  v55 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint8_t *, uint64_t))off_1E335F5D8[v55])(buf, a1 + 56);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F260[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 56) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::dispatchAll(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3;
  WTF::NativePromiseBase **v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::NativePromiseBase *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;

  v3 = result;
  v32 = &v34;
  v33 = 1;
  v29 = (WTF *)&v31;
  v4 = *(WTF::NativePromiseBase ***)(result + 128);
  if (v4 == (WTF::NativePromiseBase **)(result + 144))
  {
    v5 = *(unsigned int *)(result + 140);
    result = (uint64_t)memcpy(&v31, v4, 8 * v5);
    v4 = (WTF::NativePromiseBase **)&v31;
  }
  else
  {
    *(_QWORD *)(result + 128) = result + 144;
    v29 = (WTF *)v4;
    v5 = *(unsigned int *)(result + 140);
  }
  v30 = v5;
  *(_QWORD *)(v3 + 136) = 1;
  v6 = *(WTF **)(v3 + 152);
  v7 = *(_DWORD *)(v3 + 164);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      result = (uint64_t)WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::dispatch(v9, v3, a2);
      v8 -= 8;
    }
    while (v8);
  }
  if (v7)
  {
    v10 = (unsigned int **)((char *)v6 + 40 * v7);
    v11 = v3 + 56;
    v12 = (unsigned int **)v6;
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::Storage>((uint64_t)v13, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
        do
        {
          v16 = __ldaxr(v14);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v14));
        if (!v17)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
        WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead((uint64_t)v13);
        do
        {
          v18 = __ldaxr(v14);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v14));
        if (!v19)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
        }
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = "<chained promise>";
        v35 = 0;
        WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::Storage>(0, v11, (WTF::Logger::LogSiteIdentifier *)&v32);
      }
      v12 += 5;
    }
    while (v12 != v10);
    v20 = (uint64_t *)v6;
    do
    {
      result = *v20;
      if (*v20)
      {
        WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(result);
        result = *v20;
        *v20 = 0;
        if (result)
        {
          v21 = (unsigned int *)(result + 8);
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      v20 += 5;
    }
    while (v20 != (uint64_t *)v10);
  }
  if (v6)
    result = WTF::fastFree(v6, a2);
  v24 = v29;
  if (v30)
  {
    do
    {
      result = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      if (result)
      {
        v25 = (unsigned int *)(result + 8);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      v24 = (WTF *)((char *)v24 + 8);
    }
    while (v24 != (WTF *)((char *)v29 + 8 * v30));
    v24 = v29;
  }
  if (&v31 != (uint64_t *)v24 && v24 != 0)
    return WTF::fastFree(v24, a2);
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v29;
  char v30;
  unsigned __int8 *v31;
  _BYTE v32[48];
  int v33;
  uint64_t v34;

  v5 = a1;
  v34 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 169));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E335F600;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v31 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v31);
      result = v31;
      v31 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v31 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v31, (WTF::NativePromiseBase *)((char *)v5 + 24));
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 120);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_50;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_50:
    if (*(_DWORD *)(a2 + 120) != 1)
      goto LABEL_65;
    v32[0] = 0;
    v33 = -1;
    v25 = *(unsigned int *)(a2 + 112);
    if ((_DWORD)v25 != -1)
    {
      v26 = *(_DWORD *)(a2 + 112);
      ((void (*)(char *, _BYTE *, uint64_t))off_1E335F270[v25])(&v30, v32, a2 + 64);
      v33 = v26;
    }
    v27 = __ldxr(v17);
    if (v27 == 1)
    {
      if (!__stlxr(0, v17))
      {
LABEL_58:
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v31);
        if (v33 != -1)
          ((void (*)(char *, _BYTE *))off_1E335F260[v33])(&v30, v32);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
    goto LABEL_58;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 120) != 2)
  {
LABEL_65:
    v29 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v29);
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v31, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v31);
  if (v33 != -1)
    ((void (*)(char *, _BYTE *))off_1E335F260[v33])(&v30, v32);
  v33 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_60:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E335F600;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E335F600;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::Logger::LogSiteIdentifier *v21;
  char v22;
  uint64_t v23;
  _BYTE v24[48];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v23 = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v23, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 120);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *((_QWORD *)a1 + 3);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 120) == 2)
    {
      v15 = *(_QWORD *)(v10 + 56);
      *(_QWORD *)(v10 + 56) = 0;
      v16 = __ldxr(v11);
      if (v16 == 1)
      {
        if (!__stlxr(0, v11))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v23, v15);
      (*(void (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v23);
      if (v25 != -1)
        ((void (*)(char *, _BYTE *))off_1E335F260[v25])(&v22, v24);
      v25 = -1;
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
LABEL_46:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::Storage>(v19, v20, v21);
  }
  v13 = (unsigned __int8 *)(v10 + 48);
  if (__ldaxr((unsigned __int8 *)(v10 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v10 + 48);
LABEL_35:
  if (*(_DWORD *)(v10 + 120) != 1)
    goto LABEL_46;
  v24[0] = 0;
  v25 = -1;
  v17 = *(unsigned int *)(v10 + 112);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E335F270[v17])(&v22, v24, v10 + 64);
    v25 = v17;
  }
  v18 = __ldxr(v13);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, v13))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
  result = (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v23);
  if (v25 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E335F260[v25])(&v22, v24);
  return result;
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  uint64_t v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  v10 = *(unsigned int *)(a1 + 120);
  v11 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1E335F5D8[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 120) = -1;
    goto LABEL_16;
  }
  v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1E335F618[v11])(&v16);
LABEL_16:
  result = (WTF::Lock *)WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::dispatchAll(a1, &v14);
  if (!v15)
    return result;
  result = v14;
  v13 = __ldxr((unsigned __int8 *)v14);
  if (v13 != 1)
  {
    __clrex();
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F5D8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int *v9;
  _BOOL4 v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BOOL4 v14;
  unsigned int v15;
  _BOOL4 v17;
  _BYTE *v18;
  _BYTE *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  _BYTE v27[8];
  _BYTE v28[48];
  int v29;
  _BYTE v30[48];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v28[0] = 0;
      v29 = -1;
      v7 = *(unsigned int *)(a3 + 56);
      if ((_DWORD)v7 == -1)
      {
        v9 = (int *)(a2 + 56);
        v8 = *(_DWORD *)(a2 + 56);
        v10 = v8 == -1;
        if (v8 == -1)
        {
LABEL_44:
          if (v29 != -1)
            return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E335F260[v29])(v30, v28);
          return result;
        }
      }
      else
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E335F270[v7])(v30, v28, a3 + 8);
        v29 = v7;
        v9 = (int *)(a2 + 56);
        v8 = *(_DWORD *)(a2 + 56);
        v10 = v8 == -1;
      }
      v12 = (_BYTE *)(a2 + 8);
      if ((_DWORD)v7 == -1)
        v13 = -1;
      else
        v13 = v7;
      if (v10)
        v14 = v7 == -1;
      else
        v14 = v13 == v8;
      if (v14)
      {
        result = ((uint64_t (*)(_BYTE *, _BYTE *, _BYTE *))off_1E335F630[v13])(v30, v28, v12);
      }
      else
      {
        v15 = v8 + 1;
        v17 = (v7 - 1) < 0xFFFFFFFE || v15 < 2;
        if (v17)
          v18 = v28;
        else
          v18 = (_BYTE *)(a2 + 8);
        if (v17)
          v19 = v12;
        else
          v19 = v28;
        v30[0] = 0;
        v31 = -1;
        if (v17)
          v20 = v9;
        else
          v20 = &v29;
        v21 = *v20;
        if ((_DWORD)v21 != -1)
        {
          result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335F270[v21])(&v26, v30, v19);
          v31 = v21;
          v22 = *v20;
          if ((_DWORD)v22 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))off_1E335F260[v22])(&v26, v19);
        }
        *v20 = -1;
        if (v17)
          v9 = &v29;
        v23 = *v9;
        if ((_DWORD)v23 != -1)
        {
          result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335F640[v23])(&v26, v19, v18);
          *v20 = v23;
          v24 = *v9;
          if ((_DWORD)v24 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))off_1E335F260[v24])(&v26, v18);
        }
        *v9 = -1;
        v25 = v31;
        if (v31 != -1)
        {
          result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))off_1E335F640[v31])(&v26, v18, v30);
          *v9 = v25;
          if (v31 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))off_1E335F260[v31])(&v26, v30);
        }
      }
      goto LABEL_44;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E335F5D8[v5])(v27, v4);
  }
  *(_BYTE *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 64) = -1;
  *(_DWORD *)(v4 + 56) = -1;
  v11 = *(unsigned int *)(a3 + 56);
  if ((_DWORD)v11 != -1)
  {
    result = ((uint64_t (*)(_BYTE *))off_1E335F270[v11])(v27);
    *(_DWORD *)(v4 + 56) = v11;
  }
  *(_DWORD *)(v4 + 64) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENSA_9ExceptionELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E335F5D8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsENS7_9ExceptionEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _BYTE v7[32];

  v3 = *a2;
  *(_OWORD *)v7 = a2[1];
  *(_OWORD *)&v7[16] = a2[2];
  v4 = *(__int128 *)((char *)a3 + 26);
  v5 = a3[1];
  *a2 = *a3;
  a2[1] = v5;
  *(__int128 *)((char *)a2 + 26) = v4;
  *a3 = v3;
  a3[1] = *(_OWORD *)v7;
  result = *(__n128 *)&v7[10];
  *(__int128 *)((char *)a3 + 26) = *(_OWORD *)&v7[10];
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsENS7_9ExceptionEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v4 = *(_BYTE *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)a3 = v4;
  result = *(WTF::StringImpl **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsENS8_9ExceptionEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_QWORD *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E335F660;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E335F690;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E335F660;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E335F690;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>>::processResult(WTF::NativePromiseBase *a1, uint64_t a2, uint64_t a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::String *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  unsigned __int8 *v55;
  unint64_t v57;
  int v58;
  WTF::NativePromiseBase *v59;
  void *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  BOOL v68;
  unsigned __int8 *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  NSObject *v79;
  uint64_t v80;
  void *v81;
  char *v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  WTF::Logger *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::Logger *v98;
  uint64_t v99;
  WTF::Logger *v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned __int8 v116;
  uint64_t v117;
  unsigned __int8 *v118;
  _BYTE *v120;
  int v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  unsigned int *v135;
  __int128 v136;
  int v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t result;
  unsigned int *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned __int8 *v147;
  unint64_t v148;
  WTF::NativePromiseBase *v149;
  WTF::String *v150;
  char *v151;
  char *v152;
  WTF::Logger::LogSiteIdentifier *v153;
  WTF::Logger *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  WTF::Logger *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  __int128 buf;
  const char *v176;
  WTF::StringImpl *v177;
  int v178;
  WTF::StringImpl *v179;
  int v180;
  WTF::StringImpl *v181;
  int v182;
  WTF::StringImpl *v183;
  int v184;
  WTF::StringImpl *v185;
  int v186;
  WTF::Logger *v187;
  int v188;
  _QWORD v189[5];

  v5 = a1;
  v189[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 56);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel(a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  v149 = v5;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v151 = (char *)v10;
    WTF::String::String((WTF::String *)&v168, v10);
    WTF::String::String((WTF::String *)&v167, " then() call made from ");
    v153 = (WTF::NativePromiseBase *)((char *)v5 + 24);
    WTF::Logger::LogSiteIdentifier::toString((WTF::NativePromiseBase *)((char *)v5 + 24));
    WTF::String::String((WTF::String *)&v165, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a2, &v164);
    WTF::String::String((WTF::String *)&v163, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v161, "]");
    *(_QWORD *)&buf = v168;
    v154 = v167;
    v159 = v166;
    v173 = v164;
    v174 = v165;
    v171 = v162;
    v172 = v163;
    v170 = v161;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v154, (uint64_t *)&v159, (uint64_t *)&v174, (uint64_t *)&v173, (uint64_t *)&v172, (uint64_t *)&v171, (uint64_t *)&v170, &v169);
    if (!v169)
      goto LABEL_329;
    v12 = v161;
    v161 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v162;
    v162 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v163;
    v163 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v164;
    v164 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v165;
    v165 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v166;
    v166 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v167;
    v167 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v168;
    v168 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v11);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *((_QWORD *)v9 + 4);
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v23 = v154 ? (char *)v154 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v21 = (uint64_t)v154;
      v154 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = WTF::fastFree((WTF *)v21, v22);
        else
          --*(_DWORD *)v21;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v25 = *v24;
        if ((v25 & 1) != 0)
          break;
        v26 = __ldaxr(v24);
        if (v26 == v25)
        {
          if (!__stxr(v25 | 1, v24))
          {
            v27 = WTF::Logger::observers((WTF::Logger *)v21);
            v28 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v28)
            {
              v29 = *(WTF::String **)v27;
              v150 = (WTF::String *)(*(_QWORD *)v27 + 8 * v28);
              do
              {
                v30 = *(_QWORD *)v29;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), v151);
                LODWORD(v176) = 0;
                WTF::String::String((WTF::String *)&v177, " then() call made from ");
                v178 = 0;
                WTF::Logger::LogSiteIdentifier::toString(v153);
                v180 = 0;
                WTF::String::String((WTF::String *)&v181, "[");
                v182 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a2, &v183);
                v184 = 0;
                WTF::String::String((WTF::String *)&v185, " callback:");
                v186 = 0;
                WTF::LogArgument<void const*>::toString();
                v188 = 0;
                WTF::String::String((WTF::String *)v189, "]");
                v154 = 0;
                v155 = 0;
                v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v155) = 8;
                v154 = v31;
                v32 = HIDWORD(v155);
                *((_DWORD *)v31 + 4 * HIDWORD(v155)) = buf;
                v33 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                *((_DWORD *)v31 + 4 * (v32 + 1)) = (_DWORD)v176;
                v34 = v177;
                if (v177)
                  *(_DWORD *)v177 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                *((_DWORD *)v31 + 4 * (v32 + 2)) = v178;
                v35 = v179;
                if (v179)
                  *(_DWORD *)v179 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                *((_DWORD *)v31 + 4 * (v32 + 3)) = v180;
                v36 = v181;
                if (v181)
                  *(_DWORD *)v181 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                *((_DWORD *)v31 + 4 * (v32 + 4)) = v182;
                v37 = v183;
                if (v183)
                  *(_DWORD *)v183 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                *((_DWORD *)v31 + 4 * (v32 + 5)) = v184;
                v38 = v185;
                if (v185)
                  *(_DWORD *)v185 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
                *((_DWORD *)v31 + 4 * (v32 + 6)) = v186;
                v39 = v187;
                if (v187)
                  *(_DWORD *)v187 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
                *((_DWORD *)v31 + 4 * (v32 + 7)) = v188;
                v40 = v189[0];
                if (v189[0])
                  *(_DWORD *)v189[0] += 2;
                *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
                HIDWORD(v155) = v32 + 8;
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v9, 4, &v154);
                v41 = v154;
                if (HIDWORD(v155))
                {
                  v42 = 16 * HIDWORD(v155);
                  v43 = (WTF::StringImpl **)((char *)v154 + 8);
                  do
                  {
                    v44 = *v43;
                    *v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v43 += 2;
                    v42 -= 16;
                  }
                  while (v42);
                  v41 = v154;
                  v5 = v149;
                }
                if (v41)
                {
                  v154 = 0;
                  LODWORD(v155) = 0;
                  WTF::fastFree(v41, v22);
                }
                v45 = (WTF::StringImpl *)v189[0];
                v189[0] = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v187;
                v187 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v185;
                v185 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v183;
                v183 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v181;
                v181 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v179;
                v179 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v177;
                v177 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v29 = (WTF::String *)((char *)v29 + 8);
              }
              while (v29 != v150);
            }
            v53 = __ldxr(v24);
            if (v53 == 1)
            {
              if (!__stlxr(0, v24))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v54 = v169;
    v169 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v55 = (unsigned __int8 *)v5 + 57;
  if (__ldaxr((unsigned __int8 *)v5 + 57))
  {
    __clrex();
  }
  else if (!__stxr(1u, v55))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C]((char *)v5 + 57);
LABEL_123:
  v57 = *((_QWORD *)v5 + 8);
  *((_QWORD *)v5 + 8) = 0;
  v58 = __ldxr(v55);
  if (v58 != 1)
  {
    __clrex();
    goto LABEL_127;
  }
  if (__stlxr(0, v55))
LABEL_127:
    WTF::Lock::unlockSlow((WTF::NativePromiseBase *)((char *)v5 + 57));
  v59 = (WTF::NativePromiseBase *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)v5 + 9) + 16))(&v158, *((_QWORD *)v5 + 9), a3);
  if (!v57)
    goto LABEL_289;
  v61 = v158;
  v154 = 0;
  v155 = 0;
  v156 = "<chained completion promise>";
  v157 = 0;
  v62 = (unsigned __int8 *)(v158 + 48);
  if (__ldaxr((unsigned __int8 *)(v158 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v62))
  {
    goto LABEL_133;
  }
  v59 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v62);
LABEL_133:
  *(_BYTE *)(v61 + 168) = 1;
  v64 = *(unsigned int **)v57;
  if (*(_QWORD *)v57)
  {
    v65 = v64 + 2;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 + 1, v65));
  }
  v67 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v59);
  if (*v67)
    v68 = v67[16] >= 4u;
  else
    v68 = 0;
  if (!v68)
    goto LABEL_251;
  v69 = v67;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v154);
  WTF::String::String((WTF::String *)&v166, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v165, v61);
  WTF::String::String((WTF::String *)&v164, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v163, (uint64_t)v64);
  WTF::String::String((WTF::String *)&v162, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v70 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v161, "]");
  *(_QWORD *)&buf = v167;
  v159 = v166;
  v173 = v164;
  v174 = v165;
  v171 = v162;
  v172 = v163;
  v169 = v161;
  v170 = v70;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v159, (uint64_t *)&v174, (uint64_t *)&v173, (uint64_t *)&v172, (uint64_t *)&v171, (uint64_t *)&v170, (uint64_t *)&v169, &v168);
  if (!v168)
  {
LABEL_329:
    __break(0xC471u);
    JUMPOUT(0x19547C63CLL);
  }
  v72 = v161;
  v161 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::destroy(v72, v71);
      if (!v70)
        goto LABEL_148;
      goto LABEL_146;
    }
    *(_DWORD *)v72 -= 2;
  }
  if (!v70)
    goto LABEL_148;
LABEL_146:
  if (*(_DWORD *)v70 == 2)
    WTF::StringImpl::destroy(v70, v71);
  else
    *(_DWORD *)v70 -= 2;
LABEL_148:
  v73 = v162;
  v162 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v71);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = v163;
  v163 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v71);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = v164;
  v164 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v71);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = v165;
  v165 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v71);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = v166;
  v166 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v71);
    else
      *(_DWORD *)v77 -= 2;
  }
  v148 = v57;
  v78 = v167;
  v167 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v71);
    else
      *(_DWORD *)v78 -= 2;
  }
  v147 = v62;
  v79 = *((_QWORD *)v69 + 4);
  v80 = os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v80)
  {
    WTF::String::utf8();
    v82 = v159 ? (char *)v159 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v82;
    _os_log_impl(&dword_1940B8000, v79, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v80 = (uint64_t)v159;
    v159 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 1)
        v80 = WTF::fastFree((WTF *)v80, v81);
      else
        --*(_DWORD *)v80;
    }
  }
  if (*v69 && v69[16] >= 4u)
  {
    v83 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v84 = *v83;
      if ((v84 & 1) != 0)
        break;
      v85 = __ldaxr(v83);
      if (v85 == v84)
      {
        if (!__stxr(v84 | 1, v83))
        {
          v86 = WTF::Logger::observers((WTF::Logger *)v80);
          v87 = *(unsigned int *)(v86 + 12);
          if ((_DWORD)v87)
          {
            v88 = *(char **)v86;
            v152 = (char *)(*(_QWORD *)v86 + 8 * v87);
            do
            {
              v89 = *(_QWORD *)v88;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v154);
              LODWORD(v176) = 0;
              WTF::String::String((WTF::String *)&v177, " invoking chainTo() [");
              v178 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v179, v61);
              v180 = 0;
              WTF::String::String((WTF::String *)&v181, " chainedPromise:");
              v182 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>::toString(&v183, (uint64_t)v64);
              v184 = 0;
              WTF::String::String((WTF::String *)&v185, " isNothing:");
              v186 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v187 = v159;
              v188 = 0;
              WTF::String::String((WTF::String *)v189, "]");
              v159 = 0;
              v160 = 0;
              v90 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v160) = 8;
              v159 = v90;
              v91 = HIDWORD(v160);
              *((_DWORD *)v90 + 4 * HIDWORD(v160)) = buf;
              v92 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v90 + 2 * v91 + 1) = v92;
              *((_DWORD *)v90 + 4 * (v91 + 1)) = (_DWORD)v176;
              v93 = v177;
              if (v177)
                *(_DWORD *)v177 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 1) + 1) = v93;
              *((_DWORD *)v90 + 4 * (v91 + 2)) = v178;
              v94 = v179;
              if (v179)
                *(_DWORD *)v179 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 2) + 1) = v94;
              *((_DWORD *)v90 + 4 * (v91 + 3)) = v180;
              v95 = v181;
              if (v181)
                *(_DWORD *)v181 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 3) + 1) = v95;
              *((_DWORD *)v90 + 4 * (v91 + 4)) = v182;
              v96 = v183;
              if (v183)
                *(_DWORD *)v183 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 4) + 1) = v96;
              *((_DWORD *)v90 + 4 * (v91 + 5)) = v184;
              v97 = v185;
              if (v185)
                *(_DWORD *)v185 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 5) + 1) = v97;
              *((_DWORD *)v90 + 4 * (v91 + 6)) = v186;
              v98 = v187;
              if (v187)
                *(_DWORD *)v187 += 2;
              *((_QWORD *)v90 + 2 * (v91 + 6) + 1) = v98;
              *((_DWORD *)v90 + 4 * (v91 + 7)) = v188;
              v99 = v189[0];
              if (v189[0])
                *(_DWORD *)v189[0] += 2;
              *((_QWORD *)v90 + 2 * (v91 + 7) + 1) = v99;
              HIDWORD(v160) = v91 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v89 + 16))(v89, v69, 4, &v159);
              v100 = v159;
              if (HIDWORD(v160))
              {
                v101 = 16 * HIDWORD(v160);
                v102 = (WTF::StringImpl **)((char *)v159 + 8);
                do
                {
                  v103 = *v102;
                  *v102 = 0;
                  if (v103)
                  {
                    if (*(_DWORD *)v103 == 2)
                      WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v81);
                    else
                      *(_DWORD *)v103 -= 2;
                  }
                  v102 += 2;
                  v101 -= 16;
                }
                while (v101);
                v100 = v159;
              }
              if (v100)
              {
                v159 = 0;
                LODWORD(v160) = 0;
                WTF::fastFree(v100, v81);
              }
              v104 = (WTF::StringImpl *)v189[0];
              v189[0] = 0;
              if (v104)
              {
                if (*(_DWORD *)v104 == 2)
                  WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v104 -= 2;
              }
              v105 = v187;
              v187 = 0;
              if (v105)
              {
                if (*(_DWORD *)v105 == 2)
                  WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v105 -= 2;
              }
              v106 = v185;
              v185 = 0;
              if (v106)
              {
                if (*(_DWORD *)v106 == 2)
                  WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v106 -= 2;
              }
              v107 = v183;
              v183 = 0;
              if (v107)
              {
                if (*(_DWORD *)v107 == 2)
                  WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v107 -= 2;
              }
              v108 = v181;
              v181 = 0;
              if (v108)
              {
                if (*(_DWORD *)v108 == 2)
                  WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v108 -= 2;
              }
              v109 = v179;
              v179 = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                  WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v109 -= 2;
              }
              v110 = v177;
              v177 = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v110 -= 2;
              }
              v111 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v81);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v88 += 8;
            }
            while (v88 != v152);
          }
          v112 = __ldxr(v83);
          if (v112 == 1)
          {
            v5 = v149;
            if (!__stlxr(0, v83))
              break;
          }
          else
          {
            __clrex();
            v5 = v149;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v67 = (unsigned __int8 *)v168;
  v168 = 0;
  v62 = v147;
  v57 = v148;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      v67 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v67, (WTF::StringImpl *)v81);
      if (!v64)
        goto LABEL_256;
      goto LABEL_252;
    }
    *(_DWORD *)v67 -= 2;
  }
LABEL_251:
  if (!v64)
    goto LABEL_256;
LABEL_252:
  v113 = v64 + 2;
  do
  {
    v114 = __ldaxr(v113);
    v115 = v114 - 1;
  }
  while (__stlxr(v115, v113));
  if (!v115)
  {
    atomic_store(1u, v64 + 2);
    v67 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
  }
LABEL_256:
  v116 = atomic_load((unsigned __int8 *)(v61 + 169));
  v117 = *(_QWORD *)v57;
  v118 = (unsigned __int8 *)(*(_QWORD *)v57 + 48);
  if (__ldaxr(v118))
  {
    __clrex();
LABEL_259:
    v67 = (unsigned __int8 *)MEMORY[0x19AEA534C](v118);
    goto LABEL_260;
  }
  if (__stxr(1u, v118))
    goto LABEL_259;
LABEL_260:
  v120 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v67);
  if (*v120 && v120[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WTF::Vector<WTF::MediaTime,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v120, (WTF::Logger::LogSiteIdentifier *)&v154, " runSynchronouslyOnTarget ", v117);
  atomic_store(v116, (unsigned __int8 *)(v117 + 169));
  v121 = __ldxr(v118);
  if (v121 == 1)
  {
    if (!__stlxr(0, v118))
      goto LABEL_268;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v118);
LABEL_268:
  if (*(_DWORD *)(v61 + 120))
  {
    v122 = *(unsigned int **)v57;
    *(_QWORD *)v57 = 0;
    if (v122)
    {
      v123 = v122 + 2;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 + 1, v123));
      buf = 0uLL;
      v176 = "<chained promise>";
      v177 = 0;
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::Storage>((uint64_t)v122, v61 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
      do
      {
        v125 = __ldaxr(v123);
        v126 = v125 - 1;
      }
      while (__stlxr(v126, v123));
      if (!v126)
      {
        atomic_store(1u, v122 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 16))(v122);
      }
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead((uint64_t)v122);
      do
      {
        v127 = __ldaxr(v123);
        v128 = v127 - 1;
      }
      while (__stlxr(v128, v123));
      if (!v128)
      {
        atomic_store(1u, v122 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 16))(v122);
      }
    }
    else
    {
      buf = 0uLL;
      v176 = "<chained promise>";
      v177 = 0;
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::settleAsChainedPromise<WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::Storage>(0, v61 + 56, (WTF::Logger::LogSiteIdentifier *)&buf);
    }
  }
  else
  {
    v129 = *(unsigned int *)(v61 + 164);
    if ((_DWORD)v129 == *(_DWORD *)(v61 + 160))
    {
      v130 = WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v61 + 152), v129 + 1, v57);
      v131 = *(_QWORD *)(v61 + 152) + 40 * *(unsigned int *)(v61 + 164);
      v132 = *(_QWORD *)v130;
      *(_QWORD *)v130 = 0;
      *(_QWORD *)v131 = v132;
      v133 = *(_OWORD *)(v130 + 24);
      *(_OWORD *)(v131 + 8) = *(_OWORD *)(v130 + 8);
      *(_OWORD *)(v131 + 24) = v133;
    }
    else
    {
      v134 = *(_QWORD *)(v61 + 152) + 40 * v129;
      v135 = *(unsigned int **)v57;
      *(_QWORD *)v57 = 0;
      *(_QWORD *)v134 = v135;
      v136 = *(_OWORD *)(v57 + 8);
      *(_OWORD *)(v134 + 24) = *(_OWORD *)(v57 + 24);
      *(_OWORD *)(v134 + 8) = v136;
    }
    ++*(_DWORD *)(v61 + 164);
  }
  v137 = __ldxr(v62);
  if (v137 == 1)
  {
    if (!__stlxr(0, v62))
      goto LABEL_289;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v62);
LABEL_289:
  v138 = (unsigned int *)v158;
  v158 = 0;
  if (v138)
  {
    v139 = v138 + 2;
    do
    {
      v140 = __ldaxr(v139);
      v141 = v140 - 1;
    }
    while (__stlxr(v141, v139));
    if (!v141)
    {
      atomic_store(1u, v138 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 16))(v138);
    }
  }
  result = *((_QWORD *)v5 + 9);
  *((_QWORD *)v5 + 9) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v57)
  {
    if (*(_QWORD *)v57)
    {
      WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead(*(_QWORD *)v57);
      v143 = *(unsigned int **)v57;
      *(_QWORD *)v57 = 0;
      if (v143)
      {
        v144 = v143 + 2;
        do
        {
          v145 = __ldaxr(v144);
          v146 = v145 - 1;
        }
        while (__stlxr(v146, v144));
        if (!v146)
        {
          atomic_store(1u, v143 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v143 + 16))(v143);
        }
      }
    }
    else
    {
      *(_QWORD *)v57 = 0;
    }
    return WTF::fastFree((WTF *)v57, v60);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WebCore::Exception,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  unsigned int *v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = v3;
        do
        {
          v9 = *(unsigned int **)v8;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)v7 = v9;
          v10 = *(_OWORD *)((char *)v8 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v8 + 24);
          *(_OWORD *)(v7 + 2) = v10;
          result = *(unsigned int **)v8;
          if (*(_QWORD *)v8)
          {
            WTF::NativePromise<WebCore::PhotoSettings,WebCore::Exception,0u>::assertIsDead((uint64_t)result);
            result = *(unsigned int **)v8;
            *(_QWORD *)v8 = 0;
            if (result)
            {
              v11 = result + 2;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
          }
          else
          {
            *(_QWORD *)v8 = 0;
          }
          v7 += 10;
          v8 = (WTF *)((char *)v8 + 40);
        }
        while (v8 != (WTF *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335F710;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F710;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  unsigned __int8 v7[8];
  WTF::StringImpl *v8;
  objc_class *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 8);
  v9 = 0;
  v7[0] = 33;
  if (v6)
    *(_DWORD *)v6 += 2;
  v8 = v6;
  WebCore::DeferredPromise::reject(v2, v7, 0, &v9);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (uint64_t)v6;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335F738;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F738;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  unsigned __int8 v7[8];
  WTF::StringImpl *v8;
  objc_class *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = *(_QWORD *)(a1 + 8);
  v9 = 0;
  v7[0] = 33;
  if (v6)
    *(_DWORD *)v6 += 2;
  v8 = v6;
  WebCore::DeferredPromise::reject(v2, v7, 0, &v9);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (uint64_t)v6;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E335F760;
  a1[1] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F760;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaDevices::getUserMedia(WebCore::MediaDevices::StreamConstraints &&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::MediaStream>> &&)::$_2,void>::call(uint64_t a1)
{
  WTF::StringImpl *result;
  uint64_t v2;
  uint64_t v3;

  result = *(WTF::StringImpl **)(a1 + 8);
  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
        return WebCore::UserMediaRequest::start(result);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15MediaDeviceInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15InputDeviceInfoENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15MediaDeviceInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15InputDeviceInfoENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v9 = (WTF::StringImpl **)v5;
    do
    {
      if (*v9)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, v9);
      WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v9, v8);
      v9 += 2;
      --v4;
    }
    while (v4);
    return WTF::fastFree(v5, v8);
  }
  if (v5)
    return WTF::fastFree(v5, v8);
  return result;
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  int v32;

  v4 = *((_DWORD *)a1 + 2);
  v5 = v4 - 1;
  v6 = *((_DWORD *)a1 + 4);
  v7 = *((_DWORD *)*a2 + 4);
  v32 = v4;
  if (v7 < 0x100)
  {
    v8 = WTF::StringImpl::hashSlowCase(*a2);
    v4 = v32;
  }
  else
  {
    v8 = v7 >> 8;
  }
  v9 = (v8 ^ v6) & v5;
  v10 = *a1;
  v11 = (WTF::StringImpl **)(*a1 + 16 * v9);
  v12 = *v11;
  if (*v11)
  {
    v13 = 0;
    do
    {
      v14 = *((_DWORD *)v12 + 4);
      if (v14 < 0x100)
      {
        v15 = WTF::StringImpl::hashSlowCase(v12);
        v4 = v32;
      }
      else
      {
        v15 = v14 >> 8;
      }
      v16 = (v9 + v4 - ((v15 ^ v6) & v5)) & v5;
      if (v13 > v16)
      {
        v17 = *a2;
        v18 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v19 = *v11;
        *v11 = 0;
        v20 = *a2;
        *a2 = v19;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
          {
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
            v4 = v32;
          }
          else
          {
            *(_DWORD *)v20 -= 2;
          }
        }
        v21 = v10 + 16 * v9;
        v23 = *(WTF::StringImpl **)(v21 + 8);
        v22 = (WTF::StringImpl **)(v21 + 8);
        *v22 = 0;
        v24 = a2[1];
        a2[1] = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
          {
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
            v4 = v32;
          }
          else
          {
            *(_DWORD *)v24 -= 2;
          }
        }
        v25 = *v11;
        *v11 = v17;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
            v4 = v32;
          }
          else
          {
            *(_DWORD *)v25 -= 2;
          }
        }
        v26 = *v22;
        *v22 = v18;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
            v4 = v32;
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        v13 = v16;
      }
      v9 = ((_DWORD)v9 + 1) & v5;
      ++v13;
      v10 = *a1;
      v11 = (WTF::StringImpl **)(*a1 + 16 * v9);
      v12 = *v11;
    }
    while (*v11);
  }
  v27 = *a2;
  *a2 = 0;
  v28 = *v11;
  *v11 = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v10 + 16 * v9;
  v30 = a2[1];
  a2[1] = 0;
  result = *(WTF::StringImpl **)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15MediaDeviceInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15InputDeviceInfoENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15MediaDeviceInfoENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15InputDeviceInfoENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::MediaDeviceInfo>,WebCore::IDLInterface<WebCore::InputDeviceInfo>>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  JSC::VM *v8;
  JSC::VM *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  JSValue v19;
  void *v20;
  JSC::VM *v21;
  objc_class *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v28;
  int v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  WTF *v35;
  _OWORD v36[4];
  uint64_t v37;
  JSC::VM *v38;

  v2 = *(_QWORD *)(result + 24);
  if (!v2 || !*(_QWORD *)v2 || (*(_BYTE *)(v2 + 8) & 3) != 0)
    return result;
  v4 = result;
  v5 = *(_QWORD *)(result + 32);
  if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
    v6 = 0;
  else
    v6 = *(JSC::JSGlobalObject **)v5;
  v7 = *((_QWORD *)v6 + 7);
  MEMORY[0x19AEA3294](&v30, v7);
  v8 = **(JSC::VM ***)(v4 + 32);
  v9 = (JSC::VM *)*((_QWORD *)v6 + 7);
  v38 = v9;
  v33 = 0;
  v10 = &v34;
  v34 = 0x800000000;
  v35 = (WTF *)((char *)v36 + 8);
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v11 = *((_DWORD *)a2 + 3);
  if (v11 >= 9)
  {
    v33 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v34) == 1;
    v11 = *((_DWORD *)a2 + 3);
    if (v11)
      goto LABEL_9;
  }
  else if (v11)
  {
LABEL_9:
    v12 = *a2;
    for (i = 16 * v11; i; i -= 16)
    {
      v14 = *(_DWORD *)(v12 + 8);
      if (v14 == -1)
        v15 = -1;
      else
        v15 = *(unsigned int *)(v12 + 8);
      if (v15 == 1)
      {
        if (v14 != 1)
          goto LABEL_53;
        if (*(_QWORD *)v12)
        {
          v16 = WebCore::wrap<WebCore::InputDeviceInfo>((int)v6, v8, *(_QWORD *)v12);
          goto LABEL_21;
        }
      }
      else
      {
        if (v15)
          goto LABEL_54;
        if (v14)
        {
LABEL_53:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_54:
          std::__throw_bad_optional_access[abi:sn180100]();
LABEL_55:
          v25 = *((_QWORD *)v8 + 43);
          if (*(uint64_t **)(v7 + 24) == v10)
          {
LABEL_67:
            *(_BYTE *)(*(_QWORD *)(v25 + 8) + 93442) = 1;
            *(_BYTE *)(v4 + 44) = 1;
            goto LABEL_48;
          }
          if (!v25)
            goto LABEL_48;
          v26 = (unsigned __int8 *)(v25 + 40);
          if (__ldaxr((unsigned __int8 *)(v25 + 40)))
          {
            __clrex();
            goto LABEL_60;
          }
          if (__stxr(1u, v26))
LABEL_60:
            MEMORY[0x19AEA534C](v25 + 40);
          v28 = *(unsigned __int8 *)(v25 + 41);
          v29 = __ldxr(v26);
          if (v29 == 1)
          {
            if (!__stlxr(0, v26))
            {
LABEL_66:
              if (v28)
                goto LABEL_67;
LABEL_48:
              WebCore::reportException(v6, (uint64_t)v10, 0, 0, 0);
              return MEMORY[0x19AEA32A0](&v30);
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)(v25 + 40));
          goto LABEL_66;
        }
        if (*(_QWORD *)v12)
        {
          v16 = WebCore::wrap<WebCore::MediaDeviceInfo>((uint64_t)v6, (uint64_t)v8, *(_QWORD *)v12);
LABEL_21:
          v17 = v16;
          goto LABEL_23;
        }
      }
      v17 = 2;
LABEL_23:
      if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        goto LABEL_51;
      v18 = v34;
      if ((_DWORD)v34 == HIDWORD(v34) || v35 != (WTF *)((char *)v36 + 8) && v35)
      {
        v19.super.isa = (Class)v17;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v34, v19) == 1)
          v33 = 1;
      }
      else
      {
        *((_QWORD *)v35 + v34) = v17;
        LODWORD(v34) = v18 + 1;
      }
      v12 += 16;
    }
  }
  if (v33)
  {
    JSC::throwOutOfMemoryError();
LABEL_51:
    v22 = 0;
    goto LABEL_38;
  }
  v31 = v35;
  v32 = v34;
  v21 = (JSC::VM *)*((_QWORD *)v8 + 7);
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    goto LABEL_51;
  v22 = (objc_class *)JSC::constructArray();
LABEL_38:
  v23 = *(uint64_t **)&v36[0];
  if (*(_QWORD *)&v36[0])
  {
    v31 = (WTF *)&v34;
    v24 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v36[0], (uint64_t *)&v31);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v23, v24);
  }
  if (v35 != (WTF *)((char *)v36 + 8) && v35)
    WTF::fastFree(v35, v20);
  v10 = *(uint64_t **)(v7 + 16);
  if (v10 || (WebCore::DeferredPromise::callFunction(v4, (uint64_t *)v6, 0, v22), (v10 = *(uint64_t **)(v7 + 16)) != 0))
  {
    v8 = (JSC::VM *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v6);
    if ((*(unsigned int (**)(JSC::VM *))(*(_QWORD *)v8 + 64))(v8))
      goto LABEL_55;
    goto LABEL_48;
  }
  return MEMORY[0x19AEA32A0](&v30);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaDevices::enumerateDevices(WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::MediaDeviceInfo>,WebCore::IDLInterface<WebCore::InputDeviceInfo>>>> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = &off_1E335F7A8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v8)
      {
        v11 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
        v4 = v11;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v10 = v4;
        WTF::fastFree(v9, a2);
        v4 = v10;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::enumerateDevices(WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::MediaDeviceInfo>,WebCore::IDLInterface<WebCore::InputDeviceInfo>>>> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E335F7A8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v8)
      {
        v11 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v8));
        v4 = v11;
      }
      v9 = *(WTF **)(v4 + 16);
      if (v9)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v10 = v4;
        WTF::fastFree(v9, a2);
        v4 = v10;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::enumerateDevices(WebCore::DOMPromiseDeferred<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::MediaDeviceInfo>,WebCore::IDLInterface<WebCore::InputDeviceInfo>>>> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&>::call(uint64_t result, uint64_t *a2, WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isFeatureEnabled;
  WTF::StringImpl *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  WTF *v28;
  _DWORD **v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  WTF *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  _DWORD *v60;
  _DWORD *v61;
  WTF *v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF *v82;
  void *v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::String *v91;
  char v92;
  _QWORD *v93;
  char v94;
  const WTF::String *v95;
  WTF::String *v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  WTF *v100;
  WTF::StringImpl *v101[3];
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF *v104;
  uint64_t v105;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return result;
  if (!*(_QWORD *)(v3 + 8))
    return result;
  v4 = result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return result;
  if (*(_BYTE *)(v7 + 178))
  {
    __break(0xC471u);
    goto LABEL_158;
  }
  isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(0, (_QWORD *)(v7 - 288), 0);
  v12 = WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v7 - 288), 0);
  v13 = *(_QWORD *)(v7 + 240);
  if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0 && (*(_QWORD *)(*(_QWORD *)(v14 + 136) + 712) & 0x20000) != 0)
    v98 = WebCore::PermissionsPolicy::isFeatureEnabled(2u, (_QWORD *)(v7 - 288), 0);
  else
    v98 = 0;
  v15 = *(WTF **)(v5 + 136);
  v93 = (_QWORD *)(v5 + 136);
  v94 = v12;
  if (v15)
  {
    v87 = *(unsigned int *)(v5 + 144);
    *v93 = 0;
    *(_QWORD *)(v5 + 144) = 0;
    *(_QWORD *)(v5 + 149) = 0;
    if ((_DWORD)v87)
    {
      v88 = (WTF::StringImpl **)((char *)v15 + 8);
      do
      {
        v89 = *v88;
        *v88 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, v11);
          else
            *(_DWORD *)v89 -= 2;
        }
        v90 = *(v88 - 1);
        *(v88 - 1) = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v11);
          else
            *(_DWORD *)v90 -= 2;
        }
        v88 += 2;
        --v87;
      }
      while (v87);
    }
    WTF::fastFree(v15, v11);
    v12 = v94;
  }
  v104 = 0;
  v105 = 0;
  v16 = *((_DWORD *)a2 + 3);
  if (!v16)
    return WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::MediaDeviceInfo>,WebCore::IDLInterface<WebCore::InputDeviceInfo>>>>(*(_QWORD *)(v4 + 24), (uint64_t *)&v104);
  v91 = a3;
  v100 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *a2;
  v20 = v19 + 232 * v16;
  v95 = (WTF::String *)((char *)a3 + 8);
  v96 = (WTF::String *)(v5 + 112);
  v21 = &unk_1ECE91000;
  v92 = isFeatureEnabled;
  v97 = v20;
  do
  {
    if ((v12 & 1) == 0 && *(_BYTE *)(v19 + 8) == 1
      || (isFeatureEnabled & 1) == 0 && *(_BYTE *)(v19 + 8) == 3
      || (v98 & 1) == 0 && *(_BYTE *)(v19 + 8) == 2)
    {
      goto LABEL_126;
    }
    if ((v21[592] & 1) == 0)
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      v21[592] = 1;
    }
    v103 = 0;
    if (*(_BYTE *)(v19 + 35))
      v22 = v95;
    else
      v22 = v91;
    WebCore::RealtimeMediaSourceCenter::hashStringWithSalt((WTF *)v19, v22, (WTF::String *)v101);
    v24 = v101[0];
    v101[0] = 0;
    v25 = v103;
    v103 = v24;
    if (v25)
    {
      v26 = *(_DWORD *)v25 - 2;
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v23);
        v25 = v101[0];
        v101[0] = 0;
        if (!v25)
          goto LABEL_30;
        v26 = *(_DWORD *)v25 - 2;
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::destroy(v25, v81);
          goto LABEL_30;
        }
      }
      *(_DWORD *)v25 = v26;
    }
LABEL_30:
    v28 = (WTF *)(v19 + 24);
    v27 = *(_QWORD *)(v19 + 24);
    if (!v27 || !*(_DWORD *)(v27 + 4))
      v28 = (WTF *)v19;
    if ((v21[592] & 1) == 0)
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      v21[592] = 1;
    }
    WebCore::RealtimeMediaSourceCenter::hashStringWithSalt(v28, v96, (WTF::String *)&v102);
    if (*(_BYTE *)(v19 + 8) == 2)
    {
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::String const&>((uint64_t)v93, &v103, (const WTF::StringImpl *)v19, (uint64_t)v101);
      {
        WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
        WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
      }
      if (*(unsigned __int8 *)(v19 + 8) - 1 > 1
        || !*(_QWORD *)(v19 + 16)
        || (v29 = (_DWORD **)&WebCore::CaptureDevice::label(void)const::airPods, WTF::StringImpl::find() == -1))
      {
        v29 = (_DWORD **)(v19 + 16);
      }
      v99 = v18;
      if ((*(_BYTE *)(v19 + 8) - 2) > 3u)
        v30 = 0;
      else
        v30 = dword_1968DEBD0[(char)(*(_BYTE *)(v19 + 8) - 2)];
      v36 = bmalloc::api::isoAllocate();
      v37 = v36;
      *(_DWORD *)(v36 + 8) = 1;
      *(_QWORD *)(v36 + 16) = 0;
      *(_QWORD *)v36 = off_1E335FB10;
      v38 = *v29;
      if (*v29)
        *v38 += 2;
      *(_QWORD *)(v36 + 24) = v38;
      v39 = v103;
      v21 = (_BYTE *)&unk_1ECE91000;
      if (v103)
        *(_DWORD *)v103 += 2;
      *(_QWORD *)(v36 + 32) = v39;
      v40 = v102;
      if (v102)
        *(_DWORD *)v102 += 2;
      *(_QWORD *)(v36 + 40) = v40;
      *(_DWORD *)(v36 + 48) = v30;
      v18 = v99;
      if (v99 == v17)
      {
        v41 = v99 + ((unint64_t)v99 >> 2);
        if (v41 >= 0x10)
          v42 = v41 + 1;
        else
          v42 = 16;
        if (v42 <= (unint64_t)v99 + 1)
          v43 = v99 + 1;
        else
          v43 = v42;
        if (v43 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x19547DDD4);
        }
        v44 = WTF::fastMalloc((WTF *)(16 * v43));
        v45 = (WTF *)v44;
        LODWORD(v105) = v43;
        v104 = (WTF *)v44;
        if (v17)
        {
          v46 = 16 * v99;
          v47 = v44;
          v48 = v100;
          do
          {
            *(_BYTE *)v47 = 0;
            *(_DWORD *)(v47 + 8) = -1;
            v49 = *((unsigned int *)v48 + 2);
            if ((_DWORD)v49 != -1)
            {
              ((void (*)(WTF::StringImpl **, uint64_t, WTF *))off_1E335F788[v49])(v101, v47, v48);
              *(_DWORD *)(v47 + 8) = v49;
              v50 = *((unsigned int *)v48 + 2);
              if ((_DWORD)v50 != -1)
                ((void (*)(WTF::StringImpl **, WTF *))off_1E335F778[v50])(v101, v48);
            }
            *((_DWORD *)v48 + 2) = -1;
            v47 += 16;
            v48 = (WTF *)((char *)v48 + 16);
            v46 -= 16;
          }
          while (v46);
        }
        if (v100)
        {
          isFeatureEnabled = v92;
          v12 = v94;
          v21 = (_BYTE *)&unk_1ECE91000;
          if (v45 == v100)
          {
            LODWORD(v43) = 0;
            v45 = 0;
            v104 = 0;
            LODWORD(v105) = 0;
          }
          WTF::fastFree(v100, v31);
        }
        else
        {
          isFeatureEnabled = v92;
          v12 = v94;
          v21 = (_BYTE *)&unk_1ECE91000;
        }
        v77 = 0;
        v78 = (char *)v45 + 16 * v99;
        *(_QWORD *)v78 = v37;
        v100 = v45;
        v17 = v43;
LABEL_119:
        v18 = v99;
        goto LABEL_120;
      }
      v77 = 0;
      v78 = (char *)v100 + 16 * v99;
      *(_QWORD *)v78 = v36;
    }
    else
    {
      v32 = bmalloc::api::isoAllocate();
      {
        WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
        WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
      }
      if (*(unsigned __int8 *)(v19 + 8) - 1 > 1
        || (!WebCore::CaptureDevice::label(void)const::airPods
          ? (v31 = 0)
          : (v31 = (void *)*((_QWORD *)WebCore::CaptureDevice::label(void)const::airPods + 1)),
            !*(_QWORD *)(v19 + 16)
         || (v33 = WTF::StringImpl::find(),
             v34 = (_DWORD **)&WebCore::CaptureDevice::label(void)const::airPods,
             v33 == -1)))
      {
        v34 = (_DWORD **)(v19 + 16);
      }
      if ((*(_BYTE *)(v19 + 8) - 2) > 3u)
        v35 = 0;
      else
        v35 = dword_1968DEBD0[(char)(*(_BYTE *)(v19 + 8) - 2)];
      *(_DWORD *)(v32 + 8) = 1;
      *(_QWORD *)(v32 + 16) = 0;
      v51 = *v34;
      if (v51)
        *v51 += 2;
      *(_QWORD *)(v32 + 24) = v51;
      v52 = v103;
      if (v103)
        *(_DWORD *)v103 += 2;
      *(_QWORD *)(v32 + 32) = v52;
      v53 = v102;
      if (v102)
        *(_DWORD *)v102 += 2;
      *(_QWORD *)(v32 + 40) = v53;
      *(_DWORD *)(v32 + 48) = v35;
      *(_QWORD *)v32 = off_1E335FAF0;
      v54 = *(_OWORD *)(v19 + 40);
      v55 = *(_OWORD *)(v19 + 56);
      *(_OWORD *)(v32 + 88) = *(_OWORD *)(v19 + 72);
      *(_OWORD *)(v32 + 72) = v55;
      *(_OWORD *)(v32 + 56) = v54;
      v56 = (WTF *)*(unsigned int *)(v19 + 100);
      *(_QWORD *)(v32 + 104) = 0;
      *(_QWORD *)(v32 + 112) = 0;
      *(_DWORD *)(v32 + 116) = (_DWORD)v56;
      if ((_DWORD)v56)
      {
        v57 = (void *)WTF::fastMalloc(v56);
        *(_DWORD *)(v32 + 112) = (_DWORD)v56;
        *(_QWORD *)(v32 + 104) = v57;
        memcpy(v57, *(const void **)(v19 + 88), *(unsigned int *)(v19 + 100));
      }
      v58 = *(_OWORD *)(v19 + 104);
      v59 = *(_OWORD *)(v19 + 120);
      *(_BYTE *)(v32 + 152) = *(_BYTE *)(v19 + 136);
      *(_OWORD *)(v32 + 136) = v59;
      *(_OWORD *)(v32 + 120) = v58;
      v60 = *(_DWORD **)(v19 + 144);
      if (v60)
        *v60 += 2;
      *(_QWORD *)(v32 + 160) = v60;
      v61 = *(_DWORD **)(v19 + 152);
      if (v61)
        *v61 += 2;
      *(_QWORD *)(v32 + 168) = v61;
      *(_OWORD *)(v32 + 176) = *(_OWORD *)(v19 + 160);
      v62 = (WTF *)*(unsigned int *)(v19 + 188);
      *(_QWORD *)(v32 + 192) = 0;
      *(_QWORD *)(v32 + 200) = 0;
      *(_DWORD *)(v32 + 204) = (_DWORD)v62;
      if ((_DWORD)v62)
      {
        v63 = (void *)WTF::fastMalloc(v62);
        *(_DWORD *)(v32 + 200) = (_DWORD)v62;
        *(_QWORD *)(v32 + 192) = v63;
        memcpy(v63, *(const void **)(v19 + 176), *(unsigned int *)(v19 + 188));
      }
      v64 = *(_OWORD *)(v19 + 192);
      v65 = *(_OWORD *)(v19 + 208);
      *(_QWORD *)(v32 + 238) = *(_QWORD *)(v19 + 222);
      *(_OWORD *)(v32 + 208) = v64;
      *(_OWORD *)(v32 + 224) = v65;
      v66 = v18;
      if (v18 == v17)
      {
        v99 = v18;
        v67 = v18 + ((unint64_t)v18 >> 2);
        if (v67 >= 0x10)
          v68 = v67 + 1;
        else
          v68 = 16;
        if (v68 <= (unint64_t)v18 + 1)
          v69 = v18 + 1;
        else
          v69 = v68;
        if (v69 >> 28)
        {
          __break(0xC471u);
LABEL_158:
          JUMPOUT(0x19547DDCCLL);
        }
        v70 = WTF::fastMalloc((WTF *)(16 * v69));
        v71 = (WTF *)v70;
        LODWORD(v105) = v69;
        v104 = (WTF *)v70;
        if (v17)
        {
          v72 = 16 * v66;
          v73 = v70;
          v74 = v100;
          do
          {
            *(_BYTE *)v73 = 0;
            *(_DWORD *)(v73 + 8) = -1;
            v75 = *((unsigned int *)v74 + 2);
            if ((_DWORD)v75 != -1)
            {
              ((void (*)(WTF::StringImpl **, uint64_t, WTF *))off_1E335F788[v75])(v101, v73, v74);
              *(_DWORD *)(v73 + 8) = v75;
              v76 = *((unsigned int *)v74 + 2);
              if ((_DWORD)v76 != -1)
                ((void (*)(WTF::StringImpl **, WTF *))off_1E335F778[v76])(v101, v74);
            }
            *((_DWORD *)v74 + 2) = -1;
            v73 += 16;
            v74 = (WTF *)((char *)v74 + 16);
            v72 -= 16;
          }
          while (v72);
        }
        if (v100)
        {
          v12 = v94;
          v21 = (_BYTE *)&unk_1ECE91000;
          if (v71 == v100)
          {
            LODWORD(v69) = 0;
            v71 = 0;
            v104 = 0;
            LODWORD(v105) = 0;
          }
          WTF::fastFree(v100, v31);
        }
        else
        {
          v12 = v94;
          v21 = (_BYTE *)&unk_1ECE91000;
        }
        v78 = (char *)v71 + 16 * v66;
        *(_QWORD *)v78 = v32;
        v77 = 1;
        v100 = v71;
        v17 = v69;
        isFeatureEnabled = v92;
        goto LABEL_119;
      }
      v78 = (char *)v100 + 16 * v18;
      *(_QWORD *)v78 = v32;
      v77 = 1;
    }
LABEL_120:
    ++v18;
    *((_DWORD *)v78 + 2) = v77;
    HIDWORD(v105) = v18;
    v79 = v102;
    v102 = 0;
    v20 = v97;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v31);
      else
        *(_DWORD *)v79 -= 2;
    }
    v80 = v103;
    v103 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v31);
      else
        *(_DWORD *)v80 -= 2;
    }
LABEL_126:
    v19 += 232;
  }
  while (v19 != v20);
  v82 = v104;
  result = WebCore::DeferredPromise::resolve<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::MediaDeviceInfo>,WebCore::IDLInterface<WebCore::InputDeviceInfo>>>>(*(_QWORD *)(v4 + 24), (uint64_t *)&v104);
  if (v18)
  {
    v84 = 16 * v18;
    v85 = v82;
    do
    {
      v86 = *((unsigned int *)v85 + 2);
      if ((_DWORD)v86 != -1)
        result = ((uint64_t (*)(WTF::StringImpl **, WTF *))off_1E335F778[v86])(v101, v85);
      *((_DWORD *)v85 + 2) = -1;
      v85 = (WTF *)((char *)v85 + 16);
      v84 -= 16;
    }
    while (v84);
  }
  if (v82)
    return WTF::fastFree(v82, v83);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaDevices::scheduledEventTimerFired(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E335F7D0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaDevices::~MediaDevices((WebCore::MediaDevices *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::scheduledEventTimerFired(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F7D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::MediaDevices::~MediaDevices((WebCore::MediaDevices *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::MediaDevices::scheduledEventTimerFired(void)::$_0,void>::call(WebCore *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *result;
  _DWORD *v11;

  v1 = (_QWORD *)*((_QWORD *)a1 + 2);
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 600) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 600);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  v11 = (_DWORD *)v5;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(v1, (uint64_t)(v1 + 4), 0, (uint64_t *)&v11);
  result = v11;
  if (v11)
  {
    if (v11[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v11 + 8))();
    else
      --v11[4];
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaDevices::listenForDeviceChanges(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E335F7F8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::listenForDeviceChanges(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F7F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaDevices::listenForDeviceChanges(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *(_QWORD *)(result + 16);
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (!*(_BYTE *)(v4 + 180))
          {
            result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v2 + 56));
            if ((result & 1) == 0)
            {
              WTF::cryptographicallyRandomUnitInterval((WTF *)result);
              return WTF::RunLoop::TimerBase::start();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  v48 = v4;
  if ((_DWORD)v4)
  {
    v11 = a1;
    v12 = 0;
    v47 = v5;
    v50 = a1;
    do
    {
      v13 = (char *)v5 + 16 * v12;
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        v15 = *((_DWORD *)v11 + 2);
        v16 = *((_DWORD *)v11 + 4);
        v17 = *((_DWORD *)v14 + 4);
        v51 = v15;
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v15 = v51;
          v11 = v50;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = v15 - 1;
        v20 = (v18 ^ v16) & (v15 - 1);
        v21 = *v11;
        v22 = (WTF::StringImpl **)(*v11 + 16 * v20);
        v23 = *v22;
        v49 = v12;
        if (*v22)
        {
          v24 = 0;
          v25 = (_QWORD *)((char *)v5 + 16 * v12 + 8);
          do
          {
            v26 = *((_DWORD *)v23 + 4);
            if (v26 < 0x100)
            {
              v27 = WTF::StringImpl::hashSlowCase(v23);
              v15 = v51;
              v11 = v50;
            }
            else
            {
              v27 = v26 >> 8;
            }
            v28 = (v20 + v15 - ((v27 ^ v16) & v19)) & v19;
            if (v24 > v28)
            {
              v29 = *(WTF::StringImpl **)v13;
              v30 = (_DWORD *)*v25;
              *(_QWORD *)v13 = 0;
              *((_QWORD *)v13 + 1) = 0;
              v31 = *v22;
              *v22 = 0;
              v32 = *(WTF::StringImpl **)v13;
              *(_QWORD *)v13 = v31;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::destroy(v32, v7);
                  v15 = v51;
                  v11 = v50;
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              v33 = v21 + 16 * v20;
              v35 = *(_QWORD *)(v33 + 8);
              v34 = (_QWORD *)(v33 + 8);
              *v34 = 0;
              v36 = (_DWORD *)*v25;
              *v25 = v35;
              if (v36)
              {
                if (v36[6] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
                  v15 = v51;
                  v11 = v50;
                }
                else
                {
                  --v36[6];
                }
              }
              v37 = *v22;
              *v22 = v29;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                {
                  WTF::StringImpl::destroy(v37, v7);
                  v15 = v51;
                  v11 = v50;
                }
                else
                {
                  *(_DWORD *)v37 -= 2;
                }
              }
              v38 = (_DWORD *)*v34;
              *v34 = v30;
              if (v38)
              {
                if (v38[6] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
                  v15 = v51;
                  v11 = v50;
                }
                else
                {
                  --v38[6];
                }
              }
              v24 = v28;
            }
            v20 = ((_DWORD)v20 + 1) & v19;
            ++v24;
            v21 = *v11;
            v22 = (WTF::StringImpl **)(*v11 + 16 * v20);
            v23 = *v22;
          }
          while (*v22);
        }
        v39 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        v40 = *v22;
        *v22 = v39;
        v5 = v47;
        v12 = v49;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::destroy(v40, v7);
            v11 = v50;
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
        v41 = v21 + 16 * v20;
        v42 = (char *)v47 + 16 * v49;
        v43 = *((_QWORD *)v42 + 1);
        *((_QWORD *)v42 + 1) = 0;
        v44 = *(_DWORD **)(v41 + 8);
        *(_QWORD *)(v41 + 8) = v43;
        if (v44)
        {
          if (v44[6] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 16))(v44);
            v11 = v50;
          }
          else
          {
            --v44[6];
          }
        }
      }
      v45 = (_DWORD *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v45)
      {
        if (v45[6] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 16))(v45);
          v11 = v50;
        }
        else
        {
          --v45[6];
        }
      }
      v46 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::destroy(v46, v7);
          v11 = v50;
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
      ++v12;
    }
    while (v12 != v48);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

BOOL WTF::Detail::CallableWrapper<WebCore::MediaStream::getAudioTracks(void)::$_0,BOOL,WebCore::MediaStreamTrack const&>::call(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(*(_QWORD *)(a2 + 96) + 64) == 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStream::getVideoTracks(void)::$_0,BOOL,WebCore::MediaStreamTrack const&>::call(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a2 + 96) + 64);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,int>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned int *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::String *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  _BYTE v46[12];
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::number((WTF::String *)*a4);
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v42 + 1);
LABEL_4:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v44 = 0;
    goto LABEL_76;
  }
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v42)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &v44);
  if (!v44)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v46 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v27 = (WTF::String *)*a4;
              v47 = 0;
              WTF::String::number(v27);
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = *(_DWORD *)buf;
              v30 = *(_QWORD *)&v46[4];
              if (*(_QWORD *)&v46[4])
                **(_DWORD **)&v46[4] += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v47;
              v31 = v48;
              if (v48)
                *(_DWORD *)v48 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v48;
              v48 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = *(WTF::StringImpl **)&v46[4];
              *(_QWORD *)&v46[4] = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  unsigned __int8 *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  int v13;
  BOOL v14;
  WTF::NativePromiseBase *v15;
  WTF::Lock *v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 136) = 1;
  v15 = *a2;
  v14 = *(_DWORD *)(a1 + 88) == 0;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (*result && result[16] >= 4u)
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v15, " isNothing:", (uint64_t)&v14, "]");
  if (*(_DWORD *)(a1 + 88))
  {
    result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v16);
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 104))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 96), v9 + 1, (unint64_t)a2);
      v9 = *(unsigned int *)(a1 + 108);
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 96);
      v12 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 96);
      v12 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v11 + 8 * v9) = v12;
    *(_DWORD *)(a1 + 108) = v10;
  }
  if (v17)
  {
    result = (unsigned __int8 *)v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, int a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  WTF::Logger *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  uint64_t v59;
  char *v61;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 buf;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93[3];

  v93[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v70, a4);
  WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, &v69);
  WTF::String::String((WTF::String *)&v68, a6);
  WTF::LogArgument<void const*>::toString();
  v61 = (char *)a8;
  WTF::String::String((WTF::String *)&v66, a8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v65, a10);
  v63 = v70;
  v78 = v69;
  *(_QWORD *)&buf = v71;
  v76 = v67;
  v77 = v68;
  v74 = v15;
  v75 = v66;
  v73 = v65;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v63, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, &v72);
  if (!v72)
  {
    __break(0xC471u);
    return result;
  }
  v18 = v65;
  v65 = 0;
  if (!v18)
  {
LABEL_5:
    if (v15)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v18, v17);
  if (v15)
  {
LABEL_6:
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v17);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_8:
  v19 = v66;
  v66 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v67;
  v67 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v68;
  v68 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v17);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v69;
  v69 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v17);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v70;
  v70 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v71;
  v71 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v17);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(NSObject **)(a1 + 32);
  v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v26)
  {
    WTF::String::utf8();
    v28 = v63 ? (char *)v63 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v28;
    _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v26 = (uint64_t)v63;
    v63 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        v26 = WTF::fastFree((WTF *)v26, v27);
      else
        --*(_DWORD *)v26;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v30 = *v29;
      if ((v30 & 1) != 0)
        break;
      v31 = __ldaxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 | 1, v29))
        {
          v32 = WTF::Logger::observers((WTF::Logger *)v26);
          v33 = *(unsigned int *)(v32 + 12);
          if ((_DWORD)v33)
          {
            v34 = *(uint64_t **)v32;
            v59 = *(_QWORD *)v32 + 8 * v33;
            do
            {
              v35 = *v34;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v80 = 0;
              WTF::String::String((WTF::String *)&v81, a4);
              v82 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, &v83);
              v84 = 0;
              WTF::String::String((WTF::String *)&v85, a6);
              v86 = 0;
              WTF::LogArgument<void const*>::toString();
              v88 = 0;
              WTF::String::String((WTF::String *)&v89, v61);
              v90 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v91 = v63;
              v92 = 0;
              WTF::String::String((WTF::String *)v93, a10);
              v63 = 0;
              v64 = 0;
              v36 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v64) = 8;
              v63 = v36;
              v37 = HIDWORD(v64);
              *((_DWORD *)v36 + 4 * HIDWORD(v64)) = buf;
              v38 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v36 + 2 * v37 + 1) = v38;
              *((_DWORD *)v36 + 4 * (v37 + 1)) = v80;
              v39 = v81;
              if (v81)
                *(_DWORD *)v81 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 1) + 1) = v39;
              *((_DWORD *)v36 + 4 * (v37 + 2)) = v82;
              v40 = v83;
              if (v83)
                *(_DWORD *)v83 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 2) + 1) = v40;
              *((_DWORD *)v36 + 4 * (v37 + 3)) = v84;
              v41 = v85;
              if (v85)
                *(_DWORD *)v85 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 3) + 1) = v41;
              *((_DWORD *)v36 + 4 * (v37 + 4)) = v86;
              v42 = v87;
              if (v87)
                *(_DWORD *)v87 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 4) + 1) = v42;
              *((_DWORD *)v36 + 4 * (v37 + 5)) = v88;
              v43 = v89;
              if (v89)
                *(_DWORD *)v89 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 5) + 1) = v43;
              *((_DWORD *)v36 + 4 * (v37 + 6)) = v90;
              v44 = v91;
              if (v91)
                *(_DWORD *)v91 += 2;
              *((_QWORD *)v36 + 2 * (v37 + 6) + 1) = v44;
              *((_DWORD *)v36 + 4 * (v37 + 7)) = v92;
              v45 = v93[0];
              if (v93[0])
                *(_DWORD *)v93[0] += 2;
              *((_QWORD *)v36 + 2 * (v37 + 7) + 1) = v45;
              HIDWORD(v64) = v37 + 8;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v35 + 16))(v35, a1, a2, &v63);
              v46 = v63;
              if (HIDWORD(v64))
              {
                v47 = 16 * HIDWORD(v64);
                v48 = (WTF::StringImpl **)((char *)v63 + 8);
                do
                {
                  v49 = *v48;
                  *v48 = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  v48 += 2;
                  v47 -= 16;
                }
                while (v47);
                v46 = v63;
              }
              if (v46)
              {
                v63 = 0;
                LODWORD(v64) = 0;
                WTF::fastFree(v46, v27);
              }
              v50 = v93[0];
              v93[0] = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v91;
              v91 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v89;
              v89 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v87;
              v87 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v85;
              v85 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = v83;
              v83 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v81;
              v81 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v57 -= 2;
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v59);
          }
          v58 = __ldxr(v29);
          if (v58 == 1)
          {
            if (!__stlxr(0, v29))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v72;
  v72 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 264) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a1, &v70);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a1, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 216))
  {
    result = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 236);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 232))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 224), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 236);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 224);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 224);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 236) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  WTF::NativePromiseBase *v8;
  unsigned __int8 *result;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  WTF::NativePromiseBase *v42;
  WTF::Logger::LogSiteIdentifier *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::NativePromiseBase *v59;
  int v60;
  uint64_t v61;
  WTF::Lock *v62;
  char v63;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94[3];

  v94[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::Lock *)(a1 + 48);
  v62 = v6;
  v63 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 168) = 1;
  v8 = *a2;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (!*result)
    goto LABEL_117;
  v10 = result;
  if (result[16] < 4u)
    goto LABEL_117;
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v71, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a1, &v70);
  WTF::String::String((WTF::String *)&v69, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v67, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, "]");
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v13 = v66;
  v66 = 0;
  if (!v13)
  {
LABEL_11:
    if (v11)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (v11)
  {
LABEL_12:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_14:
  v14 = v67;
  v67 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v68;
  v68 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v69;
  v69 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v70;
  v70 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v71;
  v71 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v72;
  v72 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *((_QWORD *)v10 + 4);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v64;
    v64 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*v10 && v10[16] >= 4u)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v61 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a3);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, " invoking maybeSettle() [");
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a1, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, " callback:");
              v87 = 0;
              WTF::LogArgument<void const*>::toString();
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, " isNothing:");
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v64;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, "]");
              v64 = 0;
              v65 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v31;
              v32 = HIDWORD(v65);
              *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v81;
              v34 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v83;
              v35 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              *((_DWORD *)v31 + 4 * (v32 + 3)) = v85;
              v36 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
              *((_DWORD *)v31 + 4 * (v32 + 4)) = v87;
              v37 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
              *((_DWORD *)v31 + 4 * (v32 + 5)) = v89;
              v38 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
              *((_DWORD *)v31 + 4 * (v32 + 6)) = v91;
              v39 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 6) + 1) = v39;
              *((_DWORD *)v31 + 4 * (v32 + 7)) = v93;
              v40 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 7) + 1) = v40;
              HIDWORD(v65) = v32 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, v10, 4, &v64);
              v41 = v64;
              if (HIDWORD(v65))
              {
                v42 = v8;
                v43 = a3;
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v41 = v64;
                a3 = v43;
                v8 = v42;
              }
              if (v41)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v41, v22);
              }
              v47 = v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v61);
          }
          v55 = __ldxr(v24);
          if (v55 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (unsigned __int8 *)v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_117:
  if (*(_DWORD *)(a1 + 120))
  {
    result = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v62);
  }
  else
  {
    v56 = *(unsigned int *)(a1 + 140);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 136))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 128), v56 + 1, (unint64_t)a2);
      v56 = *(unsigned int *)(a1 + 140);
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 128);
      v59 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v57 = v56 + 1;
      v58 = *(_QWORD *)(a1 + 128);
      v59 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v58 + 8 * v56) = v59;
    *(_DWORD *)(a1 + 140) = v57;
  }
  if (v63)
  {
    result = (unsigned __int8 *)v62;
    v60 = __ldxr((unsigned __int8 *)v62);
    if (v60 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v62))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrack::applyConstraints(std::optional<WebCore::MediaTrackConstraints> const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)a1 = &off_1E335F890;
  v3 = *(_DWORD **)(a1 + 1104);
  *(_QWORD *)(a1 + 1104) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*(_BYTE *)(a1 + 1096))
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)(a1 + 24), a2);
  v4 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrack::applyConstraints(std::optional<WebCore::MediaTrackConstraints> const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E335F890;
  v3 = (_DWORD *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*((_BYTE *)this + 1096))
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WTF *)((char *)this + 24), a2);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrack::applyConstraints(std::optional<WebCore::MediaTrackConstraints> const&,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::call(uint64_t a1, char *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t (**v31)();
  _DWORD *v32;
  WTF::StringImpl *v33;
  _DWORD *result;
  uint64_t (***v35)();
  _DWORD *v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  _BYTE v40[1048];
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  char v45;
  _DWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v36 = v3;
  v37 = 0;
  v39 = 0;
  if (a2[16])
  {
    v37 = *a2;
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v38 = v5;
    v39 = 1;
  }
  v40[0] = 0;
  v45 = 0;
  if (*(_BYTE *)(a1 + 1096))
  {
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)v40, a1 + 24);
    LOBYTE(v41) = 0;
    v44 = 0;
    if (*(_BYTE *)(a1 + 1088))
    {
      v6 = *(_DWORD *)(a1 + 1084);
      v41 = 0;
      v42 = 0;
      v43 = v6;
      if (v6)
      {
        if (v6 >= 0x3E88CC)
          goto LABEL_47;
        v7 = 1048 * v6;
        v8 = WTF::fastMalloc((WTF *)(1048 * v6));
        v42 = (v7 & 0xFFFFFFF8) / 0x418;
        v41 = v8;
        v9 = *(_DWORD *)(a1 + 1084);
        if (v9)
        {
          v10 = *(_QWORD *)(a1 + 1072);
          v11 = 1048 * v9;
          do
          {
            v8 = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v8, v10) + 1048;
            v10 += 1048;
            v11 -= 1048;
          }
          while (v11);
        }
      }
      v44 = 1;
    }
    v45 = 1;
  }
  v12 = *(_DWORD **)(a1 + 1104);
  *(_QWORD *)(a1 + 1104) = 0;
  v46 = v12;
  v13 = WTF::fastMalloc((WTF *)0x468);
  v14 = v13;
  *(_QWORD *)v13 = &off_1E335F8B8;
  v15 = v36;
  v36 = 0;
  *(_QWORD *)(v13 + 8) = v15;
  *(_BYTE *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 32) = 0;
  if (v39)
  {
    *(_BYTE *)(v13 + 16) = v37;
    v16 = v38;
    v38 = 0;
    *(_QWORD *)(v13 + 24) = v16;
    *(_BYTE *)(v13 + 32) = 1;
  }
  *(_BYTE *)(v13 + 40) = 0;
  v17 = v13 + 40;
  *(_BYTE *)(v14 + 1112) = 0;
  if (v45)
  {
    WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v17, (uint64_t)v40);
    *(_BYTE *)(v14 + 1088) = 0;
    *(_BYTE *)(v14 + 1104) = 0;
    if (!v44)
    {
LABEL_22:
      *(_BYTE *)(v14 + 1112) = 1;
      goto LABEL_23;
    }
    v18 = v43;
    *(_QWORD *)(v14 + 1088) = 0;
    *(_QWORD *)(v14 + 1096) = 0;
    *(_DWORD *)(v14 + 1100) = v18;
    if (!v18)
    {
LABEL_21:
      *(_BYTE *)(v14 + 1104) = 1;
      goto LABEL_22;
    }
    if (v18 < 0x3E88CC)
    {
      v19 = 1048 * v18;
      v20 = WTF::fastMalloc((WTF *)(1048 * v18));
      *(_DWORD *)(v14 + 1096) = (v19 & 0xFFFFFFF8) / 0x418;
      *(_QWORD *)(v14 + 1088) = v20;
      if (v43)
      {
        v21 = v41;
        v22 = 1048 * v43;
        do
        {
          v20 = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v20, v21) + 1048;
          v21 += 1048;
          v22 -= 1048;
        }
        while (v22);
      }
      goto LABEL_21;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x195480A68);
  }
LABEL_23:
  v23 = v46;
  v46 = 0;
  *(_QWORD *)(v14 + 1120) = v23;
  v24 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v24 = 1;
  v25 = *(_DWORD *)(v4 + 24);
  *(_QWORD *)(v24 + 8) = v4;
  ++*(_QWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 24) = v25 + 2;
  v26 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v26 = &off_1E335F8E0;
  v26[1] = (uint64_t (**)())v4;
  v26[2] = (uint64_t (**)())v24;
  v26[3] = (uint64_t (**)())v14;
  v35 = v26;
  v27 = *(_QWORD *)(v4 + 8);
  if (!v27)
  {
    v35 = 0;
    v31 = &off_1E335F8E0;
    goto LABEL_29;
  }
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
  {
    v35 = 0;
    goto LABEL_28;
  }
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v28 - 96) + 104))(v28 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v29, 11, (uint64_t *)&v35);
  v26 = v35;
  v35 = 0;
  if (v26)
  {
LABEL_28:
    v31 = *v26;
LABEL_29:
    ((void (*)(uint64_t (***)()))v31[1])(v26);
  }
  v32 = v46;
  v46 = 0;
  if (v32)
  {
    if (v32[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
    else
      --v32[4];
  }
  if (v45)
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)v40, v30);
  if (v39)
  {
    v33 = v38;
    v38 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v30);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16MediaStreamTrack16applyConstraintsERKNSt3__18optionalINS2_21MediaTrackConstraintsEEEONS2_18DOMPromiseDeferredIvEEEN3__0clINS5_INS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1, void *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)a1 = &off_1E335F8B8;
  v3 = *(_DWORD **)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*(_BYTE *)(a1 + 1112))
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)(a1 + 40), a2);
  if (*(_BYTE *)(a1 + 32))
  {
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v5 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16MediaStreamTrack16applyConstraintsERKNSt3__18optionalINS2_21MediaTrackConstraintsEEEONS2_18DOMPromiseDeferredIvEEEN3__0clINS5_INS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E335F8B8;
  v3 = (_DWORD *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*((_BYTE *)this + 1112))
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WTF *)((char *)this + 40), a2);
  if (*((_BYTE *)this + 32))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16MediaStreamTrack16applyConstraintsERKNSt3__18optionalINS2_21MediaTrackConstraintsEEEONS2_18DOMPromiseDeferredIvEEEN3__0clINS5_INS2_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  char v2;
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _BYTE v21[1048];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_BYTE *)(a1 + 16);
    v3 = WTF::fastMalloc((WTF *)0x20);
    v4 = (WTF *)v3;
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = v2;
    v5 = *(_DWORD **)(a1 + 24);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(v3 + 24) = v5;
    WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::OverconstrainedError>>(*(_QWORD *)(a1 + 1120), (WTF *)v3, 0);
    if (*(_DWORD *)v4 == 1)
    {
      v19 = (WTF::StringImpl *)*((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v6);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = (WTF::StringImpl *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v6);
        else
          *(_DWORD *)v20 -= 2;
      }
      WTF::fastFree(v4, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 1112))
    {
      WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet((uint64_t)v21, a1 + 40);
      LOBYTE(v22) = 0;
      v25 = 0;
      if (*(_BYTE *)(a1 + 1104))
      {
        v7 = *(_DWORD *)(a1 + 1100);
        v22 = 0;
        v23 = 0;
        v24 = v7;
        if (v7)
        {
          if (v7 >= 0x3E88CC)
          {
            __break(0xC471u);
            return;
          }
          v8 = 1048 * v7;
          v9 = WTF::fastMalloc((WTF *)(1048 * v7));
          v23 = (v8 & 0xFFFFFFF8) / 0x418;
          v22 = v9;
          v10 = *(_DWORD *)(a1 + 1100);
          if (v10)
          {
            v11 = *(_QWORD *)(a1 + 1088);
            v12 = 1048 * v10;
            do
            {
              v9 = WebCore::MediaTrackConstraintSet::MediaTrackConstraintSet(v9, v11) + 1048;
              v11 += 1048;
              v12 -= 1048;
            }
            while (v12);
          }
        }
        v25 = 1;
      }
    }
    else
    {
      v21[0] = 0;
      v21[40] = 0;
      v21[44] = 0;
      v21[84] = 0;
      v21[88] = 0;
      v21[168] = 0;
      v21[176] = 0;
      v21[256] = 0;
      v21[264] = 0;
      v21[344] = 0;
      v21[352] = 0;
      v21[432] = 0;
      v21[440] = 0;
      v21[480] = 0;
      v21[484] = 0;
      v21[524] = 0;
      v21[528] = 0;
      v21[540] = 0;
      v21[544] = 0;
      v21[624] = 0;
      v21[632] = 0;
      v21[712] = 0;
      v21[720] = 0;
      v21[800] = 0;
      v21[808] = 0;
      v21[820] = 0;
      v21[824] = 0;
      v21[904] = 0;
      v21[912] = 0;
      v21[992] = 0;
      v21[1000] = 0;
      v21[1012] = 0;
      v21[1016] = 0;
      v21[1028] = 0;
      v21[1032] = 0;
      v21[1044] = 0;
      LOBYTE(v22) = 0;
      v25 = 0;
    }
    v13 = *(_QWORD *)(a1 + 8);
    WebCore::MediaTrackConstraintSet::operator=(v13 + 120, (uint64_t)v21);
    std::__optional_storage_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(v13 + 1168, &v22);
    WebCore::MediaTrackConstraints::~MediaTrackConstraints((WebCore::MediaTrackConstraints *)v21, v14);
    v15 = *(_QWORD *)(a1 + 1120);
    v16 = *(_QWORD *)(v15 + 24);
    if (v16 && *(_QWORD *)v16 && (*(_BYTE *)(v16 + 8) & 3) == 0)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17 || (*(_BYTE *)(v17 + 8) & 3) != 0)
        v18 = 0;
      else
        v18 = *(uint64_t **)v17;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v15, v18, 0, (objc_class *)0xA);
      MEMORY[0x19AEA32A0](v21);
    }
  }
}

uint64_t WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::OverconstrainedError>>(uint64_t result, WTF *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  objc_class *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v17;
  int v18;
  _BYTE v19[8];

  v3 = *(_QWORD *)(result + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 32);
    if (!v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
      v8 = 0;
    else
      v8 = *(uint64_t **)v7;
    v9 = v8[7];
    MEMORY[0x19AEA3294](v19, v9);
    v10 = (objc_class *)WebCore::wrap<WebCore::OverconstrainedError>((uint64_t)v8, **(_QWORD **)(v6 + 32), a2);
    v11 = *(_QWORD *)(v9 + 16);
    if (!v11)
    {
      if (a3)
        v12 = 2;
      else
        v12 = 1;
      WebCore::DeferredPromise::callFunction(v6, v8, v12, v10);
      return MEMORY[0x19AEA32A0](v19);
    }
    v13 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v8);
    if (!(*(unsigned int (**)(_QWORD *))(*v13 + 64))(v13))
    {
LABEL_15:
      WebCore::reportException((JSC::JSGlobalObject *)v8, v11, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v19);
    }
    v14 = v13[43];
    if (*(_QWORD *)(v9 + 24) == v11)
    {
LABEL_29:
      *(_BYTE *)(*(_QWORD *)(v14 + 8) + 93442) = 1;
      *(_BYTE *)(v6 + 44) = 1;
      goto LABEL_15;
    }
    if (!v14)
      goto LABEL_15;
    v15 = (unsigned __int8 *)(v14 + 40);
    if (__ldaxr((unsigned __int8 *)(v14 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v14 + 40);
LABEL_23:
    v17 = *(unsigned __int8 *)(v14 + 41);
    v18 = __ldxr(v15);
    if (v18 == 1)
    {
      if (!__stlxr(0, v15))
      {
LABEL_28:
        if (!v17)
          goto LABEL_15;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v14 + 40));
    goto LABEL_28;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaStreamTrack>(WebCore::MediaStreamTrack &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E335F8E0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaStreamTrack>(WebCore::MediaStreamTrack &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E335F8E0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaStreamTrack>(WebCore::MediaStreamTrack &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

WebCore *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrack::trackEnded(WebCore::MediaStreamTrackPrivate &)::$_0,void>::call(WebCore *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD v14[4];

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180) && !*(_BYTE *)(v3 + 179) && *(_DWORD *)(v1 + 1200) != 1)
      {
        *(_DWORD *)(v1 + 1200) = 1;
        v4 = *(_QWORD *)(v1 + 96);
        v6 = *(_QWORD *)(v4 + 80);
        v5 = *(_QWORD *)(v4 + 88);
        v14[0] = "MediaStreamTrack";
        v14[1] = 17;
        v14[2] = "operator()";
        v14[3] = v5;
        if (*(_BYTE *)(v6 + 12))
          result = (WebCore *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v14, "firing 'ended' event");
        v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
          v8 = WebCore::threadGlobalDataSlow(result);
        v9 = *(_QWORD *)(v8 + 40);
        if (!v9)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
          v9 = *(_QWORD *)(v8 + 40);
        }
        v10 = v1 + 32;
        v11 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
        *(_DWORD *)(v11 + 16) = 1;
        *(_QWORD *)v11 = off_1E33A4B48;
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 20) = *(_DWORD *)(v11 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v9 + 752) != 0);
        v13 = *(_DWORD **)(v9 + 752);
        if (v13)
          *v13 += 2;
        *(_QWORD *)(v11 + 24) = v13;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 48) = 0;
        *(_QWORD *)(v11 + 56) = v12;
        *(_QWORD *)(v11 + 64) = 0;
        result = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v11);
        if (*(_DWORD *)(v11 + 16) == 1)
          return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        else
          --*(_DWORD *)(v11 + 16);
      }
    }
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrack::trackMutedChanged(WebCore::MediaStreamTrackPrivate &)::$_0,void>::call(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BOOL4 v17;
  _DWORD *v18;
  int v19;

  v2 = *((_QWORD *)result + 1);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v5 == 1 || v5 == 2)
          ++*(_DWORD *)(v4 + 216);
      }
      else
      {
        *(_DWORD *)(v4 - 264) += 2;
      }
      if (!*(_BYTE *)(v4 + 180))
      {
        v6 = *((unsigned __int8 *)result + 16);
        if (*(unsigned __int8 *)(v2 + 1204) != v6)
        {
          *(_BYTE *)(v2 + 1204) = v6;
          v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (v6)
          {
            if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
              v8 = WebCore::threadGlobalDataSlow((WebCore *)result);
            v9 = *(_QWORD *)(v8 + 40);
            if (!v9)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
              v9 = *(_QWORD *)(v8 + 40);
            }
            v10 = (_QWORD *)(v9 + 1272);
          }
          else
          {
            if (!v7 || (v11 = *(_QWORD *)(v7 + 96)) == 0)
              v11 = WebCore::threadGlobalDataSlow((WebCore *)result);
            v12 = *(_QWORD *)(v11 + 40);
            if (!v12)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
              v12 = *(_QWORD *)(v11 + 40);
            }
            v10 = (_QWORD *)(v12 + 2176);
          }
          v13 = v2 + 32;
          v14 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
          *(_QWORD *)v14 = off_1E33A4B48;
          *(_QWORD *)(v14 + 8) = 0;
          v16 = *(_DWORD *)(v14 + 20) & 0xFFC00000 | 0x1E8200;
          v17 = *v10 != 0;
          *(_DWORD *)(v14 + 16) = 1;
          *(_DWORD *)(v14 + 20) = v16 | v17;
          v18 = (_DWORD *)*v10;
          if (*v10)
            *v18 += 2;
          *(_QWORD *)(v14 + 24) = v18;
          *(_QWORD *)(v14 + 32) = 0;
          *(_QWORD *)(v14 + 40) = 0;
          *(_QWORD *)(v14 + 48) = 0;
          *(_QWORD *)(v14 + 56) = v15;
          *(_QWORD *)(v14 + 64) = 0;
          result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, v14);
          if (*(_DWORD *)(v14 + 16) == 1)
            result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          else
            --*(_DWORD *)(v14 + 16);
        }
      }
      v19 = *(unsigned __int8 *)(v4 + 178);
      if (*(_BYTE *)(v4 + 178))
      {
        if (v19 == 1)
        {
          if (*(_DWORD *)(v4 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 40))(v4 - 96);
          else
            --*(_DWORD *)(v4 + 216);
        }
        else if (v19 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
        }
      }
      else if (*(_DWORD *)(v4 - 264) == 2)
      {
        if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), a2);
      }
      else
      {
        *(_DWORD *)(v4 - 264) -= 2;
      }
    }
  }
  return result;
}

WebCore *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrack::trackConfigurationChanged(WebCore::MediaStreamTrackPrivate &)::$_0,void>::call(WebCore *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  _DWORD *v13;

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180))
      {
        v4 = *(_QWORD *)(v1 + 96);
        if (!*(_BYTE *)(v4 + 97) && !*(_BYTE *)(v1 + 1205) && !*(_BYTE *)(v4 + 74))
        {
          v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
            v6 = WebCore::threadGlobalDataSlow(result);
          v7 = *(_QWORD *)(v6 + 40);
          if (!v7)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
            v7 = *(_QWORD *)(v6 + 40);
          }
          v8 = v1 + 32;
          v9 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
          *(_QWORD *)v9 = off_1E33A4B48;
          *(_QWORD *)(v9 + 8) = 0;
          v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x1E8200;
          v12 = *(_QWORD *)(v7 + 456) != 0;
          *(_DWORD *)(v9 + 16) = 1;
          *(_DWORD *)(v9 + 20) = v11 | v12;
          v13 = *(_DWORD **)(v7 + 456);
          if (v13)
            *v13 += 2;
          *(_QWORD *)(v9 + 24) = v13;
          *(_QWORD *)(v9 + 32) = 0;
          *(_QWORD *)(v9 + 40) = 0;
          *(_QWORD *)(v9 + 48) = 0;
          *(_QWORD *)(v9 + 56) = v10;
          *(_QWORD *)(v9 + 64) = 0;
          result = (WebCore *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, v9);
          if (*(_DWORD *)(v9 + 16) == 1)
            return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          else
            --*(_DWORD *)(v9 + 16);
        }
      }
    }
  }
  return result;
}

void std::__function::__func<WebCore::MediaStreamTrack::create(WebCore::ScriptExecutionContext &,WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&)::$_0,std::allocator<WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&>,void ()(WTF::Function<void ()(void)> &&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::MediaStreamTrack::create(WebCore::ScriptExecutionContext &,WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&)::$_0,std::allocator<WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&>,void ()(WTF::Function<void ()(void)> &&)>::__clone(__n128 *a1)
{
  __n128 *v2;
  __n128 result;
  __n128 v4;

  v2 = (__n128 *)operator new(0x30uLL);
  v2->n128_u64[0] = (unint64_t)&off_1E335F980;
  result = a1[1];
  v4 = a1[2];
  v2[1] = result;
  v2[2] = v4;
  return result;
}

__n128 std::__function::__func<WebCore::MediaStreamTrack::create(WebCore::ScriptExecutionContext &,WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&)::$_0,std::allocator<WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&>,void ()(WTF::Function<void ()(void)> &&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E335F980;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::MediaStreamTrack::create(WebCore::ScriptExecutionContext &,WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&)::$_0,std::allocator<WTF::UniqueRef<WebCore::MediaStreamTrackDataHolder> &&>,void ()(WTF::Function<void ()(void)> &&)>::operator()(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  _QWORD *v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 32);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v2;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E335F9C8;
  v4[1] = v3;
  v10 = v4;
  v11 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v12);
  if (v6)
  {
    v7 = v6[4];
    if (v7)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v7 + 336))(v7, &v10);
  }
  v8 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore16MediaStreamTrack6createERNS2_22ScriptExecutionContextEONS_9UniqueRefINS2_26MediaStreamTrackDataHolderEEEENK3__0clEONS_8FunctionIFvvEEEEUlRT_E_vJS5_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E335F9C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16MediaStreamTrack6createERNS2_22ScriptExecutionContextEONS_9UniqueRefINS2_26MediaStreamTrackDataHolderEEEENK3__0clEONS_8FunctionIFvvEEEEUlRT_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335F9C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16MediaStreamTrack6createERNS2_22ScriptExecutionContextEONS_9UniqueRefINS2_26MediaStreamTrackDataHolderEEEENK3__0clEONS_8FunctionIFvvEEEEUlRT_E_vJS5_EE4callES5_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::MediaStreamTrackProcessor::VideoFrameObserverWrapper,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  WTF *v2;
  WebCore::MediaStreamTrackProcessor::VideoFrameObserver *v3;
  WTF *v4;
  void *v5;

  v2 = *(WTF **)(result + 8);
  if (v2)
  {
    v3 = (WebCore::MediaStreamTrackProcessor::VideoFrameObserver *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      WebCore::MediaStreamTrackProcessor::VideoFrameObserver::~VideoFrameObserver(v3, a2);
      WTF::fastFree(v4, v5);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackProcessor::VideoFrameObserverWrapper::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E335FA38;
  a1[1] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E335FA10;
      v6[1] = v2;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackProcessor::VideoFrameObserverWrapper::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335FA38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E335FA10;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackProcessor::VideoFrameObserverWrapper::start(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t *result;
  int v6;
  _BYTE v7[24];
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_BYTE *)(v1 + 8) = 1;
  v2 = *(_QWORD *)(v1 + 56);
  v3 = (unsigned __int8 *)(v2 + 160);
  if (__ldaxr((unsigned __int8 *)(v2 + 160)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 160);
LABEL_5:
  v8 = 0;
  v9 = v1;
  result = WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v2 + 168), &v9, (uint64_t)v7);
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 160));
  }
  if (__stlxr(0, v3))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 160));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackProcessor::VideoFrameObserver::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E335FA60;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackProcessor::VideoFrameObserver::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E335FA60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaStreamTrackProcessor::VideoFrameObserver::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  WebCore::MediaStreamTrackProcessor *v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(WebCore::MediaStreamTrackProcessor **)(v2 + 8);
    if (v3)
    {
      ++*((_DWORD *)v3 + 4);
      WebCore::MediaStreamTrackProcessor::tryEnqueueingVideoFrame(v3, a2);
      if (*((_DWORD *)v3 + 4) == 1)
        (*(void (**)(WebCore::MediaStreamTrackProcessor *))(*(_QWORD *)v3 + 16))(v3);
      else
        --*((_DWORD *)v3 + 4);
    }
  }
}

int *WebCore::toMediaTrackCapabilities@<X0>(int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD **v3;
  int *v4;
  int **v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;
  BOOL v12;
  char v13;
  double v14;
  double v15;
  BOOL v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  BOOL v31;
  int v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int *v39;
  int v40;
  int *v41;
  _DWORD *v42;
  double v43;
  double v44;
  BOOL v45;
  BOOL v46;
  int v47;
  char v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  double v61;
  double v62;
  BOOL v63;
  BOOL v64;
  int v65;
  char v66;
  int v67;
  void *v68;
  int *v69;
  int v70;
  void *v71;
  int *v72;
  int v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  WTF::StringImpl *v76;

  v3 = (_DWORD **)a2;
  v4 = result;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 20) = 0;
  *(_BYTE *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 136) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 184) = 0;
  *(_BYTE *)(a3 + 200) = 0;
  *(_BYTE *)(a3 + 204) = 0;
  *(_BYTE *)(a3 + 220) = 0;
  *(_BYTE *)(a3 + 224) = 0;
  *(_BYTE *)(a3 + 240) = 0;
  *(_BYTE *)(a3 + 304) = 0;
  *(_BYTE *)(a3 + 312) = 0;
  *(_BYTE *)(a3 + 328) = 0;
  *(_BYTE *)(a3 + 336) = 0;
  *(_BYTE *)(a3 + 368) = 0;
  *(_WORD *)(a3 + 376) = 0;
  *(_BYTE *)(a3 + 384) = 0;
  *(_BYTE *)(a3 + 400) = 0;
  *(_BYTE *)(a3 + 408) = 0;
  *(_BYTE *)(a3 + 424) = 0;
  *(_QWORD *)(a3 + 248) = 0;
  v6 = (int **)(a3 + 248);
  *(_BYTE *)(a3 + 272) = 0;
  *(_QWORD *)(a3 + 256) = 0;
  *(_QWORD *)(a3 + 264) = 0;
  if (*((_BYTE *)result + 171))
  {
    v7 = *result | 0x100000000;
    *(_QWORD *)a3 = result[1] | 0x100000000;
    *(_QWORD *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 16) = 1;
  }
  if (*((_BYTE *)result + 172))
  {
    v8 = result[2] | 0x100000000;
    *(_QWORD *)(a3 + 20) = result[3] | 0x100000000;
    *(_QWORD *)(a3 + 28) = v8;
    *(_BYTE *)(a3 + 36) = 1;
  }
  if (*((_BYTE *)result + 173))
  {
    v9 = *((double *)result + 2);
    v10 = *((double *)result + 3);
    v11 = v9 != 2.22507386e-308;
    if (v9 == 2.22507386e-308)
      v9 = 0.0;
    v12 = v10 == 1.79769313e308;
    if (v10 == 1.79769313e308)
      v10 = 0.0;
    *(double *)(a3 + 40) = v10;
    v13 = !v12;
    *(_BYTE *)(a3 + 48) = v13;
    *(double *)(a3 + 56) = v9;
    *(_BYTE *)(a3 + 64) = v11;
    *(_BYTE *)(a3 + 72) = 1;
  }
  if (*((_BYTE *)result + 174))
  {
    v14 = *((double *)result + 4);
    v15 = *((double *)result + 5);
    v16 = v14 != 2.22507386e-308;
    if (v14 == 2.22507386e-308)
      v14 = 0.0;
    v17 = v15 == 1.79769313e308;
    if (v15 == 1.79769313e308)
      v15 = 0.0;
    *(double *)(a3 + 80) = v15;
    v18 = !v17;
    *(_BYTE *)(a3 + 88) = v18;
    *(double *)(a3 + 96) = v14;
    *(_BYTE *)(a3 + 104) = v16;
    *(_BYTE *)(a3 + 112) = 1;
  }
  if (*((_BYTE *)result + 175))
  {
    v19 = result[15];
    if ((_DWORD)v19)
    {
      if (v19 >> 29)
        goto LABEL_155;
      result = (int *)WTF::fastMalloc((WTF *)(8 * v19));
      v20 = result;
      v21 = v4[15];
      if ((_DWORD)v21)
      {
        v22 = 0;
        v23 = *((_QWORD *)v4 + 6);
        result = (int *)&unk_1EE2E4000;
        a2 = (uint64_t)&unk_1EE2E4000;
        do
        {
          v25 = *(unsigned __int8 *)(v23 + v22);
          if ((v24 & 1) == 0)
          {
            WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_0::operator() const(void)::impl;
            unk_1EE2F8DC0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_1::operator() const(void)::impl;
            WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl += 2;
            qword_1EE2F8DC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_2::operator() const(void)::impl;
            unk_1EE2F8DD0 = &WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_3::operator() const(void)::impl;
            WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl += 2;
            qword_1EE2F8DD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::$_4::operator() const(void)::impl;
          }
          v26 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::VideoFacingMode)::values[v25];
          if (v26)
            *v26 += 2;
          *(_QWORD *)&v20[2 * v22] = v26;
          v24 = 1;
          ++v22;
        }
        while (v21 != v22);
      }
    }
    else
    {
      v20 = 0;
      LODWORD(v21) = 0;
    }
    if (*(_BYTE *)(a3 + 136))
    {
      v27 = *(unsigned int *)(a3 + 132);
      if ((_DWORD)v27)
      {
        v57 = *(WTF::StringImpl ***)(a3 + 120);
        v58 = 8 * v27;
        do
        {
          v59 = *v57;
          *v57 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v59 -= 2;
          }
          ++v57;
          v58 -= 8;
        }
        while (v58);
      }
      result = *(int **)(a3 + 120);
      if (result)
      {
        *(_QWORD *)(a3 + 120) = 0;
        *(_DWORD *)(a3 + 128) = 0;
        result = (int *)WTF::fastFree((WTF *)result, (void *)a2);
      }
      *(_QWORD *)(a3 + 120) = v20;
      *(_DWORD *)(a3 + 128) = v19;
      *(_DWORD *)(a3 + 132) = v21;
    }
    else
    {
      *(_QWORD *)(a3 + 120) = v20;
      *(_DWORD *)(a3 + 128) = v19;
      *(_DWORD *)(a3 + 132) = v21;
      *(_BYTE *)(a3 + 136) = 1;
    }
  }
  if (*((_BYTE *)v4 + 176))
  {
    v28 = *((double *)v4 + 8);
    v29 = *((double *)v4 + 9);
    v30 = v28 != 2.22507386e-308;
    if (v28 == 2.22507386e-308)
      v28 = 0.0;
    v31 = v29 == 1.79769313e308;
    v32 = *(unsigned __int8 *)(a3 + 176);
    if (v29 == 1.79769313e308)
      v29 = 0.0;
    *(double *)(a3 + 144) = v29;
    v33 = !v31;
    *(_BYTE *)(a3 + 152) = v33;
    *(double *)(a3 + 160) = v28;
    *(_BYTE *)(a3 + 168) = v30;
    if (!v32)
      *(_BYTE *)(a3 + 176) = 1;
  }
  if (*((_BYTE *)v4 + 177))
  {
    v34 = v4[20] | 0x100000000;
    v35 = *(unsigned __int8 *)(a3 + 200);
    *(_QWORD *)(a3 + 184) = v4[21] | 0x100000000;
    *(_QWORD *)(a3 + 192) = v34;
    if (!v35)
      *(_BYTE *)(a3 + 200) = 1;
  }
  if (*((_BYTE *)v4 + 178))
  {
    v36 = v4[22] | 0x100000000;
    v37 = *(unsigned __int8 *)(a3 + 220);
    *(_QWORD *)(a3 + 204) = v4[23] | 0x100000000;
    *(_QWORD *)(a3 + 212) = v36;
    if (!v37)
      *(_BYTE *)(a3 + 220) = 1;
  }
  if (*((_BYTE *)v4 + 179))
  {
    v38 = *((unsigned __int8 *)v4 + 96);
    result = (int *)WTF::fastMalloc((WTF *)2);
    v39 = result;
    v40 = 1;
    *(_BYTE *)result = 1;
    if (v38)
    {
      *((_BYTE *)result + 1) = 0;
      v40 = 2;
    }
    if (*(_BYTE *)(a3 + 240))
    {
      result = *(int **)(a3 + 224);
      if (result)
      {
        *(_QWORD *)(a3 + 224) = 0;
        *(_DWORD *)(a3 + 232) = 0;
        result = (int *)WTF::fastFree((WTF *)result, (void *)a2);
      }
      *(_QWORD *)(a3 + 224) = v39;
      *(_DWORD *)(a3 + 232) = 2;
      *(_DWORD *)(a3 + 236) = v40;
    }
    else
    {
      *(_QWORD *)(a3 + 224) = result;
      *(_DWORD *)(a3 + 232) = 2;
      *(_DWORD *)(a3 + 236) = v40;
      *(_BYTE *)(a3 + 240) = 1;
    }
  }
  if (*((_BYTE *)v4 + 180))
  {
    v41 = (int *)*((_QWORD *)v4 + 13);
    if (v41)
      *v41 += 2;
    result = *v6;
    *v6 = v41;
    if (result)
    {
      if (*result == 2)
        result = (int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *result -= 2;
    }
  }
  if (*((_BYTE *)v4 + 181))
  {
    v42 = *v3;
    if (*v3)
      *v42 += 2;
    result = *(int **)(a3 + 256);
    *(_QWORD *)(a3 + 256) = v42;
    if (result)
    {
      if (*result == 2)
        result = (int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *result -= 2;
    }
  }
  if (*((_BYTE *)v4 + 184))
  {
    v43 = *((double *)v4 + 15);
    v44 = *((double *)v4 + 16);
    v45 = v43 != 2.22507386e-308;
    if (v43 == 2.22507386e-308)
      v43 = 0.0;
    v46 = v44 == 1.79769313e308;
    v47 = *(unsigned __int8 *)(a3 + 304);
    if (v44 == 1.79769313e308)
      v44 = 0.0;
    *(double *)(a3 + 272) = v44;
    v48 = !v46;
    *(_BYTE *)(a3 + 280) = v48;
    *(double *)(a3 + 288) = v43;
    *(_BYTE *)(a3 + 296) = v45;
    if (!v47)
      *(_BYTE *)(a3 + 304) = 1;
  }
  if (*((_BYTE *)v4 + 185))
  {
    v49 = v4[37];
    if (!(_DWORD)v49)
    {
      v50 = 0;
      LODWORD(v51) = 0;
LABEL_108:
      if (*(_BYTE *)(a3 + 328))
      {
        v60 = *(unsigned int *)(a3 + 324);
        if ((_DWORD)v60)
        {
          v74 = *(WTF::StringImpl ***)(a3 + 312);
          v75 = 8 * v60;
          do
          {
            v76 = *v74;
            *v74 = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v76 -= 2;
            }
            ++v74;
            v75 -= 8;
          }
          while (v75);
        }
        result = *(int **)(a3 + 312);
        if (result)
        {
          *(_QWORD *)(a3 + 312) = 0;
          *(_DWORD *)(a3 + 320) = 0;
          result = (int *)WTF::fastFree((WTF *)result, (void *)a2);
        }
        *(_QWORD *)(a3 + 312) = v50;
        *(_DWORD *)(a3 + 320) = v49;
        *(_DWORD *)(a3 + 324) = v51;
      }
      else
      {
        *(_QWORD *)(a3 + 312) = v50;
        *(_DWORD *)(a3 + 320) = v49;
        *(_DWORD *)(a3 + 324) = v51;
        *(_BYTE *)(a3 + 328) = 1;
      }
      goto LABEL_114;
    }
    if (!(v49 >> 29))
    {
      result = (int *)WTF::fastMalloc((WTF *)(8 * v49));
      v50 = result;
      v51 = v4[37];
      if ((_DWORD)v51)
      {
        v52 = 0;
        v53 = *((_QWORD *)v4 + 17);
        result = &WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl;
        a2 = 1;
        do
        {
          v55 = *(unsigned __int8 *)(v53 + v52);
          if ((v54 & 1) == 0)
          {
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_0::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_0::operator() const(void)::impl;
            *(_QWORD *)algn_1EE2F4898 = &WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_1::operator() const(void)::impl;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_2::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_3::operator() const(void)::impl += 2;
            qword_1EE2F48A0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_2::operator() const(void)::impl;
            unk_1EE2F48A8 = &WebCore::convertEnumerationToString(WebCore::MeteringMode)::$_3::operator() const(void)::impl;
          }
          v56 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::MeteringMode)::values[v55];
          if (v56)
            *v56 += 2;
          *(_QWORD *)&v50[2 * v52] = v56;
          v54 = 1;
          ++v52;
        }
        while (v51 != v52);
      }
      goto LABEL_108;
    }
LABEL_155:
    __break(0xC471u);
    JUMPOUT(0x195482604);
  }
LABEL_114:
  if (*((_BYTE *)v4 + 186))
  {
    v61 = *((double *)v4 + 19);
    v62 = *((double *)v4 + 20);
    v63 = v61 != 2.22507386e-308;
    if (v61 == 2.22507386e-308)
      v61 = 0.0;
    v64 = v62 == 1.79769313e308;
    v65 = *(unsigned __int8 *)(a3 + 368);
    if (v62 == 1.79769313e308)
      v62 = 0.0;
    *(double *)(a3 + 336) = v62;
    v66 = !v64;
    *(_BYTE *)(a3 + 344) = v66;
    *(double *)(a3 + 352) = v61;
    *(_BYTE *)(a3 + 360) = v63;
    if (!v65)
      *(_BYTE *)(a3 + 368) = 1;
  }
  if (*((_BYTE *)v4 + 187))
    *(_WORD *)(a3 + 376) = *((unsigned __int8 *)v4 + 168) | 0x100;
  if (*((_BYTE *)v4 + 188))
  {
    v67 = *((unsigned __int8 *)v4 + 169);
    result = (int *)WTF::fastMalloc((WTF *)2);
    v69 = result;
    if (v67)
    {
      if (v67 == 2)
      {
        *(_WORD *)result = 256;
      }
      else if (v67 == 1)
      {
        *(_BYTE *)result = 1;
      }
      else
      {
        v67 = 0;
      }
    }
    else
    {
      *(_BYTE *)result = 0;
      v67 = 1;
    }
    if (*(_BYTE *)(a3 + 400))
    {
      result = *(int **)(a3 + 384);
      if (result)
      {
        *(_QWORD *)(a3 + 384) = 0;
        *(_DWORD *)(a3 + 392) = 0;
        result = (int *)WTF::fastFree((WTF *)result, v68);
      }
      *(_QWORD *)(a3 + 384) = v69;
      *(_DWORD *)(a3 + 392) = 2;
      *(_DWORD *)(a3 + 396) = v67;
    }
    else
    {
      *(_QWORD *)(a3 + 384) = result;
      *(_DWORD *)(a3 + 392) = 2;
      *(_DWORD *)(a3 + 396) = v67;
      *(_BYTE *)(a3 + 400) = 1;
    }
  }
  if (*((_BYTE *)v4 + 189))
  {
    v70 = *((unsigned __int8 *)v4 + 170);
    result = (int *)WTF::fastMalloc((WTF *)2);
    v72 = result;
    *(_BYTE *)result = 0;
    v73 = 1;
    if (v70)
    {
      *((_BYTE *)result + 1) = 1;
      v73 = 2;
    }
    if (*(_BYTE *)(a3 + 424))
    {
      result = *(int **)(a3 + 408);
      if (result)
      {
        *(_QWORD *)(a3 + 408) = 0;
        *(_DWORD *)(a3 + 416) = 0;
        result = (int *)WTF::fastFree((WTF *)result, v71);
      }
      *(_QWORD *)(a3 + 408) = v72;
      *(_DWORD *)(a3 + 416) = 2;
      *(_DWORD *)(a3 + 420) = v73;
    }
    else
    {
      *(_QWORD *)(a3 + 408) = result;
      *(_DWORD *)(a3 + 416) = 2;
      *(_DWORD *)(a3 + 420) = v73;
      *(_BYTE *)(a3 + 424) = 1;
    }
  }
  return result;
}

